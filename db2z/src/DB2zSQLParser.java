// Generated from src/DB2zSQLParser.g4 by ANTLR 4.7.2
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class DB2zSQLParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.7.2", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		LPAREN=1, RPAREN=2, OPENSQBRACKET=3, CLOSESQBRACKET=4, QUESTIONMARK=5, 
		EQ=6, GT=7, LT=8, GE=9, LE=10, NE=11, PLUS=12, MINUS=13, SPLAT=14, SLASH=15, 
		CONCATOP=16, DOT=17, COLON=18, SEMICOLON=19, COMMA=20, ATSIGN=21, NONNUMERICLITERAL=22, 
		INTEGERLITERAL=23, NUMERICLITERAL=24, NEWLINE=25, WS=26, SQLCOMMENT=27, 
		SQLBLOCKCOMMENTBEGIN=28, SQLBLOCKCOMMENTEND=29, ADD=30, AFTER=31, ALL=32, 
		ALLOCATE=33, ALLOW=34, ALTER=35, ALTERAND=36, ANY=37, ARRAY=38, ARRAY_EXISTS=39, 
		AS=40, ASENSITIVE=41, ASSOCIATE=42, ASUTIME=43, AT=44, AUDIT=45, AUX=46, 
		AUXILIARY=47, BEFORE=48, BEGIN=49, BETWEEN=50, BUFFERPOOL=51, BY=52, CALL=53, 
		CAPTURE=54, CASCADED=55, CASE=56, CAST=57, CCSID=58, CHAR=59, CHARACTER=60, 
		CHECK=61, CLONE=62, CLOSE=63, CLUSTER=64, COLLECTION=65, COLLID=66, COLUMN=67, 
		COMMENT=68, COMMIT=69, CONCAT=70, CONDITION=71, CONNECT=72, CONNECTION=73, 
		CONSTRAINT=74, CONTAINS=75, CONTENT=76, CONTINUE=77, CREATE=78, CUBE=79, 
		CURRENT=80, CURRENT_LC_CTYPE=81, CURRVAL=82, CURSOR=83, DATA=84, DATABASE=85, 
		DAY=86, DAYS=87, DBINFO=88, DECLARE=89, DEFAULT=90, DELETE=91, DESCRIPTOR=92, 
		DETERMINISTIC=93, DISABLE=94, DISALLOW=95, DISTINCT=96, DO=97, DOCUMENT=98, 
		DOUBLE=99, DROP=100, DSSIZE=101, DYNAMIC=102, EDITPROC=103, ELSE=104, 
		ELSEIF=105, ENCODING=106, ENCRYPTION=107, END=108, END_EXEC=109, ENDING=110, 
		ERASE=111, ESCAPE=112, EXCEPT=113, EXCEPTION=114, EXEC_SQL=115, EXECUTE=116, 
		EXISTS=117, EXIT=118, EXPLAIN=119, EXTERNAL=120, FENCED=121, FETCH=122, 
		FIELDPROC=123, FINAL=124, FIRST=125, FOR=126, FREE=127, FROM=128, FULL=129, 
		FUNCTION=130, GENERATED=131, GET=132, GLOBAL=133, GO=134, GOTO=135, GRANT=136, 
		GROUP=137, HANDLER=138, HAVING=139, HOLD=140, HOUR=141, HOURS=142, IF=143, 
		IMMEDIATE=144, IN=145, INCLUSIVE=146, INDEX=147, INDEXBP=148, INHERIT=149, 
		INNER=150, INOUT=151, INSENSITIVE=152, INSERT=153, INTERSECT=154, INTO=155, 
		IS=156, ISOBID=157, ITERATE=158, JAR=159, JOIN=160, KEEP=161, KEY=162, 
		LABEL=163, LANGUAGE=164, LAST=165, LC_CTYPE=166, LEAVE=167, LEFT=168, 
		LIKE=169, LIMIT=170, LOCAL=171, LOCALE=172, LOCATOR=173, LOCATORS=174, 
		LOCK=175, LOCKMAX=176, LOCKSIZE=177, LONG=178, LOOP=179, MAINTAINED=180, 
		MATERIALIZED=181, MICROSECOND=182, MICROSECONDS=183, MINUTEMINUTES=184, 
		MODIFIES=185, MONTH=186, MONTHS=187, NEXT=188, NEXTVAL=189, NO=190, NONE=191, 
		NOT=192, NULL=193, NULLS=194, NUMPARTS=195, OBID=196, OF=197, OFFSET=198, 
		OLD=199, ON=200, OPEN=201, OPTIMIZATION=202, OPTIMIZE=203, OR=204, ORDER=205, 
		ORGANIZATION=206, OUT=207, OUTER=208, PACKAGE=209, PADDED=210, PARAMETER=211, 
		PART=212, PARTITION=213, PARTITIONED=214, PARTITIONING=215, PATH=216, 
		PERIOD=217, PIECESIZE=218, PLAN=219, PRECISION=220, PREPARE=221, PREVVAL=222, 
		PRIOR=223, PRIQTY=224, PRIVILEGES=225, PROCEDURE=226, PROGRAM=227, PSID=228, 
		PUBLIC=229, QUERY=230, QUERYNO=231, READS=232, REFERENCES=233, REFRESH=234, 
		RELEASE=235, RENAME=236, REPEAT=237, RESIGNAL=238, RESTRICT=239, RESULT=240, 
		RESULT_SET_LOCATOR=241, RETURN=242, RETURNS=243, REVOKE=244, RIGHT=245, 
		ROLE=246, ROLLBACK=247, ROLLUP=248, ROUND_CEILING=249, ROUND_DOWN=250, 
		ROUND_FLOOR=251, ROUND_HALF_DOWN=252, ROUND_HALF_EVEN=253, ROUND_HALF_UP=254, 
		ROUND_UP=255, ROW=256, ROWSET=257, RUN=258, SAVEPOINT=259, SCHEMA=260, 
		SCRATCHPAD=261, SECOND=262, SECONDS=263, SECQTY=264, SECURITY=265, SELECT=266, 
		SENSITIVE=267, SEQUENCE=268, SET=269, SIGNAL=270, SIMPLE=271, SOME=272, 
		SOURCE=273, SPECIFIC=274, STANDARD=275, STATEMENT=276, STATIC=277, STAY=278, 
		STOGROUP=279, STORES=280, STYLE=281, SUMMARY=282, SYNONYM=283, SYSDATE=284, 
		SYSTEM=285, SYSTIMESTAMP=286, TABLE=287, TABLESPACE=288, THEN=289, TO=290, 
		TRIGGER=291, TRUNCATE=292, TYPE=293, UNDO=294, UNION=295, UNIQUE=296, 
		UNTIL=297, UPDATE=298, USING=299, VALIDPROC=300, VALUE=301, VALUES=302, 
		VARIABLE=303, VARIANT=304, VCAT=305, VERSIONING=306, VIEW=307, VOLATILE=308, 
		VOLUMES=309, WHEN=310, WHENEVER=311, WHERE=312, WHILE=313, WITH=314, WLM=315, 
		XMLCAST=316, XMLEXISTS=317, XMLNAMESPACES=318, YEAR=319, YEARS=320, ZONE=321, 
		AND=322, ARRAY_AGG=323, ASC=324, AVG=325, BIT=326, CHANGE=327, CODEUNITS16=328, 
		CODEUNITS32=329, CORR=330, CORRELATION=331, COUNT=332, COUNT_BIG=333, 
		COVAR=334, COVARIANCE=335, COVARIANCE_SAMP=336, COVAR_POP=337, COVAR_SAMP=338, 
		CS=339, CUME_DIST=340, DENSE_RANK=341, DESC=342, EBCDIC=343, EXCLUSIVE=344, 
		FIRST_VALUE=345, FOLLOWING=346, GROUPING=347, IGNORE=348, INDICATOR=349, 
		INPUT=350, ISNULL=351, LAG=352, LARGE=353, LAST_VALUE=354, LEAD=355, LISTAGG=356, 
		LOCKED=357, LOCKS=358, MEDIAN=359, MINUTES=360, MIXED=361, NOTNULL=362, 
		NTH_VALUE=363, NTILE=364, NUMERIC=365, OBJECT=366, OCTETS=367, ONLY=368, 
		OVER=369, PASSING=370, PERCENTILE_CONT=371, PERCENTILE_DISC=372, PERCENT_RANK=373, 
		PRECEDING=374, PREVIOUS=375, RANGE=376, RANK=377, RATIO_TO_REPORT=378, 
		READ=379, REF=380, REGR_AVGX=381, REGR_AVGY=382, REGR_COUNT=383, REGR_ICPT=384, 
		REGR_INTERCEPT=385, REGR_R2=386, REGR_SLOPE=387, REGR_SXX=388, REGR_SXY=389, 
		REGR_SYY=390, RESPECT=391, ROW_NUMBER=392, ROWS=393, RR=394, RS=395, SBCS=396, 
		SELECTIVITY=397, SETS=398, SHARE=399, SKIP_=400, STDDEV=401, STDDEV_POP=402, 
		STDDEV_SAMP=403, SUM=404, TOKEN=405, UNBOUNDED=406, UNPACK=407, UR=408, 
		USE=409, VAR=410, VARIANCE=411, VARIANCE_SAMP=412, VAR_POP=413, VAR_SAMP=414, 
		VARYING=415, WITHOUT=416, XML=417, XMLAGG=418, COLUMNS=419, SQLID=420, 
		ORDINALITY=421, SYSTEM_TIME=422, BUSINESS_TIME=423, MULTIPLIER=424, UNNEST=425, 
		CROSS=426, CALLER=427, CLIENT=428, POSITIONING=429, SCROLL=430, ACTION=431, 
		ASSEMBLE=432, C_=433, CALLED=434, COBOL=435, DB2=436, DEFINER=437, DISPATCH=438, 
		ENVIRONMENT=439, FAILURE=440, FAILURES=441, JAVA=442, MAIN=443, NAME=444, 
		OPTIONS=445, PARALLEL=446, PLI=447, REGISTERS=448, RESIDENT=449, SECURED=450, 
		SPECIAL=451, SQL=452, STOP=453, SUB=454, YES=455, APPLICATION=456, CHANGED=457, 
		COMPATIBILITY=458, COMPRESS=459, COPY=460, FREEPAGE=461, GBPCACHE=462, 
		INCLUDE=463, MAXVALUE=464, MINVALUE=465, PCTFREE=466, REGENERATE=467, 
		MASK=468, ENABLE=469, PERMISSION=470, ATOMIC=471, SQLEXCEPTION=472, MERGE=473, 
		MATCHED=474, SQLSTATE=475, MESSAGE_TEXT=476, OVERRIDING=477, PORTION=478, 
		DB2SQL=479, DEBUG=480, GENERAL=481, MODE_=482, REXX=483, CACHE=484, CYCLE=485, 
		INCREMENT=486, RESTART=487, DATACLAS=488, MGMTCLAS=489, REMOVE=490, STORCLAS=491, 
		ACCESS=492, ACTIVATE=493, ALWAYS=494, APPEND=495, ARCHIVE=496, BUSINESS=497, 
		CASCADE=498, CHANGES=499, CONTROL=500, DEACTIVATE=501, DEFERRED=502, EACH=503, 
		ENFORCED=504, EXTRA=505, FOREIGN=506, HIDDEN_=507, HISTORY=508, ID=509, 
		IDENTITY=510, IMPLICITLY=511, INITIALLY=512, INLINE=513, OPERATION=514, 
		ORGANIZE=515, OVERLAPS=516, PACKAGE_NAME=517, PACKAGE_SCHEMA=518, PACKAGE_VERSION=519, 
		PRIMARY=520, RESET=521, ROTATE=522, START=523, SYSIBM=524, TRANSACTION=525, 
		XMLSCHEMA=526, ELEMENT=527, URL=528, NAMESPACE=529, LOCATION=530, SYSXSR=531, 
		ALGORITHM=532, FIXEDLENGTH=533, HUFFMAN=534, LOB=535, LOG=536, LOGGED=537, 
		MAXPARTITIONS=538, MAXROWS=539, MEMBER=540, MOVE=541, PAGE=542, PAGENUM=543, 
		PENDING=544, RELATIVE=545, SEGSIZE=546, TRACKMOD=547, ADDRESS=548, ATTRIBUTES=549, 
		AUTHENTICATION=550, AUTHID=551, CONTEXT=552, JOBNAME=553, OWNER=554, PROFILE=555, 
		QUALIFIER=556, SERVAUTH=557, TRUSTED=558, SECTION=559, ACTIVE=560, VERSION=561, 
		ALIAS=562, WORK=563, WORKFILE=564, SYSDEFLT=565, NULTERM=566, STRUCTURE=567, 
		GENERIC=568, TEMPORARY=569, DEFER=570, DEFINE=571, EXCLUDE=572, GENERATE=573, 
		KEYS=574, XMLPATTERN=575, ABS=576, ABSVAL=577, ACOS=578, ADD_DAYS=579, 
		ADD_MONTHS=580, ARRAY_DELETE=581, ARRAY_FIRST=582, ARRAY_LAST=583, ARRAY_NEXT=584, 
		ARRAY_PRIOR=585, ARRAY_TRIM=586, ASCII=587, ASCII_CHR=588, ASCIISTR=589, 
		ASCII_STR=590, ASIN=591, ATAN=592, ATAN2=593, ATANH=594, BIGINT=595, BINARY=596, 
		BITAND=597, BITANDNOT=598, BITNOT=599, BITOR=600, BITXOR=601, BLOB=602, 
		BTRIM=603, CARDINALITY=604, CCSID_ENCODING=605, CEIL=606, CEILING=607, 
		CHAR9=608, CHARACTER_LENGTH=609, CHAR_LENGTH=610, CHR=611, CLOB=612, COALESCE=613, 
		COLLATION_KEY=614, COMPARE_DECFLOAT=615, COS=616, COSH=617, DATE=618, 
		DAYOFMONTH=619, DAYOFWEEK=620, DAYOFWEEK_ISO=621, DAYOFYEAR=622, DAYS_BETWEEN=623, 
		DBCLOB=624, DEC=625, DECFLOAT=626, DECFLOAT_FORMAT=627, DECFLOAT_SORTKEY=628, 
		DECIMAL=629, DECODE=630, DECRYPT_BINARY=631, DECRYPT_BIT=632, DECRYPT_CHAR=633, 
		DECRYPT_DATAKEY_BIGINT=634, DECRYPT_DATAKEY_BIT=635, DECRYPT_DATAKEY_CLOB=636, 
		DECRYPT_DATAKEY_DBCLOB=637, DECRYPT_DATAKEY_DECIMAL=638, DECRYPT_DATAKEY_INTEGER=639, 
		DECRYPT_DATAKEY_VARCHAR=640, DECRYPT_DATAKEY_VARGRAPHIC=641, DECRYPT_DB=642, 
		DEGREES=643, DIFFERENCE=644, DIGITS=645, DOUBLE_PRECISION=646, DSN_XMLVALIDATE=647, 
		EBCDIC_CHR=648, EBCDIC_STR=649, ENCRYPT_DATAKEY=650, ENCRYPT_TDES=651, 
		EXP=652, EXTRACT=653, FLOAT=654, FLOOR=655, GENERATE_UNIQUE=656, GENERATE_UNIQUE_BINARY=657, 
		GETHINT=658, GETVARIABLE=659, GRAPHIC=660, GREATEST=661, HASH=662, HASH_CRC32=663, 
		HASH_MD5=664, HASH_SHA1=665, HASH_SHA256=666, HEX=667, IDENTITY_VAL_LOCAL=668, 
		IFNULL=669, INSTR=670, INT=671, INTEGER=672, JULIAN_DAY=673, LAST_DAY=674, 
		LCASE=675, LEAST=676, LENGTH=677, LN=678, LOCATE=679, LOCATE_IN_STRING=680, 
		LOG10=681, LOWER=682, LPAD=683, LTRIM=684, MAX=685, MAX_CARDINALITY=686, 
		MIDNIGHT_SECONDS=687, MIN=688, MINUTE=689, MOD=690, MONTHS_BETWEEN=691, 
		MQREAD=692, MQREADCLOB=693, MQRECEIVE=694, MQRECEIVECLOB=695, MQSEND=696, 
		MULTIPLY_ALT=697, NEXT_DAY=698, NEXT_MONTH=699, NORMALIZE_DECFLOAT=700, 
		NORMALIZE_STRING=701, NULLIF=702, NVL=703, OVERLAY=704, PACK=705, POSITION=706, 
		POSSTR=707, POW=708, POWER=709, QUANTIZE=710, QUARTER=711, RADIANS=712, 
		RAISE_ERROR=713, RAND=714, RANDOM=715, REAL=716, REGEXP_COUNT=717, REGEXP_INSTR=718, 
		REGEXP_LIKE=719, REGEXP_REPLACE=720, REGEXP_SUBSTR=721, REPLACE=722, RID=723, 
		ROUND=724, ROUND_TIMESTAMP=725, ROWID=726, RPAD=727, RTRIM=728, SCORE=729, 
		SIGN=730, SIN=731, SINH=732, SMALLINT=733, SOAPHTTPC=734, SOAPHTTPNC=735, 
		SOAPHTTPNV=736, SOAPHTTPV=737, SOUNDEX=738, SPACE=739, SQRT=740, STRIP=741, 
		STRLEFT=742, STRPOS=743, STRRIGHT=744, SUBSTR=745, SUBSTRING=746, TAN=747, 
		TANH=748, TIME=749, TIMESTAMP=750, TIMESTAMPADD=751, TIMESTAMPDIFF=752, 
		TIMESTAMP_FORMAT=753, TIMESTAMP_ISO=754, TIMESTAMP_TZ=755, TO_CHAR=756, 
		TO_CLOB=757, TO_DATE=758, TO_NUMBER=759, TOTALORDER=760, TO_TIMESTAMP=761, 
		TRANSLATE=762, TRIM=763, TRIM_ARRAY=764, TRUNC=765, TRUNC_TIMESTAMP=766, 
		UCASE=767, UNICODE=768, UNICODE_STR=769, UNISTR=770, UPPER=771, VARBINARY=772, 
		VARCHAR=773, VARCHAR9=774, VARCHAR_BIT_FORMAT=775, VARCHAR_FORMAT=776, 
		VARGRAPHIC=777, VERIFY_GROUP_FOR_USER=778, VERIFY_ROLE_FOR_USER=779, VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER=780, 
		WEEK=781, WEEK_ISO=782, WRAP=783, XMLATTRIBUTES=784, XMLCOMMENT=785, XMLCONCAT=786, 
		XMLDOCUMENT=787, XMLELEMENT=788, XMLFOREST=789, XMLMODIFY=790, XMLPARSE=791, 
		XMLPI=792, XMLQUERY=793, XMLSERIALIZE=794, XMLTEXT=795, XMLXSROBJECTID=796, 
		XSLTRANSFORM=797, CURRENT_ACCELERATOR=798, CURRENT_APPLICATION_COMPATIBILITY=799, 
		CURRENT_APPLICATION_ENCODING_SCHEME=800, CURRENT_CLIENT_ACCTNG=801, CURRENT_CLIENT_APPLNAME=802, 
		CURRENT_CLIENT_CORR_TOKEN=803, CURRENT_CLIENT_USERID=804, CURRENT_CLIENT_WRKSTNNAME=805, 
		CURRENT_DATE=806, CURRENT_DEBUG_MODE=807, CURRENT_DECFLOAT_ROUNDING_MODE=808, 
		CURRENT_DEGREE=809, CURRENT_EXPLAIN_MODE=810, CURRENT_GET_ACCEL_ARCHIVE=811, 
		CURRENT_LOCALE_LC_CTYPE=812, CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION=813, 
		CURRENT_MEMBER=814, CURRENT_OPTIMIZATION_HINT=815, CURRENT_PACKAGE_PATH=816, 
		CURRENT_PACKAGESET=817, CURRENT_PATH=818, CURRENT_PRECISION=819, CURRENT_QUERY_ACCELERATION=820, 
		CURRENT_QUERY_ACCELERATION_WAITFORDATA=821, CURRENT_REFRESH_AGE=822, CURRENT_ROUTINE_VERSION=823, 
		CURRENT_RULES=824, CURRENT_SCHEMA=825, CURRENT_SERVER=826, CURRENT_SQLID=827, 
		CURRENT_TEMPORAL_BUSINESS_TIME=828, CURRENT_TEMPORAL_SYSTEM_TIME=829, 
		CURRENT_TIME=830, CURRENT_TIMESTAMP=831, CURRENT_TIME_ZONE=832, ENCRYPTION_PASSWORD=833, 
		SESSION_TIME_ZONE=834, SESSION_USER=835, USER=836, ADMIN_TASK_LIST=837, 
		ADMIN_TASK_OUTPUT=838, ADMIN_TASK_STATUS=839, BLOCKING_THREADS=840, MQREADALL=841, 
		MQREADALLCLOB=842, MQRECEIVEALL=843, MQRECEIVEALLCLOB=844, XMLTABLE=845, 
		SQLIDENTIFIER=846;
	public static final int
		RULE_startRule = 0, RULE_sqlStatement = 1, RULE_query = 2, RULE_declareCursorStatement = 3, 
		RULE_cursorName = 4, RULE_statementName = 5, RULE_holdability = 6, RULE_returnability = 7, 
		RULE_rowsetPositioning = 8, RULE_declareTableStatement = 9, RULE_notNullPhrase = 10, 
		RULE_declareStatementStatement = 11, RULE_allocateCursorStatement = 12, 
		RULE_rsLocatorVariable = 13, RULE_alterDatabaseStatement = 14, RULE_alterFunctionStatement = 15, 
		RULE_alterIndexStatement = 16, RULE_alterMaskStatement = 17, RULE_alterPermissionStatement = 18, 
		RULE_alterProcedureStatement = 19, RULE_alterSequenceStatement = 20, RULE_alterStogroupStatement = 21, 
		RULE_alterTableStatement = 22, RULE_alterTablespaceStatement = 23, RULE_alterTriggerStatement = 24, 
		RULE_alterTrustedContextStatement = 25, RULE_alterViewStatement = 26, 
		RULE_associateLocatorsStatement = 27, RULE_beginDeclareSectionStatement = 28, 
		RULE_callStatement = 29, RULE_closeStatement = 30, RULE_commentStatement = 31, 
		RULE_commitStatement = 32, RULE_connectStatement = 33, RULE_createAliasStatement = 34, 
		RULE_createAuxiliaryTableStatement = 35, RULE_createDatabaseStatement = 36, 
		RULE_createFunctionStatement = 37, RULE_createFunctionStatementExternalScalar = 38, 
		RULE_createFunctionStatementExternalTable = 39, RULE_createFunctionStatementSourced = 40, 
		RULE_createFunctionStatementInlineSqlScalar = 41, RULE_createGlobalTemporaryTableStatement = 42, 
		RULE_createIndexStatement = 43, RULE_createLobTablespaceStatement = 44, 
		RULE_createMaskStatement = 45, RULE_createPermissionStatement = 46, RULE_createProcedureStatement = 47, 
		RULE_globalTemporaryColumnDefinition = 48, RULE_parameterDeclaration1 = 49, 
		RULE_parameterDeclaration2 = 50, RULE_parameterDeclaration3 = 51, RULE_createFunctionStatementExternalScalarOptions = 52, 
		RULE_externalNameOption1 = 53, RULE_externalNameOption2 = 54, RULE_dynamicResultSetOption = 55, 
		RULE_languageOption1 = 56, RULE_languageOption2 = 57, RULE_languageOption3 = 58, 
		RULE_languageOption4 = 59, RULE_languageOption5 = 60, RULE_parameterStyleOption1 = 61, 
		RULE_parameterStyleOption2 = 62, RULE_parameterStyleOption3 = 63, RULE_deterministicOption = 64, 
		RULE_fencedOption = 65, RULE_nullInputOption1 = 66, RULE_nullInputOption2 = 67, 
		RULE_debugOption = 68, RULE_sqlDataOption1 = 69, RULE_sqlDataOption2 = 70, 
		RULE_sqlDataOption3 = 71, RULE_externalActionOption = 72, RULE_packagePathOption = 73, 
		RULE_scratchpadOption = 74, RULE_finalCallOption = 75, RULE_parallelOption1 = 76, 
		RULE_parallelOption2 = 77, RULE_dbinfoOption = 78, RULE_cardinalityOption = 79, 
		RULE_collectionIdOption = 80, RULE_wlmEnvironmentOption1 = 81, RULE_wlmEnvironmentOption2 = 82, 
		RULE_asuTimeOption = 83, RULE_stayResidentOption = 84, RULE_programTypeOption = 85, 
		RULE_securityOption = 86, RULE_stopAfterFailureOption = 87, RULE_runOptionsOption = 88, 
		RULE_commitOnReturnOption = 89, RULE_specialRegistersOption = 90, RULE_dispatchOption = 91, 
		RULE_securedOption = 92, RULE_specificNameOption1 = 93, RULE_specificNameOption2 = 94, 
		RULE_parameterOption1 = 95, RULE_parameterOption2 = 96, RULE_createFunctionStatementExternalTableOptions = 97, 
		RULE_createFunctionStatementSourcedOptions = 98, RULE_createFunctionStatementInlineSqlScalarOptions = 99, 
		RULE_sequenceAlias = 100, RULE_tableAlias = 101, RULE_authorization = 102, 
		RULE_searchedDelete = 103, RULE_positionedDelete = 104, RULE_deleteStatement = 105, 
		RULE_insertStatement = 106, RULE_mergeStatement = 107, RULE_searchedUpdate = 108, 
		RULE_positionedUpdate = 109, RULE_updateStatement = 110, RULE_sourceValues = 111, 
		RULE_valuesSingleRow = 112, RULE_valuesMultipleRow = 113, RULE_matchingCondition = 114, 
		RULE_modificationOperation = 115, RULE_assignmentClause = 116, RULE_updateOperation = 117, 
		RULE_deleteOperation = 118, RULE_insertOperation = 119, RULE_signalStatement = 120, 
		RULE_signalInformation = 121, RULE_valuesList1 = 122, RULE_valuesList2 = 123, 
		RULE_valuesList3 = 124, RULE_valuesList4 = 125, RULE_includeColumns = 126, 
		RULE_multipleRowInsert = 127, RULE_regenerateClause = 128, RULE_alterIndexOptions = 129, 
		RULE_bufferpoolOption = 130, RULE_closeOption = 131, RULE_copyOption = 132, 
		RULE_dssizeOption = 133, RULE_piecesizeOption = 134, RULE_clusterOption = 135, 
		RULE_paddedOption = 136, RULE_compressOption = 137, RULE_defineOption = 138, 
		RULE_locksizeOption = 139, RULE_lockmaxOption = 140, RULE_enableDisableOption = 141, 
		RULE_loggedOption = 142, RULE_notAtomicPhrase = 143, RULE_alterIndexPartitionOptions = 144, 
		RULE_usingSpecification1 = 145, RULE_freeSpecification = 146, RULE_gbpcacheSpecification = 147, 
		RULE_partitionElement = 148, RULE_applCompatValue = 149, RULE_functionLevel = 150, 
		RULE_functionParameterType = 151, RULE_functionDataType = 152, RULE_functionBuiltInType = 153, 
		RULE_procedureBuiltinType = 154, RULE_functionOptionList = 155, RULE_procedureOptionList = 156, 
		RULE_createProcedureOptionList = 157, RULE_procedureDataType = 158, RULE_sequenceOptionList = 159, 
		RULE_stogroupOptionList = 160, RULE_tableOptionList = 161, RULE_tablespaceOptionList = 162, 
		RULE_trustedContextOptionList = 163, RULE_databaseOptionList = 164, RULE_createIndexOptionList = 165, 
		RULE_createLobTablespaceOptionList = 166, RULE_usingSpecification2 = 167, 
		RULE_xmlIndexSpecification = 168, RULE_xmlPatternClause = 169, RULE_alterAttributesOptions = 170, 
		RULE_addAttributesOptions = 171, RULE_dropAttributesOptions = 172, RULE_includeColumnPhrase = 173, 
		RULE_userClause = 174, RULE_userClauseAddOptions = 175, RULE_userClauseReplaceOptions = 176, 
		RULE_userClauseDropOptions = 177, RULE_useOptions = 178, RULE_alterPartitionClause = 179, 
		RULE_usingBlock = 180, RULE_freeBlock = 181, RULE_moveTableClause = 182, 
		RULE_gbpcacheBlock = 183, RULE_aliasDesignator = 184, RULE_multipleColumnList = 185, 
		RULE_functionDesignator = 186, RULE_parameterType = 187, RULE_columnDefinitionOptionList1 = 188, 
		RULE_columnDefinitionOptionList2 = 189, RULE_columnConstraint = 190, RULE_generatedClause = 191, 
		RULE_asIdentityClause = 192, RULE_asIdentityClauseOptionList = 193, RULE_asRowChangeTimestampClause = 194, 
		RULE_asRowTransactionStartIDClause = 195, RULE_asRowTransactionTimestampClause = 196, 
		RULE_asGeneratedExpressionClause = 197, RULE_nonDeterministicExpression = 198, 
		RULE_nonDeterministicExpressionSessionVariable = 199, RULE_columnAlteration = 200, 
		RULE_columnAlterationOptionList = 201, RULE_alteredDataType = 202, RULE_dataType = 203, 
		RULE_builtInType = 204, RULE_sqlDataType = 205, RULE_xmlTypeModifier = 206, 
		RULE_xmlSchemaSpecification = 207, RULE_xmlElementName = 208, RULE_registeredXmlSchemaName = 209, 
		RULE_targetNamespace = 210, RULE_schemaLocation = 211, RULE_identityAlteration = 212, 
		RULE_uniqueConstraint = 213, RULE_referentialConstraint = 214, RULE_referencesClause = 215, 
		RULE_checkConstraint = 216, RULE_partitioningClause = 217, RULE_partitionExpression = 218, 
		RULE_partitionLimitKey = 219, RULE_partitioningPhrase = 220, RULE_partitionHashSpace = 221, 
		RULE_alterHashOrganization = 222, RULE_partitioningClauseElement = 223, 
		RULE_partitionClause = 224, RULE_rotatePartitionClause = 225, RULE_extraRowOption = 226, 
		RULE_materializedQueryDefinition = 227, RULE_materializedQueryAlteration = 228, 
		RULE_refreshableTableOptions = 229, RULE_refreshableTableOptionsList = 230, 
		RULE_materializedQueryTableAlteration = 231, RULE_periodDefinition = 232, 
		RULE_columnDefinition = 233, RULE_externalProgramName = 234, RULE_packagePath = 235, 
		RULE_collectionID = 236, RULE_runTimeOptions = 237, RULE_comparisonOperator = 238, 
		RULE_operator = 239, RULE_expression = 240, RULE_keyExpression = 241, 
		RULE_rowChangeExpression = 242, RULE_sequenceReference = 243, RULE_functionInvocation = 244, 
		RULE_scalarFunctionInvocation = 245, RULE_aggregateFunctionInvocation = 246, 
		RULE_regressionFunctionInvocation = 247, RULE_externalFunctionInvocation = 248, 
		RULE_labeledDuration = 249, RULE_xmlCastSpecification = 250, RULE_arrayElementSpecification = 251, 
		RULE_arrayIndex = 252, RULE_arrayConstructor = 253, RULE_olapSpecification = 254, 
		RULE_orderedOlapSpecification = 255, RULE_olapSpecificationFunction = 256, 
		RULE_lagFunction = 257, RULE_leadFunction = 258, RULE_respectNullsClause = 259, 
		RULE_windowPartitionClause = 260, RULE_windowOrderClause = 261, RULE_windowOrderClauseQualifier = 262, 
		RULE_numberingSpecification = 263, RULE_aggregationSpecification = 264, 
		RULE_aggregateFunction = 265, RULE_regressionFunction = 266, RULE_olapColumnFunction = 267, 
		RULE_firstValueFunction = 268, RULE_lastValueFunction = 269, RULE_nthValueFunction = 270, 
		RULE_ratioToReportFunction = 271, RULE_windowAggregationGroupClause = 272, 
		RULE_groupStart = 273, RULE_groupBetween = 274, RULE_groupEnd = 275, RULE_groupBound1 = 276, 
		RULE_groupBound2 = 277, RULE_unboundedPreceding = 278, RULE_unboundedFollowing = 279, 
		RULE_boundedPreceding = 280, RULE_boundedFollowing = 281, RULE_currentRow = 282, 
		RULE_scalarFunction = 283, RULE_tableFunction = 284, RULE_specialRegister = 285, 
		RULE_xmltableFunctionSpecification = 286, RULE_rowXqueryExpressionConstant = 287, 
		RULE_rowXqueryArgument = 288, RULE_xqueryContextItemExpression = 289, 
		RULE_xqueryVariableExpression = 290, RULE_xmlTableRegularColumnDefinition = 291, 
		RULE_defaultClause = 292, RULE_defaultClause1 = 293, RULE_defaultClause2 = 294, 
		RULE_defaultClauseAllowables = 295, RULE_distinctTypeCastFunctionName = 296, 
		RULE_columnXqueryExpressionConstant = 297, RULE_xmlTableOrdinalityColumnDefinition = 298, 
		RULE_xmlnamespacesDeclaration = 299, RULE_xmlnamespacesFunctionSpecification = 300, 
		RULE_xmlnamespacesFunctionArguments = 301, RULE_namespaceUri = 302, RULE_namespacePrefix = 303, 
		RULE_timeZoneSpecificExpression = 304, RULE_timeZoneExpressionSubset = 305, 
		RULE_caseExpression = 306, RULE_resultExpression = 307, RULE_searchedWhenClause = 308, 
		RULE_simpleWhenClause = 309, RULE_searchCondition = 310, RULE_checkCondition = 311, 
		RULE_predicate = 312, RULE_basicPredicate = 313, RULE_rowValueExpression = 314, 
		RULE_quantifiedPredicate = 315, RULE_arrayExistsPredicate = 316, RULE_betweenPredicate = 317, 
		RULE_distinctPredicate = 318, RULE_existsPredicate = 319, RULE_inPredicate = 320, 
		RULE_likePredicate = 321, RULE_nullPredicate = 322, RULE_xmlExistsPredicate = 323, 
		RULE_arrayExpression = 324, RULE_castSpecification = 325, RULE_parameterMarker = 326, 
		RULE_castDataType = 327, RULE_castBuiltInType = 328, RULE_integerInParens = 329, 
		RULE_length = 330, RULE_ccsidQualifier = 331, RULE_forDataQualifier = 332, 
		RULE_distinctTypeName = 333, RULE_arrayType = 334, RULE_literal = 335, 
		RULE_ccsidValue = 336, RULE_columnName = 337, RULE_sourceColumnName = 338, 
		RULE_targetColumnName = 339, RULE_newColumnName = 340, RULE_beginColumnName = 341, 
		RULE_endColumnName = 342, RULE_correlationName = 343, RULE_locationName = 344, 
		RULE_schemaName = 345, RULE_tableName = 346, RULE_alterTableName = 347, 
		RULE_auxTableName = 348, RULE_historyTableName = 349, RULE_cloneTableName = 350, 
		RULE_archiveTableName = 351, RULE_viewName = 352, RULE_programName = 353, 
		RULE_packageName = 354, RULE_planName = 355, RULE_typeName = 356, RULE_variableName = 357, 
		RULE_aliasName = 358, RULE_constraintName = 359, RULE_routineVersionID = 360, 
		RULE_versionID = 361, RULE_indexName = 362, RULE_maskName = 363, RULE_permissionName = 364, 
		RULE_procedureName = 365, RULE_sequenceName = 366, RULE_memberName = 367, 
		RULE_databaseName = 368, RULE_tablespaceName = 369, RULE_catalogName = 370, 
		RULE_triggerName = 371, RULE_contextName = 372, RULE_authorizationName = 373, 
		RULE_profileName = 374, RULE_roleName = 375, RULE_seclabelName = 376, 
		RULE_parameterName = 377, RULE_addressValue = 378, RULE_jobnameValue = 379, 
		RULE_servauthValue = 380, RULE_encryptionValue = 381, RULE_bpName = 382, 
		RULE_stogroupName = 383, RULE_dcName = 384, RULE_mcName = 385, RULE_scName = 386, 
		RULE_volumeID = 387, RULE_keyLabelName = 388, RULE_functionName = 389, 
		RULE_specificName = 390, RULE_hostVariable = 391, RULE_hostIdentifier = 392, 
		RULE_hostStructure = 393, RULE_variable = 394, RULE_intoClause = 395, 
		RULE_correlationClause = 396, RULE_fromClause = 397, RULE_tableReference = 398, 
		RULE_singleTableReference = 399, RULE_periodSpecification = 400, RULE_periodClause = 401, 
		RULE_nestedTableExpression = 402, RULE_dataChangeTableReference = 403, 
		RULE_tableFunctionReference = 404, RULE_tableUdfCardinalityClause = 405, 
		RULE_typedCorrelationClause = 406, RULE_tableLocatorReference = 407, RULE_xmltableExpression = 408, 
		RULE_collectionDerivedTable = 409, RULE_joinCondition = 410, RULE_fullJoinExpression = 411, 
		RULE_castFunction = 412, RULE_ordinaryArrayExpression = 413, RULE_associativeArrayExpression = 414, 
		RULE_comparison = 415, RULE_whereClause = 416, RULE_groupByClause = 417, 
		RULE_havingClause = 418, RULE_groupingExpression = 419, RULE_groupingSets = 420, 
		RULE_groupingSetsGroup = 421, RULE_superGroups = 422, RULE_selectColumns = 423, 
		RULE_unpackedRow = 424, RULE_selectClause = 425, RULE_subSelect = 426, 
		RULE_selectIntoStatement = 427, RULE_selectStatement = 428, RULE_commonTableExpression = 429, 
		RULE_updateClause = 430, RULE_readOnlyClause = 431, RULE_optimizeClause = 432, 
		RULE_isolationClause = 433, RULE_lockClause = 434, RULE_skipLockedDataClause = 435, 
		RULE_querynoClause = 436, RULE_scalarFullSelect = 437, RULE_fullSelect = 438, 
		RULE_valuesClause = 439, RULE_orderByClause = 440, RULE_sortKey = 441, 
		RULE_offsetClause = 442, RULE_fetchClause = 443, RULE_identifier = 444, 
		RULE_sqlKeyword = 445;
	private static String[] makeRuleNames() {
		return new String[] {
			"startRule", "sqlStatement", "query", "declareCursorStatement", "cursorName", 
			"statementName", "holdability", "returnability", "rowsetPositioning", 
			"declareTableStatement", "notNullPhrase", "declareStatementStatement", 
			"allocateCursorStatement", "rsLocatorVariable", "alterDatabaseStatement", 
			"alterFunctionStatement", "alterIndexStatement", "alterMaskStatement", 
			"alterPermissionStatement", "alterProcedureStatement", "alterSequenceStatement", 
			"alterStogroupStatement", "alterTableStatement", "alterTablespaceStatement", 
			"alterTriggerStatement", "alterTrustedContextStatement", "alterViewStatement", 
			"associateLocatorsStatement", "beginDeclareSectionStatement", "callStatement", 
			"closeStatement", "commentStatement", "commitStatement", "connectStatement", 
			"createAliasStatement", "createAuxiliaryTableStatement", "createDatabaseStatement", 
			"createFunctionStatement", "createFunctionStatementExternalScalar", "createFunctionStatementExternalTable", 
			"createFunctionStatementSourced", "createFunctionStatementInlineSqlScalar", 
			"createGlobalTemporaryTableStatement", "createIndexStatement", "createLobTablespaceStatement", 
			"createMaskStatement", "createPermissionStatement", "createProcedureStatement", 
			"globalTemporaryColumnDefinition", "parameterDeclaration1", "parameterDeclaration2", 
			"parameterDeclaration3", "createFunctionStatementExternalScalarOptions", 
			"externalNameOption1", "externalNameOption2", "dynamicResultSetOption", 
			"languageOption1", "languageOption2", "languageOption3", "languageOption4", 
			"languageOption5", "parameterStyleOption1", "parameterStyleOption2", 
			"parameterStyleOption3", "deterministicOption", "fencedOption", "nullInputOption1", 
			"nullInputOption2", "debugOption", "sqlDataOption1", "sqlDataOption2", 
			"sqlDataOption3", "externalActionOption", "packagePathOption", "scratchpadOption", 
			"finalCallOption", "parallelOption1", "parallelOption2", "dbinfoOption", 
			"cardinalityOption", "collectionIdOption", "wlmEnvironmentOption1", "wlmEnvironmentOption2", 
			"asuTimeOption", "stayResidentOption", "programTypeOption", "securityOption", 
			"stopAfterFailureOption", "runOptionsOption", "commitOnReturnOption", 
			"specialRegistersOption", "dispatchOption", "securedOption", "specificNameOption1", 
			"specificNameOption2", "parameterOption1", "parameterOption2", "createFunctionStatementExternalTableOptions", 
			"createFunctionStatementSourcedOptions", "createFunctionStatementInlineSqlScalarOptions", 
			"sequenceAlias", "tableAlias", "authorization", "searchedDelete", "positionedDelete", 
			"deleteStatement", "insertStatement", "mergeStatement", "searchedUpdate", 
			"positionedUpdate", "updateStatement", "sourceValues", "valuesSingleRow", 
			"valuesMultipleRow", "matchingCondition", "modificationOperation", "assignmentClause", 
			"updateOperation", "deleteOperation", "insertOperation", "signalStatement", 
			"signalInformation", "valuesList1", "valuesList2", "valuesList3", "valuesList4", 
			"includeColumns", "multipleRowInsert", "regenerateClause", "alterIndexOptions", 
			"bufferpoolOption", "closeOption", "copyOption", "dssizeOption", "piecesizeOption", 
			"clusterOption", "paddedOption", "compressOption", "defineOption", "locksizeOption", 
			"lockmaxOption", "enableDisableOption", "loggedOption", "notAtomicPhrase", 
			"alterIndexPartitionOptions", "usingSpecification1", "freeSpecification", 
			"gbpcacheSpecification", "partitionElement", "applCompatValue", "functionLevel", 
			"functionParameterType", "functionDataType", "functionBuiltInType", "procedureBuiltinType", 
			"functionOptionList", "procedureOptionList", "createProcedureOptionList", 
			"procedureDataType", "sequenceOptionList", "stogroupOptionList", "tableOptionList", 
			"tablespaceOptionList", "trustedContextOptionList", "databaseOptionList", 
			"createIndexOptionList", "createLobTablespaceOptionList", "usingSpecification2", 
			"xmlIndexSpecification", "xmlPatternClause", "alterAttributesOptions", 
			"addAttributesOptions", "dropAttributesOptions", "includeColumnPhrase", 
			"userClause", "userClauseAddOptions", "userClauseReplaceOptions", "userClauseDropOptions", 
			"useOptions", "alterPartitionClause", "usingBlock", "freeBlock", "moveTableClause", 
			"gbpcacheBlock", "aliasDesignator", "multipleColumnList", "functionDesignator", 
			"parameterType", "columnDefinitionOptionList1", "columnDefinitionOptionList2", 
			"columnConstraint", "generatedClause", "asIdentityClause", "asIdentityClauseOptionList", 
			"asRowChangeTimestampClause", "asRowTransactionStartIDClause", "asRowTransactionTimestampClause", 
			"asGeneratedExpressionClause", "nonDeterministicExpression", "nonDeterministicExpressionSessionVariable", 
			"columnAlteration", "columnAlterationOptionList", "alteredDataType", 
			"dataType", "builtInType", "sqlDataType", "xmlTypeModifier", "xmlSchemaSpecification", 
			"xmlElementName", "registeredXmlSchemaName", "targetNamespace", "schemaLocation", 
			"identityAlteration", "uniqueConstraint", "referentialConstraint", "referencesClause", 
			"checkConstraint", "partitioningClause", "partitionExpression", "partitionLimitKey", 
			"partitioningPhrase", "partitionHashSpace", "alterHashOrganization", 
			"partitioningClauseElement", "partitionClause", "rotatePartitionClause", 
			"extraRowOption", "materializedQueryDefinition", "materializedQueryAlteration", 
			"refreshableTableOptions", "refreshableTableOptionsList", "materializedQueryTableAlteration", 
			"periodDefinition", "columnDefinition", "externalProgramName", "packagePath", 
			"collectionID", "runTimeOptions", "comparisonOperator", "operator", "expression", 
			"keyExpression", "rowChangeExpression", "sequenceReference", "functionInvocation", 
			"scalarFunctionInvocation", "aggregateFunctionInvocation", "regressionFunctionInvocation", 
			"externalFunctionInvocation", "labeledDuration", "xmlCastSpecification", 
			"arrayElementSpecification", "arrayIndex", "arrayConstructor", "olapSpecification", 
			"orderedOlapSpecification", "olapSpecificationFunction", "lagFunction", 
			"leadFunction", "respectNullsClause", "windowPartitionClause", "windowOrderClause", 
			"windowOrderClauseQualifier", "numberingSpecification", "aggregationSpecification", 
			"aggregateFunction", "regressionFunction", "olapColumnFunction", "firstValueFunction", 
			"lastValueFunction", "nthValueFunction", "ratioToReportFunction", "windowAggregationGroupClause", 
			"groupStart", "groupBetween", "groupEnd", "groupBound1", "groupBound2", 
			"unboundedPreceding", "unboundedFollowing", "boundedPreceding", "boundedFollowing", 
			"currentRow", "scalarFunction", "tableFunction", "specialRegister", "xmltableFunctionSpecification", 
			"rowXqueryExpressionConstant", "rowXqueryArgument", "xqueryContextItemExpression", 
			"xqueryVariableExpression", "xmlTableRegularColumnDefinition", "defaultClause", 
			"defaultClause1", "defaultClause2", "defaultClauseAllowables", "distinctTypeCastFunctionName", 
			"columnXqueryExpressionConstant", "xmlTableOrdinalityColumnDefinition", 
			"xmlnamespacesDeclaration", "xmlnamespacesFunctionSpecification", "xmlnamespacesFunctionArguments", 
			"namespaceUri", "namespacePrefix", "timeZoneSpecificExpression", "timeZoneExpressionSubset", 
			"caseExpression", "resultExpression", "searchedWhenClause", "simpleWhenClause", 
			"searchCondition", "checkCondition", "predicate", "basicPredicate", "rowValueExpression", 
			"quantifiedPredicate", "arrayExistsPredicate", "betweenPredicate", "distinctPredicate", 
			"existsPredicate", "inPredicate", "likePredicate", "nullPredicate", "xmlExistsPredicate", 
			"arrayExpression", "castSpecification", "parameterMarker", "castDataType", 
			"castBuiltInType", "integerInParens", "length", "ccsidQualifier", "forDataQualifier", 
			"distinctTypeName", "arrayType", "literal", "ccsidValue", "columnName", 
			"sourceColumnName", "targetColumnName", "newColumnName", "beginColumnName", 
			"endColumnName", "correlationName", "locationName", "schemaName", "tableName", 
			"alterTableName", "auxTableName", "historyTableName", "cloneTableName", 
			"archiveTableName", "viewName", "programName", "packageName", "planName", 
			"typeName", "variableName", "aliasName", "constraintName", "routineVersionID", 
			"versionID", "indexName", "maskName", "permissionName", "procedureName", 
			"sequenceName", "memberName", "databaseName", "tablespaceName", "catalogName", 
			"triggerName", "contextName", "authorizationName", "profileName", "roleName", 
			"seclabelName", "parameterName", "addressValue", "jobnameValue", "servauthValue", 
			"encryptionValue", "bpName", "stogroupName", "dcName", "mcName", "scName", 
			"volumeID", "keyLabelName", "functionName", "specificName", "hostVariable", 
			"hostIdentifier", "hostStructure", "variable", "intoClause", "correlationClause", 
			"fromClause", "tableReference", "singleTableReference", "periodSpecification", 
			"periodClause", "nestedTableExpression", "dataChangeTableReference", 
			"tableFunctionReference", "tableUdfCardinalityClause", "typedCorrelationClause", 
			"tableLocatorReference", "xmltableExpression", "collectionDerivedTable", 
			"joinCondition", "fullJoinExpression", "castFunction", "ordinaryArrayExpression", 
			"associativeArrayExpression", "comparison", "whereClause", "groupByClause", 
			"havingClause", "groupingExpression", "groupingSets", "groupingSetsGroup", 
			"superGroups", "selectColumns", "unpackedRow", "selectClause", "subSelect", 
			"selectIntoStatement", "selectStatement", "commonTableExpression", "updateClause", 
			"readOnlyClause", "optimizeClause", "isolationClause", "lockClause", 
			"skipLockedDataClause", "querynoClause", "scalarFullSelect", "fullSelect", 
			"valuesClause", "orderByClause", "sortKey", "offsetClause", "fetchClause", 
			"identifier", "sqlKeyword"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'('", "')'", "'['", "']'", "'?'", "'='", "'>'", "'<'", null, null, 
			null, "'+'", "'-'", "'*'", "'/'", "'||'", "'.'", "':'", "';'", "','", 
			"'@'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "LPAREN", "RPAREN", "OPENSQBRACKET", "CLOSESQBRACKET", "QUESTIONMARK", 
			"EQ", "GT", "LT", "GE", "LE", "NE", "PLUS", "MINUS", "SPLAT", "SLASH", 
			"CONCATOP", "DOT", "COLON", "SEMICOLON", "COMMA", "ATSIGN", "NONNUMERICLITERAL", 
			"INTEGERLITERAL", "NUMERICLITERAL", "NEWLINE", "WS", "SQLCOMMENT", "SQLBLOCKCOMMENTBEGIN", 
			"SQLBLOCKCOMMENTEND", "ADD", "AFTER", "ALL", "ALLOCATE", "ALLOW", "ALTER", 
			"ALTERAND", "ANY", "ARRAY", "ARRAY_EXISTS", "AS", "ASENSITIVE", "ASSOCIATE", 
			"ASUTIME", "AT", "AUDIT", "AUX", "AUXILIARY", "BEFORE", "BEGIN", "BETWEEN", 
			"BUFFERPOOL", "BY", "CALL", "CAPTURE", "CASCADED", "CASE", "CAST", "CCSID", 
			"CHAR", "CHARACTER", "CHECK", "CLONE", "CLOSE", "CLUSTER", "COLLECTION", 
			"COLLID", "COLUMN", "COMMENT", "COMMIT", "CONCAT", "CONDITION", "CONNECT", 
			"CONNECTION", "CONSTRAINT", "CONTAINS", "CONTENT", "CONTINUE", "CREATE", 
			"CUBE", "CURRENT", "CURRENT_LC_CTYPE", "CURRVAL", "CURSOR", "DATA", "DATABASE", 
			"DAY", "DAYS", "DBINFO", "DECLARE", "DEFAULT", "DELETE", "DESCRIPTOR", 
			"DETERMINISTIC", "DISABLE", "DISALLOW", "DISTINCT", "DO", "DOCUMENT", 
			"DOUBLE", "DROP", "DSSIZE", "DYNAMIC", "EDITPROC", "ELSE", "ELSEIF", 
			"ENCODING", "ENCRYPTION", "END", "END_EXEC", "ENDING", "ERASE", "ESCAPE", 
			"EXCEPT", "EXCEPTION", "EXEC_SQL", "EXECUTE", "EXISTS", "EXIT", "EXPLAIN", 
			"EXTERNAL", "FENCED", "FETCH", "FIELDPROC", "FINAL", "FIRST", "FOR", 
			"FREE", "FROM", "FULL", "FUNCTION", "GENERATED", "GET", "GLOBAL", "GO", 
			"GOTO", "GRANT", "GROUP", "HANDLER", "HAVING", "HOLD", "HOUR", "HOURS", 
			"IF", "IMMEDIATE", "IN", "INCLUSIVE", "INDEX", "INDEXBP", "INHERIT", 
			"INNER", "INOUT", "INSENSITIVE", "INSERT", "INTERSECT", "INTO", "IS", 
			"ISOBID", "ITERATE", "JAR", "JOIN", "KEEP", "KEY", "LABEL", "LANGUAGE", 
			"LAST", "LC_CTYPE", "LEAVE", "LEFT", "LIKE", "LIMIT", "LOCAL", "LOCALE", 
			"LOCATOR", "LOCATORS", "LOCK", "LOCKMAX", "LOCKSIZE", "LONG", "LOOP", 
			"MAINTAINED", "MATERIALIZED", "MICROSECOND", "MICROSECONDS", "MINUTEMINUTES", 
			"MODIFIES", "MONTH", "MONTHS", "NEXT", "NEXTVAL", "NO", "NONE", "NOT", 
			"NULL", "NULLS", "NUMPARTS", "OBID", "OF", "OFFSET", "OLD", "ON", "OPEN", 
			"OPTIMIZATION", "OPTIMIZE", "OR", "ORDER", "ORGANIZATION", "OUT", "OUTER", 
			"PACKAGE", "PADDED", "PARAMETER", "PART", "PARTITION", "PARTITIONED", 
			"PARTITIONING", "PATH", "PERIOD", "PIECESIZE", "PLAN", "PRECISION", "PREPARE", 
			"PREVVAL", "PRIOR", "PRIQTY", "PRIVILEGES", "PROCEDURE", "PROGRAM", "PSID", 
			"PUBLIC", "QUERY", "QUERYNO", "READS", "REFERENCES", "REFRESH", "RELEASE", 
			"RENAME", "REPEAT", "RESIGNAL", "RESTRICT", "RESULT", "RESULT_SET_LOCATOR", 
			"RETURN", "RETURNS", "REVOKE", "RIGHT", "ROLE", "ROLLBACK", "ROLLUP", 
			"ROUND_CEILING", "ROUND_DOWN", "ROUND_FLOOR", "ROUND_HALF_DOWN", "ROUND_HALF_EVEN", 
			"ROUND_HALF_UP", "ROUND_UP", "ROW", "ROWSET", "RUN", "SAVEPOINT", "SCHEMA", 
			"SCRATCHPAD", "SECOND", "SECONDS", "SECQTY", "SECURITY", "SELECT", "SENSITIVE", 
			"SEQUENCE", "SET", "SIGNAL", "SIMPLE", "SOME", "SOURCE", "SPECIFIC", 
			"STANDARD", "STATEMENT", "STATIC", "STAY", "STOGROUP", "STORES", "STYLE", 
			"SUMMARY", "SYNONYM", "SYSDATE", "SYSTEM", "SYSTIMESTAMP", "TABLE", "TABLESPACE", 
			"THEN", "TO", "TRIGGER", "TRUNCATE", "TYPE", "UNDO", "UNION", "UNIQUE", 
			"UNTIL", "UPDATE", "USING", "VALIDPROC", "VALUE", "VALUES", "VARIABLE", 
			"VARIANT", "VCAT", "VERSIONING", "VIEW", "VOLATILE", "VOLUMES", "WHEN", 
			"WHENEVER", "WHERE", "WHILE", "WITH", "WLM", "XMLCAST", "XMLEXISTS", 
			"XMLNAMESPACES", "YEAR", "YEARS", "ZONE", "AND", "ARRAY_AGG", "ASC", 
			"AVG", "BIT", "CHANGE", "CODEUNITS16", "CODEUNITS32", "CORR", "CORRELATION", 
			"COUNT", "COUNT_BIG", "COVAR", "COVARIANCE", "COVARIANCE_SAMP", "COVAR_POP", 
			"COVAR_SAMP", "CS", "CUME_DIST", "DENSE_RANK", "DESC", "EBCDIC", "EXCLUSIVE", 
			"FIRST_VALUE", "FOLLOWING", "GROUPING", "IGNORE", "INDICATOR", "INPUT", 
			"ISNULL", "LAG", "LARGE", "LAST_VALUE", "LEAD", "LISTAGG", "LOCKED", 
			"LOCKS", "MEDIAN", "MINUTES", "MIXED", "NOTNULL", "NTH_VALUE", "NTILE", 
			"NUMERIC", "OBJECT", "OCTETS", "ONLY", "OVER", "PASSING", "PERCENTILE_CONT", 
			"PERCENTILE_DISC", "PERCENT_RANK", "PRECEDING", "PREVIOUS", "RANGE", 
			"RANK", "RATIO_TO_REPORT", "READ", "REF", "REGR_AVGX", "REGR_AVGY", "REGR_COUNT", 
			"REGR_ICPT", "REGR_INTERCEPT", "REGR_R2", "REGR_SLOPE", "REGR_SXX", "REGR_SXY", 
			"REGR_SYY", "RESPECT", "ROW_NUMBER", "ROWS", "RR", "RS", "SBCS", "SELECTIVITY", 
			"SETS", "SHARE", "SKIP_", "STDDEV", "STDDEV_POP", "STDDEV_SAMP", "SUM", 
			"TOKEN", "UNBOUNDED", "UNPACK", "UR", "USE", "VAR", "VARIANCE", "VARIANCE_SAMP", 
			"VAR_POP", "VAR_SAMP", "VARYING", "WITHOUT", "XML", "XMLAGG", "COLUMNS", 
			"SQLID", "ORDINALITY", "SYSTEM_TIME", "BUSINESS_TIME", "MULTIPLIER", 
			"UNNEST", "CROSS", "CALLER", "CLIENT", "POSITIONING", "SCROLL", "ACTION", 
			"ASSEMBLE", "C_", "CALLED", "COBOL", "DB2", "DEFINER", "DISPATCH", "ENVIRONMENT", 
			"FAILURE", "FAILURES", "JAVA", "MAIN", "NAME", "OPTIONS", "PARALLEL", 
			"PLI", "REGISTERS", "RESIDENT", "SECURED", "SPECIAL", "SQL", "STOP", 
			"SUB", "YES", "APPLICATION", "CHANGED", "COMPATIBILITY", "COMPRESS", 
			"COPY", "FREEPAGE", "GBPCACHE", "INCLUDE", "MAXVALUE", "MINVALUE", "PCTFREE", 
			"REGENERATE", "MASK", "ENABLE", "PERMISSION", "ATOMIC", "SQLEXCEPTION", 
			"MERGE", "MATCHED", "SQLSTATE", "MESSAGE_TEXT", "OVERRIDING", "PORTION", 
			"DB2SQL", "DEBUG", "GENERAL", "MODE_", "REXX", "CACHE", "CYCLE", "INCREMENT", 
			"RESTART", "DATACLAS", "MGMTCLAS", "REMOVE", "STORCLAS", "ACCESS", "ACTIVATE", 
			"ALWAYS", "APPEND", "ARCHIVE", "BUSINESS", "CASCADE", "CHANGES", "CONTROL", 
			"DEACTIVATE", "DEFERRED", "EACH", "ENFORCED", "EXTRA", "FOREIGN", "HIDDEN_", 
			"HISTORY", "ID", "IDENTITY", "IMPLICITLY", "INITIALLY", "INLINE", "OPERATION", 
			"ORGANIZE", "OVERLAPS", "PACKAGE_NAME", "PACKAGE_SCHEMA", "PACKAGE_VERSION", 
			"PRIMARY", "RESET", "ROTATE", "START", "SYSIBM", "TRANSACTION", "XMLSCHEMA", 
			"ELEMENT", "URL", "NAMESPACE", "LOCATION", "SYSXSR", "ALGORITHM", "FIXEDLENGTH", 
			"HUFFMAN", "LOB", "LOG", "LOGGED", "MAXPARTITIONS", "MAXROWS", "MEMBER", 
			"MOVE", "PAGE", "PAGENUM", "PENDING", "RELATIVE", "SEGSIZE", "TRACKMOD", 
			"ADDRESS", "ATTRIBUTES", "AUTHENTICATION", "AUTHID", "CONTEXT", "JOBNAME", 
			"OWNER", "PROFILE", "QUALIFIER", "SERVAUTH", "TRUSTED", "SECTION", "ACTIVE", 
			"VERSION", "ALIAS", "WORK", "WORKFILE", "SYSDEFLT", "NULTERM", "STRUCTURE", 
			"GENERIC", "TEMPORARY", "DEFER", "DEFINE", "EXCLUDE", "GENERATE", "KEYS", 
			"XMLPATTERN", "ABS", "ABSVAL", "ACOS", "ADD_DAYS", "ADD_MONTHS", "ARRAY_DELETE", 
			"ARRAY_FIRST", "ARRAY_LAST", "ARRAY_NEXT", "ARRAY_PRIOR", "ARRAY_TRIM", 
			"ASCII", "ASCII_CHR", "ASCIISTR", "ASCII_STR", "ASIN", "ATAN", "ATAN2", 
			"ATANH", "BIGINT", "BINARY", "BITAND", "BITANDNOT", "BITNOT", "BITOR", 
			"BITXOR", "BLOB", "BTRIM", "CARDINALITY", "CCSID_ENCODING", "CEIL", "CEILING", 
			"CHAR9", "CHARACTER_LENGTH", "CHAR_LENGTH", "CHR", "CLOB", "COALESCE", 
			"COLLATION_KEY", "COMPARE_DECFLOAT", "COS", "COSH", "DATE", "DAYOFMONTH", 
			"DAYOFWEEK", "DAYOFWEEK_ISO", "DAYOFYEAR", "DAYS_BETWEEN", "DBCLOB", 
			"DEC", "DECFLOAT", "DECFLOAT_FORMAT", "DECFLOAT_SORTKEY", "DECIMAL", 
			"DECODE", "DECRYPT_BINARY", "DECRYPT_BIT", "DECRYPT_CHAR", "DECRYPT_DATAKEY_BIGINT", 
			"DECRYPT_DATAKEY_BIT", "DECRYPT_DATAKEY_CLOB", "DECRYPT_DATAKEY_DBCLOB", 
			"DECRYPT_DATAKEY_DECIMAL", "DECRYPT_DATAKEY_INTEGER", "DECRYPT_DATAKEY_VARCHAR", 
			"DECRYPT_DATAKEY_VARGRAPHIC", "DECRYPT_DB", "DEGREES", "DIFFERENCE", 
			"DIGITS", "DOUBLE_PRECISION", "DSN_XMLVALIDATE", "EBCDIC_CHR", "EBCDIC_STR", 
			"ENCRYPT_DATAKEY", "ENCRYPT_TDES", "EXP", "EXTRACT", "FLOAT", "FLOOR", 
			"GENERATE_UNIQUE", "GENERATE_UNIQUE_BINARY", "GETHINT", "GETVARIABLE", 
			"GRAPHIC", "GREATEST", "HASH", "HASH_CRC32", "HASH_MD5", "HASH_SHA1", 
			"HASH_SHA256", "HEX", "IDENTITY_VAL_LOCAL", "IFNULL", "INSTR", "INT", 
			"INTEGER", "JULIAN_DAY", "LAST_DAY", "LCASE", "LEAST", "LENGTH", "LN", 
			"LOCATE", "LOCATE_IN_STRING", "LOG10", "LOWER", "LPAD", "LTRIM", "MAX", 
			"MAX_CARDINALITY", "MIDNIGHT_SECONDS", "MIN", "MINUTE", "MOD", "MONTHS_BETWEEN", 
			"MQREAD", "MQREADCLOB", "MQRECEIVE", "MQRECEIVECLOB", "MQSEND", "MULTIPLY_ALT", 
			"NEXT_DAY", "NEXT_MONTH", "NORMALIZE_DECFLOAT", "NORMALIZE_STRING", "NULLIF", 
			"NVL", "OVERLAY", "PACK", "POSITION", "POSSTR", "POW", "POWER", "QUANTIZE", 
			"QUARTER", "RADIANS", "RAISE_ERROR", "RAND", "RANDOM", "REAL", "REGEXP_COUNT", 
			"REGEXP_INSTR", "REGEXP_LIKE", "REGEXP_REPLACE", "REGEXP_SUBSTR", "REPLACE", 
			"RID", "ROUND", "ROUND_TIMESTAMP", "ROWID", "RPAD", "RTRIM", "SCORE", 
			"SIGN", "SIN", "SINH", "SMALLINT", "SOAPHTTPC", "SOAPHTTPNC", "SOAPHTTPNV", 
			"SOAPHTTPV", "SOUNDEX", "SPACE", "SQRT", "STRIP", "STRLEFT", "STRPOS", 
			"STRRIGHT", "SUBSTR", "SUBSTRING", "TAN", "TANH", "TIME", "TIMESTAMP", 
			"TIMESTAMPADD", "TIMESTAMPDIFF", "TIMESTAMP_FORMAT", "TIMESTAMP_ISO", 
			"TIMESTAMP_TZ", "TO_CHAR", "TO_CLOB", "TO_DATE", "TO_NUMBER", "TOTALORDER", 
			"TO_TIMESTAMP", "TRANSLATE", "TRIM", "TRIM_ARRAY", "TRUNC", "TRUNC_TIMESTAMP", 
			"UCASE", "UNICODE", "UNICODE_STR", "UNISTR", "UPPER", "VARBINARY", "VARCHAR", 
			"VARCHAR9", "VARCHAR_BIT_FORMAT", "VARCHAR_FORMAT", "VARGRAPHIC", "VERIFY_GROUP_FOR_USER", 
			"VERIFY_ROLE_FOR_USER", "VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER", "WEEK", 
			"WEEK_ISO", "WRAP", "XMLATTRIBUTES", "XMLCOMMENT", "XMLCONCAT", "XMLDOCUMENT", 
			"XMLELEMENT", "XMLFOREST", "XMLMODIFY", "XMLPARSE", "XMLPI", "XMLQUERY", 
			"XMLSERIALIZE", "XMLTEXT", "XMLXSROBJECTID", "XSLTRANSFORM", "CURRENT_ACCELERATOR", 
			"CURRENT_APPLICATION_COMPATIBILITY", "CURRENT_APPLICATION_ENCODING_SCHEME", 
			"CURRENT_CLIENT_ACCTNG", "CURRENT_CLIENT_APPLNAME", "CURRENT_CLIENT_CORR_TOKEN", 
			"CURRENT_CLIENT_USERID", "CURRENT_CLIENT_WRKSTNNAME", "CURRENT_DATE", 
			"CURRENT_DEBUG_MODE", "CURRENT_DECFLOAT_ROUNDING_MODE", "CURRENT_DEGREE", 
			"CURRENT_EXPLAIN_MODE", "CURRENT_GET_ACCEL_ARCHIVE", "CURRENT_LOCALE_LC_CTYPE", 
			"CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION", "CURRENT_MEMBER", 
			"CURRENT_OPTIMIZATION_HINT", "CURRENT_PACKAGE_PATH", "CURRENT_PACKAGESET", 
			"CURRENT_PATH", "CURRENT_PRECISION", "CURRENT_QUERY_ACCELERATION", "CURRENT_QUERY_ACCELERATION_WAITFORDATA", 
			"CURRENT_REFRESH_AGE", "CURRENT_ROUTINE_VERSION", "CURRENT_RULES", "CURRENT_SCHEMA", 
			"CURRENT_SERVER", "CURRENT_SQLID", "CURRENT_TEMPORAL_BUSINESS_TIME", 
			"CURRENT_TEMPORAL_SYSTEM_TIME", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
			"CURRENT_TIME_ZONE", "ENCRYPTION_PASSWORD", "SESSION_TIME_ZONE", "SESSION_USER", 
			"USER", "ADMIN_TASK_LIST", "ADMIN_TASK_OUTPUT", "ADMIN_TASK_STATUS", 
			"BLOCKING_THREADS", "MQREADALL", "MQREADALLCLOB", "MQRECEIVEALL", "MQRECEIVEALLCLOB", 
			"XMLTABLE", "SQLIDENTIFIER"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "DB2zSQLParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public DB2zSQLParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	public static class StartRuleContext extends ParserRuleContext {
		public List<SqlStatementContext> sqlStatement() {
			return getRuleContexts(SqlStatementContext.class);
		}
		public SqlStatementContext sqlStatement(int i) {
			return getRuleContext(SqlStatementContext.class,i);
		}
		public TerminalNode EOF() { return getToken(DB2zSQLParser.EOF, 0); }
		public StartRuleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startRule; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterStartRule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitStartRule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitStartRule(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StartRuleContext startRule() throws RecognitionException {
		StartRuleContext _localctx = new StartRuleContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_startRule);
		int _la;
		try {
			setState(899);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(895);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAREN) | (1L << ALLOCATE) | (1L << ALTER) | (1L << ASSOCIATE) | (1L << BEGIN) | (1L << CALL) | (1L << CLOSE))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (COMMENT - 68)) | (1L << (COMMIT - 68)) | (1L << (CONNECT - 68)) | (1L << (CREATE - 68)) | (1L << (DECLARE - 68)) | (1L << (DELETE - 68)) | (1L << (EXEC_SQL - 68)))) != 0) || _la==INSERT || ((((_la - 266)) & ~0x3f) == 0 && ((1L << (_la - 266)) & ((1L << (SELECT - 266)) | (1L << (UPDATE - 266)) | (1L << (VALUES - 266)) | (1L << (WITH - 266)))) != 0) || _la==MERGE) {
					{
					{
					setState(892);
					sqlStatement();
					}
					}
					setState(897);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(898);
				match(EOF);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SqlStatementContext extends ParserRuleContext {
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public AllocateCursorStatementContext allocateCursorStatement() {
			return getRuleContext(AllocateCursorStatementContext.class,0);
		}
		public AlterDatabaseStatementContext alterDatabaseStatement() {
			return getRuleContext(AlterDatabaseStatementContext.class,0);
		}
		public AlterFunctionStatementContext alterFunctionStatement() {
			return getRuleContext(AlterFunctionStatementContext.class,0);
		}
		public AlterIndexStatementContext alterIndexStatement() {
			return getRuleContext(AlterIndexStatementContext.class,0);
		}
		public AlterMaskStatementContext alterMaskStatement() {
			return getRuleContext(AlterMaskStatementContext.class,0);
		}
		public AlterPermissionStatementContext alterPermissionStatement() {
			return getRuleContext(AlterPermissionStatementContext.class,0);
		}
		public AlterProcedureStatementContext alterProcedureStatement() {
			return getRuleContext(AlterProcedureStatementContext.class,0);
		}
		public AlterSequenceStatementContext alterSequenceStatement() {
			return getRuleContext(AlterSequenceStatementContext.class,0);
		}
		public AlterStogroupStatementContext alterStogroupStatement() {
			return getRuleContext(AlterStogroupStatementContext.class,0);
		}
		public AlterTableStatementContext alterTableStatement() {
			return getRuleContext(AlterTableStatementContext.class,0);
		}
		public AlterTablespaceStatementContext alterTablespaceStatement() {
			return getRuleContext(AlterTablespaceStatementContext.class,0);
		}
		public AlterTriggerStatementContext alterTriggerStatement() {
			return getRuleContext(AlterTriggerStatementContext.class,0);
		}
		public AlterTrustedContextStatementContext alterTrustedContextStatement() {
			return getRuleContext(AlterTrustedContextStatementContext.class,0);
		}
		public AlterViewStatementContext alterViewStatement() {
			return getRuleContext(AlterViewStatementContext.class,0);
		}
		public AssociateLocatorsStatementContext associateLocatorsStatement() {
			return getRuleContext(AssociateLocatorsStatementContext.class,0);
		}
		public BeginDeclareSectionStatementContext beginDeclareSectionStatement() {
			return getRuleContext(BeginDeclareSectionStatementContext.class,0);
		}
		public CallStatementContext callStatement() {
			return getRuleContext(CallStatementContext.class,0);
		}
		public CloseStatementContext closeStatement() {
			return getRuleContext(CloseStatementContext.class,0);
		}
		public CommitStatementContext commitStatement() {
			return getRuleContext(CommitStatementContext.class,0);
		}
		public CommentStatementContext commentStatement() {
			return getRuleContext(CommentStatementContext.class,0);
		}
		public ConnectStatementContext connectStatement() {
			return getRuleContext(ConnectStatementContext.class,0);
		}
		public CreateAliasStatementContext createAliasStatement() {
			return getRuleContext(CreateAliasStatementContext.class,0);
		}
		public CreateAuxiliaryTableStatementContext createAuxiliaryTableStatement() {
			return getRuleContext(CreateAuxiliaryTableStatementContext.class,0);
		}
		public CreateDatabaseStatementContext createDatabaseStatement() {
			return getRuleContext(CreateDatabaseStatementContext.class,0);
		}
		public CreateFunctionStatementContext createFunctionStatement() {
			return getRuleContext(CreateFunctionStatementContext.class,0);
		}
		public CreateGlobalTemporaryTableStatementContext createGlobalTemporaryTableStatement() {
			return getRuleContext(CreateGlobalTemporaryTableStatementContext.class,0);
		}
		public CreateIndexStatementContext createIndexStatement() {
			return getRuleContext(CreateIndexStatementContext.class,0);
		}
		public CreateLobTablespaceStatementContext createLobTablespaceStatement() {
			return getRuleContext(CreateLobTablespaceStatementContext.class,0);
		}
		public CreateMaskStatementContext createMaskStatement() {
			return getRuleContext(CreateMaskStatementContext.class,0);
		}
		public CreatePermissionStatementContext createPermissionStatement() {
			return getRuleContext(CreatePermissionStatementContext.class,0);
		}
		public CreateProcedureStatementContext createProcedureStatement() {
			return getRuleContext(CreateProcedureStatementContext.class,0);
		}
		public DeclareCursorStatementContext declareCursorStatement() {
			return getRuleContext(DeclareCursorStatementContext.class,0);
		}
		public DeclareTableStatementContext declareTableStatement() {
			return getRuleContext(DeclareTableStatementContext.class,0);
		}
		public DeclareStatementStatementContext declareStatementStatement() {
			return getRuleContext(DeclareStatementStatementContext.class,0);
		}
		public DeleteStatementContext deleteStatement() {
			return getRuleContext(DeleteStatementContext.class,0);
		}
		public InsertStatementContext insertStatement() {
			return getRuleContext(InsertStatementContext.class,0);
		}
		public MergeStatementContext mergeStatement() {
			return getRuleContext(MergeStatementContext.class,0);
		}
		public UpdateStatementContext updateStatement() {
			return getRuleContext(UpdateStatementContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(DB2zSQLParser.SEMICOLON, 0); }
		public TerminalNode EOF() { return getToken(DB2zSQLParser.EOF, 0); }
		public TerminalNode EXEC_SQL() { return getToken(DB2zSQLParser.EXEC_SQL, 0); }
		public TerminalNode END_EXEC() { return getToken(DB2zSQLParser.END_EXEC, 0); }
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public SqlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSqlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSqlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSqlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SqlStatementContext sqlStatement() throws RecognitionException {
		SqlStatementContext _localctx = new SqlStatementContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_sqlStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(902);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXEC_SQL) {
				{
				setState(901);
				match(EXEC_SQL);
				}
			}

			setState(943);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {
			case 1:
				{
				setState(904);
				query();
				}
				break;
			case 2:
				{
				setState(905);
				allocateCursorStatement();
				}
				break;
			case 3:
				{
				setState(906);
				alterDatabaseStatement();
				}
				break;
			case 4:
				{
				setState(907);
				alterFunctionStatement();
				}
				break;
			case 5:
				{
				setState(908);
				alterIndexStatement();
				}
				break;
			case 6:
				{
				setState(909);
				alterMaskStatement();
				}
				break;
			case 7:
				{
				setState(910);
				alterPermissionStatement();
				}
				break;
			case 8:
				{
				setState(911);
				alterProcedureStatement();
				}
				break;
			case 9:
				{
				setState(912);
				alterSequenceStatement();
				}
				break;
			case 10:
				{
				setState(913);
				alterStogroupStatement();
				}
				break;
			case 11:
				{
				setState(914);
				alterTableStatement();
				}
				break;
			case 12:
				{
				setState(915);
				alterTablespaceStatement();
				}
				break;
			case 13:
				{
				setState(916);
				alterTriggerStatement();
				}
				break;
			case 14:
				{
				setState(917);
				alterTrustedContextStatement();
				}
				break;
			case 15:
				{
				setState(918);
				alterViewStatement();
				}
				break;
			case 16:
				{
				setState(919);
				associateLocatorsStatement();
				}
				break;
			case 17:
				{
				setState(920);
				beginDeclareSectionStatement();
				}
				break;
			case 18:
				{
				setState(921);
				callStatement();
				}
				break;
			case 19:
				{
				setState(922);
				closeStatement();
				}
				break;
			case 20:
				{
				setState(923);
				commitStatement();
				}
				break;
			case 21:
				{
				setState(924);
				commentStatement();
				}
				break;
			case 22:
				{
				setState(925);
				connectStatement();
				}
				break;
			case 23:
				{
				setState(926);
				createAliasStatement();
				}
				break;
			case 24:
				{
				setState(927);
				createAuxiliaryTableStatement();
				}
				break;
			case 25:
				{
				setState(928);
				createDatabaseStatement();
				}
				break;
			case 26:
				{
				setState(929);
				createFunctionStatement();
				}
				break;
			case 27:
				{
				setState(930);
				createGlobalTemporaryTableStatement();
				}
				break;
			case 28:
				{
				setState(931);
				createIndexStatement();
				}
				break;
			case 29:
				{
				setState(932);
				createLobTablespaceStatement();
				}
				break;
			case 30:
				{
				setState(933);
				createMaskStatement();
				}
				break;
			case 31:
				{
				setState(934);
				createPermissionStatement();
				}
				break;
			case 32:
				{
				setState(935);
				createProcedureStatement();
				}
				break;
			case 33:
				{
				setState(936);
				declareCursorStatement();
				}
				break;
			case 34:
				{
				setState(937);
				declareTableStatement();
				}
				break;
			case 35:
				{
				setState(938);
				declareStatementStatement();
				}
				break;
			case 36:
				{
				setState(939);
				deleteStatement();
				}
				break;
			case 37:
				{
				setState(940);
				insertStatement();
				}
				break;
			case 38:
				{
				setState(941);
				mergeStatement();
				}
				break;
			case 39:
				{
				setState(942);
				updateStatement();
				}
				break;
			}
			setState(951);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SEMICOLON:
				{
				setState(945);
				match(SEMICOLON);
				}
				break;
			case END_EXEC:
				{
				{
				setState(946);
				match(END_EXEC);
				setState(948);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT) {
					{
					setState(947);
					match(DOT);
					}
				}

				}
				}
				break;
			case EOF:
				{
				setState(950);
				match(EOF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryContext extends ParserRuleContext {
		public SubSelectContext subSelect() {
			return getRuleContext(SubSelectContext.class,0);
		}
		public FullSelectContext fullSelect() {
			return getRuleContext(FullSelectContext.class,0);
		}
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public SelectIntoStatementContext selectIntoStatement() {
			return getRuleContext(SelectIntoStatementContext.class,0);
		}
		public QueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterQuery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitQuery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitQuery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryContext query() throws RecognitionException {
		QueryContext _localctx = new QueryContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_query);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(957);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,6,_ctx) ) {
			case 1:
				{
				setState(953);
				subSelect();
				}
				break;
			case 2:
				{
				setState(954);
				fullSelect();
				}
				break;
			case 3:
				{
				setState(955);
				selectStatement();
				}
				break;
			case 4:
				{
				setState(956);
				selectIntoStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareCursorStatementContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(DB2zSQLParser.DECLARE, 0); }
		public CursorNameContext cursorName() {
			return getRuleContext(CursorNameContext.class,0);
		}
		public TerminalNode CURSOR() { return getToken(DB2zSQLParser.CURSOR, 0); }
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public StatementNameContext statementName() {
			return getRuleContext(StatementNameContext.class,0);
		}
		public List<HoldabilityContext> holdability() {
			return getRuleContexts(HoldabilityContext.class);
		}
		public HoldabilityContext holdability(int i) {
			return getRuleContext(HoldabilityContext.class,i);
		}
		public List<ReturnabilityContext> returnability() {
			return getRuleContexts(ReturnabilityContext.class);
		}
		public ReturnabilityContext returnability(int i) {
			return getRuleContext(ReturnabilityContext.class,i);
		}
		public List<RowsetPositioningContext> rowsetPositioning() {
			return getRuleContexts(RowsetPositioningContext.class);
		}
		public RowsetPositioningContext rowsetPositioning(int i) {
			return getRuleContext(RowsetPositioningContext.class,i);
		}
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode SCROLL() { return getToken(DB2zSQLParser.SCROLL, 0); }
		public TerminalNode ASENSITIVE() { return getToken(DB2zSQLParser.ASENSITIVE, 0); }
		public TerminalNode INSENSITIVE() { return getToken(DB2zSQLParser.INSENSITIVE, 0); }
		public TerminalNode SENSITIVE() { return getToken(DB2zSQLParser.SENSITIVE, 0); }
		public TerminalNode DYNAMIC() { return getToken(DB2zSQLParser.DYNAMIC, 0); }
		public TerminalNode STATIC() { return getToken(DB2zSQLParser.STATIC, 0); }
		public DeclareCursorStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareCursorStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDeclareCursorStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDeclareCursorStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDeclareCursorStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareCursorStatementContext declareCursorStatement() throws RecognitionException {
		DeclareCursorStatementContext _localctx = new DeclareCursorStatementContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_declareCursorStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(959);
			match(DECLARE);
			setState(960);
			cursorName();
			setState(970);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO:
				{
				{
				setState(961);
				match(NO);
				setState(962);
				match(SCROLL);
				}
				}
				break;
			case ASENSITIVE:
			case INSENSITIVE:
			case SENSITIVE:
				{
				{
				setState(967);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ASENSITIVE:
					{
					setState(963);
					match(ASENSITIVE);
					}
					break;
				case INSENSITIVE:
					{
					setState(964);
					match(INSENSITIVE);
					}
					break;
				case SENSITIVE:
					{
					{
					setState(965);
					match(SENSITIVE);
					setState(966);
					_la = _input.LA(1);
					if ( !(_la==DYNAMIC || _la==STATIC) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(969);
				match(SCROLL);
				}
				}
				break;
			case CURSOR:
				break;
			default:
				break;
			}
			setState(972);
			match(CURSOR);
			setState(978);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==WITH || _la==WITHOUT) {
				{
				setState(976);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,9,_ctx) ) {
				case 1:
					{
					setState(973);
					holdability();
					}
					break;
				case 2:
					{
					setState(974);
					returnability();
					}
					break;
				case 3:
					{
					setState(975);
					rowsetPositioning();
					}
					break;
				}
				}
				setState(980);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(981);
			match(FOR);
			setState(984);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,11,_ctx) ) {
			case 1:
				{
				setState(982);
				selectStatement();
				}
				break;
			case 2:
				{
				setState(983);
				statementName();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CursorNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public CursorNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursorName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCursorName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCursorName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCursorName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CursorNameContext cursorName() throws RecognitionException {
		CursorNameContext _localctx = new CursorNameContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_cursorName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(986);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatementNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public StatementNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statementName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterStatementName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitStatementName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitStatementName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StatementNameContext statementName() throws RecognitionException {
		StatementNameContext _localctx = new StatementNameContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_statementName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(988);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HoldabilityContext extends ParserRuleContext {
		public TerminalNode WITHOUT() { return getToken(DB2zSQLParser.WITHOUT, 0); }
		public TerminalNode HOLD() { return getToken(DB2zSQLParser.HOLD, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public HoldabilityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_holdability; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterHoldability(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitHoldability(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitHoldability(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HoldabilityContext holdability() throws RecognitionException {
		HoldabilityContext _localctx = new HoldabilityContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_holdability);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(994);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITHOUT:
				{
				{
				setState(990);
				match(WITHOUT);
				setState(991);
				match(HOLD);
				}
				}
				break;
			case WITH:
				{
				{
				setState(992);
				match(WITH);
				setState(993);
				match(HOLD);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReturnabilityContext extends ParserRuleContext {
		public TerminalNode WITHOUT() { return getToken(DB2zSQLParser.WITHOUT, 0); }
		public TerminalNode RETURN() { return getToken(DB2zSQLParser.RETURN, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode TO() { return getToken(DB2zSQLParser.TO, 0); }
		public TerminalNode CALLER() { return getToken(DB2zSQLParser.CALLER, 0); }
		public TerminalNode CLIENT() { return getToken(DB2zSQLParser.CLIENT, 0); }
		public ReturnabilityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_returnability; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterReturnability(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitReturnability(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitReturnability(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReturnabilityContext returnability() throws RecognitionException {
		ReturnabilityContext _localctx = new ReturnabilityContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_returnability);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1006);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITHOUT:
				{
				{
				setState(996);
				match(WITHOUT);
				setState(997);
				match(RETURN);
				}
				}
				break;
			case WITH:
				{
				{
				setState(998);
				match(WITH);
				setState(999);
				match(RETURN);
				setState(1004);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,13,_ctx) ) {
				case 1:
					{
					{
					setState(1000);
					match(TO);
					setState(1001);
					match(CALLER);
					}
					}
					break;
				case 2:
					{
					{
					setState(1002);
					match(TO);
					setState(1003);
					match(CLIENT);
					}
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowsetPositioningContext extends ParserRuleContext {
		public TerminalNode WITHOUT() { return getToken(DB2zSQLParser.WITHOUT, 0); }
		public TerminalNode ROWSET() { return getToken(DB2zSQLParser.ROWSET, 0); }
		public TerminalNode POSITIONING() { return getToken(DB2zSQLParser.POSITIONING, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public RowsetPositioningContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowsetPositioning; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRowsetPositioning(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRowsetPositioning(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRowsetPositioning(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowsetPositioningContext rowsetPositioning() throws RecognitionException {
		RowsetPositioningContext _localctx = new RowsetPositioningContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_rowsetPositioning);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1014);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITHOUT:
				{
				{
				setState(1008);
				match(WITHOUT);
				setState(1009);
				match(ROWSET);
				setState(1010);
				match(POSITIONING);
				}
				}
				break;
			case WITH:
				{
				{
				setState(1011);
				match(WITH);
				setState(1012);
				match(ROWSET);
				setState(1013);
				match(POSITIONING);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareTableStatementContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(DB2zSQLParser.DECLARE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public List<DataTypeContext> dataType() {
			return getRuleContexts(DataTypeContext.class);
		}
		public DataTypeContext dataType(int i) {
			return getRuleContext(DataTypeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public List<NotNullPhraseContext> notNullPhrase() {
			return getRuleContexts(NotNullPhraseContext.class);
		}
		public NotNullPhraseContext notNullPhrase(int i) {
			return getRuleContext(NotNullPhraseContext.class,i);
		}
		public DeclareTableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareTableStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDeclareTableStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDeclareTableStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDeclareTableStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareTableStatementContext declareTableStatement() throws RecognitionException {
		DeclareTableStatementContext _localctx = new DeclareTableStatementContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_declareTableStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1016);
			match(DECLARE);
			setState(1017);
			tableName();
			setState(1018);
			match(TABLE);
			setState(1019);
			match(LPAREN);
			{
			setState(1020);
			columnName();
			setState(1021);
			dataType();
			setState(1023);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(1022);
				notNullPhrase();
				}
			}

			}
			setState(1033);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1025);
				match(COMMA);
				setState(1026);
				columnName();
				setState(1027);
				dataType();
				setState(1029);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1028);
					notNullPhrase();
					}
				}

				}
				}
				setState(1035);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1036);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NotNullPhraseContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode DEFAULT() { return getToken(DB2zSQLParser.DEFAULT, 0); }
		public NotNullPhraseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notNullPhrase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterNotNullPhrase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitNotNullPhrase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitNotNullPhrase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NotNullPhraseContext notNullPhrase() throws RecognitionException {
		NotNullPhraseContext _localctx = new NotNullPhraseContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_notNullPhrase);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1044);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,19,_ctx) ) {
			case 1:
				{
				{
				setState(1038);
				match(NOT);
				setState(1039);
				match(NULL);
				}
				}
				break;
			case 2:
				{
				{
				setState(1040);
				match(NOT);
				setState(1041);
				match(NULL);
				setState(1042);
				match(WITH);
				setState(1043);
				match(DEFAULT);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareStatementStatementContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(DB2zSQLParser.DECLARE, 0); }
		public List<StatementNameContext> statementName() {
			return getRuleContexts(StatementNameContext.class);
		}
		public StatementNameContext statementName(int i) {
			return getRuleContext(StatementNameContext.class,i);
		}
		public TerminalNode STATEMENT() { return getToken(DB2zSQLParser.STATEMENT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public DeclareStatementStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareStatementStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDeclareStatementStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDeclareStatementStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDeclareStatementStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareStatementStatementContext declareStatementStatement() throws RecognitionException {
		DeclareStatementStatementContext _localctx = new DeclareStatementStatementContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_declareStatementStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1046);
			match(DECLARE);
			setState(1047);
			statementName();
			setState(1052);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1048);
				match(COMMA);
				setState(1049);
				statementName();
				}
				}
				setState(1054);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1055);
			match(STATEMENT);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AllocateCursorStatementContext extends ParserRuleContext {
		public TerminalNode ALLOCATE() { return getToken(DB2zSQLParser.ALLOCATE, 0); }
		public CursorNameContext cursorName() {
			return getRuleContext(CursorNameContext.class,0);
		}
		public TerminalNode CURSOR() { return getToken(DB2zSQLParser.CURSOR, 0); }
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode RESULT() { return getToken(DB2zSQLParser.RESULT, 0); }
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public RsLocatorVariableContext rsLocatorVariable() {
			return getRuleContext(RsLocatorVariableContext.class,0);
		}
		public AllocateCursorStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_allocateCursorStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAllocateCursorStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAllocateCursorStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAllocateCursorStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AllocateCursorStatementContext allocateCursorStatement() throws RecognitionException {
		AllocateCursorStatementContext _localctx = new AllocateCursorStatementContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_allocateCursorStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1057);
			match(ALLOCATE);
			setState(1058);
			cursorName();
			setState(1059);
			match(CURSOR);
			setState(1060);
			match(FOR);
			setState(1061);
			match(RESULT);
			setState(1062);
			match(SET);
			setState(1063);
			rsLocatorVariable();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RsLocatorVariableContext extends ParserRuleContext {
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public RsLocatorVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rsLocatorVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRsLocatorVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRsLocatorVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRsLocatorVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RsLocatorVariableContext rsLocatorVariable() throws RecognitionException {
		RsLocatorVariableContext _localctx = new RsLocatorVariableContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_rsLocatorVariable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1065);
			hostVariable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDatabaseStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode DATABASE() { return getToken(DB2zSQLParser.DATABASE, 0); }
		public DatabaseNameContext databaseName() {
			return getRuleContext(DatabaseNameContext.class,0);
		}
		public List<BufferpoolOptionContext> bufferpoolOption() {
			return getRuleContexts(BufferpoolOptionContext.class);
		}
		public BufferpoolOptionContext bufferpoolOption(int i) {
			return getRuleContext(BufferpoolOptionContext.class,i);
		}
		public List<TerminalNode> INDEXBP() { return getTokens(DB2zSQLParser.INDEXBP); }
		public TerminalNode INDEXBP(int i) {
			return getToken(DB2zSQLParser.INDEXBP, i);
		}
		public List<BpNameContext> bpName() {
			return getRuleContexts(BpNameContext.class);
		}
		public BpNameContext bpName(int i) {
			return getRuleContext(BpNameContext.class,i);
		}
		public List<TerminalNode> STOGROUP() { return getTokens(DB2zSQLParser.STOGROUP); }
		public TerminalNode STOGROUP(int i) {
			return getToken(DB2zSQLParser.STOGROUP, i);
		}
		public List<StogroupNameContext> stogroupName() {
			return getRuleContexts(StogroupNameContext.class);
		}
		public StogroupNameContext stogroupName(int i) {
			return getRuleContext(StogroupNameContext.class,i);
		}
		public List<TerminalNode> CCSID() { return getTokens(DB2zSQLParser.CCSID); }
		public TerminalNode CCSID(int i) {
			return getToken(DB2zSQLParser.CCSID, i);
		}
		public List<CcsidValueContext> ccsidValue() {
			return getRuleContexts(CcsidValueContext.class);
		}
		public CcsidValueContext ccsidValue(int i) {
			return getRuleContext(CcsidValueContext.class,i);
		}
		public AlterDatabaseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDatabaseStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterDatabaseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterDatabaseStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterDatabaseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDatabaseStatementContext alterDatabaseStatement() throws RecognitionException {
		AlterDatabaseStatementContext _localctx = new AlterDatabaseStatementContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_alterDatabaseStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1067);
			match(ALTER);
			setState(1068);
			match(DATABASE);
			setState(1069);
			databaseName();
			setState(1077); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(1077);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BUFFERPOOL:
					{
					setState(1070);
					bufferpoolOption();
					}
					break;
				case INDEXBP:
					{
					{
					setState(1071);
					match(INDEXBP);
					setState(1072);
					bpName();
					}
					}
					break;
				case STOGROUP:
					{
					{
					setState(1073);
					match(STOGROUP);
					setState(1074);
					stogroupName();
					}
					}
					break;
				case CCSID:
					{
					{
					setState(1075);
					match(CCSID);
					setState(1076);
					ccsidValue();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(1079); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==BUFFERPOOL || _la==CCSID || _la==INDEXBP || _la==STOGROUP );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterFunctionStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode RESTRICT() { return getToken(DB2zSQLParser.RESTRICT, 0); }
		public List<FunctionOptionListContext> functionOptionList() {
			return getRuleContexts(FunctionOptionListContext.class);
		}
		public FunctionOptionListContext functionOptionList(int i) {
			return getRuleContext(FunctionOptionListContext.class,i);
		}
		public TerminalNode FUNCTION() { return getToken(DB2zSQLParser.FUNCTION, 0); }
		public FunctionNameContext functionName() {
			return getRuleContext(FunctionNameContext.class,0);
		}
		public TerminalNode SPECIFIC() { return getToken(DB2zSQLParser.SPECIFIC, 0); }
		public SpecificNameContext specificName() {
			return getRuleContext(SpecificNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<FunctionParameterTypeContext> functionParameterType() {
			return getRuleContexts(FunctionParameterTypeContext.class);
		}
		public FunctionParameterTypeContext functionParameterType(int i) {
			return getRuleContext(FunctionParameterTypeContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public AlterFunctionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterFunctionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterFunctionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterFunctionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterFunctionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterFunctionStatementContext alterFunctionStatement() throws RecognitionException {
		AlterFunctionStatementContext _localctx = new AlterFunctionStatementContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_alterFunctionStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1081);
			match(ALTER);
			setState(1100);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FUNCTION:
				{
				{
				setState(1082);
				match(FUNCTION);
				setState(1083);
				functionName();
				setState(1095);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(1084);
					match(LPAREN);
					setState(1085);
					functionParameterType();
					setState(1090);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1086);
						match(COMMA);
						setState(1087);
						functionParameterType();
						}
						}
						setState(1092);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(1093);
					match(RPAREN);
					}
				}

				}
				}
				break;
			case SPECIFIC:
				{
				{
				setState(1097);
				match(SPECIFIC);
				setState(1098);
				match(FUNCTION);
				setState(1099);
				specificName();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1103);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RESTRICT) {
				{
				setState(1102);
				match(RESTRICT);
				}
			}

			setState(1106); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1105);
				functionOptionList();
				}
				}
				setState(1108); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (ALLOW - 34)) | (1L << (ASUTIME - 34)) | (1L << (COLLID - 34)) | (1L << (CONTAINS - 34)) | (1L << (CONTINUE - 34)) | (1L << (DBINFO - 34)) | (1L << (DEFAULT - 34)) | (1L << (DETERMINISTIC - 34)) | (1L << (DISALLOW - 34)))) != 0) || ((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & ((1L << (EXTERNAL - 120)) | (1L << (FINAL - 120)) | (1L << (INHERIT - 120)) | (1L << (LANGUAGE - 120)))) != 0) || ((((_la - 185)) & ~0x3f) == 0 && ((1L << (_la - 185)) & ((1L << (MODIFIES - 185)) | (1L << (NO - 185)) | (1L << (NOT - 185)) | (1L << (NULL - 185)) | (1L << (PACKAGE - 185)) | (1L << (PARAMETER - 185)) | (1L << (PROGRAM - 185)) | (1L << (READS - 185)) | (1L << (RETURNS - 185)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (RUN - 258)) | (1L << (SCRATCHPAD - 258)) | (1L << (SECURITY - 258)) | (1L << (SPECIFIC - 258)) | (1L << (STATIC - 258)) | (1L << (STAY - 258)) | (1L << (VARIANT - 258)) | (1L << (WLM - 258)))) != 0) || ((((_la - 434)) & ~0x3f) == 0 && ((1L << (_la - 434)) & ((1L << (CALLED - 434)) | (1L << (SECURED - 434)) | (1L << (STOP - 434)))) != 0) || _la==CARDINALITY );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterIndexStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode INDEX() { return getToken(DB2zSQLParser.INDEX, 0); }
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public RegenerateClauseContext regenerateClause() {
			return getRuleContext(RegenerateClauseContext.class,0);
		}
		public List<AlterIndexOptionsContext> alterIndexOptions() {
			return getRuleContexts(AlterIndexOptionsContext.class);
		}
		public AlterIndexOptionsContext alterIndexOptions(int i) {
			return getRuleContext(AlterIndexOptionsContext.class,i);
		}
		public List<AlterIndexPartitionOptionsContext> alterIndexPartitionOptions() {
			return getRuleContexts(AlterIndexPartitionOptionsContext.class);
		}
		public AlterIndexPartitionOptionsContext alterIndexPartitionOptions(int i) {
			return getRuleContext(AlterIndexPartitionOptionsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public AlterIndexStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterIndexStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterIndexStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterIndexStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterIndexStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterIndexStatementContext alterIndexStatement() throws RecognitionException {
		AlterIndexStatementContext _localctx = new AlterIndexStatementContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_alterIndexStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1110);
			match(ALTER);
			setState(1111);
			match(INDEX);
			setState(1112);
			indexName();
			setState(1114);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REGENERATE) {
				{
				setState(1113);
				regenerateClause();
				}
			}

			setState(1119);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << BUFFERPOOL) | (1L << CLOSE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLUSTER - 64)) | (1L << (DSSIZE - 64)) | (1L << (ERASE - 64)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (NOT - 192)) | (1L << (PADDED - 192)) | (1L << (PIECESIZE - 192)) | (1L << (PRIQTY - 192)))) != 0) || _la==SECQTY || _la==USING || ((((_la - 459)) & ~0x3f) == 0 && ((1L << (_la - 459)) & ((1L << (COMPRESS - 459)) | (1L << (COPY - 459)) | (1L << (FREEPAGE - 459)) | (1L << (GBPCACHE - 459)) | (1L << (PCTFREE - 459)))) != 0)) {
				{
				{
				setState(1116);
				alterIndexOptions();
				}
				}
				setState(1121);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1130);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALTER) {
				{
				setState(1122);
				alterIndexPartitionOptions();
				setState(1127);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1123);
					match(COMMA);
					setState(1124);
					alterIndexPartitionOptions();
					}
					}
					setState(1129);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterMaskStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode MASK() { return getToken(DB2zSQLParser.MASK, 0); }
		public MaskNameContext maskName() {
			return getRuleContext(MaskNameContext.class,0);
		}
		public TerminalNode ENABLE() { return getToken(DB2zSQLParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(DB2zSQLParser.DISABLE, 0); }
		public RegenerateClauseContext regenerateClause() {
			return getRuleContext(RegenerateClauseContext.class,0);
		}
		public AlterMaskStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterMaskStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterMaskStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterMaskStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterMaskStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterMaskStatementContext alterMaskStatement() throws RecognitionException {
		AlterMaskStatementContext _localctx = new AlterMaskStatementContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_alterMaskStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1132);
			match(ALTER);
			setState(1133);
			match(MASK);
			setState(1134);
			maskName();
			setState(1138);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENABLE:
				{
				setState(1135);
				match(ENABLE);
				}
				break;
			case DISABLE:
				{
				setState(1136);
				match(DISABLE);
				}
				break;
			case REGENERATE:
				{
				setState(1137);
				regenerateClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterPermissionStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode PERMISSION() { return getToken(DB2zSQLParser.PERMISSION, 0); }
		public PermissionNameContext permissionName() {
			return getRuleContext(PermissionNameContext.class,0);
		}
		public TerminalNode ENABLE() { return getToken(DB2zSQLParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(DB2zSQLParser.DISABLE, 0); }
		public RegenerateClauseContext regenerateClause() {
			return getRuleContext(RegenerateClauseContext.class,0);
		}
		public AlterPermissionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterPermissionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterPermissionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterPermissionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterPermissionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterPermissionStatementContext alterPermissionStatement() throws RecognitionException {
		AlterPermissionStatementContext _localctx = new AlterPermissionStatementContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_alterPermissionStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1140);
			match(ALTER);
			setState(1141);
			match(PERMISSION);
			setState(1142);
			permissionName();
			setState(1146);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENABLE:
				{
				setState(1143);
				match(ENABLE);
				}
				break;
			case DISABLE:
				{
				setState(1144);
				match(DISABLE);
				}
				break;
			case REGENERATE:
				{
				setState(1145);
				regenerateClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterProcedureStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode PROCEDURE() { return getToken(DB2zSQLParser.PROCEDURE, 0); }
		public ProcedureNameContext procedureName() {
			return getRuleContext(ProcedureNameContext.class,0);
		}
		public List<ProcedureOptionListContext> procedureOptionList() {
			return getRuleContexts(ProcedureOptionListContext.class);
		}
		public ProcedureOptionListContext procedureOptionList(int i) {
			return getRuleContext(ProcedureOptionListContext.class,i);
		}
		public AlterProcedureStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterProcedureStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterProcedureStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterProcedureStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterProcedureStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterProcedureStatementContext alterProcedureStatement() throws RecognitionException {
		AlterProcedureStatementContext _localctx = new AlterProcedureStatementContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_alterProcedureStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1148);
			match(ALTER);
			setState(1149);
			match(PROCEDURE);
			setState(1150);
			procedureName();
			setState(1152); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1151);
				procedureOptionList();
				}
				}
				setState(1154); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (ALLOW - 34)) | (1L << (ASUTIME - 34)) | (1L << (COLLID - 34)) | (1L << (COMMIT - 34)) | (1L << (CONTAINS - 34)) | (1L << (CONTINUE - 34)) | (1L << (DBINFO - 34)) | (1L << (DEFAULT - 34)) | (1L << (DETERMINISTIC - 34)) | (1L << (DISABLE - 34)) | (1L << (DISALLOW - 34)))) != 0) || ((((_la - 102)) & ~0x3f) == 0 && ((1L << (_la - 102)) & ((1L << (DYNAMIC - 102)) | (1L << (EXTERNAL - 102)) | (1L << (INHERIT - 102)) | (1L << (LANGUAGE - 102)))) != 0) || ((((_la - 185)) & ~0x3f) == 0 && ((1L << (_la - 185)) & ((1L << (MODIFIES - 185)) | (1L << (NO - 185)) | (1L << (NOT - 185)) | (1L << (NULL - 185)) | (1L << (PACKAGE - 185)) | (1L << (PARAMETER - 185)) | (1L << (PROGRAM - 185)) | (1L << (READS - 185)) | (1L << (RESULT - 185)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (RUN - 258)) | (1L << (SECURITY - 258)) | (1L << (STAY - 258)) | (1L << (VARIANT - 258)) | (1L << (WLM - 258)))) != 0) || _la==CALLED || _la==STOP );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterSequenceStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode SEQUENCE() { return getToken(DB2zSQLParser.SEQUENCE, 0); }
		public SequenceNameContext sequenceName() {
			return getRuleContext(SequenceNameContext.class,0);
		}
		public List<SequenceOptionListContext> sequenceOptionList() {
			return getRuleContexts(SequenceOptionListContext.class);
		}
		public SequenceOptionListContext sequenceOptionList(int i) {
			return getRuleContext(SequenceOptionListContext.class,i);
		}
		public AlterSequenceStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterSequenceStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterSequenceStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterSequenceStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterSequenceStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterSequenceStatementContext alterSequenceStatement() throws RecognitionException {
		AlterSequenceStatementContext _localctx = new AlterSequenceStatementContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_alterSequenceStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1156);
			match(ALTER);
			setState(1157);
			match(SEQUENCE);
			setState(1158);
			sequenceName();
			setState(1160); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1159);
				sequenceOptionList();
				}
				}
				setState(1162); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==NO || _la==ORDER || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MAXVALUE - 464)) | (1L << (MINVALUE - 464)) | (1L << (CACHE - 464)) | (1L << (CYCLE - 464)) | (1L << (INCREMENT - 464)) | (1L << (RESTART - 464)))) != 0) );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterStogroupStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode STOGROUP() { return getToken(DB2zSQLParser.STOGROUP, 0); }
		public StogroupNameContext stogroupName() {
			return getRuleContext(StogroupNameContext.class,0);
		}
		public List<StogroupOptionListContext> stogroupOptionList() {
			return getRuleContexts(StogroupOptionListContext.class);
		}
		public StogroupOptionListContext stogroupOptionList(int i) {
			return getRuleContext(StogroupOptionListContext.class,i);
		}
		public AlterStogroupStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterStogroupStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterStogroupStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterStogroupStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterStogroupStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterStogroupStatementContext alterStogroupStatement() throws RecognitionException {
		AlterStogroupStatementContext _localctx = new AlterStogroupStatementContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_alterStogroupStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1164);
			match(ALTER);
			setState(1165);
			match(STOGROUP);
			setState(1166);
			stogroupName();
			setState(1168); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1167);
				stogroupOptionList();
				}
				}
				setState(1170); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==ADD || _la==KEY || _la==NO || ((((_la - 488)) & ~0x3f) == 0 && ((1L << (_la - 488)) & ((1L << (DATACLAS - 488)) | (1L << (MGMTCLAS - 488)) | (1L << (REMOVE - 488)) | (1L << (STORCLAS - 488)))) != 0) );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public AlterTableNameContext alterTableName() {
			return getRuleContext(AlterTableNameContext.class,0);
		}
		public List<TableOptionListContext> tableOptionList() {
			return getRuleContexts(TableOptionListContext.class);
		}
		public TableOptionListContext tableOptionList(int i) {
			return getRuleContext(TableOptionListContext.class,i);
		}
		public AlterTableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTableStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterTableStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterTableStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterTableStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableStatementContext alterTableStatement() throws RecognitionException {
		AlterTableStatementContext _localctx = new AlterTableStatementContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_alterTableStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1172);
			match(ALTER);
			setState(1173);
			match(TABLE);
			setState(1174);
			alterTableName();
			setState(1176); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1175);
				tableOptionList();
				}
				}
				setState(1178); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALTER) | (1L << AUDIT))) != 0) || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & ((1L << (DATA - 84)) | (1L << (DISABLE - 84)) | (1L << (DROP - 84)))) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & ((1L << (KEY - 162)) | (1L << (NO - 162)) | (1L << (NOT - 162)))) != 0) || _la==RENAME || _la==VALIDPROC || _la==VOLATILE || ((((_la - 469)) & ~0x3f) == 0 && ((1L << (_la - 469)) & ((1L << (ENABLE - 469)) | (1L << (ACTIVATE - 469)) | (1L << (APPEND - 469)) | (1L << (DEACTIVATE - 469)) | (1L << (ROTATE - 469)))) != 0) );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTablespaceStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode TABLESPACE() { return getToken(DB2zSQLParser.TABLESPACE, 0); }
		public TablespaceNameContext tablespaceName() {
			return getRuleContext(TablespaceNameContext.class,0);
		}
		public DatabaseNameContext databaseName() {
			return getRuleContext(DatabaseNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public List<TablespaceOptionListContext> tablespaceOptionList() {
			return getRuleContexts(TablespaceOptionListContext.class);
		}
		public TablespaceOptionListContext tablespaceOptionList(int i) {
			return getRuleContext(TablespaceOptionListContext.class,i);
		}
		public AlterPartitionClauseContext alterPartitionClause() {
			return getRuleContext(AlterPartitionClauseContext.class,0);
		}
		public MoveTableClauseContext moveTableClause() {
			return getRuleContext(MoveTableClauseContext.class,0);
		}
		public AlterTablespaceStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTablespaceStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterTablespaceStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterTablespaceStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterTablespaceStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTablespaceStatementContext alterTablespaceStatement() throws RecognitionException {
		AlterTablespaceStatementContext _localctx = new AlterTablespaceStatementContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_alterTablespaceStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1180);
			match(ALTER);
			setState(1181);
			match(TABLESPACE);
			setState(1185);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,38,_ctx) ) {
			case 1:
				{
				setState(1182);
				databaseName();
				setState(1183);
				match(DOT);
				}
				break;
			}
			setState(1187);
			tablespaceName();
			setState(1191);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUFFERPOOL) | (1L << CCSID) | (1L << CLOSE))) != 0) || ((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (DROP - 100)) | (1L << (DSSIZE - 100)) | (1L << (ERASE - 100)) | (1L << (INSERT - 100)))) != 0) || ((((_la - 176)) & ~0x3f) == 0 && ((1L << (_la - 176)) & ((1L << (LOCKMAX - 176)) | (1L << (LOCKSIZE - 176)) | (1L << (NOT - 176)) | (1L << (PRIQTY - 176)))) != 0) || _la==SECQTY || _la==USING || ((((_la - 459)) & ~0x3f) == 0 && ((1L << (_la - 459)) & ((1L << (COMPRESS - 459)) | (1L << (FREEPAGE - 459)) | (1L << (GBPCACHE - 459)) | (1L << (PCTFREE - 459)))) != 0) || ((((_la - 536)) & ~0x3f) == 0 && ((1L << (_la - 536)) & ((1L << (LOG - 536)) | (1L << (LOGGED - 536)) | (1L << (MAXPARTITIONS - 536)) | (1L << (MAXROWS - 536)) | (1L << (MEMBER - 536)) | (1L << (PAGENUM - 536)) | (1L << (SEGSIZE - 536)) | (1L << (TRACKMOD - 536)))) != 0)) {
				{
				{
				setState(1188);
				tablespaceOptionList();
				}
				}
				setState(1193);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1195);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALTER || _la==PART || _la==PARTITION) {
				{
				setState(1194);
				alterPartitionClause();
				}
			}

			setState(1198);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MOVE) {
				{
				setState(1197);
				moveTableClause();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTriggerStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode TRIGGER() { return getToken(DB2zSQLParser.TRIGGER, 0); }
		public TriggerNameContext triggerName() {
			return getRuleContext(TriggerNameContext.class,0);
		}
		public TerminalNode SECURED() { return getToken(DB2zSQLParser.SECURED, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public AlterTriggerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTriggerStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterTriggerStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterTriggerStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterTriggerStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTriggerStatementContext alterTriggerStatement() throws RecognitionException {
		AlterTriggerStatementContext _localctx = new AlterTriggerStatementContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_alterTriggerStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1200);
			match(ALTER);
			setState(1201);
			match(TRIGGER);
			{
			setState(1202);
			schemaName();
			setState(1203);
			match(DOT);
			}
			setState(1205);
			triggerName();
			setState(1207);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(1206);
				match(NOT);
				}
			}

			setState(1209);
			match(SECURED);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTrustedContextStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode TRUSTED() { return getToken(DB2zSQLParser.TRUSTED, 0); }
		public TerminalNode CONTEXT() { return getToken(DB2zSQLParser.CONTEXT, 0); }
		public ContextNameContext contextName() {
			return getRuleContext(ContextNameContext.class,0);
		}
		public List<TrustedContextOptionListContext> trustedContextOptionList() {
			return getRuleContexts(TrustedContextOptionListContext.class);
		}
		public TrustedContextOptionListContext trustedContextOptionList(int i) {
			return getRuleContext(TrustedContextOptionListContext.class,i);
		}
		public AlterTrustedContextStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTrustedContextStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterTrustedContextStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterTrustedContextStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterTrustedContextStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTrustedContextStatementContext alterTrustedContextStatement() throws RecognitionException {
		AlterTrustedContextStatementContext _localctx = new AlterTrustedContextStatementContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_alterTrustedContextStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1211);
			match(ALTER);
			setState(1212);
			match(TRUSTED);
			setState(1213);
			match(CONTEXT);
			setState(1214);
			contextName();
			setState(1216); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1215);
				trustedContextOptionList();
				}
				}
				setState(1218); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==ADD || _la==ALTER || ((((_la - 90)) & ~0x3f) == 0 && ((1L << (_la - 90)) & ((1L << (DEFAULT - 90)) | (1L << (DISABLE - 90)) | (1L << (DROP - 90)))) != 0) || _la==NO || _la==ENABLE || _la==REPLACE );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterViewStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode VIEW() { return getToken(DB2zSQLParser.VIEW, 0); }
		public ViewNameContext viewName() {
			return getRuleContext(ViewNameContext.class,0);
		}
		public TerminalNode REGENERATE() { return getToken(DB2zSQLParser.REGENERATE, 0); }
		public TerminalNode USING() { return getToken(DB2zSQLParser.USING, 0); }
		public TerminalNode APPLICATION() { return getToken(DB2zSQLParser.APPLICATION, 0); }
		public TerminalNode COMPATIBILITY() { return getToken(DB2zSQLParser.COMPATIBILITY, 0); }
		public ApplCompatValueContext applCompatValue() {
			return getRuleContext(ApplCompatValueContext.class,0);
		}
		public AlterViewStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterViewStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterViewStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterViewStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterViewStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterViewStatementContext alterViewStatement() throws RecognitionException {
		AlterViewStatementContext _localctx = new AlterViewStatementContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_alterViewStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1220);
			match(ALTER);
			setState(1221);
			match(VIEW);
			setState(1222);
			viewName();
			setState(1223);
			match(REGENERATE);
			setState(1228);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(1224);
				match(USING);
				setState(1225);
				match(APPLICATION);
				setState(1226);
				match(COMPATIBILITY);
				setState(1227);
				applCompatValue();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AssociateLocatorsStatementContext extends ParserRuleContext {
		public TerminalNode ASSOCIATE() { return getToken(DB2zSQLParser.ASSOCIATE, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<RsLocatorVariableContext> rsLocatorVariable() {
			return getRuleContexts(RsLocatorVariableContext.class);
		}
		public RsLocatorVariableContext rsLocatorVariable(int i) {
			return getRuleContext(RsLocatorVariableContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode PROCEDURE() { return getToken(DB2zSQLParser.PROCEDURE, 0); }
		public TerminalNode LOCATOR() { return getToken(DB2zSQLParser.LOCATOR, 0); }
		public TerminalNode LOCATORS() { return getToken(DB2zSQLParser.LOCATORS, 0); }
		public ProcedureNameContext procedureName() {
			return getRuleContext(ProcedureNameContext.class,0);
		}
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public TerminalNode RESULT() { return getToken(DB2zSQLParser.RESULT, 0); }
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public AssociateLocatorsStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_associateLocatorsStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAssociateLocatorsStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAssociateLocatorsStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAssociateLocatorsStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AssociateLocatorsStatementContext associateLocatorsStatement() throws RecognitionException {
		AssociateLocatorsStatementContext _localctx = new AssociateLocatorsStatementContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_associateLocatorsStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1230);
			match(ASSOCIATE);
			setState(1233);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RESULT) {
				{
				setState(1231);
				match(RESULT);
				setState(1232);
				match(SET);
				}
			}

			setState(1235);
			_la = _input.LA(1);
			if ( !(_la==LOCATOR || _la==LOCATORS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1236);
			match(LPAREN);
			setState(1237);
			rsLocatorVariable();
			setState(1242);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1238);
				match(COMMA);
				setState(1239);
				rsLocatorVariable();
				}
				}
				setState(1244);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1245);
			match(RPAREN);
			setState(1246);
			match(WITH);
			setState(1247);
			match(PROCEDURE);
			setState(1250);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTEGERLITERAL:
			case NUMERICLITERAL:
			case ADD:
			case AFTER:
			case ALL:
			case ALLOCATE:
			case ALLOW:
			case ALTER:
			case ALTERAND:
			case ANY:
			case ARRAY:
			case ARRAY_EXISTS:
			case AS:
			case ASENSITIVE:
			case ASSOCIATE:
			case ASUTIME:
			case AT:
			case AUDIT:
			case AUX:
			case AUXILIARY:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BUFFERPOOL:
			case BY:
			case CALL:
			case CAPTURE:
			case CASCADED:
			case CASE:
			case CAST:
			case CCSID:
			case CHAR:
			case CHARACTER:
			case CHECK:
			case CLONE:
			case CLOSE:
			case CLUSTER:
			case COLLECTION:
			case COLLID:
			case COLUMN:
			case COMMENT:
			case COMMIT:
			case CONCAT:
			case CONDITION:
			case CONNECT:
			case CONNECTION:
			case CONSTRAINT:
			case CONTAINS:
			case CONTENT:
			case CONTINUE:
			case CREATE:
			case CUBE:
			case CURRENT:
			case CURRENT_LC_CTYPE:
			case CURRVAL:
			case CURSOR:
			case DATA:
			case DATABASE:
			case DAY:
			case DAYS:
			case DBINFO:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DISABLE:
			case DISALLOW:
			case DISTINCT:
			case DO:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSSIZE:
			case DYNAMIC:
			case EDITPROC:
			case ELSE:
			case ELSEIF:
			case ENCODING:
			case ENCRYPTION:
			case END:
			case END_EXEC:
			case ENDING:
			case ERASE:
			case ESCAPE:
			case EXCEPT:
			case EXCEPTION:
			case EXEC_SQL:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case FENCED:
			case FETCH:
			case FIELDPROC:
			case FINAL:
			case FIRST:
			case FOR:
			case FREE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANT:
			case GROUP:
			case HANDLER:
			case HAVING:
			case HOLD:
			case HOUR:
			case HOURS:
			case IF:
			case IMMEDIATE:
			case IN:
			case INCLUSIVE:
			case INDEX:
			case INDEXBP:
			case INHERIT:
			case INNER:
			case INOUT:
			case INSENSITIVE:
			case INSERT:
			case INTERSECT:
			case INTO:
			case IS:
			case ISOBID:
			case ITERATE:
			case JAR:
			case JOIN:
			case KEEP:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LAST:
			case LC_CTYPE:
			case LEAVE:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOCALE:
			case LOCATOR:
			case LOCATORS:
			case LOCK:
			case LOCKMAX:
			case LOCKSIZE:
			case LONG:
			case LOOP:
			case MAINTAINED:
			case MATERIALIZED:
			case MICROSECOND:
			case MICROSECONDS:
			case MODIFIES:
			case MONTH:
			case MONTHS:
			case NEXT:
			case NEXTVAL:
			case NO:
			case NONE:
			case NOT:
			case NULL:
			case NULLS:
			case NUMPARTS:
			case OBID:
			case OF:
			case OFFSET:
			case OLD:
			case ON:
			case OPEN:
			case OPTIMIZATION:
			case OPTIMIZE:
			case OR:
			case ORDER:
			case ORGANIZATION:
			case OUT:
			case OUTER:
			case PACKAGE:
			case PADDED:
			case PARAMETER:
			case PART:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONING:
			case PATH:
			case PERIOD:
			case PIECESIZE:
			case PLAN:
			case PRECISION:
			case PREPARE:
			case PREVVAL:
			case PRIOR:
			case PRIQTY:
			case PRIVILEGES:
			case PROCEDURE:
			case PROGRAM:
			case PSID:
			case PUBLIC:
			case QUERY:
			case QUERYNO:
			case READS:
			case REFERENCES:
			case REFRESH:
			case RELEASE:
			case RENAME:
			case REPEAT:
			case RESIGNAL:
			case RESTRICT:
			case RESULT:
			case RESULT_SET_LOCATOR:
			case RETURN:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUND_CEILING:
			case ROUND_DOWN:
			case ROUND_FLOOR:
			case ROUND_HALF_DOWN:
			case ROUND_HALF_EVEN:
			case ROUND_HALF_UP:
			case ROUND_UP:
			case ROW:
			case ROWSET:
			case RUN:
			case SAVEPOINT:
			case SCHEMA:
			case SCRATCHPAD:
			case SECOND:
			case SECONDS:
			case SECQTY:
			case SECURITY:
			case SELECT:
			case SENSITIVE:
			case SEQUENCE:
			case SET:
			case SIGNAL:
			case SIMPLE:
			case SOME:
			case SOURCE:
			case SPECIFIC:
			case STANDARD:
			case STATEMENT:
			case STATIC:
			case STAY:
			case STOGROUP:
			case STORES:
			case STYLE:
			case SUMMARY:
			case SYNONYM:
			case SYSDATE:
			case SYSTEM:
			case SYSTIMESTAMP:
			case TABLE:
			case TABLESPACE:
			case THEN:
			case TO:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNDO:
			case UNION:
			case UNIQUE:
			case UNTIL:
			case UPDATE:
			case USING:
			case VALIDPROC:
			case VALUE:
			case VALUES:
			case VARIABLE:
			case VARIANT:
			case VCAT:
			case VERSIONING:
			case VIEW:
			case VOLATILE:
			case VOLUMES:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WLM:
			case XMLCAST:
			case XMLEXISTS:
			case XMLNAMESPACES:
			case YEAR:
			case YEARS:
			case ZONE:
			case AND:
			case ARRAY_AGG:
			case ASC:
			case AVG:
			case BIT:
			case CHANGE:
			case CODEUNITS16:
			case CODEUNITS32:
			case CORR:
			case CORRELATION:
			case COUNT:
			case COUNT_BIG:
			case COVAR:
			case COVARIANCE:
			case COVARIANCE_SAMP:
			case COVAR_POP:
			case COVAR_SAMP:
			case CS:
			case CUME_DIST:
			case DENSE_RANK:
			case DESC:
			case EBCDIC:
			case EXCLUSIVE:
			case FIRST_VALUE:
			case FOLLOWING:
			case GROUPING:
			case IGNORE:
			case INDICATOR:
			case INPUT:
			case ISNULL:
			case LAG:
			case LARGE:
			case LAST_VALUE:
			case LEAD:
			case LISTAGG:
			case LOCKED:
			case LOCKS:
			case MEDIAN:
			case MINUTES:
			case MIXED:
			case NOTNULL:
			case NTH_VALUE:
			case NTILE:
			case NUMERIC:
			case OBJECT:
			case OCTETS:
			case ONLY:
			case OVER:
			case PASSING:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PERCENT_RANK:
			case PRECEDING:
			case PREVIOUS:
			case RANGE:
			case RANK:
			case RATIO_TO_REPORT:
			case READ:
			case REF:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_ICPT:
			case REGR_INTERCEPT:
			case REGR_R2:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case RESPECT:
			case ROW_NUMBER:
			case ROWS:
			case RR:
			case RS:
			case SBCS:
			case SELECTIVITY:
			case SETS:
			case SHARE:
			case SKIP_:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case TOKEN:
			case UNBOUNDED:
			case UNPACK:
			case UR:
			case USE:
			case VAR:
			case VARIANCE:
			case VARIANCE_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARYING:
			case WITHOUT:
			case XML:
			case XMLAGG:
			case COLUMNS:
			case SQLID:
			case ORDINALITY:
			case SYSTEM_TIME:
			case BUSINESS_TIME:
			case MULTIPLIER:
			case UNNEST:
			case CROSS:
			case CALLER:
			case CLIENT:
			case POSITIONING:
			case SCROLL:
			case ACTION:
			case ASSEMBLE:
			case C_:
			case CALLED:
			case COBOL:
			case DB2:
			case DEFINER:
			case DISPATCH:
			case ENVIRONMENT:
			case FAILURE:
			case FAILURES:
			case JAVA:
			case MAIN:
			case NAME:
			case OPTIONS:
			case PARALLEL:
			case PLI:
			case REGISTERS:
			case RESIDENT:
			case SECURED:
			case SPECIAL:
			case SQL:
			case STOP:
			case SUB:
			case YES:
			case APPLICATION:
			case CHANGED:
			case COMPATIBILITY:
			case COMPRESS:
			case COPY:
			case FREEPAGE:
			case GBPCACHE:
			case INCLUDE:
			case MAXVALUE:
			case MINVALUE:
			case PCTFREE:
			case REGENERATE:
			case MASK:
			case ENABLE:
			case PERMISSION:
			case ATOMIC:
			case SQLEXCEPTION:
			case MERGE:
			case MATCHED:
			case SQLSTATE:
			case MESSAGE_TEXT:
			case OVERRIDING:
			case PORTION:
			case DB2SQL:
			case DEBUG:
			case GENERAL:
			case MODE_:
			case REXX:
			case CACHE:
			case CYCLE:
			case INCREMENT:
			case RESTART:
			case DATACLAS:
			case MGMTCLAS:
			case REMOVE:
			case STORCLAS:
			case ACCESS:
			case ACTIVATE:
			case ALWAYS:
			case APPEND:
			case ARCHIVE:
			case BUSINESS:
			case CASCADE:
			case CHANGES:
			case CONTROL:
			case DEACTIVATE:
			case DEFERRED:
			case EACH:
			case ENFORCED:
			case EXTRA:
			case FOREIGN:
			case HIDDEN_:
			case HISTORY:
			case ID:
			case IDENTITY:
			case IMPLICITLY:
			case INITIALLY:
			case INLINE:
			case OPERATION:
			case ORGANIZE:
			case OVERLAPS:
			case PACKAGE_NAME:
			case PACKAGE_SCHEMA:
			case PACKAGE_VERSION:
			case PRIMARY:
			case RESET:
			case ROTATE:
			case START:
			case SYSIBM:
			case TRANSACTION:
			case XMLSCHEMA:
			case ELEMENT:
			case URL:
			case NAMESPACE:
			case LOCATION:
			case SYSXSR:
			case ALGORITHM:
			case FIXEDLENGTH:
			case HUFFMAN:
			case LOB:
			case LOG:
			case LOGGED:
			case MAXPARTITIONS:
			case MAXROWS:
			case MEMBER:
			case MOVE:
			case PAGE:
			case PAGENUM:
			case PENDING:
			case RELATIVE:
			case SEGSIZE:
			case TRACKMOD:
			case ADDRESS:
			case ATTRIBUTES:
			case AUTHENTICATION:
			case AUTHID:
			case CONTEXT:
			case JOBNAME:
			case OWNER:
			case PROFILE:
			case QUALIFIER:
			case SERVAUTH:
			case TRUSTED:
			case SECTION:
			case ACTIVE:
			case VERSION:
			case ALIAS:
			case WORK:
			case WORKFILE:
			case SYSDEFLT:
			case NULTERM:
			case STRUCTURE:
			case GENERIC:
			case TEMPORARY:
			case DEFER:
			case DEFINE:
			case EXCLUDE:
			case GENERATE:
			case KEYS:
			case XMLPATTERN:
			case ABS:
			case ABSVAL:
			case ACOS:
			case ADD_DAYS:
			case ADD_MONTHS:
			case ARRAY_DELETE:
			case ARRAY_FIRST:
			case ARRAY_LAST:
			case ARRAY_NEXT:
			case ARRAY_PRIOR:
			case ARRAY_TRIM:
			case ASCII:
			case ASCII_CHR:
			case ASCIISTR:
			case ASCII_STR:
			case ASIN:
			case ATAN:
			case ATAN2:
			case ATANH:
			case BIGINT:
			case BINARY:
			case BITAND:
			case BITANDNOT:
			case BITNOT:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BTRIM:
			case CARDINALITY:
			case CCSID_ENCODING:
			case CEIL:
			case CEILING:
			case CHAR9:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case CHR:
			case CLOB:
			case COALESCE:
			case COLLATION_KEY:
			case COMPARE_DECFLOAT:
			case COS:
			case COSH:
			case DATE:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFWEEK_ISO:
			case DAYOFYEAR:
			case DAYS_BETWEEN:
			case DBCLOB:
			case DEC:
			case DECFLOAT:
			case DECFLOAT_FORMAT:
			case DECFLOAT_SORTKEY:
			case DECIMAL:
			case DECODE:
			case DECRYPT_BINARY:
			case DECRYPT_BIT:
			case DECRYPT_CHAR:
			case DECRYPT_DATAKEY_BIGINT:
			case DECRYPT_DATAKEY_BIT:
			case DECRYPT_DATAKEY_CLOB:
			case DECRYPT_DATAKEY_DBCLOB:
			case DECRYPT_DATAKEY_DECIMAL:
			case DECRYPT_DATAKEY_INTEGER:
			case DECRYPT_DATAKEY_VARCHAR:
			case DECRYPT_DATAKEY_VARGRAPHIC:
			case DECRYPT_DB:
			case DEGREES:
			case DIFFERENCE:
			case DIGITS:
			case DOUBLE_PRECISION:
			case DSN_XMLVALIDATE:
			case EBCDIC_CHR:
			case EBCDIC_STR:
			case ENCRYPT_DATAKEY:
			case ENCRYPT_TDES:
			case EXP:
			case EXTRACT:
			case FLOAT:
			case FLOOR:
			case GENERATE_UNIQUE:
			case GENERATE_UNIQUE_BINARY:
			case GETHINT:
			case GETVARIABLE:
			case GRAPHIC:
			case GREATEST:
			case HASH:
			case HASH_CRC32:
			case HASH_MD5:
			case HASH_SHA1:
			case HASH_SHA256:
			case HEX:
			case IDENTITY_VAL_LOCAL:
			case IFNULL:
			case INSTR:
			case INT:
			case INTEGER:
			case JULIAN_DAY:
			case LAST_DAY:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LN:
			case LOCATE:
			case LOCATE_IN_STRING:
			case LOG10:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAX:
			case MAX_CARDINALITY:
			case MIDNIGHT_SECONDS:
			case MIN:
			case MINUTE:
			case MOD:
			case MONTHS_BETWEEN:
			case MQREAD:
			case MQREADCLOB:
			case MQRECEIVE:
			case MQRECEIVECLOB:
			case MQSEND:
			case MULTIPLY_ALT:
			case NEXT_DAY:
			case NEXT_MONTH:
			case NORMALIZE_DECFLOAT:
			case NORMALIZE_STRING:
			case NULLIF:
			case NVL:
			case OVERLAY:
			case PACK:
			case POSITION:
			case POSSTR:
			case POW:
			case POWER:
			case QUANTIZE:
			case QUARTER:
			case RADIANS:
			case RAISE_ERROR:
			case RAND:
			case RANDOM:
			case REAL:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REPLACE:
			case RID:
			case ROUND:
			case ROUND_TIMESTAMP:
			case ROWID:
			case RPAD:
			case RTRIM:
			case SCORE:
			case SIGN:
			case SIN:
			case SINH:
			case SMALLINT:
			case SOAPHTTPC:
			case SOAPHTTPNC:
			case SOAPHTTPNV:
			case SOAPHTTPV:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STRIP:
			case STRLEFT:
			case STRPOS:
			case STRRIGHT:
			case SUBSTR:
			case SUBSTRING:
			case TAN:
			case TANH:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIMESTAMP_FORMAT:
			case TIMESTAMP_ISO:
			case TIMESTAMP_TZ:
			case TO_CHAR:
			case TO_CLOB:
			case TO_DATE:
			case TO_NUMBER:
			case TOTALORDER:
			case TO_TIMESTAMP:
			case TRANSLATE:
			case TRIM:
			case TRIM_ARRAY:
			case TRUNC:
			case TRUNC_TIMESTAMP:
			case UCASE:
			case UNICODE:
			case UNICODE_STR:
			case UNISTR:
			case UPPER:
			case VARBINARY:
			case VARCHAR:
			case VARCHAR9:
			case VARCHAR_BIT_FORMAT:
			case VARCHAR_FORMAT:
			case VARGRAPHIC:
			case VERIFY_GROUP_FOR_USER:
			case VERIFY_ROLE_FOR_USER:
			case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
			case WEEK:
			case WEEK_ISO:
			case WRAP:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLCONCAT:
			case XMLDOCUMENT:
			case XMLELEMENT:
			case XMLFOREST:
			case XMLMODIFY:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLSERIALIZE:
			case XMLTEXT:
			case XMLXSROBJECTID:
			case XSLTRANSFORM:
			case CURRENT_ACCELERATOR:
			case CURRENT_APPLICATION_COMPATIBILITY:
			case CURRENT_APPLICATION_ENCODING_SCHEME:
			case CURRENT_CLIENT_ACCTNG:
			case CURRENT_CLIENT_APPLNAME:
			case CURRENT_CLIENT_CORR_TOKEN:
			case CURRENT_CLIENT_USERID:
			case CURRENT_CLIENT_WRKSTNNAME:
			case CURRENT_DATE:
			case CURRENT_DEBUG_MODE:
			case CURRENT_DECFLOAT_ROUNDING_MODE:
			case CURRENT_DEGREE:
			case CURRENT_EXPLAIN_MODE:
			case CURRENT_GET_ACCEL_ARCHIVE:
			case CURRENT_LOCALE_LC_CTYPE:
			case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
			case CURRENT_MEMBER:
			case CURRENT_OPTIMIZATION_HINT:
			case CURRENT_PACKAGE_PATH:
			case CURRENT_PACKAGESET:
			case CURRENT_PATH:
			case CURRENT_PRECISION:
			case CURRENT_QUERY_ACCELERATION:
			case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
			case CURRENT_REFRESH_AGE:
			case CURRENT_ROUTINE_VERSION:
			case CURRENT_RULES:
			case CURRENT_SCHEMA:
			case CURRENT_SERVER:
			case CURRENT_SQLID:
			case CURRENT_TEMPORAL_BUSINESS_TIME:
			case CURRENT_TEMPORAL_SYSTEM_TIME:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_TIME_ZONE:
			case ENCRYPTION_PASSWORD:
			case SESSION_TIME_ZONE:
			case SESSION_USER:
			case USER:
			case ADMIN_TASK_LIST:
			case ADMIN_TASK_OUTPUT:
			case ADMIN_TASK_STATUS:
			case BLOCKING_THREADS:
			case MQREADALL:
			case MQREADALLCLOB:
			case MQRECEIVEALL:
			case MQRECEIVEALLCLOB:
			case XMLTABLE:
			case SQLIDENTIFIER:
				{
				setState(1248);
				procedureName();
				}
				break;
			case COLON:
				{
				setState(1249);
				hostVariable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BeginDeclareSectionStatementContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(DB2zSQLParser.BEGIN, 0); }
		public TerminalNode DECLARE() { return getToken(DB2zSQLParser.DECLARE, 0); }
		public TerminalNode SECTION() { return getToken(DB2zSQLParser.SECTION, 0); }
		public BeginDeclareSectionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_beginDeclareSectionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterBeginDeclareSectionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitBeginDeclareSectionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitBeginDeclareSectionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BeginDeclareSectionStatementContext beginDeclareSectionStatement() throws RecognitionException {
		BeginDeclareSectionStatementContext _localctx = new BeginDeclareSectionStatementContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_beginDeclareSectionStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1252);
			match(BEGIN);
			setState(1253);
			match(DECLARE);
			setState(1254);
			match(SECTION);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CallStatementContext extends ParserRuleContext {
		public TerminalNode CALL() { return getToken(DB2zSQLParser.CALL, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public ProcedureNameContext procedureName() {
			return getRuleContext(ProcedureNameContext.class,0);
		}
		public List<HostVariableContext> hostVariable() {
			return getRuleContexts(HostVariableContext.class);
		}
		public HostVariableContext hostVariable(int i) {
			return getRuleContext(HostVariableContext.class,i);
		}
		public TerminalNode USING() { return getToken(DB2zSQLParser.USING, 0); }
		public TerminalNode DESCRIPTOR() { return getToken(DB2zSQLParser.DESCRIPTOR, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> NULL() { return getTokens(DB2zSQLParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(DB2zSQLParser.NULL, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public List<TerminalNode> TABLE() { return getTokens(DB2zSQLParser.TABLE); }
		public TerminalNode TABLE(int i) {
			return getToken(DB2zSQLParser.TABLE, i);
		}
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public CallStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_callStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCallStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCallStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCallStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CallStatementContext callStatement() throws RecognitionException {
		CallStatementContext _localctx = new CallStatementContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_callStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1256);
			match(CALL);
			setState(1259);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTEGERLITERAL:
			case NUMERICLITERAL:
			case ADD:
			case AFTER:
			case ALL:
			case ALLOCATE:
			case ALLOW:
			case ALTER:
			case ALTERAND:
			case ANY:
			case ARRAY:
			case ARRAY_EXISTS:
			case AS:
			case ASENSITIVE:
			case ASSOCIATE:
			case ASUTIME:
			case AT:
			case AUDIT:
			case AUX:
			case AUXILIARY:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BUFFERPOOL:
			case BY:
			case CALL:
			case CAPTURE:
			case CASCADED:
			case CASE:
			case CAST:
			case CCSID:
			case CHAR:
			case CHARACTER:
			case CHECK:
			case CLONE:
			case CLOSE:
			case CLUSTER:
			case COLLECTION:
			case COLLID:
			case COLUMN:
			case COMMENT:
			case COMMIT:
			case CONCAT:
			case CONDITION:
			case CONNECT:
			case CONNECTION:
			case CONSTRAINT:
			case CONTAINS:
			case CONTENT:
			case CONTINUE:
			case CREATE:
			case CUBE:
			case CURRENT:
			case CURRENT_LC_CTYPE:
			case CURRVAL:
			case CURSOR:
			case DATA:
			case DATABASE:
			case DAY:
			case DAYS:
			case DBINFO:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DISABLE:
			case DISALLOW:
			case DISTINCT:
			case DO:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSSIZE:
			case DYNAMIC:
			case EDITPROC:
			case ELSE:
			case ELSEIF:
			case ENCODING:
			case ENCRYPTION:
			case END:
			case END_EXEC:
			case ENDING:
			case ERASE:
			case ESCAPE:
			case EXCEPT:
			case EXCEPTION:
			case EXEC_SQL:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case FENCED:
			case FETCH:
			case FIELDPROC:
			case FINAL:
			case FIRST:
			case FOR:
			case FREE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANT:
			case GROUP:
			case HANDLER:
			case HAVING:
			case HOLD:
			case HOUR:
			case HOURS:
			case IF:
			case IMMEDIATE:
			case IN:
			case INCLUSIVE:
			case INDEX:
			case INDEXBP:
			case INHERIT:
			case INNER:
			case INOUT:
			case INSENSITIVE:
			case INSERT:
			case INTERSECT:
			case INTO:
			case IS:
			case ISOBID:
			case ITERATE:
			case JAR:
			case JOIN:
			case KEEP:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LAST:
			case LC_CTYPE:
			case LEAVE:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOCALE:
			case LOCATOR:
			case LOCATORS:
			case LOCK:
			case LOCKMAX:
			case LOCKSIZE:
			case LONG:
			case LOOP:
			case MAINTAINED:
			case MATERIALIZED:
			case MICROSECOND:
			case MICROSECONDS:
			case MODIFIES:
			case MONTH:
			case MONTHS:
			case NEXT:
			case NEXTVAL:
			case NO:
			case NONE:
			case NOT:
			case NULL:
			case NULLS:
			case NUMPARTS:
			case OBID:
			case OF:
			case OFFSET:
			case OLD:
			case ON:
			case OPEN:
			case OPTIMIZATION:
			case OPTIMIZE:
			case OR:
			case ORDER:
			case ORGANIZATION:
			case OUT:
			case OUTER:
			case PACKAGE:
			case PADDED:
			case PARAMETER:
			case PART:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONING:
			case PATH:
			case PERIOD:
			case PIECESIZE:
			case PLAN:
			case PRECISION:
			case PREPARE:
			case PREVVAL:
			case PRIOR:
			case PRIQTY:
			case PRIVILEGES:
			case PROCEDURE:
			case PROGRAM:
			case PSID:
			case PUBLIC:
			case QUERY:
			case QUERYNO:
			case READS:
			case REFERENCES:
			case REFRESH:
			case RELEASE:
			case RENAME:
			case REPEAT:
			case RESIGNAL:
			case RESTRICT:
			case RESULT:
			case RESULT_SET_LOCATOR:
			case RETURN:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUND_CEILING:
			case ROUND_DOWN:
			case ROUND_FLOOR:
			case ROUND_HALF_DOWN:
			case ROUND_HALF_EVEN:
			case ROUND_HALF_UP:
			case ROUND_UP:
			case ROW:
			case ROWSET:
			case RUN:
			case SAVEPOINT:
			case SCHEMA:
			case SCRATCHPAD:
			case SECOND:
			case SECONDS:
			case SECQTY:
			case SECURITY:
			case SELECT:
			case SENSITIVE:
			case SEQUENCE:
			case SET:
			case SIGNAL:
			case SIMPLE:
			case SOME:
			case SOURCE:
			case SPECIFIC:
			case STANDARD:
			case STATEMENT:
			case STATIC:
			case STAY:
			case STOGROUP:
			case STORES:
			case STYLE:
			case SUMMARY:
			case SYNONYM:
			case SYSDATE:
			case SYSTEM:
			case SYSTIMESTAMP:
			case TABLE:
			case TABLESPACE:
			case THEN:
			case TO:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNDO:
			case UNION:
			case UNIQUE:
			case UNTIL:
			case UPDATE:
			case USING:
			case VALIDPROC:
			case VALUE:
			case VALUES:
			case VARIABLE:
			case VARIANT:
			case VCAT:
			case VERSIONING:
			case VIEW:
			case VOLATILE:
			case VOLUMES:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WLM:
			case XMLCAST:
			case XMLEXISTS:
			case XMLNAMESPACES:
			case YEAR:
			case YEARS:
			case ZONE:
			case AND:
			case ARRAY_AGG:
			case ASC:
			case AVG:
			case BIT:
			case CHANGE:
			case CODEUNITS16:
			case CODEUNITS32:
			case CORR:
			case CORRELATION:
			case COUNT:
			case COUNT_BIG:
			case COVAR:
			case COVARIANCE:
			case COVARIANCE_SAMP:
			case COVAR_POP:
			case COVAR_SAMP:
			case CS:
			case CUME_DIST:
			case DENSE_RANK:
			case DESC:
			case EBCDIC:
			case EXCLUSIVE:
			case FIRST_VALUE:
			case FOLLOWING:
			case GROUPING:
			case IGNORE:
			case INDICATOR:
			case INPUT:
			case ISNULL:
			case LAG:
			case LARGE:
			case LAST_VALUE:
			case LEAD:
			case LISTAGG:
			case LOCKED:
			case LOCKS:
			case MEDIAN:
			case MINUTES:
			case MIXED:
			case NOTNULL:
			case NTH_VALUE:
			case NTILE:
			case NUMERIC:
			case OBJECT:
			case OCTETS:
			case ONLY:
			case OVER:
			case PASSING:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PERCENT_RANK:
			case PRECEDING:
			case PREVIOUS:
			case RANGE:
			case RANK:
			case RATIO_TO_REPORT:
			case READ:
			case REF:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_ICPT:
			case REGR_INTERCEPT:
			case REGR_R2:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case RESPECT:
			case ROW_NUMBER:
			case ROWS:
			case RR:
			case RS:
			case SBCS:
			case SELECTIVITY:
			case SETS:
			case SHARE:
			case SKIP_:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case TOKEN:
			case UNBOUNDED:
			case UNPACK:
			case UR:
			case USE:
			case VAR:
			case VARIANCE:
			case VARIANCE_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARYING:
			case WITHOUT:
			case XML:
			case XMLAGG:
			case COLUMNS:
			case SQLID:
			case ORDINALITY:
			case SYSTEM_TIME:
			case BUSINESS_TIME:
			case MULTIPLIER:
			case UNNEST:
			case CROSS:
			case CALLER:
			case CLIENT:
			case POSITIONING:
			case SCROLL:
			case ACTION:
			case ASSEMBLE:
			case C_:
			case CALLED:
			case COBOL:
			case DB2:
			case DEFINER:
			case DISPATCH:
			case ENVIRONMENT:
			case FAILURE:
			case FAILURES:
			case JAVA:
			case MAIN:
			case NAME:
			case OPTIONS:
			case PARALLEL:
			case PLI:
			case REGISTERS:
			case RESIDENT:
			case SECURED:
			case SPECIAL:
			case SQL:
			case STOP:
			case SUB:
			case YES:
			case APPLICATION:
			case CHANGED:
			case COMPATIBILITY:
			case COMPRESS:
			case COPY:
			case FREEPAGE:
			case GBPCACHE:
			case INCLUDE:
			case MAXVALUE:
			case MINVALUE:
			case PCTFREE:
			case REGENERATE:
			case MASK:
			case ENABLE:
			case PERMISSION:
			case ATOMIC:
			case SQLEXCEPTION:
			case MERGE:
			case MATCHED:
			case SQLSTATE:
			case MESSAGE_TEXT:
			case OVERRIDING:
			case PORTION:
			case DB2SQL:
			case DEBUG:
			case GENERAL:
			case MODE_:
			case REXX:
			case CACHE:
			case CYCLE:
			case INCREMENT:
			case RESTART:
			case DATACLAS:
			case MGMTCLAS:
			case REMOVE:
			case STORCLAS:
			case ACCESS:
			case ACTIVATE:
			case ALWAYS:
			case APPEND:
			case ARCHIVE:
			case BUSINESS:
			case CASCADE:
			case CHANGES:
			case CONTROL:
			case DEACTIVATE:
			case DEFERRED:
			case EACH:
			case ENFORCED:
			case EXTRA:
			case FOREIGN:
			case HIDDEN_:
			case HISTORY:
			case ID:
			case IDENTITY:
			case IMPLICITLY:
			case INITIALLY:
			case INLINE:
			case OPERATION:
			case ORGANIZE:
			case OVERLAPS:
			case PACKAGE_NAME:
			case PACKAGE_SCHEMA:
			case PACKAGE_VERSION:
			case PRIMARY:
			case RESET:
			case ROTATE:
			case START:
			case SYSIBM:
			case TRANSACTION:
			case XMLSCHEMA:
			case ELEMENT:
			case URL:
			case NAMESPACE:
			case LOCATION:
			case SYSXSR:
			case ALGORITHM:
			case FIXEDLENGTH:
			case HUFFMAN:
			case LOB:
			case LOG:
			case LOGGED:
			case MAXPARTITIONS:
			case MAXROWS:
			case MEMBER:
			case MOVE:
			case PAGE:
			case PAGENUM:
			case PENDING:
			case RELATIVE:
			case SEGSIZE:
			case TRACKMOD:
			case ADDRESS:
			case ATTRIBUTES:
			case AUTHENTICATION:
			case AUTHID:
			case CONTEXT:
			case JOBNAME:
			case OWNER:
			case PROFILE:
			case QUALIFIER:
			case SERVAUTH:
			case TRUSTED:
			case SECTION:
			case ACTIVE:
			case VERSION:
			case ALIAS:
			case WORK:
			case WORKFILE:
			case SYSDEFLT:
			case NULTERM:
			case STRUCTURE:
			case GENERIC:
			case TEMPORARY:
			case DEFER:
			case DEFINE:
			case EXCLUDE:
			case GENERATE:
			case KEYS:
			case XMLPATTERN:
			case ABS:
			case ABSVAL:
			case ACOS:
			case ADD_DAYS:
			case ADD_MONTHS:
			case ARRAY_DELETE:
			case ARRAY_FIRST:
			case ARRAY_LAST:
			case ARRAY_NEXT:
			case ARRAY_PRIOR:
			case ARRAY_TRIM:
			case ASCII:
			case ASCII_CHR:
			case ASCIISTR:
			case ASCII_STR:
			case ASIN:
			case ATAN:
			case ATAN2:
			case ATANH:
			case BIGINT:
			case BINARY:
			case BITAND:
			case BITANDNOT:
			case BITNOT:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BTRIM:
			case CARDINALITY:
			case CCSID_ENCODING:
			case CEIL:
			case CEILING:
			case CHAR9:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case CHR:
			case CLOB:
			case COALESCE:
			case COLLATION_KEY:
			case COMPARE_DECFLOAT:
			case COS:
			case COSH:
			case DATE:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFWEEK_ISO:
			case DAYOFYEAR:
			case DAYS_BETWEEN:
			case DBCLOB:
			case DEC:
			case DECFLOAT:
			case DECFLOAT_FORMAT:
			case DECFLOAT_SORTKEY:
			case DECIMAL:
			case DECODE:
			case DECRYPT_BINARY:
			case DECRYPT_BIT:
			case DECRYPT_CHAR:
			case DECRYPT_DATAKEY_BIGINT:
			case DECRYPT_DATAKEY_BIT:
			case DECRYPT_DATAKEY_CLOB:
			case DECRYPT_DATAKEY_DBCLOB:
			case DECRYPT_DATAKEY_DECIMAL:
			case DECRYPT_DATAKEY_INTEGER:
			case DECRYPT_DATAKEY_VARCHAR:
			case DECRYPT_DATAKEY_VARGRAPHIC:
			case DECRYPT_DB:
			case DEGREES:
			case DIFFERENCE:
			case DIGITS:
			case DOUBLE_PRECISION:
			case DSN_XMLVALIDATE:
			case EBCDIC_CHR:
			case EBCDIC_STR:
			case ENCRYPT_DATAKEY:
			case ENCRYPT_TDES:
			case EXP:
			case EXTRACT:
			case FLOAT:
			case FLOOR:
			case GENERATE_UNIQUE:
			case GENERATE_UNIQUE_BINARY:
			case GETHINT:
			case GETVARIABLE:
			case GRAPHIC:
			case GREATEST:
			case HASH:
			case HASH_CRC32:
			case HASH_MD5:
			case HASH_SHA1:
			case HASH_SHA256:
			case HEX:
			case IDENTITY_VAL_LOCAL:
			case IFNULL:
			case INSTR:
			case INT:
			case INTEGER:
			case JULIAN_DAY:
			case LAST_DAY:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LN:
			case LOCATE:
			case LOCATE_IN_STRING:
			case LOG10:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAX:
			case MAX_CARDINALITY:
			case MIDNIGHT_SECONDS:
			case MIN:
			case MINUTE:
			case MOD:
			case MONTHS_BETWEEN:
			case MQREAD:
			case MQREADCLOB:
			case MQRECEIVE:
			case MQRECEIVECLOB:
			case MQSEND:
			case MULTIPLY_ALT:
			case NEXT_DAY:
			case NEXT_MONTH:
			case NORMALIZE_DECFLOAT:
			case NORMALIZE_STRING:
			case NULLIF:
			case NVL:
			case OVERLAY:
			case PACK:
			case POSITION:
			case POSSTR:
			case POW:
			case POWER:
			case QUANTIZE:
			case QUARTER:
			case RADIANS:
			case RAISE_ERROR:
			case RAND:
			case RANDOM:
			case REAL:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REPLACE:
			case RID:
			case ROUND:
			case ROUND_TIMESTAMP:
			case ROWID:
			case RPAD:
			case RTRIM:
			case SCORE:
			case SIGN:
			case SIN:
			case SINH:
			case SMALLINT:
			case SOAPHTTPC:
			case SOAPHTTPNC:
			case SOAPHTTPNV:
			case SOAPHTTPV:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STRIP:
			case STRLEFT:
			case STRPOS:
			case STRRIGHT:
			case SUBSTR:
			case SUBSTRING:
			case TAN:
			case TANH:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIMESTAMP_FORMAT:
			case TIMESTAMP_ISO:
			case TIMESTAMP_TZ:
			case TO_CHAR:
			case TO_CLOB:
			case TO_DATE:
			case TO_NUMBER:
			case TOTALORDER:
			case TO_TIMESTAMP:
			case TRANSLATE:
			case TRIM:
			case TRIM_ARRAY:
			case TRUNC:
			case TRUNC_TIMESTAMP:
			case UCASE:
			case UNICODE:
			case UNICODE_STR:
			case UNISTR:
			case UPPER:
			case VARBINARY:
			case VARCHAR:
			case VARCHAR9:
			case VARCHAR_BIT_FORMAT:
			case VARCHAR_FORMAT:
			case VARGRAPHIC:
			case VERIFY_GROUP_FOR_USER:
			case VERIFY_ROLE_FOR_USER:
			case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
			case WEEK:
			case WEEK_ISO:
			case WRAP:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLCONCAT:
			case XMLDOCUMENT:
			case XMLELEMENT:
			case XMLFOREST:
			case XMLMODIFY:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLSERIALIZE:
			case XMLTEXT:
			case XMLXSROBJECTID:
			case XSLTRANSFORM:
			case CURRENT_ACCELERATOR:
			case CURRENT_APPLICATION_COMPATIBILITY:
			case CURRENT_APPLICATION_ENCODING_SCHEME:
			case CURRENT_CLIENT_ACCTNG:
			case CURRENT_CLIENT_APPLNAME:
			case CURRENT_CLIENT_CORR_TOKEN:
			case CURRENT_CLIENT_USERID:
			case CURRENT_CLIENT_WRKSTNNAME:
			case CURRENT_DATE:
			case CURRENT_DEBUG_MODE:
			case CURRENT_DECFLOAT_ROUNDING_MODE:
			case CURRENT_DEGREE:
			case CURRENT_EXPLAIN_MODE:
			case CURRENT_GET_ACCEL_ARCHIVE:
			case CURRENT_LOCALE_LC_CTYPE:
			case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
			case CURRENT_MEMBER:
			case CURRENT_OPTIMIZATION_HINT:
			case CURRENT_PACKAGE_PATH:
			case CURRENT_PACKAGESET:
			case CURRENT_PATH:
			case CURRENT_PRECISION:
			case CURRENT_QUERY_ACCELERATION:
			case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
			case CURRENT_REFRESH_AGE:
			case CURRENT_ROUTINE_VERSION:
			case CURRENT_RULES:
			case CURRENT_SCHEMA:
			case CURRENT_SERVER:
			case CURRENT_SQLID:
			case CURRENT_TEMPORAL_BUSINESS_TIME:
			case CURRENT_TEMPORAL_SYSTEM_TIME:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_TIME_ZONE:
			case ENCRYPTION_PASSWORD:
			case SESSION_TIME_ZONE:
			case SESSION_USER:
			case USER:
			case ADMIN_TASK_LIST:
			case ADMIN_TASK_OUTPUT:
			case ADMIN_TASK_STATUS:
			case BLOCKING_THREADS:
			case MQREADALL:
			case MQREADALLCLOB:
			case MQRECEIVEALL:
			case MQRECEIVEALLCLOB:
			case XMLTABLE:
			case SQLIDENTIFIER:
				{
				setState(1257);
				procedureName();
				}
				break;
			case COLON:
				{
				setState(1258);
				hostVariable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1261);
			match(LPAREN);
			setState(1283);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,52,_ctx) ) {
			case 1:
				{
				{
				setState(1266);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,49,_ctx) ) {
				case 1:
					{
					setState(1262);
					expression();
					}
					break;
				case 2:
					{
					setState(1263);
					match(NULL);
					}
					break;
				case 3:
					{
					{
					setState(1264);
					match(TABLE);
					setState(1265);
					tableName();
					}
					}
					break;
				}
				setState(1277);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1268);
					match(COMMA);
					setState(1273);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,50,_ctx) ) {
					case 1:
						{
						setState(1269);
						expression();
						}
						break;
					case 2:
						{
						setState(1270);
						match(NULL);
						}
						break;
					case 3:
						{
						{
						setState(1271);
						match(TABLE);
						setState(1272);
						tableName();
						}
						}
						break;
					}
					}
					}
					setState(1279);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case 2:
				{
				{
				setState(1280);
				match(USING);
				setState(1281);
				match(DESCRIPTOR);
				setState(1282);
				hostVariable();
				}
				}
				break;
			}
			setState(1285);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CloseStatementContext extends ParserRuleContext {
		public TerminalNode CLOSE() { return getToken(DB2zSQLParser.CLOSE, 0); }
		public CursorNameContext cursorName() {
			return getRuleContext(CursorNameContext.class,0);
		}
		public CloseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_closeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCloseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCloseStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCloseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CloseStatementContext closeStatement() throws RecognitionException {
		CloseStatementContext _localctx = new CloseStatementContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_closeStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1287);
			match(CLOSE);
			setState(1288);
			cursorName();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommentStatementContext extends ParserRuleContext {
		public TerminalNode COMMENT() { return getToken(DB2zSQLParser.COMMENT, 0); }
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public MultipleColumnListContext multipleColumnList() {
			return getRuleContext(MultipleColumnListContext.class,0);
		}
		public TerminalNode IS() { return getToken(DB2zSQLParser.IS, 0); }
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public AliasDesignatorContext aliasDesignator() {
			return getRuleContext(AliasDesignatorContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(DB2zSQLParser.COLUMN, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public FunctionDesignatorContext functionDesignator() {
			return getRuleContext(FunctionDesignatorContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(DB2zSQLParser.INDEX, 0); }
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public TerminalNode PACKAGE() { return getToken(DB2zSQLParser.PACKAGE, 0); }
		public CollectionIDContext collectionID() {
			return getRuleContext(CollectionIDContext.class,0);
		}
		public PackageNameContext packageName() {
			return getRuleContext(PackageNameContext.class,0);
		}
		public TerminalNode PLAN() { return getToken(DB2zSQLParser.PLAN, 0); }
		public PlanNameContext planName() {
			return getRuleContext(PlanNameContext.class,0);
		}
		public TerminalNode PROCEDURE() { return getToken(DB2zSQLParser.PROCEDURE, 0); }
		public ProcedureNameContext procedureName() {
			return getRuleContext(ProcedureNameContext.class,0);
		}
		public TerminalNode ROLE() { return getToken(DB2zSQLParser.ROLE, 0); }
		public RoleNameContext roleName() {
			return getRuleContext(RoleNameContext.class,0);
		}
		public TerminalNode SEQUENCE() { return getToken(DB2zSQLParser.SEQUENCE, 0); }
		public SequenceNameContext sequenceName() {
			return getRuleContext(SequenceNameContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public TerminalNode TRIGGER() { return getToken(DB2zSQLParser.TRIGGER, 0); }
		public TriggerNameContext triggerName() {
			return getRuleContext(TriggerNameContext.class,0);
		}
		public TerminalNode TRUSTED() { return getToken(DB2zSQLParser.TRUSTED, 0); }
		public TerminalNode CONTEXT() { return getToken(DB2zSQLParser.CONTEXT, 0); }
		public ContextNameContext contextName() {
			return getRuleContext(ContextNameContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(DB2zSQLParser.TYPE, 0); }
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public TerminalNode MASK() { return getToken(DB2zSQLParser.MASK, 0); }
		public MaskNameContext maskName() {
			return getRuleContext(MaskNameContext.class,0);
		}
		public TerminalNode PERMISSION() { return getToken(DB2zSQLParser.PERMISSION, 0); }
		public PermissionNameContext permissionName() {
			return getRuleContext(PermissionNameContext.class,0);
		}
		public TerminalNode VARIABLE() { return getToken(DB2zSQLParser.VARIABLE, 0); }
		public VariableNameContext variableName() {
			return getRuleContext(VariableNameContext.class,0);
		}
		public VersionIDContext versionID() {
			return getRuleContext(VersionIDContext.class,0);
		}
		public TerminalNode ACTIVE() { return getToken(DB2zSQLParser.ACTIVE, 0); }
		public TerminalNode VERSION() { return getToken(DB2zSQLParser.VERSION, 0); }
		public RoutineVersionIDContext routineVersionID() {
			return getRuleContext(RoutineVersionIDContext.class,0);
		}
		public CommentStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commentStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCommentStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCommentStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCommentStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommentStatementContext commentStatement() throws RecognitionException {
		CommentStatementContext _localctx = new CommentStatementContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_commentStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1290);
			match(COMMENT);
			setState(1291);
			match(ON);
			setState(1358);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,59,_ctx) ) {
			case 1:
				{
				{
				setState(1352);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PUBLIC:
				case ALIAS:
					{
					setState(1292);
					aliasDesignator();
					}
					break;
				case COLUMN:
					{
					{
					setState(1293);
					match(COLUMN);
					setState(1294);
					tableName();
					setState(1295);
					match(DOT);
					setState(1296);
					columnName();
					}
					}
					break;
				case FUNCTION:
				case SPECIFIC:
					{
					{
					setState(1298);
					functionDesignator();
					setState(1303);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ACTIVE:
						{
						{
						setState(1299);
						match(ACTIVE);
						setState(1300);
						match(VERSION);
						}
						}
						break;
					case VERSION:
						{
						{
						setState(1301);
						match(VERSION);
						setState(1302);
						routineVersionID();
						}
						}
						break;
					case IS:
						break;
					default:
						break;
					}
					}
					}
					break;
				case INDEX:
					{
					{
					setState(1305);
					match(INDEX);
					setState(1306);
					indexName();
					}
					}
					break;
				case PACKAGE:
					{
					{
					setState(1307);
					match(PACKAGE);
					setState(1308);
					collectionID();
					setState(1309);
					match(DOT);
					setState(1310);
					packageName();
					setState(1315);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,55,_ctx) ) {
					case 1:
						{
						setState(1312);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,54,_ctx) ) {
						case 1:
							{
							setState(1311);
							match(VERSION);
							}
							break;
						}
						setState(1314);
						versionID();
						}
						break;
					}
					}
					}
					break;
				case PLAN:
					{
					{
					setState(1317);
					match(PLAN);
					setState(1318);
					planName();
					}
					}
					break;
				case PROCEDURE:
					{
					{
					setState(1319);
					match(PROCEDURE);
					setState(1320);
					procedureName();
					setState(1325);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ACTIVE:
						{
						{
						setState(1321);
						match(ACTIVE);
						setState(1322);
						match(VERSION);
						}
						}
						break;
					case VERSION:
						{
						{
						setState(1323);
						match(VERSION);
						setState(1324);
						routineVersionID();
						}
						}
						break;
					case IS:
						break;
					default:
						break;
					}
					}
					}
					break;
				case ROLE:
					{
					{
					setState(1327);
					match(ROLE);
					setState(1328);
					roleName();
					}
					}
					break;
				case SEQUENCE:
					{
					{
					setState(1329);
					match(SEQUENCE);
					setState(1330);
					sequenceName();
					}
					}
					break;
				case TABLE:
					{
					{
					setState(1331);
					match(TABLE);
					setState(1332);
					tableName();
					}
					}
					break;
				case TRIGGER:
					{
					{
					setState(1333);
					match(TRIGGER);
					setState(1334);
					triggerName();
					setState(1339);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ACTIVE:
						{
						{
						setState(1335);
						match(ACTIVE);
						setState(1336);
						match(VERSION);
						}
						}
						break;
					case VERSION:
						{
						{
						setState(1337);
						match(VERSION);
						setState(1338);
						routineVersionID();
						}
						}
						break;
					case IS:
						break;
					default:
						break;
					}
					}
					}
					break;
				case TRUSTED:
					{
					{
					setState(1341);
					match(TRUSTED);
					setState(1342);
					match(CONTEXT);
					setState(1343);
					contextName();
					}
					}
					break;
				case TYPE:
					{
					{
					setState(1344);
					match(TYPE);
					setState(1345);
					typeName();
					}
					}
					break;
				case MASK:
					{
					{
					setState(1346);
					match(MASK);
					setState(1347);
					maskName();
					}
					}
					break;
				case PERMISSION:
					{
					{
					setState(1348);
					match(PERMISSION);
					setState(1349);
					permissionName();
					}
					}
					break;
				case VARIABLE:
					{
					{
					setState(1350);
					match(VARIABLE);
					setState(1351);
					variableName();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1354);
				match(IS);
				setState(1355);
				match(NONNUMERICLITERAL);
				}
				}
				break;
			case 2:
				{
				setState(1357);
				multipleColumnList();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommitStatementContext extends ParserRuleContext {
		public TerminalNode COMMIT() { return getToken(DB2zSQLParser.COMMIT, 0); }
		public TerminalNode WORK() { return getToken(DB2zSQLParser.WORK, 0); }
		public CommitStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commitStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCommitStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCommitStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCommitStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommitStatementContext commitStatement() throws RecognitionException {
		CommitStatementContext _localctx = new CommitStatementContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_commitStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1360);
			match(COMMIT);
			setState(1362);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(1361);
				match(WORK);
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConnectStatementContext extends ParserRuleContext {
		public TerminalNode CONNECT() { return getToken(DB2zSQLParser.CONNECT, 0); }
		public TerminalNode RESET() { return getToken(DB2zSQLParser.RESET, 0); }
		public AuthorizationContext authorization() {
			return getRuleContext(AuthorizationContext.class,0);
		}
		public TerminalNode TO() { return getToken(DB2zSQLParser.TO, 0); }
		public LocationNameContext locationName() {
			return getRuleContext(LocationNameContext.class,0);
		}
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public ConnectStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_connectStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterConnectStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitConnectStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitConnectStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConnectStatementContext connectStatement() throws RecognitionException {
		ConnectStatementContext _localctx = new ConnectStatementContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_connectStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1364);
			match(CONNECT);
			setState(1375);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TO:
				{
				{
				setState(1365);
				match(TO);
				setState(1368);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case INTEGERLITERAL:
				case NUMERICLITERAL:
				case ADD:
				case AFTER:
				case ALL:
				case ALLOCATE:
				case ALLOW:
				case ALTER:
				case ALTERAND:
				case ANY:
				case ARRAY:
				case ARRAY_EXISTS:
				case AS:
				case ASENSITIVE:
				case ASSOCIATE:
				case ASUTIME:
				case AT:
				case AUDIT:
				case AUX:
				case AUXILIARY:
				case BEFORE:
				case BEGIN:
				case BETWEEN:
				case BUFFERPOOL:
				case BY:
				case CALL:
				case CAPTURE:
				case CASCADED:
				case CASE:
				case CAST:
				case CCSID:
				case CHAR:
				case CHARACTER:
				case CHECK:
				case CLONE:
				case CLOSE:
				case CLUSTER:
				case COLLECTION:
				case COLLID:
				case COLUMN:
				case COMMENT:
				case COMMIT:
				case CONCAT:
				case CONDITION:
				case CONNECT:
				case CONNECTION:
				case CONSTRAINT:
				case CONTAINS:
				case CONTENT:
				case CONTINUE:
				case CREATE:
				case CUBE:
				case CURRENT:
				case CURRENT_LC_CTYPE:
				case CURRVAL:
				case CURSOR:
				case DATA:
				case DATABASE:
				case DAY:
				case DAYS:
				case DBINFO:
				case DECLARE:
				case DEFAULT:
				case DELETE:
				case DESCRIPTOR:
				case DETERMINISTIC:
				case DISABLE:
				case DISALLOW:
				case DISTINCT:
				case DO:
				case DOCUMENT:
				case DOUBLE:
				case DROP:
				case DSSIZE:
				case DYNAMIC:
				case EDITPROC:
				case ELSE:
				case ELSEIF:
				case ENCODING:
				case ENCRYPTION:
				case END:
				case END_EXEC:
				case ENDING:
				case ERASE:
				case ESCAPE:
				case EXCEPT:
				case EXCEPTION:
				case EXEC_SQL:
				case EXECUTE:
				case EXISTS:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case FENCED:
				case FETCH:
				case FIELDPROC:
				case FINAL:
				case FIRST:
				case FOR:
				case FREE:
				case FROM:
				case FULL:
				case FUNCTION:
				case GENERATED:
				case GET:
				case GLOBAL:
				case GO:
				case GOTO:
				case GRANT:
				case GROUP:
				case HANDLER:
				case HAVING:
				case HOLD:
				case HOUR:
				case HOURS:
				case IF:
				case IMMEDIATE:
				case IN:
				case INCLUSIVE:
				case INDEX:
				case INDEXBP:
				case INHERIT:
				case INNER:
				case INOUT:
				case INSENSITIVE:
				case INSERT:
				case INTERSECT:
				case INTO:
				case IS:
				case ISOBID:
				case ITERATE:
				case JAR:
				case JOIN:
				case KEEP:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LAST:
				case LC_CTYPE:
				case LEAVE:
				case LEFT:
				case LIKE:
				case LIMIT:
				case LOCAL:
				case LOCALE:
				case LOCATOR:
				case LOCATORS:
				case LOCK:
				case LOCKMAX:
				case LOCKSIZE:
				case LONG:
				case LOOP:
				case MAINTAINED:
				case MATERIALIZED:
				case MICROSECOND:
				case MICROSECONDS:
				case MODIFIES:
				case MONTH:
				case MONTHS:
				case NEXT:
				case NEXTVAL:
				case NO:
				case NONE:
				case NOT:
				case NULL:
				case NULLS:
				case NUMPARTS:
				case OBID:
				case OF:
				case OFFSET:
				case OLD:
				case ON:
				case OPEN:
				case OPTIMIZATION:
				case OPTIMIZE:
				case OR:
				case ORDER:
				case ORGANIZATION:
				case OUT:
				case OUTER:
				case PACKAGE:
				case PADDED:
				case PARAMETER:
				case PART:
				case PARTITION:
				case PARTITIONED:
				case PARTITIONING:
				case PATH:
				case PERIOD:
				case PIECESIZE:
				case PLAN:
				case PRECISION:
				case PREPARE:
				case PREVVAL:
				case PRIOR:
				case PRIQTY:
				case PRIVILEGES:
				case PROCEDURE:
				case PROGRAM:
				case PSID:
				case PUBLIC:
				case QUERY:
				case QUERYNO:
				case READS:
				case REFERENCES:
				case REFRESH:
				case RELEASE:
				case RENAME:
				case REPEAT:
				case RESIGNAL:
				case RESTRICT:
				case RESULT:
				case RESULT_SET_LOCATOR:
				case RETURN:
				case RETURNS:
				case REVOKE:
				case RIGHT:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUND_CEILING:
				case ROUND_DOWN:
				case ROUND_FLOOR:
				case ROUND_HALF_DOWN:
				case ROUND_HALF_EVEN:
				case ROUND_HALF_UP:
				case ROUND_UP:
				case ROW:
				case ROWSET:
				case RUN:
				case SAVEPOINT:
				case SCHEMA:
				case SCRATCHPAD:
				case SECOND:
				case SECONDS:
				case SECQTY:
				case SECURITY:
				case SELECT:
				case SENSITIVE:
				case SEQUENCE:
				case SET:
				case SIGNAL:
				case SIMPLE:
				case SOME:
				case SOURCE:
				case SPECIFIC:
				case STANDARD:
				case STATEMENT:
				case STATIC:
				case STAY:
				case STOGROUP:
				case STORES:
				case STYLE:
				case SUMMARY:
				case SYNONYM:
				case SYSDATE:
				case SYSTEM:
				case SYSTIMESTAMP:
				case TABLE:
				case TABLESPACE:
				case THEN:
				case TO:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNDO:
				case UNION:
				case UNIQUE:
				case UNTIL:
				case UPDATE:
				case USING:
				case VALIDPROC:
				case VALUE:
				case VALUES:
				case VARIABLE:
				case VARIANT:
				case VCAT:
				case VERSIONING:
				case VIEW:
				case VOLATILE:
				case VOLUMES:
				case WHEN:
				case WHENEVER:
				case WHERE:
				case WHILE:
				case WITH:
				case WLM:
				case XMLCAST:
				case XMLEXISTS:
				case XMLNAMESPACES:
				case YEAR:
				case YEARS:
				case ZONE:
				case AND:
				case ARRAY_AGG:
				case ASC:
				case AVG:
				case BIT:
				case CHANGE:
				case CODEUNITS16:
				case CODEUNITS32:
				case CORR:
				case CORRELATION:
				case COUNT:
				case COUNT_BIG:
				case COVAR:
				case COVARIANCE:
				case COVARIANCE_SAMP:
				case COVAR_POP:
				case COVAR_SAMP:
				case CS:
				case CUME_DIST:
				case DENSE_RANK:
				case DESC:
				case EBCDIC:
				case EXCLUSIVE:
				case FIRST_VALUE:
				case FOLLOWING:
				case GROUPING:
				case IGNORE:
				case INDICATOR:
				case INPUT:
				case ISNULL:
				case LAG:
				case LARGE:
				case LAST_VALUE:
				case LEAD:
				case LISTAGG:
				case LOCKED:
				case LOCKS:
				case MEDIAN:
				case MINUTES:
				case MIXED:
				case NOTNULL:
				case NTH_VALUE:
				case NTILE:
				case NUMERIC:
				case OBJECT:
				case OCTETS:
				case ONLY:
				case OVER:
				case PASSING:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case PERCENT_RANK:
				case PRECEDING:
				case PREVIOUS:
				case RANGE:
				case RANK:
				case RATIO_TO_REPORT:
				case READ:
				case REF:
				case REGR_AVGX:
				case REGR_AVGY:
				case REGR_COUNT:
				case REGR_ICPT:
				case REGR_INTERCEPT:
				case REGR_R2:
				case REGR_SLOPE:
				case REGR_SXX:
				case REGR_SXY:
				case REGR_SYY:
				case RESPECT:
				case ROW_NUMBER:
				case ROWS:
				case RR:
				case RS:
				case SBCS:
				case SELECTIVITY:
				case SETS:
				case SHARE:
				case SKIP_:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case TOKEN:
				case UNBOUNDED:
				case UNPACK:
				case UR:
				case USE:
				case VAR:
				case VARIANCE:
				case VARIANCE_SAMP:
				case VAR_POP:
				case VAR_SAMP:
				case VARYING:
				case WITHOUT:
				case XML:
				case XMLAGG:
				case COLUMNS:
				case SQLID:
				case ORDINALITY:
				case SYSTEM_TIME:
				case BUSINESS_TIME:
				case MULTIPLIER:
				case UNNEST:
				case CROSS:
				case CALLER:
				case CLIENT:
				case POSITIONING:
				case SCROLL:
				case ACTION:
				case ASSEMBLE:
				case C_:
				case CALLED:
				case COBOL:
				case DB2:
				case DEFINER:
				case DISPATCH:
				case ENVIRONMENT:
				case FAILURE:
				case FAILURES:
				case JAVA:
				case MAIN:
				case NAME:
				case OPTIONS:
				case PARALLEL:
				case PLI:
				case REGISTERS:
				case RESIDENT:
				case SECURED:
				case SPECIAL:
				case SQL:
				case STOP:
				case SUB:
				case YES:
				case APPLICATION:
				case CHANGED:
				case COMPATIBILITY:
				case COMPRESS:
				case COPY:
				case FREEPAGE:
				case GBPCACHE:
				case INCLUDE:
				case MAXVALUE:
				case MINVALUE:
				case PCTFREE:
				case REGENERATE:
				case MASK:
				case ENABLE:
				case PERMISSION:
				case ATOMIC:
				case SQLEXCEPTION:
				case MERGE:
				case MATCHED:
				case SQLSTATE:
				case MESSAGE_TEXT:
				case OVERRIDING:
				case PORTION:
				case DB2SQL:
				case DEBUG:
				case GENERAL:
				case MODE_:
				case REXX:
				case CACHE:
				case CYCLE:
				case INCREMENT:
				case RESTART:
				case DATACLAS:
				case MGMTCLAS:
				case REMOVE:
				case STORCLAS:
				case ACCESS:
				case ACTIVATE:
				case ALWAYS:
				case APPEND:
				case ARCHIVE:
				case BUSINESS:
				case CASCADE:
				case CHANGES:
				case CONTROL:
				case DEACTIVATE:
				case DEFERRED:
				case EACH:
				case ENFORCED:
				case EXTRA:
				case FOREIGN:
				case HIDDEN_:
				case HISTORY:
				case ID:
				case IDENTITY:
				case IMPLICITLY:
				case INITIALLY:
				case INLINE:
				case OPERATION:
				case ORGANIZE:
				case OVERLAPS:
				case PACKAGE_NAME:
				case PACKAGE_SCHEMA:
				case PACKAGE_VERSION:
				case PRIMARY:
				case RESET:
				case ROTATE:
				case START:
				case SYSIBM:
				case TRANSACTION:
				case XMLSCHEMA:
				case ELEMENT:
				case URL:
				case NAMESPACE:
				case LOCATION:
				case SYSXSR:
				case ALGORITHM:
				case FIXEDLENGTH:
				case HUFFMAN:
				case LOB:
				case LOG:
				case LOGGED:
				case MAXPARTITIONS:
				case MAXROWS:
				case MEMBER:
				case MOVE:
				case PAGE:
				case PAGENUM:
				case PENDING:
				case RELATIVE:
				case SEGSIZE:
				case TRACKMOD:
				case ADDRESS:
				case ATTRIBUTES:
				case AUTHENTICATION:
				case AUTHID:
				case CONTEXT:
				case JOBNAME:
				case OWNER:
				case PROFILE:
				case QUALIFIER:
				case SERVAUTH:
				case TRUSTED:
				case SECTION:
				case ACTIVE:
				case VERSION:
				case ALIAS:
				case WORK:
				case WORKFILE:
				case SYSDEFLT:
				case NULTERM:
				case STRUCTURE:
				case GENERIC:
				case TEMPORARY:
				case DEFER:
				case DEFINE:
				case EXCLUDE:
				case GENERATE:
				case KEYS:
				case XMLPATTERN:
				case ABS:
				case ABSVAL:
				case ACOS:
				case ADD_DAYS:
				case ADD_MONTHS:
				case ARRAY_DELETE:
				case ARRAY_FIRST:
				case ARRAY_LAST:
				case ARRAY_NEXT:
				case ARRAY_PRIOR:
				case ARRAY_TRIM:
				case ASCII:
				case ASCII_CHR:
				case ASCIISTR:
				case ASCII_STR:
				case ASIN:
				case ATAN:
				case ATAN2:
				case ATANH:
				case BIGINT:
				case BINARY:
				case BITAND:
				case BITANDNOT:
				case BITNOT:
				case BITOR:
				case BITXOR:
				case BLOB:
				case BTRIM:
				case CARDINALITY:
				case CCSID_ENCODING:
				case CEIL:
				case CEILING:
				case CHAR9:
				case CHARACTER_LENGTH:
				case CHAR_LENGTH:
				case CHR:
				case CLOB:
				case COALESCE:
				case COLLATION_KEY:
				case COMPARE_DECFLOAT:
				case COS:
				case COSH:
				case DATE:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFWEEK_ISO:
				case DAYOFYEAR:
				case DAYS_BETWEEN:
				case DBCLOB:
				case DEC:
				case DECFLOAT:
				case DECFLOAT_FORMAT:
				case DECFLOAT_SORTKEY:
				case DECIMAL:
				case DECODE:
				case DECRYPT_BINARY:
				case DECRYPT_BIT:
				case DECRYPT_CHAR:
				case DECRYPT_DATAKEY_BIGINT:
				case DECRYPT_DATAKEY_BIT:
				case DECRYPT_DATAKEY_CLOB:
				case DECRYPT_DATAKEY_DBCLOB:
				case DECRYPT_DATAKEY_DECIMAL:
				case DECRYPT_DATAKEY_INTEGER:
				case DECRYPT_DATAKEY_VARCHAR:
				case DECRYPT_DATAKEY_VARGRAPHIC:
				case DECRYPT_DB:
				case DEGREES:
				case DIFFERENCE:
				case DIGITS:
				case DOUBLE_PRECISION:
				case DSN_XMLVALIDATE:
				case EBCDIC_CHR:
				case EBCDIC_STR:
				case ENCRYPT_DATAKEY:
				case ENCRYPT_TDES:
				case EXP:
				case EXTRACT:
				case FLOAT:
				case FLOOR:
				case GENERATE_UNIQUE:
				case GENERATE_UNIQUE_BINARY:
				case GETHINT:
				case GETVARIABLE:
				case GRAPHIC:
				case GREATEST:
				case HASH:
				case HASH_CRC32:
				case HASH_MD5:
				case HASH_SHA1:
				case HASH_SHA256:
				case HEX:
				case IDENTITY_VAL_LOCAL:
				case IFNULL:
				case INSTR:
				case INT:
				case INTEGER:
				case JULIAN_DAY:
				case LAST_DAY:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LN:
				case LOCATE:
				case LOCATE_IN_STRING:
				case LOG10:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAX:
				case MAX_CARDINALITY:
				case MIDNIGHT_SECONDS:
				case MIN:
				case MINUTE:
				case MOD:
				case MONTHS_BETWEEN:
				case MQREAD:
				case MQREADCLOB:
				case MQRECEIVE:
				case MQRECEIVECLOB:
				case MQSEND:
				case MULTIPLY_ALT:
				case NEXT_DAY:
				case NEXT_MONTH:
				case NORMALIZE_DECFLOAT:
				case NORMALIZE_STRING:
				case NULLIF:
				case NVL:
				case OVERLAY:
				case PACK:
				case POSITION:
				case POSSTR:
				case POW:
				case POWER:
				case QUANTIZE:
				case QUARTER:
				case RADIANS:
				case RAISE_ERROR:
				case RAND:
				case RANDOM:
				case REAL:
				case REGEXP_COUNT:
				case REGEXP_INSTR:
				case REGEXP_LIKE:
				case REGEXP_REPLACE:
				case REGEXP_SUBSTR:
				case REPLACE:
				case RID:
				case ROUND:
				case ROUND_TIMESTAMP:
				case ROWID:
				case RPAD:
				case RTRIM:
				case SCORE:
				case SIGN:
				case SIN:
				case SINH:
				case SMALLINT:
				case SOAPHTTPC:
				case SOAPHTTPNC:
				case SOAPHTTPNV:
				case SOAPHTTPV:
				case SOUNDEX:
				case SPACE:
				case SQRT:
				case STRIP:
				case STRLEFT:
				case STRPOS:
				case STRRIGHT:
				case SUBSTR:
				case SUBSTRING:
				case TAN:
				case TANH:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIMESTAMP_FORMAT:
				case TIMESTAMP_ISO:
				case TIMESTAMP_TZ:
				case TO_CHAR:
				case TO_CLOB:
				case TO_DATE:
				case TO_NUMBER:
				case TOTALORDER:
				case TO_TIMESTAMP:
				case TRANSLATE:
				case TRIM:
				case TRIM_ARRAY:
				case TRUNC:
				case TRUNC_TIMESTAMP:
				case UCASE:
				case UNICODE:
				case UNICODE_STR:
				case UNISTR:
				case UPPER:
				case VARBINARY:
				case VARCHAR:
				case VARCHAR9:
				case VARCHAR_BIT_FORMAT:
				case VARCHAR_FORMAT:
				case VARGRAPHIC:
				case VERIFY_GROUP_FOR_USER:
				case VERIFY_ROLE_FOR_USER:
				case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
				case WEEK:
				case WEEK_ISO:
				case WRAP:
				case XMLATTRIBUTES:
				case XMLCOMMENT:
				case XMLCONCAT:
				case XMLDOCUMENT:
				case XMLELEMENT:
				case XMLFOREST:
				case XMLMODIFY:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLSERIALIZE:
				case XMLTEXT:
				case XMLXSROBJECTID:
				case XSLTRANSFORM:
				case CURRENT_ACCELERATOR:
				case CURRENT_APPLICATION_COMPATIBILITY:
				case CURRENT_APPLICATION_ENCODING_SCHEME:
				case CURRENT_CLIENT_ACCTNG:
				case CURRENT_CLIENT_APPLNAME:
				case CURRENT_CLIENT_CORR_TOKEN:
				case CURRENT_CLIENT_USERID:
				case CURRENT_CLIENT_WRKSTNNAME:
				case CURRENT_DATE:
				case CURRENT_DEBUG_MODE:
				case CURRENT_DECFLOAT_ROUNDING_MODE:
				case CURRENT_DEGREE:
				case CURRENT_EXPLAIN_MODE:
				case CURRENT_GET_ACCEL_ARCHIVE:
				case CURRENT_LOCALE_LC_CTYPE:
				case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
				case CURRENT_MEMBER:
				case CURRENT_OPTIMIZATION_HINT:
				case CURRENT_PACKAGE_PATH:
				case CURRENT_PACKAGESET:
				case CURRENT_PATH:
				case CURRENT_PRECISION:
				case CURRENT_QUERY_ACCELERATION:
				case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
				case CURRENT_REFRESH_AGE:
				case CURRENT_ROUTINE_VERSION:
				case CURRENT_RULES:
				case CURRENT_SCHEMA:
				case CURRENT_SERVER:
				case CURRENT_SQLID:
				case CURRENT_TEMPORAL_BUSINESS_TIME:
				case CURRENT_TEMPORAL_SYSTEM_TIME:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case CURRENT_TIME_ZONE:
				case ENCRYPTION_PASSWORD:
				case SESSION_TIME_ZONE:
				case SESSION_USER:
				case USER:
				case ADMIN_TASK_LIST:
				case ADMIN_TASK_OUTPUT:
				case ADMIN_TASK_STATUS:
				case BLOCKING_THREADS:
				case MQREADALL:
				case MQREADALLCLOB:
				case MQRECEIVEALL:
				case MQRECEIVEALLCLOB:
				case XMLTABLE:
				case SQLIDENTIFIER:
					{
					setState(1366);
					locationName();
					}
					break;
				case COLON:
					{
					setState(1367);
					hostVariable();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1371);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USER) {
					{
					setState(1370);
					authorization();
					}
				}

				}
				}
				break;
			case RESET:
				{
				setState(1373);
				match(RESET);
				}
				break;
			case USER:
				{
				setState(1374);
				authorization();
				}
				break;
			case EOF:
			case SEMICOLON:
			case END_EXEC:
				break;
			default:
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateAliasStatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DB2zSQLParser.CREATE, 0); }
		public TerminalNode ALIAS() { return getToken(DB2zSQLParser.ALIAS, 0); }
		public SequenceAliasContext sequenceAlias() {
			return getRuleContext(SequenceAliasContext.class,0);
		}
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public TerminalNode PUBLIC() { return getToken(DB2zSQLParser.PUBLIC, 0); }
		public CreateAliasStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createAliasStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateAliasStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateAliasStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateAliasStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateAliasStatementContext createAliasStatement() throws RecognitionException {
		CreateAliasStatementContext _localctx = new CreateAliasStatementContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_createAliasStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1377);
			match(CREATE);
			setState(1379);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PUBLIC) {
				{
				setState(1378);
				match(PUBLIC);
				}
			}

			setState(1381);
			match(ALIAS);
			setState(1384);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,65,_ctx) ) {
			case 1:
				{
				setState(1382);
				sequenceAlias();
				}
				break;
			case 2:
				{
				setState(1383);
				tableAlias();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateAuxiliaryTableStatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DB2zSQLParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public AuxTableNameContext auxTableName() {
			return getRuleContext(AuxTableNameContext.class,0);
		}
		public TerminalNode IN() { return getToken(DB2zSQLParser.IN, 0); }
		public TablespaceNameContext tablespaceName() {
			return getRuleContext(TablespaceNameContext.class,0);
		}
		public TerminalNode STORES() { return getToken(DB2zSQLParser.STORES, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(DB2zSQLParser.COLUMN, 0); }
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TerminalNode PART() { return getToken(DB2zSQLParser.PART, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode AUX() { return getToken(DB2zSQLParser.AUX, 0); }
		public TerminalNode AUXILIARY() { return getToken(DB2zSQLParser.AUXILIARY, 0); }
		public DatabaseNameContext databaseName() {
			return getRuleContext(DatabaseNameContext.class,0);
		}
		public TerminalNode APPEND() { return getToken(DB2zSQLParser.APPEND, 0); }
		public TerminalNode YES() { return getToken(DB2zSQLParser.YES, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public CreateAuxiliaryTableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createAuxiliaryTableStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateAuxiliaryTableStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateAuxiliaryTableStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateAuxiliaryTableStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateAuxiliaryTableStatementContext createAuxiliaryTableStatement() throws RecognitionException {
		CreateAuxiliaryTableStatementContext _localctx = new CreateAuxiliaryTableStatementContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_createAuxiliaryTableStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1386);
			match(CREATE);
			setState(1387);
			_la = _input.LA(1);
			if ( !(_la==AUX || _la==AUXILIARY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1388);
			match(TABLE);
			setState(1389);
			auxTableName();
			setState(1390);
			match(IN);
			setState(1392);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,66,_ctx) ) {
			case 1:
				{
				setState(1391);
				databaseName();
				}
				break;
			}
			setState(1394);
			tablespaceName();
			setState(1395);
			match(STORES);
			setState(1396);
			tableName();
			setState(1399);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==APPEND) {
				{
				setState(1397);
				match(APPEND);
				setState(1398);
				_la = _input.LA(1);
				if ( !(_la==NO || _la==YES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1401);
			match(COLUMN);
			setState(1402);
			columnName();
			setState(1403);
			match(PART);
			setState(1404);
			match(INTEGERLITERAL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDatabaseStatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DB2zSQLParser.CREATE, 0); }
		public TerminalNode DATABASE() { return getToken(DB2zSQLParser.DATABASE, 0); }
		public DatabaseNameContext databaseName() {
			return getRuleContext(DatabaseNameContext.class,0);
		}
		public List<DatabaseOptionListContext> databaseOptionList() {
			return getRuleContexts(DatabaseOptionListContext.class);
		}
		public DatabaseOptionListContext databaseOptionList(int i) {
			return getRuleContext(DatabaseOptionListContext.class,i);
		}
		public CreateDatabaseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDatabaseStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateDatabaseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateDatabaseStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateDatabaseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDatabaseStatementContext createDatabaseStatement() throws RecognitionException {
		CreateDatabaseStatementContext _localctx = new CreateDatabaseStatementContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_createDatabaseStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1406);
			match(CREATE);
			setState(1407);
			match(DATABASE);
			setState(1408);
			databaseName();
			setState(1412);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AS) | (1L << BUFFERPOOL) | (1L << CCSID))) != 0) || _la==INDEXBP || _la==STOGROUP) {
				{
				{
				setState(1409);
				databaseOptionList();
				}
				}
				setState(1414);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFunctionStatementContext extends ParserRuleContext {
		public CreateFunctionStatementExternalScalarContext createFunctionStatementExternalScalar() {
			return getRuleContext(CreateFunctionStatementExternalScalarContext.class,0);
		}
		public CreateFunctionStatementExternalTableContext createFunctionStatementExternalTable() {
			return getRuleContext(CreateFunctionStatementExternalTableContext.class,0);
		}
		public CreateFunctionStatementSourcedContext createFunctionStatementSourced() {
			return getRuleContext(CreateFunctionStatementSourcedContext.class,0);
		}
		public CreateFunctionStatementInlineSqlScalarContext createFunctionStatementInlineSqlScalar() {
			return getRuleContext(CreateFunctionStatementInlineSqlScalarContext.class,0);
		}
		public CreateFunctionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunctionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateFunctionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateFunctionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateFunctionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFunctionStatementContext createFunctionStatement() throws RecognitionException {
		CreateFunctionStatementContext _localctx = new CreateFunctionStatementContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_createFunctionStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1419);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,69,_ctx) ) {
			case 1:
				{
				setState(1415);
				createFunctionStatementExternalScalar();
				}
				break;
			case 2:
				{
				setState(1416);
				createFunctionStatementExternalTable();
				}
				break;
			case 3:
				{
				setState(1417);
				createFunctionStatementSourced();
				}
				break;
			case 4:
				{
				setState(1418);
				createFunctionStatementInlineSqlScalar();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFunctionStatementExternalScalarContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DB2zSQLParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(DB2zSQLParser.FUNCTION, 0); }
		public FunctionNameContext functionName() {
			return getRuleContext(FunctionNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<ParameterDeclaration1Context> parameterDeclaration1() {
			return getRuleContexts(ParameterDeclaration1Context.class);
		}
		public ParameterDeclaration1Context parameterDeclaration1(int i) {
			return getRuleContext(ParameterDeclaration1Context.class,i);
		}
		public List<CreateFunctionStatementExternalScalarOptionsContext> createFunctionStatementExternalScalarOptions() {
			return getRuleContexts(CreateFunctionStatementExternalScalarOptionsContext.class);
		}
		public CreateFunctionStatementExternalScalarOptionsContext createFunctionStatementExternalScalarOptions(int i) {
			return getRuleContext(CreateFunctionStatementExternalScalarOptionsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public CreateFunctionStatementExternalScalarContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunctionStatementExternalScalar; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateFunctionStatementExternalScalar(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateFunctionStatementExternalScalar(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateFunctionStatementExternalScalar(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFunctionStatementExternalScalarContext createFunctionStatementExternalScalar() throws RecognitionException {
		CreateFunctionStatementExternalScalarContext _localctx = new CreateFunctionStatementExternalScalarContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_createFunctionStatementExternalScalar);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1421);
			match(CREATE);
			setState(1422);
			match(FUNCTION);
			setState(1423);
			functionName();
			setState(1424);
			match(LPAREN);
			setState(1433);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & ((1L << (ADD - 30)) | (1L << (AFTER - 30)) | (1L << (ALL - 30)) | (1L << (ALLOCATE - 30)) | (1L << (ALLOW - 30)) | (1L << (ALTER - 30)) | (1L << (ALTERAND - 30)) | (1L << (ANY - 30)) | (1L << (ARRAY - 30)) | (1L << (ARRAY_EXISTS - 30)) | (1L << (AS - 30)) | (1L << (ASENSITIVE - 30)) | (1L << (ASSOCIATE - 30)) | (1L << (ASUTIME - 30)) | (1L << (AT - 30)) | (1L << (AUDIT - 30)) | (1L << (AUX - 30)) | (1L << (AUXILIARY - 30)) | (1L << (BEFORE - 30)) | (1L << (BEGIN - 30)) | (1L << (BETWEEN - 30)) | (1L << (BUFFERPOOL - 30)) | (1L << (BY - 30)) | (1L << (CALL - 30)) | (1L << (CAPTURE - 30)) | (1L << (CASCADED - 30)) | (1L << (CASE - 30)) | (1L << (CAST - 30)) | (1L << (CCSID - 30)) | (1L << (CHAR - 30)) | (1L << (CHARACTER - 30)) | (1L << (CHECK - 30)) | (1L << (CLONE - 30)) | (1L << (CLOSE - 30)) | (1L << (CLUSTER - 30)) | (1L << (COLLECTION - 30)) | (1L << (COLLID - 30)) | (1L << (COLUMN - 30)) | (1L << (COMMENT - 30)) | (1L << (COMMIT - 30)) | (1L << (CONCAT - 30)) | (1L << (CONDITION - 30)) | (1L << (CONNECT - 30)) | (1L << (CONNECTION - 30)) | (1L << (CONSTRAINT - 30)) | (1L << (CONTAINS - 30)) | (1L << (CONTENT - 30)) | (1L << (CONTINUE - 30)) | (1L << (CREATE - 30)) | (1L << (CUBE - 30)) | (1L << (CURRENT - 30)) | (1L << (CURRENT_LC_CTYPE - 30)) | (1L << (CURRVAL - 30)) | (1L << (CURSOR - 30)) | (1L << (DATA - 30)) | (1L << (DATABASE - 30)) | (1L << (DAY - 30)) | (1L << (DAYS - 30)) | (1L << (DBINFO - 30)) | (1L << (DECLARE - 30)) | (1L << (DEFAULT - 30)) | (1L << (DELETE - 30)) | (1L << (DESCRIPTOR - 30)) | (1L << (DETERMINISTIC - 30)))) != 0) || ((((_la - 94)) & ~0x3f) == 0 && ((1L << (_la - 94)) & ((1L << (DISABLE - 94)) | (1L << (DISALLOW - 94)) | (1L << (DISTINCT - 94)) | (1L << (DO - 94)) | (1L << (DOCUMENT - 94)) | (1L << (DOUBLE - 94)) | (1L << (DROP - 94)) | (1L << (DSSIZE - 94)) | (1L << (DYNAMIC - 94)) | (1L << (EDITPROC - 94)) | (1L << (ELSE - 94)) | (1L << (ELSEIF - 94)) | (1L << (ENCODING - 94)) | (1L << (ENCRYPTION - 94)) | (1L << (END - 94)) | (1L << (END_EXEC - 94)) | (1L << (ENDING - 94)) | (1L << (ERASE - 94)) | (1L << (ESCAPE - 94)) | (1L << (EXCEPT - 94)) | (1L << (EXCEPTION - 94)) | (1L << (EXEC_SQL - 94)) | (1L << (EXECUTE - 94)) | (1L << (EXISTS - 94)) | (1L << (EXIT - 94)) | (1L << (EXPLAIN - 94)) | (1L << (EXTERNAL - 94)) | (1L << (FENCED - 94)) | (1L << (FETCH - 94)) | (1L << (FIELDPROC - 94)) | (1L << (FINAL - 94)) | (1L << (FIRST - 94)) | (1L << (FOR - 94)) | (1L << (FREE - 94)) | (1L << (FROM - 94)) | (1L << (FULL - 94)) | (1L << (FUNCTION - 94)) | (1L << (GENERATED - 94)) | (1L << (GET - 94)) | (1L << (GLOBAL - 94)) | (1L << (GO - 94)) | (1L << (GOTO - 94)) | (1L << (GRANT - 94)) | (1L << (GROUP - 94)) | (1L << (HANDLER - 94)) | (1L << (HAVING - 94)) | (1L << (HOLD - 94)) | (1L << (HOUR - 94)) | (1L << (HOURS - 94)) | (1L << (IF - 94)) | (1L << (IMMEDIATE - 94)) | (1L << (IN - 94)) | (1L << (INCLUSIVE - 94)) | (1L << (INDEX - 94)) | (1L << (INDEXBP - 94)) | (1L << (INHERIT - 94)) | (1L << (INNER - 94)) | (1L << (INOUT - 94)) | (1L << (INSENSITIVE - 94)) | (1L << (INSERT - 94)) | (1L << (INTERSECT - 94)) | (1L << (INTO - 94)) | (1L << (IS - 94)) | (1L << (ISOBID - 94)))) != 0) || ((((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & ((1L << (ITERATE - 158)) | (1L << (JAR - 158)) | (1L << (JOIN - 158)) | (1L << (KEEP - 158)) | (1L << (KEY - 158)) | (1L << (LABEL - 158)) | (1L << (LANGUAGE - 158)) | (1L << (LAST - 158)) | (1L << (LC_CTYPE - 158)) | (1L << (LEAVE - 158)) | (1L << (LEFT - 158)) | (1L << (LIKE - 158)) | (1L << (LIMIT - 158)) | (1L << (LOCAL - 158)) | (1L << (LOCALE - 158)) | (1L << (LOCATOR - 158)) | (1L << (LOCATORS - 158)) | (1L << (LOCK - 158)) | (1L << (LOCKMAX - 158)) | (1L << (LOCKSIZE - 158)) | (1L << (LONG - 158)) | (1L << (LOOP - 158)) | (1L << (MAINTAINED - 158)) | (1L << (MATERIALIZED - 158)) | (1L << (MICROSECOND - 158)) | (1L << (MICROSECONDS - 158)) | (1L << (MODIFIES - 158)) | (1L << (MONTH - 158)) | (1L << (MONTHS - 158)) | (1L << (NEXT - 158)) | (1L << (NEXTVAL - 158)) | (1L << (NO - 158)) | (1L << (NONE - 158)) | (1L << (NOT - 158)) | (1L << (NULL - 158)) | (1L << (NULLS - 158)) | (1L << (NUMPARTS - 158)) | (1L << (OBID - 158)) | (1L << (OF - 158)) | (1L << (OFFSET - 158)) | (1L << (OLD - 158)) | (1L << (ON - 158)) | (1L << (OPEN - 158)) | (1L << (OPTIMIZATION - 158)) | (1L << (OPTIMIZE - 158)) | (1L << (OR - 158)) | (1L << (ORDER - 158)) | (1L << (ORGANIZATION - 158)) | (1L << (OUT - 158)) | (1L << (OUTER - 158)) | (1L << (PACKAGE - 158)) | (1L << (PADDED - 158)) | (1L << (PARAMETER - 158)) | (1L << (PART - 158)) | (1L << (PARTITION - 158)) | (1L << (PARTITIONED - 158)) | (1L << (PARTITIONING - 158)) | (1L << (PATH - 158)) | (1L << (PERIOD - 158)) | (1L << (PIECESIZE - 158)) | (1L << (PLAN - 158)) | (1L << (PRECISION - 158)) | (1L << (PREPARE - 158)))) != 0) || ((((_la - 222)) & ~0x3f) == 0 && ((1L << (_la - 222)) & ((1L << (PREVVAL - 222)) | (1L << (PRIOR - 222)) | (1L << (PRIQTY - 222)) | (1L << (PRIVILEGES - 222)) | (1L << (PROCEDURE - 222)) | (1L << (PROGRAM - 222)) | (1L << (PSID - 222)) | (1L << (PUBLIC - 222)) | (1L << (QUERY - 222)) | (1L << (QUERYNO - 222)) | (1L << (READS - 222)) | (1L << (REFERENCES - 222)) | (1L << (REFRESH - 222)) | (1L << (RELEASE - 222)) | (1L << (RENAME - 222)) | (1L << (REPEAT - 222)) | (1L << (RESIGNAL - 222)) | (1L << (RESTRICT - 222)) | (1L << (RESULT - 222)) | (1L << (RESULT_SET_LOCATOR - 222)) | (1L << (RETURN - 222)) | (1L << (RETURNS - 222)) | (1L << (REVOKE - 222)) | (1L << (RIGHT - 222)) | (1L << (ROLE - 222)) | (1L << (ROLLBACK - 222)) | (1L << (ROLLUP - 222)) | (1L << (ROUND_CEILING - 222)) | (1L << (ROUND_DOWN - 222)) | (1L << (ROUND_FLOOR - 222)) | (1L << (ROUND_HALF_DOWN - 222)) | (1L << (ROUND_HALF_EVEN - 222)) | (1L << (ROUND_HALF_UP - 222)) | (1L << (ROUND_UP - 222)) | (1L << (ROW - 222)) | (1L << (ROWSET - 222)) | (1L << (RUN - 222)) | (1L << (SAVEPOINT - 222)) | (1L << (SCHEMA - 222)) | (1L << (SCRATCHPAD - 222)) | (1L << (SECOND - 222)) | (1L << (SECONDS - 222)) | (1L << (SECQTY - 222)) | (1L << (SECURITY - 222)) | (1L << (SELECT - 222)) | (1L << (SENSITIVE - 222)) | (1L << (SEQUENCE - 222)) | (1L << (SET - 222)) | (1L << (SIGNAL - 222)) | (1L << (SIMPLE - 222)) | (1L << (SOME - 222)) | (1L << (SOURCE - 222)) | (1L << (SPECIFIC - 222)) | (1L << (STANDARD - 222)) | (1L << (STATEMENT - 222)) | (1L << (STATIC - 222)) | (1L << (STAY - 222)) | (1L << (STOGROUP - 222)) | (1L << (STORES - 222)) | (1L << (STYLE - 222)) | (1L << (SUMMARY - 222)) | (1L << (SYNONYM - 222)) | (1L << (SYSDATE - 222)) | (1L << (SYSTEM - 222)))) != 0) || ((((_la - 286)) & ~0x3f) == 0 && ((1L << (_la - 286)) & ((1L << (SYSTIMESTAMP - 286)) | (1L << (TABLE - 286)) | (1L << (TABLESPACE - 286)) | (1L << (THEN - 286)) | (1L << (TO - 286)) | (1L << (TRIGGER - 286)) | (1L << (TRUNCATE - 286)) | (1L << (TYPE - 286)) | (1L << (UNDO - 286)) | (1L << (UNION - 286)) | (1L << (UNIQUE - 286)) | (1L << (UNTIL - 286)) | (1L << (UPDATE - 286)) | (1L << (USING - 286)) | (1L << (VALIDPROC - 286)) | (1L << (VALUE - 286)) | (1L << (VALUES - 286)) | (1L << (VARIABLE - 286)) | (1L << (VARIANT - 286)) | (1L << (VCAT - 286)) | (1L << (VERSIONING - 286)) | (1L << (VIEW - 286)) | (1L << (VOLATILE - 286)) | (1L << (VOLUMES - 286)) | (1L << (WHEN - 286)) | (1L << (WHENEVER - 286)) | (1L << (WHERE - 286)) | (1L << (WHILE - 286)) | (1L << (WITH - 286)) | (1L << (WLM - 286)) | (1L << (XMLCAST - 286)) | (1L << (XMLEXISTS - 286)) | (1L << (XMLNAMESPACES - 286)) | (1L << (YEAR - 286)) | (1L << (YEARS - 286)) | (1L << (ZONE - 286)) | (1L << (AND - 286)) | (1L << (ARRAY_AGG - 286)) | (1L << (ASC - 286)) | (1L << (AVG - 286)) | (1L << (BIT - 286)) | (1L << (CHANGE - 286)) | (1L << (CODEUNITS16 - 286)) | (1L << (CODEUNITS32 - 286)) | (1L << (CORR - 286)) | (1L << (CORRELATION - 286)) | (1L << (COUNT - 286)) | (1L << (COUNT_BIG - 286)) | (1L << (COVAR - 286)) | (1L << (COVARIANCE - 286)) | (1L << (COVARIANCE_SAMP - 286)) | (1L << (COVAR_POP - 286)) | (1L << (COVAR_SAMP - 286)) | (1L << (CS - 286)) | (1L << (CUME_DIST - 286)) | (1L << (DENSE_RANK - 286)) | (1L << (DESC - 286)) | (1L << (EBCDIC - 286)) | (1L << (EXCLUSIVE - 286)) | (1L << (FIRST_VALUE - 286)) | (1L << (FOLLOWING - 286)) | (1L << (GROUPING - 286)) | (1L << (IGNORE - 286)) | (1L << (INDICATOR - 286)))) != 0) || ((((_la - 350)) & ~0x3f) == 0 && ((1L << (_la - 350)) & ((1L << (INPUT - 350)) | (1L << (ISNULL - 350)) | (1L << (LAG - 350)) | (1L << (LARGE - 350)) | (1L << (LAST_VALUE - 350)) | (1L << (LEAD - 350)) | (1L << (LISTAGG - 350)) | (1L << (LOCKED - 350)) | (1L << (LOCKS - 350)) | (1L << (MEDIAN - 350)) | (1L << (MINUTES - 350)) | (1L << (MIXED - 350)) | (1L << (NOTNULL - 350)) | (1L << (NTH_VALUE - 350)) | (1L << (NTILE - 350)) | (1L << (NUMERIC - 350)) | (1L << (OBJECT - 350)) | (1L << (OCTETS - 350)) | (1L << (ONLY - 350)) | (1L << (OVER - 350)) | (1L << (PASSING - 350)) | (1L << (PERCENTILE_CONT - 350)) | (1L << (PERCENTILE_DISC - 350)) | (1L << (PERCENT_RANK - 350)) | (1L << (PRECEDING - 350)) | (1L << (PREVIOUS - 350)) | (1L << (RANGE - 350)) | (1L << (RANK - 350)) | (1L << (RATIO_TO_REPORT - 350)) | (1L << (READ - 350)) | (1L << (REF - 350)) | (1L << (REGR_AVGX - 350)) | (1L << (REGR_AVGY - 350)) | (1L << (REGR_COUNT - 350)) | (1L << (REGR_ICPT - 350)) | (1L << (REGR_INTERCEPT - 350)) | (1L << (REGR_R2 - 350)) | (1L << (REGR_SLOPE - 350)) | (1L << (REGR_SXX - 350)) | (1L << (REGR_SXY - 350)) | (1L << (REGR_SYY - 350)) | (1L << (RESPECT - 350)) | (1L << (ROW_NUMBER - 350)) | (1L << (ROWS - 350)) | (1L << (RR - 350)) | (1L << (RS - 350)) | (1L << (SBCS - 350)) | (1L << (SELECTIVITY - 350)) | (1L << (SETS - 350)) | (1L << (SHARE - 350)) | (1L << (SKIP_ - 350)) | (1L << (STDDEV - 350)) | (1L << (STDDEV_POP - 350)) | (1L << (STDDEV_SAMP - 350)) | (1L << (SUM - 350)) | (1L << (TOKEN - 350)) | (1L << (UNBOUNDED - 350)) | (1L << (UNPACK - 350)) | (1L << (UR - 350)) | (1L << (USE - 350)) | (1L << (VAR - 350)) | (1L << (VARIANCE - 350)) | (1L << (VARIANCE_SAMP - 350)) | (1L << (VAR_POP - 350)))) != 0) || ((((_la - 414)) & ~0x3f) == 0 && ((1L << (_la - 414)) & ((1L << (VAR_SAMP - 414)) | (1L << (VARYING - 414)) | (1L << (WITHOUT - 414)) | (1L << (XML - 414)) | (1L << (XMLAGG - 414)) | (1L << (COLUMNS - 414)) | (1L << (SQLID - 414)) | (1L << (ORDINALITY - 414)) | (1L << (SYSTEM_TIME - 414)) | (1L << (BUSINESS_TIME - 414)) | (1L << (MULTIPLIER - 414)) | (1L << (UNNEST - 414)) | (1L << (CROSS - 414)) | (1L << (CALLER - 414)) | (1L << (CLIENT - 414)) | (1L << (POSITIONING - 414)) | (1L << (SCROLL - 414)) | (1L << (ACTION - 414)) | (1L << (ASSEMBLE - 414)) | (1L << (C_ - 414)) | (1L << (CALLED - 414)) | (1L << (COBOL - 414)) | (1L << (DB2 - 414)) | (1L << (DEFINER - 414)) | (1L << (DISPATCH - 414)) | (1L << (ENVIRONMENT - 414)) | (1L << (FAILURE - 414)) | (1L << (FAILURES - 414)) | (1L << (JAVA - 414)) | (1L << (MAIN - 414)) | (1L << (NAME - 414)) | (1L << (OPTIONS - 414)) | (1L << (PARALLEL - 414)) | (1L << (PLI - 414)) | (1L << (REGISTERS - 414)) | (1L << (RESIDENT - 414)) | (1L << (SECURED - 414)) | (1L << (SPECIAL - 414)) | (1L << (SQL - 414)) | (1L << (STOP - 414)) | (1L << (SUB - 414)) | (1L << (YES - 414)) | (1L << (APPLICATION - 414)) | (1L << (CHANGED - 414)) | (1L << (COMPATIBILITY - 414)) | (1L << (COMPRESS - 414)) | (1L << (COPY - 414)) | (1L << (FREEPAGE - 414)) | (1L << (GBPCACHE - 414)) | (1L << (INCLUDE - 414)) | (1L << (MAXVALUE - 414)) | (1L << (MINVALUE - 414)) | (1L << (PCTFREE - 414)) | (1L << (REGENERATE - 414)) | (1L << (MASK - 414)) | (1L << (ENABLE - 414)) | (1L << (PERMISSION - 414)) | (1L << (ATOMIC - 414)) | (1L << (SQLEXCEPTION - 414)) | (1L << (MERGE - 414)) | (1L << (MATCHED - 414)) | (1L << (SQLSTATE - 414)) | (1L << (MESSAGE_TEXT - 414)) | (1L << (OVERRIDING - 414)))) != 0) || ((((_la - 478)) & ~0x3f) == 0 && ((1L << (_la - 478)) & ((1L << (PORTION - 478)) | (1L << (DB2SQL - 478)) | (1L << (DEBUG - 478)) | (1L << (GENERAL - 478)) | (1L << (MODE_ - 478)) | (1L << (REXX - 478)) | (1L << (CACHE - 478)) | (1L << (CYCLE - 478)) | (1L << (INCREMENT - 478)) | (1L << (RESTART - 478)) | (1L << (DATACLAS - 478)) | (1L << (MGMTCLAS - 478)) | (1L << (REMOVE - 478)) | (1L << (STORCLAS - 478)) | (1L << (ACCESS - 478)) | (1L << (ACTIVATE - 478)) | (1L << (ALWAYS - 478)) | (1L << (APPEND - 478)) | (1L << (ARCHIVE - 478)) | (1L << (BUSINESS - 478)) | (1L << (CASCADE - 478)) | (1L << (CHANGES - 478)) | (1L << (CONTROL - 478)) | (1L << (DEACTIVATE - 478)) | (1L << (DEFERRED - 478)) | (1L << (EACH - 478)) | (1L << (ENFORCED - 478)) | (1L << (EXTRA - 478)) | (1L << (FOREIGN - 478)) | (1L << (HIDDEN_ - 478)) | (1L << (HISTORY - 478)) | (1L << (ID - 478)) | (1L << (IDENTITY - 478)) | (1L << (IMPLICITLY - 478)) | (1L << (INITIALLY - 478)) | (1L << (INLINE - 478)) | (1L << (OPERATION - 478)) | (1L << (ORGANIZE - 478)) | (1L << (OVERLAPS - 478)) | (1L << (PACKAGE_NAME - 478)) | (1L << (PACKAGE_SCHEMA - 478)) | (1L << (PACKAGE_VERSION - 478)) | (1L << (PRIMARY - 478)) | (1L << (RESET - 478)) | (1L << (ROTATE - 478)) | (1L << (START - 478)) | (1L << (SYSIBM - 478)) | (1L << (TRANSACTION - 478)) | (1L << (XMLSCHEMA - 478)) | (1L << (ELEMENT - 478)) | (1L << (URL - 478)) | (1L << (NAMESPACE - 478)) | (1L << (LOCATION - 478)) | (1L << (SYSXSR - 478)) | (1L << (ALGORITHM - 478)) | (1L << (FIXEDLENGTH - 478)) | (1L << (HUFFMAN - 478)) | (1L << (LOB - 478)) | (1L << (LOG - 478)) | (1L << (LOGGED - 478)) | (1L << (MAXPARTITIONS - 478)) | (1L << (MAXROWS - 478)) | (1L << (MEMBER - 478)) | (1L << (MOVE - 478)))) != 0) || ((((_la - 542)) & ~0x3f) == 0 && ((1L << (_la - 542)) & ((1L << (PAGE - 542)) | (1L << (PAGENUM - 542)) | (1L << (PENDING - 542)) | (1L << (RELATIVE - 542)) | (1L << (SEGSIZE - 542)) | (1L << (TRACKMOD - 542)) | (1L << (ADDRESS - 542)) | (1L << (ATTRIBUTES - 542)) | (1L << (AUTHENTICATION - 542)) | (1L << (AUTHID - 542)) | (1L << (CONTEXT - 542)) | (1L << (JOBNAME - 542)) | (1L << (OWNER - 542)) | (1L << (PROFILE - 542)) | (1L << (QUALIFIER - 542)) | (1L << (SERVAUTH - 542)) | (1L << (TRUSTED - 542)) | (1L << (SECTION - 542)) | (1L << (ACTIVE - 542)) | (1L << (VERSION - 542)) | (1L << (ALIAS - 542)) | (1L << (WORK - 542)) | (1L << (WORKFILE - 542)) | (1L << (SYSDEFLT - 542)) | (1L << (NULTERM - 542)) | (1L << (STRUCTURE - 542)) | (1L << (GENERIC - 542)) | (1L << (TEMPORARY - 542)) | (1L << (DEFER - 542)) | (1L << (DEFINE - 542)) | (1L << (EXCLUDE - 542)) | (1L << (GENERATE - 542)) | (1L << (KEYS - 542)) | (1L << (XMLPATTERN - 542)) | (1L << (ABS - 542)) | (1L << (ABSVAL - 542)) | (1L << (ACOS - 542)) | (1L << (ADD_DAYS - 542)) | (1L << (ADD_MONTHS - 542)) | (1L << (ARRAY_DELETE - 542)) | (1L << (ARRAY_FIRST - 542)) | (1L << (ARRAY_LAST - 542)) | (1L << (ARRAY_NEXT - 542)) | (1L << (ARRAY_PRIOR - 542)) | (1L << (ARRAY_TRIM - 542)) | (1L << (ASCII - 542)) | (1L << (ASCII_CHR - 542)) | (1L << (ASCIISTR - 542)) | (1L << (ASCII_STR - 542)) | (1L << (ASIN - 542)) | (1L << (ATAN - 542)) | (1L << (ATAN2 - 542)) | (1L << (ATANH - 542)) | (1L << (BIGINT - 542)) | (1L << (BINARY - 542)) | (1L << (BITAND - 542)) | (1L << (BITANDNOT - 542)) | (1L << (BITNOT - 542)) | (1L << (BITOR - 542)) | (1L << (BITXOR - 542)) | (1L << (BLOB - 542)) | (1L << (BTRIM - 542)) | (1L << (CARDINALITY - 542)) | (1L << (CCSID_ENCODING - 542)))) != 0) || ((((_la - 606)) & ~0x3f) == 0 && ((1L << (_la - 606)) & ((1L << (CEIL - 606)) | (1L << (CEILING - 606)) | (1L << (CHAR9 - 606)) | (1L << (CHARACTER_LENGTH - 606)) | (1L << (CHAR_LENGTH - 606)) | (1L << (CHR - 606)) | (1L << (CLOB - 606)) | (1L << (COALESCE - 606)) | (1L << (COLLATION_KEY - 606)) | (1L << (COMPARE_DECFLOAT - 606)) | (1L << (COS - 606)) | (1L << (COSH - 606)) | (1L << (DATE - 606)) | (1L << (DAYOFMONTH - 606)) | (1L << (DAYOFWEEK - 606)) | (1L << (DAYOFWEEK_ISO - 606)) | (1L << (DAYOFYEAR - 606)) | (1L << (DAYS_BETWEEN - 606)) | (1L << (DBCLOB - 606)) | (1L << (DEC - 606)) | (1L << (DECFLOAT - 606)) | (1L << (DECFLOAT_FORMAT - 606)) | (1L << (DECFLOAT_SORTKEY - 606)) | (1L << (DECIMAL - 606)) | (1L << (DECODE - 606)) | (1L << (DECRYPT_BINARY - 606)) | (1L << (DECRYPT_BIT - 606)) | (1L << (DECRYPT_CHAR - 606)) | (1L << (DECRYPT_DATAKEY_BIGINT - 606)) | (1L << (DECRYPT_DATAKEY_BIT - 606)) | (1L << (DECRYPT_DATAKEY_CLOB - 606)) | (1L << (DECRYPT_DATAKEY_DBCLOB - 606)) | (1L << (DECRYPT_DATAKEY_DECIMAL - 606)) | (1L << (DECRYPT_DATAKEY_INTEGER - 606)) | (1L << (DECRYPT_DATAKEY_VARCHAR - 606)) | (1L << (DECRYPT_DATAKEY_VARGRAPHIC - 606)) | (1L << (DECRYPT_DB - 606)) | (1L << (DEGREES - 606)) | (1L << (DIFFERENCE - 606)) | (1L << (DIGITS - 606)) | (1L << (DOUBLE_PRECISION - 606)) | (1L << (DSN_XMLVALIDATE - 606)) | (1L << (EBCDIC_CHR - 606)) | (1L << (EBCDIC_STR - 606)) | (1L << (ENCRYPT_DATAKEY - 606)) | (1L << (ENCRYPT_TDES - 606)) | (1L << (EXP - 606)) | (1L << (EXTRACT - 606)) | (1L << (FLOAT - 606)) | (1L << (FLOOR - 606)) | (1L << (GENERATE_UNIQUE - 606)) | (1L << (GENERATE_UNIQUE_BINARY - 606)) | (1L << (GETHINT - 606)) | (1L << (GETVARIABLE - 606)) | (1L << (GRAPHIC - 606)) | (1L << (GREATEST - 606)) | (1L << (HASH - 606)) | (1L << (HASH_CRC32 - 606)) | (1L << (HASH_MD5 - 606)) | (1L << (HASH_SHA1 - 606)) | (1L << (HASH_SHA256 - 606)) | (1L << (HEX - 606)) | (1L << (IDENTITY_VAL_LOCAL - 606)) | (1L << (IFNULL - 606)))) != 0) || ((((_la - 670)) & ~0x3f) == 0 && ((1L << (_la - 670)) & ((1L << (INSTR - 670)) | (1L << (INT - 670)) | (1L << (INTEGER - 670)) | (1L << (JULIAN_DAY - 670)) | (1L << (LAST_DAY - 670)) | (1L << (LCASE - 670)) | (1L << (LEAST - 670)) | (1L << (LENGTH - 670)) | (1L << (LN - 670)) | (1L << (LOCATE - 670)) | (1L << (LOCATE_IN_STRING - 670)) | (1L << (LOG10 - 670)) | (1L << (LOWER - 670)) | (1L << (LPAD - 670)) | (1L << (LTRIM - 670)) | (1L << (MAX - 670)) | (1L << (MAX_CARDINALITY - 670)) | (1L << (MIDNIGHT_SECONDS - 670)) | (1L << (MIN - 670)) | (1L << (MINUTE - 670)) | (1L << (MOD - 670)) | (1L << (MONTHS_BETWEEN - 670)) | (1L << (MQREAD - 670)) | (1L << (MQREADCLOB - 670)) | (1L << (MQRECEIVE - 670)) | (1L << (MQRECEIVECLOB - 670)) | (1L << (MQSEND - 670)) | (1L << (MULTIPLY_ALT - 670)) | (1L << (NEXT_DAY - 670)) | (1L << (NEXT_MONTH - 670)) | (1L << (NORMALIZE_DECFLOAT - 670)) | (1L << (NORMALIZE_STRING - 670)) | (1L << (NULLIF - 670)) | (1L << (NVL - 670)) | (1L << (OVERLAY - 670)) | (1L << (PACK - 670)) | (1L << (POSITION - 670)) | (1L << (POSSTR - 670)) | (1L << (POW - 670)) | (1L << (POWER - 670)) | (1L << (QUANTIZE - 670)) | (1L << (QUARTER - 670)) | (1L << (RADIANS - 670)) | (1L << (RAISE_ERROR - 670)) | (1L << (RAND - 670)) | (1L << (RANDOM - 670)) | (1L << (REAL - 670)) | (1L << (REGEXP_COUNT - 670)) | (1L << (REGEXP_INSTR - 670)) | (1L << (REGEXP_LIKE - 670)) | (1L << (REGEXP_REPLACE - 670)) | (1L << (REGEXP_SUBSTR - 670)) | (1L << (REPLACE - 670)) | (1L << (RID - 670)) | (1L << (ROUND - 670)) | (1L << (ROUND_TIMESTAMP - 670)) | (1L << (ROWID - 670)) | (1L << (RPAD - 670)) | (1L << (RTRIM - 670)) | (1L << (SCORE - 670)) | (1L << (SIGN - 670)) | (1L << (SIN - 670)) | (1L << (SINH - 670)) | (1L << (SMALLINT - 670)))) != 0) || ((((_la - 734)) & ~0x3f) == 0 && ((1L << (_la - 734)) & ((1L << (SOAPHTTPC - 734)) | (1L << (SOAPHTTPNC - 734)) | (1L << (SOAPHTTPNV - 734)) | (1L << (SOAPHTTPV - 734)) | (1L << (SOUNDEX - 734)) | (1L << (SPACE - 734)) | (1L << (SQRT - 734)) | (1L << (STRIP - 734)) | (1L << (STRLEFT - 734)) | (1L << (STRPOS - 734)) | (1L << (STRRIGHT - 734)) | (1L << (SUBSTR - 734)) | (1L << (SUBSTRING - 734)) | (1L << (TAN - 734)) | (1L << (TANH - 734)) | (1L << (TIME - 734)) | (1L << (TIMESTAMP - 734)) | (1L << (TIMESTAMPADD - 734)) | (1L << (TIMESTAMPDIFF - 734)) | (1L << (TIMESTAMP_FORMAT - 734)) | (1L << (TIMESTAMP_ISO - 734)) | (1L << (TIMESTAMP_TZ - 734)) | (1L << (TO_CHAR - 734)) | (1L << (TO_CLOB - 734)) | (1L << (TO_DATE - 734)) | (1L << (TO_NUMBER - 734)) | (1L << (TOTALORDER - 734)) | (1L << (TO_TIMESTAMP - 734)) | (1L << (TRANSLATE - 734)) | (1L << (TRIM - 734)) | (1L << (TRIM_ARRAY - 734)) | (1L << (TRUNC - 734)) | (1L << (TRUNC_TIMESTAMP - 734)) | (1L << (UCASE - 734)) | (1L << (UNICODE - 734)) | (1L << (UNICODE_STR - 734)) | (1L << (UNISTR - 734)) | (1L << (UPPER - 734)) | (1L << (VARBINARY - 734)) | (1L << (VARCHAR - 734)) | (1L << (VARCHAR9 - 734)) | (1L << (VARCHAR_BIT_FORMAT - 734)) | (1L << (VARCHAR_FORMAT - 734)) | (1L << (VARGRAPHIC - 734)) | (1L << (VERIFY_GROUP_FOR_USER - 734)) | (1L << (VERIFY_ROLE_FOR_USER - 734)) | (1L << (VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER - 734)) | (1L << (WEEK - 734)) | (1L << (WEEK_ISO - 734)) | (1L << (WRAP - 734)) | (1L << (XMLATTRIBUTES - 734)) | (1L << (XMLCOMMENT - 734)) | (1L << (XMLCONCAT - 734)) | (1L << (XMLDOCUMENT - 734)) | (1L << (XMLELEMENT - 734)) | (1L << (XMLFOREST - 734)) | (1L << (XMLMODIFY - 734)) | (1L << (XMLPARSE - 734)) | (1L << (XMLPI - 734)) | (1L << (XMLQUERY - 734)) | (1L << (XMLSERIALIZE - 734)) | (1L << (XMLTEXT - 734)) | (1L << (XMLXSROBJECTID - 734)) | (1L << (XSLTRANSFORM - 734)))) != 0) || ((((_la - 798)) & ~0x3f) == 0 && ((1L << (_la - 798)) & ((1L << (CURRENT_ACCELERATOR - 798)) | (1L << (CURRENT_APPLICATION_COMPATIBILITY - 798)) | (1L << (CURRENT_APPLICATION_ENCODING_SCHEME - 798)) | (1L << (CURRENT_CLIENT_ACCTNG - 798)) | (1L << (CURRENT_CLIENT_APPLNAME - 798)) | (1L << (CURRENT_CLIENT_CORR_TOKEN - 798)) | (1L << (CURRENT_CLIENT_USERID - 798)) | (1L << (CURRENT_CLIENT_WRKSTNNAME - 798)) | (1L << (CURRENT_DATE - 798)) | (1L << (CURRENT_DEBUG_MODE - 798)) | (1L << (CURRENT_DECFLOAT_ROUNDING_MODE - 798)) | (1L << (CURRENT_DEGREE - 798)) | (1L << (CURRENT_EXPLAIN_MODE - 798)) | (1L << (CURRENT_GET_ACCEL_ARCHIVE - 798)) | (1L << (CURRENT_LOCALE_LC_CTYPE - 798)) | (1L << (CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION - 798)) | (1L << (CURRENT_MEMBER - 798)) | (1L << (CURRENT_OPTIMIZATION_HINT - 798)) | (1L << (CURRENT_PACKAGE_PATH - 798)) | (1L << (CURRENT_PACKAGESET - 798)) | (1L << (CURRENT_PATH - 798)) | (1L << (CURRENT_PRECISION - 798)) | (1L << (CURRENT_QUERY_ACCELERATION - 798)) | (1L << (CURRENT_QUERY_ACCELERATION_WAITFORDATA - 798)) | (1L << (CURRENT_REFRESH_AGE - 798)) | (1L << (CURRENT_ROUTINE_VERSION - 798)) | (1L << (CURRENT_RULES - 798)) | (1L << (CURRENT_SCHEMA - 798)) | (1L << (CURRENT_SERVER - 798)) | (1L << (CURRENT_SQLID - 798)) | (1L << (CURRENT_TEMPORAL_BUSINESS_TIME - 798)) | (1L << (CURRENT_TEMPORAL_SYSTEM_TIME - 798)) | (1L << (CURRENT_TIME - 798)) | (1L << (CURRENT_TIMESTAMP - 798)) | (1L << (CURRENT_TIME_ZONE - 798)) | (1L << (ENCRYPTION_PASSWORD - 798)) | (1L << (SESSION_TIME_ZONE - 798)) | (1L << (SESSION_USER - 798)) | (1L << (USER - 798)) | (1L << (ADMIN_TASK_LIST - 798)) | (1L << (ADMIN_TASK_OUTPUT - 798)) | (1L << (ADMIN_TASK_STATUS - 798)) | (1L << (BLOCKING_THREADS - 798)) | (1L << (MQREADALL - 798)) | (1L << (MQREADALLCLOB - 798)) | (1L << (MQRECEIVEALL - 798)) | (1L << (MQRECEIVEALLCLOB - 798)) | (1L << (XMLTABLE - 798)) | (1L << (SQLIDENTIFIER - 798)))) != 0)) {
				{
				setState(1425);
				parameterDeclaration1();
				setState(1430);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1426);
					match(COMMA);
					setState(1427);
					parameterDeclaration1();
					}
					}
					setState(1432);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(1435);
			match(RPAREN);
			setState(1437); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1436);
				createFunctionStatementExternalScalarOptions();
				}
				}
				setState(1439); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (ALLOW - 34)) | (1L << (ASUTIME - 34)) | (1L << (COLLID - 34)) | (1L << (CONTAINS - 34)) | (1L << (CONTINUE - 34)) | (1L << (DBINFO - 34)) | (1L << (DEFAULT - 34)) | (1L << (DETERMINISTIC - 34)) | (1L << (DISALLOW - 34)))) != 0) || ((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & ((1L << (EXTERNAL - 120)) | (1L << (FENCED - 120)) | (1L << (FINAL - 120)) | (1L << (INHERIT - 120)) | (1L << (LANGUAGE - 120)))) != 0) || ((((_la - 185)) & ~0x3f) == 0 && ((1L << (_la - 185)) & ((1L << (MODIFIES - 185)) | (1L << (NO - 185)) | (1L << (NOT - 185)) | (1L << (NULL - 185)) | (1L << (PACKAGE - 185)) | (1L << (PARAMETER - 185)) | (1L << (PROGRAM - 185)) | (1L << (READS - 185)) | (1L << (RETURNS - 185)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (RUN - 258)) | (1L << (SCRATCHPAD - 258)) | (1L << (SECURITY - 258)) | (1L << (SPECIFIC - 258)) | (1L << (STATIC - 258)) | (1L << (STAY - 258)) | (1L << (VARIANT - 258)) | (1L << (WLM - 258)))) != 0) || ((((_la - 434)) & ~0x3f) == 0 && ((1L << (_la - 434)) & ((1L << (CALLED - 434)) | (1L << (SECURED - 434)) | (1L << (STOP - 434)))) != 0) || _la==CARDINALITY );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFunctionStatementExternalTableContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DB2zSQLParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(DB2zSQLParser.FUNCTION, 0); }
		public FunctionNameContext functionName() {
			return getRuleContext(FunctionNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<ParameterDeclaration1Context> parameterDeclaration1() {
			return getRuleContexts(ParameterDeclaration1Context.class);
		}
		public ParameterDeclaration1Context parameterDeclaration1(int i) {
			return getRuleContext(ParameterDeclaration1Context.class,i);
		}
		public List<CreateFunctionStatementExternalTableOptionsContext> createFunctionStatementExternalTableOptions() {
			return getRuleContexts(CreateFunctionStatementExternalTableOptionsContext.class);
		}
		public CreateFunctionStatementExternalTableOptionsContext createFunctionStatementExternalTableOptions(int i) {
			return getRuleContext(CreateFunctionStatementExternalTableOptionsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public CreateFunctionStatementExternalTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunctionStatementExternalTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateFunctionStatementExternalTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateFunctionStatementExternalTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateFunctionStatementExternalTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFunctionStatementExternalTableContext createFunctionStatementExternalTable() throws RecognitionException {
		CreateFunctionStatementExternalTableContext _localctx = new CreateFunctionStatementExternalTableContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_createFunctionStatementExternalTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1441);
			match(CREATE);
			setState(1442);
			match(FUNCTION);
			setState(1443);
			functionName();
			setState(1444);
			match(LPAREN);
			setState(1453);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & ((1L << (ADD - 30)) | (1L << (AFTER - 30)) | (1L << (ALL - 30)) | (1L << (ALLOCATE - 30)) | (1L << (ALLOW - 30)) | (1L << (ALTER - 30)) | (1L << (ALTERAND - 30)) | (1L << (ANY - 30)) | (1L << (ARRAY - 30)) | (1L << (ARRAY_EXISTS - 30)) | (1L << (AS - 30)) | (1L << (ASENSITIVE - 30)) | (1L << (ASSOCIATE - 30)) | (1L << (ASUTIME - 30)) | (1L << (AT - 30)) | (1L << (AUDIT - 30)) | (1L << (AUX - 30)) | (1L << (AUXILIARY - 30)) | (1L << (BEFORE - 30)) | (1L << (BEGIN - 30)) | (1L << (BETWEEN - 30)) | (1L << (BUFFERPOOL - 30)) | (1L << (BY - 30)) | (1L << (CALL - 30)) | (1L << (CAPTURE - 30)) | (1L << (CASCADED - 30)) | (1L << (CASE - 30)) | (1L << (CAST - 30)) | (1L << (CCSID - 30)) | (1L << (CHAR - 30)) | (1L << (CHARACTER - 30)) | (1L << (CHECK - 30)) | (1L << (CLONE - 30)) | (1L << (CLOSE - 30)) | (1L << (CLUSTER - 30)) | (1L << (COLLECTION - 30)) | (1L << (COLLID - 30)) | (1L << (COLUMN - 30)) | (1L << (COMMENT - 30)) | (1L << (COMMIT - 30)) | (1L << (CONCAT - 30)) | (1L << (CONDITION - 30)) | (1L << (CONNECT - 30)) | (1L << (CONNECTION - 30)) | (1L << (CONSTRAINT - 30)) | (1L << (CONTAINS - 30)) | (1L << (CONTENT - 30)) | (1L << (CONTINUE - 30)) | (1L << (CREATE - 30)) | (1L << (CUBE - 30)) | (1L << (CURRENT - 30)) | (1L << (CURRENT_LC_CTYPE - 30)) | (1L << (CURRVAL - 30)) | (1L << (CURSOR - 30)) | (1L << (DATA - 30)) | (1L << (DATABASE - 30)) | (1L << (DAY - 30)) | (1L << (DAYS - 30)) | (1L << (DBINFO - 30)) | (1L << (DECLARE - 30)) | (1L << (DEFAULT - 30)) | (1L << (DELETE - 30)) | (1L << (DESCRIPTOR - 30)) | (1L << (DETERMINISTIC - 30)))) != 0) || ((((_la - 94)) & ~0x3f) == 0 && ((1L << (_la - 94)) & ((1L << (DISABLE - 94)) | (1L << (DISALLOW - 94)) | (1L << (DISTINCT - 94)) | (1L << (DO - 94)) | (1L << (DOCUMENT - 94)) | (1L << (DOUBLE - 94)) | (1L << (DROP - 94)) | (1L << (DSSIZE - 94)) | (1L << (DYNAMIC - 94)) | (1L << (EDITPROC - 94)) | (1L << (ELSE - 94)) | (1L << (ELSEIF - 94)) | (1L << (ENCODING - 94)) | (1L << (ENCRYPTION - 94)) | (1L << (END - 94)) | (1L << (END_EXEC - 94)) | (1L << (ENDING - 94)) | (1L << (ERASE - 94)) | (1L << (ESCAPE - 94)) | (1L << (EXCEPT - 94)) | (1L << (EXCEPTION - 94)) | (1L << (EXEC_SQL - 94)) | (1L << (EXECUTE - 94)) | (1L << (EXISTS - 94)) | (1L << (EXIT - 94)) | (1L << (EXPLAIN - 94)) | (1L << (EXTERNAL - 94)) | (1L << (FENCED - 94)) | (1L << (FETCH - 94)) | (1L << (FIELDPROC - 94)) | (1L << (FINAL - 94)) | (1L << (FIRST - 94)) | (1L << (FOR - 94)) | (1L << (FREE - 94)) | (1L << (FROM - 94)) | (1L << (FULL - 94)) | (1L << (FUNCTION - 94)) | (1L << (GENERATED - 94)) | (1L << (GET - 94)) | (1L << (GLOBAL - 94)) | (1L << (GO - 94)) | (1L << (GOTO - 94)) | (1L << (GRANT - 94)) | (1L << (GROUP - 94)) | (1L << (HANDLER - 94)) | (1L << (HAVING - 94)) | (1L << (HOLD - 94)) | (1L << (HOUR - 94)) | (1L << (HOURS - 94)) | (1L << (IF - 94)) | (1L << (IMMEDIATE - 94)) | (1L << (IN - 94)) | (1L << (INCLUSIVE - 94)) | (1L << (INDEX - 94)) | (1L << (INDEXBP - 94)) | (1L << (INHERIT - 94)) | (1L << (INNER - 94)) | (1L << (INOUT - 94)) | (1L << (INSENSITIVE - 94)) | (1L << (INSERT - 94)) | (1L << (INTERSECT - 94)) | (1L << (INTO - 94)) | (1L << (IS - 94)) | (1L << (ISOBID - 94)))) != 0) || ((((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & ((1L << (ITERATE - 158)) | (1L << (JAR - 158)) | (1L << (JOIN - 158)) | (1L << (KEEP - 158)) | (1L << (KEY - 158)) | (1L << (LABEL - 158)) | (1L << (LANGUAGE - 158)) | (1L << (LAST - 158)) | (1L << (LC_CTYPE - 158)) | (1L << (LEAVE - 158)) | (1L << (LEFT - 158)) | (1L << (LIKE - 158)) | (1L << (LIMIT - 158)) | (1L << (LOCAL - 158)) | (1L << (LOCALE - 158)) | (1L << (LOCATOR - 158)) | (1L << (LOCATORS - 158)) | (1L << (LOCK - 158)) | (1L << (LOCKMAX - 158)) | (1L << (LOCKSIZE - 158)) | (1L << (LONG - 158)) | (1L << (LOOP - 158)) | (1L << (MAINTAINED - 158)) | (1L << (MATERIALIZED - 158)) | (1L << (MICROSECOND - 158)) | (1L << (MICROSECONDS - 158)) | (1L << (MODIFIES - 158)) | (1L << (MONTH - 158)) | (1L << (MONTHS - 158)) | (1L << (NEXT - 158)) | (1L << (NEXTVAL - 158)) | (1L << (NO - 158)) | (1L << (NONE - 158)) | (1L << (NOT - 158)) | (1L << (NULL - 158)) | (1L << (NULLS - 158)) | (1L << (NUMPARTS - 158)) | (1L << (OBID - 158)) | (1L << (OF - 158)) | (1L << (OFFSET - 158)) | (1L << (OLD - 158)) | (1L << (ON - 158)) | (1L << (OPEN - 158)) | (1L << (OPTIMIZATION - 158)) | (1L << (OPTIMIZE - 158)) | (1L << (OR - 158)) | (1L << (ORDER - 158)) | (1L << (ORGANIZATION - 158)) | (1L << (OUT - 158)) | (1L << (OUTER - 158)) | (1L << (PACKAGE - 158)) | (1L << (PADDED - 158)) | (1L << (PARAMETER - 158)) | (1L << (PART - 158)) | (1L << (PARTITION - 158)) | (1L << (PARTITIONED - 158)) | (1L << (PARTITIONING - 158)) | (1L << (PATH - 158)) | (1L << (PERIOD - 158)) | (1L << (PIECESIZE - 158)) | (1L << (PLAN - 158)) | (1L << (PRECISION - 158)) | (1L << (PREPARE - 158)))) != 0) || ((((_la - 222)) & ~0x3f) == 0 && ((1L << (_la - 222)) & ((1L << (PREVVAL - 222)) | (1L << (PRIOR - 222)) | (1L << (PRIQTY - 222)) | (1L << (PRIVILEGES - 222)) | (1L << (PROCEDURE - 222)) | (1L << (PROGRAM - 222)) | (1L << (PSID - 222)) | (1L << (PUBLIC - 222)) | (1L << (QUERY - 222)) | (1L << (QUERYNO - 222)) | (1L << (READS - 222)) | (1L << (REFERENCES - 222)) | (1L << (REFRESH - 222)) | (1L << (RELEASE - 222)) | (1L << (RENAME - 222)) | (1L << (REPEAT - 222)) | (1L << (RESIGNAL - 222)) | (1L << (RESTRICT - 222)) | (1L << (RESULT - 222)) | (1L << (RESULT_SET_LOCATOR - 222)) | (1L << (RETURN - 222)) | (1L << (RETURNS - 222)) | (1L << (REVOKE - 222)) | (1L << (RIGHT - 222)) | (1L << (ROLE - 222)) | (1L << (ROLLBACK - 222)) | (1L << (ROLLUP - 222)) | (1L << (ROUND_CEILING - 222)) | (1L << (ROUND_DOWN - 222)) | (1L << (ROUND_FLOOR - 222)) | (1L << (ROUND_HALF_DOWN - 222)) | (1L << (ROUND_HALF_EVEN - 222)) | (1L << (ROUND_HALF_UP - 222)) | (1L << (ROUND_UP - 222)) | (1L << (ROW - 222)) | (1L << (ROWSET - 222)) | (1L << (RUN - 222)) | (1L << (SAVEPOINT - 222)) | (1L << (SCHEMA - 222)) | (1L << (SCRATCHPAD - 222)) | (1L << (SECOND - 222)) | (1L << (SECONDS - 222)) | (1L << (SECQTY - 222)) | (1L << (SECURITY - 222)) | (1L << (SELECT - 222)) | (1L << (SENSITIVE - 222)) | (1L << (SEQUENCE - 222)) | (1L << (SET - 222)) | (1L << (SIGNAL - 222)) | (1L << (SIMPLE - 222)) | (1L << (SOME - 222)) | (1L << (SOURCE - 222)) | (1L << (SPECIFIC - 222)) | (1L << (STANDARD - 222)) | (1L << (STATEMENT - 222)) | (1L << (STATIC - 222)) | (1L << (STAY - 222)) | (1L << (STOGROUP - 222)) | (1L << (STORES - 222)) | (1L << (STYLE - 222)) | (1L << (SUMMARY - 222)) | (1L << (SYNONYM - 222)) | (1L << (SYSDATE - 222)) | (1L << (SYSTEM - 222)))) != 0) || ((((_la - 286)) & ~0x3f) == 0 && ((1L << (_la - 286)) & ((1L << (SYSTIMESTAMP - 286)) | (1L << (TABLE - 286)) | (1L << (TABLESPACE - 286)) | (1L << (THEN - 286)) | (1L << (TO - 286)) | (1L << (TRIGGER - 286)) | (1L << (TRUNCATE - 286)) | (1L << (TYPE - 286)) | (1L << (UNDO - 286)) | (1L << (UNION - 286)) | (1L << (UNIQUE - 286)) | (1L << (UNTIL - 286)) | (1L << (UPDATE - 286)) | (1L << (USING - 286)) | (1L << (VALIDPROC - 286)) | (1L << (VALUE - 286)) | (1L << (VALUES - 286)) | (1L << (VARIABLE - 286)) | (1L << (VARIANT - 286)) | (1L << (VCAT - 286)) | (1L << (VERSIONING - 286)) | (1L << (VIEW - 286)) | (1L << (VOLATILE - 286)) | (1L << (VOLUMES - 286)) | (1L << (WHEN - 286)) | (1L << (WHENEVER - 286)) | (1L << (WHERE - 286)) | (1L << (WHILE - 286)) | (1L << (WITH - 286)) | (1L << (WLM - 286)) | (1L << (XMLCAST - 286)) | (1L << (XMLEXISTS - 286)) | (1L << (XMLNAMESPACES - 286)) | (1L << (YEAR - 286)) | (1L << (YEARS - 286)) | (1L << (ZONE - 286)) | (1L << (AND - 286)) | (1L << (ARRAY_AGG - 286)) | (1L << (ASC - 286)) | (1L << (AVG - 286)) | (1L << (BIT - 286)) | (1L << (CHANGE - 286)) | (1L << (CODEUNITS16 - 286)) | (1L << (CODEUNITS32 - 286)) | (1L << (CORR - 286)) | (1L << (CORRELATION - 286)) | (1L << (COUNT - 286)) | (1L << (COUNT_BIG - 286)) | (1L << (COVAR - 286)) | (1L << (COVARIANCE - 286)) | (1L << (COVARIANCE_SAMP - 286)) | (1L << (COVAR_POP - 286)) | (1L << (COVAR_SAMP - 286)) | (1L << (CS - 286)) | (1L << (CUME_DIST - 286)) | (1L << (DENSE_RANK - 286)) | (1L << (DESC - 286)) | (1L << (EBCDIC - 286)) | (1L << (EXCLUSIVE - 286)) | (1L << (FIRST_VALUE - 286)) | (1L << (FOLLOWING - 286)) | (1L << (GROUPING - 286)) | (1L << (IGNORE - 286)) | (1L << (INDICATOR - 286)))) != 0) || ((((_la - 350)) & ~0x3f) == 0 && ((1L << (_la - 350)) & ((1L << (INPUT - 350)) | (1L << (ISNULL - 350)) | (1L << (LAG - 350)) | (1L << (LARGE - 350)) | (1L << (LAST_VALUE - 350)) | (1L << (LEAD - 350)) | (1L << (LISTAGG - 350)) | (1L << (LOCKED - 350)) | (1L << (LOCKS - 350)) | (1L << (MEDIAN - 350)) | (1L << (MINUTES - 350)) | (1L << (MIXED - 350)) | (1L << (NOTNULL - 350)) | (1L << (NTH_VALUE - 350)) | (1L << (NTILE - 350)) | (1L << (NUMERIC - 350)) | (1L << (OBJECT - 350)) | (1L << (OCTETS - 350)) | (1L << (ONLY - 350)) | (1L << (OVER - 350)) | (1L << (PASSING - 350)) | (1L << (PERCENTILE_CONT - 350)) | (1L << (PERCENTILE_DISC - 350)) | (1L << (PERCENT_RANK - 350)) | (1L << (PRECEDING - 350)) | (1L << (PREVIOUS - 350)) | (1L << (RANGE - 350)) | (1L << (RANK - 350)) | (1L << (RATIO_TO_REPORT - 350)) | (1L << (READ - 350)) | (1L << (REF - 350)) | (1L << (REGR_AVGX - 350)) | (1L << (REGR_AVGY - 350)) | (1L << (REGR_COUNT - 350)) | (1L << (REGR_ICPT - 350)) | (1L << (REGR_INTERCEPT - 350)) | (1L << (REGR_R2 - 350)) | (1L << (REGR_SLOPE - 350)) | (1L << (REGR_SXX - 350)) | (1L << (REGR_SXY - 350)) | (1L << (REGR_SYY - 350)) | (1L << (RESPECT - 350)) | (1L << (ROW_NUMBER - 350)) | (1L << (ROWS - 350)) | (1L << (RR - 350)) | (1L << (RS - 350)) | (1L << (SBCS - 350)) | (1L << (SELECTIVITY - 350)) | (1L << (SETS - 350)) | (1L << (SHARE - 350)) | (1L << (SKIP_ - 350)) | (1L << (STDDEV - 350)) | (1L << (STDDEV_POP - 350)) | (1L << (STDDEV_SAMP - 350)) | (1L << (SUM - 350)) | (1L << (TOKEN - 350)) | (1L << (UNBOUNDED - 350)) | (1L << (UNPACK - 350)) | (1L << (UR - 350)) | (1L << (USE - 350)) | (1L << (VAR - 350)) | (1L << (VARIANCE - 350)) | (1L << (VARIANCE_SAMP - 350)) | (1L << (VAR_POP - 350)))) != 0) || ((((_la - 414)) & ~0x3f) == 0 && ((1L << (_la - 414)) & ((1L << (VAR_SAMP - 414)) | (1L << (VARYING - 414)) | (1L << (WITHOUT - 414)) | (1L << (XML - 414)) | (1L << (XMLAGG - 414)) | (1L << (COLUMNS - 414)) | (1L << (SQLID - 414)) | (1L << (ORDINALITY - 414)) | (1L << (SYSTEM_TIME - 414)) | (1L << (BUSINESS_TIME - 414)) | (1L << (MULTIPLIER - 414)) | (1L << (UNNEST - 414)) | (1L << (CROSS - 414)) | (1L << (CALLER - 414)) | (1L << (CLIENT - 414)) | (1L << (POSITIONING - 414)) | (1L << (SCROLL - 414)) | (1L << (ACTION - 414)) | (1L << (ASSEMBLE - 414)) | (1L << (C_ - 414)) | (1L << (CALLED - 414)) | (1L << (COBOL - 414)) | (1L << (DB2 - 414)) | (1L << (DEFINER - 414)) | (1L << (DISPATCH - 414)) | (1L << (ENVIRONMENT - 414)) | (1L << (FAILURE - 414)) | (1L << (FAILURES - 414)) | (1L << (JAVA - 414)) | (1L << (MAIN - 414)) | (1L << (NAME - 414)) | (1L << (OPTIONS - 414)) | (1L << (PARALLEL - 414)) | (1L << (PLI - 414)) | (1L << (REGISTERS - 414)) | (1L << (RESIDENT - 414)) | (1L << (SECURED - 414)) | (1L << (SPECIAL - 414)) | (1L << (SQL - 414)) | (1L << (STOP - 414)) | (1L << (SUB - 414)) | (1L << (YES - 414)) | (1L << (APPLICATION - 414)) | (1L << (CHANGED - 414)) | (1L << (COMPATIBILITY - 414)) | (1L << (COMPRESS - 414)) | (1L << (COPY - 414)) | (1L << (FREEPAGE - 414)) | (1L << (GBPCACHE - 414)) | (1L << (INCLUDE - 414)) | (1L << (MAXVALUE - 414)) | (1L << (MINVALUE - 414)) | (1L << (PCTFREE - 414)) | (1L << (REGENERATE - 414)) | (1L << (MASK - 414)) | (1L << (ENABLE - 414)) | (1L << (PERMISSION - 414)) | (1L << (ATOMIC - 414)) | (1L << (SQLEXCEPTION - 414)) | (1L << (MERGE - 414)) | (1L << (MATCHED - 414)) | (1L << (SQLSTATE - 414)) | (1L << (MESSAGE_TEXT - 414)) | (1L << (OVERRIDING - 414)))) != 0) || ((((_la - 478)) & ~0x3f) == 0 && ((1L << (_la - 478)) & ((1L << (PORTION - 478)) | (1L << (DB2SQL - 478)) | (1L << (DEBUG - 478)) | (1L << (GENERAL - 478)) | (1L << (MODE_ - 478)) | (1L << (REXX - 478)) | (1L << (CACHE - 478)) | (1L << (CYCLE - 478)) | (1L << (INCREMENT - 478)) | (1L << (RESTART - 478)) | (1L << (DATACLAS - 478)) | (1L << (MGMTCLAS - 478)) | (1L << (REMOVE - 478)) | (1L << (STORCLAS - 478)) | (1L << (ACCESS - 478)) | (1L << (ACTIVATE - 478)) | (1L << (ALWAYS - 478)) | (1L << (APPEND - 478)) | (1L << (ARCHIVE - 478)) | (1L << (BUSINESS - 478)) | (1L << (CASCADE - 478)) | (1L << (CHANGES - 478)) | (1L << (CONTROL - 478)) | (1L << (DEACTIVATE - 478)) | (1L << (DEFERRED - 478)) | (1L << (EACH - 478)) | (1L << (ENFORCED - 478)) | (1L << (EXTRA - 478)) | (1L << (FOREIGN - 478)) | (1L << (HIDDEN_ - 478)) | (1L << (HISTORY - 478)) | (1L << (ID - 478)) | (1L << (IDENTITY - 478)) | (1L << (IMPLICITLY - 478)) | (1L << (INITIALLY - 478)) | (1L << (INLINE - 478)) | (1L << (OPERATION - 478)) | (1L << (ORGANIZE - 478)) | (1L << (OVERLAPS - 478)) | (1L << (PACKAGE_NAME - 478)) | (1L << (PACKAGE_SCHEMA - 478)) | (1L << (PACKAGE_VERSION - 478)) | (1L << (PRIMARY - 478)) | (1L << (RESET - 478)) | (1L << (ROTATE - 478)) | (1L << (START - 478)) | (1L << (SYSIBM - 478)) | (1L << (TRANSACTION - 478)) | (1L << (XMLSCHEMA - 478)) | (1L << (ELEMENT - 478)) | (1L << (URL - 478)) | (1L << (NAMESPACE - 478)) | (1L << (LOCATION - 478)) | (1L << (SYSXSR - 478)) | (1L << (ALGORITHM - 478)) | (1L << (FIXEDLENGTH - 478)) | (1L << (HUFFMAN - 478)) | (1L << (LOB - 478)) | (1L << (LOG - 478)) | (1L << (LOGGED - 478)) | (1L << (MAXPARTITIONS - 478)) | (1L << (MAXROWS - 478)) | (1L << (MEMBER - 478)) | (1L << (MOVE - 478)))) != 0) || ((((_la - 542)) & ~0x3f) == 0 && ((1L << (_la - 542)) & ((1L << (PAGE - 542)) | (1L << (PAGENUM - 542)) | (1L << (PENDING - 542)) | (1L << (RELATIVE - 542)) | (1L << (SEGSIZE - 542)) | (1L << (TRACKMOD - 542)) | (1L << (ADDRESS - 542)) | (1L << (ATTRIBUTES - 542)) | (1L << (AUTHENTICATION - 542)) | (1L << (AUTHID - 542)) | (1L << (CONTEXT - 542)) | (1L << (JOBNAME - 542)) | (1L << (OWNER - 542)) | (1L << (PROFILE - 542)) | (1L << (QUALIFIER - 542)) | (1L << (SERVAUTH - 542)) | (1L << (TRUSTED - 542)) | (1L << (SECTION - 542)) | (1L << (ACTIVE - 542)) | (1L << (VERSION - 542)) | (1L << (ALIAS - 542)) | (1L << (WORK - 542)) | (1L << (WORKFILE - 542)) | (1L << (SYSDEFLT - 542)) | (1L << (NULTERM - 542)) | (1L << (STRUCTURE - 542)) | (1L << (GENERIC - 542)) | (1L << (TEMPORARY - 542)) | (1L << (DEFER - 542)) | (1L << (DEFINE - 542)) | (1L << (EXCLUDE - 542)) | (1L << (GENERATE - 542)) | (1L << (KEYS - 542)) | (1L << (XMLPATTERN - 542)) | (1L << (ABS - 542)) | (1L << (ABSVAL - 542)) | (1L << (ACOS - 542)) | (1L << (ADD_DAYS - 542)) | (1L << (ADD_MONTHS - 542)) | (1L << (ARRAY_DELETE - 542)) | (1L << (ARRAY_FIRST - 542)) | (1L << (ARRAY_LAST - 542)) | (1L << (ARRAY_NEXT - 542)) | (1L << (ARRAY_PRIOR - 542)) | (1L << (ARRAY_TRIM - 542)) | (1L << (ASCII - 542)) | (1L << (ASCII_CHR - 542)) | (1L << (ASCIISTR - 542)) | (1L << (ASCII_STR - 542)) | (1L << (ASIN - 542)) | (1L << (ATAN - 542)) | (1L << (ATAN2 - 542)) | (1L << (ATANH - 542)) | (1L << (BIGINT - 542)) | (1L << (BINARY - 542)) | (1L << (BITAND - 542)) | (1L << (BITANDNOT - 542)) | (1L << (BITNOT - 542)) | (1L << (BITOR - 542)) | (1L << (BITXOR - 542)) | (1L << (BLOB - 542)) | (1L << (BTRIM - 542)) | (1L << (CARDINALITY - 542)) | (1L << (CCSID_ENCODING - 542)))) != 0) || ((((_la - 606)) & ~0x3f) == 0 && ((1L << (_la - 606)) & ((1L << (CEIL - 606)) | (1L << (CEILING - 606)) | (1L << (CHAR9 - 606)) | (1L << (CHARACTER_LENGTH - 606)) | (1L << (CHAR_LENGTH - 606)) | (1L << (CHR - 606)) | (1L << (CLOB - 606)) | (1L << (COALESCE - 606)) | (1L << (COLLATION_KEY - 606)) | (1L << (COMPARE_DECFLOAT - 606)) | (1L << (COS - 606)) | (1L << (COSH - 606)) | (1L << (DATE - 606)) | (1L << (DAYOFMONTH - 606)) | (1L << (DAYOFWEEK - 606)) | (1L << (DAYOFWEEK_ISO - 606)) | (1L << (DAYOFYEAR - 606)) | (1L << (DAYS_BETWEEN - 606)) | (1L << (DBCLOB - 606)) | (1L << (DEC - 606)) | (1L << (DECFLOAT - 606)) | (1L << (DECFLOAT_FORMAT - 606)) | (1L << (DECFLOAT_SORTKEY - 606)) | (1L << (DECIMAL - 606)) | (1L << (DECODE - 606)) | (1L << (DECRYPT_BINARY - 606)) | (1L << (DECRYPT_BIT - 606)) | (1L << (DECRYPT_CHAR - 606)) | (1L << (DECRYPT_DATAKEY_BIGINT - 606)) | (1L << (DECRYPT_DATAKEY_BIT - 606)) | (1L << (DECRYPT_DATAKEY_CLOB - 606)) | (1L << (DECRYPT_DATAKEY_DBCLOB - 606)) | (1L << (DECRYPT_DATAKEY_DECIMAL - 606)) | (1L << (DECRYPT_DATAKEY_INTEGER - 606)) | (1L << (DECRYPT_DATAKEY_VARCHAR - 606)) | (1L << (DECRYPT_DATAKEY_VARGRAPHIC - 606)) | (1L << (DECRYPT_DB - 606)) | (1L << (DEGREES - 606)) | (1L << (DIFFERENCE - 606)) | (1L << (DIGITS - 606)) | (1L << (DOUBLE_PRECISION - 606)) | (1L << (DSN_XMLVALIDATE - 606)) | (1L << (EBCDIC_CHR - 606)) | (1L << (EBCDIC_STR - 606)) | (1L << (ENCRYPT_DATAKEY - 606)) | (1L << (ENCRYPT_TDES - 606)) | (1L << (EXP - 606)) | (1L << (EXTRACT - 606)) | (1L << (FLOAT - 606)) | (1L << (FLOOR - 606)) | (1L << (GENERATE_UNIQUE - 606)) | (1L << (GENERATE_UNIQUE_BINARY - 606)) | (1L << (GETHINT - 606)) | (1L << (GETVARIABLE - 606)) | (1L << (GRAPHIC - 606)) | (1L << (GREATEST - 606)) | (1L << (HASH - 606)) | (1L << (HASH_CRC32 - 606)) | (1L << (HASH_MD5 - 606)) | (1L << (HASH_SHA1 - 606)) | (1L << (HASH_SHA256 - 606)) | (1L << (HEX - 606)) | (1L << (IDENTITY_VAL_LOCAL - 606)) | (1L << (IFNULL - 606)))) != 0) || ((((_la - 670)) & ~0x3f) == 0 && ((1L << (_la - 670)) & ((1L << (INSTR - 670)) | (1L << (INT - 670)) | (1L << (INTEGER - 670)) | (1L << (JULIAN_DAY - 670)) | (1L << (LAST_DAY - 670)) | (1L << (LCASE - 670)) | (1L << (LEAST - 670)) | (1L << (LENGTH - 670)) | (1L << (LN - 670)) | (1L << (LOCATE - 670)) | (1L << (LOCATE_IN_STRING - 670)) | (1L << (LOG10 - 670)) | (1L << (LOWER - 670)) | (1L << (LPAD - 670)) | (1L << (LTRIM - 670)) | (1L << (MAX - 670)) | (1L << (MAX_CARDINALITY - 670)) | (1L << (MIDNIGHT_SECONDS - 670)) | (1L << (MIN - 670)) | (1L << (MINUTE - 670)) | (1L << (MOD - 670)) | (1L << (MONTHS_BETWEEN - 670)) | (1L << (MQREAD - 670)) | (1L << (MQREADCLOB - 670)) | (1L << (MQRECEIVE - 670)) | (1L << (MQRECEIVECLOB - 670)) | (1L << (MQSEND - 670)) | (1L << (MULTIPLY_ALT - 670)) | (1L << (NEXT_DAY - 670)) | (1L << (NEXT_MONTH - 670)) | (1L << (NORMALIZE_DECFLOAT - 670)) | (1L << (NORMALIZE_STRING - 670)) | (1L << (NULLIF - 670)) | (1L << (NVL - 670)) | (1L << (OVERLAY - 670)) | (1L << (PACK - 670)) | (1L << (POSITION - 670)) | (1L << (POSSTR - 670)) | (1L << (POW - 670)) | (1L << (POWER - 670)) | (1L << (QUANTIZE - 670)) | (1L << (QUARTER - 670)) | (1L << (RADIANS - 670)) | (1L << (RAISE_ERROR - 670)) | (1L << (RAND - 670)) | (1L << (RANDOM - 670)) | (1L << (REAL - 670)) | (1L << (REGEXP_COUNT - 670)) | (1L << (REGEXP_INSTR - 670)) | (1L << (REGEXP_LIKE - 670)) | (1L << (REGEXP_REPLACE - 670)) | (1L << (REGEXP_SUBSTR - 670)) | (1L << (REPLACE - 670)) | (1L << (RID - 670)) | (1L << (ROUND - 670)) | (1L << (ROUND_TIMESTAMP - 670)) | (1L << (ROWID - 670)) | (1L << (RPAD - 670)) | (1L << (RTRIM - 670)) | (1L << (SCORE - 670)) | (1L << (SIGN - 670)) | (1L << (SIN - 670)) | (1L << (SINH - 670)) | (1L << (SMALLINT - 670)))) != 0) || ((((_la - 734)) & ~0x3f) == 0 && ((1L << (_la - 734)) & ((1L << (SOAPHTTPC - 734)) | (1L << (SOAPHTTPNC - 734)) | (1L << (SOAPHTTPNV - 734)) | (1L << (SOAPHTTPV - 734)) | (1L << (SOUNDEX - 734)) | (1L << (SPACE - 734)) | (1L << (SQRT - 734)) | (1L << (STRIP - 734)) | (1L << (STRLEFT - 734)) | (1L << (STRPOS - 734)) | (1L << (STRRIGHT - 734)) | (1L << (SUBSTR - 734)) | (1L << (SUBSTRING - 734)) | (1L << (TAN - 734)) | (1L << (TANH - 734)) | (1L << (TIME - 734)) | (1L << (TIMESTAMP - 734)) | (1L << (TIMESTAMPADD - 734)) | (1L << (TIMESTAMPDIFF - 734)) | (1L << (TIMESTAMP_FORMAT - 734)) | (1L << (TIMESTAMP_ISO - 734)) | (1L << (TIMESTAMP_TZ - 734)) | (1L << (TO_CHAR - 734)) | (1L << (TO_CLOB - 734)) | (1L << (TO_DATE - 734)) | (1L << (TO_NUMBER - 734)) | (1L << (TOTALORDER - 734)) | (1L << (TO_TIMESTAMP - 734)) | (1L << (TRANSLATE - 734)) | (1L << (TRIM - 734)) | (1L << (TRIM_ARRAY - 734)) | (1L << (TRUNC - 734)) | (1L << (TRUNC_TIMESTAMP - 734)) | (1L << (UCASE - 734)) | (1L << (UNICODE - 734)) | (1L << (UNICODE_STR - 734)) | (1L << (UNISTR - 734)) | (1L << (UPPER - 734)) | (1L << (VARBINARY - 734)) | (1L << (VARCHAR - 734)) | (1L << (VARCHAR9 - 734)) | (1L << (VARCHAR_BIT_FORMAT - 734)) | (1L << (VARCHAR_FORMAT - 734)) | (1L << (VARGRAPHIC - 734)) | (1L << (VERIFY_GROUP_FOR_USER - 734)) | (1L << (VERIFY_ROLE_FOR_USER - 734)) | (1L << (VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER - 734)) | (1L << (WEEK - 734)) | (1L << (WEEK_ISO - 734)) | (1L << (WRAP - 734)) | (1L << (XMLATTRIBUTES - 734)) | (1L << (XMLCOMMENT - 734)) | (1L << (XMLCONCAT - 734)) | (1L << (XMLDOCUMENT - 734)) | (1L << (XMLELEMENT - 734)) | (1L << (XMLFOREST - 734)) | (1L << (XMLMODIFY - 734)) | (1L << (XMLPARSE - 734)) | (1L << (XMLPI - 734)) | (1L << (XMLQUERY - 734)) | (1L << (XMLSERIALIZE - 734)) | (1L << (XMLTEXT - 734)) | (1L << (XMLXSROBJECTID - 734)) | (1L << (XSLTRANSFORM - 734)))) != 0) || ((((_la - 798)) & ~0x3f) == 0 && ((1L << (_la - 798)) & ((1L << (CURRENT_ACCELERATOR - 798)) | (1L << (CURRENT_APPLICATION_COMPATIBILITY - 798)) | (1L << (CURRENT_APPLICATION_ENCODING_SCHEME - 798)) | (1L << (CURRENT_CLIENT_ACCTNG - 798)) | (1L << (CURRENT_CLIENT_APPLNAME - 798)) | (1L << (CURRENT_CLIENT_CORR_TOKEN - 798)) | (1L << (CURRENT_CLIENT_USERID - 798)) | (1L << (CURRENT_CLIENT_WRKSTNNAME - 798)) | (1L << (CURRENT_DATE - 798)) | (1L << (CURRENT_DEBUG_MODE - 798)) | (1L << (CURRENT_DECFLOAT_ROUNDING_MODE - 798)) | (1L << (CURRENT_DEGREE - 798)) | (1L << (CURRENT_EXPLAIN_MODE - 798)) | (1L << (CURRENT_GET_ACCEL_ARCHIVE - 798)) | (1L << (CURRENT_LOCALE_LC_CTYPE - 798)) | (1L << (CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION - 798)) | (1L << (CURRENT_MEMBER - 798)) | (1L << (CURRENT_OPTIMIZATION_HINT - 798)) | (1L << (CURRENT_PACKAGE_PATH - 798)) | (1L << (CURRENT_PACKAGESET - 798)) | (1L << (CURRENT_PATH - 798)) | (1L << (CURRENT_PRECISION - 798)) | (1L << (CURRENT_QUERY_ACCELERATION - 798)) | (1L << (CURRENT_QUERY_ACCELERATION_WAITFORDATA - 798)) | (1L << (CURRENT_REFRESH_AGE - 798)) | (1L << (CURRENT_ROUTINE_VERSION - 798)) | (1L << (CURRENT_RULES - 798)) | (1L << (CURRENT_SCHEMA - 798)) | (1L << (CURRENT_SERVER - 798)) | (1L << (CURRENT_SQLID - 798)) | (1L << (CURRENT_TEMPORAL_BUSINESS_TIME - 798)) | (1L << (CURRENT_TEMPORAL_SYSTEM_TIME - 798)) | (1L << (CURRENT_TIME - 798)) | (1L << (CURRENT_TIMESTAMP - 798)) | (1L << (CURRENT_TIME_ZONE - 798)) | (1L << (ENCRYPTION_PASSWORD - 798)) | (1L << (SESSION_TIME_ZONE - 798)) | (1L << (SESSION_USER - 798)) | (1L << (USER - 798)) | (1L << (ADMIN_TASK_LIST - 798)) | (1L << (ADMIN_TASK_OUTPUT - 798)) | (1L << (ADMIN_TASK_STATUS - 798)) | (1L << (BLOCKING_THREADS - 798)) | (1L << (MQREADALL - 798)) | (1L << (MQREADALLCLOB - 798)) | (1L << (MQRECEIVEALL - 798)) | (1L << (MQRECEIVEALLCLOB - 798)) | (1L << (XMLTABLE - 798)) | (1L << (SQLIDENTIFIER - 798)))) != 0)) {
				{
				setState(1445);
				parameterDeclaration1();
				setState(1450);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1446);
					match(COMMA);
					setState(1447);
					parameterDeclaration1();
					}
					}
					setState(1452);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(1455);
			match(RPAREN);
			setState(1457); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1456);
				createFunctionStatementExternalTableOptions();
				}
				}
				setState(1459); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 43)) & ~0x3f) == 0 && ((1L << (_la - 43)) & ((1L << (ASUTIME - 43)) | (1L << (COLLID - 43)) | (1L << (CONTAINS - 43)) | (1L << (CONTINUE - 43)) | (1L << (DBINFO - 43)) | (1L << (DEFAULT - 43)) | (1L << (DETERMINISTIC - 43)) | (1L << (DISALLOW - 43)))) != 0) || ((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & ((1L << (EXTERNAL - 120)) | (1L << (FENCED - 120)) | (1L << (FINAL - 120)) | (1L << (INHERIT - 120)) | (1L << (LANGUAGE - 120)))) != 0) || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & ((1L << (NO - 190)) | (1L << (NOT - 190)) | (1L << (NULL - 190)) | (1L << (PACKAGE - 190)) | (1L << (PARAMETER - 190)) | (1L << (PROGRAM - 190)) | (1L << (READS - 190)) | (1L << (RETURNS - 190)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (RUN - 258)) | (1L << (SCRATCHPAD - 258)) | (1L << (SECURITY - 258)) | (1L << (SPECIFIC - 258)) | (1L << (STATIC - 258)) | (1L << (STAY - 258)) | (1L << (VARIANT - 258)) | (1L << (WLM - 258)))) != 0) || ((((_la - 434)) & ~0x3f) == 0 && ((1L << (_la - 434)) & ((1L << (CALLED - 434)) | (1L << (SECURED - 434)) | (1L << (STOP - 434)))) != 0) || _la==CARDINALITY );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFunctionStatementSourcedContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DB2zSQLParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(DB2zSQLParser.FUNCTION, 0); }
		public FunctionNameContext functionName() {
			return getRuleContext(FunctionNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<ParameterDeclaration1Context> parameterDeclaration1() {
			return getRuleContexts(ParameterDeclaration1Context.class);
		}
		public ParameterDeclaration1Context parameterDeclaration1(int i) {
			return getRuleContext(ParameterDeclaration1Context.class,i);
		}
		public List<CreateFunctionStatementSourcedOptionsContext> createFunctionStatementSourcedOptions() {
			return getRuleContexts(CreateFunctionStatementSourcedOptionsContext.class);
		}
		public CreateFunctionStatementSourcedOptionsContext createFunctionStatementSourcedOptions(int i) {
			return getRuleContext(CreateFunctionStatementSourcedOptionsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public CreateFunctionStatementSourcedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunctionStatementSourced; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateFunctionStatementSourced(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateFunctionStatementSourced(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateFunctionStatementSourced(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFunctionStatementSourcedContext createFunctionStatementSourced() throws RecognitionException {
		CreateFunctionStatementSourcedContext _localctx = new CreateFunctionStatementSourcedContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_createFunctionStatementSourced);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1461);
			match(CREATE);
			setState(1462);
			match(FUNCTION);
			setState(1463);
			functionName();
			setState(1464);
			match(LPAREN);
			setState(1473);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & ((1L << (ADD - 30)) | (1L << (AFTER - 30)) | (1L << (ALL - 30)) | (1L << (ALLOCATE - 30)) | (1L << (ALLOW - 30)) | (1L << (ALTER - 30)) | (1L << (ALTERAND - 30)) | (1L << (ANY - 30)) | (1L << (ARRAY - 30)) | (1L << (ARRAY_EXISTS - 30)) | (1L << (AS - 30)) | (1L << (ASENSITIVE - 30)) | (1L << (ASSOCIATE - 30)) | (1L << (ASUTIME - 30)) | (1L << (AT - 30)) | (1L << (AUDIT - 30)) | (1L << (AUX - 30)) | (1L << (AUXILIARY - 30)) | (1L << (BEFORE - 30)) | (1L << (BEGIN - 30)) | (1L << (BETWEEN - 30)) | (1L << (BUFFERPOOL - 30)) | (1L << (BY - 30)) | (1L << (CALL - 30)) | (1L << (CAPTURE - 30)) | (1L << (CASCADED - 30)) | (1L << (CASE - 30)) | (1L << (CAST - 30)) | (1L << (CCSID - 30)) | (1L << (CHAR - 30)) | (1L << (CHARACTER - 30)) | (1L << (CHECK - 30)) | (1L << (CLONE - 30)) | (1L << (CLOSE - 30)) | (1L << (CLUSTER - 30)) | (1L << (COLLECTION - 30)) | (1L << (COLLID - 30)) | (1L << (COLUMN - 30)) | (1L << (COMMENT - 30)) | (1L << (COMMIT - 30)) | (1L << (CONCAT - 30)) | (1L << (CONDITION - 30)) | (1L << (CONNECT - 30)) | (1L << (CONNECTION - 30)) | (1L << (CONSTRAINT - 30)) | (1L << (CONTAINS - 30)) | (1L << (CONTENT - 30)) | (1L << (CONTINUE - 30)) | (1L << (CREATE - 30)) | (1L << (CUBE - 30)) | (1L << (CURRENT - 30)) | (1L << (CURRENT_LC_CTYPE - 30)) | (1L << (CURRVAL - 30)) | (1L << (CURSOR - 30)) | (1L << (DATA - 30)) | (1L << (DATABASE - 30)) | (1L << (DAY - 30)) | (1L << (DAYS - 30)) | (1L << (DBINFO - 30)) | (1L << (DECLARE - 30)) | (1L << (DEFAULT - 30)) | (1L << (DELETE - 30)) | (1L << (DESCRIPTOR - 30)) | (1L << (DETERMINISTIC - 30)))) != 0) || ((((_la - 94)) & ~0x3f) == 0 && ((1L << (_la - 94)) & ((1L << (DISABLE - 94)) | (1L << (DISALLOW - 94)) | (1L << (DISTINCT - 94)) | (1L << (DO - 94)) | (1L << (DOCUMENT - 94)) | (1L << (DOUBLE - 94)) | (1L << (DROP - 94)) | (1L << (DSSIZE - 94)) | (1L << (DYNAMIC - 94)) | (1L << (EDITPROC - 94)) | (1L << (ELSE - 94)) | (1L << (ELSEIF - 94)) | (1L << (ENCODING - 94)) | (1L << (ENCRYPTION - 94)) | (1L << (END - 94)) | (1L << (END_EXEC - 94)) | (1L << (ENDING - 94)) | (1L << (ERASE - 94)) | (1L << (ESCAPE - 94)) | (1L << (EXCEPT - 94)) | (1L << (EXCEPTION - 94)) | (1L << (EXEC_SQL - 94)) | (1L << (EXECUTE - 94)) | (1L << (EXISTS - 94)) | (1L << (EXIT - 94)) | (1L << (EXPLAIN - 94)) | (1L << (EXTERNAL - 94)) | (1L << (FENCED - 94)) | (1L << (FETCH - 94)) | (1L << (FIELDPROC - 94)) | (1L << (FINAL - 94)) | (1L << (FIRST - 94)) | (1L << (FOR - 94)) | (1L << (FREE - 94)) | (1L << (FROM - 94)) | (1L << (FULL - 94)) | (1L << (FUNCTION - 94)) | (1L << (GENERATED - 94)) | (1L << (GET - 94)) | (1L << (GLOBAL - 94)) | (1L << (GO - 94)) | (1L << (GOTO - 94)) | (1L << (GRANT - 94)) | (1L << (GROUP - 94)) | (1L << (HANDLER - 94)) | (1L << (HAVING - 94)) | (1L << (HOLD - 94)) | (1L << (HOUR - 94)) | (1L << (HOURS - 94)) | (1L << (IF - 94)) | (1L << (IMMEDIATE - 94)) | (1L << (IN - 94)) | (1L << (INCLUSIVE - 94)) | (1L << (INDEX - 94)) | (1L << (INDEXBP - 94)) | (1L << (INHERIT - 94)) | (1L << (INNER - 94)) | (1L << (INOUT - 94)) | (1L << (INSENSITIVE - 94)) | (1L << (INSERT - 94)) | (1L << (INTERSECT - 94)) | (1L << (INTO - 94)) | (1L << (IS - 94)) | (1L << (ISOBID - 94)))) != 0) || ((((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & ((1L << (ITERATE - 158)) | (1L << (JAR - 158)) | (1L << (JOIN - 158)) | (1L << (KEEP - 158)) | (1L << (KEY - 158)) | (1L << (LABEL - 158)) | (1L << (LANGUAGE - 158)) | (1L << (LAST - 158)) | (1L << (LC_CTYPE - 158)) | (1L << (LEAVE - 158)) | (1L << (LEFT - 158)) | (1L << (LIKE - 158)) | (1L << (LIMIT - 158)) | (1L << (LOCAL - 158)) | (1L << (LOCALE - 158)) | (1L << (LOCATOR - 158)) | (1L << (LOCATORS - 158)) | (1L << (LOCK - 158)) | (1L << (LOCKMAX - 158)) | (1L << (LOCKSIZE - 158)) | (1L << (LONG - 158)) | (1L << (LOOP - 158)) | (1L << (MAINTAINED - 158)) | (1L << (MATERIALIZED - 158)) | (1L << (MICROSECOND - 158)) | (1L << (MICROSECONDS - 158)) | (1L << (MODIFIES - 158)) | (1L << (MONTH - 158)) | (1L << (MONTHS - 158)) | (1L << (NEXT - 158)) | (1L << (NEXTVAL - 158)) | (1L << (NO - 158)) | (1L << (NONE - 158)) | (1L << (NOT - 158)) | (1L << (NULL - 158)) | (1L << (NULLS - 158)) | (1L << (NUMPARTS - 158)) | (1L << (OBID - 158)) | (1L << (OF - 158)) | (1L << (OFFSET - 158)) | (1L << (OLD - 158)) | (1L << (ON - 158)) | (1L << (OPEN - 158)) | (1L << (OPTIMIZATION - 158)) | (1L << (OPTIMIZE - 158)) | (1L << (OR - 158)) | (1L << (ORDER - 158)) | (1L << (ORGANIZATION - 158)) | (1L << (OUT - 158)) | (1L << (OUTER - 158)) | (1L << (PACKAGE - 158)) | (1L << (PADDED - 158)) | (1L << (PARAMETER - 158)) | (1L << (PART - 158)) | (1L << (PARTITION - 158)) | (1L << (PARTITIONED - 158)) | (1L << (PARTITIONING - 158)) | (1L << (PATH - 158)) | (1L << (PERIOD - 158)) | (1L << (PIECESIZE - 158)) | (1L << (PLAN - 158)) | (1L << (PRECISION - 158)) | (1L << (PREPARE - 158)))) != 0) || ((((_la - 222)) & ~0x3f) == 0 && ((1L << (_la - 222)) & ((1L << (PREVVAL - 222)) | (1L << (PRIOR - 222)) | (1L << (PRIQTY - 222)) | (1L << (PRIVILEGES - 222)) | (1L << (PROCEDURE - 222)) | (1L << (PROGRAM - 222)) | (1L << (PSID - 222)) | (1L << (PUBLIC - 222)) | (1L << (QUERY - 222)) | (1L << (QUERYNO - 222)) | (1L << (READS - 222)) | (1L << (REFERENCES - 222)) | (1L << (REFRESH - 222)) | (1L << (RELEASE - 222)) | (1L << (RENAME - 222)) | (1L << (REPEAT - 222)) | (1L << (RESIGNAL - 222)) | (1L << (RESTRICT - 222)) | (1L << (RESULT - 222)) | (1L << (RESULT_SET_LOCATOR - 222)) | (1L << (RETURN - 222)) | (1L << (RETURNS - 222)) | (1L << (REVOKE - 222)) | (1L << (RIGHT - 222)) | (1L << (ROLE - 222)) | (1L << (ROLLBACK - 222)) | (1L << (ROLLUP - 222)) | (1L << (ROUND_CEILING - 222)) | (1L << (ROUND_DOWN - 222)) | (1L << (ROUND_FLOOR - 222)) | (1L << (ROUND_HALF_DOWN - 222)) | (1L << (ROUND_HALF_EVEN - 222)) | (1L << (ROUND_HALF_UP - 222)) | (1L << (ROUND_UP - 222)) | (1L << (ROW - 222)) | (1L << (ROWSET - 222)) | (1L << (RUN - 222)) | (1L << (SAVEPOINT - 222)) | (1L << (SCHEMA - 222)) | (1L << (SCRATCHPAD - 222)) | (1L << (SECOND - 222)) | (1L << (SECONDS - 222)) | (1L << (SECQTY - 222)) | (1L << (SECURITY - 222)) | (1L << (SELECT - 222)) | (1L << (SENSITIVE - 222)) | (1L << (SEQUENCE - 222)) | (1L << (SET - 222)) | (1L << (SIGNAL - 222)) | (1L << (SIMPLE - 222)) | (1L << (SOME - 222)) | (1L << (SOURCE - 222)) | (1L << (SPECIFIC - 222)) | (1L << (STANDARD - 222)) | (1L << (STATEMENT - 222)) | (1L << (STATIC - 222)) | (1L << (STAY - 222)) | (1L << (STOGROUP - 222)) | (1L << (STORES - 222)) | (1L << (STYLE - 222)) | (1L << (SUMMARY - 222)) | (1L << (SYNONYM - 222)) | (1L << (SYSDATE - 222)) | (1L << (SYSTEM - 222)))) != 0) || ((((_la - 286)) & ~0x3f) == 0 && ((1L << (_la - 286)) & ((1L << (SYSTIMESTAMP - 286)) | (1L << (TABLE - 286)) | (1L << (TABLESPACE - 286)) | (1L << (THEN - 286)) | (1L << (TO - 286)) | (1L << (TRIGGER - 286)) | (1L << (TRUNCATE - 286)) | (1L << (TYPE - 286)) | (1L << (UNDO - 286)) | (1L << (UNION - 286)) | (1L << (UNIQUE - 286)) | (1L << (UNTIL - 286)) | (1L << (UPDATE - 286)) | (1L << (USING - 286)) | (1L << (VALIDPROC - 286)) | (1L << (VALUE - 286)) | (1L << (VALUES - 286)) | (1L << (VARIABLE - 286)) | (1L << (VARIANT - 286)) | (1L << (VCAT - 286)) | (1L << (VERSIONING - 286)) | (1L << (VIEW - 286)) | (1L << (VOLATILE - 286)) | (1L << (VOLUMES - 286)) | (1L << (WHEN - 286)) | (1L << (WHENEVER - 286)) | (1L << (WHERE - 286)) | (1L << (WHILE - 286)) | (1L << (WITH - 286)) | (1L << (WLM - 286)) | (1L << (XMLCAST - 286)) | (1L << (XMLEXISTS - 286)) | (1L << (XMLNAMESPACES - 286)) | (1L << (YEAR - 286)) | (1L << (YEARS - 286)) | (1L << (ZONE - 286)) | (1L << (AND - 286)) | (1L << (ARRAY_AGG - 286)) | (1L << (ASC - 286)) | (1L << (AVG - 286)) | (1L << (BIT - 286)) | (1L << (CHANGE - 286)) | (1L << (CODEUNITS16 - 286)) | (1L << (CODEUNITS32 - 286)) | (1L << (CORR - 286)) | (1L << (CORRELATION - 286)) | (1L << (COUNT - 286)) | (1L << (COUNT_BIG - 286)) | (1L << (COVAR - 286)) | (1L << (COVARIANCE - 286)) | (1L << (COVARIANCE_SAMP - 286)) | (1L << (COVAR_POP - 286)) | (1L << (COVAR_SAMP - 286)) | (1L << (CS - 286)) | (1L << (CUME_DIST - 286)) | (1L << (DENSE_RANK - 286)) | (1L << (DESC - 286)) | (1L << (EBCDIC - 286)) | (1L << (EXCLUSIVE - 286)) | (1L << (FIRST_VALUE - 286)) | (1L << (FOLLOWING - 286)) | (1L << (GROUPING - 286)) | (1L << (IGNORE - 286)) | (1L << (INDICATOR - 286)))) != 0) || ((((_la - 350)) & ~0x3f) == 0 && ((1L << (_la - 350)) & ((1L << (INPUT - 350)) | (1L << (ISNULL - 350)) | (1L << (LAG - 350)) | (1L << (LARGE - 350)) | (1L << (LAST_VALUE - 350)) | (1L << (LEAD - 350)) | (1L << (LISTAGG - 350)) | (1L << (LOCKED - 350)) | (1L << (LOCKS - 350)) | (1L << (MEDIAN - 350)) | (1L << (MINUTES - 350)) | (1L << (MIXED - 350)) | (1L << (NOTNULL - 350)) | (1L << (NTH_VALUE - 350)) | (1L << (NTILE - 350)) | (1L << (NUMERIC - 350)) | (1L << (OBJECT - 350)) | (1L << (OCTETS - 350)) | (1L << (ONLY - 350)) | (1L << (OVER - 350)) | (1L << (PASSING - 350)) | (1L << (PERCENTILE_CONT - 350)) | (1L << (PERCENTILE_DISC - 350)) | (1L << (PERCENT_RANK - 350)) | (1L << (PRECEDING - 350)) | (1L << (PREVIOUS - 350)) | (1L << (RANGE - 350)) | (1L << (RANK - 350)) | (1L << (RATIO_TO_REPORT - 350)) | (1L << (READ - 350)) | (1L << (REF - 350)) | (1L << (REGR_AVGX - 350)) | (1L << (REGR_AVGY - 350)) | (1L << (REGR_COUNT - 350)) | (1L << (REGR_ICPT - 350)) | (1L << (REGR_INTERCEPT - 350)) | (1L << (REGR_R2 - 350)) | (1L << (REGR_SLOPE - 350)) | (1L << (REGR_SXX - 350)) | (1L << (REGR_SXY - 350)) | (1L << (REGR_SYY - 350)) | (1L << (RESPECT - 350)) | (1L << (ROW_NUMBER - 350)) | (1L << (ROWS - 350)) | (1L << (RR - 350)) | (1L << (RS - 350)) | (1L << (SBCS - 350)) | (1L << (SELECTIVITY - 350)) | (1L << (SETS - 350)) | (1L << (SHARE - 350)) | (1L << (SKIP_ - 350)) | (1L << (STDDEV - 350)) | (1L << (STDDEV_POP - 350)) | (1L << (STDDEV_SAMP - 350)) | (1L << (SUM - 350)) | (1L << (TOKEN - 350)) | (1L << (UNBOUNDED - 350)) | (1L << (UNPACK - 350)) | (1L << (UR - 350)) | (1L << (USE - 350)) | (1L << (VAR - 350)) | (1L << (VARIANCE - 350)) | (1L << (VARIANCE_SAMP - 350)) | (1L << (VAR_POP - 350)))) != 0) || ((((_la - 414)) & ~0x3f) == 0 && ((1L << (_la - 414)) & ((1L << (VAR_SAMP - 414)) | (1L << (VARYING - 414)) | (1L << (WITHOUT - 414)) | (1L << (XML - 414)) | (1L << (XMLAGG - 414)) | (1L << (COLUMNS - 414)) | (1L << (SQLID - 414)) | (1L << (ORDINALITY - 414)) | (1L << (SYSTEM_TIME - 414)) | (1L << (BUSINESS_TIME - 414)) | (1L << (MULTIPLIER - 414)) | (1L << (UNNEST - 414)) | (1L << (CROSS - 414)) | (1L << (CALLER - 414)) | (1L << (CLIENT - 414)) | (1L << (POSITIONING - 414)) | (1L << (SCROLL - 414)) | (1L << (ACTION - 414)) | (1L << (ASSEMBLE - 414)) | (1L << (C_ - 414)) | (1L << (CALLED - 414)) | (1L << (COBOL - 414)) | (1L << (DB2 - 414)) | (1L << (DEFINER - 414)) | (1L << (DISPATCH - 414)) | (1L << (ENVIRONMENT - 414)) | (1L << (FAILURE - 414)) | (1L << (FAILURES - 414)) | (1L << (JAVA - 414)) | (1L << (MAIN - 414)) | (1L << (NAME - 414)) | (1L << (OPTIONS - 414)) | (1L << (PARALLEL - 414)) | (1L << (PLI - 414)) | (1L << (REGISTERS - 414)) | (1L << (RESIDENT - 414)) | (1L << (SECURED - 414)) | (1L << (SPECIAL - 414)) | (1L << (SQL - 414)) | (1L << (STOP - 414)) | (1L << (SUB - 414)) | (1L << (YES - 414)) | (1L << (APPLICATION - 414)) | (1L << (CHANGED - 414)) | (1L << (COMPATIBILITY - 414)) | (1L << (COMPRESS - 414)) | (1L << (COPY - 414)) | (1L << (FREEPAGE - 414)) | (1L << (GBPCACHE - 414)) | (1L << (INCLUDE - 414)) | (1L << (MAXVALUE - 414)) | (1L << (MINVALUE - 414)) | (1L << (PCTFREE - 414)) | (1L << (REGENERATE - 414)) | (1L << (MASK - 414)) | (1L << (ENABLE - 414)) | (1L << (PERMISSION - 414)) | (1L << (ATOMIC - 414)) | (1L << (SQLEXCEPTION - 414)) | (1L << (MERGE - 414)) | (1L << (MATCHED - 414)) | (1L << (SQLSTATE - 414)) | (1L << (MESSAGE_TEXT - 414)) | (1L << (OVERRIDING - 414)))) != 0) || ((((_la - 478)) & ~0x3f) == 0 && ((1L << (_la - 478)) & ((1L << (PORTION - 478)) | (1L << (DB2SQL - 478)) | (1L << (DEBUG - 478)) | (1L << (GENERAL - 478)) | (1L << (MODE_ - 478)) | (1L << (REXX - 478)) | (1L << (CACHE - 478)) | (1L << (CYCLE - 478)) | (1L << (INCREMENT - 478)) | (1L << (RESTART - 478)) | (1L << (DATACLAS - 478)) | (1L << (MGMTCLAS - 478)) | (1L << (REMOVE - 478)) | (1L << (STORCLAS - 478)) | (1L << (ACCESS - 478)) | (1L << (ACTIVATE - 478)) | (1L << (ALWAYS - 478)) | (1L << (APPEND - 478)) | (1L << (ARCHIVE - 478)) | (1L << (BUSINESS - 478)) | (1L << (CASCADE - 478)) | (1L << (CHANGES - 478)) | (1L << (CONTROL - 478)) | (1L << (DEACTIVATE - 478)) | (1L << (DEFERRED - 478)) | (1L << (EACH - 478)) | (1L << (ENFORCED - 478)) | (1L << (EXTRA - 478)) | (1L << (FOREIGN - 478)) | (1L << (HIDDEN_ - 478)) | (1L << (HISTORY - 478)) | (1L << (ID - 478)) | (1L << (IDENTITY - 478)) | (1L << (IMPLICITLY - 478)) | (1L << (INITIALLY - 478)) | (1L << (INLINE - 478)) | (1L << (OPERATION - 478)) | (1L << (ORGANIZE - 478)) | (1L << (OVERLAPS - 478)) | (1L << (PACKAGE_NAME - 478)) | (1L << (PACKAGE_SCHEMA - 478)) | (1L << (PACKAGE_VERSION - 478)) | (1L << (PRIMARY - 478)) | (1L << (RESET - 478)) | (1L << (ROTATE - 478)) | (1L << (START - 478)) | (1L << (SYSIBM - 478)) | (1L << (TRANSACTION - 478)) | (1L << (XMLSCHEMA - 478)) | (1L << (ELEMENT - 478)) | (1L << (URL - 478)) | (1L << (NAMESPACE - 478)) | (1L << (LOCATION - 478)) | (1L << (SYSXSR - 478)) | (1L << (ALGORITHM - 478)) | (1L << (FIXEDLENGTH - 478)) | (1L << (HUFFMAN - 478)) | (1L << (LOB - 478)) | (1L << (LOG - 478)) | (1L << (LOGGED - 478)) | (1L << (MAXPARTITIONS - 478)) | (1L << (MAXROWS - 478)) | (1L << (MEMBER - 478)) | (1L << (MOVE - 478)))) != 0) || ((((_la - 542)) & ~0x3f) == 0 && ((1L << (_la - 542)) & ((1L << (PAGE - 542)) | (1L << (PAGENUM - 542)) | (1L << (PENDING - 542)) | (1L << (RELATIVE - 542)) | (1L << (SEGSIZE - 542)) | (1L << (TRACKMOD - 542)) | (1L << (ADDRESS - 542)) | (1L << (ATTRIBUTES - 542)) | (1L << (AUTHENTICATION - 542)) | (1L << (AUTHID - 542)) | (1L << (CONTEXT - 542)) | (1L << (JOBNAME - 542)) | (1L << (OWNER - 542)) | (1L << (PROFILE - 542)) | (1L << (QUALIFIER - 542)) | (1L << (SERVAUTH - 542)) | (1L << (TRUSTED - 542)) | (1L << (SECTION - 542)) | (1L << (ACTIVE - 542)) | (1L << (VERSION - 542)) | (1L << (ALIAS - 542)) | (1L << (WORK - 542)) | (1L << (WORKFILE - 542)) | (1L << (SYSDEFLT - 542)) | (1L << (NULTERM - 542)) | (1L << (STRUCTURE - 542)) | (1L << (GENERIC - 542)) | (1L << (TEMPORARY - 542)) | (1L << (DEFER - 542)) | (1L << (DEFINE - 542)) | (1L << (EXCLUDE - 542)) | (1L << (GENERATE - 542)) | (1L << (KEYS - 542)) | (1L << (XMLPATTERN - 542)) | (1L << (ABS - 542)) | (1L << (ABSVAL - 542)) | (1L << (ACOS - 542)) | (1L << (ADD_DAYS - 542)) | (1L << (ADD_MONTHS - 542)) | (1L << (ARRAY_DELETE - 542)) | (1L << (ARRAY_FIRST - 542)) | (1L << (ARRAY_LAST - 542)) | (1L << (ARRAY_NEXT - 542)) | (1L << (ARRAY_PRIOR - 542)) | (1L << (ARRAY_TRIM - 542)) | (1L << (ASCII - 542)) | (1L << (ASCII_CHR - 542)) | (1L << (ASCIISTR - 542)) | (1L << (ASCII_STR - 542)) | (1L << (ASIN - 542)) | (1L << (ATAN - 542)) | (1L << (ATAN2 - 542)) | (1L << (ATANH - 542)) | (1L << (BIGINT - 542)) | (1L << (BINARY - 542)) | (1L << (BITAND - 542)) | (1L << (BITANDNOT - 542)) | (1L << (BITNOT - 542)) | (1L << (BITOR - 542)) | (1L << (BITXOR - 542)) | (1L << (BLOB - 542)) | (1L << (BTRIM - 542)) | (1L << (CARDINALITY - 542)) | (1L << (CCSID_ENCODING - 542)))) != 0) || ((((_la - 606)) & ~0x3f) == 0 && ((1L << (_la - 606)) & ((1L << (CEIL - 606)) | (1L << (CEILING - 606)) | (1L << (CHAR9 - 606)) | (1L << (CHARACTER_LENGTH - 606)) | (1L << (CHAR_LENGTH - 606)) | (1L << (CHR - 606)) | (1L << (CLOB - 606)) | (1L << (COALESCE - 606)) | (1L << (COLLATION_KEY - 606)) | (1L << (COMPARE_DECFLOAT - 606)) | (1L << (COS - 606)) | (1L << (COSH - 606)) | (1L << (DATE - 606)) | (1L << (DAYOFMONTH - 606)) | (1L << (DAYOFWEEK - 606)) | (1L << (DAYOFWEEK_ISO - 606)) | (1L << (DAYOFYEAR - 606)) | (1L << (DAYS_BETWEEN - 606)) | (1L << (DBCLOB - 606)) | (1L << (DEC - 606)) | (1L << (DECFLOAT - 606)) | (1L << (DECFLOAT_FORMAT - 606)) | (1L << (DECFLOAT_SORTKEY - 606)) | (1L << (DECIMAL - 606)) | (1L << (DECODE - 606)) | (1L << (DECRYPT_BINARY - 606)) | (1L << (DECRYPT_BIT - 606)) | (1L << (DECRYPT_CHAR - 606)) | (1L << (DECRYPT_DATAKEY_BIGINT - 606)) | (1L << (DECRYPT_DATAKEY_BIT - 606)) | (1L << (DECRYPT_DATAKEY_CLOB - 606)) | (1L << (DECRYPT_DATAKEY_DBCLOB - 606)) | (1L << (DECRYPT_DATAKEY_DECIMAL - 606)) | (1L << (DECRYPT_DATAKEY_INTEGER - 606)) | (1L << (DECRYPT_DATAKEY_VARCHAR - 606)) | (1L << (DECRYPT_DATAKEY_VARGRAPHIC - 606)) | (1L << (DECRYPT_DB - 606)) | (1L << (DEGREES - 606)) | (1L << (DIFFERENCE - 606)) | (1L << (DIGITS - 606)) | (1L << (DOUBLE_PRECISION - 606)) | (1L << (DSN_XMLVALIDATE - 606)) | (1L << (EBCDIC_CHR - 606)) | (1L << (EBCDIC_STR - 606)) | (1L << (ENCRYPT_DATAKEY - 606)) | (1L << (ENCRYPT_TDES - 606)) | (1L << (EXP - 606)) | (1L << (EXTRACT - 606)) | (1L << (FLOAT - 606)) | (1L << (FLOOR - 606)) | (1L << (GENERATE_UNIQUE - 606)) | (1L << (GENERATE_UNIQUE_BINARY - 606)) | (1L << (GETHINT - 606)) | (1L << (GETVARIABLE - 606)) | (1L << (GRAPHIC - 606)) | (1L << (GREATEST - 606)) | (1L << (HASH - 606)) | (1L << (HASH_CRC32 - 606)) | (1L << (HASH_MD5 - 606)) | (1L << (HASH_SHA1 - 606)) | (1L << (HASH_SHA256 - 606)) | (1L << (HEX - 606)) | (1L << (IDENTITY_VAL_LOCAL - 606)) | (1L << (IFNULL - 606)))) != 0) || ((((_la - 670)) & ~0x3f) == 0 && ((1L << (_la - 670)) & ((1L << (INSTR - 670)) | (1L << (INT - 670)) | (1L << (INTEGER - 670)) | (1L << (JULIAN_DAY - 670)) | (1L << (LAST_DAY - 670)) | (1L << (LCASE - 670)) | (1L << (LEAST - 670)) | (1L << (LENGTH - 670)) | (1L << (LN - 670)) | (1L << (LOCATE - 670)) | (1L << (LOCATE_IN_STRING - 670)) | (1L << (LOG10 - 670)) | (1L << (LOWER - 670)) | (1L << (LPAD - 670)) | (1L << (LTRIM - 670)) | (1L << (MAX - 670)) | (1L << (MAX_CARDINALITY - 670)) | (1L << (MIDNIGHT_SECONDS - 670)) | (1L << (MIN - 670)) | (1L << (MINUTE - 670)) | (1L << (MOD - 670)) | (1L << (MONTHS_BETWEEN - 670)) | (1L << (MQREAD - 670)) | (1L << (MQREADCLOB - 670)) | (1L << (MQRECEIVE - 670)) | (1L << (MQRECEIVECLOB - 670)) | (1L << (MQSEND - 670)) | (1L << (MULTIPLY_ALT - 670)) | (1L << (NEXT_DAY - 670)) | (1L << (NEXT_MONTH - 670)) | (1L << (NORMALIZE_DECFLOAT - 670)) | (1L << (NORMALIZE_STRING - 670)) | (1L << (NULLIF - 670)) | (1L << (NVL - 670)) | (1L << (OVERLAY - 670)) | (1L << (PACK - 670)) | (1L << (POSITION - 670)) | (1L << (POSSTR - 670)) | (1L << (POW - 670)) | (1L << (POWER - 670)) | (1L << (QUANTIZE - 670)) | (1L << (QUARTER - 670)) | (1L << (RADIANS - 670)) | (1L << (RAISE_ERROR - 670)) | (1L << (RAND - 670)) | (1L << (RANDOM - 670)) | (1L << (REAL - 670)) | (1L << (REGEXP_COUNT - 670)) | (1L << (REGEXP_INSTR - 670)) | (1L << (REGEXP_LIKE - 670)) | (1L << (REGEXP_REPLACE - 670)) | (1L << (REGEXP_SUBSTR - 670)) | (1L << (REPLACE - 670)) | (1L << (RID - 670)) | (1L << (ROUND - 670)) | (1L << (ROUND_TIMESTAMP - 670)) | (1L << (ROWID - 670)) | (1L << (RPAD - 670)) | (1L << (RTRIM - 670)) | (1L << (SCORE - 670)) | (1L << (SIGN - 670)) | (1L << (SIN - 670)) | (1L << (SINH - 670)) | (1L << (SMALLINT - 670)))) != 0) || ((((_la - 734)) & ~0x3f) == 0 && ((1L << (_la - 734)) & ((1L << (SOAPHTTPC - 734)) | (1L << (SOAPHTTPNC - 734)) | (1L << (SOAPHTTPNV - 734)) | (1L << (SOAPHTTPV - 734)) | (1L << (SOUNDEX - 734)) | (1L << (SPACE - 734)) | (1L << (SQRT - 734)) | (1L << (STRIP - 734)) | (1L << (STRLEFT - 734)) | (1L << (STRPOS - 734)) | (1L << (STRRIGHT - 734)) | (1L << (SUBSTR - 734)) | (1L << (SUBSTRING - 734)) | (1L << (TAN - 734)) | (1L << (TANH - 734)) | (1L << (TIME - 734)) | (1L << (TIMESTAMP - 734)) | (1L << (TIMESTAMPADD - 734)) | (1L << (TIMESTAMPDIFF - 734)) | (1L << (TIMESTAMP_FORMAT - 734)) | (1L << (TIMESTAMP_ISO - 734)) | (1L << (TIMESTAMP_TZ - 734)) | (1L << (TO_CHAR - 734)) | (1L << (TO_CLOB - 734)) | (1L << (TO_DATE - 734)) | (1L << (TO_NUMBER - 734)) | (1L << (TOTALORDER - 734)) | (1L << (TO_TIMESTAMP - 734)) | (1L << (TRANSLATE - 734)) | (1L << (TRIM - 734)) | (1L << (TRIM_ARRAY - 734)) | (1L << (TRUNC - 734)) | (1L << (TRUNC_TIMESTAMP - 734)) | (1L << (UCASE - 734)) | (1L << (UNICODE - 734)) | (1L << (UNICODE_STR - 734)) | (1L << (UNISTR - 734)) | (1L << (UPPER - 734)) | (1L << (VARBINARY - 734)) | (1L << (VARCHAR - 734)) | (1L << (VARCHAR9 - 734)) | (1L << (VARCHAR_BIT_FORMAT - 734)) | (1L << (VARCHAR_FORMAT - 734)) | (1L << (VARGRAPHIC - 734)) | (1L << (VERIFY_GROUP_FOR_USER - 734)) | (1L << (VERIFY_ROLE_FOR_USER - 734)) | (1L << (VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER - 734)) | (1L << (WEEK - 734)) | (1L << (WEEK_ISO - 734)) | (1L << (WRAP - 734)) | (1L << (XMLATTRIBUTES - 734)) | (1L << (XMLCOMMENT - 734)) | (1L << (XMLCONCAT - 734)) | (1L << (XMLDOCUMENT - 734)) | (1L << (XMLELEMENT - 734)) | (1L << (XMLFOREST - 734)) | (1L << (XMLMODIFY - 734)) | (1L << (XMLPARSE - 734)) | (1L << (XMLPI - 734)) | (1L << (XMLQUERY - 734)) | (1L << (XMLSERIALIZE - 734)) | (1L << (XMLTEXT - 734)) | (1L << (XMLXSROBJECTID - 734)) | (1L << (XSLTRANSFORM - 734)))) != 0) || ((((_la - 798)) & ~0x3f) == 0 && ((1L << (_la - 798)) & ((1L << (CURRENT_ACCELERATOR - 798)) | (1L << (CURRENT_APPLICATION_COMPATIBILITY - 798)) | (1L << (CURRENT_APPLICATION_ENCODING_SCHEME - 798)) | (1L << (CURRENT_CLIENT_ACCTNG - 798)) | (1L << (CURRENT_CLIENT_APPLNAME - 798)) | (1L << (CURRENT_CLIENT_CORR_TOKEN - 798)) | (1L << (CURRENT_CLIENT_USERID - 798)) | (1L << (CURRENT_CLIENT_WRKSTNNAME - 798)) | (1L << (CURRENT_DATE - 798)) | (1L << (CURRENT_DEBUG_MODE - 798)) | (1L << (CURRENT_DECFLOAT_ROUNDING_MODE - 798)) | (1L << (CURRENT_DEGREE - 798)) | (1L << (CURRENT_EXPLAIN_MODE - 798)) | (1L << (CURRENT_GET_ACCEL_ARCHIVE - 798)) | (1L << (CURRENT_LOCALE_LC_CTYPE - 798)) | (1L << (CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION - 798)) | (1L << (CURRENT_MEMBER - 798)) | (1L << (CURRENT_OPTIMIZATION_HINT - 798)) | (1L << (CURRENT_PACKAGE_PATH - 798)) | (1L << (CURRENT_PACKAGESET - 798)) | (1L << (CURRENT_PATH - 798)) | (1L << (CURRENT_PRECISION - 798)) | (1L << (CURRENT_QUERY_ACCELERATION - 798)) | (1L << (CURRENT_QUERY_ACCELERATION_WAITFORDATA - 798)) | (1L << (CURRENT_REFRESH_AGE - 798)) | (1L << (CURRENT_ROUTINE_VERSION - 798)) | (1L << (CURRENT_RULES - 798)) | (1L << (CURRENT_SCHEMA - 798)) | (1L << (CURRENT_SERVER - 798)) | (1L << (CURRENT_SQLID - 798)) | (1L << (CURRENT_TEMPORAL_BUSINESS_TIME - 798)) | (1L << (CURRENT_TEMPORAL_SYSTEM_TIME - 798)) | (1L << (CURRENT_TIME - 798)) | (1L << (CURRENT_TIMESTAMP - 798)) | (1L << (CURRENT_TIME_ZONE - 798)) | (1L << (ENCRYPTION_PASSWORD - 798)) | (1L << (SESSION_TIME_ZONE - 798)) | (1L << (SESSION_USER - 798)) | (1L << (USER - 798)) | (1L << (ADMIN_TASK_LIST - 798)) | (1L << (ADMIN_TASK_OUTPUT - 798)) | (1L << (ADMIN_TASK_STATUS - 798)) | (1L << (BLOCKING_THREADS - 798)) | (1L << (MQREADALL - 798)) | (1L << (MQREADALLCLOB - 798)) | (1L << (MQRECEIVEALL - 798)) | (1L << (MQRECEIVEALLCLOB - 798)) | (1L << (XMLTABLE - 798)) | (1L << (SQLIDENTIFIER - 798)))) != 0)) {
				{
				setState(1465);
				parameterDeclaration1();
				setState(1470);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1466);
					match(COMMA);
					setState(1467);
					parameterDeclaration1();
					}
					}
					setState(1472);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(1475);
			match(RPAREN);
			setState(1477); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1476);
				createFunctionStatementSourcedOptions();
				}
				}
				setState(1479); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (PARAMETER - 211)) | (1L << (RETURNS - 211)) | (1L << (SOURCE - 211)) | (1L << (SPECIFIC - 211)))) != 0) );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFunctionStatementInlineSqlScalarContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DB2zSQLParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(DB2zSQLParser.FUNCTION, 0); }
		public FunctionNameContext functionName() {
			return getRuleContext(FunctionNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<CreateFunctionStatementInlineSqlScalarOptionsContext> createFunctionStatementInlineSqlScalarOptions() {
			return getRuleContexts(CreateFunctionStatementInlineSqlScalarOptionsContext.class);
		}
		public CreateFunctionStatementInlineSqlScalarOptionsContext createFunctionStatementInlineSqlScalarOptions(int i) {
			return getRuleContext(CreateFunctionStatementInlineSqlScalarOptionsContext.class,i);
		}
		public List<ParameterDeclaration2Context> parameterDeclaration2() {
			return getRuleContexts(ParameterDeclaration2Context.class);
		}
		public ParameterDeclaration2Context parameterDeclaration2(int i) {
			return getRuleContext(ParameterDeclaration2Context.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public CreateFunctionStatementInlineSqlScalarContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunctionStatementInlineSqlScalar; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateFunctionStatementInlineSqlScalar(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateFunctionStatementInlineSqlScalar(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateFunctionStatementInlineSqlScalar(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFunctionStatementInlineSqlScalarContext createFunctionStatementInlineSqlScalar() throws RecognitionException {
		CreateFunctionStatementInlineSqlScalarContext _localctx = new CreateFunctionStatementInlineSqlScalarContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_createFunctionStatementInlineSqlScalar);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1481);
			match(CREATE);
			setState(1482);
			match(FUNCTION);
			setState(1483);
			functionName();
			setState(1484);
			match(LPAREN);
			{
			setState(1493);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & ((1L << (ADD - 30)) | (1L << (AFTER - 30)) | (1L << (ALL - 30)) | (1L << (ALLOCATE - 30)) | (1L << (ALLOW - 30)) | (1L << (ALTER - 30)) | (1L << (ALTERAND - 30)) | (1L << (ANY - 30)) | (1L << (ARRAY - 30)) | (1L << (ARRAY_EXISTS - 30)) | (1L << (AS - 30)) | (1L << (ASENSITIVE - 30)) | (1L << (ASSOCIATE - 30)) | (1L << (ASUTIME - 30)) | (1L << (AT - 30)) | (1L << (AUDIT - 30)) | (1L << (AUX - 30)) | (1L << (AUXILIARY - 30)) | (1L << (BEFORE - 30)) | (1L << (BEGIN - 30)) | (1L << (BETWEEN - 30)) | (1L << (BUFFERPOOL - 30)) | (1L << (BY - 30)) | (1L << (CALL - 30)) | (1L << (CAPTURE - 30)) | (1L << (CASCADED - 30)) | (1L << (CASE - 30)) | (1L << (CAST - 30)) | (1L << (CCSID - 30)) | (1L << (CHAR - 30)) | (1L << (CHARACTER - 30)) | (1L << (CHECK - 30)) | (1L << (CLONE - 30)) | (1L << (CLOSE - 30)) | (1L << (CLUSTER - 30)) | (1L << (COLLECTION - 30)) | (1L << (COLLID - 30)) | (1L << (COLUMN - 30)) | (1L << (COMMENT - 30)) | (1L << (COMMIT - 30)) | (1L << (CONCAT - 30)) | (1L << (CONDITION - 30)) | (1L << (CONNECT - 30)) | (1L << (CONNECTION - 30)) | (1L << (CONSTRAINT - 30)) | (1L << (CONTAINS - 30)) | (1L << (CONTENT - 30)) | (1L << (CONTINUE - 30)) | (1L << (CREATE - 30)) | (1L << (CUBE - 30)) | (1L << (CURRENT - 30)) | (1L << (CURRENT_LC_CTYPE - 30)) | (1L << (CURRVAL - 30)) | (1L << (CURSOR - 30)) | (1L << (DATA - 30)) | (1L << (DATABASE - 30)) | (1L << (DAY - 30)) | (1L << (DAYS - 30)) | (1L << (DBINFO - 30)) | (1L << (DECLARE - 30)) | (1L << (DEFAULT - 30)) | (1L << (DELETE - 30)) | (1L << (DESCRIPTOR - 30)) | (1L << (DETERMINISTIC - 30)))) != 0) || ((((_la - 94)) & ~0x3f) == 0 && ((1L << (_la - 94)) & ((1L << (DISABLE - 94)) | (1L << (DISALLOW - 94)) | (1L << (DISTINCT - 94)) | (1L << (DO - 94)) | (1L << (DOCUMENT - 94)) | (1L << (DOUBLE - 94)) | (1L << (DROP - 94)) | (1L << (DSSIZE - 94)) | (1L << (DYNAMIC - 94)) | (1L << (EDITPROC - 94)) | (1L << (ELSE - 94)) | (1L << (ELSEIF - 94)) | (1L << (ENCODING - 94)) | (1L << (ENCRYPTION - 94)) | (1L << (END - 94)) | (1L << (END_EXEC - 94)) | (1L << (ENDING - 94)) | (1L << (ERASE - 94)) | (1L << (ESCAPE - 94)) | (1L << (EXCEPT - 94)) | (1L << (EXCEPTION - 94)) | (1L << (EXEC_SQL - 94)) | (1L << (EXECUTE - 94)) | (1L << (EXISTS - 94)) | (1L << (EXIT - 94)) | (1L << (EXPLAIN - 94)) | (1L << (EXTERNAL - 94)) | (1L << (FENCED - 94)) | (1L << (FETCH - 94)) | (1L << (FIELDPROC - 94)) | (1L << (FINAL - 94)) | (1L << (FIRST - 94)) | (1L << (FOR - 94)) | (1L << (FREE - 94)) | (1L << (FROM - 94)) | (1L << (FULL - 94)) | (1L << (FUNCTION - 94)) | (1L << (GENERATED - 94)) | (1L << (GET - 94)) | (1L << (GLOBAL - 94)) | (1L << (GO - 94)) | (1L << (GOTO - 94)) | (1L << (GRANT - 94)) | (1L << (GROUP - 94)) | (1L << (HANDLER - 94)) | (1L << (HAVING - 94)) | (1L << (HOLD - 94)) | (1L << (HOUR - 94)) | (1L << (HOURS - 94)) | (1L << (IF - 94)) | (1L << (IMMEDIATE - 94)) | (1L << (IN - 94)) | (1L << (INCLUSIVE - 94)) | (1L << (INDEX - 94)) | (1L << (INDEXBP - 94)) | (1L << (INHERIT - 94)) | (1L << (INNER - 94)) | (1L << (INOUT - 94)) | (1L << (INSENSITIVE - 94)) | (1L << (INSERT - 94)) | (1L << (INTERSECT - 94)) | (1L << (INTO - 94)) | (1L << (IS - 94)) | (1L << (ISOBID - 94)))) != 0) || ((((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & ((1L << (ITERATE - 158)) | (1L << (JAR - 158)) | (1L << (JOIN - 158)) | (1L << (KEEP - 158)) | (1L << (KEY - 158)) | (1L << (LABEL - 158)) | (1L << (LANGUAGE - 158)) | (1L << (LAST - 158)) | (1L << (LC_CTYPE - 158)) | (1L << (LEAVE - 158)) | (1L << (LEFT - 158)) | (1L << (LIKE - 158)) | (1L << (LIMIT - 158)) | (1L << (LOCAL - 158)) | (1L << (LOCALE - 158)) | (1L << (LOCATOR - 158)) | (1L << (LOCATORS - 158)) | (1L << (LOCK - 158)) | (1L << (LOCKMAX - 158)) | (1L << (LOCKSIZE - 158)) | (1L << (LONG - 158)) | (1L << (LOOP - 158)) | (1L << (MAINTAINED - 158)) | (1L << (MATERIALIZED - 158)) | (1L << (MICROSECOND - 158)) | (1L << (MICROSECONDS - 158)) | (1L << (MODIFIES - 158)) | (1L << (MONTH - 158)) | (1L << (MONTHS - 158)) | (1L << (NEXT - 158)) | (1L << (NEXTVAL - 158)) | (1L << (NO - 158)) | (1L << (NONE - 158)) | (1L << (NOT - 158)) | (1L << (NULL - 158)) | (1L << (NULLS - 158)) | (1L << (NUMPARTS - 158)) | (1L << (OBID - 158)) | (1L << (OF - 158)) | (1L << (OFFSET - 158)) | (1L << (OLD - 158)) | (1L << (ON - 158)) | (1L << (OPEN - 158)) | (1L << (OPTIMIZATION - 158)) | (1L << (OPTIMIZE - 158)) | (1L << (OR - 158)) | (1L << (ORDER - 158)) | (1L << (ORGANIZATION - 158)) | (1L << (OUT - 158)) | (1L << (OUTER - 158)) | (1L << (PACKAGE - 158)) | (1L << (PADDED - 158)) | (1L << (PARAMETER - 158)) | (1L << (PART - 158)) | (1L << (PARTITION - 158)) | (1L << (PARTITIONED - 158)) | (1L << (PARTITIONING - 158)) | (1L << (PATH - 158)) | (1L << (PERIOD - 158)) | (1L << (PIECESIZE - 158)) | (1L << (PLAN - 158)) | (1L << (PRECISION - 158)) | (1L << (PREPARE - 158)))) != 0) || ((((_la - 222)) & ~0x3f) == 0 && ((1L << (_la - 222)) & ((1L << (PREVVAL - 222)) | (1L << (PRIOR - 222)) | (1L << (PRIQTY - 222)) | (1L << (PRIVILEGES - 222)) | (1L << (PROCEDURE - 222)) | (1L << (PROGRAM - 222)) | (1L << (PSID - 222)) | (1L << (PUBLIC - 222)) | (1L << (QUERY - 222)) | (1L << (QUERYNO - 222)) | (1L << (READS - 222)) | (1L << (REFERENCES - 222)) | (1L << (REFRESH - 222)) | (1L << (RELEASE - 222)) | (1L << (RENAME - 222)) | (1L << (REPEAT - 222)) | (1L << (RESIGNAL - 222)) | (1L << (RESTRICT - 222)) | (1L << (RESULT - 222)) | (1L << (RESULT_SET_LOCATOR - 222)) | (1L << (RETURN - 222)) | (1L << (RETURNS - 222)) | (1L << (REVOKE - 222)) | (1L << (RIGHT - 222)) | (1L << (ROLE - 222)) | (1L << (ROLLBACK - 222)) | (1L << (ROLLUP - 222)) | (1L << (ROUND_CEILING - 222)) | (1L << (ROUND_DOWN - 222)) | (1L << (ROUND_FLOOR - 222)) | (1L << (ROUND_HALF_DOWN - 222)) | (1L << (ROUND_HALF_EVEN - 222)) | (1L << (ROUND_HALF_UP - 222)) | (1L << (ROUND_UP - 222)) | (1L << (ROW - 222)) | (1L << (ROWSET - 222)) | (1L << (RUN - 222)) | (1L << (SAVEPOINT - 222)) | (1L << (SCHEMA - 222)) | (1L << (SCRATCHPAD - 222)) | (1L << (SECOND - 222)) | (1L << (SECONDS - 222)) | (1L << (SECQTY - 222)) | (1L << (SECURITY - 222)) | (1L << (SELECT - 222)) | (1L << (SENSITIVE - 222)) | (1L << (SEQUENCE - 222)) | (1L << (SET - 222)) | (1L << (SIGNAL - 222)) | (1L << (SIMPLE - 222)) | (1L << (SOME - 222)) | (1L << (SOURCE - 222)) | (1L << (SPECIFIC - 222)) | (1L << (STANDARD - 222)) | (1L << (STATEMENT - 222)) | (1L << (STATIC - 222)) | (1L << (STAY - 222)) | (1L << (STOGROUP - 222)) | (1L << (STORES - 222)) | (1L << (STYLE - 222)) | (1L << (SUMMARY - 222)) | (1L << (SYNONYM - 222)) | (1L << (SYSDATE - 222)) | (1L << (SYSTEM - 222)))) != 0) || ((((_la - 286)) & ~0x3f) == 0 && ((1L << (_la - 286)) & ((1L << (SYSTIMESTAMP - 286)) | (1L << (TABLE - 286)) | (1L << (TABLESPACE - 286)) | (1L << (THEN - 286)) | (1L << (TO - 286)) | (1L << (TRIGGER - 286)) | (1L << (TRUNCATE - 286)) | (1L << (TYPE - 286)) | (1L << (UNDO - 286)) | (1L << (UNION - 286)) | (1L << (UNIQUE - 286)) | (1L << (UNTIL - 286)) | (1L << (UPDATE - 286)) | (1L << (USING - 286)) | (1L << (VALIDPROC - 286)) | (1L << (VALUE - 286)) | (1L << (VALUES - 286)) | (1L << (VARIABLE - 286)) | (1L << (VARIANT - 286)) | (1L << (VCAT - 286)) | (1L << (VERSIONING - 286)) | (1L << (VIEW - 286)) | (1L << (VOLATILE - 286)) | (1L << (VOLUMES - 286)) | (1L << (WHEN - 286)) | (1L << (WHENEVER - 286)) | (1L << (WHERE - 286)) | (1L << (WHILE - 286)) | (1L << (WITH - 286)) | (1L << (WLM - 286)) | (1L << (XMLCAST - 286)) | (1L << (XMLEXISTS - 286)) | (1L << (XMLNAMESPACES - 286)) | (1L << (YEAR - 286)) | (1L << (YEARS - 286)) | (1L << (ZONE - 286)) | (1L << (AND - 286)) | (1L << (ARRAY_AGG - 286)) | (1L << (ASC - 286)) | (1L << (AVG - 286)) | (1L << (BIT - 286)) | (1L << (CHANGE - 286)) | (1L << (CODEUNITS16 - 286)) | (1L << (CODEUNITS32 - 286)) | (1L << (CORR - 286)) | (1L << (CORRELATION - 286)) | (1L << (COUNT - 286)) | (1L << (COUNT_BIG - 286)) | (1L << (COVAR - 286)) | (1L << (COVARIANCE - 286)) | (1L << (COVARIANCE_SAMP - 286)) | (1L << (COVAR_POP - 286)) | (1L << (COVAR_SAMP - 286)) | (1L << (CS - 286)) | (1L << (CUME_DIST - 286)) | (1L << (DENSE_RANK - 286)) | (1L << (DESC - 286)) | (1L << (EBCDIC - 286)) | (1L << (EXCLUSIVE - 286)) | (1L << (FIRST_VALUE - 286)) | (1L << (FOLLOWING - 286)) | (1L << (GROUPING - 286)) | (1L << (IGNORE - 286)) | (1L << (INDICATOR - 286)))) != 0) || ((((_la - 350)) & ~0x3f) == 0 && ((1L << (_la - 350)) & ((1L << (INPUT - 350)) | (1L << (ISNULL - 350)) | (1L << (LAG - 350)) | (1L << (LARGE - 350)) | (1L << (LAST_VALUE - 350)) | (1L << (LEAD - 350)) | (1L << (LISTAGG - 350)) | (1L << (LOCKED - 350)) | (1L << (LOCKS - 350)) | (1L << (MEDIAN - 350)) | (1L << (MINUTES - 350)) | (1L << (MIXED - 350)) | (1L << (NOTNULL - 350)) | (1L << (NTH_VALUE - 350)) | (1L << (NTILE - 350)) | (1L << (NUMERIC - 350)) | (1L << (OBJECT - 350)) | (1L << (OCTETS - 350)) | (1L << (ONLY - 350)) | (1L << (OVER - 350)) | (1L << (PASSING - 350)) | (1L << (PERCENTILE_CONT - 350)) | (1L << (PERCENTILE_DISC - 350)) | (1L << (PERCENT_RANK - 350)) | (1L << (PRECEDING - 350)) | (1L << (PREVIOUS - 350)) | (1L << (RANGE - 350)) | (1L << (RANK - 350)) | (1L << (RATIO_TO_REPORT - 350)) | (1L << (READ - 350)) | (1L << (REF - 350)) | (1L << (REGR_AVGX - 350)) | (1L << (REGR_AVGY - 350)) | (1L << (REGR_COUNT - 350)) | (1L << (REGR_ICPT - 350)) | (1L << (REGR_INTERCEPT - 350)) | (1L << (REGR_R2 - 350)) | (1L << (REGR_SLOPE - 350)) | (1L << (REGR_SXX - 350)) | (1L << (REGR_SXY - 350)) | (1L << (REGR_SYY - 350)) | (1L << (RESPECT - 350)) | (1L << (ROW_NUMBER - 350)) | (1L << (ROWS - 350)) | (1L << (RR - 350)) | (1L << (RS - 350)) | (1L << (SBCS - 350)) | (1L << (SELECTIVITY - 350)) | (1L << (SETS - 350)) | (1L << (SHARE - 350)) | (1L << (SKIP_ - 350)) | (1L << (STDDEV - 350)) | (1L << (STDDEV_POP - 350)) | (1L << (STDDEV_SAMP - 350)) | (1L << (SUM - 350)) | (1L << (TOKEN - 350)) | (1L << (UNBOUNDED - 350)) | (1L << (UNPACK - 350)) | (1L << (UR - 350)) | (1L << (USE - 350)) | (1L << (VAR - 350)) | (1L << (VARIANCE - 350)) | (1L << (VARIANCE_SAMP - 350)) | (1L << (VAR_POP - 350)))) != 0) || ((((_la - 414)) & ~0x3f) == 0 && ((1L << (_la - 414)) & ((1L << (VAR_SAMP - 414)) | (1L << (VARYING - 414)) | (1L << (WITHOUT - 414)) | (1L << (XML - 414)) | (1L << (XMLAGG - 414)) | (1L << (COLUMNS - 414)) | (1L << (SQLID - 414)) | (1L << (ORDINALITY - 414)) | (1L << (SYSTEM_TIME - 414)) | (1L << (BUSINESS_TIME - 414)) | (1L << (MULTIPLIER - 414)) | (1L << (UNNEST - 414)) | (1L << (CROSS - 414)) | (1L << (CALLER - 414)) | (1L << (CLIENT - 414)) | (1L << (POSITIONING - 414)) | (1L << (SCROLL - 414)) | (1L << (ACTION - 414)) | (1L << (ASSEMBLE - 414)) | (1L << (C_ - 414)) | (1L << (CALLED - 414)) | (1L << (COBOL - 414)) | (1L << (DB2 - 414)) | (1L << (DEFINER - 414)) | (1L << (DISPATCH - 414)) | (1L << (ENVIRONMENT - 414)) | (1L << (FAILURE - 414)) | (1L << (FAILURES - 414)) | (1L << (JAVA - 414)) | (1L << (MAIN - 414)) | (1L << (NAME - 414)) | (1L << (OPTIONS - 414)) | (1L << (PARALLEL - 414)) | (1L << (PLI - 414)) | (1L << (REGISTERS - 414)) | (1L << (RESIDENT - 414)) | (1L << (SECURED - 414)) | (1L << (SPECIAL - 414)) | (1L << (SQL - 414)) | (1L << (STOP - 414)) | (1L << (SUB - 414)) | (1L << (YES - 414)) | (1L << (APPLICATION - 414)) | (1L << (CHANGED - 414)) | (1L << (COMPATIBILITY - 414)) | (1L << (COMPRESS - 414)) | (1L << (COPY - 414)) | (1L << (FREEPAGE - 414)) | (1L << (GBPCACHE - 414)) | (1L << (INCLUDE - 414)) | (1L << (MAXVALUE - 414)) | (1L << (MINVALUE - 414)) | (1L << (PCTFREE - 414)) | (1L << (REGENERATE - 414)) | (1L << (MASK - 414)) | (1L << (ENABLE - 414)) | (1L << (PERMISSION - 414)) | (1L << (ATOMIC - 414)) | (1L << (SQLEXCEPTION - 414)) | (1L << (MERGE - 414)) | (1L << (MATCHED - 414)) | (1L << (SQLSTATE - 414)) | (1L << (MESSAGE_TEXT - 414)) | (1L << (OVERRIDING - 414)))) != 0) || ((((_la - 478)) & ~0x3f) == 0 && ((1L << (_la - 478)) & ((1L << (PORTION - 478)) | (1L << (DB2SQL - 478)) | (1L << (DEBUG - 478)) | (1L << (GENERAL - 478)) | (1L << (MODE_ - 478)) | (1L << (REXX - 478)) | (1L << (CACHE - 478)) | (1L << (CYCLE - 478)) | (1L << (INCREMENT - 478)) | (1L << (RESTART - 478)) | (1L << (DATACLAS - 478)) | (1L << (MGMTCLAS - 478)) | (1L << (REMOVE - 478)) | (1L << (STORCLAS - 478)) | (1L << (ACCESS - 478)) | (1L << (ACTIVATE - 478)) | (1L << (ALWAYS - 478)) | (1L << (APPEND - 478)) | (1L << (ARCHIVE - 478)) | (1L << (BUSINESS - 478)) | (1L << (CASCADE - 478)) | (1L << (CHANGES - 478)) | (1L << (CONTROL - 478)) | (1L << (DEACTIVATE - 478)) | (1L << (DEFERRED - 478)) | (1L << (EACH - 478)) | (1L << (ENFORCED - 478)) | (1L << (EXTRA - 478)) | (1L << (FOREIGN - 478)) | (1L << (HIDDEN_ - 478)) | (1L << (HISTORY - 478)) | (1L << (ID - 478)) | (1L << (IDENTITY - 478)) | (1L << (IMPLICITLY - 478)) | (1L << (INITIALLY - 478)) | (1L << (INLINE - 478)) | (1L << (OPERATION - 478)) | (1L << (ORGANIZE - 478)) | (1L << (OVERLAPS - 478)) | (1L << (PACKAGE_NAME - 478)) | (1L << (PACKAGE_SCHEMA - 478)) | (1L << (PACKAGE_VERSION - 478)) | (1L << (PRIMARY - 478)) | (1L << (RESET - 478)) | (1L << (ROTATE - 478)) | (1L << (START - 478)) | (1L << (SYSIBM - 478)) | (1L << (TRANSACTION - 478)) | (1L << (XMLSCHEMA - 478)) | (1L << (ELEMENT - 478)) | (1L << (URL - 478)) | (1L << (NAMESPACE - 478)) | (1L << (LOCATION - 478)) | (1L << (SYSXSR - 478)) | (1L << (ALGORITHM - 478)) | (1L << (FIXEDLENGTH - 478)) | (1L << (HUFFMAN - 478)) | (1L << (LOB - 478)) | (1L << (LOG - 478)) | (1L << (LOGGED - 478)) | (1L << (MAXPARTITIONS - 478)) | (1L << (MAXROWS - 478)) | (1L << (MEMBER - 478)) | (1L << (MOVE - 478)))) != 0) || ((((_la - 542)) & ~0x3f) == 0 && ((1L << (_la - 542)) & ((1L << (PAGE - 542)) | (1L << (PAGENUM - 542)) | (1L << (PENDING - 542)) | (1L << (RELATIVE - 542)) | (1L << (SEGSIZE - 542)) | (1L << (TRACKMOD - 542)) | (1L << (ADDRESS - 542)) | (1L << (ATTRIBUTES - 542)) | (1L << (AUTHENTICATION - 542)) | (1L << (AUTHID - 542)) | (1L << (CONTEXT - 542)) | (1L << (JOBNAME - 542)) | (1L << (OWNER - 542)) | (1L << (PROFILE - 542)) | (1L << (QUALIFIER - 542)) | (1L << (SERVAUTH - 542)) | (1L << (TRUSTED - 542)) | (1L << (SECTION - 542)) | (1L << (ACTIVE - 542)) | (1L << (VERSION - 542)) | (1L << (ALIAS - 542)) | (1L << (WORK - 542)) | (1L << (WORKFILE - 542)) | (1L << (SYSDEFLT - 542)) | (1L << (NULTERM - 542)) | (1L << (STRUCTURE - 542)) | (1L << (GENERIC - 542)) | (1L << (TEMPORARY - 542)) | (1L << (DEFER - 542)) | (1L << (DEFINE - 542)) | (1L << (EXCLUDE - 542)) | (1L << (GENERATE - 542)) | (1L << (KEYS - 542)) | (1L << (XMLPATTERN - 542)) | (1L << (ABS - 542)) | (1L << (ABSVAL - 542)) | (1L << (ACOS - 542)) | (1L << (ADD_DAYS - 542)) | (1L << (ADD_MONTHS - 542)) | (1L << (ARRAY_DELETE - 542)) | (1L << (ARRAY_FIRST - 542)) | (1L << (ARRAY_LAST - 542)) | (1L << (ARRAY_NEXT - 542)) | (1L << (ARRAY_PRIOR - 542)) | (1L << (ARRAY_TRIM - 542)) | (1L << (ASCII - 542)) | (1L << (ASCII_CHR - 542)) | (1L << (ASCIISTR - 542)) | (1L << (ASCII_STR - 542)) | (1L << (ASIN - 542)) | (1L << (ATAN - 542)) | (1L << (ATAN2 - 542)) | (1L << (ATANH - 542)) | (1L << (BIGINT - 542)) | (1L << (BINARY - 542)) | (1L << (BITAND - 542)) | (1L << (BITANDNOT - 542)) | (1L << (BITNOT - 542)) | (1L << (BITOR - 542)) | (1L << (BITXOR - 542)) | (1L << (BLOB - 542)) | (1L << (BTRIM - 542)) | (1L << (CARDINALITY - 542)) | (1L << (CCSID_ENCODING - 542)))) != 0) || ((((_la - 606)) & ~0x3f) == 0 && ((1L << (_la - 606)) & ((1L << (CEIL - 606)) | (1L << (CEILING - 606)) | (1L << (CHAR9 - 606)) | (1L << (CHARACTER_LENGTH - 606)) | (1L << (CHAR_LENGTH - 606)) | (1L << (CHR - 606)) | (1L << (CLOB - 606)) | (1L << (COALESCE - 606)) | (1L << (COLLATION_KEY - 606)) | (1L << (COMPARE_DECFLOAT - 606)) | (1L << (COS - 606)) | (1L << (COSH - 606)) | (1L << (DATE - 606)) | (1L << (DAYOFMONTH - 606)) | (1L << (DAYOFWEEK - 606)) | (1L << (DAYOFWEEK_ISO - 606)) | (1L << (DAYOFYEAR - 606)) | (1L << (DAYS_BETWEEN - 606)) | (1L << (DBCLOB - 606)) | (1L << (DEC - 606)) | (1L << (DECFLOAT - 606)) | (1L << (DECFLOAT_FORMAT - 606)) | (1L << (DECFLOAT_SORTKEY - 606)) | (1L << (DECIMAL - 606)) | (1L << (DECODE - 606)) | (1L << (DECRYPT_BINARY - 606)) | (1L << (DECRYPT_BIT - 606)) | (1L << (DECRYPT_CHAR - 606)) | (1L << (DECRYPT_DATAKEY_BIGINT - 606)) | (1L << (DECRYPT_DATAKEY_BIT - 606)) | (1L << (DECRYPT_DATAKEY_CLOB - 606)) | (1L << (DECRYPT_DATAKEY_DBCLOB - 606)) | (1L << (DECRYPT_DATAKEY_DECIMAL - 606)) | (1L << (DECRYPT_DATAKEY_INTEGER - 606)) | (1L << (DECRYPT_DATAKEY_VARCHAR - 606)) | (1L << (DECRYPT_DATAKEY_VARGRAPHIC - 606)) | (1L << (DECRYPT_DB - 606)) | (1L << (DEGREES - 606)) | (1L << (DIFFERENCE - 606)) | (1L << (DIGITS - 606)) | (1L << (DOUBLE_PRECISION - 606)) | (1L << (DSN_XMLVALIDATE - 606)) | (1L << (EBCDIC_CHR - 606)) | (1L << (EBCDIC_STR - 606)) | (1L << (ENCRYPT_DATAKEY - 606)) | (1L << (ENCRYPT_TDES - 606)) | (1L << (EXP - 606)) | (1L << (EXTRACT - 606)) | (1L << (FLOAT - 606)) | (1L << (FLOOR - 606)) | (1L << (GENERATE_UNIQUE - 606)) | (1L << (GENERATE_UNIQUE_BINARY - 606)) | (1L << (GETHINT - 606)) | (1L << (GETVARIABLE - 606)) | (1L << (GRAPHIC - 606)) | (1L << (GREATEST - 606)) | (1L << (HASH - 606)) | (1L << (HASH_CRC32 - 606)) | (1L << (HASH_MD5 - 606)) | (1L << (HASH_SHA1 - 606)) | (1L << (HASH_SHA256 - 606)) | (1L << (HEX - 606)) | (1L << (IDENTITY_VAL_LOCAL - 606)) | (1L << (IFNULL - 606)))) != 0) || ((((_la - 670)) & ~0x3f) == 0 && ((1L << (_la - 670)) & ((1L << (INSTR - 670)) | (1L << (INT - 670)) | (1L << (INTEGER - 670)) | (1L << (JULIAN_DAY - 670)) | (1L << (LAST_DAY - 670)) | (1L << (LCASE - 670)) | (1L << (LEAST - 670)) | (1L << (LENGTH - 670)) | (1L << (LN - 670)) | (1L << (LOCATE - 670)) | (1L << (LOCATE_IN_STRING - 670)) | (1L << (LOG10 - 670)) | (1L << (LOWER - 670)) | (1L << (LPAD - 670)) | (1L << (LTRIM - 670)) | (1L << (MAX - 670)) | (1L << (MAX_CARDINALITY - 670)) | (1L << (MIDNIGHT_SECONDS - 670)) | (1L << (MIN - 670)) | (1L << (MINUTE - 670)) | (1L << (MOD - 670)) | (1L << (MONTHS_BETWEEN - 670)) | (1L << (MQREAD - 670)) | (1L << (MQREADCLOB - 670)) | (1L << (MQRECEIVE - 670)) | (1L << (MQRECEIVECLOB - 670)) | (1L << (MQSEND - 670)) | (1L << (MULTIPLY_ALT - 670)) | (1L << (NEXT_DAY - 670)) | (1L << (NEXT_MONTH - 670)) | (1L << (NORMALIZE_DECFLOAT - 670)) | (1L << (NORMALIZE_STRING - 670)) | (1L << (NULLIF - 670)) | (1L << (NVL - 670)) | (1L << (OVERLAY - 670)) | (1L << (PACK - 670)) | (1L << (POSITION - 670)) | (1L << (POSSTR - 670)) | (1L << (POW - 670)) | (1L << (POWER - 670)) | (1L << (QUANTIZE - 670)) | (1L << (QUARTER - 670)) | (1L << (RADIANS - 670)) | (1L << (RAISE_ERROR - 670)) | (1L << (RAND - 670)) | (1L << (RANDOM - 670)) | (1L << (REAL - 670)) | (1L << (REGEXP_COUNT - 670)) | (1L << (REGEXP_INSTR - 670)) | (1L << (REGEXP_LIKE - 670)) | (1L << (REGEXP_REPLACE - 670)) | (1L << (REGEXP_SUBSTR - 670)) | (1L << (REPLACE - 670)) | (1L << (RID - 670)) | (1L << (ROUND - 670)) | (1L << (ROUND_TIMESTAMP - 670)) | (1L << (ROWID - 670)) | (1L << (RPAD - 670)) | (1L << (RTRIM - 670)) | (1L << (SCORE - 670)) | (1L << (SIGN - 670)) | (1L << (SIN - 670)) | (1L << (SINH - 670)) | (1L << (SMALLINT - 670)))) != 0) || ((((_la - 734)) & ~0x3f) == 0 && ((1L << (_la - 734)) & ((1L << (SOAPHTTPC - 734)) | (1L << (SOAPHTTPNC - 734)) | (1L << (SOAPHTTPNV - 734)) | (1L << (SOAPHTTPV - 734)) | (1L << (SOUNDEX - 734)) | (1L << (SPACE - 734)) | (1L << (SQRT - 734)) | (1L << (STRIP - 734)) | (1L << (STRLEFT - 734)) | (1L << (STRPOS - 734)) | (1L << (STRRIGHT - 734)) | (1L << (SUBSTR - 734)) | (1L << (SUBSTRING - 734)) | (1L << (TAN - 734)) | (1L << (TANH - 734)) | (1L << (TIME - 734)) | (1L << (TIMESTAMP - 734)) | (1L << (TIMESTAMPADD - 734)) | (1L << (TIMESTAMPDIFF - 734)) | (1L << (TIMESTAMP_FORMAT - 734)) | (1L << (TIMESTAMP_ISO - 734)) | (1L << (TIMESTAMP_TZ - 734)) | (1L << (TO_CHAR - 734)) | (1L << (TO_CLOB - 734)) | (1L << (TO_DATE - 734)) | (1L << (TO_NUMBER - 734)) | (1L << (TOTALORDER - 734)) | (1L << (TO_TIMESTAMP - 734)) | (1L << (TRANSLATE - 734)) | (1L << (TRIM - 734)) | (1L << (TRIM_ARRAY - 734)) | (1L << (TRUNC - 734)) | (1L << (TRUNC_TIMESTAMP - 734)) | (1L << (UCASE - 734)) | (1L << (UNICODE - 734)) | (1L << (UNICODE_STR - 734)) | (1L << (UNISTR - 734)) | (1L << (UPPER - 734)) | (1L << (VARBINARY - 734)) | (1L << (VARCHAR - 734)) | (1L << (VARCHAR9 - 734)) | (1L << (VARCHAR_BIT_FORMAT - 734)) | (1L << (VARCHAR_FORMAT - 734)) | (1L << (VARGRAPHIC - 734)) | (1L << (VERIFY_GROUP_FOR_USER - 734)) | (1L << (VERIFY_ROLE_FOR_USER - 734)) | (1L << (VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER - 734)) | (1L << (WEEK - 734)) | (1L << (WEEK_ISO - 734)) | (1L << (WRAP - 734)) | (1L << (XMLATTRIBUTES - 734)) | (1L << (XMLCOMMENT - 734)) | (1L << (XMLCONCAT - 734)) | (1L << (XMLDOCUMENT - 734)) | (1L << (XMLELEMENT - 734)) | (1L << (XMLFOREST - 734)) | (1L << (XMLMODIFY - 734)) | (1L << (XMLPARSE - 734)) | (1L << (XMLPI - 734)) | (1L << (XMLQUERY - 734)) | (1L << (XMLSERIALIZE - 734)) | (1L << (XMLTEXT - 734)) | (1L << (XMLXSROBJECTID - 734)) | (1L << (XSLTRANSFORM - 734)))) != 0) || ((((_la - 798)) & ~0x3f) == 0 && ((1L << (_la - 798)) & ((1L << (CURRENT_ACCELERATOR - 798)) | (1L << (CURRENT_APPLICATION_COMPATIBILITY - 798)) | (1L << (CURRENT_APPLICATION_ENCODING_SCHEME - 798)) | (1L << (CURRENT_CLIENT_ACCTNG - 798)) | (1L << (CURRENT_CLIENT_APPLNAME - 798)) | (1L << (CURRENT_CLIENT_CORR_TOKEN - 798)) | (1L << (CURRENT_CLIENT_USERID - 798)) | (1L << (CURRENT_CLIENT_WRKSTNNAME - 798)) | (1L << (CURRENT_DATE - 798)) | (1L << (CURRENT_DEBUG_MODE - 798)) | (1L << (CURRENT_DECFLOAT_ROUNDING_MODE - 798)) | (1L << (CURRENT_DEGREE - 798)) | (1L << (CURRENT_EXPLAIN_MODE - 798)) | (1L << (CURRENT_GET_ACCEL_ARCHIVE - 798)) | (1L << (CURRENT_LOCALE_LC_CTYPE - 798)) | (1L << (CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION - 798)) | (1L << (CURRENT_MEMBER - 798)) | (1L << (CURRENT_OPTIMIZATION_HINT - 798)) | (1L << (CURRENT_PACKAGE_PATH - 798)) | (1L << (CURRENT_PACKAGESET - 798)) | (1L << (CURRENT_PATH - 798)) | (1L << (CURRENT_PRECISION - 798)) | (1L << (CURRENT_QUERY_ACCELERATION - 798)) | (1L << (CURRENT_QUERY_ACCELERATION_WAITFORDATA - 798)) | (1L << (CURRENT_REFRESH_AGE - 798)) | (1L << (CURRENT_ROUTINE_VERSION - 798)) | (1L << (CURRENT_RULES - 798)) | (1L << (CURRENT_SCHEMA - 798)) | (1L << (CURRENT_SERVER - 798)) | (1L << (CURRENT_SQLID - 798)) | (1L << (CURRENT_TEMPORAL_BUSINESS_TIME - 798)) | (1L << (CURRENT_TEMPORAL_SYSTEM_TIME - 798)) | (1L << (CURRENT_TIME - 798)) | (1L << (CURRENT_TIMESTAMP - 798)) | (1L << (CURRENT_TIME_ZONE - 798)) | (1L << (ENCRYPTION_PASSWORD - 798)) | (1L << (SESSION_TIME_ZONE - 798)) | (1L << (SESSION_USER - 798)) | (1L << (USER - 798)) | (1L << (ADMIN_TASK_LIST - 798)) | (1L << (ADMIN_TASK_OUTPUT - 798)) | (1L << (ADMIN_TASK_STATUS - 798)) | (1L << (BLOCKING_THREADS - 798)) | (1L << (MQREADALL - 798)) | (1L << (MQREADALLCLOB - 798)) | (1L << (MQRECEIVEALL - 798)) | (1L << (MQRECEIVEALLCLOB - 798)) | (1L << (XMLTABLE - 798)) | (1L << (SQLIDENTIFIER - 798)))) != 0)) {
				{
				setState(1485);
				parameterDeclaration2();
				setState(1490);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1486);
					match(COMMA);
					setState(1487);
					parameterDeclaration2();
					}
					}
					setState(1492);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
			setState(1495);
			match(RPAREN);
			setState(1497); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1496);
				createFunctionStatementInlineSqlScalarOptions();
				}
				}
				setState(1499); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (CONTAINS - 75)) | (1L << (DETERMINISTIC - 75)) | (1L << (EXTERNAL - 75)))) != 0) || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & ((1L << (NO - 190)) | (1L << (NOT - 190)) | (1L << (NULL - 190)) | (1L << (PARAMETER - 190)) | (1L << (READS - 190)) | (1L << (RETURN - 190)) | (1L << (RETURNS - 190)))) != 0) || ((((_la - 274)) & ~0x3f) == 0 && ((1L << (_la - 274)) & ((1L << (SPECIFIC - 274)) | (1L << (STATIC - 274)) | (1L << (VARIANT - 274)))) != 0) || _la==CALLED || _la==SECURED );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateGlobalTemporaryTableStatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DB2zSQLParser.CREATE, 0); }
		public TerminalNode GLOBAL() { return getToken(DB2zSQLParser.GLOBAL, 0); }
		public TerminalNode TEMPORARY() { return getToken(DB2zSQLParser.TEMPORARY, 0); }
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TerminalNode CCSID() { return getToken(DB2zSQLParser.CCSID, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<GlobalTemporaryColumnDefinitionContext> globalTemporaryColumnDefinition() {
			return getRuleContexts(GlobalTemporaryColumnDefinitionContext.class);
		}
		public GlobalTemporaryColumnDefinitionContext globalTemporaryColumnDefinition(int i) {
			return getRuleContext(GlobalTemporaryColumnDefinitionContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode LIKE() { return getToken(DB2zSQLParser.LIKE, 0); }
		public TerminalNode ASCII() { return getToken(DB2zSQLParser.ASCII, 0); }
		public TerminalNode EBCDIC() { return getToken(DB2zSQLParser.EBCDIC, 0); }
		public TerminalNode UNICODE() { return getToken(DB2zSQLParser.UNICODE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public CreateGlobalTemporaryTableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createGlobalTemporaryTableStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateGlobalTemporaryTableStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateGlobalTemporaryTableStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateGlobalTemporaryTableStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateGlobalTemporaryTableStatementContext createGlobalTemporaryTableStatement() throws RecognitionException {
		CreateGlobalTemporaryTableStatementContext _localctx = new CreateGlobalTemporaryTableStatementContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_createGlobalTemporaryTableStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1501);
			match(CREATE);
			setState(1502);
			match(GLOBAL);
			setState(1503);
			match(TEMPORARY);
			setState(1504);
			match(TABLE);
			setState(1505);
			tableName();
			setState(1519);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LPAREN:
				{
				{
				setState(1506);
				match(LPAREN);
				setState(1507);
				globalTemporaryColumnDefinition();
				setState(1512);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1508);
					match(COMMA);
					setState(1509);
					globalTemporaryColumnDefinition();
					}
					}
					setState(1514);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1515);
				match(RPAREN);
				}
				}
				break;
			case LIKE:
				{
				{
				setState(1517);
				match(LIKE);
				setState(1518);
				tableName();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1523);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CCSID) {
				{
				setState(1521);
				match(CCSID);
				setState(1522);
				_la = _input.LA(1);
				if ( !(_la==EBCDIC || _la==ASCII || _la==UNICODE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateIndexStatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DB2zSQLParser.CREATE, 0); }
		public TerminalNode INDEX() { return getToken(DB2zSQLParser.INDEX, 0); }
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public TerminalNode UNIQUE() { return getToken(DB2zSQLParser.UNIQUE, 0); }
		public List<CreateIndexOptionListContext> createIndexOptionList() {
			return getRuleContexts(CreateIndexOptionListContext.class);
		}
		public CreateIndexOptionListContext createIndexOptionList(int i) {
			return getRuleContext(CreateIndexOptionListContext.class,i);
		}
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public AuxTableNameContext auxTableName() {
			return getRuleContext(AuxTableNameContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(DB2zSQLParser.WHERE, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public List<KeyExpressionContext> keyExpression() {
			return getRuleContexts(KeyExpressionContext.class);
		}
		public KeyExpressionContext keyExpression(int i) {
			return getRuleContext(KeyExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public TerminalNode BUSINESS_TIME() { return getToken(DB2zSQLParser.BUSINESS_TIME, 0); }
		public TerminalNode OVERLAPS() { return getToken(DB2zSQLParser.OVERLAPS, 0); }
		public List<TerminalNode> ASC() { return getTokens(DB2zSQLParser.ASC); }
		public TerminalNode ASC(int i) {
			return getToken(DB2zSQLParser.ASC, i);
		}
		public List<TerminalNode> DESC() { return getTokens(DB2zSQLParser.DESC); }
		public TerminalNode DESC(int i) {
			return getToken(DB2zSQLParser.DESC, i);
		}
		public List<TerminalNode> RANDOM() { return getTokens(DB2zSQLParser.RANDOM); }
		public TerminalNode RANDOM(int i) {
			return getToken(DB2zSQLParser.RANDOM, i);
		}
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode WITHOUT() { return getToken(DB2zSQLParser.WITHOUT, 0); }
		public CreateIndexStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createIndexStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateIndexStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateIndexStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateIndexStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateIndexStatementContext createIndexStatement() throws RecognitionException {
		CreateIndexStatementContext _localctx = new CreateIndexStatementContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_createIndexStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1525);
			match(CREATE);
			setState(1532);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNIQUE) {
				{
				setState(1526);
				match(UNIQUE);
				setState(1530);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(1527);
					match(WHERE);
					setState(1528);
					match(NOT);
					setState(1529);
					match(NULL);
					}
				}

				}
			}

			setState(1534);
			match(INDEX);
			setState(1535);
			indexName();
			setState(1536);
			match(ON);
			setState(1568);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,93,_ctx) ) {
			case 1:
				{
				{
				setState(1537);
				tableName();
				setState(1538);
				match(LPAREN);
				setState(1541);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,87,_ctx) ) {
				case 1:
					{
					setState(1539);
					columnName();
					}
					break;
				case 2:
					{
					setState(1540);
					keyExpression();
					}
					break;
				}
				setState(1544);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC || _la==DESC || _la==RANDOM) {
					{
					setState(1543);
					_la = _input.LA(1);
					if ( !(_la==ASC || _la==DESC || _la==RANDOM) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1556);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,91,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1546);
						match(COMMA);
						setState(1549);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,89,_ctx) ) {
						case 1:
							{
							setState(1547);
							columnName();
							}
							break;
						case 2:
							{
							setState(1548);
							keyExpression();
							}
							break;
						}
						setState(1552);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==ASC || _la==DESC || _la==RANDOM) {
							{
							setState(1551);
							_la = _input.LA(1);
							if ( !(_la==ASC || _la==DESC || _la==RANDOM) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
						}

						}
						} 
					}
					setState(1558);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,91,_ctx);
				}
				setState(1563);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1559);
					match(COMMA);
					setState(1560);
					match(BUSINESS_TIME);
					setState(1561);
					_la = _input.LA(1);
					if ( !(_la==WITH || _la==WITHOUT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1562);
					match(OVERLAPS);
					}
				}

				setState(1565);
				match(RPAREN);
				}
				}
				break;
			case 2:
				{
				{
				setState(1567);
				auxTableName();
				}
				}
				break;
			}
			setState(1573);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 51)) & ~0x3f) == 0 && ((1L << (_la - 51)) & ((1L << (BUFFERPOOL - 51)) | (1L << (CLOSE - 51)) | (1L << (CLUSTER - 51)) | (1L << (DSSIZE - 51)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (NOT - 192)) | (1L << (PADDED - 192)) | (1L << (PARTITION - 192)) | (1L << (PARTITIONED - 192)) | (1L << (PIECESIZE - 192)))) != 0) || _la==USING || ((((_la - 459)) & ~0x3f) == 0 && ((1L << (_la - 459)) & ((1L << (COMPRESS - 459)) | (1L << (COPY - 459)) | (1L << (FREEPAGE - 459)) | (1L << (GBPCACHE - 459)) | (1L << (INCLUDE - 459)) | (1L << (PCTFREE - 459)))) != 0) || ((((_la - 570)) & ~0x3f) == 0 && ((1L << (_la - 570)) & ((1L << (DEFER - 570)) | (1L << (DEFINE - 570)) | (1L << (EXCLUDE - 570)) | (1L << (GENERATE - 570)))) != 0)) {
				{
				{
				setState(1570);
				createIndexOptionList();
				}
				}
				setState(1575);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateLobTablespaceStatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DB2zSQLParser.CREATE, 0); }
		public TerminalNode LOB() { return getToken(DB2zSQLParser.LOB, 0); }
		public TerminalNode TABLESPACE() { return getToken(DB2zSQLParser.TABLESPACE, 0); }
		public TablespaceNameContext tablespaceName() {
			return getRuleContext(TablespaceNameContext.class,0);
		}
		public List<CreateLobTablespaceOptionListContext> createLobTablespaceOptionList() {
			return getRuleContexts(CreateLobTablespaceOptionListContext.class);
		}
		public CreateLobTablespaceOptionListContext createLobTablespaceOptionList(int i) {
			return getRuleContext(CreateLobTablespaceOptionListContext.class,i);
		}
		public CreateLobTablespaceStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createLobTablespaceStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateLobTablespaceStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateLobTablespaceStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateLobTablespaceStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateLobTablespaceStatementContext createLobTablespaceStatement() throws RecognitionException {
		CreateLobTablespaceStatementContext _localctx = new CreateLobTablespaceStatementContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_createLobTablespaceStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1576);
			match(CREATE);
			setState(1577);
			match(LOB);
			setState(1578);
			match(TABLESPACE);
			setState(1579);
			tablespaceName();
			setState(1583);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 51)) & ~0x3f) == 0 && ((1L << (_la - 51)) & ((1L << (BUFFERPOOL - 51)) | (1L << (CLOSE - 51)) | (1L << (DSSIZE - 51)))) != 0) || ((((_la - 145)) & ~0x3f) == 0 && ((1L << (_la - 145)) & ((1L << (IN - 145)) | (1L << (LOCKMAX - 145)) | (1L << (LOCKSIZE - 145)) | (1L << (NOT - 145)))) != 0) || _la==USING || _la==COMPRESS || _la==GBPCACHE || ((((_la - 536)) & ~0x3f) == 0 && ((1L << (_la - 536)) & ((1L << (LOG - 536)) | (1L << (LOGGED - 536)) | (1L << (DEFINE - 536)))) != 0)) {
				{
				{
				setState(1580);
				createLobTablespaceOptionList();
				}
				}
				setState(1585);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateMaskStatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DB2zSQLParser.CREATE, 0); }
		public TerminalNode MASK() { return getToken(DB2zSQLParser.MASK, 0); }
		public MaskNameContext maskName() {
			return getRuleContext(MaskNameContext.class,0);
		}
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode COLUMN() { return getToken(DB2zSQLParser.COLUMN, 0); }
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(DB2zSQLParser.RETURN, 0); }
		public CaseExpressionContext caseExpression() {
			return getRuleContext(CaseExpressionContext.class,0);
		}
		public CorrelationNameContext correlationName() {
			return getRuleContext(CorrelationNameContext.class,0);
		}
		public EnableDisableOptionContext enableDisableOption() {
			return getRuleContext(EnableDisableOptionContext.class,0);
		}
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public CreateMaskStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createMaskStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateMaskStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateMaskStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateMaskStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateMaskStatementContext createMaskStatement() throws RecognitionException {
		CreateMaskStatementContext _localctx = new CreateMaskStatementContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_createMaskStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1586);
			match(CREATE);
			setState(1587);
			match(MASK);
			setState(1588);
			maskName();
			setState(1589);
			match(ON);
			setState(1590);
			tableName();
			setState(1595);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,97,_ctx) ) {
			case 1:
				{
				setState(1592);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,96,_ctx) ) {
				case 1:
					{
					setState(1591);
					match(AS);
					}
					break;
				}
				setState(1594);
				correlationName();
				}
				break;
			}
			setState(1597);
			match(FOR);
			setState(1598);
			match(COLUMN);
			setState(1599);
			columnName();
			setState(1600);
			match(RETURN);
			setState(1601);
			caseExpression();
			setState(1603);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISABLE || _la==ENABLE) {
				{
				setState(1602);
				enableDisableOption();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatePermissionStatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DB2zSQLParser.CREATE, 0); }
		public TerminalNode PERMISSION() { return getToken(DB2zSQLParser.PERMISSION, 0); }
		public PermissionNameContext permissionName() {
			return getRuleContext(PermissionNameContext.class,0);
		}
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public List<TerminalNode> FOR() { return getTokens(DB2zSQLParser.FOR); }
		public TerminalNode FOR(int i) {
			return getToken(DB2zSQLParser.FOR, i);
		}
		public TerminalNode ROWS() { return getToken(DB2zSQLParser.ROWS, 0); }
		public TerminalNode WHERE() { return getToken(DB2zSQLParser.WHERE, 0); }
		public SearchConditionContext searchCondition() {
			return getRuleContext(SearchConditionContext.class,0);
		}
		public TerminalNode ENFORCED() { return getToken(DB2zSQLParser.ENFORCED, 0); }
		public TerminalNode ALL() { return getToken(DB2zSQLParser.ALL, 0); }
		public TerminalNode ACCESS() { return getToken(DB2zSQLParser.ACCESS, 0); }
		public CorrelationNameContext correlationName() {
			return getRuleContext(CorrelationNameContext.class,0);
		}
		public EnableDisableOptionContext enableDisableOption() {
			return getRuleContext(EnableDisableOptionContext.class,0);
		}
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public CreatePermissionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createPermissionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreatePermissionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreatePermissionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreatePermissionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatePermissionStatementContext createPermissionStatement() throws RecognitionException {
		CreatePermissionStatementContext _localctx = new CreatePermissionStatementContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_createPermissionStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1605);
			match(CREATE);
			setState(1606);
			match(PERMISSION);
			setState(1607);
			permissionName();
			setState(1608);
			match(ON);
			setState(1609);
			tableName();
			setState(1614);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,100,_ctx) ) {
			case 1:
				{
				setState(1611);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,99,_ctx) ) {
				case 1:
					{
					setState(1610);
					match(AS);
					}
					break;
				}
				setState(1613);
				correlationName();
				}
				break;
			}
			setState(1616);
			match(FOR);
			setState(1617);
			match(ROWS);
			setState(1618);
			match(WHERE);
			setState(1619);
			searchCondition();
			setState(1620);
			match(ENFORCED);
			setState(1621);
			match(FOR);
			setState(1622);
			match(ALL);
			setState(1623);
			match(ACCESS);
			setState(1625);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISABLE || _la==ENABLE) {
				{
				setState(1624);
				enableDisableOption();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateProcedureStatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DB2zSQLParser.CREATE, 0); }
		public TerminalNode PROCEDURE() { return getToken(DB2zSQLParser.PROCEDURE, 0); }
		public ProcedureNameContext procedureName() {
			return getRuleContext(ProcedureNameContext.class,0);
		}
		public TerminalNode OR() { return getToken(DB2zSQLParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(DB2zSQLParser.REPLACE, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ParameterDeclaration3Context> parameterDeclaration3() {
			return getRuleContexts(ParameterDeclaration3Context.class);
		}
		public ParameterDeclaration3Context parameterDeclaration3(int i) {
			return getRuleContext(ParameterDeclaration3Context.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<CreateProcedureOptionListContext> createProcedureOptionList() {
			return getRuleContexts(CreateProcedureOptionListContext.class);
		}
		public CreateProcedureOptionListContext createProcedureOptionList(int i) {
			return getRuleContext(CreateProcedureOptionListContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public CreateProcedureStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createProcedureStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateProcedureStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateProcedureStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateProcedureStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateProcedureStatementContext createProcedureStatement() throws RecognitionException {
		CreateProcedureStatementContext _localctx = new CreateProcedureStatementContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_createProcedureStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1627);
			match(CREATE);
			setState(1630);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1628);
				match(OR);
				setState(1629);
				match(REPLACE);
				}
			}

			setState(1632);
			match(PROCEDURE);
			setState(1633);
			procedureName();
			setState(1645);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LPAREN) {
				{
				setState(1634);
				match(LPAREN);
				setState(1635);
				parameterDeclaration3();
				setState(1640);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1636);
					match(COMMA);
					setState(1637);
					parameterDeclaration3();
					}
					}
					setState(1642);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1643);
				match(RPAREN);
				}
			}

			setState(1648); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1647);
				createProcedureOptionList();
				}
				}
				setState(1650); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (ALLOW - 34)) | (1L << (ASUTIME - 34)) | (1L << (COLLID - 34)) | (1L << (COMMIT - 34)) | (1L << (CONTAINS - 34)) | (1L << (CONTINUE - 34)) | (1L << (DBINFO - 34)) | (1L << (DEFAULT - 34)) | (1L << (DETERMINISTIC - 34)) | (1L << (DISABLE - 34)) | (1L << (DISALLOW - 34)))) != 0) || ((((_la - 102)) & ~0x3f) == 0 && ((1L << (_la - 102)) & ((1L << (DYNAMIC - 102)) | (1L << (EXTERNAL - 102)) | (1L << (FENCED - 102)) | (1L << (INHERIT - 102)) | (1L << (LANGUAGE - 102)))) != 0) || ((((_la - 185)) & ~0x3f) == 0 && ((1L << (_la - 185)) & ((1L << (MODIFIES - 185)) | (1L << (NO - 185)) | (1L << (NOT - 185)) | (1L << (NULL - 185)) | (1L << (PACKAGE - 185)) | (1L << (PARAMETER - 185)) | (1L << (PROGRAM - 185)) | (1L << (READS - 185)) | (1L << (RESULT - 185)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (RUN - 258)) | (1L << (SECURITY - 258)) | (1L << (SPECIFIC - 258)) | (1L << (STAY - 258)) | (1L << (VARIANT - 258)) | (1L << (WLM - 258)))) != 0) || _la==CALLED || _la==STOP );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GlobalTemporaryColumnDefinitionContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public GlobalTemporaryColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_globalTemporaryColumnDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGlobalTemporaryColumnDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGlobalTemporaryColumnDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGlobalTemporaryColumnDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GlobalTemporaryColumnDefinitionContext globalTemporaryColumnDefinition() throws RecognitionException {
		GlobalTemporaryColumnDefinitionContext _localctx = new GlobalTemporaryColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_globalTemporaryColumnDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1652);
			columnName();
			setState(1653);
			dataType();
			setState(1656);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(1654);
				match(NOT);
				setState(1655);
				match(NULL);
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterDeclaration1Context extends ParserRuleContext {
		public ParameterNameContext parameterName() {
			return getRuleContext(ParameterNameContext.class,0);
		}
		public FunctionDataTypeContext functionDataType() {
			return getRuleContext(FunctionDataTypeContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public TerminalNode LIKE() { return getToken(DB2zSQLParser.LIKE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode LOCATOR() { return getToken(DB2zSQLParser.LOCATOR, 0); }
		public ParameterDeclaration1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterDeclaration1; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterParameterDeclaration1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitParameterDeclaration1(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitParameterDeclaration1(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParameterDeclaration1Context parameterDeclaration1() throws RecognitionException {
		ParameterDeclaration1Context _localctx = new ParameterDeclaration1Context(_ctx, getState());
		enterRule(_localctx, 98, RULE_parameterDeclaration1);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1659);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,107,_ctx) ) {
			case 1:
				{
				setState(1658);
				parameterName();
				}
				break;
			}
			setState(1673);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,110,_ctx) ) {
			case 1:
				{
				{
				setState(1661);
				functionDataType();
				setState(1664);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(1662);
					match(AS);
					setState(1663);
					match(LOCATOR);
					}
				}

				}
				}
				break;
			case 2:
				{
				{
				setState(1666);
				match(TABLE);
				setState(1667);
				match(LIKE);
				setState(1668);
				tableName();
				setState(1671);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(1669);
					match(AS);
					setState(1670);
					match(LOCATOR);
					}
				}

				}
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterDeclaration2Context extends ParserRuleContext {
		public ParameterNameContext parameterName() {
			return getRuleContext(ParameterNameContext.class,0);
		}
		public FunctionDataTypeContext functionDataType() {
			return getRuleContext(FunctionDataTypeContext.class,0);
		}
		public ParameterDeclaration2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterDeclaration2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterParameterDeclaration2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitParameterDeclaration2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitParameterDeclaration2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParameterDeclaration2Context parameterDeclaration2() throws RecognitionException {
		ParameterDeclaration2Context _localctx = new ParameterDeclaration2Context(_ctx, getState());
		enterRule(_localctx, 100, RULE_parameterDeclaration2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1675);
			parameterName();
			setState(1676);
			functionDataType();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterDeclaration3Context extends ParserRuleContext {
		public ProcedureDataTypeContext procedureDataType() {
			return getRuleContext(ProcedureDataTypeContext.class,0);
		}
		public ParameterNameContext parameterName() {
			return getRuleContext(ParameterNameContext.class,0);
		}
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode LOCATOR() { return getToken(DB2zSQLParser.LOCATOR, 0); }
		public TerminalNode IN() { return getToken(DB2zSQLParser.IN, 0); }
		public TerminalNode OUT() { return getToken(DB2zSQLParser.OUT, 0); }
		public TerminalNode INOUT() { return getToken(DB2zSQLParser.INOUT, 0); }
		public ParameterDeclaration3Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterDeclaration3; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterParameterDeclaration3(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitParameterDeclaration3(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitParameterDeclaration3(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParameterDeclaration3Context parameterDeclaration3() throws RecognitionException {
		ParameterDeclaration3Context _localctx = new ParameterDeclaration3Context(_ctx, getState());
		enterRule(_localctx, 102, RULE_parameterDeclaration3);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1679);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,111,_ctx) ) {
			case 1:
				{
				setState(1678);
				_la = _input.LA(1);
				if ( !(((((_la - 145)) & ~0x3f) == 0 && ((1L << (_la - 145)) & ((1L << (IN - 145)) | (1L << (INOUT - 145)) | (1L << (OUT - 145)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(1682);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,112,_ctx) ) {
			case 1:
				{
				setState(1681);
				parameterName();
				}
				break;
			}
			setState(1684);
			procedureDataType();
			setState(1687);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(1685);
				match(AS);
				setState(1686);
				match(LOCATOR);
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFunctionStatementExternalScalarOptionsContext extends ParserRuleContext {
		public ExternalNameOption1Context externalNameOption1() {
			return getRuleContext(ExternalNameOption1Context.class,0);
		}
		public LanguageOption3Context languageOption3() {
			return getRuleContext(LanguageOption3Context.class,0);
		}
		public ParameterStyleOption2Context parameterStyleOption2() {
			return getRuleContext(ParameterStyleOption2Context.class,0);
		}
		public DeterministicOptionContext deterministicOption() {
			return getRuleContext(DeterministicOptionContext.class,0);
		}
		public FencedOptionContext fencedOption() {
			return getRuleContext(FencedOptionContext.class,0);
		}
		public NullInputOption1Context nullInputOption1() {
			return getRuleContext(NullInputOption1Context.class,0);
		}
		public SqlDataOption3Context sqlDataOption3() {
			return getRuleContext(SqlDataOption3Context.class,0);
		}
		public ExternalActionOptionContext externalActionOption() {
			return getRuleContext(ExternalActionOptionContext.class,0);
		}
		public PackagePathOptionContext packagePathOption() {
			return getRuleContext(PackagePathOptionContext.class,0);
		}
		public ScratchpadOptionContext scratchpadOption() {
			return getRuleContext(ScratchpadOptionContext.class,0);
		}
		public FinalCallOptionContext finalCallOption() {
			return getRuleContext(FinalCallOptionContext.class,0);
		}
		public ParallelOption2Context parallelOption2() {
			return getRuleContext(ParallelOption2Context.class,0);
		}
		public DbinfoOptionContext dbinfoOption() {
			return getRuleContext(DbinfoOptionContext.class,0);
		}
		public CardinalityOptionContext cardinalityOption() {
			return getRuleContext(CardinalityOptionContext.class,0);
		}
		public CollectionIdOptionContext collectionIdOption() {
			return getRuleContext(CollectionIdOptionContext.class,0);
		}
		public WlmEnvironmentOption1Context wlmEnvironmentOption1() {
			return getRuleContext(WlmEnvironmentOption1Context.class,0);
		}
		public AsuTimeOptionContext asuTimeOption() {
			return getRuleContext(AsuTimeOptionContext.class,0);
		}
		public StayResidentOptionContext stayResidentOption() {
			return getRuleContext(StayResidentOptionContext.class,0);
		}
		public ProgramTypeOptionContext programTypeOption() {
			return getRuleContext(ProgramTypeOptionContext.class,0);
		}
		public SecurityOptionContext securityOption() {
			return getRuleContext(SecurityOptionContext.class,0);
		}
		public StopAfterFailureOptionContext stopAfterFailureOption() {
			return getRuleContext(StopAfterFailureOptionContext.class,0);
		}
		public RunOptionsOptionContext runOptionsOption() {
			return getRuleContext(RunOptionsOptionContext.class,0);
		}
		public SpecialRegistersOptionContext specialRegistersOption() {
			return getRuleContext(SpecialRegistersOptionContext.class,0);
		}
		public DispatchOptionContext dispatchOption() {
			return getRuleContext(DispatchOptionContext.class,0);
		}
		public SecuredOptionContext securedOption() {
			return getRuleContext(SecuredOptionContext.class,0);
		}
		public SpecificNameOption1Context specificNameOption1() {
			return getRuleContext(SpecificNameOption1Context.class,0);
		}
		public ParameterOption1Context parameterOption1() {
			return getRuleContext(ParameterOption1Context.class,0);
		}
		public TerminalNode RETURNS() { return getToken(DB2zSQLParser.RETURNS, 0); }
		public List<DataTypeContext> dataType() {
			return getRuleContexts(DataTypeContext.class);
		}
		public DataTypeContext dataType(int i) {
			return getRuleContext(DataTypeContext.class,i);
		}
		public TerminalNode CAST() { return getToken(DB2zSQLParser.CAST, 0); }
		public TerminalNode FROM() { return getToken(DB2zSQLParser.FROM, 0); }
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode LOCATOR() { return getToken(DB2zSQLParser.LOCATOR, 0); }
		public CreateFunctionStatementExternalScalarOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunctionStatementExternalScalarOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateFunctionStatementExternalScalarOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateFunctionStatementExternalScalarOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateFunctionStatementExternalScalarOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFunctionStatementExternalScalarOptionsContext createFunctionStatementExternalScalarOptions() throws RecognitionException {
		CreateFunctionStatementExternalScalarOptionsContext _localctx = new CreateFunctionStatementExternalScalarOptionsContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_createFunctionStatementExternalScalarOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1732);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,117,_ctx) ) {
			case 1:
				{
				{
				setState(1689);
				match(RETURNS);
				setState(1703);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,116,_ctx) ) {
				case 1:
					{
					{
					setState(1690);
					dataType();
					setState(1693);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(1691);
						match(AS);
						setState(1692);
						match(LOCATOR);
						}
					}

					}
					}
					break;
				case 2:
					{
					{
					setState(1695);
					dataType();
					setState(1696);
					match(CAST);
					setState(1697);
					match(FROM);
					setState(1698);
					dataType();
					setState(1701);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(1699);
						match(AS);
						setState(1700);
						match(LOCATOR);
						}
					}

					}
					}
					break;
				}
				}
				}
				break;
			case 2:
				{
				setState(1705);
				externalNameOption1();
				}
				break;
			case 3:
				{
				setState(1706);
				languageOption3();
				}
				break;
			case 4:
				{
				setState(1707);
				parameterStyleOption2();
				}
				break;
			case 5:
				{
				setState(1708);
				deterministicOption();
				}
				break;
			case 6:
				{
				setState(1709);
				fencedOption();
				}
				break;
			case 7:
				{
				setState(1710);
				nullInputOption1();
				}
				break;
			case 8:
				{
				setState(1711);
				sqlDataOption3();
				}
				break;
			case 9:
				{
				setState(1712);
				externalActionOption();
				}
				break;
			case 10:
				{
				setState(1713);
				packagePathOption();
				}
				break;
			case 11:
				{
				setState(1714);
				scratchpadOption();
				}
				break;
			case 12:
				{
				setState(1715);
				finalCallOption();
				}
				break;
			case 13:
				{
				setState(1716);
				parallelOption2();
				}
				break;
			case 14:
				{
				setState(1717);
				dbinfoOption();
				}
				break;
			case 15:
				{
				setState(1718);
				cardinalityOption();
				}
				break;
			case 16:
				{
				setState(1719);
				collectionIdOption();
				}
				break;
			case 17:
				{
				setState(1720);
				wlmEnvironmentOption1();
				}
				break;
			case 18:
				{
				setState(1721);
				asuTimeOption();
				}
				break;
			case 19:
				{
				setState(1722);
				stayResidentOption();
				}
				break;
			case 20:
				{
				setState(1723);
				programTypeOption();
				}
				break;
			case 21:
				{
				setState(1724);
				securityOption();
				}
				break;
			case 22:
				{
				setState(1725);
				stopAfterFailureOption();
				}
				break;
			case 23:
				{
				setState(1726);
				runOptionsOption();
				}
				break;
			case 24:
				{
				setState(1727);
				specialRegistersOption();
				}
				break;
			case 25:
				{
				setState(1728);
				dispatchOption();
				}
				break;
			case 26:
				{
				setState(1729);
				securedOption();
				}
				break;
			case 27:
				{
				setState(1730);
				specificNameOption1();
				}
				break;
			case 28:
				{
				setState(1731);
				parameterOption1();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExternalNameOption1Context extends ParserRuleContext {
		public TerminalNode EXTERNAL() { return getToken(DB2zSQLParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(DB2zSQLParser.NAME, 0); }
		public ExternalProgramNameContext externalProgramName() {
			return getRuleContext(ExternalProgramNameContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ExternalNameOption1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_externalNameOption1; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterExternalNameOption1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitExternalNameOption1(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitExternalNameOption1(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExternalNameOption1Context externalNameOption1() throws RecognitionException {
		ExternalNameOption1Context _localctx = new ExternalNameOption1Context(_ctx, getState());
		enterRule(_localctx, 106, RULE_externalNameOption1);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1734);
			match(EXTERNAL);
			setState(1740);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NAME) {
				{
				setState(1735);
				match(NAME);
				setState(1738);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,118,_ctx) ) {
				case 1:
					{
					setState(1736);
					externalProgramName();
					}
					break;
				case 2:
					{
					setState(1737);
					identifier();
					}
					break;
				}
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExternalNameOption2Context extends ParserRuleContext {
		public TerminalNode EXTERNAL() { return getToken(DB2zSQLParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(DB2zSQLParser.NAME, 0); }
		public ExternalProgramNameContext externalProgramName() {
			return getRuleContext(ExternalProgramNameContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ExternalNameOption2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_externalNameOption2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterExternalNameOption2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitExternalNameOption2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitExternalNameOption2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExternalNameOption2Context externalNameOption2() throws RecognitionException {
		ExternalNameOption2Context _localctx = new ExternalNameOption2Context(_ctx, getState());
		enterRule(_localctx, 108, RULE_externalNameOption2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1742);
			match(EXTERNAL);
			setState(1743);
			match(NAME);
			setState(1746);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,120,_ctx) ) {
			case 1:
				{
				setState(1744);
				externalProgramName();
				}
				break;
			case 2:
				{
				setState(1745);
				identifier();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DynamicResultSetOptionContext extends ParserRuleContext {
		public TerminalNode RESULT() { return getToken(DB2zSQLParser.RESULT, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public TerminalNode SETS() { return getToken(DB2zSQLParser.SETS, 0); }
		public TerminalNode DYNAMIC() { return getToken(DB2zSQLParser.DYNAMIC, 0); }
		public DynamicResultSetOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dynamicResultSetOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDynamicResultSetOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDynamicResultSetOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDynamicResultSetOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DynamicResultSetOptionContext dynamicResultSetOption() throws RecognitionException {
		DynamicResultSetOptionContext _localctx = new DynamicResultSetOptionContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_dynamicResultSetOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1749);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DYNAMIC) {
				{
				setState(1748);
				match(DYNAMIC);
				}
			}

			setState(1751);
			match(RESULT);
			setState(1752);
			_la = _input.LA(1);
			if ( !(_la==SET || _la==SETS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1753);
			match(INTEGERLITERAL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LanguageOption1Context extends ParserRuleContext {
		public TerminalNode LANGUAGE() { return getToken(DB2zSQLParser.LANGUAGE, 0); }
		public TerminalNode SQL() { return getToken(DB2zSQLParser.SQL, 0); }
		public LanguageOption1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_languageOption1; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterLanguageOption1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitLanguageOption1(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitLanguageOption1(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LanguageOption1Context languageOption1() throws RecognitionException {
		LanguageOption1Context _localctx = new LanguageOption1Context(_ctx, getState());
		enterRule(_localctx, 112, RULE_languageOption1);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1755);
			match(LANGUAGE);
			setState(1756);
			match(SQL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LanguageOption2Context extends ParserRuleContext {
		public TerminalNode LANGUAGE() { return getToken(DB2zSQLParser.LANGUAGE, 0); }
		public TerminalNode ASSEMBLE() { return getToken(DB2zSQLParser.ASSEMBLE, 0); }
		public TerminalNode C_() { return getToken(DB2zSQLParser.C_, 0); }
		public TerminalNode COBOL() { return getToken(DB2zSQLParser.COBOL, 0); }
		public TerminalNode PLI() { return getToken(DB2zSQLParser.PLI, 0); }
		public LanguageOption2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_languageOption2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterLanguageOption2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitLanguageOption2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitLanguageOption2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LanguageOption2Context languageOption2() throws RecognitionException {
		LanguageOption2Context _localctx = new LanguageOption2Context(_ctx, getState());
		enterRule(_localctx, 114, RULE_languageOption2);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1758);
			match(LANGUAGE);
			setState(1759);
			_la = _input.LA(1);
			if ( !(((((_la - 432)) & ~0x3f) == 0 && ((1L << (_la - 432)) & ((1L << (ASSEMBLE - 432)) | (1L << (C_ - 432)) | (1L << (COBOL - 432)) | (1L << (PLI - 432)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LanguageOption3Context extends ParserRuleContext {
		public TerminalNode LANGUAGE() { return getToken(DB2zSQLParser.LANGUAGE, 0); }
		public TerminalNode ASSEMBLE() { return getToken(DB2zSQLParser.ASSEMBLE, 0); }
		public TerminalNode C_() { return getToken(DB2zSQLParser.C_, 0); }
		public TerminalNode COBOL() { return getToken(DB2zSQLParser.COBOL, 0); }
		public TerminalNode JAVA() { return getToken(DB2zSQLParser.JAVA, 0); }
		public TerminalNode PLI() { return getToken(DB2zSQLParser.PLI, 0); }
		public LanguageOption3Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_languageOption3; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterLanguageOption3(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitLanguageOption3(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitLanguageOption3(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LanguageOption3Context languageOption3() throws RecognitionException {
		LanguageOption3Context _localctx = new LanguageOption3Context(_ctx, getState());
		enterRule(_localctx, 116, RULE_languageOption3);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1761);
			match(LANGUAGE);
			setState(1762);
			_la = _input.LA(1);
			if ( !(((((_la - 432)) & ~0x3f) == 0 && ((1L << (_la - 432)) & ((1L << (ASSEMBLE - 432)) | (1L << (C_ - 432)) | (1L << (COBOL - 432)) | (1L << (JAVA - 432)) | (1L << (PLI - 432)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LanguageOption4Context extends ParserRuleContext {
		public TerminalNode LANGUAGE() { return getToken(DB2zSQLParser.LANGUAGE, 0); }
		public TerminalNode ASSEMBLE() { return getToken(DB2zSQLParser.ASSEMBLE, 0); }
		public TerminalNode C_() { return getToken(DB2zSQLParser.C_, 0); }
		public TerminalNode COBOL() { return getToken(DB2zSQLParser.COBOL, 0); }
		public TerminalNode JAVA() { return getToken(DB2zSQLParser.JAVA, 0); }
		public TerminalNode PLI() { return getToken(DB2zSQLParser.PLI, 0); }
		public TerminalNode SQL() { return getToken(DB2zSQLParser.SQL, 0); }
		public LanguageOption4Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_languageOption4; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterLanguageOption4(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitLanguageOption4(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitLanguageOption4(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LanguageOption4Context languageOption4() throws RecognitionException {
		LanguageOption4Context _localctx = new LanguageOption4Context(_ctx, getState());
		enterRule(_localctx, 118, RULE_languageOption4);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1764);
			match(LANGUAGE);
			setState(1765);
			_la = _input.LA(1);
			if ( !(((((_la - 432)) & ~0x3f) == 0 && ((1L << (_la - 432)) & ((1L << (ASSEMBLE - 432)) | (1L << (C_ - 432)) | (1L << (COBOL - 432)) | (1L << (JAVA - 432)) | (1L << (PLI - 432)) | (1L << (SQL - 432)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LanguageOption5Context extends ParserRuleContext {
		public TerminalNode LANGUAGE() { return getToken(DB2zSQLParser.LANGUAGE, 0); }
		public TerminalNode ASSEMBLE() { return getToken(DB2zSQLParser.ASSEMBLE, 0); }
		public TerminalNode C_() { return getToken(DB2zSQLParser.C_, 0); }
		public TerminalNode COBOL() { return getToken(DB2zSQLParser.COBOL, 0); }
		public TerminalNode JAVA() { return getToken(DB2zSQLParser.JAVA, 0); }
		public TerminalNode PLI() { return getToken(DB2zSQLParser.PLI, 0); }
		public TerminalNode REXX() { return getToken(DB2zSQLParser.REXX, 0); }
		public LanguageOption5Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_languageOption5; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterLanguageOption5(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitLanguageOption5(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitLanguageOption5(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LanguageOption5Context languageOption5() throws RecognitionException {
		LanguageOption5Context _localctx = new LanguageOption5Context(_ctx, getState());
		enterRule(_localctx, 120, RULE_languageOption5);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1767);
			match(LANGUAGE);
			setState(1768);
			_la = _input.LA(1);
			if ( !(((((_la - 432)) & ~0x3f) == 0 && ((1L << (_la - 432)) & ((1L << (ASSEMBLE - 432)) | (1L << (C_ - 432)) | (1L << (COBOL - 432)) | (1L << (JAVA - 432)) | (1L << (PLI - 432)) | (1L << (REXX - 432)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterStyleOption1Context extends ParserRuleContext {
		public TerminalNode PARAMETER() { return getToken(DB2zSQLParser.PARAMETER, 0); }
		public TerminalNode STYLE() { return getToken(DB2zSQLParser.STYLE, 0); }
		public TerminalNode SQL() { return getToken(DB2zSQLParser.SQL, 0); }
		public ParameterStyleOption1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterStyleOption1; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterParameterStyleOption1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitParameterStyleOption1(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitParameterStyleOption1(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParameterStyleOption1Context parameterStyleOption1() throws RecognitionException {
		ParameterStyleOption1Context _localctx = new ParameterStyleOption1Context(_ctx, getState());
		enterRule(_localctx, 122, RULE_parameterStyleOption1);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1770);
			match(PARAMETER);
			setState(1771);
			match(STYLE);
			setState(1772);
			match(SQL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterStyleOption2Context extends ParserRuleContext {
		public TerminalNode PARAMETER() { return getToken(DB2zSQLParser.PARAMETER, 0); }
		public TerminalNode STYLE() { return getToken(DB2zSQLParser.STYLE, 0); }
		public TerminalNode SQL() { return getToken(DB2zSQLParser.SQL, 0); }
		public TerminalNode JAVA() { return getToken(DB2zSQLParser.JAVA, 0); }
		public ParameterStyleOption2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterStyleOption2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterParameterStyleOption2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitParameterStyleOption2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitParameterStyleOption2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParameterStyleOption2Context parameterStyleOption2() throws RecognitionException {
		ParameterStyleOption2Context _localctx = new ParameterStyleOption2Context(_ctx, getState());
		enterRule(_localctx, 124, RULE_parameterStyleOption2);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1774);
			match(PARAMETER);
			setState(1775);
			match(STYLE);
			setState(1776);
			_la = _input.LA(1);
			if ( !(_la==JAVA || _la==SQL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterStyleOption3Context extends ParserRuleContext {
		public TerminalNode PARAMETER() { return getToken(DB2zSQLParser.PARAMETER, 0); }
		public TerminalNode STYLE() { return getToken(DB2zSQLParser.STYLE, 0); }
		public TerminalNode SQL() { return getToken(DB2zSQLParser.SQL, 0); }
		public TerminalNode DB2SQL() { return getToken(DB2zSQLParser.DB2SQL, 0); }
		public TerminalNode GENERAL() { return getToken(DB2zSQLParser.GENERAL, 0); }
		public TerminalNode JAVA() { return getToken(DB2zSQLParser.JAVA, 0); }
		public TerminalNode STANDARD() { return getToken(DB2zSQLParser.STANDARD, 0); }
		public TerminalNode CALL() { return getToken(DB2zSQLParser.CALL, 0); }
		public TerminalNode SIMPLE() { return getToken(DB2zSQLParser.SIMPLE, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode NULLS() { return getToken(DB2zSQLParser.NULLS, 0); }
		public ParameterStyleOption3Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterStyleOption3; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterParameterStyleOption3(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitParameterStyleOption3(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitParameterStyleOption3(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParameterStyleOption3Context parameterStyleOption3() throws RecognitionException {
		ParameterStyleOption3Context _localctx = new ParameterStyleOption3Context(_ctx, getState());
		enterRule(_localctx, 126, RULE_parameterStyleOption3);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1778);
			match(PARAMETER);
			setState(1779);
			match(STYLE);
			setState(1795);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,123,_ctx) ) {
			case 1:
				{
				setState(1780);
				match(SQL);
				}
				break;
			case 2:
				{
				setState(1781);
				match(DB2SQL);
				}
				break;
			case 3:
				{
				{
				setState(1782);
				match(STANDARD);
				setState(1783);
				match(CALL);
				}
				}
				break;
			case 4:
				{
				setState(1784);
				match(GENERAL);
				}
				break;
			case 5:
				{
				{
				setState(1785);
				match(SIMPLE);
				setState(1786);
				match(CALL);
				}
				}
				break;
			case 6:
				{
				{
				setState(1790);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case GENERAL:
					{
					setState(1787);
					match(GENERAL);
					}
					break;
				case SIMPLE:
					{
					{
					setState(1788);
					match(SIMPLE);
					setState(1789);
					match(CALL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1792);
				match(WITH);
				setState(1793);
				match(NULLS);
				}
				}
				break;
			case 7:
				{
				setState(1794);
				match(JAVA);
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeterministicOptionContext extends ParserRuleContext {
		public TerminalNode DETERMINISTIC() { return getToken(DB2zSQLParser.DETERMINISTIC, 0); }
		public TerminalNode VARIANT() { return getToken(DB2zSQLParser.VARIANT, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public DeterministicOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deterministicOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDeterministicOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDeterministicOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDeterministicOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeterministicOptionContext deterministicOption() throws RecognitionException {
		DeterministicOptionContext _localctx = new DeterministicOptionContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_deterministicOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1805);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,126,_ctx) ) {
			case 1:
				{
				{
				setState(1798);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1797);
					match(NOT);
					}
				}

				setState(1800);
				match(DETERMINISTIC);
				}
				}
				break;
			case 2:
				{
				{
				setState(1802);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1801);
					match(NOT);
					}
				}

				setState(1804);
				match(VARIANT);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FencedOptionContext extends ParserRuleContext {
		public TerminalNode FENCED() { return getToken(DB2zSQLParser.FENCED, 0); }
		public FencedOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fencedOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFencedOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFencedOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFencedOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FencedOptionContext fencedOption() throws RecognitionException {
		FencedOptionContext _localctx = new FencedOptionContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_fencedOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1807);
			match(FENCED);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NullInputOption1Context extends ParserRuleContext {
		public TerminalNode RETURNS() { return getToken(DB2zSQLParser.RETURNS, 0); }
		public List<TerminalNode> NULL() { return getTokens(DB2zSQLParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(DB2zSQLParser.NULL, i);
		}
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public TerminalNode INPUT() { return getToken(DB2zSQLParser.INPUT, 0); }
		public TerminalNode CALLED() { return getToken(DB2zSQLParser.CALLED, 0); }
		public TerminalNode CALL() { return getToken(DB2zSQLParser.CALL, 0); }
		public NullInputOption1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullInputOption1; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterNullInputOption1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitNullInputOption1(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitNullInputOption1(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NullInputOption1Context nullInputOption1() throws RecognitionException {
		NullInputOption1Context _localctx = new NullInputOption1Context(_ctx, getState());
		enterRule(_localctx, 132, RULE_nullInputOption1);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1820);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RETURNS:
				{
				{
				setState(1809);
				match(RETURNS);
				setState(1810);
				match(NULL);
				setState(1811);
				match(ON);
				setState(1812);
				match(NULL);
				setState(1813);
				match(INPUT);
				}
				}
				break;
			case CALLED:
				{
				{
				setState(1814);
				match(CALLED);
				setState(1815);
				match(ON);
				setState(1816);
				match(NULL);
				setState(1817);
				match(INPUT);
				}
				}
				break;
			case NULL:
				{
				{
				setState(1818);
				match(NULL);
				setState(1819);
				match(CALL);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NullInputOption2Context extends ParserRuleContext {
		public TerminalNode CALLED() { return getToken(DB2zSQLParser.CALLED, 0); }
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public TerminalNode INPUT() { return getToken(DB2zSQLParser.INPUT, 0); }
		public TerminalNode CALL() { return getToken(DB2zSQLParser.CALL, 0); }
		public NullInputOption2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullInputOption2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterNullInputOption2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitNullInputOption2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitNullInputOption2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NullInputOption2Context nullInputOption2() throws RecognitionException {
		NullInputOption2Context _localctx = new NullInputOption2Context(_ctx, getState());
		enterRule(_localctx, 134, RULE_nullInputOption2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1828);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
				{
				{
				setState(1822);
				match(CALLED);
				setState(1823);
				match(ON);
				setState(1824);
				match(NULL);
				setState(1825);
				match(INPUT);
				}
				}
				break;
			case NULL:
				{
				{
				setState(1826);
				match(NULL);
				setState(1827);
				match(CALL);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DebugOptionContext extends ParserRuleContext {
		public TerminalNode DEBUG() { return getToken(DB2zSQLParser.DEBUG, 0); }
		public TerminalNode MODE_() { return getToken(DB2zSQLParser.MODE_, 0); }
		public TerminalNode DISALLOW() { return getToken(DB2zSQLParser.DISALLOW, 0); }
		public TerminalNode ALLOW() { return getToken(DB2zSQLParser.ALLOW, 0); }
		public TerminalNode DISABLE() { return getToken(DB2zSQLParser.DISABLE, 0); }
		public DebugOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_debugOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDebugOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDebugOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDebugOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DebugOptionContext debugOption() throws RecognitionException {
		DebugOptionContext _localctx = new DebugOptionContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_debugOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1830);
			_la = _input.LA(1);
			if ( !(((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (ALLOW - 34)) | (1L << (DISABLE - 34)) | (1L << (DISALLOW - 34)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1831);
			match(DEBUG);
			setState(1832);
			match(MODE_);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SqlDataOption1Context extends ParserRuleContext {
		public TerminalNode READS() { return getToken(DB2zSQLParser.READS, 0); }
		public TerminalNode SQL() { return getToken(DB2zSQLParser.SQL, 0); }
		public TerminalNode DATA() { return getToken(DB2zSQLParser.DATA, 0); }
		public TerminalNode CONTAINS() { return getToken(DB2zSQLParser.CONTAINS, 0); }
		public SqlDataOption1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlDataOption1; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSqlDataOption1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSqlDataOption1(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSqlDataOption1(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SqlDataOption1Context sqlDataOption1() throws RecognitionException {
		SqlDataOption1Context _localctx = new SqlDataOption1Context(_ctx, getState());
		enterRule(_localctx, 138, RULE_sqlDataOption1);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1839);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case READS:
				{
				{
				setState(1834);
				match(READS);
				setState(1835);
				match(SQL);
				setState(1836);
				match(DATA);
				}
				}
				break;
			case CONTAINS:
				{
				{
				setState(1837);
				match(CONTAINS);
				setState(1838);
				match(SQL);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SqlDataOption2Context extends ParserRuleContext {
		public TerminalNode READS() { return getToken(DB2zSQLParser.READS, 0); }
		public TerminalNode SQL() { return getToken(DB2zSQLParser.SQL, 0); }
		public TerminalNode DATA() { return getToken(DB2zSQLParser.DATA, 0); }
		public TerminalNode CONTAINS() { return getToken(DB2zSQLParser.CONTAINS, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public SqlDataOption2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlDataOption2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSqlDataOption2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSqlDataOption2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSqlDataOption2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SqlDataOption2Context sqlDataOption2() throws RecognitionException {
		SqlDataOption2Context _localctx = new SqlDataOption2Context(_ctx, getState());
		enterRule(_localctx, 140, RULE_sqlDataOption2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1848);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case READS:
				{
				{
				setState(1841);
				match(READS);
				setState(1842);
				match(SQL);
				setState(1843);
				match(DATA);
				}
				}
				break;
			case CONTAINS:
				{
				{
				setState(1844);
				match(CONTAINS);
				setState(1845);
				match(SQL);
				}
				}
				break;
			case NO:
				{
				{
				setState(1846);
				match(NO);
				setState(1847);
				match(SQL);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SqlDataOption3Context extends ParserRuleContext {
		public TerminalNode MODIFIES() { return getToken(DB2zSQLParser.MODIFIES, 0); }
		public TerminalNode SQL() { return getToken(DB2zSQLParser.SQL, 0); }
		public TerminalNode DATA() { return getToken(DB2zSQLParser.DATA, 0); }
		public TerminalNode READS() { return getToken(DB2zSQLParser.READS, 0); }
		public TerminalNode CONTAINS() { return getToken(DB2zSQLParser.CONTAINS, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public SqlDataOption3Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlDataOption3; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSqlDataOption3(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSqlDataOption3(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSqlDataOption3(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SqlDataOption3Context sqlDataOption3() throws RecognitionException {
		SqlDataOption3Context _localctx = new SqlDataOption3Context(_ctx, getState());
		enterRule(_localctx, 142, RULE_sqlDataOption3);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1860);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MODIFIES:
				{
				{
				setState(1850);
				match(MODIFIES);
				setState(1851);
				match(SQL);
				setState(1852);
				match(DATA);
				}
				}
				break;
			case READS:
				{
				{
				setState(1853);
				match(READS);
				setState(1854);
				match(SQL);
				setState(1855);
				match(DATA);
				}
				}
				break;
			case CONTAINS:
				{
				{
				setState(1856);
				match(CONTAINS);
				setState(1857);
				match(SQL);
				}
				}
				break;
			case NO:
				{
				{
				setState(1858);
				match(NO);
				setState(1859);
				match(SQL);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExternalActionOptionContext extends ParserRuleContext {
		public TerminalNode EXTERNAL() { return getToken(DB2zSQLParser.EXTERNAL, 0); }
		public TerminalNode ACTION() { return getToken(DB2zSQLParser.ACTION, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public ExternalActionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_externalActionOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterExternalActionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitExternalActionOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitExternalActionOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExternalActionOptionContext externalActionOption() throws RecognitionException {
		ExternalActionOptionContext _localctx = new ExternalActionOptionContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_externalActionOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1863);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO) {
				{
				setState(1862);
				match(NO);
				}
			}

			setState(1865);
			match(EXTERNAL);
			setState(1866);
			match(ACTION);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PackagePathOptionContext extends ParserRuleContext {
		public TerminalNode PACKAGE() { return getToken(DB2zSQLParser.PACKAGE, 0); }
		public TerminalNode PATH() { return getToken(DB2zSQLParser.PATH, 0); }
		public PackagePathContext packagePath() {
			return getRuleContext(PackagePathContext.class,0);
		}
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public PackagePathOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_packagePathOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPackagePathOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPackagePathOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPackagePathOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PackagePathOptionContext packagePathOption() throws RecognitionException {
		PackagePathOptionContext _localctx = new PackagePathOptionContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_packagePathOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1874);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PACKAGE:
				{
				{
				setState(1868);
				match(PACKAGE);
				setState(1869);
				match(PATH);
				setState(1870);
				packagePath();
				}
				}
				break;
			case NO:
				{
				{
				setState(1871);
				match(NO);
				setState(1872);
				match(PACKAGE);
				setState(1873);
				match(PATH);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScratchpadOptionContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode SCRATCHPAD() { return getToken(DB2zSQLParser.SCRATCHPAD, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public ScratchpadOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scratchpadOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterScratchpadOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitScratchpadOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitScratchpadOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ScratchpadOptionContext scratchpadOption() throws RecognitionException {
		ScratchpadOptionContext _localctx = new ScratchpadOptionContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_scratchpadOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1880);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO:
				{
				{
				setState(1876);
				match(NO);
				setState(1877);
				match(SCRATCHPAD);
				}
				}
				break;
			case SCRATCHPAD:
				{
				{
				setState(1878);
				match(SCRATCHPAD);
				setState(1879);
				match(INTEGERLITERAL);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FinalCallOptionContext extends ParserRuleContext {
		public TerminalNode FINAL() { return getToken(DB2zSQLParser.FINAL, 0); }
		public TerminalNode CALL() { return getToken(DB2zSQLParser.CALL, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public FinalCallOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_finalCallOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFinalCallOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFinalCallOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFinalCallOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FinalCallOptionContext finalCallOption() throws RecognitionException {
		FinalCallOptionContext _localctx = new FinalCallOptionContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_finalCallOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1883);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO) {
				{
				setState(1882);
				match(NO);
				}
			}

			setState(1885);
			match(FINAL);
			setState(1886);
			match(CALL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParallelOption1Context extends ParserRuleContext {
		public TerminalNode DISALLOW() { return getToken(DB2zSQLParser.DISALLOW, 0); }
		public TerminalNode PARALLEL() { return getToken(DB2zSQLParser.PARALLEL, 0); }
		public ParallelOption1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parallelOption1; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterParallelOption1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitParallelOption1(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitParallelOption1(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParallelOption1Context parallelOption1() throws RecognitionException {
		ParallelOption1Context _localctx = new ParallelOption1Context(_ctx, getState());
		enterRule(_localctx, 152, RULE_parallelOption1);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1888);
			match(DISALLOW);
			setState(1889);
			match(PARALLEL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParallelOption2Context extends ParserRuleContext {
		public TerminalNode PARALLEL() { return getToken(DB2zSQLParser.PARALLEL, 0); }
		public TerminalNode ALLOW() { return getToken(DB2zSQLParser.ALLOW, 0); }
		public TerminalNode DISALLOW() { return getToken(DB2zSQLParser.DISALLOW, 0); }
		public ParallelOption2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parallelOption2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterParallelOption2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitParallelOption2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitParallelOption2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParallelOption2Context parallelOption2() throws RecognitionException {
		ParallelOption2Context _localctx = new ParallelOption2Context(_ctx, getState());
		enterRule(_localctx, 154, RULE_parallelOption2);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1891);
			_la = _input.LA(1);
			if ( !(_la==ALLOW || _la==DISALLOW) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1892);
			match(PARALLEL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DbinfoOptionContext extends ParserRuleContext {
		public TerminalNode DBINFO() { return getToken(DB2zSQLParser.DBINFO, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public DbinfoOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dbinfoOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDbinfoOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDbinfoOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDbinfoOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DbinfoOptionContext dbinfoOption() throws RecognitionException {
		DbinfoOptionContext _localctx = new DbinfoOptionContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_dbinfoOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1895);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO) {
				{
				setState(1894);
				match(NO);
				}
			}

			setState(1897);
			match(DBINFO);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CardinalityOptionContext extends ParserRuleContext {
		public TerminalNode CARDINALITY() { return getToken(DB2zSQLParser.CARDINALITY, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public CardinalityOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cardinalityOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCardinalityOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCardinalityOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCardinalityOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CardinalityOptionContext cardinalityOption() throws RecognitionException {
		CardinalityOptionContext _localctx = new CardinalityOptionContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_cardinalityOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1899);
			match(CARDINALITY);
			setState(1900);
			match(INTEGERLITERAL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollectionIdOptionContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode COLLID() { return getToken(DB2zSQLParser.COLLID, 0); }
		public CollectionIDContext collectionID() {
			return getRuleContext(CollectionIDContext.class,0);
		}
		public CollectionIdOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collectionIdOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCollectionIdOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCollectionIdOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCollectionIdOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollectionIdOptionContext collectionIdOption() throws RecognitionException {
		CollectionIdOptionContext _localctx = new CollectionIdOptionContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_collectionIdOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1906);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO:
				{
				{
				setState(1902);
				match(NO);
				setState(1903);
				match(COLLID);
				}
				}
				break;
			case COLLID:
				{
				{
				setState(1904);
				match(COLLID);
				setState(1905);
				collectionID();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WlmEnvironmentOption1Context extends ParserRuleContext {
		public TerminalNode WLM() { return getToken(DB2zSQLParser.WLM, 0); }
		public TerminalNode ENVIRONMENT() { return getToken(DB2zSQLParser.ENVIRONMENT, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public WlmEnvironmentOption1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_wlmEnvironmentOption1; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterWlmEnvironmentOption1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitWlmEnvironmentOption1(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitWlmEnvironmentOption1(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WlmEnvironmentOption1Context wlmEnvironmentOption1() throws RecognitionException {
		WlmEnvironmentOption1Context _localctx = new WlmEnvironmentOption1Context(_ctx, getState());
		enterRule(_localctx, 162, RULE_wlmEnvironmentOption1);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1908);
			match(WLM);
			setState(1909);
			match(ENVIRONMENT);
			setState(1915);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case ALL:
			case ALLOCATE:
			case ALLOW:
			case ALTER:
			case ALTERAND:
			case ANY:
			case ARRAY:
			case ARRAY_EXISTS:
			case AS:
			case ASENSITIVE:
			case ASSOCIATE:
			case ASUTIME:
			case AT:
			case AUDIT:
			case AUX:
			case AUXILIARY:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BUFFERPOOL:
			case BY:
			case CALL:
			case CAPTURE:
			case CASCADED:
			case CASE:
			case CAST:
			case CCSID:
			case CHAR:
			case CHARACTER:
			case CHECK:
			case CLONE:
			case CLOSE:
			case CLUSTER:
			case COLLECTION:
			case COLLID:
			case COLUMN:
			case COMMENT:
			case COMMIT:
			case CONCAT:
			case CONDITION:
			case CONNECT:
			case CONNECTION:
			case CONSTRAINT:
			case CONTAINS:
			case CONTENT:
			case CONTINUE:
			case CREATE:
			case CUBE:
			case CURRENT:
			case CURRENT_LC_CTYPE:
			case CURRVAL:
			case CURSOR:
			case DATA:
			case DATABASE:
			case DAY:
			case DAYS:
			case DBINFO:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DISABLE:
			case DISALLOW:
			case DISTINCT:
			case DO:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSSIZE:
			case DYNAMIC:
			case EDITPROC:
			case ELSE:
			case ELSEIF:
			case ENCODING:
			case ENCRYPTION:
			case END:
			case END_EXEC:
			case ENDING:
			case ERASE:
			case ESCAPE:
			case EXCEPT:
			case EXCEPTION:
			case EXEC_SQL:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case FENCED:
			case FETCH:
			case FIELDPROC:
			case FINAL:
			case FIRST:
			case FOR:
			case FREE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANT:
			case GROUP:
			case HANDLER:
			case HAVING:
			case HOLD:
			case HOUR:
			case HOURS:
			case IF:
			case IMMEDIATE:
			case IN:
			case INCLUSIVE:
			case INDEX:
			case INDEXBP:
			case INHERIT:
			case INNER:
			case INOUT:
			case INSENSITIVE:
			case INSERT:
			case INTERSECT:
			case INTO:
			case IS:
			case ISOBID:
			case ITERATE:
			case JAR:
			case JOIN:
			case KEEP:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LAST:
			case LC_CTYPE:
			case LEAVE:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOCALE:
			case LOCATOR:
			case LOCATORS:
			case LOCK:
			case LOCKMAX:
			case LOCKSIZE:
			case LONG:
			case LOOP:
			case MAINTAINED:
			case MATERIALIZED:
			case MICROSECOND:
			case MICROSECONDS:
			case MODIFIES:
			case MONTH:
			case MONTHS:
			case NEXT:
			case NEXTVAL:
			case NO:
			case NONE:
			case NOT:
			case NULL:
			case NULLS:
			case NUMPARTS:
			case OBID:
			case OF:
			case OFFSET:
			case OLD:
			case ON:
			case OPEN:
			case OPTIMIZATION:
			case OPTIMIZE:
			case OR:
			case ORDER:
			case ORGANIZATION:
			case OUT:
			case OUTER:
			case PACKAGE:
			case PADDED:
			case PARAMETER:
			case PART:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONING:
			case PATH:
			case PERIOD:
			case PIECESIZE:
			case PLAN:
			case PRECISION:
			case PREPARE:
			case PREVVAL:
			case PRIOR:
			case PRIQTY:
			case PRIVILEGES:
			case PROCEDURE:
			case PROGRAM:
			case PSID:
			case PUBLIC:
			case QUERY:
			case QUERYNO:
			case READS:
			case REFERENCES:
			case REFRESH:
			case RELEASE:
			case RENAME:
			case REPEAT:
			case RESIGNAL:
			case RESTRICT:
			case RESULT:
			case RESULT_SET_LOCATOR:
			case RETURN:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUND_CEILING:
			case ROUND_DOWN:
			case ROUND_FLOOR:
			case ROUND_HALF_DOWN:
			case ROUND_HALF_EVEN:
			case ROUND_HALF_UP:
			case ROUND_UP:
			case ROW:
			case ROWSET:
			case RUN:
			case SAVEPOINT:
			case SCHEMA:
			case SCRATCHPAD:
			case SECOND:
			case SECONDS:
			case SECQTY:
			case SECURITY:
			case SELECT:
			case SENSITIVE:
			case SEQUENCE:
			case SET:
			case SIGNAL:
			case SIMPLE:
			case SOME:
			case SOURCE:
			case SPECIFIC:
			case STANDARD:
			case STATEMENT:
			case STATIC:
			case STAY:
			case STOGROUP:
			case STORES:
			case STYLE:
			case SUMMARY:
			case SYNONYM:
			case SYSDATE:
			case SYSTEM:
			case SYSTIMESTAMP:
			case TABLE:
			case TABLESPACE:
			case THEN:
			case TO:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNDO:
			case UNION:
			case UNIQUE:
			case UNTIL:
			case UPDATE:
			case USING:
			case VALIDPROC:
			case VALUE:
			case VALUES:
			case VARIABLE:
			case VARIANT:
			case VCAT:
			case VERSIONING:
			case VIEW:
			case VOLATILE:
			case VOLUMES:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WLM:
			case XMLCAST:
			case XMLEXISTS:
			case XMLNAMESPACES:
			case YEAR:
			case YEARS:
			case ZONE:
			case AND:
			case ARRAY_AGG:
			case ASC:
			case AVG:
			case BIT:
			case CHANGE:
			case CODEUNITS16:
			case CODEUNITS32:
			case CORR:
			case CORRELATION:
			case COUNT:
			case COUNT_BIG:
			case COVAR:
			case COVARIANCE:
			case COVARIANCE_SAMP:
			case COVAR_POP:
			case COVAR_SAMP:
			case CS:
			case CUME_DIST:
			case DENSE_RANK:
			case DESC:
			case EBCDIC:
			case EXCLUSIVE:
			case FIRST_VALUE:
			case FOLLOWING:
			case GROUPING:
			case IGNORE:
			case INDICATOR:
			case INPUT:
			case ISNULL:
			case LAG:
			case LARGE:
			case LAST_VALUE:
			case LEAD:
			case LISTAGG:
			case LOCKED:
			case LOCKS:
			case MEDIAN:
			case MINUTES:
			case MIXED:
			case NOTNULL:
			case NTH_VALUE:
			case NTILE:
			case NUMERIC:
			case OBJECT:
			case OCTETS:
			case ONLY:
			case OVER:
			case PASSING:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PERCENT_RANK:
			case PRECEDING:
			case PREVIOUS:
			case RANGE:
			case RANK:
			case RATIO_TO_REPORT:
			case READ:
			case REF:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_ICPT:
			case REGR_INTERCEPT:
			case REGR_R2:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case RESPECT:
			case ROW_NUMBER:
			case ROWS:
			case RR:
			case RS:
			case SBCS:
			case SELECTIVITY:
			case SETS:
			case SHARE:
			case SKIP_:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case TOKEN:
			case UNBOUNDED:
			case UNPACK:
			case UR:
			case USE:
			case VAR:
			case VARIANCE:
			case VARIANCE_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARYING:
			case WITHOUT:
			case XML:
			case XMLAGG:
			case COLUMNS:
			case SQLID:
			case ORDINALITY:
			case SYSTEM_TIME:
			case BUSINESS_TIME:
			case MULTIPLIER:
			case UNNEST:
			case CROSS:
			case CALLER:
			case CLIENT:
			case POSITIONING:
			case SCROLL:
			case ACTION:
			case ASSEMBLE:
			case C_:
			case CALLED:
			case COBOL:
			case DB2:
			case DEFINER:
			case DISPATCH:
			case ENVIRONMENT:
			case FAILURE:
			case FAILURES:
			case JAVA:
			case MAIN:
			case NAME:
			case OPTIONS:
			case PARALLEL:
			case PLI:
			case REGISTERS:
			case RESIDENT:
			case SECURED:
			case SPECIAL:
			case SQL:
			case STOP:
			case SUB:
			case YES:
			case APPLICATION:
			case CHANGED:
			case COMPATIBILITY:
			case COMPRESS:
			case COPY:
			case FREEPAGE:
			case GBPCACHE:
			case INCLUDE:
			case MAXVALUE:
			case MINVALUE:
			case PCTFREE:
			case REGENERATE:
			case MASK:
			case ENABLE:
			case PERMISSION:
			case ATOMIC:
			case SQLEXCEPTION:
			case MERGE:
			case MATCHED:
			case SQLSTATE:
			case MESSAGE_TEXT:
			case OVERRIDING:
			case PORTION:
			case DB2SQL:
			case DEBUG:
			case GENERAL:
			case MODE_:
			case REXX:
			case CACHE:
			case CYCLE:
			case INCREMENT:
			case RESTART:
			case DATACLAS:
			case MGMTCLAS:
			case REMOVE:
			case STORCLAS:
			case ACCESS:
			case ACTIVATE:
			case ALWAYS:
			case APPEND:
			case ARCHIVE:
			case BUSINESS:
			case CASCADE:
			case CHANGES:
			case CONTROL:
			case DEACTIVATE:
			case DEFERRED:
			case EACH:
			case ENFORCED:
			case EXTRA:
			case FOREIGN:
			case HIDDEN_:
			case HISTORY:
			case ID:
			case IDENTITY:
			case IMPLICITLY:
			case INITIALLY:
			case INLINE:
			case OPERATION:
			case ORGANIZE:
			case OVERLAPS:
			case PACKAGE_NAME:
			case PACKAGE_SCHEMA:
			case PACKAGE_VERSION:
			case PRIMARY:
			case RESET:
			case ROTATE:
			case START:
			case SYSIBM:
			case TRANSACTION:
			case XMLSCHEMA:
			case ELEMENT:
			case URL:
			case NAMESPACE:
			case LOCATION:
			case SYSXSR:
			case ALGORITHM:
			case FIXEDLENGTH:
			case HUFFMAN:
			case LOB:
			case LOG:
			case LOGGED:
			case MAXPARTITIONS:
			case MAXROWS:
			case MEMBER:
			case MOVE:
			case PAGE:
			case PAGENUM:
			case PENDING:
			case RELATIVE:
			case SEGSIZE:
			case TRACKMOD:
			case ADDRESS:
			case ATTRIBUTES:
			case AUTHENTICATION:
			case AUTHID:
			case CONTEXT:
			case JOBNAME:
			case OWNER:
			case PROFILE:
			case QUALIFIER:
			case SERVAUTH:
			case TRUSTED:
			case SECTION:
			case ACTIVE:
			case VERSION:
			case ALIAS:
			case WORK:
			case WORKFILE:
			case SYSDEFLT:
			case NULTERM:
			case STRUCTURE:
			case GENERIC:
			case TEMPORARY:
			case DEFER:
			case DEFINE:
			case EXCLUDE:
			case GENERATE:
			case KEYS:
			case XMLPATTERN:
			case ABS:
			case ABSVAL:
			case ACOS:
			case ADD_DAYS:
			case ADD_MONTHS:
			case ARRAY_DELETE:
			case ARRAY_FIRST:
			case ARRAY_LAST:
			case ARRAY_NEXT:
			case ARRAY_PRIOR:
			case ARRAY_TRIM:
			case ASCII:
			case ASCII_CHR:
			case ASCIISTR:
			case ASCII_STR:
			case ASIN:
			case ATAN:
			case ATAN2:
			case ATANH:
			case BIGINT:
			case BINARY:
			case BITAND:
			case BITANDNOT:
			case BITNOT:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BTRIM:
			case CARDINALITY:
			case CCSID_ENCODING:
			case CEIL:
			case CEILING:
			case CHAR9:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case CHR:
			case CLOB:
			case COALESCE:
			case COLLATION_KEY:
			case COMPARE_DECFLOAT:
			case COS:
			case COSH:
			case DATE:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFWEEK_ISO:
			case DAYOFYEAR:
			case DAYS_BETWEEN:
			case DBCLOB:
			case DEC:
			case DECFLOAT:
			case DECFLOAT_FORMAT:
			case DECFLOAT_SORTKEY:
			case DECIMAL:
			case DECODE:
			case DECRYPT_BINARY:
			case DECRYPT_BIT:
			case DECRYPT_CHAR:
			case DECRYPT_DATAKEY_BIGINT:
			case DECRYPT_DATAKEY_BIT:
			case DECRYPT_DATAKEY_CLOB:
			case DECRYPT_DATAKEY_DBCLOB:
			case DECRYPT_DATAKEY_DECIMAL:
			case DECRYPT_DATAKEY_INTEGER:
			case DECRYPT_DATAKEY_VARCHAR:
			case DECRYPT_DATAKEY_VARGRAPHIC:
			case DECRYPT_DB:
			case DEGREES:
			case DIFFERENCE:
			case DIGITS:
			case DOUBLE_PRECISION:
			case DSN_XMLVALIDATE:
			case EBCDIC_CHR:
			case EBCDIC_STR:
			case ENCRYPT_DATAKEY:
			case ENCRYPT_TDES:
			case EXP:
			case EXTRACT:
			case FLOAT:
			case FLOOR:
			case GENERATE_UNIQUE:
			case GENERATE_UNIQUE_BINARY:
			case GETHINT:
			case GETVARIABLE:
			case GRAPHIC:
			case GREATEST:
			case HASH:
			case HASH_CRC32:
			case HASH_MD5:
			case HASH_SHA1:
			case HASH_SHA256:
			case HEX:
			case IDENTITY_VAL_LOCAL:
			case IFNULL:
			case INSTR:
			case INT:
			case INTEGER:
			case JULIAN_DAY:
			case LAST_DAY:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LN:
			case LOCATE:
			case LOCATE_IN_STRING:
			case LOG10:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAX:
			case MAX_CARDINALITY:
			case MIDNIGHT_SECONDS:
			case MIN:
			case MINUTE:
			case MOD:
			case MONTHS_BETWEEN:
			case MQREAD:
			case MQREADCLOB:
			case MQRECEIVE:
			case MQRECEIVECLOB:
			case MQSEND:
			case MULTIPLY_ALT:
			case NEXT_DAY:
			case NEXT_MONTH:
			case NORMALIZE_DECFLOAT:
			case NORMALIZE_STRING:
			case NULLIF:
			case NVL:
			case OVERLAY:
			case PACK:
			case POSITION:
			case POSSTR:
			case POW:
			case POWER:
			case QUANTIZE:
			case QUARTER:
			case RADIANS:
			case RAISE_ERROR:
			case RAND:
			case RANDOM:
			case REAL:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REPLACE:
			case RID:
			case ROUND:
			case ROUND_TIMESTAMP:
			case ROWID:
			case RPAD:
			case RTRIM:
			case SCORE:
			case SIGN:
			case SIN:
			case SINH:
			case SMALLINT:
			case SOAPHTTPC:
			case SOAPHTTPNC:
			case SOAPHTTPNV:
			case SOAPHTTPV:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STRIP:
			case STRLEFT:
			case STRPOS:
			case STRRIGHT:
			case SUBSTR:
			case SUBSTRING:
			case TAN:
			case TANH:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIMESTAMP_FORMAT:
			case TIMESTAMP_ISO:
			case TIMESTAMP_TZ:
			case TO_CHAR:
			case TO_CLOB:
			case TO_DATE:
			case TO_NUMBER:
			case TOTALORDER:
			case TO_TIMESTAMP:
			case TRANSLATE:
			case TRIM:
			case TRIM_ARRAY:
			case TRUNC:
			case TRUNC_TIMESTAMP:
			case UCASE:
			case UNICODE:
			case UNICODE_STR:
			case UNISTR:
			case UPPER:
			case VARBINARY:
			case VARCHAR:
			case VARCHAR9:
			case VARCHAR_BIT_FORMAT:
			case VARCHAR_FORMAT:
			case VARGRAPHIC:
			case VERIFY_GROUP_FOR_USER:
			case VERIFY_ROLE_FOR_USER:
			case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
			case WEEK:
			case WEEK_ISO:
			case WRAP:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLCONCAT:
			case XMLDOCUMENT:
			case XMLELEMENT:
			case XMLFOREST:
			case XMLMODIFY:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLSERIALIZE:
			case XMLTEXT:
			case XMLXSROBJECTID:
			case XSLTRANSFORM:
			case CURRENT_ACCELERATOR:
			case CURRENT_APPLICATION_COMPATIBILITY:
			case CURRENT_APPLICATION_ENCODING_SCHEME:
			case CURRENT_CLIENT_ACCTNG:
			case CURRENT_CLIENT_APPLNAME:
			case CURRENT_CLIENT_CORR_TOKEN:
			case CURRENT_CLIENT_USERID:
			case CURRENT_CLIENT_WRKSTNNAME:
			case CURRENT_DATE:
			case CURRENT_DEBUG_MODE:
			case CURRENT_DECFLOAT_ROUNDING_MODE:
			case CURRENT_DEGREE:
			case CURRENT_EXPLAIN_MODE:
			case CURRENT_GET_ACCEL_ARCHIVE:
			case CURRENT_LOCALE_LC_CTYPE:
			case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
			case CURRENT_MEMBER:
			case CURRENT_OPTIMIZATION_HINT:
			case CURRENT_PACKAGE_PATH:
			case CURRENT_PACKAGESET:
			case CURRENT_PATH:
			case CURRENT_PRECISION:
			case CURRENT_QUERY_ACCELERATION:
			case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
			case CURRENT_REFRESH_AGE:
			case CURRENT_ROUTINE_VERSION:
			case CURRENT_RULES:
			case CURRENT_SCHEMA:
			case CURRENT_SERVER:
			case CURRENT_SQLID:
			case CURRENT_TEMPORAL_BUSINESS_TIME:
			case CURRENT_TEMPORAL_SYSTEM_TIME:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_TIME_ZONE:
			case ENCRYPTION_PASSWORD:
			case SESSION_TIME_ZONE:
			case SESSION_USER:
			case USER:
			case ADMIN_TASK_LIST:
			case ADMIN_TASK_OUTPUT:
			case ADMIN_TASK_STATUS:
			case BLOCKING_THREADS:
			case MQREADALL:
			case MQREADALLCLOB:
			case MQRECEIVEALL:
			case MQRECEIVEALLCLOB:
			case XMLTABLE:
			case SQLIDENTIFIER:
				{
				setState(1910);
				identifier();
				}
				break;
			case LPAREN:
				{
				{
				setState(1911);
				match(LPAREN);
				setState(1912);
				identifier();
				setState(1913);
				match(RPAREN);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WlmEnvironmentOption2Context extends ParserRuleContext {
		public TerminalNode WLM() { return getToken(DB2zSQLParser.WLM, 0); }
		public TerminalNode ENVIRONMENT() { return getToken(DB2zSQLParser.ENVIRONMENT, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode COMMA() { return getToken(DB2zSQLParser.COMMA, 0); }
		public TerminalNode SPLAT() { return getToken(DB2zSQLParser.SPLAT, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public WlmEnvironmentOption2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_wlmEnvironmentOption2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterWlmEnvironmentOption2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitWlmEnvironmentOption2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitWlmEnvironmentOption2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WlmEnvironmentOption2Context wlmEnvironmentOption2() throws RecognitionException {
		WlmEnvironmentOption2Context _localctx = new WlmEnvironmentOption2Context(_ctx, getState());
		enterRule(_localctx, 164, RULE_wlmEnvironmentOption2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1917);
			match(WLM);
			setState(1918);
			match(ENVIRONMENT);
			setState(1926);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case ALL:
			case ALLOCATE:
			case ALLOW:
			case ALTER:
			case ALTERAND:
			case ANY:
			case ARRAY:
			case ARRAY_EXISTS:
			case AS:
			case ASENSITIVE:
			case ASSOCIATE:
			case ASUTIME:
			case AT:
			case AUDIT:
			case AUX:
			case AUXILIARY:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BUFFERPOOL:
			case BY:
			case CALL:
			case CAPTURE:
			case CASCADED:
			case CASE:
			case CAST:
			case CCSID:
			case CHAR:
			case CHARACTER:
			case CHECK:
			case CLONE:
			case CLOSE:
			case CLUSTER:
			case COLLECTION:
			case COLLID:
			case COLUMN:
			case COMMENT:
			case COMMIT:
			case CONCAT:
			case CONDITION:
			case CONNECT:
			case CONNECTION:
			case CONSTRAINT:
			case CONTAINS:
			case CONTENT:
			case CONTINUE:
			case CREATE:
			case CUBE:
			case CURRENT:
			case CURRENT_LC_CTYPE:
			case CURRVAL:
			case CURSOR:
			case DATA:
			case DATABASE:
			case DAY:
			case DAYS:
			case DBINFO:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DISABLE:
			case DISALLOW:
			case DISTINCT:
			case DO:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSSIZE:
			case DYNAMIC:
			case EDITPROC:
			case ELSE:
			case ELSEIF:
			case ENCODING:
			case ENCRYPTION:
			case END:
			case END_EXEC:
			case ENDING:
			case ERASE:
			case ESCAPE:
			case EXCEPT:
			case EXCEPTION:
			case EXEC_SQL:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case FENCED:
			case FETCH:
			case FIELDPROC:
			case FINAL:
			case FIRST:
			case FOR:
			case FREE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANT:
			case GROUP:
			case HANDLER:
			case HAVING:
			case HOLD:
			case HOUR:
			case HOURS:
			case IF:
			case IMMEDIATE:
			case IN:
			case INCLUSIVE:
			case INDEX:
			case INDEXBP:
			case INHERIT:
			case INNER:
			case INOUT:
			case INSENSITIVE:
			case INSERT:
			case INTERSECT:
			case INTO:
			case IS:
			case ISOBID:
			case ITERATE:
			case JAR:
			case JOIN:
			case KEEP:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LAST:
			case LC_CTYPE:
			case LEAVE:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOCALE:
			case LOCATOR:
			case LOCATORS:
			case LOCK:
			case LOCKMAX:
			case LOCKSIZE:
			case LONG:
			case LOOP:
			case MAINTAINED:
			case MATERIALIZED:
			case MICROSECOND:
			case MICROSECONDS:
			case MODIFIES:
			case MONTH:
			case MONTHS:
			case NEXT:
			case NEXTVAL:
			case NO:
			case NONE:
			case NOT:
			case NULL:
			case NULLS:
			case NUMPARTS:
			case OBID:
			case OF:
			case OFFSET:
			case OLD:
			case ON:
			case OPEN:
			case OPTIMIZATION:
			case OPTIMIZE:
			case OR:
			case ORDER:
			case ORGANIZATION:
			case OUT:
			case OUTER:
			case PACKAGE:
			case PADDED:
			case PARAMETER:
			case PART:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONING:
			case PATH:
			case PERIOD:
			case PIECESIZE:
			case PLAN:
			case PRECISION:
			case PREPARE:
			case PREVVAL:
			case PRIOR:
			case PRIQTY:
			case PRIVILEGES:
			case PROCEDURE:
			case PROGRAM:
			case PSID:
			case PUBLIC:
			case QUERY:
			case QUERYNO:
			case READS:
			case REFERENCES:
			case REFRESH:
			case RELEASE:
			case RENAME:
			case REPEAT:
			case RESIGNAL:
			case RESTRICT:
			case RESULT:
			case RESULT_SET_LOCATOR:
			case RETURN:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUND_CEILING:
			case ROUND_DOWN:
			case ROUND_FLOOR:
			case ROUND_HALF_DOWN:
			case ROUND_HALF_EVEN:
			case ROUND_HALF_UP:
			case ROUND_UP:
			case ROW:
			case ROWSET:
			case RUN:
			case SAVEPOINT:
			case SCHEMA:
			case SCRATCHPAD:
			case SECOND:
			case SECONDS:
			case SECQTY:
			case SECURITY:
			case SELECT:
			case SENSITIVE:
			case SEQUENCE:
			case SET:
			case SIGNAL:
			case SIMPLE:
			case SOME:
			case SOURCE:
			case SPECIFIC:
			case STANDARD:
			case STATEMENT:
			case STATIC:
			case STAY:
			case STOGROUP:
			case STORES:
			case STYLE:
			case SUMMARY:
			case SYNONYM:
			case SYSDATE:
			case SYSTEM:
			case SYSTIMESTAMP:
			case TABLE:
			case TABLESPACE:
			case THEN:
			case TO:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNDO:
			case UNION:
			case UNIQUE:
			case UNTIL:
			case UPDATE:
			case USING:
			case VALIDPROC:
			case VALUE:
			case VALUES:
			case VARIABLE:
			case VARIANT:
			case VCAT:
			case VERSIONING:
			case VIEW:
			case VOLATILE:
			case VOLUMES:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WLM:
			case XMLCAST:
			case XMLEXISTS:
			case XMLNAMESPACES:
			case YEAR:
			case YEARS:
			case ZONE:
			case AND:
			case ARRAY_AGG:
			case ASC:
			case AVG:
			case BIT:
			case CHANGE:
			case CODEUNITS16:
			case CODEUNITS32:
			case CORR:
			case CORRELATION:
			case COUNT:
			case COUNT_BIG:
			case COVAR:
			case COVARIANCE:
			case COVARIANCE_SAMP:
			case COVAR_POP:
			case COVAR_SAMP:
			case CS:
			case CUME_DIST:
			case DENSE_RANK:
			case DESC:
			case EBCDIC:
			case EXCLUSIVE:
			case FIRST_VALUE:
			case FOLLOWING:
			case GROUPING:
			case IGNORE:
			case INDICATOR:
			case INPUT:
			case ISNULL:
			case LAG:
			case LARGE:
			case LAST_VALUE:
			case LEAD:
			case LISTAGG:
			case LOCKED:
			case LOCKS:
			case MEDIAN:
			case MINUTES:
			case MIXED:
			case NOTNULL:
			case NTH_VALUE:
			case NTILE:
			case NUMERIC:
			case OBJECT:
			case OCTETS:
			case ONLY:
			case OVER:
			case PASSING:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PERCENT_RANK:
			case PRECEDING:
			case PREVIOUS:
			case RANGE:
			case RANK:
			case RATIO_TO_REPORT:
			case READ:
			case REF:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_ICPT:
			case REGR_INTERCEPT:
			case REGR_R2:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case RESPECT:
			case ROW_NUMBER:
			case ROWS:
			case RR:
			case RS:
			case SBCS:
			case SELECTIVITY:
			case SETS:
			case SHARE:
			case SKIP_:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case TOKEN:
			case UNBOUNDED:
			case UNPACK:
			case UR:
			case USE:
			case VAR:
			case VARIANCE:
			case VARIANCE_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARYING:
			case WITHOUT:
			case XML:
			case XMLAGG:
			case COLUMNS:
			case SQLID:
			case ORDINALITY:
			case SYSTEM_TIME:
			case BUSINESS_TIME:
			case MULTIPLIER:
			case UNNEST:
			case CROSS:
			case CALLER:
			case CLIENT:
			case POSITIONING:
			case SCROLL:
			case ACTION:
			case ASSEMBLE:
			case C_:
			case CALLED:
			case COBOL:
			case DB2:
			case DEFINER:
			case DISPATCH:
			case ENVIRONMENT:
			case FAILURE:
			case FAILURES:
			case JAVA:
			case MAIN:
			case NAME:
			case OPTIONS:
			case PARALLEL:
			case PLI:
			case REGISTERS:
			case RESIDENT:
			case SECURED:
			case SPECIAL:
			case SQL:
			case STOP:
			case SUB:
			case YES:
			case APPLICATION:
			case CHANGED:
			case COMPATIBILITY:
			case COMPRESS:
			case COPY:
			case FREEPAGE:
			case GBPCACHE:
			case INCLUDE:
			case MAXVALUE:
			case MINVALUE:
			case PCTFREE:
			case REGENERATE:
			case MASK:
			case ENABLE:
			case PERMISSION:
			case ATOMIC:
			case SQLEXCEPTION:
			case MERGE:
			case MATCHED:
			case SQLSTATE:
			case MESSAGE_TEXT:
			case OVERRIDING:
			case PORTION:
			case DB2SQL:
			case DEBUG:
			case GENERAL:
			case MODE_:
			case REXX:
			case CACHE:
			case CYCLE:
			case INCREMENT:
			case RESTART:
			case DATACLAS:
			case MGMTCLAS:
			case REMOVE:
			case STORCLAS:
			case ACCESS:
			case ACTIVATE:
			case ALWAYS:
			case APPEND:
			case ARCHIVE:
			case BUSINESS:
			case CASCADE:
			case CHANGES:
			case CONTROL:
			case DEACTIVATE:
			case DEFERRED:
			case EACH:
			case ENFORCED:
			case EXTRA:
			case FOREIGN:
			case HIDDEN_:
			case HISTORY:
			case ID:
			case IDENTITY:
			case IMPLICITLY:
			case INITIALLY:
			case INLINE:
			case OPERATION:
			case ORGANIZE:
			case OVERLAPS:
			case PACKAGE_NAME:
			case PACKAGE_SCHEMA:
			case PACKAGE_VERSION:
			case PRIMARY:
			case RESET:
			case ROTATE:
			case START:
			case SYSIBM:
			case TRANSACTION:
			case XMLSCHEMA:
			case ELEMENT:
			case URL:
			case NAMESPACE:
			case LOCATION:
			case SYSXSR:
			case ALGORITHM:
			case FIXEDLENGTH:
			case HUFFMAN:
			case LOB:
			case LOG:
			case LOGGED:
			case MAXPARTITIONS:
			case MAXROWS:
			case MEMBER:
			case MOVE:
			case PAGE:
			case PAGENUM:
			case PENDING:
			case RELATIVE:
			case SEGSIZE:
			case TRACKMOD:
			case ADDRESS:
			case ATTRIBUTES:
			case AUTHENTICATION:
			case AUTHID:
			case CONTEXT:
			case JOBNAME:
			case OWNER:
			case PROFILE:
			case QUALIFIER:
			case SERVAUTH:
			case TRUSTED:
			case SECTION:
			case ACTIVE:
			case VERSION:
			case ALIAS:
			case WORK:
			case WORKFILE:
			case SYSDEFLT:
			case NULTERM:
			case STRUCTURE:
			case GENERIC:
			case TEMPORARY:
			case DEFER:
			case DEFINE:
			case EXCLUDE:
			case GENERATE:
			case KEYS:
			case XMLPATTERN:
			case ABS:
			case ABSVAL:
			case ACOS:
			case ADD_DAYS:
			case ADD_MONTHS:
			case ARRAY_DELETE:
			case ARRAY_FIRST:
			case ARRAY_LAST:
			case ARRAY_NEXT:
			case ARRAY_PRIOR:
			case ARRAY_TRIM:
			case ASCII:
			case ASCII_CHR:
			case ASCIISTR:
			case ASCII_STR:
			case ASIN:
			case ATAN:
			case ATAN2:
			case ATANH:
			case BIGINT:
			case BINARY:
			case BITAND:
			case BITANDNOT:
			case BITNOT:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BTRIM:
			case CARDINALITY:
			case CCSID_ENCODING:
			case CEIL:
			case CEILING:
			case CHAR9:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case CHR:
			case CLOB:
			case COALESCE:
			case COLLATION_KEY:
			case COMPARE_DECFLOAT:
			case COS:
			case COSH:
			case DATE:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFWEEK_ISO:
			case DAYOFYEAR:
			case DAYS_BETWEEN:
			case DBCLOB:
			case DEC:
			case DECFLOAT:
			case DECFLOAT_FORMAT:
			case DECFLOAT_SORTKEY:
			case DECIMAL:
			case DECODE:
			case DECRYPT_BINARY:
			case DECRYPT_BIT:
			case DECRYPT_CHAR:
			case DECRYPT_DATAKEY_BIGINT:
			case DECRYPT_DATAKEY_BIT:
			case DECRYPT_DATAKEY_CLOB:
			case DECRYPT_DATAKEY_DBCLOB:
			case DECRYPT_DATAKEY_DECIMAL:
			case DECRYPT_DATAKEY_INTEGER:
			case DECRYPT_DATAKEY_VARCHAR:
			case DECRYPT_DATAKEY_VARGRAPHIC:
			case DECRYPT_DB:
			case DEGREES:
			case DIFFERENCE:
			case DIGITS:
			case DOUBLE_PRECISION:
			case DSN_XMLVALIDATE:
			case EBCDIC_CHR:
			case EBCDIC_STR:
			case ENCRYPT_DATAKEY:
			case ENCRYPT_TDES:
			case EXP:
			case EXTRACT:
			case FLOAT:
			case FLOOR:
			case GENERATE_UNIQUE:
			case GENERATE_UNIQUE_BINARY:
			case GETHINT:
			case GETVARIABLE:
			case GRAPHIC:
			case GREATEST:
			case HASH:
			case HASH_CRC32:
			case HASH_MD5:
			case HASH_SHA1:
			case HASH_SHA256:
			case HEX:
			case IDENTITY_VAL_LOCAL:
			case IFNULL:
			case INSTR:
			case INT:
			case INTEGER:
			case JULIAN_DAY:
			case LAST_DAY:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LN:
			case LOCATE:
			case LOCATE_IN_STRING:
			case LOG10:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAX:
			case MAX_CARDINALITY:
			case MIDNIGHT_SECONDS:
			case MIN:
			case MINUTE:
			case MOD:
			case MONTHS_BETWEEN:
			case MQREAD:
			case MQREADCLOB:
			case MQRECEIVE:
			case MQRECEIVECLOB:
			case MQSEND:
			case MULTIPLY_ALT:
			case NEXT_DAY:
			case NEXT_MONTH:
			case NORMALIZE_DECFLOAT:
			case NORMALIZE_STRING:
			case NULLIF:
			case NVL:
			case OVERLAY:
			case PACK:
			case POSITION:
			case POSSTR:
			case POW:
			case POWER:
			case QUANTIZE:
			case QUARTER:
			case RADIANS:
			case RAISE_ERROR:
			case RAND:
			case RANDOM:
			case REAL:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REPLACE:
			case RID:
			case ROUND:
			case ROUND_TIMESTAMP:
			case ROWID:
			case RPAD:
			case RTRIM:
			case SCORE:
			case SIGN:
			case SIN:
			case SINH:
			case SMALLINT:
			case SOAPHTTPC:
			case SOAPHTTPNC:
			case SOAPHTTPNV:
			case SOAPHTTPV:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STRIP:
			case STRLEFT:
			case STRPOS:
			case STRRIGHT:
			case SUBSTR:
			case SUBSTRING:
			case TAN:
			case TANH:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIMESTAMP_FORMAT:
			case TIMESTAMP_ISO:
			case TIMESTAMP_TZ:
			case TO_CHAR:
			case TO_CLOB:
			case TO_DATE:
			case TO_NUMBER:
			case TOTALORDER:
			case TO_TIMESTAMP:
			case TRANSLATE:
			case TRIM:
			case TRIM_ARRAY:
			case TRUNC:
			case TRUNC_TIMESTAMP:
			case UCASE:
			case UNICODE:
			case UNICODE_STR:
			case UNISTR:
			case UPPER:
			case VARBINARY:
			case VARCHAR:
			case VARCHAR9:
			case VARCHAR_BIT_FORMAT:
			case VARCHAR_FORMAT:
			case VARGRAPHIC:
			case VERIFY_GROUP_FOR_USER:
			case VERIFY_ROLE_FOR_USER:
			case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
			case WEEK:
			case WEEK_ISO:
			case WRAP:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLCONCAT:
			case XMLDOCUMENT:
			case XMLELEMENT:
			case XMLFOREST:
			case XMLMODIFY:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLSERIALIZE:
			case XMLTEXT:
			case XMLXSROBJECTID:
			case XSLTRANSFORM:
			case CURRENT_ACCELERATOR:
			case CURRENT_APPLICATION_COMPATIBILITY:
			case CURRENT_APPLICATION_ENCODING_SCHEME:
			case CURRENT_CLIENT_ACCTNG:
			case CURRENT_CLIENT_APPLNAME:
			case CURRENT_CLIENT_CORR_TOKEN:
			case CURRENT_CLIENT_USERID:
			case CURRENT_CLIENT_WRKSTNNAME:
			case CURRENT_DATE:
			case CURRENT_DEBUG_MODE:
			case CURRENT_DECFLOAT_ROUNDING_MODE:
			case CURRENT_DEGREE:
			case CURRENT_EXPLAIN_MODE:
			case CURRENT_GET_ACCEL_ARCHIVE:
			case CURRENT_LOCALE_LC_CTYPE:
			case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
			case CURRENT_MEMBER:
			case CURRENT_OPTIMIZATION_HINT:
			case CURRENT_PACKAGE_PATH:
			case CURRENT_PACKAGESET:
			case CURRENT_PATH:
			case CURRENT_PRECISION:
			case CURRENT_QUERY_ACCELERATION:
			case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
			case CURRENT_REFRESH_AGE:
			case CURRENT_ROUTINE_VERSION:
			case CURRENT_RULES:
			case CURRENT_SCHEMA:
			case CURRENT_SERVER:
			case CURRENT_SQLID:
			case CURRENT_TEMPORAL_BUSINESS_TIME:
			case CURRENT_TEMPORAL_SYSTEM_TIME:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_TIME_ZONE:
			case ENCRYPTION_PASSWORD:
			case SESSION_TIME_ZONE:
			case SESSION_USER:
			case USER:
			case ADMIN_TASK_LIST:
			case ADMIN_TASK_OUTPUT:
			case ADMIN_TASK_STATUS:
			case BLOCKING_THREADS:
			case MQREADALL:
			case MQREADALLCLOB:
			case MQRECEIVEALL:
			case MQRECEIVEALLCLOB:
			case XMLTABLE:
			case SQLIDENTIFIER:
				{
				setState(1919);
				identifier();
				}
				break;
			case LPAREN:
				{
				{
				setState(1920);
				match(LPAREN);
				setState(1921);
				identifier();
				setState(1922);
				match(COMMA);
				setState(1923);
				match(SPLAT);
				setState(1924);
				match(RPAREN);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AsuTimeOptionContext extends ParserRuleContext {
		public TerminalNode ASUTIME() { return getToken(DB2zSQLParser.ASUTIME, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode LIMIT() { return getToken(DB2zSQLParser.LIMIT, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public AsuTimeOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asuTimeOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAsuTimeOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAsuTimeOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAsuTimeOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AsuTimeOptionContext asuTimeOption() throws RecognitionException {
		AsuTimeOptionContext _localctx = new AsuTimeOptionContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_asuTimeOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1928);
			match(ASUTIME);
			setState(1933);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO:
				{
				{
				setState(1929);
				match(NO);
				setState(1930);
				match(LIMIT);
				}
				}
				break;
			case LIMIT:
				{
				{
				setState(1931);
				match(LIMIT);
				setState(1932);
				match(INTEGERLITERAL);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StayResidentOptionContext extends ParserRuleContext {
		public TerminalNode STAY() { return getToken(DB2zSQLParser.STAY, 0); }
		public TerminalNode RESIDENT() { return getToken(DB2zSQLParser.RESIDENT, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode YES() { return getToken(DB2zSQLParser.YES, 0); }
		public StayResidentOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stayResidentOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterStayResidentOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitStayResidentOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitStayResidentOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StayResidentOptionContext stayResidentOption() throws RecognitionException {
		StayResidentOptionContext _localctx = new StayResidentOptionContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_stayResidentOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1935);
			match(STAY);
			setState(1936);
			match(RESIDENT);
			setState(1937);
			_la = _input.LA(1);
			if ( !(_la==NO || _la==YES) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProgramTypeOptionContext extends ParserRuleContext {
		public TerminalNode PROGRAM() { return getToken(DB2zSQLParser.PROGRAM, 0); }
		public TerminalNode TYPE() { return getToken(DB2zSQLParser.TYPE, 0); }
		public TerminalNode SUB() { return getToken(DB2zSQLParser.SUB, 0); }
		public TerminalNode MAIN() { return getToken(DB2zSQLParser.MAIN, 0); }
		public ProgramTypeOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_programTypeOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterProgramTypeOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitProgramTypeOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitProgramTypeOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProgramTypeOptionContext programTypeOption() throws RecognitionException {
		ProgramTypeOptionContext _localctx = new ProgramTypeOptionContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_programTypeOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1939);
			match(PROGRAM);
			setState(1940);
			match(TYPE);
			setState(1941);
			_la = _input.LA(1);
			if ( !(_la==MAIN || _la==SUB) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SecurityOptionContext extends ParserRuleContext {
		public TerminalNode SECURITY() { return getToken(DB2zSQLParser.SECURITY, 0); }
		public TerminalNode DB2() { return getToken(DB2zSQLParser.DB2, 0); }
		public TerminalNode USER() { return getToken(DB2zSQLParser.USER, 0); }
		public TerminalNode DEFINER() { return getToken(DB2zSQLParser.DEFINER, 0); }
		public SecurityOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_securityOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSecurityOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSecurityOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSecurityOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SecurityOptionContext securityOption() throws RecognitionException {
		SecurityOptionContext _localctx = new SecurityOptionContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_securityOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1943);
			match(SECURITY);
			setState(1944);
			_la = _input.LA(1);
			if ( !(_la==DB2 || _la==DEFINER || _la==USER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StopAfterFailureOptionContext extends ParserRuleContext {
		public TerminalNode STOP() { return getToken(DB2zSQLParser.STOP, 0); }
		public TerminalNode AFTER() { return getToken(DB2zSQLParser.AFTER, 0); }
		public TerminalNode SYSTEM() { return getToken(DB2zSQLParser.SYSTEM, 0); }
		public TerminalNode DEFAULT() { return getToken(DB2zSQLParser.DEFAULT, 0); }
		public TerminalNode FAILURES() { return getToken(DB2zSQLParser.FAILURES, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode CONTINUE() { return getToken(DB2zSQLParser.CONTINUE, 0); }
		public TerminalNode FAILURE() { return getToken(DB2zSQLParser.FAILURE, 0); }
		public StopAfterFailureOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stopAfterFailureOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterStopAfterFailureOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitStopAfterFailureOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitStopAfterFailureOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StopAfterFailureOptionContext stopAfterFailureOption() throws RecognitionException {
		StopAfterFailureOptionContext _localctx = new StopAfterFailureOptionContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_stopAfterFailureOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1958);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,141,_ctx) ) {
			case 1:
				{
				{
				setState(1946);
				match(STOP);
				setState(1947);
				match(AFTER);
				setState(1948);
				match(SYSTEM);
				setState(1949);
				match(DEFAULT);
				setState(1950);
				match(FAILURES);
				}
				}
				break;
			case 2:
				{
				{
				setState(1951);
				match(STOP);
				setState(1952);
				match(AFTER);
				setState(1953);
				match(INTEGERLITERAL);
				setState(1954);
				match(FAILURES);
				}
				}
				break;
			case 3:
				{
				{
				setState(1955);
				match(CONTINUE);
				setState(1956);
				match(AFTER);
				setState(1957);
				match(FAILURE);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RunOptionsOptionContext extends ParserRuleContext {
		public TerminalNode RUN() { return getToken(DB2zSQLParser.RUN, 0); }
		public TerminalNode OPTIONS() { return getToken(DB2zSQLParser.OPTIONS, 0); }
		public RunTimeOptionsContext runTimeOptions() {
			return getRuleContext(RunTimeOptionsContext.class,0);
		}
		public RunOptionsOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_runOptionsOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRunOptionsOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRunOptionsOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRunOptionsOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RunOptionsOptionContext runOptionsOption() throws RecognitionException {
		RunOptionsOptionContext _localctx = new RunOptionsOptionContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_runOptionsOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1960);
			match(RUN);
			setState(1961);
			match(OPTIONS);
			setState(1962);
			runTimeOptions();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommitOnReturnOptionContext extends ParserRuleContext {
		public TerminalNode COMMIT() { return getToken(DB2zSQLParser.COMMIT, 0); }
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public TerminalNode RETURN() { return getToken(DB2zSQLParser.RETURN, 0); }
		public TerminalNode YES() { return getToken(DB2zSQLParser.YES, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public CommitOnReturnOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commitOnReturnOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCommitOnReturnOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCommitOnReturnOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCommitOnReturnOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommitOnReturnOptionContext commitOnReturnOption() throws RecognitionException {
		CommitOnReturnOptionContext _localctx = new CommitOnReturnOptionContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_commitOnReturnOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1964);
			match(COMMIT);
			setState(1965);
			match(ON);
			setState(1966);
			match(RETURN);
			setState(1967);
			_la = _input.LA(1);
			if ( !(_la==NO || _la==YES) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SpecialRegistersOptionContext extends ParserRuleContext {
		public TerminalNode SPECIAL() { return getToken(DB2zSQLParser.SPECIAL, 0); }
		public TerminalNode REGISTERS() { return getToken(DB2zSQLParser.REGISTERS, 0); }
		public TerminalNode INHERIT() { return getToken(DB2zSQLParser.INHERIT, 0); }
		public TerminalNode DEFAULT() { return getToken(DB2zSQLParser.DEFAULT, 0); }
		public SpecialRegistersOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_specialRegistersOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSpecialRegistersOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSpecialRegistersOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSpecialRegistersOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SpecialRegistersOptionContext specialRegistersOption() throws RecognitionException {
		SpecialRegistersOptionContext _localctx = new SpecialRegistersOptionContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_specialRegistersOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1969);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT || _la==INHERIT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1970);
			match(SPECIAL);
			setState(1971);
			match(REGISTERS);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DispatchOptionContext extends ParserRuleContext {
		public TerminalNode STATIC() { return getToken(DB2zSQLParser.STATIC, 0); }
		public TerminalNode DISPATCH() { return getToken(DB2zSQLParser.DISPATCH, 0); }
		public DispatchOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dispatchOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDispatchOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDispatchOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDispatchOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DispatchOptionContext dispatchOption() throws RecognitionException {
		DispatchOptionContext _localctx = new DispatchOptionContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_dispatchOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1973);
			match(STATIC);
			setState(1974);
			match(DISPATCH);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SecuredOptionContext extends ParserRuleContext {
		public TerminalNode SECURED() { return getToken(DB2zSQLParser.SECURED, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public SecuredOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_securedOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSecuredOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSecuredOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSecuredOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SecuredOptionContext securedOption() throws RecognitionException {
		SecuredOptionContext _localctx = new SecuredOptionContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_securedOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1977);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(1976);
				match(NOT);
				}
			}

			setState(1979);
			match(SECURED);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SpecificNameOption1Context extends ParserRuleContext {
		public TerminalNode SPECIFIC() { return getToken(DB2zSQLParser.SPECIFIC, 0); }
		public SpecificNameContext specificName() {
			return getRuleContext(SpecificNameContext.class,0);
		}
		public SpecificNameOption1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_specificNameOption1; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSpecificNameOption1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSpecificNameOption1(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSpecificNameOption1(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SpecificNameOption1Context specificNameOption1() throws RecognitionException {
		SpecificNameOption1Context _localctx = new SpecificNameOption1Context(_ctx, getState());
		enterRule(_localctx, 186, RULE_specificNameOption1);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1981);
			match(SPECIFIC);
			setState(1983);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,143,_ctx) ) {
			case 1:
				{
				setState(1982);
				specificName();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SpecificNameOption2Context extends ParserRuleContext {
		public TerminalNode SPECIFIC() { return getToken(DB2zSQLParser.SPECIFIC, 0); }
		public SpecificNameContext specificName() {
			return getRuleContext(SpecificNameContext.class,0);
		}
		public SpecificNameOption2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_specificNameOption2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSpecificNameOption2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSpecificNameOption2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSpecificNameOption2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SpecificNameOption2Context specificNameOption2() throws RecognitionException {
		SpecificNameOption2Context _localctx = new SpecificNameOption2Context(_ctx, getState());
		enterRule(_localctx, 188, RULE_specificNameOption2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1985);
			match(SPECIFIC);
			setState(1986);
			specificName();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterOption1Context extends ParserRuleContext {
		public TerminalNode PARAMETER() { return getToken(DB2zSQLParser.PARAMETER, 0); }
		public List<TerminalNode> CCSID() { return getTokens(DB2zSQLParser.CCSID); }
		public TerminalNode CCSID(int i) {
			return getToken(DB2zSQLParser.CCSID, i);
		}
		public List<TerminalNode> VARCHAR() { return getTokens(DB2zSQLParser.VARCHAR); }
		public TerminalNode VARCHAR(int i) {
			return getToken(DB2zSQLParser.VARCHAR, i);
		}
		public List<TerminalNode> ASCII() { return getTokens(DB2zSQLParser.ASCII); }
		public TerminalNode ASCII(int i) {
			return getToken(DB2zSQLParser.ASCII, i);
		}
		public List<TerminalNode> EBCDIC() { return getTokens(DB2zSQLParser.EBCDIC); }
		public TerminalNode EBCDIC(int i) {
			return getToken(DB2zSQLParser.EBCDIC, i);
		}
		public List<TerminalNode> UNICODE() { return getTokens(DB2zSQLParser.UNICODE); }
		public TerminalNode UNICODE(int i) {
			return getToken(DB2zSQLParser.UNICODE, i);
		}
		public List<TerminalNode> NULTERM() { return getTokens(DB2zSQLParser.NULTERM); }
		public TerminalNode NULTERM(int i) {
			return getToken(DB2zSQLParser.NULTERM, i);
		}
		public List<TerminalNode> STRUCTURE() { return getTokens(DB2zSQLParser.STRUCTURE); }
		public TerminalNode STRUCTURE(int i) {
			return getToken(DB2zSQLParser.STRUCTURE, i);
		}
		public ParameterOption1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterOption1; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterParameterOption1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitParameterOption1(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitParameterOption1(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParameterOption1Context parameterOption1() throws RecognitionException {
		ParameterOption1Context _localctx = new ParameterOption1Context(_ctx, getState());
		enterRule(_localctx, 190, RULE_parameterOption1);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1988);
			match(PARAMETER);
			setState(1993); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(1993);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CCSID:
					{
					{
					setState(1989);
					match(CCSID);
					setState(1990);
					_la = _input.LA(1);
					if ( !(_la==EBCDIC || _la==ASCII || _la==UNICODE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					break;
				case VARCHAR:
					{
					{
					setState(1991);
					match(VARCHAR);
					setState(1992);
					_la = _input.LA(1);
					if ( !(_la==NULTERM || _la==STRUCTURE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(1995); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==CCSID || _la==VARCHAR );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterOption2Context extends ParserRuleContext {
		public TerminalNode PARAMETER() { return getToken(DB2zSQLParser.PARAMETER, 0); }
		public TerminalNode CCSID() { return getToken(DB2zSQLParser.CCSID, 0); }
		public TerminalNode ASCII() { return getToken(DB2zSQLParser.ASCII, 0); }
		public TerminalNode EBCDIC() { return getToken(DB2zSQLParser.EBCDIC, 0); }
		public TerminalNode UNICODE() { return getToken(DB2zSQLParser.UNICODE, 0); }
		public ParameterOption2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterOption2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterParameterOption2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitParameterOption2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitParameterOption2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParameterOption2Context parameterOption2() throws RecognitionException {
		ParameterOption2Context _localctx = new ParameterOption2Context(_ctx, getState());
		enterRule(_localctx, 192, RULE_parameterOption2);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1997);
			match(PARAMETER);
			setState(1998);
			match(CCSID);
			setState(1999);
			_la = _input.LA(1);
			if ( !(_la==EBCDIC || _la==ASCII || _la==UNICODE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFunctionStatementExternalTableOptionsContext extends ParserRuleContext {
		public ExternalNameOption1Context externalNameOption1() {
			return getRuleContext(ExternalNameOption1Context.class,0);
		}
		public LanguageOption2Context languageOption2() {
			return getRuleContext(LanguageOption2Context.class,0);
		}
		public ParameterStyleOption1Context parameterStyleOption1() {
			return getRuleContext(ParameterStyleOption1Context.class,0);
		}
		public DeterministicOptionContext deterministicOption() {
			return getRuleContext(DeterministicOptionContext.class,0);
		}
		public FencedOptionContext fencedOption() {
			return getRuleContext(FencedOptionContext.class,0);
		}
		public NullInputOption1Context nullInputOption1() {
			return getRuleContext(NullInputOption1Context.class,0);
		}
		public SqlDataOption2Context sqlDataOption2() {
			return getRuleContext(SqlDataOption2Context.class,0);
		}
		public ExternalActionOptionContext externalActionOption() {
			return getRuleContext(ExternalActionOptionContext.class,0);
		}
		public PackagePathOptionContext packagePathOption() {
			return getRuleContext(PackagePathOptionContext.class,0);
		}
		public ScratchpadOptionContext scratchpadOption() {
			return getRuleContext(ScratchpadOptionContext.class,0);
		}
		public FinalCallOptionContext finalCallOption() {
			return getRuleContext(FinalCallOptionContext.class,0);
		}
		public ParallelOption1Context parallelOption1() {
			return getRuleContext(ParallelOption1Context.class,0);
		}
		public DbinfoOptionContext dbinfoOption() {
			return getRuleContext(DbinfoOptionContext.class,0);
		}
		public CardinalityOptionContext cardinalityOption() {
			return getRuleContext(CardinalityOptionContext.class,0);
		}
		public CollectionIdOptionContext collectionIdOption() {
			return getRuleContext(CollectionIdOptionContext.class,0);
		}
		public WlmEnvironmentOption1Context wlmEnvironmentOption1() {
			return getRuleContext(WlmEnvironmentOption1Context.class,0);
		}
		public AsuTimeOptionContext asuTimeOption() {
			return getRuleContext(AsuTimeOptionContext.class,0);
		}
		public StayResidentOptionContext stayResidentOption() {
			return getRuleContext(StayResidentOptionContext.class,0);
		}
		public ProgramTypeOptionContext programTypeOption() {
			return getRuleContext(ProgramTypeOptionContext.class,0);
		}
		public SecurityOptionContext securityOption() {
			return getRuleContext(SecurityOptionContext.class,0);
		}
		public StopAfterFailureOptionContext stopAfterFailureOption() {
			return getRuleContext(StopAfterFailureOptionContext.class,0);
		}
		public RunOptionsOptionContext runOptionsOption() {
			return getRuleContext(RunOptionsOptionContext.class,0);
		}
		public SpecialRegistersOptionContext specialRegistersOption() {
			return getRuleContext(SpecialRegistersOptionContext.class,0);
		}
		public DispatchOptionContext dispatchOption() {
			return getRuleContext(DispatchOptionContext.class,0);
		}
		public SecuredOptionContext securedOption() {
			return getRuleContext(SecuredOptionContext.class,0);
		}
		public SpecificNameOption1Context specificNameOption1() {
			return getRuleContext(SpecificNameOption1Context.class,0);
		}
		public ParameterOption1Context parameterOption1() {
			return getRuleContext(ParameterOption1Context.class,0);
		}
		public TerminalNode RETURNS() { return getToken(DB2zSQLParser.RETURNS, 0); }
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public List<FunctionDataTypeContext> functionDataType() {
			return getRuleContexts(FunctionDataTypeContext.class);
		}
		public FunctionDataTypeContext functionDataType(int i) {
			return getRuleContext(FunctionDataTypeContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode GENERIC() { return getToken(DB2zSQLParser.GENERIC, 0); }
		public List<TerminalNode> AS() { return getTokens(DB2zSQLParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(DB2zSQLParser.AS, i);
		}
		public List<TerminalNode> LOCATOR() { return getTokens(DB2zSQLParser.LOCATOR); }
		public TerminalNode LOCATOR(int i) {
			return getToken(DB2zSQLParser.LOCATOR, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public CreateFunctionStatementExternalTableOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunctionStatementExternalTableOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateFunctionStatementExternalTableOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateFunctionStatementExternalTableOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateFunctionStatementExternalTableOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFunctionStatementExternalTableOptionsContext createFunctionStatementExternalTableOptions() throws RecognitionException {
		CreateFunctionStatementExternalTableOptionsContext _localctx = new CreateFunctionStatementExternalTableOptionsContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_createFunctionStatementExternalTableOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2055);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,150,_ctx) ) {
			case 1:
				{
				{
				setState(2001);
				match(RETURNS);
				setState(2026);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case TABLE:
					{
					{
					setState(2002);
					match(TABLE);
					setState(2003);
					match(LPAREN);
					setState(2004);
					columnName();
					setState(2005);
					functionDataType();
					setState(2008);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(2006);
						match(AS);
						setState(2007);
						match(LOCATOR);
						}
					}

					setState(2019);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2010);
						match(COMMA);
						setState(2011);
						columnName();
						setState(2012);
						functionDataType();
						setState(2015);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==AS) {
							{
							setState(2013);
							match(AS);
							setState(2014);
							match(LOCATOR);
							}
						}

						}
						}
						setState(2021);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2022);
					match(RPAREN);
					}
					}
					break;
				case GENERIC:
					{
					{
					setState(2024);
					match(GENERIC);
					setState(2025);
					match(TABLE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case 2:
				{
				setState(2028);
				externalNameOption1();
				}
				break;
			case 3:
				{
				setState(2029);
				languageOption2();
				}
				break;
			case 4:
				{
				setState(2030);
				parameterStyleOption1();
				}
				break;
			case 5:
				{
				setState(2031);
				deterministicOption();
				}
				break;
			case 6:
				{
				setState(2032);
				fencedOption();
				}
				break;
			case 7:
				{
				setState(2033);
				nullInputOption1();
				}
				break;
			case 8:
				{
				setState(2034);
				sqlDataOption2();
				}
				break;
			case 9:
				{
				setState(2035);
				externalActionOption();
				}
				break;
			case 10:
				{
				setState(2036);
				packagePathOption();
				}
				break;
			case 11:
				{
				setState(2037);
				scratchpadOption();
				}
				break;
			case 12:
				{
				setState(2038);
				finalCallOption();
				}
				break;
			case 13:
				{
				setState(2039);
				parallelOption1();
				}
				break;
			case 14:
				{
				setState(2040);
				dbinfoOption();
				}
				break;
			case 15:
				{
				setState(2041);
				cardinalityOption();
				}
				break;
			case 16:
				{
				setState(2042);
				collectionIdOption();
				}
				break;
			case 17:
				{
				setState(2043);
				wlmEnvironmentOption1();
				}
				break;
			case 18:
				{
				setState(2044);
				asuTimeOption();
				}
				break;
			case 19:
				{
				setState(2045);
				stayResidentOption();
				}
				break;
			case 20:
				{
				setState(2046);
				programTypeOption();
				}
				break;
			case 21:
				{
				setState(2047);
				securityOption();
				}
				break;
			case 22:
				{
				setState(2048);
				stopAfterFailureOption();
				}
				break;
			case 23:
				{
				setState(2049);
				runOptionsOption();
				}
				break;
			case 24:
				{
				setState(2050);
				specialRegistersOption();
				}
				break;
			case 25:
				{
				setState(2051);
				dispatchOption();
				}
				break;
			case 26:
				{
				setState(2052);
				securedOption();
				}
				break;
			case 27:
				{
				setState(2053);
				specificNameOption1();
				}
				break;
			case 28:
				{
				setState(2054);
				parameterOption1();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFunctionStatementSourcedOptionsContext extends ParserRuleContext {
		public SpecificNameOption2Context specificNameOption2() {
			return getRuleContext(SpecificNameOption2Context.class,0);
		}
		public ParameterOption2Context parameterOption2() {
			return getRuleContext(ParameterOption2Context.class,0);
		}
		public TerminalNode RETURNS() { return getToken(DB2zSQLParser.RETURNS, 0); }
		public FunctionDataTypeContext functionDataType() {
			return getRuleContext(FunctionDataTypeContext.class,0);
		}
		public TerminalNode SOURCE() { return getToken(DB2zSQLParser.SOURCE, 0); }
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode LOCATOR() { return getToken(DB2zSQLParser.LOCATOR, 0); }
		public FunctionNameContext functionName() {
			return getRuleContext(FunctionNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ParameterTypeContext> parameterType() {
			return getRuleContexts(ParameterTypeContext.class);
		}
		public ParameterTypeContext parameterType(int i) {
			return getRuleContext(ParameterTypeContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public CreateFunctionStatementSourcedOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunctionStatementSourcedOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateFunctionStatementSourcedOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateFunctionStatementSourcedOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateFunctionStatementSourcedOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFunctionStatementSourcedOptionsContext createFunctionStatementSourcedOptions() throws RecognitionException {
		CreateFunctionStatementSourcedOptionsContext _localctx = new CreateFunctionStatementSourcedOptionsContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_createFunctionStatementSourcedOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2081);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RETURNS:
				{
				{
				setState(2057);
				match(RETURNS);
				setState(2058);
				functionDataType();
				setState(2061);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(2059);
					match(AS);
					setState(2060);
					match(LOCATOR);
					}
				}

				}
				}
				break;
			case SPECIFIC:
				{
				setState(2063);
				specificNameOption2();
				}
				break;
			case PARAMETER:
				{
				setState(2064);
				parameterOption2();
				}
				break;
			case SOURCE:
				{
				{
				setState(2065);
				match(SOURCE);
				setState(2079);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,153,_ctx) ) {
				case 1:
					{
					{
					setState(2066);
					functionName();
					setState(2067);
					match(LPAREN);
					setState(2068);
					parameterType();
					setState(2073);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2069);
						match(COMMA);
						setState(2070);
						parameterType();
						}
						}
						setState(2075);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2076);
					match(RPAREN);
					}
					}
					break;
				case 2:
					{
					setState(2078);
					specificNameOption2();
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFunctionStatementInlineSqlScalarOptionsContext extends ParserRuleContext {
		public DeterministicOptionContext deterministicOption() {
			return getRuleContext(DeterministicOptionContext.class,0);
		}
		public NullInputOption1Context nullInputOption1() {
			return getRuleContext(NullInputOption1Context.class,0);
		}
		public SqlDataOption1Context sqlDataOption1() {
			return getRuleContext(SqlDataOption1Context.class,0);
		}
		public ExternalActionOptionContext externalActionOption() {
			return getRuleContext(ExternalActionOptionContext.class,0);
		}
		public DispatchOptionContext dispatchOption() {
			return getRuleContext(DispatchOptionContext.class,0);
		}
		public SecuredOptionContext securedOption() {
			return getRuleContext(SecuredOptionContext.class,0);
		}
		public SpecificNameOption1Context specificNameOption1() {
			return getRuleContext(SpecificNameOption1Context.class,0);
		}
		public ParameterOption2Context parameterOption2() {
			return getRuleContext(ParameterOption2Context.class,0);
		}
		public TerminalNode RETURNS() { return getToken(DB2zSQLParser.RETURNS, 0); }
		public FunctionDataTypeContext functionDataType() {
			return getRuleContext(FunctionDataTypeContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(DB2zSQLParser.RETURN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public FullSelectContext fullSelect() {
			return getRuleContext(FullSelectContext.class,0);
		}
		public LanguageOption1Context languageOption1() {
			return getRuleContext(LanguageOption1Context.class,0);
		}
		public CreateFunctionStatementInlineSqlScalarOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunctionStatementInlineSqlScalarOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateFunctionStatementInlineSqlScalarOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateFunctionStatementInlineSqlScalarOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateFunctionStatementInlineSqlScalarOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFunctionStatementInlineSqlScalarOptionsContext createFunctionStatementInlineSqlScalarOptions() throws RecognitionException {
		CreateFunctionStatementInlineSqlScalarOptionsContext _localctx = new CreateFunctionStatementInlineSqlScalarOptionsContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_createFunctionStatementInlineSqlScalarOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2102);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,157,_ctx) ) {
			case 1:
				{
				{
				setState(2083);
				match(RETURNS);
				setState(2084);
				functionDataType();
				setState(2086);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LANGUAGE) {
					{
					setState(2085);
					languageOption1();
					}
				}

				}
				}
				break;
			case 2:
				{
				{
				setState(2088);
				match(RETURN);
				setState(2092);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,156,_ctx) ) {
				case 1:
					{
					setState(2089);
					expression();
					}
					break;
				case 2:
					{
					setState(2090);
					match(NULL);
					}
					break;
				case 3:
					{
					setState(2091);
					fullSelect();
					}
					break;
				}
				}
				}
				break;
			case 3:
				{
				setState(2094);
				deterministicOption();
				}
				break;
			case 4:
				{
				setState(2095);
				nullInputOption1();
				}
				break;
			case 5:
				{
				setState(2096);
				sqlDataOption1();
				}
				break;
			case 6:
				{
				setState(2097);
				externalActionOption();
				}
				break;
			case 7:
				{
				setState(2098);
				dispatchOption();
				}
				break;
			case 8:
				{
				setState(2099);
				securedOption();
				}
				break;
			case 9:
				{
				setState(2100);
				specificNameOption1();
				}
				break;
			case 10:
				{
				setState(2101);
				parameterOption2();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SequenceAliasContext extends ParserRuleContext {
		public AliasNameContext aliasName() {
			return getRuleContext(AliasNameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode SEQUENCE() { return getToken(DB2zSQLParser.SEQUENCE, 0); }
		public SequenceNameContext sequenceName() {
			return getRuleContext(SequenceNameContext.class,0);
		}
		public SequenceAliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequenceAlias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSequenceAlias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSequenceAlias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSequenceAlias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SequenceAliasContext sequenceAlias() throws RecognitionException {
		SequenceAliasContext _localctx = new SequenceAliasContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_sequenceAlias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2104);
			aliasName();
			setState(2105);
			match(FOR);
			setState(2106);
			match(SEQUENCE);
			setState(2107);
			sequenceName();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableAliasContext extends ParserRuleContext {
		public AliasNameContext aliasName() {
			return getRuleContext(AliasNameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public TableAliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableAlias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTableAlias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTableAlias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTableAlias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableAliasContext tableAlias() throws RecognitionException {
		TableAliasContext _localctx = new TableAliasContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_tableAlias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2109);
			aliasName();
			setState(2110);
			match(FOR);
			setState(2112);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,158,_ctx) ) {
			case 1:
				{
				setState(2111);
				match(TABLE);
				}
				break;
			}
			setState(2114);
			tableName();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AuthorizationContext extends ParserRuleContext {
		public TerminalNode USER() { return getToken(DB2zSQLParser.USER, 0); }
		public List<HostVariableContext> hostVariable() {
			return getRuleContexts(HostVariableContext.class);
		}
		public HostVariableContext hostVariable(int i) {
			return getRuleContext(HostVariableContext.class,i);
		}
		public TerminalNode USING() { return getToken(DB2zSQLParser.USING, 0); }
		public AuthorizationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_authorization; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAuthorization(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAuthorization(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAuthorization(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AuthorizationContext authorization() throws RecognitionException {
		AuthorizationContext _localctx = new AuthorizationContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_authorization);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2116);
			match(USER);
			setState(2117);
			hostVariable();
			setState(2118);
			match(USING);
			setState(2119);
			hostVariable();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SearchedDeleteContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(DB2zSQLParser.DELETE, 0); }
		public TerminalNode FROM() { return getToken(DB2zSQLParser.FROM, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(DB2zSQLParser.WHERE, 0); }
		public SearchConditionContext searchCondition() {
			return getRuleContext(SearchConditionContext.class,0);
		}
		public PeriodClauseContext periodClause() {
			return getRuleContext(PeriodClauseContext.class,0);
		}
		public CorrelationNameContext correlationName() {
			return getRuleContext(CorrelationNameContext.class,0);
		}
		public IncludeColumnsContext includeColumns() {
			return getRuleContext(IncludeColumnsContext.class,0);
		}
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public AssignmentClauseContext assignmentClause() {
			return getRuleContext(AssignmentClauseContext.class,0);
		}
		public FetchClauseContext fetchClause() {
			return getRuleContext(FetchClauseContext.class,0);
		}
		public List<IsolationClauseContext> isolationClause() {
			return getRuleContexts(IsolationClauseContext.class);
		}
		public IsolationClauseContext isolationClause(int i) {
			return getRuleContext(IsolationClauseContext.class,i);
		}
		public List<SkipLockedDataClauseContext> skipLockedDataClause() {
			return getRuleContexts(SkipLockedDataClauseContext.class);
		}
		public SkipLockedDataClauseContext skipLockedDataClause(int i) {
			return getRuleContext(SkipLockedDataClauseContext.class,i);
		}
		public QuerynoClauseContext querynoClause() {
			return getRuleContext(QuerynoClauseContext.class,0);
		}
		public SearchedDeleteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searchedDelete; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSearchedDelete(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSearchedDelete(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSearchedDelete(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SearchedDeleteContext searchedDelete() throws RecognitionException {
		SearchedDeleteContext _localctx = new SearchedDeleteContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_searchedDelete);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2121);
			match(DELETE);
			setState(2122);
			match(FROM);
			setState(2123);
			tableName();
			setState(2125);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,159,_ctx) ) {
			case 1:
				{
				setState(2124);
				periodClause();
				}
				break;
			}
			setState(2128);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,160,_ctx) ) {
			case 1:
				{
				setState(2127);
				correlationName();
				}
				break;
			}
			setState(2131);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INCLUDE) {
				{
				setState(2130);
				includeColumns();
				}
			}

			setState(2135);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SET) {
				{
				setState(2133);
				match(SET);
				setState(2134);
				assignmentClause();
				}
			}

			{
			setState(2137);
			match(WHERE);
			setState(2138);
			searchCondition();
			}
			setState(2141);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,163,_ctx) ) {
			case 1:
				{
				setState(2140);
				fetchClause();
				}
				break;
			}
			setState(2147);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,165,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(2145);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case WITH:
						{
						setState(2143);
						isolationClause();
						}
						break;
					case SKIP_:
						{
						setState(2144);
						skipLockedDataClause();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(2149);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,165,_ctx);
			}
			setState(2151);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,166,_ctx) ) {
			case 1:
				{
				setState(2150);
				querynoClause();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PositionedDeleteContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(DB2zSQLParser.DELETE, 0); }
		public TerminalNode FROM() { return getToken(DB2zSQLParser.FROM, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(DB2zSQLParser.WHERE, 0); }
		public TerminalNode CURRENT() { return getToken(DB2zSQLParser.CURRENT, 0); }
		public List<TerminalNode> OF() { return getTokens(DB2zSQLParser.OF); }
		public TerminalNode OF(int i) {
			return getToken(DB2zSQLParser.OF, i);
		}
		public CursorNameContext cursorName() {
			return getRuleContext(CursorNameContext.class,0);
		}
		public CorrelationNameContext correlationName() {
			return getRuleContext(CorrelationNameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode ROW() { return getToken(DB2zSQLParser.ROW, 0); }
		public TerminalNode ROWSET() { return getToken(DB2zSQLParser.ROWSET, 0); }
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public PositionedDeleteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_positionedDelete; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPositionedDelete(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPositionedDelete(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPositionedDelete(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PositionedDeleteContext positionedDelete() throws RecognitionException {
		PositionedDeleteContext _localctx = new PositionedDeleteContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_positionedDelete);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2153);
			match(DELETE);
			setState(2154);
			match(FROM);
			setState(2155);
			tableName();
			setState(2157);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,167,_ctx) ) {
			case 1:
				{
				setState(2156);
				correlationName();
				}
				break;
			}
			setState(2159);
			match(WHERE);
			setState(2160);
			match(CURRENT);
			setState(2161);
			match(OF);
			setState(2162);
			cursorName();
			setState(2171);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(2163);
				match(FOR);
				setState(2164);
				match(ROW);
				setState(2167);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case COLON:
					{
					setState(2165);
					hostVariable();
					}
					break;
				case INTEGERLITERAL:
					{
					setState(2166);
					match(INTEGERLITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2169);
				match(OF);
				setState(2170);
				match(ROWSET);
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeleteStatementContext extends ParserRuleContext {
		public SearchedDeleteContext searchedDelete() {
			return getRuleContext(SearchedDeleteContext.class,0);
		}
		public PositionedDeleteContext positionedDelete() {
			return getRuleContext(PositionedDeleteContext.class,0);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deleteStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDeleteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDeleteStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDeleteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeleteStatementContext deleteStatement() throws RecognitionException {
		DeleteStatementContext _localctx = new DeleteStatementContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_deleteStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2175);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,170,_ctx) ) {
			case 1:
				{
				setState(2173);
				searchedDelete();
				}
				break;
			case 2:
				{
				setState(2174);
				positionedDelete();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertStatementContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(DB2zSQLParser.INSERT, 0); }
		public TerminalNode INTO() { return getToken(DB2zSQLParser.INTO, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public MultipleRowInsertContext multipleRowInsert() {
			return getRuleContext(MultipleRowInsertContext.class,0);
		}
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public IncludeColumnsContext includeColumns() {
			return getRuleContext(IncludeColumnsContext.class,0);
		}
		public TerminalNode OVERRIDING() { return getToken(DB2zSQLParser.OVERRIDING, 0); }
		public TerminalNode USER() { return getToken(DB2zSQLParser.USER, 0); }
		public TerminalNode VALUE() { return getToken(DB2zSQLParser.VALUE, 0); }
		public TerminalNode VALUES() { return getToken(DB2zSQLParser.VALUES, 0); }
		public FullSelectContext fullSelect() {
			return getRuleContext(FullSelectContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public List<ValuesList1Context> valuesList1() {
			return getRuleContexts(ValuesList1Context.class);
		}
		public ValuesList1Context valuesList1(int i) {
			return getRuleContext(ValuesList1Context.class,i);
		}
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public List<CommonTableExpressionContext> commonTableExpression() {
			return getRuleContexts(CommonTableExpressionContext.class);
		}
		public CommonTableExpressionContext commonTableExpression(int i) {
			return getRuleContext(CommonTableExpressionContext.class,i);
		}
		public IsolationClauseContext isolationClause() {
			return getRuleContext(IsolationClauseContext.class,0);
		}
		public QuerynoClauseContext querynoClause() {
			return getRuleContext(QuerynoClauseContext.class,0);
		}
		public InsertStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterInsertStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitInsertStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitInsertStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertStatementContext insertStatement() throws RecognitionException {
		InsertStatementContext _localctx = new InsertStatementContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_insertStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2177);
			match(INSERT);
			setState(2178);
			match(INTO);
			setState(2179);
			tableName();
			setState(2191);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,172,_ctx) ) {
			case 1:
				{
				setState(2180);
				match(LPAREN);
				setState(2181);
				columnName();
				setState(2186);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2182);
					match(COMMA);
					setState(2183);
					columnName();
					}
					}
					setState(2188);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2189);
				match(RPAREN);
				}
				break;
			}
			setState(2194);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INCLUDE) {
				{
				setState(2193);
				includeColumns();
				}
			}

			setState(2199);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OVERRIDING) {
				{
				setState(2196);
				match(OVERRIDING);
				setState(2197);
				match(USER);
				setState(2198);
				match(VALUE);
				}
			}

			setState(2235);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,181,_ctx) ) {
			case 1:
				{
				{
				setState(2201);
				match(VALUES);
				setState(2214);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,176,_ctx) ) {
				case 1:
					{
					setState(2202);
					valuesList1();
					}
					break;
				case 2:
					{
					{
					setState(2203);
					match(LPAREN);
					setState(2204);
					valuesList1();
					setState(2209);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2205);
						match(COMMA);
						setState(2206);
						valuesList1();
						}
						}
						setState(2211);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2212);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 2:
				{
				{
				setState(2225);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(2216);
					match(WITH);
					setState(2217);
					commonTableExpression();
					setState(2222);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2218);
						match(COMMA);
						setState(2219);
						commonTableExpression();
						}
						}
						setState(2224);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(2227);
				fullSelect();
				setState(2229);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(2228);
					isolationClause();
					}
				}

				setState(2232);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==QUERYNO) {
					{
					setState(2231);
					querynoClause();
					}
				}

				}
				}
				break;
			case 3:
				{
				setState(2234);
				multipleRowInsert();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MergeStatementContext extends ParserRuleContext {
		public TerminalNode MERGE() { return getToken(DB2zSQLParser.MERGE, 0); }
		public TerminalNode INTO() { return getToken(DB2zSQLParser.INTO, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode USING() { return getToken(DB2zSQLParser.USING, 0); }
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public SearchConditionContext searchCondition() {
			return getRuleContext(SearchConditionContext.class,0);
		}
		public SourceValuesContext sourceValues() {
			return getRuleContext(SourceValuesContext.class,0);
		}
		public CorrelationClauseContext correlationClause() {
			return getRuleContext(CorrelationClauseContext.class,0);
		}
		public IncludeColumnsContext includeColumns() {
			return getRuleContext(IncludeColumnsContext.class,0);
		}
		public List<TerminalNode> WHEN() { return getTokens(DB2zSQLParser.WHEN); }
		public TerminalNode WHEN(int i) {
			return getToken(DB2zSQLParser.WHEN, i);
		}
		public List<MatchingConditionContext> matchingCondition() {
			return getRuleContexts(MatchingConditionContext.class);
		}
		public MatchingConditionContext matchingCondition(int i) {
			return getRuleContext(MatchingConditionContext.class,i);
		}
		public List<TerminalNode> THEN() { return getTokens(DB2zSQLParser.THEN); }
		public TerminalNode THEN(int i) {
			return getToken(DB2zSQLParser.THEN, i);
		}
		public TerminalNode ELSE() { return getToken(DB2zSQLParser.ELSE, 0); }
		public TerminalNode IGNORE() { return getToken(DB2zSQLParser.IGNORE, 0); }
		public NotAtomicPhraseContext notAtomicPhrase() {
			return getRuleContext(NotAtomicPhraseContext.class,0);
		}
		public QuerynoClauseContext querynoClause() {
			return getRuleContext(QuerynoClauseContext.class,0);
		}
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public List<ModificationOperationContext> modificationOperation() {
			return getRuleContexts(ModificationOperationContext.class);
		}
		public ModificationOperationContext modificationOperation(int i) {
			return getRuleContext(ModificationOperationContext.class,i);
		}
		public List<SignalStatementContext> signalStatement() {
			return getRuleContexts(SignalStatementContext.class);
		}
		public SignalStatementContext signalStatement(int i) {
			return getRuleContext(SignalStatementContext.class,i);
		}
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public MergeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mergeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterMergeStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitMergeStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitMergeStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MergeStatementContext mergeStatement() throws RecognitionException {
		MergeStatementContext _localctx = new MergeStatementContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_mergeStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2237);
			match(MERGE);
			setState(2238);
			match(INTO);
			setState(2239);
			tableName();
			setState(2241);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,182,_ctx) ) {
			case 1:
				{
				setState(2240);
				correlationClause();
				}
				break;
			}
			setState(2244);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INCLUDE) {
				{
				setState(2243);
				includeColumns();
				}
			}

			setState(2246);
			match(USING);
			setState(2261);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,186,_ctx) ) {
			case 1:
				{
				{
				setState(2250);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,184,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2247);
						match(LPAREN);
						}
						} 
					}
					setState(2252);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,184,_ctx);
				}
				setState(2253);
				tableReference();
				setState(2257);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==RPAREN) {
					{
					{
					setState(2254);
					match(RPAREN);
					}
					}
					setState(2259);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case 2:
				{
				setState(2260);
				sourceValues();
				}
				break;
			}
			setState(2263);
			match(ON);
			setState(2264);
			searchCondition();
			setState(2272); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2265);
				match(WHEN);
				setState(2266);
				matchingCondition();
				setState(2267);
				match(THEN);
				setState(2270);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DELETE:
				case INSERT:
				case UPDATE:
					{
					setState(2268);
					modificationOperation();
					}
					break;
				case SIGNAL:
					{
					setState(2269);
					signalStatement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				setState(2274); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(2278);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(2276);
				match(ELSE);
				setState(2277);
				match(IGNORE);
				}
			}

			setState(2281);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,190,_ctx) ) {
			case 1:
				{
				setState(2280);
				notAtomicPhrase();
				}
				break;
			}
			setState(2284);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,191,_ctx) ) {
			case 1:
				{
				setState(2283);
				querynoClause();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SearchedUpdateContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(DB2zSQLParser.UPDATE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public AssignmentClauseContext assignmentClause() {
			return getRuleContext(AssignmentClauseContext.class,0);
		}
		public PeriodClauseContext periodClause() {
			return getRuleContext(PeriodClauseContext.class,0);
		}
		public CorrelationNameContext correlationName() {
			return getRuleContext(CorrelationNameContext.class,0);
		}
		public IncludeColumnsContext includeColumns() {
			return getRuleContext(IncludeColumnsContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(DB2zSQLParser.WHERE, 0); }
		public SearchConditionContext searchCondition() {
			return getRuleContext(SearchConditionContext.class,0);
		}
		public List<IsolationClauseContext> isolationClause() {
			return getRuleContexts(IsolationClauseContext.class);
		}
		public IsolationClauseContext isolationClause(int i) {
			return getRuleContext(IsolationClauseContext.class,i);
		}
		public List<SkipLockedDataClauseContext> skipLockedDataClause() {
			return getRuleContexts(SkipLockedDataClauseContext.class);
		}
		public SkipLockedDataClauseContext skipLockedDataClause(int i) {
			return getRuleContext(SkipLockedDataClauseContext.class,i);
		}
		public QuerynoClauseContext querynoClause() {
			return getRuleContext(QuerynoClauseContext.class,0);
		}
		public SearchedUpdateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searchedUpdate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSearchedUpdate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSearchedUpdate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSearchedUpdate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SearchedUpdateContext searchedUpdate() throws RecognitionException {
		SearchedUpdateContext _localctx = new SearchedUpdateContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_searchedUpdate);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2286);
			match(UPDATE);
			setState(2287);
			tableName();
			setState(2289);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,192,_ctx) ) {
			case 1:
				{
				setState(2288);
				periodClause();
				}
				break;
			}
			setState(2292);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,193,_ctx) ) {
			case 1:
				{
				setState(2291);
				correlationName();
				}
				break;
			}
			setState(2295);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INCLUDE) {
				{
				setState(2294);
				includeColumns();
				}
			}

			setState(2297);
			match(SET);
			setState(2298);
			assignmentClause();
			setState(2301);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,195,_ctx) ) {
			case 1:
				{
				setState(2299);
				match(WHERE);
				setState(2300);
				searchCondition();
				}
				break;
			}
			setState(2307);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,197,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(2305);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case WITH:
						{
						setState(2303);
						isolationClause();
						}
						break;
					case SKIP_:
						{
						setState(2304);
						skipLockedDataClause();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(2309);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,197,_ctx);
			}
			setState(2311);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,198,_ctx) ) {
			case 1:
				{
				setState(2310);
				querynoClause();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PositionedUpdateContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(DB2zSQLParser.UPDATE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public AssignmentClauseContext assignmentClause() {
			return getRuleContext(AssignmentClauseContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(DB2zSQLParser.WHERE, 0); }
		public TerminalNode CURRENT() { return getToken(DB2zSQLParser.CURRENT, 0); }
		public List<TerminalNode> OF() { return getTokens(DB2zSQLParser.OF); }
		public TerminalNode OF(int i) {
			return getToken(DB2zSQLParser.OF, i);
		}
		public CursorNameContext cursorName() {
			return getRuleContext(CursorNameContext.class,0);
		}
		public CorrelationNameContext correlationName() {
			return getRuleContext(CorrelationNameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode ROW() { return getToken(DB2zSQLParser.ROW, 0); }
		public TerminalNode ROWSET() { return getToken(DB2zSQLParser.ROWSET, 0); }
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public PositionedUpdateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_positionedUpdate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPositionedUpdate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPositionedUpdate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPositionedUpdate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PositionedUpdateContext positionedUpdate() throws RecognitionException {
		PositionedUpdateContext _localctx = new PositionedUpdateContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_positionedUpdate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2313);
			match(UPDATE);
			setState(2314);
			tableName();
			setState(2316);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,199,_ctx) ) {
			case 1:
				{
				setState(2315);
				correlationName();
				}
				break;
			}
			setState(2318);
			match(SET);
			setState(2319);
			assignmentClause();
			setState(2320);
			match(WHERE);
			setState(2321);
			match(CURRENT);
			setState(2322);
			match(OF);
			setState(2323);
			cursorName();
			setState(2332);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(2324);
				match(FOR);
				setState(2325);
				match(ROW);
				setState(2328);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case COLON:
					{
					setState(2326);
					hostVariable();
					}
					break;
				case INTEGERLITERAL:
					{
					setState(2327);
					match(INTEGERLITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2330);
				match(OF);
				setState(2331);
				match(ROWSET);
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateStatementContext extends ParserRuleContext {
		public SearchedUpdateContext searchedUpdate() {
			return getRuleContext(SearchedUpdateContext.class,0);
		}
		public PositionedUpdateContext positionedUpdate() {
			return getRuleContext(PositionedUpdateContext.class,0);
		}
		public UpdateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterUpdateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitUpdateStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitUpdateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateStatementContext updateStatement() throws RecognitionException {
		UpdateStatementContext _localctx = new UpdateStatementContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_updateStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2336);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,202,_ctx) ) {
			case 1:
				{
				setState(2334);
				searchedUpdate();
				}
				break;
			case 2:
				{
				setState(2335);
				positionedUpdate();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SourceValuesContext extends ParserRuleContext {
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public TerminalNode VALUES() { return getToken(DB2zSQLParser.VALUES, 0); }
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public CorrelationNameContext correlationName() {
			return getRuleContext(CorrelationNameContext.class,0);
		}
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public ValuesSingleRowContext valuesSingleRow() {
			return getRuleContext(ValuesSingleRowContext.class,0);
		}
		public ValuesMultipleRowContext valuesMultipleRow() {
			return getRuleContext(ValuesMultipleRowContext.class,0);
		}
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public SourceValuesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sourceValues; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSourceValues(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSourceValues(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSourceValues(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SourceValuesContext sourceValues() throws RecognitionException {
		SourceValuesContext _localctx = new SourceValuesContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_sourceValues);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2338);
			match(LPAREN);
			setState(2339);
			match(VALUES);
			setState(2342);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,203,_ctx) ) {
			case 1:
				{
				setState(2340);
				valuesSingleRow();
				}
				break;
			case 2:
				{
				setState(2341);
				valuesMultipleRow();
				}
				break;
			}
			setState(2344);
			match(RPAREN);
			setState(2346);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,204,_ctx) ) {
			case 1:
				{
				setState(2345);
				match(AS);
				}
				break;
			}
			setState(2348);
			correlationName();
			setState(2349);
			match(LPAREN);
			setState(2350);
			columnName();
			setState(2355);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2351);
				match(COMMA);
				setState(2352);
				columnName();
				}
				}
				setState(2357);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2358);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValuesSingleRowContext extends ParserRuleContext {
		public List<ValuesList3Context> valuesList3() {
			return getRuleContexts(ValuesList3Context.class);
		}
		public ValuesList3Context valuesList3(int i) {
			return getRuleContext(ValuesList3Context.class,i);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public ValuesSingleRowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valuesSingleRow; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterValuesSingleRow(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitValuesSingleRow(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitValuesSingleRow(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValuesSingleRowContext valuesSingleRow() throws RecognitionException {
		ValuesSingleRowContext _localctx = new ValuesSingleRowContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_valuesSingleRow);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2372);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,207,_ctx) ) {
			case 1:
				{
				setState(2360);
				valuesList3();
				}
				break;
			case 2:
				{
				{
				setState(2361);
				match(LPAREN);
				setState(2362);
				valuesList3();
				setState(2367);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2363);
					match(COMMA);
					setState(2364);
					valuesList3();
					}
					}
					setState(2369);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2370);
				match(RPAREN);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValuesMultipleRowContext extends ParserRuleContext {
		public List<ValuesList4Context> valuesList4() {
			return getRuleContexts(ValuesList4Context.class);
		}
		public ValuesList4Context valuesList4(int i) {
			return getRuleContext(ValuesList4Context.class,i);
		}
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode ROWS() { return getToken(DB2zSQLParser.ROWS, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public ValuesMultipleRowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valuesMultipleRow; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterValuesMultipleRow(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitValuesMultipleRow(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitValuesMultipleRow(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValuesMultipleRowContext valuesMultipleRow() throws RecognitionException {
		ValuesMultipleRowContext _localctx = new ValuesMultipleRowContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_valuesMultipleRow);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2393);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,210,_ctx) ) {
			case 1:
				{
				setState(2374);
				valuesList4();
				}
				break;
			case 2:
				{
				{
				setState(2375);
				match(LPAREN);
				setState(2376);
				valuesList4();
				setState(2381);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2377);
					match(COMMA);
					setState(2378);
					valuesList4();
					}
					}
					setState(2383);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2384);
				match(RPAREN);
				}
				setState(2386);
				match(FOR);
				setState(2389);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case COLON:
					{
					setState(2387);
					hostVariable();
					}
					break;
				case INTEGERLITERAL:
					{
					setState(2388);
					match(INTEGERLITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2391);
				match(ROWS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MatchingConditionContext extends ParserRuleContext {
		public TerminalNode MATCHED() { return getToken(DB2zSQLParser.MATCHED, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TerminalNode AND() { return getToken(DB2zSQLParser.AND, 0); }
		public SearchConditionContext searchCondition() {
			return getRuleContext(SearchConditionContext.class,0);
		}
		public MatchingConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_matchingCondition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterMatchingCondition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitMatchingCondition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitMatchingCondition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MatchingConditionContext matchingCondition() throws RecognitionException {
		MatchingConditionContext _localctx = new MatchingConditionContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_matchingCondition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2396);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2395);
				match(NOT);
				}
			}

			setState(2398);
			match(MATCHED);
			setState(2401);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(2399);
				match(AND);
				setState(2400);
				searchCondition();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ModificationOperationContext extends ParserRuleContext {
		public UpdateOperationContext updateOperation() {
			return getRuleContext(UpdateOperationContext.class,0);
		}
		public DeleteOperationContext deleteOperation() {
			return getRuleContext(DeleteOperationContext.class,0);
		}
		public InsertOperationContext insertOperation() {
			return getRuleContext(InsertOperationContext.class,0);
		}
		public ModificationOperationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modificationOperation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterModificationOperation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitModificationOperation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitModificationOperation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ModificationOperationContext modificationOperation() throws RecognitionException {
		ModificationOperationContext _localctx = new ModificationOperationContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_modificationOperation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2406);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UPDATE:
				{
				setState(2403);
				updateOperation();
				}
				break;
			case DELETE:
				{
				setState(2404);
				deleteOperation();
				}
				break;
			case INSERT:
				{
				setState(2405);
				insertOperation();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AssignmentClauseContext extends ParserRuleContext {
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public List<TerminalNode> EQ() { return getTokens(DB2zSQLParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(DB2zSQLParser.EQ, i);
		}
		public List<ValuesList1Context> valuesList1() {
			return getRuleContexts(ValuesList1Context.class);
		}
		public ValuesList1Context valuesList1(int i) {
			return getRuleContext(ValuesList1Context.class,i);
		}
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public FullSelectContext fullSelect() {
			return getRuleContext(FullSelectContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public AssignmentClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignmentClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAssignmentClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAssignmentClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAssignmentClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AssignmentClauseContext assignmentClause() throws RecognitionException {
		AssignmentClauseContext _localctx = new AssignmentClauseContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_assignmentClause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2446);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,218,_ctx) ) {
			case 1:
				{
				{
				setState(2408);
				columnName();
				setState(2409);
				match(EQ);
				setState(2410);
				valuesList1();
				setState(2418);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,214,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2411);
						match(COMMA);
						setState(2412);
						columnName();
						setState(2413);
						match(EQ);
						setState(2414);
						valuesList1();
						}
						} 
					}
					setState(2420);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,214,_ctx);
				}
				}
				}
				break;
			case 2:
				{
				setState(2442);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,217,_ctx) ) {
				case 1:
					{
					setState(2421);
					match(LPAREN);
					setState(2422);
					columnName();
					setState(2427);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2423);
						match(COMMA);
						setState(2424);
						columnName();
						}
						}
						setState(2429);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2430);
					match(RPAREN);
					setState(2431);
					match(EQ);
					setState(2432);
					match(LPAREN);
					{
					setState(2433);
					valuesList1();
					setState(2438);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2434);
						match(COMMA);
						setState(2435);
						valuesList1();
						}
						}
						setState(2440);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					}
					break;
				case 2:
					{
					setState(2441);
					fullSelect();
					}
					break;
				}
				setState(2444);
				match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateOperationContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(DB2zSQLParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public List<AssignmentClauseContext> assignmentClause() {
			return getRuleContexts(AssignmentClauseContext.class);
		}
		public AssignmentClauseContext assignmentClause(int i) {
			return getRuleContext(AssignmentClauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public UpdateOperationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateOperation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterUpdateOperation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitUpdateOperation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitUpdateOperation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateOperationContext updateOperation() throws RecognitionException {
		UpdateOperationContext _localctx = new UpdateOperationContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_updateOperation);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2448);
			match(UPDATE);
			setState(2449);
			match(SET);
			setState(2450);
			assignmentClause();
			setState(2455);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,219,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2451);
					match(COMMA);
					setState(2452);
					assignmentClause();
					}
					} 
				}
				setState(2457);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,219,_ctx);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeleteOperationContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(DB2zSQLParser.DELETE, 0); }
		public DeleteOperationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deleteOperation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDeleteOperation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDeleteOperation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDeleteOperation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeleteOperationContext deleteOperation() throws RecognitionException {
		DeleteOperationContext _localctx = new DeleteOperationContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_deleteOperation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2458);
			match(DELETE);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertOperationContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(DB2zSQLParser.INSERT, 0); }
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public TerminalNode VALUES() { return getToken(DB2zSQLParser.VALUES, 0); }
		public List<ValuesList1Context> valuesList1() {
			return getRuleContexts(ValuesList1Context.class);
		}
		public ValuesList1Context valuesList1(int i) {
			return getRuleContext(ValuesList1Context.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public InsertOperationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertOperation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterInsertOperation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitInsertOperation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitInsertOperation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertOperationContext insertOperation() throws RecognitionException {
		InsertOperationContext _localctx = new InsertOperationContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_insertOperation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2460);
			match(INSERT);
			setState(2461);
			match(LPAREN);
			setState(2462);
			columnName();
			setState(2467);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2463);
				match(COMMA);
				setState(2464);
				columnName();
				}
				}
				setState(2469);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2470);
			match(RPAREN);
			setState(2471);
			match(VALUES);
			setState(2484);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,222,_ctx) ) {
			case 1:
				{
				setState(2472);
				valuesList1();
				}
				break;
			case 2:
				{
				{
				setState(2473);
				match(LPAREN);
				setState(2474);
				valuesList1();
				setState(2479);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2475);
					match(COMMA);
					setState(2476);
					valuesList1();
					}
					}
					setState(2481);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2482);
				match(RPAREN);
				}
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignalStatementContext extends ParserRuleContext {
		public TerminalNode SIGNAL() { return getToken(DB2zSQLParser.SIGNAL, 0); }
		public TerminalNode SQLSTATE() { return getToken(DB2zSQLParser.SQLSTATE, 0); }
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public TerminalNode VALUE() { return getToken(DB2zSQLParser.VALUE, 0); }
		public SignalInformationContext signalInformation() {
			return getRuleContext(SignalInformationContext.class,0);
		}
		public SignalStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signalStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSignalStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSignalStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSignalStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignalStatementContext signalStatement() throws RecognitionException {
		SignalStatementContext _localctx = new SignalStatementContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_signalStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2486);
			match(SIGNAL);
			setState(2487);
			match(SQLSTATE);
			setState(2489);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VALUE) {
				{
				setState(2488);
				match(VALUE);
				}
			}

			setState(2491);
			match(NONNUMERICLITERAL);
			setState(2493);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SET) {
				{
				setState(2492);
				signalInformation();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignalInformationContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public TerminalNode MESSAGE_TEXT() { return getToken(DB2zSQLParser.MESSAGE_TEXT, 0); }
		public TerminalNode EQ() { return getToken(DB2zSQLParser.EQ, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<OperatorContext> operator() {
			return getRuleContexts(OperatorContext.class);
		}
		public OperatorContext operator(int i) {
			return getRuleContext(OperatorContext.class,i);
		}
		public SignalInformationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signalInformation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSignalInformation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSignalInformation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSignalInformation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignalInformationContext signalInformation() throws RecognitionException {
		SignalInformationContext _localctx = new SignalInformationContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_signalInformation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2495);
			match(SET);
			setState(2496);
			match(MESSAGE_TEXT);
			setState(2497);
			match(EQ);
			setState(2498);
			expression();
			setState(2504);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 12)) & ~0x3f) == 0 && ((1L << (_la - 12)) & ((1L << (PLUS - 12)) | (1L << (MINUS - 12)) | (1L << (SPLAT - 12)) | (1L << (SLASH - 12)) | (1L << (CONCATOP - 12)) | (1L << (CONCAT - 12)))) != 0)) {
				{
				{
				setState(2499);
				operator();
				setState(2500);
				expression();
				}
				}
				setState(2506);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValuesList1Context extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(DB2zSQLParser.DEFAULT, 0); }
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<OperatorContext> operator() {
			return getRuleContexts(OperatorContext.class);
		}
		public OperatorContext operator(int i) {
			return getRuleContext(OperatorContext.class,i);
		}
		public ValuesList1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valuesList1; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterValuesList1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitValuesList1(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitValuesList1(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValuesList1Context valuesList1() throws RecognitionException {
		ValuesList1Context _localctx = new ValuesList1Context(_ctx, getState());
		enterRule(_localctx, 244, RULE_valuesList1);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2518);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,227,_ctx) ) {
			case 1:
				{
				{
				setState(2507);
				expression();
				setState(2513);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (((((_la - 12)) & ~0x3f) == 0 && ((1L << (_la - 12)) & ((1L << (PLUS - 12)) | (1L << (MINUS - 12)) | (1L << (SPLAT - 12)) | (1L << (SLASH - 12)) | (1L << (CONCATOP - 12)) | (1L << (CONCAT - 12)))) != 0)) {
					{
					{
					setState(2508);
					operator();
					setState(2509);
					expression();
					}
					}
					setState(2515);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case 2:
				{
				setState(2516);
				match(DEFAULT);
				}
				break;
			case 3:
				{
				setState(2517);
				match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValuesList2Context extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(DB2zSQLParser.DEFAULT, 0); }
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public ValuesList2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valuesList2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterValuesList2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitValuesList2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitValuesList2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValuesList2Context valuesList2() throws RecognitionException {
		ValuesList2Context _localctx = new ValuesList2Context(_ctx, getState());
		enterRule(_localctx, 246, RULE_valuesList2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2524);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,228,_ctx) ) {
			case 1:
				{
				setState(2520);
				expression();
				}
				break;
			case 2:
				{
				setState(2521);
				hostVariable();
				}
				break;
			case 3:
				{
				setState(2522);
				match(DEFAULT);
				}
				break;
			case 4:
				{
				setState(2523);
				match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValuesList3Context extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public ValuesList3Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valuesList3; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterValuesList3(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitValuesList3(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitValuesList3(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValuesList3Context valuesList3() throws RecognitionException {
		ValuesList3Context _localctx = new ValuesList3Context(_ctx, getState());
		enterRule(_localctx, 248, RULE_valuesList3);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2528);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,229,_ctx) ) {
			case 1:
				{
				setState(2526);
				expression();
				}
				break;
			case 2:
				{
				setState(2527);
				match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValuesList4Context extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public ValuesList4Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valuesList4; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterValuesList4(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitValuesList4(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitValuesList4(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValuesList4Context valuesList4() throws RecognitionException {
		ValuesList4Context _localctx = new ValuesList4Context(_ctx, getState());
		enterRule(_localctx, 250, RULE_valuesList4);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2533);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,230,_ctx) ) {
			case 1:
				{
				setState(2530);
				expression();
				}
				break;
			case 2:
				{
				setState(2531);
				hostVariable();
				}
				break;
			case 3:
				{
				setState(2532);
				match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IncludeColumnsContext extends ParserRuleContext {
		public TerminalNode INCLUDE() { return getToken(DB2zSQLParser.INCLUDE, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public List<DataTypeContext> dataType() {
			return getRuleContexts(DataTypeContext.class);
		}
		public DataTypeContext dataType(int i) {
			return getRuleContext(DataTypeContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public IncludeColumnsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_includeColumns; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterIncludeColumns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitIncludeColumns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitIncludeColumns(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IncludeColumnsContext includeColumns() throws RecognitionException {
		IncludeColumnsContext _localctx = new IncludeColumnsContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_includeColumns);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2535);
			match(INCLUDE);
			setState(2536);
			match(LPAREN);
			setState(2537);
			columnName();
			setState(2538);
			dataType();
			setState(2545);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2539);
				match(COMMA);
				setState(2540);
				columnName();
				setState(2541);
				dataType();
				}
				}
				setState(2547);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2548);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultipleRowInsertContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(DB2zSQLParser.VALUES, 0); }
		public List<ValuesList2Context> valuesList2() {
			return getRuleContexts(ValuesList2Context.class);
		}
		public ValuesList2Context valuesList2(int i) {
			return getRuleContext(ValuesList2Context.class,i);
		}
		public TerminalNode ATOMIC() { return getToken(DB2zSQLParser.ATOMIC, 0); }
		public NotAtomicPhraseContext notAtomicPhrase() {
			return getRuleContext(NotAtomicPhraseContext.class,0);
		}
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode ROWS() { return getToken(DB2zSQLParser.ROWS, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public MultipleRowInsertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipleRowInsert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterMultipleRowInsert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitMultipleRowInsert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitMultipleRowInsert(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultipleRowInsertContext multipleRowInsert() throws RecognitionException {
		MultipleRowInsertContext _localctx = new MultipleRowInsertContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_multipleRowInsert);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2550);
			match(VALUES);
			setState(2563);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,233,_ctx) ) {
			case 1:
				{
				setState(2551);
				valuesList2();
				}
				break;
			case 2:
				{
				{
				setState(2552);
				match(LPAREN);
				setState(2553);
				valuesList2();
				setState(2558);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2554);
					match(COMMA);
					setState(2555);
					valuesList2();
					}
					}
					setState(2560);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2561);
				match(RPAREN);
				}
				}
				break;
			}
			setState(2571);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(2565);
				match(FOR);
				setState(2568);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case COLON:
					{
					setState(2566);
					hostVariable();
					}
					break;
				case INTEGERLITERAL:
					{
					setState(2567);
					match(INTEGERLITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2570);
				match(ROWS);
				}
			}

			setState(2575);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ATOMIC:
				{
				setState(2573);
				match(ATOMIC);
				}
				break;
			case NOT:
				{
				setState(2574);
				notAtomicPhrase();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RegenerateClauseContext extends ParserRuleContext {
		public TerminalNode REGENERATE() { return getToken(DB2zSQLParser.REGENERATE, 0); }
		public TerminalNode USING() { return getToken(DB2zSQLParser.USING, 0); }
		public TerminalNode APPLICATION() { return getToken(DB2zSQLParser.APPLICATION, 0); }
		public TerminalNode COMPATIBILITY() { return getToken(DB2zSQLParser.COMPATIBILITY, 0); }
		public ApplCompatValueContext applCompatValue() {
			return getRuleContext(ApplCompatValueContext.class,0);
		}
		public RegenerateClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regenerateClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRegenerateClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRegenerateClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRegenerateClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RegenerateClauseContext regenerateClause() throws RecognitionException {
		RegenerateClauseContext _localctx = new RegenerateClauseContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_regenerateClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2577);
			match(REGENERATE);
			setState(2582);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,237,_ctx) ) {
			case 1:
				{
				setState(2578);
				match(USING);
				setState(2579);
				match(APPLICATION);
				setState(2580);
				match(COMPATIBILITY);
				setState(2581);
				applCompatValue();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterIndexOptionsContext extends ParserRuleContext {
		public BufferpoolOptionContext bufferpoolOption() {
			return getRuleContext(BufferpoolOptionContext.class,0);
		}
		public CloseOptionContext closeOption() {
			return getRuleContext(CloseOptionContext.class,0);
		}
		public CopyOptionContext copyOption() {
			return getRuleContext(CopyOptionContext.class,0);
		}
		public DssizeOptionContext dssizeOption() {
			return getRuleContext(DssizeOptionContext.class,0);
		}
		public PiecesizeOptionContext piecesizeOption() {
			return getRuleContext(PiecesizeOptionContext.class,0);
		}
		public UsingSpecification1Context usingSpecification1() {
			return getRuleContext(UsingSpecification1Context.class,0);
		}
		public FreeSpecificationContext freeSpecification() {
			return getRuleContext(FreeSpecificationContext.class,0);
		}
		public GbpcacheSpecificationContext gbpcacheSpecification() {
			return getRuleContext(GbpcacheSpecificationContext.class,0);
		}
		public ClusterOptionContext clusterOption() {
			return getRuleContext(ClusterOptionContext.class,0);
		}
		public PaddedOptionContext paddedOption() {
			return getRuleContext(PaddedOptionContext.class,0);
		}
		public CompressOptionContext compressOption() {
			return getRuleContext(CompressOptionContext.class,0);
		}
		public TerminalNode ADD() { return getToken(DB2zSQLParser.ADD, 0); }
		public TerminalNode COLUMN() { return getToken(DB2zSQLParser.COLUMN, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode INCLUDE() { return getToken(DB2zSQLParser.INCLUDE, 0); }
		public TerminalNode ASC() { return getToken(DB2zSQLParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(DB2zSQLParser.DESC, 0); }
		public TerminalNode RANDOM() { return getToken(DB2zSQLParser.RANDOM, 0); }
		public AlterIndexOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterIndexOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterIndexOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterIndexOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterIndexOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterIndexOptionsContext alterIndexOptions() throws RecognitionException {
		AlterIndexOptionsContext _localctx = new AlterIndexOptionsContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_alterIndexOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2612);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,240,_ctx) ) {
			case 1:
				{
				setState(2584);
				bufferpoolOption();
				}
				break;
			case 2:
				{
				setState(2585);
				closeOption();
				}
				break;
			case 3:
				{
				setState(2586);
				copyOption();
				}
				break;
			case 4:
				{
				setState(2587);
				dssizeOption();
				}
				break;
			case 5:
				{
				setState(2588);
				piecesizeOption();
				}
				break;
			case 6:
				{
				setState(2589);
				usingSpecification1();
				}
				break;
			case 7:
				{
				setState(2590);
				freeSpecification();
				}
				break;
			case 8:
				{
				setState(2591);
				gbpcacheSpecification();
				}
				break;
			case 9:
				{
				setState(2592);
				clusterOption();
				}
				break;
			case 10:
				{
				setState(2593);
				paddedOption();
				}
				break;
			case 11:
				{
				setState(2594);
				compressOption();
				}
				break;
			case 12:
				{
				{
				setState(2595);
				match(ADD);
				setState(2610);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case COLUMN:
					{
					{
					setState(2596);
					match(COLUMN);
					setState(2597);
					match(LPAREN);
					setState(2598);
					columnName();
					setState(2600);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ASC || _la==DESC || _la==RANDOM) {
						{
						setState(2599);
						_la = _input.LA(1);
						if ( !(_la==ASC || _la==DESC || _la==RANDOM) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(2602);
					match(RPAREN);
					}
					}
					break;
				case INCLUDE:
					{
					{
					setState(2604);
					match(INCLUDE);
					setState(2605);
					match(COLUMN);
					setState(2606);
					match(LPAREN);
					setState(2607);
					columnName();
					setState(2608);
					match(RPAREN);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BufferpoolOptionContext extends ParserRuleContext {
		public TerminalNode BUFFERPOOL() { return getToken(DB2zSQLParser.BUFFERPOOL, 0); }
		public BpNameContext bpName() {
			return getRuleContext(BpNameContext.class,0);
		}
		public BufferpoolOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bufferpoolOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterBufferpoolOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitBufferpoolOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitBufferpoolOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BufferpoolOptionContext bufferpoolOption() throws RecognitionException {
		BufferpoolOptionContext _localctx = new BufferpoolOptionContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_bufferpoolOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2614);
			match(BUFFERPOOL);
			setState(2615);
			bpName();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CloseOptionContext extends ParserRuleContext {
		public TerminalNode CLOSE() { return getToken(DB2zSQLParser.CLOSE, 0); }
		public TerminalNode YES() { return getToken(DB2zSQLParser.YES, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public CloseOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_closeOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCloseOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCloseOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCloseOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CloseOptionContext closeOption() throws RecognitionException {
		CloseOptionContext _localctx = new CloseOptionContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_closeOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2617);
			match(CLOSE);
			setState(2618);
			_la = _input.LA(1);
			if ( !(_la==NO || _la==YES) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyOptionContext extends ParserRuleContext {
		public TerminalNode COPY() { return getToken(DB2zSQLParser.COPY, 0); }
		public TerminalNode YES() { return getToken(DB2zSQLParser.YES, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public CopyOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCopyOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCopyOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCopyOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyOptionContext copyOption() throws RecognitionException {
		CopyOptionContext _localctx = new CopyOptionContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_copyOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2620);
			match(COPY);
			setState(2621);
			_la = _input.LA(1);
			if ( !(_la==NO || _la==YES) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DssizeOptionContext extends ParserRuleContext {
		public TerminalNode DSSIZE() { return getToken(DB2zSQLParser.DSSIZE, 0); }
		public TerminalNode SQLIDENTIFIER() { return getToken(DB2zSQLParser.SQLIDENTIFIER, 0); }
		public DssizeOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dssizeOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDssizeOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDssizeOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDssizeOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DssizeOptionContext dssizeOption() throws RecognitionException {
		DssizeOptionContext _localctx = new DssizeOptionContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_dssizeOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2623);
			match(DSSIZE);
			setState(2624);
			match(SQLIDENTIFIER);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PiecesizeOptionContext extends ParserRuleContext {
		public TerminalNode PIECESIZE() { return getToken(DB2zSQLParser.PIECESIZE, 0); }
		public TerminalNode SQLIDENTIFIER() { return getToken(DB2zSQLParser.SQLIDENTIFIER, 0); }
		public PiecesizeOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_piecesizeOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPiecesizeOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPiecesizeOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPiecesizeOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PiecesizeOptionContext piecesizeOption() throws RecognitionException {
		PiecesizeOptionContext _localctx = new PiecesizeOptionContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_piecesizeOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2626);
			match(PIECESIZE);
			setState(2627);
			match(SQLIDENTIFIER);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ClusterOptionContext extends ParserRuleContext {
		public TerminalNode CLUSTER() { return getToken(DB2zSQLParser.CLUSTER, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public ClusterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_clusterOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterClusterOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitClusterOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitClusterOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ClusterOptionContext clusterOption() throws RecognitionException {
		ClusterOptionContext _localctx = new ClusterOptionContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_clusterOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2630);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2629);
				match(NOT);
				}
			}

			setState(2632);
			match(CLUSTER);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PaddedOptionContext extends ParserRuleContext {
		public TerminalNode PADDED() { return getToken(DB2zSQLParser.PADDED, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public PaddedOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_paddedOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPaddedOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPaddedOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPaddedOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PaddedOptionContext paddedOption() throws RecognitionException {
		PaddedOptionContext _localctx = new PaddedOptionContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_paddedOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2635);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2634);
				match(NOT);
				}
			}

			setState(2637);
			match(PADDED);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CompressOptionContext extends ParserRuleContext {
		public TerminalNode COMPRESS() { return getToken(DB2zSQLParser.COMPRESS, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode YES() { return getToken(DB2zSQLParser.YES, 0); }
		public TerminalNode FIXEDLENGTH() { return getToken(DB2zSQLParser.FIXEDLENGTH, 0); }
		public TerminalNode HUFFMAN() { return getToken(DB2zSQLParser.HUFFMAN, 0); }
		public CompressOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compressOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCompressOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCompressOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCompressOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CompressOptionContext compressOption() throws RecognitionException {
		CompressOptionContext _localctx = new CompressOptionContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_compressOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2639);
			match(COMPRESS);
			setState(2645);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case YES:
				{
				{
				setState(2640);
				match(YES);
				setState(2642);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FIXEDLENGTH || _la==HUFFMAN) {
					{
					setState(2641);
					_la = _input.LA(1);
					if ( !(_la==FIXEDLENGTH || _la==HUFFMAN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				}
				break;
			case NO:
				{
				setState(2644);
				match(NO);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefineOptionContext extends ParserRuleContext {
		public TerminalNode DEFINE() { return getToken(DB2zSQLParser.DEFINE, 0); }
		public TerminalNode YES() { return getToken(DB2zSQLParser.YES, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public DefineOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defineOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDefineOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDefineOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDefineOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefineOptionContext defineOption() throws RecognitionException {
		DefineOptionContext _localctx = new DefineOptionContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_defineOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2647);
			match(DEFINE);
			setState(2648);
			_la = _input.LA(1);
			if ( !(_la==NO || _la==YES) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LocksizeOptionContext extends ParserRuleContext {
		public TerminalNode LOCKSIZE() { return getToken(DB2zSQLParser.LOCKSIZE, 0); }
		public TerminalNode ANY() { return getToken(DB2zSQLParser.ANY, 0); }
		public TerminalNode LOB() { return getToken(DB2zSQLParser.LOB, 0); }
		public LocksizeOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_locksizeOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterLocksizeOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitLocksizeOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitLocksizeOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LocksizeOptionContext locksizeOption() throws RecognitionException {
		LocksizeOptionContext _localctx = new LocksizeOptionContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_locksizeOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2650);
			match(LOCKSIZE);
			setState(2651);
			_la = _input.LA(1);
			if ( !(_la==ANY || _la==LOB) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockmaxOptionContext extends ParserRuleContext {
		public TerminalNode LOCKMAX() { return getToken(DB2zSQLParser.LOCKMAX, 0); }
		public TerminalNode SYSTEM() { return getToken(DB2zSQLParser.SYSTEM, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public LockmaxOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockmaxOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterLockmaxOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitLockmaxOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitLockmaxOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockmaxOptionContext lockmaxOption() throws RecognitionException {
		LockmaxOptionContext _localctx = new LockmaxOptionContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_lockmaxOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2653);
			match(LOCKMAX);
			setState(2654);
			_la = _input.LA(1);
			if ( !(_la==INTEGERLITERAL || _la==SYSTEM) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EnableDisableOptionContext extends ParserRuleContext {
		public TerminalNode ENABLE() { return getToken(DB2zSQLParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(DB2zSQLParser.DISABLE, 0); }
		public EnableDisableOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enableDisableOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterEnableDisableOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitEnableDisableOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitEnableDisableOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EnableDisableOptionContext enableDisableOption() throws RecognitionException {
		EnableDisableOptionContext _localctx = new EnableDisableOptionContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_enableDisableOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2656);
			_la = _input.LA(1);
			if ( !(_la==DISABLE || _la==ENABLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoggedOptionContext extends ParserRuleContext {
		public TerminalNode LOGGED() { return getToken(DB2zSQLParser.LOGGED, 0); }
		public TerminalNode LOG() { return getToken(DB2zSQLParser.LOG, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode YES() { return getToken(DB2zSQLParser.YES, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public LoggedOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loggedOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterLoggedOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitLoggedOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitLoggedOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoggedOptionContext loggedOption() throws RecognitionException {
		LoggedOptionContext _localctx = new LoggedOptionContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_loggedOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2666);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,246,_ctx) ) {
			case 1:
				{
				{
				setState(2659);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2658);
					match(NOT);
					}
				}

				setState(2661);
				match(LOGGED);
				}
				}
				break;
			case 2:
				{
				{
				setState(2662);
				match(LOG);
				setState(2663);
				match(NO);
				}
				}
				break;
			case 3:
				{
				{
				setState(2664);
				match(LOG);
				setState(2665);
				match(YES);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NotAtomicPhraseContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TerminalNode ATOMIC() { return getToken(DB2zSQLParser.ATOMIC, 0); }
		public TerminalNode CONTINUE() { return getToken(DB2zSQLParser.CONTINUE, 0); }
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public TerminalNode SQLEXCEPTION() { return getToken(DB2zSQLParser.SQLEXCEPTION, 0); }
		public NotAtomicPhraseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notAtomicPhrase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterNotAtomicPhrase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitNotAtomicPhrase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitNotAtomicPhrase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NotAtomicPhraseContext notAtomicPhrase() throws RecognitionException {
		NotAtomicPhraseContext _localctx = new NotAtomicPhraseContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_notAtomicPhrase);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2668);
			match(NOT);
			setState(2669);
			match(ATOMIC);
			setState(2670);
			match(CONTINUE);
			setState(2671);
			match(ON);
			setState(2672);
			match(SQLEXCEPTION);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterIndexPartitionOptionsContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public PartitionElementContext partitionElement() {
			return getRuleContext(PartitionElementContext.class,0);
		}
		public List<GbpcacheSpecificationContext> gbpcacheSpecification() {
			return getRuleContexts(GbpcacheSpecificationContext.class);
		}
		public GbpcacheSpecificationContext gbpcacheSpecification(int i) {
			return getRuleContext(GbpcacheSpecificationContext.class,i);
		}
		public List<DssizeOptionContext> dssizeOption() {
			return getRuleContexts(DssizeOptionContext.class);
		}
		public DssizeOptionContext dssizeOption(int i) {
			return getRuleContext(DssizeOptionContext.class,i);
		}
		public List<UsingSpecification1Context> usingSpecification1() {
			return getRuleContexts(UsingSpecification1Context.class);
		}
		public UsingSpecification1Context usingSpecification1(int i) {
			return getRuleContext(UsingSpecification1Context.class,i);
		}
		public List<FreeSpecificationContext> freeSpecification() {
			return getRuleContexts(FreeSpecificationContext.class);
		}
		public FreeSpecificationContext freeSpecification(int i) {
			return getRuleContext(FreeSpecificationContext.class,i);
		}
		public AlterIndexPartitionOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterIndexPartitionOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterIndexPartitionOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterIndexPartitionOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterIndexPartitionOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterIndexPartitionOptionsContext alterIndexPartitionOptions() throws RecognitionException {
		AlterIndexPartitionOptionsContext _localctx = new AlterIndexPartitionOptionsContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_alterIndexPartitionOptions);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2674);
			match(ALTER);
			setState(2675);
			partitionElement();
			setState(2690);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DSSIZE || _la==ERASE || _la==PRIQTY || _la==SECQTY || _la==USING || ((((_la - 461)) & ~0x3f) == 0 && ((1L << (_la - 461)) & ((1L << (FREEPAGE - 461)) | (1L << (GBPCACHE - 461)) | (1L << (PCTFREE - 461)))) != 0)) {
				{
				setState(2688);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ERASE:
				case PRIQTY:
				case SECQTY:
				case USING:
					{
					setState(2677); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(2676);
							usingSpecification1();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(2679); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,247,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				case FREEPAGE:
				case PCTFREE:
					{
					setState(2682); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(2681);
							freeSpecification();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(2684); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,248,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				case GBPCACHE:
					{
					setState(2686);
					gbpcacheSpecification();
					}
					break;
				case DSSIZE:
					{
					setState(2687);
					dssizeOption();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(2692);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UsingSpecification1Context extends ParserRuleContext {
		public TerminalNode USING() { return getToken(DB2zSQLParser.USING, 0); }
		public TerminalNode PRIQTY() { return getToken(DB2zSQLParser.PRIQTY, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode SECQTY() { return getToken(DB2zSQLParser.SECQTY, 0); }
		public TerminalNode ERASE() { return getToken(DB2zSQLParser.ERASE, 0); }
		public TerminalNode YES() { return getToken(DB2zSQLParser.YES, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode VCAT() { return getToken(DB2zSQLParser.VCAT, 0); }
		public CatalogNameContext catalogName() {
			return getRuleContext(CatalogNameContext.class,0);
		}
		public TerminalNode STOGROUP() { return getToken(DB2zSQLParser.STOGROUP, 0); }
		public StogroupNameContext stogroupName() {
			return getRuleContext(StogroupNameContext.class,0);
		}
		public UsingSpecification1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_usingSpecification1; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterUsingSpecification1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitUsingSpecification1(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitUsingSpecification1(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UsingSpecification1Context usingSpecification1() throws RecognitionException {
		UsingSpecification1Context _localctx = new UsingSpecification1Context(_ctx, getState());
		enterRule(_localctx, 290, RULE_usingSpecification1);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2706);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USING:
				{
				{
				setState(2693);
				match(USING);
				setState(2698);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case VCAT:
					{
					{
					setState(2694);
					match(VCAT);
					setState(2695);
					catalogName();
					}
					}
					break;
				case STOGROUP:
					{
					{
					setState(2696);
					match(STOGROUP);
					setState(2697);
					stogroupName();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case PRIQTY:
				{
				{
				setState(2700);
				match(PRIQTY);
				setState(2701);
				match(INTEGERLITERAL);
				}
				}
				break;
			case SECQTY:
				{
				{
				setState(2702);
				match(SECQTY);
				setState(2703);
				match(INTEGERLITERAL);
				}
				}
				break;
			case ERASE:
				{
				{
				setState(2704);
				match(ERASE);
				setState(2705);
				_la = _input.LA(1);
				if ( !(_la==NO || _la==YES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FreeSpecificationContext extends ParserRuleContext {
		public TerminalNode FREEPAGE() { return getToken(DB2zSQLParser.FREEPAGE, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode PCTFREE() { return getToken(DB2zSQLParser.PCTFREE, 0); }
		public FreeSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_freeSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFreeSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFreeSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFreeSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FreeSpecificationContext freeSpecification() throws RecognitionException {
		FreeSpecificationContext _localctx = new FreeSpecificationContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_freeSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2712);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FREEPAGE:
				{
				{
				setState(2708);
				match(FREEPAGE);
				setState(2709);
				match(INTEGERLITERAL);
				}
				}
				break;
			case PCTFREE:
				{
				{
				setState(2710);
				match(PCTFREE);
				setState(2711);
				match(INTEGERLITERAL);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GbpcacheSpecificationContext extends ParserRuleContext {
		public TerminalNode GBPCACHE() { return getToken(DB2zSQLParser.GBPCACHE, 0); }
		public TerminalNode CHANGED() { return getToken(DB2zSQLParser.CHANGED, 0); }
		public TerminalNode ALL() { return getToken(DB2zSQLParser.ALL, 0); }
		public TerminalNode SYSTEM() { return getToken(DB2zSQLParser.SYSTEM, 0); }
		public TerminalNode NONE() { return getToken(DB2zSQLParser.NONE, 0); }
		public GbpcacheSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_gbpcacheSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGbpcacheSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGbpcacheSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGbpcacheSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GbpcacheSpecificationContext gbpcacheSpecification() throws RecognitionException {
		GbpcacheSpecificationContext _localctx = new GbpcacheSpecificationContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_gbpcacheSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2714);
			match(GBPCACHE);
			setState(2715);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==NONE || _la==SYSTEM || _la==CHANGED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionElementContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(DB2zSQLParser.PARTITION, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode ENDING() { return getToken(DB2zSQLParser.ENDING, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<LiteralContext> literal() {
			return getRuleContexts(LiteralContext.class);
		}
		public LiteralContext literal(int i) {
			return getRuleContext(LiteralContext.class,i);
		}
		public List<TerminalNode> MAXVALUE() { return getTokens(DB2zSQLParser.MAXVALUE); }
		public TerminalNode MAXVALUE(int i) {
			return getToken(DB2zSQLParser.MAXVALUE, i);
		}
		public List<TerminalNode> MINVALUE() { return getTokens(DB2zSQLParser.MINVALUE); }
		public TerminalNode MINVALUE(int i) {
			return getToken(DB2zSQLParser.MINVALUE, i);
		}
		public TerminalNode AT() { return getToken(DB2zSQLParser.AT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public TerminalNode INCLUSIVE() { return getToken(DB2zSQLParser.INCLUSIVE, 0); }
		public PartitionElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPartitionElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPartitionElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPartitionElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionElementContext partitionElement() throws RecognitionException {
		PartitionElementContext _localctx = new PartitionElementContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_partitionElement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2717);
			match(PARTITION);
			setState(2718);
			match(INTEGERLITERAL);
			setState(2744);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENDING) {
				{
				setState(2719);
				match(ENDING);
				setState(2721);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AT) {
					{
					setState(2720);
					match(AT);
					}
				}

				setState(2723);
				match(LPAREN);
				setState(2727);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NONNUMERICLITERAL:
				case INTEGERLITERAL:
				case NUMERICLITERAL:
					{
					setState(2724);
					literal();
					}
					break;
				case MAXVALUE:
					{
					setState(2725);
					match(MAXVALUE);
					}
					break;
				case MINVALUE:
					{
					setState(2726);
					match(MINVALUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2737);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2729);
					match(COMMA);
					setState(2733);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NONNUMERICLITERAL:
					case INTEGERLITERAL:
					case NUMERICLITERAL:
						{
						setState(2730);
						literal();
						}
						break;
					case MAXVALUE:
						{
						setState(2731);
						match(MAXVALUE);
						}
						break;
					case MINVALUE:
						{
						setState(2732);
						match(MINVALUE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					setState(2739);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2740);
				match(RPAREN);
				setState(2742);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INCLUSIVE) {
					{
					setState(2741);
					match(INCLUSIVE);
					}
				}

				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ApplCompatValueContext extends ParserRuleContext {
		public FunctionLevelContext functionLevel() {
			return getRuleContext(FunctionLevelContext.class,0);
		}
		public ApplCompatValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_applCompatValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterApplCompatValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitApplCompatValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitApplCompatValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ApplCompatValueContext applCompatValue() throws RecognitionException {
		ApplCompatValueContext _localctx = new ApplCompatValueContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_applCompatValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2746);
			functionLevel();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionLevelContext extends ParserRuleContext {
		public TerminalNode SQLIDENTIFIER() { return getToken(DB2zSQLParser.SQLIDENTIFIER, 0); }
		public FunctionLevelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionLevel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFunctionLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFunctionLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFunctionLevel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionLevelContext functionLevel() throws RecognitionException {
		FunctionLevelContext _localctx = new FunctionLevelContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_functionLevel);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2748);
			match(SQLIDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionParameterTypeContext extends ParserRuleContext {
		public FunctionDataTypeContext functionDataType() {
			return getRuleContext(FunctionDataTypeContext.class,0);
		}
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode LOCATOR() { return getToken(DB2zSQLParser.LOCATOR, 0); }
		public FunctionParameterTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionParameterType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFunctionParameterType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFunctionParameterType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFunctionParameterType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionParameterTypeContext functionParameterType() throws RecognitionException {
		FunctionParameterTypeContext _localctx = new FunctionParameterTypeContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_functionParameterType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2750);
			functionDataType();
			setState(2753);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(2751);
				match(AS);
				setState(2752);
				match(LOCATOR);
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionDataTypeContext extends ParserRuleContext {
		public FunctionBuiltInTypeContext functionBuiltInType() {
			return getRuleContext(FunctionBuiltInTypeContext.class,0);
		}
		public DistinctTypeNameContext distinctTypeName() {
			return getRuleContext(DistinctTypeNameContext.class,0);
		}
		public FunctionDataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionDataType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFunctionDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFunctionDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFunctionDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionDataTypeContext functionDataType() throws RecognitionException {
		FunctionDataTypeContext _localctx = new FunctionDataTypeContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_functionDataType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2757);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,261,_ctx) ) {
			case 1:
				{
				setState(2755);
				functionBuiltInType();
				}
				break;
			case 2:
				{
				setState(2756);
				distinctTypeName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionBuiltInTypeContext extends ParserRuleContext {
		public TerminalNode SMALLINT() { return getToken(DB2zSQLParser.SMALLINT, 0); }
		public TerminalNode INTEGER() { return getToken(DB2zSQLParser.INTEGER, 0); }
		public TerminalNode INT() { return getToken(DB2zSQLParser.INT, 0); }
		public TerminalNode BIGINT() { return getToken(DB2zSQLParser.BIGINT, 0); }
		public TerminalNode REAL() { return getToken(DB2zSQLParser.REAL, 0); }
		public TerminalNode DATE() { return getToken(DB2zSQLParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(DB2zSQLParser.TIME, 0); }
		public TerminalNode ROWID() { return getToken(DB2zSQLParser.ROWID, 0); }
		public TerminalNode XML() { return getToken(DB2zSQLParser.XML, 0); }
		public TerminalNode DECFLOAT() { return getToken(DB2zSQLParser.DECFLOAT, 0); }
		public TerminalNode FLOAT() { return getToken(DB2zSQLParser.FLOAT, 0); }
		public TerminalNode DOUBLE() { return getToken(DB2zSQLParser.DOUBLE, 0); }
		public TerminalNode BINARY() { return getToken(DB2zSQLParser.BINARY, 0); }
		public TerminalNode TIMESTAMP() { return getToken(DB2zSQLParser.TIMESTAMP, 0); }
		public TerminalNode DECIMAL() { return getToken(DB2zSQLParser.DECIMAL, 0); }
		public TerminalNode DEC() { return getToken(DB2zSQLParser.DEC, 0); }
		public TerminalNode NUMERIC() { return getToken(DB2zSQLParser.NUMERIC, 0); }
		public TerminalNode GRAPHIC() { return getToken(DB2zSQLParser.GRAPHIC, 0); }
		public TerminalNode VARGRAPHIC() { return getToken(DB2zSQLParser.VARGRAPHIC, 0); }
		public TerminalNode DBCLOB() { return getToken(DB2zSQLParser.DBCLOB, 0); }
		public IntegerInParensContext integerInParens() {
			return getRuleContext(IntegerInParensContext.class,0);
		}
		public TerminalNode VARCHAR() { return getToken(DB2zSQLParser.VARCHAR, 0); }
		public TerminalNode CLOB() { return getToken(DB2zSQLParser.CLOB, 0); }
		public TerminalNode VARBINARY() { return getToken(DB2zSQLParser.VARBINARY, 0); }
		public TerminalNode BLOB() { return getToken(DB2zSQLParser.BLOB, 0); }
		public TerminalNode ZONE() { return getToken(DB2zSQLParser.ZONE, 0); }
		public TerminalNode PRECISION() { return getToken(DB2zSQLParser.PRECISION, 0); }
		public LengthContext length() {
			return getRuleContext(LengthContext.class,0);
		}
		public TerminalNode CCSID() { return getToken(DB2zSQLParser.CCSID, 0); }
		public ForDataQualifierContext forDataQualifier() {
			return getRuleContext(ForDataQualifierContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode WITHOUT() { return getToken(DB2zSQLParser.WITHOUT, 0); }
		public TerminalNode ASCII() { return getToken(DB2zSQLParser.ASCII, 0); }
		public TerminalNode EBCDIC() { return getToken(DB2zSQLParser.EBCDIC, 0); }
		public TerminalNode UNICODE() { return getToken(DB2zSQLParser.UNICODE, 0); }
		public TerminalNode LARGE() { return getToken(DB2zSQLParser.LARGE, 0); }
		public TerminalNode OBJECT() { return getToken(DB2zSQLParser.OBJECT, 0); }
		public TerminalNode CHARACTER() { return getToken(DB2zSQLParser.CHARACTER, 0); }
		public TerminalNode CHAR() { return getToken(DB2zSQLParser.CHAR, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode SQLIDENTIFIER() { return getToken(DB2zSQLParser.SQLIDENTIFIER, 0); }
		public TerminalNode VARYING() { return getToken(DB2zSQLParser.VARYING, 0); }
		public FunctionBuiltInTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionBuiltInType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFunctionBuiltInType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFunctionBuiltInType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFunctionBuiltInType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionBuiltInTypeContext functionBuiltInType() throws RecognitionException {
		FunctionBuiltInTypeContext _localctx = new FunctionBuiltInTypeContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_functionBuiltInType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2875);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,284,_ctx) ) {
			case 1:
				{
				setState(2759);
				match(SMALLINT);
				}
				break;
			case 2:
				{
				setState(2760);
				match(INTEGER);
				}
				break;
			case 3:
				{
				setState(2761);
				match(INT);
				}
				break;
			case 4:
				{
				setState(2762);
				match(BIGINT);
				}
				break;
			case 5:
				{
				{
				setState(2763);
				_la = _input.LA(1);
				if ( !(_la==NUMERIC || _la==DEC || _la==DECIMAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2767);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,262,_ctx) ) {
				case 1:
					{
					setState(2764);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(2765);
					match(LPAREN);
					setState(2766);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 6:
				{
				{
				setState(2769);
				match(DECFLOAT);
				setState(2773);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,263,_ctx) ) {
				case 1:
					{
					setState(2770);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(2771);
					match(LPAREN);
					setState(2772);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 7:
				{
				{
				setState(2775);
				match(FLOAT);
				setState(2779);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,264,_ctx) ) {
				case 1:
					{
					setState(2776);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(2777);
					match(LPAREN);
					setState(2778);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 8:
				{
				setState(2781);
				match(REAL);
				}
				break;
			case 9:
				{
				{
				setState(2782);
				match(DOUBLE);
				setState(2784);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRECISION) {
					{
					setState(2783);
					match(PRECISION);
					}
				}

				}
				}
				break;
			case 10:
				{
				{
				setState(2791);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHAR:
				case CHARACTER:
					{
					{
					setState(2786);
					_la = _input.LA(1);
					if ( !(_la==CHAR || _la==CHARACTER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(2788);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==VARYING) {
						{
						setState(2787);
						match(VARYING);
						}
					}

					}
					}
					break;
				case VARCHAR:
					{
					setState(2790);
					match(VARCHAR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2796);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,268,_ctx) ) {
				case 1:
					{
					setState(2793);
					length();
					}
					break;
				case 2:
					{
					{
					setState(2794);
					match(LPAREN);
					setState(2795);
					match(RPAREN);
					}
					}
					break;
				}
				setState(2800);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CCSID) {
					{
					setState(2798);
					match(CCSID);
					setState(2799);
					_la = _input.LA(1);
					if ( !(_la==EBCDIC || _la==ASCII || _la==UNICODE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2803);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(2802);
					forDataQualifier();
					}
				}

				}
				}
				break;
			case 11:
				{
				{
				setState(2809);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHAR:
				case CHARACTER:
					{
					{
					setState(2805);
					_la = _input.LA(1);
					if ( !(_la==CHAR || _la==CHARACTER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(2806);
					match(LARGE);
					setState(2807);
					match(OBJECT);
					}
					}
					break;
				case CLOB:
					{
					setState(2808);
					match(CLOB);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2814);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,272,_ctx) ) {
				case 1:
					{
					setState(2811);
					length();
					}
					break;
				case 2:
					{
					{
					setState(2812);
					match(LPAREN);
					setState(2813);
					match(RPAREN);
					}
					}
					break;
				}
				setState(2818);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CCSID) {
					{
					setState(2816);
					match(CCSID);
					setState(2817);
					_la = _input.LA(1);
					if ( !(_la==EBCDIC || _la==ASCII || _la==UNICODE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2821);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(2820);
					forDataQualifier();
					}
				}

				}
				}
				break;
			case 12:
				{
				{
				setState(2823);
				_la = _input.LA(1);
				if ( !(_la==DBCLOB || _la==GRAPHIC || _la==VARGRAPHIC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2827);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,275,_ctx) ) {
				case 1:
					{
					setState(2824);
					length();
					}
					break;
				case 2:
					{
					{
					setState(2825);
					match(LPAREN);
					setState(2826);
					match(RPAREN);
					}
					}
					break;
				}
				setState(2831);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CCSID) {
					{
					setState(2829);
					match(CCSID);
					setState(2830);
					_la = _input.LA(1);
					if ( !(_la==EBCDIC || _la==ASCII || _la==UNICODE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				}
				break;
			case 13:
				{
				{
				setState(2833);
				match(BINARY);
				setState(2837);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,277,_ctx) ) {
				case 1:
					{
					setState(2834);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(2835);
					match(LPAREN);
					setState(2836);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 14:
				{
				{
				setState(2844);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
					{
					{
					setState(2839);
					match(BINARY);
					setState(2841);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==VARYING) {
						{
						setState(2840);
						match(VARYING);
						}
					}

					}
					}
					break;
				case VARBINARY:
					{
					setState(2843);
					match(VARBINARY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2849);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,280,_ctx) ) {
				case 1:
					{
					setState(2846);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(2847);
					match(LPAREN);
					setState(2848);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 15:
				{
				{
				setState(2855);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
					{
					{
					setState(2851);
					match(BINARY);
					setState(2852);
					match(LARGE);
					setState(2853);
					match(OBJECT);
					}
					}
					break;
				case BLOB:
					{
					setState(2854);
					match(BLOB);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2862);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(2857);
					match(LPAREN);
					{
					setState(2858);
					match(INTEGERLITERAL);
					setState(2859);
					match(SQLIDENTIFIER);
					}
					setState(2861);
					match(RPAREN);
					}
				}

				}
				}
				break;
			case 16:
				{
				setState(2864);
				match(DATE);
				}
				break;
			case 17:
				{
				setState(2865);
				match(TIME);
				}
				break;
			case 18:
				{
				{
				setState(2866);
				match(TIMESTAMP);
				setState(2868);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(2867);
					integerInParens();
					}
				}

				{
				setState(2870);
				_la = _input.LA(1);
				if ( !(_la==WITH || _la==WITHOUT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2871);
				match(TIME);
				setState(2872);
				match(ZONE);
				}
				}
				}
				break;
			case 19:
				{
				setState(2873);
				match(ROWID);
				}
				break;
			case 20:
				{
				setState(2874);
				match(XML);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcedureBuiltinTypeContext extends ParserRuleContext {
		public TerminalNode SMALLINT() { return getToken(DB2zSQLParser.SMALLINT, 0); }
		public TerminalNode INTEGER() { return getToken(DB2zSQLParser.INTEGER, 0); }
		public TerminalNode INT() { return getToken(DB2zSQLParser.INT, 0); }
		public TerminalNode BIGINT() { return getToken(DB2zSQLParser.BIGINT, 0); }
		public TerminalNode REAL() { return getToken(DB2zSQLParser.REAL, 0); }
		public TerminalNode DATE() { return getToken(DB2zSQLParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(DB2zSQLParser.TIME, 0); }
		public TerminalNode ROWID() { return getToken(DB2zSQLParser.ROWID, 0); }
		public TerminalNode DECFLOAT() { return getToken(DB2zSQLParser.DECFLOAT, 0); }
		public TerminalNode FLOAT() { return getToken(DB2zSQLParser.FLOAT, 0); }
		public TerminalNode DOUBLE() { return getToken(DB2zSQLParser.DOUBLE, 0); }
		public TerminalNode BINARY() { return getToken(DB2zSQLParser.BINARY, 0); }
		public TerminalNode TIMESTAMP() { return getToken(DB2zSQLParser.TIMESTAMP, 0); }
		public TerminalNode DECIMAL() { return getToken(DB2zSQLParser.DECIMAL, 0); }
		public TerminalNode DEC() { return getToken(DB2zSQLParser.DEC, 0); }
		public TerminalNode NUMERIC() { return getToken(DB2zSQLParser.NUMERIC, 0); }
		public TerminalNode GRAPHIC() { return getToken(DB2zSQLParser.GRAPHIC, 0); }
		public TerminalNode VARGRAPHIC() { return getToken(DB2zSQLParser.VARGRAPHIC, 0); }
		public TerminalNode DBCLOB() { return getToken(DB2zSQLParser.DBCLOB, 0); }
		public IntegerInParensContext integerInParens() {
			return getRuleContext(IntegerInParensContext.class,0);
		}
		public TerminalNode VARCHAR() { return getToken(DB2zSQLParser.VARCHAR, 0); }
		public TerminalNode CLOB() { return getToken(DB2zSQLParser.CLOB, 0); }
		public TerminalNode VARBINARY() { return getToken(DB2zSQLParser.VARBINARY, 0); }
		public TerminalNode BLOB() { return getToken(DB2zSQLParser.BLOB, 0); }
		public TerminalNode ZONE() { return getToken(DB2zSQLParser.ZONE, 0); }
		public TerminalNode PRECISION() { return getToken(DB2zSQLParser.PRECISION, 0); }
		public LengthContext length() {
			return getRuleContext(LengthContext.class,0);
		}
		public TerminalNode CCSID() { return getToken(DB2zSQLParser.CCSID, 0); }
		public ForDataQualifierContext forDataQualifier() {
			return getRuleContext(ForDataQualifierContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode WITHOUT() { return getToken(DB2zSQLParser.WITHOUT, 0); }
		public TerminalNode ASCII() { return getToken(DB2zSQLParser.ASCII, 0); }
		public TerminalNode EBCDIC() { return getToken(DB2zSQLParser.EBCDIC, 0); }
		public TerminalNode UNICODE() { return getToken(DB2zSQLParser.UNICODE, 0); }
		public TerminalNode LARGE() { return getToken(DB2zSQLParser.LARGE, 0); }
		public TerminalNode OBJECT() { return getToken(DB2zSQLParser.OBJECT, 0); }
		public TerminalNode CHARACTER() { return getToken(DB2zSQLParser.CHARACTER, 0); }
		public TerminalNode CHAR() { return getToken(DB2zSQLParser.CHAR, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode SQLIDENTIFIER() { return getToken(DB2zSQLParser.SQLIDENTIFIER, 0); }
		public TerminalNode VARYING() { return getToken(DB2zSQLParser.VARYING, 0); }
		public ProcedureBuiltinTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureBuiltinType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterProcedureBuiltinType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitProcedureBuiltinType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitProcedureBuiltinType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProcedureBuiltinTypeContext procedureBuiltinType() throws RecognitionException {
		ProcedureBuiltinTypeContext _localctx = new ProcedureBuiltinTypeContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_procedureBuiltinType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2992);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,307,_ctx) ) {
			case 1:
				{
				setState(2877);
				match(SMALLINT);
				}
				break;
			case 2:
				{
				setState(2878);
				match(INTEGER);
				}
				break;
			case 3:
				{
				setState(2879);
				match(INT);
				}
				break;
			case 4:
				{
				setState(2880);
				match(BIGINT);
				}
				break;
			case 5:
				{
				{
				setState(2881);
				_la = _input.LA(1);
				if ( !(_la==NUMERIC || _la==DEC || _la==DECIMAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2885);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,285,_ctx) ) {
				case 1:
					{
					setState(2882);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(2883);
					match(LPAREN);
					setState(2884);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 6:
				{
				{
				setState(2887);
				match(DECFLOAT);
				setState(2891);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,286,_ctx) ) {
				case 1:
					{
					setState(2888);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(2889);
					match(LPAREN);
					setState(2890);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 7:
				{
				{
				setState(2893);
				match(FLOAT);
				setState(2897);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,287,_ctx) ) {
				case 1:
					{
					setState(2894);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(2895);
					match(LPAREN);
					setState(2896);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 8:
				{
				setState(2899);
				match(REAL);
				}
				break;
			case 9:
				{
				{
				setState(2900);
				match(DOUBLE);
				setState(2902);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRECISION) {
					{
					setState(2901);
					match(PRECISION);
					}
				}

				}
				}
				break;
			case 10:
				{
				{
				setState(2909);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHAR:
				case CHARACTER:
					{
					{
					setState(2904);
					_la = _input.LA(1);
					if ( !(_la==CHAR || _la==CHARACTER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(2906);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==VARYING) {
						{
						setState(2905);
						match(VARYING);
						}
					}

					}
					}
					break;
				case VARCHAR:
					{
					setState(2908);
					match(VARCHAR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2914);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,291,_ctx) ) {
				case 1:
					{
					setState(2911);
					length();
					}
					break;
				case 2:
					{
					{
					setState(2912);
					match(LPAREN);
					setState(2913);
					match(RPAREN);
					}
					}
					break;
				}
				setState(2918);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CCSID) {
					{
					setState(2916);
					match(CCSID);
					setState(2917);
					_la = _input.LA(1);
					if ( !(_la==EBCDIC || _la==ASCII || _la==UNICODE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2921);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(2920);
					forDataQualifier();
					}
				}

				}
				}
				break;
			case 11:
				{
				{
				setState(2927);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHAR:
				case CHARACTER:
					{
					{
					setState(2923);
					_la = _input.LA(1);
					if ( !(_la==CHAR || _la==CHARACTER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(2924);
					match(LARGE);
					setState(2925);
					match(OBJECT);
					}
					}
					break;
				case CLOB:
					{
					setState(2926);
					match(CLOB);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2932);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,295,_ctx) ) {
				case 1:
					{
					setState(2929);
					length();
					}
					break;
				case 2:
					{
					{
					setState(2930);
					match(LPAREN);
					setState(2931);
					match(RPAREN);
					}
					}
					break;
				}
				setState(2936);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CCSID) {
					{
					setState(2934);
					match(CCSID);
					setState(2935);
					_la = _input.LA(1);
					if ( !(_la==EBCDIC || _la==ASCII || _la==UNICODE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2939);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(2938);
					forDataQualifier();
					}
				}

				}
				}
				break;
			case 12:
				{
				{
				setState(2941);
				_la = _input.LA(1);
				if ( !(_la==DBCLOB || _la==GRAPHIC || _la==VARGRAPHIC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2945);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,298,_ctx) ) {
				case 1:
					{
					setState(2942);
					length();
					}
					break;
				case 2:
					{
					{
					setState(2943);
					match(LPAREN);
					setState(2944);
					match(RPAREN);
					}
					}
					break;
				}
				setState(2949);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CCSID) {
					{
					setState(2947);
					match(CCSID);
					setState(2948);
					_la = _input.LA(1);
					if ( !(_la==EBCDIC || _la==ASCII || _la==UNICODE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				}
				break;
			case 13:
				{
				{
				setState(2951);
				match(BINARY);
				setState(2955);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,300,_ctx) ) {
				case 1:
					{
					setState(2952);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(2953);
					match(LPAREN);
					setState(2954);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 14:
				{
				{
				setState(2962);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
					{
					{
					setState(2957);
					match(BINARY);
					setState(2959);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==VARYING) {
						{
						setState(2958);
						match(VARYING);
						}
					}

					}
					}
					break;
				case VARBINARY:
					{
					setState(2961);
					match(VARBINARY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2967);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,303,_ctx) ) {
				case 1:
					{
					setState(2964);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(2965);
					match(LPAREN);
					setState(2966);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 15:
				{
				{
				setState(2973);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
					{
					{
					setState(2969);
					match(BINARY);
					setState(2970);
					match(LARGE);
					setState(2971);
					match(OBJECT);
					}
					}
					break;
				case BLOB:
					{
					setState(2972);
					match(BLOB);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2980);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(2975);
					match(LPAREN);
					{
					setState(2976);
					match(INTEGERLITERAL);
					setState(2977);
					match(SQLIDENTIFIER);
					}
					setState(2979);
					match(RPAREN);
					}
				}

				}
				}
				break;
			case 16:
				{
				setState(2982);
				match(DATE);
				}
				break;
			case 17:
				{
				setState(2983);
				match(TIME);
				}
				break;
			case 18:
				{
				{
				setState(2984);
				match(TIMESTAMP);
				setState(2986);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(2985);
					integerInParens();
					}
				}

				{
				setState(2988);
				_la = _input.LA(1);
				if ( !(_la==WITH || _la==WITHOUT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2989);
				match(TIME);
				setState(2990);
				match(ZONE);
				}
				}
				}
				break;
			case 19:
				{
				setState(2991);
				match(ROWID);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionOptionListContext extends ParserRuleContext {
		public ExternalNameOption2Context externalNameOption2() {
			return getRuleContext(ExternalNameOption2Context.class,0);
		}
		public LanguageOption4Context languageOption4() {
			return getRuleContext(LanguageOption4Context.class,0);
		}
		public ParameterStyleOption2Context parameterStyleOption2() {
			return getRuleContext(ParameterStyleOption2Context.class,0);
		}
		public DeterministicOptionContext deterministicOption() {
			return getRuleContext(DeterministicOptionContext.class,0);
		}
		public NullInputOption1Context nullInputOption1() {
			return getRuleContext(NullInputOption1Context.class,0);
		}
		public SqlDataOption3Context sqlDataOption3() {
			return getRuleContext(SqlDataOption3Context.class,0);
		}
		public ExternalActionOptionContext externalActionOption() {
			return getRuleContext(ExternalActionOptionContext.class,0);
		}
		public PackagePathOptionContext packagePathOption() {
			return getRuleContext(PackagePathOptionContext.class,0);
		}
		public ScratchpadOptionContext scratchpadOption() {
			return getRuleContext(ScratchpadOptionContext.class,0);
		}
		public FinalCallOptionContext finalCallOption() {
			return getRuleContext(FinalCallOptionContext.class,0);
		}
		public ParallelOption2Context parallelOption2() {
			return getRuleContext(ParallelOption2Context.class,0);
		}
		public DbinfoOptionContext dbinfoOption() {
			return getRuleContext(DbinfoOptionContext.class,0);
		}
		public CardinalityOptionContext cardinalityOption() {
			return getRuleContext(CardinalityOptionContext.class,0);
		}
		public CollectionIdOptionContext collectionIdOption() {
			return getRuleContext(CollectionIdOptionContext.class,0);
		}
		public WlmEnvironmentOption2Context wlmEnvironmentOption2() {
			return getRuleContext(WlmEnvironmentOption2Context.class,0);
		}
		public AsuTimeOptionContext asuTimeOption() {
			return getRuleContext(AsuTimeOptionContext.class,0);
		}
		public StayResidentOptionContext stayResidentOption() {
			return getRuleContext(StayResidentOptionContext.class,0);
		}
		public ProgramTypeOptionContext programTypeOption() {
			return getRuleContext(ProgramTypeOptionContext.class,0);
		}
		public SecurityOptionContext securityOption() {
			return getRuleContext(SecurityOptionContext.class,0);
		}
		public StopAfterFailureOptionContext stopAfterFailureOption() {
			return getRuleContext(StopAfterFailureOptionContext.class,0);
		}
		public RunOptionsOptionContext runOptionsOption() {
			return getRuleContext(RunOptionsOptionContext.class,0);
		}
		public SpecialRegistersOptionContext specialRegistersOption() {
			return getRuleContext(SpecialRegistersOptionContext.class,0);
		}
		public DispatchOptionContext dispatchOption() {
			return getRuleContext(DispatchOptionContext.class,0);
		}
		public SecuredOptionContext securedOption() {
			return getRuleContext(SecuredOptionContext.class,0);
		}
		public TerminalNode SPECIFIC() { return getToken(DB2zSQLParser.SPECIFIC, 0); }
		public TerminalNode PARAMETER() { return getToken(DB2zSQLParser.PARAMETER, 0); }
		public TerminalNode CCSID() { return getToken(DB2zSQLParser.CCSID, 0); }
		public FunctionOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFunctionOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFunctionOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFunctionOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionOptionListContext functionOptionList() throws RecognitionException {
		FunctionOptionListContext _localctx = new FunctionOptionListContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_functionOptionList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3021);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,308,_ctx) ) {
			case 1:
				{
				setState(2994);
				externalNameOption2();
				}
				break;
			case 2:
				{
				setState(2995);
				languageOption4();
				}
				break;
			case 3:
				{
				setState(2996);
				parameterStyleOption2();
				}
				break;
			case 4:
				{
				setState(2997);
				deterministicOption();
				}
				break;
			case 5:
				{
				setState(2998);
				nullInputOption1();
				}
				break;
			case 6:
				{
				setState(2999);
				sqlDataOption3();
				}
				break;
			case 7:
				{
				setState(3000);
				externalActionOption();
				}
				break;
			case 8:
				{
				setState(3001);
				packagePathOption();
				}
				break;
			case 9:
				{
				setState(3002);
				scratchpadOption();
				}
				break;
			case 10:
				{
				setState(3003);
				finalCallOption();
				}
				break;
			case 11:
				{
				setState(3004);
				parallelOption2();
				}
				break;
			case 12:
				{
				setState(3005);
				dbinfoOption();
				}
				break;
			case 13:
				{
				setState(3006);
				cardinalityOption();
				}
				break;
			case 14:
				{
				setState(3007);
				collectionIdOption();
				}
				break;
			case 15:
				{
				setState(3008);
				wlmEnvironmentOption2();
				}
				break;
			case 16:
				{
				setState(3009);
				asuTimeOption();
				}
				break;
			case 17:
				{
				setState(3010);
				stayResidentOption();
				}
				break;
			case 18:
				{
				setState(3011);
				programTypeOption();
				}
				break;
			case 19:
				{
				setState(3012);
				securityOption();
				}
				break;
			case 20:
				{
				setState(3013);
				stopAfterFailureOption();
				}
				break;
			case 21:
				{
				setState(3014);
				runOptionsOption();
				}
				break;
			case 22:
				{
				setState(3015);
				specialRegistersOption();
				}
				break;
			case 23:
				{
				setState(3016);
				dispatchOption();
				}
				break;
			case 24:
				{
				setState(3017);
				securedOption();
				}
				break;
			case 25:
				{
				setState(3018);
				match(SPECIFIC);
				}
				break;
			case 26:
				{
				{
				setState(3019);
				match(PARAMETER);
				setState(3020);
				match(CCSID);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcedureOptionListContext extends ParserRuleContext {
		public DynamicResultSetOptionContext dynamicResultSetOption() {
			return getRuleContext(DynamicResultSetOptionContext.class,0);
		}
		public ParameterOption1Context parameterOption1() {
			return getRuleContext(ParameterOption1Context.class,0);
		}
		public ExternalNameOption2Context externalNameOption2() {
			return getRuleContext(ExternalNameOption2Context.class,0);
		}
		public LanguageOption5Context languageOption5() {
			return getRuleContext(LanguageOption5Context.class,0);
		}
		public ParameterStyleOption3Context parameterStyleOption3() {
			return getRuleContext(ParameterStyleOption3Context.class,0);
		}
		public DeterministicOptionContext deterministicOption() {
			return getRuleContext(DeterministicOptionContext.class,0);
		}
		public PackagePathOptionContext packagePathOption() {
			return getRuleContext(PackagePathOptionContext.class,0);
		}
		public SqlDataOption3Context sqlDataOption3() {
			return getRuleContext(SqlDataOption3Context.class,0);
		}
		public DbinfoOptionContext dbinfoOption() {
			return getRuleContext(DbinfoOptionContext.class,0);
		}
		public CollectionIdOptionContext collectionIdOption() {
			return getRuleContext(CollectionIdOptionContext.class,0);
		}
		public WlmEnvironmentOption2Context wlmEnvironmentOption2() {
			return getRuleContext(WlmEnvironmentOption2Context.class,0);
		}
		public AsuTimeOptionContext asuTimeOption() {
			return getRuleContext(AsuTimeOptionContext.class,0);
		}
		public StayResidentOptionContext stayResidentOption() {
			return getRuleContext(StayResidentOptionContext.class,0);
		}
		public ProgramTypeOptionContext programTypeOption() {
			return getRuleContext(ProgramTypeOptionContext.class,0);
		}
		public SecurityOptionContext securityOption() {
			return getRuleContext(SecurityOptionContext.class,0);
		}
		public RunOptionsOptionContext runOptionsOption() {
			return getRuleContext(RunOptionsOptionContext.class,0);
		}
		public SpecialRegistersOptionContext specialRegistersOption() {
			return getRuleContext(SpecialRegistersOptionContext.class,0);
		}
		public StopAfterFailureOptionContext stopAfterFailureOption() {
			return getRuleContext(StopAfterFailureOptionContext.class,0);
		}
		public TerminalNode COMMIT() { return getToken(DB2zSQLParser.COMMIT, 0); }
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public TerminalNode RETURN() { return getToken(DB2zSQLParser.RETURN, 0); }
		public TerminalNode CALLED() { return getToken(DB2zSQLParser.CALLED, 0); }
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public TerminalNode INPUT() { return getToken(DB2zSQLParser.INPUT, 0); }
		public TerminalNode CALL() { return getToken(DB2zSQLParser.CALL, 0); }
		public TerminalNode DEBUG() { return getToken(DB2zSQLParser.DEBUG, 0); }
		public TerminalNode MODE_() { return getToken(DB2zSQLParser.MODE_, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode YES() { return getToken(DB2zSQLParser.YES, 0); }
		public TerminalNode DISALLOW() { return getToken(DB2zSQLParser.DISALLOW, 0); }
		public TerminalNode ALLOW() { return getToken(DB2zSQLParser.ALLOW, 0); }
		public TerminalNode DISABLE() { return getToken(DB2zSQLParser.DISABLE, 0); }
		public ProcedureOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterProcedureOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitProcedureOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitProcedureOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProcedureOptionListContext procedureOptionList() throws RecognitionException {
		ProcedureOptionListContext _localctx = new ProcedureOptionListContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_procedureOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3054);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,309,_ctx) ) {
			case 1:
				{
				setState(3023);
				dynamicResultSetOption();
				}
				break;
			case 2:
				{
				setState(3024);
				parameterOption1();
				}
				break;
			case 3:
				{
				setState(3025);
				externalNameOption2();
				}
				break;
			case 4:
				{
				setState(3026);
				languageOption5();
				}
				break;
			case 5:
				{
				setState(3027);
				parameterStyleOption3();
				}
				break;
			case 6:
				{
				setState(3028);
				deterministicOption();
				}
				break;
			case 7:
				{
				setState(3029);
				packagePathOption();
				}
				break;
			case 8:
				{
				setState(3030);
				sqlDataOption3();
				}
				break;
			case 9:
				{
				setState(3031);
				dbinfoOption();
				}
				break;
			case 10:
				{
				setState(3032);
				collectionIdOption();
				}
				break;
			case 11:
				{
				setState(3033);
				wlmEnvironmentOption2();
				}
				break;
			case 12:
				{
				setState(3034);
				asuTimeOption();
				}
				break;
			case 13:
				{
				setState(3035);
				stayResidentOption();
				}
				break;
			case 14:
				{
				setState(3036);
				programTypeOption();
				}
				break;
			case 15:
				{
				setState(3037);
				securityOption();
				}
				break;
			case 16:
				{
				setState(3038);
				runOptionsOption();
				}
				break;
			case 17:
				{
				{
				setState(3039);
				match(COMMIT);
				setState(3040);
				match(ON);
				setState(3041);
				match(RETURN);
				setState(3042);
				_la = _input.LA(1);
				if ( !(_la==NO || _la==YES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case 18:
				{
				setState(3043);
				specialRegistersOption();
				}
				break;
			case 19:
				{
				{
				setState(3044);
				match(CALLED);
				setState(3045);
				match(ON);
				setState(3046);
				match(NULL);
				setState(3047);
				match(INPUT);
				}
				}
				break;
			case 20:
				{
				{
				setState(3048);
				match(NULL);
				setState(3049);
				match(CALL);
				}
				}
				break;
			case 21:
				{
				setState(3050);
				stopAfterFailureOption();
				}
				break;
			case 22:
				{
				{
				setState(3051);
				_la = _input.LA(1);
				if ( !(((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (ALLOW - 34)) | (1L << (DISABLE - 34)) | (1L << (DISALLOW - 34)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3052);
				match(DEBUG);
				setState(3053);
				match(MODE_);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateProcedureOptionListContext extends ParserRuleContext {
		public SpecificNameOption2Context specificNameOption2() {
			return getRuleContext(SpecificNameOption2Context.class,0);
		}
		public DynamicResultSetOptionContext dynamicResultSetOption() {
			return getRuleContext(DynamicResultSetOptionContext.class,0);
		}
		public ParameterOption1Context parameterOption1() {
			return getRuleContext(ParameterOption1Context.class,0);
		}
		public ExternalNameOption1Context externalNameOption1() {
			return getRuleContext(ExternalNameOption1Context.class,0);
		}
		public LanguageOption5Context languageOption5() {
			return getRuleContext(LanguageOption5Context.class,0);
		}
		public SqlDataOption3Context sqlDataOption3() {
			return getRuleContext(SqlDataOption3Context.class,0);
		}
		public ParameterStyleOption3Context parameterStyleOption3() {
			return getRuleContext(ParameterStyleOption3Context.class,0);
		}
		public DeterministicOptionContext deterministicOption() {
			return getRuleContext(DeterministicOptionContext.class,0);
		}
		public PackagePathOptionContext packagePathOption() {
			return getRuleContext(PackagePathOptionContext.class,0);
		}
		public FencedOptionContext fencedOption() {
			return getRuleContext(FencedOptionContext.class,0);
		}
		public DbinfoOptionContext dbinfoOption() {
			return getRuleContext(DbinfoOptionContext.class,0);
		}
		public CollectionIdOptionContext collectionIdOption() {
			return getRuleContext(CollectionIdOptionContext.class,0);
		}
		public WlmEnvironmentOption2Context wlmEnvironmentOption2() {
			return getRuleContext(WlmEnvironmentOption2Context.class,0);
		}
		public AsuTimeOptionContext asuTimeOption() {
			return getRuleContext(AsuTimeOptionContext.class,0);
		}
		public StayResidentOptionContext stayResidentOption() {
			return getRuleContext(StayResidentOptionContext.class,0);
		}
		public ProgramTypeOptionContext programTypeOption() {
			return getRuleContext(ProgramTypeOptionContext.class,0);
		}
		public SecurityOptionContext securityOption() {
			return getRuleContext(SecurityOptionContext.class,0);
		}
		public RunOptionsOptionContext runOptionsOption() {
			return getRuleContext(RunOptionsOptionContext.class,0);
		}
		public CommitOnReturnOptionContext commitOnReturnOption() {
			return getRuleContext(CommitOnReturnOptionContext.class,0);
		}
		public SpecialRegistersOptionContext specialRegistersOption() {
			return getRuleContext(SpecialRegistersOptionContext.class,0);
		}
		public NullInputOption2Context nullInputOption2() {
			return getRuleContext(NullInputOption2Context.class,0);
		}
		public StopAfterFailureOptionContext stopAfterFailureOption() {
			return getRuleContext(StopAfterFailureOptionContext.class,0);
		}
		public DebugOptionContext debugOption() {
			return getRuleContext(DebugOptionContext.class,0);
		}
		public CreateProcedureOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createProcedureOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateProcedureOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateProcedureOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateProcedureOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateProcedureOptionListContext createProcedureOptionList() throws RecognitionException {
		CreateProcedureOptionListContext _localctx = new CreateProcedureOptionListContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_createProcedureOptionList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3079);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,310,_ctx) ) {
			case 1:
				{
				setState(3056);
				specificNameOption2();
				}
				break;
			case 2:
				{
				setState(3057);
				dynamicResultSetOption();
				}
				break;
			case 3:
				{
				setState(3058);
				parameterOption1();
				}
				break;
			case 4:
				{
				setState(3059);
				externalNameOption1();
				}
				break;
			case 5:
				{
				setState(3060);
				languageOption5();
				}
				break;
			case 6:
				{
				setState(3061);
				sqlDataOption3();
				}
				break;
			case 7:
				{
				setState(3062);
				parameterStyleOption3();
				}
				break;
			case 8:
				{
				setState(3063);
				deterministicOption();
				}
				break;
			case 9:
				{
				setState(3064);
				packagePathOption();
				}
				break;
			case 10:
				{
				setState(3065);
				fencedOption();
				}
				break;
			case 11:
				{
				setState(3066);
				dbinfoOption();
				}
				break;
			case 12:
				{
				setState(3067);
				collectionIdOption();
				}
				break;
			case 13:
				{
				setState(3068);
				wlmEnvironmentOption2();
				}
				break;
			case 14:
				{
				setState(3069);
				asuTimeOption();
				}
				break;
			case 15:
				{
				setState(3070);
				stayResidentOption();
				}
				break;
			case 16:
				{
				setState(3071);
				programTypeOption();
				}
				break;
			case 17:
				{
				setState(3072);
				securityOption();
				}
				break;
			case 18:
				{
				setState(3073);
				runOptionsOption();
				}
				break;
			case 19:
				{
				setState(3074);
				commitOnReturnOption();
				}
				break;
			case 20:
				{
				setState(3075);
				specialRegistersOption();
				}
				break;
			case 21:
				{
				setState(3076);
				nullInputOption2();
				}
				break;
			case 22:
				{
				setState(3077);
				stopAfterFailureOption();
				}
				break;
			case 23:
				{
				setState(3078);
				debugOption();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcedureDataTypeContext extends ParserRuleContext {
		public ProcedureBuiltinTypeContext procedureBuiltinType() {
			return getRuleContext(ProcedureBuiltinTypeContext.class,0);
		}
		public DistinctTypeNameContext distinctTypeName() {
			return getRuleContext(DistinctTypeNameContext.class,0);
		}
		public ProcedureDataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureDataType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterProcedureDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitProcedureDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitProcedureDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProcedureDataTypeContext procedureDataType() throws RecognitionException {
		ProcedureDataTypeContext _localctx = new ProcedureDataTypeContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_procedureDataType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3083);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,311,_ctx) ) {
			case 1:
				{
				setState(3081);
				procedureBuiltinType();
				}
				break;
			case 2:
				{
				setState(3082);
				distinctTypeName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SequenceOptionListContext extends ParserRuleContext {
		public TerminalNode RESTART() { return getToken(DB2zSQLParser.RESTART, 0); }
		public TerminalNode INCREMENT() { return getToken(DB2zSQLParser.INCREMENT, 0); }
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode CYCLE() { return getToken(DB2zSQLParser.CYCLE, 0); }
		public TerminalNode ORDER() { return getToken(DB2zSQLParser.ORDER, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode MINVALUE() { return getToken(DB2zSQLParser.MINVALUE, 0); }
		public TerminalNode MAXVALUE() { return getToken(DB2zSQLParser.MAXVALUE, 0); }
		public TerminalNode CACHE() { return getToken(DB2zSQLParser.CACHE, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public SequenceOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequenceOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSequenceOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSequenceOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSequenceOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SequenceOptionListContext sequenceOptionList() throws RecognitionException {
		SequenceOptionListContext _localctx = new SequenceOptionListContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_sequenceOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3119);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,318,_ctx) ) {
			case 1:
				{
				{
				setState(3085);
				match(RESTART);
				setState(3088);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(3086);
					match(WITH);
					setState(3087);
					match(INTEGERLITERAL);
					}
				}

				}
				}
				break;
			case 2:
				{
				{
				setState(3090);
				match(INCREMENT);
				setState(3091);
				match(BY);
				setState(3092);
				match(INTEGERLITERAL);
				}
				}
				break;
			case 3:
				{
				setState(3097);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NO:
					{
					{
					setState(3093);
					match(NO);
					setState(3094);
					match(MINVALUE);
					}
					}
					break;
				case MINVALUE:
					{
					{
					setState(3095);
					match(MINVALUE);
					setState(3096);
					match(INTEGERLITERAL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				{
				setState(3103);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NO:
					{
					{
					setState(3099);
					match(NO);
					setState(3100);
					match(MAXVALUE);
					}
					}
					break;
				case MAXVALUE:
					{
					{
					setState(3101);
					match(MAXVALUE);
					setState(3102);
					match(INTEGERLITERAL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 5:
				{
				{
				setState(3106);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3105);
					match(NO);
					}
				}

				setState(3108);
				match(CYCLE);
				}
				}
				break;
			case 6:
				{
				setState(3113);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NO:
					{
					{
					setState(3109);
					match(NO);
					setState(3110);
					match(CACHE);
					}
					}
					break;
				case CACHE:
					{
					{
					setState(3111);
					match(CACHE);
					setState(3112);
					match(INTEGERLITERAL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 7:
				{
				{
				setState(3116);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3115);
					match(NO);
					}
				}

				setState(3118);
				match(ORDER);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StogroupOptionListContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(DB2zSQLParser.ADD, 0); }
		public TerminalNode VOLUMES() { return getToken(DB2zSQLParser.VOLUMES, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<VolumeIDContext> volumeID() {
			return getRuleContexts(VolumeIDContext.class);
		}
		public VolumeIDContext volumeID(int i) {
			return getRuleContext(VolumeIDContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> NONNUMERICLITERAL() { return getTokens(DB2zSQLParser.NONNUMERICLITERAL); }
		public TerminalNode NONNUMERICLITERAL(int i) {
			return getToken(DB2zSQLParser.NONNUMERICLITERAL, i);
		}
		public TerminalNode REMOVE() { return getToken(DB2zSQLParser.REMOVE, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode KEY() { return getToken(DB2zSQLParser.KEY, 0); }
		public TerminalNode LABEL() { return getToken(DB2zSQLParser.LABEL, 0); }
		public KeyLabelNameContext keyLabelName() {
			return getRuleContext(KeyLabelNameContext.class,0);
		}
		public TerminalNode DATACLAS() { return getToken(DB2zSQLParser.DATACLAS, 0); }
		public DcNameContext dcName() {
			return getRuleContext(DcNameContext.class,0);
		}
		public TerminalNode MGMTCLAS() { return getToken(DB2zSQLParser.MGMTCLAS, 0); }
		public McNameContext mcName() {
			return getRuleContext(McNameContext.class,0);
		}
		public TerminalNode STORCLAS() { return getToken(DB2zSQLParser.STORCLAS, 0); }
		public ScNameContext scName() {
			return getRuleContext(ScNameContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public StogroupOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stogroupOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterStogroupOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitStogroupOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitStogroupOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StogroupOptionListContext stogroupOptionList() throws RecognitionException {
		StogroupOptionListContext _localctx = new StogroupOptionListContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_stogroupOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3183);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,323,_ctx) ) {
			case 1:
				{
				{
				setState(3121);
				match(ADD);
				setState(3122);
				match(VOLUMES);
				setState(3123);
				match(LPAREN);
				setState(3124);
				volumeID();
				setState(3129);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3125);
					match(COMMA);
					setState(3126);
					volumeID();
					}
					}
					setState(3131);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3132);
				match(RPAREN);
				}
				}
				break;
			case 2:
				{
				{
				setState(3134);
				match(ADD);
				setState(3135);
				match(VOLUMES);
				setState(3136);
				match(LPAREN);
				setState(3137);
				match(NONNUMERICLITERAL);
				setState(3142);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3138);
					match(COMMA);
					setState(3139);
					match(NONNUMERICLITERAL);
					}
					}
					setState(3144);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3145);
				match(RPAREN);
				}
				}
				break;
			case 3:
				{
				{
				setState(3146);
				match(REMOVE);
				setState(3147);
				match(VOLUMES);
				setState(3148);
				match(LPAREN);
				setState(3149);
				volumeID();
				setState(3154);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3150);
					match(COMMA);
					setState(3151);
					volumeID();
					}
					}
					setState(3156);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3157);
				match(RPAREN);
				}
				}
				break;
			case 4:
				{
				{
				setState(3159);
				match(REMOVE);
				setState(3160);
				match(VOLUMES);
				setState(3161);
				match(LPAREN);
				setState(3162);
				match(NONNUMERICLITERAL);
				setState(3167);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3163);
					match(COMMA);
					setState(3164);
					match(NONNUMERICLITERAL);
					}
					}
					setState(3169);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3170);
				match(RPAREN);
				}
				}
				break;
			case 5:
				{
				{
				setState(3171);
				match(NO);
				setState(3172);
				match(KEY);
				setState(3173);
				match(LABEL);
				}
				}
				break;
			case 6:
				{
				{
				setState(3174);
				match(KEY);
				setState(3175);
				match(LABEL);
				setState(3176);
				keyLabelName();
				}
				}
				break;
			case 7:
				{
				{
				setState(3177);
				match(DATACLAS);
				setState(3178);
				dcName();
				}
				}
				break;
			case 8:
				{
				{
				setState(3179);
				match(MGMTCLAS);
				setState(3180);
				mcName();
				}
				}
				break;
			case 9:
				{
				{
				setState(3181);
				match(STORCLAS);
				setState(3182);
				scName();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableOptionListContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(DB2zSQLParser.ADD, 0); }
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public ColumnAlterationContext columnAlteration() {
			return getRuleContext(ColumnAlterationContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(DB2zSQLParser.RENAME, 0); }
		public TerminalNode COLUMN() { return getToken(DB2zSQLParser.COLUMN, 0); }
		public SourceColumnNameContext sourceColumnName() {
			return getRuleContext(SourceColumnNameContext.class,0);
		}
		public TerminalNode TO() { return getToken(DB2zSQLParser.TO, 0); }
		public TargetColumnNameContext targetColumnName() {
			return getRuleContext(TargetColumnNameContext.class,0);
		}
		public List<TerminalNode> DROP() { return getTokens(DB2zSQLParser.DROP); }
		public TerminalNode DROP(int i) {
			return getToken(DB2zSQLParser.DROP, i);
		}
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TerminalNode RESTRICT() { return getToken(DB2zSQLParser.RESTRICT, 0); }
		public TerminalNode PERIOD() { return getToken(DB2zSQLParser.PERIOD, 0); }
		public PeriodDefinitionContext periodDefinition() {
			return getRuleContext(PeriodDefinitionContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(DB2zSQLParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public PartitioningClauseContext partitioningClause() {
			return getRuleContext(PartitioningClauseContext.class,0);
		}
		public PartitionClauseContext partitionClause() {
			return getRuleContext(PartitionClauseContext.class,0);
		}
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode ROTATE() { return getToken(DB2zSQLParser.ROTATE, 0); }
		public TerminalNode LAST() { return getToken(DB2zSQLParser.LAST, 0); }
		public RotatePartitionClauseContext rotatePartitionClause() {
			return getRuleContext(RotatePartitionClauseContext.class,0);
		}
		public TerminalNode ORGANIZATION() { return getToken(DB2zSQLParser.ORGANIZATION, 0); }
		public AlterHashOrganizationContext alterHashOrganization() {
			return getRuleContext(AlterHashOrganizationContext.class,0);
		}
		public TerminalNode VERSIONING() { return getToken(DB2zSQLParser.VERSIONING, 0); }
		public TerminalNode USE() { return getToken(DB2zSQLParser.USE, 0); }
		public TerminalNode HISTORY() { return getToken(DB2zSQLParser.HISTORY, 0); }
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public HistoryTableNameContext historyTableName() {
			return getRuleContext(HistoryTableNameContext.class,0);
		}
		public MaterializedQueryDefinitionContext materializedQueryDefinition() {
			return getRuleContext(MaterializedQueryDefinitionContext.class,0);
		}
		public TerminalNode QUERY() { return getToken(DB2zSQLParser.QUERY, 0); }
		public MaterializedQueryAlterationContext materializedQueryAlteration() {
			return getRuleContext(MaterializedQueryAlterationContext.class,0);
		}
		public TerminalNode DATA() { return getToken(DB2zSQLParser.DATA, 0); }
		public TerminalNode CAPTURE() { return getToken(DB2zSQLParser.CAPTURE, 0); }
		public TerminalNode VOLATILE() { return getToken(DB2zSQLParser.VOLATILE, 0); }
		public TerminalNode CLONE() { return getToken(DB2zSQLParser.CLONE, 0); }
		public CloneTableNameContext cloneTableName() {
			return getRuleContext(CloneTableNameContext.class,0);
		}
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public TerminalNode ROW() { return getToken(DB2zSQLParser.ROW, 0); }
		public TerminalNode ACCESS() { return getToken(DB2zSQLParser.ACCESS, 0); }
		public TerminalNode CONTROL() { return getToken(DB2zSQLParser.CONTROL, 0); }
		public TerminalNode APPEND() { return getToken(DB2zSQLParser.APPEND, 0); }
		public TerminalNode AUDIT() { return getToken(DB2zSQLParser.AUDIT, 0); }
		public TerminalNode VALIDPROC() { return getToken(DB2zSQLParser.VALIDPROC, 0); }
		public TerminalNode ENABLE() { return getToken(DB2zSQLParser.ENABLE, 0); }
		public TerminalNode ARCHIVE() { return getToken(DB2zSQLParser.ARCHIVE, 0); }
		public ArchiveTableNameContext archiveTableName() {
			return getRuleContext(ArchiveTableNameContext.class,0);
		}
		public TerminalNode DISABLE() { return getToken(DB2zSQLParser.DISABLE, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode KEY() { return getToken(DB2zSQLParser.KEY, 0); }
		public TerminalNode LABEL() { return getToken(DB2zSQLParser.LABEL, 0); }
		public KeyLabelNameContext keyLabelName() {
			return getRuleContext(KeyLabelNameContext.class,0);
		}
		public TerminalNode FIRST() { return getToken(DB2zSQLParser.FIRST, 0); }
		public TerminalNode NONE() { return getToken(DB2zSQLParser.NONE, 0); }
		public TerminalNode CHANGES() { return getToken(DB2zSQLParser.CHANGES, 0); }
		public TerminalNode ACTIVATE() { return getToken(DB2zSQLParser.ACTIVATE, 0); }
		public TerminalNode DEACTIVATE() { return getToken(DB2zSQLParser.DEACTIVATE, 0); }
		public TerminalNode YES() { return getToken(DB2zSQLParser.YES, 0); }
		public TerminalNode ALL() { return getToken(DB2zSQLParser.ALL, 0); }
		public UniqueConstraintContext uniqueConstraint() {
			return getRuleContext(UniqueConstraintContext.class,0);
		}
		public ReferentialConstraintContext referentialConstraint() {
			return getRuleContext(ReferentialConstraintContext.class,0);
		}
		public CheckConstraintContext checkConstraint() {
			return getRuleContext(CheckConstraintContext.class,0);
		}
		public ProgramNameContext programName() {
			return getRuleContext(ProgramNameContext.class,0);
		}
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode SYSTEM() { return getToken(DB2zSQLParser.SYSTEM, 0); }
		public ExtraRowOptionContext extraRowOption() {
			return getRuleContext(ExtraRowOptionContext.class,0);
		}
		public TerminalNode MATERIALIZED() { return getToken(DB2zSQLParser.MATERIALIZED, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TerminalNode CARDINALITY() { return getToken(DB2zSQLParser.CARDINALITY, 0); }
		public TerminalNode PRIMARY() { return getToken(DB2zSQLParser.PRIMARY, 0); }
		public ConstraintNameContext constraintName() {
			return getRuleContext(ConstraintNameContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(DB2zSQLParser.UNIQUE, 0); }
		public TerminalNode CHECK() { return getToken(DB2zSQLParser.CHECK, 0); }
		public TerminalNode CONSTRAINT() { return getToken(DB2zSQLParser.CONSTRAINT, 0); }
		public TerminalNode FOREIGN() { return getToken(DB2zSQLParser.FOREIGN, 0); }
		public TableOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTableOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTableOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTableOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableOptionListContext tableOptionList() throws RecognitionException {
		TableOptionListContext _localctx = new TableOptionListContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_tableOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3340);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,340,_ctx) ) {
			case 1:
				{
				{
				setState(3185);
				match(ADD);
				setState(3187);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,324,_ctx) ) {
				case 1:
					{
					setState(3186);
					match(COLUMN);
					}
					break;
				}
				setState(3189);
				columnDefinition();
				}
				}
				break;
			case 2:
				{
				{
				setState(3190);
				match(ALTER);
				setState(3192);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,325,_ctx) ) {
				case 1:
					{
					setState(3191);
					match(COLUMN);
					}
					break;
				}
				setState(3194);
				columnAlteration();
				}
				}
				break;
			case 3:
				{
				{
				setState(3195);
				match(RENAME);
				setState(3196);
				match(COLUMN);
				setState(3197);
				sourceColumnName();
				setState(3198);
				match(TO);
				setState(3199);
				targetColumnName();
				}
				}
				break;
			case 4:
				{
				{
				setState(3201);
				match(DROP);
				setState(3203);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,326,_ctx) ) {
				case 1:
					{
					setState(3202);
					match(COLUMN);
					}
					break;
				}
				setState(3205);
				columnName();
				setState(3206);
				match(RESTRICT);
				}
				}
				break;
			case 5:
				{
				{
				setState(3208);
				match(ADD);
				setState(3209);
				match(PERIOD);
				setState(3211);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(3210);
					match(FOR);
					}
				}

				setState(3213);
				periodDefinition();
				}
				}
				break;
			case 6:
				{
				{
				setState(3214);
				match(ADD);
				setState(3218);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,328,_ctx) ) {
				case 1:
					{
					setState(3215);
					uniqueConstraint();
					}
					break;
				case 2:
					{
					setState(3216);
					referentialConstraint();
					}
					break;
				case 3:
					{
					setState(3217);
					checkConstraint();
					}
					break;
				}
				}
				}
				break;
			case 7:
				{
				{
				setState(3220);
				match(DROP);
				setState(3231);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PRIMARY:
					{
					{
					setState(3221);
					match(PRIMARY);
					setState(3222);
					match(KEY);
					}
					}
					break;
				case CHECK:
				case CONSTRAINT:
				case UNIQUE:
				case FOREIGN:
					{
					{
					setState(3228);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case UNIQUE:
						{
						setState(3223);
						match(UNIQUE);
						}
						break;
					case FOREIGN:
						{
						{
						setState(3224);
						match(FOREIGN);
						setState(3225);
						match(KEY);
						}
						}
						break;
					case CHECK:
						{
						setState(3226);
						match(CHECK);
						}
						break;
					case CONSTRAINT:
						{
						setState(3227);
						match(CONSTRAINT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3230);
					constraintName();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case 8:
				{
				{
				setState(3233);
				match(ADD);
				setState(3234);
				match(PARTITION);
				setState(3235);
				match(BY);
				setState(3236);
				partitioningClause();
				}
				}
				break;
			case 9:
				{
				{
				setState(3237);
				match(ADD);
				setState(3238);
				match(PARTITION);
				setState(3239);
				partitionClause();
				}
				}
				break;
			case 10:
				{
				{
				setState(3240);
				match(ALTER);
				setState(3241);
				match(PARTITION);
				setState(3242);
				match(INTEGERLITERAL);
				setState(3243);
				partitionClause();
				}
				}
				break;
			case 11:
				{
				{
				setState(3244);
				match(ROTATE);
				setState(3245);
				match(PARTITION);
				setState(3246);
				_la = _input.LA(1);
				if ( !(_la==INTEGERLITERAL || _la==FIRST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3247);
				match(TO);
				setState(3248);
				match(LAST);
				setState(3249);
				rotatePartitionClause();
				}
				}
				break;
			case 12:
				{
				{
				setState(3250);
				match(DROP);
				setState(3251);
				match(ORGANIZATION);
				}
				}
				break;
			case 13:
				{
				{
				setState(3252);
				alterHashOrganization();
				}
				}
				break;
			case 14:
				{
				{
				setState(3253);
				match(ADD);
				setState(3255);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SYSTEM) {
					{
					setState(3254);
					match(SYSTEM);
					}
				}

				setState(3257);
				match(VERSIONING);
				setState(3258);
				match(USE);
				setState(3259);
				match(HISTORY);
				setState(3260);
				match(TABLE);
				setState(3261);
				historyTableName();
				setState(3263);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(3262);
					extraRowOption();
					}
				}

				}
				}
				break;
			case 15:
				{
				{
				setState(3265);
				match(DROP);
				setState(3267);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SYSTEM) {
					{
					setState(3266);
					match(SYSTEM);
					}
				}

				setState(3269);
				match(VERSIONING);
				}
				}
				break;
			case 16:
				{
				{
				setState(3270);
				match(ADD);
				setState(3274);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case MATERIALIZED:
					{
					{
					setState(3271);
					match(MATERIALIZED);
					setState(3272);
					match(QUERY);
					}
					}
					break;
				case QUERY:
					{
					setState(3273);
					match(QUERY);
					}
					break;
				case LPAREN:
					break;
				default:
					break;
				}
				setState(3276);
				materializedQueryDefinition();
				}
				}
				break;
			case 17:
				{
				{
				setState(3277);
				match(ALTER);
				setState(3279);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MATERIALIZED) {
					{
					setState(3278);
					match(MATERIALIZED);
					}
				}

				setState(3281);
				match(QUERY);
				setState(3282);
				materializedQueryAlteration();
				}
				}
				break;
			case 18:
				{
				{
				setState(3283);
				match(DROP);
				setState(3285);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MATERIALIZED) {
					{
					setState(3284);
					match(MATERIALIZED);
					}
				}

				setState(3287);
				match(QUERY);
				}
				}
				break;
			case 19:
				{
				{
				setState(3288);
				match(DATA);
				setState(3289);
				match(CAPTURE);
				setState(3290);
				_la = _input.LA(1);
				if ( !(_la==NONE || _la==CHANGES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case 20:
				{
				{
				setState(3292);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(3291);
					match(NOT);
					}
				}

				setState(3294);
				match(VOLATILE);
				setState(3296);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CARDINALITY) {
					{
					setState(3295);
					match(CARDINALITY);
					}
				}

				}
				}
				break;
			case 21:
				{
				{
				setState(3298);
				match(ADD);
				setState(3299);
				match(CLONE);
				setState(3300);
				cloneTableName();
				}
				}
				break;
			case 22:
				{
				{
				setState(3301);
				match(DROP);
				setState(3302);
				match(CLONE);
				}
				}
				break;
			case 23:
				{
				{
				setState(3303);
				match(ADD);
				setState(3304);
				match(RESTRICT);
				setState(3305);
				match(ON);
				setState(3306);
				match(DROP);
				}
				}
				break;
			case 24:
				{
				{
				setState(3307);
				match(DROP);
				setState(3308);
				match(RESTRICT);
				setState(3309);
				match(ON);
				setState(3310);
				match(DROP);
				}
				}
				break;
			case 25:
				{
				{
				setState(3311);
				_la = _input.LA(1);
				if ( !(_la==ACTIVATE || _la==DEACTIVATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3312);
				match(ROW);
				setState(3313);
				match(ACCESS);
				setState(3314);
				match(CONTROL);
				}
				}
				break;
			case 26:
				{
				{
				setState(3315);
				_la = _input.LA(1);
				if ( !(_la==ACTIVATE || _la==DEACTIVATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3316);
				match(COLUMN);
				setState(3317);
				match(ACCESS);
				setState(3318);
				match(CONTROL);
				}
				}
				break;
			case 27:
				{
				{
				setState(3319);
				match(APPEND);
				setState(3320);
				_la = _input.LA(1);
				if ( !(_la==NO || _la==YES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case 28:
				{
				{
				setState(3321);
				match(AUDIT);
				setState(3322);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==NONE || _la==CHANGES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case 29:
				{
				{
				setState(3323);
				match(VALIDPROC);
				setState(3326);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,339,_ctx) ) {
				case 1:
					{
					setState(3324);
					programName();
					}
					break;
				case 2:
					{
					setState(3325);
					match(NULL);
					}
					break;
				}
				}
				}
				break;
			case 30:
				{
				{
				setState(3328);
				match(ENABLE);
				setState(3329);
				match(ARCHIVE);
				setState(3330);
				match(USE);
				setState(3331);
				archiveTableName();
				}
				}
				break;
			case 31:
				{
				{
				setState(3332);
				match(DISABLE);
				setState(3333);
				match(ARCHIVE);
				}
				}
				break;
			case 32:
				{
				{
				setState(3334);
				match(NO);
				setState(3335);
				match(KEY);
				setState(3336);
				match(LABEL);
				}
				}
				break;
			case 33:
				{
				{
				setState(3337);
				match(KEY);
				setState(3338);
				match(LABEL);
				setState(3339);
				keyLabelName();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablespaceOptionListContext extends ParserRuleContext {
		public BufferpoolOptionContext bufferpoolOption() {
			return getRuleContext(BufferpoolOptionContext.class,0);
		}
		public CloseOptionContext closeOption() {
			return getRuleContext(CloseOptionContext.class,0);
		}
		public CompressOptionContext compressOption() {
			return getRuleContext(CompressOptionContext.class,0);
		}
		public DssizeOptionContext dssizeOption() {
			return getRuleContext(DssizeOptionContext.class,0);
		}
		public TerminalNode CCSID() { return getToken(DB2zSQLParser.CCSID, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode DROP() { return getToken(DB2zSQLParser.DROP, 0); }
		public TerminalNode PENDING() { return getToken(DB2zSQLParser.PENDING, 0); }
		public TerminalNode CHANGES() { return getToken(DB2zSQLParser.CHANGES, 0); }
		public TerminalNode INSERT() { return getToken(DB2zSQLParser.INSERT, 0); }
		public TerminalNode ALGORITHM() { return getToken(DB2zSQLParser.ALGORITHM, 0); }
		public TerminalNode LOCKMAX() { return getToken(DB2zSQLParser.LOCKMAX, 0); }
		public TerminalNode LOCKSIZE() { return getToken(DB2zSQLParser.LOCKSIZE, 0); }
		public TerminalNode LOGGED() { return getToken(DB2zSQLParser.LOGGED, 0); }
		public TerminalNode MAXROWS() { return getToken(DB2zSQLParser.MAXROWS, 0); }
		public TerminalNode MAXPARTITIONS() { return getToken(DB2zSQLParser.MAXPARTITIONS, 0); }
		public TerminalNode MEMBER() { return getToken(DB2zSQLParser.MEMBER, 0); }
		public TerminalNode CLUSTER() { return getToken(DB2zSQLParser.CLUSTER, 0); }
		public TerminalNode SEGSIZE() { return getToken(DB2zSQLParser.SEGSIZE, 0); }
		public TerminalNode TRACKMOD() { return getToken(DB2zSQLParser.TRACKMOD, 0); }
		public UsingBlockContext usingBlock() {
			return getRuleContext(UsingBlockContext.class,0);
		}
		public FreeBlockContext freeBlock() {
			return getRuleContext(FreeBlockContext.class,0);
		}
		public GbpcacheBlockContext gbpcacheBlock() {
			return getRuleContext(GbpcacheBlockContext.class,0);
		}
		public TerminalNode PAGENUM() { return getToken(DB2zSQLParser.PAGENUM, 0); }
		public TerminalNode RELATIVE() { return getToken(DB2zSQLParser.RELATIVE, 0); }
		public TerminalNode SYSTEM() { return getToken(DB2zSQLParser.SYSTEM, 0); }
		public TerminalNode ANY() { return getToken(DB2zSQLParser.ANY, 0); }
		public TerminalNode TABLESPACE() { return getToken(DB2zSQLParser.TABLESPACE, 0); }
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public TerminalNode PAGE() { return getToken(DB2zSQLParser.PAGE, 0); }
		public TerminalNode ROW() { return getToken(DB2zSQLParser.ROW, 0); }
		public TerminalNode LOB() { return getToken(DB2zSQLParser.LOB, 0); }
		public TerminalNode YES() { return getToken(DB2zSQLParser.YES, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode LOG() { return getToken(DB2zSQLParser.LOG, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TablespaceOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablespaceOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTablespaceOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTablespaceOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTablespaceOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablespaceOptionListContext tablespaceOptionList() throws RecognitionException {
		TablespaceOptionListContext _localctx = new TablespaceOptionListContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_tablespaceOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3384);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BUFFERPOOL:
				{
				setState(3342);
				bufferpoolOption();
				}
				break;
			case CCSID:
				{
				{
				setState(3343);
				match(CCSID);
				setState(3344);
				match(INTEGERLITERAL);
				}
				}
				break;
			case CLOSE:
				{
				setState(3345);
				closeOption();
				}
				break;
			case COMPRESS:
				{
				setState(3346);
				compressOption();
				}
				break;
			case DROP:
				{
				{
				setState(3347);
				match(DROP);
				setState(3348);
				match(PENDING);
				setState(3349);
				match(CHANGES);
				}
				}
				break;
			case DSSIZE:
				{
				setState(3350);
				dssizeOption();
				}
				break;
			case INSERT:
				{
				{
				setState(3351);
				match(INSERT);
				setState(3352);
				match(ALGORITHM);
				setState(3353);
				match(INTEGERLITERAL);
				}
				}
				break;
			case LOCKMAX:
				{
				{
				setState(3354);
				match(LOCKMAX);
				setState(3355);
				_la = _input.LA(1);
				if ( !(_la==INTEGERLITERAL || _la==SYSTEM) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case LOCKSIZE:
				{
				{
				setState(3356);
				match(LOCKSIZE);
				setState(3357);
				_la = _input.LA(1);
				if ( !(_la==ANY || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (ROW - 256)) | (1L << (TABLE - 256)) | (1L << (TABLESPACE - 256)))) != 0) || _la==LOB || _la==PAGE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case NOT:
			case LOGGED:
				{
				{
				setState(3359);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(3358);
					match(NOT);
					}
				}

				setState(3361);
				match(LOGGED);
				}
				}
				break;
			case LOG:
				{
				setState(3366);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,342,_ctx) ) {
				case 1:
					{
					{
					setState(3362);
					match(LOG);
					setState(3363);
					match(YES);
					}
					}
					break;
				case 2:
					{
					{
					setState(3364);
					match(LOG);
					setState(3365);
					match(NO);
					}
					}
					break;
				}
				}
				break;
			case MAXROWS:
				{
				{
				setState(3368);
				match(MAXROWS);
				setState(3369);
				match(INTEGERLITERAL);
				}
				}
				break;
			case MAXPARTITIONS:
				{
				{
				setState(3370);
				match(MAXPARTITIONS);
				setState(3371);
				match(INTEGERLITERAL);
				}
				}
				break;
			case MEMBER:
				{
				{
				setState(3372);
				match(MEMBER);
				setState(3373);
				match(CLUSTER);
				setState(3374);
				_la = _input.LA(1);
				if ( !(_la==NO || _la==YES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case SEGSIZE:
				{
				{
				setState(3375);
				match(SEGSIZE);
				setState(3376);
				match(INTEGERLITERAL);
				}
				}
				break;
			case TRACKMOD:
				{
				{
				setState(3377);
				match(TRACKMOD);
				setState(3378);
				_la = _input.LA(1);
				if ( !(_la==NO || _la==YES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case ERASE:
			case PRIQTY:
			case SECQTY:
			case USING:
				{
				{
				setState(3379);
				usingBlock();
				}
				}
				break;
			case FREEPAGE:
			case PCTFREE:
				{
				{
				setState(3380);
				freeBlock();
				}
				}
				break;
			case GBPCACHE:
				{
				{
				setState(3381);
				gbpcacheBlock();
				}
				}
				break;
			case PAGENUM:
				{
				{
				setState(3382);
				match(PAGENUM);
				setState(3383);
				match(RELATIVE);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TrustedContextOptionListContext extends ParserRuleContext {
		public UserClauseContext userClause() {
			return getRuleContext(UserClauseContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode SYSTEM() { return getToken(DB2zSQLParser.SYSTEM, 0); }
		public TerminalNode AUTHID() { return getToken(DB2zSQLParser.AUTHID, 0); }
		public AuthorizationNameContext authorizationName() {
			return getRuleContext(AuthorizationNameContext.class,0);
		}
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode DEFAULT() { return getToken(DB2zSQLParser.DEFAULT, 0); }
		public List<TerminalNode> ROLE() { return getTokens(DB2zSQLParser.ROLE); }
		public TerminalNode ROLE(int i) {
			return getToken(DB2zSQLParser.ROLE, i);
		}
		public RoleNameContext roleName() {
			return getRuleContext(RoleNameContext.class,0);
		}
		public TerminalNode ENABLE() { return getToken(DB2zSQLParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(DB2zSQLParser.DISABLE, 0); }
		public TerminalNode SECURITY() { return getToken(DB2zSQLParser.SECURITY, 0); }
		public TerminalNode LABEL() { return getToken(DB2zSQLParser.LABEL, 0); }
		public SeclabelNameContext seclabelName() {
			return getRuleContext(SeclabelNameContext.class,0);
		}
		public TerminalNode ATTRIBUTES() { return getToken(DB2zSQLParser.ATTRIBUTES, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<AlterAttributesOptionsContext> alterAttributesOptions() {
			return getRuleContexts(AlterAttributesOptionsContext.class);
		}
		public AlterAttributesOptionsContext alterAttributesOptions(int i) {
			return getRuleContext(AlterAttributesOptionsContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode ADD() { return getToken(DB2zSQLParser.ADD, 0); }
		public List<AddAttributesOptionsContext> addAttributesOptions() {
			return getRuleContexts(AddAttributesOptionsContext.class);
		}
		public AddAttributesOptionsContext addAttributesOptions(int i) {
			return getRuleContext(AddAttributesOptionsContext.class,i);
		}
		public TerminalNode DROP() { return getToken(DB2zSQLParser.DROP, 0); }
		public List<DropAttributesOptionsContext> dropAttributesOptions() {
			return getRuleContexts(DropAttributesOptionsContext.class);
		}
		public DropAttributesOptionsContext dropAttributesOptions(int i) {
			return getRuleContext(DropAttributesOptionsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public TerminalNode WITHOUT() { return getToken(DB2zSQLParser.WITHOUT, 0); }
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode OBJECT() { return getToken(DB2zSQLParser.OBJECT, 0); }
		public TerminalNode OWNER() { return getToken(DB2zSQLParser.OWNER, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode AND() { return getToken(DB2zSQLParser.AND, 0); }
		public TerminalNode QUALIFIER() { return getToken(DB2zSQLParser.QUALIFIER, 0); }
		public TrustedContextOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trustedContextOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTrustedContextOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTrustedContextOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTrustedContextOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TrustedContextOptionListContext trustedContextOptionList() throws RecognitionException {
		TrustedContextOptionListContext _localctx = new TrustedContextOptionListContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_trustedContextOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3474);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,352,_ctx) ) {
			case 1:
				{
				{
				setState(3386);
				match(ALTER);
				setState(3387);
				match(SYSTEM);
				setState(3388);
				match(AUTHID);
				setState(3389);
				authorizationName();
				}
				}
				break;
			case 2:
				{
				{
				setState(3390);
				match(ALTER);
				setState(3391);
				match(NO);
				setState(3392);
				match(DEFAULT);
				setState(3393);
				match(ROLE);
				}
				}
				break;
			case 3:
				{
				{
				setState(3394);
				match(ALTER);
				setState(3395);
				match(DEFAULT);
				setState(3396);
				match(ROLE);
				setState(3397);
				roleName();
				setState(3410);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case WITHOUT:
					{
					{
					setState(3398);
					match(WITHOUT);
					setState(3399);
					match(ROLE);
					setState(3400);
					match(AS);
					setState(3401);
					match(OBJECT);
					setState(3402);
					match(OWNER);
					}
					}
					break;
				case WITH:
					{
					{
					setState(3403);
					match(WITH);
					setState(3404);
					match(ROLE);
					setState(3405);
					match(AS);
					setState(3406);
					match(OBJECT);
					setState(3407);
					match(OWNER);
					setState(3408);
					match(AND);
					setState(3409);
					match(QUALIFIER);
					}
					}
					break;
				case EOF:
				case SEMICOLON:
				case ADD:
				case ALTER:
				case DEFAULT:
				case DISABLE:
				case DROP:
				case END_EXEC:
				case NO:
				case ENABLE:
				case REPLACE:
					break;
				default:
					break;
				}
				}
				}
				break;
			case 4:
				{
				{
				setState(3413);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALTER) {
					{
					setState(3412);
					match(ALTER);
					}
				}

				setState(3415);
				match(ENABLE);
				}
				}
				break;
			case 5:
				{
				{
				setState(3417);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALTER) {
					{
					setState(3416);
					match(ALTER);
					}
				}

				setState(3419);
				match(DISABLE);
				}
				}
				break;
			case 6:
				{
				{
				setState(3421);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALTER) {
					{
					setState(3420);
					match(ALTER);
					}
				}

				setState(3423);
				match(NO);
				setState(3424);
				match(DEFAULT);
				setState(3425);
				match(SECURITY);
				setState(3426);
				match(LABEL);
				}
				}
				break;
			case 7:
				{
				{
				setState(3428);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALTER) {
					{
					setState(3427);
					match(ALTER);
					}
				}

				setState(3430);
				match(DEFAULT);
				setState(3431);
				match(SECURITY);
				setState(3432);
				match(LABEL);
				setState(3433);
				seclabelName();
				}
				}
				break;
			case 8:
				{
				{
				setState(3434);
				match(ALTER);
				setState(3435);
				match(ATTRIBUTES);
				setState(3436);
				match(LPAREN);
				setState(3437);
				alterAttributesOptions();
				setState(3442);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3438);
					match(COMMA);
					setState(3439);
					alterAttributesOptions();
					}
					}
					setState(3444);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3445);
				match(RPAREN);
				}
				}
				break;
			case 9:
				{
				{
				setState(3447);
				match(ADD);
				setState(3448);
				match(ATTRIBUTES);
				setState(3449);
				match(LPAREN);
				setState(3450);
				addAttributesOptions();
				setState(3455);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3451);
					match(COMMA);
					setState(3452);
					addAttributesOptions();
					}
					}
					setState(3457);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3458);
				match(RPAREN);
				}
				}
				break;
			case 10:
				{
				{
				setState(3460);
				match(DROP);
				setState(3461);
				match(ATTRIBUTES);
				setState(3462);
				match(LPAREN);
				setState(3463);
				dropAttributesOptions();
				setState(3468);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3464);
					match(COMMA);
					setState(3465);
					dropAttributesOptions();
					}
					}
					setState(3470);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3471);
				match(RPAREN);
				}
				}
				break;
			case 11:
				{
				setState(3473);
				userClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DatabaseOptionListContext extends ParserRuleContext {
		public BufferpoolOptionContext bufferpoolOption() {
			return getRuleContext(BufferpoolOptionContext.class,0);
		}
		public TerminalNode INDEXBP() { return getToken(DB2zSQLParser.INDEXBP, 0); }
		public BpNameContext bpName() {
			return getRuleContext(BpNameContext.class,0);
		}
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode WORKFILE() { return getToken(DB2zSQLParser.WORKFILE, 0); }
		public TerminalNode STOGROUP() { return getToken(DB2zSQLParser.STOGROUP, 0); }
		public TerminalNode CCSID() { return getToken(DB2zSQLParser.CCSID, 0); }
		public TerminalNode ASCII() { return getToken(DB2zSQLParser.ASCII, 0); }
		public TerminalNode EBCDIC() { return getToken(DB2zSQLParser.EBCDIC, 0); }
		public TerminalNode UNICODE() { return getToken(DB2zSQLParser.UNICODE, 0); }
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public MemberNameContext memberName() {
			return getRuleContext(MemberNameContext.class,0);
		}
		public TerminalNode SYSDEFLT() { return getToken(DB2zSQLParser.SYSDEFLT, 0); }
		public StogroupNameContext stogroupName() {
			return getRuleContext(StogroupNameContext.class,0);
		}
		public DatabaseOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_databaseOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDatabaseOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDatabaseOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDatabaseOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DatabaseOptionListContext databaseOptionList() throws RecognitionException {
		DatabaseOptionListContext _localctx = new DatabaseOptionListContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_databaseOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3492);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BUFFERPOOL:
				{
				setState(3476);
				bufferpoolOption();
				}
				break;
			case INDEXBP:
				{
				{
				setState(3477);
				match(INDEXBP);
				setState(3478);
				bpName();
				}
				}
				break;
			case AS:
				{
				{
				setState(3479);
				match(AS);
				setState(3480);
				match(WORKFILE);
				setState(3483);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(3481);
					match(FOR);
					setState(3482);
					memberName();
					}
				}

				}
				}
				break;
			case STOGROUP:
				{
				{
				setState(3485);
				match(STOGROUP);
				setState(3488);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,354,_ctx) ) {
				case 1:
					{
					setState(3486);
					match(SYSDEFLT);
					}
					break;
				case 2:
					{
					setState(3487);
					stogroupName();
					}
					break;
				}
				}
				}
				break;
			case CCSID:
				{
				{
				setState(3490);
				match(CCSID);
				setState(3491);
				_la = _input.LA(1);
				if ( !(_la==EBCDIC || _la==ASCII || _la==UNICODE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateIndexOptionListContext extends ParserRuleContext {
		public IncludeColumnPhraseContext includeColumnPhrase() {
			return getRuleContext(IncludeColumnPhraseContext.class,0);
		}
		public ClusterOptionContext clusterOption() {
			return getRuleContext(ClusterOptionContext.class,0);
		}
		public PaddedOptionContext paddedOption() {
			return getRuleContext(PaddedOptionContext.class,0);
		}
		public CompressOptionContext compressOption() {
			return getRuleContext(CompressOptionContext.class,0);
		}
		public List<UsingSpecification2Context> usingSpecification2() {
			return getRuleContexts(UsingSpecification2Context.class);
		}
		public UsingSpecification2Context usingSpecification2(int i) {
			return getRuleContext(UsingSpecification2Context.class,i);
		}
		public List<FreeSpecificationContext> freeSpecification() {
			return getRuleContexts(FreeSpecificationContext.class);
		}
		public FreeSpecificationContext freeSpecification(int i) {
			return getRuleContext(FreeSpecificationContext.class,i);
		}
		public List<GbpcacheSpecificationContext> gbpcacheSpecification() {
			return getRuleContexts(GbpcacheSpecificationContext.class);
		}
		public GbpcacheSpecificationContext gbpcacheSpecification(int i) {
			return getRuleContext(GbpcacheSpecificationContext.class,i);
		}
		public DefineOptionContext defineOption() {
			return getRuleContext(DefineOptionContext.class,0);
		}
		public BufferpoolOptionContext bufferpoolOption() {
			return getRuleContext(BufferpoolOptionContext.class,0);
		}
		public CloseOptionContext closeOption() {
			return getRuleContext(CloseOptionContext.class,0);
		}
		public List<DssizeOptionContext> dssizeOption() {
			return getRuleContexts(DssizeOptionContext.class);
		}
		public DssizeOptionContext dssizeOption(int i) {
			return getRuleContext(DssizeOptionContext.class,i);
		}
		public PiecesizeOptionContext piecesizeOption() {
			return getRuleContext(PiecesizeOptionContext.class,0);
		}
		public CopyOptionContext copyOption() {
			return getRuleContext(CopyOptionContext.class,0);
		}
		public XmlIndexSpecificationContext xmlIndexSpecification() {
			return getRuleContext(XmlIndexSpecificationContext.class,0);
		}
		public TerminalNode PARTITIONED() { return getToken(DB2zSQLParser.PARTITIONED, 0); }
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public TerminalNode KEYS() { return getToken(DB2zSQLParser.KEYS, 0); }
		public TerminalNode PARTITION() { return getToken(DB2zSQLParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<PartitionElementContext> partitionElement() {
			return getRuleContexts(PartitionElementContext.class);
		}
		public PartitionElementContext partitionElement(int i) {
			return getRuleContext(PartitionElementContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode DEFER() { return getToken(DB2zSQLParser.DEFER, 0); }
		public TerminalNode INCLUDE() { return getToken(DB2zSQLParser.INCLUDE, 0); }
		public TerminalNode EXCLUDE() { return getToken(DB2zSQLParser.EXCLUDE, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode YES() { return getToken(DB2zSQLParser.YES, 0); }
		public TerminalNode RANGE() { return getToken(DB2zSQLParser.RANGE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public CreateIndexOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createIndexOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateIndexOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateIndexOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateIndexOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateIndexOptionListContext createIndexOptionList() throws RecognitionException {
		CreateIndexOptionListContext _localctx = new CreateIndexOptionListContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_createIndexOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3548);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,362,_ctx) ) {
			case 1:
				{
				{
				setState(3494);
				xmlIndexSpecification();
				}
				}
				break;
			case 2:
				{
				setState(3495);
				includeColumnPhrase();
				}
				break;
			case 3:
				{
				setState(3496);
				clusterOption();
				}
				break;
			case 4:
				{
				{
				setState(3497);
				match(PARTITIONED);
				}
				}
				break;
			case 5:
				{
				setState(3498);
				paddedOption();
				}
				break;
			case 6:
				{
				setState(3499);
				compressOption();
				}
				break;
			case 7:
				{
				setState(3500);
				usingSpecification2();
				}
				break;
			case 8:
				{
				setState(3501);
				freeSpecification();
				}
				break;
			case 9:
				{
				setState(3502);
				gbpcacheSpecification();
				}
				break;
			case 10:
				{
				setState(3503);
				defineOption();
				}
				break;
			case 11:
				{
				{
				setState(3504);
				_la = _input.LA(1);
				if ( !(_la==INCLUDE || _la==EXCLUDE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3505);
				match(NULL);
				setState(3506);
				match(KEYS);
				}
				}
				break;
			case 12:
				{
				{
				setState(3507);
				match(PARTITION);
				setState(3508);
				match(BY);
				setState(3510);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RANGE) {
					{
					setState(3509);
					match(RANGE);
					}
				}

				setState(3512);
				match(LPAREN);
				setState(3513);
				partitionElement();
				setState(3520);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==DSSIZE || _la==USING || ((((_la - 461)) & ~0x3f) == 0 && ((1L << (_la - 461)) & ((1L << (FREEPAGE - 461)) | (1L << (GBPCACHE - 461)) | (1L << (PCTFREE - 461)))) != 0)) {
					{
					setState(3518);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case USING:
						{
						setState(3514);
						usingSpecification2();
						}
						break;
					case FREEPAGE:
					case PCTFREE:
						{
						setState(3515);
						freeSpecification();
						}
						break;
					case GBPCACHE:
						{
						setState(3516);
						gbpcacheSpecification();
						}
						break;
					case DSSIZE:
						{
						setState(3517);
						dssizeOption();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(3522);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3536);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3523);
					match(COMMA);
					setState(3524);
					partitionElement();
					setState(3531);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==DSSIZE || _la==USING || ((((_la - 461)) & ~0x3f) == 0 && ((1L << (_la - 461)) & ((1L << (FREEPAGE - 461)) | (1L << (GBPCACHE - 461)) | (1L << (PCTFREE - 461)))) != 0)) {
						{
						setState(3529);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case USING:
							{
							setState(3525);
							usingSpecification2();
							}
							break;
						case FREEPAGE:
						case PCTFREE:
							{
							setState(3526);
							freeSpecification();
							}
							break;
						case GBPCACHE:
							{
							setState(3527);
							gbpcacheSpecification();
							}
							break;
						case DSSIZE:
							{
							setState(3528);
							dssizeOption();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						setState(3533);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					}
					setState(3538);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3539);
				match(RPAREN);
				}
				}
				break;
			case 13:
				{
				setState(3541);
				bufferpoolOption();
				}
				break;
			case 14:
				{
				setState(3542);
				closeOption();
				}
				break;
			case 15:
				{
				{
				setState(3543);
				match(DEFER);
				setState(3544);
				_la = _input.LA(1);
				if ( !(_la==NO || _la==YES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case 16:
				{
				setState(3545);
				dssizeOption();
				}
				break;
			case 17:
				{
				setState(3546);
				piecesizeOption();
				}
				break;
			case 18:
				{
				setState(3547);
				copyOption();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateLobTablespaceOptionListContext extends ParserRuleContext {
		public BufferpoolOptionContext bufferpoolOption() {
			return getRuleContext(BufferpoolOptionContext.class,0);
		}
		public CloseOptionContext closeOption() {
			return getRuleContext(CloseOptionContext.class,0);
		}
		public CompressOptionContext compressOption() {
			return getRuleContext(CompressOptionContext.class,0);
		}
		public DefineOptionContext defineOption() {
			return getRuleContext(DefineOptionContext.class,0);
		}
		public DssizeOptionContext dssizeOption() {
			return getRuleContext(DssizeOptionContext.class,0);
		}
		public GbpcacheSpecificationContext gbpcacheSpecification() {
			return getRuleContext(GbpcacheSpecificationContext.class,0);
		}
		public LockmaxOptionContext lockmaxOption() {
			return getRuleContext(LockmaxOptionContext.class,0);
		}
		public LocksizeOptionContext locksizeOption() {
			return getRuleContext(LocksizeOptionContext.class,0);
		}
		public LoggedOptionContext loggedOption() {
			return getRuleContext(LoggedOptionContext.class,0);
		}
		public UsingSpecification2Context usingSpecification2() {
			return getRuleContext(UsingSpecification2Context.class,0);
		}
		public TerminalNode IN() { return getToken(DB2zSQLParser.IN, 0); }
		public DatabaseNameContext databaseName() {
			return getRuleContext(DatabaseNameContext.class,0);
		}
		public CreateLobTablespaceOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createLobTablespaceOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateLobTablespaceOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateLobTablespaceOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateLobTablespaceOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateLobTablespaceOptionListContext createLobTablespaceOptionList() throws RecognitionException {
		CreateLobTablespaceOptionListContext _localctx = new CreateLobTablespaceOptionListContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_createLobTablespaceOptionList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3562);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IN:
				{
				{
				setState(3550);
				match(IN);
				setState(3551);
				databaseName();
				}
				}
				break;
			case BUFFERPOOL:
				{
				setState(3552);
				bufferpoolOption();
				}
				break;
			case CLOSE:
				{
				setState(3553);
				closeOption();
				}
				break;
			case COMPRESS:
				{
				setState(3554);
				compressOption();
				}
				break;
			case DEFINE:
				{
				setState(3555);
				defineOption();
				}
				break;
			case DSSIZE:
				{
				setState(3556);
				dssizeOption();
				}
				break;
			case GBPCACHE:
				{
				setState(3557);
				gbpcacheSpecification();
				}
				break;
			case LOCKMAX:
				{
				setState(3558);
				lockmaxOption();
				}
				break;
			case LOCKSIZE:
				{
				setState(3559);
				locksizeOption();
				}
				break;
			case NOT:
			case LOG:
			case LOGGED:
				{
				setState(3560);
				loggedOption();
				}
				break;
			case USING:
				{
				setState(3561);
				usingSpecification2();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UsingSpecification2Context extends ParserRuleContext {
		public TerminalNode USING() { return getToken(DB2zSQLParser.USING, 0); }
		public TerminalNode STOGROUP() { return getToken(DB2zSQLParser.STOGROUP, 0); }
		public StogroupNameContext stogroupName() {
			return getRuleContext(StogroupNameContext.class,0);
		}
		public TerminalNode VCAT() { return getToken(DB2zSQLParser.VCAT, 0); }
		public CatalogNameContext catalogName() {
			return getRuleContext(CatalogNameContext.class,0);
		}
		public List<TerminalNode> PRIQTY() { return getTokens(DB2zSQLParser.PRIQTY); }
		public TerminalNode PRIQTY(int i) {
			return getToken(DB2zSQLParser.PRIQTY, i);
		}
		public List<TerminalNode> INTEGERLITERAL() { return getTokens(DB2zSQLParser.INTEGERLITERAL); }
		public TerminalNode INTEGERLITERAL(int i) {
			return getToken(DB2zSQLParser.INTEGERLITERAL, i);
		}
		public List<TerminalNode> SECQTY() { return getTokens(DB2zSQLParser.SECQTY); }
		public TerminalNode SECQTY(int i) {
			return getToken(DB2zSQLParser.SECQTY, i);
		}
		public List<TerminalNode> ERASE() { return getTokens(DB2zSQLParser.ERASE); }
		public TerminalNode ERASE(int i) {
			return getToken(DB2zSQLParser.ERASE, i);
		}
		public List<TerminalNode> NO() { return getTokens(DB2zSQLParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(DB2zSQLParser.NO, i);
		}
		public List<TerminalNode> YES() { return getTokens(DB2zSQLParser.YES); }
		public TerminalNode YES(int i) {
			return getToken(DB2zSQLParser.YES, i);
		}
		public UsingSpecification2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_usingSpecification2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterUsingSpecification2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitUsingSpecification2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitUsingSpecification2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UsingSpecification2Context usingSpecification2() throws RecognitionException {
		UsingSpecification2Context _localctx = new UsingSpecification2Context(_ctx, getState());
		enterRule(_localctx, 334, RULE_usingSpecification2);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3564);
			match(USING);
			setState(3580);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STOGROUP:
				{
				{
				setState(3565);
				match(STOGROUP);
				setState(3566);
				stogroupName();
				setState(3575);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==ERASE || _la==PRIQTY || _la==SECQTY) {
					{
					setState(3573);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case PRIQTY:
						{
						{
						setState(3567);
						match(PRIQTY);
						setState(3568);
						match(INTEGERLITERAL);
						}
						}
						break;
					case SECQTY:
						{
						{
						setState(3569);
						match(SECQTY);
						setState(3570);
						match(INTEGERLITERAL);
						}
						}
						break;
					case ERASE:
						{
						{
						setState(3571);
						match(ERASE);
						setState(3572);
						_la = _input.LA(1);
						if ( !(_la==NO || _la==YES) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(3577);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case VCAT:
				{
				{
				setState(3578);
				match(VCAT);
				setState(3579);
				catalogName();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlIndexSpecificationContext extends ParserRuleContext {
		public TerminalNode GENERATE() { return getToken(DB2zSQLParser.GENERATE, 0); }
		public TerminalNode USING() { return getToken(DB2zSQLParser.USING, 0); }
		public TerminalNode XMLPATTERN() { return getToken(DB2zSQLParser.XMLPATTERN, 0); }
		public XmlPatternClauseContext xmlPatternClause() {
			return getRuleContext(XmlPatternClauseContext.class,0);
		}
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode SQL() { return getToken(DB2zSQLParser.SQL, 0); }
		public SqlDataTypeContext sqlDataType() {
			return getRuleContext(SqlDataTypeContext.class,0);
		}
		public TerminalNode KEY() { return getToken(DB2zSQLParser.KEY, 0); }
		public TerminalNode KEYS() { return getToken(DB2zSQLParser.KEYS, 0); }
		public XmlIndexSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlIndexSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterXmlIndexSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitXmlIndexSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitXmlIndexSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlIndexSpecificationContext xmlIndexSpecification() throws RecognitionException {
		XmlIndexSpecificationContext _localctx = new XmlIndexSpecificationContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_xmlIndexSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3582);
			match(GENERATE);
			setState(3583);
			_la = _input.LA(1);
			if ( !(_la==KEY || _la==KEYS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3584);
			match(USING);
			setState(3585);
			match(XMLPATTERN);
			setState(3586);
			xmlPatternClause();
			setState(3587);
			match(AS);
			setState(3588);
			match(SQL);
			setState(3589);
			sqlDataType();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlPatternClauseContext extends ParserRuleContext {
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public XmlPatternClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlPatternClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterXmlPatternClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitXmlPatternClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitXmlPatternClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlPatternClauseContext xmlPatternClause() throws RecognitionException {
		XmlPatternClauseContext _localctx = new XmlPatternClauseContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_xmlPatternClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3591);
			match(NONNUMERICLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterAttributesOptionsContext extends ParserRuleContext {
		public TerminalNode ADDRESS() { return getToken(DB2zSQLParser.ADDRESS, 0); }
		public AddressValueContext addressValue() {
			return getRuleContext(AddressValueContext.class,0);
		}
		public TerminalNode ENCRYPTION() { return getToken(DB2zSQLParser.ENCRYPTION, 0); }
		public EncryptionValueContext encryptionValue() {
			return getRuleContext(EncryptionValueContext.class,0);
		}
		public TerminalNode SERVAUTH() { return getToken(DB2zSQLParser.SERVAUTH, 0); }
		public ServauthValueContext servauthValue() {
			return getRuleContext(ServauthValueContext.class,0);
		}
		public TerminalNode JOBNAME() { return getToken(DB2zSQLParser.JOBNAME, 0); }
		public JobnameValueContext jobnameValue() {
			return getRuleContext(JobnameValueContext.class,0);
		}
		public AlterAttributesOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterAttributesOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterAttributesOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterAttributesOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterAttributesOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterAttributesOptionsContext alterAttributesOptions() throws RecognitionException {
		AlterAttributesOptionsContext _localctx = new AlterAttributesOptionsContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_alterAttributesOptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3601);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADDRESS:
				{
				{
				setState(3593);
				match(ADDRESS);
				setState(3594);
				addressValue();
				}
				}
				break;
			case ENCRYPTION:
				{
				{
				setState(3595);
				match(ENCRYPTION);
				setState(3596);
				encryptionValue();
				}
				}
				break;
			case SERVAUTH:
				{
				{
				setState(3597);
				match(SERVAUTH);
				setState(3598);
				servauthValue();
				}
				}
				break;
			case JOBNAME:
				{
				{
				setState(3599);
				match(JOBNAME);
				setState(3600);
				jobnameValue();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AddAttributesOptionsContext extends ParserRuleContext {
		public TerminalNode ADDRESS() { return getToken(DB2zSQLParser.ADDRESS, 0); }
		public AddressValueContext addressValue() {
			return getRuleContext(AddressValueContext.class,0);
		}
		public TerminalNode SERVAUTH() { return getToken(DB2zSQLParser.SERVAUTH, 0); }
		public ServauthValueContext servauthValue() {
			return getRuleContext(ServauthValueContext.class,0);
		}
		public TerminalNode JOBNAME() { return getToken(DB2zSQLParser.JOBNAME, 0); }
		public JobnameValueContext jobnameValue() {
			return getRuleContext(JobnameValueContext.class,0);
		}
		public AddAttributesOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_addAttributesOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAddAttributesOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAddAttributesOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAddAttributesOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AddAttributesOptionsContext addAttributesOptions() throws RecognitionException {
		AddAttributesOptionsContext _localctx = new AddAttributesOptionsContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_addAttributesOptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3609);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADDRESS:
				{
				{
				setState(3603);
				match(ADDRESS);
				setState(3604);
				addressValue();
				}
				}
				break;
			case SERVAUTH:
				{
				{
				setState(3605);
				match(SERVAUTH);
				setState(3606);
				servauthValue();
				}
				}
				break;
			case JOBNAME:
				{
				{
				setState(3607);
				match(JOBNAME);
				setState(3608);
				jobnameValue();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropAttributesOptionsContext extends ParserRuleContext {
		public TerminalNode ADDRESS() { return getToken(DB2zSQLParser.ADDRESS, 0); }
		public TerminalNode SERVAUTH() { return getToken(DB2zSQLParser.SERVAUTH, 0); }
		public TerminalNode JOBNAME() { return getToken(DB2zSQLParser.JOBNAME, 0); }
		public AddressValueContext addressValue() {
			return getRuleContext(AddressValueContext.class,0);
		}
		public ServauthValueContext servauthValue() {
			return getRuleContext(ServauthValueContext.class,0);
		}
		public JobnameValueContext jobnameValue() {
			return getRuleContext(JobnameValueContext.class,0);
		}
		public DropAttributesOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropAttributesOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDropAttributesOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDropAttributesOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDropAttributesOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropAttributesOptionsContext dropAttributesOptions() throws RecognitionException {
		DropAttributesOptionsContext _localctx = new DropAttributesOptionsContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_dropAttributesOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3623);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADDRESS:
				{
				{
				setState(3611);
				match(ADDRESS);
				setState(3613);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NONNUMERICLITERAL) {
					{
					setState(3612);
					addressValue();
					}
				}

				}
				}
				break;
			case SERVAUTH:
				{
				{
				setState(3615);
				match(SERVAUTH);
				setState(3617);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NONNUMERICLITERAL) {
					{
					setState(3616);
					servauthValue();
					}
				}

				}
				}
				break;
			case JOBNAME:
				{
				{
				setState(3619);
				match(JOBNAME);
				setState(3621);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NONNUMERICLITERAL) {
					{
					setState(3620);
					jobnameValue();
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IncludeColumnPhraseContext extends ParserRuleContext {
		public TerminalNode INCLUDE() { return getToken(DB2zSQLParser.INCLUDE, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public IncludeColumnPhraseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_includeColumnPhrase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterIncludeColumnPhrase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitIncludeColumnPhrase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitIncludeColumnPhrase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IncludeColumnPhraseContext includeColumnPhrase() throws RecognitionException {
		IncludeColumnPhraseContext _localctx = new IncludeColumnPhraseContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_includeColumnPhrase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3625);
			match(INCLUDE);
			setState(3626);
			match(LPAREN);
			setState(3627);
			columnName();
			setState(3632);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3628);
				match(COMMA);
				setState(3629);
				columnName();
				}
				}
				setState(3634);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3635);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserClauseContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(DB2zSQLParser.ADD, 0); }
		public TerminalNode USE() { return getToken(DB2zSQLParser.USE, 0); }
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public List<UserClauseAddOptionsContext> userClauseAddOptions() {
			return getRuleContexts(UserClauseAddOptionsContext.class);
		}
		public UserClauseAddOptionsContext userClauseAddOptions(int i) {
			return getRuleContext(UserClauseAddOptionsContext.class,i);
		}
		public TerminalNode REPLACE() { return getToken(DB2zSQLParser.REPLACE, 0); }
		public List<UserClauseReplaceOptionsContext> userClauseReplaceOptions() {
			return getRuleContexts(UserClauseReplaceOptionsContext.class);
		}
		public UserClauseReplaceOptionsContext userClauseReplaceOptions(int i) {
			return getRuleContext(UserClauseReplaceOptionsContext.class,i);
		}
		public TerminalNode DROP() { return getToken(DB2zSQLParser.DROP, 0); }
		public List<UserClauseDropOptionsContext> userClauseDropOptions() {
			return getRuleContexts(UserClauseDropOptionsContext.class);
		}
		public UserClauseDropOptionsContext userClauseDropOptions(int i) {
			return getRuleContext(UserClauseDropOptionsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public UserClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterUserClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitUserClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitUserClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserClauseContext userClause() throws RecognitionException {
		UserClauseContext _localctx = new UserClauseContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_userClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3670);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
				{
				{
				setState(3637);
				match(ADD);
				setState(3638);
				match(USE);
				setState(3639);
				match(FOR);
				setState(3640);
				userClauseAddOptions();
				setState(3645);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3641);
					match(COMMA);
					setState(3642);
					userClauseAddOptions();
					}
					}
					setState(3647);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case REPLACE:
				{
				{
				setState(3648);
				match(REPLACE);
				setState(3649);
				match(USE);
				setState(3650);
				match(FOR);
				setState(3651);
				userClauseReplaceOptions();
				setState(3656);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3652);
					match(COMMA);
					setState(3653);
					userClauseReplaceOptions();
					}
					}
					setState(3658);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case DROP:
				{
				{
				setState(3659);
				match(DROP);
				setState(3660);
				match(USE);
				setState(3661);
				match(FOR);
				setState(3662);
				userClauseDropOptions();
				setState(3667);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3663);
					match(COMMA);
					setState(3664);
					userClauseDropOptions();
					}
					}
					setState(3669);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserClauseAddOptionsContext extends ParserRuleContext {
		public AuthorizationNameContext authorizationName() {
			return getRuleContext(AuthorizationNameContext.class,0);
		}
		public TerminalNode EXTERNAL() { return getToken(DB2zSQLParser.EXTERNAL, 0); }
		public TerminalNode SECURITY() { return getToken(DB2zSQLParser.SECURITY, 0); }
		public TerminalNode PROFILE() { return getToken(DB2zSQLParser.PROFILE, 0); }
		public ProfileNameContext profileName() {
			return getRuleContext(ProfileNameContext.class,0);
		}
		public TerminalNode PUBLIC() { return getToken(DB2zSQLParser.PUBLIC, 0); }
		public TerminalNode AUTHENTICATION() { return getToken(DB2zSQLParser.AUTHENTICATION, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode WITHOUT() { return getToken(DB2zSQLParser.WITHOUT, 0); }
		public UseOptionsContext useOptions() {
			return getRuleContext(UseOptionsContext.class,0);
		}
		public UserClauseAddOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userClauseAddOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterUserClauseAddOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitUserClauseAddOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitUserClauseAddOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserClauseAddOptionsContext userClauseAddOptions() throws RecognitionException {
		UserClauseAddOptionsContext _localctx = new UserClauseAddOptionsContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_userClauseAddOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3686);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,380,_ctx) ) {
			case 1:
				{
				{
				setState(3672);
				authorizationName();
				setState(3674);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ROLE || _la==SECURITY || _la==WITH || _la==WITHOUT) {
					{
					setState(3673);
					useOptions();
					}
				}

				}
				}
				break;
			case 2:
				{
				{
				setState(3676);
				match(EXTERNAL);
				setState(3677);
				match(SECURITY);
				setState(3678);
				match(PROFILE);
				setState(3679);
				profileName();
				setState(3681);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ROLE || _la==SECURITY || _la==WITH || _la==WITHOUT) {
					{
					setState(3680);
					useOptions();
					}
				}

				}
				}
				break;
			case 3:
				{
				{
				setState(3683);
				match(PUBLIC);
				setState(3684);
				_la = _input.LA(1);
				if ( !(_la==WITH || _la==WITHOUT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3685);
				match(AUTHENTICATION);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserClauseReplaceOptionsContext extends ParserRuleContext {
		public UserClauseAddOptionsContext userClauseAddOptions() {
			return getRuleContext(UserClauseAddOptionsContext.class,0);
		}
		public UserClauseReplaceOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userClauseReplaceOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterUserClauseReplaceOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitUserClauseReplaceOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitUserClauseReplaceOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserClauseReplaceOptionsContext userClauseReplaceOptions() throws RecognitionException {
		UserClauseReplaceOptionsContext _localctx = new UserClauseReplaceOptionsContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_userClauseReplaceOptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3688);
			userClauseAddOptions();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserClauseDropOptionsContext extends ParserRuleContext {
		public AuthorizationNameContext authorizationName() {
			return getRuleContext(AuthorizationNameContext.class,0);
		}
		public TerminalNode EXTERNAL() { return getToken(DB2zSQLParser.EXTERNAL, 0); }
		public TerminalNode SECURITY() { return getToken(DB2zSQLParser.SECURITY, 0); }
		public TerminalNode PROFILE() { return getToken(DB2zSQLParser.PROFILE, 0); }
		public ProfileNameContext profileName() {
			return getRuleContext(ProfileNameContext.class,0);
		}
		public TerminalNode PUBLIC() { return getToken(DB2zSQLParser.PUBLIC, 0); }
		public UserClauseDropOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userClauseDropOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterUserClauseDropOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitUserClauseDropOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitUserClauseDropOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserClauseDropOptionsContext userClauseDropOptions() throws RecognitionException {
		UserClauseDropOptionsContext _localctx = new UserClauseDropOptionsContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_userClauseDropOptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3696);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,381,_ctx) ) {
			case 1:
				{
				{
				setState(3690);
				authorizationName();
				}
				}
				break;
			case 2:
				{
				{
				setState(3691);
				match(EXTERNAL);
				setState(3692);
				match(SECURITY);
				setState(3693);
				match(PROFILE);
				setState(3694);
				profileName();
				}
				}
				break;
			case 3:
				{
				{
				setState(3695);
				match(PUBLIC);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UseOptionsContext extends ParserRuleContext {
		public TerminalNode AUTHENTICATION() { return getToken(DB2zSQLParser.AUTHENTICATION, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode WITHOUT() { return getToken(DB2zSQLParser.WITHOUT, 0); }
		public TerminalNode ROLE() { return getToken(DB2zSQLParser.ROLE, 0); }
		public RoleNameContext roleName() {
			return getRuleContext(RoleNameContext.class,0);
		}
		public TerminalNode SECURITY() { return getToken(DB2zSQLParser.SECURITY, 0); }
		public TerminalNode LABEL() { return getToken(DB2zSQLParser.LABEL, 0); }
		public SeclabelNameContext seclabelName() {
			return getRuleContext(SeclabelNameContext.class,0);
		}
		public UseOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_useOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterUseOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitUseOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitUseOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UseOptionsContext useOptions() throws RecognitionException {
		UseOptionsContext _localctx = new UseOptionsContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_useOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3700);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ROLE) {
				{
				setState(3698);
				match(ROLE);
				setState(3699);
				roleName();
				}
			}

			setState(3705);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SECURITY) {
				{
				setState(3702);
				match(SECURITY);
				setState(3703);
				match(LABEL);
				setState(3704);
				seclabelName();
				}
			}

			setState(3707);
			_la = _input.LA(1);
			if ( !(_la==WITH || _la==WITHOUT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3708);
			match(AUTHENTICATION);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterPartitionClauseContext extends ParserRuleContext {
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode PART() { return getToken(DB2zSQLParser.PART, 0); }
		public List<CompressOptionContext> compressOption() {
			return getRuleContexts(CompressOptionContext.class);
		}
		public CompressOptionContext compressOption(int i) {
			return getRuleContext(CompressOptionContext.class,i);
		}
		public List<DssizeOptionContext> dssizeOption() {
			return getRuleContexts(DssizeOptionContext.class);
		}
		public DssizeOptionContext dssizeOption(int i) {
			return getRuleContext(DssizeOptionContext.class,i);
		}
		public TerminalNode PARTITION() { return getToken(DB2zSQLParser.PARTITION, 0); }
		public List<UsingBlockContext> usingBlock() {
			return getRuleContexts(UsingBlockContext.class);
		}
		public UsingBlockContext usingBlock(int i) {
			return getRuleContext(UsingBlockContext.class,i);
		}
		public List<FreeBlockContext> freeBlock() {
			return getRuleContexts(FreeBlockContext.class);
		}
		public FreeBlockContext freeBlock(int i) {
			return getRuleContext(FreeBlockContext.class,i);
		}
		public List<GbpcacheBlockContext> gbpcacheBlock() {
			return getRuleContexts(GbpcacheBlockContext.class);
		}
		public GbpcacheBlockContext gbpcacheBlock(int i) {
			return getRuleContext(GbpcacheBlockContext.class,i);
		}
		public List<TerminalNode> TRACKMOD() { return getTokens(DB2zSQLParser.TRACKMOD); }
		public TerminalNode TRACKMOD(int i) {
			return getToken(DB2zSQLParser.TRACKMOD, i);
		}
		public List<TerminalNode> YES() { return getTokens(DB2zSQLParser.YES); }
		public TerminalNode YES(int i) {
			return getToken(DB2zSQLParser.YES, i);
		}
		public List<TerminalNode> NO() { return getTokens(DB2zSQLParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(DB2zSQLParser.NO, i);
		}
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public AlterPartitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterPartitionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterPartitionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterPartitionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterPartitionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterPartitionClauseContext alterPartitionClause() throws RecognitionException {
		AlterPartitionClauseContext _localctx = new AlterPartitionClauseContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_alterPartitionClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3715);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALTER:
			case PARTITION:
				{
				{
				setState(3711);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALTER) {
					{
					setState(3710);
					match(ALTER);
					}
				}

				setState(3713);
				match(PARTITION);
				}
				}
				break;
			case PART:
				{
				setState(3714);
				match(PART);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3717);
			match(INTEGERLITERAL);
			setState(3725); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(3725);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ERASE:
				case PRIQTY:
				case SECQTY:
				case USING:
					{
					{
					setState(3718);
					usingBlock();
					}
					}
					break;
				case FREEPAGE:
				case PCTFREE:
					{
					{
					setState(3719);
					freeBlock();
					}
					}
					break;
				case GBPCACHE:
					{
					{
					setState(3720);
					gbpcacheBlock();
					}
					}
					break;
				case COMPRESS:
					{
					setState(3721);
					compressOption();
					}
					break;
				case DSSIZE:
					{
					setState(3722);
					dssizeOption();
					}
					break;
				case TRACKMOD:
					{
					{
					setState(3723);
					match(TRACKMOD);
					setState(3724);
					_la = _input.LA(1);
					if ( !(_la==NO || _la==YES) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(3727); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==DSSIZE || _la==ERASE || _la==PRIQTY || _la==SECQTY || _la==USING || ((((_la - 459)) & ~0x3f) == 0 && ((1L << (_la - 459)) & ((1L << (COMPRESS - 459)) | (1L << (FREEPAGE - 459)) | (1L << (GBPCACHE - 459)) | (1L << (PCTFREE - 459)))) != 0) || _la==TRACKMOD );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UsingBlockContext extends ParserRuleContext {
		public List<UsingSpecification1Context> usingSpecification1() {
			return getRuleContexts(UsingSpecification1Context.class);
		}
		public UsingSpecification1Context usingSpecification1(int i) {
			return getRuleContext(UsingSpecification1Context.class,i);
		}
		public UsingBlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_usingBlock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterUsingBlock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitUsingBlock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitUsingBlock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UsingBlockContext usingBlock() throws RecognitionException {
		UsingBlockContext _localctx = new UsingBlockContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_usingBlock);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3730); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(3729);
					usingSpecification1();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3732); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,388,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FreeBlockContext extends ParserRuleContext {
		public List<TerminalNode> FREEPAGE() { return getTokens(DB2zSQLParser.FREEPAGE); }
		public TerminalNode FREEPAGE(int i) {
			return getToken(DB2zSQLParser.FREEPAGE, i);
		}
		public List<TerminalNode> INTEGERLITERAL() { return getTokens(DB2zSQLParser.INTEGERLITERAL); }
		public TerminalNode INTEGERLITERAL(int i) {
			return getToken(DB2zSQLParser.INTEGERLITERAL, i);
		}
		public List<TerminalNode> PCTFREE() { return getTokens(DB2zSQLParser.PCTFREE); }
		public TerminalNode PCTFREE(int i) {
			return getToken(DB2zSQLParser.PCTFREE, i);
		}
		public List<TerminalNode> FOR() { return getTokens(DB2zSQLParser.FOR); }
		public TerminalNode FOR(int i) {
			return getToken(DB2zSQLParser.FOR, i);
		}
		public List<TerminalNode> UPDATE() { return getTokens(DB2zSQLParser.UPDATE); }
		public TerminalNode UPDATE(int i) {
			return getToken(DB2zSQLParser.UPDATE, i);
		}
		public FreeBlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_freeBlock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFreeBlock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFreeBlock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFreeBlock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FreeBlockContext freeBlock() throws RecognitionException {
		FreeBlockContext _localctx = new FreeBlockContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_freeBlock);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3747); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(3747);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,391,_ctx) ) {
					case 1:
						{
						{
						setState(3734);
						match(FREEPAGE);
						setState(3735);
						match(INTEGERLITERAL);
						}
						}
						break;
					case 2:
						{
						{
						setState(3736);
						match(PCTFREE);
						setState(3737);
						match(INTEGERLITERAL);
						}
						}
						break;
					case 3:
						{
						{
						setState(3738);
						match(PCTFREE);
						setState(3745);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==INTEGERLITERAL || _la==FOR) {
							{
							setState(3740);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==INTEGERLITERAL) {
								{
								setState(3739);
								match(INTEGERLITERAL);
								}
							}

							setState(3742);
							match(FOR);
							setState(3743);
							match(UPDATE);
							setState(3744);
							match(INTEGERLITERAL);
							}
						}

						}
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3749); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,392,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MoveTableClauseContext extends ParserRuleContext {
		public TerminalNode MOVE() { return getToken(DB2zSQLParser.MOVE, 0); }
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode TO() { return getToken(DB2zSQLParser.TO, 0); }
		public TerminalNode TABLESPACE() { return getToken(DB2zSQLParser.TABLESPACE, 0); }
		public TablespaceNameContext tablespaceName() {
			return getRuleContext(TablespaceNameContext.class,0);
		}
		public DatabaseNameContext databaseName() {
			return getRuleContext(DatabaseNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public MoveTableClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_moveTableClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterMoveTableClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitMoveTableClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitMoveTableClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MoveTableClauseContext moveTableClause() throws RecognitionException {
		MoveTableClauseContext _localctx = new MoveTableClauseContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_moveTableClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3751);
			match(MOVE);
			setState(3752);
			match(TABLE);
			setState(3753);
			tableName();
			setState(3754);
			match(TO);
			setState(3755);
			match(TABLESPACE);
			setState(3759);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,393,_ctx) ) {
			case 1:
				{
				setState(3756);
				databaseName();
				setState(3757);
				match(DOT);
				}
				break;
			}
			setState(3761);
			tablespaceName();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GbpcacheBlockContext extends ParserRuleContext {
		public TerminalNode GBPCACHE() { return getToken(DB2zSQLParser.GBPCACHE, 0); }
		public TerminalNode CHANGED() { return getToken(DB2zSQLParser.CHANGED, 0); }
		public TerminalNode ALL() { return getToken(DB2zSQLParser.ALL, 0); }
		public TerminalNode SYSTEM() { return getToken(DB2zSQLParser.SYSTEM, 0); }
		public TerminalNode NONE() { return getToken(DB2zSQLParser.NONE, 0); }
		public GbpcacheBlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_gbpcacheBlock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGbpcacheBlock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGbpcacheBlock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGbpcacheBlock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GbpcacheBlockContext gbpcacheBlock() throws RecognitionException {
		GbpcacheBlockContext _localctx = new GbpcacheBlockContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_gbpcacheBlock);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3763);
			match(GBPCACHE);
			setState(3764);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==NONE || _la==SYSTEM || _la==CHANGED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AliasDesignatorContext extends ParserRuleContext {
		public TerminalNode ALIAS() { return getToken(DB2zSQLParser.ALIAS, 0); }
		public AliasNameContext aliasName() {
			return getRuleContext(AliasNameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public TerminalNode SEQUENCE() { return getToken(DB2zSQLParser.SEQUENCE, 0); }
		public TerminalNode PUBLIC() { return getToken(DB2zSQLParser.PUBLIC, 0); }
		public AliasDesignatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aliasDesignator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAliasDesignator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAliasDesignator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAliasDesignator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AliasDesignatorContext aliasDesignator() throws RecognitionException {
		AliasDesignatorContext _localctx = new AliasDesignatorContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_aliasDesignator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3767);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PUBLIC) {
				{
				setState(3766);
				match(PUBLIC);
				}
			}

			setState(3769);
			match(ALIAS);
			setState(3770);
			aliasName();
			setState(3771);
			match(FOR);
			setState(3772);
			_la = _input.LA(1);
			if ( !(_la==SEQUENCE || _la==TABLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultipleColumnListContext extends ParserRuleContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public List<TerminalNode> IS() { return getTokens(DB2zSQLParser.IS); }
		public TerminalNode IS(int i) {
			return getToken(DB2zSQLParser.IS, i);
		}
		public List<TerminalNode> NONNUMERICLITERAL() { return getTokens(DB2zSQLParser.NONNUMERICLITERAL); }
		public TerminalNode NONNUMERICLITERAL(int i) {
			return getToken(DB2zSQLParser.NONNUMERICLITERAL, i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public MultipleColumnListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipleColumnList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterMultipleColumnList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitMultipleColumnList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitMultipleColumnList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultipleColumnListContext multipleColumnList() throws RecognitionException {
		MultipleColumnListContext _localctx = new MultipleColumnListContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_multipleColumnList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3774);
			tableName();
			setState(3775);
			match(LPAREN);
			setState(3776);
			columnName();
			setState(3777);
			match(IS);
			setState(3778);
			match(NONNUMERICLITERAL);
			setState(3786);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3779);
				match(COMMA);
				setState(3780);
				columnName();
				setState(3781);
				match(IS);
				setState(3782);
				match(NONNUMERICLITERAL);
				}
				}
				setState(3788);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3789);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionDesignatorContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(DB2zSQLParser.FUNCTION, 0); }
		public FunctionNameContext functionName() {
			return getRuleContext(FunctionNameContext.class,0);
		}
		public TerminalNode SPECIFIC() { return getToken(DB2zSQLParser.SPECIFIC, 0); }
		public SpecificNameContext specificName() {
			return getRuleContext(SpecificNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<ParameterTypeContext> parameterType() {
			return getRuleContexts(ParameterTypeContext.class);
		}
		public ParameterTypeContext parameterType(int i) {
			return getRuleContext(ParameterTypeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public FunctionDesignatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionDesignator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFunctionDesignator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFunctionDesignator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFunctionDesignator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionDesignatorContext functionDesignator() throws RecognitionException {
		FunctionDesignatorContext _localctx = new FunctionDesignatorContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_functionDesignator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3810);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FUNCTION:
				{
				{
				setState(3791);
				match(FUNCTION);
				setState(3792);
				functionName();
				setState(3805);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(3793);
					match(LPAREN);
					setState(3802);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & ((1L << (ADD - 30)) | (1L << (AFTER - 30)) | (1L << (ALL - 30)) | (1L << (ALLOCATE - 30)) | (1L << (ALLOW - 30)) | (1L << (ALTER - 30)) | (1L << (ALTERAND - 30)) | (1L << (ANY - 30)) | (1L << (ARRAY - 30)) | (1L << (ARRAY_EXISTS - 30)) | (1L << (AS - 30)) | (1L << (ASENSITIVE - 30)) | (1L << (ASSOCIATE - 30)) | (1L << (ASUTIME - 30)) | (1L << (AT - 30)) | (1L << (AUDIT - 30)) | (1L << (AUX - 30)) | (1L << (AUXILIARY - 30)) | (1L << (BEFORE - 30)) | (1L << (BEGIN - 30)) | (1L << (BETWEEN - 30)) | (1L << (BUFFERPOOL - 30)) | (1L << (BY - 30)) | (1L << (CALL - 30)) | (1L << (CAPTURE - 30)) | (1L << (CASCADED - 30)) | (1L << (CASE - 30)) | (1L << (CAST - 30)) | (1L << (CCSID - 30)) | (1L << (CHAR - 30)) | (1L << (CHARACTER - 30)) | (1L << (CHECK - 30)) | (1L << (CLONE - 30)) | (1L << (CLOSE - 30)) | (1L << (CLUSTER - 30)) | (1L << (COLLECTION - 30)) | (1L << (COLLID - 30)) | (1L << (COLUMN - 30)) | (1L << (COMMENT - 30)) | (1L << (COMMIT - 30)) | (1L << (CONCAT - 30)) | (1L << (CONDITION - 30)) | (1L << (CONNECT - 30)) | (1L << (CONNECTION - 30)) | (1L << (CONSTRAINT - 30)) | (1L << (CONTAINS - 30)) | (1L << (CONTENT - 30)) | (1L << (CONTINUE - 30)) | (1L << (CREATE - 30)) | (1L << (CUBE - 30)) | (1L << (CURRENT - 30)) | (1L << (CURRENT_LC_CTYPE - 30)) | (1L << (CURRVAL - 30)) | (1L << (CURSOR - 30)) | (1L << (DATA - 30)) | (1L << (DATABASE - 30)) | (1L << (DAY - 30)) | (1L << (DAYS - 30)) | (1L << (DBINFO - 30)) | (1L << (DECLARE - 30)) | (1L << (DEFAULT - 30)) | (1L << (DELETE - 30)) | (1L << (DESCRIPTOR - 30)) | (1L << (DETERMINISTIC - 30)))) != 0) || ((((_la - 94)) & ~0x3f) == 0 && ((1L << (_la - 94)) & ((1L << (DISABLE - 94)) | (1L << (DISALLOW - 94)) | (1L << (DISTINCT - 94)) | (1L << (DO - 94)) | (1L << (DOCUMENT - 94)) | (1L << (DOUBLE - 94)) | (1L << (DROP - 94)) | (1L << (DSSIZE - 94)) | (1L << (DYNAMIC - 94)) | (1L << (EDITPROC - 94)) | (1L << (ELSE - 94)) | (1L << (ELSEIF - 94)) | (1L << (ENCODING - 94)) | (1L << (ENCRYPTION - 94)) | (1L << (END - 94)) | (1L << (END_EXEC - 94)) | (1L << (ENDING - 94)) | (1L << (ERASE - 94)) | (1L << (ESCAPE - 94)) | (1L << (EXCEPT - 94)) | (1L << (EXCEPTION - 94)) | (1L << (EXEC_SQL - 94)) | (1L << (EXECUTE - 94)) | (1L << (EXISTS - 94)) | (1L << (EXIT - 94)) | (1L << (EXPLAIN - 94)) | (1L << (EXTERNAL - 94)) | (1L << (FENCED - 94)) | (1L << (FETCH - 94)) | (1L << (FIELDPROC - 94)) | (1L << (FINAL - 94)) | (1L << (FIRST - 94)) | (1L << (FOR - 94)) | (1L << (FREE - 94)) | (1L << (FROM - 94)) | (1L << (FULL - 94)) | (1L << (FUNCTION - 94)) | (1L << (GENERATED - 94)) | (1L << (GET - 94)) | (1L << (GLOBAL - 94)) | (1L << (GO - 94)) | (1L << (GOTO - 94)) | (1L << (GRANT - 94)) | (1L << (GROUP - 94)) | (1L << (HANDLER - 94)) | (1L << (HAVING - 94)) | (1L << (HOLD - 94)) | (1L << (HOUR - 94)) | (1L << (HOURS - 94)) | (1L << (IF - 94)) | (1L << (IMMEDIATE - 94)) | (1L << (IN - 94)) | (1L << (INCLUSIVE - 94)) | (1L << (INDEX - 94)) | (1L << (INDEXBP - 94)) | (1L << (INHERIT - 94)) | (1L << (INNER - 94)) | (1L << (INOUT - 94)) | (1L << (INSENSITIVE - 94)) | (1L << (INSERT - 94)) | (1L << (INTERSECT - 94)) | (1L << (INTO - 94)) | (1L << (IS - 94)) | (1L << (ISOBID - 94)))) != 0) || ((((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & ((1L << (ITERATE - 158)) | (1L << (JAR - 158)) | (1L << (JOIN - 158)) | (1L << (KEEP - 158)) | (1L << (KEY - 158)) | (1L << (LABEL - 158)) | (1L << (LANGUAGE - 158)) | (1L << (LAST - 158)) | (1L << (LC_CTYPE - 158)) | (1L << (LEAVE - 158)) | (1L << (LEFT - 158)) | (1L << (LIKE - 158)) | (1L << (LIMIT - 158)) | (1L << (LOCAL - 158)) | (1L << (LOCALE - 158)) | (1L << (LOCATOR - 158)) | (1L << (LOCATORS - 158)) | (1L << (LOCK - 158)) | (1L << (LOCKMAX - 158)) | (1L << (LOCKSIZE - 158)) | (1L << (LONG - 158)) | (1L << (LOOP - 158)) | (1L << (MAINTAINED - 158)) | (1L << (MATERIALIZED - 158)) | (1L << (MICROSECOND - 158)) | (1L << (MICROSECONDS - 158)) | (1L << (MODIFIES - 158)) | (1L << (MONTH - 158)) | (1L << (MONTHS - 158)) | (1L << (NEXT - 158)) | (1L << (NEXTVAL - 158)) | (1L << (NO - 158)) | (1L << (NONE - 158)) | (1L << (NOT - 158)) | (1L << (NULL - 158)) | (1L << (NULLS - 158)) | (1L << (NUMPARTS - 158)) | (1L << (OBID - 158)) | (1L << (OF - 158)) | (1L << (OFFSET - 158)) | (1L << (OLD - 158)) | (1L << (ON - 158)) | (1L << (OPEN - 158)) | (1L << (OPTIMIZATION - 158)) | (1L << (OPTIMIZE - 158)) | (1L << (OR - 158)) | (1L << (ORDER - 158)) | (1L << (ORGANIZATION - 158)) | (1L << (OUT - 158)) | (1L << (OUTER - 158)) | (1L << (PACKAGE - 158)) | (1L << (PADDED - 158)) | (1L << (PARAMETER - 158)) | (1L << (PART - 158)) | (1L << (PARTITION - 158)) | (1L << (PARTITIONED - 158)) | (1L << (PARTITIONING - 158)) | (1L << (PATH - 158)) | (1L << (PERIOD - 158)) | (1L << (PIECESIZE - 158)) | (1L << (PLAN - 158)) | (1L << (PRECISION - 158)) | (1L << (PREPARE - 158)))) != 0) || ((((_la - 222)) & ~0x3f) == 0 && ((1L << (_la - 222)) & ((1L << (PREVVAL - 222)) | (1L << (PRIOR - 222)) | (1L << (PRIQTY - 222)) | (1L << (PRIVILEGES - 222)) | (1L << (PROCEDURE - 222)) | (1L << (PROGRAM - 222)) | (1L << (PSID - 222)) | (1L << (PUBLIC - 222)) | (1L << (QUERY - 222)) | (1L << (QUERYNO - 222)) | (1L << (READS - 222)) | (1L << (REFERENCES - 222)) | (1L << (REFRESH - 222)) | (1L << (RELEASE - 222)) | (1L << (RENAME - 222)) | (1L << (REPEAT - 222)) | (1L << (RESIGNAL - 222)) | (1L << (RESTRICT - 222)) | (1L << (RESULT - 222)) | (1L << (RESULT_SET_LOCATOR - 222)) | (1L << (RETURN - 222)) | (1L << (RETURNS - 222)) | (1L << (REVOKE - 222)) | (1L << (RIGHT - 222)) | (1L << (ROLE - 222)) | (1L << (ROLLBACK - 222)) | (1L << (ROLLUP - 222)) | (1L << (ROUND_CEILING - 222)) | (1L << (ROUND_DOWN - 222)) | (1L << (ROUND_FLOOR - 222)) | (1L << (ROUND_HALF_DOWN - 222)) | (1L << (ROUND_HALF_EVEN - 222)) | (1L << (ROUND_HALF_UP - 222)) | (1L << (ROUND_UP - 222)) | (1L << (ROW - 222)) | (1L << (ROWSET - 222)) | (1L << (RUN - 222)) | (1L << (SAVEPOINT - 222)) | (1L << (SCHEMA - 222)) | (1L << (SCRATCHPAD - 222)) | (1L << (SECOND - 222)) | (1L << (SECONDS - 222)) | (1L << (SECQTY - 222)) | (1L << (SECURITY - 222)) | (1L << (SELECT - 222)) | (1L << (SENSITIVE - 222)) | (1L << (SEQUENCE - 222)) | (1L << (SET - 222)) | (1L << (SIGNAL - 222)) | (1L << (SIMPLE - 222)) | (1L << (SOME - 222)) | (1L << (SOURCE - 222)) | (1L << (SPECIFIC - 222)) | (1L << (STANDARD - 222)) | (1L << (STATEMENT - 222)) | (1L << (STATIC - 222)) | (1L << (STAY - 222)) | (1L << (STOGROUP - 222)) | (1L << (STORES - 222)) | (1L << (STYLE - 222)) | (1L << (SUMMARY - 222)) | (1L << (SYNONYM - 222)) | (1L << (SYSDATE - 222)) | (1L << (SYSTEM - 222)))) != 0) || ((((_la - 286)) & ~0x3f) == 0 && ((1L << (_la - 286)) & ((1L << (SYSTIMESTAMP - 286)) | (1L << (TABLE - 286)) | (1L << (TABLESPACE - 286)) | (1L << (THEN - 286)) | (1L << (TO - 286)) | (1L << (TRIGGER - 286)) | (1L << (TRUNCATE - 286)) | (1L << (TYPE - 286)) | (1L << (UNDO - 286)) | (1L << (UNION - 286)) | (1L << (UNIQUE - 286)) | (1L << (UNTIL - 286)) | (1L << (UPDATE - 286)) | (1L << (USING - 286)) | (1L << (VALIDPROC - 286)) | (1L << (VALUE - 286)) | (1L << (VALUES - 286)) | (1L << (VARIABLE - 286)) | (1L << (VARIANT - 286)) | (1L << (VCAT - 286)) | (1L << (VERSIONING - 286)) | (1L << (VIEW - 286)) | (1L << (VOLATILE - 286)) | (1L << (VOLUMES - 286)) | (1L << (WHEN - 286)) | (1L << (WHENEVER - 286)) | (1L << (WHERE - 286)) | (1L << (WHILE - 286)) | (1L << (WITH - 286)) | (1L << (WLM - 286)) | (1L << (XMLCAST - 286)) | (1L << (XMLEXISTS - 286)) | (1L << (XMLNAMESPACES - 286)) | (1L << (YEAR - 286)) | (1L << (YEARS - 286)) | (1L << (ZONE - 286)) | (1L << (AND - 286)) | (1L << (ARRAY_AGG - 286)) | (1L << (ASC - 286)) | (1L << (AVG - 286)) | (1L << (BIT - 286)) | (1L << (CHANGE - 286)) | (1L << (CODEUNITS16 - 286)) | (1L << (CODEUNITS32 - 286)) | (1L << (CORR - 286)) | (1L << (CORRELATION - 286)) | (1L << (COUNT - 286)) | (1L << (COUNT_BIG - 286)) | (1L << (COVAR - 286)) | (1L << (COVARIANCE - 286)) | (1L << (COVARIANCE_SAMP - 286)) | (1L << (COVAR_POP - 286)) | (1L << (COVAR_SAMP - 286)) | (1L << (CS - 286)) | (1L << (CUME_DIST - 286)) | (1L << (DENSE_RANK - 286)) | (1L << (DESC - 286)) | (1L << (EBCDIC - 286)) | (1L << (EXCLUSIVE - 286)) | (1L << (FIRST_VALUE - 286)) | (1L << (FOLLOWING - 286)) | (1L << (GROUPING - 286)) | (1L << (IGNORE - 286)) | (1L << (INDICATOR - 286)))) != 0) || ((((_la - 350)) & ~0x3f) == 0 && ((1L << (_la - 350)) & ((1L << (INPUT - 350)) | (1L << (ISNULL - 350)) | (1L << (LAG - 350)) | (1L << (LARGE - 350)) | (1L << (LAST_VALUE - 350)) | (1L << (LEAD - 350)) | (1L << (LISTAGG - 350)) | (1L << (LOCKED - 350)) | (1L << (LOCKS - 350)) | (1L << (MEDIAN - 350)) | (1L << (MINUTES - 350)) | (1L << (MIXED - 350)) | (1L << (NOTNULL - 350)) | (1L << (NTH_VALUE - 350)) | (1L << (NTILE - 350)) | (1L << (NUMERIC - 350)) | (1L << (OBJECT - 350)) | (1L << (OCTETS - 350)) | (1L << (ONLY - 350)) | (1L << (OVER - 350)) | (1L << (PASSING - 350)) | (1L << (PERCENTILE_CONT - 350)) | (1L << (PERCENTILE_DISC - 350)) | (1L << (PERCENT_RANK - 350)) | (1L << (PRECEDING - 350)) | (1L << (PREVIOUS - 350)) | (1L << (RANGE - 350)) | (1L << (RANK - 350)) | (1L << (RATIO_TO_REPORT - 350)) | (1L << (READ - 350)) | (1L << (REF - 350)) | (1L << (REGR_AVGX - 350)) | (1L << (REGR_AVGY - 350)) | (1L << (REGR_COUNT - 350)) | (1L << (REGR_ICPT - 350)) | (1L << (REGR_INTERCEPT - 350)) | (1L << (REGR_R2 - 350)) | (1L << (REGR_SLOPE - 350)) | (1L << (REGR_SXX - 350)) | (1L << (REGR_SXY - 350)) | (1L << (REGR_SYY - 350)) | (1L << (RESPECT - 350)) | (1L << (ROW_NUMBER - 350)) | (1L << (ROWS - 350)) | (1L << (RR - 350)) | (1L << (RS - 350)) | (1L << (SBCS - 350)) | (1L << (SELECTIVITY - 350)) | (1L << (SETS - 350)) | (1L << (SHARE - 350)) | (1L << (SKIP_ - 350)) | (1L << (STDDEV - 350)) | (1L << (STDDEV_POP - 350)) | (1L << (STDDEV_SAMP - 350)) | (1L << (SUM - 350)) | (1L << (TOKEN - 350)) | (1L << (UNBOUNDED - 350)) | (1L << (UNPACK - 350)) | (1L << (UR - 350)) | (1L << (USE - 350)) | (1L << (VAR - 350)) | (1L << (VARIANCE - 350)) | (1L << (VARIANCE_SAMP - 350)) | (1L << (VAR_POP - 350)))) != 0) || ((((_la - 414)) & ~0x3f) == 0 && ((1L << (_la - 414)) & ((1L << (VAR_SAMP - 414)) | (1L << (VARYING - 414)) | (1L << (WITHOUT - 414)) | (1L << (XML - 414)) | (1L << (XMLAGG - 414)) | (1L << (COLUMNS - 414)) | (1L << (SQLID - 414)) | (1L << (ORDINALITY - 414)) | (1L << (SYSTEM_TIME - 414)) | (1L << (BUSINESS_TIME - 414)) | (1L << (MULTIPLIER - 414)) | (1L << (UNNEST - 414)) | (1L << (CROSS - 414)) | (1L << (CALLER - 414)) | (1L << (CLIENT - 414)) | (1L << (POSITIONING - 414)) | (1L << (SCROLL - 414)) | (1L << (ACTION - 414)) | (1L << (ASSEMBLE - 414)) | (1L << (C_ - 414)) | (1L << (CALLED - 414)) | (1L << (COBOL - 414)) | (1L << (DB2 - 414)) | (1L << (DEFINER - 414)) | (1L << (DISPATCH - 414)) | (1L << (ENVIRONMENT - 414)) | (1L << (FAILURE - 414)) | (1L << (FAILURES - 414)) | (1L << (JAVA - 414)) | (1L << (MAIN - 414)) | (1L << (NAME - 414)) | (1L << (OPTIONS - 414)) | (1L << (PARALLEL - 414)) | (1L << (PLI - 414)) | (1L << (REGISTERS - 414)) | (1L << (RESIDENT - 414)) | (1L << (SECURED - 414)) | (1L << (SPECIAL - 414)) | (1L << (SQL - 414)) | (1L << (STOP - 414)) | (1L << (SUB - 414)) | (1L << (YES - 414)) | (1L << (APPLICATION - 414)) | (1L << (CHANGED - 414)) | (1L << (COMPATIBILITY - 414)) | (1L << (COMPRESS - 414)) | (1L << (COPY - 414)) | (1L << (FREEPAGE - 414)) | (1L << (GBPCACHE - 414)) | (1L << (INCLUDE - 414)) | (1L << (MAXVALUE - 414)) | (1L << (MINVALUE - 414)) | (1L << (PCTFREE - 414)) | (1L << (REGENERATE - 414)) | (1L << (MASK - 414)) | (1L << (ENABLE - 414)) | (1L << (PERMISSION - 414)) | (1L << (ATOMIC - 414)) | (1L << (SQLEXCEPTION - 414)) | (1L << (MERGE - 414)) | (1L << (MATCHED - 414)) | (1L << (SQLSTATE - 414)) | (1L << (MESSAGE_TEXT - 414)) | (1L << (OVERRIDING - 414)))) != 0) || ((((_la - 478)) & ~0x3f) == 0 && ((1L << (_la - 478)) & ((1L << (PORTION - 478)) | (1L << (DB2SQL - 478)) | (1L << (DEBUG - 478)) | (1L << (GENERAL - 478)) | (1L << (MODE_ - 478)) | (1L << (REXX - 478)) | (1L << (CACHE - 478)) | (1L << (CYCLE - 478)) | (1L << (INCREMENT - 478)) | (1L << (RESTART - 478)) | (1L << (DATACLAS - 478)) | (1L << (MGMTCLAS - 478)) | (1L << (REMOVE - 478)) | (1L << (STORCLAS - 478)) | (1L << (ACCESS - 478)) | (1L << (ACTIVATE - 478)) | (1L << (ALWAYS - 478)) | (1L << (APPEND - 478)) | (1L << (ARCHIVE - 478)) | (1L << (BUSINESS - 478)) | (1L << (CASCADE - 478)) | (1L << (CHANGES - 478)) | (1L << (CONTROL - 478)) | (1L << (DEACTIVATE - 478)) | (1L << (DEFERRED - 478)) | (1L << (EACH - 478)) | (1L << (ENFORCED - 478)) | (1L << (EXTRA - 478)) | (1L << (FOREIGN - 478)) | (1L << (HIDDEN_ - 478)) | (1L << (HISTORY - 478)) | (1L << (ID - 478)) | (1L << (IDENTITY - 478)) | (1L << (IMPLICITLY - 478)) | (1L << (INITIALLY - 478)) | (1L << (INLINE - 478)) | (1L << (OPERATION - 478)) | (1L << (ORGANIZE - 478)) | (1L << (OVERLAPS - 478)) | (1L << (PACKAGE_NAME - 478)) | (1L << (PACKAGE_SCHEMA - 478)) | (1L << (PACKAGE_VERSION - 478)) | (1L << (PRIMARY - 478)) | (1L << (RESET - 478)) | (1L << (ROTATE - 478)) | (1L << (START - 478)) | (1L << (SYSIBM - 478)) | (1L << (TRANSACTION - 478)) | (1L << (XMLSCHEMA - 478)) | (1L << (ELEMENT - 478)) | (1L << (URL - 478)) | (1L << (NAMESPACE - 478)) | (1L << (LOCATION - 478)) | (1L << (SYSXSR - 478)) | (1L << (ALGORITHM - 478)) | (1L << (FIXEDLENGTH - 478)) | (1L << (HUFFMAN - 478)) | (1L << (LOB - 478)) | (1L << (LOG - 478)) | (1L << (LOGGED - 478)) | (1L << (MAXPARTITIONS - 478)) | (1L << (MAXROWS - 478)) | (1L << (MEMBER - 478)) | (1L << (MOVE - 478)))) != 0) || ((((_la - 542)) & ~0x3f) == 0 && ((1L << (_la - 542)) & ((1L << (PAGE - 542)) | (1L << (PAGENUM - 542)) | (1L << (PENDING - 542)) | (1L << (RELATIVE - 542)) | (1L << (SEGSIZE - 542)) | (1L << (TRACKMOD - 542)) | (1L << (ADDRESS - 542)) | (1L << (ATTRIBUTES - 542)) | (1L << (AUTHENTICATION - 542)) | (1L << (AUTHID - 542)) | (1L << (CONTEXT - 542)) | (1L << (JOBNAME - 542)) | (1L << (OWNER - 542)) | (1L << (PROFILE - 542)) | (1L << (QUALIFIER - 542)) | (1L << (SERVAUTH - 542)) | (1L << (TRUSTED - 542)) | (1L << (SECTION - 542)) | (1L << (ACTIVE - 542)) | (1L << (VERSION - 542)) | (1L << (ALIAS - 542)) | (1L << (WORK - 542)) | (1L << (WORKFILE - 542)) | (1L << (SYSDEFLT - 542)) | (1L << (NULTERM - 542)) | (1L << (STRUCTURE - 542)) | (1L << (GENERIC - 542)) | (1L << (TEMPORARY - 542)) | (1L << (DEFER - 542)) | (1L << (DEFINE - 542)) | (1L << (EXCLUDE - 542)) | (1L << (GENERATE - 542)) | (1L << (KEYS - 542)) | (1L << (XMLPATTERN - 542)) | (1L << (ABS - 542)) | (1L << (ABSVAL - 542)) | (1L << (ACOS - 542)) | (1L << (ADD_DAYS - 542)) | (1L << (ADD_MONTHS - 542)) | (1L << (ARRAY_DELETE - 542)) | (1L << (ARRAY_FIRST - 542)) | (1L << (ARRAY_LAST - 542)) | (1L << (ARRAY_NEXT - 542)) | (1L << (ARRAY_PRIOR - 542)) | (1L << (ARRAY_TRIM - 542)) | (1L << (ASCII - 542)) | (1L << (ASCII_CHR - 542)) | (1L << (ASCIISTR - 542)) | (1L << (ASCII_STR - 542)) | (1L << (ASIN - 542)) | (1L << (ATAN - 542)) | (1L << (ATAN2 - 542)) | (1L << (ATANH - 542)) | (1L << (BIGINT - 542)) | (1L << (BINARY - 542)) | (1L << (BITAND - 542)) | (1L << (BITANDNOT - 542)) | (1L << (BITNOT - 542)) | (1L << (BITOR - 542)) | (1L << (BITXOR - 542)) | (1L << (BLOB - 542)) | (1L << (BTRIM - 542)) | (1L << (CARDINALITY - 542)) | (1L << (CCSID_ENCODING - 542)))) != 0) || ((((_la - 606)) & ~0x3f) == 0 && ((1L << (_la - 606)) & ((1L << (CEIL - 606)) | (1L << (CEILING - 606)) | (1L << (CHAR9 - 606)) | (1L << (CHARACTER_LENGTH - 606)) | (1L << (CHAR_LENGTH - 606)) | (1L << (CHR - 606)) | (1L << (CLOB - 606)) | (1L << (COALESCE - 606)) | (1L << (COLLATION_KEY - 606)) | (1L << (COMPARE_DECFLOAT - 606)) | (1L << (COS - 606)) | (1L << (COSH - 606)) | (1L << (DATE - 606)) | (1L << (DAYOFMONTH - 606)) | (1L << (DAYOFWEEK - 606)) | (1L << (DAYOFWEEK_ISO - 606)) | (1L << (DAYOFYEAR - 606)) | (1L << (DAYS_BETWEEN - 606)) | (1L << (DBCLOB - 606)) | (1L << (DEC - 606)) | (1L << (DECFLOAT - 606)) | (1L << (DECFLOAT_FORMAT - 606)) | (1L << (DECFLOAT_SORTKEY - 606)) | (1L << (DECIMAL - 606)) | (1L << (DECODE - 606)) | (1L << (DECRYPT_BINARY - 606)) | (1L << (DECRYPT_BIT - 606)) | (1L << (DECRYPT_CHAR - 606)) | (1L << (DECRYPT_DATAKEY_BIGINT - 606)) | (1L << (DECRYPT_DATAKEY_BIT - 606)) | (1L << (DECRYPT_DATAKEY_CLOB - 606)) | (1L << (DECRYPT_DATAKEY_DBCLOB - 606)) | (1L << (DECRYPT_DATAKEY_DECIMAL - 606)) | (1L << (DECRYPT_DATAKEY_INTEGER - 606)) | (1L << (DECRYPT_DATAKEY_VARCHAR - 606)) | (1L << (DECRYPT_DATAKEY_VARGRAPHIC - 606)) | (1L << (DECRYPT_DB - 606)) | (1L << (DEGREES - 606)) | (1L << (DIFFERENCE - 606)) | (1L << (DIGITS - 606)) | (1L << (DOUBLE_PRECISION - 606)) | (1L << (DSN_XMLVALIDATE - 606)) | (1L << (EBCDIC_CHR - 606)) | (1L << (EBCDIC_STR - 606)) | (1L << (ENCRYPT_DATAKEY - 606)) | (1L << (ENCRYPT_TDES - 606)) | (1L << (EXP - 606)) | (1L << (EXTRACT - 606)) | (1L << (FLOAT - 606)) | (1L << (FLOOR - 606)) | (1L << (GENERATE_UNIQUE - 606)) | (1L << (GENERATE_UNIQUE_BINARY - 606)) | (1L << (GETHINT - 606)) | (1L << (GETVARIABLE - 606)) | (1L << (GRAPHIC - 606)) | (1L << (GREATEST - 606)) | (1L << (HASH - 606)) | (1L << (HASH_CRC32 - 606)) | (1L << (HASH_MD5 - 606)) | (1L << (HASH_SHA1 - 606)) | (1L << (HASH_SHA256 - 606)) | (1L << (HEX - 606)) | (1L << (IDENTITY_VAL_LOCAL - 606)) | (1L << (IFNULL - 606)))) != 0) || ((((_la - 670)) & ~0x3f) == 0 && ((1L << (_la - 670)) & ((1L << (INSTR - 670)) | (1L << (INT - 670)) | (1L << (INTEGER - 670)) | (1L << (JULIAN_DAY - 670)) | (1L << (LAST_DAY - 670)) | (1L << (LCASE - 670)) | (1L << (LEAST - 670)) | (1L << (LENGTH - 670)) | (1L << (LN - 670)) | (1L << (LOCATE - 670)) | (1L << (LOCATE_IN_STRING - 670)) | (1L << (LOG10 - 670)) | (1L << (LOWER - 670)) | (1L << (LPAD - 670)) | (1L << (LTRIM - 670)) | (1L << (MAX - 670)) | (1L << (MAX_CARDINALITY - 670)) | (1L << (MIDNIGHT_SECONDS - 670)) | (1L << (MIN - 670)) | (1L << (MINUTE - 670)) | (1L << (MOD - 670)) | (1L << (MONTHS_BETWEEN - 670)) | (1L << (MQREAD - 670)) | (1L << (MQREADCLOB - 670)) | (1L << (MQRECEIVE - 670)) | (1L << (MQRECEIVECLOB - 670)) | (1L << (MQSEND - 670)) | (1L << (MULTIPLY_ALT - 670)) | (1L << (NEXT_DAY - 670)) | (1L << (NEXT_MONTH - 670)) | (1L << (NORMALIZE_DECFLOAT - 670)) | (1L << (NORMALIZE_STRING - 670)) | (1L << (NULLIF - 670)) | (1L << (NVL - 670)) | (1L << (OVERLAY - 670)) | (1L << (PACK - 670)) | (1L << (POSITION - 670)) | (1L << (POSSTR - 670)) | (1L << (POW - 670)) | (1L << (POWER - 670)) | (1L << (QUANTIZE - 670)) | (1L << (QUARTER - 670)) | (1L << (RADIANS - 670)) | (1L << (RAISE_ERROR - 670)) | (1L << (RAND - 670)) | (1L << (RANDOM - 670)) | (1L << (REAL - 670)) | (1L << (REGEXP_COUNT - 670)) | (1L << (REGEXP_INSTR - 670)) | (1L << (REGEXP_LIKE - 670)) | (1L << (REGEXP_REPLACE - 670)) | (1L << (REGEXP_SUBSTR - 670)) | (1L << (REPLACE - 670)) | (1L << (RID - 670)) | (1L << (ROUND - 670)) | (1L << (ROUND_TIMESTAMP - 670)) | (1L << (ROWID - 670)) | (1L << (RPAD - 670)) | (1L << (RTRIM - 670)) | (1L << (SCORE - 670)) | (1L << (SIGN - 670)) | (1L << (SIN - 670)) | (1L << (SINH - 670)) | (1L << (SMALLINT - 670)))) != 0) || ((((_la - 734)) & ~0x3f) == 0 && ((1L << (_la - 734)) & ((1L << (SOAPHTTPC - 734)) | (1L << (SOAPHTTPNC - 734)) | (1L << (SOAPHTTPNV - 734)) | (1L << (SOAPHTTPV - 734)) | (1L << (SOUNDEX - 734)) | (1L << (SPACE - 734)) | (1L << (SQRT - 734)) | (1L << (STRIP - 734)) | (1L << (STRLEFT - 734)) | (1L << (STRPOS - 734)) | (1L << (STRRIGHT - 734)) | (1L << (SUBSTR - 734)) | (1L << (SUBSTRING - 734)) | (1L << (TAN - 734)) | (1L << (TANH - 734)) | (1L << (TIME - 734)) | (1L << (TIMESTAMP - 734)) | (1L << (TIMESTAMPADD - 734)) | (1L << (TIMESTAMPDIFF - 734)) | (1L << (TIMESTAMP_FORMAT - 734)) | (1L << (TIMESTAMP_ISO - 734)) | (1L << (TIMESTAMP_TZ - 734)) | (1L << (TO_CHAR - 734)) | (1L << (TO_CLOB - 734)) | (1L << (TO_DATE - 734)) | (1L << (TO_NUMBER - 734)) | (1L << (TOTALORDER - 734)) | (1L << (TO_TIMESTAMP - 734)) | (1L << (TRANSLATE - 734)) | (1L << (TRIM - 734)) | (1L << (TRIM_ARRAY - 734)) | (1L << (TRUNC - 734)) | (1L << (TRUNC_TIMESTAMP - 734)) | (1L << (UCASE - 734)) | (1L << (UNICODE - 734)) | (1L << (UNICODE_STR - 734)) | (1L << (UNISTR - 734)) | (1L << (UPPER - 734)) | (1L << (VARBINARY - 734)) | (1L << (VARCHAR - 734)) | (1L << (VARCHAR9 - 734)) | (1L << (VARCHAR_BIT_FORMAT - 734)) | (1L << (VARCHAR_FORMAT - 734)) | (1L << (VARGRAPHIC - 734)) | (1L << (VERIFY_GROUP_FOR_USER - 734)) | (1L << (VERIFY_ROLE_FOR_USER - 734)) | (1L << (VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER - 734)) | (1L << (WEEK - 734)) | (1L << (WEEK_ISO - 734)) | (1L << (WRAP - 734)) | (1L << (XMLATTRIBUTES - 734)) | (1L << (XMLCOMMENT - 734)) | (1L << (XMLCONCAT - 734)) | (1L << (XMLDOCUMENT - 734)) | (1L << (XMLELEMENT - 734)) | (1L << (XMLFOREST - 734)) | (1L << (XMLMODIFY - 734)) | (1L << (XMLPARSE - 734)) | (1L << (XMLPI - 734)) | (1L << (XMLQUERY - 734)) | (1L << (XMLSERIALIZE - 734)) | (1L << (XMLTEXT - 734)) | (1L << (XMLXSROBJECTID - 734)) | (1L << (XSLTRANSFORM - 734)))) != 0) || ((((_la - 798)) & ~0x3f) == 0 && ((1L << (_la - 798)) & ((1L << (CURRENT_ACCELERATOR - 798)) | (1L << (CURRENT_APPLICATION_COMPATIBILITY - 798)) | (1L << (CURRENT_APPLICATION_ENCODING_SCHEME - 798)) | (1L << (CURRENT_CLIENT_ACCTNG - 798)) | (1L << (CURRENT_CLIENT_APPLNAME - 798)) | (1L << (CURRENT_CLIENT_CORR_TOKEN - 798)) | (1L << (CURRENT_CLIENT_USERID - 798)) | (1L << (CURRENT_CLIENT_WRKSTNNAME - 798)) | (1L << (CURRENT_DATE - 798)) | (1L << (CURRENT_DEBUG_MODE - 798)) | (1L << (CURRENT_DECFLOAT_ROUNDING_MODE - 798)) | (1L << (CURRENT_DEGREE - 798)) | (1L << (CURRENT_EXPLAIN_MODE - 798)) | (1L << (CURRENT_GET_ACCEL_ARCHIVE - 798)) | (1L << (CURRENT_LOCALE_LC_CTYPE - 798)) | (1L << (CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION - 798)) | (1L << (CURRENT_MEMBER - 798)) | (1L << (CURRENT_OPTIMIZATION_HINT - 798)) | (1L << (CURRENT_PACKAGE_PATH - 798)) | (1L << (CURRENT_PACKAGESET - 798)) | (1L << (CURRENT_PATH - 798)) | (1L << (CURRENT_PRECISION - 798)) | (1L << (CURRENT_QUERY_ACCELERATION - 798)) | (1L << (CURRENT_QUERY_ACCELERATION_WAITFORDATA - 798)) | (1L << (CURRENT_REFRESH_AGE - 798)) | (1L << (CURRENT_ROUTINE_VERSION - 798)) | (1L << (CURRENT_RULES - 798)) | (1L << (CURRENT_SCHEMA - 798)) | (1L << (CURRENT_SERVER - 798)) | (1L << (CURRENT_SQLID - 798)) | (1L << (CURRENT_TEMPORAL_BUSINESS_TIME - 798)) | (1L << (CURRENT_TEMPORAL_SYSTEM_TIME - 798)) | (1L << (CURRENT_TIME - 798)) | (1L << (CURRENT_TIMESTAMP - 798)) | (1L << (CURRENT_TIME_ZONE - 798)) | (1L << (ENCRYPTION_PASSWORD - 798)) | (1L << (SESSION_TIME_ZONE - 798)) | (1L << (SESSION_USER - 798)) | (1L << (USER - 798)) | (1L << (ADMIN_TASK_LIST - 798)) | (1L << (ADMIN_TASK_OUTPUT - 798)) | (1L << (ADMIN_TASK_STATUS - 798)) | (1L << (BLOCKING_THREADS - 798)) | (1L << (MQREADALL - 798)) | (1L << (MQREADALLCLOB - 798)) | (1L << (MQRECEIVEALL - 798)) | (1L << (MQRECEIVEALLCLOB - 798)) | (1L << (XMLTABLE - 798)) | (1L << (SQLIDENTIFIER - 798)))) != 0)) {
						{
						setState(3794);
						parameterType();
						setState(3799);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(3795);
							match(COMMA);
							setState(3796);
							parameterType();
							}
							}
							setState(3801);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
					}

					setState(3804);
					match(RPAREN);
					}
				}

				}
				}
				break;
			case SPECIFIC:
				{
				{
				setState(3807);
				match(SPECIFIC);
				setState(3808);
				match(FUNCTION);
				setState(3809);
				specificName();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterTypeContext extends ParserRuleContext {
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode LOCATOR() { return getToken(DB2zSQLParser.LOCATOR, 0); }
		public ParameterTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterParameterType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitParameterType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitParameterType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParameterTypeContext parameterType() throws RecognitionException {
		ParameterTypeContext _localctx = new ParameterTypeContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_parameterType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3812);
			dataType();
			setState(3815);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(3813);
				match(AS);
				setState(3814);
				match(LOCATOR);
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnDefinitionOptionList1Context extends ParserRuleContext {
		public DefaultClause1Context defaultClause1() {
			return getRuleContext(DefaultClause1Context.class,0);
		}
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public ColumnConstraintContext columnConstraint() {
			return getRuleContext(ColumnConstraintContext.class,0);
		}
		public GeneratedClauseContext generatedClause() {
			return getRuleContext(GeneratedClauseContext.class,0);
		}
		public TerminalNode IMPLICITLY() { return getToken(DB2zSQLParser.IMPLICITLY, 0); }
		public TerminalNode HIDDEN_() { return getToken(DB2zSQLParser.HIDDEN_, 0); }
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode SECURITY() { return getToken(DB2zSQLParser.SECURITY, 0); }
		public TerminalNode LABEL() { return getToken(DB2zSQLParser.LABEL, 0); }
		public TerminalNode FIELDPROC() { return getToken(DB2zSQLParser.FIELDPROC, 0); }
		public ProgramNameContext programName() {
			return getRuleContext(ProgramNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<LiteralContext> literal() {
			return getRuleContexts(LiteralContext.class);
		}
		public LiteralContext literal(int i) {
			return getRuleContext(LiteralContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode INLINE() { return getToken(DB2zSQLParser.INLINE, 0); }
		public TerminalNode LENGTH() { return getToken(DB2zSQLParser.LENGTH, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public ColumnDefinitionOptionList1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDefinitionOptionList1; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterColumnDefinitionOptionList1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitColumnDefinitionOptionList1(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitColumnDefinitionOptionList1(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnDefinitionOptionList1Context columnDefinitionOptionList1() throws RecognitionException {
		ColumnDefinitionOptionList1Context _localctx = new ColumnDefinitionOptionList1Context(_ctx, getState());
		enterRule(_localctx, 376, RULE_columnDefinitionOptionList1);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3843);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFAULT:
			case WITH:
				{
				{
				setState(3817);
				defaultClause1();
				}
				}
				break;
			case NOT:
				{
				{
				setState(3818);
				match(NOT);
				setState(3819);
				match(NULL);
				}
				}
				break;
			case CHECK:
			case CONSTRAINT:
			case REFERENCES:
				{
				{
				setState(3820);
				columnConstraint();
				}
				}
				break;
			case GENERATED:
				{
				{
				setState(3821);
				generatedClause();
				}
				}
				break;
			case IMPLICITLY:
				{
				{
				setState(3822);
				match(IMPLICITLY);
				setState(3823);
				match(HIDDEN_);
				}
				}
				break;
			case AS:
				{
				{
				setState(3824);
				match(AS);
				setState(3825);
				match(SECURITY);
				setState(3826);
				match(LABEL);
				}
				}
				break;
			case FIELDPROC:
				{
				{
				setState(3827);
				match(FIELDPROC);
				setState(3828);
				programName();
				setState(3829);
				match(LPAREN);
				setState(3830);
				literal();
				setState(3835);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3831);
					match(COMMA);
					setState(3832);
					literal();
					}
					}
					setState(3837);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3838);
				match(RPAREN);
				}
				}
				break;
			case INLINE:
				{
				{
				setState(3840);
				match(INLINE);
				setState(3841);
				match(LENGTH);
				setState(3842);
				match(INTEGERLITERAL);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnDefinitionOptionList2Context extends ParserRuleContext {
		public DefaultClause2Context defaultClause2() {
			return getRuleContext(DefaultClause2Context.class,0);
		}
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public ColumnConstraintContext columnConstraint() {
			return getRuleContext(ColumnConstraintContext.class,0);
		}
		public GeneratedClauseContext generatedClause() {
			return getRuleContext(GeneratedClauseContext.class,0);
		}
		public TerminalNode IMPLICITLY() { return getToken(DB2zSQLParser.IMPLICITLY, 0); }
		public TerminalNode HIDDEN_() { return getToken(DB2zSQLParser.HIDDEN_, 0); }
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode SECURITY() { return getToken(DB2zSQLParser.SECURITY, 0); }
		public TerminalNode LABEL() { return getToken(DB2zSQLParser.LABEL, 0); }
		public TerminalNode FIELDPROC() { return getToken(DB2zSQLParser.FIELDPROC, 0); }
		public ProgramNameContext programName() {
			return getRuleContext(ProgramNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<LiteralContext> literal() {
			return getRuleContexts(LiteralContext.class);
		}
		public LiteralContext literal(int i) {
			return getRuleContext(LiteralContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode INLINE() { return getToken(DB2zSQLParser.INLINE, 0); }
		public TerminalNode LENGTH() { return getToken(DB2zSQLParser.LENGTH, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public ColumnDefinitionOptionList2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDefinitionOptionList2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterColumnDefinitionOptionList2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitColumnDefinitionOptionList2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitColumnDefinitionOptionList2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnDefinitionOptionList2Context columnDefinitionOptionList2() throws RecognitionException {
		ColumnDefinitionOptionList2Context _localctx = new ColumnDefinitionOptionList2Context(_ctx, getState());
		enterRule(_localctx, 378, RULE_columnDefinitionOptionList2);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3871);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFAULT:
			case WITH:
				{
				{
				setState(3845);
				defaultClause2();
				}
				}
				break;
			case NOT:
				{
				{
				setState(3846);
				match(NOT);
				setState(3847);
				match(NULL);
				}
				}
				break;
			case CHECK:
			case CONSTRAINT:
			case REFERENCES:
				{
				{
				setState(3848);
				columnConstraint();
				}
				}
				break;
			case GENERATED:
				{
				{
				setState(3849);
				generatedClause();
				}
				}
				break;
			case IMPLICITLY:
				{
				{
				setState(3850);
				match(IMPLICITLY);
				setState(3851);
				match(HIDDEN_);
				}
				}
				break;
			case AS:
				{
				{
				setState(3852);
				match(AS);
				setState(3853);
				match(SECURITY);
				setState(3854);
				match(LABEL);
				}
				}
				break;
			case FIELDPROC:
				{
				{
				setState(3855);
				match(FIELDPROC);
				setState(3856);
				programName();
				setState(3857);
				match(LPAREN);
				setState(3858);
				literal();
				setState(3863);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3859);
					match(COMMA);
					setState(3860);
					literal();
					}
					}
					setState(3865);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3866);
				match(RPAREN);
				}
				}
				break;
			case INLINE:
				{
				{
				setState(3868);
				match(INLINE);
				setState(3869);
				match(LENGTH);
				setState(3870);
				match(INTEGERLITERAL);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnConstraintContext extends ParserRuleContext {
		public ReferencesClauseContext referencesClause() {
			return getRuleContext(ReferencesClauseContext.class,0);
		}
		public CheckConstraintContext checkConstraint() {
			return getRuleContext(CheckConstraintContext.class,0);
		}
		public ColumnConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnConstraintContext columnConstraint() throws RecognitionException {
		ColumnConstraintContext _localctx = new ColumnConstraintContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_columnConstraint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3875);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REFERENCES:
				{
				setState(3873);
				referencesClause();
				}
				break;
			case CHECK:
			case CONSTRAINT:
				{
				setState(3874);
				checkConstraint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GeneratedClauseContext extends ParserRuleContext {
		public TerminalNode GENERATED() { return getToken(DB2zSQLParser.GENERATED, 0); }
		public TerminalNode ALWAYS() { return getToken(DB2zSQLParser.ALWAYS, 0); }
		public AsIdentityClauseContext asIdentityClause() {
			return getRuleContext(AsIdentityClauseContext.class,0);
		}
		public AsRowChangeTimestampClauseContext asRowChangeTimestampClause() {
			return getRuleContext(AsRowChangeTimestampClauseContext.class,0);
		}
		public AsRowTransactionStartIDClauseContext asRowTransactionStartIDClause() {
			return getRuleContext(AsRowTransactionStartIDClauseContext.class,0);
		}
		public AsRowTransactionTimestampClauseContext asRowTransactionTimestampClause() {
			return getRuleContext(AsRowTransactionTimestampClauseContext.class,0);
		}
		public AsGeneratedExpressionClauseContext asGeneratedExpressionClause() {
			return getRuleContext(AsGeneratedExpressionClauseContext.class,0);
		}
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public TerminalNode DEFAULT() { return getToken(DB2zSQLParser.DEFAULT, 0); }
		public GeneratedClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generatedClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGeneratedClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGeneratedClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGeneratedClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GeneratedClauseContext generatedClause() throws RecognitionException {
		GeneratedClauseContext _localctx = new GeneratedClauseContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_generatedClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3896);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,410,_ctx) ) {
			case 1:
				{
				{
				setState(3877);
				match(GENERATED);
				setState(3881);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALWAYS:
					{
					setState(3878);
					match(ALWAYS);
					}
					break;
				case BY:
					{
					{
					setState(3879);
					match(BY);
					setState(3880);
					match(DEFAULT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3885);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AS:
					{
					setState(3883);
					asIdentityClause();
					}
					break;
				case FOR:
					{
					setState(3884);
					asRowChangeTimestampClause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case 2:
				{
				{
				setState(3887);
				match(GENERATED);
				setState(3889);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALWAYS) {
					{
					setState(3888);
					match(ALWAYS);
					}
				}

				setState(3894);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,409,_ctx) ) {
				case 1:
					{
					setState(3891);
					asRowTransactionStartIDClause();
					}
					break;
				case 2:
					{
					setState(3892);
					asRowTransactionTimestampClause();
					}
					break;
				case 3:
					{
					setState(3893);
					asGeneratedExpressionClause();
					}
					break;
				}
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AsIdentityClauseContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode IDENTITY() { return getToken(DB2zSQLParser.IDENTITY, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<AsIdentityClauseOptionListContext> asIdentityClauseOptionList() {
			return getRuleContexts(AsIdentityClauseOptionListContext.class);
		}
		public AsIdentityClauseOptionListContext asIdentityClauseOptionList(int i) {
			return getRuleContext(AsIdentityClauseOptionListContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public AsIdentityClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asIdentityClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAsIdentityClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAsIdentityClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAsIdentityClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AsIdentityClauseContext asIdentityClause() throws RecognitionException {
		AsIdentityClauseContext _localctx = new AsIdentityClauseContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_asIdentityClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3898);
			match(AS);
			setState(3899);
			match(IDENTITY);
			setState(3900);
			match(LPAREN);
			setState(3901);
			asIdentityClauseOptionList();
			setState(3908);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA || _la==NO || _la==ORDER || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MAXVALUE - 464)) | (1L << (MINVALUE - 464)) | (1L << (CACHE - 464)) | (1L << (CYCLE - 464)) | (1L << (INCREMENT - 464)) | (1L << (START - 464)))) != 0)) {
				{
				{
				setState(3903);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3902);
					match(COMMA);
					}
				}

				setState(3905);
				asIdentityClauseOptionList();
				}
				}
				setState(3910);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3911);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AsIdentityClauseOptionListContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(DB2zSQLParser.START, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode INCREMENT() { return getToken(DB2zSQLParser.INCREMENT, 0); }
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public TerminalNode CYCLE() { return getToken(DB2zSQLParser.CYCLE, 0); }
		public TerminalNode ORDER() { return getToken(DB2zSQLParser.ORDER, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode MINVALUE() { return getToken(DB2zSQLParser.MINVALUE, 0); }
		public TerminalNode MAXVALUE() { return getToken(DB2zSQLParser.MAXVALUE, 0); }
		public TerminalNode CACHE() { return getToken(DB2zSQLParser.CACHE, 0); }
		public AsIdentityClauseOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asIdentityClauseOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAsIdentityClauseOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAsIdentityClauseOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAsIdentityClauseOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AsIdentityClauseOptionListContext asIdentityClauseOptionList() throws RecognitionException {
		AsIdentityClauseOptionListContext _localctx = new AsIdentityClauseOptionListContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_asIdentityClauseOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3945);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,418,_ctx) ) {
			case 1:
				{
				{
				setState(3913);
				match(START);
				setState(3914);
				match(WITH);
				setState(3915);
				match(INTEGERLITERAL);
				}
				}
				break;
			case 2:
				{
				{
				setState(3916);
				match(INCREMENT);
				setState(3917);
				match(BY);
				setState(3918);
				match(INTEGERLITERAL);
				}
				}
				break;
			case 3:
				{
				setState(3923);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NO:
					{
					{
					setState(3919);
					match(NO);
					setState(3920);
					match(MINVALUE);
					}
					}
					break;
				case MINVALUE:
					{
					{
					setState(3921);
					match(MINVALUE);
					setState(3922);
					match(INTEGERLITERAL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				{
				setState(3929);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NO:
					{
					{
					setState(3925);
					match(NO);
					setState(3926);
					match(MAXVALUE);
					}
					}
					break;
				case MAXVALUE:
					{
					{
					setState(3927);
					match(MAXVALUE);
					setState(3928);
					match(INTEGERLITERAL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 5:
				{
				{
				setState(3932);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3931);
					match(NO);
					}
				}

				setState(3934);
				match(CYCLE);
				}
				}
				break;
			case 6:
				{
				setState(3939);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NO:
					{
					{
					setState(3935);
					match(NO);
					setState(3936);
					match(CACHE);
					}
					}
					break;
				case CACHE:
					{
					{
					setState(3937);
					match(CACHE);
					setState(3938);
					match(INTEGERLITERAL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 7:
				{
				{
				setState(3942);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3941);
					match(NO);
					}
				}

				setState(3944);
				match(ORDER);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AsRowChangeTimestampClauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode EACH() { return getToken(DB2zSQLParser.EACH, 0); }
		public List<TerminalNode> ROW() { return getTokens(DB2zSQLParser.ROW); }
		public TerminalNode ROW(int i) {
			return getToken(DB2zSQLParser.ROW, i);
		}
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(DB2zSQLParser.UPDATE, 0); }
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode CHANGE() { return getToken(DB2zSQLParser.CHANGE, 0); }
		public TerminalNode TIMESTAMP() { return getToken(DB2zSQLParser.TIMESTAMP, 0); }
		public AsRowChangeTimestampClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asRowChangeTimestampClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAsRowChangeTimestampClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAsRowChangeTimestampClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAsRowChangeTimestampClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AsRowChangeTimestampClauseContext asRowChangeTimestampClause() throws RecognitionException {
		AsRowChangeTimestampClauseContext _localctx = new AsRowChangeTimestampClauseContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_asRowChangeTimestampClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3947);
			match(FOR);
			setState(3948);
			match(EACH);
			setState(3949);
			match(ROW);
			setState(3950);
			match(ON);
			setState(3951);
			match(UPDATE);
			setState(3952);
			match(AS);
			setState(3953);
			match(ROW);
			setState(3954);
			match(CHANGE);
			setState(3955);
			match(TIMESTAMP);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AsRowTransactionStartIDClauseContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode TRANSACTION() { return getToken(DB2zSQLParser.TRANSACTION, 0); }
		public TerminalNode START() { return getToken(DB2zSQLParser.START, 0); }
		public TerminalNode ID() { return getToken(DB2zSQLParser.ID, 0); }
		public AsRowTransactionStartIDClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asRowTransactionStartIDClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAsRowTransactionStartIDClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAsRowTransactionStartIDClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAsRowTransactionStartIDClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AsRowTransactionStartIDClauseContext asRowTransactionStartIDClause() throws RecognitionException {
		AsRowTransactionStartIDClauseContext _localctx = new AsRowTransactionStartIDClauseContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_asRowTransactionStartIDClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3957);
			match(AS);
			setState(3958);
			match(TRANSACTION);
			setState(3959);
			match(START);
			setState(3960);
			match(ID);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AsRowTransactionTimestampClauseContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode ROW() { return getToken(DB2zSQLParser.ROW, 0); }
		public TerminalNode BEGIN() { return getToken(DB2zSQLParser.BEGIN, 0); }
		public TerminalNode START() { return getToken(DB2zSQLParser.START, 0); }
		public TerminalNode END() { return getToken(DB2zSQLParser.END, 0); }
		public AsRowTransactionTimestampClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asRowTransactionTimestampClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAsRowTransactionTimestampClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAsRowTransactionTimestampClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAsRowTransactionTimestampClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AsRowTransactionTimestampClauseContext asRowTransactionTimestampClause() throws RecognitionException {
		AsRowTransactionTimestampClauseContext _localctx = new AsRowTransactionTimestampClauseContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_asRowTransactionTimestampClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3962);
			match(AS);
			setState(3963);
			match(ROW);
			setState(3964);
			_la = _input.LA(1);
			if ( !(_la==BEGIN || _la==END || _la==START) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AsGeneratedExpressionClauseContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public NonDeterministicExpressionContext nonDeterministicExpression() {
			return getRuleContext(NonDeterministicExpressionContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public AsGeneratedExpressionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asGeneratedExpressionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAsGeneratedExpressionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAsGeneratedExpressionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAsGeneratedExpressionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AsGeneratedExpressionClauseContext asGeneratedExpressionClause() throws RecognitionException {
		AsGeneratedExpressionClauseContext _localctx = new AsGeneratedExpressionClauseContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_asGeneratedExpressionClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3966);
			match(AS);
			setState(3967);
			match(LPAREN);
			setState(3968);
			nonDeterministicExpression();
			setState(3969);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NonDeterministicExpressionContext extends ParserRuleContext {
		public SpecialRegisterContext specialRegister() {
			return getRuleContext(SpecialRegisterContext.class,0);
		}
		public NonDeterministicExpressionSessionVariableContext nonDeterministicExpressionSessionVariable() {
			return getRuleContext(NonDeterministicExpressionSessionVariableContext.class,0);
		}
		public TerminalNode DATA() { return getToken(DB2zSQLParser.DATA, 0); }
		public TerminalNode CHANGE() { return getToken(DB2zSQLParser.CHANGE, 0); }
		public TerminalNode OPERATION() { return getToken(DB2zSQLParser.OPERATION, 0); }
		public NonDeterministicExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonDeterministicExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterNonDeterministicExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitNonDeterministicExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitNonDeterministicExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NonDeterministicExpressionContext nonDeterministicExpression() throws RecognitionException {
		NonDeterministicExpressionContext _localctx = new NonDeterministicExpressionContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_nonDeterministicExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3976);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATA:
				{
				{
				setState(3971);
				match(DATA);
				setState(3972);
				match(CHANGE);
				setState(3973);
				match(OPERATION);
				}
				}
				break;
			case CURRENT_ACCELERATOR:
			case CURRENT_APPLICATION_COMPATIBILITY:
			case CURRENT_APPLICATION_ENCODING_SCHEME:
			case CURRENT_CLIENT_ACCTNG:
			case CURRENT_CLIENT_APPLNAME:
			case CURRENT_CLIENT_CORR_TOKEN:
			case CURRENT_CLIENT_USERID:
			case CURRENT_CLIENT_WRKSTNNAME:
			case CURRENT_DATE:
			case CURRENT_DEBUG_MODE:
			case CURRENT_DECFLOAT_ROUNDING_MODE:
			case CURRENT_DEGREE:
			case CURRENT_EXPLAIN_MODE:
			case CURRENT_GET_ACCEL_ARCHIVE:
			case CURRENT_LOCALE_LC_CTYPE:
			case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
			case CURRENT_MEMBER:
			case CURRENT_OPTIMIZATION_HINT:
			case CURRENT_PACKAGE_PATH:
			case CURRENT_PACKAGESET:
			case CURRENT_PATH:
			case CURRENT_PRECISION:
			case CURRENT_QUERY_ACCELERATION:
			case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
			case CURRENT_REFRESH_AGE:
			case CURRENT_ROUTINE_VERSION:
			case CURRENT_RULES:
			case CURRENT_SCHEMA:
			case CURRENT_SERVER:
			case CURRENT_SQLID:
			case CURRENT_TEMPORAL_BUSINESS_TIME:
			case CURRENT_TEMPORAL_SYSTEM_TIME:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_TIME_ZONE:
			case ENCRYPTION_PASSWORD:
			case SESSION_TIME_ZONE:
			case SESSION_USER:
			case USER:
				{
				setState(3974);
				specialRegister();
				}
				break;
			case SYSIBM:
				{
				setState(3975);
				nonDeterministicExpressionSessionVariable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NonDeterministicExpressionSessionVariableContext extends ParserRuleContext {
		public TerminalNode SYSIBM() { return getToken(DB2zSQLParser.SYSIBM, 0); }
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public TerminalNode PACKAGE_NAME() { return getToken(DB2zSQLParser.PACKAGE_NAME, 0); }
		public TerminalNode PACKAGE_SCHEMA() { return getToken(DB2zSQLParser.PACKAGE_SCHEMA, 0); }
		public TerminalNode PACKAGE_VERSION() { return getToken(DB2zSQLParser.PACKAGE_VERSION, 0); }
		public NonDeterministicExpressionSessionVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonDeterministicExpressionSessionVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterNonDeterministicExpressionSessionVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitNonDeterministicExpressionSessionVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitNonDeterministicExpressionSessionVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NonDeterministicExpressionSessionVariableContext nonDeterministicExpressionSessionVariable() throws RecognitionException {
		NonDeterministicExpressionSessionVariableContext _localctx = new NonDeterministicExpressionSessionVariableContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_nonDeterministicExpressionSessionVariable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3987);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,420,_ctx) ) {
			case 1:
				{
				{
				setState(3978);
				match(SYSIBM);
				setState(3979);
				match(DOT);
				setState(3980);
				match(PACKAGE_NAME);
				}
				}
				break;
			case 2:
				{
				{
				setState(3981);
				match(SYSIBM);
				setState(3982);
				match(DOT);
				setState(3983);
				match(PACKAGE_SCHEMA);
				}
				}
				break;
			case 3:
				{
				{
				setState(3984);
				match(SYSIBM);
				setState(3985);
				match(DOT);
				setState(3986);
				match(PACKAGE_VERSION);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnAlterationContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public List<ColumnAlterationOptionListContext> columnAlterationOptionList() {
			return getRuleContexts(ColumnAlterationOptionListContext.class);
		}
		public ColumnAlterationOptionListContext columnAlterationOptionList(int i) {
			return getRuleContext(ColumnAlterationOptionListContext.class,i);
		}
		public ColumnAlterationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnAlteration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterColumnAlteration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitColumnAlteration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitColumnAlteration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnAlterationContext columnAlteration() throws RecognitionException {
		ColumnAlterationContext _localctx = new ColumnAlterationContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_columnAlteration);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3989);
			columnName();
			setState(3991); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(3990);
					columnAlterationOptionList();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3993); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,421,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnAlterationOptionListContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public TerminalNode DATA() { return getToken(DB2zSQLParser.DATA, 0); }
		public TerminalNode TYPE() { return getToken(DB2zSQLParser.TYPE, 0); }
		public AlteredDataTypeContext alteredDataType() {
			return getRuleContext(AlteredDataTypeContext.class,0);
		}
		public DefaultClauseContext defaultClause() {
			return getRuleContext(DefaultClauseContext.class,0);
		}
		public TerminalNode INLINE() { return getToken(DB2zSQLParser.INLINE, 0); }
		public TerminalNode LENGTH() { return getToken(DB2zSQLParser.LENGTH, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode GENERATED() { return getToken(DB2zSQLParser.GENERATED, 0); }
		public IdentityAlterationContext identityAlteration() {
			return getRuleContext(IdentityAlterationContext.class,0);
		}
		public TerminalNode DROP() { return getToken(DB2zSQLParser.DROP, 0); }
		public TerminalNode DEFAULT() { return getToken(DB2zSQLParser.DEFAULT, 0); }
		public TerminalNode ALWAYS() { return getToken(DB2zSQLParser.ALWAYS, 0); }
		public AsRowTransactionTimestampClauseContext asRowTransactionTimestampClause() {
			return getRuleContext(AsRowTransactionTimestampClauseContext.class,0);
		}
		public AsRowTransactionStartIDClauseContext asRowTransactionStartIDClause() {
			return getRuleContext(AsRowTransactionStartIDClauseContext.class,0);
		}
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public ColumnAlterationOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnAlterationOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterColumnAlterationOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitColumnAlterationOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitColumnAlterationOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnAlterationOptionListContext columnAlterationOptionList() throws RecognitionException {
		ColumnAlterationOptionListContext _localctx = new ColumnAlterationOptionListContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_columnAlterationOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4032);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,427,_ctx) ) {
			case 1:
				{
				{
				setState(3995);
				match(SET);
				setState(3996);
				match(DATA);
				setState(3997);
				match(TYPE);
				setState(3998);
				alteredDataType();
				setState(4002);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INLINE) {
					{
					setState(3999);
					match(INLINE);
					setState(4000);
					match(LENGTH);
					setState(4001);
					match(INTEGERLITERAL);
					}
				}

				}
				}
				break;
			case 2:
				{
				{
				setState(4004);
				match(SET);
				setState(4005);
				defaultClause();
				}
				}
				break;
			case 3:
				{
				{
				setState(4006);
				match(SET);
				setState(4007);
				match(INLINE);
				setState(4008);
				match(LENGTH);
				setState(4009);
				match(INTEGERLITERAL);
				}
				}
				break;
			case 4:
				{
				{
				setState(4010);
				match(SET);
				setState(4011);
				match(GENERATED);
				setState(4015);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALWAYS:
					{
					setState(4012);
					match(ALWAYS);
					}
					break;
				case BY:
					{
					{
					setState(4013);
					match(BY);
					setState(4014);
					match(DEFAULT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4018);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,424,_ctx) ) {
				case 1:
					{
					setState(4017);
					identityAlteration();
					}
					break;
				}
				}
				}
				break;
			case 5:
				{
				{
				setState(4020);
				identityAlteration();
				}
				}
				break;
			case 6:
				{
				{
				setState(4021);
				match(SET);
				setState(4022);
				match(GENERATED);
				setState(4024);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALWAYS) {
					{
					setState(4023);
					match(ALWAYS);
					}
				}

				setState(4028);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,426,_ctx) ) {
				case 1:
					{
					setState(4026);
					asRowTransactionTimestampClause();
					}
					break;
				case 2:
					{
					setState(4027);
					asRowTransactionStartIDClause();
					}
					break;
				}
				}
				}
				break;
			case 7:
				{
				{
				setState(4030);
				match(DROP);
				setState(4031);
				match(DEFAULT);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlteredDataTypeContext extends ParserRuleContext {
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public AlteredDataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alteredDataType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlteredDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlteredDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlteredDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlteredDataTypeContext alteredDataType() throws RecognitionException {
		AlteredDataTypeContext _localctx = new AlteredDataTypeContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_alteredDataType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4034);
			dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeContext extends ParserRuleContext {
		public BuiltInTypeContext builtInType() {
			return getRuleContext(BuiltInTypeContext.class,0);
		}
		public DistinctTypeNameContext distinctTypeName() {
			return getRuleContext(DistinctTypeNameContext.class,0);
		}
		public DataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeContext dataType() throws RecognitionException {
		DataTypeContext _localctx = new DataTypeContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_dataType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4038);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,428,_ctx) ) {
			case 1:
				{
				setState(4036);
				builtInType();
				}
				break;
			case 2:
				{
				setState(4037);
				distinctTypeName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BuiltInTypeContext extends ParserRuleContext {
		public TerminalNode SMALLINT() { return getToken(DB2zSQLParser.SMALLINT, 0); }
		public TerminalNode INTEGER() { return getToken(DB2zSQLParser.INTEGER, 0); }
		public TerminalNode INT() { return getToken(DB2zSQLParser.INT, 0); }
		public TerminalNode BIGINT() { return getToken(DB2zSQLParser.BIGINT, 0); }
		public TerminalNode REAL() { return getToken(DB2zSQLParser.REAL, 0); }
		public TerminalNode DATE() { return getToken(DB2zSQLParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(DB2zSQLParser.TIME, 0); }
		public TerminalNode ROWID() { return getToken(DB2zSQLParser.ROWID, 0); }
		public TerminalNode DECFLOAT() { return getToken(DB2zSQLParser.DECFLOAT, 0); }
		public TerminalNode FLOAT() { return getToken(DB2zSQLParser.FLOAT, 0); }
		public TerminalNode DOUBLE() { return getToken(DB2zSQLParser.DOUBLE, 0); }
		public TerminalNode BINARY() { return getToken(DB2zSQLParser.BINARY, 0); }
		public TerminalNode TIMESTAMP() { return getToken(DB2zSQLParser.TIMESTAMP, 0); }
		public TerminalNode XML() { return getToken(DB2zSQLParser.XML, 0); }
		public TerminalNode DECIMAL() { return getToken(DB2zSQLParser.DECIMAL, 0); }
		public TerminalNode DEC() { return getToken(DB2zSQLParser.DEC, 0); }
		public TerminalNode NUMERIC() { return getToken(DB2zSQLParser.NUMERIC, 0); }
		public TerminalNode GRAPHIC() { return getToken(DB2zSQLParser.GRAPHIC, 0); }
		public TerminalNode VARGRAPHIC() { return getToken(DB2zSQLParser.VARGRAPHIC, 0); }
		public TerminalNode DBCLOB() { return getToken(DB2zSQLParser.DBCLOB, 0); }
		public IntegerInParensContext integerInParens() {
			return getRuleContext(IntegerInParensContext.class,0);
		}
		public TerminalNode VARCHAR() { return getToken(DB2zSQLParser.VARCHAR, 0); }
		public TerminalNode CLOB() { return getToken(DB2zSQLParser.CLOB, 0); }
		public TerminalNode VARBINARY() { return getToken(DB2zSQLParser.VARBINARY, 0); }
		public TerminalNode BLOB() { return getToken(DB2zSQLParser.BLOB, 0); }
		public TerminalNode PRECISION() { return getToken(DB2zSQLParser.PRECISION, 0); }
		public LengthContext length() {
			return getRuleContext(LengthContext.class,0);
		}
		public ForDataQualifierContext forDataQualifier() {
			return getRuleContext(ForDataQualifierContext.class,0);
		}
		public TerminalNode CCSID() { return getToken(DB2zSQLParser.CCSID, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode ZONE() { return getToken(DB2zSQLParser.ZONE, 0); }
		public XmlTypeModifierContext xmlTypeModifier() {
			return getRuleContext(XmlTypeModifierContext.class,0);
		}
		public TerminalNode LARGE() { return getToken(DB2zSQLParser.LARGE, 0); }
		public TerminalNode OBJECT() { return getToken(DB2zSQLParser.OBJECT, 0); }
		public TerminalNode SQLIDENTIFIER() { return getToken(DB2zSQLParser.SQLIDENTIFIER, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode WITHOUT() { return getToken(DB2zSQLParser.WITHOUT, 0); }
		public TerminalNode CHARACTER() { return getToken(DB2zSQLParser.CHARACTER, 0); }
		public TerminalNode CHAR() { return getToken(DB2zSQLParser.CHAR, 0); }
		public TerminalNode VARYING() { return getToken(DB2zSQLParser.VARYING, 0); }
		public BuiltInTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_builtInType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterBuiltInType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitBuiltInType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitBuiltInType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BuiltInTypeContext builtInType() throws RecognitionException {
		BuiltInTypeContext _localctx = new BuiltInTypeContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_builtInType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4158);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,451,_ctx) ) {
			case 1:
				{
				setState(4040);
				match(SMALLINT);
				}
				break;
			case 2:
				{
				setState(4041);
				match(INTEGER);
				}
				break;
			case 3:
				{
				setState(4042);
				match(INT);
				}
				break;
			case 4:
				{
				setState(4043);
				match(BIGINT);
				}
				break;
			case 5:
				{
				{
				setState(4044);
				_la = _input.LA(1);
				if ( !(_la==NUMERIC || _la==DEC || _la==DECIMAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4048);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,429,_ctx) ) {
				case 1:
					{
					setState(4045);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(4046);
					match(LPAREN);
					setState(4047);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 6:
				{
				{
				setState(4050);
				match(DECFLOAT);
				setState(4054);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,430,_ctx) ) {
				case 1:
					{
					setState(4051);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(4052);
					match(LPAREN);
					setState(4053);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 7:
				{
				{
				setState(4056);
				match(FLOAT);
				setState(4060);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,431,_ctx) ) {
				case 1:
					{
					setState(4057);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(4058);
					match(LPAREN);
					setState(4059);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 8:
				{
				setState(4062);
				match(REAL);
				}
				break;
			case 9:
				{
				{
				setState(4063);
				match(DOUBLE);
				setState(4065);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,432,_ctx) ) {
				case 1:
					{
					setState(4064);
					match(PRECISION);
					}
					break;
				}
				}
				}
				break;
			case 10:
				{
				{
				setState(4072);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHAR:
				case CHARACTER:
					{
					{
					setState(4067);
					_la = _input.LA(1);
					if ( !(_la==CHAR || _la==CHARACTER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4069);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,433,_ctx) ) {
					case 1:
						{
						setState(4068);
						match(VARYING);
						}
						break;
					}
					}
					}
					break;
				case VARCHAR:
					{
					setState(4071);
					match(VARCHAR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4077);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,435,_ctx) ) {
				case 1:
					{
					setState(4074);
					length();
					}
					break;
				case 2:
					{
					{
					setState(4075);
					match(LPAREN);
					setState(4076);
					match(RPAREN);
					}
					}
					break;
				}
				setState(4082);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,436,_ctx) ) {
				case 1:
					{
					setState(4079);
					forDataQualifier();
					}
					break;
				case 2:
					{
					{
					setState(4080);
					match(CCSID);
					setState(4081);
					match(INTEGERLITERAL);
					}
					}
					break;
				}
				}
				}
				break;
			case 11:
				{
				{
				setState(4088);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHAR:
				case CHARACTER:
					{
					{
					setState(4084);
					_la = _input.LA(1);
					if ( !(_la==CHAR || _la==CHARACTER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4085);
					match(LARGE);
					setState(4086);
					match(OBJECT);
					}
					}
					break;
				case CLOB:
					{
					setState(4087);
					match(CLOB);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4093);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,438,_ctx) ) {
				case 1:
					{
					setState(4090);
					length();
					}
					break;
				case 2:
					{
					{
					setState(4091);
					match(LPAREN);
					setState(4092);
					match(RPAREN);
					}
					}
					break;
				}
				setState(4098);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,439,_ctx) ) {
				case 1:
					{
					setState(4095);
					forDataQualifier();
					}
					break;
				case 2:
					{
					{
					setState(4096);
					match(CCSID);
					setState(4097);
					match(INTEGERLITERAL);
					}
					}
					break;
				}
				}
				}
				break;
			case 12:
				{
				{
				setState(4100);
				_la = _input.LA(1);
				if ( !(_la==DBCLOB || _la==GRAPHIC || _la==VARGRAPHIC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4104);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,440,_ctx) ) {
				case 1:
					{
					setState(4101);
					length();
					}
					break;
				case 2:
					{
					{
					setState(4102);
					match(LPAREN);
					setState(4103);
					match(RPAREN);
					}
					}
					break;
				}
				setState(4108);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,441,_ctx) ) {
				case 1:
					{
					setState(4106);
					match(CCSID);
					setState(4107);
					match(INTEGERLITERAL);
					}
					break;
				}
				}
				}
				break;
			case 13:
				{
				{
				setState(4110);
				match(BINARY);
				setState(4114);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,442,_ctx) ) {
				case 1:
					{
					setState(4111);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(4112);
					match(LPAREN);
					setState(4113);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 14:
				{
				{
				setState(4121);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
					{
					{
					setState(4116);
					match(BINARY);
					setState(4118);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,443,_ctx) ) {
					case 1:
						{
						setState(4117);
						match(VARYING);
						}
						break;
					}
					}
					}
					break;
				case VARBINARY:
					{
					setState(4120);
					match(VARBINARY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4126);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,445,_ctx) ) {
				case 1:
					{
					setState(4123);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(4124);
					match(LPAREN);
					setState(4125);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 15:
				{
				{
				setState(4132);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
					{
					{
					setState(4128);
					match(BINARY);
					setState(4129);
					match(LARGE);
					setState(4130);
					match(OBJECT);
					}
					}
					break;
				case BLOB:
					{
					setState(4131);
					match(BLOB);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4137);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,447,_ctx) ) {
				case 1:
					{
					setState(4134);
					match(LPAREN);
					setState(4135);
					_la = _input.LA(1);
					if ( !(_la==INTEGERLITERAL || _la==SQLIDENTIFIER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4136);
					match(RPAREN);
					}
					break;
				}
				}
				}
				break;
			case 16:
				{
				setState(4139);
				match(DATE);
				}
				break;
			case 17:
				{
				setState(4140);
				match(TIME);
				}
				break;
			case 18:
				{
				{
				setState(4141);
				match(TIMESTAMP);
				setState(4143);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,448,_ctx) ) {
				case 1:
					{
					setState(4142);
					integerInParens();
					}
					break;
				}
				setState(4148);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,449,_ctx) ) {
				case 1:
					{
					setState(4145);
					_la = _input.LA(1);
					if ( !(_la==WITH || _la==WITHOUT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4146);
					match(TIME);
					setState(4147);
					match(ZONE);
					}
					break;
				}
				}
				}
				break;
			case 19:
				{
				setState(4150);
				match(ROWID);
				}
				break;
			case 20:
				{
				{
				setState(4151);
				match(XML);
				setState(4156);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,450,_ctx) ) {
				case 1:
					{
					setState(4152);
					match(LPAREN);
					setState(4153);
					xmlTypeModifier();
					setState(4154);
					match(RPAREN);
					}
					break;
				}
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SqlDataTypeContext extends ParserRuleContext {
		public TerminalNode DATE() { return getToken(DB2zSQLParser.DATE, 0); }
		public TerminalNode VARCHAR() { return getToken(DB2zSQLParser.VARCHAR, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode DECFLOAT() { return getToken(DB2zSQLParser.DECFLOAT, 0); }
		public TerminalNode TIMESTAMP() { return getToken(DB2zSQLParser.TIMESTAMP, 0); }
		public SqlDataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlDataType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSqlDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSqlDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSqlDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SqlDataTypeContext sqlDataType() throws RecognitionException {
		SqlDataTypeContext _localctx = new SqlDataTypeContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_sqlDataType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4177);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VARCHAR:
				{
				{
				setState(4160);
				match(VARCHAR);
				setState(4161);
				match(LPAREN);
				setState(4162);
				match(INTEGERLITERAL);
				setState(4163);
				match(RPAREN);
				}
				}
				break;
			case DECFLOAT:
				{
				{
				setState(4164);
				match(DECFLOAT);
				setState(4168);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(4165);
					match(LPAREN);
					setState(4166);
					match(INTEGERLITERAL);
					setState(4167);
					match(RPAREN);
					}
				}

				}
				}
				break;
			case DATE:
				{
				setState(4170);
				match(DATE);
				}
				break;
			case TIMESTAMP:
				{
				{
				setState(4171);
				match(TIMESTAMP);
				setState(4175);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(4172);
					match(LPAREN);
					setState(4173);
					match(INTEGERLITERAL);
					setState(4174);
					match(RPAREN);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlTypeModifierContext extends ParserRuleContext {
		public TerminalNode XMLSCHEMA() { return getToken(DB2zSQLParser.XMLSCHEMA, 0); }
		public List<XmlSchemaSpecificationContext> xmlSchemaSpecification() {
			return getRuleContexts(XmlSchemaSpecificationContext.class);
		}
		public XmlSchemaSpecificationContext xmlSchemaSpecification(int i) {
			return getRuleContext(XmlSchemaSpecificationContext.class,i);
		}
		public List<TerminalNode> ELEMENT() { return getTokens(DB2zSQLParser.ELEMENT); }
		public TerminalNode ELEMENT(int i) {
			return getToken(DB2zSQLParser.ELEMENT, i);
		}
		public List<XmlElementNameContext> xmlElementName() {
			return getRuleContexts(XmlElementNameContext.class);
		}
		public XmlElementNameContext xmlElementName(int i) {
			return getRuleContext(XmlElementNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public XmlTypeModifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlTypeModifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterXmlTypeModifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitXmlTypeModifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitXmlTypeModifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlTypeModifierContext xmlTypeModifier() throws RecognitionException {
		XmlTypeModifierContext _localctx = new XmlTypeModifierContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_xmlTypeModifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4179);
			match(XMLSCHEMA);
			setState(4180);
			xmlSchemaSpecification();
			setState(4183);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELEMENT) {
				{
				setState(4181);
				match(ELEMENT);
				setState(4182);
				xmlElementName();
				}
			}

			setState(4193);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4185);
				match(COMMA);
				setState(4186);
				xmlSchemaSpecification();
				setState(4189);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELEMENT) {
					{
					setState(4187);
					match(ELEMENT);
					setState(4188);
					xmlElementName();
					}
				}

				}
				}
				setState(4195);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlSchemaSpecificationContext extends ParserRuleContext {
		public TerminalNode ID() { return getToken(DB2zSQLParser.ID, 0); }
		public RegisteredXmlSchemaNameContext registeredXmlSchemaName() {
			return getRuleContext(RegisteredXmlSchemaNameContext.class,0);
		}
		public TerminalNode LOCATION() { return getToken(DB2zSQLParser.LOCATION, 0); }
		public SchemaLocationContext schemaLocation() {
			return getRuleContext(SchemaLocationContext.class,0);
		}
		public TerminalNode URL() { return getToken(DB2zSQLParser.URL, 0); }
		public TargetNamespaceContext targetNamespace() {
			return getRuleContext(TargetNamespaceContext.class,0);
		}
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode NAMESPACE() { return getToken(DB2zSQLParser.NAMESPACE, 0); }
		public XmlSchemaSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlSchemaSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterXmlSchemaSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitXmlSchemaSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitXmlSchemaSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlSchemaSpecificationContext xmlSchemaSpecification() throws RecognitionException {
		XmlSchemaSpecificationContext _localctx = new XmlSchemaSpecificationContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_xmlSchemaSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4208);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ID:
				{
				{
				setState(4196);
				match(ID);
				setState(4197);
				registeredXmlSchemaName();
				}
				}
				break;
			case NO:
			case URL:
				{
				{
				setState(4202);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case URL:
					{
					{
					setState(4198);
					match(URL);
					setState(4199);
					targetNamespace();
					}
					}
					break;
				case NO:
					{
					{
					setState(4200);
					match(NO);
					setState(4201);
					match(NAMESPACE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4206);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCATION) {
					{
					setState(4204);
					match(LOCATION);
					setState(4205);
					schemaLocation();
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlElementNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public XmlElementNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlElementName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterXmlElementName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitXmlElementName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitXmlElementName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlElementNameContext xmlElementName() throws RecognitionException {
		XmlElementNameContext _localctx = new XmlElementNameContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_xmlElementName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4210);
			identifier();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RegisteredXmlSchemaNameContext extends ParserRuleContext {
		public TerminalNode SYSXSR() { return getToken(DB2zSQLParser.SYSXSR, 0); }
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public TerminalNode SQLIDENTIFIER() { return getToken(DB2zSQLParser.SQLIDENTIFIER, 0); }
		public RegisteredXmlSchemaNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_registeredXmlSchemaName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRegisteredXmlSchemaName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRegisteredXmlSchemaName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRegisteredXmlSchemaName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RegisteredXmlSchemaNameContext registeredXmlSchemaName() throws RecognitionException {
		RegisteredXmlSchemaNameContext _localctx = new RegisteredXmlSchemaNameContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_registeredXmlSchemaName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4212);
			match(SYSXSR);
			setState(4213);
			match(DOT);
			setState(4214);
			match(SQLIDENTIFIER);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TargetNamespaceContext extends ParserRuleContext {
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public TargetNamespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_targetNamespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTargetNamespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTargetNamespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTargetNamespace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TargetNamespaceContext targetNamespace() throws RecognitionException {
		TargetNamespaceContext _localctx = new TargetNamespaceContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_targetNamespace);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4216);
			match(NONNUMERICLITERAL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SchemaLocationContext extends ParserRuleContext {
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public SchemaLocationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaLocation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSchemaLocation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSchemaLocation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSchemaLocation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SchemaLocationContext schemaLocation() throws RecognitionException {
		SchemaLocationContext _localctx = new SchemaLocationContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_schemaLocation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4218);
			match(NONNUMERICLITERAL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentityAlterationContext extends ParserRuleContext {
		public TerminalNode RESTART() { return getToken(DB2zSQLParser.RESTART, 0); }
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public TerminalNode INCREMENT() { return getToken(DB2zSQLParser.INCREMENT, 0); }
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode CYCLE() { return getToken(DB2zSQLParser.CYCLE, 0); }
		public TerminalNode ORDER() { return getToken(DB2zSQLParser.ORDER, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode MINVALUE() { return getToken(DB2zSQLParser.MINVALUE, 0); }
		public TerminalNode MAXVALUE() { return getToken(DB2zSQLParser.MAXVALUE, 0); }
		public TerminalNode CACHE() { return getToken(DB2zSQLParser.CACHE, 0); }
		public IdentityAlterationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identityAlteration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterIdentityAlteration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitIdentityAlteration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitIdentityAlteration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentityAlterationContext identityAlteration() throws RecognitionException {
		IdentityAlterationContext _localctx = new IdentityAlterationContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_identityAlteration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4260);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,467,_ctx) ) {
			case 1:
				{
				{
				setState(4220);
				match(RESTART);
				setState(4223);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4221);
					match(WITH);
					setState(4222);
					match(INTEGERLITERAL);
					}
				}

				}
				}
				break;
			case 2:
				{
				{
				setState(4225);
				match(SET);
				setState(4226);
				match(INCREMENT);
				setState(4227);
				match(BY);
				setState(4228);
				match(INTEGERLITERAL);
				}
				}
				break;
			case 3:
				{
				{
				setState(4229);
				match(SET);
				setState(4234);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NO:
					{
					{
					setState(4230);
					match(NO);
					setState(4231);
					match(MINVALUE);
					}
					}
					break;
				case MINVALUE:
					{
					{
					setState(4232);
					match(MINVALUE);
					setState(4233);
					match(INTEGERLITERAL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case 4:
				{
				{
				setState(4236);
				match(SET);
				setState(4241);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NO:
					{
					{
					setState(4237);
					match(NO);
					setState(4238);
					match(MAXVALUE);
					}
					}
					break;
				case MAXVALUE:
					{
					{
					setState(4239);
					match(MAXVALUE);
					setState(4240);
					match(INTEGERLITERAL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case 5:
				{
				{
				setState(4243);
				match(SET);
				setState(4245);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(4244);
					match(NO);
					}
				}

				setState(4247);
				match(CYCLE);
				}
				}
				break;
			case 6:
				{
				{
				setState(4248);
				match(SET);
				setState(4253);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NO:
					{
					{
					setState(4249);
					match(NO);
					setState(4250);
					match(CACHE);
					}
					}
					break;
				case CACHE:
					{
					{
					setState(4251);
					match(CACHE);
					setState(4252);
					match(INTEGERLITERAL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case 7:
				{
				{
				setState(4255);
				match(SET);
				setState(4257);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(4256);
					match(NO);
					}
				}

				setState(4259);
				match(ORDER);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UniqueConstraintContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode UNIQUE() { return getToken(DB2zSQLParser.UNIQUE, 0); }
		public TerminalNode CONSTRAINT() { return getToken(DB2zSQLParser.CONSTRAINT, 0); }
		public ConstraintNameContext constraintName() {
			return getRuleContext(ConstraintNameContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public TerminalNode BUSINESS_TIME() { return getToken(DB2zSQLParser.BUSINESS_TIME, 0); }
		public TerminalNode WITHOUT() { return getToken(DB2zSQLParser.WITHOUT, 0); }
		public TerminalNode OVERLAPS() { return getToken(DB2zSQLParser.OVERLAPS, 0); }
		public TerminalNode PRIMARY() { return getToken(DB2zSQLParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(DB2zSQLParser.KEY, 0); }
		public UniqueConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uniqueConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterUniqueConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitUniqueConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitUniqueConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UniqueConstraintContext uniqueConstraint() throws RecognitionException {
		UniqueConstraintContext _localctx = new UniqueConstraintContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_uniqueConstraint);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4264);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(4262);
				match(CONSTRAINT);
				setState(4263);
				constraintName();
				}
			}

			setState(4269);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PRIMARY:
				{
				{
				setState(4266);
				match(PRIMARY);
				setState(4267);
				match(KEY);
				}
				}
				break;
			case UNIQUE:
				{
				setState(4268);
				match(UNIQUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4271);
			match(LPAREN);
			setState(4272);
			columnName();
			setState(4277);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,470,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4273);
					match(COMMA);
					setState(4274);
					columnName();
					}
					} 
				}
				setState(4279);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,470,_ctx);
			}
			setState(4284);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(4280);
				match(COMMA);
				setState(4281);
				match(BUSINESS_TIME);
				setState(4282);
				match(WITHOUT);
				setState(4283);
				match(OVERLAPS);
				}
			}

			setState(4286);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferentialConstraintContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public ReferencesClauseContext referencesClause() {
			return getRuleContext(ReferencesClauseContext.class,0);
		}
		public List<TerminalNode> PERIOD() { return getTokens(DB2zSQLParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(DB2zSQLParser.PERIOD, i);
		}
		public List<TerminalNode> BUSINESS() { return getTokens(DB2zSQLParser.BUSINESS); }
		public TerminalNode BUSINESS(int i) {
			return getToken(DB2zSQLParser.BUSINESS, i);
		}
		public List<TerminalNode> TIME() { return getTokens(DB2zSQLParser.TIME); }
		public TerminalNode TIME(int i) {
			return getToken(DB2zSQLParser.TIME, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public TerminalNode CONSTRAINT() { return getToken(DB2zSQLParser.CONSTRAINT, 0); }
		public ConstraintNameContext constraintName() {
			return getRuleContext(ConstraintNameContext.class,0);
		}
		public TerminalNode FOREIGN() { return getToken(DB2zSQLParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(DB2zSQLParser.KEY, 0); }
		public ReferentialConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referentialConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterReferentialConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitReferentialConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitReferentialConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReferentialConstraintContext referentialConstraint() throws RecognitionException {
		ReferentialConstraintContext _localctx = new ReferentialConstraintContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_referentialConstraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4298);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CONSTRAINT:
				{
				{
				setState(4288);
				match(CONSTRAINT);
				setState(4289);
				constraintName();
				setState(4290);
				match(FOREIGN);
				setState(4291);
				match(KEY);
				}
				}
				break;
			case FOREIGN:
				{
				{
				setState(4293);
				match(FOREIGN);
				setState(4294);
				match(KEY);
				setState(4296);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & ((1L << (ADD - 30)) | (1L << (AFTER - 30)) | (1L << (ALL - 30)) | (1L << (ALLOCATE - 30)) | (1L << (ALLOW - 30)) | (1L << (ALTER - 30)) | (1L << (ALTERAND - 30)) | (1L << (ANY - 30)) | (1L << (ARRAY - 30)) | (1L << (ARRAY_EXISTS - 30)) | (1L << (AS - 30)) | (1L << (ASENSITIVE - 30)) | (1L << (ASSOCIATE - 30)) | (1L << (ASUTIME - 30)) | (1L << (AT - 30)) | (1L << (AUDIT - 30)) | (1L << (AUX - 30)) | (1L << (AUXILIARY - 30)) | (1L << (BEFORE - 30)) | (1L << (BEGIN - 30)) | (1L << (BETWEEN - 30)) | (1L << (BUFFERPOOL - 30)) | (1L << (BY - 30)) | (1L << (CALL - 30)) | (1L << (CAPTURE - 30)) | (1L << (CASCADED - 30)) | (1L << (CASE - 30)) | (1L << (CAST - 30)) | (1L << (CCSID - 30)) | (1L << (CHAR - 30)) | (1L << (CHARACTER - 30)) | (1L << (CHECK - 30)) | (1L << (CLONE - 30)) | (1L << (CLOSE - 30)) | (1L << (CLUSTER - 30)) | (1L << (COLLECTION - 30)) | (1L << (COLLID - 30)) | (1L << (COLUMN - 30)) | (1L << (COMMENT - 30)) | (1L << (COMMIT - 30)) | (1L << (CONCAT - 30)) | (1L << (CONDITION - 30)) | (1L << (CONNECT - 30)) | (1L << (CONNECTION - 30)) | (1L << (CONSTRAINT - 30)) | (1L << (CONTAINS - 30)) | (1L << (CONTENT - 30)) | (1L << (CONTINUE - 30)) | (1L << (CREATE - 30)) | (1L << (CUBE - 30)) | (1L << (CURRENT - 30)) | (1L << (CURRENT_LC_CTYPE - 30)) | (1L << (CURRVAL - 30)) | (1L << (CURSOR - 30)) | (1L << (DATA - 30)) | (1L << (DATABASE - 30)) | (1L << (DAY - 30)) | (1L << (DAYS - 30)) | (1L << (DBINFO - 30)) | (1L << (DECLARE - 30)) | (1L << (DEFAULT - 30)) | (1L << (DELETE - 30)) | (1L << (DESCRIPTOR - 30)) | (1L << (DETERMINISTIC - 30)))) != 0) || ((((_la - 94)) & ~0x3f) == 0 && ((1L << (_la - 94)) & ((1L << (DISABLE - 94)) | (1L << (DISALLOW - 94)) | (1L << (DISTINCT - 94)) | (1L << (DO - 94)) | (1L << (DOCUMENT - 94)) | (1L << (DOUBLE - 94)) | (1L << (DROP - 94)) | (1L << (DSSIZE - 94)) | (1L << (DYNAMIC - 94)) | (1L << (EDITPROC - 94)) | (1L << (ELSE - 94)) | (1L << (ELSEIF - 94)) | (1L << (ENCODING - 94)) | (1L << (ENCRYPTION - 94)) | (1L << (END - 94)) | (1L << (END_EXEC - 94)) | (1L << (ENDING - 94)) | (1L << (ERASE - 94)) | (1L << (ESCAPE - 94)) | (1L << (EXCEPT - 94)) | (1L << (EXCEPTION - 94)) | (1L << (EXEC_SQL - 94)) | (1L << (EXECUTE - 94)) | (1L << (EXISTS - 94)) | (1L << (EXIT - 94)) | (1L << (EXPLAIN - 94)) | (1L << (EXTERNAL - 94)) | (1L << (FENCED - 94)) | (1L << (FETCH - 94)) | (1L << (FIELDPROC - 94)) | (1L << (FINAL - 94)) | (1L << (FIRST - 94)) | (1L << (FOR - 94)) | (1L << (FREE - 94)) | (1L << (FROM - 94)) | (1L << (FULL - 94)) | (1L << (FUNCTION - 94)) | (1L << (GENERATED - 94)) | (1L << (GET - 94)) | (1L << (GLOBAL - 94)) | (1L << (GO - 94)) | (1L << (GOTO - 94)) | (1L << (GRANT - 94)) | (1L << (GROUP - 94)) | (1L << (HANDLER - 94)) | (1L << (HAVING - 94)) | (1L << (HOLD - 94)) | (1L << (HOUR - 94)) | (1L << (HOURS - 94)) | (1L << (IF - 94)) | (1L << (IMMEDIATE - 94)) | (1L << (IN - 94)) | (1L << (INCLUSIVE - 94)) | (1L << (INDEX - 94)) | (1L << (INDEXBP - 94)) | (1L << (INHERIT - 94)) | (1L << (INNER - 94)) | (1L << (INOUT - 94)) | (1L << (INSENSITIVE - 94)) | (1L << (INSERT - 94)) | (1L << (INTERSECT - 94)) | (1L << (INTO - 94)) | (1L << (IS - 94)) | (1L << (ISOBID - 94)))) != 0) || ((((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & ((1L << (ITERATE - 158)) | (1L << (JAR - 158)) | (1L << (JOIN - 158)) | (1L << (KEEP - 158)) | (1L << (KEY - 158)) | (1L << (LABEL - 158)) | (1L << (LANGUAGE - 158)) | (1L << (LAST - 158)) | (1L << (LC_CTYPE - 158)) | (1L << (LEAVE - 158)) | (1L << (LEFT - 158)) | (1L << (LIKE - 158)) | (1L << (LIMIT - 158)) | (1L << (LOCAL - 158)) | (1L << (LOCALE - 158)) | (1L << (LOCATOR - 158)) | (1L << (LOCATORS - 158)) | (1L << (LOCK - 158)) | (1L << (LOCKMAX - 158)) | (1L << (LOCKSIZE - 158)) | (1L << (LONG - 158)) | (1L << (LOOP - 158)) | (1L << (MAINTAINED - 158)) | (1L << (MATERIALIZED - 158)) | (1L << (MICROSECOND - 158)) | (1L << (MICROSECONDS - 158)) | (1L << (MODIFIES - 158)) | (1L << (MONTH - 158)) | (1L << (MONTHS - 158)) | (1L << (NEXT - 158)) | (1L << (NEXTVAL - 158)) | (1L << (NO - 158)) | (1L << (NONE - 158)) | (1L << (NOT - 158)) | (1L << (NULL - 158)) | (1L << (NULLS - 158)) | (1L << (NUMPARTS - 158)) | (1L << (OBID - 158)) | (1L << (OF - 158)) | (1L << (OFFSET - 158)) | (1L << (OLD - 158)) | (1L << (ON - 158)) | (1L << (OPEN - 158)) | (1L << (OPTIMIZATION - 158)) | (1L << (OPTIMIZE - 158)) | (1L << (OR - 158)) | (1L << (ORDER - 158)) | (1L << (ORGANIZATION - 158)) | (1L << (OUT - 158)) | (1L << (OUTER - 158)) | (1L << (PACKAGE - 158)) | (1L << (PADDED - 158)) | (1L << (PARAMETER - 158)) | (1L << (PART - 158)) | (1L << (PARTITION - 158)) | (1L << (PARTITIONED - 158)) | (1L << (PARTITIONING - 158)) | (1L << (PATH - 158)) | (1L << (PERIOD - 158)) | (1L << (PIECESIZE - 158)) | (1L << (PLAN - 158)) | (1L << (PRECISION - 158)) | (1L << (PREPARE - 158)))) != 0) || ((((_la - 222)) & ~0x3f) == 0 && ((1L << (_la - 222)) & ((1L << (PREVVAL - 222)) | (1L << (PRIOR - 222)) | (1L << (PRIQTY - 222)) | (1L << (PRIVILEGES - 222)) | (1L << (PROCEDURE - 222)) | (1L << (PROGRAM - 222)) | (1L << (PSID - 222)) | (1L << (PUBLIC - 222)) | (1L << (QUERY - 222)) | (1L << (QUERYNO - 222)) | (1L << (READS - 222)) | (1L << (REFERENCES - 222)) | (1L << (REFRESH - 222)) | (1L << (RELEASE - 222)) | (1L << (RENAME - 222)) | (1L << (REPEAT - 222)) | (1L << (RESIGNAL - 222)) | (1L << (RESTRICT - 222)) | (1L << (RESULT - 222)) | (1L << (RESULT_SET_LOCATOR - 222)) | (1L << (RETURN - 222)) | (1L << (RETURNS - 222)) | (1L << (REVOKE - 222)) | (1L << (RIGHT - 222)) | (1L << (ROLE - 222)) | (1L << (ROLLBACK - 222)) | (1L << (ROLLUP - 222)) | (1L << (ROUND_CEILING - 222)) | (1L << (ROUND_DOWN - 222)) | (1L << (ROUND_FLOOR - 222)) | (1L << (ROUND_HALF_DOWN - 222)) | (1L << (ROUND_HALF_EVEN - 222)) | (1L << (ROUND_HALF_UP - 222)) | (1L << (ROUND_UP - 222)) | (1L << (ROW - 222)) | (1L << (ROWSET - 222)) | (1L << (RUN - 222)) | (1L << (SAVEPOINT - 222)) | (1L << (SCHEMA - 222)) | (1L << (SCRATCHPAD - 222)) | (1L << (SECOND - 222)) | (1L << (SECONDS - 222)) | (1L << (SECQTY - 222)) | (1L << (SECURITY - 222)) | (1L << (SELECT - 222)) | (1L << (SENSITIVE - 222)) | (1L << (SEQUENCE - 222)) | (1L << (SET - 222)) | (1L << (SIGNAL - 222)) | (1L << (SIMPLE - 222)) | (1L << (SOME - 222)) | (1L << (SOURCE - 222)) | (1L << (SPECIFIC - 222)) | (1L << (STANDARD - 222)) | (1L << (STATEMENT - 222)) | (1L << (STATIC - 222)) | (1L << (STAY - 222)) | (1L << (STOGROUP - 222)) | (1L << (STORES - 222)) | (1L << (STYLE - 222)) | (1L << (SUMMARY - 222)) | (1L << (SYNONYM - 222)) | (1L << (SYSDATE - 222)) | (1L << (SYSTEM - 222)))) != 0) || ((((_la - 286)) & ~0x3f) == 0 && ((1L << (_la - 286)) & ((1L << (SYSTIMESTAMP - 286)) | (1L << (TABLE - 286)) | (1L << (TABLESPACE - 286)) | (1L << (THEN - 286)) | (1L << (TO - 286)) | (1L << (TRIGGER - 286)) | (1L << (TRUNCATE - 286)) | (1L << (TYPE - 286)) | (1L << (UNDO - 286)) | (1L << (UNION - 286)) | (1L << (UNIQUE - 286)) | (1L << (UNTIL - 286)) | (1L << (UPDATE - 286)) | (1L << (USING - 286)) | (1L << (VALIDPROC - 286)) | (1L << (VALUE - 286)) | (1L << (VALUES - 286)) | (1L << (VARIABLE - 286)) | (1L << (VARIANT - 286)) | (1L << (VCAT - 286)) | (1L << (VERSIONING - 286)) | (1L << (VIEW - 286)) | (1L << (VOLATILE - 286)) | (1L << (VOLUMES - 286)) | (1L << (WHEN - 286)) | (1L << (WHENEVER - 286)) | (1L << (WHERE - 286)) | (1L << (WHILE - 286)) | (1L << (WITH - 286)) | (1L << (WLM - 286)) | (1L << (XMLCAST - 286)) | (1L << (XMLEXISTS - 286)) | (1L << (XMLNAMESPACES - 286)) | (1L << (YEAR - 286)) | (1L << (YEARS - 286)) | (1L << (ZONE - 286)) | (1L << (AND - 286)) | (1L << (ARRAY_AGG - 286)) | (1L << (ASC - 286)) | (1L << (AVG - 286)) | (1L << (BIT - 286)) | (1L << (CHANGE - 286)) | (1L << (CODEUNITS16 - 286)) | (1L << (CODEUNITS32 - 286)) | (1L << (CORR - 286)) | (1L << (CORRELATION - 286)) | (1L << (COUNT - 286)) | (1L << (COUNT_BIG - 286)) | (1L << (COVAR - 286)) | (1L << (COVARIANCE - 286)) | (1L << (COVARIANCE_SAMP - 286)) | (1L << (COVAR_POP - 286)) | (1L << (COVAR_SAMP - 286)) | (1L << (CS - 286)) | (1L << (CUME_DIST - 286)) | (1L << (DENSE_RANK - 286)) | (1L << (DESC - 286)) | (1L << (EBCDIC - 286)) | (1L << (EXCLUSIVE - 286)) | (1L << (FIRST_VALUE - 286)) | (1L << (FOLLOWING - 286)) | (1L << (GROUPING - 286)) | (1L << (IGNORE - 286)) | (1L << (INDICATOR - 286)))) != 0) || ((((_la - 350)) & ~0x3f) == 0 && ((1L << (_la - 350)) & ((1L << (INPUT - 350)) | (1L << (ISNULL - 350)) | (1L << (LAG - 350)) | (1L << (LARGE - 350)) | (1L << (LAST_VALUE - 350)) | (1L << (LEAD - 350)) | (1L << (LISTAGG - 350)) | (1L << (LOCKED - 350)) | (1L << (LOCKS - 350)) | (1L << (MEDIAN - 350)) | (1L << (MINUTES - 350)) | (1L << (MIXED - 350)) | (1L << (NOTNULL - 350)) | (1L << (NTH_VALUE - 350)) | (1L << (NTILE - 350)) | (1L << (NUMERIC - 350)) | (1L << (OBJECT - 350)) | (1L << (OCTETS - 350)) | (1L << (ONLY - 350)) | (1L << (OVER - 350)) | (1L << (PASSING - 350)) | (1L << (PERCENTILE_CONT - 350)) | (1L << (PERCENTILE_DISC - 350)) | (1L << (PERCENT_RANK - 350)) | (1L << (PRECEDING - 350)) | (1L << (PREVIOUS - 350)) | (1L << (RANGE - 350)) | (1L << (RANK - 350)) | (1L << (RATIO_TO_REPORT - 350)) | (1L << (READ - 350)) | (1L << (REF - 350)) | (1L << (REGR_AVGX - 350)) | (1L << (REGR_AVGY - 350)) | (1L << (REGR_COUNT - 350)) | (1L << (REGR_ICPT - 350)) | (1L << (REGR_INTERCEPT - 350)) | (1L << (REGR_R2 - 350)) | (1L << (REGR_SLOPE - 350)) | (1L << (REGR_SXX - 350)) | (1L << (REGR_SXY - 350)) | (1L << (REGR_SYY - 350)) | (1L << (RESPECT - 350)) | (1L << (ROW_NUMBER - 350)) | (1L << (ROWS - 350)) | (1L << (RR - 350)) | (1L << (RS - 350)) | (1L << (SBCS - 350)) | (1L << (SELECTIVITY - 350)) | (1L << (SETS - 350)) | (1L << (SHARE - 350)) | (1L << (SKIP_ - 350)) | (1L << (STDDEV - 350)) | (1L << (STDDEV_POP - 350)) | (1L << (STDDEV_SAMP - 350)) | (1L << (SUM - 350)) | (1L << (TOKEN - 350)) | (1L << (UNBOUNDED - 350)) | (1L << (UNPACK - 350)) | (1L << (UR - 350)) | (1L << (USE - 350)) | (1L << (VAR - 350)) | (1L << (VARIANCE - 350)) | (1L << (VARIANCE_SAMP - 350)) | (1L << (VAR_POP - 350)))) != 0) || ((((_la - 414)) & ~0x3f) == 0 && ((1L << (_la - 414)) & ((1L << (VAR_SAMP - 414)) | (1L << (VARYING - 414)) | (1L << (WITHOUT - 414)) | (1L << (XML - 414)) | (1L << (XMLAGG - 414)) | (1L << (COLUMNS - 414)) | (1L << (SQLID - 414)) | (1L << (ORDINALITY - 414)) | (1L << (SYSTEM_TIME - 414)) | (1L << (BUSINESS_TIME - 414)) | (1L << (MULTIPLIER - 414)) | (1L << (UNNEST - 414)) | (1L << (CROSS - 414)) | (1L << (CALLER - 414)) | (1L << (CLIENT - 414)) | (1L << (POSITIONING - 414)) | (1L << (SCROLL - 414)) | (1L << (ACTION - 414)) | (1L << (ASSEMBLE - 414)) | (1L << (C_ - 414)) | (1L << (CALLED - 414)) | (1L << (COBOL - 414)) | (1L << (DB2 - 414)) | (1L << (DEFINER - 414)) | (1L << (DISPATCH - 414)) | (1L << (ENVIRONMENT - 414)) | (1L << (FAILURE - 414)) | (1L << (FAILURES - 414)) | (1L << (JAVA - 414)) | (1L << (MAIN - 414)) | (1L << (NAME - 414)) | (1L << (OPTIONS - 414)) | (1L << (PARALLEL - 414)) | (1L << (PLI - 414)) | (1L << (REGISTERS - 414)) | (1L << (RESIDENT - 414)) | (1L << (SECURED - 414)) | (1L << (SPECIAL - 414)) | (1L << (SQL - 414)) | (1L << (STOP - 414)) | (1L << (SUB - 414)) | (1L << (YES - 414)) | (1L << (APPLICATION - 414)) | (1L << (CHANGED - 414)) | (1L << (COMPATIBILITY - 414)) | (1L << (COMPRESS - 414)) | (1L << (COPY - 414)) | (1L << (FREEPAGE - 414)) | (1L << (GBPCACHE - 414)) | (1L << (INCLUDE - 414)) | (1L << (MAXVALUE - 414)) | (1L << (MINVALUE - 414)) | (1L << (PCTFREE - 414)) | (1L << (REGENERATE - 414)) | (1L << (MASK - 414)) | (1L << (ENABLE - 414)) | (1L << (PERMISSION - 414)) | (1L << (ATOMIC - 414)) | (1L << (SQLEXCEPTION - 414)) | (1L << (MERGE - 414)) | (1L << (MATCHED - 414)) | (1L << (SQLSTATE - 414)) | (1L << (MESSAGE_TEXT - 414)) | (1L << (OVERRIDING - 414)))) != 0) || ((((_la - 478)) & ~0x3f) == 0 && ((1L << (_la - 478)) & ((1L << (PORTION - 478)) | (1L << (DB2SQL - 478)) | (1L << (DEBUG - 478)) | (1L << (GENERAL - 478)) | (1L << (MODE_ - 478)) | (1L << (REXX - 478)) | (1L << (CACHE - 478)) | (1L << (CYCLE - 478)) | (1L << (INCREMENT - 478)) | (1L << (RESTART - 478)) | (1L << (DATACLAS - 478)) | (1L << (MGMTCLAS - 478)) | (1L << (REMOVE - 478)) | (1L << (STORCLAS - 478)) | (1L << (ACCESS - 478)) | (1L << (ACTIVATE - 478)) | (1L << (ALWAYS - 478)) | (1L << (APPEND - 478)) | (1L << (ARCHIVE - 478)) | (1L << (BUSINESS - 478)) | (1L << (CASCADE - 478)) | (1L << (CHANGES - 478)) | (1L << (CONTROL - 478)) | (1L << (DEACTIVATE - 478)) | (1L << (DEFERRED - 478)) | (1L << (EACH - 478)) | (1L << (ENFORCED - 478)) | (1L << (EXTRA - 478)) | (1L << (FOREIGN - 478)) | (1L << (HIDDEN_ - 478)) | (1L << (HISTORY - 478)) | (1L << (ID - 478)) | (1L << (IDENTITY - 478)) | (1L << (IMPLICITLY - 478)) | (1L << (INITIALLY - 478)) | (1L << (INLINE - 478)) | (1L << (OPERATION - 478)) | (1L << (ORGANIZE - 478)) | (1L << (OVERLAPS - 478)) | (1L << (PACKAGE_NAME - 478)) | (1L << (PACKAGE_SCHEMA - 478)) | (1L << (PACKAGE_VERSION - 478)) | (1L << (PRIMARY - 478)) | (1L << (RESET - 478)) | (1L << (ROTATE - 478)) | (1L << (START - 478)) | (1L << (SYSIBM - 478)) | (1L << (TRANSACTION - 478)) | (1L << (XMLSCHEMA - 478)) | (1L << (ELEMENT - 478)) | (1L << (URL - 478)) | (1L << (NAMESPACE - 478)) | (1L << (LOCATION - 478)) | (1L << (SYSXSR - 478)) | (1L << (ALGORITHM - 478)) | (1L << (FIXEDLENGTH - 478)) | (1L << (HUFFMAN - 478)) | (1L << (LOB - 478)) | (1L << (LOG - 478)) | (1L << (LOGGED - 478)) | (1L << (MAXPARTITIONS - 478)) | (1L << (MAXROWS - 478)) | (1L << (MEMBER - 478)) | (1L << (MOVE - 478)))) != 0) || ((((_la - 542)) & ~0x3f) == 0 && ((1L << (_la - 542)) & ((1L << (PAGE - 542)) | (1L << (PAGENUM - 542)) | (1L << (PENDING - 542)) | (1L << (RELATIVE - 542)) | (1L << (SEGSIZE - 542)) | (1L << (TRACKMOD - 542)) | (1L << (ADDRESS - 542)) | (1L << (ATTRIBUTES - 542)) | (1L << (AUTHENTICATION - 542)) | (1L << (AUTHID - 542)) | (1L << (CONTEXT - 542)) | (1L << (JOBNAME - 542)) | (1L << (OWNER - 542)) | (1L << (PROFILE - 542)) | (1L << (QUALIFIER - 542)) | (1L << (SERVAUTH - 542)) | (1L << (TRUSTED - 542)) | (1L << (SECTION - 542)) | (1L << (ACTIVE - 542)) | (1L << (VERSION - 542)) | (1L << (ALIAS - 542)) | (1L << (WORK - 542)) | (1L << (WORKFILE - 542)) | (1L << (SYSDEFLT - 542)) | (1L << (NULTERM - 542)) | (1L << (STRUCTURE - 542)) | (1L << (GENERIC - 542)) | (1L << (TEMPORARY - 542)) | (1L << (DEFER - 542)) | (1L << (DEFINE - 542)) | (1L << (EXCLUDE - 542)) | (1L << (GENERATE - 542)) | (1L << (KEYS - 542)) | (1L << (XMLPATTERN - 542)) | (1L << (ABS - 542)) | (1L << (ABSVAL - 542)) | (1L << (ACOS - 542)) | (1L << (ADD_DAYS - 542)) | (1L << (ADD_MONTHS - 542)) | (1L << (ARRAY_DELETE - 542)) | (1L << (ARRAY_FIRST - 542)) | (1L << (ARRAY_LAST - 542)) | (1L << (ARRAY_NEXT - 542)) | (1L << (ARRAY_PRIOR - 542)) | (1L << (ARRAY_TRIM - 542)) | (1L << (ASCII - 542)) | (1L << (ASCII_CHR - 542)) | (1L << (ASCIISTR - 542)) | (1L << (ASCII_STR - 542)) | (1L << (ASIN - 542)) | (1L << (ATAN - 542)) | (1L << (ATAN2 - 542)) | (1L << (ATANH - 542)) | (1L << (BIGINT - 542)) | (1L << (BINARY - 542)) | (1L << (BITAND - 542)) | (1L << (BITANDNOT - 542)) | (1L << (BITNOT - 542)) | (1L << (BITOR - 542)) | (1L << (BITXOR - 542)) | (1L << (BLOB - 542)) | (1L << (BTRIM - 542)) | (1L << (CARDINALITY - 542)) | (1L << (CCSID_ENCODING - 542)))) != 0) || ((((_la - 606)) & ~0x3f) == 0 && ((1L << (_la - 606)) & ((1L << (CEIL - 606)) | (1L << (CEILING - 606)) | (1L << (CHAR9 - 606)) | (1L << (CHARACTER_LENGTH - 606)) | (1L << (CHAR_LENGTH - 606)) | (1L << (CHR - 606)) | (1L << (CLOB - 606)) | (1L << (COALESCE - 606)) | (1L << (COLLATION_KEY - 606)) | (1L << (COMPARE_DECFLOAT - 606)) | (1L << (COS - 606)) | (1L << (COSH - 606)) | (1L << (DATE - 606)) | (1L << (DAYOFMONTH - 606)) | (1L << (DAYOFWEEK - 606)) | (1L << (DAYOFWEEK_ISO - 606)) | (1L << (DAYOFYEAR - 606)) | (1L << (DAYS_BETWEEN - 606)) | (1L << (DBCLOB - 606)) | (1L << (DEC - 606)) | (1L << (DECFLOAT - 606)) | (1L << (DECFLOAT_FORMAT - 606)) | (1L << (DECFLOAT_SORTKEY - 606)) | (1L << (DECIMAL - 606)) | (1L << (DECODE - 606)) | (1L << (DECRYPT_BINARY - 606)) | (1L << (DECRYPT_BIT - 606)) | (1L << (DECRYPT_CHAR - 606)) | (1L << (DECRYPT_DATAKEY_BIGINT - 606)) | (1L << (DECRYPT_DATAKEY_BIT - 606)) | (1L << (DECRYPT_DATAKEY_CLOB - 606)) | (1L << (DECRYPT_DATAKEY_DBCLOB - 606)) | (1L << (DECRYPT_DATAKEY_DECIMAL - 606)) | (1L << (DECRYPT_DATAKEY_INTEGER - 606)) | (1L << (DECRYPT_DATAKEY_VARCHAR - 606)) | (1L << (DECRYPT_DATAKEY_VARGRAPHIC - 606)) | (1L << (DECRYPT_DB - 606)) | (1L << (DEGREES - 606)) | (1L << (DIFFERENCE - 606)) | (1L << (DIGITS - 606)) | (1L << (DOUBLE_PRECISION - 606)) | (1L << (DSN_XMLVALIDATE - 606)) | (1L << (EBCDIC_CHR - 606)) | (1L << (EBCDIC_STR - 606)) | (1L << (ENCRYPT_DATAKEY - 606)) | (1L << (ENCRYPT_TDES - 606)) | (1L << (EXP - 606)) | (1L << (EXTRACT - 606)) | (1L << (FLOAT - 606)) | (1L << (FLOOR - 606)) | (1L << (GENERATE_UNIQUE - 606)) | (1L << (GENERATE_UNIQUE_BINARY - 606)) | (1L << (GETHINT - 606)) | (1L << (GETVARIABLE - 606)) | (1L << (GRAPHIC - 606)) | (1L << (GREATEST - 606)) | (1L << (HASH - 606)) | (1L << (HASH_CRC32 - 606)) | (1L << (HASH_MD5 - 606)) | (1L << (HASH_SHA1 - 606)) | (1L << (HASH_SHA256 - 606)) | (1L << (HEX - 606)) | (1L << (IDENTITY_VAL_LOCAL - 606)) | (1L << (IFNULL - 606)))) != 0) || ((((_la - 670)) & ~0x3f) == 0 && ((1L << (_la - 670)) & ((1L << (INSTR - 670)) | (1L << (INT - 670)) | (1L << (INTEGER - 670)) | (1L << (JULIAN_DAY - 670)) | (1L << (LAST_DAY - 670)) | (1L << (LCASE - 670)) | (1L << (LEAST - 670)) | (1L << (LENGTH - 670)) | (1L << (LN - 670)) | (1L << (LOCATE - 670)) | (1L << (LOCATE_IN_STRING - 670)) | (1L << (LOG10 - 670)) | (1L << (LOWER - 670)) | (1L << (LPAD - 670)) | (1L << (LTRIM - 670)) | (1L << (MAX - 670)) | (1L << (MAX_CARDINALITY - 670)) | (1L << (MIDNIGHT_SECONDS - 670)) | (1L << (MIN - 670)) | (1L << (MINUTE - 670)) | (1L << (MOD - 670)) | (1L << (MONTHS_BETWEEN - 670)) | (1L << (MQREAD - 670)) | (1L << (MQREADCLOB - 670)) | (1L << (MQRECEIVE - 670)) | (1L << (MQRECEIVECLOB - 670)) | (1L << (MQSEND - 670)) | (1L << (MULTIPLY_ALT - 670)) | (1L << (NEXT_DAY - 670)) | (1L << (NEXT_MONTH - 670)) | (1L << (NORMALIZE_DECFLOAT - 670)) | (1L << (NORMALIZE_STRING - 670)) | (1L << (NULLIF - 670)) | (1L << (NVL - 670)) | (1L << (OVERLAY - 670)) | (1L << (PACK - 670)) | (1L << (POSITION - 670)) | (1L << (POSSTR - 670)) | (1L << (POW - 670)) | (1L << (POWER - 670)) | (1L << (QUANTIZE - 670)) | (1L << (QUARTER - 670)) | (1L << (RADIANS - 670)) | (1L << (RAISE_ERROR - 670)) | (1L << (RAND - 670)) | (1L << (RANDOM - 670)) | (1L << (REAL - 670)) | (1L << (REGEXP_COUNT - 670)) | (1L << (REGEXP_INSTR - 670)) | (1L << (REGEXP_LIKE - 670)) | (1L << (REGEXP_REPLACE - 670)) | (1L << (REGEXP_SUBSTR - 670)) | (1L << (REPLACE - 670)) | (1L << (RID - 670)) | (1L << (ROUND - 670)) | (1L << (ROUND_TIMESTAMP - 670)) | (1L << (ROWID - 670)) | (1L << (RPAD - 670)) | (1L << (RTRIM - 670)) | (1L << (SCORE - 670)) | (1L << (SIGN - 670)) | (1L << (SIN - 670)) | (1L << (SINH - 670)) | (1L << (SMALLINT - 670)))) != 0) || ((((_la - 734)) & ~0x3f) == 0 && ((1L << (_la - 734)) & ((1L << (SOAPHTTPC - 734)) | (1L << (SOAPHTTPNC - 734)) | (1L << (SOAPHTTPNV - 734)) | (1L << (SOAPHTTPV - 734)) | (1L << (SOUNDEX - 734)) | (1L << (SPACE - 734)) | (1L << (SQRT - 734)) | (1L << (STRIP - 734)) | (1L << (STRLEFT - 734)) | (1L << (STRPOS - 734)) | (1L << (STRRIGHT - 734)) | (1L << (SUBSTR - 734)) | (1L << (SUBSTRING - 734)) | (1L << (TAN - 734)) | (1L << (TANH - 734)) | (1L << (TIME - 734)) | (1L << (TIMESTAMP - 734)) | (1L << (TIMESTAMPADD - 734)) | (1L << (TIMESTAMPDIFF - 734)) | (1L << (TIMESTAMP_FORMAT - 734)) | (1L << (TIMESTAMP_ISO - 734)) | (1L << (TIMESTAMP_TZ - 734)) | (1L << (TO_CHAR - 734)) | (1L << (TO_CLOB - 734)) | (1L << (TO_DATE - 734)) | (1L << (TO_NUMBER - 734)) | (1L << (TOTALORDER - 734)) | (1L << (TO_TIMESTAMP - 734)) | (1L << (TRANSLATE - 734)) | (1L << (TRIM - 734)) | (1L << (TRIM_ARRAY - 734)) | (1L << (TRUNC - 734)) | (1L << (TRUNC_TIMESTAMP - 734)) | (1L << (UCASE - 734)) | (1L << (UNICODE - 734)) | (1L << (UNICODE_STR - 734)) | (1L << (UNISTR - 734)) | (1L << (UPPER - 734)) | (1L << (VARBINARY - 734)) | (1L << (VARCHAR - 734)) | (1L << (VARCHAR9 - 734)) | (1L << (VARCHAR_BIT_FORMAT - 734)) | (1L << (VARCHAR_FORMAT - 734)) | (1L << (VARGRAPHIC - 734)) | (1L << (VERIFY_GROUP_FOR_USER - 734)) | (1L << (VERIFY_ROLE_FOR_USER - 734)) | (1L << (VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER - 734)) | (1L << (WEEK - 734)) | (1L << (WEEK_ISO - 734)) | (1L << (WRAP - 734)) | (1L << (XMLATTRIBUTES - 734)) | (1L << (XMLCOMMENT - 734)) | (1L << (XMLCONCAT - 734)) | (1L << (XMLDOCUMENT - 734)) | (1L << (XMLELEMENT - 734)) | (1L << (XMLFOREST - 734)) | (1L << (XMLMODIFY - 734)) | (1L << (XMLPARSE - 734)) | (1L << (XMLPI - 734)) | (1L << (XMLQUERY - 734)) | (1L << (XMLSERIALIZE - 734)) | (1L << (XMLTEXT - 734)) | (1L << (XMLXSROBJECTID - 734)) | (1L << (XSLTRANSFORM - 734)))) != 0) || ((((_la - 798)) & ~0x3f) == 0 && ((1L << (_la - 798)) & ((1L << (CURRENT_ACCELERATOR - 798)) | (1L << (CURRENT_APPLICATION_COMPATIBILITY - 798)) | (1L << (CURRENT_APPLICATION_ENCODING_SCHEME - 798)) | (1L << (CURRENT_CLIENT_ACCTNG - 798)) | (1L << (CURRENT_CLIENT_APPLNAME - 798)) | (1L << (CURRENT_CLIENT_CORR_TOKEN - 798)) | (1L << (CURRENT_CLIENT_USERID - 798)) | (1L << (CURRENT_CLIENT_WRKSTNNAME - 798)) | (1L << (CURRENT_DATE - 798)) | (1L << (CURRENT_DEBUG_MODE - 798)) | (1L << (CURRENT_DECFLOAT_ROUNDING_MODE - 798)) | (1L << (CURRENT_DEGREE - 798)) | (1L << (CURRENT_EXPLAIN_MODE - 798)) | (1L << (CURRENT_GET_ACCEL_ARCHIVE - 798)) | (1L << (CURRENT_LOCALE_LC_CTYPE - 798)) | (1L << (CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION - 798)) | (1L << (CURRENT_MEMBER - 798)) | (1L << (CURRENT_OPTIMIZATION_HINT - 798)) | (1L << (CURRENT_PACKAGE_PATH - 798)) | (1L << (CURRENT_PACKAGESET - 798)) | (1L << (CURRENT_PATH - 798)) | (1L << (CURRENT_PRECISION - 798)) | (1L << (CURRENT_QUERY_ACCELERATION - 798)) | (1L << (CURRENT_QUERY_ACCELERATION_WAITFORDATA - 798)) | (1L << (CURRENT_REFRESH_AGE - 798)) | (1L << (CURRENT_ROUTINE_VERSION - 798)) | (1L << (CURRENT_RULES - 798)) | (1L << (CURRENT_SCHEMA - 798)) | (1L << (CURRENT_SERVER - 798)) | (1L << (CURRENT_SQLID - 798)) | (1L << (CURRENT_TEMPORAL_BUSINESS_TIME - 798)) | (1L << (CURRENT_TEMPORAL_SYSTEM_TIME - 798)) | (1L << (CURRENT_TIME - 798)) | (1L << (CURRENT_TIMESTAMP - 798)) | (1L << (CURRENT_TIME_ZONE - 798)) | (1L << (ENCRYPTION_PASSWORD - 798)) | (1L << (SESSION_TIME_ZONE - 798)) | (1L << (SESSION_USER - 798)) | (1L << (USER - 798)) | (1L << (ADMIN_TASK_LIST - 798)) | (1L << (ADMIN_TASK_OUTPUT - 798)) | (1L << (ADMIN_TASK_STATUS - 798)) | (1L << (BLOCKING_THREADS - 798)) | (1L << (MQREADALL - 798)) | (1L << (MQREADALLCLOB - 798)) | (1L << (MQRECEIVEALL - 798)) | (1L << (MQRECEIVEALLCLOB - 798)) | (1L << (XMLTABLE - 798)) | (1L << (SQLIDENTIFIER - 798)))) != 0)) {
					{
					setState(4295);
					constraintName();
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4300);
			match(LPAREN);
			setState(4301);
			columnName();
			setState(4305);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(4302);
				match(PERIOD);
				setState(4303);
				match(BUSINESS);
				setState(4304);
				match(TIME);
				}
			}

			setState(4316);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4307);
				match(COMMA);
				setState(4308);
				columnName();
				setState(4312);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4309);
					match(PERIOD);
					setState(4310);
					match(BUSINESS);
					setState(4311);
					match(TIME);
					}
				}

				}
				}
				setState(4318);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4319);
			match(RPAREN);
			setState(4320);
			referencesClause();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferencesClauseContext extends ParserRuleContext {
		public TerminalNode REFERENCES() { return getToken(DB2zSQLParser.REFERENCES, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode ENFORCED() { return getToken(DB2zSQLParser.ENFORCED, 0); }
		public List<TerminalNode> PERIOD() { return getTokens(DB2zSQLParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(DB2zSQLParser.PERIOD, i);
		}
		public List<TerminalNode> BUSINESS() { return getTokens(DB2zSQLParser.BUSINESS); }
		public TerminalNode BUSINESS(int i) {
			return getToken(DB2zSQLParser.BUSINESS, i);
		}
		public List<TerminalNode> TIME() { return getTokens(DB2zSQLParser.TIME); }
		public TerminalNode TIME(int i) {
			return getToken(DB2zSQLParser.TIME, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public TerminalNode DELETE() { return getToken(DB2zSQLParser.DELETE, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TerminalNode ENABLE() { return getToken(DB2zSQLParser.ENABLE, 0); }
		public TerminalNode QUERY() { return getToken(DB2zSQLParser.QUERY, 0); }
		public TerminalNode OPTIMIZATION() { return getToken(DB2zSQLParser.OPTIMIZATION, 0); }
		public TerminalNode RESTRICT() { return getToken(DB2zSQLParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(DB2zSQLParser.CASCADE, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(DB2zSQLParser.ACTION, 0); }
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public ReferencesClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referencesClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterReferencesClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitReferencesClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitReferencesClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReferencesClauseContext referencesClause() throws RecognitionException {
		ReferencesClauseContext _localctx = new ReferencesClauseContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_referencesClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4322);
			match(REFERENCES);
			setState(4323);
			tableName();
			setState(4324);
			match(LPAREN);
			setState(4325);
			columnName();
			setState(4329);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(4326);
				match(PERIOD);
				setState(4327);
				match(BUSINESS);
				setState(4328);
				match(TIME);
				}
			}

			setState(4340);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4331);
				match(COMMA);
				setState(4332);
				columnName();
				setState(4336);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4333);
					match(PERIOD);
					setState(4334);
					match(BUSINESS);
					setState(4335);
					match(TIME);
					}
				}

				}
				}
				setState(4342);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4343);
			match(RPAREN);
			setState(4354);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(4344);
				match(ON);
				setState(4345);
				match(DELETE);
				setState(4352);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case RESTRICT:
					{
					setState(4346);
					match(RESTRICT);
					}
					break;
				case NO:
					{
					{
					setState(4347);
					match(NO);
					setState(4348);
					match(ACTION);
					}
					}
					break;
				case CASCADE:
					{
					setState(4349);
					match(CASCADE);
					}
					break;
				case SET:
					{
					{
					setState(4350);
					match(SET);
					setState(4351);
					match(NULL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(4357);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(4356);
				match(NOT);
				}
			}

			setState(4359);
			match(ENFORCED);
			setState(4363);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,483,_ctx) ) {
			case 1:
				{
				setState(4360);
				match(ENABLE);
				setState(4361);
				match(QUERY);
				setState(4362);
				match(OPTIMIZATION);
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckConstraintContext extends ParserRuleContext {
		public TerminalNode CHECK() { return getToken(DB2zSQLParser.CHECK, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public CheckConditionContext checkCondition() {
			return getRuleContext(CheckConditionContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode CONSTRAINT() { return getToken(DB2zSQLParser.CONSTRAINT, 0); }
		public ConstraintNameContext constraintName() {
			return getRuleContext(ConstraintNameContext.class,0);
		}
		public CheckConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCheckConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCheckConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCheckConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckConstraintContext checkConstraint() throws RecognitionException {
		CheckConstraintContext _localctx = new CheckConstraintContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_checkConstraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4367);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(4365);
				match(CONSTRAINT);
				setState(4366);
				constraintName();
				}
			}

			setState(4369);
			match(CHECK);
			setState(4370);
			match(LPAREN);
			setState(4371);
			checkCondition();
			setState(4372);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitioningClauseContext extends ParserRuleContext {
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public List<PartitionExpressionContext> partitionExpression() {
			return getRuleContexts(PartitionExpressionContext.class);
		}
		public PartitionExpressionContext partitionExpression(int i) {
			return getRuleContext(PartitionExpressionContext.class,i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public List<PartitioningClauseElementContext> partitioningClauseElement() {
			return getRuleContexts(PartitioningClauseElementContext.class);
		}
		public PartitioningClauseElementContext partitioningClauseElement(int i) {
			return getRuleContext(PartitioningClauseElementContext.class,i);
		}
		public TerminalNode RANGE() { return getToken(DB2zSQLParser.RANGE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public PartitioningClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitioningClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPartitioningClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPartitioningClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPartitioningClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitioningClauseContext partitioningClause() throws RecognitionException {
		PartitioningClauseContext _localctx = new PartitioningClauseContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_partitioningClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4375);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RANGE) {
				{
				setState(4374);
				match(RANGE);
				}
			}

			setState(4377);
			match(LPAREN);
			setState(4378);
			partitionExpression();
			setState(4383);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4379);
				match(COMMA);
				setState(4380);
				partitionExpression();
				}
				}
				setState(4385);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4386);
			match(RPAREN);
			setState(4387);
			match(LPAREN);
			setState(4388);
			partitioningClauseElement();
			setState(4393);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4389);
				match(COMMA);
				setState(4390);
				partitioningClauseElement();
				}
				}
				setState(4395);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4396);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionExpressionContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TerminalNode ASC() { return getToken(DB2zSQLParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(DB2zSQLParser.DESC, 0); }
		public TerminalNode NULLS() { return getToken(DB2zSQLParser.NULLS, 0); }
		public TerminalNode LAST() { return getToken(DB2zSQLParser.LAST, 0); }
		public PartitionExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPartitionExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPartitionExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPartitionExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionExpressionContext partitionExpression() throws RecognitionException {
		PartitionExpressionContext _localctx = new PartitionExpressionContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_partitionExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4398);
			columnName();
			setState(4401);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NULLS) {
				{
				setState(4399);
				match(NULLS);
				setState(4400);
				match(LAST);
				}
			}

			setState(4403);
			_la = _input.LA(1);
			if ( !(_la==ASC || _la==DESC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionLimitKeyContext extends ParserRuleContext {
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode MAXVALUE() { return getToken(DB2zSQLParser.MAXVALUE, 0); }
		public TerminalNode MINVALUE() { return getToken(DB2zSQLParser.MINVALUE, 0); }
		public PartitionLimitKeyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionLimitKey; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPartitionLimitKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPartitionLimitKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPartitionLimitKey(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionLimitKeyContext partitionLimitKey() throws RecognitionException {
		PartitionLimitKeyContext _localctx = new PartitionLimitKeyContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_partitionLimitKey);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4405);
			_la = _input.LA(1);
			if ( !(_la==INTEGERLITERAL || _la==MAXVALUE || _la==MINVALUE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitioningPhraseContext extends ParserRuleContext {
		public TerminalNode ENDING() { return getToken(DB2zSQLParser.ENDING, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<PartitionLimitKeyContext> partitionLimitKey() {
			return getRuleContexts(PartitionLimitKeyContext.class);
		}
		public PartitionLimitKeyContext partitionLimitKey(int i) {
			return getRuleContext(PartitionLimitKeyContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode AT() { return getToken(DB2zSQLParser.AT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public TerminalNode INCLUSIVE() { return getToken(DB2zSQLParser.INCLUSIVE, 0); }
		public PartitioningPhraseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitioningPhrase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPartitioningPhrase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPartitioningPhrase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPartitioningPhrase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitioningPhraseContext partitioningPhrase() throws RecognitionException {
		PartitioningPhraseContext _localctx = new PartitioningPhraseContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_partitioningPhrase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4407);
			match(ENDING);
			setState(4409);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AT) {
				{
				setState(4408);
				match(AT);
				}
			}

			setState(4411);
			match(LPAREN);
			setState(4412);
			partitionLimitKey();
			setState(4417);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4413);
				match(COMMA);
				setState(4414);
				partitionLimitKey();
				}
				}
				setState(4419);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4420);
			match(RPAREN);
			setState(4422);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INCLUSIVE) {
				{
				setState(4421);
				match(INCLUSIVE);
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionHashSpaceContext extends ParserRuleContext {
		public TerminalNode HASH() { return getToken(DB2zSQLParser.HASH, 0); }
		public TerminalNode SPACE() { return getToken(DB2zSQLParser.SPACE, 0); }
		public TerminalNode SQLIDENTIFIER() { return getToken(DB2zSQLParser.SQLIDENTIFIER, 0); }
		public PartitionHashSpaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionHashSpace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPartitionHashSpace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPartitionHashSpace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPartitionHashSpace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionHashSpaceContext partitionHashSpace() throws RecognitionException {
		PartitionHashSpaceContext _localctx = new PartitionHashSpaceContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_partitionHashSpace);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4424);
			match(HASH);
			setState(4425);
			match(SPACE);
			setState(4426);
			match(SQLIDENTIFIER);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterHashOrganizationContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(DB2zSQLParser.ADD, 0); }
		public TerminalNode ORGANIZE() { return getToken(DB2zSQLParser.ORGANIZE, 0); }
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public List<TerminalNode> HASH() { return getTokens(DB2zSQLParser.HASH); }
		public TerminalNode HASH(int i) {
			return getToken(DB2zSQLParser.HASH, i);
		}
		public TerminalNode UNIQUE() { return getToken(DB2zSQLParser.UNIQUE, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode SPACE() { return getToken(DB2zSQLParser.SPACE, 0); }
		public TerminalNode SQLIDENTIFIER() { return getToken(DB2zSQLParser.SQLIDENTIFIER, 0); }
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode ORGANIZATION() { return getToken(DB2zSQLParser.ORGANIZATION, 0); }
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public AlterHashOrganizationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterHashOrganization; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterHashOrganization(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterHashOrganization(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterHashOrganization(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterHashOrganizationContext alterHashOrganization() throws RecognitionException {
		AlterHashOrganizationContext _localctx = new AlterHashOrganizationContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_alterHashOrganization);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4453);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
				{
				{
				setState(4428);
				match(ADD);
				setState(4429);
				match(ORGANIZE);
				setState(4430);
				match(BY);
				setState(4431);
				match(HASH);
				setState(4432);
				match(UNIQUE);
				setState(4433);
				match(LPAREN);
				setState(4434);
				columnName();
				setState(4439);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4435);
					match(COMMA);
					setState(4436);
					columnName();
					}
					}
					setState(4441);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4442);
				match(RPAREN);
				setState(4443);
				match(HASH);
				setState(4444);
				match(SPACE);
				setState(4445);
				match(SQLIDENTIFIER);
				}
				}
				break;
			case ALTER:
				{
				{
				setState(4447);
				match(ALTER);
				setState(4448);
				match(ORGANIZATION);
				setState(4449);
				match(SET);
				setState(4450);
				match(HASH);
				setState(4451);
				match(SPACE);
				setState(4452);
				match(SQLIDENTIFIER);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitioningClauseElementContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(DB2zSQLParser.PARTITION, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public PartitioningPhraseContext partitioningPhrase() {
			return getRuleContext(PartitioningPhraseContext.class,0);
		}
		public PartitionHashSpaceContext partitionHashSpace() {
			return getRuleContext(PartitionHashSpaceContext.class,0);
		}
		public PartitioningClauseElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitioningClauseElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPartitioningClauseElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPartitioningClauseElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPartitioningClauseElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitioningClauseElementContext partitioningClauseElement() throws RecognitionException {
		PartitioningClauseElementContext _localctx = new PartitioningClauseElementContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_partitioningClauseElement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4455);
			match(PARTITION);
			setState(4456);
			match(INTEGERLITERAL);
			setState(4457);
			partitioningPhrase();
			setState(4459);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HASH) {
				{
				setState(4458);
				partitionHashSpace();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionClauseContext extends ParserRuleContext {
		public PartitioningPhraseContext partitioningPhrase() {
			return getRuleContext(PartitioningPhraseContext.class,0);
		}
		public PartitionHashSpaceContext partitionHashSpace() {
			return getRuleContext(PartitionHashSpaceContext.class,0);
		}
		public PartitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPartitionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPartitionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPartitionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionClauseContext partitionClause() throws RecognitionException {
		PartitionClauseContext _localctx = new PartitionClauseContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_partitionClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4463);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENDING:
				{
				setState(4461);
				partitioningPhrase();
				}
				break;
			case HASH:
				{
				setState(4462);
				partitionHashSpace();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RotatePartitionClauseContext extends ParserRuleContext {
		public PartitioningPhraseContext partitioningPhrase() {
			return getRuleContext(PartitioningPhraseContext.class,0);
		}
		public TerminalNode RESET() { return getToken(DB2zSQLParser.RESET, 0); }
		public RotatePartitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rotatePartitionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRotatePartitionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRotatePartitionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRotatePartitionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RotatePartitionClauseContext rotatePartitionClause() throws RecognitionException {
		RotatePartitionClauseContext _localctx = new RotatePartitionClauseContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_rotatePartitionClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4465);
			partitioningPhrase();
			setState(4466);
			match(RESET);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExtraRowOptionContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public TerminalNode DELETE() { return getToken(DB2zSQLParser.DELETE, 0); }
		public TerminalNode ADD() { return getToken(DB2zSQLParser.ADD, 0); }
		public TerminalNode EXTRA() { return getToken(DB2zSQLParser.EXTRA, 0); }
		public TerminalNode ROW() { return getToken(DB2zSQLParser.ROW, 0); }
		public ExtraRowOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extraRowOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterExtraRowOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitExtraRowOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitExtraRowOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExtraRowOptionContext extraRowOption() throws RecognitionException {
		ExtraRowOptionContext _localctx = new ExtraRowOptionContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_extraRowOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4468);
			match(ON);
			setState(4469);
			match(DELETE);
			setState(4470);
			match(ADD);
			setState(4471);
			match(EXTRA);
			setState(4472);
			match(ROW);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MaterializedQueryDefinitionContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public FullSelectContext fullSelect() {
			return getRuleContext(FullSelectContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public RefreshableTableOptionsContext refreshableTableOptions() {
			return getRuleContext(RefreshableTableOptionsContext.class,0);
		}
		public MaterializedQueryDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_materializedQueryDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterMaterializedQueryDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitMaterializedQueryDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitMaterializedQueryDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MaterializedQueryDefinitionContext materializedQueryDefinition() throws RecognitionException {
		MaterializedQueryDefinitionContext _localctx = new MaterializedQueryDefinitionContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_materializedQueryDefinition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4474);
			match(LPAREN);
			setState(4475);
			fullSelect();
			setState(4476);
			match(RPAREN);
			setState(4477);
			refreshableTableOptions();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MaterializedQueryAlterationContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public List<RefreshableTableOptionsListContext> refreshableTableOptionsList() {
			return getRuleContexts(RefreshableTableOptionsListContext.class);
		}
		public RefreshableTableOptionsListContext refreshableTableOptionsList(int i) {
			return getRuleContext(RefreshableTableOptionsListContext.class,i);
		}
		public MaterializedQueryAlterationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_materializedQueryAlteration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterMaterializedQueryAlteration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitMaterializedQueryAlteration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitMaterializedQueryAlteration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MaterializedQueryAlterationContext materializedQueryAlteration() throws RecognitionException {
		MaterializedQueryAlterationContext _localctx = new MaterializedQueryAlterationContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_materializedQueryAlteration);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4479);
			match(SET);
			setState(4481); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4480);
					refreshableTableOptionsList();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4483); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,496,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RefreshableTableOptionsContext extends ParserRuleContext {
		public TerminalNode DATA() { return getToken(DB2zSQLParser.DATA, 0); }
		public TerminalNode INITIALLY() { return getToken(DB2zSQLParser.INITIALLY, 0); }
		public List<TerminalNode> DEFERRED() { return getTokens(DB2zSQLParser.DEFERRED); }
		public TerminalNode DEFERRED(int i) {
			return getToken(DB2zSQLParser.DEFERRED, i);
		}
		public TerminalNode REFRESH() { return getToken(DB2zSQLParser.REFRESH, 0); }
		public List<RefreshableTableOptionsListContext> refreshableTableOptionsList() {
			return getRuleContexts(RefreshableTableOptionsListContext.class);
		}
		public RefreshableTableOptionsListContext refreshableTableOptionsList(int i) {
			return getRuleContext(RefreshableTableOptionsListContext.class,i);
		}
		public RefreshableTableOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_refreshableTableOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRefreshableTableOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRefreshableTableOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRefreshableTableOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RefreshableTableOptionsContext refreshableTableOptions() throws RecognitionException {
		RefreshableTableOptionsContext _localctx = new RefreshableTableOptionsContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_refreshableTableOptions);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4485);
			match(DATA);
			setState(4486);
			match(INITIALLY);
			setState(4487);
			match(DEFERRED);
			setState(4488);
			match(REFRESH);
			setState(4489);
			match(DEFERRED);
			setState(4493);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,497,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4490);
					refreshableTableOptionsList();
					}
					} 
				}
				setState(4495);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,497,_ctx);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RefreshableTableOptionsListContext extends ParserRuleContext {
		public TerminalNode MAINTAINED() { return getToken(DB2zSQLParser.MAINTAINED, 0); }
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public EnableDisableOptionContext enableDisableOption() {
			return getRuleContext(EnableDisableOptionContext.class,0);
		}
		public TerminalNode QUERY() { return getToken(DB2zSQLParser.QUERY, 0); }
		public TerminalNode OPTIMIZATION() { return getToken(DB2zSQLParser.OPTIMIZATION, 0); }
		public TerminalNode SYSTEM() { return getToken(DB2zSQLParser.SYSTEM, 0); }
		public TerminalNode USER() { return getToken(DB2zSQLParser.USER, 0); }
		public RefreshableTableOptionsListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_refreshableTableOptionsList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRefreshableTableOptionsList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRefreshableTableOptionsList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRefreshableTableOptionsList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RefreshableTableOptionsListContext refreshableTableOptionsList() throws RecognitionException {
		RefreshableTableOptionsListContext _localctx = new RefreshableTableOptionsListContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_refreshableTableOptionsList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4503);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAINTAINED:
				{
				{
				setState(4496);
				match(MAINTAINED);
				setState(4497);
				match(BY);
				setState(4498);
				_la = _input.LA(1);
				if ( !(_la==SYSTEM || _la==USER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case DISABLE:
			case ENABLE:
				{
				{
				setState(4499);
				enableDisableOption();
				setState(4500);
				match(QUERY);
				setState(4501);
				match(OPTIMIZATION);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MaterializedQueryTableAlterationContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public List<RefreshableTableOptionsListContext> refreshableTableOptionsList() {
			return getRuleContexts(RefreshableTableOptionsListContext.class);
		}
		public RefreshableTableOptionsListContext refreshableTableOptionsList(int i) {
			return getRuleContext(RefreshableTableOptionsListContext.class,i);
		}
		public MaterializedQueryTableAlterationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_materializedQueryTableAlteration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterMaterializedQueryTableAlteration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitMaterializedQueryTableAlteration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitMaterializedQueryTableAlteration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MaterializedQueryTableAlterationContext materializedQueryTableAlteration() throws RecognitionException {
		MaterializedQueryTableAlterationContext _localctx = new MaterializedQueryTableAlterationContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_materializedQueryTableAlteration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4505);
			match(SET);
			setState(4507); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4506);
				refreshableTableOptionsList();
				}
				}
				setState(4509); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==DISABLE || _la==MAINTAINED || _la==ENABLE );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PeriodDefinitionContext extends ParserRuleContext {
		public TerminalNode SYSTEM_TIME() { return getToken(DB2zSQLParser.SYSTEM_TIME, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public BeginColumnNameContext beginColumnName() {
			return getRuleContext(BeginColumnNameContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(DB2zSQLParser.COMMA, 0); }
		public EndColumnNameContext endColumnName() {
			return getRuleContext(EndColumnNameContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode BUSINESS_TIME() { return getToken(DB2zSQLParser.BUSINESS_TIME, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(DB2zSQLParser.EXCLUSIVE, 0); }
		public TerminalNode INCLUSIVE() { return getToken(DB2zSQLParser.INCLUSIVE, 0); }
		public PeriodDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_periodDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPeriodDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPeriodDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPeriodDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PeriodDefinitionContext periodDefinition() throws RecognitionException {
		PeriodDefinitionContext _localctx = new PeriodDefinitionContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_periodDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4526);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SYSTEM_TIME:
				{
				{
				setState(4511);
				match(SYSTEM_TIME);
				setState(4512);
				match(LPAREN);
				setState(4513);
				beginColumnName();
				setState(4514);
				match(COMMA);
				setState(4515);
				endColumnName();
				setState(4516);
				match(RPAREN);
				}
				}
				break;
			case BUSINESS_TIME:
				{
				{
				setState(4518);
				match(BUSINESS_TIME);
				setState(4519);
				match(LPAREN);
				setState(4520);
				beginColumnName();
				setState(4521);
				match(COMMA);
				setState(4522);
				endColumnName();
				setState(4523);
				_la = _input.LA(1);
				if ( !(_la==INCLUSIVE || _la==EXCLUSIVE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4524);
				match(RPAREN);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnDefinitionContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public BuiltInTypeContext builtInType() {
			return getRuleContext(BuiltInTypeContext.class,0);
		}
		public DistinctTypeNameContext distinctTypeName() {
			return getRuleContext(DistinctTypeNameContext.class,0);
		}
		public List<ColumnDefinitionOptionList1Context> columnDefinitionOptionList1() {
			return getRuleContexts(ColumnDefinitionOptionList1Context.class);
		}
		public ColumnDefinitionOptionList1Context columnDefinitionOptionList1(int i) {
			return getRuleContext(ColumnDefinitionOptionList1Context.class,i);
		}
		public List<ColumnDefinitionOptionList2Context> columnDefinitionOptionList2() {
			return getRuleContexts(ColumnDefinitionOptionList2Context.class);
		}
		public ColumnDefinitionOptionList2Context columnDefinitionOptionList2(int i) {
			return getRuleContext(ColumnDefinitionOptionList2Context.class,i);
		}
		public ColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterColumnDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitColumnDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitColumnDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnDefinitionContext columnDefinition() throws RecognitionException {
		ColumnDefinitionContext _localctx = new ColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_columnDefinition);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4544);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,503,_ctx) ) {
			case 1:
				{
				{
				setState(4528);
				columnName();
				setState(4529);
				builtInType();
				setState(4533);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,501,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4530);
						columnDefinitionOptionList1();
						}
						} 
					}
					setState(4535);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,501,_ctx);
				}
				}
				}
				break;
			case 2:
				{
				{
				setState(4536);
				columnName();
				setState(4537);
				distinctTypeName();
				setState(4541);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,502,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4538);
						columnDefinitionOptionList2();
						}
						} 
					}
					setState(4543);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,502,_ctx);
				}
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExternalProgramNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public ExternalProgramNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_externalProgramName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterExternalProgramName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitExternalProgramName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitExternalProgramName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExternalProgramNameContext externalProgramName() throws RecognitionException {
		ExternalProgramNameContext _localctx = new ExternalProgramNameContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_externalProgramName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4548);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case ALL:
			case ALLOCATE:
			case ALLOW:
			case ALTER:
			case ALTERAND:
			case ANY:
			case ARRAY:
			case ARRAY_EXISTS:
			case AS:
			case ASENSITIVE:
			case ASSOCIATE:
			case ASUTIME:
			case AT:
			case AUDIT:
			case AUX:
			case AUXILIARY:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BUFFERPOOL:
			case BY:
			case CALL:
			case CAPTURE:
			case CASCADED:
			case CASE:
			case CAST:
			case CCSID:
			case CHAR:
			case CHARACTER:
			case CHECK:
			case CLONE:
			case CLOSE:
			case CLUSTER:
			case COLLECTION:
			case COLLID:
			case COLUMN:
			case COMMENT:
			case COMMIT:
			case CONCAT:
			case CONDITION:
			case CONNECT:
			case CONNECTION:
			case CONSTRAINT:
			case CONTAINS:
			case CONTENT:
			case CONTINUE:
			case CREATE:
			case CUBE:
			case CURRENT:
			case CURRENT_LC_CTYPE:
			case CURRVAL:
			case CURSOR:
			case DATA:
			case DATABASE:
			case DAY:
			case DAYS:
			case DBINFO:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DISABLE:
			case DISALLOW:
			case DISTINCT:
			case DO:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSSIZE:
			case DYNAMIC:
			case EDITPROC:
			case ELSE:
			case ELSEIF:
			case ENCODING:
			case ENCRYPTION:
			case END:
			case END_EXEC:
			case ENDING:
			case ERASE:
			case ESCAPE:
			case EXCEPT:
			case EXCEPTION:
			case EXEC_SQL:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case FENCED:
			case FETCH:
			case FIELDPROC:
			case FINAL:
			case FIRST:
			case FOR:
			case FREE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANT:
			case GROUP:
			case HANDLER:
			case HAVING:
			case HOLD:
			case HOUR:
			case HOURS:
			case IF:
			case IMMEDIATE:
			case IN:
			case INCLUSIVE:
			case INDEX:
			case INDEXBP:
			case INHERIT:
			case INNER:
			case INOUT:
			case INSENSITIVE:
			case INSERT:
			case INTERSECT:
			case INTO:
			case IS:
			case ISOBID:
			case ITERATE:
			case JAR:
			case JOIN:
			case KEEP:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LAST:
			case LC_CTYPE:
			case LEAVE:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOCALE:
			case LOCATOR:
			case LOCATORS:
			case LOCK:
			case LOCKMAX:
			case LOCKSIZE:
			case LONG:
			case LOOP:
			case MAINTAINED:
			case MATERIALIZED:
			case MICROSECOND:
			case MICROSECONDS:
			case MODIFIES:
			case MONTH:
			case MONTHS:
			case NEXT:
			case NEXTVAL:
			case NO:
			case NONE:
			case NOT:
			case NULL:
			case NULLS:
			case NUMPARTS:
			case OBID:
			case OF:
			case OFFSET:
			case OLD:
			case ON:
			case OPEN:
			case OPTIMIZATION:
			case OPTIMIZE:
			case OR:
			case ORDER:
			case ORGANIZATION:
			case OUT:
			case OUTER:
			case PACKAGE:
			case PADDED:
			case PARAMETER:
			case PART:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONING:
			case PATH:
			case PERIOD:
			case PIECESIZE:
			case PLAN:
			case PRECISION:
			case PREPARE:
			case PREVVAL:
			case PRIOR:
			case PRIQTY:
			case PRIVILEGES:
			case PROCEDURE:
			case PROGRAM:
			case PSID:
			case PUBLIC:
			case QUERY:
			case QUERYNO:
			case READS:
			case REFERENCES:
			case REFRESH:
			case RELEASE:
			case RENAME:
			case REPEAT:
			case RESIGNAL:
			case RESTRICT:
			case RESULT:
			case RESULT_SET_LOCATOR:
			case RETURN:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUND_CEILING:
			case ROUND_DOWN:
			case ROUND_FLOOR:
			case ROUND_HALF_DOWN:
			case ROUND_HALF_EVEN:
			case ROUND_HALF_UP:
			case ROUND_UP:
			case ROW:
			case ROWSET:
			case RUN:
			case SAVEPOINT:
			case SCHEMA:
			case SCRATCHPAD:
			case SECOND:
			case SECONDS:
			case SECQTY:
			case SECURITY:
			case SELECT:
			case SENSITIVE:
			case SEQUENCE:
			case SET:
			case SIGNAL:
			case SIMPLE:
			case SOME:
			case SOURCE:
			case SPECIFIC:
			case STANDARD:
			case STATEMENT:
			case STATIC:
			case STAY:
			case STOGROUP:
			case STORES:
			case STYLE:
			case SUMMARY:
			case SYNONYM:
			case SYSDATE:
			case SYSTEM:
			case SYSTIMESTAMP:
			case TABLE:
			case TABLESPACE:
			case THEN:
			case TO:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNDO:
			case UNION:
			case UNIQUE:
			case UNTIL:
			case UPDATE:
			case USING:
			case VALIDPROC:
			case VALUE:
			case VALUES:
			case VARIABLE:
			case VARIANT:
			case VCAT:
			case VERSIONING:
			case VIEW:
			case VOLATILE:
			case VOLUMES:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WLM:
			case XMLCAST:
			case XMLEXISTS:
			case XMLNAMESPACES:
			case YEAR:
			case YEARS:
			case ZONE:
			case AND:
			case ARRAY_AGG:
			case ASC:
			case AVG:
			case BIT:
			case CHANGE:
			case CODEUNITS16:
			case CODEUNITS32:
			case CORR:
			case CORRELATION:
			case COUNT:
			case COUNT_BIG:
			case COVAR:
			case COVARIANCE:
			case COVARIANCE_SAMP:
			case COVAR_POP:
			case COVAR_SAMP:
			case CS:
			case CUME_DIST:
			case DENSE_RANK:
			case DESC:
			case EBCDIC:
			case EXCLUSIVE:
			case FIRST_VALUE:
			case FOLLOWING:
			case GROUPING:
			case IGNORE:
			case INDICATOR:
			case INPUT:
			case ISNULL:
			case LAG:
			case LARGE:
			case LAST_VALUE:
			case LEAD:
			case LISTAGG:
			case LOCKED:
			case LOCKS:
			case MEDIAN:
			case MINUTES:
			case MIXED:
			case NOTNULL:
			case NTH_VALUE:
			case NTILE:
			case NUMERIC:
			case OBJECT:
			case OCTETS:
			case ONLY:
			case OVER:
			case PASSING:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PERCENT_RANK:
			case PRECEDING:
			case PREVIOUS:
			case RANGE:
			case RANK:
			case RATIO_TO_REPORT:
			case READ:
			case REF:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_ICPT:
			case REGR_INTERCEPT:
			case REGR_R2:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case RESPECT:
			case ROW_NUMBER:
			case ROWS:
			case RR:
			case RS:
			case SBCS:
			case SELECTIVITY:
			case SETS:
			case SHARE:
			case SKIP_:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case TOKEN:
			case UNBOUNDED:
			case UNPACK:
			case UR:
			case USE:
			case VAR:
			case VARIANCE:
			case VARIANCE_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARYING:
			case WITHOUT:
			case XML:
			case XMLAGG:
			case COLUMNS:
			case SQLID:
			case ORDINALITY:
			case SYSTEM_TIME:
			case BUSINESS_TIME:
			case MULTIPLIER:
			case UNNEST:
			case CROSS:
			case CALLER:
			case CLIENT:
			case POSITIONING:
			case SCROLL:
			case ACTION:
			case ASSEMBLE:
			case C_:
			case CALLED:
			case COBOL:
			case DB2:
			case DEFINER:
			case DISPATCH:
			case ENVIRONMENT:
			case FAILURE:
			case FAILURES:
			case JAVA:
			case MAIN:
			case NAME:
			case OPTIONS:
			case PARALLEL:
			case PLI:
			case REGISTERS:
			case RESIDENT:
			case SECURED:
			case SPECIAL:
			case SQL:
			case STOP:
			case SUB:
			case YES:
			case APPLICATION:
			case CHANGED:
			case COMPATIBILITY:
			case COMPRESS:
			case COPY:
			case FREEPAGE:
			case GBPCACHE:
			case INCLUDE:
			case MAXVALUE:
			case MINVALUE:
			case PCTFREE:
			case REGENERATE:
			case MASK:
			case ENABLE:
			case PERMISSION:
			case ATOMIC:
			case SQLEXCEPTION:
			case MERGE:
			case MATCHED:
			case SQLSTATE:
			case MESSAGE_TEXT:
			case OVERRIDING:
			case PORTION:
			case DB2SQL:
			case DEBUG:
			case GENERAL:
			case MODE_:
			case REXX:
			case CACHE:
			case CYCLE:
			case INCREMENT:
			case RESTART:
			case DATACLAS:
			case MGMTCLAS:
			case REMOVE:
			case STORCLAS:
			case ACCESS:
			case ACTIVATE:
			case ALWAYS:
			case APPEND:
			case ARCHIVE:
			case BUSINESS:
			case CASCADE:
			case CHANGES:
			case CONTROL:
			case DEACTIVATE:
			case DEFERRED:
			case EACH:
			case ENFORCED:
			case EXTRA:
			case FOREIGN:
			case HIDDEN_:
			case HISTORY:
			case ID:
			case IDENTITY:
			case IMPLICITLY:
			case INITIALLY:
			case INLINE:
			case OPERATION:
			case ORGANIZE:
			case OVERLAPS:
			case PACKAGE_NAME:
			case PACKAGE_SCHEMA:
			case PACKAGE_VERSION:
			case PRIMARY:
			case RESET:
			case ROTATE:
			case START:
			case SYSIBM:
			case TRANSACTION:
			case XMLSCHEMA:
			case ELEMENT:
			case URL:
			case NAMESPACE:
			case LOCATION:
			case SYSXSR:
			case ALGORITHM:
			case FIXEDLENGTH:
			case HUFFMAN:
			case LOB:
			case LOG:
			case LOGGED:
			case MAXPARTITIONS:
			case MAXROWS:
			case MEMBER:
			case MOVE:
			case PAGE:
			case PAGENUM:
			case PENDING:
			case RELATIVE:
			case SEGSIZE:
			case TRACKMOD:
			case ADDRESS:
			case ATTRIBUTES:
			case AUTHENTICATION:
			case AUTHID:
			case CONTEXT:
			case JOBNAME:
			case OWNER:
			case PROFILE:
			case QUALIFIER:
			case SERVAUTH:
			case TRUSTED:
			case SECTION:
			case ACTIVE:
			case VERSION:
			case ALIAS:
			case WORK:
			case WORKFILE:
			case SYSDEFLT:
			case NULTERM:
			case STRUCTURE:
			case GENERIC:
			case TEMPORARY:
			case DEFER:
			case DEFINE:
			case EXCLUDE:
			case GENERATE:
			case KEYS:
			case XMLPATTERN:
			case ABS:
			case ABSVAL:
			case ACOS:
			case ADD_DAYS:
			case ADD_MONTHS:
			case ARRAY_DELETE:
			case ARRAY_FIRST:
			case ARRAY_LAST:
			case ARRAY_NEXT:
			case ARRAY_PRIOR:
			case ARRAY_TRIM:
			case ASCII:
			case ASCII_CHR:
			case ASCIISTR:
			case ASCII_STR:
			case ASIN:
			case ATAN:
			case ATAN2:
			case ATANH:
			case BIGINT:
			case BINARY:
			case BITAND:
			case BITANDNOT:
			case BITNOT:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BTRIM:
			case CARDINALITY:
			case CCSID_ENCODING:
			case CEIL:
			case CEILING:
			case CHAR9:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case CHR:
			case CLOB:
			case COALESCE:
			case COLLATION_KEY:
			case COMPARE_DECFLOAT:
			case COS:
			case COSH:
			case DATE:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFWEEK_ISO:
			case DAYOFYEAR:
			case DAYS_BETWEEN:
			case DBCLOB:
			case DEC:
			case DECFLOAT:
			case DECFLOAT_FORMAT:
			case DECFLOAT_SORTKEY:
			case DECIMAL:
			case DECODE:
			case DECRYPT_BINARY:
			case DECRYPT_BIT:
			case DECRYPT_CHAR:
			case DECRYPT_DATAKEY_BIGINT:
			case DECRYPT_DATAKEY_BIT:
			case DECRYPT_DATAKEY_CLOB:
			case DECRYPT_DATAKEY_DBCLOB:
			case DECRYPT_DATAKEY_DECIMAL:
			case DECRYPT_DATAKEY_INTEGER:
			case DECRYPT_DATAKEY_VARCHAR:
			case DECRYPT_DATAKEY_VARGRAPHIC:
			case DECRYPT_DB:
			case DEGREES:
			case DIFFERENCE:
			case DIGITS:
			case DOUBLE_PRECISION:
			case DSN_XMLVALIDATE:
			case EBCDIC_CHR:
			case EBCDIC_STR:
			case ENCRYPT_DATAKEY:
			case ENCRYPT_TDES:
			case EXP:
			case EXTRACT:
			case FLOAT:
			case FLOOR:
			case GENERATE_UNIQUE:
			case GENERATE_UNIQUE_BINARY:
			case GETHINT:
			case GETVARIABLE:
			case GRAPHIC:
			case GREATEST:
			case HASH:
			case HASH_CRC32:
			case HASH_MD5:
			case HASH_SHA1:
			case HASH_SHA256:
			case HEX:
			case IDENTITY_VAL_LOCAL:
			case IFNULL:
			case INSTR:
			case INT:
			case INTEGER:
			case JULIAN_DAY:
			case LAST_DAY:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LN:
			case LOCATE:
			case LOCATE_IN_STRING:
			case LOG10:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAX:
			case MAX_CARDINALITY:
			case MIDNIGHT_SECONDS:
			case MIN:
			case MINUTE:
			case MOD:
			case MONTHS_BETWEEN:
			case MQREAD:
			case MQREADCLOB:
			case MQRECEIVE:
			case MQRECEIVECLOB:
			case MQSEND:
			case MULTIPLY_ALT:
			case NEXT_DAY:
			case NEXT_MONTH:
			case NORMALIZE_DECFLOAT:
			case NORMALIZE_STRING:
			case NULLIF:
			case NVL:
			case OVERLAY:
			case PACK:
			case POSITION:
			case POSSTR:
			case POW:
			case POWER:
			case QUANTIZE:
			case QUARTER:
			case RADIANS:
			case RAISE_ERROR:
			case RAND:
			case RANDOM:
			case REAL:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REPLACE:
			case RID:
			case ROUND:
			case ROUND_TIMESTAMP:
			case ROWID:
			case RPAD:
			case RTRIM:
			case SCORE:
			case SIGN:
			case SIN:
			case SINH:
			case SMALLINT:
			case SOAPHTTPC:
			case SOAPHTTPNC:
			case SOAPHTTPNV:
			case SOAPHTTPV:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STRIP:
			case STRLEFT:
			case STRPOS:
			case STRRIGHT:
			case SUBSTR:
			case SUBSTRING:
			case TAN:
			case TANH:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIMESTAMP_FORMAT:
			case TIMESTAMP_ISO:
			case TIMESTAMP_TZ:
			case TO_CHAR:
			case TO_CLOB:
			case TO_DATE:
			case TO_NUMBER:
			case TOTALORDER:
			case TO_TIMESTAMP:
			case TRANSLATE:
			case TRIM:
			case TRIM_ARRAY:
			case TRUNC:
			case TRUNC_TIMESTAMP:
			case UCASE:
			case UNICODE:
			case UNICODE_STR:
			case UNISTR:
			case UPPER:
			case VARBINARY:
			case VARCHAR:
			case VARCHAR9:
			case VARCHAR_BIT_FORMAT:
			case VARCHAR_FORMAT:
			case VARGRAPHIC:
			case VERIFY_GROUP_FOR_USER:
			case VERIFY_ROLE_FOR_USER:
			case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
			case WEEK:
			case WEEK_ISO:
			case WRAP:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLCONCAT:
			case XMLDOCUMENT:
			case XMLELEMENT:
			case XMLFOREST:
			case XMLMODIFY:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLSERIALIZE:
			case XMLTEXT:
			case XMLXSROBJECTID:
			case XSLTRANSFORM:
			case CURRENT_ACCELERATOR:
			case CURRENT_APPLICATION_COMPATIBILITY:
			case CURRENT_APPLICATION_ENCODING_SCHEME:
			case CURRENT_CLIENT_ACCTNG:
			case CURRENT_CLIENT_APPLNAME:
			case CURRENT_CLIENT_CORR_TOKEN:
			case CURRENT_CLIENT_USERID:
			case CURRENT_CLIENT_WRKSTNNAME:
			case CURRENT_DATE:
			case CURRENT_DEBUG_MODE:
			case CURRENT_DECFLOAT_ROUNDING_MODE:
			case CURRENT_DEGREE:
			case CURRENT_EXPLAIN_MODE:
			case CURRENT_GET_ACCEL_ARCHIVE:
			case CURRENT_LOCALE_LC_CTYPE:
			case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
			case CURRENT_MEMBER:
			case CURRENT_OPTIMIZATION_HINT:
			case CURRENT_PACKAGE_PATH:
			case CURRENT_PACKAGESET:
			case CURRENT_PATH:
			case CURRENT_PRECISION:
			case CURRENT_QUERY_ACCELERATION:
			case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
			case CURRENT_REFRESH_AGE:
			case CURRENT_ROUTINE_VERSION:
			case CURRENT_RULES:
			case CURRENT_SCHEMA:
			case CURRENT_SERVER:
			case CURRENT_SQLID:
			case CURRENT_TEMPORAL_BUSINESS_TIME:
			case CURRENT_TEMPORAL_SYSTEM_TIME:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_TIME_ZONE:
			case ENCRYPTION_PASSWORD:
			case SESSION_TIME_ZONE:
			case SESSION_USER:
			case USER:
			case ADMIN_TASK_LIST:
			case ADMIN_TASK_OUTPUT:
			case ADMIN_TASK_STATUS:
			case BLOCKING_THREADS:
			case MQREADALL:
			case MQREADALLCLOB:
			case MQRECEIVEALL:
			case MQRECEIVEALLCLOB:
			case XMLTABLE:
			case SQLIDENTIFIER:
				{
				setState(4546);
				identifier();
				}
				break;
			case NONNUMERICLITERAL:
				{
				setState(4547);
				match(NONNUMERICLITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PackagePathContext extends ParserRuleContext {
		public CollectionIDContext collectionID() {
			return getRuleContext(CollectionIDContext.class,0);
		}
		public TerminalNode SESSION_USER() { return getToken(DB2zSQLParser.SESSION_USER, 0); }
		public TerminalNode USER() { return getToken(DB2zSQLParser.USER, 0); }
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public TerminalNode CURRENT() { return getToken(DB2zSQLParser.CURRENT, 0); }
		public TerminalNode PACKAGE() { return getToken(DB2zSQLParser.PACKAGE, 0); }
		public TerminalNode PATH() { return getToken(DB2zSQLParser.PATH, 0); }
		public PackagePathContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_packagePath; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPackagePath(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPackagePath(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPackagePath(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PackagePathContext packagePath() throws RecognitionException {
		PackagePathContext _localctx = new PackagePathContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_packagePath);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4560);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,505,_ctx) ) {
			case 1:
				{
				setState(4550);
				collectionID();
				}
				break;
			case 2:
				{
				setState(4551);
				match(SESSION_USER);
				}
				break;
			case 3:
				{
				setState(4552);
				match(USER);
				}
				break;
			case 4:
				{
				{
				setState(4553);
				match(CURRENT);
				setState(4554);
				match(PACKAGE);
				setState(4555);
				match(PATH);
				}
				}
				break;
			case 5:
				{
				{
				setState(4556);
				match(CURRENT);
				setState(4557);
				match(PATH);
				}
				}
				break;
			case 6:
				{
				setState(4558);
				hostVariable();
				}
				break;
			case 7:
				{
				setState(4559);
				match(NONNUMERICLITERAL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollectionIDContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public CollectionIDContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collectionID; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCollectionID(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCollectionID(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCollectionID(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollectionIDContext collectionID() throws RecognitionException {
		CollectionIDContext _localctx = new CollectionIDContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_collectionID);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4562);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RunTimeOptionsContext extends ParserRuleContext {
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public RunTimeOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_runTimeOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRunTimeOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRunTimeOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRunTimeOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RunTimeOptionsContext runTimeOptions() throws RecognitionException {
		RunTimeOptionsContext _localctx = new RunTimeOptionsContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_runTimeOptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4564);
			match(NONNUMERICLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ComparisonOperatorContext extends ParserRuleContext {
		public TerminalNode EQ() { return getToken(DB2zSQLParser.EQ, 0); }
		public TerminalNode GT() { return getToken(DB2zSQLParser.GT, 0); }
		public TerminalNode LT() { return getToken(DB2zSQLParser.LT, 0); }
		public TerminalNode GE() { return getToken(DB2zSQLParser.GE, 0); }
		public TerminalNode LE() { return getToken(DB2zSQLParser.LE, 0); }
		public TerminalNode NE() { return getToken(DB2zSQLParser.NE, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparisonOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterComparisonOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitComparisonOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitComparisonOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ComparisonOperatorContext comparisonOperator() throws RecognitionException {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_comparisonOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4566);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQ) | (1L << GT) | (1L << LT) | (1L << GE) | (1L << LE) | (1L << NE))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OperatorContext extends ParserRuleContext {
		public TerminalNode SPLAT() { return getToken(DB2zSQLParser.SPLAT, 0); }
		public TerminalNode PLUS() { return getToken(DB2zSQLParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(DB2zSQLParser.MINUS, 0); }
		public TerminalNode SLASH() { return getToken(DB2zSQLParser.SLASH, 0); }
		public TerminalNode CONCAT() { return getToken(DB2zSQLParser.CONCAT, 0); }
		public TerminalNode CONCATOP() { return getToken(DB2zSQLParser.CONCATOP, 0); }
		public OperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OperatorContext operator() throws RecognitionException {
		OperatorContext _localctx = new OperatorContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_operator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4568);
			_la = _input.LA(1);
			if ( !(((((_la - 12)) & ~0x3f) == 0 && ((1L << (_la - 12)) & ((1L << (PLUS - 12)) | (1L << (MINUS - 12)) | (1L << (SPLAT - 12)) | (1L << (SLASH - 12)) | (1L << (CONCATOP - 12)) | (1L << (CONCAT - 12)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionContext extends ParserRuleContext {
		public FunctionInvocationContext functionInvocation() {
			return getRuleContext(FunctionInvocationContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public SpecialRegisterContext specialRegister() {
			return getRuleContext(SpecialRegisterContext.class,0);
		}
		public ScalarFullSelectContext scalarFullSelect() {
			return getRuleContext(ScalarFullSelectContext.class,0);
		}
		public TimeZoneSpecificExpressionContext timeZoneSpecificExpression() {
			return getRuleContext(TimeZoneSpecificExpressionContext.class,0);
		}
		public LabeledDurationContext labeledDuration() {
			return getRuleContext(LabeledDurationContext.class,0);
		}
		public CaseExpressionContext caseExpression() {
			return getRuleContext(CaseExpressionContext.class,0);
		}
		public CastSpecificationContext castSpecification() {
			return getRuleContext(CastSpecificationContext.class,0);
		}
		public XmlCastSpecificationContext xmlCastSpecification() {
			return getRuleContext(XmlCastSpecificationContext.class,0);
		}
		public ArrayElementSpecificationContext arrayElementSpecification() {
			return getRuleContext(ArrayElementSpecificationContext.class,0);
		}
		public ArrayConstructorContext arrayConstructor() {
			return getRuleContext(ArrayConstructorContext.class,0);
		}
		public OlapSpecificationContext olapSpecification() {
			return getRuleContext(OlapSpecificationContext.class,0);
		}
		public RowChangeExpressionContext rowChangeExpression() {
			return getRuleContext(RowChangeExpressionContext.class,0);
		}
		public SequenceReferenceContext sequenceReference() {
			return getRuleContext(SequenceReferenceContext.class,0);
		}
		public List<OperatorContext> operator() {
			return getRuleContexts(OperatorContext.class);
		}
		public OperatorContext operator(int i) {
			return getRuleContext(OperatorContext.class,i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		ExpressionContext _localctx = new ExpressionContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_expression);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4620);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,508,_ctx) ) {
			case 1:
				{
				setState(4570);
				functionInvocation();
				}
				break;
			case 2:
				{
				setState(4571);
				match(LPAREN);
				setState(4572);
				expression();
				setState(4573);
				match(RPAREN);
				}
				break;
			case 3:
				{
				setState(4575);
				literal();
				}
				break;
			case 4:
				{
				setState(4576);
				columnName();
				}
				break;
			case 5:
				{
				setState(4577);
				hostVariable();
				}
				break;
			case 6:
				{
				setState(4578);
				specialRegister();
				}
				break;
			case 7:
				{
				setState(4579);
				scalarFullSelect();
				}
				break;
			case 8:
				{
				setState(4580);
				timeZoneSpecificExpression();
				}
				break;
			case 9:
				{
				setState(4581);
				labeledDuration();
				}
				break;
			case 10:
				{
				setState(4582);
				caseExpression();
				}
				break;
			case 11:
				{
				setState(4583);
				castSpecification();
				}
				break;
			case 12:
				{
				setState(4584);
				xmlCastSpecification();
				}
				break;
			case 13:
				{
				setState(4585);
				arrayElementSpecification();
				}
				break;
			case 14:
				{
				setState(4586);
				arrayConstructor();
				}
				break;
			case 15:
				{
				setState(4587);
				olapSpecification();
				}
				break;
			case 16:
				{
				setState(4588);
				rowChangeExpression();
				}
				break;
			case 17:
				{
				setState(4589);
				sequenceReference();
				}
				break;
			case 18:
				{
				{
				setState(4610);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,506,_ctx) ) {
				case 1:
					{
					setState(4590);
					functionInvocation();
					}
					break;
				case 2:
					{
					setState(4591);
					match(LPAREN);
					setState(4592);
					expression();
					setState(4593);
					match(RPAREN);
					}
					break;
				case 3:
					{
					setState(4595);
					literal();
					}
					break;
				case 4:
					{
					setState(4596);
					columnName();
					}
					break;
				case 5:
					{
					setState(4597);
					hostVariable();
					}
					break;
				case 6:
					{
					setState(4598);
					specialRegister();
					}
					break;
				case 7:
					{
					setState(4599);
					scalarFullSelect();
					}
					break;
				case 8:
					{
					setState(4600);
					timeZoneSpecificExpression();
					}
					break;
				case 9:
					{
					setState(4601);
					labeledDuration();
					}
					break;
				case 10:
					{
					setState(4602);
					caseExpression();
					}
					break;
				case 11:
					{
					setState(4603);
					castSpecification();
					}
					break;
				case 12:
					{
					setState(4604);
					xmlCastSpecification();
					}
					break;
				case 13:
					{
					setState(4605);
					arrayElementSpecification();
					}
					break;
				case 14:
					{
					setState(4606);
					arrayConstructor();
					}
					break;
				case 15:
					{
					setState(4607);
					olapSpecification();
					}
					break;
				case 16:
					{
					setState(4608);
					rowChangeExpression();
					}
					break;
				case 17:
					{
					setState(4609);
					sequenceReference();
					}
					break;
				}
				setState(4617);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,507,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4612);
						operator();
						setState(4613);
						expression();
						}
						} 
					}
					setState(4619);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,507,_ctx);
				}
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyExpressionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public KeyExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterKeyExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitKeyExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitKeyExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyExpressionContext keyExpression() throws RecognitionException {
		KeyExpressionContext _localctx = new KeyExpressionContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_keyExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4622);
			expression();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowChangeExpressionContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(DB2zSQLParser.ROW, 0); }
		public TerminalNode CHANGE() { return getToken(DB2zSQLParser.CHANGE, 0); }
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode TIMESTAMP() { return getToken(DB2zSQLParser.TIMESTAMP, 0); }
		public TerminalNode TOKEN() { return getToken(DB2zSQLParser.TOKEN, 0); }
		public RowChangeExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowChangeExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRowChangeExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRowChangeExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRowChangeExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowChangeExpressionContext rowChangeExpression() throws RecognitionException {
		RowChangeExpressionContext _localctx = new RowChangeExpressionContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_rowChangeExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4624);
			match(ROW);
			setState(4625);
			match(CHANGE);
			setState(4626);
			_la = _input.LA(1);
			if ( !(_la==TOKEN || _la==TIMESTAMP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4627);
			match(FOR);
			setState(4628);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SequenceReferenceContext extends ParserRuleContext {
		public TerminalNode VALUE() { return getToken(DB2zSQLParser.VALUE, 0); }
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode NEXT() { return getToken(DB2zSQLParser.NEXT, 0); }
		public TerminalNode PREVIOUS() { return getToken(DB2zSQLParser.PREVIOUS, 0); }
		public SequenceReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequenceReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSequenceReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSequenceReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSequenceReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SequenceReferenceContext sequenceReference() throws RecognitionException {
		SequenceReferenceContext _localctx = new SequenceReferenceContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_sequenceReference);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4630);
			_la = _input.LA(1);
			if ( !(_la==NEXT || _la==PREVIOUS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4631);
			match(VALUE);
			setState(4632);
			match(FOR);
			setState(4633);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionInvocationContext extends ParserRuleContext {
		public ScalarFunctionInvocationContext scalarFunctionInvocation() {
			return getRuleContext(ScalarFunctionInvocationContext.class,0);
		}
		public AggregateFunctionInvocationContext aggregateFunctionInvocation() {
			return getRuleContext(AggregateFunctionInvocationContext.class,0);
		}
		public RegressionFunctionInvocationContext regressionFunctionInvocation() {
			return getRuleContext(RegressionFunctionInvocationContext.class,0);
		}
		public ExternalFunctionInvocationContext externalFunctionInvocation() {
			return getRuleContext(ExternalFunctionInvocationContext.class,0);
		}
		public FunctionInvocationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionInvocation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFunctionInvocation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFunctionInvocation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFunctionInvocation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionInvocationContext functionInvocation() throws RecognitionException {
		FunctionInvocationContext _localctx = new FunctionInvocationContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_functionInvocation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4639);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,509,_ctx) ) {
			case 1:
				{
				setState(4635);
				scalarFunctionInvocation();
				}
				break;
			case 2:
				{
				setState(4636);
				aggregateFunctionInvocation();
				}
				break;
			case 3:
				{
				setState(4637);
				regressionFunctionInvocation();
				}
				break;
			case 4:
				{
				setState(4638);
				externalFunctionInvocation();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScalarFunctionInvocationContext extends ParserRuleContext {
		public ScalarFunctionContext scalarFunction() {
			return getRuleContext(ScalarFunctionContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public ScalarFunctionInvocationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scalarFunctionInvocation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterScalarFunctionInvocation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitScalarFunctionInvocation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitScalarFunctionInvocation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ScalarFunctionInvocationContext scalarFunctionInvocation() throws RecognitionException {
		ScalarFunctionInvocationContext _localctx = new ScalarFunctionInvocationContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_scalarFunctionInvocation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4644);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,510,_ctx) ) {
			case 1:
				{
				setState(4641);
				schemaName();
				setState(4642);
				match(DOT);
				}
				break;
			}
			setState(4646);
			scalarFunction();
			setState(4647);
			match(LPAREN);
			setState(4648);
			expression();
			setState(4653);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4649);
				match(COMMA);
				setState(4650);
				expression();
				}
				}
				setState(4655);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4656);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggregateFunctionInvocationContext extends ParserRuleContext {
		public AggregateFunctionContext aggregateFunction() {
			return getRuleContext(AggregateFunctionContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode SPLAT() { return getToken(DB2zSQLParser.SPLAT, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public TerminalNode DISTINCT() { return getToken(DB2zSQLParser.DISTINCT, 0); }
		public AggregateFunctionInvocationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregateFunctionInvocation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAggregateFunctionInvocation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAggregateFunctionInvocation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAggregateFunctionInvocation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggregateFunctionInvocationContext aggregateFunctionInvocation() throws RecognitionException {
		AggregateFunctionInvocationContext _localctx = new AggregateFunctionInvocationContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_aggregateFunctionInvocation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4661);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,512,_ctx) ) {
			case 1:
				{
				setState(4658);
				schemaName();
				setState(4659);
				match(DOT);
				}
				break;
			}
			setState(4663);
			aggregateFunction();
			setState(4664);
			match(LPAREN);
			setState(4666);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,513,_ctx) ) {
			case 1:
				{
				setState(4665);
				match(DISTINCT);
				}
				break;
			}
			setState(4670);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LPAREN:
			case COLON:
			case NONNUMERICLITERAL:
			case INTEGERLITERAL:
			case NUMERICLITERAL:
			case ADD:
			case AFTER:
			case ALL:
			case ALLOCATE:
			case ALLOW:
			case ALTER:
			case ALTERAND:
			case ANY:
			case ARRAY:
			case ARRAY_EXISTS:
			case AS:
			case ASENSITIVE:
			case ASSOCIATE:
			case ASUTIME:
			case AT:
			case AUDIT:
			case AUX:
			case AUXILIARY:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BUFFERPOOL:
			case BY:
			case CALL:
			case CAPTURE:
			case CASCADED:
			case CASE:
			case CAST:
			case CCSID:
			case CHAR:
			case CHARACTER:
			case CHECK:
			case CLONE:
			case CLOSE:
			case CLUSTER:
			case COLLECTION:
			case COLLID:
			case COLUMN:
			case COMMENT:
			case COMMIT:
			case CONCAT:
			case CONDITION:
			case CONNECT:
			case CONNECTION:
			case CONSTRAINT:
			case CONTAINS:
			case CONTENT:
			case CONTINUE:
			case CREATE:
			case CUBE:
			case CURRENT:
			case CURRENT_LC_CTYPE:
			case CURRVAL:
			case CURSOR:
			case DATA:
			case DATABASE:
			case DAY:
			case DAYS:
			case DBINFO:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DISABLE:
			case DISALLOW:
			case DISTINCT:
			case DO:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSSIZE:
			case DYNAMIC:
			case EDITPROC:
			case ELSE:
			case ELSEIF:
			case ENCODING:
			case ENCRYPTION:
			case END:
			case END_EXEC:
			case ENDING:
			case ERASE:
			case ESCAPE:
			case EXCEPT:
			case EXCEPTION:
			case EXEC_SQL:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case FENCED:
			case FETCH:
			case FIELDPROC:
			case FINAL:
			case FIRST:
			case FOR:
			case FREE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANT:
			case GROUP:
			case HANDLER:
			case HAVING:
			case HOLD:
			case HOUR:
			case HOURS:
			case IF:
			case IMMEDIATE:
			case IN:
			case INCLUSIVE:
			case INDEX:
			case INDEXBP:
			case INHERIT:
			case INNER:
			case INOUT:
			case INSENSITIVE:
			case INSERT:
			case INTERSECT:
			case INTO:
			case IS:
			case ISOBID:
			case ITERATE:
			case JAR:
			case JOIN:
			case KEEP:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LAST:
			case LC_CTYPE:
			case LEAVE:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOCALE:
			case LOCATOR:
			case LOCATORS:
			case LOCK:
			case LOCKMAX:
			case LOCKSIZE:
			case LONG:
			case LOOP:
			case MAINTAINED:
			case MATERIALIZED:
			case MICROSECOND:
			case MICROSECONDS:
			case MODIFIES:
			case MONTH:
			case MONTHS:
			case NEXT:
			case NEXTVAL:
			case NO:
			case NONE:
			case NOT:
			case NULL:
			case NULLS:
			case NUMPARTS:
			case OBID:
			case OF:
			case OFFSET:
			case OLD:
			case ON:
			case OPEN:
			case OPTIMIZATION:
			case OPTIMIZE:
			case OR:
			case ORDER:
			case ORGANIZATION:
			case OUT:
			case OUTER:
			case PACKAGE:
			case PADDED:
			case PARAMETER:
			case PART:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONING:
			case PATH:
			case PERIOD:
			case PIECESIZE:
			case PLAN:
			case PRECISION:
			case PREPARE:
			case PREVVAL:
			case PRIOR:
			case PRIQTY:
			case PRIVILEGES:
			case PROCEDURE:
			case PROGRAM:
			case PSID:
			case PUBLIC:
			case QUERY:
			case QUERYNO:
			case READS:
			case REFERENCES:
			case REFRESH:
			case RELEASE:
			case RENAME:
			case REPEAT:
			case RESIGNAL:
			case RESTRICT:
			case RESULT:
			case RESULT_SET_LOCATOR:
			case RETURN:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUND_CEILING:
			case ROUND_DOWN:
			case ROUND_FLOOR:
			case ROUND_HALF_DOWN:
			case ROUND_HALF_EVEN:
			case ROUND_HALF_UP:
			case ROUND_UP:
			case ROW:
			case ROWSET:
			case RUN:
			case SAVEPOINT:
			case SCHEMA:
			case SCRATCHPAD:
			case SECOND:
			case SECONDS:
			case SECQTY:
			case SECURITY:
			case SELECT:
			case SENSITIVE:
			case SEQUENCE:
			case SET:
			case SIGNAL:
			case SIMPLE:
			case SOME:
			case SOURCE:
			case SPECIFIC:
			case STANDARD:
			case STATEMENT:
			case STATIC:
			case STAY:
			case STOGROUP:
			case STORES:
			case STYLE:
			case SUMMARY:
			case SYNONYM:
			case SYSDATE:
			case SYSTEM:
			case SYSTIMESTAMP:
			case TABLE:
			case TABLESPACE:
			case THEN:
			case TO:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNDO:
			case UNION:
			case UNIQUE:
			case UNTIL:
			case UPDATE:
			case USING:
			case VALIDPROC:
			case VALUE:
			case VALUES:
			case VARIABLE:
			case VARIANT:
			case VCAT:
			case VERSIONING:
			case VIEW:
			case VOLATILE:
			case VOLUMES:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WLM:
			case XMLCAST:
			case XMLEXISTS:
			case XMLNAMESPACES:
			case YEAR:
			case YEARS:
			case ZONE:
			case AND:
			case ARRAY_AGG:
			case ASC:
			case AVG:
			case BIT:
			case CHANGE:
			case CODEUNITS16:
			case CODEUNITS32:
			case CORR:
			case CORRELATION:
			case COUNT:
			case COUNT_BIG:
			case COVAR:
			case COVARIANCE:
			case COVARIANCE_SAMP:
			case COVAR_POP:
			case COVAR_SAMP:
			case CS:
			case CUME_DIST:
			case DENSE_RANK:
			case DESC:
			case EBCDIC:
			case EXCLUSIVE:
			case FIRST_VALUE:
			case FOLLOWING:
			case GROUPING:
			case IGNORE:
			case INDICATOR:
			case INPUT:
			case ISNULL:
			case LAG:
			case LARGE:
			case LAST_VALUE:
			case LEAD:
			case LISTAGG:
			case LOCKED:
			case LOCKS:
			case MEDIAN:
			case MINUTES:
			case MIXED:
			case NOTNULL:
			case NTH_VALUE:
			case NTILE:
			case NUMERIC:
			case OBJECT:
			case OCTETS:
			case ONLY:
			case OVER:
			case PASSING:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PERCENT_RANK:
			case PRECEDING:
			case PREVIOUS:
			case RANGE:
			case RANK:
			case RATIO_TO_REPORT:
			case READ:
			case REF:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_ICPT:
			case REGR_INTERCEPT:
			case REGR_R2:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case RESPECT:
			case ROW_NUMBER:
			case ROWS:
			case RR:
			case RS:
			case SBCS:
			case SELECTIVITY:
			case SETS:
			case SHARE:
			case SKIP_:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case TOKEN:
			case UNBOUNDED:
			case UNPACK:
			case UR:
			case USE:
			case VAR:
			case VARIANCE:
			case VARIANCE_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARYING:
			case WITHOUT:
			case XML:
			case XMLAGG:
			case COLUMNS:
			case SQLID:
			case ORDINALITY:
			case SYSTEM_TIME:
			case BUSINESS_TIME:
			case MULTIPLIER:
			case UNNEST:
			case CROSS:
			case CALLER:
			case CLIENT:
			case POSITIONING:
			case SCROLL:
			case ACTION:
			case ASSEMBLE:
			case C_:
			case CALLED:
			case COBOL:
			case DB2:
			case DEFINER:
			case DISPATCH:
			case ENVIRONMENT:
			case FAILURE:
			case FAILURES:
			case JAVA:
			case MAIN:
			case NAME:
			case OPTIONS:
			case PARALLEL:
			case PLI:
			case REGISTERS:
			case RESIDENT:
			case SECURED:
			case SPECIAL:
			case SQL:
			case STOP:
			case SUB:
			case YES:
			case APPLICATION:
			case CHANGED:
			case COMPATIBILITY:
			case COMPRESS:
			case COPY:
			case FREEPAGE:
			case GBPCACHE:
			case INCLUDE:
			case MAXVALUE:
			case MINVALUE:
			case PCTFREE:
			case REGENERATE:
			case MASK:
			case ENABLE:
			case PERMISSION:
			case ATOMIC:
			case SQLEXCEPTION:
			case MERGE:
			case MATCHED:
			case SQLSTATE:
			case MESSAGE_TEXT:
			case OVERRIDING:
			case PORTION:
			case DB2SQL:
			case DEBUG:
			case GENERAL:
			case MODE_:
			case REXX:
			case CACHE:
			case CYCLE:
			case INCREMENT:
			case RESTART:
			case DATACLAS:
			case MGMTCLAS:
			case REMOVE:
			case STORCLAS:
			case ACCESS:
			case ACTIVATE:
			case ALWAYS:
			case APPEND:
			case ARCHIVE:
			case BUSINESS:
			case CASCADE:
			case CHANGES:
			case CONTROL:
			case DEACTIVATE:
			case DEFERRED:
			case EACH:
			case ENFORCED:
			case EXTRA:
			case FOREIGN:
			case HIDDEN_:
			case HISTORY:
			case ID:
			case IDENTITY:
			case IMPLICITLY:
			case INITIALLY:
			case INLINE:
			case OPERATION:
			case ORGANIZE:
			case OVERLAPS:
			case PACKAGE_NAME:
			case PACKAGE_SCHEMA:
			case PACKAGE_VERSION:
			case PRIMARY:
			case RESET:
			case ROTATE:
			case START:
			case SYSIBM:
			case TRANSACTION:
			case XMLSCHEMA:
			case ELEMENT:
			case URL:
			case NAMESPACE:
			case LOCATION:
			case SYSXSR:
			case ALGORITHM:
			case FIXEDLENGTH:
			case HUFFMAN:
			case LOB:
			case LOG:
			case LOGGED:
			case MAXPARTITIONS:
			case MAXROWS:
			case MEMBER:
			case MOVE:
			case PAGE:
			case PAGENUM:
			case PENDING:
			case RELATIVE:
			case SEGSIZE:
			case TRACKMOD:
			case ADDRESS:
			case ATTRIBUTES:
			case AUTHENTICATION:
			case AUTHID:
			case CONTEXT:
			case JOBNAME:
			case OWNER:
			case PROFILE:
			case QUALIFIER:
			case SERVAUTH:
			case TRUSTED:
			case SECTION:
			case ACTIVE:
			case VERSION:
			case ALIAS:
			case WORK:
			case WORKFILE:
			case SYSDEFLT:
			case NULTERM:
			case STRUCTURE:
			case GENERIC:
			case TEMPORARY:
			case DEFER:
			case DEFINE:
			case EXCLUDE:
			case GENERATE:
			case KEYS:
			case XMLPATTERN:
			case ABS:
			case ABSVAL:
			case ACOS:
			case ADD_DAYS:
			case ADD_MONTHS:
			case ARRAY_DELETE:
			case ARRAY_FIRST:
			case ARRAY_LAST:
			case ARRAY_NEXT:
			case ARRAY_PRIOR:
			case ARRAY_TRIM:
			case ASCII:
			case ASCII_CHR:
			case ASCIISTR:
			case ASCII_STR:
			case ASIN:
			case ATAN:
			case ATAN2:
			case ATANH:
			case BIGINT:
			case BINARY:
			case BITAND:
			case BITANDNOT:
			case BITNOT:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BTRIM:
			case CARDINALITY:
			case CCSID_ENCODING:
			case CEIL:
			case CEILING:
			case CHAR9:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case CHR:
			case CLOB:
			case COALESCE:
			case COLLATION_KEY:
			case COMPARE_DECFLOAT:
			case COS:
			case COSH:
			case DATE:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFWEEK_ISO:
			case DAYOFYEAR:
			case DAYS_BETWEEN:
			case DBCLOB:
			case DEC:
			case DECFLOAT:
			case DECFLOAT_FORMAT:
			case DECFLOAT_SORTKEY:
			case DECIMAL:
			case DECODE:
			case DECRYPT_BINARY:
			case DECRYPT_BIT:
			case DECRYPT_CHAR:
			case DECRYPT_DATAKEY_BIGINT:
			case DECRYPT_DATAKEY_BIT:
			case DECRYPT_DATAKEY_CLOB:
			case DECRYPT_DATAKEY_DBCLOB:
			case DECRYPT_DATAKEY_DECIMAL:
			case DECRYPT_DATAKEY_INTEGER:
			case DECRYPT_DATAKEY_VARCHAR:
			case DECRYPT_DATAKEY_VARGRAPHIC:
			case DECRYPT_DB:
			case DEGREES:
			case DIFFERENCE:
			case DIGITS:
			case DOUBLE_PRECISION:
			case DSN_XMLVALIDATE:
			case EBCDIC_CHR:
			case EBCDIC_STR:
			case ENCRYPT_DATAKEY:
			case ENCRYPT_TDES:
			case EXP:
			case EXTRACT:
			case FLOAT:
			case FLOOR:
			case GENERATE_UNIQUE:
			case GENERATE_UNIQUE_BINARY:
			case GETHINT:
			case GETVARIABLE:
			case GRAPHIC:
			case GREATEST:
			case HASH:
			case HASH_CRC32:
			case HASH_MD5:
			case HASH_SHA1:
			case HASH_SHA256:
			case HEX:
			case IDENTITY_VAL_LOCAL:
			case IFNULL:
			case INSTR:
			case INT:
			case INTEGER:
			case JULIAN_DAY:
			case LAST_DAY:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LN:
			case LOCATE:
			case LOCATE_IN_STRING:
			case LOG10:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAX:
			case MAX_CARDINALITY:
			case MIDNIGHT_SECONDS:
			case MIN:
			case MINUTE:
			case MOD:
			case MONTHS_BETWEEN:
			case MQREAD:
			case MQREADCLOB:
			case MQRECEIVE:
			case MQRECEIVECLOB:
			case MQSEND:
			case MULTIPLY_ALT:
			case NEXT_DAY:
			case NEXT_MONTH:
			case NORMALIZE_DECFLOAT:
			case NORMALIZE_STRING:
			case NULLIF:
			case NVL:
			case OVERLAY:
			case PACK:
			case POSITION:
			case POSSTR:
			case POW:
			case POWER:
			case QUANTIZE:
			case QUARTER:
			case RADIANS:
			case RAISE_ERROR:
			case RAND:
			case RANDOM:
			case REAL:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REPLACE:
			case RID:
			case ROUND:
			case ROUND_TIMESTAMP:
			case ROWID:
			case RPAD:
			case RTRIM:
			case SCORE:
			case SIGN:
			case SIN:
			case SINH:
			case SMALLINT:
			case SOAPHTTPC:
			case SOAPHTTPNC:
			case SOAPHTTPNV:
			case SOAPHTTPV:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STRIP:
			case STRLEFT:
			case STRPOS:
			case STRRIGHT:
			case SUBSTR:
			case SUBSTRING:
			case TAN:
			case TANH:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIMESTAMP_FORMAT:
			case TIMESTAMP_ISO:
			case TIMESTAMP_TZ:
			case TO_CHAR:
			case TO_CLOB:
			case TO_DATE:
			case TO_NUMBER:
			case TOTALORDER:
			case TO_TIMESTAMP:
			case TRANSLATE:
			case TRIM:
			case TRIM_ARRAY:
			case TRUNC:
			case TRUNC_TIMESTAMP:
			case UCASE:
			case UNICODE:
			case UNICODE_STR:
			case UNISTR:
			case UPPER:
			case VARBINARY:
			case VARCHAR:
			case VARCHAR9:
			case VARCHAR_BIT_FORMAT:
			case VARCHAR_FORMAT:
			case VARGRAPHIC:
			case VERIFY_GROUP_FOR_USER:
			case VERIFY_ROLE_FOR_USER:
			case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
			case WEEK:
			case WEEK_ISO:
			case WRAP:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLCONCAT:
			case XMLDOCUMENT:
			case XMLELEMENT:
			case XMLFOREST:
			case XMLMODIFY:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLSERIALIZE:
			case XMLTEXT:
			case XMLXSROBJECTID:
			case XSLTRANSFORM:
			case CURRENT_ACCELERATOR:
			case CURRENT_APPLICATION_COMPATIBILITY:
			case CURRENT_APPLICATION_ENCODING_SCHEME:
			case CURRENT_CLIENT_ACCTNG:
			case CURRENT_CLIENT_APPLNAME:
			case CURRENT_CLIENT_CORR_TOKEN:
			case CURRENT_CLIENT_USERID:
			case CURRENT_CLIENT_WRKSTNNAME:
			case CURRENT_DATE:
			case CURRENT_DEBUG_MODE:
			case CURRENT_DECFLOAT_ROUNDING_MODE:
			case CURRENT_DEGREE:
			case CURRENT_EXPLAIN_MODE:
			case CURRENT_GET_ACCEL_ARCHIVE:
			case CURRENT_LOCALE_LC_CTYPE:
			case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
			case CURRENT_MEMBER:
			case CURRENT_OPTIMIZATION_HINT:
			case CURRENT_PACKAGE_PATH:
			case CURRENT_PACKAGESET:
			case CURRENT_PATH:
			case CURRENT_PRECISION:
			case CURRENT_QUERY_ACCELERATION:
			case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
			case CURRENT_REFRESH_AGE:
			case CURRENT_ROUTINE_VERSION:
			case CURRENT_RULES:
			case CURRENT_SCHEMA:
			case CURRENT_SERVER:
			case CURRENT_SQLID:
			case CURRENT_TEMPORAL_BUSINESS_TIME:
			case CURRENT_TEMPORAL_SYSTEM_TIME:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_TIME_ZONE:
			case ENCRYPTION_PASSWORD:
			case SESSION_TIME_ZONE:
			case SESSION_USER:
			case USER:
			case ADMIN_TASK_LIST:
			case ADMIN_TASK_OUTPUT:
			case ADMIN_TASK_STATUS:
			case BLOCKING_THREADS:
			case MQREADALL:
			case MQREADALLCLOB:
			case MQRECEIVEALL:
			case MQRECEIVEALLCLOB:
			case XMLTABLE:
			case SQLIDENTIFIER:
				{
				setState(4668);
				expression();
				}
				break;
			case SPLAT:
				{
				setState(4669);
				match(SPLAT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4672);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RegressionFunctionInvocationContext extends ParserRuleContext {
		public RegressionFunctionContext regressionFunction() {
			return getRuleContext(RegressionFunctionContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(DB2zSQLParser.COMMA, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public RegressionFunctionInvocationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regressionFunctionInvocation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRegressionFunctionInvocation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRegressionFunctionInvocation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRegressionFunctionInvocation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RegressionFunctionInvocationContext regressionFunctionInvocation() throws RecognitionException {
		RegressionFunctionInvocationContext _localctx = new RegressionFunctionInvocationContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_regressionFunctionInvocation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4677);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,515,_ctx) ) {
			case 1:
				{
				setState(4674);
				schemaName();
				setState(4675);
				match(DOT);
				}
				break;
			}
			setState(4679);
			regressionFunction();
			setState(4680);
			match(LPAREN);
			setState(4681);
			expression();
			setState(4682);
			match(COMMA);
			setState(4683);
			expression();
			setState(4684);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExternalFunctionInvocationContext extends ParserRuleContext {
		public TerminalNode SQLIDENTIFIER() { return getToken(DB2zSQLParser.SQLIDENTIFIER, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public ExternalFunctionInvocationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_externalFunctionInvocation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterExternalFunctionInvocation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitExternalFunctionInvocation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitExternalFunctionInvocation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExternalFunctionInvocationContext externalFunctionInvocation() throws RecognitionException {
		ExternalFunctionInvocationContext _localctx = new ExternalFunctionInvocationContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_externalFunctionInvocation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4689);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,516,_ctx) ) {
			case 1:
				{
				setState(4686);
				schemaName();
				setState(4687);
				match(DOT);
				}
				break;
			}
			setState(4691);
			match(SQLIDENTIFIER);
			setState(4692);
			match(LPAREN);
			setState(4693);
			expression();
			setState(4698);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4694);
				match(COMMA);
				setState(4695);
				expression();
				}
				}
				setState(4700);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4701);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LabeledDurationContext extends ParserRuleContext {
		public TerminalNode YEAR() { return getToken(DB2zSQLParser.YEAR, 0); }
		public TerminalNode YEARS() { return getToken(DB2zSQLParser.YEARS, 0); }
		public TerminalNode MONTH() { return getToken(DB2zSQLParser.MONTH, 0); }
		public TerminalNode MONTHS() { return getToken(DB2zSQLParser.MONTHS, 0); }
		public TerminalNode DAY() { return getToken(DB2zSQLParser.DAY, 0); }
		public TerminalNode DAYS() { return getToken(DB2zSQLParser.DAYS, 0); }
		public TerminalNode HOUR() { return getToken(DB2zSQLParser.HOUR, 0); }
		public TerminalNode HOURS() { return getToken(DB2zSQLParser.HOURS, 0); }
		public TerminalNode MINUTE() { return getToken(DB2zSQLParser.MINUTE, 0); }
		public TerminalNode MINUTES() { return getToken(DB2zSQLParser.MINUTES, 0); }
		public TerminalNode SECOND() { return getToken(DB2zSQLParser.SECOND, 0); }
		public TerminalNode SECONDS() { return getToken(DB2zSQLParser.SECONDS, 0); }
		public TerminalNode MICROSECOND() { return getToken(DB2zSQLParser.MICROSECOND, 0); }
		public TerminalNode MICROSECONDS() { return getToken(DB2zSQLParser.MICROSECONDS, 0); }
		public FunctionInvocationContext functionInvocation() {
			return getRuleContext(FunctionInvocationContext.class,0);
		}
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public LabeledDurationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_labeledDuration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterLabeledDuration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitLabeledDuration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitLabeledDuration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LabeledDurationContext labeledDuration() throws RecognitionException {
		LabeledDurationContext _localctx = new LabeledDurationContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_labeledDuration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4711);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,518,_ctx) ) {
			case 1:
				{
				setState(4703);
				functionInvocation();
				}
				break;
			case 2:
				{
				{
				setState(4704);
				match(LPAREN);
				setState(4705);
				expression();
				setState(4706);
				match(RPAREN);
				}
				}
				break;
			case 3:
				{
				setState(4708);
				match(INTEGERLITERAL);
				}
				break;
			case 4:
				{
				setState(4709);
				columnName();
				}
				break;
			case 5:
				{
				setState(4710);
				variable();
				}
				break;
			}
			setState(4713);
			_la = _input.LA(1);
			if ( !(((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & ((1L << (DAY - 86)) | (1L << (DAYS - 86)) | (1L << (HOUR - 86)) | (1L << (HOURS - 86)))) != 0) || ((((_la - 182)) & ~0x3f) == 0 && ((1L << (_la - 182)) & ((1L << (MICROSECOND - 182)) | (1L << (MICROSECONDS - 182)) | (1L << (MONTH - 182)) | (1L << (MONTHS - 182)))) != 0) || ((((_la - 262)) & ~0x3f) == 0 && ((1L << (_la - 262)) & ((1L << (SECOND - 262)) | (1L << (SECONDS - 262)) | (1L << (YEAR - 262)) | (1L << (YEARS - 262)))) != 0) || _la==MINUTES || _la==MINUTE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlCastSpecificationContext extends ParserRuleContext {
		public TerminalNode XMLCAST() { return getToken(DB2zSQLParser.XMLCAST, 0); }
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public ParameterMarkerContext parameterMarker() {
			return getRuleContext(ParameterMarkerContext.class,0);
		}
		public XmlCastSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlCastSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterXmlCastSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitXmlCastSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitXmlCastSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlCastSpecificationContext xmlCastSpecification() throws RecognitionException {
		XmlCastSpecificationContext _localctx = new XmlCastSpecificationContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_xmlCastSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4715);
			match(XMLCAST);
			setState(4719);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,519,_ctx) ) {
			case 1:
				{
				setState(4716);
				expression();
				}
				break;
			case 2:
				{
				setState(4717);
				match(NULL);
				}
				break;
			case 3:
				{
				setState(4718);
				parameterMarker();
				}
				break;
			}
			setState(4721);
			match(AS);
			setState(4722);
			dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArrayElementSpecificationContext extends ParserRuleContext {
		public ArrayExpressionContext arrayExpression() {
			return getRuleContext(ArrayExpressionContext.class,0);
		}
		public TerminalNode OPENSQBRACKET() { return getToken(DB2zSQLParser.OPENSQBRACKET, 0); }
		public ArrayIndexContext arrayIndex() {
			return getRuleContext(ArrayIndexContext.class,0);
		}
		public TerminalNode CLOSESQBRACKET() { return getToken(DB2zSQLParser.CLOSESQBRACKET, 0); }
		public ArrayElementSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arrayElementSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterArrayElementSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitArrayElementSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitArrayElementSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArrayElementSpecificationContext arrayElementSpecification() throws RecognitionException {
		ArrayElementSpecificationContext _localctx = new ArrayElementSpecificationContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_arrayElementSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4724);
			arrayExpression();
			setState(4725);
			match(OPENSQBRACKET);
			setState(4726);
			arrayIndex();
			setState(4727);
			match(CLOSESQBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArrayIndexContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<OperatorContext> operator() {
			return getRuleContexts(OperatorContext.class);
		}
		public OperatorContext operator(int i) {
			return getRuleContext(OperatorContext.class,i);
		}
		public ArrayIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arrayIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterArrayIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitArrayIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitArrayIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArrayIndexContext arrayIndex() throws RecognitionException {
		ArrayIndexContext _localctx = new ArrayIndexContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_arrayIndex);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4729);
			expression();
			setState(4736);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAREN) | (1L << PLUS) | (1L << MINUS) | (1L << SPLAT) | (1L << SLASH) | (1L << CONCATOP) | (1L << COLON) | (1L << NONNUMERICLITERAL) | (1L << INTEGERLITERAL) | (1L << NUMERICLITERAL) | (1L << ADD) | (1L << AFTER) | (1L << ALL) | (1L << ALLOCATE) | (1L << ALLOW) | (1L << ALTER) | (1L << ALTERAND) | (1L << ANY) | (1L << ARRAY) | (1L << ARRAY_EXISTS) | (1L << AS) | (1L << ASENSITIVE) | (1L << ASSOCIATE) | (1L << ASUTIME) | (1L << AT) | (1L << AUDIT) | (1L << AUX) | (1L << AUXILIARY) | (1L << BEFORE) | (1L << BEGIN) | (1L << BETWEEN) | (1L << BUFFERPOOL) | (1L << BY) | (1L << CALL) | (1L << CAPTURE) | (1L << CASCADED) | (1L << CASE) | (1L << CAST) | (1L << CCSID) | (1L << CHAR) | (1L << CHARACTER) | (1L << CHECK) | (1L << CLONE) | (1L << CLOSE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLUSTER - 64)) | (1L << (COLLECTION - 64)) | (1L << (COLLID - 64)) | (1L << (COLUMN - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (CONCAT - 64)) | (1L << (CONDITION - 64)) | (1L << (CONNECT - 64)) | (1L << (CONNECTION - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONTAINS - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CREATE - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT - 64)) | (1L << (CURRENT_LC_CTYPE - 64)) | (1L << (CURRVAL - 64)) | (1L << (CURSOR - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DAYS - 64)) | (1L << (DBINFO - 64)) | (1L << (DECLARE - 64)) | (1L << (DEFAULT - 64)) | (1L << (DELETE - 64)) | (1L << (DESCRIPTOR - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DISABLE - 64)) | (1L << (DISALLOW - 64)) | (1L << (DISTINCT - 64)) | (1L << (DO - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (DSSIZE - 64)) | (1L << (DYNAMIC - 64)) | (1L << (EDITPROC - 64)) | (1L << (ELSE - 64)) | (1L << (ELSEIF - 64)) | (1L << (ENCODING - 64)) | (1L << (ENCRYPTION - 64)) | (1L << (END - 64)) | (1L << (END_EXEC - 64)) | (1L << (ENDING - 64)) | (1L << (ERASE - 64)) | (1L << (ESCAPE - 64)) | (1L << (EXCEPT - 64)) | (1L << (EXCEPTION - 64)) | (1L << (EXEC_SQL - 64)) | (1L << (EXECUTE - 64)) | (1L << (EXISTS - 64)) | (1L << (EXIT - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FENCED - 64)) | (1L << (FETCH - 64)) | (1L << (FIELDPROC - 64)) | (1L << (FINAL - 64)) | (1L << (FIRST - 64)) | (1L << (FOR - 64)) | (1L << (FREE - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (FROM - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GENERATED - 128)) | (1L << (GET - 128)) | (1L << (GLOBAL - 128)) | (1L << (GO - 128)) | (1L << (GOTO - 128)) | (1L << (GRANT - 128)) | (1L << (GROUP - 128)) | (1L << (HANDLER - 128)) | (1L << (HAVING - 128)) | (1L << (HOLD - 128)) | (1L << (HOUR - 128)) | (1L << (HOURS - 128)) | (1L << (IF - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (IN - 128)) | (1L << (INCLUSIVE - 128)) | (1L << (INDEX - 128)) | (1L << (INDEXBP - 128)) | (1L << (INHERIT - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSENSITIVE - 128)) | (1L << (INSERT - 128)) | (1L << (INTERSECT - 128)) | (1L << (INTO - 128)) | (1L << (IS - 128)) | (1L << (ISOBID - 128)) | (1L << (ITERATE - 128)) | (1L << (JAR - 128)) | (1L << (JOIN - 128)) | (1L << (KEEP - 128)) | (1L << (KEY - 128)) | (1L << (LABEL - 128)) | (1L << (LANGUAGE - 128)) | (1L << (LAST - 128)) | (1L << (LC_CTYPE - 128)) | (1L << (LEAVE - 128)) | (1L << (LEFT - 128)) | (1L << (LIKE - 128)) | (1L << (LIMIT - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCALE - 128)) | (1L << (LOCATOR - 128)) | (1L << (LOCATORS - 128)) | (1L << (LOCK - 128)) | (1L << (LOCKMAX - 128)) | (1L << (LOCKSIZE - 128)) | (1L << (LONG - 128)) | (1L << (LOOP - 128)) | (1L << (MAINTAINED - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MICROSECOND - 128)) | (1L << (MICROSECONDS - 128)) | (1L << (MODIFIES - 128)) | (1L << (MONTH - 128)) | (1L << (MONTHS - 128)) | (1L << (NEXT - 128)) | (1L << (NEXTVAL - 128)) | (1L << (NO - 128)) | (1L << (NONE - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (NOT - 192)) | (1L << (NULL - 192)) | (1L << (NULLS - 192)) | (1L << (NUMPARTS - 192)) | (1L << (OBID - 192)) | (1L << (OF - 192)) | (1L << (OFFSET - 192)) | (1L << (OLD - 192)) | (1L << (ON - 192)) | (1L << (OPEN - 192)) | (1L << (OPTIMIZATION - 192)) | (1L << (OPTIMIZE - 192)) | (1L << (OR - 192)) | (1L << (ORDER - 192)) | (1L << (ORGANIZATION - 192)) | (1L << (OUT - 192)) | (1L << (OUTER - 192)) | (1L << (PACKAGE - 192)) | (1L << (PADDED - 192)) | (1L << (PARAMETER - 192)) | (1L << (PART - 192)) | (1L << (PARTITION - 192)) | (1L << (PARTITIONED - 192)) | (1L << (PARTITIONING - 192)) | (1L << (PATH - 192)) | (1L << (PERIOD - 192)) | (1L << (PIECESIZE - 192)) | (1L << (PLAN - 192)) | (1L << (PRECISION - 192)) | (1L << (PREPARE - 192)) | (1L << (PREVVAL - 192)) | (1L << (PRIOR - 192)) | (1L << (PRIQTY - 192)) | (1L << (PRIVILEGES - 192)) | (1L << (PROCEDURE - 192)) | (1L << (PROGRAM - 192)) | (1L << (PSID - 192)) | (1L << (PUBLIC - 192)) | (1L << (QUERY - 192)) | (1L << (QUERYNO - 192)) | (1L << (READS - 192)) | (1L << (REFERENCES - 192)) | (1L << (REFRESH - 192)) | (1L << (RELEASE - 192)) | (1L << (RENAME - 192)) | (1L << (REPEAT - 192)) | (1L << (RESIGNAL - 192)) | (1L << (RESTRICT - 192)) | (1L << (RESULT - 192)) | (1L << (RESULT_SET_LOCATOR - 192)) | (1L << (RETURN - 192)) | (1L << (RETURNS - 192)) | (1L << (REVOKE - 192)) | (1L << (RIGHT - 192)) | (1L << (ROLE - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROLLUP - 192)) | (1L << (ROUND_CEILING - 192)) | (1L << (ROUND_DOWN - 192)) | (1L << (ROUND_FLOOR - 192)) | (1L << (ROUND_HALF_DOWN - 192)) | (1L << (ROUND_HALF_EVEN - 192)) | (1L << (ROUND_HALF_UP - 192)) | (1L << (ROUND_UP - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (ROW - 256)) | (1L << (ROWSET - 256)) | (1L << (RUN - 256)) | (1L << (SAVEPOINT - 256)) | (1L << (SCHEMA - 256)) | (1L << (SCRATCHPAD - 256)) | (1L << (SECOND - 256)) | (1L << (SECONDS - 256)) | (1L << (SECQTY - 256)) | (1L << (SECURITY - 256)) | (1L << (SELECT - 256)) | (1L << (SENSITIVE - 256)) | (1L << (SEQUENCE - 256)) | (1L << (SET - 256)) | (1L << (SIGNAL - 256)) | (1L << (SIMPLE - 256)) | (1L << (SOME - 256)) | (1L << (SOURCE - 256)) | (1L << (SPECIFIC - 256)) | (1L << (STANDARD - 256)) | (1L << (STATEMENT - 256)) | (1L << (STATIC - 256)) | (1L << (STAY - 256)) | (1L << (STOGROUP - 256)) | (1L << (STORES - 256)) | (1L << (STYLE - 256)) | (1L << (SUMMARY - 256)) | (1L << (SYNONYM - 256)) | (1L << (SYSDATE - 256)) | (1L << (SYSTEM - 256)) | (1L << (SYSTIMESTAMP - 256)) | (1L << (TABLE - 256)) | (1L << (TABLESPACE - 256)) | (1L << (THEN - 256)) | (1L << (TO - 256)) | (1L << (TRIGGER - 256)) | (1L << (TRUNCATE - 256)) | (1L << (TYPE - 256)) | (1L << (UNDO - 256)) | (1L << (UNION - 256)) | (1L << (UNIQUE - 256)) | (1L << (UNTIL - 256)) | (1L << (UPDATE - 256)) | (1L << (USING - 256)) | (1L << (VALIDPROC - 256)) | (1L << (VALUE - 256)) | (1L << (VALUES - 256)) | (1L << (VARIABLE - 256)) | (1L << (VARIANT - 256)) | (1L << (VCAT - 256)) | (1L << (VERSIONING - 256)) | (1L << (VIEW - 256)) | (1L << (VOLATILE - 256)) | (1L << (VOLUMES - 256)) | (1L << (WHEN - 256)) | (1L << (WHENEVER - 256)) | (1L << (WHERE - 256)) | (1L << (WHILE - 256)) | (1L << (WITH - 256)) | (1L << (WLM - 256)) | (1L << (XMLCAST - 256)) | (1L << (XMLEXISTS - 256)) | (1L << (XMLNAMESPACES - 256)) | (1L << (YEAR - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (YEARS - 320)) | (1L << (ZONE - 320)) | (1L << (AND - 320)) | (1L << (ARRAY_AGG - 320)) | (1L << (ASC - 320)) | (1L << (AVG - 320)) | (1L << (BIT - 320)) | (1L << (CHANGE - 320)) | (1L << (CODEUNITS16 - 320)) | (1L << (CODEUNITS32 - 320)) | (1L << (CORR - 320)) | (1L << (CORRELATION - 320)) | (1L << (COUNT - 320)) | (1L << (COUNT_BIG - 320)) | (1L << (COVAR - 320)) | (1L << (COVARIANCE - 320)) | (1L << (COVARIANCE_SAMP - 320)) | (1L << (COVAR_POP - 320)) | (1L << (COVAR_SAMP - 320)) | (1L << (CS - 320)) | (1L << (CUME_DIST - 320)) | (1L << (DENSE_RANK - 320)) | (1L << (DESC - 320)) | (1L << (EBCDIC - 320)) | (1L << (EXCLUSIVE - 320)) | (1L << (FIRST_VALUE - 320)) | (1L << (FOLLOWING - 320)) | (1L << (GROUPING - 320)) | (1L << (IGNORE - 320)) | (1L << (INDICATOR - 320)) | (1L << (INPUT - 320)) | (1L << (ISNULL - 320)) | (1L << (LAG - 320)) | (1L << (LARGE - 320)) | (1L << (LAST_VALUE - 320)) | (1L << (LEAD - 320)) | (1L << (LISTAGG - 320)) | (1L << (LOCKED - 320)) | (1L << (LOCKS - 320)) | (1L << (MEDIAN - 320)) | (1L << (MINUTES - 320)) | (1L << (MIXED - 320)) | (1L << (NOTNULL - 320)) | (1L << (NTH_VALUE - 320)) | (1L << (NTILE - 320)) | (1L << (NUMERIC - 320)) | (1L << (OBJECT - 320)) | (1L << (OCTETS - 320)) | (1L << (ONLY - 320)) | (1L << (OVER - 320)) | (1L << (PASSING - 320)) | (1L << (PERCENTILE_CONT - 320)) | (1L << (PERCENTILE_DISC - 320)) | (1L << (PERCENT_RANK - 320)) | (1L << (PRECEDING - 320)) | (1L << (PREVIOUS - 320)) | (1L << (RANGE - 320)) | (1L << (RANK - 320)) | (1L << (RATIO_TO_REPORT - 320)) | (1L << (READ - 320)) | (1L << (REF - 320)) | (1L << (REGR_AVGX - 320)) | (1L << (REGR_AVGY - 320)) | (1L << (REGR_COUNT - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (REGR_ICPT - 384)) | (1L << (REGR_INTERCEPT - 384)) | (1L << (REGR_R2 - 384)) | (1L << (REGR_SLOPE - 384)) | (1L << (REGR_SXX - 384)) | (1L << (REGR_SXY - 384)) | (1L << (REGR_SYY - 384)) | (1L << (RESPECT - 384)) | (1L << (ROW_NUMBER - 384)) | (1L << (ROWS - 384)) | (1L << (RR - 384)) | (1L << (RS - 384)) | (1L << (SBCS - 384)) | (1L << (SELECTIVITY - 384)) | (1L << (SETS - 384)) | (1L << (SHARE - 384)) | (1L << (SKIP_ - 384)) | (1L << (STDDEV - 384)) | (1L << (STDDEV_POP - 384)) | (1L << (STDDEV_SAMP - 384)) | (1L << (SUM - 384)) | (1L << (TOKEN - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNPACK - 384)) | (1L << (UR - 384)) | (1L << (USE - 384)) | (1L << (VAR - 384)) | (1L << (VARIANCE - 384)) | (1L << (VARIANCE_SAMP - 384)) | (1L << (VAR_POP - 384)) | (1L << (VAR_SAMP - 384)) | (1L << (VARYING - 384)) | (1L << (WITHOUT - 384)) | (1L << (XML - 384)) | (1L << (XMLAGG - 384)) | (1L << (COLUMNS - 384)) | (1L << (SQLID - 384)) | (1L << (ORDINALITY - 384)) | (1L << (SYSTEM_TIME - 384)) | (1L << (BUSINESS_TIME - 384)) | (1L << (MULTIPLIER - 384)) | (1L << (UNNEST - 384)) | (1L << (CROSS - 384)) | (1L << (CALLER - 384)) | (1L << (CLIENT - 384)) | (1L << (POSITIONING - 384)) | (1L << (SCROLL - 384)) | (1L << (ACTION - 384)) | (1L << (ASSEMBLE - 384)) | (1L << (C_ - 384)) | (1L << (CALLED - 384)) | (1L << (COBOL - 384)) | (1L << (DB2 - 384)) | (1L << (DEFINER - 384)) | (1L << (DISPATCH - 384)) | (1L << (ENVIRONMENT - 384)) | (1L << (FAILURE - 384)) | (1L << (FAILURES - 384)) | (1L << (JAVA - 384)) | (1L << (MAIN - 384)) | (1L << (NAME - 384)) | (1L << (OPTIONS - 384)) | (1L << (PARALLEL - 384)) | (1L << (PLI - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (REGISTERS - 448)) | (1L << (RESIDENT - 448)) | (1L << (SECURED - 448)) | (1L << (SPECIAL - 448)) | (1L << (SQL - 448)) | (1L << (STOP - 448)) | (1L << (SUB - 448)) | (1L << (YES - 448)) | (1L << (APPLICATION - 448)) | (1L << (CHANGED - 448)) | (1L << (COMPATIBILITY - 448)) | (1L << (COMPRESS - 448)) | (1L << (COPY - 448)) | (1L << (FREEPAGE - 448)) | (1L << (GBPCACHE - 448)) | (1L << (INCLUDE - 448)) | (1L << (MAXVALUE - 448)) | (1L << (MINVALUE - 448)) | (1L << (PCTFREE - 448)) | (1L << (REGENERATE - 448)) | (1L << (MASK - 448)) | (1L << (ENABLE - 448)) | (1L << (PERMISSION - 448)) | (1L << (ATOMIC - 448)) | (1L << (SQLEXCEPTION - 448)) | (1L << (MERGE - 448)) | (1L << (MATCHED - 448)) | (1L << (SQLSTATE - 448)) | (1L << (MESSAGE_TEXT - 448)) | (1L << (OVERRIDING - 448)) | (1L << (PORTION - 448)) | (1L << (DB2SQL - 448)) | (1L << (DEBUG - 448)) | (1L << (GENERAL - 448)) | (1L << (MODE_ - 448)) | (1L << (REXX - 448)) | (1L << (CACHE - 448)) | (1L << (CYCLE - 448)) | (1L << (INCREMENT - 448)) | (1L << (RESTART - 448)) | (1L << (DATACLAS - 448)) | (1L << (MGMTCLAS - 448)) | (1L << (REMOVE - 448)) | (1L << (STORCLAS - 448)) | (1L << (ACCESS - 448)) | (1L << (ACTIVATE - 448)) | (1L << (ALWAYS - 448)) | (1L << (APPEND - 448)) | (1L << (ARCHIVE - 448)) | (1L << (BUSINESS - 448)) | (1L << (CASCADE - 448)) | (1L << (CHANGES - 448)) | (1L << (CONTROL - 448)) | (1L << (DEACTIVATE - 448)) | (1L << (DEFERRED - 448)) | (1L << (EACH - 448)) | (1L << (ENFORCED - 448)) | (1L << (EXTRA - 448)) | (1L << (FOREIGN - 448)) | (1L << (HIDDEN_ - 448)) | (1L << (HISTORY - 448)) | (1L << (ID - 448)) | (1L << (IDENTITY - 448)) | (1L << (IMPLICITLY - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (INITIALLY - 512)) | (1L << (INLINE - 512)) | (1L << (OPERATION - 512)) | (1L << (ORGANIZE - 512)) | (1L << (OVERLAPS - 512)) | (1L << (PACKAGE_NAME - 512)) | (1L << (PACKAGE_SCHEMA - 512)) | (1L << (PACKAGE_VERSION - 512)) | (1L << (PRIMARY - 512)) | (1L << (RESET - 512)) | (1L << (ROTATE - 512)) | (1L << (START - 512)) | (1L << (SYSIBM - 512)) | (1L << (TRANSACTION - 512)) | (1L << (XMLSCHEMA - 512)) | (1L << (ELEMENT - 512)) | (1L << (URL - 512)) | (1L << (NAMESPACE - 512)) | (1L << (LOCATION - 512)) | (1L << (SYSXSR - 512)) | (1L << (ALGORITHM - 512)) | (1L << (FIXEDLENGTH - 512)) | (1L << (HUFFMAN - 512)) | (1L << (LOB - 512)) | (1L << (LOG - 512)) | (1L << (LOGGED - 512)) | (1L << (MAXPARTITIONS - 512)) | (1L << (MAXROWS - 512)) | (1L << (MEMBER - 512)) | (1L << (MOVE - 512)) | (1L << (PAGE - 512)) | (1L << (PAGENUM - 512)) | (1L << (PENDING - 512)) | (1L << (RELATIVE - 512)) | (1L << (SEGSIZE - 512)) | (1L << (TRACKMOD - 512)) | (1L << (ADDRESS - 512)) | (1L << (ATTRIBUTES - 512)) | (1L << (AUTHENTICATION - 512)) | (1L << (AUTHID - 512)) | (1L << (CONTEXT - 512)) | (1L << (JOBNAME - 512)) | (1L << (OWNER - 512)) | (1L << (PROFILE - 512)) | (1L << (QUALIFIER - 512)) | (1L << (SERVAUTH - 512)) | (1L << (TRUSTED - 512)) | (1L << (SECTION - 512)) | (1L << (ACTIVE - 512)) | (1L << (VERSION - 512)) | (1L << (ALIAS - 512)) | (1L << (WORK - 512)) | (1L << (WORKFILE - 512)) | (1L << (SYSDEFLT - 512)) | (1L << (NULTERM - 512)) | (1L << (STRUCTURE - 512)) | (1L << (GENERIC - 512)) | (1L << (TEMPORARY - 512)) | (1L << (DEFER - 512)) | (1L << (DEFINE - 512)) | (1L << (EXCLUDE - 512)) | (1L << (GENERATE - 512)) | (1L << (KEYS - 512)) | (1L << (XMLPATTERN - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (ABS - 576)) | (1L << (ABSVAL - 576)) | (1L << (ACOS - 576)) | (1L << (ADD_DAYS - 576)) | (1L << (ADD_MONTHS - 576)) | (1L << (ARRAY_DELETE - 576)) | (1L << (ARRAY_FIRST - 576)) | (1L << (ARRAY_LAST - 576)) | (1L << (ARRAY_NEXT - 576)) | (1L << (ARRAY_PRIOR - 576)) | (1L << (ARRAY_TRIM - 576)) | (1L << (ASCII - 576)) | (1L << (ASCII_CHR - 576)) | (1L << (ASCIISTR - 576)) | (1L << (ASCII_STR - 576)) | (1L << (ASIN - 576)) | (1L << (ATAN - 576)) | (1L << (ATAN2 - 576)) | (1L << (ATANH - 576)) | (1L << (BIGINT - 576)) | (1L << (BINARY - 576)) | (1L << (BITAND - 576)) | (1L << (BITANDNOT - 576)) | (1L << (BITNOT - 576)) | (1L << (BITOR - 576)) | (1L << (BITXOR - 576)) | (1L << (BLOB - 576)) | (1L << (BTRIM - 576)) | (1L << (CARDINALITY - 576)) | (1L << (CCSID_ENCODING - 576)) | (1L << (CEIL - 576)) | (1L << (CEILING - 576)) | (1L << (CHAR9 - 576)) | (1L << (CHARACTER_LENGTH - 576)) | (1L << (CHAR_LENGTH - 576)) | (1L << (CHR - 576)) | (1L << (CLOB - 576)) | (1L << (COALESCE - 576)) | (1L << (COLLATION_KEY - 576)) | (1L << (COMPARE_DECFLOAT - 576)) | (1L << (COS - 576)) | (1L << (COSH - 576)) | (1L << (DATE - 576)) | (1L << (DAYOFMONTH - 576)) | (1L << (DAYOFWEEK - 576)) | (1L << (DAYOFWEEK_ISO - 576)) | (1L << (DAYOFYEAR - 576)) | (1L << (DAYS_BETWEEN - 576)) | (1L << (DBCLOB - 576)) | (1L << (DEC - 576)) | (1L << (DECFLOAT - 576)) | (1L << (DECFLOAT_FORMAT - 576)) | (1L << (DECFLOAT_SORTKEY - 576)) | (1L << (DECIMAL - 576)) | (1L << (DECODE - 576)) | (1L << (DECRYPT_BINARY - 576)) | (1L << (DECRYPT_BIT - 576)) | (1L << (DECRYPT_CHAR - 576)) | (1L << (DECRYPT_DATAKEY_BIGINT - 576)) | (1L << (DECRYPT_DATAKEY_BIT - 576)) | (1L << (DECRYPT_DATAKEY_CLOB - 576)) | (1L << (DECRYPT_DATAKEY_DBCLOB - 576)) | (1L << (DECRYPT_DATAKEY_DECIMAL - 576)) | (1L << (DECRYPT_DATAKEY_INTEGER - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (DECRYPT_DATAKEY_VARCHAR - 640)) | (1L << (DECRYPT_DATAKEY_VARGRAPHIC - 640)) | (1L << (DECRYPT_DB - 640)) | (1L << (DEGREES - 640)) | (1L << (DIFFERENCE - 640)) | (1L << (DIGITS - 640)) | (1L << (DOUBLE_PRECISION - 640)) | (1L << (DSN_XMLVALIDATE - 640)) | (1L << (EBCDIC_CHR - 640)) | (1L << (EBCDIC_STR - 640)) | (1L << (ENCRYPT_DATAKEY - 640)) | (1L << (ENCRYPT_TDES - 640)) | (1L << (EXP - 640)) | (1L << (EXTRACT - 640)) | (1L << (FLOAT - 640)) | (1L << (FLOOR - 640)) | (1L << (GENERATE_UNIQUE - 640)) | (1L << (GENERATE_UNIQUE_BINARY - 640)) | (1L << (GETHINT - 640)) | (1L << (GETVARIABLE - 640)) | (1L << (GRAPHIC - 640)) | (1L << (GREATEST - 640)) | (1L << (HASH - 640)) | (1L << (HASH_CRC32 - 640)) | (1L << (HASH_MD5 - 640)) | (1L << (HASH_SHA1 - 640)) | (1L << (HASH_SHA256 - 640)) | (1L << (HEX - 640)) | (1L << (IDENTITY_VAL_LOCAL - 640)) | (1L << (IFNULL - 640)) | (1L << (INSTR - 640)) | (1L << (INT - 640)) | (1L << (INTEGER - 640)) | (1L << (JULIAN_DAY - 640)) | (1L << (LAST_DAY - 640)) | (1L << (LCASE - 640)) | (1L << (LEAST - 640)) | (1L << (LENGTH - 640)) | (1L << (LN - 640)) | (1L << (LOCATE - 640)) | (1L << (LOCATE_IN_STRING - 640)) | (1L << (LOG10 - 640)) | (1L << (LOWER - 640)) | (1L << (LPAD - 640)) | (1L << (LTRIM - 640)) | (1L << (MAX - 640)) | (1L << (MAX_CARDINALITY - 640)) | (1L << (MIDNIGHT_SECONDS - 640)) | (1L << (MIN - 640)) | (1L << (MINUTE - 640)) | (1L << (MOD - 640)) | (1L << (MONTHS_BETWEEN - 640)) | (1L << (MQREAD - 640)) | (1L << (MQREADCLOB - 640)) | (1L << (MQRECEIVE - 640)) | (1L << (MQRECEIVECLOB - 640)) | (1L << (MQSEND - 640)) | (1L << (MULTIPLY_ALT - 640)) | (1L << (NEXT_DAY - 640)) | (1L << (NEXT_MONTH - 640)) | (1L << (NORMALIZE_DECFLOAT - 640)) | (1L << (NORMALIZE_STRING - 640)) | (1L << (NULLIF - 640)) | (1L << (NVL - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (OVERLAY - 704)) | (1L << (PACK - 704)) | (1L << (POSITION - 704)) | (1L << (POSSTR - 704)) | (1L << (POW - 704)) | (1L << (POWER - 704)) | (1L << (QUANTIZE - 704)) | (1L << (QUARTER - 704)) | (1L << (RADIANS - 704)) | (1L << (RAISE_ERROR - 704)) | (1L << (RAND - 704)) | (1L << (RANDOM - 704)) | (1L << (REAL - 704)) | (1L << (REGEXP_COUNT - 704)) | (1L << (REGEXP_INSTR - 704)) | (1L << (REGEXP_LIKE - 704)) | (1L << (REGEXP_REPLACE - 704)) | (1L << (REGEXP_SUBSTR - 704)) | (1L << (REPLACE - 704)) | (1L << (RID - 704)) | (1L << (ROUND - 704)) | (1L << (ROUND_TIMESTAMP - 704)) | (1L << (ROWID - 704)) | (1L << (RPAD - 704)) | (1L << (RTRIM - 704)) | (1L << (SCORE - 704)) | (1L << (SIGN - 704)) | (1L << (SIN - 704)) | (1L << (SINH - 704)) | (1L << (SMALLINT - 704)) | (1L << (SOAPHTTPC - 704)) | (1L << (SOAPHTTPNC - 704)) | (1L << (SOAPHTTPNV - 704)) | (1L << (SOAPHTTPV - 704)) | (1L << (SOUNDEX - 704)) | (1L << (SPACE - 704)) | (1L << (SQRT - 704)) | (1L << (STRIP - 704)) | (1L << (STRLEFT - 704)) | (1L << (STRPOS - 704)) | (1L << (STRRIGHT - 704)) | (1L << (SUBSTR - 704)) | (1L << (SUBSTRING - 704)) | (1L << (TAN - 704)) | (1L << (TANH - 704)) | (1L << (TIME - 704)) | (1L << (TIMESTAMP - 704)) | (1L << (TIMESTAMPADD - 704)) | (1L << (TIMESTAMPDIFF - 704)) | (1L << (TIMESTAMP_FORMAT - 704)) | (1L << (TIMESTAMP_ISO - 704)) | (1L << (TIMESTAMP_TZ - 704)) | (1L << (TO_CHAR - 704)) | (1L << (TO_CLOB - 704)) | (1L << (TO_DATE - 704)) | (1L << (TO_NUMBER - 704)) | (1L << (TOTALORDER - 704)) | (1L << (TO_TIMESTAMP - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRIM - 704)) | (1L << (TRIM_ARRAY - 704)) | (1L << (TRUNC - 704)) | (1L << (TRUNC_TIMESTAMP - 704)) | (1L << (UCASE - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (UNICODE - 768)) | (1L << (UNICODE_STR - 768)) | (1L << (UNISTR - 768)) | (1L << (UPPER - 768)) | (1L << (VARBINARY - 768)) | (1L << (VARCHAR - 768)) | (1L << (VARCHAR9 - 768)) | (1L << (VARCHAR_BIT_FORMAT - 768)) | (1L << (VARCHAR_FORMAT - 768)) | (1L << (VARGRAPHIC - 768)) | (1L << (VERIFY_GROUP_FOR_USER - 768)) | (1L << (VERIFY_ROLE_FOR_USER - 768)) | (1L << (VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER - 768)) | (1L << (WEEK - 768)) | (1L << (WEEK_ISO - 768)) | (1L << (WRAP - 768)) | (1L << (XMLATTRIBUTES - 768)) | (1L << (XMLCOMMENT - 768)) | (1L << (XMLCONCAT - 768)) | (1L << (XMLDOCUMENT - 768)) | (1L << (XMLELEMENT - 768)) | (1L << (XMLFOREST - 768)) | (1L << (XMLMODIFY - 768)) | (1L << (XMLPARSE - 768)) | (1L << (XMLPI - 768)) | (1L << (XMLQUERY - 768)) | (1L << (XMLSERIALIZE - 768)) | (1L << (XMLTEXT - 768)) | (1L << (XMLXSROBJECTID - 768)) | (1L << (XSLTRANSFORM - 768)) | (1L << (CURRENT_ACCELERATOR - 768)) | (1L << (CURRENT_APPLICATION_COMPATIBILITY - 768)) | (1L << (CURRENT_APPLICATION_ENCODING_SCHEME - 768)) | (1L << (CURRENT_CLIENT_ACCTNG - 768)) | (1L << (CURRENT_CLIENT_APPLNAME - 768)) | (1L << (CURRENT_CLIENT_CORR_TOKEN - 768)) | (1L << (CURRENT_CLIENT_USERID - 768)) | (1L << (CURRENT_CLIENT_WRKSTNNAME - 768)) | (1L << (CURRENT_DATE - 768)) | (1L << (CURRENT_DEBUG_MODE - 768)) | (1L << (CURRENT_DECFLOAT_ROUNDING_MODE - 768)) | (1L << (CURRENT_DEGREE - 768)) | (1L << (CURRENT_EXPLAIN_MODE - 768)) | (1L << (CURRENT_GET_ACCEL_ARCHIVE - 768)) | (1L << (CURRENT_LOCALE_LC_CTYPE - 768)) | (1L << (CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION - 768)) | (1L << (CURRENT_MEMBER - 768)) | (1L << (CURRENT_OPTIMIZATION_HINT - 768)) | (1L << (CURRENT_PACKAGE_PATH - 768)) | (1L << (CURRENT_PACKAGESET - 768)) | (1L << (CURRENT_PATH - 768)) | (1L << (CURRENT_PRECISION - 768)) | (1L << (CURRENT_QUERY_ACCELERATION - 768)) | (1L << (CURRENT_QUERY_ACCELERATION_WAITFORDATA - 768)) | (1L << (CURRENT_REFRESH_AGE - 768)) | (1L << (CURRENT_ROUTINE_VERSION - 768)) | (1L << (CURRENT_RULES - 768)) | (1L << (CURRENT_SCHEMA - 768)) | (1L << (CURRENT_SERVER - 768)) | (1L << (CURRENT_SQLID - 768)) | (1L << (CURRENT_TEMPORAL_BUSINESS_TIME - 768)) | (1L << (CURRENT_TEMPORAL_SYSTEM_TIME - 768)) | (1L << (CURRENT_TIME - 768)) | (1L << (CURRENT_TIMESTAMP - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (CURRENT_TIME_ZONE - 832)) | (1L << (ENCRYPTION_PASSWORD - 832)) | (1L << (SESSION_TIME_ZONE - 832)) | (1L << (SESSION_USER - 832)) | (1L << (USER - 832)) | (1L << (ADMIN_TASK_LIST - 832)) | (1L << (ADMIN_TASK_OUTPUT - 832)) | (1L << (ADMIN_TASK_STATUS - 832)) | (1L << (BLOCKING_THREADS - 832)) | (1L << (MQREADALL - 832)) | (1L << (MQREADALLCLOB - 832)) | (1L << (MQRECEIVEALL - 832)) | (1L << (MQRECEIVEALLCLOB - 832)) | (1L << (XMLTABLE - 832)) | (1L << (SQLIDENTIFIER - 832)))) != 0)) {
				{
				{
				setState(4731);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,520,_ctx) ) {
				case 1:
					{
					setState(4730);
					operator();
					}
					break;
				}
				setState(4733);
				expression();
				}
				}
				setState(4738);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArrayConstructorContext extends ParserRuleContext {
		public TerminalNode ARRAY() { return getToken(DB2zSQLParser.ARRAY, 0); }
		public TerminalNode OPENSQBRACKET() { return getToken(DB2zSQLParser.OPENSQBRACKET, 0); }
		public TerminalNode CLOSESQBRACKET() { return getToken(DB2zSQLParser.CLOSESQBRACKET, 0); }
		public TerminalNode QUESTIONMARK() { return getToken(DB2zSQLParser.QUESTIONMARK, 0); }
		public FullSelectContext fullSelect() {
			return getRuleContext(FullSelectContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> NULL() { return getTokens(DB2zSQLParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(DB2zSQLParser.NULL, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public ArrayConstructorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arrayConstructor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterArrayConstructor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitArrayConstructor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitArrayConstructor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArrayConstructorContext arrayConstructor() throws RecognitionException {
		ArrayConstructorContext _localctx = new ArrayConstructorContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_arrayConstructor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4739);
			match(ARRAY);
			setState(4740);
			match(OPENSQBRACKET);
			setState(4757);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,525,_ctx) ) {
			case 1:
				{
				setState(4741);
				match(QUESTIONMARK);
				}
				break;
			case 2:
				{
				setState(4742);
				fullSelect();
				}
				break;
			case 3:
				{
				{
				setState(4745);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,522,_ctx) ) {
				case 1:
					{
					setState(4743);
					expression();
					}
					break;
				case 2:
					{
					setState(4744);
					match(NULL);
					}
					break;
				}
				setState(4754);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4747);
					match(COMMA);
					setState(4750);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,523,_ctx) ) {
					case 1:
						{
						setState(4748);
						expression();
						}
						break;
					case 2:
						{
						setState(4749);
						match(NULL);
						}
						break;
					}
					}
					}
					setState(4756);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			}
			setState(4759);
			match(CLOSESQBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OlapSpecificationContext extends ParserRuleContext {
		public OrderedOlapSpecificationContext orderedOlapSpecification() {
			return getRuleContext(OrderedOlapSpecificationContext.class,0);
		}
		public NumberingSpecificationContext numberingSpecification() {
			return getRuleContext(NumberingSpecificationContext.class,0);
		}
		public AggregationSpecificationContext aggregationSpecification() {
			return getRuleContext(AggregationSpecificationContext.class,0);
		}
		public OlapSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_olapSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterOlapSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitOlapSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitOlapSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OlapSpecificationContext olapSpecification() throws RecognitionException {
		OlapSpecificationContext _localctx = new OlapSpecificationContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_olapSpecification);
		try {
			setState(4764);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,526,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4761);
				orderedOlapSpecification();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4762);
				numberingSpecification();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4763);
				aggregationSpecification();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderedOlapSpecificationContext extends ParserRuleContext {
		public OlapSpecificationFunctionContext olapSpecificationFunction() {
			return getRuleContext(OlapSpecificationFunctionContext.class,0);
		}
		public TerminalNode OVER() { return getToken(DB2zSQLParser.OVER, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public WindowOrderClauseContext windowOrderClause() {
			return getRuleContext(WindowOrderClauseContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public WindowPartitionClauseContext windowPartitionClause() {
			return getRuleContext(WindowPartitionClauseContext.class,0);
		}
		public OrderedOlapSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderedOlapSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterOrderedOlapSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitOrderedOlapSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitOrderedOlapSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderedOlapSpecificationContext orderedOlapSpecification() throws RecognitionException {
		OrderedOlapSpecificationContext _localctx = new OrderedOlapSpecificationContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_orderedOlapSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4766);
			olapSpecificationFunction();
			setState(4767);
			match(OVER);
			setState(4768);
			match(LPAREN);
			setState(4770);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(4769);
				windowPartitionClause();
				}
			}

			setState(4772);
			windowOrderClause();
			setState(4773);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OlapSpecificationFunctionContext extends ParserRuleContext {
		public LagFunctionContext lagFunction() {
			return getRuleContext(LagFunctionContext.class,0);
		}
		public LeadFunctionContext leadFunction() {
			return getRuleContext(LeadFunctionContext.class,0);
		}
		public TerminalNode CUME_DIST() { return getToken(DB2zSQLParser.CUME_DIST, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(DB2zSQLParser.PERCENT_RANK, 0); }
		public TerminalNode RANK() { return getToken(DB2zSQLParser.RANK, 0); }
		public TerminalNode DENSE_RANK() { return getToken(DB2zSQLParser.DENSE_RANK, 0); }
		public TerminalNode NTILE() { return getToken(DB2zSQLParser.NTILE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public OlapSpecificationFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_olapSpecificationFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterOlapSpecificationFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitOlapSpecificationFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitOlapSpecificationFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OlapSpecificationFunctionContext olapSpecificationFunction() throws RecognitionException {
		OlapSpecificationFunctionContext _localctx = new OlapSpecificationFunctionContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_olapSpecificationFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4794);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CUME_DIST:
				{
				{
				setState(4775);
				match(CUME_DIST);
				setState(4776);
				match(LPAREN);
				setState(4777);
				match(RPAREN);
				}
				}
				break;
			case PERCENT_RANK:
				{
				{
				setState(4778);
				match(PERCENT_RANK);
				setState(4779);
				match(LPAREN);
				setState(4780);
				match(RPAREN);
				}
				}
				break;
			case RANK:
				{
				{
				setState(4781);
				match(RANK);
				setState(4782);
				match(LPAREN);
				setState(4783);
				match(RPAREN);
				}
				}
				break;
			case DENSE_RANK:
				{
				{
				setState(4784);
				match(DENSE_RANK);
				setState(4785);
				match(LPAREN);
				setState(4786);
				match(RPAREN);
				}
				}
				break;
			case NTILE:
				{
				{
				setState(4787);
				match(NTILE);
				setState(4788);
				match(LPAREN);
				setState(4789);
				expression();
				setState(4790);
				match(RPAREN);
				}
				}
				break;
			case LAG:
				{
				setState(4792);
				lagFunction();
				}
				break;
			case LEAD:
				{
				setState(4793);
				leadFunction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LagFunctionContext extends ParserRuleContext {
		public TerminalNode LAG() { return getToken(DB2zSQLParser.LAG, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode RESPECT() { return getToken(DB2zSQLParser.RESPECT, 0); }
		public TerminalNode NULLS() { return getToken(DB2zSQLParser.NULLS, 0); }
		public TerminalNode IGNORE() { return getToken(DB2zSQLParser.IGNORE, 0); }
		public LagFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lagFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterLagFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitLagFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitLagFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LagFunctionContext lagFunction() throws RecognitionException {
		LagFunctionContext _localctx = new LagFunctionContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_lagFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4796);
			match(LAG);
			setState(4797);
			match(LPAREN);
			setState(4798);
			expression();
			{
			setState(4799);
			match(COMMA);
			setState(4800);
			match(INTEGERLITERAL);
			setState(4812);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(4801);
				match(COMMA);
				setState(4802);
				expression();
				setState(4810);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4803);
					match(COMMA);
					setState(4808);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case RESPECT:
						{
						{
						setState(4804);
						match(RESPECT);
						setState(4805);
						match(NULLS);
						}
						}
						break;
					case IGNORE:
						{
						{
						setState(4806);
						match(IGNORE);
						setState(4807);
						match(NULLS);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
			}

			setState(4814);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LeadFunctionContext extends ParserRuleContext {
		public TerminalNode LEAD() { return getToken(DB2zSQLParser.LEAD, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public RespectNullsClauseContext respectNullsClause() {
			return getRuleContext(RespectNullsClauseContext.class,0);
		}
		public LeadFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_leadFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterLeadFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitLeadFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitLeadFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LeadFunctionContext leadFunction() throws RecognitionException {
		LeadFunctionContext _localctx = new LeadFunctionContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_leadFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4816);
			match(LEAD);
			setState(4817);
			match(LPAREN);
			setState(4818);
			expression();
			{
			setState(4819);
			match(COMMA);
			setState(4820);
			match(INTEGERLITERAL);
			setState(4827);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(4821);
				match(COMMA);
				setState(4822);
				expression();
				setState(4825);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4823);
					match(COMMA);
					setState(4824);
					respectNullsClause();
					}
				}

				}
			}

			setState(4829);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RespectNullsClauseContext extends ParserRuleContext {
		public TerminalNode RESPECT() { return getToken(DB2zSQLParser.RESPECT, 0); }
		public TerminalNode NULLS() { return getToken(DB2zSQLParser.NULLS, 0); }
		public TerminalNode IGNORE() { return getToken(DB2zSQLParser.IGNORE, 0); }
		public RespectNullsClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_respectNullsClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRespectNullsClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRespectNullsClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRespectNullsClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RespectNullsClauseContext respectNullsClause() throws RecognitionException {
		RespectNullsClauseContext _localctx = new RespectNullsClauseContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_respectNullsClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4835);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RESPECT:
				{
				{
				setState(4831);
				match(RESPECT);
				setState(4832);
				match(NULLS);
				}
				}
				break;
			case IGNORE:
				{
				{
				setState(4833);
				match(IGNORE);
				setState(4834);
				match(NULLS);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowPartitionClauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(DB2zSQLParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public WindowPartitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowPartitionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterWindowPartitionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitWindowPartitionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitWindowPartitionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowPartitionClauseContext windowPartitionClause() throws RecognitionException {
		WindowPartitionClauseContext _localctx = new WindowPartitionClauseContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_windowPartitionClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4837);
			match(PARTITION);
			setState(4838);
			match(BY);
			setState(4839);
			expression();
			setState(4844);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4840);
				match(COMMA);
				setState(4841);
				expression();
				}
				}
				setState(4846);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowOrderClauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(DB2zSQLParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<WindowOrderClauseQualifierContext> windowOrderClauseQualifier() {
			return getRuleContexts(WindowOrderClauseQualifierContext.class);
		}
		public WindowOrderClauseQualifierContext windowOrderClauseQualifier(int i) {
			return getRuleContext(WindowOrderClauseQualifierContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public WindowOrderClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowOrderClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterWindowOrderClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitWindowOrderClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitWindowOrderClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowOrderClauseContext windowOrderClause() throws RecognitionException {
		WindowOrderClauseContext _localctx = new WindowOrderClauseContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_windowOrderClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4847);
			match(ORDER);
			setState(4848);
			match(BY);
			setState(4849);
			expression();
			setState(4851);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(4850);
				windowOrderClauseQualifier();
				}
			}

			setState(4860);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4853);
				match(COMMA);
				setState(4854);
				expression();
				setState(4856);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					setState(4855);
					windowOrderClauseQualifier();
					}
				}

				}
				}
				setState(4862);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowOrderClauseQualifierContext extends ParserRuleContext {
		public TerminalNode ASC() { return getToken(DB2zSQLParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(DB2zSQLParser.DESC, 0); }
		public TerminalNode NULLS() { return getToken(DB2zSQLParser.NULLS, 0); }
		public TerminalNode FIRST() { return getToken(DB2zSQLParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(DB2zSQLParser.LAST, 0); }
		public WindowOrderClauseQualifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowOrderClauseQualifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterWindowOrderClauseQualifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitWindowOrderClauseQualifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitWindowOrderClauseQualifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowOrderClauseQualifierContext windowOrderClauseQualifier() throws RecognitionException {
		WindowOrderClauseQualifierContext _localctx = new WindowOrderClauseQualifierContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_windowOrderClauseQualifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4863);
			_la = _input.LA(1);
			if ( !(_la==ASC || _la==DESC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4866);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NULLS) {
				{
				setState(4864);
				match(NULLS);
				setState(4865);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumberingSpecificationContext extends ParserRuleContext {
		public TerminalNode ROW_NUMBER() { return getToken(DB2zSQLParser.ROW_NUMBER, 0); }
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public TerminalNode OVER() { return getToken(DB2zSQLParser.OVER, 0); }
		public WindowPartitionClauseContext windowPartitionClause() {
			return getRuleContext(WindowPartitionClauseContext.class,0);
		}
		public WindowOrderClauseContext windowOrderClause() {
			return getRuleContext(WindowOrderClauseContext.class,0);
		}
		public NumberingSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numberingSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterNumberingSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitNumberingSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitNumberingSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumberingSpecificationContext numberingSpecification() throws RecognitionException {
		NumberingSpecificationContext _localctx = new NumberingSpecificationContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_numberingSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4868);
			match(ROW_NUMBER);
			setState(4869);
			match(LPAREN);
			setState(4870);
			match(RPAREN);
			setState(4871);
			match(OVER);
			setState(4872);
			match(LPAREN);
			setState(4874);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(4873);
				windowPartitionClause();
				}
			}

			setState(4877);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(4876);
				windowOrderClause();
				}
			}

			setState(4879);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggregationSpecificationContext extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(DB2zSQLParser.OVER, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public AggregateFunctionInvocationContext aggregateFunctionInvocation() {
			return getRuleContext(AggregateFunctionInvocationContext.class,0);
		}
		public OlapColumnFunctionContext olapColumnFunction() {
			return getRuleContext(OlapColumnFunctionContext.class,0);
		}
		public WindowPartitionClauseContext windowPartitionClause() {
			return getRuleContext(WindowPartitionClauseContext.class,0);
		}
		public TerminalNode RANGE() { return getToken(DB2zSQLParser.RANGE, 0); }
		public TerminalNode BETWEEN() { return getToken(DB2zSQLParser.BETWEEN, 0); }
		public List<TerminalNode> UNBOUNDED() { return getTokens(DB2zSQLParser.UNBOUNDED); }
		public TerminalNode UNBOUNDED(int i) {
			return getToken(DB2zSQLParser.UNBOUNDED, i);
		}
		public TerminalNode PRECEDING() { return getToken(DB2zSQLParser.PRECEDING, 0); }
		public TerminalNode AND() { return getToken(DB2zSQLParser.AND, 0); }
		public TerminalNode FOLLOWING() { return getToken(DB2zSQLParser.FOLLOWING, 0); }
		public WindowOrderClauseContext windowOrderClause() {
			return getRuleContext(WindowOrderClauseContext.class,0);
		}
		public WindowAggregationGroupClauseContext windowAggregationGroupClause() {
			return getRuleContext(WindowAggregationGroupClauseContext.class,0);
		}
		public TerminalNode CURRENT() { return getToken(DB2zSQLParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(DB2zSQLParser.ROW, 0); }
		public AggregationSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregationSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAggregationSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAggregationSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAggregationSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggregationSpecificationContext aggregationSpecification() throws RecognitionException {
		AggregationSpecificationContext _localctx = new AggregationSpecificationContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_aggregationSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4883);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,542,_ctx) ) {
			case 1:
				{
				setState(4881);
				aggregateFunctionInvocation();
				}
				break;
			case 2:
				{
				setState(4882);
				olapColumnFunction();
				}
				break;
			}
			setState(4885);
			match(OVER);
			setState(4886);
			match(LPAREN);
			setState(4888);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(4887);
				windowPartitionClause();
				}
			}

			setState(4908);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RANGE:
				{
				{
				setState(4890);
				match(RANGE);
				setState(4891);
				match(BETWEEN);
				setState(4892);
				match(UNBOUNDED);
				setState(4893);
				match(PRECEDING);
				setState(4894);
				match(AND);
				setState(4895);
				match(UNBOUNDED);
				setState(4896);
				match(FOLLOWING);
				}
				}
				break;
			case ORDER:
				{
				{
				setState(4897);
				windowOrderClause();
				setState(4906);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,544,_ctx) ) {
				case 1:
					{
					{
					setState(4898);
					match(RANGE);
					setState(4899);
					match(BETWEEN);
					setState(4900);
					match(UNBOUNDED);
					setState(4901);
					match(PRECEDING);
					setState(4902);
					match(AND);
					setState(4903);
					match(CURRENT);
					setState(4904);
					match(ROW);
					}
					}
					break;
				case 2:
					{
					setState(4905);
					windowAggregationGroupClause();
					}
					break;
				}
				}
				}
				break;
			case RPAREN:
				break;
			default:
				break;
			}
			setState(4910);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggregateFunctionContext extends ParserRuleContext {
		public TerminalNode ARRAY_AGG() { return getToken(DB2zSQLParser.ARRAY_AGG, 0); }
		public TerminalNode AVG() { return getToken(DB2zSQLParser.AVG, 0); }
		public TerminalNode CORR() { return getToken(DB2zSQLParser.CORR, 0); }
		public TerminalNode CORRELATION() { return getToken(DB2zSQLParser.CORRELATION, 0); }
		public TerminalNode COUNT() { return getToken(DB2zSQLParser.COUNT, 0); }
		public TerminalNode COUNT_BIG() { return getToken(DB2zSQLParser.COUNT_BIG, 0); }
		public TerminalNode COVAR_POP() { return getToken(DB2zSQLParser.COVAR_POP, 0); }
		public TerminalNode COVARIANCE() { return getToken(DB2zSQLParser.COVARIANCE, 0); }
		public TerminalNode COVAR() { return getToken(DB2zSQLParser.COVAR, 0); }
		public TerminalNode COVAR_SAMP() { return getToken(DB2zSQLParser.COVAR_SAMP, 0); }
		public TerminalNode COVARIANCE_SAMP() { return getToken(DB2zSQLParser.COVARIANCE_SAMP, 0); }
		public TerminalNode CUME_DIST() { return getToken(DB2zSQLParser.CUME_DIST, 0); }
		public TerminalNode GROUPING() { return getToken(DB2zSQLParser.GROUPING, 0); }
		public TerminalNode LISTAGG() { return getToken(DB2zSQLParser.LISTAGG, 0); }
		public TerminalNode MAX() { return getToken(DB2zSQLParser.MAX, 0); }
		public TerminalNode MEDIAN() { return getToken(DB2zSQLParser.MEDIAN, 0); }
		public TerminalNode MIN() { return getToken(DB2zSQLParser.MIN, 0); }
		public TerminalNode PERCENTILE_CONT() { return getToken(DB2zSQLParser.PERCENTILE_CONT, 0); }
		public TerminalNode PERCENTILE_DISC() { return getToken(DB2zSQLParser.PERCENTILE_DISC, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(DB2zSQLParser.PERCENT_RANK, 0); }
		public TerminalNode STDDEV_POP() { return getToken(DB2zSQLParser.STDDEV_POP, 0); }
		public TerminalNode STDDEV() { return getToken(DB2zSQLParser.STDDEV, 0); }
		public TerminalNode STDDEV_SAMP() { return getToken(DB2zSQLParser.STDDEV_SAMP, 0); }
		public TerminalNode SUM() { return getToken(DB2zSQLParser.SUM, 0); }
		public TerminalNode VAR_POP() { return getToken(DB2zSQLParser.VAR_POP, 0); }
		public TerminalNode VARIANCE() { return getToken(DB2zSQLParser.VARIANCE, 0); }
		public TerminalNode VAR() { return getToken(DB2zSQLParser.VAR, 0); }
		public TerminalNode VAR_SAMP() { return getToken(DB2zSQLParser.VAR_SAMP, 0); }
		public TerminalNode VARIANCE_SAMP() { return getToken(DB2zSQLParser.VARIANCE_SAMP, 0); }
		public TerminalNode XMLAGG() { return getToken(DB2zSQLParser.XMLAGG, 0); }
		public AggregateFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregateFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAggregateFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAggregateFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAggregateFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggregateFunctionContext aggregateFunction() throws RecognitionException {
		AggregateFunctionContext _localctx = new AggregateFunctionContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_aggregateFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4912);
			_la = _input.LA(1);
			if ( !(((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (ARRAY_AGG - 323)) | (1L << (AVG - 323)) | (1L << (CORR - 323)) | (1L << (CORRELATION - 323)) | (1L << (COUNT - 323)) | (1L << (COUNT_BIG - 323)) | (1L << (COVAR - 323)) | (1L << (COVARIANCE - 323)) | (1L << (COVARIANCE_SAMP - 323)) | (1L << (COVAR_POP - 323)) | (1L << (COVAR_SAMP - 323)) | (1L << (CUME_DIST - 323)) | (1L << (GROUPING - 323)) | (1L << (LISTAGG - 323)) | (1L << (MEDIAN - 323)) | (1L << (PERCENTILE_CONT - 323)) | (1L << (PERCENTILE_DISC - 323)) | (1L << (PERCENT_RANK - 323)))) != 0) || ((((_la - 401)) & ~0x3f) == 0 && ((1L << (_la - 401)) & ((1L << (STDDEV - 401)) | (1L << (STDDEV_POP - 401)) | (1L << (STDDEV_SAMP - 401)) | (1L << (SUM - 401)) | (1L << (VAR - 401)) | (1L << (VARIANCE - 401)) | (1L << (VARIANCE_SAMP - 401)) | (1L << (VAR_POP - 401)) | (1L << (VAR_SAMP - 401)) | (1L << (XMLAGG - 401)))) != 0) || _la==MAX || _la==MIN) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RegressionFunctionContext extends ParserRuleContext {
		public TerminalNode REGR_AVGX() { return getToken(DB2zSQLParser.REGR_AVGX, 0); }
		public TerminalNode REGR_AVGY() { return getToken(DB2zSQLParser.REGR_AVGY, 0); }
		public TerminalNode REGR_COUNT() { return getToken(DB2zSQLParser.REGR_COUNT, 0); }
		public TerminalNode REGR_INTERCEPT() { return getToken(DB2zSQLParser.REGR_INTERCEPT, 0); }
		public TerminalNode REGR_ICPT() { return getToken(DB2zSQLParser.REGR_ICPT, 0); }
		public TerminalNode REGR_R2() { return getToken(DB2zSQLParser.REGR_R2, 0); }
		public TerminalNode REGR_SLOPE() { return getToken(DB2zSQLParser.REGR_SLOPE, 0); }
		public TerminalNode REGR_SXX() { return getToken(DB2zSQLParser.REGR_SXX, 0); }
		public TerminalNode REGR_SXY() { return getToken(DB2zSQLParser.REGR_SXY, 0); }
		public TerminalNode REGR_SYY() { return getToken(DB2zSQLParser.REGR_SYY, 0); }
		public RegressionFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regressionFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRegressionFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRegressionFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRegressionFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RegressionFunctionContext regressionFunction() throws RecognitionException {
		RegressionFunctionContext _localctx = new RegressionFunctionContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_regressionFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4914);
			_la = _input.LA(1);
			if ( !(((((_la - 381)) & ~0x3f) == 0 && ((1L << (_la - 381)) & ((1L << (REGR_AVGX - 381)) | (1L << (REGR_AVGY - 381)) | (1L << (REGR_COUNT - 381)) | (1L << (REGR_ICPT - 381)) | (1L << (REGR_INTERCEPT - 381)) | (1L << (REGR_R2 - 381)) | (1L << (REGR_SLOPE - 381)) | (1L << (REGR_SXX - 381)) | (1L << (REGR_SXY - 381)) | (1L << (REGR_SYY - 381)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OlapColumnFunctionContext extends ParserRuleContext {
		public FirstValueFunctionContext firstValueFunction() {
			return getRuleContext(FirstValueFunctionContext.class,0);
		}
		public LastValueFunctionContext lastValueFunction() {
			return getRuleContext(LastValueFunctionContext.class,0);
		}
		public NthValueFunctionContext nthValueFunction() {
			return getRuleContext(NthValueFunctionContext.class,0);
		}
		public RatioToReportFunctionContext ratioToReportFunction() {
			return getRuleContext(RatioToReportFunctionContext.class,0);
		}
		public OlapColumnFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_olapColumnFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterOlapColumnFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitOlapColumnFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitOlapColumnFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OlapColumnFunctionContext olapColumnFunction() throws RecognitionException {
		OlapColumnFunctionContext _localctx = new OlapColumnFunctionContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_olapColumnFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4920);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FIRST_VALUE:
				{
				setState(4916);
				firstValueFunction();
				}
				break;
			case LAST_VALUE:
				{
				setState(4917);
				lastValueFunction();
				}
				break;
			case NTH_VALUE:
				{
				setState(4918);
				nthValueFunction();
				}
				break;
			case RATIO_TO_REPORT:
				{
				setState(4919);
				ratioToReportFunction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FirstValueFunctionContext extends ParserRuleContext {
		public TerminalNode FIRST_VALUE() { return getToken(DB2zSQLParser.FIRST_VALUE, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode COMMA() { return getToken(DB2zSQLParser.COMMA, 0); }
		public RespectNullsClauseContext respectNullsClause() {
			return getRuleContext(RespectNullsClauseContext.class,0);
		}
		public FirstValueFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_firstValueFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFirstValueFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFirstValueFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFirstValueFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FirstValueFunctionContext firstValueFunction() throws RecognitionException {
		FirstValueFunctionContext _localctx = new FirstValueFunctionContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_firstValueFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4922);
			match(FIRST_VALUE);
			setState(4923);
			match(LPAREN);
			setState(4924);
			expression();
			setState(4927);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(4925);
				match(COMMA);
				setState(4926);
				respectNullsClause();
				}
			}

			setState(4929);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LastValueFunctionContext extends ParserRuleContext {
		public TerminalNode LAST_VALUE() { return getToken(DB2zSQLParser.LAST_VALUE, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode COMMA() { return getToken(DB2zSQLParser.COMMA, 0); }
		public RespectNullsClauseContext respectNullsClause() {
			return getRuleContext(RespectNullsClauseContext.class,0);
		}
		public LastValueFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lastValueFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterLastValueFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitLastValueFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitLastValueFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LastValueFunctionContext lastValueFunction() throws RecognitionException {
		LastValueFunctionContext _localctx = new LastValueFunctionContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_lastValueFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4931);
			match(LAST_VALUE);
			setState(4932);
			match(LPAREN);
			setState(4933);
			expression();
			setState(4936);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(4934);
				match(COMMA);
				setState(4935);
				respectNullsClause();
				}
			}

			setState(4938);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NthValueFunctionContext extends ParserRuleContext {
		public TerminalNode NTH_VALUE() { return getToken(DB2zSQLParser.NTH_VALUE, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(DB2zSQLParser.COMMA, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public NthValueFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nthValueFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterNthValueFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitNthValueFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitNthValueFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NthValueFunctionContext nthValueFunction() throws RecognitionException {
		NthValueFunctionContext _localctx = new NthValueFunctionContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_nthValueFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4940);
			match(NTH_VALUE);
			setState(4941);
			match(LPAREN);
			setState(4942);
			expression();
			setState(4943);
			match(COMMA);
			setState(4944);
			match(INTEGERLITERAL);
			setState(4945);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RatioToReportFunctionContext extends ParserRuleContext {
		public TerminalNode RATIO_TO_REPORT() { return getToken(DB2zSQLParser.RATIO_TO_REPORT, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public RatioToReportFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ratioToReportFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRatioToReportFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRatioToReportFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRatioToReportFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RatioToReportFunctionContext ratioToReportFunction() throws RecognitionException {
		RatioToReportFunctionContext _localctx = new RatioToReportFunctionContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_ratioToReportFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4947);
			match(RATIO_TO_REPORT);
			setState(4948);
			match(LPAREN);
			setState(4949);
			expression();
			setState(4950);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowAggregationGroupClauseContext extends ParserRuleContext {
		public TerminalNode ROWS() { return getToken(DB2zSQLParser.ROWS, 0); }
		public TerminalNode RANGE() { return getToken(DB2zSQLParser.RANGE, 0); }
		public GroupStartContext groupStart() {
			return getRuleContext(GroupStartContext.class,0);
		}
		public GroupBetweenContext groupBetween() {
			return getRuleContext(GroupBetweenContext.class,0);
		}
		public GroupEndContext groupEnd() {
			return getRuleContext(GroupEndContext.class,0);
		}
		public WindowAggregationGroupClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowAggregationGroupClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterWindowAggregationGroupClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitWindowAggregationGroupClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitWindowAggregationGroupClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowAggregationGroupClauseContext windowAggregationGroupClause() throws RecognitionException {
		WindowAggregationGroupClauseContext _localctx = new WindowAggregationGroupClauseContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_windowAggregationGroupClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4952);
			_la = _input.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4956);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,549,_ctx) ) {
			case 1:
				{
				setState(4953);
				groupStart();
				}
				break;
			case 2:
				{
				setState(4954);
				groupBetween();
				}
				break;
			case 3:
				{
				setState(4955);
				groupEnd();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupStartContext extends ParserRuleContext {
		public UnboundedPrecedingContext unboundedPreceding() {
			return getRuleContext(UnboundedPrecedingContext.class,0);
		}
		public BoundedPrecedingContext boundedPreceding() {
			return getRuleContext(BoundedPrecedingContext.class,0);
		}
		public CurrentRowContext currentRow() {
			return getRuleContext(CurrentRowContext.class,0);
		}
		public GroupStartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupStart; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGroupStart(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGroupStart(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGroupStart(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupStartContext groupStart() throws RecognitionException {
		GroupStartContext _localctx = new GroupStartContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_groupStart);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4961);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNBOUNDED:
				{
				setState(4958);
				unboundedPreceding();
				}
				break;
			case INTEGERLITERAL:
				{
				setState(4959);
				boundedPreceding();
				}
				break;
			case CURRENT:
				{
				setState(4960);
				currentRow();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupBetweenContext extends ParserRuleContext {
		public TerminalNode BETWEEN() { return getToken(DB2zSQLParser.BETWEEN, 0); }
		public GroupBound1Context groupBound1() {
			return getRuleContext(GroupBound1Context.class,0);
		}
		public TerminalNode AND() { return getToken(DB2zSQLParser.AND, 0); }
		public GroupBound2Context groupBound2() {
			return getRuleContext(GroupBound2Context.class,0);
		}
		public GroupBetweenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupBetween; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGroupBetween(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGroupBetween(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGroupBetween(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupBetweenContext groupBetween() throws RecognitionException {
		GroupBetweenContext _localctx = new GroupBetweenContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_groupBetween);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4963);
			match(BETWEEN);
			setState(4964);
			groupBound1();
			setState(4965);
			match(AND);
			setState(4966);
			groupBound2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupEndContext extends ParserRuleContext {
		public UnboundedFollowingContext unboundedFollowing() {
			return getRuleContext(UnboundedFollowingContext.class,0);
		}
		public BoundedFollowingContext boundedFollowing() {
			return getRuleContext(BoundedFollowingContext.class,0);
		}
		public GroupEndContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupEnd; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGroupEnd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGroupEnd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGroupEnd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupEndContext groupEnd() throws RecognitionException {
		GroupEndContext _localctx = new GroupEndContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_groupEnd);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4970);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNBOUNDED:
				{
				setState(4968);
				unboundedFollowing();
				}
				break;
			case INTEGERLITERAL:
				{
				setState(4969);
				boundedFollowing();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupBound1Context extends ParserRuleContext {
		public UnboundedPrecedingContext unboundedPreceding() {
			return getRuleContext(UnboundedPrecedingContext.class,0);
		}
		public BoundedPrecedingContext boundedPreceding() {
			return getRuleContext(BoundedPrecedingContext.class,0);
		}
		public BoundedFollowingContext boundedFollowing() {
			return getRuleContext(BoundedFollowingContext.class,0);
		}
		public CurrentRowContext currentRow() {
			return getRuleContext(CurrentRowContext.class,0);
		}
		public GroupBound1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupBound1; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGroupBound1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGroupBound1(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGroupBound1(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupBound1Context groupBound1() throws RecognitionException {
		GroupBound1Context _localctx = new GroupBound1Context(_ctx, getState());
		enterRule(_localctx, 552, RULE_groupBound1);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4976);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,552,_ctx) ) {
			case 1:
				{
				setState(4972);
				unboundedPreceding();
				}
				break;
			case 2:
				{
				setState(4973);
				boundedPreceding();
				}
				break;
			case 3:
				{
				setState(4974);
				boundedFollowing();
				}
				break;
			case 4:
				{
				setState(4975);
				currentRow();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupBound2Context extends ParserRuleContext {
		public UnboundedFollowingContext unboundedFollowing() {
			return getRuleContext(UnboundedFollowingContext.class,0);
		}
		public BoundedPrecedingContext boundedPreceding() {
			return getRuleContext(BoundedPrecedingContext.class,0);
		}
		public BoundedFollowingContext boundedFollowing() {
			return getRuleContext(BoundedFollowingContext.class,0);
		}
		public CurrentRowContext currentRow() {
			return getRuleContext(CurrentRowContext.class,0);
		}
		public GroupBound2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupBound2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGroupBound2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGroupBound2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGroupBound2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupBound2Context groupBound2() throws RecognitionException {
		GroupBound2Context _localctx = new GroupBound2Context(_ctx, getState());
		enterRule(_localctx, 554, RULE_groupBound2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4982);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,553,_ctx) ) {
			case 1:
				{
				setState(4978);
				unboundedFollowing();
				}
				break;
			case 2:
				{
				setState(4979);
				boundedPreceding();
				}
				break;
			case 3:
				{
				setState(4980);
				boundedFollowing();
				}
				break;
			case 4:
				{
				setState(4981);
				currentRow();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnboundedPrecedingContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(DB2zSQLParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(DB2zSQLParser.PRECEDING, 0); }
		public UnboundedPrecedingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unboundedPreceding; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterUnboundedPreceding(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitUnboundedPreceding(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitUnboundedPreceding(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnboundedPrecedingContext unboundedPreceding() throws RecognitionException {
		UnboundedPrecedingContext _localctx = new UnboundedPrecedingContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_unboundedPreceding);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4984);
			match(UNBOUNDED);
			setState(4985);
			match(PRECEDING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnboundedFollowingContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(DB2zSQLParser.UNBOUNDED, 0); }
		public TerminalNode FOLLOWING() { return getToken(DB2zSQLParser.FOLLOWING, 0); }
		public UnboundedFollowingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unboundedFollowing; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterUnboundedFollowing(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitUnboundedFollowing(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitUnboundedFollowing(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnboundedFollowingContext unboundedFollowing() throws RecognitionException {
		UnboundedFollowingContext _localctx = new UnboundedFollowingContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_unboundedFollowing);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4987);
			match(UNBOUNDED);
			setState(4988);
			match(FOLLOWING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BoundedPrecedingContext extends ParserRuleContext {
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode PRECEDING() { return getToken(DB2zSQLParser.PRECEDING, 0); }
		public BoundedPrecedingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boundedPreceding; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterBoundedPreceding(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitBoundedPreceding(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitBoundedPreceding(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BoundedPrecedingContext boundedPreceding() throws RecognitionException {
		BoundedPrecedingContext _localctx = new BoundedPrecedingContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_boundedPreceding);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4990);
			match(INTEGERLITERAL);
			setState(4991);
			match(PRECEDING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BoundedFollowingContext extends ParserRuleContext {
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode FOLLOWING() { return getToken(DB2zSQLParser.FOLLOWING, 0); }
		public BoundedFollowingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boundedFollowing; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterBoundedFollowing(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitBoundedFollowing(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitBoundedFollowing(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BoundedFollowingContext boundedFollowing() throws RecognitionException {
		BoundedFollowingContext _localctx = new BoundedFollowingContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_boundedFollowing);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4993);
			match(INTEGERLITERAL);
			setState(4994);
			match(FOLLOWING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CurrentRowContext extends ParserRuleContext {
		public TerminalNode CURRENT() { return getToken(DB2zSQLParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(DB2zSQLParser.ROW, 0); }
		public CurrentRowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_currentRow; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCurrentRow(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCurrentRow(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCurrentRow(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CurrentRowContext currentRow() throws RecognitionException {
		CurrentRowContext _localctx = new CurrentRowContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_currentRow);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4996);
			match(CURRENT);
			setState(4997);
			match(ROW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScalarFunctionContext extends ParserRuleContext {
		public TerminalNode ABS() { return getToken(DB2zSQLParser.ABS, 0); }
		public TerminalNode ABSVAL() { return getToken(DB2zSQLParser.ABSVAL, 0); }
		public TerminalNode ACOS() { return getToken(DB2zSQLParser.ACOS, 0); }
		public TerminalNode ADD_DAYS() { return getToken(DB2zSQLParser.ADD_DAYS, 0); }
		public TerminalNode ADD_MONTHS() { return getToken(DB2zSQLParser.ADD_MONTHS, 0); }
		public TerminalNode ARRAY_DELETE() { return getToken(DB2zSQLParser.ARRAY_DELETE, 0); }
		public TerminalNode ARRAY_FIRST() { return getToken(DB2zSQLParser.ARRAY_FIRST, 0); }
		public TerminalNode ARRAY_LAST() { return getToken(DB2zSQLParser.ARRAY_LAST, 0); }
		public TerminalNode ARRAY_NEXT() { return getToken(DB2zSQLParser.ARRAY_NEXT, 0); }
		public TerminalNode ARRAY_PRIOR() { return getToken(DB2zSQLParser.ARRAY_PRIOR, 0); }
		public TerminalNode ARRAY_TRIM() { return getToken(DB2zSQLParser.ARRAY_TRIM, 0); }
		public TerminalNode ASCII() { return getToken(DB2zSQLParser.ASCII, 0); }
		public TerminalNode ASCII_CHR() { return getToken(DB2zSQLParser.ASCII_CHR, 0); }
		public TerminalNode ASCIISTR() { return getToken(DB2zSQLParser.ASCIISTR, 0); }
		public TerminalNode ASCII_STR() { return getToken(DB2zSQLParser.ASCII_STR, 0); }
		public TerminalNode ASIN() { return getToken(DB2zSQLParser.ASIN, 0); }
		public TerminalNode ATAN() { return getToken(DB2zSQLParser.ATAN, 0); }
		public TerminalNode ATAN2() { return getToken(DB2zSQLParser.ATAN2, 0); }
		public TerminalNode ATANH() { return getToken(DB2zSQLParser.ATANH, 0); }
		public TerminalNode BIGINT() { return getToken(DB2zSQLParser.BIGINT, 0); }
		public TerminalNode BINARY() { return getToken(DB2zSQLParser.BINARY, 0); }
		public TerminalNode BITAND() { return getToken(DB2zSQLParser.BITAND, 0); }
		public TerminalNode BITANDNOT() { return getToken(DB2zSQLParser.BITANDNOT, 0); }
		public TerminalNode BITNOT() { return getToken(DB2zSQLParser.BITNOT, 0); }
		public TerminalNode BITOR() { return getToken(DB2zSQLParser.BITOR, 0); }
		public TerminalNode BITXOR() { return getToken(DB2zSQLParser.BITXOR, 0); }
		public TerminalNode BLOB() { return getToken(DB2zSQLParser.BLOB, 0); }
		public TerminalNode BTRIM() { return getToken(DB2zSQLParser.BTRIM, 0); }
		public TerminalNode CARDINALITY() { return getToken(DB2zSQLParser.CARDINALITY, 0); }
		public TerminalNode CCSID_ENCODING() { return getToken(DB2zSQLParser.CCSID_ENCODING, 0); }
		public TerminalNode CEIL() { return getToken(DB2zSQLParser.CEIL, 0); }
		public TerminalNode CEILING() { return getToken(DB2zSQLParser.CEILING, 0); }
		public TerminalNode CHAR() { return getToken(DB2zSQLParser.CHAR, 0); }
		public TerminalNode CHAR9() { return getToken(DB2zSQLParser.CHAR9, 0); }
		public TerminalNode CHARACTER_LENGTH() { return getToken(DB2zSQLParser.CHARACTER_LENGTH, 0); }
		public TerminalNode CHAR_LENGTH() { return getToken(DB2zSQLParser.CHAR_LENGTH, 0); }
		public TerminalNode CHR() { return getToken(DB2zSQLParser.CHR, 0); }
		public TerminalNode CLOB() { return getToken(DB2zSQLParser.CLOB, 0); }
		public TerminalNode COALESCE() { return getToken(DB2zSQLParser.COALESCE, 0); }
		public TerminalNode COLLATION_KEY() { return getToken(DB2zSQLParser.COLLATION_KEY, 0); }
		public TerminalNode COMPARE_DECFLOAT() { return getToken(DB2zSQLParser.COMPARE_DECFLOAT, 0); }
		public TerminalNode CONCAT() { return getToken(DB2zSQLParser.CONCAT, 0); }
		public TerminalNode CONTAINS() { return getToken(DB2zSQLParser.CONTAINS, 0); }
		public TerminalNode COS() { return getToken(DB2zSQLParser.COS, 0); }
		public TerminalNode COSH() { return getToken(DB2zSQLParser.COSH, 0); }
		public TerminalNode DATE() { return getToken(DB2zSQLParser.DATE, 0); }
		public TerminalNode DAY() { return getToken(DB2zSQLParser.DAY, 0); }
		public TerminalNode DAYOFMONTH() { return getToken(DB2zSQLParser.DAYOFMONTH, 0); }
		public TerminalNode DAYOFWEEK() { return getToken(DB2zSQLParser.DAYOFWEEK, 0); }
		public TerminalNode DAYOFWEEK_ISO() { return getToken(DB2zSQLParser.DAYOFWEEK_ISO, 0); }
		public TerminalNode DAYOFYEAR() { return getToken(DB2zSQLParser.DAYOFYEAR, 0); }
		public TerminalNode DAYS() { return getToken(DB2zSQLParser.DAYS, 0); }
		public TerminalNode DAYS_BETWEEN() { return getToken(DB2zSQLParser.DAYS_BETWEEN, 0); }
		public TerminalNode DBCLOB() { return getToken(DB2zSQLParser.DBCLOB, 0); }
		public TerminalNode DEC() { return getToken(DB2zSQLParser.DEC, 0); }
		public TerminalNode DECFLOAT() { return getToken(DB2zSQLParser.DECFLOAT, 0); }
		public TerminalNode DECFLOAT_FORMAT() { return getToken(DB2zSQLParser.DECFLOAT_FORMAT, 0); }
		public TerminalNode DECFLOAT_SORTKEY() { return getToken(DB2zSQLParser.DECFLOAT_SORTKEY, 0); }
		public TerminalNode DECIMAL() { return getToken(DB2zSQLParser.DECIMAL, 0); }
		public TerminalNode DECODE() { return getToken(DB2zSQLParser.DECODE, 0); }
		public TerminalNode DECRYPT_BINARY() { return getToken(DB2zSQLParser.DECRYPT_BINARY, 0); }
		public TerminalNode DECRYPT_BIT() { return getToken(DB2zSQLParser.DECRYPT_BIT, 0); }
		public TerminalNode DECRYPT_CHAR() { return getToken(DB2zSQLParser.DECRYPT_CHAR, 0); }
		public TerminalNode DECRYPT_DATAKEY_BIGINT() { return getToken(DB2zSQLParser.DECRYPT_DATAKEY_BIGINT, 0); }
		public TerminalNode DECRYPT_DATAKEY_BIT() { return getToken(DB2zSQLParser.DECRYPT_DATAKEY_BIT, 0); }
		public TerminalNode DECRYPT_DATAKEY_CLOB() { return getToken(DB2zSQLParser.DECRYPT_DATAKEY_CLOB, 0); }
		public TerminalNode DECRYPT_DATAKEY_DBCLOB() { return getToken(DB2zSQLParser.DECRYPT_DATAKEY_DBCLOB, 0); }
		public TerminalNode DECRYPT_DATAKEY_DECIMAL() { return getToken(DB2zSQLParser.DECRYPT_DATAKEY_DECIMAL, 0); }
		public TerminalNode DECRYPT_DATAKEY_INTEGER() { return getToken(DB2zSQLParser.DECRYPT_DATAKEY_INTEGER, 0); }
		public TerminalNode DECRYPT_DATAKEY_VARCHAR() { return getToken(DB2zSQLParser.DECRYPT_DATAKEY_VARCHAR, 0); }
		public TerminalNode DECRYPT_DATAKEY_VARGRAPHIC() { return getToken(DB2zSQLParser.DECRYPT_DATAKEY_VARGRAPHIC, 0); }
		public TerminalNode DECRYPT_DB() { return getToken(DB2zSQLParser.DECRYPT_DB, 0); }
		public TerminalNode DEGREES() { return getToken(DB2zSQLParser.DEGREES, 0); }
		public TerminalNode DIFFERENCE() { return getToken(DB2zSQLParser.DIFFERENCE, 0); }
		public TerminalNode DIGITS() { return getToken(DB2zSQLParser.DIGITS, 0); }
		public TerminalNode DOUBLE() { return getToken(DB2zSQLParser.DOUBLE, 0); }
		public TerminalNode DOUBLE_PRECISION() { return getToken(DB2zSQLParser.DOUBLE_PRECISION, 0); }
		public TerminalNode DSN_XMLVALIDATE() { return getToken(DB2zSQLParser.DSN_XMLVALIDATE, 0); }
		public TerminalNode EBCDIC_CHR() { return getToken(DB2zSQLParser.EBCDIC_CHR, 0); }
		public TerminalNode EBCDIC_STR() { return getToken(DB2zSQLParser.EBCDIC_STR, 0); }
		public TerminalNode ENCRYPT_DATAKEY() { return getToken(DB2zSQLParser.ENCRYPT_DATAKEY, 0); }
		public TerminalNode ENCRYPT_TDES() { return getToken(DB2zSQLParser.ENCRYPT_TDES, 0); }
		public TerminalNode EXP() { return getToken(DB2zSQLParser.EXP, 0); }
		public TerminalNode EXTRACT() { return getToken(DB2zSQLParser.EXTRACT, 0); }
		public TerminalNode FLOAT() { return getToken(DB2zSQLParser.FLOAT, 0); }
		public TerminalNode FLOOR() { return getToken(DB2zSQLParser.FLOOR, 0); }
		public TerminalNode GENERATE_UNIQUE() { return getToken(DB2zSQLParser.GENERATE_UNIQUE, 0); }
		public TerminalNode GENERATE_UNIQUE_BINARY() { return getToken(DB2zSQLParser.GENERATE_UNIQUE_BINARY, 0); }
		public TerminalNode GETHINT() { return getToken(DB2zSQLParser.GETHINT, 0); }
		public TerminalNode GETVARIABLE() { return getToken(DB2zSQLParser.GETVARIABLE, 0); }
		public TerminalNode GRAPHIC() { return getToken(DB2zSQLParser.GRAPHIC, 0); }
		public TerminalNode GREATEST() { return getToken(DB2zSQLParser.GREATEST, 0); }
		public TerminalNode HASH() { return getToken(DB2zSQLParser.HASH, 0); }
		public TerminalNode HASH_CRC32() { return getToken(DB2zSQLParser.HASH_CRC32, 0); }
		public TerminalNode HASH_MD5() { return getToken(DB2zSQLParser.HASH_MD5, 0); }
		public TerminalNode HASH_SHA1() { return getToken(DB2zSQLParser.HASH_SHA1, 0); }
		public TerminalNode HASH_SHA256() { return getToken(DB2zSQLParser.HASH_SHA256, 0); }
		public TerminalNode HEX() { return getToken(DB2zSQLParser.HEX, 0); }
		public TerminalNode HOUR() { return getToken(DB2zSQLParser.HOUR, 0); }
		public TerminalNode IDENTITY_VAL_LOCAL() { return getToken(DB2zSQLParser.IDENTITY_VAL_LOCAL, 0); }
		public TerminalNode IFNULL() { return getToken(DB2zSQLParser.IFNULL, 0); }
		public TerminalNode INSERT() { return getToken(DB2zSQLParser.INSERT, 0); }
		public TerminalNode INSTR() { return getToken(DB2zSQLParser.INSTR, 0); }
		public TerminalNode INT() { return getToken(DB2zSQLParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(DB2zSQLParser.INTEGER, 0); }
		public TerminalNode JULIAN_DAY() { return getToken(DB2zSQLParser.JULIAN_DAY, 0); }
		public TerminalNode LAST_DAY() { return getToken(DB2zSQLParser.LAST_DAY, 0); }
		public TerminalNode LCASE() { return getToken(DB2zSQLParser.LCASE, 0); }
		public TerminalNode LEAST() { return getToken(DB2zSQLParser.LEAST, 0); }
		public TerminalNode LEFT() { return getToken(DB2zSQLParser.LEFT, 0); }
		public TerminalNode LENGTH() { return getToken(DB2zSQLParser.LENGTH, 0); }
		public TerminalNode LN() { return getToken(DB2zSQLParser.LN, 0); }
		public TerminalNode LOCATE() { return getToken(DB2zSQLParser.LOCATE, 0); }
		public TerminalNode LOCATE_IN_STRING() { return getToken(DB2zSQLParser.LOCATE_IN_STRING, 0); }
		public TerminalNode LOG10() { return getToken(DB2zSQLParser.LOG10, 0); }
		public TerminalNode LOWER() { return getToken(DB2zSQLParser.LOWER, 0); }
		public TerminalNode LPAD() { return getToken(DB2zSQLParser.LPAD, 0); }
		public TerminalNode LTRIM() { return getToken(DB2zSQLParser.LTRIM, 0); }
		public TerminalNode MAX_CARDINALITY() { return getToken(DB2zSQLParser.MAX_CARDINALITY, 0); }
		public TerminalNode MICROSECOND() { return getToken(DB2zSQLParser.MICROSECOND, 0); }
		public TerminalNode MIDNIGHT_SECONDS() { return getToken(DB2zSQLParser.MIDNIGHT_SECONDS, 0); }
		public TerminalNode MINUTE() { return getToken(DB2zSQLParser.MINUTE, 0); }
		public TerminalNode MOD() { return getToken(DB2zSQLParser.MOD, 0); }
		public TerminalNode MONTH() { return getToken(DB2zSQLParser.MONTH, 0); }
		public TerminalNode MONTHS_BETWEEN() { return getToken(DB2zSQLParser.MONTHS_BETWEEN, 0); }
		public TerminalNode MQREAD() { return getToken(DB2zSQLParser.MQREAD, 0); }
		public TerminalNode MQREADCLOB() { return getToken(DB2zSQLParser.MQREADCLOB, 0); }
		public TerminalNode MQRECEIVE() { return getToken(DB2zSQLParser.MQRECEIVE, 0); }
		public TerminalNode MQRECEIVECLOB() { return getToken(DB2zSQLParser.MQRECEIVECLOB, 0); }
		public TerminalNode MQSEND() { return getToken(DB2zSQLParser.MQSEND, 0); }
		public TerminalNode MULTIPLY_ALT() { return getToken(DB2zSQLParser.MULTIPLY_ALT, 0); }
		public TerminalNode NEXT_DAY() { return getToken(DB2zSQLParser.NEXT_DAY, 0); }
		public TerminalNode NEXT_MONTH() { return getToken(DB2zSQLParser.NEXT_MONTH, 0); }
		public TerminalNode NORMALIZE_DECFLOAT() { return getToken(DB2zSQLParser.NORMALIZE_DECFLOAT, 0); }
		public TerminalNode NORMALIZE_STRING() { return getToken(DB2zSQLParser.NORMALIZE_STRING, 0); }
		public TerminalNode NULLIF() { return getToken(DB2zSQLParser.NULLIF, 0); }
		public TerminalNode NVL() { return getToken(DB2zSQLParser.NVL, 0); }
		public TerminalNode OVERLAY() { return getToken(DB2zSQLParser.OVERLAY, 0); }
		public TerminalNode PACK() { return getToken(DB2zSQLParser.PACK, 0); }
		public TerminalNode POSITION() { return getToken(DB2zSQLParser.POSITION, 0); }
		public TerminalNode POSSTR() { return getToken(DB2zSQLParser.POSSTR, 0); }
		public TerminalNode POW() { return getToken(DB2zSQLParser.POW, 0); }
		public TerminalNode POWER() { return getToken(DB2zSQLParser.POWER, 0); }
		public TerminalNode QUANTIZE() { return getToken(DB2zSQLParser.QUANTIZE, 0); }
		public TerminalNode QUARTER() { return getToken(DB2zSQLParser.QUARTER, 0); }
		public TerminalNode RADIANS() { return getToken(DB2zSQLParser.RADIANS, 0); }
		public TerminalNode RAISE_ERROR() { return getToken(DB2zSQLParser.RAISE_ERROR, 0); }
		public TerminalNode RAND() { return getToken(DB2zSQLParser.RAND, 0); }
		public TerminalNode RANDOM() { return getToken(DB2zSQLParser.RANDOM, 0); }
		public TerminalNode REAL() { return getToken(DB2zSQLParser.REAL, 0); }
		public TerminalNode REGEXP_COUNT() { return getToken(DB2zSQLParser.REGEXP_COUNT, 0); }
		public TerminalNode REGEXP_INSTR() { return getToken(DB2zSQLParser.REGEXP_INSTR, 0); }
		public TerminalNode REGEXP_LIKE() { return getToken(DB2zSQLParser.REGEXP_LIKE, 0); }
		public TerminalNode REGEXP_REPLACE() { return getToken(DB2zSQLParser.REGEXP_REPLACE, 0); }
		public TerminalNode REGEXP_SUBSTR() { return getToken(DB2zSQLParser.REGEXP_SUBSTR, 0); }
		public TerminalNode REPEAT() { return getToken(DB2zSQLParser.REPEAT, 0); }
		public TerminalNode REPLACE() { return getToken(DB2zSQLParser.REPLACE, 0); }
		public TerminalNode RID() { return getToken(DB2zSQLParser.RID, 0); }
		public TerminalNode RIGHT() { return getToken(DB2zSQLParser.RIGHT, 0); }
		public TerminalNode ROUND() { return getToken(DB2zSQLParser.ROUND, 0); }
		public TerminalNode ROUND_TIMESTAMP() { return getToken(DB2zSQLParser.ROUND_TIMESTAMP, 0); }
		public TerminalNode ROWID() { return getToken(DB2zSQLParser.ROWID, 0); }
		public TerminalNode RPAD() { return getToken(DB2zSQLParser.RPAD, 0); }
		public TerminalNode RTRIM() { return getToken(DB2zSQLParser.RTRIM, 0); }
		public TerminalNode SCORE() { return getToken(DB2zSQLParser.SCORE, 0); }
		public TerminalNode SECOND() { return getToken(DB2zSQLParser.SECOND, 0); }
		public TerminalNode SIGN() { return getToken(DB2zSQLParser.SIGN, 0); }
		public TerminalNode SIN() { return getToken(DB2zSQLParser.SIN, 0); }
		public TerminalNode SINH() { return getToken(DB2zSQLParser.SINH, 0); }
		public TerminalNode SMALLINT() { return getToken(DB2zSQLParser.SMALLINT, 0); }
		public TerminalNode SOAPHTTPC() { return getToken(DB2zSQLParser.SOAPHTTPC, 0); }
		public TerminalNode SOAPHTTPNC() { return getToken(DB2zSQLParser.SOAPHTTPNC, 0); }
		public TerminalNode SOAPHTTPNV() { return getToken(DB2zSQLParser.SOAPHTTPNV, 0); }
		public TerminalNode SOAPHTTPV() { return getToken(DB2zSQLParser.SOAPHTTPV, 0); }
		public TerminalNode SOUNDEX() { return getToken(DB2zSQLParser.SOUNDEX, 0); }
		public TerminalNode SPACE() { return getToken(DB2zSQLParser.SPACE, 0); }
		public TerminalNode SQRT() { return getToken(DB2zSQLParser.SQRT, 0); }
		public TerminalNode STRIP() { return getToken(DB2zSQLParser.STRIP, 0); }
		public TerminalNode STRLEFT() { return getToken(DB2zSQLParser.STRLEFT, 0); }
		public TerminalNode STRPOS() { return getToken(DB2zSQLParser.STRPOS, 0); }
		public TerminalNode STRRIGHT() { return getToken(DB2zSQLParser.STRRIGHT, 0); }
		public TerminalNode SUBSTR() { return getToken(DB2zSQLParser.SUBSTR, 0); }
		public TerminalNode SUBSTRING() { return getToken(DB2zSQLParser.SUBSTRING, 0); }
		public TerminalNode TAN() { return getToken(DB2zSQLParser.TAN, 0); }
		public TerminalNode TANH() { return getToken(DB2zSQLParser.TANH, 0); }
		public TerminalNode TIME() { return getToken(DB2zSQLParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(DB2zSQLParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMPADD() { return getToken(DB2zSQLParser.TIMESTAMPADD, 0); }
		public TerminalNode TIMESTAMPDIFF() { return getToken(DB2zSQLParser.TIMESTAMPDIFF, 0); }
		public TerminalNode TIMESTAMP_FORMAT() { return getToken(DB2zSQLParser.TIMESTAMP_FORMAT, 0); }
		public TerminalNode TIMESTAMP_ISO() { return getToken(DB2zSQLParser.TIMESTAMP_ISO, 0); }
		public TerminalNode TIMESTAMP_TZ() { return getToken(DB2zSQLParser.TIMESTAMP_TZ, 0); }
		public TerminalNode TO_CHAR() { return getToken(DB2zSQLParser.TO_CHAR, 0); }
		public TerminalNode TO_CLOB() { return getToken(DB2zSQLParser.TO_CLOB, 0); }
		public TerminalNode TO_DATE() { return getToken(DB2zSQLParser.TO_DATE, 0); }
		public TerminalNode TO_NUMBER() { return getToken(DB2zSQLParser.TO_NUMBER, 0); }
		public TerminalNode TOTALORDER() { return getToken(DB2zSQLParser.TOTALORDER, 0); }
		public TerminalNode TO_TIMESTAMP() { return getToken(DB2zSQLParser.TO_TIMESTAMP, 0); }
		public TerminalNode TRANSLATE() { return getToken(DB2zSQLParser.TRANSLATE, 0); }
		public TerminalNode TRIM() { return getToken(DB2zSQLParser.TRIM, 0); }
		public TerminalNode TRIM_ARRAY() { return getToken(DB2zSQLParser.TRIM_ARRAY, 0); }
		public TerminalNode TRUNC() { return getToken(DB2zSQLParser.TRUNC, 0); }
		public TerminalNode TRUNCATE() { return getToken(DB2zSQLParser.TRUNCATE, 0); }
		public TerminalNode TRUNC_TIMESTAMP() { return getToken(DB2zSQLParser.TRUNC_TIMESTAMP, 0); }
		public TerminalNode UCASE() { return getToken(DB2zSQLParser.UCASE, 0); }
		public TerminalNode UNICODE() { return getToken(DB2zSQLParser.UNICODE, 0); }
		public TerminalNode UNICODE_STR() { return getToken(DB2zSQLParser.UNICODE_STR, 0); }
		public TerminalNode UNISTR() { return getToken(DB2zSQLParser.UNISTR, 0); }
		public TerminalNode UPPER() { return getToken(DB2zSQLParser.UPPER, 0); }
		public TerminalNode VALUE() { return getToken(DB2zSQLParser.VALUE, 0); }
		public TerminalNode VARBINARY() { return getToken(DB2zSQLParser.VARBINARY, 0); }
		public TerminalNode VARCHAR() { return getToken(DB2zSQLParser.VARCHAR, 0); }
		public TerminalNode VARCHAR9() { return getToken(DB2zSQLParser.VARCHAR9, 0); }
		public TerminalNode VARCHAR_BIT_FORMAT() { return getToken(DB2zSQLParser.VARCHAR_BIT_FORMAT, 0); }
		public TerminalNode VARCHAR_FORMAT() { return getToken(DB2zSQLParser.VARCHAR_FORMAT, 0); }
		public TerminalNode VARGRAPHIC() { return getToken(DB2zSQLParser.VARGRAPHIC, 0); }
		public TerminalNode VERIFY_GROUP_FOR_USER() { return getToken(DB2zSQLParser.VERIFY_GROUP_FOR_USER, 0); }
		public TerminalNode VERIFY_ROLE_FOR_USER() { return getToken(DB2zSQLParser.VERIFY_ROLE_FOR_USER, 0); }
		public TerminalNode VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER() { return getToken(DB2zSQLParser.VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER, 0); }
		public TerminalNode WEEK() { return getToken(DB2zSQLParser.WEEK, 0); }
		public TerminalNode WEEK_ISO() { return getToken(DB2zSQLParser.WEEK_ISO, 0); }
		public TerminalNode WRAP() { return getToken(DB2zSQLParser.WRAP, 0); }
		public TerminalNode XMLATTRIBUTES() { return getToken(DB2zSQLParser.XMLATTRIBUTES, 0); }
		public TerminalNode XMLCOMMENT() { return getToken(DB2zSQLParser.XMLCOMMENT, 0); }
		public TerminalNode XMLCONCAT() { return getToken(DB2zSQLParser.XMLCONCAT, 0); }
		public TerminalNode XMLDOCUMENT() { return getToken(DB2zSQLParser.XMLDOCUMENT, 0); }
		public TerminalNode XMLELEMENT() { return getToken(DB2zSQLParser.XMLELEMENT, 0); }
		public TerminalNode XMLFOREST() { return getToken(DB2zSQLParser.XMLFOREST, 0); }
		public TerminalNode XMLMODIFY() { return getToken(DB2zSQLParser.XMLMODIFY, 0); }
		public TerminalNode XMLNAMESPACES() { return getToken(DB2zSQLParser.XMLNAMESPACES, 0); }
		public TerminalNode XMLPARSE() { return getToken(DB2zSQLParser.XMLPARSE, 0); }
		public TerminalNode XMLPI() { return getToken(DB2zSQLParser.XMLPI, 0); }
		public TerminalNode XMLQUERY() { return getToken(DB2zSQLParser.XMLQUERY, 0); }
		public TerminalNode XMLSERIALIZE() { return getToken(DB2zSQLParser.XMLSERIALIZE, 0); }
		public TerminalNode XMLTEXT() { return getToken(DB2zSQLParser.XMLTEXT, 0); }
		public TerminalNode XMLXSROBJECTID() { return getToken(DB2zSQLParser.XMLXSROBJECTID, 0); }
		public TerminalNode XSLTRANSFORM() { return getToken(DB2zSQLParser.XSLTRANSFORM, 0); }
		public TerminalNode YEAR() { return getToken(DB2zSQLParser.YEAR, 0); }
		public ScalarFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scalarFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterScalarFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitScalarFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitScalarFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ScalarFunctionContext scalarFunction() throws RecognitionException {
		ScalarFunctionContext _localctx = new ScalarFunctionContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_scalarFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4999);
			_la = _input.LA(1);
			if ( !(((((_la - 59)) & ~0x3f) == 0 && ((1L << (_la - 59)) & ((1L << (CHAR - 59)) | (1L << (CONCAT - 59)) | (1L << (CONTAINS - 59)) | (1L << (DAY - 59)) | (1L << (DAYS - 59)) | (1L << (DOUBLE - 59)))) != 0) || ((((_la - 141)) & ~0x3f) == 0 && ((1L << (_la - 141)) & ((1L << (HOUR - 141)) | (1L << (INSERT - 141)) | (1L << (LEFT - 141)) | (1L << (MICROSECOND - 141)) | (1L << (MONTH - 141)))) != 0) || ((((_la - 237)) & ~0x3f) == 0 && ((1L << (_la - 237)) & ((1L << (REPEAT - 237)) | (1L << (RIGHT - 237)) | (1L << (SECOND - 237)) | (1L << (TRUNCATE - 237)))) != 0) || ((((_la - 301)) & ~0x3f) == 0 && ((1L << (_la - 301)) & ((1L << (VALUE - 301)) | (1L << (XMLNAMESPACES - 301)) | (1L << (YEAR - 301)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (ABS - 576)) | (1L << (ABSVAL - 576)) | (1L << (ACOS - 576)) | (1L << (ADD_DAYS - 576)) | (1L << (ADD_MONTHS - 576)) | (1L << (ARRAY_DELETE - 576)) | (1L << (ARRAY_FIRST - 576)) | (1L << (ARRAY_LAST - 576)) | (1L << (ARRAY_NEXT - 576)) | (1L << (ARRAY_PRIOR - 576)) | (1L << (ARRAY_TRIM - 576)) | (1L << (ASCII - 576)) | (1L << (ASCII_CHR - 576)) | (1L << (ASCIISTR - 576)) | (1L << (ASCII_STR - 576)) | (1L << (ASIN - 576)) | (1L << (ATAN - 576)) | (1L << (ATAN2 - 576)) | (1L << (ATANH - 576)) | (1L << (BIGINT - 576)) | (1L << (BINARY - 576)) | (1L << (BITAND - 576)) | (1L << (BITANDNOT - 576)) | (1L << (BITNOT - 576)) | (1L << (BITOR - 576)) | (1L << (BITXOR - 576)) | (1L << (BLOB - 576)) | (1L << (BTRIM - 576)) | (1L << (CARDINALITY - 576)) | (1L << (CCSID_ENCODING - 576)) | (1L << (CEIL - 576)) | (1L << (CEILING - 576)) | (1L << (CHAR9 - 576)) | (1L << (CHARACTER_LENGTH - 576)) | (1L << (CHAR_LENGTH - 576)) | (1L << (CHR - 576)) | (1L << (CLOB - 576)) | (1L << (COALESCE - 576)) | (1L << (COLLATION_KEY - 576)) | (1L << (COMPARE_DECFLOAT - 576)) | (1L << (COS - 576)) | (1L << (COSH - 576)) | (1L << (DATE - 576)) | (1L << (DAYOFMONTH - 576)) | (1L << (DAYOFWEEK - 576)) | (1L << (DAYOFWEEK_ISO - 576)) | (1L << (DAYOFYEAR - 576)) | (1L << (DAYS_BETWEEN - 576)) | (1L << (DBCLOB - 576)) | (1L << (DEC - 576)) | (1L << (DECFLOAT - 576)) | (1L << (DECFLOAT_FORMAT - 576)) | (1L << (DECFLOAT_SORTKEY - 576)) | (1L << (DECIMAL - 576)) | (1L << (DECODE - 576)) | (1L << (DECRYPT_BINARY - 576)) | (1L << (DECRYPT_BIT - 576)) | (1L << (DECRYPT_CHAR - 576)) | (1L << (DECRYPT_DATAKEY_BIGINT - 576)) | (1L << (DECRYPT_DATAKEY_BIT - 576)) | (1L << (DECRYPT_DATAKEY_CLOB - 576)) | (1L << (DECRYPT_DATAKEY_DBCLOB - 576)) | (1L << (DECRYPT_DATAKEY_DECIMAL - 576)) | (1L << (DECRYPT_DATAKEY_INTEGER - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (DECRYPT_DATAKEY_VARCHAR - 640)) | (1L << (DECRYPT_DATAKEY_VARGRAPHIC - 640)) | (1L << (DECRYPT_DB - 640)) | (1L << (DEGREES - 640)) | (1L << (DIFFERENCE - 640)) | (1L << (DIGITS - 640)) | (1L << (DOUBLE_PRECISION - 640)) | (1L << (DSN_XMLVALIDATE - 640)) | (1L << (EBCDIC_CHR - 640)) | (1L << (EBCDIC_STR - 640)) | (1L << (ENCRYPT_DATAKEY - 640)) | (1L << (ENCRYPT_TDES - 640)) | (1L << (EXP - 640)) | (1L << (EXTRACT - 640)) | (1L << (FLOAT - 640)) | (1L << (FLOOR - 640)) | (1L << (GENERATE_UNIQUE - 640)) | (1L << (GENERATE_UNIQUE_BINARY - 640)) | (1L << (GETHINT - 640)) | (1L << (GETVARIABLE - 640)) | (1L << (GRAPHIC - 640)) | (1L << (GREATEST - 640)) | (1L << (HASH - 640)) | (1L << (HASH_CRC32 - 640)) | (1L << (HASH_MD5 - 640)) | (1L << (HASH_SHA1 - 640)) | (1L << (HASH_SHA256 - 640)) | (1L << (HEX - 640)) | (1L << (IDENTITY_VAL_LOCAL - 640)) | (1L << (IFNULL - 640)) | (1L << (INSTR - 640)) | (1L << (INT - 640)) | (1L << (INTEGER - 640)) | (1L << (JULIAN_DAY - 640)) | (1L << (LAST_DAY - 640)) | (1L << (LCASE - 640)) | (1L << (LEAST - 640)) | (1L << (LENGTH - 640)) | (1L << (LN - 640)) | (1L << (LOCATE - 640)) | (1L << (LOCATE_IN_STRING - 640)) | (1L << (LOG10 - 640)) | (1L << (LOWER - 640)) | (1L << (LPAD - 640)) | (1L << (LTRIM - 640)) | (1L << (MAX_CARDINALITY - 640)) | (1L << (MIDNIGHT_SECONDS - 640)) | (1L << (MINUTE - 640)) | (1L << (MOD - 640)) | (1L << (MONTHS_BETWEEN - 640)) | (1L << (MQREAD - 640)) | (1L << (MQREADCLOB - 640)) | (1L << (MQRECEIVE - 640)) | (1L << (MQRECEIVECLOB - 640)) | (1L << (MQSEND - 640)) | (1L << (MULTIPLY_ALT - 640)) | (1L << (NEXT_DAY - 640)) | (1L << (NEXT_MONTH - 640)) | (1L << (NORMALIZE_DECFLOAT - 640)) | (1L << (NORMALIZE_STRING - 640)) | (1L << (NULLIF - 640)) | (1L << (NVL - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (OVERLAY - 704)) | (1L << (PACK - 704)) | (1L << (POSITION - 704)) | (1L << (POSSTR - 704)) | (1L << (POW - 704)) | (1L << (POWER - 704)) | (1L << (QUANTIZE - 704)) | (1L << (QUARTER - 704)) | (1L << (RADIANS - 704)) | (1L << (RAISE_ERROR - 704)) | (1L << (RAND - 704)) | (1L << (RANDOM - 704)) | (1L << (REAL - 704)) | (1L << (REGEXP_COUNT - 704)) | (1L << (REGEXP_INSTR - 704)) | (1L << (REGEXP_LIKE - 704)) | (1L << (REGEXP_REPLACE - 704)) | (1L << (REGEXP_SUBSTR - 704)) | (1L << (REPLACE - 704)) | (1L << (RID - 704)) | (1L << (ROUND - 704)) | (1L << (ROUND_TIMESTAMP - 704)) | (1L << (ROWID - 704)) | (1L << (RPAD - 704)) | (1L << (RTRIM - 704)) | (1L << (SCORE - 704)) | (1L << (SIGN - 704)) | (1L << (SIN - 704)) | (1L << (SINH - 704)) | (1L << (SMALLINT - 704)) | (1L << (SOAPHTTPC - 704)) | (1L << (SOAPHTTPNC - 704)) | (1L << (SOAPHTTPNV - 704)) | (1L << (SOAPHTTPV - 704)) | (1L << (SOUNDEX - 704)) | (1L << (SPACE - 704)) | (1L << (SQRT - 704)) | (1L << (STRIP - 704)) | (1L << (STRLEFT - 704)) | (1L << (STRPOS - 704)) | (1L << (STRRIGHT - 704)) | (1L << (SUBSTR - 704)) | (1L << (SUBSTRING - 704)) | (1L << (TAN - 704)) | (1L << (TANH - 704)) | (1L << (TIME - 704)) | (1L << (TIMESTAMP - 704)) | (1L << (TIMESTAMPADD - 704)) | (1L << (TIMESTAMPDIFF - 704)) | (1L << (TIMESTAMP_FORMAT - 704)) | (1L << (TIMESTAMP_ISO - 704)) | (1L << (TIMESTAMP_TZ - 704)) | (1L << (TO_CHAR - 704)) | (1L << (TO_CLOB - 704)) | (1L << (TO_DATE - 704)) | (1L << (TO_NUMBER - 704)) | (1L << (TOTALORDER - 704)) | (1L << (TO_TIMESTAMP - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRIM - 704)) | (1L << (TRIM_ARRAY - 704)) | (1L << (TRUNC - 704)) | (1L << (TRUNC_TIMESTAMP - 704)) | (1L << (UCASE - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (UNICODE - 768)) | (1L << (UNICODE_STR - 768)) | (1L << (UNISTR - 768)) | (1L << (UPPER - 768)) | (1L << (VARBINARY - 768)) | (1L << (VARCHAR - 768)) | (1L << (VARCHAR9 - 768)) | (1L << (VARCHAR_BIT_FORMAT - 768)) | (1L << (VARCHAR_FORMAT - 768)) | (1L << (VARGRAPHIC - 768)) | (1L << (VERIFY_GROUP_FOR_USER - 768)) | (1L << (VERIFY_ROLE_FOR_USER - 768)) | (1L << (VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER - 768)) | (1L << (WEEK - 768)) | (1L << (WEEK_ISO - 768)) | (1L << (WRAP - 768)) | (1L << (XMLATTRIBUTES - 768)) | (1L << (XMLCOMMENT - 768)) | (1L << (XMLCONCAT - 768)) | (1L << (XMLDOCUMENT - 768)) | (1L << (XMLELEMENT - 768)) | (1L << (XMLFOREST - 768)) | (1L << (XMLMODIFY - 768)) | (1L << (XMLPARSE - 768)) | (1L << (XMLPI - 768)) | (1L << (XMLQUERY - 768)) | (1L << (XMLSERIALIZE - 768)) | (1L << (XMLTEXT - 768)) | (1L << (XMLXSROBJECTID - 768)) | (1L << (XSLTRANSFORM - 768)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableFunctionContext extends ParserRuleContext {
		public TerminalNode ADMIN_TASK_LIST() { return getToken(DB2zSQLParser.ADMIN_TASK_LIST, 0); }
		public TerminalNode ADMIN_TASK_OUTPUT() { return getToken(DB2zSQLParser.ADMIN_TASK_OUTPUT, 0); }
		public TerminalNode ADMIN_TASK_STATUS() { return getToken(DB2zSQLParser.ADMIN_TASK_STATUS, 0); }
		public TerminalNode BLOCKING_THREADS() { return getToken(DB2zSQLParser.BLOCKING_THREADS, 0); }
		public TerminalNode MQREADALL() { return getToken(DB2zSQLParser.MQREADALL, 0); }
		public TerminalNode MQREADALLCLOB() { return getToken(DB2zSQLParser.MQREADALLCLOB, 0); }
		public TerminalNode MQRECEIVEALL() { return getToken(DB2zSQLParser.MQRECEIVEALL, 0); }
		public TerminalNode MQRECEIVEALLCLOB() { return getToken(DB2zSQLParser.MQRECEIVEALLCLOB, 0); }
		public TerminalNode XMLTABLE() { return getToken(DB2zSQLParser.XMLTABLE, 0); }
		public TableFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTableFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTableFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTableFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableFunctionContext tableFunction() throws RecognitionException {
		TableFunctionContext _localctx = new TableFunctionContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_tableFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5001);
			_la = _input.LA(1);
			if ( !(((((_la - 837)) & ~0x3f) == 0 && ((1L << (_la - 837)) & ((1L << (ADMIN_TASK_LIST - 837)) | (1L << (ADMIN_TASK_OUTPUT - 837)) | (1L << (ADMIN_TASK_STATUS - 837)) | (1L << (BLOCKING_THREADS - 837)) | (1L << (MQREADALL - 837)) | (1L << (MQREADALLCLOB - 837)) | (1L << (MQRECEIVEALL - 837)) | (1L << (MQRECEIVEALLCLOB - 837)) | (1L << (XMLTABLE - 837)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SpecialRegisterContext extends ParserRuleContext {
		public TerminalNode CURRENT_ACCELERATOR() { return getToken(DB2zSQLParser.CURRENT_ACCELERATOR, 0); }
		public TerminalNode CURRENT_APPLICATION_COMPATIBILITY() { return getToken(DB2zSQLParser.CURRENT_APPLICATION_COMPATIBILITY, 0); }
		public TerminalNode CURRENT_APPLICATION_ENCODING_SCHEME() { return getToken(DB2zSQLParser.CURRENT_APPLICATION_ENCODING_SCHEME, 0); }
		public TerminalNode CURRENT_CLIENT_ACCTNG() { return getToken(DB2zSQLParser.CURRENT_CLIENT_ACCTNG, 0); }
		public TerminalNode CURRENT_CLIENT_APPLNAME() { return getToken(DB2zSQLParser.CURRENT_CLIENT_APPLNAME, 0); }
		public TerminalNode CURRENT_CLIENT_CORR_TOKEN() { return getToken(DB2zSQLParser.CURRENT_CLIENT_CORR_TOKEN, 0); }
		public TerminalNode CURRENT_CLIENT_USERID() { return getToken(DB2zSQLParser.CURRENT_CLIENT_USERID, 0); }
		public TerminalNode CURRENT_CLIENT_WRKSTNNAME() { return getToken(DB2zSQLParser.CURRENT_CLIENT_WRKSTNNAME, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(DB2zSQLParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_DEBUG_MODE() { return getToken(DB2zSQLParser.CURRENT_DEBUG_MODE, 0); }
		public TerminalNode CURRENT_DECFLOAT_ROUNDING_MODE() { return getToken(DB2zSQLParser.CURRENT_DECFLOAT_ROUNDING_MODE, 0); }
		public TerminalNode CURRENT_DEGREE() { return getToken(DB2zSQLParser.CURRENT_DEGREE, 0); }
		public TerminalNode CURRENT_EXPLAIN_MODE() { return getToken(DB2zSQLParser.CURRENT_EXPLAIN_MODE, 0); }
		public TerminalNode CURRENT_GET_ACCEL_ARCHIVE() { return getToken(DB2zSQLParser.CURRENT_GET_ACCEL_ARCHIVE, 0); }
		public TerminalNode CURRENT_LOCALE_LC_CTYPE() { return getToken(DB2zSQLParser.CURRENT_LOCALE_LC_CTYPE, 0); }
		public TerminalNode CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION() { return getToken(DB2zSQLParser.CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION, 0); }
		public TerminalNode CURRENT_MEMBER() { return getToken(DB2zSQLParser.CURRENT_MEMBER, 0); }
		public TerminalNode CURRENT_OPTIMIZATION_HINT() { return getToken(DB2zSQLParser.CURRENT_OPTIMIZATION_HINT, 0); }
		public TerminalNode CURRENT_PACKAGE_PATH() { return getToken(DB2zSQLParser.CURRENT_PACKAGE_PATH, 0); }
		public TerminalNode CURRENT_PACKAGESET() { return getToken(DB2zSQLParser.CURRENT_PACKAGESET, 0); }
		public TerminalNode CURRENT_PATH() { return getToken(DB2zSQLParser.CURRENT_PATH, 0); }
		public TerminalNode CURRENT_PRECISION() { return getToken(DB2zSQLParser.CURRENT_PRECISION, 0); }
		public TerminalNode CURRENT_QUERY_ACCELERATION() { return getToken(DB2zSQLParser.CURRENT_QUERY_ACCELERATION, 0); }
		public TerminalNode CURRENT_QUERY_ACCELERATION_WAITFORDATA() { return getToken(DB2zSQLParser.CURRENT_QUERY_ACCELERATION_WAITFORDATA, 0); }
		public TerminalNode CURRENT_REFRESH_AGE() { return getToken(DB2zSQLParser.CURRENT_REFRESH_AGE, 0); }
		public TerminalNode CURRENT_ROUTINE_VERSION() { return getToken(DB2zSQLParser.CURRENT_ROUTINE_VERSION, 0); }
		public TerminalNode CURRENT_RULES() { return getToken(DB2zSQLParser.CURRENT_RULES, 0); }
		public TerminalNode CURRENT_SCHEMA() { return getToken(DB2zSQLParser.CURRENT_SCHEMA, 0); }
		public TerminalNode CURRENT_SERVER() { return getToken(DB2zSQLParser.CURRENT_SERVER, 0); }
		public TerminalNode CURRENT_SQLID() { return getToken(DB2zSQLParser.CURRENT_SQLID, 0); }
		public TerminalNode CURRENT_TEMPORAL_BUSINESS_TIME() { return getToken(DB2zSQLParser.CURRENT_TEMPORAL_BUSINESS_TIME, 0); }
		public TerminalNode CURRENT_TEMPORAL_SYSTEM_TIME() { return getToken(DB2zSQLParser.CURRENT_TEMPORAL_SYSTEM_TIME, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(DB2zSQLParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(DB2zSQLParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_TIME_ZONE() { return getToken(DB2zSQLParser.CURRENT_TIME_ZONE, 0); }
		public TerminalNode ENCRYPTION_PASSWORD() { return getToken(DB2zSQLParser.ENCRYPTION_PASSWORD, 0); }
		public TerminalNode SESSION_TIME_ZONE() { return getToken(DB2zSQLParser.SESSION_TIME_ZONE, 0); }
		public TerminalNode SESSION_USER() { return getToken(DB2zSQLParser.SESSION_USER, 0); }
		public TerminalNode USER() { return getToken(DB2zSQLParser.USER, 0); }
		public SpecialRegisterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_specialRegister; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSpecialRegister(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSpecialRegister(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSpecialRegister(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SpecialRegisterContext specialRegister() throws RecognitionException {
		SpecialRegisterContext _localctx = new SpecialRegisterContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_specialRegister);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5003);
			_la = _input.LA(1);
			if ( !(((((_la - 798)) & ~0x3f) == 0 && ((1L << (_la - 798)) & ((1L << (CURRENT_ACCELERATOR - 798)) | (1L << (CURRENT_APPLICATION_COMPATIBILITY - 798)) | (1L << (CURRENT_APPLICATION_ENCODING_SCHEME - 798)) | (1L << (CURRENT_CLIENT_ACCTNG - 798)) | (1L << (CURRENT_CLIENT_APPLNAME - 798)) | (1L << (CURRENT_CLIENT_CORR_TOKEN - 798)) | (1L << (CURRENT_CLIENT_USERID - 798)) | (1L << (CURRENT_CLIENT_WRKSTNNAME - 798)) | (1L << (CURRENT_DATE - 798)) | (1L << (CURRENT_DEBUG_MODE - 798)) | (1L << (CURRENT_DECFLOAT_ROUNDING_MODE - 798)) | (1L << (CURRENT_DEGREE - 798)) | (1L << (CURRENT_EXPLAIN_MODE - 798)) | (1L << (CURRENT_GET_ACCEL_ARCHIVE - 798)) | (1L << (CURRENT_LOCALE_LC_CTYPE - 798)) | (1L << (CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION - 798)) | (1L << (CURRENT_MEMBER - 798)) | (1L << (CURRENT_OPTIMIZATION_HINT - 798)) | (1L << (CURRENT_PACKAGE_PATH - 798)) | (1L << (CURRENT_PACKAGESET - 798)) | (1L << (CURRENT_PATH - 798)) | (1L << (CURRENT_PRECISION - 798)) | (1L << (CURRENT_QUERY_ACCELERATION - 798)) | (1L << (CURRENT_QUERY_ACCELERATION_WAITFORDATA - 798)) | (1L << (CURRENT_REFRESH_AGE - 798)) | (1L << (CURRENT_ROUTINE_VERSION - 798)) | (1L << (CURRENT_RULES - 798)) | (1L << (CURRENT_SCHEMA - 798)) | (1L << (CURRENT_SERVER - 798)) | (1L << (CURRENT_SQLID - 798)) | (1L << (CURRENT_TEMPORAL_BUSINESS_TIME - 798)) | (1L << (CURRENT_TEMPORAL_SYSTEM_TIME - 798)) | (1L << (CURRENT_TIME - 798)) | (1L << (CURRENT_TIMESTAMP - 798)) | (1L << (CURRENT_TIME_ZONE - 798)) | (1L << (ENCRYPTION_PASSWORD - 798)) | (1L << (SESSION_TIME_ZONE - 798)) | (1L << (SESSION_USER - 798)) | (1L << (USER - 798)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmltableFunctionSpecificationContext extends ParserRuleContext {
		public TerminalNode XMLTABLE() { return getToken(DB2zSQLParser.XMLTABLE, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public RowXqueryExpressionConstantContext rowXqueryExpressionConstant() {
			return getRuleContext(RowXqueryExpressionConstantContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public XmlnamespacesDeclarationContext xmlnamespacesDeclaration() {
			return getRuleContext(XmlnamespacesDeclarationContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public TerminalNode PASSING() { return getToken(DB2zSQLParser.PASSING, 0); }
		public List<RowXqueryArgumentContext> rowXqueryArgument() {
			return getRuleContexts(RowXqueryArgumentContext.class);
		}
		public RowXqueryArgumentContext rowXqueryArgument(int i) {
			return getRuleContext(RowXqueryArgumentContext.class,i);
		}
		public TerminalNode COLUMNS() { return getToken(DB2zSQLParser.COLUMNS, 0); }
		public List<XmlTableRegularColumnDefinitionContext> xmlTableRegularColumnDefinition() {
			return getRuleContexts(XmlTableRegularColumnDefinitionContext.class);
		}
		public XmlTableRegularColumnDefinitionContext xmlTableRegularColumnDefinition(int i) {
			return getRuleContext(XmlTableRegularColumnDefinitionContext.class,i);
		}
		public List<XmlTableOrdinalityColumnDefinitionContext> xmlTableOrdinalityColumnDefinition() {
			return getRuleContexts(XmlTableOrdinalityColumnDefinitionContext.class);
		}
		public XmlTableOrdinalityColumnDefinitionContext xmlTableOrdinalityColumnDefinition(int i) {
			return getRuleContext(XmlTableOrdinalityColumnDefinitionContext.class,i);
		}
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public TerminalNode REF() { return getToken(DB2zSQLParser.REF, 0); }
		public XmltableFunctionSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmltableFunctionSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterXmltableFunctionSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitXmltableFunctionSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitXmltableFunctionSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmltableFunctionSpecificationContext xmltableFunctionSpecification() throws RecognitionException {
		XmltableFunctionSpecificationContext _localctx = new XmltableFunctionSpecificationContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_xmltableFunctionSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5005);
			match(XMLTABLE);
			setState(5006);
			match(LPAREN);
			setState(5010);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==XMLNAMESPACES) {
				{
				setState(5007);
				xmlnamespacesDeclaration();
				setState(5008);
				match(COMMA);
				}
			}

			setState(5012);
			rowXqueryExpressionConstant();
			setState(5022);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PASSING) {
				{
				setState(5013);
				match(PASSING);
				setState(5016);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,555,_ctx) ) {
				case 1:
					{
					setState(5014);
					match(BY);
					setState(5015);
					match(REF);
					}
					break;
				}
				setState(5018);
				rowXqueryArgument();
				{
				setState(5019);
				match(COMMA);
				setState(5020);
				rowXqueryArgument();
				}
				}
			}

			setState(5039);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMNS) {
				{
				setState(5024);
				match(COLUMNS);
				setState(5027);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,557,_ctx) ) {
				case 1:
					{
					setState(5025);
					xmlTableRegularColumnDefinition();
					}
					break;
				case 2:
					{
					setState(5026);
					xmlTableOrdinalityColumnDefinition();
					}
					break;
				}
				setState(5036);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5029);
					match(COMMA);
					setState(5032);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,558,_ctx) ) {
					case 1:
						{
						setState(5030);
						xmlTableRegularColumnDefinition();
						}
						break;
					case 2:
						{
						setState(5031);
						xmlTableOrdinalityColumnDefinition();
						}
						break;
					}
					}
					}
					setState(5038);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(5041);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowXqueryExpressionConstantContext extends ParserRuleContext {
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public RowXqueryExpressionConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowXqueryExpressionConstant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRowXqueryExpressionConstant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRowXqueryExpressionConstant(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRowXqueryExpressionConstant(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowXqueryExpressionConstantContext rowXqueryExpressionConstant() throws RecognitionException {
		RowXqueryExpressionConstantContext _localctx = new RowXqueryExpressionConstantContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_rowXqueryExpressionConstant);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5043);
			match(NONNUMERICLITERAL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowXqueryArgumentContext extends ParserRuleContext {
		public XqueryContextItemExpressionContext xqueryContextItemExpression() {
			return getRuleContext(XqueryContextItemExpressionContext.class,0);
		}
		public XqueryVariableExpressionContext xqueryVariableExpression() {
			return getRuleContext(XqueryVariableExpressionContext.class,0);
		}
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public RowXqueryArgumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowXqueryArgument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRowXqueryArgument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRowXqueryArgument(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRowXqueryArgument(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowXqueryArgumentContext rowXqueryArgument() throws RecognitionException {
		RowXqueryArgumentContext _localctx = new RowXqueryArgumentContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_rowXqueryArgument);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5050);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,561,_ctx) ) {
			case 1:
				{
				setState(5045);
				xqueryContextItemExpression();
				}
				break;
			case 2:
				{
				{
				setState(5046);
				xqueryVariableExpression();
				setState(5047);
				match(AS);
				setState(5048);
				identifier();
				}
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XqueryContextItemExpressionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public XqueryContextItemExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xqueryContextItemExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterXqueryContextItemExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitXqueryContextItemExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitXqueryContextItemExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XqueryContextItemExpressionContext xqueryContextItemExpression() throws RecognitionException {
		XqueryContextItemExpressionContext _localctx = new XqueryContextItemExpressionContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_xqueryContextItemExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5052);
			expression();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XqueryVariableExpressionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public XqueryVariableExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xqueryVariableExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterXqueryVariableExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitXqueryVariableExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitXqueryVariableExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XqueryVariableExpressionContext xqueryVariableExpression() throws RecognitionException {
		XqueryVariableExpressionContext _localctx = new XqueryVariableExpressionContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_xqueryVariableExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5054);
			expression();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlTableRegularColumnDefinitionContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public DefaultClauseContext defaultClause() {
			return getRuleContext(DefaultClauseContext.class,0);
		}
		public TerminalNode PATH() { return getToken(DB2zSQLParser.PATH, 0); }
		public ColumnXqueryExpressionConstantContext columnXqueryExpressionConstant() {
			return getRuleContext(ColumnXqueryExpressionConstantContext.class,0);
		}
		public XmlTableRegularColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlTableRegularColumnDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterXmlTableRegularColumnDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitXmlTableRegularColumnDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitXmlTableRegularColumnDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlTableRegularColumnDefinitionContext xmlTableRegularColumnDefinition() throws RecognitionException {
		XmlTableRegularColumnDefinitionContext _localctx = new XmlTableRegularColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_xmlTableRegularColumnDefinition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5056);
			columnName();
			setState(5057);
			dataType();
			setState(5061);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFAULT:
			case WITH:
				{
				setState(5058);
				defaultClause();
				}
				break;
			case PATH:
				{
				{
				setState(5059);
				match(PATH);
				setState(5060);
				columnXqueryExpressionConstant();
				}
				}
				break;
			case RPAREN:
			case COMMA:
				break;
			default:
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaultClauseContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(DB2zSQLParser.DEFAULT, 0); }
		public DefaultClauseAllowablesContext defaultClauseAllowables() {
			return getRuleContext(DefaultClauseAllowablesContext.class,0);
		}
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public DistinctTypeCastFunctionNameContext distinctTypeCastFunctionName() {
			return getRuleContext(DistinctTypeCastFunctionNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public DefaultClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDefaultClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDefaultClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDefaultClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefaultClauseContext defaultClause() throws RecognitionException {
		DefaultClauseContext _localctx = new DefaultClauseContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_defaultClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5064);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5063);
				match(WITH);
				}
			}

			setState(5066);
			match(DEFAULT);
			setState(5073);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,564,_ctx) ) {
			case 1:
				{
				setState(5067);
				defaultClauseAllowables();
				}
				break;
			case 2:
				{
				{
				setState(5068);
				distinctTypeCastFunctionName();
				setState(5069);
				match(LPAREN);
				setState(5070);
				defaultClauseAllowables();
				setState(5071);
				match(RPAREN);
				}
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaultClause1Context extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(DB2zSQLParser.DEFAULT, 0); }
		public DefaultClauseAllowablesContext defaultClauseAllowables() {
			return getRuleContext(DefaultClauseAllowablesContext.class,0);
		}
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public DefaultClause1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultClause1; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDefaultClause1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDefaultClause1(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDefaultClause1(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefaultClause1Context defaultClause1() throws RecognitionException {
		DefaultClause1Context _localctx = new DefaultClause1Context(_ctx, getState());
		enterRule(_localctx, 586, RULE_defaultClause1);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5076);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5075);
				match(WITH);
				}
			}

			setState(5078);
			match(DEFAULT);
			setState(5079);
			defaultClauseAllowables();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaultClause2Context extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(DB2zSQLParser.DEFAULT, 0); }
		public DefaultClauseAllowablesContext defaultClauseAllowables() {
			return getRuleContext(DefaultClauseAllowablesContext.class,0);
		}
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public DistinctTypeCastFunctionNameContext distinctTypeCastFunctionName() {
			return getRuleContext(DistinctTypeCastFunctionNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public DefaultClause2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultClause2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDefaultClause2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDefaultClause2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDefaultClause2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefaultClause2Context defaultClause2() throws RecognitionException {
		DefaultClause2Context _localctx = new DefaultClause2Context(_ctx, getState());
		enterRule(_localctx, 588, RULE_defaultClause2);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5082);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5081);
				match(WITH);
				}
			}

			setState(5084);
			match(DEFAULT);
			setState(5091);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,567,_ctx) ) {
			case 1:
				{
				setState(5085);
				defaultClauseAllowables();
				}
				break;
			case 2:
				{
				{
				setState(5086);
				distinctTypeCastFunctionName();
				setState(5087);
				match(LPAREN);
				setState(5088);
				defaultClauseAllowables();
				setState(5089);
				match(RPAREN);
				}
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaultClauseAllowablesContext extends ParserRuleContext {
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public TerminalNode SESSION_USER() { return getToken(DB2zSQLParser.SESSION_USER, 0); }
		public TerminalNode USER() { return getToken(DB2zSQLParser.USER, 0); }
		public TerminalNode CURRENT_SQLID() { return getToken(DB2zSQLParser.CURRENT_SQLID, 0); }
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public DefaultClauseAllowablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultClauseAllowables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDefaultClauseAllowables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDefaultClauseAllowables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDefaultClauseAllowables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefaultClauseAllowablesContext defaultClauseAllowables() throws RecognitionException {
		DefaultClauseAllowablesContext _localctx = new DefaultClauseAllowablesContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_defaultClauseAllowables);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5098);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NONNUMERICLITERAL:
			case INTEGERLITERAL:
			case NUMERICLITERAL:
				{
				setState(5093);
				literal();
				}
				break;
			case SESSION_USER:
				{
				setState(5094);
				match(SESSION_USER);
				}
				break;
			case USER:
				{
				setState(5095);
				match(USER);
				}
				break;
			case CURRENT_SQLID:
				{
				setState(5096);
				match(CURRENT_SQLID);
				}
				break;
			case NULL:
				{
				setState(5097);
				match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DistinctTypeCastFunctionNameContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public DistinctTypeCastFunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_distinctTypeCastFunctionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDistinctTypeCastFunctionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDistinctTypeCastFunctionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDistinctTypeCastFunctionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DistinctTypeCastFunctionNameContext distinctTypeCastFunctionName() throws RecognitionException {
		DistinctTypeCastFunctionNameContext _localctx = new DistinctTypeCastFunctionNameContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_distinctTypeCastFunctionName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5100);
			identifier();
			setState(5101);
			match(DOT);
			setState(5102);
			identifier();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnXqueryExpressionConstantContext extends ParserRuleContext {
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public ColumnXqueryExpressionConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnXqueryExpressionConstant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterColumnXqueryExpressionConstant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitColumnXqueryExpressionConstant(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitColumnXqueryExpressionConstant(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnXqueryExpressionConstantContext columnXqueryExpressionConstant() throws RecognitionException {
		ColumnXqueryExpressionConstantContext _localctx = new ColumnXqueryExpressionConstantContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_columnXqueryExpressionConstant);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5104);
			match(NONNUMERICLITERAL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlTableOrdinalityColumnDefinitionContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode ORDINALITY() { return getToken(DB2zSQLParser.ORDINALITY, 0); }
		public XmlTableOrdinalityColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlTableOrdinalityColumnDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterXmlTableOrdinalityColumnDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitXmlTableOrdinalityColumnDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitXmlTableOrdinalityColumnDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlTableOrdinalityColumnDefinitionContext xmlTableOrdinalityColumnDefinition() throws RecognitionException {
		XmlTableOrdinalityColumnDefinitionContext _localctx = new XmlTableOrdinalityColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_xmlTableOrdinalityColumnDefinition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5106);
			columnName();
			setState(5107);
			match(FOR);
			setState(5108);
			match(ORDINALITY);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlnamespacesDeclarationContext extends ParserRuleContext {
		public List<XmlnamespacesFunctionSpecificationContext> xmlnamespacesFunctionSpecification() {
			return getRuleContexts(XmlnamespacesFunctionSpecificationContext.class);
		}
		public XmlnamespacesFunctionSpecificationContext xmlnamespacesFunctionSpecification(int i) {
			return getRuleContext(XmlnamespacesFunctionSpecificationContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public XmlnamespacesDeclarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlnamespacesDeclaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterXmlnamespacesDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitXmlnamespacesDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitXmlnamespacesDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlnamespacesDeclarationContext xmlnamespacesDeclaration() throws RecognitionException {
		XmlnamespacesDeclarationContext _localctx = new XmlnamespacesDeclarationContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_xmlnamespacesDeclaration);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5110);
			xmlnamespacesFunctionSpecification();
			setState(5115);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,569,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5111);
					match(COMMA);
					setState(5112);
					xmlnamespacesFunctionSpecification();
					}
					} 
				}
				setState(5117);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,569,_ctx);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlnamespacesFunctionSpecificationContext extends ParserRuleContext {
		public TerminalNode XMLNAMESPACES() { return getToken(DB2zSQLParser.XMLNAMESPACES, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<XmlnamespacesFunctionArgumentsContext> xmlnamespacesFunctionArguments() {
			return getRuleContexts(XmlnamespacesFunctionArgumentsContext.class);
		}
		public XmlnamespacesFunctionArgumentsContext xmlnamespacesFunctionArguments(int i) {
			return getRuleContext(XmlnamespacesFunctionArgumentsContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public XmlnamespacesFunctionSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlnamespacesFunctionSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterXmlnamespacesFunctionSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitXmlnamespacesFunctionSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitXmlnamespacesFunctionSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlnamespacesFunctionSpecificationContext xmlnamespacesFunctionSpecification() throws RecognitionException {
		XmlnamespacesFunctionSpecificationContext _localctx = new XmlnamespacesFunctionSpecificationContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_xmlnamespacesFunctionSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5118);
			match(XMLNAMESPACES);
			setState(5119);
			match(LPAREN);
			setState(5120);
			xmlnamespacesFunctionArguments();
			setState(5125);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5121);
				match(COMMA);
				setState(5122);
				xmlnamespacesFunctionArguments();
				}
				}
				setState(5127);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5128);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlnamespacesFunctionArgumentsContext extends ParserRuleContext {
		public NamespaceUriContext namespaceUri() {
			return getRuleContext(NamespaceUriContext.class,0);
		}
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public NamespacePrefixContext namespacePrefix() {
			return getRuleContext(NamespacePrefixContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(DB2zSQLParser.DEFAULT, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public XmlnamespacesFunctionArgumentsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlnamespacesFunctionArguments; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterXmlnamespacesFunctionArguments(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitXmlnamespacesFunctionArguments(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitXmlnamespacesFunctionArguments(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlnamespacesFunctionArgumentsContext xmlnamespacesFunctionArguments() throws RecognitionException {
		XmlnamespacesFunctionArgumentsContext _localctx = new XmlnamespacesFunctionArgumentsContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_xmlnamespacesFunctionArguments);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5138);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NONNUMERICLITERAL:
				{
				{
				setState(5130);
				namespaceUri();
				setState(5131);
				match(AS);
				setState(5132);
				namespacePrefix();
				}
				}
				break;
			case DEFAULT:
				{
				{
				setState(5134);
				match(DEFAULT);
				setState(5135);
				namespaceUri();
				}
				}
				break;
			case NO:
				{
				{
				setState(5136);
				match(NO);
				setState(5137);
				match(DEFAULT);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NamespaceUriContext extends ParserRuleContext {
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public NamespaceUriContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_namespaceUri; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterNamespaceUri(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitNamespaceUri(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitNamespaceUri(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NamespaceUriContext namespaceUri() throws RecognitionException {
		NamespaceUriContext _localctx = new NamespaceUriContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_namespaceUri);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5140);
			match(NONNUMERICLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NamespacePrefixContext extends ParserRuleContext {
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public NamespacePrefixContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_namespacePrefix; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterNamespacePrefix(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitNamespacePrefix(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitNamespacePrefix(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NamespacePrefixContext namespacePrefix() throws RecognitionException {
		NamespacePrefixContext _localctx = new NamespacePrefixContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_namespacePrefix);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5142);
			match(NONNUMERICLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TimeZoneSpecificExpressionContext extends ParserRuleContext {
		public List<TimeZoneExpressionSubsetContext> timeZoneExpressionSubset() {
			return getRuleContexts(TimeZoneExpressionSubsetContext.class);
		}
		public TimeZoneExpressionSubsetContext timeZoneExpressionSubset(int i) {
			return getRuleContext(TimeZoneExpressionSubsetContext.class,i);
		}
		public TerminalNode AT() { return getToken(DB2zSQLParser.AT, 0); }
		public TerminalNode LOCAL() { return getToken(DB2zSQLParser.LOCAL, 0); }
		public TerminalNode TIME() { return getToken(DB2zSQLParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(DB2zSQLParser.ZONE, 0); }
		public TimeZoneSpecificExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timeZoneSpecificExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTimeZoneSpecificExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTimeZoneSpecificExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTimeZoneSpecificExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TimeZoneSpecificExpressionContext timeZoneSpecificExpression() throws RecognitionException {
		TimeZoneSpecificExpressionContext _localctx = new TimeZoneSpecificExpressionContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_timeZoneSpecificExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5144);
			timeZoneExpressionSubset();
			setState(5151);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,572,_ctx) ) {
			case 1:
				{
				{
				setState(5145);
				match(AT);
				setState(5146);
				match(LOCAL);
				}
				}
				break;
			case 2:
				{
				{
				setState(5147);
				match(AT);
				setState(5148);
				match(TIME);
				setState(5149);
				match(ZONE);
				setState(5150);
				timeZoneExpressionSubset();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TimeZoneExpressionSubsetContext extends ParserRuleContext {
		public FunctionInvocationContext functionInvocation() {
			return getRuleContext(FunctionInvocationContext.class,0);
		}
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public SpecialRegisterContext specialRegister() {
			return getRuleContext(SpecialRegisterContext.class,0);
		}
		public ScalarFullSelectContext scalarFullSelect() {
			return getRuleContext(ScalarFullSelectContext.class,0);
		}
		public CaseExpressionContext caseExpression() {
			return getRuleContext(CaseExpressionContext.class,0);
		}
		public CastSpecificationContext castSpecification() {
			return getRuleContext(CastSpecificationContext.class,0);
		}
		public TimeZoneExpressionSubsetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timeZoneExpressionSubset; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTimeZoneExpressionSubset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTimeZoneExpressionSubset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTimeZoneExpressionSubset(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TimeZoneExpressionSubsetContext timeZoneExpressionSubset() throws RecognitionException {
		TimeZoneExpressionSubsetContext _localctx = new TimeZoneExpressionSubsetContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_timeZoneExpressionSubset);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5161);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,573,_ctx) ) {
			case 1:
				{
				setState(5153);
				functionInvocation();
				}
				break;
			case 2:
				{
				setState(5154);
				literal();
				}
				break;
			case 3:
				{
				setState(5155);
				columnName();
				}
				break;
			case 4:
				{
				setState(5156);
				hostVariable();
				}
				break;
			case 5:
				{
				setState(5157);
				specialRegister();
				}
				break;
			case 6:
				{
				setState(5158);
				scalarFullSelect();
				}
				break;
			case 7:
				{
				setState(5159);
				caseExpression();
				}
				break;
			case 8:
				{
				setState(5160);
				castSpecification();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseExpressionContext extends ParserRuleContext {
		public TerminalNode CASE() { return getToken(DB2zSQLParser.CASE, 0); }
		public TerminalNode END() { return getToken(DB2zSQLParser.END, 0); }
		public List<SearchedWhenClauseContext> searchedWhenClause() {
			return getRuleContexts(SearchedWhenClauseContext.class);
		}
		public SearchedWhenClauseContext searchedWhenClause(int i) {
			return getRuleContext(SearchedWhenClauseContext.class,i);
		}
		public List<SimpleWhenClauseContext> simpleWhenClause() {
			return getRuleContexts(SimpleWhenClauseContext.class);
		}
		public SimpleWhenClauseContext simpleWhenClause(int i) {
			return getRuleContext(SimpleWhenClauseContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(DB2zSQLParser.ELSE, 0); }
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public ResultExpressionContext resultExpression() {
			return getRuleContext(ResultExpressionContext.class,0);
		}
		public CaseExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCaseExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCaseExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCaseExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseExpressionContext caseExpression() throws RecognitionException {
		CaseExpressionContext _localctx = new CaseExpressionContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_caseExpression);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5163);
			match(CASE);
			setState(5166); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(5166);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,574,_ctx) ) {
					case 1:
						{
						setState(5164);
						searchedWhenClause();
						}
						break;
					case 2:
						{
						setState(5165);
						simpleWhenClause();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5168); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,575,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(5174);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,576,_ctx) ) {
			case 1:
				{
				{
				setState(5170);
				match(ELSE);
				setState(5171);
				match(NULL);
				}
				}
				break;
			case 2:
				{
				{
				setState(5172);
				match(ELSE);
				setState(5173);
				resultExpression();
				}
				}
				break;
			}
			setState(5176);
			match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResultExpressionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ResultExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resultExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterResultExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitResultExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitResultExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResultExpressionContext resultExpression() throws RecognitionException {
		ResultExpressionContext _localctx = new ResultExpressionContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_resultExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5178);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SearchedWhenClauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(DB2zSQLParser.WHEN, 0); }
		public SearchConditionContext searchCondition() {
			return getRuleContext(SearchConditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(DB2zSQLParser.THEN, 0); }
		public ResultExpressionContext resultExpression() {
			return getRuleContext(ResultExpressionContext.class,0);
		}
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public SearchedWhenClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searchedWhenClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSearchedWhenClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSearchedWhenClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSearchedWhenClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SearchedWhenClauseContext searchedWhenClause() throws RecognitionException {
		SearchedWhenClauseContext _localctx = new SearchedWhenClauseContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_searchedWhenClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5180);
			match(WHEN);
			setState(5181);
			searchCondition();
			setState(5182);
			match(THEN);
			setState(5185);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,577,_ctx) ) {
			case 1:
				{
				setState(5183);
				resultExpression();
				}
				break;
			case 2:
				{
				setState(5184);
				match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleWhenClauseContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode WHEN() { return getToken(DB2zSQLParser.WHEN, 0); }
		public TerminalNode THEN() { return getToken(DB2zSQLParser.THEN, 0); }
		public ResultExpressionContext resultExpression() {
			return getRuleContext(ResultExpressionContext.class,0);
		}
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public SimpleWhenClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleWhenClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSimpleWhenClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSimpleWhenClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSimpleWhenClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleWhenClauseContext simpleWhenClause() throws RecognitionException {
		SimpleWhenClauseContext _localctx = new SimpleWhenClauseContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_simpleWhenClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5187);
			expression();
			setState(5188);
			match(WHEN);
			setState(5189);
			expression();
			setState(5190);
			match(THEN);
			setState(5193);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,578,_ctx) ) {
			case 1:
				{
				setState(5191);
				resultExpression();
				}
				break;
			case 2:
				{
				setState(5192);
				match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SearchConditionContext extends ParserRuleContext {
		public List<TerminalNode> NOT() { return getTokens(DB2zSQLParser.NOT); }
		public TerminalNode NOT(int i) {
			return getToken(DB2zSQLParser.NOT, i);
		}
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public List<SearchConditionContext> searchCondition() {
			return getRuleContexts(SearchConditionContext.class);
		}
		public SearchConditionContext searchCondition(int i) {
			return getRuleContext(SearchConditionContext.class,i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public List<TerminalNode> AND() { return getTokens(DB2zSQLParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(DB2zSQLParser.AND, i);
		}
		public List<TerminalNode> OR() { return getTokens(DB2zSQLParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(DB2zSQLParser.OR, i);
		}
		public TerminalNode SELECTIVITY() { return getToken(DB2zSQLParser.SELECTIVITY, 0); }
		public TerminalNode NUMERICLITERAL() { return getToken(DB2zSQLParser.NUMERICLITERAL, 0); }
		public SearchConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searchCondition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSearchCondition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSearchCondition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSearchCondition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SearchConditionContext searchCondition() throws RecognitionException {
		SearchConditionContext _localctx = new SearchConditionContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_searchCondition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5196);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,579,_ctx) ) {
			case 1:
				{
				setState(5195);
				match(NOT);
				}
				break;
			}
			setState(5207);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,581,_ctx) ) {
			case 1:
				{
				{
				setState(5198);
				predicate();
				setState(5201);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SELECTIVITY) {
					{
					setState(5199);
					match(SELECTIVITY);
					setState(5200);
					match(NUMERICLITERAL);
					}
				}

				}
				}
				break;
			case 2:
				{
				{
				setState(5203);
				match(LPAREN);
				setState(5204);
				searchCondition();
				setState(5205);
				match(RPAREN);
				}
				}
				break;
			}
			setState(5222);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR || _la==AND) {
				{
				{
				setState(5209);
				_la = _input.LA(1);
				if ( !(_la==OR || _la==AND) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5211);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,582,_ctx) ) {
				case 1:
					{
					setState(5210);
					match(NOT);
					}
					break;
				}
				setState(5218);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,583,_ctx) ) {
				case 1:
					{
					setState(5213);
					predicate();
					}
					break;
				case 2:
					{
					{
					setState(5214);
					match(LPAREN);
					setState(5215);
					searchCondition();
					setState(5216);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				setState(5224);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckConditionContext extends ParserRuleContext {
		public SearchConditionContext searchCondition() {
			return getRuleContext(SearchConditionContext.class,0);
		}
		public CheckConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkCondition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCheckCondition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCheckCondition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCheckCondition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckConditionContext checkCondition() throws RecognitionException {
		CheckConditionContext _localctx = new CheckConditionContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_checkCondition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5225);
			searchCondition();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PredicateContext extends ParserRuleContext {
		public BasicPredicateContext basicPredicate() {
			return getRuleContext(BasicPredicateContext.class,0);
		}
		public QuantifiedPredicateContext quantifiedPredicate() {
			return getRuleContext(QuantifiedPredicateContext.class,0);
		}
		public ArrayExistsPredicateContext arrayExistsPredicate() {
			return getRuleContext(ArrayExistsPredicateContext.class,0);
		}
		public BetweenPredicateContext betweenPredicate() {
			return getRuleContext(BetweenPredicateContext.class,0);
		}
		public DistinctPredicateContext distinctPredicate() {
			return getRuleContext(DistinctPredicateContext.class,0);
		}
		public ExistsPredicateContext existsPredicate() {
			return getRuleContext(ExistsPredicateContext.class,0);
		}
		public InPredicateContext inPredicate() {
			return getRuleContext(InPredicateContext.class,0);
		}
		public LikePredicateContext likePredicate() {
			return getRuleContext(LikePredicateContext.class,0);
		}
		public NullPredicateContext nullPredicate() {
			return getRuleContext(NullPredicateContext.class,0);
		}
		public XmlExistsPredicateContext xmlExistsPredicate() {
			return getRuleContext(XmlExistsPredicateContext.class,0);
		}
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PredicateContext predicate() throws RecognitionException {
		PredicateContext _localctx = new PredicateContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_predicate);
		try {
			setState(5237);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,585,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5227);
				basicPredicate();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5228);
				quantifiedPredicate();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5229);
				arrayExistsPredicate();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5230);
				betweenPredicate();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5231);
				distinctPredicate();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5232);
				existsPredicate();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5233);
				inPredicate();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5234);
				likePredicate();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5235);
				nullPredicate();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5236);
				xmlExistsPredicate();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BasicPredicateContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public List<RowValueExpressionContext> rowValueExpression() {
			return getRuleContexts(RowValueExpressionContext.class);
		}
		public RowValueExpressionContext rowValueExpression(int i) {
			return getRuleContext(RowValueExpressionContext.class,i);
		}
		public BasicPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_basicPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterBasicPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitBasicPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitBasicPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BasicPredicateContext basicPredicate() throws RecognitionException {
		BasicPredicateContext _localctx = new BasicPredicateContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_basicPredicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5247);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,586,_ctx) ) {
			case 1:
				{
				{
				setState(5239);
				expression();
				setState(5240);
				comparisonOperator();
				setState(5241);
				expression();
				}
				}
				break;
			case 2:
				{
				{
				setState(5243);
				rowValueExpression();
				setState(5244);
				comparisonOperator();
				setState(5245);
				rowValueExpression();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowValueExpressionContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public RowValueExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowValueExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRowValueExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRowValueExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRowValueExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowValueExpressionContext rowValueExpression() throws RecognitionException {
		RowValueExpressionContext _localctx = new RowValueExpressionContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_rowValueExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5249);
			match(LPAREN);
			setState(5250);
			expression();
			setState(5255);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5251);
				match(COMMA);
				setState(5252);
				expression();
				}
				}
				setState(5257);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5258);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QuantifiedPredicateContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public FullSelectContext fullSelect() {
			return getRuleContext(FullSelectContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public RowValueExpressionContext rowValueExpression() {
			return getRuleContext(RowValueExpressionContext.class,0);
		}
		public TerminalNode EQ() { return getToken(DB2zSQLParser.EQ, 0); }
		public TerminalNode NE() { return getToken(DB2zSQLParser.NE, 0); }
		public TerminalNode ALL() { return getToken(DB2zSQLParser.ALL, 0); }
		public TerminalNode SOME() { return getToken(DB2zSQLParser.SOME, 0); }
		public TerminalNode ANY() { return getToken(DB2zSQLParser.ANY, 0); }
		public QuantifiedPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_quantifiedPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterQuantifiedPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitQuantifiedPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitQuantifiedPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QuantifiedPredicateContext quantifiedPredicate() throws RecognitionException {
		QuantifiedPredicateContext _localctx = new QuantifiedPredicateContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_quantifiedPredicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5281);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,588,_ctx) ) {
			case 1:
				{
				{
				setState(5260);
				expression();
				setState(5261);
				comparisonOperator();
				setState(5262);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5263);
				match(LPAREN);
				setState(5264);
				fullSelect();
				setState(5265);
				match(RPAREN);
				}
				}
				break;
			case 2:
				{
				{
				setState(5267);
				rowValueExpression();
				setState(5268);
				match(EQ);
				setState(5269);
				_la = _input.LA(1);
				if ( !(_la==ANY || _la==SOME) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5270);
				match(LPAREN);
				setState(5271);
				fullSelect();
				setState(5272);
				match(RPAREN);
				}
				}
				break;
			case 3:
				{
				{
				setState(5274);
				rowValueExpression();
				setState(5275);
				match(NE);
				setState(5276);
				match(ALL);
				setState(5277);
				match(LPAREN);
				setState(5278);
				fullSelect();
				setState(5279);
				match(RPAREN);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArrayExistsPredicateContext extends ParserRuleContext {
		public TerminalNode ARRAY_EXISTS() { return getToken(DB2zSQLParser.ARRAY_EXISTS, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public ArrayExpressionContext arrayExpression() {
			return getRuleContext(ArrayExpressionContext.class,0);
		}
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public ArrayExistsPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arrayExistsPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterArrayExistsPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitArrayExistsPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitArrayExistsPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArrayExistsPredicateContext arrayExistsPredicate() throws RecognitionException {
		ArrayExistsPredicateContext _localctx = new ArrayExistsPredicateContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_arrayExistsPredicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5283);
			match(ARRAY_EXISTS);
			setState(5284);
			match(LPAREN);
			setState(5285);
			arrayExpression();
			setState(5286);
			match(INTEGERLITERAL);
			setState(5287);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BetweenPredicateContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode BETWEEN() { return getToken(DB2zSQLParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(DB2zSQLParser.AND, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public BetweenPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_betweenPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterBetweenPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitBetweenPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitBetweenPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BetweenPredicateContext betweenPredicate() throws RecognitionException {
		BetweenPredicateContext _localctx = new BetweenPredicateContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_betweenPredicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5289);
			expression();
			setState(5291);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(5290);
				match(NOT);
				}
			}

			setState(5293);
			match(BETWEEN);
			setState(5294);
			expression();
			setState(5295);
			match(AND);
			setState(5296);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DistinctPredicateContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode IS() { return getToken(DB2zSQLParser.IS, 0); }
		public TerminalNode DISTINCT() { return getToken(DB2zSQLParser.DISTINCT, 0); }
		public TerminalNode FROM() { return getToken(DB2zSQLParser.FROM, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public DistinctPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_distinctPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDistinctPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDistinctPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDistinctPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DistinctPredicateContext distinctPredicate() throws RecognitionException {
		DistinctPredicateContext _localctx = new DistinctPredicateContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_distinctPredicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5298);
			expression();
			setState(5299);
			match(IS);
			setState(5301);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(5300);
				match(NOT);
				}
			}

			setState(5303);
			match(DISTINCT);
			setState(5304);
			match(FROM);
			setState(5305);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExistsPredicateContext extends ParserRuleContext {
		public TerminalNode EXISTS() { return getToken(DB2zSQLParser.EXISTS, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public FullSelectContext fullSelect() {
			return getRuleContext(FullSelectContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public ExistsPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_existsPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterExistsPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitExistsPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitExistsPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExistsPredicateContext existsPredicate() throws RecognitionException {
		ExistsPredicateContext _localctx = new ExistsPredicateContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_existsPredicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5307);
			match(EXISTS);
			setState(5308);
			match(LPAREN);
			setState(5309);
			fullSelect();
			setState(5310);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InPredicateContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode IN() { return getToken(DB2zSQLParser.IN, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public FullSelectContext fullSelect() {
			return getRuleContext(FullSelectContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public InPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterInPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitInPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitInPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InPredicateContext inPredicate() throws RecognitionException {
		InPredicateContext _localctx = new InPredicateContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_inPredicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5312);
			expression();
			setState(5314);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(5313);
				match(NOT);
				}
			}

			setState(5316);
			match(IN);
			setState(5332);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,593,_ctx) ) {
			case 1:
				{
				{
				setState(5317);
				match(LPAREN);
				setState(5318);
				fullSelect();
				setState(5319);
				match(RPAREN);
				}
				}
				break;
			case 2:
				{
				{
				setState(5321);
				match(LPAREN);
				setState(5322);
				expression();
				setState(5327);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5323);
					match(COMMA);
					setState(5324);
					expression();
					}
					}
					setState(5329);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5330);
				match(RPAREN);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LikePredicateContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode LIKE() { return getToken(DB2zSQLParser.LIKE, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TerminalNode ESCAPE() { return getToken(DB2zSQLParser.ESCAPE, 0); }
		public LikePredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_likePredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterLikePredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitLikePredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitLikePredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LikePredicateContext likePredicate() throws RecognitionException {
		LikePredicateContext _localctx = new LikePredicateContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_likePredicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5334);
			expression();
			setState(5336);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(5335);
				match(NOT);
				}
			}

			setState(5338);
			match(LIKE);
			setState(5339);
			expression();
			setState(5342);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ESCAPE) {
				{
				setState(5340);
				match(ESCAPE);
				setState(5341);
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NullPredicateContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ISNULL() { return getToken(DB2zSQLParser.ISNULL, 0); }
		public TerminalNode NOTNULL() { return getToken(DB2zSQLParser.NOTNULL, 0); }
		public TerminalNode IS() { return getToken(DB2zSQLParser.IS, 0); }
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public NullPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterNullPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitNullPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitNullPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NullPredicateContext nullPredicate() throws RecognitionException {
		NullPredicateContext _localctx = new NullPredicateContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_nullPredicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5344);
			expression();
			setState(5352);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IS:
				{
				{
				setState(5345);
				match(IS);
				setState(5347);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(5346);
					match(NOT);
					}
				}

				setState(5349);
				match(NULL);
				}
				}
				break;
			case ISNULL:
				{
				setState(5350);
				match(ISNULL);
				}
				break;
			case NOTNULL:
				{
				setState(5351);
				match(NOTNULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlExistsPredicateContext extends ParserRuleContext {
		public TerminalNode XMLEXISTS() { return getToken(DB2zSQLParser.XMLEXISTS, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode PASSING() { return getToken(DB2zSQLParser.PASSING, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public TerminalNode REF() { return getToken(DB2zSQLParser.REF, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public XmlExistsPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlExistsPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterXmlExistsPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitXmlExistsPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitXmlExistsPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlExistsPredicateContext xmlExistsPredicate() throws RecognitionException {
		XmlExistsPredicateContext _localctx = new XmlExistsPredicateContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_xmlExistsPredicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5354);
			match(XMLEXISTS);
			setState(5355);
			match(LPAREN);
			setState(5356);
			match(NONNUMERICLITERAL);
			setState(5370);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PASSING) {
				{
				setState(5357);
				match(PASSING);
				setState(5360);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,598,_ctx) ) {
				case 1:
					{
					setState(5358);
					match(BY);
					setState(5359);
					match(REF);
					}
					break;
				}
				setState(5362);
				expression();
				setState(5367);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5363);
					match(COMMA);
					setState(5364);
					expression();
					}
					}
					setState(5369);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(5372);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArrayExpressionContext extends ParserRuleContext {
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public CastSpecificationContext castSpecification() {
			return getRuleContext(CastSpecificationContext.class,0);
		}
		public ArrayExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arrayExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterArrayExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitArrayExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitArrayExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArrayExpressionContext arrayExpression() throws RecognitionException {
		ArrayExpressionContext _localctx = new ArrayExpressionContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_arrayExpression);
		try {
			setState(5376);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,601,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5374);
				variable();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5375);
				castSpecification();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CastSpecificationContext extends ParserRuleContext {
		public TerminalNode CAST() { return getToken(DB2zSQLParser.CAST, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public CastDataTypeContext castDataType() {
			return getRuleContext(CastDataTypeContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public ParameterMarkerContext parameterMarker() {
			return getRuleContext(ParameterMarkerContext.class,0);
		}
		public CastSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_castSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCastSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCastSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCastSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CastSpecificationContext castSpecification() throws RecognitionException {
		CastSpecificationContext _localctx = new CastSpecificationContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_castSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5378);
			match(CAST);
			setState(5379);
			match(LPAREN);
			setState(5383);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,602,_ctx) ) {
			case 1:
				{
				setState(5380);
				expression();
				}
				break;
			case 2:
				{
				setState(5381);
				match(NULL);
				}
				break;
			case 3:
				{
				setState(5382);
				parameterMarker();
				}
				break;
			}
			setState(5385);
			match(AS);
			setState(5386);
			castDataType();
			setState(5387);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterMarkerContext extends ParserRuleContext {
		public TerminalNode QUESTIONMARK() { return getToken(DB2zSQLParser.QUESTIONMARK, 0); }
		public ParameterMarkerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterMarker; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterParameterMarker(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitParameterMarker(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitParameterMarker(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParameterMarkerContext parameterMarker() throws RecognitionException {
		ParameterMarkerContext _localctx = new ParameterMarkerContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_parameterMarker);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5389);
			match(QUESTIONMARK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CastDataTypeContext extends ParserRuleContext {
		public CastBuiltInTypeContext castBuiltInType() {
			return getRuleContext(CastBuiltInTypeContext.class,0);
		}
		public DistinctTypeNameContext distinctTypeName() {
			return getRuleContext(DistinctTypeNameContext.class,0);
		}
		public ArrayTypeContext arrayType() {
			return getRuleContext(ArrayTypeContext.class,0);
		}
		public CastDataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_castDataType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCastDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCastDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCastDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CastDataTypeContext castDataType() throws RecognitionException {
		CastDataTypeContext _localctx = new CastDataTypeContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_castDataType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5394);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,603,_ctx) ) {
			case 1:
				{
				setState(5391);
				castBuiltInType();
				}
				break;
			case 2:
				{
				setState(5392);
				distinctTypeName();
				}
				break;
			case 3:
				{
				setState(5393);
				arrayType();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CastBuiltInTypeContext extends ParserRuleContext {
		public TerminalNode SMALLINT() { return getToken(DB2zSQLParser.SMALLINT, 0); }
		public TerminalNode INTEGER() { return getToken(DB2zSQLParser.INTEGER, 0); }
		public TerminalNode INT() { return getToken(DB2zSQLParser.INT, 0); }
		public TerminalNode BIGINT() { return getToken(DB2zSQLParser.BIGINT, 0); }
		public TerminalNode REAL() { return getToken(DB2zSQLParser.REAL, 0); }
		public TerminalNode DATE() { return getToken(DB2zSQLParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(DB2zSQLParser.TIME, 0); }
		public TerminalNode ROWID() { return getToken(DB2zSQLParser.ROWID, 0); }
		public TerminalNode XML() { return getToken(DB2zSQLParser.XML, 0); }
		public TerminalNode DECFLOAT() { return getToken(DB2zSQLParser.DECFLOAT, 0); }
		public TerminalNode FLOAT() { return getToken(DB2zSQLParser.FLOAT, 0); }
		public TerminalNode DOUBLE() { return getToken(DB2zSQLParser.DOUBLE, 0); }
		public TerminalNode BINARY() { return getToken(DB2zSQLParser.BINARY, 0); }
		public TerminalNode TIMESTAMP() { return getToken(DB2zSQLParser.TIMESTAMP, 0); }
		public TerminalNode DECIMAL() { return getToken(DB2zSQLParser.DECIMAL, 0); }
		public TerminalNode DEC() { return getToken(DB2zSQLParser.DEC, 0); }
		public TerminalNode NUMERIC() { return getToken(DB2zSQLParser.NUMERIC, 0); }
		public TerminalNode GRAPHIC() { return getToken(DB2zSQLParser.GRAPHIC, 0); }
		public TerminalNode VARGRAPHIC() { return getToken(DB2zSQLParser.VARGRAPHIC, 0); }
		public TerminalNode DBCLOB() { return getToken(DB2zSQLParser.DBCLOB, 0); }
		public IntegerInParensContext integerInParens() {
			return getRuleContext(IntegerInParensContext.class,0);
		}
		public TerminalNode VARCHAR() { return getToken(DB2zSQLParser.VARCHAR, 0); }
		public TerminalNode CLOB() { return getToken(DB2zSQLParser.CLOB, 0); }
		public TerminalNode VARBINARY() { return getToken(DB2zSQLParser.VARBINARY, 0); }
		public TerminalNode BLOB() { return getToken(DB2zSQLParser.BLOB, 0); }
		public TerminalNode ZONE() { return getToken(DB2zSQLParser.ZONE, 0); }
		public TerminalNode PRECISION() { return getToken(DB2zSQLParser.PRECISION, 0); }
		public LengthContext length() {
			return getRuleContext(LengthContext.class,0);
		}
		public CcsidQualifierContext ccsidQualifier() {
			return getRuleContext(CcsidQualifierContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode WITHOUT() { return getToken(DB2zSQLParser.WITHOUT, 0); }
		public TerminalNode LARGE() { return getToken(DB2zSQLParser.LARGE, 0); }
		public TerminalNode OBJECT() { return getToken(DB2zSQLParser.OBJECT, 0); }
		public TerminalNode CHARACTER() { return getToken(DB2zSQLParser.CHARACTER, 0); }
		public TerminalNode CHAR() { return getToken(DB2zSQLParser.CHAR, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode SQLIDENTIFIER() { return getToken(DB2zSQLParser.SQLIDENTIFIER, 0); }
		public TerminalNode VARYING() { return getToken(DB2zSQLParser.VARYING, 0); }
		public CastBuiltInTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_castBuiltInType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCastBuiltInType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCastBuiltInType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCastBuiltInType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CastBuiltInTypeContext castBuiltInType() throws RecognitionException {
		CastBuiltInTypeContext _localctx = new CastBuiltInTypeContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_castBuiltInType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5503);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,624,_ctx) ) {
			case 1:
				{
				setState(5396);
				match(SMALLINT);
				}
				break;
			case 2:
				{
				setState(5397);
				match(INTEGER);
				}
				break;
			case 3:
				{
				setState(5398);
				match(INT);
				}
				break;
			case 4:
				{
				setState(5399);
				match(BIGINT);
				}
				break;
			case 5:
				{
				{
				setState(5400);
				_la = _input.LA(1);
				if ( !(_la==NUMERIC || _la==DEC || _la==DECIMAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5404);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,604,_ctx) ) {
				case 1:
					{
					setState(5401);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(5402);
					match(LPAREN);
					setState(5403);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 6:
				{
				{
				setState(5406);
				match(DECFLOAT);
				setState(5410);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,605,_ctx) ) {
				case 1:
					{
					setState(5407);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(5408);
					match(LPAREN);
					setState(5409);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 7:
				{
				{
				setState(5412);
				match(FLOAT);
				setState(5416);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,606,_ctx) ) {
				case 1:
					{
					setState(5413);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(5414);
					match(LPAREN);
					setState(5415);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 8:
				{
				setState(5418);
				match(REAL);
				}
				break;
			case 9:
				{
				{
				setState(5419);
				match(DOUBLE);
				setState(5421);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRECISION) {
					{
					setState(5420);
					match(PRECISION);
					}
				}

				}
				}
				break;
			case 10:
				{
				{
				setState(5428);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHAR:
				case CHARACTER:
					{
					{
					setState(5423);
					_la = _input.LA(1);
					if ( !(_la==CHAR || _la==CHARACTER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5425);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==VARYING) {
						{
						setState(5424);
						match(VARYING);
						}
					}

					}
					}
					break;
				case VARCHAR:
					{
					setState(5427);
					match(VARCHAR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5433);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,610,_ctx) ) {
				case 1:
					{
					setState(5430);
					length();
					}
					break;
				case 2:
					{
					{
					setState(5431);
					match(LPAREN);
					setState(5432);
					match(RPAREN);
					}
					}
					break;
				}
				setState(5436);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CCSID) {
					{
					setState(5435);
					ccsidQualifier();
					}
				}

				}
				}
				break;
			case 11:
				{
				{
				setState(5442);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHAR:
				case CHARACTER:
					{
					{
					setState(5438);
					_la = _input.LA(1);
					if ( !(_la==CHAR || _la==CHARACTER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5439);
					match(LARGE);
					setState(5440);
					match(OBJECT);
					}
					}
					break;
				case CLOB:
					{
					setState(5441);
					match(CLOB);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5447);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,613,_ctx) ) {
				case 1:
					{
					setState(5444);
					length();
					}
					break;
				case 2:
					{
					{
					setState(5445);
					match(LPAREN);
					setState(5446);
					match(RPAREN);
					}
					}
					break;
				}
				setState(5450);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CCSID) {
					{
					setState(5449);
					ccsidQualifier();
					}
				}

				}
				}
				break;
			case 12:
				{
				{
				setState(5452);
				_la = _input.LA(1);
				if ( !(_la==DBCLOB || _la==GRAPHIC || _la==VARGRAPHIC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5456);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,615,_ctx) ) {
				case 1:
					{
					setState(5453);
					length();
					}
					break;
				case 2:
					{
					{
					setState(5454);
					match(LPAREN);
					setState(5455);
					match(RPAREN);
					}
					}
					break;
				}
				setState(5459);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CCSID) {
					{
					setState(5458);
					ccsidQualifier();
					}
				}

				}
				}
				break;
			case 13:
				{
				{
				setState(5461);
				match(BINARY);
				setState(5465);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,617,_ctx) ) {
				case 1:
					{
					setState(5462);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(5463);
					match(LPAREN);
					setState(5464);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 14:
				{
				{
				setState(5472);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
					{
					{
					setState(5467);
					match(BINARY);
					setState(5469);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==VARYING) {
						{
						setState(5468);
						match(VARYING);
						}
					}

					}
					}
					break;
				case VARBINARY:
					{
					setState(5471);
					match(VARBINARY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5477);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,620,_ctx) ) {
				case 1:
					{
					setState(5474);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(5475);
					match(LPAREN);
					setState(5476);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 15:
				{
				{
				setState(5483);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
					{
					{
					setState(5479);
					match(BINARY);
					setState(5480);
					match(LARGE);
					setState(5481);
					match(OBJECT);
					}
					}
					break;
				case BLOB:
					{
					setState(5482);
					match(BLOB);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5490);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(5485);
					match(LPAREN);
					{
					setState(5486);
					match(INTEGERLITERAL);
					setState(5487);
					match(SQLIDENTIFIER);
					}
					setState(5489);
					match(RPAREN);
					}
				}

				}
				}
				break;
			case 16:
				{
				setState(5492);
				match(DATE);
				}
				break;
			case 17:
				{
				setState(5493);
				match(TIME);
				}
				break;
			case 18:
				{
				{
				setState(5494);
				match(TIMESTAMP);
				setState(5496);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(5495);
					integerInParens();
					}
				}

				{
				setState(5498);
				_la = _input.LA(1);
				if ( !(_la==WITH || _la==WITHOUT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5499);
				match(TIME);
				setState(5500);
				match(ZONE);
				}
				}
				}
				break;
			case 19:
				{
				setState(5501);
				match(ROWID);
				}
				break;
			case 20:
				{
				setState(5502);
				match(XML);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntegerInParensContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<TerminalNode> INTEGERLITERAL() { return getTokens(DB2zSQLParser.INTEGERLITERAL); }
		public TerminalNode INTEGERLITERAL(int i) {
			return getToken(DB2zSQLParser.INTEGERLITERAL, i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode COMMA() { return getToken(DB2zSQLParser.COMMA, 0); }
		public IntegerInParensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_integerInParens; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterIntegerInParens(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitIntegerInParens(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitIntegerInParens(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntegerInParensContext integerInParens() throws RecognitionException {
		IntegerInParensContext _localctx = new IntegerInParensContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_integerInParens);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5505);
			match(LPAREN);
			setState(5506);
			match(INTEGERLITERAL);
			setState(5509);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(5507);
				match(COMMA);
				setState(5508);
				match(INTEGERLITERAL);
				}
			}

			setState(5511);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode SQLIDENTIFIER() { return getToken(DB2zSQLParser.SQLIDENTIFIER, 0); }
		public TerminalNode CODEUNITS16() { return getToken(DB2zSQLParser.CODEUNITS16, 0); }
		public TerminalNode CODEUNITS32() { return getToken(DB2zSQLParser.CODEUNITS32, 0); }
		public TerminalNode OCTETS() { return getToken(DB2zSQLParser.OCTETS, 0); }
		public LengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_length; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterLength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitLength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LengthContext length() throws RecognitionException {
		LengthContext _localctx = new LengthContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_length);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5513);
			match(LPAREN);
			setState(5514);
			_la = _input.LA(1);
			if ( !(_la==INTEGERLITERAL || _la==SQLIDENTIFIER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5516);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (CODEUNITS16 - 328)) | (1L << (CODEUNITS32 - 328)) | (1L << (OCTETS - 328)))) != 0)) {
				{
				setState(5515);
				_la = _input.LA(1);
				if ( !(((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (CODEUNITS16 - 328)) | (1L << (CODEUNITS32 - 328)) | (1L << (OCTETS - 328)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5518);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CcsidQualifierContext extends ParserRuleContext {
		public TerminalNode CCSID() { return getToken(DB2zSQLParser.CCSID, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode ASCII() { return getToken(DB2zSQLParser.ASCII, 0); }
		public TerminalNode EBCDIC() { return getToken(DB2zSQLParser.EBCDIC, 0); }
		public TerminalNode UNICODE() { return getToken(DB2zSQLParser.UNICODE, 0); }
		public ForDataQualifierContext forDataQualifier() {
			return getRuleContext(ForDataQualifierContext.class,0);
		}
		public CcsidQualifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ccsidQualifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCcsidQualifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCcsidQualifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCcsidQualifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CcsidQualifierContext ccsidQualifier() throws RecognitionException {
		CcsidQualifierContext _localctx = new CcsidQualifierContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_ccsidQualifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5520);
			match(CCSID);
			setState(5526);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EBCDIC:
			case ASCII:
			case UNICODE:
				{
				{
				setState(5521);
				_la = _input.LA(1);
				if ( !(_la==EBCDIC || _la==ASCII || _la==UNICODE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5523);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5522);
					forDataQualifier();
					}
				}

				}
				}
				break;
			case INTEGERLITERAL:
				{
				setState(5525);
				match(INTEGERLITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ForDataQualifierContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode DATA() { return getToken(DB2zSQLParser.DATA, 0); }
		public TerminalNode SBCS() { return getToken(DB2zSQLParser.SBCS, 0); }
		public TerminalNode MIXED() { return getToken(DB2zSQLParser.MIXED, 0); }
		public TerminalNode BIT() { return getToken(DB2zSQLParser.BIT, 0); }
		public ForDataQualifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forDataQualifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterForDataQualifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitForDataQualifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitForDataQualifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ForDataQualifierContext forDataQualifier() throws RecognitionException {
		ForDataQualifierContext _localctx = new ForDataQualifierContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_forDataQualifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5528);
			match(FOR);
			setState(5529);
			_la = _input.LA(1);
			if ( !(_la==BIT || _la==MIXED || _la==SBCS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5530);
			match(DATA);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DistinctTypeNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public CorrelationNameContext correlationName() {
			return getRuleContext(CorrelationNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public DistinctTypeNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_distinctTypeName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDistinctTypeName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDistinctTypeName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDistinctTypeName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DistinctTypeNameContext distinctTypeName() throws RecognitionException {
		DistinctTypeNameContext _localctx = new DistinctTypeNameContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_distinctTypeName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5535);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,629,_ctx) ) {
			case 1:
				{
				setState(5532);
				correlationName();
				setState(5533);
				match(DOT);
				}
				break;
			}
			setState(5537);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArrayTypeContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ArrayTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arrayType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterArrayType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitArrayType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitArrayType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArrayTypeContext arrayType() throws RecognitionException {
		ArrayTypeContext _localctx = new ArrayTypeContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_arrayType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5539);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LiteralContext extends ParserRuleContext {
		public TerminalNode NUMERICLITERAL() { return getToken(DB2zSQLParser.NUMERICLITERAL, 0); }
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LiteralContext literal() throws RecognitionException {
		LiteralContext _localctx = new LiteralContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_literal);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5541);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NONNUMERICLITERAL) | (1L << INTEGERLITERAL) | (1L << NUMERICLITERAL))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CcsidValueContext extends ParserRuleContext {
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public CcsidValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ccsidValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCcsidValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCcsidValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCcsidValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CcsidValueContext ccsidValue() throws RecognitionException {
		CcsidValueContext _localctx = new CcsidValueContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_ccsidValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5543);
			match(INTEGERLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public CorrelationNameContext correlationName() {
			return getRuleContext(CorrelationNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public ColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnNameContext columnName() throws RecognitionException {
		ColumnNameContext _localctx = new ColumnNameContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_columnName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5548);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,630,_ctx) ) {
			case 1:
				{
				setState(5545);
				correlationName();
				setState(5546);
				match(DOT);
				}
				break;
			}
			setState(5550);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SourceColumnNameContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public SourceColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sourceColumnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSourceColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSourceColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSourceColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SourceColumnNameContext sourceColumnName() throws RecognitionException {
		SourceColumnNameContext _localctx = new SourceColumnNameContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_sourceColumnName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5552);
			columnName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TargetColumnNameContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TargetColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_targetColumnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTargetColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTargetColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTargetColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TargetColumnNameContext targetColumnName() throws RecognitionException {
		TargetColumnNameContext _localctx = new TargetColumnNameContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_targetColumnName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5554);
			columnName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NewColumnNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public NewColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_newColumnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterNewColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitNewColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitNewColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NewColumnNameContext newColumnName() throws RecognitionException {
		NewColumnNameContext _localctx = new NewColumnNameContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_newColumnName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5556);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BeginColumnNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public BeginColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_beginColumnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterBeginColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitBeginColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitBeginColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BeginColumnNameContext beginColumnName() throws RecognitionException {
		BeginColumnNameContext _localctx = new BeginColumnNameContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_beginColumnName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5558);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EndColumnNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public EndColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_endColumnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterEndColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitEndColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitEndColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EndColumnNameContext endColumnName() throws RecognitionException {
		EndColumnNameContext _localctx = new EndColumnNameContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_endColumnName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5560);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CorrelationNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public CorrelationNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_correlationName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCorrelationName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCorrelationName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCorrelationName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CorrelationNameContext correlationName() throws RecognitionException {
		CorrelationNameContext _localctx = new CorrelationNameContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_correlationName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5562);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LocationNameContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> NUMERICLITERAL() { return getTokens(DB2zSQLParser.NUMERICLITERAL); }
		public TerminalNode NUMERICLITERAL(int i) {
			return getToken(DB2zSQLParser.NUMERICLITERAL, i);
		}
		public List<TerminalNode> INTEGERLITERAL() { return getTokens(DB2zSQLParser.INTEGERLITERAL); }
		public TerminalNode INTEGERLITERAL(int i) {
			return getToken(DB2zSQLParser.INTEGERLITERAL, i);
		}
		public List<TerminalNode> DOT() { return getTokens(DB2zSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(DB2zSQLParser.DOT, i);
		}
		public LocationNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_locationName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterLocationName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitLocationName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitLocationName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LocationNameContext locationName() throws RecognitionException {
		LocationNameContext _localctx = new LocationNameContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_locationName);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5567);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case ALL:
			case ALLOCATE:
			case ALLOW:
			case ALTER:
			case ALTERAND:
			case ANY:
			case ARRAY:
			case ARRAY_EXISTS:
			case AS:
			case ASENSITIVE:
			case ASSOCIATE:
			case ASUTIME:
			case AT:
			case AUDIT:
			case AUX:
			case AUXILIARY:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BUFFERPOOL:
			case BY:
			case CALL:
			case CAPTURE:
			case CASCADED:
			case CASE:
			case CAST:
			case CCSID:
			case CHAR:
			case CHARACTER:
			case CHECK:
			case CLONE:
			case CLOSE:
			case CLUSTER:
			case COLLECTION:
			case COLLID:
			case COLUMN:
			case COMMENT:
			case COMMIT:
			case CONCAT:
			case CONDITION:
			case CONNECT:
			case CONNECTION:
			case CONSTRAINT:
			case CONTAINS:
			case CONTENT:
			case CONTINUE:
			case CREATE:
			case CUBE:
			case CURRENT:
			case CURRENT_LC_CTYPE:
			case CURRVAL:
			case CURSOR:
			case DATA:
			case DATABASE:
			case DAY:
			case DAYS:
			case DBINFO:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DISABLE:
			case DISALLOW:
			case DISTINCT:
			case DO:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSSIZE:
			case DYNAMIC:
			case EDITPROC:
			case ELSE:
			case ELSEIF:
			case ENCODING:
			case ENCRYPTION:
			case END:
			case END_EXEC:
			case ENDING:
			case ERASE:
			case ESCAPE:
			case EXCEPT:
			case EXCEPTION:
			case EXEC_SQL:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case FENCED:
			case FETCH:
			case FIELDPROC:
			case FINAL:
			case FIRST:
			case FOR:
			case FREE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANT:
			case GROUP:
			case HANDLER:
			case HAVING:
			case HOLD:
			case HOUR:
			case HOURS:
			case IF:
			case IMMEDIATE:
			case IN:
			case INCLUSIVE:
			case INDEX:
			case INDEXBP:
			case INHERIT:
			case INNER:
			case INOUT:
			case INSENSITIVE:
			case INSERT:
			case INTERSECT:
			case INTO:
			case IS:
			case ISOBID:
			case ITERATE:
			case JAR:
			case JOIN:
			case KEEP:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LAST:
			case LC_CTYPE:
			case LEAVE:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOCALE:
			case LOCATOR:
			case LOCATORS:
			case LOCK:
			case LOCKMAX:
			case LOCKSIZE:
			case LONG:
			case LOOP:
			case MAINTAINED:
			case MATERIALIZED:
			case MICROSECOND:
			case MICROSECONDS:
			case MODIFIES:
			case MONTH:
			case MONTHS:
			case NEXT:
			case NEXTVAL:
			case NO:
			case NONE:
			case NOT:
			case NULL:
			case NULLS:
			case NUMPARTS:
			case OBID:
			case OF:
			case OFFSET:
			case OLD:
			case ON:
			case OPEN:
			case OPTIMIZATION:
			case OPTIMIZE:
			case OR:
			case ORDER:
			case ORGANIZATION:
			case OUT:
			case OUTER:
			case PACKAGE:
			case PADDED:
			case PARAMETER:
			case PART:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONING:
			case PATH:
			case PERIOD:
			case PIECESIZE:
			case PLAN:
			case PRECISION:
			case PREPARE:
			case PREVVAL:
			case PRIOR:
			case PRIQTY:
			case PRIVILEGES:
			case PROCEDURE:
			case PROGRAM:
			case PSID:
			case PUBLIC:
			case QUERY:
			case QUERYNO:
			case READS:
			case REFERENCES:
			case REFRESH:
			case RELEASE:
			case RENAME:
			case REPEAT:
			case RESIGNAL:
			case RESTRICT:
			case RESULT:
			case RESULT_SET_LOCATOR:
			case RETURN:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUND_CEILING:
			case ROUND_DOWN:
			case ROUND_FLOOR:
			case ROUND_HALF_DOWN:
			case ROUND_HALF_EVEN:
			case ROUND_HALF_UP:
			case ROUND_UP:
			case ROW:
			case ROWSET:
			case RUN:
			case SAVEPOINT:
			case SCHEMA:
			case SCRATCHPAD:
			case SECOND:
			case SECONDS:
			case SECQTY:
			case SECURITY:
			case SELECT:
			case SENSITIVE:
			case SEQUENCE:
			case SET:
			case SIGNAL:
			case SIMPLE:
			case SOME:
			case SOURCE:
			case SPECIFIC:
			case STANDARD:
			case STATEMENT:
			case STATIC:
			case STAY:
			case STOGROUP:
			case STORES:
			case STYLE:
			case SUMMARY:
			case SYNONYM:
			case SYSDATE:
			case SYSTEM:
			case SYSTIMESTAMP:
			case TABLE:
			case TABLESPACE:
			case THEN:
			case TO:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNDO:
			case UNION:
			case UNIQUE:
			case UNTIL:
			case UPDATE:
			case USING:
			case VALIDPROC:
			case VALUE:
			case VALUES:
			case VARIABLE:
			case VARIANT:
			case VCAT:
			case VERSIONING:
			case VIEW:
			case VOLATILE:
			case VOLUMES:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WLM:
			case XMLCAST:
			case XMLEXISTS:
			case XMLNAMESPACES:
			case YEAR:
			case YEARS:
			case ZONE:
			case AND:
			case ARRAY_AGG:
			case ASC:
			case AVG:
			case BIT:
			case CHANGE:
			case CODEUNITS16:
			case CODEUNITS32:
			case CORR:
			case CORRELATION:
			case COUNT:
			case COUNT_BIG:
			case COVAR:
			case COVARIANCE:
			case COVARIANCE_SAMP:
			case COVAR_POP:
			case COVAR_SAMP:
			case CS:
			case CUME_DIST:
			case DENSE_RANK:
			case DESC:
			case EBCDIC:
			case EXCLUSIVE:
			case FIRST_VALUE:
			case FOLLOWING:
			case GROUPING:
			case IGNORE:
			case INDICATOR:
			case INPUT:
			case ISNULL:
			case LAG:
			case LARGE:
			case LAST_VALUE:
			case LEAD:
			case LISTAGG:
			case LOCKED:
			case LOCKS:
			case MEDIAN:
			case MINUTES:
			case MIXED:
			case NOTNULL:
			case NTH_VALUE:
			case NTILE:
			case NUMERIC:
			case OBJECT:
			case OCTETS:
			case ONLY:
			case OVER:
			case PASSING:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PERCENT_RANK:
			case PRECEDING:
			case PREVIOUS:
			case RANGE:
			case RANK:
			case RATIO_TO_REPORT:
			case READ:
			case REF:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_ICPT:
			case REGR_INTERCEPT:
			case REGR_R2:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case RESPECT:
			case ROW_NUMBER:
			case ROWS:
			case RR:
			case RS:
			case SBCS:
			case SELECTIVITY:
			case SETS:
			case SHARE:
			case SKIP_:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case TOKEN:
			case UNBOUNDED:
			case UNPACK:
			case UR:
			case USE:
			case VAR:
			case VARIANCE:
			case VARIANCE_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARYING:
			case WITHOUT:
			case XML:
			case XMLAGG:
			case COLUMNS:
			case SQLID:
			case ORDINALITY:
			case SYSTEM_TIME:
			case BUSINESS_TIME:
			case MULTIPLIER:
			case UNNEST:
			case CROSS:
			case CALLER:
			case CLIENT:
			case POSITIONING:
			case SCROLL:
			case ACTION:
			case ASSEMBLE:
			case C_:
			case CALLED:
			case COBOL:
			case DB2:
			case DEFINER:
			case DISPATCH:
			case ENVIRONMENT:
			case FAILURE:
			case FAILURES:
			case JAVA:
			case MAIN:
			case NAME:
			case OPTIONS:
			case PARALLEL:
			case PLI:
			case REGISTERS:
			case RESIDENT:
			case SECURED:
			case SPECIAL:
			case SQL:
			case STOP:
			case SUB:
			case YES:
			case APPLICATION:
			case CHANGED:
			case COMPATIBILITY:
			case COMPRESS:
			case COPY:
			case FREEPAGE:
			case GBPCACHE:
			case INCLUDE:
			case MAXVALUE:
			case MINVALUE:
			case PCTFREE:
			case REGENERATE:
			case MASK:
			case ENABLE:
			case PERMISSION:
			case ATOMIC:
			case SQLEXCEPTION:
			case MERGE:
			case MATCHED:
			case SQLSTATE:
			case MESSAGE_TEXT:
			case OVERRIDING:
			case PORTION:
			case DB2SQL:
			case DEBUG:
			case GENERAL:
			case MODE_:
			case REXX:
			case CACHE:
			case CYCLE:
			case INCREMENT:
			case RESTART:
			case DATACLAS:
			case MGMTCLAS:
			case REMOVE:
			case STORCLAS:
			case ACCESS:
			case ACTIVATE:
			case ALWAYS:
			case APPEND:
			case ARCHIVE:
			case BUSINESS:
			case CASCADE:
			case CHANGES:
			case CONTROL:
			case DEACTIVATE:
			case DEFERRED:
			case EACH:
			case ENFORCED:
			case EXTRA:
			case FOREIGN:
			case HIDDEN_:
			case HISTORY:
			case ID:
			case IDENTITY:
			case IMPLICITLY:
			case INITIALLY:
			case INLINE:
			case OPERATION:
			case ORGANIZE:
			case OVERLAPS:
			case PACKAGE_NAME:
			case PACKAGE_SCHEMA:
			case PACKAGE_VERSION:
			case PRIMARY:
			case RESET:
			case ROTATE:
			case START:
			case SYSIBM:
			case TRANSACTION:
			case XMLSCHEMA:
			case ELEMENT:
			case URL:
			case NAMESPACE:
			case LOCATION:
			case SYSXSR:
			case ALGORITHM:
			case FIXEDLENGTH:
			case HUFFMAN:
			case LOB:
			case LOG:
			case LOGGED:
			case MAXPARTITIONS:
			case MAXROWS:
			case MEMBER:
			case MOVE:
			case PAGE:
			case PAGENUM:
			case PENDING:
			case RELATIVE:
			case SEGSIZE:
			case TRACKMOD:
			case ADDRESS:
			case ATTRIBUTES:
			case AUTHENTICATION:
			case AUTHID:
			case CONTEXT:
			case JOBNAME:
			case OWNER:
			case PROFILE:
			case QUALIFIER:
			case SERVAUTH:
			case TRUSTED:
			case SECTION:
			case ACTIVE:
			case VERSION:
			case ALIAS:
			case WORK:
			case WORKFILE:
			case SYSDEFLT:
			case NULTERM:
			case STRUCTURE:
			case GENERIC:
			case TEMPORARY:
			case DEFER:
			case DEFINE:
			case EXCLUDE:
			case GENERATE:
			case KEYS:
			case XMLPATTERN:
			case ABS:
			case ABSVAL:
			case ACOS:
			case ADD_DAYS:
			case ADD_MONTHS:
			case ARRAY_DELETE:
			case ARRAY_FIRST:
			case ARRAY_LAST:
			case ARRAY_NEXT:
			case ARRAY_PRIOR:
			case ARRAY_TRIM:
			case ASCII:
			case ASCII_CHR:
			case ASCIISTR:
			case ASCII_STR:
			case ASIN:
			case ATAN:
			case ATAN2:
			case ATANH:
			case BIGINT:
			case BINARY:
			case BITAND:
			case BITANDNOT:
			case BITNOT:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BTRIM:
			case CARDINALITY:
			case CCSID_ENCODING:
			case CEIL:
			case CEILING:
			case CHAR9:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case CHR:
			case CLOB:
			case COALESCE:
			case COLLATION_KEY:
			case COMPARE_DECFLOAT:
			case COS:
			case COSH:
			case DATE:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFWEEK_ISO:
			case DAYOFYEAR:
			case DAYS_BETWEEN:
			case DBCLOB:
			case DEC:
			case DECFLOAT:
			case DECFLOAT_FORMAT:
			case DECFLOAT_SORTKEY:
			case DECIMAL:
			case DECODE:
			case DECRYPT_BINARY:
			case DECRYPT_BIT:
			case DECRYPT_CHAR:
			case DECRYPT_DATAKEY_BIGINT:
			case DECRYPT_DATAKEY_BIT:
			case DECRYPT_DATAKEY_CLOB:
			case DECRYPT_DATAKEY_DBCLOB:
			case DECRYPT_DATAKEY_DECIMAL:
			case DECRYPT_DATAKEY_INTEGER:
			case DECRYPT_DATAKEY_VARCHAR:
			case DECRYPT_DATAKEY_VARGRAPHIC:
			case DECRYPT_DB:
			case DEGREES:
			case DIFFERENCE:
			case DIGITS:
			case DOUBLE_PRECISION:
			case DSN_XMLVALIDATE:
			case EBCDIC_CHR:
			case EBCDIC_STR:
			case ENCRYPT_DATAKEY:
			case ENCRYPT_TDES:
			case EXP:
			case EXTRACT:
			case FLOAT:
			case FLOOR:
			case GENERATE_UNIQUE:
			case GENERATE_UNIQUE_BINARY:
			case GETHINT:
			case GETVARIABLE:
			case GRAPHIC:
			case GREATEST:
			case HASH:
			case HASH_CRC32:
			case HASH_MD5:
			case HASH_SHA1:
			case HASH_SHA256:
			case HEX:
			case IDENTITY_VAL_LOCAL:
			case IFNULL:
			case INSTR:
			case INT:
			case INTEGER:
			case JULIAN_DAY:
			case LAST_DAY:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LN:
			case LOCATE:
			case LOCATE_IN_STRING:
			case LOG10:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAX:
			case MAX_CARDINALITY:
			case MIDNIGHT_SECONDS:
			case MIN:
			case MINUTE:
			case MOD:
			case MONTHS_BETWEEN:
			case MQREAD:
			case MQREADCLOB:
			case MQRECEIVE:
			case MQRECEIVECLOB:
			case MQSEND:
			case MULTIPLY_ALT:
			case NEXT_DAY:
			case NEXT_MONTH:
			case NORMALIZE_DECFLOAT:
			case NORMALIZE_STRING:
			case NULLIF:
			case NVL:
			case OVERLAY:
			case PACK:
			case POSITION:
			case POSSTR:
			case POW:
			case POWER:
			case QUANTIZE:
			case QUARTER:
			case RADIANS:
			case RAISE_ERROR:
			case RAND:
			case RANDOM:
			case REAL:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REPLACE:
			case RID:
			case ROUND:
			case ROUND_TIMESTAMP:
			case ROWID:
			case RPAD:
			case RTRIM:
			case SCORE:
			case SIGN:
			case SIN:
			case SINH:
			case SMALLINT:
			case SOAPHTTPC:
			case SOAPHTTPNC:
			case SOAPHTTPNV:
			case SOAPHTTPV:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STRIP:
			case STRLEFT:
			case STRPOS:
			case STRRIGHT:
			case SUBSTR:
			case SUBSTRING:
			case TAN:
			case TANH:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIMESTAMP_FORMAT:
			case TIMESTAMP_ISO:
			case TIMESTAMP_TZ:
			case TO_CHAR:
			case TO_CLOB:
			case TO_DATE:
			case TO_NUMBER:
			case TOTALORDER:
			case TO_TIMESTAMP:
			case TRANSLATE:
			case TRIM:
			case TRIM_ARRAY:
			case TRUNC:
			case TRUNC_TIMESTAMP:
			case UCASE:
			case UNICODE:
			case UNICODE_STR:
			case UNISTR:
			case UPPER:
			case VARBINARY:
			case VARCHAR:
			case VARCHAR9:
			case VARCHAR_BIT_FORMAT:
			case VARCHAR_FORMAT:
			case VARGRAPHIC:
			case VERIFY_GROUP_FOR_USER:
			case VERIFY_ROLE_FOR_USER:
			case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
			case WEEK:
			case WEEK_ISO:
			case WRAP:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLCONCAT:
			case XMLDOCUMENT:
			case XMLELEMENT:
			case XMLFOREST:
			case XMLMODIFY:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLSERIALIZE:
			case XMLTEXT:
			case XMLXSROBJECTID:
			case XSLTRANSFORM:
			case CURRENT_ACCELERATOR:
			case CURRENT_APPLICATION_COMPATIBILITY:
			case CURRENT_APPLICATION_ENCODING_SCHEME:
			case CURRENT_CLIENT_ACCTNG:
			case CURRENT_CLIENT_APPLNAME:
			case CURRENT_CLIENT_CORR_TOKEN:
			case CURRENT_CLIENT_USERID:
			case CURRENT_CLIENT_WRKSTNNAME:
			case CURRENT_DATE:
			case CURRENT_DEBUG_MODE:
			case CURRENT_DECFLOAT_ROUNDING_MODE:
			case CURRENT_DEGREE:
			case CURRENT_EXPLAIN_MODE:
			case CURRENT_GET_ACCEL_ARCHIVE:
			case CURRENT_LOCALE_LC_CTYPE:
			case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
			case CURRENT_MEMBER:
			case CURRENT_OPTIMIZATION_HINT:
			case CURRENT_PACKAGE_PATH:
			case CURRENT_PACKAGESET:
			case CURRENT_PATH:
			case CURRENT_PRECISION:
			case CURRENT_QUERY_ACCELERATION:
			case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
			case CURRENT_REFRESH_AGE:
			case CURRENT_ROUTINE_VERSION:
			case CURRENT_RULES:
			case CURRENT_SCHEMA:
			case CURRENT_SERVER:
			case CURRENT_SQLID:
			case CURRENT_TEMPORAL_BUSINESS_TIME:
			case CURRENT_TEMPORAL_SYSTEM_TIME:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_TIME_ZONE:
			case ENCRYPTION_PASSWORD:
			case SESSION_TIME_ZONE:
			case SESSION_USER:
			case USER:
			case ADMIN_TASK_LIST:
			case ADMIN_TASK_OUTPUT:
			case ADMIN_TASK_STATUS:
			case BLOCKING_THREADS:
			case MQREADALL:
			case MQREADALLCLOB:
			case MQRECEIVEALL:
			case MQRECEIVEALLCLOB:
			case XMLTABLE:
			case SQLIDENTIFIER:
				{
				setState(5564);
				identifier();
				}
				break;
			case NUMERICLITERAL:
				{
				setState(5565);
				match(NUMERICLITERAL);
				}
				break;
			case INTEGERLITERAL:
				{
				setState(5566);
				match(INTEGERLITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5579);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,634,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5570);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DOT) {
						{
						setState(5569);
						match(DOT);
						}
					}

					setState(5575);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ADD:
					case AFTER:
					case ALL:
					case ALLOCATE:
					case ALLOW:
					case ALTER:
					case ALTERAND:
					case ANY:
					case ARRAY:
					case ARRAY_EXISTS:
					case AS:
					case ASENSITIVE:
					case ASSOCIATE:
					case ASUTIME:
					case AT:
					case AUDIT:
					case AUX:
					case AUXILIARY:
					case BEFORE:
					case BEGIN:
					case BETWEEN:
					case BUFFERPOOL:
					case BY:
					case CALL:
					case CAPTURE:
					case CASCADED:
					case CASE:
					case CAST:
					case CCSID:
					case CHAR:
					case CHARACTER:
					case CHECK:
					case CLONE:
					case CLOSE:
					case CLUSTER:
					case COLLECTION:
					case COLLID:
					case COLUMN:
					case COMMENT:
					case COMMIT:
					case CONCAT:
					case CONDITION:
					case CONNECT:
					case CONNECTION:
					case CONSTRAINT:
					case CONTAINS:
					case CONTENT:
					case CONTINUE:
					case CREATE:
					case CUBE:
					case CURRENT:
					case CURRENT_LC_CTYPE:
					case CURRVAL:
					case CURSOR:
					case DATA:
					case DATABASE:
					case DAY:
					case DAYS:
					case DBINFO:
					case DECLARE:
					case DEFAULT:
					case DELETE:
					case DESCRIPTOR:
					case DETERMINISTIC:
					case DISABLE:
					case DISALLOW:
					case DISTINCT:
					case DO:
					case DOCUMENT:
					case DOUBLE:
					case DROP:
					case DSSIZE:
					case DYNAMIC:
					case EDITPROC:
					case ELSE:
					case ELSEIF:
					case ENCODING:
					case ENCRYPTION:
					case END:
					case END_EXEC:
					case ENDING:
					case ERASE:
					case ESCAPE:
					case EXCEPT:
					case EXCEPTION:
					case EXEC_SQL:
					case EXECUTE:
					case EXISTS:
					case EXIT:
					case EXPLAIN:
					case EXTERNAL:
					case FENCED:
					case FETCH:
					case FIELDPROC:
					case FINAL:
					case FIRST:
					case FOR:
					case FREE:
					case FROM:
					case FULL:
					case FUNCTION:
					case GENERATED:
					case GET:
					case GLOBAL:
					case GO:
					case GOTO:
					case GRANT:
					case GROUP:
					case HANDLER:
					case HAVING:
					case HOLD:
					case HOUR:
					case HOURS:
					case IF:
					case IMMEDIATE:
					case IN:
					case INCLUSIVE:
					case INDEX:
					case INDEXBP:
					case INHERIT:
					case INNER:
					case INOUT:
					case INSENSITIVE:
					case INSERT:
					case INTERSECT:
					case INTO:
					case IS:
					case ISOBID:
					case ITERATE:
					case JAR:
					case JOIN:
					case KEEP:
					case KEY:
					case LABEL:
					case LANGUAGE:
					case LAST:
					case LC_CTYPE:
					case LEAVE:
					case LEFT:
					case LIKE:
					case LIMIT:
					case LOCAL:
					case LOCALE:
					case LOCATOR:
					case LOCATORS:
					case LOCK:
					case LOCKMAX:
					case LOCKSIZE:
					case LONG:
					case LOOP:
					case MAINTAINED:
					case MATERIALIZED:
					case MICROSECOND:
					case MICROSECONDS:
					case MODIFIES:
					case MONTH:
					case MONTHS:
					case NEXT:
					case NEXTVAL:
					case NO:
					case NONE:
					case NOT:
					case NULL:
					case NULLS:
					case NUMPARTS:
					case OBID:
					case OF:
					case OFFSET:
					case OLD:
					case ON:
					case OPEN:
					case OPTIMIZATION:
					case OPTIMIZE:
					case OR:
					case ORDER:
					case ORGANIZATION:
					case OUT:
					case OUTER:
					case PACKAGE:
					case PADDED:
					case PARAMETER:
					case PART:
					case PARTITION:
					case PARTITIONED:
					case PARTITIONING:
					case PATH:
					case PERIOD:
					case PIECESIZE:
					case PLAN:
					case PRECISION:
					case PREPARE:
					case PREVVAL:
					case PRIOR:
					case PRIQTY:
					case PRIVILEGES:
					case PROCEDURE:
					case PROGRAM:
					case PSID:
					case PUBLIC:
					case QUERY:
					case QUERYNO:
					case READS:
					case REFERENCES:
					case REFRESH:
					case RELEASE:
					case RENAME:
					case REPEAT:
					case RESIGNAL:
					case RESTRICT:
					case RESULT:
					case RESULT_SET_LOCATOR:
					case RETURN:
					case RETURNS:
					case REVOKE:
					case RIGHT:
					case ROLE:
					case ROLLBACK:
					case ROLLUP:
					case ROUND_CEILING:
					case ROUND_DOWN:
					case ROUND_FLOOR:
					case ROUND_HALF_DOWN:
					case ROUND_HALF_EVEN:
					case ROUND_HALF_UP:
					case ROUND_UP:
					case ROW:
					case ROWSET:
					case RUN:
					case SAVEPOINT:
					case SCHEMA:
					case SCRATCHPAD:
					case SECOND:
					case SECONDS:
					case SECQTY:
					case SECURITY:
					case SELECT:
					case SENSITIVE:
					case SEQUENCE:
					case SET:
					case SIGNAL:
					case SIMPLE:
					case SOME:
					case SOURCE:
					case SPECIFIC:
					case STANDARD:
					case STATEMENT:
					case STATIC:
					case STAY:
					case STOGROUP:
					case STORES:
					case STYLE:
					case SUMMARY:
					case SYNONYM:
					case SYSDATE:
					case SYSTEM:
					case SYSTIMESTAMP:
					case TABLE:
					case TABLESPACE:
					case THEN:
					case TO:
					case TRIGGER:
					case TRUNCATE:
					case TYPE:
					case UNDO:
					case UNION:
					case UNIQUE:
					case UNTIL:
					case UPDATE:
					case USING:
					case VALIDPROC:
					case VALUE:
					case VALUES:
					case VARIABLE:
					case VARIANT:
					case VCAT:
					case VERSIONING:
					case VIEW:
					case VOLATILE:
					case VOLUMES:
					case WHEN:
					case WHENEVER:
					case WHERE:
					case WHILE:
					case WITH:
					case WLM:
					case XMLCAST:
					case XMLEXISTS:
					case XMLNAMESPACES:
					case YEAR:
					case YEARS:
					case ZONE:
					case AND:
					case ARRAY_AGG:
					case ASC:
					case AVG:
					case BIT:
					case CHANGE:
					case CODEUNITS16:
					case CODEUNITS32:
					case CORR:
					case CORRELATION:
					case COUNT:
					case COUNT_BIG:
					case COVAR:
					case COVARIANCE:
					case COVARIANCE_SAMP:
					case COVAR_POP:
					case COVAR_SAMP:
					case CS:
					case CUME_DIST:
					case DENSE_RANK:
					case DESC:
					case EBCDIC:
					case EXCLUSIVE:
					case FIRST_VALUE:
					case FOLLOWING:
					case GROUPING:
					case IGNORE:
					case INDICATOR:
					case INPUT:
					case ISNULL:
					case LAG:
					case LARGE:
					case LAST_VALUE:
					case LEAD:
					case LISTAGG:
					case LOCKED:
					case LOCKS:
					case MEDIAN:
					case MINUTES:
					case MIXED:
					case NOTNULL:
					case NTH_VALUE:
					case NTILE:
					case NUMERIC:
					case OBJECT:
					case OCTETS:
					case ONLY:
					case OVER:
					case PASSING:
					case PERCENTILE_CONT:
					case PERCENTILE_DISC:
					case PERCENT_RANK:
					case PRECEDING:
					case PREVIOUS:
					case RANGE:
					case RANK:
					case RATIO_TO_REPORT:
					case READ:
					case REF:
					case REGR_AVGX:
					case REGR_AVGY:
					case REGR_COUNT:
					case REGR_ICPT:
					case REGR_INTERCEPT:
					case REGR_R2:
					case REGR_SLOPE:
					case REGR_SXX:
					case REGR_SXY:
					case REGR_SYY:
					case RESPECT:
					case ROW_NUMBER:
					case ROWS:
					case RR:
					case RS:
					case SBCS:
					case SELECTIVITY:
					case SETS:
					case SHARE:
					case SKIP_:
					case STDDEV:
					case STDDEV_POP:
					case STDDEV_SAMP:
					case SUM:
					case TOKEN:
					case UNBOUNDED:
					case UNPACK:
					case UR:
					case USE:
					case VAR:
					case VARIANCE:
					case VARIANCE_SAMP:
					case VAR_POP:
					case VAR_SAMP:
					case VARYING:
					case WITHOUT:
					case XML:
					case XMLAGG:
					case COLUMNS:
					case SQLID:
					case ORDINALITY:
					case SYSTEM_TIME:
					case BUSINESS_TIME:
					case MULTIPLIER:
					case UNNEST:
					case CROSS:
					case CALLER:
					case CLIENT:
					case POSITIONING:
					case SCROLL:
					case ACTION:
					case ASSEMBLE:
					case C_:
					case CALLED:
					case COBOL:
					case DB2:
					case DEFINER:
					case DISPATCH:
					case ENVIRONMENT:
					case FAILURE:
					case FAILURES:
					case JAVA:
					case MAIN:
					case NAME:
					case OPTIONS:
					case PARALLEL:
					case PLI:
					case REGISTERS:
					case RESIDENT:
					case SECURED:
					case SPECIAL:
					case SQL:
					case STOP:
					case SUB:
					case YES:
					case APPLICATION:
					case CHANGED:
					case COMPATIBILITY:
					case COMPRESS:
					case COPY:
					case FREEPAGE:
					case GBPCACHE:
					case INCLUDE:
					case MAXVALUE:
					case MINVALUE:
					case PCTFREE:
					case REGENERATE:
					case MASK:
					case ENABLE:
					case PERMISSION:
					case ATOMIC:
					case SQLEXCEPTION:
					case MERGE:
					case MATCHED:
					case SQLSTATE:
					case MESSAGE_TEXT:
					case OVERRIDING:
					case PORTION:
					case DB2SQL:
					case DEBUG:
					case GENERAL:
					case MODE_:
					case REXX:
					case CACHE:
					case CYCLE:
					case INCREMENT:
					case RESTART:
					case DATACLAS:
					case MGMTCLAS:
					case REMOVE:
					case STORCLAS:
					case ACCESS:
					case ACTIVATE:
					case ALWAYS:
					case APPEND:
					case ARCHIVE:
					case BUSINESS:
					case CASCADE:
					case CHANGES:
					case CONTROL:
					case DEACTIVATE:
					case DEFERRED:
					case EACH:
					case ENFORCED:
					case EXTRA:
					case FOREIGN:
					case HIDDEN_:
					case HISTORY:
					case ID:
					case IDENTITY:
					case IMPLICITLY:
					case INITIALLY:
					case INLINE:
					case OPERATION:
					case ORGANIZE:
					case OVERLAPS:
					case PACKAGE_NAME:
					case PACKAGE_SCHEMA:
					case PACKAGE_VERSION:
					case PRIMARY:
					case RESET:
					case ROTATE:
					case START:
					case SYSIBM:
					case TRANSACTION:
					case XMLSCHEMA:
					case ELEMENT:
					case URL:
					case NAMESPACE:
					case LOCATION:
					case SYSXSR:
					case ALGORITHM:
					case FIXEDLENGTH:
					case HUFFMAN:
					case LOB:
					case LOG:
					case LOGGED:
					case MAXPARTITIONS:
					case MAXROWS:
					case MEMBER:
					case MOVE:
					case PAGE:
					case PAGENUM:
					case PENDING:
					case RELATIVE:
					case SEGSIZE:
					case TRACKMOD:
					case ADDRESS:
					case ATTRIBUTES:
					case AUTHENTICATION:
					case AUTHID:
					case CONTEXT:
					case JOBNAME:
					case OWNER:
					case PROFILE:
					case QUALIFIER:
					case SERVAUTH:
					case TRUSTED:
					case SECTION:
					case ACTIVE:
					case VERSION:
					case ALIAS:
					case WORK:
					case WORKFILE:
					case SYSDEFLT:
					case NULTERM:
					case STRUCTURE:
					case GENERIC:
					case TEMPORARY:
					case DEFER:
					case DEFINE:
					case EXCLUDE:
					case GENERATE:
					case KEYS:
					case XMLPATTERN:
					case ABS:
					case ABSVAL:
					case ACOS:
					case ADD_DAYS:
					case ADD_MONTHS:
					case ARRAY_DELETE:
					case ARRAY_FIRST:
					case ARRAY_LAST:
					case ARRAY_NEXT:
					case ARRAY_PRIOR:
					case ARRAY_TRIM:
					case ASCII:
					case ASCII_CHR:
					case ASCIISTR:
					case ASCII_STR:
					case ASIN:
					case ATAN:
					case ATAN2:
					case ATANH:
					case BIGINT:
					case BINARY:
					case BITAND:
					case BITANDNOT:
					case BITNOT:
					case BITOR:
					case BITXOR:
					case BLOB:
					case BTRIM:
					case CARDINALITY:
					case CCSID_ENCODING:
					case CEIL:
					case CEILING:
					case CHAR9:
					case CHARACTER_LENGTH:
					case CHAR_LENGTH:
					case CHR:
					case CLOB:
					case COALESCE:
					case COLLATION_KEY:
					case COMPARE_DECFLOAT:
					case COS:
					case COSH:
					case DATE:
					case DAYOFMONTH:
					case DAYOFWEEK:
					case DAYOFWEEK_ISO:
					case DAYOFYEAR:
					case DAYS_BETWEEN:
					case DBCLOB:
					case DEC:
					case DECFLOAT:
					case DECFLOAT_FORMAT:
					case DECFLOAT_SORTKEY:
					case DECIMAL:
					case DECODE:
					case DECRYPT_BINARY:
					case DECRYPT_BIT:
					case DECRYPT_CHAR:
					case DECRYPT_DATAKEY_BIGINT:
					case DECRYPT_DATAKEY_BIT:
					case DECRYPT_DATAKEY_CLOB:
					case DECRYPT_DATAKEY_DBCLOB:
					case DECRYPT_DATAKEY_DECIMAL:
					case DECRYPT_DATAKEY_INTEGER:
					case DECRYPT_DATAKEY_VARCHAR:
					case DECRYPT_DATAKEY_VARGRAPHIC:
					case DECRYPT_DB:
					case DEGREES:
					case DIFFERENCE:
					case DIGITS:
					case DOUBLE_PRECISION:
					case DSN_XMLVALIDATE:
					case EBCDIC_CHR:
					case EBCDIC_STR:
					case ENCRYPT_DATAKEY:
					case ENCRYPT_TDES:
					case EXP:
					case EXTRACT:
					case FLOAT:
					case FLOOR:
					case GENERATE_UNIQUE:
					case GENERATE_UNIQUE_BINARY:
					case GETHINT:
					case GETVARIABLE:
					case GRAPHIC:
					case GREATEST:
					case HASH:
					case HASH_CRC32:
					case HASH_MD5:
					case HASH_SHA1:
					case HASH_SHA256:
					case HEX:
					case IDENTITY_VAL_LOCAL:
					case IFNULL:
					case INSTR:
					case INT:
					case INTEGER:
					case JULIAN_DAY:
					case LAST_DAY:
					case LCASE:
					case LEAST:
					case LENGTH:
					case LN:
					case LOCATE:
					case LOCATE_IN_STRING:
					case LOG10:
					case LOWER:
					case LPAD:
					case LTRIM:
					case MAX:
					case MAX_CARDINALITY:
					case MIDNIGHT_SECONDS:
					case MIN:
					case MINUTE:
					case MOD:
					case MONTHS_BETWEEN:
					case MQREAD:
					case MQREADCLOB:
					case MQRECEIVE:
					case MQRECEIVECLOB:
					case MQSEND:
					case MULTIPLY_ALT:
					case NEXT_DAY:
					case NEXT_MONTH:
					case NORMALIZE_DECFLOAT:
					case NORMALIZE_STRING:
					case NULLIF:
					case NVL:
					case OVERLAY:
					case PACK:
					case POSITION:
					case POSSTR:
					case POW:
					case POWER:
					case QUANTIZE:
					case QUARTER:
					case RADIANS:
					case RAISE_ERROR:
					case RAND:
					case RANDOM:
					case REAL:
					case REGEXP_COUNT:
					case REGEXP_INSTR:
					case REGEXP_LIKE:
					case REGEXP_REPLACE:
					case REGEXP_SUBSTR:
					case REPLACE:
					case RID:
					case ROUND:
					case ROUND_TIMESTAMP:
					case ROWID:
					case RPAD:
					case RTRIM:
					case SCORE:
					case SIGN:
					case SIN:
					case SINH:
					case SMALLINT:
					case SOAPHTTPC:
					case SOAPHTTPNC:
					case SOAPHTTPNV:
					case SOAPHTTPV:
					case SOUNDEX:
					case SPACE:
					case SQRT:
					case STRIP:
					case STRLEFT:
					case STRPOS:
					case STRRIGHT:
					case SUBSTR:
					case SUBSTRING:
					case TAN:
					case TANH:
					case TIME:
					case TIMESTAMP:
					case TIMESTAMPADD:
					case TIMESTAMPDIFF:
					case TIMESTAMP_FORMAT:
					case TIMESTAMP_ISO:
					case TIMESTAMP_TZ:
					case TO_CHAR:
					case TO_CLOB:
					case TO_DATE:
					case TO_NUMBER:
					case TOTALORDER:
					case TO_TIMESTAMP:
					case TRANSLATE:
					case TRIM:
					case TRIM_ARRAY:
					case TRUNC:
					case TRUNC_TIMESTAMP:
					case UCASE:
					case UNICODE:
					case UNICODE_STR:
					case UNISTR:
					case UPPER:
					case VARBINARY:
					case VARCHAR:
					case VARCHAR9:
					case VARCHAR_BIT_FORMAT:
					case VARCHAR_FORMAT:
					case VARGRAPHIC:
					case VERIFY_GROUP_FOR_USER:
					case VERIFY_ROLE_FOR_USER:
					case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
					case WEEK:
					case WEEK_ISO:
					case WRAP:
					case XMLATTRIBUTES:
					case XMLCOMMENT:
					case XMLCONCAT:
					case XMLDOCUMENT:
					case XMLELEMENT:
					case XMLFOREST:
					case XMLMODIFY:
					case XMLPARSE:
					case XMLPI:
					case XMLQUERY:
					case XMLSERIALIZE:
					case XMLTEXT:
					case XMLXSROBJECTID:
					case XSLTRANSFORM:
					case CURRENT_ACCELERATOR:
					case CURRENT_APPLICATION_COMPATIBILITY:
					case CURRENT_APPLICATION_ENCODING_SCHEME:
					case CURRENT_CLIENT_ACCTNG:
					case CURRENT_CLIENT_APPLNAME:
					case CURRENT_CLIENT_CORR_TOKEN:
					case CURRENT_CLIENT_USERID:
					case CURRENT_CLIENT_WRKSTNNAME:
					case CURRENT_DATE:
					case CURRENT_DEBUG_MODE:
					case CURRENT_DECFLOAT_ROUNDING_MODE:
					case CURRENT_DEGREE:
					case CURRENT_EXPLAIN_MODE:
					case CURRENT_GET_ACCEL_ARCHIVE:
					case CURRENT_LOCALE_LC_CTYPE:
					case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
					case CURRENT_MEMBER:
					case CURRENT_OPTIMIZATION_HINT:
					case CURRENT_PACKAGE_PATH:
					case CURRENT_PACKAGESET:
					case CURRENT_PATH:
					case CURRENT_PRECISION:
					case CURRENT_QUERY_ACCELERATION:
					case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
					case CURRENT_REFRESH_AGE:
					case CURRENT_ROUTINE_VERSION:
					case CURRENT_RULES:
					case CURRENT_SCHEMA:
					case CURRENT_SERVER:
					case CURRENT_SQLID:
					case CURRENT_TEMPORAL_BUSINESS_TIME:
					case CURRENT_TEMPORAL_SYSTEM_TIME:
					case CURRENT_TIME:
					case CURRENT_TIMESTAMP:
					case CURRENT_TIME_ZONE:
					case ENCRYPTION_PASSWORD:
					case SESSION_TIME_ZONE:
					case SESSION_USER:
					case USER:
					case ADMIN_TASK_LIST:
					case ADMIN_TASK_OUTPUT:
					case ADMIN_TASK_STATUS:
					case BLOCKING_THREADS:
					case MQREADALL:
					case MQREADALLCLOB:
					case MQRECEIVEALL:
					case MQRECEIVEALLCLOB:
					case XMLTABLE:
					case SQLIDENTIFIER:
						{
						setState(5572);
						identifier();
						}
						break;
					case NUMERICLITERAL:
						{
						setState(5573);
						match(NUMERICLITERAL);
						}
						break;
					case INTEGERLITERAL:
						{
						setState(5574);
						match(INTEGERLITERAL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					} 
				}
				setState(5581);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,634,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SchemaNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSchemaName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSchemaName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSchemaName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SchemaNameContext schemaName() throws RecognitionException {
		SchemaNameContext _localctx = new SchemaNameContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_schemaName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5582);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public CorrelationNameContext correlationName() {
			return getRuleContext(CorrelationNameContext.class,0);
		}
		public LocationNameContext locationName() {
			return getRuleContext(LocationNameContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(DB2zSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(DB2zSQLParser.DOT, i);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableNameContext tableName() throws RecognitionException {
		TableNameContext _localctx = new TableNameContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_tableName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5592);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,635,_ctx) ) {
			case 1:
				{
				{
				setState(5584);
				locationName();
				setState(5585);
				match(DOT);
				setState(5586);
				schemaName();
				setState(5587);
				match(DOT);
				}
				}
				break;
			case 2:
				{
				{
				setState(5589);
				schemaName();
				setState(5590);
				match(DOT);
				}
				}
				break;
			}
			setState(5594);
			identifier();
			setState(5596);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,636,_ctx) ) {
			case 1:
				{
				setState(5595);
				match(AS);
				}
				break;
			}
			setState(5599);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,637,_ctx) ) {
			case 1:
				{
				setState(5598);
				correlationName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public LocationNameContext locationName() {
			return getRuleContext(LocationNameContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(DB2zSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(DB2zSQLParser.DOT, i);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public AlterTableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableNameContext alterTableName() throws RecognitionException {
		AlterTableNameContext _localctx = new AlterTableNameContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_alterTableName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5609);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,638,_ctx) ) {
			case 1:
				{
				{
				setState(5601);
				locationName();
				setState(5602);
				match(DOT);
				setState(5603);
				schemaName();
				setState(5604);
				match(DOT);
				}
				}
				break;
			case 2:
				{
				{
				setState(5606);
				schemaName();
				setState(5607);
				match(DOT);
				}
				}
				break;
			}
			setState(5611);
			identifier();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AuxTableNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public LocationNameContext locationName() {
			return getRuleContext(LocationNameContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(DB2zSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(DB2zSQLParser.DOT, i);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public AuxTableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_auxTableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAuxTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAuxTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAuxTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AuxTableNameContext auxTableName() throws RecognitionException {
		AuxTableNameContext _localctx = new AuxTableNameContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_auxTableName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5621);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,639,_ctx) ) {
			case 1:
				{
				{
				setState(5613);
				locationName();
				setState(5614);
				match(DOT);
				setState(5615);
				schemaName();
				setState(5616);
				match(DOT);
				}
				}
				break;
			case 2:
				{
				{
				setState(5618);
				schemaName();
				setState(5619);
				match(DOT);
				}
				}
				break;
			}
			setState(5623);
			identifier();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HistoryTableNameContext extends ParserRuleContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public HistoryTableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_historyTableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterHistoryTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitHistoryTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitHistoryTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HistoryTableNameContext historyTableName() throws RecognitionException {
		HistoryTableNameContext _localctx = new HistoryTableNameContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_historyTableName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5625);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CloneTableNameContext extends ParserRuleContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public CloneTableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cloneTableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCloneTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCloneTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCloneTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CloneTableNameContext cloneTableName() throws RecognitionException {
		CloneTableNameContext _localctx = new CloneTableNameContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_cloneTableName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5627);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArchiveTableNameContext extends ParserRuleContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public ArchiveTableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_archiveTableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterArchiveTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitArchiveTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitArchiveTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArchiveTableNameContext archiveTableName() throws RecognitionException {
		ArchiveTableNameContext _localctx = new ArchiveTableNameContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_archiveTableName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5629);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ViewNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public CorrelationNameContext correlationName() {
			return getRuleContext(CorrelationNameContext.class,0);
		}
		public LocationNameContext locationName() {
			return getRuleContext(LocationNameContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(DB2zSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(DB2zSQLParser.DOT, i);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public ViewNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterViewName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitViewName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitViewName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ViewNameContext viewName() throws RecognitionException {
		ViewNameContext _localctx = new ViewNameContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_viewName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5639);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,640,_ctx) ) {
			case 1:
				{
				{
				setState(5631);
				locationName();
				setState(5632);
				match(DOT);
				setState(5633);
				schemaName();
				setState(5634);
				match(DOT);
				}
				}
				break;
			case 2:
				{
				{
				setState(5636);
				schemaName();
				setState(5637);
				match(DOT);
				}
				}
				break;
			}
			setState(5641);
			identifier();
			setState(5643);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,641,_ctx) ) {
			case 1:
				{
				setState(5642);
				correlationName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProgramNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ProgramNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_programName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterProgramName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitProgramName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitProgramName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProgramNameContext programName() throws RecognitionException {
		ProgramNameContext _localctx = new ProgramNameContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_programName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5645);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PackageNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public PackageNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_packageName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPackageName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPackageName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPackageName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PackageNameContext packageName() throws RecognitionException {
		PackageNameContext _localctx = new PackageNameContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_packageName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5647);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PlanNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public PlanNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_planName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPlanName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPlanName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPlanName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PlanNameContext planName() throws RecognitionException {
		PlanNameContext _localctx = new PlanNameContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_planName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5649);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypeNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTypeName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTypeName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTypeName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypeNameContext typeName() throws RecognitionException {
		TypeNameContext _localctx = new TypeNameContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_typeName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5651);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public VariableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterVariableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitVariableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitVariableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableNameContext variableName() throws RecognitionException {
		VariableNameContext _localctx = new VariableNameContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_variableName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5653);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AliasNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public AliasNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aliasName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAliasName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAliasName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAliasName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AliasNameContext aliasName() throws RecognitionException {
		AliasNameContext _localctx = new AliasNameContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_aliasName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5655);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ConstraintNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterConstraintName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitConstraintName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitConstraintName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintNameContext constraintName() throws RecognitionException {
		ConstraintNameContext _localctx = new ConstraintNameContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_constraintName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5657);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoutineVersionIDContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> NUMERICLITERAL() { return getTokens(DB2zSQLParser.NUMERICLITERAL); }
		public TerminalNode NUMERICLITERAL(int i) {
			return getToken(DB2zSQLParser.NUMERICLITERAL, i);
		}
		public List<TerminalNode> INTEGERLITERAL() { return getTokens(DB2zSQLParser.INTEGERLITERAL); }
		public TerminalNode INTEGERLITERAL(int i) {
			return getToken(DB2zSQLParser.INTEGERLITERAL, i);
		}
		public List<TerminalNode> DOT() { return getTokens(DB2zSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(DB2zSQLParser.DOT, i);
		}
		public RoutineVersionIDContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routineVersionID; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRoutineVersionID(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRoutineVersionID(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRoutineVersionID(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoutineVersionIDContext routineVersionID() throws RecognitionException {
		RoutineVersionIDContext _localctx = new RoutineVersionIDContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_routineVersionID);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5662);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case ALL:
			case ALLOCATE:
			case ALLOW:
			case ALTER:
			case ALTERAND:
			case ANY:
			case ARRAY:
			case ARRAY_EXISTS:
			case AS:
			case ASENSITIVE:
			case ASSOCIATE:
			case ASUTIME:
			case AT:
			case AUDIT:
			case AUX:
			case AUXILIARY:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BUFFERPOOL:
			case BY:
			case CALL:
			case CAPTURE:
			case CASCADED:
			case CASE:
			case CAST:
			case CCSID:
			case CHAR:
			case CHARACTER:
			case CHECK:
			case CLONE:
			case CLOSE:
			case CLUSTER:
			case COLLECTION:
			case COLLID:
			case COLUMN:
			case COMMENT:
			case COMMIT:
			case CONCAT:
			case CONDITION:
			case CONNECT:
			case CONNECTION:
			case CONSTRAINT:
			case CONTAINS:
			case CONTENT:
			case CONTINUE:
			case CREATE:
			case CUBE:
			case CURRENT:
			case CURRENT_LC_CTYPE:
			case CURRVAL:
			case CURSOR:
			case DATA:
			case DATABASE:
			case DAY:
			case DAYS:
			case DBINFO:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DISABLE:
			case DISALLOW:
			case DISTINCT:
			case DO:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSSIZE:
			case DYNAMIC:
			case EDITPROC:
			case ELSE:
			case ELSEIF:
			case ENCODING:
			case ENCRYPTION:
			case END:
			case END_EXEC:
			case ENDING:
			case ERASE:
			case ESCAPE:
			case EXCEPT:
			case EXCEPTION:
			case EXEC_SQL:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case FENCED:
			case FETCH:
			case FIELDPROC:
			case FINAL:
			case FIRST:
			case FOR:
			case FREE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANT:
			case GROUP:
			case HANDLER:
			case HAVING:
			case HOLD:
			case HOUR:
			case HOURS:
			case IF:
			case IMMEDIATE:
			case IN:
			case INCLUSIVE:
			case INDEX:
			case INDEXBP:
			case INHERIT:
			case INNER:
			case INOUT:
			case INSENSITIVE:
			case INSERT:
			case INTERSECT:
			case INTO:
			case IS:
			case ISOBID:
			case ITERATE:
			case JAR:
			case JOIN:
			case KEEP:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LAST:
			case LC_CTYPE:
			case LEAVE:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOCALE:
			case LOCATOR:
			case LOCATORS:
			case LOCK:
			case LOCKMAX:
			case LOCKSIZE:
			case LONG:
			case LOOP:
			case MAINTAINED:
			case MATERIALIZED:
			case MICROSECOND:
			case MICROSECONDS:
			case MODIFIES:
			case MONTH:
			case MONTHS:
			case NEXT:
			case NEXTVAL:
			case NO:
			case NONE:
			case NOT:
			case NULL:
			case NULLS:
			case NUMPARTS:
			case OBID:
			case OF:
			case OFFSET:
			case OLD:
			case ON:
			case OPEN:
			case OPTIMIZATION:
			case OPTIMIZE:
			case OR:
			case ORDER:
			case ORGANIZATION:
			case OUT:
			case OUTER:
			case PACKAGE:
			case PADDED:
			case PARAMETER:
			case PART:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONING:
			case PATH:
			case PERIOD:
			case PIECESIZE:
			case PLAN:
			case PRECISION:
			case PREPARE:
			case PREVVAL:
			case PRIOR:
			case PRIQTY:
			case PRIVILEGES:
			case PROCEDURE:
			case PROGRAM:
			case PSID:
			case PUBLIC:
			case QUERY:
			case QUERYNO:
			case READS:
			case REFERENCES:
			case REFRESH:
			case RELEASE:
			case RENAME:
			case REPEAT:
			case RESIGNAL:
			case RESTRICT:
			case RESULT:
			case RESULT_SET_LOCATOR:
			case RETURN:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUND_CEILING:
			case ROUND_DOWN:
			case ROUND_FLOOR:
			case ROUND_HALF_DOWN:
			case ROUND_HALF_EVEN:
			case ROUND_HALF_UP:
			case ROUND_UP:
			case ROW:
			case ROWSET:
			case RUN:
			case SAVEPOINT:
			case SCHEMA:
			case SCRATCHPAD:
			case SECOND:
			case SECONDS:
			case SECQTY:
			case SECURITY:
			case SELECT:
			case SENSITIVE:
			case SEQUENCE:
			case SET:
			case SIGNAL:
			case SIMPLE:
			case SOME:
			case SOURCE:
			case SPECIFIC:
			case STANDARD:
			case STATEMENT:
			case STATIC:
			case STAY:
			case STOGROUP:
			case STORES:
			case STYLE:
			case SUMMARY:
			case SYNONYM:
			case SYSDATE:
			case SYSTEM:
			case SYSTIMESTAMP:
			case TABLE:
			case TABLESPACE:
			case THEN:
			case TO:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNDO:
			case UNION:
			case UNIQUE:
			case UNTIL:
			case UPDATE:
			case USING:
			case VALIDPROC:
			case VALUE:
			case VALUES:
			case VARIABLE:
			case VARIANT:
			case VCAT:
			case VERSIONING:
			case VIEW:
			case VOLATILE:
			case VOLUMES:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WLM:
			case XMLCAST:
			case XMLEXISTS:
			case XMLNAMESPACES:
			case YEAR:
			case YEARS:
			case ZONE:
			case AND:
			case ARRAY_AGG:
			case ASC:
			case AVG:
			case BIT:
			case CHANGE:
			case CODEUNITS16:
			case CODEUNITS32:
			case CORR:
			case CORRELATION:
			case COUNT:
			case COUNT_BIG:
			case COVAR:
			case COVARIANCE:
			case COVARIANCE_SAMP:
			case COVAR_POP:
			case COVAR_SAMP:
			case CS:
			case CUME_DIST:
			case DENSE_RANK:
			case DESC:
			case EBCDIC:
			case EXCLUSIVE:
			case FIRST_VALUE:
			case FOLLOWING:
			case GROUPING:
			case IGNORE:
			case INDICATOR:
			case INPUT:
			case ISNULL:
			case LAG:
			case LARGE:
			case LAST_VALUE:
			case LEAD:
			case LISTAGG:
			case LOCKED:
			case LOCKS:
			case MEDIAN:
			case MINUTES:
			case MIXED:
			case NOTNULL:
			case NTH_VALUE:
			case NTILE:
			case NUMERIC:
			case OBJECT:
			case OCTETS:
			case ONLY:
			case OVER:
			case PASSING:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PERCENT_RANK:
			case PRECEDING:
			case PREVIOUS:
			case RANGE:
			case RANK:
			case RATIO_TO_REPORT:
			case READ:
			case REF:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_ICPT:
			case REGR_INTERCEPT:
			case REGR_R2:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case RESPECT:
			case ROW_NUMBER:
			case ROWS:
			case RR:
			case RS:
			case SBCS:
			case SELECTIVITY:
			case SETS:
			case SHARE:
			case SKIP_:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case TOKEN:
			case UNBOUNDED:
			case UNPACK:
			case UR:
			case USE:
			case VAR:
			case VARIANCE:
			case VARIANCE_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARYING:
			case WITHOUT:
			case XML:
			case XMLAGG:
			case COLUMNS:
			case SQLID:
			case ORDINALITY:
			case SYSTEM_TIME:
			case BUSINESS_TIME:
			case MULTIPLIER:
			case UNNEST:
			case CROSS:
			case CALLER:
			case CLIENT:
			case POSITIONING:
			case SCROLL:
			case ACTION:
			case ASSEMBLE:
			case C_:
			case CALLED:
			case COBOL:
			case DB2:
			case DEFINER:
			case DISPATCH:
			case ENVIRONMENT:
			case FAILURE:
			case FAILURES:
			case JAVA:
			case MAIN:
			case NAME:
			case OPTIONS:
			case PARALLEL:
			case PLI:
			case REGISTERS:
			case RESIDENT:
			case SECURED:
			case SPECIAL:
			case SQL:
			case STOP:
			case SUB:
			case YES:
			case APPLICATION:
			case CHANGED:
			case COMPATIBILITY:
			case COMPRESS:
			case COPY:
			case FREEPAGE:
			case GBPCACHE:
			case INCLUDE:
			case MAXVALUE:
			case MINVALUE:
			case PCTFREE:
			case REGENERATE:
			case MASK:
			case ENABLE:
			case PERMISSION:
			case ATOMIC:
			case SQLEXCEPTION:
			case MERGE:
			case MATCHED:
			case SQLSTATE:
			case MESSAGE_TEXT:
			case OVERRIDING:
			case PORTION:
			case DB2SQL:
			case DEBUG:
			case GENERAL:
			case MODE_:
			case REXX:
			case CACHE:
			case CYCLE:
			case INCREMENT:
			case RESTART:
			case DATACLAS:
			case MGMTCLAS:
			case REMOVE:
			case STORCLAS:
			case ACCESS:
			case ACTIVATE:
			case ALWAYS:
			case APPEND:
			case ARCHIVE:
			case BUSINESS:
			case CASCADE:
			case CHANGES:
			case CONTROL:
			case DEACTIVATE:
			case DEFERRED:
			case EACH:
			case ENFORCED:
			case EXTRA:
			case FOREIGN:
			case HIDDEN_:
			case HISTORY:
			case ID:
			case IDENTITY:
			case IMPLICITLY:
			case INITIALLY:
			case INLINE:
			case OPERATION:
			case ORGANIZE:
			case OVERLAPS:
			case PACKAGE_NAME:
			case PACKAGE_SCHEMA:
			case PACKAGE_VERSION:
			case PRIMARY:
			case RESET:
			case ROTATE:
			case START:
			case SYSIBM:
			case TRANSACTION:
			case XMLSCHEMA:
			case ELEMENT:
			case URL:
			case NAMESPACE:
			case LOCATION:
			case SYSXSR:
			case ALGORITHM:
			case FIXEDLENGTH:
			case HUFFMAN:
			case LOB:
			case LOG:
			case LOGGED:
			case MAXPARTITIONS:
			case MAXROWS:
			case MEMBER:
			case MOVE:
			case PAGE:
			case PAGENUM:
			case PENDING:
			case RELATIVE:
			case SEGSIZE:
			case TRACKMOD:
			case ADDRESS:
			case ATTRIBUTES:
			case AUTHENTICATION:
			case AUTHID:
			case CONTEXT:
			case JOBNAME:
			case OWNER:
			case PROFILE:
			case QUALIFIER:
			case SERVAUTH:
			case TRUSTED:
			case SECTION:
			case ACTIVE:
			case VERSION:
			case ALIAS:
			case WORK:
			case WORKFILE:
			case SYSDEFLT:
			case NULTERM:
			case STRUCTURE:
			case GENERIC:
			case TEMPORARY:
			case DEFER:
			case DEFINE:
			case EXCLUDE:
			case GENERATE:
			case KEYS:
			case XMLPATTERN:
			case ABS:
			case ABSVAL:
			case ACOS:
			case ADD_DAYS:
			case ADD_MONTHS:
			case ARRAY_DELETE:
			case ARRAY_FIRST:
			case ARRAY_LAST:
			case ARRAY_NEXT:
			case ARRAY_PRIOR:
			case ARRAY_TRIM:
			case ASCII:
			case ASCII_CHR:
			case ASCIISTR:
			case ASCII_STR:
			case ASIN:
			case ATAN:
			case ATAN2:
			case ATANH:
			case BIGINT:
			case BINARY:
			case BITAND:
			case BITANDNOT:
			case BITNOT:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BTRIM:
			case CARDINALITY:
			case CCSID_ENCODING:
			case CEIL:
			case CEILING:
			case CHAR9:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case CHR:
			case CLOB:
			case COALESCE:
			case COLLATION_KEY:
			case COMPARE_DECFLOAT:
			case COS:
			case COSH:
			case DATE:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFWEEK_ISO:
			case DAYOFYEAR:
			case DAYS_BETWEEN:
			case DBCLOB:
			case DEC:
			case DECFLOAT:
			case DECFLOAT_FORMAT:
			case DECFLOAT_SORTKEY:
			case DECIMAL:
			case DECODE:
			case DECRYPT_BINARY:
			case DECRYPT_BIT:
			case DECRYPT_CHAR:
			case DECRYPT_DATAKEY_BIGINT:
			case DECRYPT_DATAKEY_BIT:
			case DECRYPT_DATAKEY_CLOB:
			case DECRYPT_DATAKEY_DBCLOB:
			case DECRYPT_DATAKEY_DECIMAL:
			case DECRYPT_DATAKEY_INTEGER:
			case DECRYPT_DATAKEY_VARCHAR:
			case DECRYPT_DATAKEY_VARGRAPHIC:
			case DECRYPT_DB:
			case DEGREES:
			case DIFFERENCE:
			case DIGITS:
			case DOUBLE_PRECISION:
			case DSN_XMLVALIDATE:
			case EBCDIC_CHR:
			case EBCDIC_STR:
			case ENCRYPT_DATAKEY:
			case ENCRYPT_TDES:
			case EXP:
			case EXTRACT:
			case FLOAT:
			case FLOOR:
			case GENERATE_UNIQUE:
			case GENERATE_UNIQUE_BINARY:
			case GETHINT:
			case GETVARIABLE:
			case GRAPHIC:
			case GREATEST:
			case HASH:
			case HASH_CRC32:
			case HASH_MD5:
			case HASH_SHA1:
			case HASH_SHA256:
			case HEX:
			case IDENTITY_VAL_LOCAL:
			case IFNULL:
			case INSTR:
			case INT:
			case INTEGER:
			case JULIAN_DAY:
			case LAST_DAY:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LN:
			case LOCATE:
			case LOCATE_IN_STRING:
			case LOG10:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAX:
			case MAX_CARDINALITY:
			case MIDNIGHT_SECONDS:
			case MIN:
			case MINUTE:
			case MOD:
			case MONTHS_BETWEEN:
			case MQREAD:
			case MQREADCLOB:
			case MQRECEIVE:
			case MQRECEIVECLOB:
			case MQSEND:
			case MULTIPLY_ALT:
			case NEXT_DAY:
			case NEXT_MONTH:
			case NORMALIZE_DECFLOAT:
			case NORMALIZE_STRING:
			case NULLIF:
			case NVL:
			case OVERLAY:
			case PACK:
			case POSITION:
			case POSSTR:
			case POW:
			case POWER:
			case QUANTIZE:
			case QUARTER:
			case RADIANS:
			case RAISE_ERROR:
			case RAND:
			case RANDOM:
			case REAL:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REPLACE:
			case RID:
			case ROUND:
			case ROUND_TIMESTAMP:
			case ROWID:
			case RPAD:
			case RTRIM:
			case SCORE:
			case SIGN:
			case SIN:
			case SINH:
			case SMALLINT:
			case SOAPHTTPC:
			case SOAPHTTPNC:
			case SOAPHTTPNV:
			case SOAPHTTPV:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STRIP:
			case STRLEFT:
			case STRPOS:
			case STRRIGHT:
			case SUBSTR:
			case SUBSTRING:
			case TAN:
			case TANH:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIMESTAMP_FORMAT:
			case TIMESTAMP_ISO:
			case TIMESTAMP_TZ:
			case TO_CHAR:
			case TO_CLOB:
			case TO_DATE:
			case TO_NUMBER:
			case TOTALORDER:
			case TO_TIMESTAMP:
			case TRANSLATE:
			case TRIM:
			case TRIM_ARRAY:
			case TRUNC:
			case TRUNC_TIMESTAMP:
			case UCASE:
			case UNICODE:
			case UNICODE_STR:
			case UNISTR:
			case UPPER:
			case VARBINARY:
			case VARCHAR:
			case VARCHAR9:
			case VARCHAR_BIT_FORMAT:
			case VARCHAR_FORMAT:
			case VARGRAPHIC:
			case VERIFY_GROUP_FOR_USER:
			case VERIFY_ROLE_FOR_USER:
			case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
			case WEEK:
			case WEEK_ISO:
			case WRAP:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLCONCAT:
			case XMLDOCUMENT:
			case XMLELEMENT:
			case XMLFOREST:
			case XMLMODIFY:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLSERIALIZE:
			case XMLTEXT:
			case XMLXSROBJECTID:
			case XSLTRANSFORM:
			case CURRENT_ACCELERATOR:
			case CURRENT_APPLICATION_COMPATIBILITY:
			case CURRENT_APPLICATION_ENCODING_SCHEME:
			case CURRENT_CLIENT_ACCTNG:
			case CURRENT_CLIENT_APPLNAME:
			case CURRENT_CLIENT_CORR_TOKEN:
			case CURRENT_CLIENT_USERID:
			case CURRENT_CLIENT_WRKSTNNAME:
			case CURRENT_DATE:
			case CURRENT_DEBUG_MODE:
			case CURRENT_DECFLOAT_ROUNDING_MODE:
			case CURRENT_DEGREE:
			case CURRENT_EXPLAIN_MODE:
			case CURRENT_GET_ACCEL_ARCHIVE:
			case CURRENT_LOCALE_LC_CTYPE:
			case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
			case CURRENT_MEMBER:
			case CURRENT_OPTIMIZATION_HINT:
			case CURRENT_PACKAGE_PATH:
			case CURRENT_PACKAGESET:
			case CURRENT_PATH:
			case CURRENT_PRECISION:
			case CURRENT_QUERY_ACCELERATION:
			case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
			case CURRENT_REFRESH_AGE:
			case CURRENT_ROUTINE_VERSION:
			case CURRENT_RULES:
			case CURRENT_SCHEMA:
			case CURRENT_SERVER:
			case CURRENT_SQLID:
			case CURRENT_TEMPORAL_BUSINESS_TIME:
			case CURRENT_TEMPORAL_SYSTEM_TIME:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_TIME_ZONE:
			case ENCRYPTION_PASSWORD:
			case SESSION_TIME_ZONE:
			case SESSION_USER:
			case USER:
			case ADMIN_TASK_LIST:
			case ADMIN_TASK_OUTPUT:
			case ADMIN_TASK_STATUS:
			case BLOCKING_THREADS:
			case MQREADALL:
			case MQREADALLCLOB:
			case MQRECEIVEALL:
			case MQRECEIVEALLCLOB:
			case XMLTABLE:
			case SQLIDENTIFIER:
				{
				setState(5659);
				identifier();
				}
				break;
			case NUMERICLITERAL:
				{
				setState(5660);
				match(NUMERICLITERAL);
				}
				break;
			case INTEGERLITERAL:
				{
				setState(5661);
				match(INTEGERLITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5674);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,645,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5665);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DOT) {
						{
						setState(5664);
						match(DOT);
						}
					}

					setState(5670);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ADD:
					case AFTER:
					case ALL:
					case ALLOCATE:
					case ALLOW:
					case ALTER:
					case ALTERAND:
					case ANY:
					case ARRAY:
					case ARRAY_EXISTS:
					case AS:
					case ASENSITIVE:
					case ASSOCIATE:
					case ASUTIME:
					case AT:
					case AUDIT:
					case AUX:
					case AUXILIARY:
					case BEFORE:
					case BEGIN:
					case BETWEEN:
					case BUFFERPOOL:
					case BY:
					case CALL:
					case CAPTURE:
					case CASCADED:
					case CASE:
					case CAST:
					case CCSID:
					case CHAR:
					case CHARACTER:
					case CHECK:
					case CLONE:
					case CLOSE:
					case CLUSTER:
					case COLLECTION:
					case COLLID:
					case COLUMN:
					case COMMENT:
					case COMMIT:
					case CONCAT:
					case CONDITION:
					case CONNECT:
					case CONNECTION:
					case CONSTRAINT:
					case CONTAINS:
					case CONTENT:
					case CONTINUE:
					case CREATE:
					case CUBE:
					case CURRENT:
					case CURRENT_LC_CTYPE:
					case CURRVAL:
					case CURSOR:
					case DATA:
					case DATABASE:
					case DAY:
					case DAYS:
					case DBINFO:
					case DECLARE:
					case DEFAULT:
					case DELETE:
					case DESCRIPTOR:
					case DETERMINISTIC:
					case DISABLE:
					case DISALLOW:
					case DISTINCT:
					case DO:
					case DOCUMENT:
					case DOUBLE:
					case DROP:
					case DSSIZE:
					case DYNAMIC:
					case EDITPROC:
					case ELSE:
					case ELSEIF:
					case ENCODING:
					case ENCRYPTION:
					case END:
					case END_EXEC:
					case ENDING:
					case ERASE:
					case ESCAPE:
					case EXCEPT:
					case EXCEPTION:
					case EXEC_SQL:
					case EXECUTE:
					case EXISTS:
					case EXIT:
					case EXPLAIN:
					case EXTERNAL:
					case FENCED:
					case FETCH:
					case FIELDPROC:
					case FINAL:
					case FIRST:
					case FOR:
					case FREE:
					case FROM:
					case FULL:
					case FUNCTION:
					case GENERATED:
					case GET:
					case GLOBAL:
					case GO:
					case GOTO:
					case GRANT:
					case GROUP:
					case HANDLER:
					case HAVING:
					case HOLD:
					case HOUR:
					case HOURS:
					case IF:
					case IMMEDIATE:
					case IN:
					case INCLUSIVE:
					case INDEX:
					case INDEXBP:
					case INHERIT:
					case INNER:
					case INOUT:
					case INSENSITIVE:
					case INSERT:
					case INTERSECT:
					case INTO:
					case IS:
					case ISOBID:
					case ITERATE:
					case JAR:
					case JOIN:
					case KEEP:
					case KEY:
					case LABEL:
					case LANGUAGE:
					case LAST:
					case LC_CTYPE:
					case LEAVE:
					case LEFT:
					case LIKE:
					case LIMIT:
					case LOCAL:
					case LOCALE:
					case LOCATOR:
					case LOCATORS:
					case LOCK:
					case LOCKMAX:
					case LOCKSIZE:
					case LONG:
					case LOOP:
					case MAINTAINED:
					case MATERIALIZED:
					case MICROSECOND:
					case MICROSECONDS:
					case MODIFIES:
					case MONTH:
					case MONTHS:
					case NEXT:
					case NEXTVAL:
					case NO:
					case NONE:
					case NOT:
					case NULL:
					case NULLS:
					case NUMPARTS:
					case OBID:
					case OF:
					case OFFSET:
					case OLD:
					case ON:
					case OPEN:
					case OPTIMIZATION:
					case OPTIMIZE:
					case OR:
					case ORDER:
					case ORGANIZATION:
					case OUT:
					case OUTER:
					case PACKAGE:
					case PADDED:
					case PARAMETER:
					case PART:
					case PARTITION:
					case PARTITIONED:
					case PARTITIONING:
					case PATH:
					case PERIOD:
					case PIECESIZE:
					case PLAN:
					case PRECISION:
					case PREPARE:
					case PREVVAL:
					case PRIOR:
					case PRIQTY:
					case PRIVILEGES:
					case PROCEDURE:
					case PROGRAM:
					case PSID:
					case PUBLIC:
					case QUERY:
					case QUERYNO:
					case READS:
					case REFERENCES:
					case REFRESH:
					case RELEASE:
					case RENAME:
					case REPEAT:
					case RESIGNAL:
					case RESTRICT:
					case RESULT:
					case RESULT_SET_LOCATOR:
					case RETURN:
					case RETURNS:
					case REVOKE:
					case RIGHT:
					case ROLE:
					case ROLLBACK:
					case ROLLUP:
					case ROUND_CEILING:
					case ROUND_DOWN:
					case ROUND_FLOOR:
					case ROUND_HALF_DOWN:
					case ROUND_HALF_EVEN:
					case ROUND_HALF_UP:
					case ROUND_UP:
					case ROW:
					case ROWSET:
					case RUN:
					case SAVEPOINT:
					case SCHEMA:
					case SCRATCHPAD:
					case SECOND:
					case SECONDS:
					case SECQTY:
					case SECURITY:
					case SELECT:
					case SENSITIVE:
					case SEQUENCE:
					case SET:
					case SIGNAL:
					case SIMPLE:
					case SOME:
					case SOURCE:
					case SPECIFIC:
					case STANDARD:
					case STATEMENT:
					case STATIC:
					case STAY:
					case STOGROUP:
					case STORES:
					case STYLE:
					case SUMMARY:
					case SYNONYM:
					case SYSDATE:
					case SYSTEM:
					case SYSTIMESTAMP:
					case TABLE:
					case TABLESPACE:
					case THEN:
					case TO:
					case TRIGGER:
					case TRUNCATE:
					case TYPE:
					case UNDO:
					case UNION:
					case UNIQUE:
					case UNTIL:
					case UPDATE:
					case USING:
					case VALIDPROC:
					case VALUE:
					case VALUES:
					case VARIABLE:
					case VARIANT:
					case VCAT:
					case VERSIONING:
					case VIEW:
					case VOLATILE:
					case VOLUMES:
					case WHEN:
					case WHENEVER:
					case WHERE:
					case WHILE:
					case WITH:
					case WLM:
					case XMLCAST:
					case XMLEXISTS:
					case XMLNAMESPACES:
					case YEAR:
					case YEARS:
					case ZONE:
					case AND:
					case ARRAY_AGG:
					case ASC:
					case AVG:
					case BIT:
					case CHANGE:
					case CODEUNITS16:
					case CODEUNITS32:
					case CORR:
					case CORRELATION:
					case COUNT:
					case COUNT_BIG:
					case COVAR:
					case COVARIANCE:
					case COVARIANCE_SAMP:
					case COVAR_POP:
					case COVAR_SAMP:
					case CS:
					case CUME_DIST:
					case DENSE_RANK:
					case DESC:
					case EBCDIC:
					case EXCLUSIVE:
					case FIRST_VALUE:
					case FOLLOWING:
					case GROUPING:
					case IGNORE:
					case INDICATOR:
					case INPUT:
					case ISNULL:
					case LAG:
					case LARGE:
					case LAST_VALUE:
					case LEAD:
					case LISTAGG:
					case LOCKED:
					case LOCKS:
					case MEDIAN:
					case MINUTES:
					case MIXED:
					case NOTNULL:
					case NTH_VALUE:
					case NTILE:
					case NUMERIC:
					case OBJECT:
					case OCTETS:
					case ONLY:
					case OVER:
					case PASSING:
					case PERCENTILE_CONT:
					case PERCENTILE_DISC:
					case PERCENT_RANK:
					case PRECEDING:
					case PREVIOUS:
					case RANGE:
					case RANK:
					case RATIO_TO_REPORT:
					case READ:
					case REF:
					case REGR_AVGX:
					case REGR_AVGY:
					case REGR_COUNT:
					case REGR_ICPT:
					case REGR_INTERCEPT:
					case REGR_R2:
					case REGR_SLOPE:
					case REGR_SXX:
					case REGR_SXY:
					case REGR_SYY:
					case RESPECT:
					case ROW_NUMBER:
					case ROWS:
					case RR:
					case RS:
					case SBCS:
					case SELECTIVITY:
					case SETS:
					case SHARE:
					case SKIP_:
					case STDDEV:
					case STDDEV_POP:
					case STDDEV_SAMP:
					case SUM:
					case TOKEN:
					case UNBOUNDED:
					case UNPACK:
					case UR:
					case USE:
					case VAR:
					case VARIANCE:
					case VARIANCE_SAMP:
					case VAR_POP:
					case VAR_SAMP:
					case VARYING:
					case WITHOUT:
					case XML:
					case XMLAGG:
					case COLUMNS:
					case SQLID:
					case ORDINALITY:
					case SYSTEM_TIME:
					case BUSINESS_TIME:
					case MULTIPLIER:
					case UNNEST:
					case CROSS:
					case CALLER:
					case CLIENT:
					case POSITIONING:
					case SCROLL:
					case ACTION:
					case ASSEMBLE:
					case C_:
					case CALLED:
					case COBOL:
					case DB2:
					case DEFINER:
					case DISPATCH:
					case ENVIRONMENT:
					case FAILURE:
					case FAILURES:
					case JAVA:
					case MAIN:
					case NAME:
					case OPTIONS:
					case PARALLEL:
					case PLI:
					case REGISTERS:
					case RESIDENT:
					case SECURED:
					case SPECIAL:
					case SQL:
					case STOP:
					case SUB:
					case YES:
					case APPLICATION:
					case CHANGED:
					case COMPATIBILITY:
					case COMPRESS:
					case COPY:
					case FREEPAGE:
					case GBPCACHE:
					case INCLUDE:
					case MAXVALUE:
					case MINVALUE:
					case PCTFREE:
					case REGENERATE:
					case MASK:
					case ENABLE:
					case PERMISSION:
					case ATOMIC:
					case SQLEXCEPTION:
					case MERGE:
					case MATCHED:
					case SQLSTATE:
					case MESSAGE_TEXT:
					case OVERRIDING:
					case PORTION:
					case DB2SQL:
					case DEBUG:
					case GENERAL:
					case MODE_:
					case REXX:
					case CACHE:
					case CYCLE:
					case INCREMENT:
					case RESTART:
					case DATACLAS:
					case MGMTCLAS:
					case REMOVE:
					case STORCLAS:
					case ACCESS:
					case ACTIVATE:
					case ALWAYS:
					case APPEND:
					case ARCHIVE:
					case BUSINESS:
					case CASCADE:
					case CHANGES:
					case CONTROL:
					case DEACTIVATE:
					case DEFERRED:
					case EACH:
					case ENFORCED:
					case EXTRA:
					case FOREIGN:
					case HIDDEN_:
					case HISTORY:
					case ID:
					case IDENTITY:
					case IMPLICITLY:
					case INITIALLY:
					case INLINE:
					case OPERATION:
					case ORGANIZE:
					case OVERLAPS:
					case PACKAGE_NAME:
					case PACKAGE_SCHEMA:
					case PACKAGE_VERSION:
					case PRIMARY:
					case RESET:
					case ROTATE:
					case START:
					case SYSIBM:
					case TRANSACTION:
					case XMLSCHEMA:
					case ELEMENT:
					case URL:
					case NAMESPACE:
					case LOCATION:
					case SYSXSR:
					case ALGORITHM:
					case FIXEDLENGTH:
					case HUFFMAN:
					case LOB:
					case LOG:
					case LOGGED:
					case MAXPARTITIONS:
					case MAXROWS:
					case MEMBER:
					case MOVE:
					case PAGE:
					case PAGENUM:
					case PENDING:
					case RELATIVE:
					case SEGSIZE:
					case TRACKMOD:
					case ADDRESS:
					case ATTRIBUTES:
					case AUTHENTICATION:
					case AUTHID:
					case CONTEXT:
					case JOBNAME:
					case OWNER:
					case PROFILE:
					case QUALIFIER:
					case SERVAUTH:
					case TRUSTED:
					case SECTION:
					case ACTIVE:
					case VERSION:
					case ALIAS:
					case WORK:
					case WORKFILE:
					case SYSDEFLT:
					case NULTERM:
					case STRUCTURE:
					case GENERIC:
					case TEMPORARY:
					case DEFER:
					case DEFINE:
					case EXCLUDE:
					case GENERATE:
					case KEYS:
					case XMLPATTERN:
					case ABS:
					case ABSVAL:
					case ACOS:
					case ADD_DAYS:
					case ADD_MONTHS:
					case ARRAY_DELETE:
					case ARRAY_FIRST:
					case ARRAY_LAST:
					case ARRAY_NEXT:
					case ARRAY_PRIOR:
					case ARRAY_TRIM:
					case ASCII:
					case ASCII_CHR:
					case ASCIISTR:
					case ASCII_STR:
					case ASIN:
					case ATAN:
					case ATAN2:
					case ATANH:
					case BIGINT:
					case BINARY:
					case BITAND:
					case BITANDNOT:
					case BITNOT:
					case BITOR:
					case BITXOR:
					case BLOB:
					case BTRIM:
					case CARDINALITY:
					case CCSID_ENCODING:
					case CEIL:
					case CEILING:
					case CHAR9:
					case CHARACTER_LENGTH:
					case CHAR_LENGTH:
					case CHR:
					case CLOB:
					case COALESCE:
					case COLLATION_KEY:
					case COMPARE_DECFLOAT:
					case COS:
					case COSH:
					case DATE:
					case DAYOFMONTH:
					case DAYOFWEEK:
					case DAYOFWEEK_ISO:
					case DAYOFYEAR:
					case DAYS_BETWEEN:
					case DBCLOB:
					case DEC:
					case DECFLOAT:
					case DECFLOAT_FORMAT:
					case DECFLOAT_SORTKEY:
					case DECIMAL:
					case DECODE:
					case DECRYPT_BINARY:
					case DECRYPT_BIT:
					case DECRYPT_CHAR:
					case DECRYPT_DATAKEY_BIGINT:
					case DECRYPT_DATAKEY_BIT:
					case DECRYPT_DATAKEY_CLOB:
					case DECRYPT_DATAKEY_DBCLOB:
					case DECRYPT_DATAKEY_DECIMAL:
					case DECRYPT_DATAKEY_INTEGER:
					case DECRYPT_DATAKEY_VARCHAR:
					case DECRYPT_DATAKEY_VARGRAPHIC:
					case DECRYPT_DB:
					case DEGREES:
					case DIFFERENCE:
					case DIGITS:
					case DOUBLE_PRECISION:
					case DSN_XMLVALIDATE:
					case EBCDIC_CHR:
					case EBCDIC_STR:
					case ENCRYPT_DATAKEY:
					case ENCRYPT_TDES:
					case EXP:
					case EXTRACT:
					case FLOAT:
					case FLOOR:
					case GENERATE_UNIQUE:
					case GENERATE_UNIQUE_BINARY:
					case GETHINT:
					case GETVARIABLE:
					case GRAPHIC:
					case GREATEST:
					case HASH:
					case HASH_CRC32:
					case HASH_MD5:
					case HASH_SHA1:
					case HASH_SHA256:
					case HEX:
					case IDENTITY_VAL_LOCAL:
					case IFNULL:
					case INSTR:
					case INT:
					case INTEGER:
					case JULIAN_DAY:
					case LAST_DAY:
					case LCASE:
					case LEAST:
					case LENGTH:
					case LN:
					case LOCATE:
					case LOCATE_IN_STRING:
					case LOG10:
					case LOWER:
					case LPAD:
					case LTRIM:
					case MAX:
					case MAX_CARDINALITY:
					case MIDNIGHT_SECONDS:
					case MIN:
					case MINUTE:
					case MOD:
					case MONTHS_BETWEEN:
					case MQREAD:
					case MQREADCLOB:
					case MQRECEIVE:
					case MQRECEIVECLOB:
					case MQSEND:
					case MULTIPLY_ALT:
					case NEXT_DAY:
					case NEXT_MONTH:
					case NORMALIZE_DECFLOAT:
					case NORMALIZE_STRING:
					case NULLIF:
					case NVL:
					case OVERLAY:
					case PACK:
					case POSITION:
					case POSSTR:
					case POW:
					case POWER:
					case QUANTIZE:
					case QUARTER:
					case RADIANS:
					case RAISE_ERROR:
					case RAND:
					case RANDOM:
					case REAL:
					case REGEXP_COUNT:
					case REGEXP_INSTR:
					case REGEXP_LIKE:
					case REGEXP_REPLACE:
					case REGEXP_SUBSTR:
					case REPLACE:
					case RID:
					case ROUND:
					case ROUND_TIMESTAMP:
					case ROWID:
					case RPAD:
					case RTRIM:
					case SCORE:
					case SIGN:
					case SIN:
					case SINH:
					case SMALLINT:
					case SOAPHTTPC:
					case SOAPHTTPNC:
					case SOAPHTTPNV:
					case SOAPHTTPV:
					case SOUNDEX:
					case SPACE:
					case SQRT:
					case STRIP:
					case STRLEFT:
					case STRPOS:
					case STRRIGHT:
					case SUBSTR:
					case SUBSTRING:
					case TAN:
					case TANH:
					case TIME:
					case TIMESTAMP:
					case TIMESTAMPADD:
					case TIMESTAMPDIFF:
					case TIMESTAMP_FORMAT:
					case TIMESTAMP_ISO:
					case TIMESTAMP_TZ:
					case TO_CHAR:
					case TO_CLOB:
					case TO_DATE:
					case TO_NUMBER:
					case TOTALORDER:
					case TO_TIMESTAMP:
					case TRANSLATE:
					case TRIM:
					case TRIM_ARRAY:
					case TRUNC:
					case TRUNC_TIMESTAMP:
					case UCASE:
					case UNICODE:
					case UNICODE_STR:
					case UNISTR:
					case UPPER:
					case VARBINARY:
					case VARCHAR:
					case VARCHAR9:
					case VARCHAR_BIT_FORMAT:
					case VARCHAR_FORMAT:
					case VARGRAPHIC:
					case VERIFY_GROUP_FOR_USER:
					case VERIFY_ROLE_FOR_USER:
					case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
					case WEEK:
					case WEEK_ISO:
					case WRAP:
					case XMLATTRIBUTES:
					case XMLCOMMENT:
					case XMLCONCAT:
					case XMLDOCUMENT:
					case XMLELEMENT:
					case XMLFOREST:
					case XMLMODIFY:
					case XMLPARSE:
					case XMLPI:
					case XMLQUERY:
					case XMLSERIALIZE:
					case XMLTEXT:
					case XMLXSROBJECTID:
					case XSLTRANSFORM:
					case CURRENT_ACCELERATOR:
					case CURRENT_APPLICATION_COMPATIBILITY:
					case CURRENT_APPLICATION_ENCODING_SCHEME:
					case CURRENT_CLIENT_ACCTNG:
					case CURRENT_CLIENT_APPLNAME:
					case CURRENT_CLIENT_CORR_TOKEN:
					case CURRENT_CLIENT_USERID:
					case CURRENT_CLIENT_WRKSTNNAME:
					case CURRENT_DATE:
					case CURRENT_DEBUG_MODE:
					case CURRENT_DECFLOAT_ROUNDING_MODE:
					case CURRENT_DEGREE:
					case CURRENT_EXPLAIN_MODE:
					case CURRENT_GET_ACCEL_ARCHIVE:
					case CURRENT_LOCALE_LC_CTYPE:
					case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
					case CURRENT_MEMBER:
					case CURRENT_OPTIMIZATION_HINT:
					case CURRENT_PACKAGE_PATH:
					case CURRENT_PACKAGESET:
					case CURRENT_PATH:
					case CURRENT_PRECISION:
					case CURRENT_QUERY_ACCELERATION:
					case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
					case CURRENT_REFRESH_AGE:
					case CURRENT_ROUTINE_VERSION:
					case CURRENT_RULES:
					case CURRENT_SCHEMA:
					case CURRENT_SERVER:
					case CURRENT_SQLID:
					case CURRENT_TEMPORAL_BUSINESS_TIME:
					case CURRENT_TEMPORAL_SYSTEM_TIME:
					case CURRENT_TIME:
					case CURRENT_TIMESTAMP:
					case CURRENT_TIME_ZONE:
					case ENCRYPTION_PASSWORD:
					case SESSION_TIME_ZONE:
					case SESSION_USER:
					case USER:
					case ADMIN_TASK_LIST:
					case ADMIN_TASK_OUTPUT:
					case ADMIN_TASK_STATUS:
					case BLOCKING_THREADS:
					case MQREADALL:
					case MQREADALLCLOB:
					case MQRECEIVEALL:
					case MQRECEIVEALLCLOB:
					case XMLTABLE:
					case SQLIDENTIFIER:
						{
						setState(5667);
						identifier();
						}
						break;
					case NUMERICLITERAL:
						{
						setState(5668);
						match(NUMERICLITERAL);
						}
						break;
					case INTEGERLITERAL:
						{
						setState(5669);
						match(INTEGERLITERAL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					} 
				}
				setState(5676);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,645,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VersionIDContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> NUMERICLITERAL() { return getTokens(DB2zSQLParser.NUMERICLITERAL); }
		public TerminalNode NUMERICLITERAL(int i) {
			return getToken(DB2zSQLParser.NUMERICLITERAL, i);
		}
		public List<TerminalNode> INTEGERLITERAL() { return getTokens(DB2zSQLParser.INTEGERLITERAL); }
		public TerminalNode INTEGERLITERAL(int i) {
			return getToken(DB2zSQLParser.INTEGERLITERAL, i);
		}
		public List<TerminalNode> DOT() { return getTokens(DB2zSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(DB2zSQLParser.DOT, i);
		}
		public VersionIDContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_versionID; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterVersionID(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitVersionID(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitVersionID(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VersionIDContext versionID() throws RecognitionException {
		VersionIDContext _localctx = new VersionIDContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_versionID);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5680);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case ALL:
			case ALLOCATE:
			case ALLOW:
			case ALTER:
			case ALTERAND:
			case ANY:
			case ARRAY:
			case ARRAY_EXISTS:
			case AS:
			case ASENSITIVE:
			case ASSOCIATE:
			case ASUTIME:
			case AT:
			case AUDIT:
			case AUX:
			case AUXILIARY:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BUFFERPOOL:
			case BY:
			case CALL:
			case CAPTURE:
			case CASCADED:
			case CASE:
			case CAST:
			case CCSID:
			case CHAR:
			case CHARACTER:
			case CHECK:
			case CLONE:
			case CLOSE:
			case CLUSTER:
			case COLLECTION:
			case COLLID:
			case COLUMN:
			case COMMENT:
			case COMMIT:
			case CONCAT:
			case CONDITION:
			case CONNECT:
			case CONNECTION:
			case CONSTRAINT:
			case CONTAINS:
			case CONTENT:
			case CONTINUE:
			case CREATE:
			case CUBE:
			case CURRENT:
			case CURRENT_LC_CTYPE:
			case CURRVAL:
			case CURSOR:
			case DATA:
			case DATABASE:
			case DAY:
			case DAYS:
			case DBINFO:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DISABLE:
			case DISALLOW:
			case DISTINCT:
			case DO:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSSIZE:
			case DYNAMIC:
			case EDITPROC:
			case ELSE:
			case ELSEIF:
			case ENCODING:
			case ENCRYPTION:
			case END:
			case END_EXEC:
			case ENDING:
			case ERASE:
			case ESCAPE:
			case EXCEPT:
			case EXCEPTION:
			case EXEC_SQL:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case FENCED:
			case FETCH:
			case FIELDPROC:
			case FINAL:
			case FIRST:
			case FOR:
			case FREE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANT:
			case GROUP:
			case HANDLER:
			case HAVING:
			case HOLD:
			case HOUR:
			case HOURS:
			case IF:
			case IMMEDIATE:
			case IN:
			case INCLUSIVE:
			case INDEX:
			case INDEXBP:
			case INHERIT:
			case INNER:
			case INOUT:
			case INSENSITIVE:
			case INSERT:
			case INTERSECT:
			case INTO:
			case IS:
			case ISOBID:
			case ITERATE:
			case JAR:
			case JOIN:
			case KEEP:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LAST:
			case LC_CTYPE:
			case LEAVE:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOCALE:
			case LOCATOR:
			case LOCATORS:
			case LOCK:
			case LOCKMAX:
			case LOCKSIZE:
			case LONG:
			case LOOP:
			case MAINTAINED:
			case MATERIALIZED:
			case MICROSECOND:
			case MICROSECONDS:
			case MODIFIES:
			case MONTH:
			case MONTHS:
			case NEXT:
			case NEXTVAL:
			case NO:
			case NONE:
			case NOT:
			case NULL:
			case NULLS:
			case NUMPARTS:
			case OBID:
			case OF:
			case OFFSET:
			case OLD:
			case ON:
			case OPEN:
			case OPTIMIZATION:
			case OPTIMIZE:
			case OR:
			case ORDER:
			case ORGANIZATION:
			case OUT:
			case OUTER:
			case PACKAGE:
			case PADDED:
			case PARAMETER:
			case PART:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONING:
			case PATH:
			case PERIOD:
			case PIECESIZE:
			case PLAN:
			case PRECISION:
			case PREPARE:
			case PREVVAL:
			case PRIOR:
			case PRIQTY:
			case PRIVILEGES:
			case PROCEDURE:
			case PROGRAM:
			case PSID:
			case PUBLIC:
			case QUERY:
			case QUERYNO:
			case READS:
			case REFERENCES:
			case REFRESH:
			case RELEASE:
			case RENAME:
			case REPEAT:
			case RESIGNAL:
			case RESTRICT:
			case RESULT:
			case RESULT_SET_LOCATOR:
			case RETURN:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUND_CEILING:
			case ROUND_DOWN:
			case ROUND_FLOOR:
			case ROUND_HALF_DOWN:
			case ROUND_HALF_EVEN:
			case ROUND_HALF_UP:
			case ROUND_UP:
			case ROW:
			case ROWSET:
			case RUN:
			case SAVEPOINT:
			case SCHEMA:
			case SCRATCHPAD:
			case SECOND:
			case SECONDS:
			case SECQTY:
			case SECURITY:
			case SELECT:
			case SENSITIVE:
			case SEQUENCE:
			case SET:
			case SIGNAL:
			case SIMPLE:
			case SOME:
			case SOURCE:
			case SPECIFIC:
			case STANDARD:
			case STATEMENT:
			case STATIC:
			case STAY:
			case STOGROUP:
			case STORES:
			case STYLE:
			case SUMMARY:
			case SYNONYM:
			case SYSDATE:
			case SYSTEM:
			case SYSTIMESTAMP:
			case TABLE:
			case TABLESPACE:
			case THEN:
			case TO:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNDO:
			case UNION:
			case UNIQUE:
			case UNTIL:
			case UPDATE:
			case USING:
			case VALIDPROC:
			case VALUE:
			case VALUES:
			case VARIABLE:
			case VARIANT:
			case VCAT:
			case VERSIONING:
			case VIEW:
			case VOLATILE:
			case VOLUMES:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WLM:
			case XMLCAST:
			case XMLEXISTS:
			case XMLNAMESPACES:
			case YEAR:
			case YEARS:
			case ZONE:
			case AND:
			case ARRAY_AGG:
			case ASC:
			case AVG:
			case BIT:
			case CHANGE:
			case CODEUNITS16:
			case CODEUNITS32:
			case CORR:
			case CORRELATION:
			case COUNT:
			case COUNT_BIG:
			case COVAR:
			case COVARIANCE:
			case COVARIANCE_SAMP:
			case COVAR_POP:
			case COVAR_SAMP:
			case CS:
			case CUME_DIST:
			case DENSE_RANK:
			case DESC:
			case EBCDIC:
			case EXCLUSIVE:
			case FIRST_VALUE:
			case FOLLOWING:
			case GROUPING:
			case IGNORE:
			case INDICATOR:
			case INPUT:
			case ISNULL:
			case LAG:
			case LARGE:
			case LAST_VALUE:
			case LEAD:
			case LISTAGG:
			case LOCKED:
			case LOCKS:
			case MEDIAN:
			case MINUTES:
			case MIXED:
			case NOTNULL:
			case NTH_VALUE:
			case NTILE:
			case NUMERIC:
			case OBJECT:
			case OCTETS:
			case ONLY:
			case OVER:
			case PASSING:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PERCENT_RANK:
			case PRECEDING:
			case PREVIOUS:
			case RANGE:
			case RANK:
			case RATIO_TO_REPORT:
			case READ:
			case REF:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_ICPT:
			case REGR_INTERCEPT:
			case REGR_R2:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case RESPECT:
			case ROW_NUMBER:
			case ROWS:
			case RR:
			case RS:
			case SBCS:
			case SELECTIVITY:
			case SETS:
			case SHARE:
			case SKIP_:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case TOKEN:
			case UNBOUNDED:
			case UNPACK:
			case UR:
			case USE:
			case VAR:
			case VARIANCE:
			case VARIANCE_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARYING:
			case WITHOUT:
			case XML:
			case XMLAGG:
			case COLUMNS:
			case SQLID:
			case ORDINALITY:
			case SYSTEM_TIME:
			case BUSINESS_TIME:
			case MULTIPLIER:
			case UNNEST:
			case CROSS:
			case CALLER:
			case CLIENT:
			case POSITIONING:
			case SCROLL:
			case ACTION:
			case ASSEMBLE:
			case C_:
			case CALLED:
			case COBOL:
			case DB2:
			case DEFINER:
			case DISPATCH:
			case ENVIRONMENT:
			case FAILURE:
			case FAILURES:
			case JAVA:
			case MAIN:
			case NAME:
			case OPTIONS:
			case PARALLEL:
			case PLI:
			case REGISTERS:
			case RESIDENT:
			case SECURED:
			case SPECIAL:
			case SQL:
			case STOP:
			case SUB:
			case YES:
			case APPLICATION:
			case CHANGED:
			case COMPATIBILITY:
			case COMPRESS:
			case COPY:
			case FREEPAGE:
			case GBPCACHE:
			case INCLUDE:
			case MAXVALUE:
			case MINVALUE:
			case PCTFREE:
			case REGENERATE:
			case MASK:
			case ENABLE:
			case PERMISSION:
			case ATOMIC:
			case SQLEXCEPTION:
			case MERGE:
			case MATCHED:
			case SQLSTATE:
			case MESSAGE_TEXT:
			case OVERRIDING:
			case PORTION:
			case DB2SQL:
			case DEBUG:
			case GENERAL:
			case MODE_:
			case REXX:
			case CACHE:
			case CYCLE:
			case INCREMENT:
			case RESTART:
			case DATACLAS:
			case MGMTCLAS:
			case REMOVE:
			case STORCLAS:
			case ACCESS:
			case ACTIVATE:
			case ALWAYS:
			case APPEND:
			case ARCHIVE:
			case BUSINESS:
			case CASCADE:
			case CHANGES:
			case CONTROL:
			case DEACTIVATE:
			case DEFERRED:
			case EACH:
			case ENFORCED:
			case EXTRA:
			case FOREIGN:
			case HIDDEN_:
			case HISTORY:
			case ID:
			case IDENTITY:
			case IMPLICITLY:
			case INITIALLY:
			case INLINE:
			case OPERATION:
			case ORGANIZE:
			case OVERLAPS:
			case PACKAGE_NAME:
			case PACKAGE_SCHEMA:
			case PACKAGE_VERSION:
			case PRIMARY:
			case RESET:
			case ROTATE:
			case START:
			case SYSIBM:
			case TRANSACTION:
			case XMLSCHEMA:
			case ELEMENT:
			case URL:
			case NAMESPACE:
			case LOCATION:
			case SYSXSR:
			case ALGORITHM:
			case FIXEDLENGTH:
			case HUFFMAN:
			case LOB:
			case LOG:
			case LOGGED:
			case MAXPARTITIONS:
			case MAXROWS:
			case MEMBER:
			case MOVE:
			case PAGE:
			case PAGENUM:
			case PENDING:
			case RELATIVE:
			case SEGSIZE:
			case TRACKMOD:
			case ADDRESS:
			case ATTRIBUTES:
			case AUTHENTICATION:
			case AUTHID:
			case CONTEXT:
			case JOBNAME:
			case OWNER:
			case PROFILE:
			case QUALIFIER:
			case SERVAUTH:
			case TRUSTED:
			case SECTION:
			case ACTIVE:
			case VERSION:
			case ALIAS:
			case WORK:
			case WORKFILE:
			case SYSDEFLT:
			case NULTERM:
			case STRUCTURE:
			case GENERIC:
			case TEMPORARY:
			case DEFER:
			case DEFINE:
			case EXCLUDE:
			case GENERATE:
			case KEYS:
			case XMLPATTERN:
			case ABS:
			case ABSVAL:
			case ACOS:
			case ADD_DAYS:
			case ADD_MONTHS:
			case ARRAY_DELETE:
			case ARRAY_FIRST:
			case ARRAY_LAST:
			case ARRAY_NEXT:
			case ARRAY_PRIOR:
			case ARRAY_TRIM:
			case ASCII:
			case ASCII_CHR:
			case ASCIISTR:
			case ASCII_STR:
			case ASIN:
			case ATAN:
			case ATAN2:
			case ATANH:
			case BIGINT:
			case BINARY:
			case BITAND:
			case BITANDNOT:
			case BITNOT:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BTRIM:
			case CARDINALITY:
			case CCSID_ENCODING:
			case CEIL:
			case CEILING:
			case CHAR9:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case CHR:
			case CLOB:
			case COALESCE:
			case COLLATION_KEY:
			case COMPARE_DECFLOAT:
			case COS:
			case COSH:
			case DATE:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFWEEK_ISO:
			case DAYOFYEAR:
			case DAYS_BETWEEN:
			case DBCLOB:
			case DEC:
			case DECFLOAT:
			case DECFLOAT_FORMAT:
			case DECFLOAT_SORTKEY:
			case DECIMAL:
			case DECODE:
			case DECRYPT_BINARY:
			case DECRYPT_BIT:
			case DECRYPT_CHAR:
			case DECRYPT_DATAKEY_BIGINT:
			case DECRYPT_DATAKEY_BIT:
			case DECRYPT_DATAKEY_CLOB:
			case DECRYPT_DATAKEY_DBCLOB:
			case DECRYPT_DATAKEY_DECIMAL:
			case DECRYPT_DATAKEY_INTEGER:
			case DECRYPT_DATAKEY_VARCHAR:
			case DECRYPT_DATAKEY_VARGRAPHIC:
			case DECRYPT_DB:
			case DEGREES:
			case DIFFERENCE:
			case DIGITS:
			case DOUBLE_PRECISION:
			case DSN_XMLVALIDATE:
			case EBCDIC_CHR:
			case EBCDIC_STR:
			case ENCRYPT_DATAKEY:
			case ENCRYPT_TDES:
			case EXP:
			case EXTRACT:
			case FLOAT:
			case FLOOR:
			case GENERATE_UNIQUE:
			case GENERATE_UNIQUE_BINARY:
			case GETHINT:
			case GETVARIABLE:
			case GRAPHIC:
			case GREATEST:
			case HASH:
			case HASH_CRC32:
			case HASH_MD5:
			case HASH_SHA1:
			case HASH_SHA256:
			case HEX:
			case IDENTITY_VAL_LOCAL:
			case IFNULL:
			case INSTR:
			case INT:
			case INTEGER:
			case JULIAN_DAY:
			case LAST_DAY:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LN:
			case LOCATE:
			case LOCATE_IN_STRING:
			case LOG10:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAX:
			case MAX_CARDINALITY:
			case MIDNIGHT_SECONDS:
			case MIN:
			case MINUTE:
			case MOD:
			case MONTHS_BETWEEN:
			case MQREAD:
			case MQREADCLOB:
			case MQRECEIVE:
			case MQRECEIVECLOB:
			case MQSEND:
			case MULTIPLY_ALT:
			case NEXT_DAY:
			case NEXT_MONTH:
			case NORMALIZE_DECFLOAT:
			case NORMALIZE_STRING:
			case NULLIF:
			case NVL:
			case OVERLAY:
			case PACK:
			case POSITION:
			case POSSTR:
			case POW:
			case POWER:
			case QUANTIZE:
			case QUARTER:
			case RADIANS:
			case RAISE_ERROR:
			case RAND:
			case RANDOM:
			case REAL:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REPLACE:
			case RID:
			case ROUND:
			case ROUND_TIMESTAMP:
			case ROWID:
			case RPAD:
			case RTRIM:
			case SCORE:
			case SIGN:
			case SIN:
			case SINH:
			case SMALLINT:
			case SOAPHTTPC:
			case SOAPHTTPNC:
			case SOAPHTTPNV:
			case SOAPHTTPV:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STRIP:
			case STRLEFT:
			case STRPOS:
			case STRRIGHT:
			case SUBSTR:
			case SUBSTRING:
			case TAN:
			case TANH:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIMESTAMP_FORMAT:
			case TIMESTAMP_ISO:
			case TIMESTAMP_TZ:
			case TO_CHAR:
			case TO_CLOB:
			case TO_DATE:
			case TO_NUMBER:
			case TOTALORDER:
			case TO_TIMESTAMP:
			case TRANSLATE:
			case TRIM:
			case TRIM_ARRAY:
			case TRUNC:
			case TRUNC_TIMESTAMP:
			case UCASE:
			case UNICODE:
			case UNICODE_STR:
			case UNISTR:
			case UPPER:
			case VARBINARY:
			case VARCHAR:
			case VARCHAR9:
			case VARCHAR_BIT_FORMAT:
			case VARCHAR_FORMAT:
			case VARGRAPHIC:
			case VERIFY_GROUP_FOR_USER:
			case VERIFY_ROLE_FOR_USER:
			case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
			case WEEK:
			case WEEK_ISO:
			case WRAP:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLCONCAT:
			case XMLDOCUMENT:
			case XMLELEMENT:
			case XMLFOREST:
			case XMLMODIFY:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLSERIALIZE:
			case XMLTEXT:
			case XMLXSROBJECTID:
			case XSLTRANSFORM:
			case CURRENT_ACCELERATOR:
			case CURRENT_APPLICATION_COMPATIBILITY:
			case CURRENT_APPLICATION_ENCODING_SCHEME:
			case CURRENT_CLIENT_ACCTNG:
			case CURRENT_CLIENT_APPLNAME:
			case CURRENT_CLIENT_CORR_TOKEN:
			case CURRENT_CLIENT_USERID:
			case CURRENT_CLIENT_WRKSTNNAME:
			case CURRENT_DATE:
			case CURRENT_DEBUG_MODE:
			case CURRENT_DECFLOAT_ROUNDING_MODE:
			case CURRENT_DEGREE:
			case CURRENT_EXPLAIN_MODE:
			case CURRENT_GET_ACCEL_ARCHIVE:
			case CURRENT_LOCALE_LC_CTYPE:
			case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
			case CURRENT_MEMBER:
			case CURRENT_OPTIMIZATION_HINT:
			case CURRENT_PACKAGE_PATH:
			case CURRENT_PACKAGESET:
			case CURRENT_PATH:
			case CURRENT_PRECISION:
			case CURRENT_QUERY_ACCELERATION:
			case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
			case CURRENT_REFRESH_AGE:
			case CURRENT_ROUTINE_VERSION:
			case CURRENT_RULES:
			case CURRENT_SCHEMA:
			case CURRENT_SERVER:
			case CURRENT_SQLID:
			case CURRENT_TEMPORAL_BUSINESS_TIME:
			case CURRENT_TEMPORAL_SYSTEM_TIME:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_TIME_ZONE:
			case ENCRYPTION_PASSWORD:
			case SESSION_TIME_ZONE:
			case SESSION_USER:
			case USER:
			case ADMIN_TASK_LIST:
			case ADMIN_TASK_OUTPUT:
			case ADMIN_TASK_STATUS:
			case BLOCKING_THREADS:
			case MQREADALL:
			case MQREADALLCLOB:
			case MQRECEIVEALL:
			case MQRECEIVEALLCLOB:
			case XMLTABLE:
			case SQLIDENTIFIER:
				{
				setState(5677);
				identifier();
				}
				break;
			case NUMERICLITERAL:
				{
				setState(5678);
				match(NUMERICLITERAL);
				}
				break;
			case INTEGERLITERAL:
				{
				setState(5679);
				match(INTEGERLITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5692);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,649,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5683);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DOT) {
						{
						setState(5682);
						match(DOT);
						}
					}

					setState(5688);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ADD:
					case AFTER:
					case ALL:
					case ALLOCATE:
					case ALLOW:
					case ALTER:
					case ALTERAND:
					case ANY:
					case ARRAY:
					case ARRAY_EXISTS:
					case AS:
					case ASENSITIVE:
					case ASSOCIATE:
					case ASUTIME:
					case AT:
					case AUDIT:
					case AUX:
					case AUXILIARY:
					case BEFORE:
					case BEGIN:
					case BETWEEN:
					case BUFFERPOOL:
					case BY:
					case CALL:
					case CAPTURE:
					case CASCADED:
					case CASE:
					case CAST:
					case CCSID:
					case CHAR:
					case CHARACTER:
					case CHECK:
					case CLONE:
					case CLOSE:
					case CLUSTER:
					case COLLECTION:
					case COLLID:
					case COLUMN:
					case COMMENT:
					case COMMIT:
					case CONCAT:
					case CONDITION:
					case CONNECT:
					case CONNECTION:
					case CONSTRAINT:
					case CONTAINS:
					case CONTENT:
					case CONTINUE:
					case CREATE:
					case CUBE:
					case CURRENT:
					case CURRENT_LC_CTYPE:
					case CURRVAL:
					case CURSOR:
					case DATA:
					case DATABASE:
					case DAY:
					case DAYS:
					case DBINFO:
					case DECLARE:
					case DEFAULT:
					case DELETE:
					case DESCRIPTOR:
					case DETERMINISTIC:
					case DISABLE:
					case DISALLOW:
					case DISTINCT:
					case DO:
					case DOCUMENT:
					case DOUBLE:
					case DROP:
					case DSSIZE:
					case DYNAMIC:
					case EDITPROC:
					case ELSE:
					case ELSEIF:
					case ENCODING:
					case ENCRYPTION:
					case END:
					case END_EXEC:
					case ENDING:
					case ERASE:
					case ESCAPE:
					case EXCEPT:
					case EXCEPTION:
					case EXEC_SQL:
					case EXECUTE:
					case EXISTS:
					case EXIT:
					case EXPLAIN:
					case EXTERNAL:
					case FENCED:
					case FETCH:
					case FIELDPROC:
					case FINAL:
					case FIRST:
					case FOR:
					case FREE:
					case FROM:
					case FULL:
					case FUNCTION:
					case GENERATED:
					case GET:
					case GLOBAL:
					case GO:
					case GOTO:
					case GRANT:
					case GROUP:
					case HANDLER:
					case HAVING:
					case HOLD:
					case HOUR:
					case HOURS:
					case IF:
					case IMMEDIATE:
					case IN:
					case INCLUSIVE:
					case INDEX:
					case INDEXBP:
					case INHERIT:
					case INNER:
					case INOUT:
					case INSENSITIVE:
					case INSERT:
					case INTERSECT:
					case INTO:
					case IS:
					case ISOBID:
					case ITERATE:
					case JAR:
					case JOIN:
					case KEEP:
					case KEY:
					case LABEL:
					case LANGUAGE:
					case LAST:
					case LC_CTYPE:
					case LEAVE:
					case LEFT:
					case LIKE:
					case LIMIT:
					case LOCAL:
					case LOCALE:
					case LOCATOR:
					case LOCATORS:
					case LOCK:
					case LOCKMAX:
					case LOCKSIZE:
					case LONG:
					case LOOP:
					case MAINTAINED:
					case MATERIALIZED:
					case MICROSECOND:
					case MICROSECONDS:
					case MODIFIES:
					case MONTH:
					case MONTHS:
					case NEXT:
					case NEXTVAL:
					case NO:
					case NONE:
					case NOT:
					case NULL:
					case NULLS:
					case NUMPARTS:
					case OBID:
					case OF:
					case OFFSET:
					case OLD:
					case ON:
					case OPEN:
					case OPTIMIZATION:
					case OPTIMIZE:
					case OR:
					case ORDER:
					case ORGANIZATION:
					case OUT:
					case OUTER:
					case PACKAGE:
					case PADDED:
					case PARAMETER:
					case PART:
					case PARTITION:
					case PARTITIONED:
					case PARTITIONING:
					case PATH:
					case PERIOD:
					case PIECESIZE:
					case PLAN:
					case PRECISION:
					case PREPARE:
					case PREVVAL:
					case PRIOR:
					case PRIQTY:
					case PRIVILEGES:
					case PROCEDURE:
					case PROGRAM:
					case PSID:
					case PUBLIC:
					case QUERY:
					case QUERYNO:
					case READS:
					case REFERENCES:
					case REFRESH:
					case RELEASE:
					case RENAME:
					case REPEAT:
					case RESIGNAL:
					case RESTRICT:
					case RESULT:
					case RESULT_SET_LOCATOR:
					case RETURN:
					case RETURNS:
					case REVOKE:
					case RIGHT:
					case ROLE:
					case ROLLBACK:
					case ROLLUP:
					case ROUND_CEILING:
					case ROUND_DOWN:
					case ROUND_FLOOR:
					case ROUND_HALF_DOWN:
					case ROUND_HALF_EVEN:
					case ROUND_HALF_UP:
					case ROUND_UP:
					case ROW:
					case ROWSET:
					case RUN:
					case SAVEPOINT:
					case SCHEMA:
					case SCRATCHPAD:
					case SECOND:
					case SECONDS:
					case SECQTY:
					case SECURITY:
					case SELECT:
					case SENSITIVE:
					case SEQUENCE:
					case SET:
					case SIGNAL:
					case SIMPLE:
					case SOME:
					case SOURCE:
					case SPECIFIC:
					case STANDARD:
					case STATEMENT:
					case STATIC:
					case STAY:
					case STOGROUP:
					case STORES:
					case STYLE:
					case SUMMARY:
					case SYNONYM:
					case SYSDATE:
					case SYSTEM:
					case SYSTIMESTAMP:
					case TABLE:
					case TABLESPACE:
					case THEN:
					case TO:
					case TRIGGER:
					case TRUNCATE:
					case TYPE:
					case UNDO:
					case UNION:
					case UNIQUE:
					case UNTIL:
					case UPDATE:
					case USING:
					case VALIDPROC:
					case VALUE:
					case VALUES:
					case VARIABLE:
					case VARIANT:
					case VCAT:
					case VERSIONING:
					case VIEW:
					case VOLATILE:
					case VOLUMES:
					case WHEN:
					case WHENEVER:
					case WHERE:
					case WHILE:
					case WITH:
					case WLM:
					case XMLCAST:
					case XMLEXISTS:
					case XMLNAMESPACES:
					case YEAR:
					case YEARS:
					case ZONE:
					case AND:
					case ARRAY_AGG:
					case ASC:
					case AVG:
					case BIT:
					case CHANGE:
					case CODEUNITS16:
					case CODEUNITS32:
					case CORR:
					case CORRELATION:
					case COUNT:
					case COUNT_BIG:
					case COVAR:
					case COVARIANCE:
					case COVARIANCE_SAMP:
					case COVAR_POP:
					case COVAR_SAMP:
					case CS:
					case CUME_DIST:
					case DENSE_RANK:
					case DESC:
					case EBCDIC:
					case EXCLUSIVE:
					case FIRST_VALUE:
					case FOLLOWING:
					case GROUPING:
					case IGNORE:
					case INDICATOR:
					case INPUT:
					case ISNULL:
					case LAG:
					case LARGE:
					case LAST_VALUE:
					case LEAD:
					case LISTAGG:
					case LOCKED:
					case LOCKS:
					case MEDIAN:
					case MINUTES:
					case MIXED:
					case NOTNULL:
					case NTH_VALUE:
					case NTILE:
					case NUMERIC:
					case OBJECT:
					case OCTETS:
					case ONLY:
					case OVER:
					case PASSING:
					case PERCENTILE_CONT:
					case PERCENTILE_DISC:
					case PERCENT_RANK:
					case PRECEDING:
					case PREVIOUS:
					case RANGE:
					case RANK:
					case RATIO_TO_REPORT:
					case READ:
					case REF:
					case REGR_AVGX:
					case REGR_AVGY:
					case REGR_COUNT:
					case REGR_ICPT:
					case REGR_INTERCEPT:
					case REGR_R2:
					case REGR_SLOPE:
					case REGR_SXX:
					case REGR_SXY:
					case REGR_SYY:
					case RESPECT:
					case ROW_NUMBER:
					case ROWS:
					case RR:
					case RS:
					case SBCS:
					case SELECTIVITY:
					case SETS:
					case SHARE:
					case SKIP_:
					case STDDEV:
					case STDDEV_POP:
					case STDDEV_SAMP:
					case SUM:
					case TOKEN:
					case UNBOUNDED:
					case UNPACK:
					case UR:
					case USE:
					case VAR:
					case VARIANCE:
					case VARIANCE_SAMP:
					case VAR_POP:
					case VAR_SAMP:
					case VARYING:
					case WITHOUT:
					case XML:
					case XMLAGG:
					case COLUMNS:
					case SQLID:
					case ORDINALITY:
					case SYSTEM_TIME:
					case BUSINESS_TIME:
					case MULTIPLIER:
					case UNNEST:
					case CROSS:
					case CALLER:
					case CLIENT:
					case POSITIONING:
					case SCROLL:
					case ACTION:
					case ASSEMBLE:
					case C_:
					case CALLED:
					case COBOL:
					case DB2:
					case DEFINER:
					case DISPATCH:
					case ENVIRONMENT:
					case FAILURE:
					case FAILURES:
					case JAVA:
					case MAIN:
					case NAME:
					case OPTIONS:
					case PARALLEL:
					case PLI:
					case REGISTERS:
					case RESIDENT:
					case SECURED:
					case SPECIAL:
					case SQL:
					case STOP:
					case SUB:
					case YES:
					case APPLICATION:
					case CHANGED:
					case COMPATIBILITY:
					case COMPRESS:
					case COPY:
					case FREEPAGE:
					case GBPCACHE:
					case INCLUDE:
					case MAXVALUE:
					case MINVALUE:
					case PCTFREE:
					case REGENERATE:
					case MASK:
					case ENABLE:
					case PERMISSION:
					case ATOMIC:
					case SQLEXCEPTION:
					case MERGE:
					case MATCHED:
					case SQLSTATE:
					case MESSAGE_TEXT:
					case OVERRIDING:
					case PORTION:
					case DB2SQL:
					case DEBUG:
					case GENERAL:
					case MODE_:
					case REXX:
					case CACHE:
					case CYCLE:
					case INCREMENT:
					case RESTART:
					case DATACLAS:
					case MGMTCLAS:
					case REMOVE:
					case STORCLAS:
					case ACCESS:
					case ACTIVATE:
					case ALWAYS:
					case APPEND:
					case ARCHIVE:
					case BUSINESS:
					case CASCADE:
					case CHANGES:
					case CONTROL:
					case DEACTIVATE:
					case DEFERRED:
					case EACH:
					case ENFORCED:
					case EXTRA:
					case FOREIGN:
					case HIDDEN_:
					case HISTORY:
					case ID:
					case IDENTITY:
					case IMPLICITLY:
					case INITIALLY:
					case INLINE:
					case OPERATION:
					case ORGANIZE:
					case OVERLAPS:
					case PACKAGE_NAME:
					case PACKAGE_SCHEMA:
					case PACKAGE_VERSION:
					case PRIMARY:
					case RESET:
					case ROTATE:
					case START:
					case SYSIBM:
					case TRANSACTION:
					case XMLSCHEMA:
					case ELEMENT:
					case URL:
					case NAMESPACE:
					case LOCATION:
					case SYSXSR:
					case ALGORITHM:
					case FIXEDLENGTH:
					case HUFFMAN:
					case LOB:
					case LOG:
					case LOGGED:
					case MAXPARTITIONS:
					case MAXROWS:
					case MEMBER:
					case MOVE:
					case PAGE:
					case PAGENUM:
					case PENDING:
					case RELATIVE:
					case SEGSIZE:
					case TRACKMOD:
					case ADDRESS:
					case ATTRIBUTES:
					case AUTHENTICATION:
					case AUTHID:
					case CONTEXT:
					case JOBNAME:
					case OWNER:
					case PROFILE:
					case QUALIFIER:
					case SERVAUTH:
					case TRUSTED:
					case SECTION:
					case ACTIVE:
					case VERSION:
					case ALIAS:
					case WORK:
					case WORKFILE:
					case SYSDEFLT:
					case NULTERM:
					case STRUCTURE:
					case GENERIC:
					case TEMPORARY:
					case DEFER:
					case DEFINE:
					case EXCLUDE:
					case GENERATE:
					case KEYS:
					case XMLPATTERN:
					case ABS:
					case ABSVAL:
					case ACOS:
					case ADD_DAYS:
					case ADD_MONTHS:
					case ARRAY_DELETE:
					case ARRAY_FIRST:
					case ARRAY_LAST:
					case ARRAY_NEXT:
					case ARRAY_PRIOR:
					case ARRAY_TRIM:
					case ASCII:
					case ASCII_CHR:
					case ASCIISTR:
					case ASCII_STR:
					case ASIN:
					case ATAN:
					case ATAN2:
					case ATANH:
					case BIGINT:
					case BINARY:
					case BITAND:
					case BITANDNOT:
					case BITNOT:
					case BITOR:
					case BITXOR:
					case BLOB:
					case BTRIM:
					case CARDINALITY:
					case CCSID_ENCODING:
					case CEIL:
					case CEILING:
					case CHAR9:
					case CHARACTER_LENGTH:
					case CHAR_LENGTH:
					case CHR:
					case CLOB:
					case COALESCE:
					case COLLATION_KEY:
					case COMPARE_DECFLOAT:
					case COS:
					case COSH:
					case DATE:
					case DAYOFMONTH:
					case DAYOFWEEK:
					case DAYOFWEEK_ISO:
					case DAYOFYEAR:
					case DAYS_BETWEEN:
					case DBCLOB:
					case DEC:
					case DECFLOAT:
					case DECFLOAT_FORMAT:
					case DECFLOAT_SORTKEY:
					case DECIMAL:
					case DECODE:
					case DECRYPT_BINARY:
					case DECRYPT_BIT:
					case DECRYPT_CHAR:
					case DECRYPT_DATAKEY_BIGINT:
					case DECRYPT_DATAKEY_BIT:
					case DECRYPT_DATAKEY_CLOB:
					case DECRYPT_DATAKEY_DBCLOB:
					case DECRYPT_DATAKEY_DECIMAL:
					case DECRYPT_DATAKEY_INTEGER:
					case DECRYPT_DATAKEY_VARCHAR:
					case DECRYPT_DATAKEY_VARGRAPHIC:
					case DECRYPT_DB:
					case DEGREES:
					case DIFFERENCE:
					case DIGITS:
					case DOUBLE_PRECISION:
					case DSN_XMLVALIDATE:
					case EBCDIC_CHR:
					case EBCDIC_STR:
					case ENCRYPT_DATAKEY:
					case ENCRYPT_TDES:
					case EXP:
					case EXTRACT:
					case FLOAT:
					case FLOOR:
					case GENERATE_UNIQUE:
					case GENERATE_UNIQUE_BINARY:
					case GETHINT:
					case GETVARIABLE:
					case GRAPHIC:
					case GREATEST:
					case HASH:
					case HASH_CRC32:
					case HASH_MD5:
					case HASH_SHA1:
					case HASH_SHA256:
					case HEX:
					case IDENTITY_VAL_LOCAL:
					case IFNULL:
					case INSTR:
					case INT:
					case INTEGER:
					case JULIAN_DAY:
					case LAST_DAY:
					case LCASE:
					case LEAST:
					case LENGTH:
					case LN:
					case LOCATE:
					case LOCATE_IN_STRING:
					case LOG10:
					case LOWER:
					case LPAD:
					case LTRIM:
					case MAX:
					case MAX_CARDINALITY:
					case MIDNIGHT_SECONDS:
					case MIN:
					case MINUTE:
					case MOD:
					case MONTHS_BETWEEN:
					case MQREAD:
					case MQREADCLOB:
					case MQRECEIVE:
					case MQRECEIVECLOB:
					case MQSEND:
					case MULTIPLY_ALT:
					case NEXT_DAY:
					case NEXT_MONTH:
					case NORMALIZE_DECFLOAT:
					case NORMALIZE_STRING:
					case NULLIF:
					case NVL:
					case OVERLAY:
					case PACK:
					case POSITION:
					case POSSTR:
					case POW:
					case POWER:
					case QUANTIZE:
					case QUARTER:
					case RADIANS:
					case RAISE_ERROR:
					case RAND:
					case RANDOM:
					case REAL:
					case REGEXP_COUNT:
					case REGEXP_INSTR:
					case REGEXP_LIKE:
					case REGEXP_REPLACE:
					case REGEXP_SUBSTR:
					case REPLACE:
					case RID:
					case ROUND:
					case ROUND_TIMESTAMP:
					case ROWID:
					case RPAD:
					case RTRIM:
					case SCORE:
					case SIGN:
					case SIN:
					case SINH:
					case SMALLINT:
					case SOAPHTTPC:
					case SOAPHTTPNC:
					case SOAPHTTPNV:
					case SOAPHTTPV:
					case SOUNDEX:
					case SPACE:
					case SQRT:
					case STRIP:
					case STRLEFT:
					case STRPOS:
					case STRRIGHT:
					case SUBSTR:
					case SUBSTRING:
					case TAN:
					case TANH:
					case TIME:
					case TIMESTAMP:
					case TIMESTAMPADD:
					case TIMESTAMPDIFF:
					case TIMESTAMP_FORMAT:
					case TIMESTAMP_ISO:
					case TIMESTAMP_TZ:
					case TO_CHAR:
					case TO_CLOB:
					case TO_DATE:
					case TO_NUMBER:
					case TOTALORDER:
					case TO_TIMESTAMP:
					case TRANSLATE:
					case TRIM:
					case TRIM_ARRAY:
					case TRUNC:
					case TRUNC_TIMESTAMP:
					case UCASE:
					case UNICODE:
					case UNICODE_STR:
					case UNISTR:
					case UPPER:
					case VARBINARY:
					case VARCHAR:
					case VARCHAR9:
					case VARCHAR_BIT_FORMAT:
					case VARCHAR_FORMAT:
					case VARGRAPHIC:
					case VERIFY_GROUP_FOR_USER:
					case VERIFY_ROLE_FOR_USER:
					case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
					case WEEK:
					case WEEK_ISO:
					case WRAP:
					case XMLATTRIBUTES:
					case XMLCOMMENT:
					case XMLCONCAT:
					case XMLDOCUMENT:
					case XMLELEMENT:
					case XMLFOREST:
					case XMLMODIFY:
					case XMLPARSE:
					case XMLPI:
					case XMLQUERY:
					case XMLSERIALIZE:
					case XMLTEXT:
					case XMLXSROBJECTID:
					case XSLTRANSFORM:
					case CURRENT_ACCELERATOR:
					case CURRENT_APPLICATION_COMPATIBILITY:
					case CURRENT_APPLICATION_ENCODING_SCHEME:
					case CURRENT_CLIENT_ACCTNG:
					case CURRENT_CLIENT_APPLNAME:
					case CURRENT_CLIENT_CORR_TOKEN:
					case CURRENT_CLIENT_USERID:
					case CURRENT_CLIENT_WRKSTNNAME:
					case CURRENT_DATE:
					case CURRENT_DEBUG_MODE:
					case CURRENT_DECFLOAT_ROUNDING_MODE:
					case CURRENT_DEGREE:
					case CURRENT_EXPLAIN_MODE:
					case CURRENT_GET_ACCEL_ARCHIVE:
					case CURRENT_LOCALE_LC_CTYPE:
					case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
					case CURRENT_MEMBER:
					case CURRENT_OPTIMIZATION_HINT:
					case CURRENT_PACKAGE_PATH:
					case CURRENT_PACKAGESET:
					case CURRENT_PATH:
					case CURRENT_PRECISION:
					case CURRENT_QUERY_ACCELERATION:
					case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
					case CURRENT_REFRESH_AGE:
					case CURRENT_ROUTINE_VERSION:
					case CURRENT_RULES:
					case CURRENT_SCHEMA:
					case CURRENT_SERVER:
					case CURRENT_SQLID:
					case CURRENT_TEMPORAL_BUSINESS_TIME:
					case CURRENT_TEMPORAL_SYSTEM_TIME:
					case CURRENT_TIME:
					case CURRENT_TIMESTAMP:
					case CURRENT_TIME_ZONE:
					case ENCRYPTION_PASSWORD:
					case SESSION_TIME_ZONE:
					case SESSION_USER:
					case USER:
					case ADMIN_TASK_LIST:
					case ADMIN_TASK_OUTPUT:
					case ADMIN_TASK_STATUS:
					case BLOCKING_THREADS:
					case MQREADALL:
					case MQREADALLCLOB:
					case MQRECEIVEALL:
					case MQRECEIVEALLCLOB:
					case XMLTABLE:
					case SQLIDENTIFIER:
						{
						setState(5685);
						identifier();
						}
						break;
					case NUMERICLITERAL:
						{
						setState(5686);
						match(NUMERICLITERAL);
						}
						break;
					case INTEGERLITERAL:
						{
						setState(5687);
						match(INTEGERLITERAL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					} 
				}
				setState(5694);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,649,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public IndexNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterIndexName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitIndexName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitIndexName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexNameContext indexName() throws RecognitionException {
		IndexNameContext _localctx = new IndexNameContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_indexName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5698);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,650,_ctx) ) {
			case 1:
				{
				setState(5695);
				schemaName();
				setState(5696);
				match(DOT);
				}
				break;
			}
			setState(5700);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MaskNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public MaskNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_maskName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterMaskName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitMaskName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitMaskName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MaskNameContext maskName() throws RecognitionException {
		MaskNameContext _localctx = new MaskNameContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_maskName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5705);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,651,_ctx) ) {
			case 1:
				{
				setState(5702);
				schemaName();
				setState(5703);
				match(DOT);
				}
				break;
			}
			setState(5707);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PermissionNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public PermissionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_permissionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPermissionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPermissionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPermissionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PermissionNameContext permissionName() throws RecognitionException {
		PermissionNameContext _localctx = new PermissionNameContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_permissionName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5712);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,652,_ctx) ) {
			case 1:
				{
				setState(5709);
				schemaName();
				setState(5710);
				match(DOT);
				}
				break;
			}
			setState(5714);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcedureNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public LocationNameContext locationName() {
			return getRuleContext(LocationNameContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(DB2zSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(DB2zSQLParser.DOT, i);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public ProcedureNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterProcedureName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitProcedureName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitProcedureName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProcedureNameContext procedureName() throws RecognitionException {
		ProcedureNameContext _localctx = new ProcedureNameContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_procedureName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5724);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,653,_ctx) ) {
			case 1:
				{
				{
				setState(5716);
				locationName();
				setState(5717);
				match(DOT);
				setState(5718);
				schemaName();
				setState(5719);
				match(DOT);
				}
				}
				break;
			case 2:
				{
				{
				setState(5721);
				schemaName();
				setState(5722);
				match(DOT);
				}
				}
				break;
			}
			setState(5726);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SequenceNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public SequenceNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequenceName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSequenceName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSequenceName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSequenceName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SequenceNameContext sequenceName() throws RecognitionException {
		SequenceNameContext _localctx = new SequenceNameContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_sequenceName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5731);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,654,_ctx) ) {
			case 1:
				{
				setState(5728);
				schemaName();
				setState(5729);
				match(DOT);
				}
				break;
			}
			setState(5733);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MemberNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public MemberNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_memberName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterMemberName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitMemberName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitMemberName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MemberNameContext memberName() throws RecognitionException {
		MemberNameContext _localctx = new MemberNameContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_memberName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5735);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DatabaseNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public DatabaseNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_databaseName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDatabaseName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDatabaseName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDatabaseName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DatabaseNameContext databaseName() throws RecognitionException {
		DatabaseNameContext _localctx = new DatabaseNameContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_databaseName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5737);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablespaceNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TablespaceNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablespaceName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTablespaceName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTablespaceName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTablespaceName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablespaceNameContext tablespaceName() throws RecognitionException {
		TablespaceNameContext _localctx = new TablespaceNameContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_tablespaceName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5739);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CatalogNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public CatalogNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_catalogName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCatalogName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCatalogName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCatalogName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CatalogNameContext catalogName() throws RecognitionException {
		CatalogNameContext _localctx = new CatalogNameContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_catalogName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5741);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TriggerNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTriggerName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTriggerName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTriggerName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerNameContext triggerName() throws RecognitionException {
		TriggerNameContext _localctx = new TriggerNameContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_triggerName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5743);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ContextNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ContextNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_contextName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterContextName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitContextName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitContextName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ContextNameContext contextName() throws RecognitionException {
		ContextNameContext _localctx = new ContextNameContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_contextName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5745);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AuthorizationNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public AuthorizationNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_authorizationName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAuthorizationName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAuthorizationName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAuthorizationName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AuthorizationNameContext authorizationName() throws RecognitionException {
		AuthorizationNameContext _localctx = new AuthorizationNameContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_authorizationName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5747);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProfileNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ProfileNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_profileName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterProfileName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitProfileName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitProfileName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProfileNameContext profileName() throws RecognitionException {
		ProfileNameContext _localctx = new ProfileNameContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_profileName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5749);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public RoleNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRoleName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRoleName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRoleName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleNameContext roleName() throws RecognitionException {
		RoleNameContext _localctx = new RoleNameContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_roleName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5751);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SeclabelNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SeclabelNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seclabelName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSeclabelName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSeclabelName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSeclabelName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SeclabelNameContext seclabelName() throws RecognitionException {
		SeclabelNameContext _localctx = new SeclabelNameContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_seclabelName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5753);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ParameterNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterParameterName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitParameterName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitParameterName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParameterNameContext parameterName() throws RecognitionException {
		ParameterNameContext _localctx = new ParameterNameContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_parameterName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5755);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AddressValueContext extends ParserRuleContext {
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public AddressValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_addressValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAddressValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAddressValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAddressValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AddressValueContext addressValue() throws RecognitionException {
		AddressValueContext _localctx = new AddressValueContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_addressValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5757);
			match(NONNUMERICLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JobnameValueContext extends ParserRuleContext {
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public JobnameValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jobnameValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterJobnameValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitJobnameValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitJobnameValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JobnameValueContext jobnameValue() throws RecognitionException {
		JobnameValueContext _localctx = new JobnameValueContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_jobnameValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5759);
			match(NONNUMERICLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ServauthValueContext extends ParserRuleContext {
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public ServauthValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_servauthValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterServauthValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitServauthValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitServauthValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ServauthValueContext servauthValue() throws RecognitionException {
		ServauthValueContext _localctx = new ServauthValueContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_servauthValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5761);
			match(NONNUMERICLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EncryptionValueContext extends ParserRuleContext {
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public EncryptionValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_encryptionValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterEncryptionValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitEncryptionValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitEncryptionValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EncryptionValueContext encryptionValue() throws RecognitionException {
		EncryptionValueContext _localctx = new EncryptionValueContext(_ctx, getState());
		enterRule(_localctx, 762, RULE_encryptionValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5763);
			match(NONNUMERICLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BpNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public BpNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bpName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterBpName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitBpName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitBpName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BpNameContext bpName() throws RecognitionException {
		BpNameContext _localctx = new BpNameContext(_ctx, getState());
		enterRule(_localctx, 764, RULE_bpName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5765);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StogroupNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public StogroupNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stogroupName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterStogroupName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitStogroupName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitStogroupName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StogroupNameContext stogroupName() throws RecognitionException {
		StogroupNameContext _localctx = new StogroupNameContext(_ctx, getState());
		enterRule(_localctx, 766, RULE_stogroupName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5767);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DcNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public DcNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dcName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDcName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDcName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDcName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DcNameContext dcName() throws RecognitionException {
		DcNameContext _localctx = new DcNameContext(_ctx, getState());
		enterRule(_localctx, 768, RULE_dcName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5769);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class McNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public McNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mcName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterMcName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitMcName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitMcName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final McNameContext mcName() throws RecognitionException {
		McNameContext _localctx = new McNameContext(_ctx, getState());
		enterRule(_localctx, 770, RULE_mcName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5771);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ScNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterScName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitScName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitScName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ScNameContext scName() throws RecognitionException {
		ScNameContext _localctx = new ScNameContext(_ctx, getState());
		enterRule(_localctx, 772, RULE_scName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5773);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VolumeIDContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public VolumeIDContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_volumeID; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterVolumeID(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitVolumeID(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitVolumeID(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VolumeIDContext volumeID() throws RecognitionException {
		VolumeIDContext _localctx = new VolumeIDContext(_ctx, getState());
		enterRule(_localctx, 774, RULE_volumeID);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5775);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyLabelNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public KeyLabelNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyLabelName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterKeyLabelName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitKeyLabelName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitKeyLabelName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyLabelNameContext keyLabelName() throws RecognitionException {
		KeyLabelNameContext _localctx = new KeyLabelNameContext(_ctx, getState());
		enterRule(_localctx, 776, RULE_keyLabelName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5779);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case ALL:
			case ALLOCATE:
			case ALLOW:
			case ALTER:
			case ALTERAND:
			case ANY:
			case ARRAY:
			case ARRAY_EXISTS:
			case AS:
			case ASENSITIVE:
			case ASSOCIATE:
			case ASUTIME:
			case AT:
			case AUDIT:
			case AUX:
			case AUXILIARY:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BUFFERPOOL:
			case BY:
			case CALL:
			case CAPTURE:
			case CASCADED:
			case CASE:
			case CAST:
			case CCSID:
			case CHAR:
			case CHARACTER:
			case CHECK:
			case CLONE:
			case CLOSE:
			case CLUSTER:
			case COLLECTION:
			case COLLID:
			case COLUMN:
			case COMMENT:
			case COMMIT:
			case CONCAT:
			case CONDITION:
			case CONNECT:
			case CONNECTION:
			case CONSTRAINT:
			case CONTAINS:
			case CONTENT:
			case CONTINUE:
			case CREATE:
			case CUBE:
			case CURRENT:
			case CURRENT_LC_CTYPE:
			case CURRVAL:
			case CURSOR:
			case DATA:
			case DATABASE:
			case DAY:
			case DAYS:
			case DBINFO:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DISABLE:
			case DISALLOW:
			case DISTINCT:
			case DO:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSSIZE:
			case DYNAMIC:
			case EDITPROC:
			case ELSE:
			case ELSEIF:
			case ENCODING:
			case ENCRYPTION:
			case END:
			case END_EXEC:
			case ENDING:
			case ERASE:
			case ESCAPE:
			case EXCEPT:
			case EXCEPTION:
			case EXEC_SQL:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case FENCED:
			case FETCH:
			case FIELDPROC:
			case FINAL:
			case FIRST:
			case FOR:
			case FREE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANT:
			case GROUP:
			case HANDLER:
			case HAVING:
			case HOLD:
			case HOUR:
			case HOURS:
			case IF:
			case IMMEDIATE:
			case IN:
			case INCLUSIVE:
			case INDEX:
			case INDEXBP:
			case INHERIT:
			case INNER:
			case INOUT:
			case INSENSITIVE:
			case INSERT:
			case INTERSECT:
			case INTO:
			case IS:
			case ISOBID:
			case ITERATE:
			case JAR:
			case JOIN:
			case KEEP:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LAST:
			case LC_CTYPE:
			case LEAVE:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOCALE:
			case LOCATOR:
			case LOCATORS:
			case LOCK:
			case LOCKMAX:
			case LOCKSIZE:
			case LONG:
			case LOOP:
			case MAINTAINED:
			case MATERIALIZED:
			case MICROSECOND:
			case MICROSECONDS:
			case MODIFIES:
			case MONTH:
			case MONTHS:
			case NEXT:
			case NEXTVAL:
			case NO:
			case NONE:
			case NOT:
			case NULL:
			case NULLS:
			case NUMPARTS:
			case OBID:
			case OF:
			case OFFSET:
			case OLD:
			case ON:
			case OPEN:
			case OPTIMIZATION:
			case OPTIMIZE:
			case OR:
			case ORDER:
			case ORGANIZATION:
			case OUT:
			case OUTER:
			case PACKAGE:
			case PADDED:
			case PARAMETER:
			case PART:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONING:
			case PATH:
			case PERIOD:
			case PIECESIZE:
			case PLAN:
			case PRECISION:
			case PREPARE:
			case PREVVAL:
			case PRIOR:
			case PRIQTY:
			case PRIVILEGES:
			case PROCEDURE:
			case PROGRAM:
			case PSID:
			case PUBLIC:
			case QUERY:
			case QUERYNO:
			case READS:
			case REFERENCES:
			case REFRESH:
			case RELEASE:
			case RENAME:
			case REPEAT:
			case RESIGNAL:
			case RESTRICT:
			case RESULT:
			case RESULT_SET_LOCATOR:
			case RETURN:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUND_CEILING:
			case ROUND_DOWN:
			case ROUND_FLOOR:
			case ROUND_HALF_DOWN:
			case ROUND_HALF_EVEN:
			case ROUND_HALF_UP:
			case ROUND_UP:
			case ROW:
			case ROWSET:
			case RUN:
			case SAVEPOINT:
			case SCHEMA:
			case SCRATCHPAD:
			case SECOND:
			case SECONDS:
			case SECQTY:
			case SECURITY:
			case SELECT:
			case SENSITIVE:
			case SEQUENCE:
			case SET:
			case SIGNAL:
			case SIMPLE:
			case SOME:
			case SOURCE:
			case SPECIFIC:
			case STANDARD:
			case STATEMENT:
			case STATIC:
			case STAY:
			case STOGROUP:
			case STORES:
			case STYLE:
			case SUMMARY:
			case SYNONYM:
			case SYSDATE:
			case SYSTEM:
			case SYSTIMESTAMP:
			case TABLE:
			case TABLESPACE:
			case THEN:
			case TO:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNDO:
			case UNION:
			case UNIQUE:
			case UNTIL:
			case UPDATE:
			case USING:
			case VALIDPROC:
			case VALUE:
			case VALUES:
			case VARIABLE:
			case VARIANT:
			case VCAT:
			case VERSIONING:
			case VIEW:
			case VOLATILE:
			case VOLUMES:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WLM:
			case XMLCAST:
			case XMLEXISTS:
			case XMLNAMESPACES:
			case YEAR:
			case YEARS:
			case ZONE:
			case AND:
			case ARRAY_AGG:
			case ASC:
			case AVG:
			case BIT:
			case CHANGE:
			case CODEUNITS16:
			case CODEUNITS32:
			case CORR:
			case CORRELATION:
			case COUNT:
			case COUNT_BIG:
			case COVAR:
			case COVARIANCE:
			case COVARIANCE_SAMP:
			case COVAR_POP:
			case COVAR_SAMP:
			case CS:
			case CUME_DIST:
			case DENSE_RANK:
			case DESC:
			case EBCDIC:
			case EXCLUSIVE:
			case FIRST_VALUE:
			case FOLLOWING:
			case GROUPING:
			case IGNORE:
			case INDICATOR:
			case INPUT:
			case ISNULL:
			case LAG:
			case LARGE:
			case LAST_VALUE:
			case LEAD:
			case LISTAGG:
			case LOCKED:
			case LOCKS:
			case MEDIAN:
			case MINUTES:
			case MIXED:
			case NOTNULL:
			case NTH_VALUE:
			case NTILE:
			case NUMERIC:
			case OBJECT:
			case OCTETS:
			case ONLY:
			case OVER:
			case PASSING:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PERCENT_RANK:
			case PRECEDING:
			case PREVIOUS:
			case RANGE:
			case RANK:
			case RATIO_TO_REPORT:
			case READ:
			case REF:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_ICPT:
			case REGR_INTERCEPT:
			case REGR_R2:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case RESPECT:
			case ROW_NUMBER:
			case ROWS:
			case RR:
			case RS:
			case SBCS:
			case SELECTIVITY:
			case SETS:
			case SHARE:
			case SKIP_:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case TOKEN:
			case UNBOUNDED:
			case UNPACK:
			case UR:
			case USE:
			case VAR:
			case VARIANCE:
			case VARIANCE_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARYING:
			case WITHOUT:
			case XML:
			case XMLAGG:
			case COLUMNS:
			case SQLID:
			case ORDINALITY:
			case SYSTEM_TIME:
			case BUSINESS_TIME:
			case MULTIPLIER:
			case UNNEST:
			case CROSS:
			case CALLER:
			case CLIENT:
			case POSITIONING:
			case SCROLL:
			case ACTION:
			case ASSEMBLE:
			case C_:
			case CALLED:
			case COBOL:
			case DB2:
			case DEFINER:
			case DISPATCH:
			case ENVIRONMENT:
			case FAILURE:
			case FAILURES:
			case JAVA:
			case MAIN:
			case NAME:
			case OPTIONS:
			case PARALLEL:
			case PLI:
			case REGISTERS:
			case RESIDENT:
			case SECURED:
			case SPECIAL:
			case SQL:
			case STOP:
			case SUB:
			case YES:
			case APPLICATION:
			case CHANGED:
			case COMPATIBILITY:
			case COMPRESS:
			case COPY:
			case FREEPAGE:
			case GBPCACHE:
			case INCLUDE:
			case MAXVALUE:
			case MINVALUE:
			case PCTFREE:
			case REGENERATE:
			case MASK:
			case ENABLE:
			case PERMISSION:
			case ATOMIC:
			case SQLEXCEPTION:
			case MERGE:
			case MATCHED:
			case SQLSTATE:
			case MESSAGE_TEXT:
			case OVERRIDING:
			case PORTION:
			case DB2SQL:
			case DEBUG:
			case GENERAL:
			case MODE_:
			case REXX:
			case CACHE:
			case CYCLE:
			case INCREMENT:
			case RESTART:
			case DATACLAS:
			case MGMTCLAS:
			case REMOVE:
			case STORCLAS:
			case ACCESS:
			case ACTIVATE:
			case ALWAYS:
			case APPEND:
			case ARCHIVE:
			case BUSINESS:
			case CASCADE:
			case CHANGES:
			case CONTROL:
			case DEACTIVATE:
			case DEFERRED:
			case EACH:
			case ENFORCED:
			case EXTRA:
			case FOREIGN:
			case HIDDEN_:
			case HISTORY:
			case ID:
			case IDENTITY:
			case IMPLICITLY:
			case INITIALLY:
			case INLINE:
			case OPERATION:
			case ORGANIZE:
			case OVERLAPS:
			case PACKAGE_NAME:
			case PACKAGE_SCHEMA:
			case PACKAGE_VERSION:
			case PRIMARY:
			case RESET:
			case ROTATE:
			case START:
			case SYSIBM:
			case TRANSACTION:
			case XMLSCHEMA:
			case ELEMENT:
			case URL:
			case NAMESPACE:
			case LOCATION:
			case SYSXSR:
			case ALGORITHM:
			case FIXEDLENGTH:
			case HUFFMAN:
			case LOB:
			case LOG:
			case LOGGED:
			case MAXPARTITIONS:
			case MAXROWS:
			case MEMBER:
			case MOVE:
			case PAGE:
			case PAGENUM:
			case PENDING:
			case RELATIVE:
			case SEGSIZE:
			case TRACKMOD:
			case ADDRESS:
			case ATTRIBUTES:
			case AUTHENTICATION:
			case AUTHID:
			case CONTEXT:
			case JOBNAME:
			case OWNER:
			case PROFILE:
			case QUALIFIER:
			case SERVAUTH:
			case TRUSTED:
			case SECTION:
			case ACTIVE:
			case VERSION:
			case ALIAS:
			case WORK:
			case WORKFILE:
			case SYSDEFLT:
			case NULTERM:
			case STRUCTURE:
			case GENERIC:
			case TEMPORARY:
			case DEFER:
			case DEFINE:
			case EXCLUDE:
			case GENERATE:
			case KEYS:
			case XMLPATTERN:
			case ABS:
			case ABSVAL:
			case ACOS:
			case ADD_DAYS:
			case ADD_MONTHS:
			case ARRAY_DELETE:
			case ARRAY_FIRST:
			case ARRAY_LAST:
			case ARRAY_NEXT:
			case ARRAY_PRIOR:
			case ARRAY_TRIM:
			case ASCII:
			case ASCII_CHR:
			case ASCIISTR:
			case ASCII_STR:
			case ASIN:
			case ATAN:
			case ATAN2:
			case ATANH:
			case BIGINT:
			case BINARY:
			case BITAND:
			case BITANDNOT:
			case BITNOT:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BTRIM:
			case CARDINALITY:
			case CCSID_ENCODING:
			case CEIL:
			case CEILING:
			case CHAR9:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case CHR:
			case CLOB:
			case COALESCE:
			case COLLATION_KEY:
			case COMPARE_DECFLOAT:
			case COS:
			case COSH:
			case DATE:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFWEEK_ISO:
			case DAYOFYEAR:
			case DAYS_BETWEEN:
			case DBCLOB:
			case DEC:
			case DECFLOAT:
			case DECFLOAT_FORMAT:
			case DECFLOAT_SORTKEY:
			case DECIMAL:
			case DECODE:
			case DECRYPT_BINARY:
			case DECRYPT_BIT:
			case DECRYPT_CHAR:
			case DECRYPT_DATAKEY_BIGINT:
			case DECRYPT_DATAKEY_BIT:
			case DECRYPT_DATAKEY_CLOB:
			case DECRYPT_DATAKEY_DBCLOB:
			case DECRYPT_DATAKEY_DECIMAL:
			case DECRYPT_DATAKEY_INTEGER:
			case DECRYPT_DATAKEY_VARCHAR:
			case DECRYPT_DATAKEY_VARGRAPHIC:
			case DECRYPT_DB:
			case DEGREES:
			case DIFFERENCE:
			case DIGITS:
			case DOUBLE_PRECISION:
			case DSN_XMLVALIDATE:
			case EBCDIC_CHR:
			case EBCDIC_STR:
			case ENCRYPT_DATAKEY:
			case ENCRYPT_TDES:
			case EXP:
			case EXTRACT:
			case FLOAT:
			case FLOOR:
			case GENERATE_UNIQUE:
			case GENERATE_UNIQUE_BINARY:
			case GETHINT:
			case GETVARIABLE:
			case GRAPHIC:
			case GREATEST:
			case HASH:
			case HASH_CRC32:
			case HASH_MD5:
			case HASH_SHA1:
			case HASH_SHA256:
			case HEX:
			case IDENTITY_VAL_LOCAL:
			case IFNULL:
			case INSTR:
			case INT:
			case INTEGER:
			case JULIAN_DAY:
			case LAST_DAY:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LN:
			case LOCATE:
			case LOCATE_IN_STRING:
			case LOG10:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAX:
			case MAX_CARDINALITY:
			case MIDNIGHT_SECONDS:
			case MIN:
			case MINUTE:
			case MOD:
			case MONTHS_BETWEEN:
			case MQREAD:
			case MQREADCLOB:
			case MQRECEIVE:
			case MQRECEIVECLOB:
			case MQSEND:
			case MULTIPLY_ALT:
			case NEXT_DAY:
			case NEXT_MONTH:
			case NORMALIZE_DECFLOAT:
			case NORMALIZE_STRING:
			case NULLIF:
			case NVL:
			case OVERLAY:
			case PACK:
			case POSITION:
			case POSSTR:
			case POW:
			case POWER:
			case QUANTIZE:
			case QUARTER:
			case RADIANS:
			case RAISE_ERROR:
			case RAND:
			case RANDOM:
			case REAL:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REPLACE:
			case RID:
			case ROUND:
			case ROUND_TIMESTAMP:
			case ROWID:
			case RPAD:
			case RTRIM:
			case SCORE:
			case SIGN:
			case SIN:
			case SINH:
			case SMALLINT:
			case SOAPHTTPC:
			case SOAPHTTPNC:
			case SOAPHTTPNV:
			case SOAPHTTPV:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STRIP:
			case STRLEFT:
			case STRPOS:
			case STRRIGHT:
			case SUBSTR:
			case SUBSTRING:
			case TAN:
			case TANH:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIMESTAMP_FORMAT:
			case TIMESTAMP_ISO:
			case TIMESTAMP_TZ:
			case TO_CHAR:
			case TO_CLOB:
			case TO_DATE:
			case TO_NUMBER:
			case TOTALORDER:
			case TO_TIMESTAMP:
			case TRANSLATE:
			case TRIM:
			case TRIM_ARRAY:
			case TRUNC:
			case TRUNC_TIMESTAMP:
			case UCASE:
			case UNICODE:
			case UNICODE_STR:
			case UNISTR:
			case UPPER:
			case VARBINARY:
			case VARCHAR:
			case VARCHAR9:
			case VARCHAR_BIT_FORMAT:
			case VARCHAR_FORMAT:
			case VARGRAPHIC:
			case VERIFY_GROUP_FOR_USER:
			case VERIFY_ROLE_FOR_USER:
			case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
			case WEEK:
			case WEEK_ISO:
			case WRAP:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLCONCAT:
			case XMLDOCUMENT:
			case XMLELEMENT:
			case XMLFOREST:
			case XMLMODIFY:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLSERIALIZE:
			case XMLTEXT:
			case XMLXSROBJECTID:
			case XSLTRANSFORM:
			case CURRENT_ACCELERATOR:
			case CURRENT_APPLICATION_COMPATIBILITY:
			case CURRENT_APPLICATION_ENCODING_SCHEME:
			case CURRENT_CLIENT_ACCTNG:
			case CURRENT_CLIENT_APPLNAME:
			case CURRENT_CLIENT_CORR_TOKEN:
			case CURRENT_CLIENT_USERID:
			case CURRENT_CLIENT_WRKSTNNAME:
			case CURRENT_DATE:
			case CURRENT_DEBUG_MODE:
			case CURRENT_DECFLOAT_ROUNDING_MODE:
			case CURRENT_DEGREE:
			case CURRENT_EXPLAIN_MODE:
			case CURRENT_GET_ACCEL_ARCHIVE:
			case CURRENT_LOCALE_LC_CTYPE:
			case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
			case CURRENT_MEMBER:
			case CURRENT_OPTIMIZATION_HINT:
			case CURRENT_PACKAGE_PATH:
			case CURRENT_PACKAGESET:
			case CURRENT_PATH:
			case CURRENT_PRECISION:
			case CURRENT_QUERY_ACCELERATION:
			case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
			case CURRENT_REFRESH_AGE:
			case CURRENT_ROUTINE_VERSION:
			case CURRENT_RULES:
			case CURRENT_SCHEMA:
			case CURRENT_SERVER:
			case CURRENT_SQLID:
			case CURRENT_TEMPORAL_BUSINESS_TIME:
			case CURRENT_TEMPORAL_SYSTEM_TIME:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_TIME_ZONE:
			case ENCRYPTION_PASSWORD:
			case SESSION_TIME_ZONE:
			case SESSION_USER:
			case USER:
			case ADMIN_TASK_LIST:
			case ADMIN_TASK_OUTPUT:
			case ADMIN_TASK_STATUS:
			case BLOCKING_THREADS:
			case MQREADALL:
			case MQREADALLCLOB:
			case MQRECEIVEALL:
			case MQRECEIVEALLCLOB:
			case XMLTABLE:
			case SQLIDENTIFIER:
				{
				setState(5777);
				identifier();
				}
				break;
			case NONNUMERICLITERAL:
				{
				setState(5778);
				match(NONNUMERICLITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public FunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFunctionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFunctionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFunctionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionNameContext functionName() throws RecognitionException {
		FunctionNameContext _localctx = new FunctionNameContext(_ctx, getState());
		enterRule(_localctx, 778, RULE_functionName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5784);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,656,_ctx) ) {
			case 1:
				{
				setState(5781);
				schemaName();
				setState(5782);
				match(DOT);
				}
				break;
			}
			setState(5786);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SpecificNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public SpecificNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_specificName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSpecificName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSpecificName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSpecificName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SpecificNameContext specificName() throws RecognitionException {
		SpecificNameContext _localctx = new SpecificNameContext(_ctx, getState());
		enterRule(_localctx, 780, RULE_specificName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5791);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,657,_ctx) ) {
			case 1:
				{
				setState(5788);
				schemaName();
				setState(5789);
				match(DOT);
				}
				break;
			}
			setState(5793);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HostVariableContext extends ParserRuleContext {
		public List<TerminalNode> COLON() { return getTokens(DB2zSQLParser.COLON); }
		public TerminalNode COLON(int i) {
			return getToken(DB2zSQLParser.COLON, i);
		}
		public List<HostIdentifierContext> hostIdentifier() {
			return getRuleContexts(HostIdentifierContext.class);
		}
		public HostIdentifierContext hostIdentifier(int i) {
			return getRuleContext(HostIdentifierContext.class,i);
		}
		public List<HostStructureContext> hostStructure() {
			return getRuleContexts(HostStructureContext.class);
		}
		public HostStructureContext hostStructure(int i) {
			return getRuleContext(HostStructureContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(DB2zSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(DB2zSQLParser.DOT, i);
		}
		public TerminalNode INDICATOR() { return getToken(DB2zSQLParser.INDICATOR, 0); }
		public HostVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hostVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterHostVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitHostVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitHostVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HostVariableContext hostVariable() throws RecognitionException {
		HostVariableContext _localctx = new HostVariableContext(_ctx, getState());
		enterRule(_localctx, 782, RULE_hostVariable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5795);
			match(COLON);
			setState(5799);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,658,_ctx) ) {
			case 1:
				{
				setState(5796);
				hostStructure();
				setState(5797);
				match(DOT);
				}
				break;
			}
			setState(5801);
			hostIdentifier();
			setState(5812);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,661,_ctx) ) {
			case 1:
				{
				setState(5803);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDICATOR) {
					{
					setState(5802);
					match(INDICATOR);
					}
				}

				setState(5805);
				match(COLON);
				setState(5809);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,660,_ctx) ) {
				case 1:
					{
					setState(5806);
					hostStructure();
					setState(5807);
					match(DOT);
					}
					break;
				}
				setState(5811);
				hostIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HostIdentifierContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public HostIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hostIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterHostIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitHostIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitHostIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HostIdentifierContext hostIdentifier() throws RecognitionException {
		HostIdentifierContext _localctx = new HostIdentifierContext(_ctx, getState());
		enterRule(_localctx, 784, RULE_hostIdentifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5814);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HostStructureContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public HostStructureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hostStructure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterHostStructure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitHostStructure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitHostStructure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HostStructureContext hostStructure() throws RecognitionException {
		HostStructureContext _localctx = new HostStructureContext(_ctx, getState());
		enterRule(_localctx, 786, RULE_hostStructure);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5816);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public VariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableContext variable() throws RecognitionException {
		VariableContext _localctx = new VariableContext(_ctx, getState());
		enterRule(_localctx, 788, RULE_variable);
		try {
			setState(5825);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case ALL:
			case ALLOCATE:
			case ALLOW:
			case ALTER:
			case ALTERAND:
			case ANY:
			case ARRAY:
			case ARRAY_EXISTS:
			case AS:
			case ASENSITIVE:
			case ASSOCIATE:
			case ASUTIME:
			case AT:
			case AUDIT:
			case AUX:
			case AUXILIARY:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BUFFERPOOL:
			case BY:
			case CALL:
			case CAPTURE:
			case CASCADED:
			case CASE:
			case CAST:
			case CCSID:
			case CHAR:
			case CHARACTER:
			case CHECK:
			case CLONE:
			case CLOSE:
			case CLUSTER:
			case COLLECTION:
			case COLLID:
			case COLUMN:
			case COMMENT:
			case COMMIT:
			case CONCAT:
			case CONDITION:
			case CONNECT:
			case CONNECTION:
			case CONSTRAINT:
			case CONTAINS:
			case CONTENT:
			case CONTINUE:
			case CREATE:
			case CUBE:
			case CURRENT:
			case CURRENT_LC_CTYPE:
			case CURRVAL:
			case CURSOR:
			case DATA:
			case DATABASE:
			case DAY:
			case DAYS:
			case DBINFO:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DISABLE:
			case DISALLOW:
			case DISTINCT:
			case DO:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSSIZE:
			case DYNAMIC:
			case EDITPROC:
			case ELSE:
			case ELSEIF:
			case ENCODING:
			case ENCRYPTION:
			case END:
			case END_EXEC:
			case ENDING:
			case ERASE:
			case ESCAPE:
			case EXCEPT:
			case EXCEPTION:
			case EXEC_SQL:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case FENCED:
			case FETCH:
			case FIELDPROC:
			case FINAL:
			case FIRST:
			case FOR:
			case FREE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANT:
			case GROUP:
			case HANDLER:
			case HAVING:
			case HOLD:
			case HOUR:
			case HOURS:
			case IF:
			case IMMEDIATE:
			case IN:
			case INCLUSIVE:
			case INDEX:
			case INDEXBP:
			case INHERIT:
			case INNER:
			case INOUT:
			case INSENSITIVE:
			case INSERT:
			case INTERSECT:
			case INTO:
			case IS:
			case ISOBID:
			case ITERATE:
			case JAR:
			case JOIN:
			case KEEP:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LAST:
			case LC_CTYPE:
			case LEAVE:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOCALE:
			case LOCATOR:
			case LOCATORS:
			case LOCK:
			case LOCKMAX:
			case LOCKSIZE:
			case LONG:
			case LOOP:
			case MAINTAINED:
			case MATERIALIZED:
			case MICROSECOND:
			case MICROSECONDS:
			case MODIFIES:
			case MONTH:
			case MONTHS:
			case NEXT:
			case NEXTVAL:
			case NO:
			case NONE:
			case NOT:
			case NULL:
			case NULLS:
			case NUMPARTS:
			case OBID:
			case OF:
			case OFFSET:
			case OLD:
			case ON:
			case OPEN:
			case OPTIMIZATION:
			case OPTIMIZE:
			case OR:
			case ORDER:
			case ORGANIZATION:
			case OUT:
			case OUTER:
			case PACKAGE:
			case PADDED:
			case PARAMETER:
			case PART:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONING:
			case PATH:
			case PERIOD:
			case PIECESIZE:
			case PLAN:
			case PRECISION:
			case PREPARE:
			case PREVVAL:
			case PRIOR:
			case PRIQTY:
			case PRIVILEGES:
			case PROCEDURE:
			case PROGRAM:
			case PSID:
			case PUBLIC:
			case QUERY:
			case QUERYNO:
			case READS:
			case REFERENCES:
			case REFRESH:
			case RELEASE:
			case RENAME:
			case REPEAT:
			case RESIGNAL:
			case RESTRICT:
			case RESULT:
			case RESULT_SET_LOCATOR:
			case RETURN:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUND_CEILING:
			case ROUND_DOWN:
			case ROUND_FLOOR:
			case ROUND_HALF_DOWN:
			case ROUND_HALF_EVEN:
			case ROUND_HALF_UP:
			case ROUND_UP:
			case ROW:
			case ROWSET:
			case RUN:
			case SAVEPOINT:
			case SCHEMA:
			case SCRATCHPAD:
			case SECOND:
			case SECONDS:
			case SECQTY:
			case SECURITY:
			case SELECT:
			case SENSITIVE:
			case SEQUENCE:
			case SET:
			case SIGNAL:
			case SIMPLE:
			case SOME:
			case SOURCE:
			case SPECIFIC:
			case STANDARD:
			case STATEMENT:
			case STATIC:
			case STAY:
			case STOGROUP:
			case STORES:
			case STYLE:
			case SUMMARY:
			case SYNONYM:
			case SYSDATE:
			case SYSTEM:
			case SYSTIMESTAMP:
			case TABLE:
			case TABLESPACE:
			case THEN:
			case TO:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNDO:
			case UNION:
			case UNIQUE:
			case UNTIL:
			case UPDATE:
			case USING:
			case VALIDPROC:
			case VALUE:
			case VALUES:
			case VARIABLE:
			case VARIANT:
			case VCAT:
			case VERSIONING:
			case VIEW:
			case VOLATILE:
			case VOLUMES:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WLM:
			case XMLCAST:
			case XMLEXISTS:
			case XMLNAMESPACES:
			case YEAR:
			case YEARS:
			case ZONE:
			case AND:
			case ARRAY_AGG:
			case ASC:
			case AVG:
			case BIT:
			case CHANGE:
			case CODEUNITS16:
			case CODEUNITS32:
			case CORR:
			case CORRELATION:
			case COUNT:
			case COUNT_BIG:
			case COVAR:
			case COVARIANCE:
			case COVARIANCE_SAMP:
			case COVAR_POP:
			case COVAR_SAMP:
			case CS:
			case CUME_DIST:
			case DENSE_RANK:
			case DESC:
			case EBCDIC:
			case EXCLUSIVE:
			case FIRST_VALUE:
			case FOLLOWING:
			case GROUPING:
			case IGNORE:
			case INDICATOR:
			case INPUT:
			case ISNULL:
			case LAG:
			case LARGE:
			case LAST_VALUE:
			case LEAD:
			case LISTAGG:
			case LOCKED:
			case LOCKS:
			case MEDIAN:
			case MINUTES:
			case MIXED:
			case NOTNULL:
			case NTH_VALUE:
			case NTILE:
			case NUMERIC:
			case OBJECT:
			case OCTETS:
			case ONLY:
			case OVER:
			case PASSING:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PERCENT_RANK:
			case PRECEDING:
			case PREVIOUS:
			case RANGE:
			case RANK:
			case RATIO_TO_REPORT:
			case READ:
			case REF:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_ICPT:
			case REGR_INTERCEPT:
			case REGR_R2:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case RESPECT:
			case ROW_NUMBER:
			case ROWS:
			case RR:
			case RS:
			case SBCS:
			case SELECTIVITY:
			case SETS:
			case SHARE:
			case SKIP_:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case TOKEN:
			case UNBOUNDED:
			case UNPACK:
			case UR:
			case USE:
			case VAR:
			case VARIANCE:
			case VARIANCE_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARYING:
			case WITHOUT:
			case XML:
			case XMLAGG:
			case COLUMNS:
			case SQLID:
			case ORDINALITY:
			case SYSTEM_TIME:
			case BUSINESS_TIME:
			case MULTIPLIER:
			case UNNEST:
			case CROSS:
			case CALLER:
			case CLIENT:
			case POSITIONING:
			case SCROLL:
			case ACTION:
			case ASSEMBLE:
			case C_:
			case CALLED:
			case COBOL:
			case DB2:
			case DEFINER:
			case DISPATCH:
			case ENVIRONMENT:
			case FAILURE:
			case FAILURES:
			case JAVA:
			case MAIN:
			case NAME:
			case OPTIONS:
			case PARALLEL:
			case PLI:
			case REGISTERS:
			case RESIDENT:
			case SECURED:
			case SPECIAL:
			case SQL:
			case STOP:
			case SUB:
			case YES:
			case APPLICATION:
			case CHANGED:
			case COMPATIBILITY:
			case COMPRESS:
			case COPY:
			case FREEPAGE:
			case GBPCACHE:
			case INCLUDE:
			case MAXVALUE:
			case MINVALUE:
			case PCTFREE:
			case REGENERATE:
			case MASK:
			case ENABLE:
			case PERMISSION:
			case ATOMIC:
			case SQLEXCEPTION:
			case MERGE:
			case MATCHED:
			case SQLSTATE:
			case MESSAGE_TEXT:
			case OVERRIDING:
			case PORTION:
			case DB2SQL:
			case DEBUG:
			case GENERAL:
			case MODE_:
			case REXX:
			case CACHE:
			case CYCLE:
			case INCREMENT:
			case RESTART:
			case DATACLAS:
			case MGMTCLAS:
			case REMOVE:
			case STORCLAS:
			case ACCESS:
			case ACTIVATE:
			case ALWAYS:
			case APPEND:
			case ARCHIVE:
			case BUSINESS:
			case CASCADE:
			case CHANGES:
			case CONTROL:
			case DEACTIVATE:
			case DEFERRED:
			case EACH:
			case ENFORCED:
			case EXTRA:
			case FOREIGN:
			case HIDDEN_:
			case HISTORY:
			case ID:
			case IDENTITY:
			case IMPLICITLY:
			case INITIALLY:
			case INLINE:
			case OPERATION:
			case ORGANIZE:
			case OVERLAPS:
			case PACKAGE_NAME:
			case PACKAGE_SCHEMA:
			case PACKAGE_VERSION:
			case PRIMARY:
			case RESET:
			case ROTATE:
			case START:
			case SYSIBM:
			case TRANSACTION:
			case XMLSCHEMA:
			case ELEMENT:
			case URL:
			case NAMESPACE:
			case LOCATION:
			case SYSXSR:
			case ALGORITHM:
			case FIXEDLENGTH:
			case HUFFMAN:
			case LOB:
			case LOG:
			case LOGGED:
			case MAXPARTITIONS:
			case MAXROWS:
			case MEMBER:
			case MOVE:
			case PAGE:
			case PAGENUM:
			case PENDING:
			case RELATIVE:
			case SEGSIZE:
			case TRACKMOD:
			case ADDRESS:
			case ATTRIBUTES:
			case AUTHENTICATION:
			case AUTHID:
			case CONTEXT:
			case JOBNAME:
			case OWNER:
			case PROFILE:
			case QUALIFIER:
			case SERVAUTH:
			case TRUSTED:
			case SECTION:
			case ACTIVE:
			case VERSION:
			case ALIAS:
			case WORK:
			case WORKFILE:
			case SYSDEFLT:
			case NULTERM:
			case STRUCTURE:
			case GENERIC:
			case TEMPORARY:
			case DEFER:
			case DEFINE:
			case EXCLUDE:
			case GENERATE:
			case KEYS:
			case XMLPATTERN:
			case ABS:
			case ABSVAL:
			case ACOS:
			case ADD_DAYS:
			case ADD_MONTHS:
			case ARRAY_DELETE:
			case ARRAY_FIRST:
			case ARRAY_LAST:
			case ARRAY_NEXT:
			case ARRAY_PRIOR:
			case ARRAY_TRIM:
			case ASCII:
			case ASCII_CHR:
			case ASCIISTR:
			case ASCII_STR:
			case ASIN:
			case ATAN:
			case ATAN2:
			case ATANH:
			case BIGINT:
			case BINARY:
			case BITAND:
			case BITANDNOT:
			case BITNOT:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BTRIM:
			case CARDINALITY:
			case CCSID_ENCODING:
			case CEIL:
			case CEILING:
			case CHAR9:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case CHR:
			case CLOB:
			case COALESCE:
			case COLLATION_KEY:
			case COMPARE_DECFLOAT:
			case COS:
			case COSH:
			case DATE:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFWEEK_ISO:
			case DAYOFYEAR:
			case DAYS_BETWEEN:
			case DBCLOB:
			case DEC:
			case DECFLOAT:
			case DECFLOAT_FORMAT:
			case DECFLOAT_SORTKEY:
			case DECIMAL:
			case DECODE:
			case DECRYPT_BINARY:
			case DECRYPT_BIT:
			case DECRYPT_CHAR:
			case DECRYPT_DATAKEY_BIGINT:
			case DECRYPT_DATAKEY_BIT:
			case DECRYPT_DATAKEY_CLOB:
			case DECRYPT_DATAKEY_DBCLOB:
			case DECRYPT_DATAKEY_DECIMAL:
			case DECRYPT_DATAKEY_INTEGER:
			case DECRYPT_DATAKEY_VARCHAR:
			case DECRYPT_DATAKEY_VARGRAPHIC:
			case DECRYPT_DB:
			case DEGREES:
			case DIFFERENCE:
			case DIGITS:
			case DOUBLE_PRECISION:
			case DSN_XMLVALIDATE:
			case EBCDIC_CHR:
			case EBCDIC_STR:
			case ENCRYPT_DATAKEY:
			case ENCRYPT_TDES:
			case EXP:
			case EXTRACT:
			case FLOAT:
			case FLOOR:
			case GENERATE_UNIQUE:
			case GENERATE_UNIQUE_BINARY:
			case GETHINT:
			case GETVARIABLE:
			case GRAPHIC:
			case GREATEST:
			case HASH:
			case HASH_CRC32:
			case HASH_MD5:
			case HASH_SHA1:
			case HASH_SHA256:
			case HEX:
			case IDENTITY_VAL_LOCAL:
			case IFNULL:
			case INSTR:
			case INT:
			case INTEGER:
			case JULIAN_DAY:
			case LAST_DAY:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LN:
			case LOCATE:
			case LOCATE_IN_STRING:
			case LOG10:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAX:
			case MAX_CARDINALITY:
			case MIDNIGHT_SECONDS:
			case MIN:
			case MINUTE:
			case MOD:
			case MONTHS_BETWEEN:
			case MQREAD:
			case MQREADCLOB:
			case MQRECEIVE:
			case MQRECEIVECLOB:
			case MQSEND:
			case MULTIPLY_ALT:
			case NEXT_DAY:
			case NEXT_MONTH:
			case NORMALIZE_DECFLOAT:
			case NORMALIZE_STRING:
			case NULLIF:
			case NVL:
			case OVERLAY:
			case PACK:
			case POSITION:
			case POSSTR:
			case POW:
			case POWER:
			case QUANTIZE:
			case QUARTER:
			case RADIANS:
			case RAISE_ERROR:
			case RAND:
			case RANDOM:
			case REAL:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REPLACE:
			case RID:
			case ROUND:
			case ROUND_TIMESTAMP:
			case ROWID:
			case RPAD:
			case RTRIM:
			case SCORE:
			case SIGN:
			case SIN:
			case SINH:
			case SMALLINT:
			case SOAPHTTPC:
			case SOAPHTTPNC:
			case SOAPHTTPNV:
			case SOAPHTTPV:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STRIP:
			case STRLEFT:
			case STRPOS:
			case STRRIGHT:
			case SUBSTR:
			case SUBSTRING:
			case TAN:
			case TANH:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIMESTAMP_FORMAT:
			case TIMESTAMP_ISO:
			case TIMESTAMP_TZ:
			case TO_CHAR:
			case TO_CLOB:
			case TO_DATE:
			case TO_NUMBER:
			case TOTALORDER:
			case TO_TIMESTAMP:
			case TRANSLATE:
			case TRIM:
			case TRIM_ARRAY:
			case TRUNC:
			case TRUNC_TIMESTAMP:
			case UCASE:
			case UNICODE:
			case UNICODE_STR:
			case UNISTR:
			case UPPER:
			case VARBINARY:
			case VARCHAR:
			case VARCHAR9:
			case VARCHAR_BIT_FORMAT:
			case VARCHAR_FORMAT:
			case VARGRAPHIC:
			case VERIFY_GROUP_FOR_USER:
			case VERIFY_ROLE_FOR_USER:
			case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
			case WEEK:
			case WEEK_ISO:
			case WRAP:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLCONCAT:
			case XMLDOCUMENT:
			case XMLELEMENT:
			case XMLFOREST:
			case XMLMODIFY:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLSERIALIZE:
			case XMLTEXT:
			case XMLXSROBJECTID:
			case XSLTRANSFORM:
			case CURRENT_ACCELERATOR:
			case CURRENT_APPLICATION_COMPATIBILITY:
			case CURRENT_APPLICATION_ENCODING_SCHEME:
			case CURRENT_CLIENT_ACCTNG:
			case CURRENT_CLIENT_APPLNAME:
			case CURRENT_CLIENT_CORR_TOKEN:
			case CURRENT_CLIENT_USERID:
			case CURRENT_CLIENT_WRKSTNNAME:
			case CURRENT_DATE:
			case CURRENT_DEBUG_MODE:
			case CURRENT_DECFLOAT_ROUNDING_MODE:
			case CURRENT_DEGREE:
			case CURRENT_EXPLAIN_MODE:
			case CURRENT_GET_ACCEL_ARCHIVE:
			case CURRENT_LOCALE_LC_CTYPE:
			case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
			case CURRENT_MEMBER:
			case CURRENT_OPTIMIZATION_HINT:
			case CURRENT_PACKAGE_PATH:
			case CURRENT_PACKAGESET:
			case CURRENT_PATH:
			case CURRENT_PRECISION:
			case CURRENT_QUERY_ACCELERATION:
			case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
			case CURRENT_REFRESH_AGE:
			case CURRENT_ROUTINE_VERSION:
			case CURRENT_RULES:
			case CURRENT_SCHEMA:
			case CURRENT_SERVER:
			case CURRENT_SQLID:
			case CURRENT_TEMPORAL_BUSINESS_TIME:
			case CURRENT_TEMPORAL_SYSTEM_TIME:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_TIME_ZONE:
			case ENCRYPTION_PASSWORD:
			case SESSION_TIME_ZONE:
			case SESSION_USER:
			case USER:
			case ADMIN_TASK_LIST:
			case ADMIN_TASK_OUTPUT:
			case ADMIN_TASK_STATUS:
			case BLOCKING_THREADS:
			case MQREADALL:
			case MQREADALLCLOB:
			case MQRECEIVEALL:
			case MQRECEIVEALLCLOB:
			case XMLTABLE:
			case SQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(5821);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,662,_ctx) ) {
				case 1:
					{
					setState(5818);
					schemaName();
					setState(5819);
					match(DOT);
					}
					break;
				}
				setState(5823);
				identifier();
				}
				}
				break;
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(5824);
				hostVariable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntoClauseContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(DB2zSQLParser.INTO, 0); }
		public List<VariableContext> variable() {
			return getRuleContexts(VariableContext.class);
		}
		public VariableContext variable(int i) {
			return getRuleContext(VariableContext.class,i);
		}
		public ArrayElementSpecificationContext arrayElementSpecification() {
			return getRuleContext(ArrayElementSpecificationContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public IntoClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intoClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterIntoClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitIntoClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitIntoClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntoClauseContext intoClause() throws RecognitionException {
		IntoClauseContext _localctx = new IntoClauseContext(_ctx, getState());
		enterRule(_localctx, 790, RULE_intoClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5827);
			match(INTO);
			setState(5830);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,664,_ctx) ) {
			case 1:
				{
				setState(5828);
				variable();
				}
				break;
			case 2:
				{
				setState(5829);
				arrayElementSpecification();
				}
				break;
			}
			setState(5836);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5832);
				match(COMMA);
				setState(5833);
				variable();
				}
				}
				setState(5838);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CorrelationClauseContext extends ParserRuleContext {
		public CorrelationNameContext correlationName() {
			return getRuleContext(CorrelationNameContext.class,0);
		}
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<NewColumnNameContext> newColumnName() {
			return getRuleContexts(NewColumnNameContext.class);
		}
		public NewColumnNameContext newColumnName(int i) {
			return getRuleContext(NewColumnNameContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public CorrelationClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_correlationClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCorrelationClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCorrelationClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCorrelationClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CorrelationClauseContext correlationClause() throws RecognitionException {
		CorrelationClauseContext _localctx = new CorrelationClauseContext(_ctx, getState());
		enterRule(_localctx, 792, RULE_correlationClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5840);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,666,_ctx) ) {
			case 1:
				{
				setState(5839);
				match(AS);
				}
				break;
			}
			setState(5842);
			correlationName();
			setState(5854);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LPAREN) {
				{
				setState(5843);
				match(LPAREN);
				setState(5844);
				newColumnName();
				setState(5849);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5845);
					match(COMMA);
					setState(5846);
					newColumnName();
					}
					}
					setState(5851);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5852);
				match(RPAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromClauseContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(DB2zSQLParser.FROM, 0); }
		public List<CollectionDerivedTableContext> collectionDerivedTable() {
			return getRuleContexts(CollectionDerivedTableContext.class);
		}
		public CollectionDerivedTableContext collectionDerivedTable(int i) {
			return getRuleContext(CollectionDerivedTableContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public List<TableReferenceContext> tableReference() {
			return getRuleContexts(TableReferenceContext.class);
		}
		public TableReferenceContext tableReference(int i) {
			return getRuleContext(TableReferenceContext.class,i);
		}
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFromClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFromClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFromClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromClauseContext fromClause() throws RecognitionException {
		FromClauseContext _localctx = new FromClauseContext(_ctx, getState());
		enterRule(_localctx, 794, RULE_fromClause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5856);
			match(FROM);
			setState(5871);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,671,_ctx) ) {
			case 1:
				{
				{
				setState(5860);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,669,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(5857);
						match(LPAREN);
						}
						} 
					}
					setState(5862);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,669,_ctx);
				}
				setState(5863);
				tableReference();
				setState(5867);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,670,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(5864);
						match(RPAREN);
						}
						} 
					}
					setState(5869);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,670,_ctx);
				}
				}
				}
				break;
			case 2:
				{
				setState(5870);
				collectionDerivedTable();
				}
				break;
			}
			setState(5892);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5873);
				match(COMMA);
				setState(5888);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,674,_ctx) ) {
				case 1:
					{
					{
					setState(5877);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,672,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(5874);
							match(LPAREN);
							}
							} 
						}
						setState(5879);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,672,_ctx);
					}
					setState(5880);
					tableReference();
					setState(5884);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,673,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(5881);
							match(RPAREN);
							}
							} 
						}
						setState(5886);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,673,_ctx);
					}
					}
					}
					break;
				case 2:
					{
					setState(5887);
					collectionDerivedTable();
					}
					break;
				}
				}
				}
				setState(5894);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableReferenceContext extends ParserRuleContext {
		public SingleTableReferenceContext singleTableReference() {
			return getRuleContext(SingleTableReferenceContext.class,0);
		}
		public NestedTableExpressionContext nestedTableExpression() {
			return getRuleContext(NestedTableExpressionContext.class,0);
		}
		public DataChangeTableReferenceContext dataChangeTableReference() {
			return getRuleContext(DataChangeTableReferenceContext.class,0);
		}
		public TableFunctionReferenceContext tableFunctionReference() {
			return getRuleContext(TableFunctionReferenceContext.class,0);
		}
		public TableLocatorReferenceContext tableLocatorReference() {
			return getRuleContext(TableLocatorReferenceContext.class,0);
		}
		public XmltableExpressionContext xmltableExpression() {
			return getRuleContext(XmltableExpressionContext.class,0);
		}
		public CollectionDerivedTableContext collectionDerivedTable() {
			return getRuleContext(CollectionDerivedTableContext.class,0);
		}
		public List<TerminalNode> JOIN() { return getTokens(DB2zSQLParser.JOIN); }
		public TerminalNode JOIN(int i) {
			return getToken(DB2zSQLParser.JOIN, i);
		}
		public List<TableReferenceContext> tableReference() {
			return getRuleContexts(TableReferenceContext.class);
		}
		public TableReferenceContext tableReference(int i) {
			return getRuleContext(TableReferenceContext.class,i);
		}
		public List<TerminalNode> ON() { return getTokens(DB2zSQLParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(DB2zSQLParser.ON, i);
		}
		public List<JoinConditionContext> joinCondition() {
			return getRuleContexts(JoinConditionContext.class);
		}
		public JoinConditionContext joinCondition(int i) {
			return getRuleContext(JoinConditionContext.class,i);
		}
		public TerminalNode CROSS() { return getToken(DB2zSQLParser.CROSS, 0); }
		public List<TerminalNode> INNER() { return getTokens(DB2zSQLParser.INNER); }
		public TerminalNode INNER(int i) {
			return getToken(DB2zSQLParser.INNER, i);
		}
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public List<TerminalNode> LEFT() { return getTokens(DB2zSQLParser.LEFT); }
		public TerminalNode LEFT(int i) {
			return getToken(DB2zSQLParser.LEFT, i);
		}
		public List<TerminalNode> RIGHT() { return getTokens(DB2zSQLParser.RIGHT); }
		public TerminalNode RIGHT(int i) {
			return getToken(DB2zSQLParser.RIGHT, i);
		}
		public List<TerminalNode> FULL() { return getTokens(DB2zSQLParser.FULL); }
		public TerminalNode FULL(int i) {
			return getToken(DB2zSQLParser.FULL, i);
		}
		public List<TerminalNode> OUTER() { return getTokens(DB2zSQLParser.OUTER); }
		public TerminalNode OUTER(int i) {
			return getToken(DB2zSQLParser.OUTER, i);
		}
		public TableReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTableReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTableReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTableReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableReferenceContext tableReference() throws RecognitionException {
		TableReferenceContext _localctx = new TableReferenceContext(_ctx, getState());
		enterRule(_localctx, 796, RULE_tableReference);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6029);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,696,_ctx) ) {
			case 1:
				{
				setState(5895);
				singleTableReference();
				}
				break;
			case 2:
				{
				setState(5896);
				nestedTableExpression();
				}
				break;
			case 3:
				{
				setState(5897);
				dataChangeTableReference();
				}
				break;
			case 4:
				{
				setState(5898);
				tableFunctionReference();
				}
				break;
			case 5:
				{
				setState(5899);
				tableLocatorReference();
				}
				break;
			case 6:
				{
				setState(5900);
				xmltableExpression();
				}
				break;
			case 7:
				{
				setState(5901);
				collectionDerivedTable();
				}
				break;
			case 8:
				{
				{
				setState(5950);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,683,_ctx) ) {
				case 1:
					{
					setState(5902);
					singleTableReference();
					}
					break;
				case 2:
					{
					setState(5903);
					nestedTableExpression();
					}
					break;
				case 3:
					{
					setState(5904);
					tableFunctionReference();
					}
					break;
				case 4:
					{
					setState(5905);
					tableLocatorReference();
					}
					break;
				case 5:
					{
					setState(5906);
					xmltableExpression();
					}
					break;
				case 6:
					{
					setState(5907);
					collectionDerivedTable();
					}
					break;
				case 7:
					{
					{
					setState(5909); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(5908);
							match(LPAREN);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(5911); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,676,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					setState(5913);
					tableReference();
					setState(5915); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(5914);
						match(RPAREN);
						}
						}
						setState(5917); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==RPAREN );
					}
					}
					break;
				case 8:
					{
					{
					setState(5936);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,680,_ctx) ) {
					case 1:
						{
						setState(5919);
						singleTableReference();
						}
						break;
					case 2:
						{
						setState(5920);
						nestedTableExpression();
						}
						break;
					case 3:
						{
						setState(5921);
						tableFunctionReference();
						}
						break;
					case 4:
						{
						setState(5922);
						tableLocatorReference();
						}
						break;
					case 5:
						{
						setState(5923);
						xmltableExpression();
						}
						break;
					case 6:
						{
						{
						setState(5925); 
						_errHandler.sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								setState(5924);
								match(LPAREN);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							setState(5927); 
							_errHandler.sync(this);
							_alt = getInterpreter().adaptivePredict(_input,678,_ctx);
						} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
						setState(5929);
						tableReference();
						setState(5931); 
						_errHandler.sync(this);
						_la = _input.LA(1);
						do {
							{
							{
							setState(5930);
							match(RPAREN);
							}
							}
							setState(5933); 
							_errHandler.sync(this);
							_la = _input.LA(1);
						} while ( _la==RPAREN );
						}
						}
						break;
					case 7:
						{
						setState(5935);
						collectionDerivedTable();
						}
						break;
					}
					setState(5943);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case INNER:
						{
						setState(5938);
						match(INNER);
						}
						break;
					case FULL:
					case LEFT:
					case RIGHT:
						{
						{
						setState(5939);
						_la = _input.LA(1);
						if ( !(_la==FULL || _la==LEFT || _la==RIGHT) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(5941);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==OUTER) {
							{
							setState(5940);
							match(OUTER);
							}
						}

						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5945);
					match(JOIN);
					setState(5946);
					tableReference();
					setState(5947);
					match(ON);
					setState(5948);
					joinCondition();
					}
					}
					break;
				}
				setState(5957);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case INNER:
					{
					setState(5952);
					match(INNER);
					}
					break;
				case FULL:
				case LEFT:
				case RIGHT:
					{
					{
					setState(5953);
					_la = _input.LA(1);
					if ( !(_la==FULL || _la==LEFT || _la==RIGHT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5955);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OUTER) {
						{
						setState(5954);
						match(OUTER);
						}
					}

					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5959);
				match(JOIN);
				setState(5960);
				tableReference();
				setState(5961);
				match(ON);
				setState(5962);
				joinCondition();
				}
				}
				break;
			case 9:
				{
				{
				setState(6012);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,693,_ctx) ) {
				case 1:
					{
					setState(5964);
					singleTableReference();
					}
					break;
				case 2:
					{
					setState(5965);
					nestedTableExpression();
					}
					break;
				case 3:
					{
					setState(5966);
					tableFunctionReference();
					}
					break;
				case 4:
					{
					setState(5967);
					tableLocatorReference();
					}
					break;
				case 5:
					{
					setState(5968);
					xmltableExpression();
					}
					break;
				case 6:
					{
					setState(5969);
					collectionDerivedTable();
					}
					break;
				case 7:
					{
					{
					setState(5971); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(5970);
							match(LPAREN);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(5973); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,686,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					setState(5975);
					tableReference();
					setState(5977); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(5976);
						match(RPAREN);
						}
						}
						setState(5979); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==RPAREN );
					}
					}
					break;
				case 8:
					{
					{
					setState(5998);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,690,_ctx) ) {
					case 1:
						{
						setState(5981);
						singleTableReference();
						}
						break;
					case 2:
						{
						setState(5982);
						nestedTableExpression();
						}
						break;
					case 3:
						{
						setState(5983);
						tableFunctionReference();
						}
						break;
					case 4:
						{
						setState(5984);
						tableLocatorReference();
						}
						break;
					case 5:
						{
						setState(5985);
						xmltableExpression();
						}
						break;
					case 6:
						{
						{
						setState(5987); 
						_errHandler.sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								setState(5986);
								match(LPAREN);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							setState(5989); 
							_errHandler.sync(this);
							_alt = getInterpreter().adaptivePredict(_input,688,_ctx);
						} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
						setState(5991);
						tableReference();
						setState(5993); 
						_errHandler.sync(this);
						_la = _input.LA(1);
						do {
							{
							{
							setState(5992);
							match(RPAREN);
							}
							}
							setState(5995); 
							_errHandler.sync(this);
							_la = _input.LA(1);
						} while ( _la==RPAREN );
						}
						}
						break;
					case 7:
						{
						setState(5997);
						collectionDerivedTable();
						}
						break;
					}
					setState(6005);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case INNER:
						{
						setState(6000);
						match(INNER);
						}
						break;
					case FULL:
					case LEFT:
					case RIGHT:
						{
						{
						setState(6001);
						_la = _input.LA(1);
						if ( !(_la==FULL || _la==LEFT || _la==RIGHT) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(6003);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==OUTER) {
							{
							setState(6002);
							match(OUTER);
							}
						}

						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(6007);
					match(JOIN);
					setState(6008);
					tableReference();
					setState(6009);
					match(ON);
					setState(6010);
					joinCondition();
					}
					}
					break;
				}
				setState(6014);
				match(CROSS);
				setState(6015);
				match(JOIN);
				setState(6016);
				tableReference();
				}
				}
				break;
			case 10:
				{
				{
				setState(6019); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(6018);
						match(LPAREN);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(6021); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,694,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(6023);
				tableReference();
				setState(6025); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(6024);
						match(RPAREN);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(6027); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,695,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SingleTableReferenceContext extends ParserRuleContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public List<PeriodSpecificationContext> periodSpecification() {
			return getRuleContexts(PeriodSpecificationContext.class);
		}
		public PeriodSpecificationContext periodSpecification(int i) {
			return getRuleContext(PeriodSpecificationContext.class,i);
		}
		public CorrelationClauseContext correlationClause() {
			return getRuleContext(CorrelationClauseContext.class,0);
		}
		public SingleTableReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleTableReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSingleTableReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSingleTableReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSingleTableReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SingleTableReferenceContext singleTableReference() throws RecognitionException {
		SingleTableReferenceContext _localctx = new SingleTableReferenceContext(_ctx, getState());
		enterRule(_localctx, 798, RULE_singleTableReference);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6031);
			tableName();
			setState(6035);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,697,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6032);
					periodSpecification();
					}
					} 
				}
				setState(6037);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,697,_ctx);
			}
			setState(6039);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,698,_ctx) ) {
			case 1:
				{
				setState(6038);
				correlationClause();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PeriodSpecificationContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode SYSTEM_TIME() { return getToken(DB2zSQLParser.SYSTEM_TIME, 0); }
		public TerminalNode BUSINESS_TIME() { return getToken(DB2zSQLParser.BUSINESS_TIME, 0); }
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode OF() { return getToken(DB2zSQLParser.OF, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode FROM() { return getToken(DB2zSQLParser.FROM, 0); }
		public TerminalNode TO() { return getToken(DB2zSQLParser.TO, 0); }
		public TerminalNode BETWEEN() { return getToken(DB2zSQLParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(DB2zSQLParser.AND, 0); }
		public PeriodSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_periodSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPeriodSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPeriodSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPeriodSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PeriodSpecificationContext periodSpecification() throws RecognitionException {
		PeriodSpecificationContext _localctx = new PeriodSpecificationContext(_ctx, getState());
		enterRule(_localctx, 800, RULE_periodSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6041);
			match(FOR);
			setState(6042);
			_la = _input.LA(1);
			if ( !(_la==SYSTEM_TIME || _la==BUSINESS_TIME) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6056);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AS:
				{
				{
				setState(6043);
				match(AS);
				setState(6044);
				match(OF);
				setState(6045);
				expression();
				}
				}
				break;
			case FROM:
				{
				{
				setState(6046);
				match(FROM);
				setState(6047);
				expression();
				setState(6048);
				match(TO);
				setState(6049);
				expression();
				}
				}
				break;
			case BETWEEN:
				{
				{
				setState(6051);
				match(BETWEEN);
				setState(6052);
				expression();
				setState(6053);
				match(AND);
				setState(6054);
				expression();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PeriodClauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode PORTION() { return getToken(DB2zSQLParser.PORTION, 0); }
		public TerminalNode OF() { return getToken(DB2zSQLParser.OF, 0); }
		public TerminalNode BUSINESS_TIME() { return getToken(DB2zSQLParser.BUSINESS_TIME, 0); }
		public TerminalNode FROM() { return getToken(DB2zSQLParser.FROM, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode TO() { return getToken(DB2zSQLParser.TO, 0); }
		public TerminalNode BETWEEN() { return getToken(DB2zSQLParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(DB2zSQLParser.AND, 0); }
		public PeriodClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_periodClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPeriodClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPeriodClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPeriodClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PeriodClauseContext periodClause() throws RecognitionException {
		PeriodClauseContext _localctx = new PeriodClauseContext(_ctx, getState());
		enterRule(_localctx, 802, RULE_periodClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6058);
			match(FOR);
			setState(6059);
			match(PORTION);
			setState(6060);
			match(OF);
			setState(6061);
			match(BUSINESS_TIME);
			setState(6072);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FROM:
				{
				{
				setState(6062);
				match(FROM);
				setState(6063);
				expression();
				setState(6064);
				match(TO);
				setState(6065);
				expression();
				}
				}
				break;
			case BETWEEN:
				{
				{
				setState(6067);
				match(BETWEEN);
				setState(6068);
				expression();
				setState(6069);
				match(AND);
				setState(6070);
				expression();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NestedTableExpressionContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public FullSelectContext fullSelect() {
			return getRuleContext(FullSelectContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public CorrelationClauseContext correlationClause() {
			return getRuleContext(CorrelationClauseContext.class,0);
		}
		public NestedTableExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nestedTableExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterNestedTableExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitNestedTableExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitNestedTableExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NestedTableExpressionContext nestedTableExpression() throws RecognitionException {
		NestedTableExpressionContext _localctx = new NestedTableExpressionContext(_ctx, getState());
		enterRule(_localctx, 804, RULE_nestedTableExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6075);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLE) {
				{
				setState(6074);
				match(TABLE);
				}
			}

			setState(6077);
			match(LPAREN);
			setState(6078);
			fullSelect();
			setState(6079);
			match(RPAREN);
			setState(6081);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,702,_ctx) ) {
			case 1:
				{
				setState(6080);
				correlationClause();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataChangeTableReferenceContext extends ParserRuleContext {
		public TerminalNode FINAL() { return getToken(DB2zSQLParser.FINAL, 0); }
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public InsertStatementContext insertStatement() {
			return getRuleContext(InsertStatementContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public SearchedUpdateContext searchedUpdate() {
			return getRuleContext(SearchedUpdateContext.class,0);
		}
		public TerminalNode OLD() { return getToken(DB2zSQLParser.OLD, 0); }
		public SearchedDeleteContext searchedDelete() {
			return getRuleContext(SearchedDeleteContext.class,0);
		}
		public MergeStatementContext mergeStatement() {
			return getRuleContext(MergeStatementContext.class,0);
		}
		public CorrelationClauseContext correlationClause() {
			return getRuleContext(CorrelationClauseContext.class,0);
		}
		public DataChangeTableReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataChangeTableReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDataChangeTableReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDataChangeTableReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDataChangeTableReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataChangeTableReferenceContext dataChangeTableReference() throws RecognitionException {
		DataChangeTableReferenceContext _localctx = new DataChangeTableReferenceContext(_ctx, getState());
		enterRule(_localctx, 806, RULE_dataChangeTableReference);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6100);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,704,_ctx) ) {
			case 1:
				{
				{
				setState(6083);
				match(FINAL);
				setState(6084);
				match(TABLE);
				setState(6085);
				match(LPAREN);
				setState(6086);
				insertStatement();
				setState(6087);
				match(RPAREN);
				setState(6089);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,703,_ctx) ) {
				case 1:
					{
					setState(6088);
					correlationClause();
					}
					break;
				}
				}
				}
				break;
			case 2:
				{
				{
				setState(6091);
				_la = _input.LA(1);
				if ( !(_la==FINAL || _la==OLD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6092);
				match(TABLE);
				setState(6093);
				searchedUpdate();
				}
				}
				break;
			case 3:
				{
				{
				setState(6094);
				match(OLD);
				setState(6095);
				match(TABLE);
				setState(6096);
				searchedDelete();
				}
				}
				break;
			case 4:
				{
				{
				setState(6097);
				match(FINAL);
				setState(6098);
				match(TABLE);
				setState(6099);
				mergeStatement();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableFunctionReferenceContext extends ParserRuleContext {
		public List<TerminalNode> TABLE() { return getTokens(DB2zSQLParser.TABLE); }
		public TerminalNode TABLE(int i) {
			return getToken(DB2zSQLParser.TABLE, i);
		}
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public ScalarFunctionContext scalarFunction() {
			return getRuleContext(ScalarFunctionContext.class,0);
		}
		public AggregateFunctionContext aggregateFunction() {
			return getRuleContext(AggregateFunctionContext.class,0);
		}
		public RegressionFunctionContext regressionFunction() {
			return getRuleContext(RegressionFunctionContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public TableUdfCardinalityClauseContext tableUdfCardinalityClause() {
			return getRuleContext(TableUdfCardinalityClauseContext.class,0);
		}
		public CorrelationClauseContext correlationClause() {
			return getRuleContext(CorrelationClauseContext.class,0);
		}
		public TypedCorrelationClauseContext typedCorrelationClause() {
			return getRuleContext(TypedCorrelationClauseContext.class,0);
		}
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TableFunctionReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableFunctionReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTableFunctionReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTableFunctionReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTableFunctionReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableFunctionReferenceContext tableFunctionReference() throws RecognitionException {
		TableFunctionReferenceContext _localctx = new TableFunctionReferenceContext(_ctx, getState());
		enterRule(_localctx, 808, RULE_tableFunctionReference);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6102);
			match(TABLE);
			setState(6103);
			match(LPAREN);
			setState(6108);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,705,_ctx) ) {
			case 1:
				{
				setState(6104);
				scalarFunction();
				}
				break;
			case 2:
				{
				setState(6105);
				aggregateFunction();
				}
				break;
			case 3:
				{
				setState(6106);
				regressionFunction();
				}
				break;
			case 4:
				{
				setState(6107);
				identifier();
				}
				break;
			}
			setState(6110);
			match(LPAREN);
			setState(6114);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,706,_ctx) ) {
			case 1:
				{
				setState(6111);
				expression();
				}
				break;
			case 2:
				{
				{
				setState(6112);
				match(TABLE);
				setState(6113);
				tableName();
				}
				}
				break;
			}
			setState(6124);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6116);
				match(COMMA);
				setState(6120);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,707,_ctx) ) {
				case 1:
					{
					setState(6117);
					expression();
					}
					break;
				case 2:
					{
					{
					setState(6118);
					match(TABLE);
					setState(6119);
					tableName();
					}
					}
					break;
				}
				}
				}
				setState(6126);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6127);
			match(RPAREN);
			setState(6129);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CARDINALITY) {
				{
				setState(6128);
				tableUdfCardinalityClause();
				}
			}

			setState(6131);
			match(RPAREN);
			setState(6134);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,710,_ctx) ) {
			case 1:
				{
				setState(6132);
				correlationClause();
				}
				break;
			case 2:
				{
				setState(6133);
				typedCorrelationClause();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableUdfCardinalityClauseContext extends ParserRuleContext {
		public TerminalNode CARDINALITY() { return getToken(DB2zSQLParser.CARDINALITY, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode NUMERICLITERAL() { return getToken(DB2zSQLParser.NUMERICLITERAL, 0); }
		public TerminalNode MULTIPLIER() { return getToken(DB2zSQLParser.MULTIPLIER, 0); }
		public TableUdfCardinalityClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableUdfCardinalityClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTableUdfCardinalityClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTableUdfCardinalityClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTableUdfCardinalityClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableUdfCardinalityClauseContext tableUdfCardinalityClause() throws RecognitionException {
		TableUdfCardinalityClauseContext _localctx = new TableUdfCardinalityClauseContext(_ctx, getState());
		enterRule(_localctx, 810, RULE_tableUdfCardinalityClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6136);
			match(CARDINALITY);
			setState(6138);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MULTIPLIER) {
				{
				setState(6137);
				match(MULTIPLIER);
				}
			}

			setState(6140);
			_la = _input.LA(1);
			if ( !(_la==INTEGERLITERAL || _la==NUMERICLITERAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypedCorrelationClauseContext extends ParserRuleContext {
		public CorrelationNameContext correlationName() {
			return getRuleContext(CorrelationNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public List<DataTypeContext> dataType() {
			return getRuleContexts(DataTypeContext.class);
		}
		public DataTypeContext dataType(int i) {
			return getRuleContext(DataTypeContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public TypedCorrelationClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typedCorrelationClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTypedCorrelationClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTypedCorrelationClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTypedCorrelationClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypedCorrelationClauseContext typedCorrelationClause() throws RecognitionException {
		TypedCorrelationClauseContext _localctx = new TypedCorrelationClauseContext(_ctx, getState());
		enterRule(_localctx, 812, RULE_typedCorrelationClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6143);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,712,_ctx) ) {
			case 1:
				{
				setState(6142);
				match(AS);
				}
				break;
			}
			setState(6145);
			correlationName();
			setState(6146);
			match(LPAREN);
			setState(6147);
			columnName();
			setState(6148);
			dataType();
			setState(6155);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6149);
				match(COMMA);
				setState(6150);
				columnName();
				setState(6151);
				dataType();
				}
				}
				setState(6157);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6158);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableLocatorReferenceContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(DB2zSQLParser.LIKE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public CorrelationNameContext correlationName() {
			return getRuleContext(CorrelationNameContext.class,0);
		}
		public TableLocatorReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableLocatorReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTableLocatorReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTableLocatorReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTableLocatorReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableLocatorReferenceContext tableLocatorReference() throws RecognitionException {
		TableLocatorReferenceContext _localctx = new TableLocatorReferenceContext(_ctx, getState());
		enterRule(_localctx, 814, RULE_tableLocatorReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6160);
			match(TABLE);
			setState(6161);
			match(LPAREN);
			setState(6162);
			identifier();
			setState(6163);
			match(LIKE);
			setState(6164);
			tableName();
			setState(6165);
			match(RPAREN);
			setState(6167);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,714,_ctx) ) {
			case 1:
				{
				setState(6166);
				correlationName();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmltableExpressionContext extends ParserRuleContext {
		public XmltableFunctionSpecificationContext xmltableFunctionSpecification() {
			return getRuleContext(XmltableFunctionSpecificationContext.class,0);
		}
		public CorrelationClauseContext correlationClause() {
			return getRuleContext(CorrelationClauseContext.class,0);
		}
		public XmltableExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmltableExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterXmltableExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitXmltableExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitXmltableExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmltableExpressionContext xmltableExpression() throws RecognitionException {
		XmltableExpressionContext _localctx = new XmltableExpressionContext(_ctx, getState());
		enterRule(_localctx, 816, RULE_xmltableExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6169);
			xmltableFunctionSpecification();
			setState(6171);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,715,_ctx) ) {
			case 1:
				{
				setState(6170);
				correlationClause();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollectionDerivedTableContext extends ParserRuleContext {
		public TerminalNode UNNEST() { return getToken(DB2zSQLParser.UNNEST, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<OrdinaryArrayExpressionContext> ordinaryArrayExpression() {
			return getRuleContexts(OrdinaryArrayExpressionContext.class);
		}
		public OrdinaryArrayExpressionContext ordinaryArrayExpression(int i) {
			return getRuleContext(OrdinaryArrayExpressionContext.class,i);
		}
		public List<AssociativeArrayExpressionContext> associativeArrayExpression() {
			return getRuleContexts(AssociativeArrayExpressionContext.class);
		}
		public AssociativeArrayExpressionContext associativeArrayExpression(int i) {
			return getRuleContext(AssociativeArrayExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode ORDINALITY() { return getToken(DB2zSQLParser.ORDINALITY, 0); }
		public CorrelationClauseContext correlationClause() {
			return getRuleContext(CorrelationClauseContext.class,0);
		}
		public CollectionDerivedTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collectionDerivedTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCollectionDerivedTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCollectionDerivedTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCollectionDerivedTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollectionDerivedTableContext collectionDerivedTable() throws RecognitionException {
		CollectionDerivedTableContext _localctx = new CollectionDerivedTableContext(_ctx, getState());
		enterRule(_localctx, 818, RULE_collectionDerivedTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6173);
			match(UNNEST);
			setState(6174);
			match(LPAREN);
			setState(6177);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,716,_ctx) ) {
			case 1:
				{
				setState(6175);
				ordinaryArrayExpression();
				}
				break;
			case 2:
				{
				setState(6176);
				associativeArrayExpression();
				}
				break;
			}
			setState(6186);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6179);
				match(COMMA);
				setState(6182);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,717,_ctx) ) {
				case 1:
					{
					setState(6180);
					ordinaryArrayExpression();
					}
					break;
				case 2:
					{
					setState(6181);
					associativeArrayExpression();
					}
					break;
				}
				}
				}
				setState(6188);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6189);
			match(RPAREN);
			setState(6192);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,719,_ctx) ) {
			case 1:
				{
				setState(6190);
				match(WITH);
				setState(6191);
				match(ORDINALITY);
				}
				break;
			}
			setState(6195);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,720,_ctx) ) {
			case 1:
				{
				setState(6194);
				correlationClause();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinConditionContext extends ParserRuleContext {
		public SearchConditionContext searchCondition() {
			return getRuleContext(SearchConditionContext.class,0);
		}
		public List<FullJoinExpressionContext> fullJoinExpression() {
			return getRuleContexts(FullJoinExpressionContext.class);
		}
		public FullJoinExpressionContext fullJoinExpression(int i) {
			return getRuleContext(FullJoinExpressionContext.class,i);
		}
		public TerminalNode EQ() { return getToken(DB2zSQLParser.EQ, 0); }
		public JoinConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinCondition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterJoinCondition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitJoinCondition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitJoinCondition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinConditionContext joinCondition() throws RecognitionException {
		JoinConditionContext _localctx = new JoinConditionContext(_ctx, getState());
		enterRule(_localctx, 820, RULE_joinCondition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6202);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,721,_ctx) ) {
			case 1:
				{
				setState(6197);
				searchCondition();
				}
				break;
			case 2:
				{
				{
				setState(6198);
				fullJoinExpression();
				setState(6199);
				match(EQ);
				setState(6200);
				fullJoinExpression();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FullJoinExpressionContext extends ParserRuleContext {
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public List<CastFunctionContext> castFunction() {
			return getRuleContexts(CastFunctionContext.class);
		}
		public CastFunctionContext castFunction(int i) {
			return getRuleContext(CastFunctionContext.class,i);
		}
		public TerminalNode COALESCE() { return getToken(DB2zSQLParser.COALESCE, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public FullJoinExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullJoinExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFullJoinExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFullJoinExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFullJoinExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FullJoinExpressionContext fullJoinExpression() throws RecognitionException {
		FullJoinExpressionContext _localctx = new FullJoinExpressionContext(_ctx, getState());
		enterRule(_localctx, 822, RULE_fullJoinExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6224);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,725,_ctx) ) {
			case 1:
				{
				setState(6204);
				columnName();
				}
				break;
			case 2:
				{
				setState(6205);
				castFunction();
				}
				break;
			case 3:
				{
				{
				setState(6206);
				match(COALESCE);
				setState(6207);
				match(LPAREN);
				setState(6210);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,722,_ctx) ) {
				case 1:
					{
					setState(6208);
					columnName();
					}
					break;
				case 2:
					{
					setState(6209);
					castFunction();
					}
					break;
				}
				setState(6219);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6212);
					match(COMMA);
					setState(6215);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,723,_ctx) ) {
					case 1:
						{
						setState(6213);
						columnName();
						}
						break;
					case 2:
						{
						setState(6214);
						castFunction();
						}
						break;
					}
					}
					}
					setState(6221);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6222);
				match(RPAREN);
				}
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CastFunctionContext extends ParserRuleContext {
		public CastSpecificationContext castSpecification() {
			return getRuleContext(CastSpecificationContext.class,0);
		}
		public CastFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_castFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCastFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCastFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCastFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CastFunctionContext castFunction() throws RecognitionException {
		CastFunctionContext _localctx = new CastFunctionContext(_ctx, getState());
		enterRule(_localctx, 824, RULE_castFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6226);
			castSpecification();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrdinaryArrayExpressionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public OrdinaryArrayExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ordinaryArrayExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterOrdinaryArrayExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitOrdinaryArrayExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitOrdinaryArrayExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrdinaryArrayExpressionContext ordinaryArrayExpression() throws RecognitionException {
		OrdinaryArrayExpressionContext _localctx = new OrdinaryArrayExpressionContext(_ctx, getState());
		enterRule(_localctx, 826, RULE_ordinaryArrayExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6228);
			expression();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AssociativeArrayExpressionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public AssociativeArrayExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_associativeArrayExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAssociativeArrayExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAssociativeArrayExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAssociativeArrayExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AssociativeArrayExpressionContext associativeArrayExpression() throws RecognitionException {
		AssociativeArrayExpressionContext _localctx = new AssociativeArrayExpressionContext(_ctx, getState());
		enterRule(_localctx, 828, RULE_associativeArrayExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6230);
			expression();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ComparisonContext extends ParserRuleContext {
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public ComparisonContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparison; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterComparison(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitComparison(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitComparison(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ComparisonContext comparison() throws RecognitionException {
		ComparisonContext _localctx = new ComparisonContext(_ctx, getState());
		enterRule(_localctx, 830, RULE_comparison);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6232);
			columnName();
			setState(6233);
			comparisonOperator();
			setState(6236);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case ALL:
			case ALLOCATE:
			case ALLOW:
			case ALTER:
			case ALTERAND:
			case ANY:
			case ARRAY:
			case ARRAY_EXISTS:
			case AS:
			case ASENSITIVE:
			case ASSOCIATE:
			case ASUTIME:
			case AT:
			case AUDIT:
			case AUX:
			case AUXILIARY:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BUFFERPOOL:
			case BY:
			case CALL:
			case CAPTURE:
			case CASCADED:
			case CASE:
			case CAST:
			case CCSID:
			case CHAR:
			case CHARACTER:
			case CHECK:
			case CLONE:
			case CLOSE:
			case CLUSTER:
			case COLLECTION:
			case COLLID:
			case COLUMN:
			case COMMENT:
			case COMMIT:
			case CONCAT:
			case CONDITION:
			case CONNECT:
			case CONNECTION:
			case CONSTRAINT:
			case CONTAINS:
			case CONTENT:
			case CONTINUE:
			case CREATE:
			case CUBE:
			case CURRENT:
			case CURRENT_LC_CTYPE:
			case CURRVAL:
			case CURSOR:
			case DATA:
			case DATABASE:
			case DAY:
			case DAYS:
			case DBINFO:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DISABLE:
			case DISALLOW:
			case DISTINCT:
			case DO:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSSIZE:
			case DYNAMIC:
			case EDITPROC:
			case ELSE:
			case ELSEIF:
			case ENCODING:
			case ENCRYPTION:
			case END:
			case END_EXEC:
			case ENDING:
			case ERASE:
			case ESCAPE:
			case EXCEPT:
			case EXCEPTION:
			case EXEC_SQL:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case FENCED:
			case FETCH:
			case FIELDPROC:
			case FINAL:
			case FIRST:
			case FOR:
			case FREE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANT:
			case GROUP:
			case HANDLER:
			case HAVING:
			case HOLD:
			case HOUR:
			case HOURS:
			case IF:
			case IMMEDIATE:
			case IN:
			case INCLUSIVE:
			case INDEX:
			case INDEXBP:
			case INHERIT:
			case INNER:
			case INOUT:
			case INSENSITIVE:
			case INSERT:
			case INTERSECT:
			case INTO:
			case IS:
			case ISOBID:
			case ITERATE:
			case JAR:
			case JOIN:
			case KEEP:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LAST:
			case LC_CTYPE:
			case LEAVE:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOCALE:
			case LOCATOR:
			case LOCATORS:
			case LOCK:
			case LOCKMAX:
			case LOCKSIZE:
			case LONG:
			case LOOP:
			case MAINTAINED:
			case MATERIALIZED:
			case MICROSECOND:
			case MICROSECONDS:
			case MODIFIES:
			case MONTH:
			case MONTHS:
			case NEXT:
			case NEXTVAL:
			case NO:
			case NONE:
			case NOT:
			case NULL:
			case NULLS:
			case NUMPARTS:
			case OBID:
			case OF:
			case OFFSET:
			case OLD:
			case ON:
			case OPEN:
			case OPTIMIZATION:
			case OPTIMIZE:
			case OR:
			case ORDER:
			case ORGANIZATION:
			case OUT:
			case OUTER:
			case PACKAGE:
			case PADDED:
			case PARAMETER:
			case PART:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONING:
			case PATH:
			case PERIOD:
			case PIECESIZE:
			case PLAN:
			case PRECISION:
			case PREPARE:
			case PREVVAL:
			case PRIOR:
			case PRIQTY:
			case PRIVILEGES:
			case PROCEDURE:
			case PROGRAM:
			case PSID:
			case PUBLIC:
			case QUERY:
			case QUERYNO:
			case READS:
			case REFERENCES:
			case REFRESH:
			case RELEASE:
			case RENAME:
			case REPEAT:
			case RESIGNAL:
			case RESTRICT:
			case RESULT:
			case RESULT_SET_LOCATOR:
			case RETURN:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUND_CEILING:
			case ROUND_DOWN:
			case ROUND_FLOOR:
			case ROUND_HALF_DOWN:
			case ROUND_HALF_EVEN:
			case ROUND_HALF_UP:
			case ROUND_UP:
			case ROW:
			case ROWSET:
			case RUN:
			case SAVEPOINT:
			case SCHEMA:
			case SCRATCHPAD:
			case SECOND:
			case SECONDS:
			case SECQTY:
			case SECURITY:
			case SELECT:
			case SENSITIVE:
			case SEQUENCE:
			case SET:
			case SIGNAL:
			case SIMPLE:
			case SOME:
			case SOURCE:
			case SPECIFIC:
			case STANDARD:
			case STATEMENT:
			case STATIC:
			case STAY:
			case STOGROUP:
			case STORES:
			case STYLE:
			case SUMMARY:
			case SYNONYM:
			case SYSDATE:
			case SYSTEM:
			case SYSTIMESTAMP:
			case TABLE:
			case TABLESPACE:
			case THEN:
			case TO:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNDO:
			case UNION:
			case UNIQUE:
			case UNTIL:
			case UPDATE:
			case USING:
			case VALIDPROC:
			case VALUE:
			case VALUES:
			case VARIABLE:
			case VARIANT:
			case VCAT:
			case VERSIONING:
			case VIEW:
			case VOLATILE:
			case VOLUMES:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WLM:
			case XMLCAST:
			case XMLEXISTS:
			case XMLNAMESPACES:
			case YEAR:
			case YEARS:
			case ZONE:
			case AND:
			case ARRAY_AGG:
			case ASC:
			case AVG:
			case BIT:
			case CHANGE:
			case CODEUNITS16:
			case CODEUNITS32:
			case CORR:
			case CORRELATION:
			case COUNT:
			case COUNT_BIG:
			case COVAR:
			case COVARIANCE:
			case COVARIANCE_SAMP:
			case COVAR_POP:
			case COVAR_SAMP:
			case CS:
			case CUME_DIST:
			case DENSE_RANK:
			case DESC:
			case EBCDIC:
			case EXCLUSIVE:
			case FIRST_VALUE:
			case FOLLOWING:
			case GROUPING:
			case IGNORE:
			case INDICATOR:
			case INPUT:
			case ISNULL:
			case LAG:
			case LARGE:
			case LAST_VALUE:
			case LEAD:
			case LISTAGG:
			case LOCKED:
			case LOCKS:
			case MEDIAN:
			case MINUTES:
			case MIXED:
			case NOTNULL:
			case NTH_VALUE:
			case NTILE:
			case NUMERIC:
			case OBJECT:
			case OCTETS:
			case ONLY:
			case OVER:
			case PASSING:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PERCENT_RANK:
			case PRECEDING:
			case PREVIOUS:
			case RANGE:
			case RANK:
			case RATIO_TO_REPORT:
			case READ:
			case REF:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_ICPT:
			case REGR_INTERCEPT:
			case REGR_R2:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case RESPECT:
			case ROW_NUMBER:
			case ROWS:
			case RR:
			case RS:
			case SBCS:
			case SELECTIVITY:
			case SETS:
			case SHARE:
			case SKIP_:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case TOKEN:
			case UNBOUNDED:
			case UNPACK:
			case UR:
			case USE:
			case VAR:
			case VARIANCE:
			case VARIANCE_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARYING:
			case WITHOUT:
			case XML:
			case XMLAGG:
			case COLUMNS:
			case SQLID:
			case ORDINALITY:
			case SYSTEM_TIME:
			case BUSINESS_TIME:
			case MULTIPLIER:
			case UNNEST:
			case CROSS:
			case CALLER:
			case CLIENT:
			case POSITIONING:
			case SCROLL:
			case ACTION:
			case ASSEMBLE:
			case C_:
			case CALLED:
			case COBOL:
			case DB2:
			case DEFINER:
			case DISPATCH:
			case ENVIRONMENT:
			case FAILURE:
			case FAILURES:
			case JAVA:
			case MAIN:
			case NAME:
			case OPTIONS:
			case PARALLEL:
			case PLI:
			case REGISTERS:
			case RESIDENT:
			case SECURED:
			case SPECIAL:
			case SQL:
			case STOP:
			case SUB:
			case YES:
			case APPLICATION:
			case CHANGED:
			case COMPATIBILITY:
			case COMPRESS:
			case COPY:
			case FREEPAGE:
			case GBPCACHE:
			case INCLUDE:
			case MAXVALUE:
			case MINVALUE:
			case PCTFREE:
			case REGENERATE:
			case MASK:
			case ENABLE:
			case PERMISSION:
			case ATOMIC:
			case SQLEXCEPTION:
			case MERGE:
			case MATCHED:
			case SQLSTATE:
			case MESSAGE_TEXT:
			case OVERRIDING:
			case PORTION:
			case DB2SQL:
			case DEBUG:
			case GENERAL:
			case MODE_:
			case REXX:
			case CACHE:
			case CYCLE:
			case INCREMENT:
			case RESTART:
			case DATACLAS:
			case MGMTCLAS:
			case REMOVE:
			case STORCLAS:
			case ACCESS:
			case ACTIVATE:
			case ALWAYS:
			case APPEND:
			case ARCHIVE:
			case BUSINESS:
			case CASCADE:
			case CHANGES:
			case CONTROL:
			case DEACTIVATE:
			case DEFERRED:
			case EACH:
			case ENFORCED:
			case EXTRA:
			case FOREIGN:
			case HIDDEN_:
			case HISTORY:
			case ID:
			case IDENTITY:
			case IMPLICITLY:
			case INITIALLY:
			case INLINE:
			case OPERATION:
			case ORGANIZE:
			case OVERLAPS:
			case PACKAGE_NAME:
			case PACKAGE_SCHEMA:
			case PACKAGE_VERSION:
			case PRIMARY:
			case RESET:
			case ROTATE:
			case START:
			case SYSIBM:
			case TRANSACTION:
			case XMLSCHEMA:
			case ELEMENT:
			case URL:
			case NAMESPACE:
			case LOCATION:
			case SYSXSR:
			case ALGORITHM:
			case FIXEDLENGTH:
			case HUFFMAN:
			case LOB:
			case LOG:
			case LOGGED:
			case MAXPARTITIONS:
			case MAXROWS:
			case MEMBER:
			case MOVE:
			case PAGE:
			case PAGENUM:
			case PENDING:
			case RELATIVE:
			case SEGSIZE:
			case TRACKMOD:
			case ADDRESS:
			case ATTRIBUTES:
			case AUTHENTICATION:
			case AUTHID:
			case CONTEXT:
			case JOBNAME:
			case OWNER:
			case PROFILE:
			case QUALIFIER:
			case SERVAUTH:
			case TRUSTED:
			case SECTION:
			case ACTIVE:
			case VERSION:
			case ALIAS:
			case WORK:
			case WORKFILE:
			case SYSDEFLT:
			case NULTERM:
			case STRUCTURE:
			case GENERIC:
			case TEMPORARY:
			case DEFER:
			case DEFINE:
			case EXCLUDE:
			case GENERATE:
			case KEYS:
			case XMLPATTERN:
			case ABS:
			case ABSVAL:
			case ACOS:
			case ADD_DAYS:
			case ADD_MONTHS:
			case ARRAY_DELETE:
			case ARRAY_FIRST:
			case ARRAY_LAST:
			case ARRAY_NEXT:
			case ARRAY_PRIOR:
			case ARRAY_TRIM:
			case ASCII:
			case ASCII_CHR:
			case ASCIISTR:
			case ASCII_STR:
			case ASIN:
			case ATAN:
			case ATAN2:
			case ATANH:
			case BIGINT:
			case BINARY:
			case BITAND:
			case BITANDNOT:
			case BITNOT:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BTRIM:
			case CARDINALITY:
			case CCSID_ENCODING:
			case CEIL:
			case CEILING:
			case CHAR9:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case CHR:
			case CLOB:
			case COALESCE:
			case COLLATION_KEY:
			case COMPARE_DECFLOAT:
			case COS:
			case COSH:
			case DATE:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFWEEK_ISO:
			case DAYOFYEAR:
			case DAYS_BETWEEN:
			case DBCLOB:
			case DEC:
			case DECFLOAT:
			case DECFLOAT_FORMAT:
			case DECFLOAT_SORTKEY:
			case DECIMAL:
			case DECODE:
			case DECRYPT_BINARY:
			case DECRYPT_BIT:
			case DECRYPT_CHAR:
			case DECRYPT_DATAKEY_BIGINT:
			case DECRYPT_DATAKEY_BIT:
			case DECRYPT_DATAKEY_CLOB:
			case DECRYPT_DATAKEY_DBCLOB:
			case DECRYPT_DATAKEY_DECIMAL:
			case DECRYPT_DATAKEY_INTEGER:
			case DECRYPT_DATAKEY_VARCHAR:
			case DECRYPT_DATAKEY_VARGRAPHIC:
			case DECRYPT_DB:
			case DEGREES:
			case DIFFERENCE:
			case DIGITS:
			case DOUBLE_PRECISION:
			case DSN_XMLVALIDATE:
			case EBCDIC_CHR:
			case EBCDIC_STR:
			case ENCRYPT_DATAKEY:
			case ENCRYPT_TDES:
			case EXP:
			case EXTRACT:
			case FLOAT:
			case FLOOR:
			case GENERATE_UNIQUE:
			case GENERATE_UNIQUE_BINARY:
			case GETHINT:
			case GETVARIABLE:
			case GRAPHIC:
			case GREATEST:
			case HASH:
			case HASH_CRC32:
			case HASH_MD5:
			case HASH_SHA1:
			case HASH_SHA256:
			case HEX:
			case IDENTITY_VAL_LOCAL:
			case IFNULL:
			case INSTR:
			case INT:
			case INTEGER:
			case JULIAN_DAY:
			case LAST_DAY:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LN:
			case LOCATE:
			case LOCATE_IN_STRING:
			case LOG10:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAX:
			case MAX_CARDINALITY:
			case MIDNIGHT_SECONDS:
			case MIN:
			case MINUTE:
			case MOD:
			case MONTHS_BETWEEN:
			case MQREAD:
			case MQREADCLOB:
			case MQRECEIVE:
			case MQRECEIVECLOB:
			case MQSEND:
			case MULTIPLY_ALT:
			case NEXT_DAY:
			case NEXT_MONTH:
			case NORMALIZE_DECFLOAT:
			case NORMALIZE_STRING:
			case NULLIF:
			case NVL:
			case OVERLAY:
			case PACK:
			case POSITION:
			case POSSTR:
			case POW:
			case POWER:
			case QUANTIZE:
			case QUARTER:
			case RADIANS:
			case RAISE_ERROR:
			case RAND:
			case RANDOM:
			case REAL:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REPLACE:
			case RID:
			case ROUND:
			case ROUND_TIMESTAMP:
			case ROWID:
			case RPAD:
			case RTRIM:
			case SCORE:
			case SIGN:
			case SIN:
			case SINH:
			case SMALLINT:
			case SOAPHTTPC:
			case SOAPHTTPNC:
			case SOAPHTTPNV:
			case SOAPHTTPV:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STRIP:
			case STRLEFT:
			case STRPOS:
			case STRRIGHT:
			case SUBSTR:
			case SUBSTRING:
			case TAN:
			case TANH:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIMESTAMP_FORMAT:
			case TIMESTAMP_ISO:
			case TIMESTAMP_TZ:
			case TO_CHAR:
			case TO_CLOB:
			case TO_DATE:
			case TO_NUMBER:
			case TOTALORDER:
			case TO_TIMESTAMP:
			case TRANSLATE:
			case TRIM:
			case TRIM_ARRAY:
			case TRUNC:
			case TRUNC_TIMESTAMP:
			case UCASE:
			case UNICODE:
			case UNICODE_STR:
			case UNISTR:
			case UPPER:
			case VARBINARY:
			case VARCHAR:
			case VARCHAR9:
			case VARCHAR_BIT_FORMAT:
			case VARCHAR_FORMAT:
			case VARGRAPHIC:
			case VERIFY_GROUP_FOR_USER:
			case VERIFY_ROLE_FOR_USER:
			case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
			case WEEK:
			case WEEK_ISO:
			case WRAP:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLCONCAT:
			case XMLDOCUMENT:
			case XMLELEMENT:
			case XMLFOREST:
			case XMLMODIFY:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLSERIALIZE:
			case XMLTEXT:
			case XMLXSROBJECTID:
			case XSLTRANSFORM:
			case CURRENT_ACCELERATOR:
			case CURRENT_APPLICATION_COMPATIBILITY:
			case CURRENT_APPLICATION_ENCODING_SCHEME:
			case CURRENT_CLIENT_ACCTNG:
			case CURRENT_CLIENT_APPLNAME:
			case CURRENT_CLIENT_CORR_TOKEN:
			case CURRENT_CLIENT_USERID:
			case CURRENT_CLIENT_WRKSTNNAME:
			case CURRENT_DATE:
			case CURRENT_DEBUG_MODE:
			case CURRENT_DECFLOAT_ROUNDING_MODE:
			case CURRENT_DEGREE:
			case CURRENT_EXPLAIN_MODE:
			case CURRENT_GET_ACCEL_ARCHIVE:
			case CURRENT_LOCALE_LC_CTYPE:
			case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
			case CURRENT_MEMBER:
			case CURRENT_OPTIMIZATION_HINT:
			case CURRENT_PACKAGE_PATH:
			case CURRENT_PACKAGESET:
			case CURRENT_PATH:
			case CURRENT_PRECISION:
			case CURRENT_QUERY_ACCELERATION:
			case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
			case CURRENT_REFRESH_AGE:
			case CURRENT_ROUTINE_VERSION:
			case CURRENT_RULES:
			case CURRENT_SCHEMA:
			case CURRENT_SERVER:
			case CURRENT_SQLID:
			case CURRENT_TEMPORAL_BUSINESS_TIME:
			case CURRENT_TEMPORAL_SYSTEM_TIME:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_TIME_ZONE:
			case ENCRYPTION_PASSWORD:
			case SESSION_TIME_ZONE:
			case SESSION_USER:
			case USER:
			case ADMIN_TASK_LIST:
			case ADMIN_TASK_OUTPUT:
			case ADMIN_TASK_STATUS:
			case BLOCKING_THREADS:
			case MQREADALL:
			case MQREADALLCLOB:
			case MQRECEIVEALL:
			case MQRECEIVEALLCLOB:
			case XMLTABLE:
			case SQLIDENTIFIER:
				{
				setState(6234);
				columnName();
				}
				break;
			case NONNUMERICLITERAL:
			case INTEGERLITERAL:
			case NUMERICLITERAL:
				{
				setState(6235);
				literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhereClauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(DB2zSQLParser.WHERE, 0); }
		public SearchConditionContext searchCondition() {
			return getRuleContext(SearchConditionContext.class,0);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whereClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterWhereClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitWhereClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitWhereClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhereClauseContext whereClause() throws RecognitionException {
		WhereClauseContext _localctx = new WhereClauseContext(_ctx, getState());
		enterRule(_localctx, 832, RULE_whereClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6238);
			match(WHERE);
			setState(6239);
			searchCondition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByClauseContext extends ParserRuleContext {
		public TerminalNode GROUP() { return getToken(DB2zSQLParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public GroupingExpressionContext groupingExpression() {
			return getRuleContext(GroupingExpressionContext.class,0);
		}
		public GroupingSetsContext groupingSets() {
			return getRuleContext(GroupingSetsContext.class,0);
		}
		public SuperGroupsContext superGroups() {
			return getRuleContext(SuperGroupsContext.class,0);
		}
		public GroupByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGroupByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGroupByClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGroupByClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByClauseContext groupByClause() throws RecognitionException {
		GroupByClauseContext _localctx = new GroupByClauseContext(_ctx, getState());
		enterRule(_localctx, 834, RULE_groupByClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6241);
			match(GROUP);
			setState(6242);
			match(BY);
			setState(6246);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,727,_ctx) ) {
			case 1:
				{
				setState(6243);
				groupingExpression();
				}
				break;
			case 2:
				{
				setState(6244);
				groupingSets();
				}
				break;
			case 3:
				{
				setState(6245);
				superGroups();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HavingClauseContext extends ParserRuleContext {
		public TerminalNode HAVING() { return getToken(DB2zSQLParser.HAVING, 0); }
		public SearchConditionContext searchCondition() {
			return getRuleContext(SearchConditionContext.class,0);
		}
		public HavingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_havingClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterHavingClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitHavingClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitHavingClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HavingClauseContext havingClause() throws RecognitionException {
		HavingClauseContext _localctx = new HavingClauseContext(_ctx, getState());
		enterRule(_localctx, 836, RULE_havingClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6248);
			match(HAVING);
			setState(6249);
			searchCondition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupingExpressionContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public GroupingExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupingExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGroupingExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGroupingExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGroupingExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupingExpressionContext groupingExpression() throws RecognitionException {
		GroupingExpressionContext _localctx = new GroupingExpressionContext(_ctx, getState());
		enterRule(_localctx, 838, RULE_groupingExpression);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6251);
			expression();
			setState(6256);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,728,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6252);
					match(COMMA);
					setState(6253);
					expression();
					}
					} 
				}
				setState(6258);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,728,_ctx);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupingSetsContext extends ParserRuleContext {
		public TerminalNode GROUPING() { return getToken(DB2zSQLParser.GROUPING, 0); }
		public TerminalNode SETS() { return getToken(DB2zSQLParser.SETS, 0); }
		public GroupingSetsGroupContext groupingSetsGroup() {
			return getRuleContext(GroupingSetsGroupContext.class,0);
		}
		public GroupingSetsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupingSets; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGroupingSets(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGroupingSets(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGroupingSets(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupingSetsContext groupingSets() throws RecognitionException {
		GroupingSetsContext _localctx = new GroupingSetsContext(_ctx, getState());
		enterRule(_localctx, 840, RULE_groupingSets);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6259);
			match(GROUPING);
			setState(6260);
			match(SETS);
			setState(6261);
			groupingSetsGroup();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupingSetsGroupContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<GroupingSetsGroupContext> groupingSetsGroup() {
			return getRuleContexts(GroupingSetsGroupContext.class);
		}
		public GroupingSetsGroupContext groupingSetsGroup(int i) {
			return getRuleContext(GroupingSetsGroupContext.class,i);
		}
		public List<GroupingExpressionContext> groupingExpression() {
			return getRuleContexts(GroupingExpressionContext.class);
		}
		public GroupingExpressionContext groupingExpression(int i) {
			return getRuleContext(GroupingExpressionContext.class,i);
		}
		public List<SuperGroupsContext> superGroups() {
			return getRuleContexts(SuperGroupsContext.class);
		}
		public SuperGroupsContext superGroups(int i) {
			return getRuleContext(SuperGroupsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public GroupingSetsGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupingSetsGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGroupingSetsGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGroupingSetsGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGroupingSetsGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupingSetsGroupContext groupingSetsGroup() throws RecognitionException {
		GroupingSetsGroupContext _localctx = new GroupingSetsGroupContext(_ctx, getState());
		enterRule(_localctx, 842, RULE_groupingSetsGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6263);
			match(LPAREN);
			setState(6267);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,729,_ctx) ) {
			case 1:
				{
				setState(6264);
				groupingSetsGroup();
				}
				break;
			case 2:
				{
				setState(6265);
				groupingExpression();
				}
				break;
			case 3:
				{
				setState(6266);
				superGroups();
				}
				break;
			}
			setState(6277);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6269);
				match(COMMA);
				setState(6273);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,730,_ctx) ) {
				case 1:
					{
					setState(6270);
					groupingSetsGroup();
					}
					break;
				case 2:
					{
					setState(6271);
					groupingExpression();
					}
					break;
				case 3:
					{
					setState(6272);
					superGroups();
					}
					break;
				}
				}
				}
				setState(6279);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6280);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SuperGroupsContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public GroupingExpressionContext groupingExpression() {
			return getRuleContext(GroupingExpressionContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode ROLLUP() { return getToken(DB2zSQLParser.ROLLUP, 0); }
		public TerminalNode CUBE() { return getToken(DB2zSQLParser.CUBE, 0); }
		public SuperGroupsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_superGroups; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSuperGroups(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSuperGroups(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSuperGroups(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SuperGroupsContext superGroups() throws RecognitionException {
		SuperGroupsContext _localctx = new SuperGroupsContext(_ctx, getState());
		enterRule(_localctx, 844, RULE_superGroups);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6289);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CUBE:
			case ROLLUP:
				{
				{
				setState(6282);
				_la = _input.LA(1);
				if ( !(_la==CUBE || _la==ROLLUP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6283);
				match(LPAREN);
				setState(6284);
				groupingExpression();
				setState(6285);
				match(RPAREN);
				}
				}
				break;
			case LPAREN:
				{
				{
				setState(6287);
				match(LPAREN);
				setState(6288);
				match(RPAREN);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectColumnsContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public TerminalNode SPLAT() { return getToken(DB2zSQLParser.SPLAT, 0); }
		public UnpackedRowContext unpackedRow() {
			return getRuleContext(UnpackedRowContext.class,0);
		}
		public List<OperatorContext> operator() {
			return getRuleContexts(OperatorContext.class);
		}
		public OperatorContext operator(int i) {
			return getRuleContext(OperatorContext.class,i);
		}
		public NewColumnNameContext newColumnName() {
			return getRuleContext(NewColumnNameContext.class,0);
		}
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public SelectColumnsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectColumns; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSelectColumns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSelectColumns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSelectColumns(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectColumnsContext selectColumns() throws RecognitionException {
		SelectColumnsContext _localctx = new SelectColumnsContext(_ctx, getState());
		enterRule(_localctx, 846, RULE_selectColumns);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6311);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,736,_ctx) ) {
			case 1:
				{
				{
				setState(6291);
				expression();
				setState(6297);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,733,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(6292);
						operator();
						setState(6293);
						expression();
						}
						} 
					}
					setState(6299);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,733,_ctx);
				}
				setState(6304);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,735,_ctx) ) {
				case 1:
					{
					setState(6301);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,734,_ctx) ) {
					case 1:
						{
						setState(6300);
						match(AS);
						}
						break;
					}
					setState(6303);
					newColumnName();
					}
					break;
				}
				}
				}
				break;
			case 2:
				{
				{
				setState(6306);
				tableName();
				setState(6307);
				match(DOT);
				setState(6308);
				match(SPLAT);
				}
				}
				break;
			case 3:
				{
				{
				setState(6310);
				unpackedRow();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnpackedRowContext extends ParserRuleContext {
		public TerminalNode UNPACK() { return getToken(DB2zSQLParser.UNPACK, 0); }
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public TerminalNode SPLAT() { return getToken(DB2zSQLParser.SPLAT, 0); }
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public List<DataTypeContext> dataType() {
			return getRuleContexts(DataTypeContext.class);
		}
		public DataTypeContext dataType(int i) {
			return getRuleContext(DataTypeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public UnpackedRowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpackedRow; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterUnpackedRow(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitUnpackedRow(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitUnpackedRow(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnpackedRowContext unpackedRow() throws RecognitionException {
		UnpackedRowContext _localctx = new UnpackedRowContext(_ctx, getState());
		enterRule(_localctx, 848, RULE_unpackedRow);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6313);
			match(UNPACK);
			setState(6314);
			match(LPAREN);
			setState(6315);
			expression();
			setState(6316);
			match(RPAREN);
			setState(6317);
			match(DOT);
			setState(6318);
			match(SPLAT);
			setState(6319);
			match(AS);
			setState(6320);
			match(LPAREN);
			setState(6321);
			columnName();
			setState(6322);
			dataType();
			setState(6329);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6323);
				match(COMMA);
				setState(6324);
				columnName();
				setState(6325);
				dataType();
				}
				}
				setState(6331);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6332);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectClauseContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(DB2zSQLParser.SELECT, 0); }
		public TerminalNode SPLAT() { return getToken(DB2zSQLParser.SPLAT, 0); }
		public TerminalNode ALL() { return getToken(DB2zSQLParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(DB2zSQLParser.DISTINCT, 0); }
		public List<SelectColumnsContext> selectColumns() {
			return getRuleContexts(SelectColumnsContext.class);
		}
		public SelectColumnsContext selectColumns(int i) {
			return getRuleContext(SelectColumnsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public SelectClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSelectClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSelectClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSelectClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectClauseContext selectClause() throws RecognitionException {
		SelectClauseContext _localctx = new SelectClauseContext(_ctx, getState());
		enterRule(_localctx, 850, RULE_selectClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6334);
			match(SELECT);
			setState(6336);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,738,_ctx) ) {
			case 1:
				{
				setState(6335);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(6347);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SPLAT:
				{
				setState(6338);
				match(SPLAT);
				}
				break;
			case LPAREN:
			case COLON:
			case NONNUMERICLITERAL:
			case INTEGERLITERAL:
			case NUMERICLITERAL:
			case ADD:
			case AFTER:
			case ALL:
			case ALLOCATE:
			case ALLOW:
			case ALTER:
			case ALTERAND:
			case ANY:
			case ARRAY:
			case ARRAY_EXISTS:
			case AS:
			case ASENSITIVE:
			case ASSOCIATE:
			case ASUTIME:
			case AT:
			case AUDIT:
			case AUX:
			case AUXILIARY:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BUFFERPOOL:
			case BY:
			case CALL:
			case CAPTURE:
			case CASCADED:
			case CASE:
			case CAST:
			case CCSID:
			case CHAR:
			case CHARACTER:
			case CHECK:
			case CLONE:
			case CLOSE:
			case CLUSTER:
			case COLLECTION:
			case COLLID:
			case COLUMN:
			case COMMENT:
			case COMMIT:
			case CONCAT:
			case CONDITION:
			case CONNECT:
			case CONNECTION:
			case CONSTRAINT:
			case CONTAINS:
			case CONTENT:
			case CONTINUE:
			case CREATE:
			case CUBE:
			case CURRENT:
			case CURRENT_LC_CTYPE:
			case CURRVAL:
			case CURSOR:
			case DATA:
			case DATABASE:
			case DAY:
			case DAYS:
			case DBINFO:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DISABLE:
			case DISALLOW:
			case DISTINCT:
			case DO:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSSIZE:
			case DYNAMIC:
			case EDITPROC:
			case ELSE:
			case ELSEIF:
			case ENCODING:
			case ENCRYPTION:
			case END:
			case END_EXEC:
			case ENDING:
			case ERASE:
			case ESCAPE:
			case EXCEPT:
			case EXCEPTION:
			case EXEC_SQL:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case FENCED:
			case FETCH:
			case FIELDPROC:
			case FINAL:
			case FIRST:
			case FOR:
			case FREE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANT:
			case GROUP:
			case HANDLER:
			case HAVING:
			case HOLD:
			case HOUR:
			case HOURS:
			case IF:
			case IMMEDIATE:
			case IN:
			case INCLUSIVE:
			case INDEX:
			case INDEXBP:
			case INHERIT:
			case INNER:
			case INOUT:
			case INSENSITIVE:
			case INSERT:
			case INTERSECT:
			case INTO:
			case IS:
			case ISOBID:
			case ITERATE:
			case JAR:
			case JOIN:
			case KEEP:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LAST:
			case LC_CTYPE:
			case LEAVE:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOCALE:
			case LOCATOR:
			case LOCATORS:
			case LOCK:
			case LOCKMAX:
			case LOCKSIZE:
			case LONG:
			case LOOP:
			case MAINTAINED:
			case MATERIALIZED:
			case MICROSECOND:
			case MICROSECONDS:
			case MODIFIES:
			case MONTH:
			case MONTHS:
			case NEXT:
			case NEXTVAL:
			case NO:
			case NONE:
			case NOT:
			case NULL:
			case NULLS:
			case NUMPARTS:
			case OBID:
			case OF:
			case OFFSET:
			case OLD:
			case ON:
			case OPEN:
			case OPTIMIZATION:
			case OPTIMIZE:
			case OR:
			case ORDER:
			case ORGANIZATION:
			case OUT:
			case OUTER:
			case PACKAGE:
			case PADDED:
			case PARAMETER:
			case PART:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONING:
			case PATH:
			case PERIOD:
			case PIECESIZE:
			case PLAN:
			case PRECISION:
			case PREPARE:
			case PREVVAL:
			case PRIOR:
			case PRIQTY:
			case PRIVILEGES:
			case PROCEDURE:
			case PROGRAM:
			case PSID:
			case PUBLIC:
			case QUERY:
			case QUERYNO:
			case READS:
			case REFERENCES:
			case REFRESH:
			case RELEASE:
			case RENAME:
			case REPEAT:
			case RESIGNAL:
			case RESTRICT:
			case RESULT:
			case RESULT_SET_LOCATOR:
			case RETURN:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUND_CEILING:
			case ROUND_DOWN:
			case ROUND_FLOOR:
			case ROUND_HALF_DOWN:
			case ROUND_HALF_EVEN:
			case ROUND_HALF_UP:
			case ROUND_UP:
			case ROW:
			case ROWSET:
			case RUN:
			case SAVEPOINT:
			case SCHEMA:
			case SCRATCHPAD:
			case SECOND:
			case SECONDS:
			case SECQTY:
			case SECURITY:
			case SELECT:
			case SENSITIVE:
			case SEQUENCE:
			case SET:
			case SIGNAL:
			case SIMPLE:
			case SOME:
			case SOURCE:
			case SPECIFIC:
			case STANDARD:
			case STATEMENT:
			case STATIC:
			case STAY:
			case STOGROUP:
			case STORES:
			case STYLE:
			case SUMMARY:
			case SYNONYM:
			case SYSDATE:
			case SYSTEM:
			case SYSTIMESTAMP:
			case TABLE:
			case TABLESPACE:
			case THEN:
			case TO:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNDO:
			case UNION:
			case UNIQUE:
			case UNTIL:
			case UPDATE:
			case USING:
			case VALIDPROC:
			case VALUE:
			case VALUES:
			case VARIABLE:
			case VARIANT:
			case VCAT:
			case VERSIONING:
			case VIEW:
			case VOLATILE:
			case VOLUMES:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WLM:
			case XMLCAST:
			case XMLEXISTS:
			case XMLNAMESPACES:
			case YEAR:
			case YEARS:
			case ZONE:
			case AND:
			case ARRAY_AGG:
			case ASC:
			case AVG:
			case BIT:
			case CHANGE:
			case CODEUNITS16:
			case CODEUNITS32:
			case CORR:
			case CORRELATION:
			case COUNT:
			case COUNT_BIG:
			case COVAR:
			case COVARIANCE:
			case COVARIANCE_SAMP:
			case COVAR_POP:
			case COVAR_SAMP:
			case CS:
			case CUME_DIST:
			case DENSE_RANK:
			case DESC:
			case EBCDIC:
			case EXCLUSIVE:
			case FIRST_VALUE:
			case FOLLOWING:
			case GROUPING:
			case IGNORE:
			case INDICATOR:
			case INPUT:
			case ISNULL:
			case LAG:
			case LARGE:
			case LAST_VALUE:
			case LEAD:
			case LISTAGG:
			case LOCKED:
			case LOCKS:
			case MEDIAN:
			case MINUTES:
			case MIXED:
			case NOTNULL:
			case NTH_VALUE:
			case NTILE:
			case NUMERIC:
			case OBJECT:
			case OCTETS:
			case ONLY:
			case OVER:
			case PASSING:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PERCENT_RANK:
			case PRECEDING:
			case PREVIOUS:
			case RANGE:
			case RANK:
			case RATIO_TO_REPORT:
			case READ:
			case REF:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_ICPT:
			case REGR_INTERCEPT:
			case REGR_R2:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case RESPECT:
			case ROW_NUMBER:
			case ROWS:
			case RR:
			case RS:
			case SBCS:
			case SELECTIVITY:
			case SETS:
			case SHARE:
			case SKIP_:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case TOKEN:
			case UNBOUNDED:
			case UNPACK:
			case UR:
			case USE:
			case VAR:
			case VARIANCE:
			case VARIANCE_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARYING:
			case WITHOUT:
			case XML:
			case XMLAGG:
			case COLUMNS:
			case SQLID:
			case ORDINALITY:
			case SYSTEM_TIME:
			case BUSINESS_TIME:
			case MULTIPLIER:
			case UNNEST:
			case CROSS:
			case CALLER:
			case CLIENT:
			case POSITIONING:
			case SCROLL:
			case ACTION:
			case ASSEMBLE:
			case C_:
			case CALLED:
			case COBOL:
			case DB2:
			case DEFINER:
			case DISPATCH:
			case ENVIRONMENT:
			case FAILURE:
			case FAILURES:
			case JAVA:
			case MAIN:
			case NAME:
			case OPTIONS:
			case PARALLEL:
			case PLI:
			case REGISTERS:
			case RESIDENT:
			case SECURED:
			case SPECIAL:
			case SQL:
			case STOP:
			case SUB:
			case YES:
			case APPLICATION:
			case CHANGED:
			case COMPATIBILITY:
			case COMPRESS:
			case COPY:
			case FREEPAGE:
			case GBPCACHE:
			case INCLUDE:
			case MAXVALUE:
			case MINVALUE:
			case PCTFREE:
			case REGENERATE:
			case MASK:
			case ENABLE:
			case PERMISSION:
			case ATOMIC:
			case SQLEXCEPTION:
			case MERGE:
			case MATCHED:
			case SQLSTATE:
			case MESSAGE_TEXT:
			case OVERRIDING:
			case PORTION:
			case DB2SQL:
			case DEBUG:
			case GENERAL:
			case MODE_:
			case REXX:
			case CACHE:
			case CYCLE:
			case INCREMENT:
			case RESTART:
			case DATACLAS:
			case MGMTCLAS:
			case REMOVE:
			case STORCLAS:
			case ACCESS:
			case ACTIVATE:
			case ALWAYS:
			case APPEND:
			case ARCHIVE:
			case BUSINESS:
			case CASCADE:
			case CHANGES:
			case CONTROL:
			case DEACTIVATE:
			case DEFERRED:
			case EACH:
			case ENFORCED:
			case EXTRA:
			case FOREIGN:
			case HIDDEN_:
			case HISTORY:
			case ID:
			case IDENTITY:
			case IMPLICITLY:
			case INITIALLY:
			case INLINE:
			case OPERATION:
			case ORGANIZE:
			case OVERLAPS:
			case PACKAGE_NAME:
			case PACKAGE_SCHEMA:
			case PACKAGE_VERSION:
			case PRIMARY:
			case RESET:
			case ROTATE:
			case START:
			case SYSIBM:
			case TRANSACTION:
			case XMLSCHEMA:
			case ELEMENT:
			case URL:
			case NAMESPACE:
			case LOCATION:
			case SYSXSR:
			case ALGORITHM:
			case FIXEDLENGTH:
			case HUFFMAN:
			case LOB:
			case LOG:
			case LOGGED:
			case MAXPARTITIONS:
			case MAXROWS:
			case MEMBER:
			case MOVE:
			case PAGE:
			case PAGENUM:
			case PENDING:
			case RELATIVE:
			case SEGSIZE:
			case TRACKMOD:
			case ADDRESS:
			case ATTRIBUTES:
			case AUTHENTICATION:
			case AUTHID:
			case CONTEXT:
			case JOBNAME:
			case OWNER:
			case PROFILE:
			case QUALIFIER:
			case SERVAUTH:
			case TRUSTED:
			case SECTION:
			case ACTIVE:
			case VERSION:
			case ALIAS:
			case WORK:
			case WORKFILE:
			case SYSDEFLT:
			case NULTERM:
			case STRUCTURE:
			case GENERIC:
			case TEMPORARY:
			case DEFER:
			case DEFINE:
			case EXCLUDE:
			case GENERATE:
			case KEYS:
			case XMLPATTERN:
			case ABS:
			case ABSVAL:
			case ACOS:
			case ADD_DAYS:
			case ADD_MONTHS:
			case ARRAY_DELETE:
			case ARRAY_FIRST:
			case ARRAY_LAST:
			case ARRAY_NEXT:
			case ARRAY_PRIOR:
			case ARRAY_TRIM:
			case ASCII:
			case ASCII_CHR:
			case ASCIISTR:
			case ASCII_STR:
			case ASIN:
			case ATAN:
			case ATAN2:
			case ATANH:
			case BIGINT:
			case BINARY:
			case BITAND:
			case BITANDNOT:
			case BITNOT:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BTRIM:
			case CARDINALITY:
			case CCSID_ENCODING:
			case CEIL:
			case CEILING:
			case CHAR9:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case CHR:
			case CLOB:
			case COALESCE:
			case COLLATION_KEY:
			case COMPARE_DECFLOAT:
			case COS:
			case COSH:
			case DATE:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFWEEK_ISO:
			case DAYOFYEAR:
			case DAYS_BETWEEN:
			case DBCLOB:
			case DEC:
			case DECFLOAT:
			case DECFLOAT_FORMAT:
			case DECFLOAT_SORTKEY:
			case DECIMAL:
			case DECODE:
			case DECRYPT_BINARY:
			case DECRYPT_BIT:
			case DECRYPT_CHAR:
			case DECRYPT_DATAKEY_BIGINT:
			case DECRYPT_DATAKEY_BIT:
			case DECRYPT_DATAKEY_CLOB:
			case DECRYPT_DATAKEY_DBCLOB:
			case DECRYPT_DATAKEY_DECIMAL:
			case DECRYPT_DATAKEY_INTEGER:
			case DECRYPT_DATAKEY_VARCHAR:
			case DECRYPT_DATAKEY_VARGRAPHIC:
			case DECRYPT_DB:
			case DEGREES:
			case DIFFERENCE:
			case DIGITS:
			case DOUBLE_PRECISION:
			case DSN_XMLVALIDATE:
			case EBCDIC_CHR:
			case EBCDIC_STR:
			case ENCRYPT_DATAKEY:
			case ENCRYPT_TDES:
			case EXP:
			case EXTRACT:
			case FLOAT:
			case FLOOR:
			case GENERATE_UNIQUE:
			case GENERATE_UNIQUE_BINARY:
			case GETHINT:
			case GETVARIABLE:
			case GRAPHIC:
			case GREATEST:
			case HASH:
			case HASH_CRC32:
			case HASH_MD5:
			case HASH_SHA1:
			case HASH_SHA256:
			case HEX:
			case IDENTITY_VAL_LOCAL:
			case IFNULL:
			case INSTR:
			case INT:
			case INTEGER:
			case JULIAN_DAY:
			case LAST_DAY:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LN:
			case LOCATE:
			case LOCATE_IN_STRING:
			case LOG10:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAX:
			case MAX_CARDINALITY:
			case MIDNIGHT_SECONDS:
			case MIN:
			case MINUTE:
			case MOD:
			case MONTHS_BETWEEN:
			case MQREAD:
			case MQREADCLOB:
			case MQRECEIVE:
			case MQRECEIVECLOB:
			case MQSEND:
			case MULTIPLY_ALT:
			case NEXT_DAY:
			case NEXT_MONTH:
			case NORMALIZE_DECFLOAT:
			case NORMALIZE_STRING:
			case NULLIF:
			case NVL:
			case OVERLAY:
			case PACK:
			case POSITION:
			case POSSTR:
			case POW:
			case POWER:
			case QUANTIZE:
			case QUARTER:
			case RADIANS:
			case RAISE_ERROR:
			case RAND:
			case RANDOM:
			case REAL:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REPLACE:
			case RID:
			case ROUND:
			case ROUND_TIMESTAMP:
			case ROWID:
			case RPAD:
			case RTRIM:
			case SCORE:
			case SIGN:
			case SIN:
			case SINH:
			case SMALLINT:
			case SOAPHTTPC:
			case SOAPHTTPNC:
			case SOAPHTTPNV:
			case SOAPHTTPV:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STRIP:
			case STRLEFT:
			case STRPOS:
			case STRRIGHT:
			case SUBSTR:
			case SUBSTRING:
			case TAN:
			case TANH:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIMESTAMP_FORMAT:
			case TIMESTAMP_ISO:
			case TIMESTAMP_TZ:
			case TO_CHAR:
			case TO_CLOB:
			case TO_DATE:
			case TO_NUMBER:
			case TOTALORDER:
			case TO_TIMESTAMP:
			case TRANSLATE:
			case TRIM:
			case TRIM_ARRAY:
			case TRUNC:
			case TRUNC_TIMESTAMP:
			case UCASE:
			case UNICODE:
			case UNICODE_STR:
			case UNISTR:
			case UPPER:
			case VARBINARY:
			case VARCHAR:
			case VARCHAR9:
			case VARCHAR_BIT_FORMAT:
			case VARCHAR_FORMAT:
			case VARGRAPHIC:
			case VERIFY_GROUP_FOR_USER:
			case VERIFY_ROLE_FOR_USER:
			case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
			case WEEK:
			case WEEK_ISO:
			case WRAP:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLCONCAT:
			case XMLDOCUMENT:
			case XMLELEMENT:
			case XMLFOREST:
			case XMLMODIFY:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLSERIALIZE:
			case XMLTEXT:
			case XMLXSROBJECTID:
			case XSLTRANSFORM:
			case CURRENT_ACCELERATOR:
			case CURRENT_APPLICATION_COMPATIBILITY:
			case CURRENT_APPLICATION_ENCODING_SCHEME:
			case CURRENT_CLIENT_ACCTNG:
			case CURRENT_CLIENT_APPLNAME:
			case CURRENT_CLIENT_CORR_TOKEN:
			case CURRENT_CLIENT_USERID:
			case CURRENT_CLIENT_WRKSTNNAME:
			case CURRENT_DATE:
			case CURRENT_DEBUG_MODE:
			case CURRENT_DECFLOAT_ROUNDING_MODE:
			case CURRENT_DEGREE:
			case CURRENT_EXPLAIN_MODE:
			case CURRENT_GET_ACCEL_ARCHIVE:
			case CURRENT_LOCALE_LC_CTYPE:
			case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
			case CURRENT_MEMBER:
			case CURRENT_OPTIMIZATION_HINT:
			case CURRENT_PACKAGE_PATH:
			case CURRENT_PACKAGESET:
			case CURRENT_PATH:
			case CURRENT_PRECISION:
			case CURRENT_QUERY_ACCELERATION:
			case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
			case CURRENT_REFRESH_AGE:
			case CURRENT_ROUTINE_VERSION:
			case CURRENT_RULES:
			case CURRENT_SCHEMA:
			case CURRENT_SERVER:
			case CURRENT_SQLID:
			case CURRENT_TEMPORAL_BUSINESS_TIME:
			case CURRENT_TEMPORAL_SYSTEM_TIME:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_TIME_ZONE:
			case ENCRYPTION_PASSWORD:
			case SESSION_TIME_ZONE:
			case SESSION_USER:
			case USER:
			case ADMIN_TASK_LIST:
			case ADMIN_TASK_OUTPUT:
			case ADMIN_TASK_STATUS:
			case BLOCKING_THREADS:
			case MQREADALL:
			case MQREADALLCLOB:
			case MQRECEIVEALL:
			case MQRECEIVEALLCLOB:
			case XMLTABLE:
			case SQLIDENTIFIER:
				{
				{
				setState(6339);
				selectColumns();
				setState(6344);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6340);
					match(COMMA);
					setState(6341);
					selectColumns();
					}
					}
					setState(6346);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubSelectContext extends ParserRuleContext {
		public SelectClauseContext selectClause() {
			return getRuleContext(SelectClauseContext.class,0);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public GroupByClauseContext groupByClause() {
			return getRuleContext(GroupByClauseContext.class,0);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public OffsetClauseContext offsetClause() {
			return getRuleContext(OffsetClauseContext.class,0);
		}
		public FetchClauseContext fetchClause() {
			return getRuleContext(FetchClauseContext.class,0);
		}
		public SubSelectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subSelect; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSubSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSubSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSubSelect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubSelectContext subSelect() throws RecognitionException {
		SubSelectContext _localctx = new SubSelectContext(_ctx, getState());
		enterRule(_localctx, 852, RULE_subSelect);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6349);
			selectClause();
			setState(6350);
			fromClause();
			setState(6352);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(6351);
				whereClause();
				}
			}

			setState(6355);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GROUP) {
				{
				setState(6354);
				groupByClause();
				}
			}

			setState(6358);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HAVING) {
				{
				setState(6357);
				havingClause();
				}
			}

			setState(6361);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,744,_ctx) ) {
			case 1:
				{
				setState(6360);
				orderByClause();
				}
				break;
			}
			setState(6364);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,745,_ctx) ) {
			case 1:
				{
				setState(6363);
				offsetClause();
				}
				break;
			}
			setState(6367);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,746,_ctx) ) {
			case 1:
				{
				setState(6366);
				fetchClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectIntoStatementContext extends ParserRuleContext {
		public SelectClauseContext selectClause() {
			return getRuleContext(SelectClauseContext.class,0);
		}
		public IntoClauseContext intoClause() {
			return getRuleContext(IntoClauseContext.class,0);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public List<CommonTableExpressionContext> commonTableExpression() {
			return getRuleContexts(CommonTableExpressionContext.class);
		}
		public CommonTableExpressionContext commonTableExpression(int i) {
			return getRuleContext(CommonTableExpressionContext.class,i);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public GroupByClauseContext groupByClause() {
			return getRuleContext(GroupByClauseContext.class,0);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public OffsetClauseContext offsetClause() {
			return getRuleContext(OffsetClauseContext.class,0);
		}
		public FetchClauseContext fetchClause() {
			return getRuleContext(FetchClauseContext.class,0);
		}
		public IsolationClauseContext isolationClause() {
			return getRuleContext(IsolationClauseContext.class,0);
		}
		public SkipLockedDataClauseContext skipLockedDataClause() {
			return getRuleContext(SkipLockedDataClauseContext.class,0);
		}
		public QuerynoClauseContext querynoClause() {
			return getRuleContext(QuerynoClauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public SelectIntoStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectIntoStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSelectIntoStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSelectIntoStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSelectIntoStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectIntoStatementContext selectIntoStatement() throws RecognitionException {
		SelectIntoStatementContext _localctx = new SelectIntoStatementContext(_ctx, getState());
		enterRule(_localctx, 854, RULE_selectIntoStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6378);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6369);
				match(WITH);
				setState(6370);
				commonTableExpression();
				setState(6375);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6371);
					match(COMMA);
					setState(6372);
					commonTableExpression();
					}
					}
					setState(6377);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(6380);
			selectClause();
			setState(6381);
			intoClause();
			setState(6382);
			fromClause();
			setState(6384);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(6383);
				whereClause();
				}
			}

			setState(6387);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GROUP) {
				{
				setState(6386);
				groupByClause();
				}
			}

			setState(6390);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HAVING) {
				{
				setState(6389);
				havingClause();
				}
			}

			setState(6393);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(6392);
				orderByClause();
				}
			}

			setState(6396);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OFFSET) {
				{
				setState(6395);
				offsetClause();
				}
			}

			setState(6399);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FETCH) {
				{
				setState(6398);
				fetchClause();
				}
			}

			setState(6403);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				{
				setState(6401);
				isolationClause();
				}
				break;
			case SKIP_:
				{
				setState(6402);
				skipLockedDataClause();
				}
				break;
			case EOF:
			case SEMICOLON:
			case END_EXEC:
			case QUERYNO:
				break;
			default:
				break;
			}
			setState(6406);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==QUERYNO) {
				{
				setState(6405);
				querynoClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectStatementContext extends ParserRuleContext {
		public FullSelectContext fullSelect() {
			return getRuleContext(FullSelectContext.class,0);
		}
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public List<CommonTableExpressionContext> commonTableExpression() {
			return getRuleContexts(CommonTableExpressionContext.class);
		}
		public CommonTableExpressionContext commonTableExpression(int i) {
			return getRuleContext(CommonTableExpressionContext.class,i);
		}
		public List<UpdateClauseContext> updateClause() {
			return getRuleContexts(UpdateClauseContext.class);
		}
		public UpdateClauseContext updateClause(int i) {
			return getRuleContext(UpdateClauseContext.class,i);
		}
		public List<ReadOnlyClauseContext> readOnlyClause() {
			return getRuleContexts(ReadOnlyClauseContext.class);
		}
		public ReadOnlyClauseContext readOnlyClause(int i) {
			return getRuleContext(ReadOnlyClauseContext.class,i);
		}
		public List<OptimizeClauseContext> optimizeClause() {
			return getRuleContexts(OptimizeClauseContext.class);
		}
		public OptimizeClauseContext optimizeClause(int i) {
			return getRuleContext(OptimizeClauseContext.class,i);
		}
		public List<IsolationClauseContext> isolationClause() {
			return getRuleContexts(IsolationClauseContext.class);
		}
		public IsolationClauseContext isolationClause(int i) {
			return getRuleContext(IsolationClauseContext.class,i);
		}
		public List<SkipLockedDataClauseContext> skipLockedDataClause() {
			return getRuleContexts(SkipLockedDataClauseContext.class);
		}
		public SkipLockedDataClauseContext skipLockedDataClause(int i) {
			return getRuleContext(SkipLockedDataClauseContext.class,i);
		}
		public List<QuerynoClauseContext> querynoClause() {
			return getRuleContexts(QuerynoClauseContext.class);
		}
		public QuerynoClauseContext querynoClause(int i) {
			return getRuleContext(QuerynoClauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public SelectStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSelectStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSelectStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSelectStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectStatementContext selectStatement() throws RecognitionException {
		SelectStatementContext _localctx = new SelectStatementContext(_ctx, getState());
		enterRule(_localctx, 856, RULE_selectStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6417);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6408);
				match(WITH);
				setState(6409);
				commonTableExpression();
				setState(6414);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6410);
					match(COMMA);
					setState(6411);
					commonTableExpression();
					}
					}
					setState(6416);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(6419);
			fullSelect();
			setState(6428);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FOR || _la==OPTIMIZE || _la==QUERYNO || _la==WITH || _la==SKIP_) {
				{
				setState(6426);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,759,_ctx) ) {
				case 1:
					{
					setState(6420);
					updateClause();
					}
					break;
				case 2:
					{
					setState(6421);
					readOnlyClause();
					}
					break;
				case 3:
					{
					setState(6422);
					optimizeClause();
					}
					break;
				case 4:
					{
					setState(6423);
					isolationClause();
					}
					break;
				case 5:
					{
					setState(6424);
					skipLockedDataClause();
					}
					break;
				case 6:
					{
					setState(6425);
					querynoClause();
					}
					break;
				}
				}
				setState(6430);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommonTableExpressionContext extends ParserRuleContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public FullSelectContext fullSelect() {
			return getRuleContext(FullSelectContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public CommonTableExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commonTableExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCommonTableExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCommonTableExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCommonTableExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommonTableExpressionContext commonTableExpression() throws RecognitionException {
		CommonTableExpressionContext _localctx = new CommonTableExpressionContext(_ctx, getState());
		enterRule(_localctx, 858, RULE_commonTableExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6431);
			tableName();
			setState(6432);
			match(LPAREN);
			setState(6433);
			columnName();
			setState(6438);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6434);
				match(COMMA);
				setState(6435);
				columnName();
				}
				}
				setState(6440);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6441);
			match(RPAREN);
			setState(6442);
			match(AS);
			setState(6443);
			match(LPAREN);
			setState(6444);
			fullSelect();
			setState(6445);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateClauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(DB2zSQLParser.UPDATE, 0); }
		public TerminalNode OF() { return getToken(DB2zSQLParser.OF, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public UpdateClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterUpdateClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitUpdateClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitUpdateClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateClauseContext updateClause() throws RecognitionException {
		UpdateClauseContext _localctx = new UpdateClauseContext(_ctx, getState());
		enterRule(_localctx, 860, RULE_updateClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6447);
			match(FOR);
			setState(6448);
			match(UPDATE);
			setState(6458);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OF) {
				{
				setState(6449);
				match(OF);
				setState(6450);
				columnName();
				setState(6455);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6451);
					match(COMMA);
					setState(6452);
					columnName();
					}
					}
					setState(6457);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReadOnlyClauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode READ() { return getToken(DB2zSQLParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(DB2zSQLParser.ONLY, 0); }
		public ReadOnlyClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_readOnlyClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterReadOnlyClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitReadOnlyClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitReadOnlyClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReadOnlyClauseContext readOnlyClause() throws RecognitionException {
		ReadOnlyClauseContext _localctx = new ReadOnlyClauseContext(_ctx, getState());
		enterRule(_localctx, 862, RULE_readOnlyClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6460);
			match(FOR);
			setState(6461);
			match(READ);
			setState(6462);
			match(ONLY);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptimizeClauseContext extends ParserRuleContext {
		public TerminalNode OPTIMIZE() { return getToken(DB2zSQLParser.OPTIMIZE, 0); }
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode ROW() { return getToken(DB2zSQLParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(DB2zSQLParser.ROWS, 0); }
		public OptimizeClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optimizeClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterOptimizeClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitOptimizeClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitOptimizeClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptimizeClauseContext optimizeClause() throws RecognitionException {
		OptimizeClauseContext _localctx = new OptimizeClauseContext(_ctx, getState());
		enterRule(_localctx, 864, RULE_optimizeClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6464);
			match(OPTIMIZE);
			setState(6465);
			match(FOR);
			setState(6466);
			match(INTEGERLITERAL);
			setState(6467);
			_la = _input.LA(1);
			if ( !(_la==ROW || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IsolationClauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode CS() { return getToken(DB2zSQLParser.CS, 0); }
		public TerminalNode UR() { return getToken(DB2zSQLParser.UR, 0); }
		public TerminalNode RR() { return getToken(DB2zSQLParser.RR, 0); }
		public TerminalNode RS() { return getToken(DB2zSQLParser.RS, 0); }
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public IsolationClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_isolationClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterIsolationClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitIsolationClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitIsolationClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IsolationClauseContext isolationClause() throws RecognitionException {
		IsolationClauseContext _localctx = new IsolationClauseContext(_ctx, getState());
		enterRule(_localctx, 866, RULE_isolationClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6469);
			match(WITH);
			setState(6480);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RR:
				{
				{
				setState(6470);
				match(RR);
				setState(6472);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USE) {
					{
					setState(6471);
					lockClause();
					}
				}

				}
				}
				break;
			case RS:
				{
				{
				setState(6474);
				match(RS);
				setState(6476);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USE) {
					{
					setState(6475);
					lockClause();
					}
				}

				}
				}
				break;
			case CS:
				{
				setState(6478);
				match(CS);
				}
				break;
			case UR:
				{
				setState(6479);
				match(UR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockClauseContext extends ParserRuleContext {
		public TerminalNode USE() { return getToken(DB2zSQLParser.USE, 0); }
		public TerminalNode AND() { return getToken(DB2zSQLParser.AND, 0); }
		public TerminalNode KEEP() { return getToken(DB2zSQLParser.KEEP, 0); }
		public TerminalNode LOCKS() { return getToken(DB2zSQLParser.LOCKS, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(DB2zSQLParser.EXCLUSIVE, 0); }
		public TerminalNode UPDATE() { return getToken(DB2zSQLParser.UPDATE, 0); }
		public TerminalNode SHARE() { return getToken(DB2zSQLParser.SHARE, 0); }
		public LockClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterLockClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitLockClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitLockClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockClauseContext lockClause() throws RecognitionException {
		LockClauseContext _localctx = new LockClauseContext(_ctx, getState());
		enterRule(_localctx, 868, RULE_lockClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6482);
			match(USE);
			setState(6483);
			match(AND);
			setState(6484);
			match(KEEP);
			setState(6485);
			_la = _input.LA(1);
			if ( !(_la==UPDATE || _la==EXCLUSIVE || _la==SHARE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6486);
			match(LOCKS);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SkipLockedDataClauseContext extends ParserRuleContext {
		public TerminalNode SKIP_() { return getToken(DB2zSQLParser.SKIP_, 0); }
		public TerminalNode LOCKED() { return getToken(DB2zSQLParser.LOCKED, 0); }
		public TerminalNode DATA() { return getToken(DB2zSQLParser.DATA, 0); }
		public SkipLockedDataClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_skipLockedDataClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSkipLockedDataClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSkipLockedDataClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSkipLockedDataClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SkipLockedDataClauseContext skipLockedDataClause() throws RecognitionException {
		SkipLockedDataClauseContext _localctx = new SkipLockedDataClauseContext(_ctx, getState());
		enterRule(_localctx, 870, RULE_skipLockedDataClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6488);
			match(SKIP_);
			setState(6489);
			match(LOCKED);
			setState(6490);
			match(DATA);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QuerynoClauseContext extends ParserRuleContext {
		public TerminalNode QUERYNO() { return getToken(DB2zSQLParser.QUERYNO, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public QuerynoClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_querynoClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterQuerynoClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitQuerynoClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitQuerynoClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QuerynoClauseContext querynoClause() throws RecognitionException {
		QuerynoClauseContext _localctx = new QuerynoClauseContext(_ctx, getState());
		enterRule(_localctx, 872, RULE_querynoClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6492);
			match(QUERYNO);
			setState(6493);
			match(INTEGERLITERAL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScalarFullSelectContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public FullSelectContext fullSelect() {
			return getRuleContext(FullSelectContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public ScalarFullSelectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scalarFullSelect; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterScalarFullSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitScalarFullSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitScalarFullSelect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ScalarFullSelectContext scalarFullSelect() throws RecognitionException {
		ScalarFullSelectContext _localctx = new ScalarFullSelectContext(_ctx, getState());
		enterRule(_localctx, 874, RULE_scalarFullSelect);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6495);
			match(LPAREN);
			setState(6496);
			fullSelect();
			setState(6497);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FullSelectContext extends ParserRuleContext {
		public List<SubSelectContext> subSelect() {
			return getRuleContexts(SubSelectContext.class);
		}
		public SubSelectContext subSelect(int i) {
			return getRuleContext(SubSelectContext.class,i);
		}
		public ValuesClauseContext valuesClause() {
			return getRuleContext(ValuesClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public OffsetClauseContext offsetClause() {
			return getRuleContext(OffsetClauseContext.class,0);
		}
		public FetchClauseContext fetchClause() {
			return getRuleContext(FetchClauseContext.class,0);
		}
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public List<FullSelectContext> fullSelect() {
			return getRuleContexts(FullSelectContext.class);
		}
		public FullSelectContext fullSelect(int i) {
			return getRuleContext(FullSelectContext.class,i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public List<TerminalNode> UNION() { return getTokens(DB2zSQLParser.UNION); }
		public TerminalNode UNION(int i) {
			return getToken(DB2zSQLParser.UNION, i);
		}
		public List<TerminalNode> EXCEPT() { return getTokens(DB2zSQLParser.EXCEPT); }
		public TerminalNode EXCEPT(int i) {
			return getToken(DB2zSQLParser.EXCEPT, i);
		}
		public List<TerminalNode> INTERSECT() { return getTokens(DB2zSQLParser.INTERSECT); }
		public TerminalNode INTERSECT(int i) {
			return getToken(DB2zSQLParser.INTERSECT, i);
		}
		public List<TerminalNode> DISTINCT() { return getTokens(DB2zSQLParser.DISTINCT); }
		public TerminalNode DISTINCT(int i) {
			return getToken(DB2zSQLParser.DISTINCT, i);
		}
		public List<TerminalNode> ALL() { return getTokens(DB2zSQLParser.ALL); }
		public TerminalNode ALL(int i) {
			return getToken(DB2zSQLParser.ALL, i);
		}
		public FullSelectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullSelect; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFullSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFullSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFullSelect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FullSelectContext fullSelect() throws RecognitionException {
		FullSelectContext _localctx = new FullSelectContext(_ctx, getState());
		enterRule(_localctx, 876, RULE_fullSelect);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6505);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LPAREN:
				{
				{
				setState(6499);
				match(LPAREN);
				setState(6500);
				fullSelect();
				setState(6501);
				match(RPAREN);
				}
				}
				break;
			case SELECT:
				{
				setState(6503);
				subSelect();
				}
				break;
			case VALUES:
				{
				setState(6504);
				valuesClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6520);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==EXCEPT || _la==INTERSECT || _la==UNION) {
				{
				{
				setState(6507);
				_la = _input.LA(1);
				if ( !(_la==EXCEPT || _la==INTERSECT || _la==UNION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6509);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					setState(6508);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(6516);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SELECT:
					{
					setState(6511);
					subSelect();
					}
					break;
				case LPAREN:
					{
					{
					setState(6512);
					match(LPAREN);
					setState(6513);
					fullSelect();
					setState(6514);
					match(RPAREN);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				setState(6522);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6524);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(6523);
				orderByClause();
				}
			}

			setState(6527);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OFFSET) {
				{
				setState(6526);
				offsetClause();
				}
			}

			setState(6530);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FETCH) {
				{
				setState(6529);
				fetchClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValuesClauseContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(DB2zSQLParser.VALUES, 0); }
		public List<SequenceReferenceContext> sequenceReference() {
			return getRuleContexts(SequenceReferenceContext.class);
		}
		public SequenceReferenceContext sequenceReference(int i) {
			return getRuleContext(SequenceReferenceContext.class,i);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public ValuesClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valuesClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterValuesClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitValuesClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitValuesClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValuesClauseContext valuesClause() throws RecognitionException {
		ValuesClauseContext _localctx = new ValuesClauseContext(_ctx, getState());
		enterRule(_localctx, 878, RULE_valuesClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6532);
			match(VALUES);
			setState(6545);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NEXT:
			case PREVIOUS:
				{
				setState(6533);
				sequenceReference();
				}
				break;
			case LPAREN:
				{
				{
				setState(6534);
				match(LPAREN);
				setState(6535);
				sequenceReference();
				setState(6540);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6536);
					match(COMMA);
					setState(6537);
					sequenceReference();
					}
					}
					setState(6542);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6543);
				match(RPAREN);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderByClauseContext extends ParserRuleContext {
		public List<TerminalNode> ORDER() { return getTokens(DB2zSQLParser.ORDER); }
		public TerminalNode ORDER(int i) {
			return getToken(DB2zSQLParser.ORDER, i);
		}
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public List<SortKeyContext> sortKey() {
			return getRuleContexts(SortKeyContext.class);
		}
		public SortKeyContext sortKey(int i) {
			return getRuleContext(SortKeyContext.class,i);
		}
		public TerminalNode INPUT() { return getToken(DB2zSQLParser.INPUT, 0); }
		public TerminalNode SEQUENCE() { return getToken(DB2zSQLParser.SEQUENCE, 0); }
		public TerminalNode OF() { return getToken(DB2zSQLParser.OF, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public List<TerminalNode> ASC() { return getTokens(DB2zSQLParser.ASC); }
		public TerminalNode ASC(int i) {
			return getToken(DB2zSQLParser.ASC, i);
		}
		public List<TerminalNode> DESC() { return getTokens(DB2zSQLParser.DESC); }
		public TerminalNode DESC(int i) {
			return getToken(DB2zSQLParser.DESC, i);
		}
		public OrderByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterOrderByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitOrderByClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitOrderByClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderByClauseContext orderByClause() throws RecognitionException {
		OrderByClauseContext _localctx = new OrderByClauseContext(_ctx, getState());
		enterRule(_localctx, 880, RULE_orderByClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6547);
			match(ORDER);
			setState(6548);
			match(BY);
			setState(6568);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,779,_ctx) ) {
			case 1:
				{
				{
				setState(6549);
				sortKey();
				setState(6551);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					setState(6550);
					_la = _input.LA(1);
					if ( !(_la==ASC || _la==DESC) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(6560);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6553);
					match(COMMA);
					setState(6554);
					sortKey();
					setState(6556);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ASC || _la==DESC) {
						{
						setState(6555);
						_la = _input.LA(1);
						if ( !(_la==ASC || _la==DESC) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					}
					}
					setState(6562);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case 2:
				{
				{
				setState(6563);
				match(INPUT);
				setState(6564);
				match(SEQUENCE);
				}
				}
				break;
			case 3:
				{
				{
				setState(6565);
				match(ORDER);
				setState(6566);
				match(OF);
				setState(6567);
				tableName();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SortKeyContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public SortKeyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sortKey; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSortKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSortKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSortKey(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SortKeyContext sortKey() throws RecognitionException {
		SortKeyContext _localctx = new SortKeyContext(_ctx, getState());
		enterRule(_localctx, 882, RULE_sortKey);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6573);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,780,_ctx) ) {
			case 1:
				{
				setState(6570);
				columnName();
				}
				break;
			case 2:
				{
				setState(6571);
				match(INTEGERLITERAL);
				}
				break;
			case 3:
				{
				setState(6572);
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OffsetClauseContext extends ParserRuleContext {
		public TerminalNode OFFSET() { return getToken(DB2zSQLParser.OFFSET, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode ROW() { return getToken(DB2zSQLParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(DB2zSQLParser.ROWS, 0); }
		public OffsetClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_offsetClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterOffsetClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitOffsetClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitOffsetClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OffsetClauseContext offsetClause() throws RecognitionException {
		OffsetClauseContext _localctx = new OffsetClauseContext(_ctx, getState());
		enterRule(_localctx, 884, RULE_offsetClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6575);
			match(OFFSET);
			setState(6576);
			match(INTEGERLITERAL);
			setState(6577);
			_la = _input.LA(1);
			if ( !(_la==ROW || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FetchClauseContext extends ParserRuleContext {
		public TerminalNode FETCH() { return getToken(DB2zSQLParser.FETCH, 0); }
		public TerminalNode ONLY() { return getToken(DB2zSQLParser.ONLY, 0); }
		public TerminalNode FIRST() { return getToken(DB2zSQLParser.FIRST, 0); }
		public TerminalNode NEXT() { return getToken(DB2zSQLParser.NEXT, 0); }
		public TerminalNode ROW() { return getToken(DB2zSQLParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(DB2zSQLParser.ROWS, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public FetchClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetchClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFetchClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFetchClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFetchClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FetchClauseContext fetchClause() throws RecognitionException {
		FetchClauseContext _localctx = new FetchClauseContext(_ctx, getState());
		enterRule(_localctx, 886, RULE_fetchClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6579);
			match(FETCH);
			setState(6580);
			_la = _input.LA(1);
			if ( !(_la==FIRST || _la==NEXT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6582);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTEGERLITERAL) {
				{
				setState(6581);
				match(INTEGERLITERAL);
				}
			}

			setState(6584);
			_la = _input.LA(1);
			if ( !(_la==ROW || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6585);
			match(ONLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierContext extends ParserRuleContext {
		public TerminalNode SQLIDENTIFIER() { return getToken(DB2zSQLParser.SQLIDENTIFIER, 0); }
		public SqlKeywordContext sqlKeyword() {
			return getRuleContext(SqlKeywordContext.class,0);
		}
		public SpecialRegisterContext specialRegister() {
			return getRuleContext(SpecialRegisterContext.class,0);
		}
		public ScalarFunctionContext scalarFunction() {
			return getRuleContext(ScalarFunctionContext.class,0);
		}
		public AggregateFunctionContext aggregateFunction() {
			return getRuleContext(AggregateFunctionContext.class,0);
		}
		public RegressionFunctionContext regressionFunction() {
			return getRuleContext(RegressionFunctionContext.class,0);
		}
		public TableFunctionContext tableFunction() {
			return getRuleContext(TableFunctionContext.class,0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierContext identifier() throws RecognitionException {
		IdentifierContext _localctx = new IdentifierContext(_ctx, getState());
		enterRule(_localctx, 888, RULE_identifier);
		try {
			setState(6594);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,782,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6587);
				match(SQLIDENTIFIER);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6588);
				sqlKeyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6589);
				specialRegister();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6590);
				scalarFunction();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6591);
				aggregateFunction();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6592);
				regressionFunction();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6593);
				tableFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SqlKeywordContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(DB2zSQLParser.ADD, 0); }
		public TerminalNode AFTER() { return getToken(DB2zSQLParser.AFTER, 0); }
		public TerminalNode ALL() { return getToken(DB2zSQLParser.ALL, 0); }
		public TerminalNode ALLOCATE() { return getToken(DB2zSQLParser.ALLOCATE, 0); }
		public TerminalNode ALLOW() { return getToken(DB2zSQLParser.ALLOW, 0); }
		public TerminalNode ALTERAND() { return getToken(DB2zSQLParser.ALTERAND, 0); }
		public TerminalNode ANY() { return getToken(DB2zSQLParser.ANY, 0); }
		public TerminalNode ARRAY() { return getToken(DB2zSQLParser.ARRAY, 0); }
		public TerminalNode ARRAY_EXISTS() { return getToken(DB2zSQLParser.ARRAY_EXISTS, 0); }
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode ASENSITIVE() { return getToken(DB2zSQLParser.ASENSITIVE, 0); }
		public TerminalNode ASSOCIATE() { return getToken(DB2zSQLParser.ASSOCIATE, 0); }
		public TerminalNode ASUTIME() { return getToken(DB2zSQLParser.ASUTIME, 0); }
		public TerminalNode AT() { return getToken(DB2zSQLParser.AT, 0); }
		public TerminalNode AUDIT() { return getToken(DB2zSQLParser.AUDIT, 0); }
		public TerminalNode AUX() { return getToken(DB2zSQLParser.AUX, 0); }
		public TerminalNode AUXILIARY() { return getToken(DB2zSQLParser.AUXILIARY, 0); }
		public TerminalNode BEFORE() { return getToken(DB2zSQLParser.BEFORE, 0); }
		public TerminalNode BEGIN() { return getToken(DB2zSQLParser.BEGIN, 0); }
		public TerminalNode BETWEEN() { return getToken(DB2zSQLParser.BETWEEN, 0); }
		public TerminalNode BUFFERPOOL() { return getToken(DB2zSQLParser.BUFFERPOOL, 0); }
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public TerminalNode CALL() { return getToken(DB2zSQLParser.CALL, 0); }
		public TerminalNode CAPTURE() { return getToken(DB2zSQLParser.CAPTURE, 0); }
		public TerminalNode CASCADED() { return getToken(DB2zSQLParser.CASCADED, 0); }
		public TerminalNode CASE() { return getToken(DB2zSQLParser.CASE, 0); }
		public TerminalNode CAST() { return getToken(DB2zSQLParser.CAST, 0); }
		public TerminalNode CCSID() { return getToken(DB2zSQLParser.CCSID, 0); }
		public TerminalNode CHAR() { return getToken(DB2zSQLParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(DB2zSQLParser.CHARACTER, 0); }
		public TerminalNode CHECK() { return getToken(DB2zSQLParser.CHECK, 0); }
		public TerminalNode CLONE() { return getToken(DB2zSQLParser.CLONE, 0); }
		public TerminalNode CLOSE() { return getToken(DB2zSQLParser.CLOSE, 0); }
		public TerminalNode CLUSTER() { return getToken(DB2zSQLParser.CLUSTER, 0); }
		public TerminalNode COLLECTION() { return getToken(DB2zSQLParser.COLLECTION, 0); }
		public TerminalNode COLLID() { return getToken(DB2zSQLParser.COLLID, 0); }
		public TerminalNode COLUMN() { return getToken(DB2zSQLParser.COLUMN, 0); }
		public TerminalNode COMMENT() { return getToken(DB2zSQLParser.COMMENT, 0); }
		public TerminalNode COMMIT() { return getToken(DB2zSQLParser.COMMIT, 0); }
		public TerminalNode CONCAT() { return getToken(DB2zSQLParser.CONCAT, 0); }
		public TerminalNode CONDITION() { return getToken(DB2zSQLParser.CONDITION, 0); }
		public TerminalNode CONNECT() { return getToken(DB2zSQLParser.CONNECT, 0); }
		public TerminalNode CONNECTION() { return getToken(DB2zSQLParser.CONNECTION, 0); }
		public TerminalNode CONSTRAINT() { return getToken(DB2zSQLParser.CONSTRAINT, 0); }
		public TerminalNode CONTAINS() { return getToken(DB2zSQLParser.CONTAINS, 0); }
		public TerminalNode CONTENT() { return getToken(DB2zSQLParser.CONTENT, 0); }
		public TerminalNode CONTINUE() { return getToken(DB2zSQLParser.CONTINUE, 0); }
		public TerminalNode CREATE() { return getToken(DB2zSQLParser.CREATE, 0); }
		public TerminalNode CUBE() { return getToken(DB2zSQLParser.CUBE, 0); }
		public TerminalNode CURRENT() { return getToken(DB2zSQLParser.CURRENT, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(DB2zSQLParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_LC_CTYPE() { return getToken(DB2zSQLParser.CURRENT_LC_CTYPE, 0); }
		public TerminalNode CURRENT_PATH() { return getToken(DB2zSQLParser.CURRENT_PATH, 0); }
		public TerminalNode CURRENT_SCHEMA() { return getToken(DB2zSQLParser.CURRENT_SCHEMA, 0); }
		public TerminalNode CURRENT_SERVER() { return getToken(DB2zSQLParser.CURRENT_SERVER, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(DB2zSQLParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(DB2zSQLParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_TIME_ZONE() { return getToken(DB2zSQLParser.CURRENT_TIME_ZONE, 0); }
		public TerminalNode CURRVAL() { return getToken(DB2zSQLParser.CURRVAL, 0); }
		public TerminalNode CURSOR() { return getToken(DB2zSQLParser.CURSOR, 0); }
		public TerminalNode DATA() { return getToken(DB2zSQLParser.DATA, 0); }
		public TerminalNode DATABASE() { return getToken(DB2zSQLParser.DATABASE, 0); }
		public TerminalNode DAY() { return getToken(DB2zSQLParser.DAY, 0); }
		public TerminalNode DAYS() { return getToken(DB2zSQLParser.DAYS, 0); }
		public TerminalNode DBINFO() { return getToken(DB2zSQLParser.DBINFO, 0); }
		public TerminalNode DECLARE() { return getToken(DB2zSQLParser.DECLARE, 0); }
		public TerminalNode DEFAULT() { return getToken(DB2zSQLParser.DEFAULT, 0); }
		public TerminalNode DELETE() { return getToken(DB2zSQLParser.DELETE, 0); }
		public TerminalNode DESCRIPTOR() { return getToken(DB2zSQLParser.DESCRIPTOR, 0); }
		public TerminalNode DETERMINISTIC() { return getToken(DB2zSQLParser.DETERMINISTIC, 0); }
		public TerminalNode DISABLE() { return getToken(DB2zSQLParser.DISABLE, 0); }
		public TerminalNode DISALLOW() { return getToken(DB2zSQLParser.DISALLOW, 0); }
		public TerminalNode DISTINCT() { return getToken(DB2zSQLParser.DISTINCT, 0); }
		public TerminalNode DO() { return getToken(DB2zSQLParser.DO, 0); }
		public TerminalNode DOCUMENT() { return getToken(DB2zSQLParser.DOCUMENT, 0); }
		public TerminalNode DOUBLE() { return getToken(DB2zSQLParser.DOUBLE, 0); }
		public TerminalNode DROP() { return getToken(DB2zSQLParser.DROP, 0); }
		public TerminalNode DSSIZE() { return getToken(DB2zSQLParser.DSSIZE, 0); }
		public TerminalNode DYNAMIC() { return getToken(DB2zSQLParser.DYNAMIC, 0); }
		public TerminalNode EDITPROC() { return getToken(DB2zSQLParser.EDITPROC, 0); }
		public TerminalNode ELSE() { return getToken(DB2zSQLParser.ELSE, 0); }
		public TerminalNode ELSEIF() { return getToken(DB2zSQLParser.ELSEIF, 0); }
		public TerminalNode ENCODING() { return getToken(DB2zSQLParser.ENCODING, 0); }
		public TerminalNode ENCRYPTION() { return getToken(DB2zSQLParser.ENCRYPTION, 0); }
		public TerminalNode END() { return getToken(DB2zSQLParser.END, 0); }
		public TerminalNode END_EXEC() { return getToken(DB2zSQLParser.END_EXEC, 0); }
		public TerminalNode ENDING() { return getToken(DB2zSQLParser.ENDING, 0); }
		public TerminalNode ERASE() { return getToken(DB2zSQLParser.ERASE, 0); }
		public TerminalNode ESCAPE() { return getToken(DB2zSQLParser.ESCAPE, 0); }
		public TerminalNode EXCEPT() { return getToken(DB2zSQLParser.EXCEPT, 0); }
		public TerminalNode EXCEPTION() { return getToken(DB2zSQLParser.EXCEPTION, 0); }
		public TerminalNode EXEC_SQL() { return getToken(DB2zSQLParser.EXEC_SQL, 0); }
		public TerminalNode EXECUTE() { return getToken(DB2zSQLParser.EXECUTE, 0); }
		public TerminalNode EXISTS() { return getToken(DB2zSQLParser.EXISTS, 0); }
		public TerminalNode EXIT() { return getToken(DB2zSQLParser.EXIT, 0); }
		public TerminalNode EXPLAIN() { return getToken(DB2zSQLParser.EXPLAIN, 0); }
		public TerminalNode EXTERNAL() { return getToken(DB2zSQLParser.EXTERNAL, 0); }
		public TerminalNode FENCED() { return getToken(DB2zSQLParser.FENCED, 0); }
		public TerminalNode FETCH() { return getToken(DB2zSQLParser.FETCH, 0); }
		public TerminalNode FIELDPROC() { return getToken(DB2zSQLParser.FIELDPROC, 0); }
		public TerminalNode FINAL() { return getToken(DB2zSQLParser.FINAL, 0); }
		public TerminalNode FIRST() { return getToken(DB2zSQLParser.FIRST, 0); }
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode FREE() { return getToken(DB2zSQLParser.FREE, 0); }
		public TerminalNode FROM() { return getToken(DB2zSQLParser.FROM, 0); }
		public TerminalNode FULL() { return getToken(DB2zSQLParser.FULL, 0); }
		public TerminalNode FUNCTION() { return getToken(DB2zSQLParser.FUNCTION, 0); }
		public TerminalNode GENERATED() { return getToken(DB2zSQLParser.GENERATED, 0); }
		public TerminalNode GET() { return getToken(DB2zSQLParser.GET, 0); }
		public TerminalNode GLOBAL() { return getToken(DB2zSQLParser.GLOBAL, 0); }
		public TerminalNode GO() { return getToken(DB2zSQLParser.GO, 0); }
		public TerminalNode GOTO() { return getToken(DB2zSQLParser.GOTO, 0); }
		public TerminalNode GRANT() { return getToken(DB2zSQLParser.GRANT, 0); }
		public TerminalNode GROUP() { return getToken(DB2zSQLParser.GROUP, 0); }
		public TerminalNode HANDLER() { return getToken(DB2zSQLParser.HANDLER, 0); }
		public TerminalNode HAVING() { return getToken(DB2zSQLParser.HAVING, 0); }
		public TerminalNode HOLD() { return getToken(DB2zSQLParser.HOLD, 0); }
		public TerminalNode HOUR() { return getToken(DB2zSQLParser.HOUR, 0); }
		public TerminalNode HOURS() { return getToken(DB2zSQLParser.HOURS, 0); }
		public TerminalNode IF() { return getToken(DB2zSQLParser.IF, 0); }
		public TerminalNode IMMEDIATE() { return getToken(DB2zSQLParser.IMMEDIATE, 0); }
		public TerminalNode IN() { return getToken(DB2zSQLParser.IN, 0); }
		public TerminalNode INCLUSIVE() { return getToken(DB2zSQLParser.INCLUSIVE, 0); }
		public TerminalNode INDEX() { return getToken(DB2zSQLParser.INDEX, 0); }
		public TerminalNode INHERIT() { return getToken(DB2zSQLParser.INHERIT, 0); }
		public TerminalNode INNER() { return getToken(DB2zSQLParser.INNER, 0); }
		public TerminalNode INOUT() { return getToken(DB2zSQLParser.INOUT, 0); }
		public TerminalNode INSENSITIVE() { return getToken(DB2zSQLParser.INSENSITIVE, 0); }
		public TerminalNode INSERT() { return getToken(DB2zSQLParser.INSERT, 0); }
		public TerminalNode INTERSECT() { return getToken(DB2zSQLParser.INTERSECT, 0); }
		public TerminalNode INTO() { return getToken(DB2zSQLParser.INTO, 0); }
		public TerminalNode IS() { return getToken(DB2zSQLParser.IS, 0); }
		public TerminalNode ISOBID() { return getToken(DB2zSQLParser.ISOBID, 0); }
		public TerminalNode ITERATE() { return getToken(DB2zSQLParser.ITERATE, 0); }
		public TerminalNode JAR() { return getToken(DB2zSQLParser.JAR, 0); }
		public TerminalNode JOIN() { return getToken(DB2zSQLParser.JOIN, 0); }
		public TerminalNode KEEP() { return getToken(DB2zSQLParser.KEEP, 0); }
		public TerminalNode KEY() { return getToken(DB2zSQLParser.KEY, 0); }
		public TerminalNode LABEL() { return getToken(DB2zSQLParser.LABEL, 0); }
		public TerminalNode LANGUAGE() { return getToken(DB2zSQLParser.LANGUAGE, 0); }
		public TerminalNode LAST() { return getToken(DB2zSQLParser.LAST, 0); }
		public TerminalNode LC_CTYPE() { return getToken(DB2zSQLParser.LC_CTYPE, 0); }
		public TerminalNode LEAVE() { return getToken(DB2zSQLParser.LEAVE, 0); }
		public TerminalNode LEFT() { return getToken(DB2zSQLParser.LEFT, 0); }
		public TerminalNode LIKE() { return getToken(DB2zSQLParser.LIKE, 0); }
		public TerminalNode LIMIT() { return getToken(DB2zSQLParser.LIMIT, 0); }
		public TerminalNode LOCAL() { return getToken(DB2zSQLParser.LOCAL, 0); }
		public TerminalNode LOCALE() { return getToken(DB2zSQLParser.LOCALE, 0); }
		public TerminalNode LOCATOR() { return getToken(DB2zSQLParser.LOCATOR, 0); }
		public TerminalNode LOCATORS() { return getToken(DB2zSQLParser.LOCATORS, 0); }
		public TerminalNode LOCK() { return getToken(DB2zSQLParser.LOCK, 0); }
		public TerminalNode LOCKMAX() { return getToken(DB2zSQLParser.LOCKMAX, 0); }
		public TerminalNode LOCKSIZE() { return getToken(DB2zSQLParser.LOCKSIZE, 0); }
		public TerminalNode LONG() { return getToken(DB2zSQLParser.LONG, 0); }
		public TerminalNode LOOP() { return getToken(DB2zSQLParser.LOOP, 0); }
		public TerminalNode MAINTAINED() { return getToken(DB2zSQLParser.MAINTAINED, 0); }
		public TerminalNode MATERIALIZED() { return getToken(DB2zSQLParser.MATERIALIZED, 0); }
		public TerminalNode MICROSECOND() { return getToken(DB2zSQLParser.MICROSECOND, 0); }
		public TerminalNode MICROSECONDS() { return getToken(DB2zSQLParser.MICROSECONDS, 0); }
		public TerminalNode MINUTE() { return getToken(DB2zSQLParser.MINUTE, 0); }
		public TerminalNode MINUTES() { return getToken(DB2zSQLParser.MINUTES, 0); }
		public TerminalNode MODIFIES() { return getToken(DB2zSQLParser.MODIFIES, 0); }
		public TerminalNode MONTH() { return getToken(DB2zSQLParser.MONTH, 0); }
		public TerminalNode MONTHS() { return getToken(DB2zSQLParser.MONTHS, 0); }
		public TerminalNode NEXT() { return getToken(DB2zSQLParser.NEXT, 0); }
		public TerminalNode NEXTVAL() { return getToken(DB2zSQLParser.NEXTVAL, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode NONE() { return getToken(DB2zSQLParser.NONE, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public TerminalNode NULLS() { return getToken(DB2zSQLParser.NULLS, 0); }
		public TerminalNode NUMPARTS() { return getToken(DB2zSQLParser.NUMPARTS, 0); }
		public TerminalNode OBID() { return getToken(DB2zSQLParser.OBID, 0); }
		public TerminalNode OF() { return getToken(DB2zSQLParser.OF, 0); }
		public TerminalNode OFFSET() { return getToken(DB2zSQLParser.OFFSET, 0); }
		public TerminalNode OLD() { return getToken(DB2zSQLParser.OLD, 0); }
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public TerminalNode OPEN() { return getToken(DB2zSQLParser.OPEN, 0); }
		public TerminalNode OPTIMIZATION() { return getToken(DB2zSQLParser.OPTIMIZATION, 0); }
		public TerminalNode OPTIMIZE() { return getToken(DB2zSQLParser.OPTIMIZE, 0); }
		public TerminalNode OR() { return getToken(DB2zSQLParser.OR, 0); }
		public TerminalNode ORDER() { return getToken(DB2zSQLParser.ORDER, 0); }
		public TerminalNode ORGANIZATION() { return getToken(DB2zSQLParser.ORGANIZATION, 0); }
		public TerminalNode OUT() { return getToken(DB2zSQLParser.OUT, 0); }
		public TerminalNode OUTER() { return getToken(DB2zSQLParser.OUTER, 0); }
		public TerminalNode PACKAGE() { return getToken(DB2zSQLParser.PACKAGE, 0); }
		public TerminalNode PADDED() { return getToken(DB2zSQLParser.PADDED, 0); }
		public TerminalNode PARAMETER() { return getToken(DB2zSQLParser.PARAMETER, 0); }
		public TerminalNode PART() { return getToken(DB2zSQLParser.PART, 0); }
		public TerminalNode PARTITION() { return getToken(DB2zSQLParser.PARTITION, 0); }
		public TerminalNode PARTITIONED() { return getToken(DB2zSQLParser.PARTITIONED, 0); }
		public TerminalNode PARTITIONING() { return getToken(DB2zSQLParser.PARTITIONING, 0); }
		public TerminalNode PATH() { return getToken(DB2zSQLParser.PATH, 0); }
		public TerminalNode PERIOD() { return getToken(DB2zSQLParser.PERIOD, 0); }
		public TerminalNode PIECESIZE() { return getToken(DB2zSQLParser.PIECESIZE, 0); }
		public TerminalNode PLAN() { return getToken(DB2zSQLParser.PLAN, 0); }
		public TerminalNode PRECISION() { return getToken(DB2zSQLParser.PRECISION, 0); }
		public TerminalNode PREPARE() { return getToken(DB2zSQLParser.PREPARE, 0); }
		public TerminalNode PREVVAL() { return getToken(DB2zSQLParser.PREVVAL, 0); }
		public TerminalNode PRIOR() { return getToken(DB2zSQLParser.PRIOR, 0); }
		public TerminalNode PRIQTY() { return getToken(DB2zSQLParser.PRIQTY, 0); }
		public TerminalNode PRIVILEGES() { return getToken(DB2zSQLParser.PRIVILEGES, 0); }
		public TerminalNode PROCEDURE() { return getToken(DB2zSQLParser.PROCEDURE, 0); }
		public TerminalNode PROGRAM() { return getToken(DB2zSQLParser.PROGRAM, 0); }
		public TerminalNode PSID() { return getToken(DB2zSQLParser.PSID, 0); }
		public TerminalNode PUBLIC() { return getToken(DB2zSQLParser.PUBLIC, 0); }
		public TerminalNode QUERY() { return getToken(DB2zSQLParser.QUERY, 0); }
		public TerminalNode QUERYNO() { return getToken(DB2zSQLParser.QUERYNO, 0); }
		public TerminalNode READS() { return getToken(DB2zSQLParser.READS, 0); }
		public TerminalNode REFERENCES() { return getToken(DB2zSQLParser.REFERENCES, 0); }
		public TerminalNode REFRESH() { return getToken(DB2zSQLParser.REFRESH, 0); }
		public TerminalNode RELEASE() { return getToken(DB2zSQLParser.RELEASE, 0); }
		public TerminalNode RENAME() { return getToken(DB2zSQLParser.RENAME, 0); }
		public TerminalNode REPEAT() { return getToken(DB2zSQLParser.REPEAT, 0); }
		public TerminalNode RESIGNAL() { return getToken(DB2zSQLParser.RESIGNAL, 0); }
		public TerminalNode RESTRICT() { return getToken(DB2zSQLParser.RESTRICT, 0); }
		public TerminalNode RESULT() { return getToken(DB2zSQLParser.RESULT, 0); }
		public TerminalNode RESULT_SET_LOCATOR() { return getToken(DB2zSQLParser.RESULT_SET_LOCATOR, 0); }
		public TerminalNode RETURN() { return getToken(DB2zSQLParser.RETURN, 0); }
		public TerminalNode RETURNS() { return getToken(DB2zSQLParser.RETURNS, 0); }
		public TerminalNode REVOKE() { return getToken(DB2zSQLParser.REVOKE, 0); }
		public TerminalNode RIGHT() { return getToken(DB2zSQLParser.RIGHT, 0); }
		public TerminalNode ROLE() { return getToken(DB2zSQLParser.ROLE, 0); }
		public TerminalNode ROLLBACK() { return getToken(DB2zSQLParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(DB2zSQLParser.ROLLUP, 0); }
		public TerminalNode ROUND_CEILING() { return getToken(DB2zSQLParser.ROUND_CEILING, 0); }
		public TerminalNode ROUND_DOWN() { return getToken(DB2zSQLParser.ROUND_DOWN, 0); }
		public TerminalNode ROUND_FLOOR() { return getToken(DB2zSQLParser.ROUND_FLOOR, 0); }
		public TerminalNode ROUND_HALF_DOWN() { return getToken(DB2zSQLParser.ROUND_HALF_DOWN, 0); }
		public TerminalNode ROUND_HALF_EVEN() { return getToken(DB2zSQLParser.ROUND_HALF_EVEN, 0); }
		public TerminalNode ROUND_HALF_UP() { return getToken(DB2zSQLParser.ROUND_HALF_UP, 0); }
		public TerminalNode ROUND_UP() { return getToken(DB2zSQLParser.ROUND_UP, 0); }
		public TerminalNode ROW() { return getToken(DB2zSQLParser.ROW, 0); }
		public TerminalNode ROWSET() { return getToken(DB2zSQLParser.ROWSET, 0); }
		public TerminalNode RUN() { return getToken(DB2zSQLParser.RUN, 0); }
		public TerminalNode SAVEPOINT() { return getToken(DB2zSQLParser.SAVEPOINT, 0); }
		public TerminalNode SCHEMA() { return getToken(DB2zSQLParser.SCHEMA, 0); }
		public TerminalNode SCRATCHPAD() { return getToken(DB2zSQLParser.SCRATCHPAD, 0); }
		public TerminalNode SECOND() { return getToken(DB2zSQLParser.SECOND, 0); }
		public TerminalNode SECONDS() { return getToken(DB2zSQLParser.SECONDS, 0); }
		public TerminalNode SECQTY() { return getToken(DB2zSQLParser.SECQTY, 0); }
		public TerminalNode SECURITY() { return getToken(DB2zSQLParser.SECURITY, 0); }
		public TerminalNode SELECT() { return getToken(DB2zSQLParser.SELECT, 0); }
		public TerminalNode SENSITIVE() { return getToken(DB2zSQLParser.SENSITIVE, 0); }
		public TerminalNode SEQUENCE() { return getToken(DB2zSQLParser.SEQUENCE, 0); }
		public TerminalNode SESSION_USER() { return getToken(DB2zSQLParser.SESSION_USER, 0); }
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public TerminalNode SIGNAL() { return getToken(DB2zSQLParser.SIGNAL, 0); }
		public TerminalNode SIMPLE() { return getToken(DB2zSQLParser.SIMPLE, 0); }
		public TerminalNode SOME() { return getToken(DB2zSQLParser.SOME, 0); }
		public TerminalNode SOURCE() { return getToken(DB2zSQLParser.SOURCE, 0); }
		public TerminalNode SPECIFIC() { return getToken(DB2zSQLParser.SPECIFIC, 0); }
		public TerminalNode STANDARD() { return getToken(DB2zSQLParser.STANDARD, 0); }
		public TerminalNode STATEMENT() { return getToken(DB2zSQLParser.STATEMENT, 0); }
		public TerminalNode STATIC() { return getToken(DB2zSQLParser.STATIC, 0); }
		public TerminalNode STAY() { return getToken(DB2zSQLParser.STAY, 0); }
		public TerminalNode STOGROUP() { return getToken(DB2zSQLParser.STOGROUP, 0); }
		public TerminalNode STORES() { return getToken(DB2zSQLParser.STORES, 0); }
		public TerminalNode STYLE() { return getToken(DB2zSQLParser.STYLE, 0); }
		public TerminalNode SUMMARY() { return getToken(DB2zSQLParser.SUMMARY, 0); }
		public TerminalNode SYNONYM() { return getToken(DB2zSQLParser.SYNONYM, 0); }
		public TerminalNode SYSDATE() { return getToken(DB2zSQLParser.SYSDATE, 0); }
		public TerminalNode SYSTEM() { return getToken(DB2zSQLParser.SYSTEM, 0); }
		public TerminalNode SYSTIMESTAMP() { return getToken(DB2zSQLParser.SYSTIMESTAMP, 0); }
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public TerminalNode TABLESPACE() { return getToken(DB2zSQLParser.TABLESPACE, 0); }
		public TerminalNode THEN() { return getToken(DB2zSQLParser.THEN, 0); }
		public TerminalNode TO() { return getToken(DB2zSQLParser.TO, 0); }
		public TerminalNode TRIGGER() { return getToken(DB2zSQLParser.TRIGGER, 0); }
		public TerminalNode TRUNCATE() { return getToken(DB2zSQLParser.TRUNCATE, 0); }
		public TerminalNode TYPE() { return getToken(DB2zSQLParser.TYPE, 0); }
		public TerminalNode UNDO() { return getToken(DB2zSQLParser.UNDO, 0); }
		public TerminalNode UNION() { return getToken(DB2zSQLParser.UNION, 0); }
		public TerminalNode UNIQUE() { return getToken(DB2zSQLParser.UNIQUE, 0); }
		public TerminalNode UNTIL() { return getToken(DB2zSQLParser.UNTIL, 0); }
		public TerminalNode UPDATE() { return getToken(DB2zSQLParser.UPDATE, 0); }
		public TerminalNode USER() { return getToken(DB2zSQLParser.USER, 0); }
		public TerminalNode USING() { return getToken(DB2zSQLParser.USING, 0); }
		public TerminalNode VALIDPROC() { return getToken(DB2zSQLParser.VALIDPROC, 0); }
		public TerminalNode VALUE() { return getToken(DB2zSQLParser.VALUE, 0); }
		public TerminalNode VALUES() { return getToken(DB2zSQLParser.VALUES, 0); }
		public TerminalNode VARIABLE() { return getToken(DB2zSQLParser.VARIABLE, 0); }
		public TerminalNode VARIANT() { return getToken(DB2zSQLParser.VARIANT, 0); }
		public TerminalNode VCAT() { return getToken(DB2zSQLParser.VCAT, 0); }
		public TerminalNode VERSIONING() { return getToken(DB2zSQLParser.VERSIONING, 0); }
		public TerminalNode VIEW() { return getToken(DB2zSQLParser.VIEW, 0); }
		public TerminalNode VOLATILE() { return getToken(DB2zSQLParser.VOLATILE, 0); }
		public TerminalNode VOLUMES() { return getToken(DB2zSQLParser.VOLUMES, 0); }
		public TerminalNode WHEN() { return getToken(DB2zSQLParser.WHEN, 0); }
		public TerminalNode WHENEVER() { return getToken(DB2zSQLParser.WHENEVER, 0); }
		public TerminalNode WHERE() { return getToken(DB2zSQLParser.WHERE, 0); }
		public TerminalNode WHILE() { return getToken(DB2zSQLParser.WHILE, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode WLM() { return getToken(DB2zSQLParser.WLM, 0); }
		public TerminalNode XMLCAST() { return getToken(DB2zSQLParser.XMLCAST, 0); }
		public TerminalNode XMLEXISTS() { return getToken(DB2zSQLParser.XMLEXISTS, 0); }
		public TerminalNode XMLNAMESPACES() { return getToken(DB2zSQLParser.XMLNAMESPACES, 0); }
		public TerminalNode YEAR() { return getToken(DB2zSQLParser.YEAR, 0); }
		public TerminalNode YEARS() { return getToken(DB2zSQLParser.YEARS, 0); }
		public TerminalNode ZONE() { return getToken(DB2zSQLParser.ZONE, 0); }
		public TerminalNode AND() { return getToken(DB2zSQLParser.AND, 0); }
		public TerminalNode ARRAY_AGG() { return getToken(DB2zSQLParser.ARRAY_AGG, 0); }
		public TerminalNode ASC() { return getToken(DB2zSQLParser.ASC, 0); }
		public TerminalNode AVG() { return getToken(DB2zSQLParser.AVG, 0); }
		public TerminalNode BIT() { return getToken(DB2zSQLParser.BIT, 0); }
		public TerminalNode CHANGE() { return getToken(DB2zSQLParser.CHANGE, 0); }
		public TerminalNode CODEUNITS16() { return getToken(DB2zSQLParser.CODEUNITS16, 0); }
		public TerminalNode CODEUNITS32() { return getToken(DB2zSQLParser.CODEUNITS32, 0); }
		public TerminalNode CORR() { return getToken(DB2zSQLParser.CORR, 0); }
		public TerminalNode CORRELATION() { return getToken(DB2zSQLParser.CORRELATION, 0); }
		public TerminalNode COVAR() { return getToken(DB2zSQLParser.COVAR, 0); }
		public TerminalNode COVARIANCE() { return getToken(DB2zSQLParser.COVARIANCE, 0); }
		public TerminalNode COVARIANCE_SAMP() { return getToken(DB2zSQLParser.COVARIANCE_SAMP, 0); }
		public TerminalNode COVAR_POP() { return getToken(DB2zSQLParser.COVAR_POP, 0); }
		public TerminalNode COVAR_SAMP() { return getToken(DB2zSQLParser.COVAR_SAMP, 0); }
		public TerminalNode CS() { return getToken(DB2zSQLParser.CS, 0); }
		public TerminalNode CUME_DIST() { return getToken(DB2zSQLParser.CUME_DIST, 0); }
		public TerminalNode DENSE_RANK() { return getToken(DB2zSQLParser.DENSE_RANK, 0); }
		public TerminalNode DESC() { return getToken(DB2zSQLParser.DESC, 0); }
		public TerminalNode EBCDIC() { return getToken(DB2zSQLParser.EBCDIC, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(DB2zSQLParser.EXCLUSIVE, 0); }
		public TerminalNode FIRST_VALUE() { return getToken(DB2zSQLParser.FIRST_VALUE, 0); }
		public TerminalNode FOLLOWING() { return getToken(DB2zSQLParser.FOLLOWING, 0); }
		public TerminalNode GROUPING() { return getToken(DB2zSQLParser.GROUPING, 0); }
		public TerminalNode IGNORE() { return getToken(DB2zSQLParser.IGNORE, 0); }
		public TerminalNode INDICATOR() { return getToken(DB2zSQLParser.INDICATOR, 0); }
		public TerminalNode INPUT() { return getToken(DB2zSQLParser.INPUT, 0); }
		public TerminalNode ISNULL() { return getToken(DB2zSQLParser.ISNULL, 0); }
		public TerminalNode LAG() { return getToken(DB2zSQLParser.LAG, 0); }
		public TerminalNode LARGE() { return getToken(DB2zSQLParser.LARGE, 0); }
		public TerminalNode LAST_VALUE() { return getToken(DB2zSQLParser.LAST_VALUE, 0); }
		public TerminalNode LEAD() { return getToken(DB2zSQLParser.LEAD, 0); }
		public TerminalNode LISTAGG() { return getToken(DB2zSQLParser.LISTAGG, 0); }
		public TerminalNode LOCKED() { return getToken(DB2zSQLParser.LOCKED, 0); }
		public TerminalNode LOCKS() { return getToken(DB2zSQLParser.LOCKS, 0); }
		public TerminalNode MEDIAN() { return getToken(DB2zSQLParser.MEDIAN, 0); }
		public TerminalNode MIXED() { return getToken(DB2zSQLParser.MIXED, 0); }
		public TerminalNode NOTNULL() { return getToken(DB2zSQLParser.NOTNULL, 0); }
		public TerminalNode NTH_VALUE() { return getToken(DB2zSQLParser.NTH_VALUE, 0); }
		public TerminalNode NTILE() { return getToken(DB2zSQLParser.NTILE, 0); }
		public TerminalNode NUMERIC() { return getToken(DB2zSQLParser.NUMERIC, 0); }
		public TerminalNode OBJECT() { return getToken(DB2zSQLParser.OBJECT, 0); }
		public TerminalNode OCTETS() { return getToken(DB2zSQLParser.OCTETS, 0); }
		public TerminalNode ONLY() { return getToken(DB2zSQLParser.ONLY, 0); }
		public TerminalNode OVER() { return getToken(DB2zSQLParser.OVER, 0); }
		public TerminalNode PASSING() { return getToken(DB2zSQLParser.PASSING, 0); }
		public TerminalNode PERCENTILE_CONT() { return getToken(DB2zSQLParser.PERCENTILE_CONT, 0); }
		public TerminalNode PERCENTILE_DISC() { return getToken(DB2zSQLParser.PERCENTILE_DISC, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(DB2zSQLParser.PERCENT_RANK, 0); }
		public TerminalNode PRECEDING() { return getToken(DB2zSQLParser.PRECEDING, 0); }
		public TerminalNode PREVIOUS() { return getToken(DB2zSQLParser.PREVIOUS, 0); }
		public TerminalNode RANGE() { return getToken(DB2zSQLParser.RANGE, 0); }
		public TerminalNode RANK() { return getToken(DB2zSQLParser.RANK, 0); }
		public TerminalNode RATIO_TO_REPORT() { return getToken(DB2zSQLParser.RATIO_TO_REPORT, 0); }
		public TerminalNode READ() { return getToken(DB2zSQLParser.READ, 0); }
		public TerminalNode REF() { return getToken(DB2zSQLParser.REF, 0); }
		public TerminalNode REGR_AVGX() { return getToken(DB2zSQLParser.REGR_AVGX, 0); }
		public TerminalNode REGR_AVGY() { return getToken(DB2zSQLParser.REGR_AVGY, 0); }
		public TerminalNode REGR_COUNT() { return getToken(DB2zSQLParser.REGR_COUNT, 0); }
		public TerminalNode REGR_ICPT() { return getToken(DB2zSQLParser.REGR_ICPT, 0); }
		public TerminalNode REGR_INTERCEPT() { return getToken(DB2zSQLParser.REGR_INTERCEPT, 0); }
		public TerminalNode REGR_R2() { return getToken(DB2zSQLParser.REGR_R2, 0); }
		public TerminalNode REGR_SLOPE() { return getToken(DB2zSQLParser.REGR_SLOPE, 0); }
		public TerminalNode REGR_SXX() { return getToken(DB2zSQLParser.REGR_SXX, 0); }
		public TerminalNode REGR_SXY() { return getToken(DB2zSQLParser.REGR_SXY, 0); }
		public TerminalNode REGR_SYY() { return getToken(DB2zSQLParser.REGR_SYY, 0); }
		public TerminalNode RESPECT() { return getToken(DB2zSQLParser.RESPECT, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(DB2zSQLParser.ROW_NUMBER, 0); }
		public TerminalNode ROWS() { return getToken(DB2zSQLParser.ROWS, 0); }
		public TerminalNode RR() { return getToken(DB2zSQLParser.RR, 0); }
		public TerminalNode RS() { return getToken(DB2zSQLParser.RS, 0); }
		public TerminalNode SBCS() { return getToken(DB2zSQLParser.SBCS, 0); }
		public TerminalNode SELECTIVITY() { return getToken(DB2zSQLParser.SELECTIVITY, 0); }
		public TerminalNode SETS() { return getToken(DB2zSQLParser.SETS, 0); }
		public TerminalNode SHARE() { return getToken(DB2zSQLParser.SHARE, 0); }
		public TerminalNode SKIP_() { return getToken(DB2zSQLParser.SKIP_, 0); }
		public TerminalNode STDDEV() { return getToken(DB2zSQLParser.STDDEV, 0); }
		public TerminalNode STDDEV_POP() { return getToken(DB2zSQLParser.STDDEV_POP, 0); }
		public TerminalNode STDDEV_SAMP() { return getToken(DB2zSQLParser.STDDEV_SAMP, 0); }
		public TerminalNode SUM() { return getToken(DB2zSQLParser.SUM, 0); }
		public TerminalNode TOKEN() { return getToken(DB2zSQLParser.TOKEN, 0); }
		public TerminalNode UNBOUNDED() { return getToken(DB2zSQLParser.UNBOUNDED, 0); }
		public TerminalNode UNPACK() { return getToken(DB2zSQLParser.UNPACK, 0); }
		public TerminalNode UR() { return getToken(DB2zSQLParser.UR, 0); }
		public TerminalNode USE() { return getToken(DB2zSQLParser.USE, 0); }
		public TerminalNode VAR() { return getToken(DB2zSQLParser.VAR, 0); }
		public TerminalNode VARIANCE() { return getToken(DB2zSQLParser.VARIANCE, 0); }
		public TerminalNode VARIANCE_SAMP() { return getToken(DB2zSQLParser.VARIANCE_SAMP, 0); }
		public TerminalNode VAR_POP() { return getToken(DB2zSQLParser.VAR_POP, 0); }
		public TerminalNode VAR_SAMP() { return getToken(DB2zSQLParser.VAR_SAMP, 0); }
		public TerminalNode VARYING() { return getToken(DB2zSQLParser.VARYING, 0); }
		public TerminalNode WITHOUT() { return getToken(DB2zSQLParser.WITHOUT, 0); }
		public TerminalNode XML() { return getToken(DB2zSQLParser.XML, 0); }
		public TerminalNode XMLAGG() { return getToken(DB2zSQLParser.XMLAGG, 0); }
		public TerminalNode COLUMNS() { return getToken(DB2zSQLParser.COLUMNS, 0); }
		public TerminalNode SQLID() { return getToken(DB2zSQLParser.SQLID, 0); }
		public TerminalNode ORDINALITY() { return getToken(DB2zSQLParser.ORDINALITY, 0); }
		public TerminalNode SYSTEM_TIME() { return getToken(DB2zSQLParser.SYSTEM_TIME, 0); }
		public TerminalNode BUSINESS_TIME() { return getToken(DB2zSQLParser.BUSINESS_TIME, 0); }
		public TerminalNode MULTIPLIER() { return getToken(DB2zSQLParser.MULTIPLIER, 0); }
		public TerminalNode UNNEST() { return getToken(DB2zSQLParser.UNNEST, 0); }
		public TerminalNode CROSS() { return getToken(DB2zSQLParser.CROSS, 0); }
		public TerminalNode CALLER() { return getToken(DB2zSQLParser.CALLER, 0); }
		public TerminalNode CLIENT() { return getToken(DB2zSQLParser.CLIENT, 0); }
		public TerminalNode POSITIONING() { return getToken(DB2zSQLParser.POSITIONING, 0); }
		public TerminalNode SCROLL() { return getToken(DB2zSQLParser.SCROLL, 0); }
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode INDEXBP() { return getToken(DB2zSQLParser.INDEXBP, 0); }
		public TerminalNode ACTION() { return getToken(DB2zSQLParser.ACTION, 0); }
		public TerminalNode ASSEMBLE() { return getToken(DB2zSQLParser.ASSEMBLE, 0); }
		public TerminalNode C_() { return getToken(DB2zSQLParser.C_, 0); }
		public TerminalNode CALLED() { return getToken(DB2zSQLParser.CALLED, 0); }
		public TerminalNode COBOL() { return getToken(DB2zSQLParser.COBOL, 0); }
		public TerminalNode DB2() { return getToken(DB2zSQLParser.DB2, 0); }
		public TerminalNode DEFINER() { return getToken(DB2zSQLParser.DEFINER, 0); }
		public TerminalNode DISPATCH() { return getToken(DB2zSQLParser.DISPATCH, 0); }
		public TerminalNode ENVIRONMENT() { return getToken(DB2zSQLParser.ENVIRONMENT, 0); }
		public TerminalNode FAILURE() { return getToken(DB2zSQLParser.FAILURE, 0); }
		public TerminalNode FAILURES() { return getToken(DB2zSQLParser.FAILURES, 0); }
		public TerminalNode JAVA() { return getToken(DB2zSQLParser.JAVA, 0); }
		public TerminalNode MAIN() { return getToken(DB2zSQLParser.MAIN, 0); }
		public TerminalNode NAME() { return getToken(DB2zSQLParser.NAME, 0); }
		public TerminalNode OPTIONS() { return getToken(DB2zSQLParser.OPTIONS, 0); }
		public TerminalNode PARALLEL() { return getToken(DB2zSQLParser.PARALLEL, 0); }
		public TerminalNode PLI() { return getToken(DB2zSQLParser.PLI, 0); }
		public TerminalNode REGISTERS() { return getToken(DB2zSQLParser.REGISTERS, 0); }
		public TerminalNode RESIDENT() { return getToken(DB2zSQLParser.RESIDENT, 0); }
		public TerminalNode SECURED() { return getToken(DB2zSQLParser.SECURED, 0); }
		public TerminalNode SPECIAL() { return getToken(DB2zSQLParser.SPECIAL, 0); }
		public TerminalNode SQL() { return getToken(DB2zSQLParser.SQL, 0); }
		public TerminalNode STOP() { return getToken(DB2zSQLParser.STOP, 0); }
		public TerminalNode SUB() { return getToken(DB2zSQLParser.SUB, 0); }
		public TerminalNode YES() { return getToken(DB2zSQLParser.YES, 0); }
		public TerminalNode APPLICATION() { return getToken(DB2zSQLParser.APPLICATION, 0); }
		public TerminalNode CHANGED() { return getToken(DB2zSQLParser.CHANGED, 0); }
		public TerminalNode COMPATIBILITY() { return getToken(DB2zSQLParser.COMPATIBILITY, 0); }
		public TerminalNode COMPRESS() { return getToken(DB2zSQLParser.COMPRESS, 0); }
		public TerminalNode COPY() { return getToken(DB2zSQLParser.COPY, 0); }
		public TerminalNode FREEPAGE() { return getToken(DB2zSQLParser.FREEPAGE, 0); }
		public TerminalNode GBPCACHE() { return getToken(DB2zSQLParser.GBPCACHE, 0); }
		public TerminalNode INCLUDE() { return getToken(DB2zSQLParser.INCLUDE, 0); }
		public TerminalNode MAXVALUE() { return getToken(DB2zSQLParser.MAXVALUE, 0); }
		public TerminalNode MINVALUE() { return getToken(DB2zSQLParser.MINVALUE, 0); }
		public TerminalNode PCTFREE() { return getToken(DB2zSQLParser.PCTFREE, 0); }
		public TerminalNode REGENERATE() { return getToken(DB2zSQLParser.REGENERATE, 0); }
		public TerminalNode MASK() { return getToken(DB2zSQLParser.MASK, 0); }
		public TerminalNode ENABLE() { return getToken(DB2zSQLParser.ENABLE, 0); }
		public TerminalNode PERMISSION() { return getToken(DB2zSQLParser.PERMISSION, 0); }
		public TerminalNode ATOMIC() { return getToken(DB2zSQLParser.ATOMIC, 0); }
		public TerminalNode SQLEXCEPTION() { return getToken(DB2zSQLParser.SQLEXCEPTION, 0); }
		public TerminalNode MERGE() { return getToken(DB2zSQLParser.MERGE, 0); }
		public TerminalNode MATCHED() { return getToken(DB2zSQLParser.MATCHED, 0); }
		public TerminalNode SQLSTATE() { return getToken(DB2zSQLParser.SQLSTATE, 0); }
		public TerminalNode MESSAGE_TEXT() { return getToken(DB2zSQLParser.MESSAGE_TEXT, 0); }
		public TerminalNode OVERRIDING() { return getToken(DB2zSQLParser.OVERRIDING, 0); }
		public TerminalNode PORTION() { return getToken(DB2zSQLParser.PORTION, 0); }
		public TerminalNode DB2SQL() { return getToken(DB2zSQLParser.DB2SQL, 0); }
		public TerminalNode DEBUG() { return getToken(DB2zSQLParser.DEBUG, 0); }
		public TerminalNode GENERAL() { return getToken(DB2zSQLParser.GENERAL, 0); }
		public TerminalNode MODE_() { return getToken(DB2zSQLParser.MODE_, 0); }
		public TerminalNode REXX() { return getToken(DB2zSQLParser.REXX, 0); }
		public TerminalNode CACHE() { return getToken(DB2zSQLParser.CACHE, 0); }
		public TerminalNode CYCLE() { return getToken(DB2zSQLParser.CYCLE, 0); }
		public TerminalNode INCREMENT() { return getToken(DB2zSQLParser.INCREMENT, 0); }
		public TerminalNode RESTART() { return getToken(DB2zSQLParser.RESTART, 0); }
		public TerminalNode DATACLAS() { return getToken(DB2zSQLParser.DATACLAS, 0); }
		public TerminalNode MGMTCLAS() { return getToken(DB2zSQLParser.MGMTCLAS, 0); }
		public TerminalNode REMOVE() { return getToken(DB2zSQLParser.REMOVE, 0); }
		public TerminalNode STORCLAS() { return getToken(DB2zSQLParser.STORCLAS, 0); }
		public TerminalNode ACCESS() { return getToken(DB2zSQLParser.ACCESS, 0); }
		public TerminalNode ACTIVATE() { return getToken(DB2zSQLParser.ACTIVATE, 0); }
		public TerminalNode ALWAYS() { return getToken(DB2zSQLParser.ALWAYS, 0); }
		public TerminalNode APPEND() { return getToken(DB2zSQLParser.APPEND, 0); }
		public TerminalNode ARCHIVE() { return getToken(DB2zSQLParser.ARCHIVE, 0); }
		public TerminalNode BUSINESS() { return getToken(DB2zSQLParser.BUSINESS, 0); }
		public TerminalNode CASCADE() { return getToken(DB2zSQLParser.CASCADE, 0); }
		public TerminalNode CHANGES() { return getToken(DB2zSQLParser.CHANGES, 0); }
		public TerminalNode CONTROL() { return getToken(DB2zSQLParser.CONTROL, 0); }
		public TerminalNode DEACTIVATE() { return getToken(DB2zSQLParser.DEACTIVATE, 0); }
		public TerminalNode DEFERRED() { return getToken(DB2zSQLParser.DEFERRED, 0); }
		public TerminalNode EACH() { return getToken(DB2zSQLParser.EACH, 0); }
		public TerminalNode ENFORCED() { return getToken(DB2zSQLParser.ENFORCED, 0); }
		public TerminalNode EXTRA() { return getToken(DB2zSQLParser.EXTRA, 0); }
		public TerminalNode FOREIGN() { return getToken(DB2zSQLParser.FOREIGN, 0); }
		public TerminalNode HIDDEN_() { return getToken(DB2zSQLParser.HIDDEN_, 0); }
		public TerminalNode HISTORY() { return getToken(DB2zSQLParser.HISTORY, 0); }
		public TerminalNode ID() { return getToken(DB2zSQLParser.ID, 0); }
		public TerminalNode IDENTITY() { return getToken(DB2zSQLParser.IDENTITY, 0); }
		public TerminalNode IMPLICITLY() { return getToken(DB2zSQLParser.IMPLICITLY, 0); }
		public TerminalNode INITIALLY() { return getToken(DB2zSQLParser.INITIALLY, 0); }
		public TerminalNode INLINE() { return getToken(DB2zSQLParser.INLINE, 0); }
		public TerminalNode OPERATION() { return getToken(DB2zSQLParser.OPERATION, 0); }
		public TerminalNode ORGANIZE() { return getToken(DB2zSQLParser.ORGANIZE, 0); }
		public TerminalNode OVERLAPS() { return getToken(DB2zSQLParser.OVERLAPS, 0); }
		public TerminalNode PACKAGE_NAME() { return getToken(DB2zSQLParser.PACKAGE_NAME, 0); }
		public TerminalNode PACKAGE_SCHEMA() { return getToken(DB2zSQLParser.PACKAGE_SCHEMA, 0); }
		public TerminalNode PACKAGE_VERSION() { return getToken(DB2zSQLParser.PACKAGE_VERSION, 0); }
		public TerminalNode PRIMARY() { return getToken(DB2zSQLParser.PRIMARY, 0); }
		public TerminalNode RESET() { return getToken(DB2zSQLParser.RESET, 0); }
		public TerminalNode ROTATE() { return getToken(DB2zSQLParser.ROTATE, 0); }
		public TerminalNode START() { return getToken(DB2zSQLParser.START, 0); }
		public TerminalNode SYSIBM() { return getToken(DB2zSQLParser.SYSIBM, 0); }
		public TerminalNode TRANSACTION() { return getToken(DB2zSQLParser.TRANSACTION, 0); }
		public TerminalNode XMLSCHEMA() { return getToken(DB2zSQLParser.XMLSCHEMA, 0); }
		public TerminalNode ELEMENT() { return getToken(DB2zSQLParser.ELEMENT, 0); }
		public TerminalNode URL() { return getToken(DB2zSQLParser.URL, 0); }
		public TerminalNode NAMESPACE() { return getToken(DB2zSQLParser.NAMESPACE, 0); }
		public TerminalNode LOCATION() { return getToken(DB2zSQLParser.LOCATION, 0); }
		public TerminalNode SYSXSR() { return getToken(DB2zSQLParser.SYSXSR, 0); }
		public TerminalNode ALGORITHM() { return getToken(DB2zSQLParser.ALGORITHM, 0); }
		public TerminalNode FIXEDLENGTH() { return getToken(DB2zSQLParser.FIXEDLENGTH, 0); }
		public TerminalNode HUFFMAN() { return getToken(DB2zSQLParser.HUFFMAN, 0); }
		public TerminalNode LOB() { return getToken(DB2zSQLParser.LOB, 0); }
		public TerminalNode LOG() { return getToken(DB2zSQLParser.LOG, 0); }
		public TerminalNode LOGGED() { return getToken(DB2zSQLParser.LOGGED, 0); }
		public TerminalNode MAXPARTITIONS() { return getToken(DB2zSQLParser.MAXPARTITIONS, 0); }
		public TerminalNode MAXROWS() { return getToken(DB2zSQLParser.MAXROWS, 0); }
		public TerminalNode MEMBER() { return getToken(DB2zSQLParser.MEMBER, 0); }
		public TerminalNode MOVE() { return getToken(DB2zSQLParser.MOVE, 0); }
		public TerminalNode PAGE() { return getToken(DB2zSQLParser.PAGE, 0); }
		public TerminalNode PAGENUM() { return getToken(DB2zSQLParser.PAGENUM, 0); }
		public TerminalNode PENDING() { return getToken(DB2zSQLParser.PENDING, 0); }
		public TerminalNode RELATIVE() { return getToken(DB2zSQLParser.RELATIVE, 0); }
		public TerminalNode SEGSIZE() { return getToken(DB2zSQLParser.SEGSIZE, 0); }
		public TerminalNode TRACKMOD() { return getToken(DB2zSQLParser.TRACKMOD, 0); }
		public TerminalNode ADDRESS() { return getToken(DB2zSQLParser.ADDRESS, 0); }
		public TerminalNode ATTRIBUTES() { return getToken(DB2zSQLParser.ATTRIBUTES, 0); }
		public TerminalNode AUTHENTICATION() { return getToken(DB2zSQLParser.AUTHENTICATION, 0); }
		public TerminalNode AUTHID() { return getToken(DB2zSQLParser.AUTHID, 0); }
		public TerminalNode CONTEXT() { return getToken(DB2zSQLParser.CONTEXT, 0); }
		public TerminalNode JOBNAME() { return getToken(DB2zSQLParser.JOBNAME, 0); }
		public TerminalNode OWNER() { return getToken(DB2zSQLParser.OWNER, 0); }
		public TerminalNode PROFILE() { return getToken(DB2zSQLParser.PROFILE, 0); }
		public TerminalNode QUALIFIER() { return getToken(DB2zSQLParser.QUALIFIER, 0); }
		public TerminalNode SERVAUTH() { return getToken(DB2zSQLParser.SERVAUTH, 0); }
		public TerminalNode TRUSTED() { return getToken(DB2zSQLParser.TRUSTED, 0); }
		public TerminalNode SECTION() { return getToken(DB2zSQLParser.SECTION, 0); }
		public TerminalNode ACTIVE() { return getToken(DB2zSQLParser.ACTIVE, 0); }
		public TerminalNode VERSION() { return getToken(DB2zSQLParser.VERSION, 0); }
		public TerminalNode ALIAS() { return getToken(DB2zSQLParser.ALIAS, 0); }
		public TerminalNode WORK() { return getToken(DB2zSQLParser.WORK, 0); }
		public TerminalNode WORKFILE() { return getToken(DB2zSQLParser.WORKFILE, 0); }
		public TerminalNode SYSDEFLT() { return getToken(DB2zSQLParser.SYSDEFLT, 0); }
		public TerminalNode NULTERM() { return getToken(DB2zSQLParser.NULTERM, 0); }
		public TerminalNode STRUCTURE() { return getToken(DB2zSQLParser.STRUCTURE, 0); }
		public TerminalNode GENERIC() { return getToken(DB2zSQLParser.GENERIC, 0); }
		public TerminalNode TEMPORARY() { return getToken(DB2zSQLParser.TEMPORARY, 0); }
		public TerminalNode DEFER() { return getToken(DB2zSQLParser.DEFER, 0); }
		public TerminalNode DEFINE() { return getToken(DB2zSQLParser.DEFINE, 0); }
		public TerminalNode EXCLUDE() { return getToken(DB2zSQLParser.EXCLUDE, 0); }
		public TerminalNode GENERATE() { return getToken(DB2zSQLParser.GENERATE, 0); }
		public TerminalNode KEYS() { return getToken(DB2zSQLParser.KEYS, 0); }
		public TerminalNode XMLPATTERN() { return getToken(DB2zSQLParser.XMLPATTERN, 0); }
		public SqlKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSqlKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSqlKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSqlKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SqlKeywordContext sqlKeyword() throws RecognitionException {
		SqlKeywordContext _localctx = new SqlKeywordContext(_ctx, getState());
		enterRule(_localctx, 890, RULE_sqlKeyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6596);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << ALL) | (1L << ALLOCATE) | (1L << ALLOW) | (1L << ALTER) | (1L << ALTERAND) | (1L << ANY) | (1L << ARRAY) | (1L << ARRAY_EXISTS) | (1L << AS) | (1L << ASENSITIVE) | (1L << ASSOCIATE) | (1L << ASUTIME) | (1L << AT) | (1L << AUDIT) | (1L << AUX) | (1L << AUXILIARY) | (1L << BEFORE) | (1L << BEGIN) | (1L << BETWEEN) | (1L << BUFFERPOOL) | (1L << BY) | (1L << CALL) | (1L << CAPTURE) | (1L << CASCADED) | (1L << CASE) | (1L << CAST) | (1L << CCSID) | (1L << CHAR) | (1L << CHARACTER) | (1L << CHECK) | (1L << CLONE) | (1L << CLOSE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLUSTER - 64)) | (1L << (COLLECTION - 64)) | (1L << (COLLID - 64)) | (1L << (COLUMN - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (CONCAT - 64)) | (1L << (CONDITION - 64)) | (1L << (CONNECT - 64)) | (1L << (CONNECTION - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONTAINS - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CREATE - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT - 64)) | (1L << (CURRENT_LC_CTYPE - 64)) | (1L << (CURRVAL - 64)) | (1L << (CURSOR - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DAYS - 64)) | (1L << (DBINFO - 64)) | (1L << (DECLARE - 64)) | (1L << (DEFAULT - 64)) | (1L << (DELETE - 64)) | (1L << (DESCRIPTOR - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DISABLE - 64)) | (1L << (DISALLOW - 64)) | (1L << (DISTINCT - 64)) | (1L << (DO - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (DSSIZE - 64)) | (1L << (DYNAMIC - 64)) | (1L << (EDITPROC - 64)) | (1L << (ELSE - 64)) | (1L << (ELSEIF - 64)) | (1L << (ENCODING - 64)) | (1L << (ENCRYPTION - 64)) | (1L << (END - 64)) | (1L << (END_EXEC - 64)) | (1L << (ENDING - 64)) | (1L << (ERASE - 64)) | (1L << (ESCAPE - 64)) | (1L << (EXCEPT - 64)) | (1L << (EXCEPTION - 64)) | (1L << (EXEC_SQL - 64)) | (1L << (EXECUTE - 64)) | (1L << (EXISTS - 64)) | (1L << (EXIT - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FENCED - 64)) | (1L << (FETCH - 64)) | (1L << (FIELDPROC - 64)) | (1L << (FINAL - 64)) | (1L << (FIRST - 64)) | (1L << (FOR - 64)) | (1L << (FREE - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (FROM - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GENERATED - 128)) | (1L << (GET - 128)) | (1L << (GLOBAL - 128)) | (1L << (GO - 128)) | (1L << (GOTO - 128)) | (1L << (GRANT - 128)) | (1L << (GROUP - 128)) | (1L << (HANDLER - 128)) | (1L << (HAVING - 128)) | (1L << (HOLD - 128)) | (1L << (HOUR - 128)) | (1L << (HOURS - 128)) | (1L << (IF - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (IN - 128)) | (1L << (INCLUSIVE - 128)) | (1L << (INDEX - 128)) | (1L << (INDEXBP - 128)) | (1L << (INHERIT - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSENSITIVE - 128)) | (1L << (INSERT - 128)) | (1L << (INTERSECT - 128)) | (1L << (INTO - 128)) | (1L << (IS - 128)) | (1L << (ISOBID - 128)) | (1L << (ITERATE - 128)) | (1L << (JAR - 128)) | (1L << (JOIN - 128)) | (1L << (KEEP - 128)) | (1L << (KEY - 128)) | (1L << (LABEL - 128)) | (1L << (LANGUAGE - 128)) | (1L << (LAST - 128)) | (1L << (LC_CTYPE - 128)) | (1L << (LEAVE - 128)) | (1L << (LEFT - 128)) | (1L << (LIKE - 128)) | (1L << (LIMIT - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCALE - 128)) | (1L << (LOCATOR - 128)) | (1L << (LOCATORS - 128)) | (1L << (LOCK - 128)) | (1L << (LOCKMAX - 128)) | (1L << (LOCKSIZE - 128)) | (1L << (LONG - 128)) | (1L << (LOOP - 128)) | (1L << (MAINTAINED - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MICROSECOND - 128)) | (1L << (MICROSECONDS - 128)) | (1L << (MODIFIES - 128)) | (1L << (MONTH - 128)) | (1L << (MONTHS - 128)) | (1L << (NEXT - 128)) | (1L << (NEXTVAL - 128)) | (1L << (NO - 128)) | (1L << (NONE - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (NOT - 192)) | (1L << (NULL - 192)) | (1L << (NULLS - 192)) | (1L << (NUMPARTS - 192)) | (1L << (OBID - 192)) | (1L << (OF - 192)) | (1L << (OFFSET - 192)) | (1L << (OLD - 192)) | (1L << (ON - 192)) | (1L << (OPEN - 192)) | (1L << (OPTIMIZATION - 192)) | (1L << (OPTIMIZE - 192)) | (1L << (OR - 192)) | (1L << (ORDER - 192)) | (1L << (ORGANIZATION - 192)) | (1L << (OUT - 192)) | (1L << (OUTER - 192)) | (1L << (PACKAGE - 192)) | (1L << (PADDED - 192)) | (1L << (PARAMETER - 192)) | (1L << (PART - 192)) | (1L << (PARTITION - 192)) | (1L << (PARTITIONED - 192)) | (1L << (PARTITIONING - 192)) | (1L << (PATH - 192)) | (1L << (PERIOD - 192)) | (1L << (PIECESIZE - 192)) | (1L << (PLAN - 192)) | (1L << (PRECISION - 192)) | (1L << (PREPARE - 192)) | (1L << (PREVVAL - 192)) | (1L << (PRIOR - 192)) | (1L << (PRIQTY - 192)) | (1L << (PRIVILEGES - 192)) | (1L << (PROCEDURE - 192)) | (1L << (PROGRAM - 192)) | (1L << (PSID - 192)) | (1L << (PUBLIC - 192)) | (1L << (QUERY - 192)) | (1L << (QUERYNO - 192)) | (1L << (READS - 192)) | (1L << (REFERENCES - 192)) | (1L << (REFRESH - 192)) | (1L << (RELEASE - 192)) | (1L << (RENAME - 192)) | (1L << (REPEAT - 192)) | (1L << (RESIGNAL - 192)) | (1L << (RESTRICT - 192)) | (1L << (RESULT - 192)) | (1L << (RESULT_SET_LOCATOR - 192)) | (1L << (RETURN - 192)) | (1L << (RETURNS - 192)) | (1L << (REVOKE - 192)) | (1L << (RIGHT - 192)) | (1L << (ROLE - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROLLUP - 192)) | (1L << (ROUND_CEILING - 192)) | (1L << (ROUND_DOWN - 192)) | (1L << (ROUND_FLOOR - 192)) | (1L << (ROUND_HALF_DOWN - 192)) | (1L << (ROUND_HALF_EVEN - 192)) | (1L << (ROUND_HALF_UP - 192)) | (1L << (ROUND_UP - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (ROW - 256)) | (1L << (ROWSET - 256)) | (1L << (RUN - 256)) | (1L << (SAVEPOINT - 256)) | (1L << (SCHEMA - 256)) | (1L << (SCRATCHPAD - 256)) | (1L << (SECOND - 256)) | (1L << (SECONDS - 256)) | (1L << (SECQTY - 256)) | (1L << (SECURITY - 256)) | (1L << (SELECT - 256)) | (1L << (SENSITIVE - 256)) | (1L << (SEQUENCE - 256)) | (1L << (SET - 256)) | (1L << (SIGNAL - 256)) | (1L << (SIMPLE - 256)) | (1L << (SOME - 256)) | (1L << (SOURCE - 256)) | (1L << (SPECIFIC - 256)) | (1L << (STANDARD - 256)) | (1L << (STATEMENT - 256)) | (1L << (STATIC - 256)) | (1L << (STAY - 256)) | (1L << (STOGROUP - 256)) | (1L << (STORES - 256)) | (1L << (STYLE - 256)) | (1L << (SUMMARY - 256)) | (1L << (SYNONYM - 256)) | (1L << (SYSDATE - 256)) | (1L << (SYSTEM - 256)) | (1L << (SYSTIMESTAMP - 256)) | (1L << (TABLE - 256)) | (1L << (TABLESPACE - 256)) | (1L << (THEN - 256)) | (1L << (TO - 256)) | (1L << (TRIGGER - 256)) | (1L << (TRUNCATE - 256)) | (1L << (TYPE - 256)) | (1L << (UNDO - 256)) | (1L << (UNION - 256)) | (1L << (UNIQUE - 256)) | (1L << (UNTIL - 256)) | (1L << (UPDATE - 256)) | (1L << (USING - 256)) | (1L << (VALIDPROC - 256)) | (1L << (VALUE - 256)) | (1L << (VALUES - 256)) | (1L << (VARIABLE - 256)) | (1L << (VARIANT - 256)) | (1L << (VCAT - 256)) | (1L << (VERSIONING - 256)) | (1L << (VIEW - 256)) | (1L << (VOLATILE - 256)) | (1L << (VOLUMES - 256)) | (1L << (WHEN - 256)) | (1L << (WHENEVER - 256)) | (1L << (WHERE - 256)) | (1L << (WHILE - 256)) | (1L << (WITH - 256)) | (1L << (WLM - 256)) | (1L << (XMLCAST - 256)) | (1L << (XMLEXISTS - 256)) | (1L << (XMLNAMESPACES - 256)) | (1L << (YEAR - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (YEARS - 320)) | (1L << (ZONE - 320)) | (1L << (AND - 320)) | (1L << (ARRAY_AGG - 320)) | (1L << (ASC - 320)) | (1L << (AVG - 320)) | (1L << (BIT - 320)) | (1L << (CHANGE - 320)) | (1L << (CODEUNITS16 - 320)) | (1L << (CODEUNITS32 - 320)) | (1L << (CORR - 320)) | (1L << (CORRELATION - 320)) | (1L << (COVAR - 320)) | (1L << (COVARIANCE - 320)) | (1L << (COVARIANCE_SAMP - 320)) | (1L << (COVAR_POP - 320)) | (1L << (COVAR_SAMP - 320)) | (1L << (CS - 320)) | (1L << (CUME_DIST - 320)) | (1L << (DENSE_RANK - 320)) | (1L << (DESC - 320)) | (1L << (EBCDIC - 320)) | (1L << (EXCLUSIVE - 320)) | (1L << (FIRST_VALUE - 320)) | (1L << (FOLLOWING - 320)) | (1L << (GROUPING - 320)) | (1L << (IGNORE - 320)) | (1L << (INDICATOR - 320)) | (1L << (INPUT - 320)) | (1L << (ISNULL - 320)) | (1L << (LAG - 320)) | (1L << (LARGE - 320)) | (1L << (LAST_VALUE - 320)) | (1L << (LEAD - 320)) | (1L << (LISTAGG - 320)) | (1L << (LOCKED - 320)) | (1L << (LOCKS - 320)) | (1L << (MEDIAN - 320)) | (1L << (MINUTES - 320)) | (1L << (MIXED - 320)) | (1L << (NOTNULL - 320)) | (1L << (NTH_VALUE - 320)) | (1L << (NTILE - 320)) | (1L << (NUMERIC - 320)) | (1L << (OBJECT - 320)) | (1L << (OCTETS - 320)) | (1L << (ONLY - 320)) | (1L << (OVER - 320)) | (1L << (PASSING - 320)) | (1L << (PERCENTILE_CONT - 320)) | (1L << (PERCENTILE_DISC - 320)) | (1L << (PERCENT_RANK - 320)) | (1L << (PRECEDING - 320)) | (1L << (PREVIOUS - 320)) | (1L << (RANGE - 320)) | (1L << (RANK - 320)) | (1L << (RATIO_TO_REPORT - 320)) | (1L << (READ - 320)) | (1L << (REF - 320)) | (1L << (REGR_AVGX - 320)) | (1L << (REGR_AVGY - 320)) | (1L << (REGR_COUNT - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (REGR_ICPT - 384)) | (1L << (REGR_INTERCEPT - 384)) | (1L << (REGR_R2 - 384)) | (1L << (REGR_SLOPE - 384)) | (1L << (REGR_SXX - 384)) | (1L << (REGR_SXY - 384)) | (1L << (REGR_SYY - 384)) | (1L << (RESPECT - 384)) | (1L << (ROW_NUMBER - 384)) | (1L << (ROWS - 384)) | (1L << (RR - 384)) | (1L << (RS - 384)) | (1L << (SBCS - 384)) | (1L << (SELECTIVITY - 384)) | (1L << (SETS - 384)) | (1L << (SHARE - 384)) | (1L << (SKIP_ - 384)) | (1L << (STDDEV - 384)) | (1L << (STDDEV_POP - 384)) | (1L << (STDDEV_SAMP - 384)) | (1L << (SUM - 384)) | (1L << (TOKEN - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNPACK - 384)) | (1L << (UR - 384)) | (1L << (USE - 384)) | (1L << (VAR - 384)) | (1L << (VARIANCE - 384)) | (1L << (VARIANCE_SAMP - 384)) | (1L << (VAR_POP - 384)) | (1L << (VAR_SAMP - 384)) | (1L << (VARYING - 384)) | (1L << (WITHOUT - 384)) | (1L << (XML - 384)) | (1L << (XMLAGG - 384)) | (1L << (COLUMNS - 384)) | (1L << (SQLID - 384)) | (1L << (ORDINALITY - 384)) | (1L << (SYSTEM_TIME - 384)) | (1L << (BUSINESS_TIME - 384)) | (1L << (MULTIPLIER - 384)) | (1L << (UNNEST - 384)) | (1L << (CROSS - 384)) | (1L << (CALLER - 384)) | (1L << (CLIENT - 384)) | (1L << (POSITIONING - 384)) | (1L << (SCROLL - 384)) | (1L << (ACTION - 384)) | (1L << (ASSEMBLE - 384)) | (1L << (C_ - 384)) | (1L << (CALLED - 384)) | (1L << (COBOL - 384)) | (1L << (DB2 - 384)) | (1L << (DEFINER - 384)) | (1L << (DISPATCH - 384)) | (1L << (ENVIRONMENT - 384)) | (1L << (FAILURE - 384)) | (1L << (FAILURES - 384)) | (1L << (JAVA - 384)) | (1L << (MAIN - 384)) | (1L << (NAME - 384)) | (1L << (OPTIONS - 384)) | (1L << (PARALLEL - 384)) | (1L << (PLI - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (REGISTERS - 448)) | (1L << (RESIDENT - 448)) | (1L << (SECURED - 448)) | (1L << (SPECIAL - 448)) | (1L << (SQL - 448)) | (1L << (STOP - 448)) | (1L << (SUB - 448)) | (1L << (YES - 448)) | (1L << (APPLICATION - 448)) | (1L << (CHANGED - 448)) | (1L << (COMPATIBILITY - 448)) | (1L << (COMPRESS - 448)) | (1L << (COPY - 448)) | (1L << (FREEPAGE - 448)) | (1L << (GBPCACHE - 448)) | (1L << (INCLUDE - 448)) | (1L << (MAXVALUE - 448)) | (1L << (MINVALUE - 448)) | (1L << (PCTFREE - 448)) | (1L << (REGENERATE - 448)) | (1L << (MASK - 448)) | (1L << (ENABLE - 448)) | (1L << (PERMISSION - 448)) | (1L << (ATOMIC - 448)) | (1L << (SQLEXCEPTION - 448)) | (1L << (MERGE - 448)) | (1L << (MATCHED - 448)) | (1L << (SQLSTATE - 448)) | (1L << (MESSAGE_TEXT - 448)) | (1L << (OVERRIDING - 448)) | (1L << (PORTION - 448)) | (1L << (DB2SQL - 448)) | (1L << (DEBUG - 448)) | (1L << (GENERAL - 448)) | (1L << (MODE_ - 448)) | (1L << (REXX - 448)) | (1L << (CACHE - 448)) | (1L << (CYCLE - 448)) | (1L << (INCREMENT - 448)) | (1L << (RESTART - 448)) | (1L << (DATACLAS - 448)) | (1L << (MGMTCLAS - 448)) | (1L << (REMOVE - 448)) | (1L << (STORCLAS - 448)) | (1L << (ACCESS - 448)) | (1L << (ACTIVATE - 448)) | (1L << (ALWAYS - 448)) | (1L << (APPEND - 448)) | (1L << (ARCHIVE - 448)) | (1L << (BUSINESS - 448)) | (1L << (CASCADE - 448)) | (1L << (CHANGES - 448)) | (1L << (CONTROL - 448)) | (1L << (DEACTIVATE - 448)) | (1L << (DEFERRED - 448)) | (1L << (EACH - 448)) | (1L << (ENFORCED - 448)) | (1L << (EXTRA - 448)) | (1L << (FOREIGN - 448)) | (1L << (HIDDEN_ - 448)) | (1L << (HISTORY - 448)) | (1L << (ID - 448)) | (1L << (IDENTITY - 448)) | (1L << (IMPLICITLY - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (INITIALLY - 512)) | (1L << (INLINE - 512)) | (1L << (OPERATION - 512)) | (1L << (ORGANIZE - 512)) | (1L << (OVERLAPS - 512)) | (1L << (PACKAGE_NAME - 512)) | (1L << (PACKAGE_SCHEMA - 512)) | (1L << (PACKAGE_VERSION - 512)) | (1L << (PRIMARY - 512)) | (1L << (RESET - 512)) | (1L << (ROTATE - 512)) | (1L << (START - 512)) | (1L << (SYSIBM - 512)) | (1L << (TRANSACTION - 512)) | (1L << (XMLSCHEMA - 512)) | (1L << (ELEMENT - 512)) | (1L << (URL - 512)) | (1L << (NAMESPACE - 512)) | (1L << (LOCATION - 512)) | (1L << (SYSXSR - 512)) | (1L << (ALGORITHM - 512)) | (1L << (FIXEDLENGTH - 512)) | (1L << (HUFFMAN - 512)) | (1L << (LOB - 512)) | (1L << (LOG - 512)) | (1L << (LOGGED - 512)) | (1L << (MAXPARTITIONS - 512)) | (1L << (MAXROWS - 512)) | (1L << (MEMBER - 512)) | (1L << (MOVE - 512)) | (1L << (PAGE - 512)) | (1L << (PAGENUM - 512)) | (1L << (PENDING - 512)) | (1L << (RELATIVE - 512)) | (1L << (SEGSIZE - 512)) | (1L << (TRACKMOD - 512)) | (1L << (ADDRESS - 512)) | (1L << (ATTRIBUTES - 512)) | (1L << (AUTHENTICATION - 512)) | (1L << (AUTHID - 512)) | (1L << (CONTEXT - 512)) | (1L << (JOBNAME - 512)) | (1L << (OWNER - 512)) | (1L << (PROFILE - 512)) | (1L << (QUALIFIER - 512)) | (1L << (SERVAUTH - 512)) | (1L << (TRUSTED - 512)) | (1L << (SECTION - 512)) | (1L << (ACTIVE - 512)) | (1L << (VERSION - 512)) | (1L << (ALIAS - 512)) | (1L << (WORK - 512)) | (1L << (WORKFILE - 512)) | (1L << (SYSDEFLT - 512)) | (1L << (NULTERM - 512)) | (1L << (STRUCTURE - 512)) | (1L << (GENERIC - 512)) | (1L << (TEMPORARY - 512)) | (1L << (DEFER - 512)) | (1L << (DEFINE - 512)) | (1L << (EXCLUDE - 512)) | (1L << (GENERATE - 512)) | (1L << (KEYS - 512)) | (1L << (XMLPATTERN - 512)))) != 0) || _la==MINUTE || ((((_la - 806)) & ~0x3f) == 0 && ((1L << (_la - 806)) & ((1L << (CURRENT_DATE - 806)) | (1L << (CURRENT_PATH - 806)) | (1L << (CURRENT_SCHEMA - 806)) | (1L << (CURRENT_SERVER - 806)) | (1L << (CURRENT_TIME - 806)) | (1L << (CURRENT_TIMESTAMP - 806)) | (1L << (CURRENT_TIME_ZONE - 806)) | (1L << (SESSION_USER - 806)) | (1L << (USER - 806)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	private static final int _serializedATNSegments = 3;
	private static final String _serializedATNSegment0 =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0350\u19c9\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
		"\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d"+
		"\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142"+
		"\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145\4\u0146\t\u0146"+
		"\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b"+
		"\t\u014b\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f"+
		"\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153\4\u0154"+
		"\t\u0154\4\u0155\t\u0155\4\u0156\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158"+
		"\4\u0159\t\u0159\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d"+
		"\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\4\u0161\t\u0161"+
		"\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164\t\u0164\4\u0165\t\u0165\4\u0166"+
		"\t\u0166\4\u0167\t\u0167\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a"+
		"\4\u016b\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e\4\u016f"+
		"\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172\t\u0172\4\u0173\t\u0173"+
		"\4\u0174\t\u0174\4\u0175\t\u0175\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178"+
		"\t\u0178\4\u0179\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c"+
		"\4\u017d\t\u017d\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180\t\u0180\4\u0181"+
		"\t\u0181\4\u0182\t\u0182\4\u0183\t\u0183\4\u0184\t\u0184\4\u0185\t\u0185"+
		"\4\u0186\t\u0186\4\u0187\t\u0187\4\u0188\t\u0188\4\u0189\t\u0189\4\u018a"+
		"\t\u018a\4\u018b\t\u018b\4\u018c\t\u018c\4\u018d\t\u018d\4\u018e\t\u018e"+
		"\4\u018f\t\u018f\4\u0190\t\u0190\4\u0191\t\u0191\4\u0192\t\u0192\4\u0193"+
		"\t\u0193\4\u0194\t\u0194\4\u0195\t\u0195\4\u0196\t\u0196\4\u0197\t\u0197"+
		"\4\u0198\t\u0198\4\u0199\t\u0199\4\u019a\t\u019a\4\u019b\t\u019b\4\u019c"+
		"\t\u019c\4\u019d\t\u019d\4\u019e\t\u019e\4\u019f\t\u019f\4\u01a0\t\u01a0"+
		"\4\u01a1\t\u01a1\4\u01a2\t\u01a2\4\u01a3\t\u01a3\4\u01a4\t\u01a4\4\u01a5"+
		"\t\u01a5\4\u01a6\t\u01a6\4\u01a7\t\u01a7\4\u01a8\t\u01a8\4\u01a9\t\u01a9"+
		"\4\u01aa\t\u01aa\4\u01ab\t\u01ab\4\u01ac\t\u01ac\4\u01ad\t\u01ad\4\u01ae"+
		"\t\u01ae\4\u01af\t\u01af\4\u01b0\t\u01b0\4\u01b1\t\u01b1\4\u01b2\t\u01b2"+
		"\4\u01b3\t\u01b3\4\u01b4\t\u01b4\4\u01b5\t\u01b5\4\u01b6\t\u01b6\4\u01b7"+
		"\t\u01b7\4\u01b8\t\u01b8\4\u01b9\t\u01b9\4\u01ba\t\u01ba\4\u01bb\t\u01bb"+
		"\4\u01bc\t\u01bc\4\u01bd\t\u01bd\4\u01be\t\u01be\4\u01bf\t\u01bf\3\2\7"+
		"\2\u0380\n\2\f\2\16\2\u0383\13\2\3\2\5\2\u0386\n\2\3\3\5\3\u0389\n\3\3"+
		"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3"+
		"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3"+
		"\3\3\3\3\3\3\3\5\3\u03b2\n\3\3\3\3\3\3\3\5\3\u03b7\n\3\3\3\5\3\u03ba\n"+
		"\3\3\4\3\4\3\4\3\4\5\4\u03c0\n\4\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u03ca"+
		"\n\5\3\5\5\5\u03cd\n\5\3\5\3\5\3\5\3\5\7\5\u03d3\n\5\f\5\16\5\u03d6\13"+
		"\5\3\5\3\5\3\5\5\5\u03db\n\5\3\6\3\6\3\7\3\7\3\b\3\b\3\b\3\b\5\b\u03e5"+
		"\n\b\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\5\t\u03ef\n\t\5\t\u03f1\n\t\3\n\3"+
		"\n\3\n\3\n\3\n\3\n\5\n\u03f9\n\n\3\13\3\13\3\13\3\13\3\13\3\13\3\13\5"+
		"\13\u0402\n\13\3\13\3\13\3\13\3\13\5\13\u0408\n\13\7\13\u040a\n\13\f\13"+
		"\16\13\u040d\13\13\3\13\3\13\3\f\3\f\3\f\3\f\3\f\3\f\5\f\u0417\n\f\3\r"+
		"\3\r\3\r\3\r\7\r\u041d\n\r\f\r\16\r\u0420\13\r\3\r\3\r\3\16\3\16\3\16"+
		"\3\16\3\16\3\16\3\16\3\16\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3\20\3\20"+
		"\3\20\3\20\3\20\6\20\u0438\n\20\r\20\16\20\u0439\3\21\3\21\3\21\3\21\3"+
		"\21\3\21\3\21\7\21\u0443\n\21\f\21\16\21\u0446\13\21\3\21\3\21\5\21\u044a"+
		"\n\21\3\21\3\21\3\21\5\21\u044f\n\21\3\21\5\21\u0452\n\21\3\21\6\21\u0455"+
		"\n\21\r\21\16\21\u0456\3\22\3\22\3\22\3\22\5\22\u045d\n\22\3\22\7\22\u0460"+
		"\n\22\f\22\16\22\u0463\13\22\3\22\3\22\3\22\7\22\u0468\n\22\f\22\16\22"+
		"\u046b\13\22\5\22\u046d\n\22\3\23\3\23\3\23\3\23\3\23\3\23\5\23\u0475"+
		"\n\23\3\24\3\24\3\24\3\24\3\24\3\24\5\24\u047d\n\24\3\25\3\25\3\25\3\25"+
		"\6\25\u0483\n\25\r\25\16\25\u0484\3\26\3\26\3\26\3\26\6\26\u048b\n\26"+
		"\r\26\16\26\u048c\3\27\3\27\3\27\3\27\6\27\u0493\n\27\r\27\16\27\u0494"+
		"\3\30\3\30\3\30\3\30\6\30\u049b\n\30\r\30\16\30\u049c\3\31\3\31\3\31\3"+
		"\31\3\31\5\31\u04a4\n\31\3\31\3\31\7\31\u04a8\n\31\f\31\16\31\u04ab\13"+
		"\31\3\31\5\31\u04ae\n\31\3\31\5\31\u04b1\n\31\3\32\3\32\3\32\3\32\3\32"+
		"\3\32\3\32\5\32\u04ba\n\32\3\32\3\32\3\33\3\33\3\33\3\33\3\33\6\33\u04c3"+
		"\n\33\r\33\16\33\u04c4\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\5\34\u04cf"+
		"\n\34\3\35\3\35\3\35\5\35\u04d4\n\35\3\35\3\35\3\35\3\35\3\35\7\35\u04db"+
		"\n\35\f\35\16\35\u04de\13\35\3\35\3\35\3\35\3\35\3\35\5\35\u04e5\n\35"+
		"\3\36\3\36\3\36\3\36\3\37\3\37\3\37\5\37\u04ee\n\37\3\37\3\37\3\37\3\37"+
		"\3\37\5\37\u04f5\n\37\3\37\3\37\3\37\3\37\3\37\5\37\u04fc\n\37\7\37\u04fe"+
		"\n\37\f\37\16\37\u0501\13\37\3\37\3\37\3\37\5\37\u0506\n\37\3\37\3\37"+
		"\3 \3 \3 \3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\5!\u051a\n!\3!\3!\3!"+
		"\3!\3!\3!\3!\5!\u0523\n!\3!\5!\u0526\n!\3!\3!\3!\3!\3!\3!\3!\3!\5!\u0530"+
		"\n!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\5!\u053e\n!\3!\3!\3!\3!\3!\3!"+
		"\3!\3!\3!\3!\3!\5!\u054b\n!\3!\3!\3!\3!\5!\u0551\n!\3\"\3\"\5\"\u0555"+
		"\n\"\3#\3#\3#\3#\5#\u055b\n#\3#\5#\u055e\n#\3#\3#\5#\u0562\n#\3$\3$\5"+
		"$\u0566\n$\3$\3$\3$\5$\u056b\n$\3%\3%\3%\3%\3%\3%\5%\u0573\n%\3%\3%\3"+
		"%\3%\3%\5%\u057a\n%\3%\3%\3%\3%\3%\3&\3&\3&\3&\7&\u0585\n&\f&\16&\u0588"+
		"\13&\3\'\3\'\3\'\3\'\5\'\u058e\n\'\3(\3(\3(\3(\3(\3(\3(\7(\u0597\n(\f"+
		"(\16(\u059a\13(\5(\u059c\n(\3(\3(\6(\u05a0\n(\r(\16(\u05a1\3)\3)\3)\3"+
		")\3)\3)\3)\7)\u05ab\n)\f)\16)\u05ae\13)\5)\u05b0\n)\3)\3)\6)\u05b4\n)"+
		"\r)\16)\u05b5\3*\3*\3*\3*\3*\3*\3*\7*\u05bf\n*\f*\16*\u05c2\13*\5*\u05c4"+
		"\n*\3*\3*\6*\u05c8\n*\r*\16*\u05c9\3+\3+\3+\3+\3+\3+\3+\7+\u05d3\n+\f"+
		"+\16+\u05d6\13+\5+\u05d8\n+\3+\3+\6+\u05dc\n+\r+\16+\u05dd\3,\3,\3,\3"+
		",\3,\3,\3,\3,\3,\7,\u05e9\n,\f,\16,\u05ec\13,\3,\3,\3,\3,\5,\u05f2\n,"+
		"\3,\3,\5,\u05f6\n,\3-\3-\3-\3-\3-\5-\u05fd\n-\5-\u05ff\n-\3-\3-\3-\3-"+
		"\3-\3-\3-\5-\u0608\n-\3-\5-\u060b\n-\3-\3-\3-\5-\u0610\n-\3-\5-\u0613"+
		"\n-\7-\u0615\n-\f-\16-\u0618\13-\3-\3-\3-\3-\5-\u061e\n-\3-\3-\3-\5-\u0623"+
		"\n-\3-\7-\u0626\n-\f-\16-\u0629\13-\3.\3.\3.\3.\3.\7.\u0630\n.\f.\16."+
		"\u0633\13.\3/\3/\3/\3/\3/\3/\5/\u063b\n/\3/\5/\u063e\n/\3/\3/\3/\3/\3"+
		"/\3/\5/\u0646\n/\3\60\3\60\3\60\3\60\3\60\3\60\5\60\u064e\n\60\3\60\5"+
		"\60\u0651\n\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\5\60\u065c"+
		"\n\60\3\61\3\61\3\61\5\61\u0661\n\61\3\61\3\61\3\61\3\61\3\61\3\61\7\61"+
		"\u0669\n\61\f\61\16\61\u066c\13\61\3\61\3\61\5\61\u0670\n\61\3\61\6\61"+
		"\u0673\n\61\r\61\16\61\u0674\3\62\3\62\3\62\3\62\5\62\u067b\n\62\3\63"+
		"\5\63\u067e\n\63\3\63\3\63\3\63\5\63\u0683\n\63\3\63\3\63\3\63\3\63\3"+
		"\63\5\63\u068a\n\63\5\63\u068c\n\63\3\64\3\64\3\64\3\65\5\65\u0692\n\65"+
		"\3\65\5\65\u0695\n\65\3\65\3\65\3\65\5\65\u069a\n\65\3\66\3\66\3\66\3"+
		"\66\5\66\u06a0\n\66\3\66\3\66\3\66\3\66\3\66\3\66\5\66\u06a8\n\66\5\66"+
		"\u06aa\n\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66"+
		"\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66"+
		"\3\66\5\66\u06c7\n\66\3\67\3\67\3\67\3\67\5\67\u06cd\n\67\5\67\u06cf\n"+
		"\67\38\38\38\38\58\u06d5\n8\39\59\u06d8\n9\39\39\39\39\3:\3:\3:\3;\3;"+
		"\3;\3<\3<\3<\3=\3=\3=\3>\3>\3>\3?\3?\3?\3?\3@\3@\3@\3@\3A\3A\3A\3A\3A"+
		"\3A\3A\3A\3A\3A\3A\3A\5A\u0701\nA\3A\3A\3A\5A\u0706\nA\3B\5B\u0709\nB"+
		"\3B\3B\5B\u070d\nB\3B\5B\u0710\nB\3C\3C\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D"+
		"\3D\5D\u071f\nD\3E\3E\3E\3E\3E\3E\5E\u0727\nE\3F\3F\3F\3F\3G\3G\3G\3G"+
		"\3G\5G\u0732\nG\3H\3H\3H\3H\3H\3H\3H\5H\u073b\nH\3I\3I\3I\3I\3I\3I\3I"+
		"\3I\3I\3I\5I\u0747\nI\3J\5J\u074a\nJ\3J\3J\3J\3K\3K\3K\3K\3K\3K\5K\u0755"+
		"\nK\3L\3L\3L\3L\5L\u075b\nL\3M\5M\u075e\nM\3M\3M\3M\3N\3N\3N\3O\3O\3O"+
		"\3P\5P\u076a\nP\3P\3P\3Q\3Q\3Q\3R\3R\3R\3R\5R\u0775\nR\3S\3S\3S\3S\3S"+
		"\3S\3S\5S\u077e\nS\3T\3T\3T\3T\3T\3T\3T\3T\3T\5T\u0789\nT\3U\3U\3U\3U"+
		"\3U\5U\u0790\nU\3V\3V\3V\3V\3W\3W\3W\3W\3X\3X\3X\3Y\3Y\3Y\3Y\3Y\3Y\3Y"+
		"\3Y\3Y\3Y\3Y\3Y\5Y\u07a9\nY\3Z\3Z\3Z\3Z\3[\3[\3[\3[\3[\3\\\3\\\3\\\3\\"+
		"\3]\3]\3]\3^\5^\u07bc\n^\3^\3^\3_\3_\5_\u07c2\n_\3`\3`\3`\3a\3a\3a\3a"+
		"\3a\6a\u07cc\na\ra\16a\u07cd\3b\3b\3b\3b\3c\3c\3c\3c\3c\3c\3c\5c\u07db"+
		"\nc\3c\3c\3c\3c\3c\5c\u07e2\nc\7c\u07e4\nc\fc\16c\u07e7\13c\3c\3c\3c\3"+
		"c\5c\u07ed\nc\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3"+
		"c\3c\3c\3c\3c\3c\3c\3c\3c\5c\u080a\nc\3d\3d\3d\3d\5d\u0810\nd\3d\3d\3"+
		"d\3d\3d\3d\3d\3d\7d\u081a\nd\fd\16d\u081d\13d\3d\3d\3d\5d\u0822\nd\5d"+
		"\u0824\nd\3e\3e\3e\5e\u0829\ne\3e\3e\3e\3e\5e\u082f\ne\3e\3e\3e\3e\3e"+
		"\3e\3e\3e\5e\u0839\ne\3f\3f\3f\3f\3f\3g\3g\3g\5g\u0843\ng\3g\3g\3h\3h"+
		"\3h\3h\3h\3i\3i\3i\3i\5i\u0850\ni\3i\5i\u0853\ni\3i\5i\u0856\ni\3i\3i"+
		"\5i\u085a\ni\3i\3i\3i\3i\5i\u0860\ni\3i\3i\7i\u0864\ni\fi\16i\u0867\13"+
		"i\3i\5i\u086a\ni\3j\3j\3j\3j\5j\u0870\nj\3j\3j\3j\3j\3j\3j\3j\3j\5j\u087a"+
		"\nj\3j\3j\5j\u087e\nj\3k\3k\5k\u0882\nk\3l\3l\3l\3l\3l\3l\3l\7l\u088b"+
		"\nl\fl\16l\u088e\13l\3l\3l\5l\u0892\nl\3l\5l\u0895\nl\3l\3l\3l\5l\u089a"+
		"\nl\3l\3l\3l\3l\3l\3l\7l\u08a2\nl\fl\16l\u08a5\13l\3l\3l\5l\u08a9\nl\3"+
		"l\3l\3l\3l\7l\u08af\nl\fl\16l\u08b2\13l\5l\u08b4\nl\3l\3l\5l\u08b8\nl"+
		"\3l\5l\u08bb\nl\3l\5l\u08be\nl\3m\3m\3m\3m\5m\u08c4\nm\3m\5m\u08c7\nm"+
		"\3m\3m\7m\u08cb\nm\fm\16m\u08ce\13m\3m\3m\7m\u08d2\nm\fm\16m\u08d5\13"+
		"m\3m\5m\u08d8\nm\3m\3m\3m\3m\3m\3m\3m\5m\u08e1\nm\6m\u08e3\nm\rm\16m\u08e4"+
		"\3m\3m\5m\u08e9\nm\3m\5m\u08ec\nm\3m\5m\u08ef\nm\3n\3n\3n\5n\u08f4\nn"+
		"\3n\5n\u08f7\nn\3n\5n\u08fa\nn\3n\3n\3n\3n\5n\u0900\nn\3n\3n\7n\u0904"+
		"\nn\fn\16n\u0907\13n\3n\5n\u090a\nn\3o\3o\3o\5o\u090f\no\3o\3o\3o\3o\3"+
		"o\3o\3o\3o\3o\3o\5o\u091b\no\3o\3o\5o\u091f\no\3p\3p\5p\u0923\np\3q\3"+
		"q\3q\3q\5q\u0929\nq\3q\3q\5q\u092d\nq\3q\3q\3q\3q\3q\7q\u0934\nq\fq\16"+
		"q\u0937\13q\3q\3q\3r\3r\3r\3r\3r\7r\u0940\nr\fr\16r\u0943\13r\3r\3r\5"+
		"r\u0947\nr\3s\3s\3s\3s\3s\7s\u094e\ns\fs\16s\u0951\13s\3s\3s\3s\3s\3s"+
		"\5s\u0958\ns\3s\3s\5s\u095c\ns\3t\5t\u095f\nt\3t\3t\3t\5t\u0964\nt\3u"+
		"\3u\3u\5u\u0969\nu\3v\3v\3v\3v\3v\3v\3v\3v\7v\u0973\nv\fv\16v\u0976\13"+
		"v\3v\3v\3v\3v\7v\u097c\nv\fv\16v\u097f\13v\3v\3v\3v\3v\3v\3v\7v\u0987"+
		"\nv\fv\16v\u098a\13v\3v\5v\u098d\nv\3v\3v\5v\u0991\nv\3w\3w\3w\3w\3w\7"+
		"w\u0998\nw\fw\16w\u099b\13w\3x\3x\3y\3y\3y\3y\3y\7y\u09a4\ny\fy\16y\u09a7"+
		"\13y\3y\3y\3y\3y\3y\3y\3y\7y\u09b0\ny\fy\16y\u09b3\13y\3y\3y\5y\u09b7"+
		"\ny\3z\3z\3z\5z\u09bc\nz\3z\3z\5z\u09c0\nz\3{\3{\3{\3{\3{\3{\3{\7{\u09c9"+
		"\n{\f{\16{\u09cc\13{\3|\3|\3|\3|\7|\u09d2\n|\f|\16|\u09d5\13|\3|\3|\5"+
		"|\u09d9\n|\3}\3}\3}\3}\5}\u09df\n}\3~\3~\5~\u09e3\n~\3\177\3\177\3\177"+
		"\5\177\u09e8\n\177\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080"+
		"\3\u0080\7\u0080\u09f2\n\u0080\f\u0080\16\u0080\u09f5\13\u0080\3\u0080"+
		"\3\u0080\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\7\u0081\u09ff"+
		"\n\u0081\f\u0081\16\u0081\u0a02\13\u0081\3\u0081\3\u0081\5\u0081\u0a06"+
		"\n\u0081\3\u0081\3\u0081\3\u0081\5\u0081\u0a0b\n\u0081\3\u0081\5\u0081"+
		"\u0a0e\n\u0081\3\u0081\3\u0081\5\u0081\u0a12\n\u0081\3\u0082\3\u0082\3"+
		"\u0082\3\u0082\3\u0082\5\u0082\u0a19\n\u0082\3\u0083\3\u0083\3\u0083\3"+
		"\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083"+
		"\3\u0083\3\u0083\3\u0083\3\u0083\5\u0083\u0a2b\n\u0083\3\u0083\3\u0083"+
		"\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\5\u0083\u0a35\n\u0083"+
		"\5\u0083\u0a37\n\u0083\3\u0084\3\u0084\3\u0084\3\u0085\3\u0085\3\u0085"+
		"\3\u0086\3\u0086\3\u0086\3\u0087\3\u0087\3\u0087\3\u0088\3\u0088\3\u0088"+
		"\3\u0089\5\u0089\u0a49\n\u0089\3\u0089\3\u0089\3\u008a\5\u008a\u0a4e\n"+
		"\u008a\3\u008a\3\u008a\3\u008b\3\u008b\3\u008b\5\u008b\u0a55\n\u008b\3"+
		"\u008b\5\u008b\u0a58\n\u008b\3\u008c\3\u008c\3\u008c\3\u008d\3\u008d\3"+
		"\u008d\3\u008e\3\u008e\3\u008e\3\u008f\3\u008f\3\u0090\5\u0090\u0a66\n"+
		"\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\5\u0090\u0a6d\n\u0090\3"+
		"\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0092\3\u0092\3\u0092"+
		"\6\u0092\u0a78\n\u0092\r\u0092\16\u0092\u0a79\3\u0092\6\u0092\u0a7d\n"+
		"\u0092\r\u0092\16\u0092\u0a7e\3\u0092\3\u0092\7\u0092\u0a83\n\u0092\f"+
		"\u0092\16\u0092\u0a86\13\u0092\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093"+
		"\5\u0093\u0a8d\n\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093"+
		"\5\u0093\u0a95\n\u0093\3\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u0a9b\n"+
		"\u0094\3\u0095\3\u0095\3\u0095\3\u0096\3\u0096\3\u0096\3\u0096\5\u0096"+
		"\u0aa4\n\u0096\3\u0096\3\u0096\3\u0096\3\u0096\5\u0096\u0aaa\n\u0096\3"+
		"\u0096\3\u0096\3\u0096\3\u0096\5\u0096\u0ab0\n\u0096\7\u0096\u0ab2\n\u0096"+
		"\f\u0096\16\u0096\u0ab5\13\u0096\3\u0096\3\u0096\5\u0096\u0ab9\n\u0096"+
		"\5\u0096\u0abb\n\u0096\3\u0097\3\u0097\3\u0098\3\u0098\3\u0099\3\u0099"+
		"\3\u0099\5\u0099\u0ac4\n\u0099\3\u009a\3\u009a\5\u009a\u0ac8\n\u009a\3"+
		"\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\5\u009b"+
		"\u0ad2\n\u009b\3\u009b\3\u009b\3\u009b\3\u009b\5\u009b\u0ad8\n\u009b\3"+
		"\u009b\3\u009b\3\u009b\3\u009b\5\u009b\u0ade\n\u009b\3\u009b\3\u009b\3"+
		"\u009b\5\u009b\u0ae3\n\u009b\3\u009b\3\u009b\5\u009b\u0ae7\n\u009b\3\u009b"+
		"\5\u009b\u0aea\n\u009b\3\u009b\3\u009b\3\u009b\5\u009b\u0aef\n\u009b\3"+
		"\u009b\3\u009b\5\u009b\u0af3\n\u009b\3\u009b\5\u009b\u0af6\n\u009b\3\u009b"+
		"\3\u009b\3\u009b\3\u009b\5\u009b\u0afc\n\u009b\3\u009b\3\u009b\3\u009b"+
		"\5\u009b\u0b01\n\u009b\3\u009b\3\u009b\5\u009b\u0b05\n\u009b\3\u009b\5"+
		"\u009b\u0b08\n\u009b\3\u009b\3\u009b\3\u009b\3\u009b\5\u009b\u0b0e\n\u009b"+
		"\3\u009b\3\u009b\5\u009b\u0b12\n\u009b\3\u009b\3\u009b\3\u009b\3\u009b"+
		"\5\u009b\u0b18\n\u009b\3\u009b\3\u009b\5\u009b\u0b1c\n\u009b\3\u009b\5"+
		"\u009b\u0b1f\n\u009b\3\u009b\3\u009b\3\u009b\5\u009b\u0b24\n\u009b\3\u009b"+
		"\3\u009b\3\u009b\3\u009b\5\u009b\u0b2a\n\u009b\3\u009b\3\u009b\3\u009b"+
		"\3\u009b\3\u009b\5\u009b\u0b31\n\u009b\3\u009b\3\u009b\3\u009b\3\u009b"+
		"\5\u009b\u0b37\n\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\5\u009b"+
		"\u0b3e\n\u009b\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c"+
		"\3\u009c\5\u009c\u0b48\n\u009c\3\u009c\3\u009c\3\u009c\3\u009c\5\u009c"+
		"\u0b4e\n\u009c\3\u009c\3\u009c\3\u009c\3\u009c\5\u009c\u0b54\n\u009c\3"+
		"\u009c\3\u009c\3\u009c\5\u009c\u0b59\n\u009c\3\u009c\3\u009c\5\u009c\u0b5d"+
		"\n\u009c\3\u009c\5\u009c\u0b60\n\u009c\3\u009c\3\u009c\3\u009c\5\u009c"+
		"\u0b65\n\u009c\3\u009c\3\u009c\5\u009c\u0b69\n\u009c\3\u009c\5\u009c\u0b6c"+
		"\n\u009c\3\u009c\3\u009c\3\u009c\3\u009c\5\u009c\u0b72\n\u009c\3\u009c"+
		"\3\u009c\3\u009c\5\u009c\u0b77\n\u009c\3\u009c\3\u009c\5\u009c\u0b7b\n"+
		"\u009c\3\u009c\5\u009c\u0b7e\n\u009c\3\u009c\3\u009c\3\u009c\3\u009c\5"+
		"\u009c\u0b84\n\u009c\3\u009c\3\u009c\5\u009c\u0b88\n\u009c\3\u009c\3\u009c"+
		"\3\u009c\3\u009c\5\u009c\u0b8e\n\u009c\3\u009c\3\u009c\5\u009c\u0b92\n"+
		"\u009c\3\u009c\5\u009c\u0b95\n\u009c\3\u009c\3\u009c\3\u009c\5\u009c\u0b9a"+
		"\n\u009c\3\u009c\3\u009c\3\u009c\3\u009c\5\u009c\u0ba0\n\u009c\3\u009c"+
		"\3\u009c\3\u009c\3\u009c\3\u009c\5\u009c\u0ba7\n\u009c\3\u009c\3\u009c"+
		"\3\u009c\3\u009c\5\u009c\u0bad\n\u009c\3\u009c\3\u009c\3\u009c\3\u009c"+
		"\5\u009c\u0bb3\n\u009c\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d"+
		"\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d"+
		"\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d"+
		"\3\u009d\3\u009d\3\u009d\5\u009d\u0bd0\n\u009d\3\u009e\3\u009e\3\u009e"+
		"\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e"+
		"\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e"+
		"\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e"+
		"\3\u009e\5\u009e\u0bf1\n\u009e\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f"+
		"\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f"+
		"\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f"+
		"\5\u009f\u0c0a\n\u009f\3\u00a0\3\u00a0\5\u00a0\u0c0e\n\u00a0\3\u00a1\3"+
		"\u00a1\3\u00a1\5\u00a1\u0c13\n\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3"+
		"\u00a1\3\u00a1\3\u00a1\5\u00a1\u0c1c\n\u00a1\3\u00a1\3\u00a1\3\u00a1\3"+
		"\u00a1\5\u00a1\u0c22\n\u00a1\3\u00a1\5\u00a1\u0c25\n\u00a1\3\u00a1\3\u00a1"+
		"\3\u00a1\3\u00a1\3\u00a1\5\u00a1\u0c2c\n\u00a1\3\u00a1\5\u00a1\u0c2f\n"+
		"\u00a1\3\u00a1\5\u00a1\u0c32\n\u00a1\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3"+
		"\u00a2\3\u00a2\7\u00a2\u0c3a\n\u00a2\f\u00a2\16\u00a2\u0c3d\13\u00a2\3"+
		"\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\7\u00a2"+
		"\u0c47\n\u00a2\f\u00a2\16\u00a2\u0c4a\13\u00a2\3\u00a2\3\u00a2\3\u00a2"+
		"\3\u00a2\3\u00a2\3\u00a2\3\u00a2\7\u00a2\u0c53\n\u00a2\f\u00a2\16\u00a2"+
		"\u0c56\13\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2"+
		"\3\u00a2\7\u00a2\u0c60\n\u00a2\f\u00a2\16\u00a2\u0c63\13\u00a2\3\u00a2"+
		"\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2"+
		"\3\u00a2\3\u00a2\3\u00a2\5\u00a2\u0c72\n\u00a2\3\u00a3\3\u00a3\5\u00a3"+
		"\u0c76\n\u00a3\3\u00a3\3\u00a3\3\u00a3\5\u00a3\u0c7b\n\u00a3\3\u00a3\3"+
		"\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\5\u00a3"+
		"\u0c86\n\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\5\u00a3"+
		"\u0c8e\n\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\5\u00a3\u0c95\n"+
		"\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3"+
		"\5\u00a3\u0c9f\n\u00a3\3\u00a3\5\u00a3\u0ca2\n\u00a3\3\u00a3\3\u00a3\3"+
		"\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3"+
		"\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3"+
		"\3\u00a3\3\u00a3\5\u00a3\u0cba\n\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3"+
		"\3\u00a3\3\u00a3\5\u00a3\u0cc2\n\u00a3\3\u00a3\3\u00a3\5\u00a3\u0cc6\n"+
		"\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\5\u00a3\u0ccd\n\u00a3\3"+
		"\u00a3\3\u00a3\3\u00a3\5\u00a3\u0cd2\n\u00a3\3\u00a3\3\u00a3\3\u00a3\3"+
		"\u00a3\5\u00a3\u0cd8\n\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\5"+
		"\u00a3\u0cdf\n\u00a3\3\u00a3\3\u00a3\5\u00a3\u0ce3\n\u00a3\3\u00a3\3\u00a3"+
		"\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3"+
		"\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3"+
		"\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\5\u00a3"+
		"\u0d01\n\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3"+
		"\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\5\u00a3\u0d0f\n\u00a3\3\u00a4"+
		"\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4"+
		"\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\5\u00a4\u0d22"+
		"\n\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\5\u00a4\u0d29\n\u00a4"+
		"\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4"+
		"\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\5\u00a4\u0d3b"+
		"\n\u00a4\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5"+
		"\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5"+
		"\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\5\u00a5\u0d55"+
		"\n\u00a5\3\u00a5\5\u00a5\u0d58\n\u00a5\3\u00a5\3\u00a5\5\u00a5\u0d5c\n"+
		"\u00a5\3\u00a5\3\u00a5\5\u00a5\u0d60\n\u00a5\3\u00a5\3\u00a5\3\u00a5\3"+
		"\u00a5\3\u00a5\5\u00a5\u0d67\n\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3"+
		"\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\7\u00a5\u0d73\n\u00a5\f"+
		"\u00a5\16\u00a5\u0d76\13\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5"+
		"\3\u00a5\3\u00a5\3\u00a5\7\u00a5\u0d80\n\u00a5\f\u00a5\16\u00a5\u0d83"+
		"\13\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5"+
		"\7\u00a5\u0d8d\n\u00a5\f\u00a5\16\u00a5\u0d90\13\u00a5\3\u00a5\3\u00a5"+
		"\3\u00a5\5\u00a5\u0d95\n\u00a5\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6"+
		"\3\u00a6\3\u00a6\5\u00a6\u0d9e\n\u00a6\3\u00a6\3\u00a6\3\u00a6\5\u00a6"+
		"\u0da3\n\u00a6\3\u00a6\3\u00a6\5\u00a6\u0da7\n\u00a6\3\u00a7\3\u00a7\3"+
		"\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7"+
		"\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\5\u00a7\u0db9\n\u00a7\3\u00a7"+
		"\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\7\u00a7\u0dc1\n\u00a7\f\u00a7"+
		"\16\u00a7\u0dc4\13\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7"+
		"\7\u00a7\u0dcc\n\u00a7\f\u00a7\16\u00a7\u0dcf\13\u00a7\7\u00a7\u0dd1\n"+
		"\u00a7\f\u00a7\16\u00a7\u0dd4\13\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7"+
		"\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\5\u00a7\u0ddf\n\u00a7\3\u00a8"+
		"\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8"+
		"\3\u00a8\3\u00a8\5\u00a8\u0ded\n\u00a8\3\u00a9\3\u00a9\3\u00a9\3\u00a9"+
		"\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\7\u00a9\u0df8\n\u00a9\f\u00a9"+
		"\16\u00a9\u0dfb\13\u00a9\3\u00a9\3\u00a9\5\u00a9\u0dff\n\u00a9\3\u00aa"+
		"\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00ab"+
		"\3\u00ab\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac"+
		"\5\u00ac\u0e14\n\u00ac\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad"+
		"\5\u00ad\u0e1c\n\u00ad\3\u00ae\3\u00ae\5\u00ae\u0e20\n\u00ae\3\u00ae\3"+
		"\u00ae\5\u00ae\u0e24\n\u00ae\3\u00ae\3\u00ae\5\u00ae\u0e28\n\u00ae\5\u00ae"+
		"\u0e2a\n\u00ae\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\7\u00af\u0e31\n"+
		"\u00af\f\u00af\16\u00af\u0e34\13\u00af\3\u00af\3\u00af\3\u00b0\3\u00b0"+
		"\3\u00b0\3\u00b0\3\u00b0\3\u00b0\7\u00b0\u0e3e\n\u00b0\f\u00b0\16\u00b0"+
		"\u0e41\13\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\7\u00b0"+
		"\u0e49\n\u00b0\f\u00b0\16\u00b0\u0e4c\13\u00b0\3\u00b0\3\u00b0\3\u00b0"+
		"\3\u00b0\3\u00b0\3\u00b0\7\u00b0\u0e54\n\u00b0\f\u00b0\16\u00b0\u0e57"+
		"\13\u00b0\5\u00b0\u0e59\n\u00b0\3\u00b1\3\u00b1\5\u00b1\u0e5d\n\u00b1"+
		"\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\5\u00b1\u0e64\n\u00b1\3\u00b1"+
		"\3\u00b1\3\u00b1\5\u00b1\u0e69\n\u00b1\3\u00b2\3\u00b2\3\u00b3\3\u00b3"+
		"\3\u00b3\3\u00b3\3\u00b3\3\u00b3\5\u00b3\u0e73\n\u00b3\3\u00b4\3\u00b4"+
		"\5\u00b4\u0e77\n\u00b4\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u0e7c\n\u00b4\3"+
		"\u00b4\3\u00b4\3\u00b4\3\u00b5\5\u00b5\u0e82\n\u00b5\3\u00b5\3\u00b5\5"+
		"\u00b5\u0e86\n\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3"+
		"\u00b5\3\u00b5\6\u00b5\u0e90\n\u00b5\r\u00b5\16\u00b5\u0e91\3\u00b6\6"+
		"\u00b6\u0e95\n\u00b6\r\u00b6\16\u00b6\u0e96\3\u00b7\3\u00b7\3\u00b7\3"+
		"\u00b7\3\u00b7\3\u00b7\5\u00b7\u0e9f\n\u00b7\3\u00b7\3\u00b7\3\u00b7\5"+
		"\u00b7\u0ea4\n\u00b7\6\u00b7\u0ea6\n\u00b7\r\u00b7\16\u00b7\u0ea7\3\u00b8"+
		"\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\5\u00b8\u0eb2"+
		"\n\u00b8\3\u00b8\3\u00b8\3\u00b9\3\u00b9\3\u00b9\3\u00ba\5\u00ba\u0eba"+
		"\n\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00bb\3\u00bb\3\u00bb"+
		"\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\7\u00bb\u0ecb"+
		"\n\u00bb\f\u00bb\16\u00bb\u0ece\13\u00bb\3\u00bb\3\u00bb\3\u00bc\3\u00bc"+
		"\3\u00bc\3\u00bc\3\u00bc\3\u00bc\7\u00bc\u0ed8\n\u00bc\f\u00bc\16\u00bc"+
		"\u0edb\13\u00bc\5\u00bc\u0edd\n\u00bc\3\u00bc\5\u00bc\u0ee0\n\u00bc\3"+
		"\u00bc\3\u00bc\3\u00bc\5\u00bc\u0ee5\n\u00bc\3\u00bd\3\u00bd\3\u00bd\5"+
		"\u00bd\u0eea\n\u00bd\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3"+
		"\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be"+
		"\3\u00be\7\u00be\u0efc\n\u00be\f\u00be\16\u00be\u0eff\13\u00be\3\u00be"+
		"\3\u00be\3\u00be\3\u00be\3\u00be\5\u00be\u0f06\n\u00be\3\u00bf\3\u00bf"+
		"\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf"+
		"\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\7\u00bf\u0f18\n\u00bf\f\u00bf"+
		"\16\u00bf\u0f1b\13\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf"+
		"\u0f22\n\u00bf\3\u00c0\3\u00c0\5\u00c0\u0f26\n\u00c0\3\u00c1\3\u00c1\3"+
		"\u00c1\3\u00c1\5\u00c1\u0f2c\n\u00c1\3\u00c1\3\u00c1\5\u00c1\u0f30\n\u00c1"+
		"\3\u00c1\3\u00c1\5\u00c1\u0f34\n\u00c1\3\u00c1\3\u00c1\3\u00c1\5\u00c1"+
		"\u0f39\n\u00c1\5\u00c1\u0f3b\n\u00c1\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3"+
		"\u00c2\5\u00c2\u0f42\n\u00c2\3\u00c2\7\u00c2\u0f45\n\u00c2\f\u00c2\16"+
		"\u00c2\u0f48\13\u00c2\3\u00c2\3\u00c2\3\u00c3\3\u00c3\3\u00c3\3\u00c3"+
		"\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\5\u00c3\u0f56\n\u00c3"+
		"\3\u00c3\3\u00c3\3\u00c3\3\u00c3\5\u00c3\u0f5c\n\u00c3\3\u00c3\5\u00c3"+
		"\u0f5f\n\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\5\u00c3\u0f66\n"+
		"\u00c3\3\u00c3\5\u00c3\u0f69\n\u00c3\3\u00c3\5\u00c3\u0f6c\n\u00c3\3\u00c4"+
		"\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4"+
		"\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c6\3\u00c6\3\u00c6\3\u00c6"+
		"\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c8\3\u00c8\3\u00c8\3\u00c8"+
		"\3\u00c8\5\u00c8\u0f8b\n\u00c8\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9"+
		"\3\u00c9\3\u00c9\3\u00c9\3\u00c9\5\u00c9\u0f96\n\u00c9\3\u00ca\3\u00ca"+
		"\6\u00ca\u0f9a\n\u00ca\r\u00ca\16\u00ca\u0f9b\3\u00cb\3\u00cb\3\u00cb"+
		"\3\u00cb\3\u00cb\3\u00cb\3\u00cb\5\u00cb\u0fa5\n\u00cb\3\u00cb\3\u00cb"+
		"\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb"+
		"\5\u00cb\u0fb2\n\u00cb\3\u00cb\5\u00cb\u0fb5\n\u00cb\3\u00cb\3\u00cb\3"+
		"\u00cb\3\u00cb\5\u00cb\u0fbb\n\u00cb\3\u00cb\3\u00cb\5\u00cb\u0fbf\n\u00cb"+
		"\3\u00cb\3\u00cb\5\u00cb\u0fc3\n\u00cb\3\u00cc\3\u00cc\3\u00cd\3\u00cd"+
		"\5\u00cd\u0fc9\n\u00cd\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce"+
		"\3\u00ce\3\u00ce\5\u00ce\u0fd3\n\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce"+
		"\5\u00ce\u0fd9\n\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\5\u00ce\u0fdf\n"+
		"\u00ce\3\u00ce\3\u00ce\3\u00ce\5\u00ce\u0fe4\n\u00ce\3\u00ce\3\u00ce\5"+
		"\u00ce\u0fe8\n\u00ce\3\u00ce\5\u00ce\u0feb\n\u00ce\3\u00ce\3\u00ce\3\u00ce"+
		"\5\u00ce\u0ff0\n\u00ce\3\u00ce\3\u00ce\3\u00ce\5\u00ce\u0ff5\n\u00ce\3"+
		"\u00ce\3\u00ce\3\u00ce\3\u00ce\5\u00ce\u0ffb\n\u00ce\3\u00ce\3\u00ce\3"+
		"\u00ce\5\u00ce\u1000\n\u00ce\3\u00ce\3\u00ce\3\u00ce\5\u00ce\u1005\n\u00ce"+
		"\3\u00ce\3\u00ce\3\u00ce\3\u00ce\5\u00ce\u100b\n\u00ce\3\u00ce\3\u00ce"+
		"\5\u00ce\u100f\n\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\5\u00ce\u1015\n"+
		"\u00ce\3\u00ce\3\u00ce\5\u00ce\u1019\n\u00ce\3\u00ce\5\u00ce\u101c\n\u00ce"+
		"\3\u00ce\3\u00ce\3\u00ce\5\u00ce\u1021\n\u00ce\3\u00ce\3\u00ce\3\u00ce"+
		"\3\u00ce\5\u00ce\u1027\n\u00ce\3\u00ce\3\u00ce\3\u00ce\5\u00ce\u102c\n"+
		"\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\5\u00ce\u1032\n\u00ce\3\u00ce\3"+
		"\u00ce\3\u00ce\5\u00ce\u1037\n\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3"+
		"\u00ce\3\u00ce\5\u00ce\u103f\n\u00ce\5\u00ce\u1041\n\u00ce\3\u00cf\3\u00cf"+
		"\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\5\u00cf\u104b\n\u00cf"+
		"\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\5\u00cf\u1052\n\u00cf\5\u00cf"+
		"\u1054\n\u00cf\3\u00d0\3\u00d0\3\u00d0\3\u00d0\5\u00d0\u105a\n\u00d0\3"+
		"\u00d0\3\u00d0\3\u00d0\3\u00d0\5\u00d0\u1060\n\u00d0\7\u00d0\u1062\n\u00d0"+
		"\f\u00d0\16\u00d0\u1065\13\u00d0\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1"+
		"\3\u00d1\5\u00d1\u106d\n\u00d1\3\u00d1\3\u00d1\5\u00d1\u1071\n\u00d1\5"+
		"\u00d1\u1073\n\u00d1\3\u00d2\3\u00d2\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3"+
		"\u00d4\3\u00d4\3\u00d5\3\u00d5\3\u00d6\3\u00d6\3\u00d6\5\u00d6\u1082\n"+
		"\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6"+
		"\3\u00d6\5\u00d6\u108d\n\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6"+
		"\5\u00d6\u1094\n\u00d6\3\u00d6\3\u00d6\5\u00d6\u1098\n\u00d6\3\u00d6\3"+
		"\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\5\u00d6\u10a0\n\u00d6\3\u00d6\3"+
		"\u00d6\5\u00d6\u10a4\n\u00d6\3\u00d6\5\u00d6\u10a7\n\u00d6\3\u00d7\3\u00d7"+
		"\5\u00d7\u10ab\n\u00d7\3\u00d7\3\u00d7\3\u00d7\5\u00d7\u10b0\n\u00d7\3"+
		"\u00d7\3\u00d7\3\u00d7\3\u00d7\7\u00d7\u10b6\n\u00d7\f\u00d7\16\u00d7"+
		"\u10b9\13\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\5\u00d7\u10bf\n\u00d7"+
		"\3\u00d7\3\u00d7\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8"+
		"\3\u00d8\5\u00d8\u10cb\n\u00d8\5\u00d8\u10cd\n\u00d8\3\u00d8\3\u00d8\3"+
		"\u00d8\3\u00d8\3\u00d8\5\u00d8\u10d4\n\u00d8\3\u00d8\3\u00d8\3\u00d8\3"+
		"\u00d8\3\u00d8\5\u00d8\u10db\n\u00d8\7\u00d8\u10dd\n\u00d8\f\u00d8\16"+
		"\u00d8\u10e0\13\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d9\3\u00d9\3\u00d9"+
		"\3\u00d9\3\u00d9\3\u00d9\3\u00d9\5\u00d9\u10ec\n\u00d9\3\u00d9\3\u00d9"+
		"\3\u00d9\3\u00d9\3\u00d9\5\u00d9\u10f3\n\u00d9\7\u00d9\u10f5\n\u00d9\f"+
		"\u00d9\16\u00d9\u10f8\13\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9"+
		"\3\u00d9\3\u00d9\3\u00d9\3\u00d9\5\u00d9\u1103\n\u00d9\5\u00d9\u1105\n"+
		"\u00d9\3\u00d9\5\u00d9\u1108\n\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\5"+
		"\u00d9\u110e\n\u00d9\3\u00da\3\u00da\5\u00da\u1112\n\u00da\3\u00da\3\u00da"+
		"\3\u00da\3\u00da\3\u00da\3\u00db\5\u00db\u111a\n\u00db\3\u00db\3\u00db"+
		"\3\u00db\3\u00db\7\u00db\u1120\n\u00db\f\u00db\16\u00db\u1123\13\u00db"+
		"\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db\7\u00db\u112a\n\u00db\f\u00db"+
		"\16\u00db\u112d\13\u00db\3\u00db\3\u00db\3\u00dc\3\u00dc\3\u00dc\5\u00dc"+
		"\u1134\n\u00dc\3\u00dc\3\u00dc\3\u00dd\3\u00dd\3\u00de\3\u00de\5\u00de"+
		"\u113c\n\u00de\3\u00de\3\u00de\3\u00de\3\u00de\7\u00de\u1142\n\u00de\f"+
		"\u00de\16\u00de\u1145\13\u00de\3\u00de\3\u00de\5\u00de\u1149\n\u00de\3"+
		"\u00df\3\u00df\3\u00df\3\u00df\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0"+
		"\3\u00e0\3\u00e0\3\u00e0\3\u00e0\7\u00e0\u1158\n\u00e0\f\u00e0\16\u00e0"+
		"\u115b\13\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0"+
		"\3\u00e0\3\u00e0\3\u00e0\3\u00e0\5\u00e0\u1168\n\u00e0\3\u00e1\3\u00e1"+
		"\3\u00e1\3\u00e1\5\u00e1\u116e\n\u00e1\3\u00e2\3\u00e2\5\u00e2\u1172\n"+
		"\u00e2\3\u00e3\3\u00e3\3\u00e3\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e6\3\u00e6\6\u00e6"+
		"\u1184\n\u00e6\r\u00e6\16\u00e6\u1185\3\u00e7\3\u00e7\3\u00e7\3\u00e7"+
		"\3\u00e7\3\u00e7\7\u00e7\u118e\n\u00e7\f\u00e7\16\u00e7\u1191\13\u00e7"+
		"\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\5\u00e8\u119a"+
		"\n\u00e8\3\u00e9\3\u00e9\6\u00e9\u119e\n\u00e9\r\u00e9\16\u00e9\u119f"+
		"\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea"+
		"\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\5\u00ea\u11b1\n\u00ea"+
		"\3\u00eb\3\u00eb\3\u00eb\7\u00eb\u11b6\n\u00eb\f\u00eb\16\u00eb\u11b9"+
		"\13\u00eb\3\u00eb\3\u00eb\3\u00eb\7\u00eb\u11be\n\u00eb\f\u00eb\16\u00eb"+
		"\u11c1\13\u00eb\5\u00eb\u11c3\n\u00eb\3\u00ec\3\u00ec\5\u00ec\u11c7\n"+
		"\u00ec\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed"+
		"\3\u00ed\3\u00ed\5\u00ed\u11d3\n\u00ed\3\u00ee\3\u00ee\3\u00ef\3\u00ef"+
		"\3\u00f0\3\u00f0\3\u00f1\3\u00f1\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2"+
		"\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2"+
		"\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2"+
		"\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2"+
		"\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\5\u00f2"+
		"\u1205\n\u00f2\3\u00f2\3\u00f2\3\u00f2\7\u00f2\u120a\n\u00f2\f\u00f2\16"+
		"\u00f2\u120d\13\u00f2\5\u00f2\u120f\n\u00f2\3\u00f3\3\u00f3\3\u00f4\3"+
		"\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f5\3\u00f5\3\u00f5\3\u00f5"+
		"\3\u00f5\3\u00f6\3\u00f6\3\u00f6\3\u00f6\5\u00f6\u1222\n\u00f6\3\u00f7"+
		"\3\u00f7\3\u00f7\5\u00f7\u1227\n\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7"+
		"\3\u00f7\7\u00f7\u122e\n\u00f7\f\u00f7\16\u00f7\u1231\13\u00f7\3\u00f7"+
		"\3\u00f7\3\u00f8\3\u00f8\3\u00f8\5\u00f8\u1238\n\u00f8\3\u00f8\3\u00f8"+
		"\3\u00f8\5\u00f8\u123d\n\u00f8\3\u00f8\3\u00f8\5\u00f8\u1241\n\u00f8\3"+
		"\u00f8\3\u00f8\3\u00f9\3\u00f9\3\u00f9\5\u00f9\u1248\n\u00f9\3\u00f9\3"+
		"\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00fa\3\u00fa\3\u00fa"+
		"\5\u00fa\u1254\n\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\7\u00fa"+
		"\u125b\n\u00fa\f\u00fa\16\u00fa\u125e\13\u00fa\3\u00fa\3\u00fa\3\u00fb"+
		"\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\5\u00fb\u126a"+
		"\n\u00fb\3\u00fb\3\u00fb\3\u00fc\3\u00fc\3\u00fc\3\u00fc\5\u00fc\u1272"+
		"\n\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd"+
		"\3\u00fe\3\u00fe\5\u00fe\u127e\n\u00fe\3\u00fe\7\u00fe\u1281\n\u00fe\f"+
		"\u00fe\16\u00fe\u1284\13\u00fe\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff"+
		"\3\u00ff\5\u00ff\u128c\n\u00ff\3\u00ff\3\u00ff\3\u00ff\5\u00ff\u1291\n"+
		"\u00ff\7\u00ff\u1293\n\u00ff\f\u00ff\16\u00ff\u1296\13\u00ff\5\u00ff\u1298"+
		"\n\u00ff\3\u00ff\3\u00ff\3\u0100\3\u0100\3\u0100\5\u0100\u129f\n\u0100"+
		"\3\u0101\3\u0101\3\u0101\3\u0101\5\u0101\u12a5\n\u0101\3\u0101\3\u0101"+
		"\3\u0101\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102"+
		"\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102"+
		"\3\u0102\3\u0102\5\u0102\u12bd\n\u0102\3\u0103\3\u0103\3\u0103\3\u0103"+
		"\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\5\u0103"+
		"\u12cb\n\u0103\5\u0103\u12cd\n\u0103\5\u0103\u12cf\n\u0103\3\u0103\3\u0103"+
		"\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104"+
		"\5\u0104\u12dc\n\u0104\5\u0104\u12de\n\u0104\3\u0104\3\u0104\3\u0105\3"+
		"\u0105\3\u0105\3\u0105\5\u0105\u12e6\n\u0105\3\u0106\3\u0106\3\u0106\3"+
		"\u0106\3\u0106\7\u0106\u12ed\n\u0106\f\u0106\16\u0106\u12f0\13\u0106\3"+
		"\u0107\3\u0107\3\u0107\3\u0107\5\u0107\u12f6\n\u0107\3\u0107\3\u0107\3"+
		"\u0107\5\u0107\u12fb\n\u0107\7\u0107\u12fd\n\u0107\f\u0107\16\u0107\u1300"+
		"\13\u0107\3\u0108\3\u0108\3\u0108\5\u0108\u1305\n\u0108\3\u0109\3\u0109"+
		"\3\u0109\3\u0109\3\u0109\3\u0109\5\u0109\u130d\n\u0109\3\u0109\5\u0109"+
		"\u1310\n\u0109\3\u0109\3\u0109\3\u010a\3\u010a\5\u010a\u1316\n\u010a\3"+
		"\u010a\3\u010a\3\u010a\5\u010a\u131b\n\u010a\3\u010a\3\u010a\3\u010a\3"+
		"\u010a\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a"+
		"\3\u010a\3\u010a\3\u010a\3\u010a\5\u010a\u132d\n\u010a\5\u010a\u132f\n"+
		"\u010a\3\u010a\3\u010a\3\u010b\3\u010b\3\u010c\3\u010c\3\u010d\3\u010d"+
		"\3\u010d\3\u010d\5\u010d\u133b\n\u010d\3\u010e\3\u010e\3\u010e\3\u010e"+
		"\3\u010e\5\u010e\u1342\n\u010e\3\u010e\3\u010e\3\u010f\3\u010f\3\u010f"+
		"\3\u010f\3\u010f\5\u010f\u134b\n\u010f\3\u010f\3\u010f\3\u0110\3\u0110"+
		"\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0111\3\u0111\3\u0111\3\u0111"+
		"\3\u0111\3\u0112\3\u0112\3\u0112\3\u0112\5\u0112\u135f\n\u0112\3\u0113"+
		"\3\u0113\3\u0113\5\u0113\u1364\n\u0113\3\u0114\3\u0114\3\u0114\3\u0114"+
		"\3\u0114\3\u0115\3\u0115\5\u0115\u136d\n\u0115\3\u0116\3\u0116\3\u0116"+
		"\3\u0116\5\u0116\u1373\n\u0116\3\u0117\3\u0117\3\u0117\3\u0117\5\u0117"+
		"\u1379\n\u0117\3\u0118\3\u0118\3\u0118\3\u0119\3\u0119\3\u0119\3\u011a"+
		"\3\u011a\3\u011a\3\u011b\3\u011b\3\u011b\3\u011c\3\u011c\3\u011c\3\u011d"+
		"\3\u011d\3\u011e\3\u011e\3\u011f\3\u011f\3\u0120\3\u0120\3\u0120\3\u0120"+
		"\3\u0120\5\u0120\u1395\n\u0120\3\u0120\3\u0120\3\u0120\3\u0120\5\u0120"+
		"\u139b\n\u0120\3\u0120\3\u0120\3\u0120\3\u0120\5\u0120\u13a1\n\u0120\3"+
		"\u0120\3\u0120\3\u0120\5\u0120\u13a6\n\u0120\3\u0120\3\u0120\3\u0120\5"+
		"\u0120\u13ab\n\u0120\7\u0120\u13ad\n\u0120\f\u0120\16\u0120\u13b0\13\u0120"+
		"\5\u0120\u13b2\n\u0120\3\u0120\3\u0120\3\u0121\3\u0121\3\u0122\3\u0122"+
		"\3\u0122\3\u0122\3\u0122\5\u0122\u13bd\n\u0122\3\u0123\3\u0123\3\u0124"+
		"\3\u0124\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\5\u0125\u13c8\n\u0125"+
		"\3\u0126\5\u0126\u13cb\n\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126"+
		"\3\u0126\3\u0126\5\u0126\u13d4\n\u0126\3\u0127\5\u0127\u13d7\n\u0127\3"+
		"\u0127\3\u0127\3\u0127\3\u0128\5\u0128\u13dd\n\u0128\3\u0128\3\u0128\3"+
		"\u0128\3\u0128\3\u0128\3\u0128\3\u0128\5\u0128\u13e6\n\u0128\3\u0129\3"+
		"\u0129\3\u0129\3\u0129\3\u0129\5\u0129\u13ed\n\u0129\3\u012a\3\u012a\3"+
		"\u012a\3\u012a\3\u012b\3\u012b\3\u012c\3\u012c\3\u012c\3\u012c\3\u012d"+
		"\3\u012d\3\u012d\7\u012d\u13fc\n\u012d\f\u012d\16\u012d\u13ff\13\u012d"+
		"\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\7\u012e\u1406\n\u012e\f\u012e"+
		"\16\u012e\u1409\13\u012e\3\u012e\3\u012e\3\u012f\3\u012f\3\u012f\3\u012f"+
		"\3\u012f\3\u012f\3\u012f\3\u012f\5\u012f\u1415\n\u012f\3\u0130\3\u0130"+
		"\3\u0131\3\u0131\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132"+
		"\5\u0132\u1422\n\u0132\3\u0133\3\u0133\3\u0133\3\u0133\3\u0133\3\u0133"+
		"\3\u0133\3\u0133\5\u0133\u142c\n\u0133\3\u0134\3\u0134\3\u0134\6\u0134"+
		"\u1431\n\u0134\r\u0134\16\u0134\u1432\3\u0134\3\u0134\3\u0134\3\u0134"+
		"\5\u0134\u1439\n\u0134\3\u0134\3\u0134\3\u0135\3\u0135\3\u0136\3\u0136"+
		"\3\u0136\3\u0136\3\u0136\5\u0136\u1444\n\u0136\3\u0137\3\u0137\3\u0137"+
		"\3\u0137\3\u0137\3\u0137\5\u0137\u144c\n\u0137\3\u0138\5\u0138\u144f\n"+
		"\u0138\3\u0138\3\u0138\3\u0138\5\u0138\u1454\n\u0138\3\u0138\3\u0138\3"+
		"\u0138\3\u0138\5\u0138\u145a\n\u0138\3\u0138\3\u0138\5\u0138\u145e\n\u0138"+
		"\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\5\u0138\u1465\n\u0138\7\u0138"+
		"\u1467\n\u0138\f\u0138\16\u0138\u146a\13\u0138\3\u0139\3\u0139\3\u013a"+
		"\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a"+
		"\5\u013a\u1478\n\u013a\3\u013b\3\u013b\3\u013b\3\u013b\3\u013b\3\u013b"+
		"\3\u013b\3\u013b\5\u013b\u1482\n\u013b\3\u013c\3\u013c\3\u013c\3\u013c"+
		"\7\u013c\u1488\n\u013c\f\u013c\16\u013c\u148b\13\u013c\3\u013c\3\u013c"+
		"\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d"+
		"\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d"+
		"\3\u013d\3\u013d\3\u013d\5\u013d\u14a4\n\u013d\3\u013e\3\u013e\3\u013e"+
		"\3\u013e\3\u013e\3\u013e\3\u013f\3\u013f\5\u013f\u14ae\n\u013f\3\u013f"+
		"\3\u013f\3\u013f\3\u013f\3\u013f\3\u0140\3\u0140\3\u0140\5\u0140\u14b8"+
		"\n\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0141\3\u0141\3\u0141\3\u0141"+
		"\3\u0141\3\u0142\3\u0142\5\u0142\u14c5\n\u0142\3\u0142\3\u0142\3\u0142"+
		"\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142\7\u0142\u14d0\n\u0142"+
		"\f\u0142\16\u0142\u14d3\13\u0142\3\u0142\3\u0142\5\u0142\u14d7\n\u0142"+
		"\3\u0143\3\u0143\5\u0143\u14db\n\u0143\3\u0143\3\u0143\3\u0143\3\u0143"+
		"\5\u0143\u14e1\n\u0143\3\u0144\3\u0144\3\u0144\5\u0144\u14e6\n\u0144\3"+
		"\u0144\3\u0144\3\u0144\5\u0144\u14eb\n\u0144\3\u0145\3\u0145\3\u0145\3"+
		"\u0145\3\u0145\3\u0145\5\u0145\u14f3\n\u0145\3\u0145\3\u0145\3\u0145\7"+
		"\u0145\u14f8\n\u0145\f\u0145\16\u0145\u14fb\13\u0145\5\u0145\u14fd\n\u0145"+
		"\3\u0145\3\u0145\3\u0146\3\u0146\5\u0146\u1503\n\u0146\3\u0147\3\u0147"+
		"\3\u0147\3\u0147\3\u0147\5\u0147\u150a\n\u0147\3\u0147\3\u0147\3\u0147"+
		"\3\u0147\3\u0148\3\u0148\3\u0149\3\u0149\3\u0149\5\u0149\u1515\n\u0149"+
		"\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\5\u014a"+
		"\u151f\n\u014a\3\u014a\3\u014a\3\u014a\3\u014a\5\u014a\u1525\n\u014a\3"+
		"\u014a\3\u014a\3\u014a\3\u014a\5\u014a\u152b\n\u014a\3\u014a\3\u014a\3"+
		"\u014a\5\u014a\u1530\n\u014a\3\u014a\3\u014a\5\u014a\u1534\n\u014a\3\u014a"+
		"\5\u014a\u1537\n\u014a\3\u014a\3\u014a\3\u014a\5\u014a\u153c\n\u014a\3"+
		"\u014a\5\u014a\u153f\n\u014a\3\u014a\3\u014a\3\u014a\3\u014a\5\u014a\u1545"+
		"\n\u014a\3\u014a\3\u014a\3\u014a\5\u014a\u154a\n\u014a\3\u014a\5\u014a"+
		"\u154d\n\u014a\3\u014a\3\u014a\3\u014a\3\u014a\5\u014a\u1553\n\u014a\3"+
		"\u014a\5\u014a\u1556\n\u014a\3\u014a\3\u014a\3\u014a\3\u014a\5\u014a\u155c"+
		"\n\u014a\3\u014a\3\u014a\5\u014a\u1560\n\u014a\3\u014a\5\u014a\u1563\n"+
		"\u014a\3\u014a\3\u014a\3\u014a\5\u014a\u1568\n\u014a\3\u014a\3\u014a\3"+
		"\u014a\3\u014a\5\u014a\u156e\n\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3"+
		"\u014a\5\u014a\u1575\n\u014a\3\u014a\3\u014a\3\u014a\3\u014a\5\u014a\u157b"+
		"\n\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\5\u014a\u1582\n\u014a"+
		"\3\u014b\3\u014b\3\u014b\3\u014b\5\u014b\u1588\n\u014b\3\u014b\3\u014b"+
		"\3\u014c\3\u014c\3\u014c\5\u014c\u158f\n\u014c\3\u014c\3\u014c\3\u014d"+
		"\3\u014d\3\u014d\5\u014d\u1596\n\u014d\3\u014d\5\u014d\u1599\n\u014d\3"+
		"\u014e\3\u014e\3\u014e\3\u014e\3\u014f\3\u014f\3\u014f\5\u014f\u15a2\n"+
		"\u014f\3\u014f\3\u014f\3\u0150\3\u0150\3\u0151\3\u0151\3\u0152\3\u0152"+
		"\3\u0153\3\u0153\3\u0153\5\u0153\u15af\n\u0153\3\u0153\3\u0153\3\u0154"+
		"\3\u0154\3\u0155\3\u0155\3\u0156\3\u0156\3\u0157\3\u0157\3\u0158\3\u0158"+
		"\3\u0159\3\u0159\3\u015a\3\u015a\3\u015a\5\u015a\u15c2\n\u015a\3\u015a"+
		"\5\u015a\u15c5\n\u015a\3\u015a\3\u015a\3\u015a\5\u015a\u15ca\n\u015a\7"+
		"\u015a\u15cc\n\u015a\f\u015a\16\u015a\u15cf\13\u015a\3\u015b\3\u015b\3"+
		"\u015c\3\u015c\3\u015c\3\u015c\3\u015c\3\u015c\3\u015c\3\u015c\5\u015c"+
		"\u15db\n\u015c\3\u015c\3\u015c\5\u015c\u15df\n\u015c\3\u015c\5\u015c\u15e2"+
		"\n\u015c\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d"+
		"\5\u015d\u15ec\n\u015d\3\u015d\3\u015d\3\u015e\3\u015e\3\u015e\3\u015e"+
		"\3\u015e\3\u015e\3\u015e\3\u015e\5\u015e\u15f8\n\u015e\3\u015e\3\u015e"+
		"\3\u015f\3\u015f\3\u0160\3\u0160\3\u0161\3\u0161\3\u0162\3\u0162\3\u0162"+
		"\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\5\u0162\u160a\n\u0162\3\u0162"+
		"\3\u0162\5\u0162\u160e\n\u0162\3\u0163\3\u0163\3\u0164\3\u0164\3\u0165"+
		"\3\u0165\3\u0166\3\u0166\3\u0167\3\u0167\3\u0168\3\u0168\3\u0169\3\u0169"+
		"\3\u016a\3\u016a\3\u016a\5\u016a\u1621\n\u016a\3\u016a\5\u016a\u1624\n"+
		"\u016a\3\u016a\3\u016a\3\u016a\5\u016a\u1629\n\u016a\7\u016a\u162b\n\u016a"+
		"\f\u016a\16\u016a\u162e\13\u016a\3\u016b\3\u016b\3\u016b\5\u016b\u1633"+
		"\n\u016b\3\u016b\5\u016b\u1636\n\u016b\3\u016b\3\u016b\3\u016b\5\u016b"+
		"\u163b\n\u016b\7\u016b\u163d\n\u016b\f\u016b\16\u016b\u1640\13\u016b\3"+
		"\u016c\3\u016c\3\u016c\5\u016c\u1645\n\u016c\3\u016c\3\u016c\3\u016d\3"+
		"\u016d\3\u016d\5\u016d\u164c\n\u016d\3\u016d\3\u016d\3\u016e\3\u016e\3"+
		"\u016e\5\u016e\u1653\n\u016e\3\u016e\3\u016e\3\u016f\3\u016f\3\u016f\3"+
		"\u016f\3\u016f\3\u016f\3\u016f\3\u016f\5\u016f\u165f\n\u016f\3\u016f\3"+
		"\u016f\3\u0170\3\u0170\3\u0170\5\u0170\u1666\n\u0170\3\u0170\3\u0170\3"+
		"\u0171\3\u0171\3\u0172\3\u0172\3\u0173\3\u0173\3\u0174\3\u0174\3\u0175"+
		"\3\u0175\3\u0176\3\u0176\3\u0177\3\u0177\3\u0178\3\u0178\3\u0179\3\u0179"+
		"\3\u017a\3\u017a\3\u017b\3\u017b\3\u017c\3\u017c\3\u017d\3\u017d\3\u017e"+
		"\3\u017e\3\u017f\3\u017f\3\u0180\3\u0180\3\u0181\3\u0181\3\u0182\3\u0182"+
		"\3\u0183\3\u0183\3\u0184\3\u0184\3\u0185\3\u0185\3\u0186\3\u0186\5\u0186"+
		"\u1696\n\u0186\3\u0187\3\u0187\3\u0187\5\u0187\u169b\n\u0187\3\u0187\3"+
		"\u0187\3\u0188\3\u0188\3\u0188\5\u0188\u16a2\n\u0188\3\u0188\3\u0188\3"+
		"\u0189\3\u0189\3\u0189\3\u0189\5\u0189\u16aa\n\u0189\3\u0189\3\u0189\5"+
		"\u0189\u16ae\n\u0189\3\u0189\3\u0189\3\u0189\3\u0189\5\u0189\u16b4\n\u0189"+
		"\3\u0189\5\u0189\u16b7\n\u0189\3\u018a\3\u018a\3\u018b\3\u018b\3\u018c"+
		"\3\u018c\3\u018c\5\u018c\u16c0\n\u018c\3\u018c\3\u018c\5\u018c\u16c4\n"+
		"\u018c\3\u018d\3\u018d\3\u018d\5\u018d\u16c9\n\u018d\3\u018d\3\u018d\7"+
		"\u018d\u16cd\n\u018d\f\u018d\16\u018d\u16d0\13\u018d\3\u018e\5\u018e\u16d3"+
		"\n\u018e\3\u018e\3\u018e\3\u018e\3\u018e\3\u018e\7\u018e\u16da\n\u018e"+
		"\f\u018e\16\u018e\u16dd\13\u018e\3\u018e\3\u018e\5\u018e\u16e1\n\u018e"+
		"\3\u018f\3\u018f\7\u018f\u16e5\n\u018f\f\u018f\16\u018f\u16e8\13\u018f"+
		"\3\u018f\3\u018f\7\u018f\u16ec\n\u018f\f\u018f\16\u018f\u16ef\13\u018f"+
		"\3\u018f\5\u018f\u16f2\n\u018f\3\u018f\3\u018f\7\u018f\u16f6\n\u018f\f"+
		"\u018f\16\u018f\u16f9\13\u018f\3\u018f\3\u018f\7\u018f\u16fd\n\u018f\f"+
		"\u018f\16\u018f\u1700\13\u018f\3\u018f\5\u018f\u1703\n\u018f\7\u018f\u1705"+
		"\n\u018f\f\u018f\16\u018f\u1708\13\u018f\3\u0190\3\u0190\3\u0190\3\u0190"+
		"\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190"+
		"\3\u0190\6\u0190\u1718\n\u0190\r\u0190\16\u0190\u1719\3\u0190\3\u0190"+
		"\6\u0190\u171e\n\u0190\r\u0190\16\u0190\u171f\3\u0190\3\u0190\3\u0190"+
		"\3\u0190\3\u0190\3\u0190\6\u0190\u1728\n\u0190\r\u0190\16\u0190\u1729"+
		"\3\u0190\3\u0190\6\u0190\u172e\n\u0190\r\u0190\16\u0190\u172f\3\u0190"+
		"\5\u0190\u1733\n\u0190\3\u0190\3\u0190\3\u0190\5\u0190\u1738\n\u0190\5"+
		"\u0190\u173a\n\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\5\u0190\u1741"+
		"\n\u0190\3\u0190\3\u0190\3\u0190\5\u0190\u1746\n\u0190\5\u0190\u1748\n"+
		"\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190"+
		"\3\u0190\3\u0190\3\u0190\3\u0190\6\u0190\u1756\n\u0190\r\u0190\16\u0190"+
		"\u1757\3\u0190\3\u0190\6\u0190\u175c\n\u0190\r\u0190\16\u0190\u175d\3"+
		"\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\6\u0190\u1766\n\u0190\r"+
		"\u0190\16\u0190\u1767\3\u0190\3\u0190\6\u0190\u176c\n\u0190\r\u0190\16"+
		"\u0190\u176d\3\u0190\5\u0190\u1771\n\u0190\3\u0190\3\u0190\3\u0190\5\u0190"+
		"\u1776\n\u0190\5\u0190\u1778\n\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3"+
		"\u0190\5\u0190\u177f\n\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\6"+
		"\u0190\u1786\n\u0190\r\u0190\16\u0190\u1787\3\u0190\3\u0190\6\u0190\u178c"+
		"\n\u0190\r\u0190\16\u0190\u178d\5\u0190\u1790\n\u0190\3\u0191\3\u0191"+
		"\7\u0191\u1794\n\u0191\f\u0191\16\u0191\u1797\13\u0191\3\u0191\5\u0191"+
		"\u179a\n\u0191\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192"+
		"\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\5\u0192"+
		"\u17ab\n\u0192\3\u0193\3\u0193\3\u0193\3\u0193\3\u0193\3\u0193\3\u0193"+
		"\3\u0193\3\u0193\3\u0193\3\u0193\3\u0193\3\u0193\3\u0193\5\u0193\u17bb"+
		"\n\u0193\3\u0194\5\u0194\u17be\n\u0194\3\u0194\3\u0194\3\u0194\3\u0194"+
		"\5\u0194\u17c4\n\u0194\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195"+
		"\5\u0195\u17cc\n\u0195\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195"+
		"\3\u0195\3\u0195\3\u0195\5\u0195\u17d7\n\u0195\3\u0196\3\u0196\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\5\u0196\u17df\n\u0196\3\u0196\3\u0196\3\u0196"+
		"\3\u0196\5\u0196\u17e5\n\u0196\3\u0196\3\u0196\3\u0196\3\u0196\5\u0196"+
		"\u17eb\n\u0196\7\u0196\u17ed\n\u0196\f\u0196\16\u0196\u17f0\13\u0196\3"+
		"\u0196\3\u0196\5\u0196\u17f4\n\u0196\3\u0196\3\u0196\3\u0196\5\u0196\u17f9"+
		"\n\u0196\3\u0197\3\u0197\5\u0197\u17fd\n\u0197\3\u0197\3\u0197\3\u0198"+
		"\5\u0198\u1802\n\u0198\3\u0198\3\u0198\3\u0198\3\u0198\3\u0198\3\u0198"+
		"\3\u0198\3\u0198\7\u0198\u180c\n\u0198\f\u0198\16\u0198\u180f\13\u0198"+
		"\3\u0198\3\u0198\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199"+
		"\5\u0199\u181a\n\u0199\3\u019a\3\u019a\5\u019a\u181e\n\u019a\3\u019b\3"+
		"\u019b\3\u019b\3\u019b\5\u019b\u1824\n\u019b\3\u019b\3\u019b\3\u019b\5"+
		"\u019b\u1829\n\u019b\7\u019b\u182b\n\u019b\f\u019b\16\u019b\u182e\13\u019b"+
		"\3\u019b\3\u019b\3\u019b\5\u019b\u1833\n\u019b\3\u019b\5\u019b\u1836\n"+
		"\u019b\3\u019c\3\u019c\3\u019c\3\u019c\3\u019c\5\u019c\u183d\n\u019c\3"+
		"\u019d\3\u019d\3\u019d\3\u019d\3\u019d\3\u019d\5\u019d\u1845\n\u019d\3"+
		"\u019d\3\u019d\3\u019d\5\u019d\u184a\n\u019d\7\u019d\u184c\n\u019d\f\u019d"+
		"\16\u019d\u184f\13\u019d\3\u019d\3\u019d\5\u019d\u1853\n\u019d\3\u019e"+
		"\3\u019e\3\u019f\3\u019f\3\u01a0\3\u01a0\3\u01a1\3\u01a1\3\u01a1\3\u01a1"+
		"\5\u01a1\u185f\n\u01a1\3\u01a2\3\u01a2\3\u01a2\3\u01a3\3\u01a3\3\u01a3"+
		"\3\u01a3\3\u01a3\5\u01a3\u1869\n\u01a3\3\u01a4\3\u01a4\3\u01a4\3\u01a5"+
		"\3\u01a5\3\u01a5\7\u01a5\u1871\n\u01a5\f\u01a5\16\u01a5\u1874\13\u01a5"+
		"\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a7\3\u01a7\3\u01a7\3\u01a7\5\u01a7"+
		"\u187e\n\u01a7\3\u01a7\3\u01a7\3\u01a7\3\u01a7\5\u01a7\u1884\n\u01a7\7"+
		"\u01a7\u1886\n\u01a7\f\u01a7\16\u01a7\u1889\13\u01a7\3\u01a7\3\u01a7\3"+
		"\u01a8\3\u01a8\3\u01a8\3\u01a8\3\u01a8\3\u01a8\3\u01a8\5\u01a8\u1894\n"+
		"\u01a8\3\u01a9\3\u01a9\3\u01a9\3\u01a9\7\u01a9\u189a\n\u01a9\f\u01a9\16"+
		"\u01a9\u189d\13\u01a9\3\u01a9\5\u01a9\u18a0\n\u01a9\3\u01a9\5\u01a9\u18a3"+
		"\n\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\5\u01a9\u18aa\n\u01a9"+
		"\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa"+
		"\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa\7\u01aa\u18ba\n\u01aa\f\u01aa"+
		"\16\u01aa\u18bd\13\u01aa\3\u01aa\3\u01aa\3\u01ab\3\u01ab\5\u01ab\u18c3"+
		"\n\u01ab\3\u01ab\3\u01ab\3\u01ab\3\u01ab\7\u01ab\u18c9\n\u01ab\f\u01ab"+
		"\16\u01ab\u18cc\13\u01ab\5\u01ab\u18ce\n\u01ab\3\u01ac\3\u01ac\3\u01ac"+
		"\5\u01ac\u18d3\n\u01ac\3\u01ac\5\u01ac\u18d6\n\u01ac\3\u01ac\5\u01ac\u18d9"+
		"\n\u01ac\3\u01ac\5\u01ac\u18dc\n\u01ac\3\u01ac\5\u01ac\u18df\n\u01ac\3"+
		"\u01ac\5\u01ac\u18e2\n\u01ac\3\u01ad\3\u01ad\3\u01ad\3\u01ad\7\u01ad\u18e8"+
		"\n\u01ad\f\u01ad\16\u01ad\u18eb\13\u01ad\5\u01ad\u18ed\n\u01ad\3\u01ad"+
		"\3\u01ad\3\u01ad\3\u01ad\5\u01ad\u18f3\n\u01ad\3\u01ad\5\u01ad\u18f6\n"+
		"\u01ad\3\u01ad\5\u01ad\u18f9\n\u01ad\3\u01ad\5\u01ad\u18fc\n\u01ad\3\u01ad"+
		"\5\u01ad\u18ff\n\u01ad\3\u01ad\5\u01ad\u1902\n\u01ad\3\u01ad\3\u01ad\5"+
		"\u01ad\u1906\n\u01ad\3\u01ad\5\u01ad\u1909\n\u01ad\3\u01ae\3\u01ae\3\u01ae"+
		"\3\u01ae\7\u01ae\u190f\n\u01ae\f\u01ae\16\u01ae\u1912\13\u01ae\5\u01ae"+
		"\u1914\n\u01ae\3\u01ae\3\u01ae\3\u01ae\3\u01ae\3\u01ae\3\u01ae\3\u01ae"+
		"\7\u01ae\u191d\n\u01ae\f\u01ae\16\u01ae\u1920\13\u01ae\3\u01af\3\u01af"+
		"\3\u01af\3\u01af\3\u01af\7\u01af\u1927\n\u01af\f\u01af\16\u01af\u192a"+
		"\13\u01af\3\u01af\3\u01af\3\u01af\3\u01af\3\u01af\3\u01af\3\u01b0\3\u01b0"+
		"\3\u01b0\3\u01b0\3\u01b0\3\u01b0\7\u01b0\u1938\n\u01b0\f\u01b0\16\u01b0"+
		"\u193b\13\u01b0\5\u01b0\u193d\n\u01b0\3\u01b1\3\u01b1\3\u01b1\3\u01b1"+
		"\3\u01b2\3\u01b2\3\u01b2\3\u01b2\3\u01b2\3\u01b3\3\u01b3\3\u01b3\5\u01b3"+
		"\u194b\n\u01b3\3\u01b3\3\u01b3\5\u01b3\u194f\n\u01b3\3\u01b3\3\u01b3\5"+
		"\u01b3\u1953\n\u01b3\3\u01b4\3\u01b4\3\u01b4\3\u01b4\3\u01b4\3\u01b4\3"+
		"\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b6\3\u01b6\3\u01b6\3\u01b7\3\u01b7"+
		"\3\u01b7\3\u01b7\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\5\u01b8"+
		"\u196c\n\u01b8\3\u01b8\3\u01b8\5\u01b8\u1970\n\u01b8\3\u01b8\3\u01b8\3"+
		"\u01b8\3\u01b8\3\u01b8\5\u01b8\u1977\n\u01b8\7\u01b8\u1979\n\u01b8\f\u01b8"+
		"\16\u01b8\u197c\13\u01b8\3\u01b8\5\u01b8\u197f\n\u01b8\3\u01b8\5\u01b8"+
		"\u1982\n\u01b8\3\u01b8\5\u01b8\u1985\n\u01b8\3\u01b9\3\u01b9\3\u01b9\3"+
		"\u01b9\3\u01b9\3\u01b9\7\u01b9\u198d\n\u01b9\f\u01b9\16\u01b9\u1990\13"+
		"\u01b9\3\u01b9\3\u01b9\5\u01b9\u1994\n\u01b9\3\u01ba\3\u01ba\3\u01ba\3"+
		"\u01ba\5\u01ba\u199a\n\u01ba\3\u01ba\3\u01ba\3\u01ba\5\u01ba\u199f\n\u01ba"+
		"\7\u01ba\u19a1\n\u01ba\f\u01ba\16\u01ba\u19a4\13\u01ba\3\u01ba\3\u01ba"+
		"\3\u01ba\3\u01ba\3\u01ba\5\u01ba\u19ab\n\u01ba\3\u01bb\3\u01bb\3\u01bb"+
		"\5\u01bb\u19b0\n\u01bb\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bd\3\u01bd"+
		"\3\u01bd\5\u01bd\u19b9\n\u01bd\3\u01bd\3\u01bd\3\u01bd\3\u01be\3\u01be"+
		"\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be\5\u01be\u19c5\n\u01be\3\u01bf"+
		"\3\u01bf\3\u01bf\2\2\u01c0\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$"+
		"&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084"+
		"\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c"+
		"\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4"+
		"\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc"+
		"\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4"+
		"\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc"+
		"\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114"+
		"\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c"+
		"\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144"+
		"\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c"+
		"\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174"+
		"\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c"+
		"\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4"+
		"\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc"+
		"\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4"+
		"\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec"+
		"\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204"+
		"\u0206\u0208\u020a\u020c\u020e\u0210\u0212\u0214\u0216\u0218\u021a\u021c"+
		"\u021e\u0220\u0222\u0224\u0226\u0228\u022a\u022c\u022e\u0230\u0232\u0234"+
		"\u0236\u0238\u023a\u023c\u023e\u0240\u0242\u0244\u0246\u0248\u024a\u024c"+
		"\u024e\u0250\u0252\u0254\u0256\u0258\u025a\u025c\u025e\u0260\u0262\u0264"+
		"\u0266\u0268\u026a\u026c\u026e\u0270\u0272\u0274\u0276\u0278\u027a\u027c"+
		"\u027e\u0280\u0282\u0284\u0286\u0288\u028a\u028c\u028e\u0290\u0292\u0294"+
		"\u0296\u0298\u029a\u029c\u029e\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac"+
		"\u02ae\u02b0\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc\u02be\u02c0\u02c2\u02c4"+
		"\u02c6\u02c8\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4\u02d6\u02d8\u02da\u02dc"+
		"\u02de\u02e0\u02e2\u02e4\u02e6\u02e8\u02ea\u02ec\u02ee\u02f0\u02f2\u02f4"+
		"\u02f6\u02f8\u02fa\u02fc\u02fe\u0300\u0302\u0304\u0306\u0308\u030a\u030c"+
		"\u030e\u0310\u0312\u0314\u0316\u0318\u031a\u031c\u031e\u0320\u0322\u0324"+
		"\u0326\u0328\u032a\u032c\u032e\u0330\u0332\u0334\u0336\u0338\u033a\u033c"+
		"\u033e\u0340\u0342\u0344\u0346\u0348\u034a\u034c\u034e\u0350\u0352\u0354"+
		"\u0356\u0358\u035a\u035c\u035e\u0360\u0362\u0364\u0366\u0368\u036a\u036c"+
		"\u036e\u0370\u0372\u0374\u0376\u0378\u037a\u037c\2I\4\2hh\u0117\u0117"+
		"\3\2\u00af\u00b0\3\2\60\61\4\2\u00c0\u00c0\u01c9\u01c9\5\2\u0159\u0159"+
		"\u024d\u024d\u0302\u0302\5\2\u0146\u0146\u0158\u0158\u02cd\u02cd\4\2\u013c"+
		"\u013c\u01a2\u01a2\5\2\u0093\u0093\u0099\u0099\u00d1\u00d1\4\2\u010f\u010f"+
		"\u0190\u0190\5\2\u01b2\u01b3\u01b5\u01b5\u01c1\u01c1\6\2\u01b2\u01b3\u01b5"+
		"\u01b5\u01bc\u01bc\u01c1\u01c1\7\2\u01b2\u01b3\u01b5\u01b5\u01bc\u01bc"+
		"\u01c1\u01c1\u01c6\u01c6\7\2\u01b2\u01b3\u01b5\u01b5\u01bc\u01bc\u01c1"+
		"\u01c1\u01e5\u01e5\4\2\u01bc\u01bc\u01c6\u01c6\4\2$$`a\4\2$$aa\4\2\u01bd"+
		"\u01bd\u01c8\u01c8\4\2\u01b6\u01b7\u0346\u0346\4\2\\\\\u0097\u0097\3\2"+
		"\u0238\u0239\3\2\u0217\u0218\4\2\'\'\u0219\u0219\4\2\31\31\u011f\u011f"+
		"\4\2``\u01d7\u01d7\6\2\"\"\u00c1\u00c1\u011f\u011f\u01cb\u01cb\5\2\u016f"+
		"\u016f\u0273\u0273\u0277\u0277\3\2=>\5\2\u0272\u0272\u0296\u0296\u030b"+
		"\u030b\4\2\31\31\177\177\4\2\u00c1\u00c1\u01f5\u01f5\4\2\u01ef\u01ef\u01f7"+
		"\u01f7\5\2\"\"\u00c1\u00c1\u01f5\u01f5\7\2\'\'\u0102\u0102\u0121\u0122"+
		"\u0219\u0219\u0220\u0220\4\2\u01d1\u01d1\u023e\u023e\4\2\u00a4\u00a4\u0240"+
		"\u0240\4\2\u010e\u010e\u0121\u0121\5\2\63\63nn\u020d\u020d\4\2\31\31\u0350"+
		"\u0350\4\2\u0146\u0146\u0158\u0158\4\2\31\31\u01d2\u01d3\4\2\u011f\u011f"+
		"\u0346\u0346\4\2\u0094\u0094\u015a\u015a\3\2\b\r\4\2\16\22HH\4\2\u0197"+
		"\u0197\u02f0\u02f0\4\2\u00be\u00be\u0179\u0179\n\2XY\u008f\u0090\u00b8"+
		"\u00b9\u00bc\u00bd\u0108\u0109\u0141\u0142\u016a\u016a\u02b3\u02b3\4\2"+
		"\177\177\u00a7\u00a7\17\2\u0145\u0145\u0147\u0147\u014c\u0154\u0156\u0156"+
		"\u015d\u015d\u0166\u0166\u0169\u0169\u0175\u0177\u0193\u0196\u019c\u01a0"+
		"\u01a4\u01a4\u02af\u02af\u02b2\u02b2\3\2\u017f\u0188\4\2\u017a\u017a\u018b"+
		"\u018b\25\2==HHMMXYee\u008f\u008f\u009b\u009b\u00aa\u00aa\u00b8\u00b8"+
		"\u00bc\u00bc\u00ef\u00ef\u00f7\u00f7\u0108\u0108\u0126\u0126\u012f\u012f"+
		"\u0140\u0141\u0242\u02ae\u02b0\u02b1\u02b3\u031f\3\2\u0347\u034f\3\2\u0320"+
		"\u0346\4\2\u00ce\u00ce\u0144\u0144\5\2\"\"\'\'\u0112\u0112\4\2\'\'\u0112"+
		"\u0112\4\2\u014a\u014b\u0171\u0171\5\2\u0148\u0148\u016b\u016b\u018e\u018e"+
		"\3\2\30\32\5\2\u0083\u0083\u00aa\u00aa\u00f7\u00f7\3\2\u01a8\u01a9\4\2"+
		"~~\u00c9\u00c9\3\2\31\32\4\2QQ\u00fa\u00fa\4\2\"\"bb\4\2\u0102\u0102\u018b"+
		"\u018b\5\2\u012c\u012c\u015a\u015a\u0191\u0191\5\2ss\u009c\u009c\u0129"+
		"\u0129\4\2\177\177\u00be\u00be\13\2 \u00b9\u00bb\u014d\u0150\u0241\u02b3"+
		"\u02b3\u0328\u0328\u0334\u0334\u033b\u033c\u0340\u0342\u0345\u0346\2\u1d8e"+
		"\2\u0385\3\2\2\2\4\u0388\3\2\2\2\6\u03bf\3\2\2\2\b\u03c1\3\2\2\2\n\u03dc"+
		"\3\2\2\2\f\u03de\3\2\2\2\16\u03e4\3\2\2\2\20\u03f0\3\2\2\2\22\u03f8\3"+
		"\2\2\2\24\u03fa\3\2\2\2\26\u0416\3\2\2\2\30\u0418\3\2\2\2\32\u0423\3\2"+
		"\2\2\34\u042b\3\2\2\2\36\u042d\3\2\2\2 \u043b\3\2\2\2\"\u0458\3\2\2\2"+
		"$\u046e\3\2\2\2&\u0476\3\2\2\2(\u047e\3\2\2\2*\u0486\3\2\2\2,\u048e\3"+
		"\2\2\2.\u0496\3\2\2\2\60\u049e\3\2\2\2\62\u04b2\3\2\2\2\64\u04bd\3\2\2"+
		"\2\66\u04c6\3\2\2\28\u04d0\3\2\2\2:\u04e6\3\2\2\2<\u04ea\3\2\2\2>\u0509"+
		"\3\2\2\2@\u050c\3\2\2\2B\u0552\3\2\2\2D\u0556\3\2\2\2F\u0563\3\2\2\2H"+
		"\u056c\3\2\2\2J\u0580\3\2\2\2L\u058d\3\2\2\2N\u058f\3\2\2\2P\u05a3\3\2"+
		"\2\2R\u05b7\3\2\2\2T\u05cb\3\2\2\2V\u05df\3\2\2\2X\u05f7\3\2\2\2Z\u062a"+
		"\3\2\2\2\\\u0634\3\2\2\2^\u0647\3\2\2\2`\u065d\3\2\2\2b\u0676\3\2\2\2"+
		"d\u067d\3\2\2\2f\u068d\3\2\2\2h\u0691\3\2\2\2j\u06c6\3\2\2\2l\u06c8\3"+
		"\2\2\2n\u06d0\3\2\2\2p\u06d7\3\2\2\2r\u06dd\3\2\2\2t\u06e0\3\2\2\2v\u06e3"+
		"\3\2\2\2x\u06e6\3\2\2\2z\u06e9\3\2\2\2|\u06ec\3\2\2\2~\u06f0\3\2\2\2\u0080"+
		"\u06f4\3\2\2\2\u0082\u070f\3\2\2\2\u0084\u0711\3\2\2\2\u0086\u071e\3\2"+
		"\2\2\u0088\u0726\3\2\2\2\u008a\u0728\3\2\2\2\u008c\u0731\3\2\2\2\u008e"+
		"\u073a\3\2\2\2\u0090\u0746\3\2\2\2\u0092\u0749\3\2\2\2\u0094\u0754\3\2"+
		"\2\2\u0096\u075a\3\2\2\2\u0098\u075d\3\2\2\2\u009a\u0762\3\2\2\2\u009c"+
		"\u0765\3\2\2\2\u009e\u0769\3\2\2\2\u00a0\u076d\3\2\2\2\u00a2\u0774\3\2"+
		"\2\2\u00a4\u0776\3\2\2\2\u00a6\u077f\3\2\2\2\u00a8\u078a\3\2\2\2\u00aa"+
		"\u0791\3\2\2\2\u00ac\u0795\3\2\2\2\u00ae\u0799\3\2\2\2\u00b0\u07a8\3\2"+
		"\2\2\u00b2\u07aa\3\2\2\2\u00b4\u07ae\3\2\2\2\u00b6\u07b3\3\2\2\2\u00b8"+
		"\u07b7\3\2\2\2\u00ba\u07bb\3\2\2\2\u00bc\u07bf\3\2\2\2\u00be\u07c3\3\2"+
		"\2\2\u00c0\u07c6\3\2\2\2\u00c2\u07cf\3\2\2\2\u00c4\u0809\3\2\2\2\u00c6"+
		"\u0823\3\2\2\2\u00c8\u0838\3\2\2\2\u00ca\u083a\3\2\2\2\u00cc\u083f\3\2"+
		"\2\2\u00ce\u0846\3\2\2\2\u00d0\u084b\3\2\2\2\u00d2\u086b\3\2\2\2\u00d4"+
		"\u0881\3\2\2\2\u00d6\u0883\3\2\2\2\u00d8\u08bf\3\2\2\2\u00da\u08f0\3\2"+
		"\2\2\u00dc\u090b\3\2\2\2\u00de\u0922\3\2\2\2\u00e0\u0924\3\2\2\2\u00e2"+
		"\u0946\3\2\2\2\u00e4\u095b\3\2\2\2\u00e6\u095e\3\2\2\2\u00e8\u0968\3\2"+
		"\2\2\u00ea\u0990\3\2\2\2\u00ec\u0992\3\2\2\2\u00ee\u099c\3\2\2\2\u00f0"+
		"\u099e\3\2\2\2\u00f2\u09b8\3\2\2\2\u00f4\u09c1\3\2\2\2\u00f6\u09d8\3\2"+
		"\2\2\u00f8\u09de\3\2\2\2\u00fa\u09e2\3\2\2\2\u00fc\u09e7\3\2\2\2\u00fe"+
		"\u09e9\3\2\2\2\u0100\u09f8\3\2\2\2\u0102\u0a13\3\2\2\2\u0104\u0a36\3\2"+
		"\2\2\u0106\u0a38\3\2\2\2\u0108\u0a3b\3\2\2\2\u010a\u0a3e\3\2\2\2\u010c"+
		"\u0a41\3\2\2\2\u010e\u0a44\3\2\2\2\u0110\u0a48\3\2\2\2\u0112\u0a4d\3\2"+
		"\2\2\u0114\u0a51\3\2\2\2\u0116\u0a59\3\2\2\2\u0118\u0a5c\3\2\2\2\u011a"+
		"\u0a5f\3\2\2\2\u011c\u0a62\3\2\2\2\u011e\u0a6c\3\2\2\2\u0120\u0a6e\3\2"+
		"\2\2\u0122\u0a74\3\2\2\2\u0124\u0a94\3\2\2\2\u0126\u0a9a\3\2\2\2\u0128"+
		"\u0a9c\3\2\2\2\u012a\u0a9f\3\2\2\2\u012c\u0abc\3\2\2\2\u012e\u0abe\3\2"+
		"\2\2\u0130\u0ac0\3\2\2\2\u0132\u0ac7\3\2\2\2\u0134\u0b3d\3\2\2\2\u0136"+
		"\u0bb2\3\2\2\2\u0138\u0bcf\3\2\2\2\u013a\u0bf0\3\2\2\2\u013c\u0c09\3\2"+
		"\2\2\u013e\u0c0d\3\2\2\2\u0140\u0c31\3\2\2\2\u0142\u0c71\3\2\2\2\u0144"+
		"\u0d0e\3\2\2\2\u0146\u0d3a\3\2\2\2\u0148\u0d94\3\2\2\2\u014a\u0da6\3\2"+
		"\2\2\u014c\u0dde\3\2\2\2\u014e\u0dec\3\2\2\2\u0150\u0dee\3\2\2\2\u0152"+
		"\u0e00\3\2\2\2\u0154\u0e09\3\2\2\2\u0156\u0e13\3\2\2\2\u0158\u0e1b\3\2"+
		"\2\2\u015a\u0e29\3\2\2\2\u015c\u0e2b\3\2\2\2\u015e\u0e58\3\2\2\2\u0160"+
		"\u0e68\3\2\2\2\u0162\u0e6a\3\2\2\2\u0164\u0e72\3\2\2\2\u0166\u0e76\3\2"+
		"\2\2\u0168\u0e85\3\2\2\2\u016a\u0e94\3\2\2\2\u016c\u0ea5\3\2\2\2\u016e"+
		"\u0ea9\3\2\2\2\u0170\u0eb5\3\2\2\2\u0172\u0eb9\3\2\2\2\u0174\u0ec0\3\2"+
		"\2\2\u0176\u0ee4\3\2\2\2\u0178\u0ee6\3\2\2\2\u017a\u0f05\3\2\2\2\u017c"+
		"\u0f21\3\2\2\2\u017e\u0f25\3\2\2\2\u0180\u0f3a\3\2\2\2\u0182\u0f3c\3\2"+
		"\2\2\u0184\u0f6b\3\2\2\2\u0186\u0f6d\3\2\2\2\u0188\u0f77\3\2\2\2\u018a"+
		"\u0f7c\3\2\2\2\u018c\u0f80\3\2\2\2\u018e\u0f8a\3\2\2\2\u0190\u0f95\3\2"+
		"\2\2\u0192\u0f97\3\2\2\2\u0194\u0fc2\3\2\2\2\u0196\u0fc4\3\2\2\2\u0198"+
		"\u0fc8\3\2\2\2\u019a\u1040\3\2\2\2\u019c\u1053\3\2\2\2\u019e\u1055\3\2"+
		"\2\2\u01a0\u1072\3\2\2\2\u01a2\u1074\3\2\2\2\u01a4\u1076\3\2\2\2\u01a6"+
		"\u107a\3\2\2\2\u01a8\u107c\3\2\2\2\u01aa\u10a6\3\2\2\2\u01ac\u10aa\3\2"+
		"\2\2\u01ae\u10cc\3\2\2\2\u01b0\u10e4\3\2\2\2\u01b2\u1111\3\2\2\2\u01b4"+
		"\u1119\3\2\2\2\u01b6\u1130\3\2\2\2\u01b8\u1137\3\2\2\2\u01ba\u1139\3\2"+
		"\2\2\u01bc\u114a\3\2\2\2\u01be\u1167\3\2\2\2\u01c0\u1169\3\2\2\2\u01c2"+
		"\u1171\3\2\2\2\u01c4\u1173\3\2\2\2\u01c6\u1176\3\2\2\2\u01c8\u117c\3\2"+
		"\2\2\u01ca\u1181\3\2\2\2\u01cc\u1187\3\2\2\2\u01ce\u1199\3\2\2\2\u01d0"+
		"\u119b\3\2\2\2\u01d2\u11b0\3\2\2\2\u01d4\u11c2\3\2\2\2\u01d6\u11c6\3\2"+
		"\2\2\u01d8\u11d2\3\2\2\2\u01da\u11d4\3\2\2\2\u01dc\u11d6\3\2\2\2\u01de"+
		"\u11d8\3\2\2\2\u01e0\u11da\3\2\2\2\u01e2\u120e\3\2\2\2\u01e4\u1210\3\2"+
		"\2\2\u01e6\u1212\3\2\2\2\u01e8\u1218\3\2\2\2\u01ea\u1221\3\2\2\2\u01ec"+
		"\u1226\3\2\2\2\u01ee\u1237\3\2\2\2\u01f0\u1247\3\2\2\2\u01f2\u1253\3\2"+
		"\2\2\u01f4\u1269\3\2\2\2\u01f6\u126d\3\2\2\2\u01f8\u1276\3\2\2\2\u01fa"+
		"\u127b\3\2\2\2\u01fc\u1285\3\2\2\2\u01fe\u129e\3\2\2\2\u0200\u12a0\3\2"+
		"\2\2\u0202\u12bc\3\2\2\2\u0204\u12be\3\2\2\2\u0206\u12d2\3\2\2\2\u0208"+
		"\u12e5\3\2\2\2\u020a\u12e7\3\2\2\2\u020c\u12f1\3\2\2\2\u020e\u1301\3\2"+
		"\2\2\u0210\u1306\3\2\2\2\u0212\u1315\3\2\2\2\u0214\u1332\3\2\2\2\u0216"+
		"\u1334\3\2\2\2\u0218\u133a\3\2\2\2\u021a\u133c\3\2\2\2\u021c\u1345\3\2"+
		"\2\2\u021e\u134e\3\2\2\2\u0220\u1355\3\2\2\2\u0222\u135a\3\2\2\2\u0224"+
		"\u1363\3\2\2\2\u0226\u1365\3\2\2\2\u0228\u136c\3\2\2\2\u022a\u1372\3\2"+
		"\2\2\u022c\u1378\3\2\2\2\u022e\u137a\3\2\2\2\u0230\u137d\3\2\2\2\u0232"+
		"\u1380\3\2\2\2\u0234\u1383\3\2\2\2\u0236\u1386\3\2\2\2\u0238\u1389\3\2"+
		"\2\2\u023a\u138b\3\2\2\2\u023c\u138d\3\2\2\2\u023e\u138f\3\2\2\2\u0240"+
		"\u13b5\3\2\2\2\u0242\u13bc\3\2\2\2\u0244\u13be\3\2\2\2\u0246\u13c0\3\2"+
		"\2\2\u0248\u13c2\3\2\2\2\u024a\u13ca\3\2\2\2\u024c\u13d6\3\2\2\2\u024e"+
		"\u13dc\3\2\2\2\u0250\u13ec\3\2\2\2\u0252\u13ee\3\2\2\2\u0254\u13f2\3\2"+
		"\2\2\u0256\u13f4\3\2\2\2\u0258\u13f8\3\2\2\2\u025a\u1400\3\2\2\2\u025c"+
		"\u1414\3\2\2\2\u025e\u1416\3\2\2\2\u0260\u1418\3\2\2\2\u0262\u141a\3\2"+
		"\2\2\u0264\u142b\3\2\2\2\u0266\u142d\3\2\2\2\u0268\u143c\3\2\2\2\u026a"+
		"\u143e\3\2\2\2\u026c\u1445\3\2\2\2\u026e\u144e\3\2\2\2\u0270\u146b\3\2"+
		"\2\2\u0272\u1477\3\2\2\2\u0274\u1481\3\2\2\2\u0276\u1483\3\2\2\2\u0278"+
		"\u14a3\3\2\2\2\u027a\u14a5\3\2\2\2\u027c\u14ab\3\2\2\2\u027e\u14b4\3\2"+
		"\2\2\u0280\u14bd\3\2\2\2\u0282\u14c2\3\2\2\2\u0284\u14d8\3\2\2\2\u0286"+
		"\u14e2\3\2\2\2\u0288\u14ec\3\2\2\2\u028a\u1502\3\2\2\2\u028c\u1504\3\2"+
		"\2\2\u028e\u150f\3\2\2\2\u0290\u1514\3\2\2\2\u0292\u1581\3\2\2\2\u0294"+
		"\u1583\3\2\2\2\u0296\u158b\3\2\2\2\u0298\u1592\3\2\2\2\u029a\u159a\3\2"+
		"\2\2\u029c\u15a1\3\2\2\2\u029e\u15a5\3\2\2\2\u02a0\u15a7\3\2\2\2\u02a2"+
		"\u15a9\3\2\2\2\u02a4\u15ae\3\2\2\2\u02a6\u15b2\3\2\2\2\u02a8\u15b4\3\2"+
		"\2\2\u02aa\u15b6\3\2\2\2\u02ac\u15b8\3\2\2\2\u02ae\u15ba\3\2\2\2\u02b0"+
		"\u15bc\3\2\2\2\u02b2\u15c1\3\2\2\2\u02b4\u15d0\3\2\2\2\u02b6\u15da\3\2"+
		"\2\2\u02b8\u15eb\3\2\2\2\u02ba\u15f7\3\2\2\2\u02bc\u15fb\3\2\2\2\u02be"+
		"\u15fd\3\2\2\2\u02c0\u15ff\3\2\2\2\u02c2\u1609\3\2\2\2\u02c4\u160f\3\2"+
		"\2\2\u02c6\u1611\3\2\2\2\u02c8\u1613\3\2\2\2\u02ca\u1615\3\2\2\2\u02cc"+
		"\u1617\3\2\2\2\u02ce\u1619\3\2\2\2\u02d0\u161b\3\2\2\2\u02d2\u1620\3\2"+
		"\2\2\u02d4\u1632\3\2\2\2\u02d6\u1644\3\2\2\2\u02d8\u164b\3\2\2\2\u02da"+
		"\u1652\3\2\2\2\u02dc\u165e\3\2\2\2\u02de\u1665\3\2\2\2\u02e0\u1669\3\2"+
		"\2\2\u02e2\u166b\3\2\2\2\u02e4\u166d\3\2\2\2\u02e6\u166f\3\2\2\2\u02e8"+
		"\u1671\3\2\2\2\u02ea\u1673\3\2\2\2\u02ec\u1675\3\2\2\2\u02ee\u1677\3\2"+
		"\2\2\u02f0\u1679\3\2\2\2\u02f2\u167b\3\2\2\2\u02f4\u167d\3\2\2\2\u02f6"+
		"\u167f\3\2\2\2\u02f8\u1681\3\2\2\2\u02fa\u1683\3\2\2\2\u02fc\u1685\3\2"+
		"\2\2\u02fe\u1687\3\2\2\2\u0300\u1689\3\2\2\2\u0302\u168b\3\2\2\2\u0304"+
		"\u168d\3\2\2\2\u0306\u168f\3\2\2\2\u0308\u1691\3\2\2\2\u030a\u1695\3\2"+
		"\2\2\u030c\u169a\3\2\2\2\u030e\u16a1\3\2\2\2\u0310\u16a5\3\2\2\2\u0312"+
		"\u16b8\3\2\2\2\u0314\u16ba\3\2\2\2\u0316\u16c3\3\2\2\2\u0318\u16c5\3\2"+
		"\2\2\u031a\u16d2\3\2\2\2\u031c\u16e2\3\2\2\2\u031e\u178f\3\2\2\2\u0320"+
		"\u1791\3\2\2\2\u0322\u179b\3\2\2\2\u0324\u17ac\3\2\2\2\u0326\u17bd\3\2"+
		"\2\2\u0328\u17d6\3\2\2\2\u032a\u17d8\3\2\2\2\u032c\u17fa\3\2\2\2\u032e"+
		"\u1801\3\2\2\2\u0330\u1812\3\2\2\2\u0332\u181b\3\2\2\2\u0334\u181f\3\2"+
		"\2\2\u0336\u183c\3\2\2\2\u0338\u1852\3\2\2\2\u033a\u1854\3\2\2\2\u033c"+
		"\u1856\3\2\2\2\u033e\u1858\3\2\2\2\u0340\u185a\3\2\2\2\u0342\u1860\3\2"+
		"\2\2\u0344\u1863\3\2\2\2\u0346\u186a\3\2\2\2\u0348\u186d\3\2\2\2\u034a"+
		"\u1875\3\2\2\2\u034c\u1879\3\2\2\2\u034e\u1893\3\2\2\2\u0350\u18a9\3\2"+
		"\2\2\u0352\u18ab\3\2\2\2\u0354\u18c0\3\2\2\2\u0356\u18cf\3\2\2\2\u0358"+
		"\u18ec\3\2\2\2\u035a\u1913\3\2\2\2\u035c\u1921\3\2\2\2\u035e\u1931\3\2"+
		"\2\2\u0360\u193e\3\2\2\2\u0362\u1942\3\2\2\2\u0364\u1947\3\2\2\2\u0366"+
		"\u1954\3\2\2\2\u0368\u195a\3\2\2\2\u036a\u195e\3\2\2\2\u036c\u1961\3\2"+
		"\2\2\u036e\u196b\3\2\2\2\u0370\u1986\3\2\2\2\u0372\u1995\3\2\2\2\u0374"+
		"\u19af\3\2\2\2\u0376\u19b1\3\2\2\2\u0378\u19b5\3\2\2\2\u037a\u19c4\3\2"+
		"\2\2\u037c\u19c6\3\2\2\2\u037e\u0380\5\4\3\2\u037f\u037e\3\2\2\2\u0380"+
		"\u0383\3\2\2\2\u0381\u037f\3\2\2\2\u0381\u0382\3\2\2\2\u0382\u0386\3\2"+
		"\2\2\u0383\u0381\3\2\2\2\u0384\u0386\7\2\2\3\u0385\u0381\3\2\2\2\u0385"+
		"\u0384\3\2\2\2\u0386\3\3\2\2\2\u0387\u0389\7u\2\2\u0388\u0387\3\2\2\2"+
		"\u0388\u0389\3\2\2\2\u0389\u03b1\3\2\2\2\u038a\u03b2\5\6\4\2\u038b\u03b2"+
		"\5\32\16\2\u038c\u03b2\5\36\20\2\u038d\u03b2\5 \21\2\u038e\u03b2\5\"\22"+
		"\2\u038f\u03b2\5$\23\2\u0390\u03b2\5&\24\2\u0391\u03b2\5(\25\2\u0392\u03b2"+
		"\5*\26\2\u0393\u03b2\5,\27\2\u0394\u03b2\5.\30\2\u0395\u03b2\5\60\31\2"+
		"\u0396\u03b2\5\62\32\2\u0397\u03b2\5\64\33\2\u0398\u03b2\5\66\34\2\u0399"+
		"\u03b2\58\35\2\u039a\u03b2\5:\36\2\u039b\u03b2\5<\37\2\u039c\u03b2\5>"+
		" \2\u039d\u03b2\5B\"\2\u039e\u03b2\5@!\2\u039f\u03b2\5D#\2\u03a0\u03b2"+
		"\5F$\2\u03a1\u03b2\5H%\2\u03a2\u03b2\5J&\2\u03a3\u03b2\5L\'\2\u03a4\u03b2"+
		"\5V,\2\u03a5\u03b2\5X-\2\u03a6\u03b2\5Z.\2\u03a7\u03b2\5\\/\2\u03a8\u03b2"+
		"\5^\60\2\u03a9\u03b2\5`\61\2\u03aa\u03b2\5\b\5\2\u03ab\u03b2\5\24\13\2"+
		"\u03ac\u03b2\5\30\r\2\u03ad\u03b2\5\u00d4k\2\u03ae\u03b2\5\u00d6l\2\u03af"+
		"\u03b2\5\u00d8m\2\u03b0\u03b2\5\u00dep\2\u03b1\u038a\3\2\2\2\u03b1\u038b"+
		"\3\2\2\2\u03b1\u038c\3\2\2\2\u03b1\u038d\3\2\2\2\u03b1\u038e\3\2\2\2\u03b1"+
		"\u038f\3\2\2\2\u03b1\u0390\3\2\2\2\u03b1\u0391\3\2\2\2\u03b1\u0392\3\2"+
		"\2\2\u03b1\u0393\3\2\2\2\u03b1\u0394\3\2\2\2\u03b1\u0395\3\2\2\2\u03b1"+
		"\u0396\3\2\2\2\u03b1\u0397\3\2\2\2\u03b1\u0398\3\2\2\2\u03b1\u0399\3\2"+
		"\2\2\u03b1\u039a\3\2\2\2\u03b1\u039b\3\2\2\2\u03b1\u039c\3\2\2\2\u03b1"+
		"\u039d\3\2\2\2\u03b1\u039e\3\2\2\2\u03b1\u039f\3\2\2\2\u03b1\u03a0\3\2"+
		"\2\2\u03b1\u03a1\3\2\2\2\u03b1\u03a2\3\2\2\2\u03b1\u03a3\3\2\2\2\u03b1"+
		"\u03a4\3\2\2\2\u03b1\u03a5\3\2\2\2\u03b1\u03a6\3\2\2\2\u03b1\u03a7\3\2"+
		"\2\2\u03b1\u03a8\3\2\2\2\u03b1\u03a9\3\2\2\2\u03b1\u03aa\3\2\2\2\u03b1"+
		"\u03ab\3\2\2\2\u03b1\u03ac\3\2\2\2\u03b1\u03ad\3\2\2\2\u03b1\u03ae\3\2"+
		"\2\2\u03b1\u03af\3\2\2\2\u03b1\u03b0\3\2\2\2\u03b2\u03b9\3\2\2\2\u03b3"+
		"\u03ba\7\25\2\2\u03b4\u03b6\7o\2\2\u03b5\u03b7\7\23\2\2\u03b6\u03b5\3"+
		"\2\2\2\u03b6\u03b7\3\2\2\2\u03b7\u03ba\3\2\2\2\u03b8\u03ba\7\2\2\3\u03b9"+
		"\u03b3\3\2\2\2\u03b9\u03b4\3\2\2\2\u03b9\u03b8\3\2\2\2\u03ba\5\3\2\2\2"+
		"\u03bb\u03c0\5\u0356\u01ac\2\u03bc\u03c0\5\u036e\u01b8\2\u03bd\u03c0\5"+
		"\u035a\u01ae\2\u03be\u03c0\5\u0358\u01ad\2\u03bf\u03bb\3\2\2\2\u03bf\u03bc"+
		"\3\2\2\2\u03bf\u03bd\3\2\2\2\u03bf\u03be\3\2\2\2\u03c0\7\3\2\2\2\u03c1"+
		"\u03c2\7[\2\2\u03c2\u03cc\5\n\6\2\u03c3\u03c4\7\u00c0\2\2\u03c4\u03cd"+
		"\7\u01b0\2\2\u03c5\u03ca\7+\2\2\u03c6\u03ca\7\u009a\2\2\u03c7\u03c8\7"+
		"\u010d\2\2\u03c8\u03ca\t\2\2\2\u03c9\u03c5\3\2\2\2\u03c9\u03c6\3\2\2\2"+
		"\u03c9\u03c7\3\2\2\2\u03ca\u03cb\3\2\2\2\u03cb\u03cd\7\u01b0\2\2\u03cc"+
		"\u03c3\3\2\2\2\u03cc\u03c9\3\2\2\2\u03cc\u03cd\3\2\2\2\u03cd\u03ce\3\2"+
		"\2\2\u03ce\u03d4\7U\2\2\u03cf\u03d3\5\16\b\2\u03d0\u03d3\5\20\t\2\u03d1"+
		"\u03d3\5\22\n\2\u03d2\u03cf\3\2\2\2\u03d2\u03d0\3\2\2\2\u03d2\u03d1\3"+
		"\2\2\2\u03d3\u03d6\3\2\2\2\u03d4\u03d2\3\2\2\2\u03d4\u03d5\3\2\2\2\u03d5"+
		"\u03d7\3\2\2\2\u03d6\u03d4\3\2\2\2\u03d7\u03da\7\u0080\2\2\u03d8\u03db"+
		"\5\u035a\u01ae\2\u03d9\u03db\5\f\7\2\u03da\u03d8\3\2\2\2\u03da\u03d9\3"+
		"\2\2\2\u03db\t\3\2\2\2\u03dc\u03dd\5\u037a\u01be\2\u03dd\13\3\2\2\2\u03de"+
		"\u03df\5\u037a\u01be\2\u03df\r\3\2\2\2\u03e0\u03e1\7\u01a2\2\2\u03e1\u03e5"+
		"\7\u008e\2\2\u03e2\u03e3\7\u013c\2\2\u03e3\u03e5\7\u008e\2\2\u03e4\u03e0"+
		"\3\2\2\2\u03e4\u03e2\3\2\2\2\u03e5\17\3\2\2\2\u03e6\u03e7\7\u01a2\2\2"+
		"\u03e7\u03f1\7\u00f4\2\2\u03e8\u03e9\7\u013c\2\2\u03e9\u03ee\7\u00f4\2"+
		"\2\u03ea\u03eb\7\u0124\2\2\u03eb\u03ef\7\u01ad\2\2\u03ec\u03ed\7\u0124"+
		"\2\2\u03ed\u03ef\7\u01ae\2\2\u03ee\u03ea\3\2\2\2\u03ee\u03ec\3\2\2\2\u03ee"+
		"\u03ef\3\2\2\2\u03ef\u03f1\3\2\2\2\u03f0\u03e6\3\2\2\2\u03f0\u03e8\3\2"+
		"\2\2\u03f1\21\3\2\2\2\u03f2\u03f3\7\u01a2\2\2\u03f3\u03f4\7\u0103\2\2"+
		"\u03f4\u03f9\7\u01af\2\2\u03f5\u03f6\7\u013c\2\2\u03f6\u03f7\7\u0103\2"+
		"\2\u03f7\u03f9\7\u01af\2\2\u03f8\u03f2\3\2\2\2\u03f8\u03f5\3\2\2\2\u03f9"+
		"\23\3\2\2\2\u03fa\u03fb\7[\2\2\u03fb\u03fc\5\u02b6\u015c\2\u03fc\u03fd"+
		"\7\u0121\2\2\u03fd\u03fe\7\3\2\2\u03fe\u03ff\5\u02a4\u0153\2\u03ff\u0401"+
		"\5\u0198\u00cd\2\u0400\u0402\5\26\f\2\u0401\u0400\3\2\2\2\u0401\u0402"+
		"\3\2\2\2\u0402\u040b\3\2\2\2\u0403\u0404\7\26\2\2\u0404\u0405\5\u02a4"+
		"\u0153\2\u0405\u0407\5\u0198\u00cd\2\u0406\u0408\5\26\f\2\u0407\u0406"+
		"\3\2\2\2\u0407\u0408\3\2\2\2\u0408\u040a\3\2\2\2\u0409\u0403\3\2\2\2\u040a"+
		"\u040d\3\2\2\2\u040b\u0409\3\2\2\2\u040b\u040c\3\2\2\2\u040c\u040e\3\2"+
		"\2\2\u040d\u040b\3\2\2\2\u040e\u040f\7\4\2\2\u040f\25\3\2\2\2\u0410\u0411"+
		"\7\u00c2\2\2\u0411\u0417\7\u00c3\2\2\u0412\u0413\7\u00c2\2\2\u0413\u0414"+
		"\7\u00c3\2\2\u0414\u0415\7\u013c\2\2\u0415\u0417\7\\\2\2\u0416\u0410\3"+
		"\2\2\2\u0416\u0412\3\2\2\2\u0417\27\3\2\2\2\u0418\u0419\7[\2\2\u0419\u041e"+
		"\5\f\7\2\u041a\u041b\7\26\2\2\u041b\u041d\5\f\7\2\u041c\u041a\3\2\2\2"+
		"\u041d\u0420\3\2\2\2\u041e\u041c\3\2\2\2\u041e\u041f\3\2\2\2\u041f\u0421"+
		"\3\2\2\2\u0420\u041e\3\2\2\2\u0421\u0422\7\u0116\2\2\u0422\31\3\2\2\2"+
		"\u0423\u0424\7#\2\2\u0424\u0425\5\n\6\2\u0425\u0426\7U\2\2\u0426\u0427"+
		"\7\u0080\2\2\u0427\u0428\7\u00f2\2\2\u0428\u0429\7\u010f\2\2\u0429\u042a"+
		"\5\34\17\2\u042a\33\3\2\2\2\u042b\u042c\5\u0310\u0189\2\u042c\35\3\2\2"+
		"\2\u042d\u042e\7%\2\2\u042e\u042f\7W\2\2\u042f\u0437\5\u02e2\u0172\2\u0430"+
		"\u0438\5\u0106\u0084\2\u0431\u0432\7\u0096\2\2\u0432\u0438\5\u02fe\u0180"+
		"\2\u0433\u0434\7\u0119\2\2\u0434\u0438\5\u0300\u0181\2\u0435\u0436\7<"+
		"\2\2\u0436\u0438\5\u02a2\u0152\2\u0437\u0430\3\2\2\2\u0437\u0431\3\2\2"+
		"\2\u0437\u0433\3\2\2\2\u0437\u0435\3\2\2\2\u0438\u0439\3\2\2\2\u0439\u0437"+
		"\3\2\2\2\u0439\u043a\3\2\2\2\u043a\37\3\2\2\2\u043b\u044e\7%\2\2\u043c"+
		"\u043d\7\u0084\2\2\u043d\u0449\5\u030c\u0187\2\u043e\u043f\7\3\2\2\u043f"+
		"\u0444\5\u0130\u0099\2\u0440\u0441\7\26\2\2\u0441\u0443\5\u0130\u0099"+
		"\2\u0442\u0440\3\2\2\2\u0443\u0446\3\2\2\2\u0444\u0442\3\2\2\2\u0444\u0445"+
		"\3\2\2\2\u0445\u0447\3\2\2\2\u0446\u0444\3\2\2\2\u0447\u0448\7\4\2\2\u0448"+
		"\u044a\3\2\2\2\u0449\u043e\3\2\2\2\u0449\u044a\3\2\2\2\u044a\u044f\3\2"+
		"\2\2\u044b\u044c\7\u0114\2\2\u044c\u044d\7\u0084\2\2\u044d\u044f\5\u030e"+
		"\u0188\2\u044e\u043c\3\2\2\2\u044e\u044b\3\2\2\2\u044f\u0451\3\2\2\2\u0450"+
		"\u0452\7\u00f1\2\2\u0451\u0450\3\2\2\2\u0451\u0452\3\2\2\2\u0452\u0454"+
		"\3\2\2\2\u0453\u0455\5\u0138\u009d\2\u0454\u0453\3\2\2\2\u0455\u0456\3"+
		"\2\2\2\u0456\u0454\3\2\2\2\u0456\u0457\3\2\2\2\u0457!\3\2\2\2\u0458\u0459"+
		"\7%\2\2\u0459\u045a\7\u0095\2\2\u045a\u045c\5\u02d6\u016c\2\u045b\u045d"+
		"\5\u0102\u0082\2\u045c\u045b\3\2\2\2\u045c\u045d\3\2\2\2\u045d\u0461\3"+
		"\2\2\2\u045e\u0460\5\u0104\u0083\2\u045f\u045e\3\2\2\2\u0460\u0463\3\2"+
		"\2\2\u0461\u045f\3\2\2\2\u0461\u0462\3\2\2\2\u0462\u046c\3\2\2\2\u0463"+
		"\u0461\3\2\2\2\u0464\u0469\5\u0122\u0092\2\u0465\u0466\7\26\2\2\u0466"+
		"\u0468\5\u0122\u0092\2\u0467\u0465\3\2\2\2\u0468\u046b\3\2\2\2\u0469\u0467"+
		"\3\2\2\2\u0469\u046a\3\2\2\2\u046a\u046d\3\2\2\2\u046b\u0469\3\2\2\2\u046c"+
		"\u0464\3\2\2\2\u046c\u046d\3\2\2\2\u046d#\3\2\2\2\u046e\u046f\7%\2\2\u046f"+
		"\u0470\7\u01d6\2\2\u0470\u0474\5\u02d8\u016d\2\u0471\u0475\7\u01d7\2\2"+
		"\u0472\u0475\7`\2\2\u0473\u0475\5\u0102\u0082\2\u0474\u0471\3\2\2\2\u0474"+
		"\u0472\3\2\2\2\u0474\u0473\3\2\2\2\u0475%\3\2\2\2\u0476\u0477\7%\2\2\u0477"+
		"\u0478\7\u01d8\2\2\u0478\u047c\5\u02da\u016e\2\u0479\u047d\7\u01d7\2\2"+
		"\u047a\u047d\7`\2\2\u047b\u047d\5\u0102\u0082\2\u047c\u0479\3\2\2\2\u047c"+
		"\u047a\3\2\2\2\u047c\u047b\3\2\2\2\u047d\'\3\2\2\2\u047e\u047f\7%\2\2"+
		"\u047f\u0480\7\u00e4\2\2\u0480\u0482\5\u02dc\u016f\2\u0481\u0483\5\u013a"+
		"\u009e\2\u0482\u0481\3\2\2\2\u0483\u0484\3\2\2\2\u0484\u0482\3\2\2\2\u0484"+
		"\u0485\3\2\2\2\u0485)\3\2\2\2\u0486\u0487\7%\2\2\u0487\u0488\7\u010e\2"+
		"\2\u0488\u048a\5\u02de\u0170\2\u0489\u048b\5\u0140\u00a1\2\u048a\u0489"+
		"\3\2\2\2\u048b\u048c\3\2\2\2\u048c\u048a\3\2\2\2\u048c\u048d\3\2\2\2\u048d"+
		"+\3\2\2\2\u048e\u048f\7%\2\2\u048f\u0490\7\u0119\2\2\u0490\u0492\5\u0300"+
		"\u0181\2\u0491\u0493\5\u0142\u00a2\2\u0492\u0491\3\2\2\2\u0493\u0494\3"+
		"\2\2\2\u0494\u0492\3\2\2\2\u0494\u0495\3\2\2\2\u0495-\3\2\2\2\u0496\u0497"+
		"\7%\2\2\u0497\u0498\7\u0121\2\2\u0498\u049a\5\u02b8\u015d\2\u0499\u049b"+
		"\5\u0144\u00a3\2\u049a\u0499\3\2\2\2\u049b\u049c\3\2\2\2\u049c\u049a\3"+
		"\2\2\2\u049c\u049d\3\2\2\2\u049d/\3\2\2\2\u049e\u049f\7%\2\2\u049f\u04a3"+
		"\7\u0122\2\2\u04a0\u04a1\5\u02e2\u0172\2\u04a1\u04a2\7\23\2\2\u04a2\u04a4"+
		"\3\2\2\2\u04a3\u04a0\3\2\2\2\u04a3\u04a4\3\2\2\2\u04a4\u04a5\3\2\2\2\u04a5"+
		"\u04a9\5\u02e4\u0173\2\u04a6\u04a8\5\u0146\u00a4\2\u04a7\u04a6\3\2\2\2"+
		"\u04a8\u04ab\3\2\2\2\u04a9\u04a7\3\2\2\2\u04a9\u04aa\3\2\2\2\u04aa\u04ad"+
		"\3\2\2\2\u04ab\u04a9\3\2\2\2\u04ac\u04ae\5\u0168\u00b5\2\u04ad\u04ac\3"+
		"\2\2\2\u04ad\u04ae\3\2\2\2\u04ae\u04b0\3\2\2\2\u04af\u04b1\5\u016e\u00b8"+
		"\2\u04b0\u04af\3\2\2\2\u04b0\u04b1\3\2\2\2\u04b1\61\3\2\2\2\u04b2\u04b3"+
		"\7%\2\2\u04b3\u04b4\7\u0125\2\2\u04b4\u04b5\5\u02b4\u015b\2\u04b5\u04b6"+
		"\7\23\2\2\u04b6\u04b7\3\2\2\2\u04b7\u04b9\5\u02e8\u0175\2\u04b8\u04ba"+
		"\7\u00c2\2\2\u04b9\u04b8\3\2\2\2\u04b9\u04ba\3\2\2\2\u04ba\u04bb\3\2\2"+
		"\2\u04bb\u04bc\7\u01c4\2\2\u04bc\63\3\2\2\2\u04bd\u04be\7%\2\2\u04be\u04bf"+
		"\7\u0230\2\2\u04bf\u04c0\7\u022a\2\2\u04c0\u04c2\5\u02ea\u0176\2\u04c1"+
		"\u04c3\5\u0148\u00a5\2\u04c2\u04c1\3\2\2\2\u04c3\u04c4\3\2\2\2\u04c4\u04c2"+
		"\3\2\2\2\u04c4\u04c5\3\2\2\2\u04c5\65\3\2\2\2\u04c6\u04c7\7%\2\2\u04c7"+
		"\u04c8\7\u0135\2\2\u04c8\u04c9\5\u02c2\u0162\2\u04c9\u04ce\7\u01d5\2\2"+
		"\u04ca\u04cb\7\u012d\2\2\u04cb\u04cc\7\u01ca\2\2\u04cc\u04cd\7\u01cc\2"+
		"\2\u04cd\u04cf\5\u012c\u0097\2\u04ce\u04ca\3\2\2\2\u04ce\u04cf\3\2\2\2"+
		"\u04cf\67\3\2\2\2\u04d0\u04d3\7,\2\2\u04d1\u04d2\7\u00f2\2\2\u04d2\u04d4"+
		"\7\u010f\2\2\u04d3\u04d1\3\2\2\2\u04d3\u04d4\3\2\2\2\u04d4\u04d5\3\2\2"+
		"\2\u04d5\u04d6\t\3\2\2\u04d6\u04d7\7\3\2\2\u04d7\u04dc\5\34\17\2\u04d8"+
		"\u04d9\7\26\2\2\u04d9\u04db\5\34\17\2\u04da\u04d8\3\2\2\2\u04db\u04de"+
		"\3\2\2\2\u04dc\u04da\3\2\2\2\u04dc\u04dd\3\2\2\2\u04dd\u04df\3\2\2\2\u04de"+
		"\u04dc\3\2\2\2\u04df\u04e0\7\4\2\2\u04e0\u04e1\7\u013c\2\2\u04e1\u04e4"+
		"\7\u00e4\2\2\u04e2\u04e5\5\u02dc\u016f\2\u04e3\u04e5\5\u0310\u0189\2\u04e4"+
		"\u04e2\3\2\2\2\u04e4\u04e3\3\2\2\2\u04e59\3\2\2\2\u04e6\u04e7\7\63\2\2"+
		"\u04e7\u04e8\7[\2\2\u04e8\u04e9\7\u0231\2\2\u04e9;\3\2\2\2\u04ea\u04ed"+
		"\7\67\2\2\u04eb\u04ee\5\u02dc\u016f\2\u04ec\u04ee\5\u0310\u0189\2\u04ed"+
		"\u04eb\3\2\2\2\u04ed\u04ec\3\2\2\2\u04ee\u04ef\3\2\2\2\u04ef\u0505\7\3"+
		"\2\2\u04f0\u04f5\5\u01e2\u00f2\2\u04f1\u04f5\7\u00c3\2\2\u04f2\u04f3\7"+
		"\u0121\2\2\u04f3\u04f5\5\u02b6\u015c\2\u04f4\u04f0\3\2\2\2\u04f4\u04f1"+
		"\3\2\2\2\u04f4\u04f2\3\2\2\2\u04f5\u04ff\3\2\2\2\u04f6\u04fb\7\26\2\2"+
		"\u04f7\u04fc\5\u01e2\u00f2\2\u04f8\u04fc\7\u00c3\2\2\u04f9\u04fa\7\u0121"+
		"\2\2\u04fa\u04fc\5\u02b6\u015c\2\u04fb\u04f7\3\2\2\2\u04fb\u04f8\3\2\2"+
		"\2\u04fb\u04f9\3\2\2\2\u04fc\u04fe\3\2\2\2\u04fd\u04f6\3\2\2\2\u04fe\u0501"+
		"\3\2\2\2\u04ff\u04fd\3\2\2\2\u04ff\u0500\3\2\2\2\u0500\u0506\3\2\2\2\u0501"+
		"\u04ff\3\2\2\2\u0502\u0503\7\u012d\2\2\u0503\u0504\7^\2\2\u0504\u0506"+
		"\5\u0310\u0189\2\u0505\u04f4\3\2\2\2\u0505\u0502\3\2\2\2\u0506\u0507\3"+
		"\2\2\2\u0507\u0508\7\4\2\2\u0508=\3\2\2\2\u0509\u050a\7A\2\2\u050a\u050b"+
		"\5\n\6\2\u050b?\3\2\2\2\u050c\u050d\7F\2\2\u050d\u0550\7\u00ca\2\2\u050e"+
		"\u054b\5\u0172\u00ba\2\u050f\u0510\7E\2\2\u0510\u0511\5\u02b6\u015c\2"+
		"\u0511\u0512\7\23\2\2\u0512\u0513\5\u02a4\u0153\2\u0513\u054b\3\2\2\2"+
		"\u0514\u0519\5\u0176\u00bc\2\u0515\u0516\7\u0232\2\2\u0516\u051a\7\u0233"+
		"\2\2\u0517\u0518\7\u0233\2\2\u0518\u051a\5\u02d2\u016a\2\u0519\u0515\3"+
		"\2\2\2\u0519\u0517\3\2\2\2\u0519\u051a\3\2\2\2\u051a\u054b\3\2\2\2\u051b"+
		"\u051c\7\u0095\2\2\u051c\u054b\5\u02d6\u016c\2\u051d\u051e\7\u00d3\2\2"+
		"\u051e\u051f\5\u01da\u00ee\2\u051f\u0520\7\23\2\2\u0520\u0525\5\u02c6"+
		"\u0164\2\u0521\u0523\7\u0233\2\2\u0522\u0521\3\2\2\2\u0522\u0523\3\2\2"+
		"\2\u0523\u0524\3\2\2\2\u0524\u0526\5\u02d4\u016b\2\u0525\u0522\3\2\2\2"+
		"\u0525\u0526\3\2\2\2\u0526\u054b\3\2\2\2\u0527\u0528\7\u00dd\2\2\u0528"+
		"\u054b\5\u02c8\u0165\2\u0529\u052a\7\u00e4\2\2\u052a\u052f\5\u02dc\u016f"+
		"\2\u052b\u052c\7\u0232\2\2\u052c\u0530\7\u0233\2\2\u052d\u052e\7\u0233"+
		"\2\2\u052e\u0530\5\u02d2\u016a\2\u052f\u052b\3\2\2\2\u052f\u052d\3\2\2"+
		"\2\u052f\u0530\3\2\2\2\u0530\u054b\3\2\2\2\u0531\u0532\7\u00f8\2\2\u0532"+
		"\u054b\5\u02f0\u0179\2\u0533\u0534\7\u010e\2\2\u0534\u054b\5\u02de\u0170"+
		"\2\u0535\u0536\7\u0121\2\2\u0536\u054b\5\u02b6\u015c\2\u0537\u0538\7\u0125"+
		"\2\2\u0538\u053d\5\u02e8\u0175\2\u0539\u053a\7\u0232\2\2\u053a\u053e\7"+
		"\u0233\2\2\u053b\u053c\7\u0233\2\2\u053c\u053e\5\u02d2\u016a\2\u053d\u0539"+
		"\3\2\2\2\u053d\u053b\3\2\2\2\u053d\u053e\3\2\2\2\u053e\u054b\3\2\2\2\u053f"+
		"\u0540\7\u0230\2\2\u0540\u0541\7\u022a\2\2\u0541\u054b\5\u02ea\u0176\2"+
		"\u0542\u0543\7\u0127\2\2\u0543\u054b\5\u02ca\u0166\2\u0544\u0545\7\u01d6"+
		"\2\2\u0545\u054b\5\u02d8\u016d\2\u0546\u0547\7\u01d8\2\2\u0547\u054b\5"+
		"\u02da\u016e\2\u0548\u0549\7\u0131\2\2\u0549\u054b\5\u02cc\u0167\2\u054a"+
		"\u050e\3\2\2\2\u054a\u050f\3\2\2\2\u054a\u0514\3\2\2\2\u054a\u051b\3\2"+
		"\2\2\u054a\u051d\3\2\2\2\u054a\u0527\3\2\2\2\u054a\u0529\3\2\2\2\u054a"+
		"\u0531\3\2\2\2\u054a\u0533\3\2\2\2\u054a\u0535\3\2\2\2\u054a\u0537\3\2"+
		"\2\2\u054a\u053f\3\2\2\2\u054a\u0542\3\2\2\2\u054a\u0544\3\2\2\2\u054a"+
		"\u0546\3\2\2\2\u054a\u0548\3\2\2\2\u054b\u054c\3\2\2\2\u054c\u054d\7\u009e"+
		"\2\2\u054d\u054e\7\30\2\2\u054e\u0551\3\2\2\2\u054f\u0551\5\u0174\u00bb"+
		"\2\u0550\u054a\3\2\2\2\u0550\u054f\3\2\2\2\u0551A\3\2\2\2\u0552\u0554"+
		"\7G\2\2\u0553\u0555\7\u0235\2\2\u0554\u0553\3\2\2\2\u0554\u0555\3\2\2"+
		"\2\u0555C\3\2\2\2\u0556\u0561\7J\2\2\u0557\u055a\7\u0124\2\2\u0558\u055b"+
		"\5\u02b2\u015a\2\u0559\u055b\5\u0310\u0189\2\u055a\u0558\3\2\2\2\u055a"+
		"\u0559\3\2\2\2\u055b\u055d\3\2\2\2\u055c\u055e\5\u00ceh\2\u055d\u055c"+
		"\3\2\2\2\u055d\u055e\3\2\2\2\u055e\u0562\3\2\2\2\u055f\u0562\7\u020b\2"+
		"\2\u0560\u0562\5\u00ceh\2\u0561\u0557\3\2\2\2\u0561\u055f\3\2\2\2\u0561"+
		"\u0560\3\2\2\2\u0561\u0562\3\2\2\2\u0562E\3\2\2\2\u0563\u0565\7P\2\2\u0564"+
		"\u0566\7\u00e7\2\2\u0565\u0564\3\2\2\2\u0565\u0566\3\2\2\2\u0566\u0567"+
		"\3\2\2\2\u0567\u056a\7\u0234\2\2\u0568\u056b\5\u00caf\2\u0569\u056b\5"+
		"\u00ccg\2\u056a\u0568\3\2\2\2\u056a\u0569\3\2\2\2\u056bG\3\2\2\2\u056c"+
		"\u056d\7P\2\2\u056d\u056e\t\4\2\2\u056e\u056f\7\u0121\2\2\u056f\u0570"+
		"\5\u02ba\u015e\2\u0570\u0572\7\u0093\2\2\u0571\u0573\5\u02e2\u0172\2\u0572"+
		"\u0571\3\2\2\2\u0572\u0573\3\2\2\2\u0573\u0574\3\2\2\2\u0574\u0575\5\u02e4"+
		"\u0173\2\u0575\u0576\7\u011a\2\2\u0576\u0579\5\u02b6\u015c\2\u0577\u0578"+
		"\7\u01f1\2\2\u0578\u057a\t\5\2\2\u0579\u0577\3\2\2\2\u0579\u057a\3\2\2"+
		"\2\u057a\u057b\3\2\2\2\u057b\u057c\7E\2\2\u057c\u057d\5\u02a4\u0153\2"+
		"\u057d\u057e\7\u00d6\2\2\u057e\u057f\7\31\2\2\u057fI\3\2\2\2\u0580\u0581"+
		"\7P\2\2\u0581\u0582\7W\2\2\u0582\u0586\5\u02e2\u0172\2\u0583\u0585\5\u014a"+
		"\u00a6\2\u0584\u0583\3\2\2\2\u0585\u0588\3\2\2\2\u0586\u0584\3\2\2\2\u0586"+
		"\u0587\3\2\2\2\u0587K\3\2\2\2\u0588\u0586\3\2\2\2\u0589\u058e\5N(\2\u058a"+
		"\u058e\5P)\2\u058b\u058e\5R*\2\u058c\u058e\5T+\2\u058d\u0589\3\2\2\2\u058d"+
		"\u058a\3\2\2\2\u058d\u058b\3\2\2\2\u058d\u058c\3\2\2\2\u058eM\3\2\2\2"+
		"\u058f\u0590\7P\2\2\u0590\u0591\7\u0084\2\2\u0591\u0592\5\u030c\u0187"+
		"\2\u0592\u059b\7\3\2\2\u0593\u0598\5d\63\2";
	private static final String _serializedATNSegment1 =
		"\u0594\u0595\7\26\2\2\u0595\u0597\5d\63\2\u0596\u0594\3\2\2\2\u0597\u059a"+
		"\3\2\2\2\u0598\u0596\3\2\2\2\u0598\u0599\3\2\2\2\u0599\u059c\3\2\2\2\u059a"+
		"\u0598\3\2\2\2\u059b\u0593\3\2\2\2\u059b\u059c\3\2\2\2\u059c\u059d\3\2"+
		"\2\2\u059d\u059f\7\4\2\2\u059e\u05a0\5j\66\2\u059f\u059e\3\2\2\2\u05a0"+
		"\u05a1\3\2\2\2\u05a1\u059f\3\2\2\2\u05a1\u05a2\3\2\2\2\u05a2O\3\2\2\2"+
		"\u05a3\u05a4\7P\2\2\u05a4\u05a5\7\u0084\2\2\u05a5\u05a6\5\u030c\u0187"+
		"\2\u05a6\u05af\7\3\2\2\u05a7\u05ac\5d\63\2\u05a8\u05a9\7\26\2\2\u05a9"+
		"\u05ab\5d\63\2\u05aa\u05a8\3\2\2\2\u05ab\u05ae\3\2\2\2\u05ac\u05aa\3\2"+
		"\2\2\u05ac\u05ad\3\2\2\2\u05ad\u05b0\3\2\2\2\u05ae\u05ac\3\2\2\2\u05af"+
		"\u05a7\3\2\2\2\u05af\u05b0\3\2\2\2\u05b0\u05b1\3\2\2\2\u05b1\u05b3\7\4"+
		"\2\2\u05b2\u05b4\5\u00c4c\2\u05b3\u05b2\3\2\2\2\u05b4\u05b5\3\2\2\2\u05b5"+
		"\u05b3\3\2\2\2\u05b5\u05b6\3\2\2\2\u05b6Q\3\2\2\2\u05b7\u05b8\7P\2\2\u05b8"+
		"\u05b9\7\u0084\2\2\u05b9\u05ba\5\u030c\u0187\2\u05ba\u05c3\7\3\2\2\u05bb"+
		"\u05c0\5d\63\2\u05bc\u05bd\7\26\2\2\u05bd\u05bf\5d\63\2\u05be\u05bc\3"+
		"\2\2\2\u05bf\u05c2\3\2\2\2\u05c0\u05be\3\2\2\2\u05c0\u05c1\3\2\2\2\u05c1"+
		"\u05c4\3\2\2\2\u05c2\u05c0\3\2\2\2\u05c3\u05bb\3\2\2\2\u05c3\u05c4\3\2"+
		"\2\2\u05c4\u05c5\3\2\2\2\u05c5\u05c7\7\4\2\2\u05c6\u05c8\5\u00c6d\2\u05c7"+
		"\u05c6\3\2\2\2\u05c8\u05c9\3\2\2\2\u05c9\u05c7\3\2\2\2\u05c9\u05ca\3\2"+
		"\2\2\u05caS\3\2\2\2\u05cb\u05cc\7P\2\2\u05cc\u05cd\7\u0084\2\2\u05cd\u05ce"+
		"\5\u030c\u0187\2\u05ce\u05d7\7\3\2\2\u05cf\u05d4\5f\64\2\u05d0\u05d1\7"+
		"\26\2\2\u05d1\u05d3\5f\64\2\u05d2\u05d0\3\2\2\2\u05d3\u05d6\3\2\2\2\u05d4"+
		"\u05d2\3\2\2\2\u05d4\u05d5\3\2\2\2\u05d5\u05d8\3\2\2\2\u05d6\u05d4\3\2"+
		"\2\2\u05d7\u05cf\3\2\2\2\u05d7\u05d8\3\2\2\2\u05d8\u05d9\3\2\2\2\u05d9"+
		"\u05db\7\4\2\2\u05da\u05dc\5\u00c8e\2\u05db\u05da\3\2\2\2\u05dc\u05dd"+
		"\3\2\2\2\u05dd\u05db\3\2\2\2\u05dd\u05de\3\2\2\2\u05deU\3\2\2\2\u05df"+
		"\u05e0\7P\2\2\u05e0\u05e1\7\u0087\2\2\u05e1\u05e2\7\u023b\2\2\u05e2\u05e3"+
		"\7\u0121\2\2\u05e3\u05f1\5\u02b6\u015c\2\u05e4\u05e5\7\3\2\2\u05e5\u05ea"+
		"\5b\62\2\u05e6\u05e7\7\26\2\2\u05e7\u05e9\5b\62\2\u05e8\u05e6\3\2\2\2"+
		"\u05e9\u05ec\3\2\2\2\u05ea\u05e8\3\2\2\2\u05ea\u05eb\3\2\2\2\u05eb\u05ed"+
		"\3\2\2\2\u05ec\u05ea\3\2\2\2\u05ed\u05ee\7\4\2\2\u05ee\u05f2\3\2\2\2\u05ef"+
		"\u05f0\7\u00ab\2\2\u05f0\u05f2\5\u02b6\u015c\2\u05f1\u05e4\3\2\2\2\u05f1"+
		"\u05ef\3\2\2\2\u05f2\u05f5\3\2\2\2\u05f3\u05f4\7<\2\2\u05f4\u05f6\t\6"+
		"\2\2\u05f5\u05f3\3\2\2\2\u05f5\u05f6\3\2\2\2\u05f6W\3\2\2\2\u05f7\u05fe"+
		"\7P\2\2\u05f8\u05fc\7\u012a\2\2\u05f9\u05fa\7\u013a\2\2\u05fa\u05fb\7"+
		"\u00c2\2\2\u05fb\u05fd\7\u00c3\2\2\u05fc\u05f9\3\2\2\2\u05fc\u05fd\3\2"+
		"\2\2\u05fd\u05ff\3\2\2\2\u05fe\u05f8\3\2\2\2\u05fe\u05ff\3\2\2\2\u05ff"+
		"\u0600\3\2\2\2\u0600\u0601\7\u0095\2\2\u0601\u0602\5\u02d6\u016c\2\u0602"+
		"\u0622\7\u00ca\2\2\u0603\u0604\5\u02b6\u015c\2\u0604\u0607\7\3\2\2\u0605"+
		"\u0608\5\u02a4\u0153\2\u0606\u0608\5\u01e4\u00f3\2\u0607\u0605\3\2\2\2"+
		"\u0607\u0606\3\2\2\2\u0608\u060a\3\2\2\2\u0609\u060b\t\7\2\2\u060a\u0609"+
		"\3\2\2\2\u060a\u060b\3\2\2\2\u060b\u0616\3\2\2\2\u060c\u060f\7\26\2\2"+
		"\u060d\u0610\5\u02a4\u0153\2\u060e\u0610\5\u01e4\u00f3\2\u060f\u060d\3"+
		"\2\2\2\u060f\u060e\3\2\2\2\u0610\u0612\3\2\2\2\u0611\u0613\t\7\2\2\u0612"+
		"\u0611\3\2\2\2\u0612\u0613\3\2\2\2\u0613\u0615\3\2\2\2\u0614\u060c\3\2"+
		"\2\2\u0615\u0618\3\2\2\2\u0616\u0614\3\2\2\2\u0616\u0617\3\2\2\2\u0617"+
		"\u061d\3\2\2\2\u0618\u0616\3\2\2\2\u0619\u061a\7\26\2\2\u061a\u061b\7"+
		"\u01a9\2\2\u061b\u061c\t\b\2\2\u061c\u061e\7\u0206\2\2\u061d\u0619\3\2"+
		"\2\2\u061d\u061e\3\2\2\2\u061e\u061f\3\2\2\2\u061f\u0620\7\4\2\2\u0620"+
		"\u0623\3\2\2\2\u0621\u0623\5\u02ba\u015e\2\u0622\u0603\3\2\2\2\u0622\u0621"+
		"\3\2\2\2\u0623\u0627\3\2\2\2\u0624\u0626\5\u014c\u00a7\2\u0625\u0624\3"+
		"\2\2\2\u0626\u0629\3\2\2\2\u0627\u0625\3\2\2\2\u0627\u0628\3\2\2\2\u0628"+
		"Y\3\2\2\2\u0629\u0627\3\2\2\2\u062a\u062b\7P\2\2\u062b\u062c\7\u0219\2"+
		"\2\u062c\u062d\7\u0122\2\2\u062d\u0631\5\u02e4\u0173\2\u062e\u0630\5\u014e"+
		"\u00a8\2\u062f\u062e\3\2\2\2\u0630\u0633\3\2\2\2\u0631\u062f\3\2\2\2\u0631"+
		"\u0632\3\2\2\2\u0632[\3\2\2\2\u0633\u0631\3\2\2\2\u0634\u0635\7P\2\2\u0635"+
		"\u0636\7\u01d6\2\2\u0636\u0637\5\u02d8\u016d\2\u0637\u0638\7\u00ca\2\2"+
		"\u0638\u063d\5\u02b6\u015c\2\u0639\u063b\7*\2\2\u063a\u0639\3\2\2\2\u063a"+
		"\u063b\3\2\2\2\u063b\u063c\3\2\2\2\u063c\u063e\5\u02b0\u0159\2\u063d\u063a"+
		"\3\2\2\2\u063d\u063e\3\2\2\2\u063e\u063f\3\2\2\2\u063f\u0640\7\u0080\2"+
		"\2\u0640\u0641\7E\2\2\u0641\u0642\5\u02a4\u0153\2\u0642\u0643\7\u00f4"+
		"\2\2\u0643\u0645\5\u0266\u0134\2\u0644\u0646\5\u011c\u008f\2\u0645\u0644"+
		"\3\2\2\2\u0645\u0646\3\2\2\2\u0646]\3\2\2\2\u0647\u0648\7P\2\2\u0648\u0649"+
		"\7\u01d8\2\2\u0649\u064a\5\u02da\u016e\2\u064a\u064b\7\u00ca\2\2\u064b"+
		"\u0650\5\u02b6\u015c\2\u064c\u064e\7*\2\2\u064d\u064c\3\2\2\2\u064d\u064e"+
		"\3\2\2\2\u064e\u064f\3\2\2\2\u064f\u0651\5\u02b0\u0159\2\u0650\u064d\3"+
		"\2\2\2\u0650\u0651\3\2\2\2\u0651\u0652\3\2\2\2\u0652\u0653\7\u0080\2\2"+
		"\u0653\u0654\7\u018b\2\2\u0654\u0655\7\u013a\2\2\u0655\u0656\5\u026e\u0138"+
		"\2\u0656\u0657\7\u01fa\2\2\u0657\u0658\7\u0080\2\2\u0658\u0659\7\"\2\2"+
		"\u0659\u065b\7\u01ee\2\2\u065a\u065c\5\u011c\u008f\2\u065b\u065a\3\2\2"+
		"\2\u065b\u065c\3\2\2\2\u065c_\3\2\2\2\u065d\u0660\7P\2\2\u065e\u065f\7"+
		"\u00ce\2\2\u065f\u0661\7\u02d4\2\2\u0660\u065e\3\2\2\2\u0660\u0661\3\2"+
		"\2\2\u0661\u0662\3\2\2\2\u0662\u0663\7\u00e4\2\2\u0663\u066f\5\u02dc\u016f"+
		"\2\u0664\u0665\7\3\2\2\u0665\u066a\5h\65\2\u0666\u0667\7\26\2\2\u0667"+
		"\u0669\5h\65\2\u0668\u0666\3\2\2\2\u0669\u066c\3\2\2\2\u066a\u0668\3\2"+
		"\2\2\u066a\u066b\3\2\2\2\u066b\u066d\3\2\2\2\u066c\u066a\3\2\2\2\u066d"+
		"\u066e\7\4\2\2\u066e\u0670\3\2\2\2\u066f\u0664\3\2\2\2\u066f\u0670\3\2"+
		"\2\2\u0670\u0672\3\2\2\2\u0671\u0673\5\u013c\u009f\2\u0672\u0671\3\2\2"+
		"\2\u0673\u0674\3\2\2\2\u0674\u0672\3\2\2\2\u0674\u0675\3\2\2\2\u0675a"+
		"\3\2\2\2\u0676\u0677\5\u02a4\u0153\2\u0677\u067a\5\u0198\u00cd\2\u0678"+
		"\u0679\7\u00c2\2\2\u0679\u067b\7\u00c3\2\2\u067a\u0678\3\2\2\2\u067a\u067b"+
		"\3\2\2\2\u067bc\3\2\2\2\u067c\u067e\5\u02f4\u017b\2\u067d\u067c\3\2\2"+
		"\2\u067d\u067e\3\2\2\2\u067e\u068b\3\2\2\2\u067f\u0682\5\u0132\u009a\2"+
		"\u0680\u0681\7*\2\2\u0681\u0683\7\u00af\2\2\u0682\u0680\3\2\2\2\u0682"+
		"\u0683\3\2\2\2\u0683\u068c\3\2\2\2\u0684\u0685\7\u0121\2\2\u0685\u0686"+
		"\7\u00ab\2\2\u0686\u0689\5\u02b6\u015c\2\u0687\u0688\7*\2\2\u0688\u068a"+
		"\7\u00af\2\2\u0689\u0687\3\2\2\2\u0689\u068a\3\2\2\2\u068a\u068c\3\2\2"+
		"\2\u068b\u067f\3\2\2\2\u068b\u0684\3\2\2\2\u068ce\3\2\2\2\u068d\u068e"+
		"\5\u02f4\u017b\2\u068e\u068f\5\u0132\u009a\2\u068fg\3\2\2\2\u0690\u0692"+
		"\t\t\2\2\u0691\u0690\3\2\2\2\u0691\u0692\3\2\2\2\u0692\u0694\3\2\2\2\u0693"+
		"\u0695\5\u02f4\u017b\2\u0694\u0693\3\2\2\2\u0694\u0695\3\2\2\2\u0695\u0696"+
		"\3\2\2\2\u0696\u0699\5\u013e\u00a0\2\u0697\u0698\7*\2\2\u0698\u069a\7"+
		"\u00af\2\2\u0699\u0697\3\2\2\2\u0699\u069a\3\2\2\2\u069ai\3\2\2\2\u069b"+
		"\u06a9\7\u00f5\2\2\u069c\u069f\5\u0198\u00cd\2\u069d\u069e\7*\2\2\u069e"+
		"\u06a0\7\u00af\2\2\u069f\u069d\3\2\2\2\u069f\u06a0\3\2\2\2\u06a0\u06aa"+
		"\3\2\2\2\u06a1\u06a2\5\u0198\u00cd\2\u06a2\u06a3\7;\2\2\u06a3\u06a4\7"+
		"\u0082\2\2\u06a4\u06a7\5\u0198\u00cd\2\u06a5\u06a6\7*\2\2\u06a6\u06a8"+
		"\7\u00af\2\2\u06a7\u06a5\3\2\2\2\u06a7\u06a8\3\2\2\2\u06a8\u06aa\3\2\2"+
		"\2\u06a9\u069c\3\2\2\2\u06a9\u06a1\3\2\2\2\u06aa\u06c7\3\2\2\2\u06ab\u06c7"+
		"\5l\67\2\u06ac\u06c7\5v<\2\u06ad\u06c7\5~@\2\u06ae\u06c7\5\u0082B\2\u06af"+
		"\u06c7\5\u0084C\2\u06b0\u06c7\5\u0086D\2\u06b1\u06c7\5\u0090I\2\u06b2"+
		"\u06c7\5\u0092J\2\u06b3\u06c7\5\u0094K\2\u06b4\u06c7\5\u0096L\2\u06b5"+
		"\u06c7\5\u0098M\2\u06b6\u06c7\5\u009cO\2\u06b7\u06c7\5\u009eP\2\u06b8"+
		"\u06c7\5\u00a0Q\2\u06b9\u06c7\5\u00a2R\2\u06ba\u06c7\5\u00a4S\2\u06bb"+
		"\u06c7\5\u00a8U\2\u06bc\u06c7\5\u00aaV\2\u06bd\u06c7\5\u00acW\2\u06be"+
		"\u06c7\5\u00aeX\2\u06bf\u06c7\5\u00b0Y\2\u06c0\u06c7\5\u00b2Z\2\u06c1"+
		"\u06c7\5\u00b6\\\2\u06c2\u06c7\5\u00b8]\2\u06c3\u06c7\5\u00ba^\2\u06c4"+
		"\u06c7\5\u00bc_\2\u06c5\u06c7\5\u00c0a\2\u06c6\u069b\3\2\2\2\u06c6\u06ab"+
		"\3\2\2\2\u06c6\u06ac\3\2\2\2\u06c6\u06ad\3\2\2\2\u06c6\u06ae\3\2\2\2\u06c6"+
		"\u06af\3\2\2\2\u06c6\u06b0\3\2\2\2\u06c6\u06b1\3\2\2\2\u06c6\u06b2\3\2"+
		"\2\2\u06c6\u06b3\3\2\2\2\u06c6\u06b4\3\2\2\2\u06c6\u06b5\3\2\2\2\u06c6"+
		"\u06b6\3\2\2\2\u06c6\u06b7\3\2\2\2\u06c6\u06b8\3\2\2\2\u06c6\u06b9\3\2"+
		"\2\2\u06c6\u06ba\3\2\2\2\u06c6\u06bb\3\2\2\2\u06c6\u06bc\3\2\2\2\u06c6"+
		"\u06bd\3\2\2\2\u06c6\u06be\3\2\2\2\u06c6\u06bf\3\2\2\2\u06c6\u06c0\3\2"+
		"\2\2\u06c6\u06c1\3\2\2\2\u06c6\u06c2\3\2\2\2\u06c6\u06c3\3\2\2\2\u06c6"+
		"\u06c4\3\2\2\2\u06c6\u06c5\3\2\2\2\u06c7k\3\2\2\2\u06c8\u06ce\7z\2\2\u06c9"+
		"\u06cc\7\u01be\2\2\u06ca\u06cd\5\u01d6\u00ec\2\u06cb\u06cd\5\u037a\u01be"+
		"\2\u06cc\u06ca\3\2\2\2\u06cc\u06cb\3\2\2\2\u06cd\u06cf\3\2\2\2\u06ce\u06c9"+
		"\3\2\2\2\u06ce\u06cf\3\2\2\2\u06cfm\3\2\2\2\u06d0\u06d1\7z\2\2\u06d1\u06d4"+
		"\7\u01be\2\2\u06d2\u06d5\5\u01d6\u00ec\2\u06d3\u06d5\5\u037a\u01be\2\u06d4"+
		"\u06d2\3\2\2\2\u06d4\u06d3\3\2\2\2\u06d5o\3\2\2\2\u06d6\u06d8\7h\2\2\u06d7"+
		"\u06d6\3\2\2\2\u06d7\u06d8\3\2\2\2\u06d8\u06d9\3\2\2\2\u06d9\u06da\7\u00f2"+
		"\2\2\u06da\u06db\t\n\2\2\u06db\u06dc\7\31\2\2\u06dcq\3\2\2\2\u06dd\u06de"+
		"\7\u00a6\2\2\u06de\u06df\7\u01c6\2\2\u06dfs\3\2\2\2\u06e0\u06e1\7\u00a6"+
		"\2\2\u06e1\u06e2\t\13\2\2\u06e2u\3\2\2\2\u06e3\u06e4\7\u00a6\2\2\u06e4"+
		"\u06e5\t\f\2\2\u06e5w\3\2\2\2\u06e6\u06e7\7\u00a6\2\2\u06e7\u06e8\t\r"+
		"\2\2\u06e8y\3\2\2\2\u06e9\u06ea\7\u00a6\2\2\u06ea\u06eb\t\16\2\2\u06eb"+
		"{\3\2\2\2\u06ec\u06ed\7\u00d5\2\2\u06ed\u06ee\7\u011b\2\2\u06ee\u06ef"+
		"\7\u01c6\2\2\u06ef}\3\2\2\2\u06f0\u06f1\7\u00d5\2\2\u06f1\u06f2\7\u011b"+
		"\2\2\u06f2\u06f3\t\17\2\2\u06f3\177\3\2\2\2\u06f4\u06f5\7\u00d5\2\2\u06f5"+
		"\u0705\7\u011b\2\2\u06f6\u0706\7\u01c6\2\2\u06f7\u0706\7\u01e1\2\2\u06f8"+
		"\u06f9\7\u0115\2\2\u06f9\u0706\7\67\2\2\u06fa\u0706\7\u01e3\2\2\u06fb"+
		"\u06fc\7\u0111\2\2\u06fc\u0706\7\67\2\2\u06fd\u0701\7\u01e3\2\2\u06fe"+
		"\u06ff\7\u0111\2\2\u06ff\u0701\7\67\2\2\u0700\u06fd\3\2\2\2\u0700\u06fe"+
		"\3\2\2\2\u0701\u0702\3\2\2\2\u0702\u0703\7\u013c\2\2\u0703\u0706\7\u00c4"+
		"\2\2\u0704\u0706\7\u01bc\2\2\u0705\u06f6\3\2\2\2\u0705\u06f7\3\2\2\2\u0705"+
		"\u06f8\3\2\2\2\u0705\u06fa\3\2\2\2\u0705\u06fb\3\2\2\2\u0705\u0700\3\2"+
		"\2\2\u0705\u0704\3\2\2\2\u0706\u0081\3\2\2\2\u0707\u0709\7\u00c2\2\2\u0708"+
		"\u0707\3\2\2\2\u0708\u0709\3\2\2\2\u0709\u070a\3\2\2\2\u070a\u0710\7_"+
		"\2\2\u070b\u070d\7\u00c2\2\2\u070c\u070b\3\2\2\2\u070c\u070d\3\2\2\2\u070d"+
		"\u070e\3\2\2\2\u070e\u0710\7\u0132\2\2\u070f\u0708\3\2\2\2\u070f\u070c"+
		"\3\2\2\2\u0710\u0083\3\2\2\2\u0711\u0712\7{\2\2\u0712\u0085\3\2\2\2\u0713"+
		"\u0714\7\u00f5\2\2\u0714\u0715\7\u00c3\2\2\u0715\u0716\7\u00ca\2\2\u0716"+
		"\u0717\7\u00c3\2\2\u0717\u071f\7\u0160\2\2\u0718\u0719\7\u01b4\2\2\u0719"+
		"\u071a\7\u00ca\2\2\u071a\u071b\7\u00c3\2\2\u071b\u071f\7\u0160\2\2\u071c"+
		"\u071d\7\u00c3\2\2\u071d\u071f\7\67\2\2\u071e\u0713\3\2\2\2\u071e\u0718"+
		"\3\2\2\2\u071e\u071c\3\2\2\2\u071f\u0087\3\2\2\2\u0720\u0721\7\u01b4\2"+
		"\2\u0721\u0722\7\u00ca\2\2\u0722\u0723\7\u00c3\2\2\u0723\u0727\7\u0160"+
		"\2\2\u0724\u0725\7\u00c3\2\2\u0725\u0727\7\67\2\2\u0726\u0720\3\2\2\2"+
		"\u0726\u0724\3\2\2\2\u0727\u0089\3\2\2\2\u0728\u0729\t\20\2\2\u0729\u072a"+
		"\7\u01e2\2\2\u072a\u072b\7\u01e4\2\2\u072b\u008b\3\2\2\2\u072c\u072d\7"+
		"\u00ea\2\2\u072d\u072e\7\u01c6\2\2\u072e\u0732\7V\2\2\u072f\u0730\7M\2"+
		"\2\u0730\u0732\7\u01c6\2\2\u0731\u072c\3\2\2\2\u0731\u072f\3\2\2\2\u0732"+
		"\u008d\3\2\2\2\u0733\u0734\7\u00ea\2\2\u0734\u0735\7\u01c6\2\2\u0735\u073b"+
		"\7V\2\2\u0736\u0737\7M\2\2\u0737\u073b\7\u01c6\2\2\u0738\u0739\7\u00c0"+
		"\2\2\u0739\u073b\7\u01c6\2\2\u073a\u0733\3\2\2\2\u073a\u0736\3\2\2\2\u073a"+
		"\u0738\3\2\2\2\u073b\u008f\3\2\2\2\u073c\u073d\7\u00bb\2\2\u073d\u073e"+
		"\7\u01c6\2\2\u073e\u0747\7V\2\2\u073f\u0740\7\u00ea\2\2\u0740\u0741\7"+
		"\u01c6\2\2\u0741\u0747\7V\2\2\u0742\u0743\7M\2\2\u0743\u0747\7\u01c6\2"+
		"\2\u0744\u0745\7\u00c0\2\2\u0745\u0747\7\u01c6\2\2\u0746\u073c\3\2\2\2"+
		"\u0746\u073f\3\2\2\2\u0746\u0742\3\2\2\2\u0746\u0744\3\2\2\2\u0747\u0091"+
		"\3\2\2\2\u0748\u074a\7\u00c0\2\2\u0749\u0748\3\2\2\2\u0749\u074a\3\2\2"+
		"\2\u074a\u074b\3\2\2\2\u074b\u074c\7z\2\2\u074c\u074d\7\u01b1\2\2\u074d"+
		"\u0093\3\2\2\2\u074e\u074f\7\u00d3\2\2\u074f\u0750\7\u00da\2\2\u0750\u0755"+
		"\5\u01d8\u00ed\2\u0751\u0752\7\u00c0\2\2\u0752\u0753\7\u00d3\2\2\u0753"+
		"\u0755\7\u00da\2\2\u0754\u074e\3\2\2\2\u0754\u0751\3\2\2\2\u0755\u0095"+
		"\3\2\2\2\u0756\u0757\7\u00c0\2\2\u0757\u075b\7\u0107\2\2\u0758\u0759\7"+
		"\u0107\2\2\u0759\u075b\7\31\2\2\u075a\u0756\3\2\2\2\u075a\u0758\3\2\2"+
		"\2\u075b\u0097\3\2\2\2\u075c\u075e\7\u00c0\2\2\u075d\u075c\3\2\2\2\u075d"+
		"\u075e\3\2\2\2\u075e\u075f\3\2\2\2\u075f\u0760\7~\2\2\u0760\u0761\7\67"+
		"\2\2\u0761\u0099\3\2\2\2\u0762\u0763\7a\2\2\u0763\u0764\7\u01c0\2\2\u0764"+
		"\u009b\3\2\2\2\u0765\u0766\t\21\2\2\u0766\u0767\7\u01c0\2\2\u0767\u009d"+
		"\3\2\2\2\u0768\u076a\7\u00c0\2\2\u0769\u0768\3\2\2\2\u0769\u076a\3\2\2"+
		"\2\u076a\u076b\3\2\2\2\u076b\u076c\7Z\2\2\u076c\u009f\3\2\2\2\u076d\u076e"+
		"\7\u025e\2\2\u076e\u076f\7\31\2\2\u076f\u00a1\3\2\2\2\u0770\u0771\7\u00c0"+
		"\2\2\u0771\u0775\7D\2\2\u0772\u0773\7D\2\2\u0773\u0775\5\u01da\u00ee\2"+
		"\u0774\u0770\3\2\2\2\u0774\u0772\3\2\2\2\u0775\u00a3\3\2\2\2\u0776\u0777"+
		"\7\u013d\2\2\u0777\u077d\7\u01b9\2\2\u0778\u077e\5\u037a\u01be\2\u0779"+
		"\u077a\7\3\2\2\u077a\u077b\5\u037a\u01be\2\u077b\u077c\7\4\2\2\u077c\u077e"+
		"\3\2\2\2\u077d\u0778\3\2\2\2\u077d\u0779\3\2\2\2\u077e\u00a5\3\2\2\2\u077f"+
		"\u0780\7\u013d\2\2\u0780\u0788\7\u01b9\2\2\u0781\u0789\5\u037a\u01be\2"+
		"\u0782\u0783\7\3\2\2\u0783\u0784\5\u037a\u01be\2\u0784\u0785\7\26\2\2"+
		"\u0785\u0786\7\20\2\2\u0786\u0787\7\4\2\2\u0787\u0789\3\2\2\2\u0788\u0781"+
		"\3\2\2\2\u0788\u0782\3\2\2\2\u0789\u00a7\3\2\2\2\u078a\u078f\7-\2\2\u078b"+
		"\u078c\7\u00c0\2\2\u078c\u0790\7\u00ac\2\2\u078d\u078e\7\u00ac\2\2\u078e"+
		"\u0790\7\31\2\2\u078f\u078b\3\2\2\2\u078f\u078d\3\2\2\2\u0790\u00a9\3"+
		"\2\2\2\u0791\u0792\7\u0118\2\2\u0792\u0793\7\u01c3\2\2\u0793\u0794\t\5"+
		"\2\2\u0794\u00ab\3\2\2\2\u0795\u0796\7\u00e5\2\2\u0796\u0797\7\u0127\2"+
		"\2\u0797\u0798\t\22\2\2\u0798\u00ad\3\2\2\2\u0799\u079a\7\u010b\2\2\u079a"+
		"\u079b\t\23\2\2\u079b\u00af\3\2\2\2\u079c\u079d\7\u01c7\2\2\u079d\u079e"+
		"\7!\2\2\u079e\u079f\7\u011f\2\2\u079f\u07a0\7\\\2\2\u07a0\u07a9\7\u01bb"+
		"\2\2\u07a1\u07a2\7\u01c7\2\2\u07a2\u07a3\7!\2\2\u07a3\u07a4\7\31\2\2\u07a4"+
		"\u07a9\7\u01bb\2\2\u07a5\u07a6\7O\2\2\u07a6\u07a7\7!\2\2\u07a7\u07a9\7"+
		"\u01ba\2\2\u07a8\u079c\3\2\2\2\u07a8\u07a1\3\2\2\2\u07a8\u07a5\3\2\2\2"+
		"\u07a9\u00b1\3\2\2\2\u07aa\u07ab\7\u0104\2\2\u07ab\u07ac\7\u01bf\2\2\u07ac"+
		"\u07ad\5\u01dc\u00ef\2\u07ad\u00b3\3\2\2\2\u07ae\u07af\7G\2\2\u07af\u07b0"+
		"\7\u00ca\2\2\u07b0\u07b1\7\u00f4\2\2\u07b1\u07b2\t\5\2\2\u07b2\u00b5\3"+
		"\2\2\2\u07b3\u07b4\t\24\2\2\u07b4\u07b5\7\u01c5\2\2\u07b5\u07b6\7\u01c2"+
		"\2\2\u07b6\u00b7\3\2\2\2\u07b7\u07b8\7\u0117\2\2\u07b8\u07b9\7\u01b8\2"+
		"\2\u07b9\u00b9\3\2\2\2\u07ba\u07bc\7\u00c2\2\2\u07bb\u07ba\3\2\2\2\u07bb"+
		"\u07bc\3\2\2\2\u07bc\u07bd\3\2\2\2\u07bd\u07be\7\u01c4\2\2\u07be\u00bb"+
		"\3\2\2\2\u07bf\u07c1\7\u0114\2\2\u07c0\u07c2\5\u030e\u0188\2\u07c1\u07c0"+
		"\3\2\2\2\u07c1\u07c2\3\2\2\2\u07c2\u00bd\3\2\2\2\u07c3\u07c4\7\u0114\2"+
		"\2\u07c4\u07c5\5\u030e\u0188\2\u07c5\u00bf\3\2\2\2\u07c6\u07cb\7\u00d5"+
		"\2\2\u07c7\u07c8\7<\2\2\u07c8\u07cc\t\6\2\2\u07c9\u07ca\7\u0307\2\2\u07ca"+
		"\u07cc\t\25\2\2\u07cb\u07c7\3\2\2\2\u07cb\u07c9\3\2\2\2\u07cc\u07cd\3"+
		"\2\2\2\u07cd\u07cb\3\2\2\2\u07cd\u07ce\3\2\2\2\u07ce\u00c1\3\2\2\2\u07cf"+
		"\u07d0\7\u00d5\2\2\u07d0\u07d1\7<\2\2\u07d1\u07d2\t\6\2\2\u07d2\u00c3"+
		"\3\2\2\2\u07d3\u07ec\7\u00f5\2\2\u07d4\u07d5\7\u0121\2\2\u07d5\u07d6\7"+
		"\3\2\2\u07d6\u07d7\5\u02a4\u0153\2\u07d7\u07da\5\u0132\u009a\2\u07d8\u07d9"+
		"\7*\2\2\u07d9\u07db\7\u00af\2\2\u07da\u07d8\3\2\2\2\u07da\u07db\3\2\2"+
		"\2\u07db\u07e5\3\2\2\2\u07dc\u07dd\7\26\2\2\u07dd\u07de\5\u02a4\u0153"+
		"\2\u07de\u07e1\5\u0132\u009a\2\u07df\u07e0\7*\2\2\u07e0\u07e2\7\u00af"+
		"\2\2\u07e1\u07df\3\2\2\2\u07e1\u07e2\3\2\2\2\u07e2\u07e4\3\2\2\2\u07e3"+
		"\u07dc\3\2\2\2\u07e4\u07e7\3\2\2\2\u07e5\u07e3\3\2\2\2\u07e5\u07e6\3\2"+
		"\2\2\u07e6\u07e8\3\2\2\2\u07e7\u07e5\3\2\2\2\u07e8\u07e9\7\4\2\2\u07e9"+
		"\u07ed\3\2\2\2\u07ea\u07eb\7\u023a\2\2\u07eb\u07ed\7\u0121\2\2\u07ec\u07d4"+
		"\3\2\2\2\u07ec\u07ea\3\2\2\2\u07ed\u080a\3\2\2\2\u07ee\u080a\5l\67\2\u07ef"+
		"\u080a\5t;\2\u07f0\u080a\5|?\2\u07f1\u080a\5\u0082B\2\u07f2\u080a\5\u0084"+
		"C\2\u07f3\u080a\5\u0086D\2\u07f4\u080a\5\u008eH\2\u07f5\u080a\5\u0092"+
		"J\2\u07f6\u080a\5\u0094K\2\u07f7\u080a\5\u0096L\2\u07f8\u080a\5\u0098"+
		"M\2\u07f9\u080a\5\u009aN\2\u07fa\u080a\5\u009eP\2\u07fb\u080a\5\u00a0"+
		"Q\2\u07fc\u080a\5\u00a2R\2\u07fd\u080a\5\u00a4S\2\u07fe\u080a\5\u00a8"+
		"U\2\u07ff\u080a\5\u00aaV\2\u0800\u080a\5\u00acW\2\u0801\u080a\5\u00ae"+
		"X\2\u0802\u080a\5\u00b0Y\2\u0803\u080a\5\u00b2Z\2\u0804\u080a\5\u00b6"+
		"\\\2\u0805\u080a\5\u00b8]\2\u0806\u080a\5\u00ba^\2\u0807\u080a\5\u00bc"+
		"_\2\u0808\u080a\5\u00c0a\2\u0809\u07d3\3\2\2\2\u0809\u07ee\3\2\2\2\u0809"+
		"\u07ef\3\2\2\2\u0809\u07f0\3\2\2\2\u0809\u07f1\3\2\2\2\u0809\u07f2\3\2"+
		"\2\2\u0809\u07f3\3\2\2\2\u0809\u07f4\3\2\2\2\u0809\u07f5\3\2\2\2\u0809"+
		"\u07f6\3\2\2\2\u0809\u07f7\3\2\2\2\u0809\u07f8\3\2\2\2\u0809\u07f9\3\2"+
		"\2\2\u0809\u07fa\3\2\2\2\u0809\u07fb\3\2\2\2\u0809\u07fc\3\2\2\2\u0809"+
		"\u07fd\3\2\2\2\u0809\u07fe\3\2\2\2\u0809\u07ff\3\2\2\2\u0809\u0800\3\2"+
		"\2\2\u0809\u0801\3\2\2\2\u0809\u0802\3\2\2\2\u0809\u0803\3\2\2\2\u0809"+
		"\u0804\3\2\2\2\u0809\u0805\3\2\2\2\u0809\u0806\3\2\2\2\u0809\u0807\3\2"+
		"\2\2\u0809\u0808\3\2\2\2\u080a\u00c5\3\2\2\2\u080b\u080c\7\u00f5\2\2\u080c"+
		"\u080f\5\u0132\u009a\2\u080d\u080e\7*\2\2\u080e\u0810\7\u00af\2\2\u080f"+
		"\u080d\3\2\2\2\u080f\u0810\3\2\2\2\u0810\u0824\3\2\2\2\u0811\u0824\5\u00be"+
		"`\2\u0812\u0824\5\u00c2b\2\u0813\u0821\7\u0113\2\2\u0814\u0815\5\u030c"+
		"\u0187\2\u0815\u0816\7\3\2\2\u0816\u081b\5\u0178\u00bd\2\u0817\u0818\7"+
		"\26\2\2\u0818\u081a\5\u0178\u00bd\2\u0819\u0817\3\2\2\2\u081a\u081d\3"+
		"\2\2\2\u081b\u0819\3\2\2\2\u081b\u081c\3\2\2\2\u081c\u081e\3\2\2\2\u081d"+
		"\u081b\3\2\2\2\u081e\u081f\7\4\2\2\u081f\u0822\3\2\2\2\u0820\u0822\5\u00be"+
		"`\2\u0821\u0814\3\2\2\2\u0821\u0820\3\2\2\2\u0822\u0824\3\2\2\2\u0823"+
		"\u080b\3\2\2\2\u0823\u0811\3\2\2\2\u0823\u0812\3\2\2\2\u0823\u0813\3\2"+
		"\2\2\u0824\u00c7\3\2\2\2\u0825\u0826\7\u00f5\2\2\u0826\u0828\5\u0132\u009a"+
		"\2\u0827\u0829\5r:\2\u0828\u0827\3\2\2\2\u0828\u0829\3\2\2\2\u0829\u0839"+
		"\3\2\2\2\u082a\u082e\7\u00f4\2\2\u082b\u082f\5\u01e2\u00f2\2\u082c\u082f"+
		"\7\u00c3\2\2\u082d\u082f\5\u036e\u01b8\2\u082e\u082b\3\2\2\2\u082e\u082c"+
		"\3\2\2\2\u082e\u082d\3\2\2\2\u082f\u0839\3\2\2\2\u0830\u0839\5\u0082B"+
		"\2\u0831\u0839\5\u0086D\2\u0832\u0839\5\u008cG\2\u0833\u0839\5\u0092J"+
		"\2\u0834\u0839\5\u00b8]\2\u0835\u0839\5\u00ba^\2\u0836\u0839\5\u00bc_"+
		"\2\u0837\u0839\5\u00c2b\2\u0838\u0825\3\2\2\2\u0838\u082a\3\2\2\2\u0838"+
		"\u0830\3\2\2\2\u0838\u0831\3\2\2\2\u0838\u0832\3\2\2\2\u0838\u0833\3\2"+
		"\2\2\u0838\u0834\3\2\2\2\u0838\u0835\3\2\2\2\u0838\u0836\3\2\2\2\u0838"+
		"\u0837\3\2\2\2\u0839\u00c9\3\2\2\2\u083a\u083b\5\u02ce\u0168\2\u083b\u083c"+
		"\7\u0080\2\2\u083c\u083d\7\u010e\2\2\u083d\u083e\5\u02de\u0170\2\u083e"+
		"\u00cb\3\2\2\2\u083f\u0840\5\u02ce\u0168\2\u0840\u0842\7\u0080\2\2\u0841"+
		"\u0843\7\u0121\2\2\u0842\u0841\3\2\2\2\u0842\u0843\3\2\2\2\u0843\u0844"+
		"\3\2\2\2\u0844\u0845\5\u02b6\u015c\2\u0845\u00cd\3\2\2\2\u0846\u0847\7"+
		"\u0346\2\2\u0847\u0848\5\u0310\u0189\2\u0848\u0849\7\u012d\2\2\u0849\u084a"+
		"\5\u0310\u0189\2\u084a\u00cf\3\2\2\2\u084b\u084c\7]\2\2\u084c\u084d\7"+
		"\u0082\2\2\u084d\u084f\5\u02b6\u015c\2\u084e\u0850\5\u0324\u0193\2\u084f"+
		"\u084e\3\2\2\2\u084f\u0850\3\2\2\2\u0850\u0852\3\2\2\2\u0851\u0853\5\u02b0"+
		"\u0159\2\u0852\u0851\3\2\2\2\u0852\u0853\3\2\2\2\u0853\u0855\3\2\2\2\u0854"+
		"\u0856\5\u00fe\u0080\2\u0855\u0854\3\2\2\2\u0855\u0856\3\2\2\2\u0856\u0859"+
		"\3\2\2\2\u0857\u0858\7\u010f\2\2\u0858\u085a\5\u00eav\2\u0859\u0857\3"+
		"\2\2\2\u0859\u085a\3\2\2\2\u085a\u085b\3\2\2\2\u085b\u085c\7\u013a\2\2"+
		"\u085c\u085d\5\u026e\u0138\2\u085d\u085f\3\2\2\2\u085e\u0860\5\u0378\u01bd"+
		"\2\u085f\u085e\3\2\2\2\u085f\u0860\3\2\2\2\u0860\u0865\3\2\2\2\u0861\u0864"+
		"\5\u0364\u01b3\2\u0862\u0864\5\u0368\u01b5\2\u0863\u0861\3\2\2\2\u0863"+
		"\u0862\3\2\2\2\u0864\u0867\3\2\2\2\u0865\u0863\3\2\2\2\u0865\u0866\3\2"+
		"\2\2\u0866\u0869\3\2\2\2\u0867\u0865\3\2\2\2\u0868\u086a\5\u036a\u01b6"+
		"\2\u0869\u0868\3\2\2\2\u0869\u086a\3\2\2\2\u086a\u00d1\3\2\2\2\u086b\u086c"+
		"\7]\2\2\u086c\u086d\7\u0082\2\2\u086d\u086f\5\u02b6\u015c\2\u086e\u0870"+
		"\5\u02b0\u0159\2\u086f\u086e\3\2\2\2\u086f\u0870\3\2\2\2\u0870\u0871\3"+
		"\2\2\2\u0871\u0872\7\u013a\2\2\u0872\u0873\7R\2\2\u0873\u0874\7\u00c7"+
		"\2\2\u0874\u087d\5\n\6\2\u0875\u0876\7\u0080\2\2\u0876\u0879\7\u0102\2"+
		"\2\u0877\u087a\5\u0310\u0189\2\u0878\u087a\7\31\2\2\u0879\u0877\3\2\2"+
		"\2\u0879\u0878\3\2\2\2\u087a\u087b\3\2\2\2\u087b\u087c\7\u00c7\2\2\u087c"+
		"\u087e\7\u0103\2\2\u087d\u0875\3\2\2\2\u087d\u087e\3\2\2\2\u087e\u00d3"+
		"\3\2\2\2\u087f\u0882\5\u00d0i\2\u0880\u0882\5\u00d2j\2\u0881\u087f\3\2"+
		"\2\2\u0881\u0880\3\2\2\2\u0882\u00d5\3\2\2\2\u0883\u0884\7\u009b\2\2\u0884"+
		"\u0885\7\u009d\2\2\u0885\u0891\5\u02b6\u015c\2\u0886\u0887\7\3\2\2\u0887"+
		"\u088c\5\u02a4\u0153\2\u0888\u0889\7\26\2\2\u0889\u088b\5\u02a4\u0153"+
		"\2\u088a\u0888\3\2\2\2\u088b\u088e\3\2\2\2\u088c\u088a\3\2\2\2\u088c\u088d"+
		"\3\2\2\2\u088d\u088f\3\2\2\2\u088e\u088c\3\2\2\2\u088f\u0890\7\4\2\2\u0890"+
		"\u0892\3\2\2\2\u0891\u0886\3\2\2\2\u0891\u0892\3\2\2\2\u0892\u0894\3\2"+
		"\2\2\u0893\u0895\5\u00fe\u0080\2\u0894\u0893\3\2\2\2\u0894\u0895\3\2\2"+
		"\2\u0895\u0899\3\2\2\2\u0896\u0897\7\u01df\2\2\u0897\u0898\7\u0346\2\2"+
		"\u0898\u089a\7\u012f\2\2\u0899\u0896\3\2\2\2\u0899\u089a\3\2\2\2\u089a"+
		"\u08bd\3\2\2\2\u089b\u08a8\7\u0130\2\2\u089c\u08a9\5\u00f6|\2\u089d\u089e"+
		"\7\3\2\2\u089e\u08a3\5\u00f6|\2\u089f\u08a0\7\26\2\2\u08a0\u08a2\5\u00f6"+
		"|\2\u08a1\u089f\3\2\2\2\u08a2\u08a5\3\2\2\2\u08a3\u08a1\3\2\2\2\u08a3"+
		"\u08a4\3\2\2\2\u08a4\u08a6\3\2\2\2\u08a5\u08a3\3\2\2\2\u08a6\u08a7\7\4"+
		"\2\2\u08a7\u08a9\3\2\2\2\u08a8\u089c\3\2\2\2\u08a8\u089d\3\2\2\2\u08a9"+
		"\u08be\3\2\2\2\u08aa\u08ab\7\u013c\2\2\u08ab\u08b0\5\u035c\u01af\2\u08ac"+
		"\u08ad\7\26\2\2\u08ad\u08af\5\u035c\u01af\2\u08ae\u08ac\3\2\2\2\u08af"+
		"\u08b2\3\2\2\2\u08b0\u08ae\3\2\2\2\u08b0\u08b1\3\2\2\2\u08b1\u08b4\3\2"+
		"\2\2\u08b2\u08b0\3\2\2\2\u08b3\u08aa\3\2\2\2\u08b3\u08b4\3\2\2\2\u08b4"+
		"\u08b5\3\2\2\2\u08b5\u08b7\5\u036e\u01b8\2\u08b6\u08b8\5\u0364\u01b3\2"+
		"\u08b7\u08b6\3\2\2\2\u08b7\u08b8\3\2\2\2\u08b8\u08ba\3\2\2\2\u08b9\u08bb"+
		"\5\u036a\u01b6\2\u08ba\u08b9\3\2\2\2\u08ba\u08bb\3\2\2\2\u08bb\u08be\3"+
		"\2\2\2\u08bc\u08be\5\u0100\u0081\2\u08bd\u089b\3\2\2\2\u08bd\u08b3\3\2"+
		"\2\2\u08bd\u08bc\3\2\2\2\u08be\u00d7\3\2\2\2\u08bf\u08c0\7\u01db\2\2\u08c0"+
		"\u08c1\7\u009d\2\2\u08c1\u08c3\5\u02b6\u015c\2\u08c2\u08c4\5\u031a\u018e"+
		"\2\u08c3\u08c2\3\2\2\2\u08c3\u08c4\3\2\2\2\u08c4\u08c6\3\2\2\2\u08c5\u08c7"+
		"\5\u00fe\u0080\2\u08c6\u08c5\3\2\2\2\u08c6\u08c7\3\2\2\2\u08c7\u08c8\3"+
		"\2\2\2\u08c8\u08d7\7\u012d\2\2\u08c9\u08cb\7\3\2\2\u08ca\u08c9\3\2\2\2"+
		"\u08cb\u08ce\3\2\2\2\u08cc\u08ca\3\2\2\2\u08cc\u08cd\3\2\2\2\u08cd\u08cf"+
		"\3\2\2\2\u08ce\u08cc\3\2\2\2\u08cf\u08d3\5\u031e\u0190\2\u08d0\u08d2\7"+
		"\4\2\2\u08d1\u08d0\3\2\2\2\u08d2\u08d5\3\2\2\2\u08d3\u08d1\3\2\2\2\u08d3"+
		"\u08d4\3\2\2\2\u08d4\u08d8\3\2\2\2\u08d5\u08d3\3\2\2\2\u08d6\u08d8\5\u00e0"+
		"q\2\u08d7\u08cc\3\2\2\2\u08d7\u08d6\3\2\2\2\u08d8\u08d9\3\2\2\2\u08d9"+
		"\u08da\7\u00ca\2\2\u08da\u08e2\5\u026e\u0138\2\u08db\u08dc\7\u0138\2\2"+
		"\u08dc\u08dd\5\u00e6t\2\u08dd\u08e0\7\u0123\2\2\u08de\u08e1\5\u00e8u\2"+
		"\u08df\u08e1\5\u00f2z\2\u08e0\u08de\3\2\2\2\u08e0\u08df\3\2\2\2\u08e1"+
		"\u08e3\3\2\2\2\u08e2\u08db\3\2\2\2\u08e3\u08e4\3\2\2\2\u08e4\u08e2\3\2"+
		"\2\2\u08e4\u08e5\3\2\2\2\u08e5\u08e8\3\2\2\2\u08e6\u08e7\7j\2\2\u08e7"+
		"\u08e9\7\u015e\2\2\u08e8\u08e6\3\2\2\2\u08e8\u08e9\3\2\2\2\u08e9\u08eb"+
		"\3\2\2\2\u08ea\u08ec\5\u0120\u0091\2\u08eb\u08ea\3\2\2\2\u08eb\u08ec\3"+
		"\2\2\2\u08ec\u08ee\3\2\2\2\u08ed\u08ef\5\u036a\u01b6\2\u08ee\u08ed\3\2"+
		"\2\2\u08ee\u08ef\3\2\2\2\u08ef\u00d9\3\2\2\2\u08f0\u08f1\7\u012c\2\2\u08f1"+
		"\u08f3\5\u02b6\u015c\2\u08f2\u08f4\5\u0324\u0193\2\u08f3\u08f2\3\2\2\2"+
		"\u08f3\u08f4\3\2\2\2\u08f4\u08f6\3\2\2\2\u08f5\u08f7\5\u02b0\u0159\2\u08f6"+
		"\u08f5\3\2\2\2\u08f6\u08f7\3\2\2\2\u08f7\u08f9\3\2\2\2\u08f8\u08fa\5\u00fe"+
		"\u0080\2\u08f9\u08f8\3\2\2\2\u08f9\u08fa\3\2\2\2\u08fa\u08fb\3\2\2\2\u08fb"+
		"\u08fc\7\u010f\2\2\u08fc\u08ff\5\u00eav\2\u08fd\u08fe\7\u013a\2\2\u08fe"+
		"\u0900\5\u026e\u0138\2\u08ff\u08fd\3\2\2\2\u08ff\u0900\3\2\2\2\u0900\u0905"+
		"\3\2\2\2\u0901\u0904\5\u0364\u01b3\2\u0902\u0904\5\u0368\u01b5\2\u0903"+
		"\u0901\3\2\2\2\u0903\u0902\3\2\2\2\u0904\u0907\3\2\2\2\u0905\u0903\3\2"+
		"\2\2\u0905\u0906\3\2\2\2\u0906\u0909\3\2\2\2\u0907\u0905\3\2\2\2\u0908"+
		"\u090a\5\u036a\u01b6\2\u0909\u0908\3\2\2\2\u0909\u090a\3\2\2\2\u090a\u00db"+
		"\3\2\2\2\u090b\u090c\7\u012c\2\2\u090c\u090e\5\u02b6\u015c\2\u090d\u090f"+
		"\5\u02b0\u0159\2\u090e\u090d\3\2\2\2\u090e\u090f\3\2\2\2\u090f\u0910\3"+
		"\2\2\2\u0910\u0911\7\u010f\2\2\u0911\u0912\5\u00eav\2\u0912\u0913\7\u013a"+
		"\2\2\u0913\u0914\7R\2\2\u0914\u0915\7\u00c7\2\2\u0915\u091e\5\n\6\2\u0916"+
		"\u0917\7\u0080\2\2\u0917\u091a\7\u0102\2\2\u0918\u091b\5\u0310\u0189\2"+
		"\u0919\u091b\7\31\2\2\u091a\u0918\3\2\2\2\u091a\u0919\3\2\2\2\u091b\u091c"+
		"\3\2\2\2\u091c\u091d\7\u00c7\2\2\u091d\u091f\7\u0103\2\2\u091e\u0916\3"+
		"\2\2\2\u091e\u091f\3\2\2\2\u091f\u00dd\3\2\2\2\u0920\u0923\5\u00dan\2"+
		"\u0921\u0923\5\u00dco\2\u0922\u0920\3\2\2\2\u0922\u0921\3\2\2\2\u0923"+
		"\u00df\3\2\2\2\u0924\u0925\7\3\2\2\u0925\u0928\7\u0130\2\2\u0926\u0929"+
		"\5\u00e2r\2\u0927\u0929\5\u00e4s\2\u0928\u0926\3\2\2\2\u0928\u0927\3\2"+
		"\2\2\u0929\u092a\3\2\2\2\u092a\u092c\7\4\2\2\u092b\u092d\7*\2\2\u092c"+
		"\u092b\3\2\2\2\u092c\u092d\3\2\2\2\u092d\u092e\3\2\2\2\u092e\u092f\5\u02b0"+
		"\u0159\2\u092f\u0930\7\3\2\2\u0930\u0935\5\u02a4\u0153\2\u0931\u0932\7"+
		"\26\2\2\u0932\u0934\5\u02a4\u0153\2\u0933\u0931\3\2\2\2\u0934\u0937\3"+
		"\2\2\2\u0935\u0933\3\2\2\2\u0935\u0936\3\2\2\2\u0936\u0938\3\2\2\2\u0937"+
		"\u0935\3\2\2\2\u0938\u0939\7\4\2\2\u0939\u00e1\3\2\2\2\u093a\u0947\5\u00fa"+
		"~\2\u093b\u093c\7\3\2\2\u093c\u0941\5\u00fa~\2\u093d\u093e\7\26\2\2\u093e"+
		"\u0940\5\u00fa~\2\u093f\u093d\3\2\2\2\u0940\u0943\3\2\2\2\u0941\u093f"+
		"\3\2\2\2\u0941\u0942\3\2\2\2\u0942\u0944\3\2\2\2\u0943\u0941\3\2\2\2\u0944"+
		"\u0945\7\4\2\2\u0945\u0947\3\2\2\2\u0946\u093a\3\2\2\2\u0946\u093b\3\2"+
		"\2\2\u0947\u00e3\3\2\2\2\u0948\u095c\5\u00fc\177\2\u0949\u094a\7\3\2\2"+
		"\u094a\u094f\5\u00fc\177\2\u094b\u094c\7\26\2\2\u094c\u094e\5\u00fc\177"+
		"\2\u094d\u094b\3\2\2\2\u094e\u0951\3\2\2\2\u094f\u094d\3\2\2\2\u094f\u0950"+
		"\3\2\2\2\u0950\u0952\3\2\2\2\u0951\u094f\3\2\2\2\u0952\u0953\7\4\2\2\u0953"+
		"\u0954\3\2\2\2\u0954\u0957\7\u0080\2\2\u0955\u0958\5\u0310\u0189\2\u0956"+
		"\u0958\7\31\2\2\u0957\u0955\3\2\2\2\u0957\u0956\3\2\2\2\u0958\u0959\3"+
		"\2\2\2\u0959\u095a\7\u018b\2\2\u095a\u095c\3\2\2\2\u095b\u0948\3\2\2\2"+
		"\u095b\u0949\3\2\2\2\u095c\u00e5\3\2\2\2\u095d\u095f\7\u00c2\2\2\u095e"+
		"\u095d\3\2\2\2\u095e\u095f\3\2\2\2\u095f\u0960\3\2\2\2\u0960\u0963\7\u01dc"+
		"\2\2\u0961\u0962\7\u0144\2\2\u0962\u0964\5\u026e\u0138\2\u0963\u0961\3"+
		"\2\2\2\u0963\u0964\3\2\2\2\u0964\u00e7\3\2\2\2\u0965\u0969\5\u00ecw\2"+
		"\u0966\u0969\5\u00eex\2\u0967\u0969\5\u00f0y\2\u0968\u0965\3\2\2\2\u0968"+
		"\u0966\3\2\2\2\u0968\u0967\3\2\2\2\u0969\u00e9\3\2\2\2\u096a\u096b\5\u02a4"+
		"\u0153\2\u096b\u096c\7\b\2\2\u096c\u0974\5\u00f6|\2\u096d\u096e\7\26\2"+
		"\2\u096e\u096f\5\u02a4\u0153\2\u096f\u0970\7\b\2\2\u0970\u0971\5\u00f6"+
		"|\2\u0971\u0973\3\2\2\2\u0972\u096d\3\2\2\2\u0973\u0976\3\2\2\2\u0974"+
		"\u0972\3\2\2\2\u0974\u0975\3\2\2\2\u0975\u0991\3\2\2\2\u0976\u0974\3\2"+
		"\2\2\u0977\u0978\7\3\2\2\u0978\u097d\5\u02a4\u0153\2\u0979\u097a\7\26"+
		"\2\2\u097a\u097c\5\u02a4\u0153\2\u097b\u0979\3\2\2\2\u097c\u097f\3\2\2"+
		"\2\u097d\u097b\3\2\2\2\u097d\u097e\3\2\2\2\u097e\u0980\3\2\2\2\u097f\u097d"+
		"\3\2\2\2\u0980\u0981\7\4\2\2\u0981\u0982\7\b\2\2\u0982\u0983\7\3\2\2\u0983"+
		"\u0988\5\u00f6|\2\u0984\u0985\7\26\2\2\u0985\u0987\5\u00f6|\2\u0986\u0984"+
		"\3\2\2\2\u0987\u098a\3\2\2\2\u0988\u0986\3\2\2\2\u0988\u0989\3\2\2\2\u0989"+
		"\u098d\3\2\2\2\u098a\u0988\3\2\2\2\u098b\u098d\5\u036e\u01b8\2\u098c\u0977"+
		"\3\2\2\2\u098c\u098b\3\2\2\2\u098d\u098e\3\2\2\2\u098e\u098f\7\4\2\2\u098f"+
		"\u0991\3\2\2\2\u0990\u096a\3\2\2\2\u0990\u098c\3\2\2\2\u0991\u00eb\3\2"+
		"\2\2\u0992\u0993\7\u012c\2\2\u0993\u0994\7\u010f\2\2\u0994\u0999\5\u00ea"+
		"v\2\u0995\u0996\7\26\2\2\u0996\u0998\5\u00eav\2\u0997\u0995\3\2\2\2\u0998"+
		"\u099b\3\2\2\2\u0999\u0997\3\2\2\2\u0999\u099a\3\2\2\2\u099a\u00ed\3\2"+
		"\2\2\u099b\u0999\3\2\2\2\u099c\u099d\7]\2\2\u099d\u00ef\3\2\2\2\u099e"+
		"\u099f\7\u009b\2\2\u099f\u09a0\7\3\2\2\u09a0\u09a5\5\u02a4\u0153\2\u09a1"+
		"\u09a2\7\26\2\2\u09a2\u09a4\5\u02a4\u0153\2\u09a3\u09a1\3\2\2\2\u09a4"+
		"\u09a7\3\2\2\2\u09a5\u09a3\3\2\2\2\u09a5\u09a6\3\2\2\2\u09a6\u09a8\3\2"+
		"\2\2\u09a7\u09a5\3\2\2\2\u09a8\u09a9\7\4\2\2\u09a9\u09b6\7\u0130\2\2\u09aa"+
		"\u09b7\5\u00f6|\2\u09ab\u09ac\7\3\2\2\u09ac\u09b1\5\u00f6|\2\u09ad\u09ae"+
		"\7\26\2\2\u09ae\u09b0\5\u00f6|\2\u09af\u09ad\3\2\2\2\u09b0\u09b3\3\2\2"+
		"\2\u09b1\u09af\3\2\2\2\u09b1\u09b2\3\2\2\2\u09b2\u09b4\3\2\2\2\u09b3\u09b1"+
		"\3\2\2\2\u09b4\u09b5\7\4\2\2\u09b5\u09b7\3\2\2\2\u09b6\u09aa\3\2\2\2\u09b6"+
		"\u09ab\3\2\2\2\u09b7\u00f1\3\2\2\2\u09b8\u09b9\7\u0110\2\2\u09b9\u09bb"+
		"\7\u01dd\2\2\u09ba\u09bc\7\u012f\2\2\u09bb\u09ba\3\2\2\2\u09bb\u09bc\3"+
		"\2\2\2\u09bc\u09bd\3\2\2\2\u09bd\u09bf\7\30\2\2\u09be\u09c0\5\u00f4{\2"+
		"\u09bf\u09be\3\2\2\2\u09bf\u09c0\3\2\2\2\u09c0\u00f3\3\2\2\2\u09c1\u09c2"+
		"\7\u010f\2\2\u09c2\u09c3\7\u01de\2\2\u09c3\u09c4\7\b\2\2\u09c4\u09ca\5"+
		"\u01e2\u00f2\2\u09c5\u09c6\5\u01e0\u00f1\2\u09c6\u09c7\5\u01e2\u00f2\2"+
		"\u09c7\u09c9\3\2\2\2\u09c8\u09c5\3\2\2\2\u09c9\u09cc\3\2\2\2\u09ca\u09c8"+
		"\3\2\2\2\u09ca\u09cb\3\2\2\2\u09cb\u00f5\3\2\2\2\u09cc\u09ca\3\2\2\2\u09cd"+
		"\u09d3\5\u01e2\u00f2\2\u09ce\u09cf\5\u01e0\u00f1\2\u09cf\u09d0\5\u01e2"+
		"\u00f2\2\u09d0\u09d2\3\2\2\2\u09d1\u09ce\3\2\2\2\u09d2\u09d5\3\2\2\2\u09d3"+
		"\u09d1\3\2\2\2\u09d3\u09d4\3\2\2\2\u09d4\u09d9\3\2\2\2\u09d5\u09d3\3\2"+
		"\2\2\u09d6\u09d9\7\\\2\2\u09d7\u09d9\7\u00c3\2\2\u09d8\u09cd\3\2\2\2\u09d8"+
		"\u09d6\3\2\2\2\u09d8\u09d7\3\2\2\2\u09d9\u00f7\3\2\2\2\u09da\u09df\5\u01e2"+
		"\u00f2\2\u09db\u09df\5\u0310\u0189\2\u09dc\u09df\7\\\2\2\u09dd\u09df\7"+
		"\u00c3\2\2\u09de\u09da\3\2\2\2\u09de\u09db\3\2\2\2\u09de\u09dc\3\2\2\2"+
		"\u09de\u09dd\3\2\2\2\u09df\u00f9\3\2\2\2\u09e0\u09e3\5\u01e2\u00f2\2\u09e1"+
		"\u09e3\7\u00c3\2\2\u09e2\u09e0\3\2\2\2\u09e2\u09e1\3\2\2\2\u09e3\u00fb"+
		"\3\2\2\2\u09e4\u09e8\5\u01e2\u00f2\2\u09e5\u09e8\5\u0310\u0189\2\u09e6"+
		"\u09e8\7\u00c3\2\2\u09e7\u09e4\3\2\2\2\u09e7\u09e5\3\2\2\2\u09e7\u09e6"+
		"\3\2\2\2\u09e8\u00fd\3\2\2\2\u09e9\u09ea\7\u01d1\2\2\u09ea\u09eb\7\3\2"+
		"\2\u09eb\u09ec\5\u02a4\u0153\2\u09ec\u09f3\5\u0198\u00cd\2\u09ed\u09ee"+
		"\7\26\2\2\u09ee\u09ef\5\u02a4\u0153\2\u09ef\u09f0\5\u0198\u00cd\2\u09f0"+
		"\u09f2\3\2\2\2\u09f1\u09ed\3\2\2\2\u09f2\u09f5\3\2\2\2\u09f3\u09f1\3\2"+
		"\2\2\u09f3\u09f4\3\2\2\2\u09f4\u09f6\3\2\2\2\u09f5\u09f3\3\2\2\2\u09f6"+
		"\u09f7\7\4\2\2\u09f7\u00ff\3\2\2\2\u09f8\u0a05\7\u0130\2\2\u09f9\u0a06"+
		"\5\u00f8}\2\u09fa\u09fb\7\3\2\2\u09fb\u0a00\5\u00f8}\2\u09fc\u09fd\7\26"+
		"\2\2\u09fd\u09ff\5\u00f8}\2\u09fe\u09fc\3\2\2\2\u09ff\u0a02\3\2\2\2\u0a00"+
		"\u09fe\3\2\2\2\u0a00\u0a01\3\2\2\2\u0a01\u0a03\3\2\2\2\u0a02\u0a00\3\2"+
		"\2\2\u0a03\u0a04\7\4\2\2\u0a04\u0a06\3\2\2\2\u0a05\u09f9\3\2\2\2\u0a05"+
		"\u09fa\3\2\2\2\u0a06\u0a0d\3\2\2\2\u0a07\u0a0a\7\u0080\2\2\u0a08\u0a0b"+
		"\5\u0310\u0189\2\u0a09\u0a0b\7\31\2\2\u0a0a\u0a08\3\2\2\2\u0a0a\u0a09"+
		"\3\2\2\2\u0a0b\u0a0c\3\2\2\2\u0a0c\u0a0e\7\u018b\2\2\u0a0d\u0a07\3\2\2"+
		"\2\u0a0d\u0a0e\3\2\2\2\u0a0e\u0a11\3\2\2\2\u0a0f\u0a12\7\u01d9\2\2\u0a10"+
		"\u0a12\5\u0120\u0091\2\u0a11\u0a0f\3\2\2\2\u0a11\u0a10\3\2\2\2\u0a12\u0101"+
		"\3\2\2\2\u0a13\u0a18\7\u01d5\2\2\u0a14\u0a15\7\u012d\2\2\u0a15\u0a16\7"+
		"\u01ca\2\2\u0a16\u0a17\7\u01cc\2\2\u0a17\u0a19\5\u012c\u0097\2\u0a18\u0a14"+
		"\3\2\2\2\u0a18\u0a19\3\2\2\2\u0a19\u0103\3\2\2\2\u0a1a\u0a37\5\u0106\u0084"+
		"\2\u0a1b\u0a37\5\u0108\u0085\2\u0a1c\u0a37\5\u010a\u0086\2\u0a1d\u0a37"+
		"\5\u010c\u0087\2\u0a1e\u0a37\5\u010e\u0088\2\u0a1f\u0a37\5\u0124\u0093"+
		"\2\u0a20\u0a37\5\u0126\u0094\2\u0a21\u0a37\5\u0128\u0095\2\u0a22\u0a37"+
		"\5\u0110\u0089\2\u0a23\u0a37\5\u0112\u008a\2\u0a24\u0a37\5\u0114\u008b"+
		"\2\u0a25\u0a34\7 \2\2\u0a26\u0a27\7E\2\2\u0a27\u0a28\7\3\2\2\u0a28\u0a2a"+
		"\5\u02a4\u0153\2\u0a29\u0a2b\t\7\2\2\u0a2a\u0a29\3\2\2\2\u0a2a\u0a2b\3"+
		"\2\2\2\u0a2b\u0a2c\3\2\2\2\u0a2c\u0a2d\7\4\2\2\u0a2d\u0a35\3\2\2\2\u0a2e"+
		"\u0a2f\7\u01d1\2\2\u0a2f\u0a30\7E\2\2\u0a30\u0a31\7\3\2\2\u0a31\u0a32"+
		"\5\u02a4\u0153\2\u0a32\u0a33\7\4\2\2\u0a33\u0a35\3\2\2\2\u0a34\u0a26\3"+
		"\2\2\2\u0a34\u0a2e\3\2\2\2\u0a35\u0a37\3\2\2\2\u0a36\u0a1a\3\2\2\2\u0a36"+
		"\u0a1b\3\2\2\2\u0a36\u0a1c\3\2\2\2\u0a36\u0a1d\3\2\2\2\u0a36\u0a1e\3\2"+
		"\2\2\u0a36\u0a1f\3\2\2\2\u0a36\u0a20\3\2\2\2\u0a36\u0a21\3\2\2\2\u0a36"+
		"\u0a22\3\2\2\2\u0a36\u0a23\3\2\2\2\u0a36\u0a24\3\2\2\2\u0a36\u0a25\3\2"+
		"\2\2\u0a37\u0105\3\2\2\2\u0a38\u0a39\7\65\2\2\u0a39\u0a3a\5\u02fe\u0180"+
		"\2\u0a3a\u0107\3\2\2\2\u0a3b\u0a3c\7A\2\2\u0a3c\u0a3d\t\5\2\2\u0a3d\u0109"+
		"\3\2\2\2\u0a3e\u0a3f\7\u01ce\2\2\u0a3f\u0a40\t\5\2\2\u0a40\u010b\3\2\2"+
		"\2\u0a41\u0a42\7g\2\2\u0a42\u0a43\7\u0350\2\2\u0a43\u010d\3\2\2\2\u0a44"+
		"\u0a45\7\u00dc\2\2\u0a45\u0a46\7\u0350\2\2\u0a46\u010f\3\2\2\2\u0a47\u0a49"+
		"\7\u00c2\2\2\u0a48\u0a47\3\2\2\2\u0a48\u0a49\3\2\2\2\u0a49\u0a4a\3\2\2"+
		"\2\u0a4a\u0a4b\7B\2\2\u0a4b\u0111\3\2\2\2\u0a4c\u0a4e\7\u00c2\2\2\u0a4d"+
		"\u0a4c\3\2\2\2\u0a4d\u0a4e\3\2\2\2\u0a4e\u0a4f\3\2\2\2\u0a4f\u0a50\7\u00d4"+
		"\2\2\u0a50\u0113\3\2\2\2\u0a51\u0a57\7\u01cd\2\2\u0a52\u0a54\7\u01c9\2"+
		"\2\u0a53\u0a55\t\26\2\2\u0a54\u0a53\3\2\2\2\u0a54\u0a55\3\2\2\2\u0a55"+
		"\u0a58\3\2\2\2\u0a56\u0a58\7\u00c0\2\2\u0a57\u0a52\3\2\2\2\u0a57\u0a56"+
		"\3\2\2\2\u0a58\u0115\3\2\2\2\u0a59\u0a5a\7\u023d\2\2\u0a5a\u0a5b\t\5\2"+
		"\2\u0a5b\u0117\3\2\2\2\u0a5c\u0a5d\7\u00b3\2\2\u0a5d\u0a5e\t\27\2\2\u0a5e"+
		"\u0119\3\2\2\2\u0a5f\u0a60\7\u00b2\2\2\u0a60\u0a61\t\30\2\2\u0a61\u011b"+
		"\3\2\2\2\u0a62\u0a63\t\31\2\2\u0a63\u011d\3\2\2\2\u0a64\u0a66\7\u00c2"+
		"\2\2\u0a65\u0a64\3\2\2\2\u0a65\u0a66\3\2\2\2\u0a66\u0a67\3\2\2\2\u0a67"+
		"\u0a6d\7\u021b\2\2\u0a68\u0a69\7\u021a\2\2\u0a69\u0a6d\7\u00c0\2\2\u0a6a"+
		"\u0a6b\7\u021a\2\2\u0a6b\u0a6d\7\u01c9\2\2\u0a6c\u0a65\3\2\2\2\u0a6c\u0a68"+
		"\3\2\2\2\u0a6c\u0a6a\3\2\2\2\u0a6d\u011f\3\2\2\2\u0a6e\u0a6f\7\u00c2\2"+
		"\2\u0a6f\u0a70\7\u01d9\2\2\u0a70\u0a71\7O\2\2\u0a71\u0a72\7\u00ca\2\2"+
		"\u0a72\u0a73\7\u01da\2\2\u0a73\u0121\3\2\2\2\u0a74\u0a75\7%\2\2\u0a75"+
		"\u0a84\5\u012a\u0096\2\u0a76\u0a78\5\u0124\u0093\2\u0a77\u0a76\3\2\2\2"+
		"\u0a78\u0a79\3\2\2\2\u0a79\u0a77\3\2\2\2\u0a79\u0a7a\3\2\2\2\u0a7a\u0a83"+
		"\3\2\2\2\u0a7b\u0a7d\5\u0126\u0094\2\u0a7c\u0a7b\3\2\2\2\u0a7d\u0a7e\3"+
		"\2\2\2\u0a7e\u0a7c\3\2\2\2\u0a7e\u0a7f\3\2\2\2\u0a7f\u0a83\3\2\2\2\u0a80"+
		"\u0a83\5\u0128\u0095\2\u0a81\u0a83\5\u010c\u0087\2\u0a82\u0a77\3\2\2\2"+
		"\u0a82\u0a7c\3\2\2\2\u0a82\u0a80\3\2\2\2\u0a82\u0a81\3\2\2\2\u0a83\u0a86"+
		"\3\2\2\2\u0a84\u0a82\3\2\2\2\u0a84\u0a85\3\2\2\2\u0a85\u0123\3\2\2\2\u0a86"+
		"\u0a84\3\2\2\2\u0a87\u0a8c\7\u012d\2\2\u0a88\u0a89\7\u0133\2\2\u0a89\u0a8d"+
		"\5\u02e6\u0174\2\u0a8a\u0a8b\7\u0119\2\2\u0a8b\u0a8d\5\u0300\u0181\2\u0a8c"+
		"\u0a88\3\2\2\2\u0a8c\u0a8a\3\2\2\2\u0a8d\u0a95\3\2\2\2\u0a8e\u0a8f\7\u00e2"+
		"\2\2\u0a8f\u0a95\7\31\2\2\u0a90\u0a91\7\u010a\2\2\u0a91\u0a95\7\31\2\2"+
		"\u0a92\u0a93\7q\2\2\u0a93\u0a95\t\5\2\2\u0a94\u0a87\3\2\2\2\u0a94\u0a8e"+
		"\3\2\2\2\u0a94\u0a90\3\2\2\2\u0a94\u0a92\3\2\2\2\u0a95\u0125\3\2\2\2\u0a96"+
		"\u0a97\7\u01cf\2\2\u0a97\u0a9b\7\31\2\2\u0a98\u0a99\7\u01d4\2\2\u0a99"+
		"\u0a9b\7\31\2\2\u0a9a\u0a96\3\2\2\2\u0a9a\u0a98\3\2\2\2\u0a9b\u0127\3"+
		"\2\2\2\u0a9c\u0a9d\7\u01d0\2\2\u0a9d\u0a9e\t\32\2\2\u0a9e\u0129\3\2\2"+
		"\2\u0a9f\u0aa0\7\u00d7\2\2\u0aa0\u0aba\7\31\2\2\u0aa1\u0aa3\7p\2\2\u0aa2"+
		"\u0aa4\7.\2\2\u0aa3\u0aa2\3\2\2\2\u0aa3\u0aa4\3\2\2\2\u0aa4\u0aa5\3\2"+
		"\2\2\u0aa5\u0aa9\7\3\2\2\u0aa6\u0aaa\5\u02a0\u0151\2\u0aa7\u0aaa\7\u01d2"+
		"\2\2\u0aa8\u0aaa\7\u01d3\2\2\u0aa9\u0aa6\3\2\2\2\u0aa9\u0aa7\3\2\2\2\u0aa9"+
		"\u0aa8\3\2\2\2\u0aaa\u0ab3\3\2\2\2\u0aab\u0aaf\7\26\2\2\u0aac\u0ab0\5"+
		"\u02a0\u0151\2\u0aad\u0ab0\7\u01d2\2\2\u0aae\u0ab0\7\u01d3\2\2\u0aaf\u0aac"+
		"\3\2\2\2\u0aaf\u0aad\3\2\2\2\u0aaf\u0aae\3\2\2\2\u0ab0\u0ab2\3\2\2\2\u0ab1"+
		"\u0aab\3\2\2\2\u0ab2\u0ab5\3\2\2\2\u0ab3\u0ab1\3\2\2\2\u0ab3\u0ab4\3\2"+
		"\2\2\u0ab4\u0ab6\3\2\2\2\u0ab5\u0ab3\3\2\2\2\u0ab6\u0ab8\7\4\2\2\u0ab7"+
		"\u0ab9\7\u0094\2\2\u0ab8\u0ab7\3\2\2\2\u0ab8\u0ab9\3\2\2\2\u0ab9\u0abb"+
		"\3\2\2\2\u0aba\u0aa1\3\2\2\2\u0aba\u0abb\3\2\2\2\u0abb\u012b\3\2\2\2\u0abc"+
		"\u0abd\5\u012e\u0098\2\u0abd\u012d\3\2\2\2\u0abe\u0abf\7\u0350\2\2\u0abf"+
		"\u012f\3\2\2\2\u0ac0\u0ac3\5\u0132\u009a\2\u0ac1\u0ac2\7*\2\2\u0ac2\u0ac4"+
		"\7\u00af\2\2\u0ac3\u0ac1\3\2\2\2\u0ac3\u0ac4\3\2\2\2\u0ac4\u0131\3\2\2"+
		"\2\u0ac5\u0ac8\5\u0134\u009b\2\u0ac6\u0ac8\5\u029c\u014f\2\u0ac7\u0ac5"+
		"\3\2\2\2\u0ac7\u0ac6\3\2\2\2\u0ac8\u0133\3\2\2\2\u0ac9\u0b3e\7\u02df\2"+
		"\2\u0aca\u0b3e\7\u02a2\2\2\u0acb\u0b3e\7\u02a1\2\2\u0acc\u0b3e\7\u0255"+
		"\2\2\u0acd\u0ad1\t\33\2\2\u0ace\u0ad2\5\u0294\u014b\2\u0acf\u0ad0\7\3"+
		"\2\2\u0ad0\u0ad2\7\4\2\2\u0ad1\u0ace\3\2\2\2\u0ad1\u0acf\3\2\2\2\u0ad2"+
		"\u0b3e\3\2\2\2\u0ad3\u0ad7\7\u0274\2\2\u0ad4\u0ad8\5\u0294\u014b\2\u0ad5"+
		"\u0ad6\7\3\2\2\u0ad6\u0ad8\7\4\2\2\u0ad7\u0ad4\3\2\2\2\u0ad7\u0ad5\3\2"+
		"\2\2\u0ad8\u0b3e\3\2\2\2\u0ad9\u0add\7\u0290\2\2\u0ada\u0ade\5\u0294\u014b"+
		"\2\u0adb\u0adc\7\3\2\2\u0adc\u0ade\7\4\2\2\u0add\u0ada\3\2\2\2\u0add\u0adb"+
		"\3\2\2\2\u0ade\u0b3e\3\2\2\2\u0adf\u0b3e\7\u02ce\2\2\u0ae0\u0ae2\7e\2"+
		"\2\u0ae1\u0ae3\7\u00de\2\2\u0ae2\u0ae1\3\2\2\2\u0ae2\u0ae3\3\2\2\2\u0ae3"+
		"\u0b3e\3\2\2\2\u0ae4\u0ae6\t\34\2\2\u0ae5\u0ae7\7\u01a1\2\2\u0ae6\u0ae5"+
		"\3\2\2\2\u0ae6\u0ae7\3\2\2\2\u0ae7\u0aea\3\2\2\2\u0ae8\u0aea\7\u0307\2"+
		"\2\u0ae9\u0ae4\3\2\2\2\u0ae9\u0ae8\3\2\2\2\u0aea\u0aee\3\2\2\2\u0aeb\u0aef"+
		"\5\u0296\u014c\2\u0aec\u0aed\7\3\2\2\u0aed\u0aef\7\4\2\2\u0aee\u0aeb\3"+
		"\2\2\2\u0aee\u0aec\3\2\2\2\u0aee\u0aef\3\2\2\2\u0aef\u0af2\3\2\2\2\u0af0"+
		"\u0af1\7<\2\2\u0af1\u0af3\t\6\2\2\u0af2\u0af0\3\2\2\2\u0af2\u0af3\3\2"+
		"\2\2\u0af3\u0af5\3\2\2\2\u0af4\u0af6\5\u029a\u014e\2\u0af5\u0af4\3\2\2"+
		"\2\u0af5\u0af6\3\2\2\2\u0af6\u0b3e\3\2\2\2\u0af7\u0af8\t\34\2\2\u0af8"+
		"\u0af9\7\u0163\2\2\u0af9\u0afc\7\u0170\2\2\u0afa\u0afc\7\u0266\2\2\u0afb"+
		"\u0af7\3\2\2\2\u0afb\u0afa\3\2\2\2\u0afc\u0b00\3\2\2\2\u0afd\u0b01\5\u0296"+
		"\u014c\2\u0afe\u0aff\7\3\2\2\u0aff\u0b01\7\4\2\2\u0b00\u0afd\3\2\2\2\u0b00"+
		"\u0afe\3\2\2\2\u0b00\u0b01\3\2\2\2\u0b01\u0b04\3\2\2\2\u0b02\u0b03\7<"+
		"\2\2\u0b03\u0b05\t\6\2\2\u0b04\u0b02\3\2\2\2\u0b04\u0b05\3\2\2\2\u0b05"+
		"\u0b07\3\2\2\2\u0b06\u0b08\5\u029a\u014e\2\u0b07\u0b06\3\2\2\2\u0b07\u0b08"+
		"\3\2\2\2\u0b08\u0b3e\3\2\2\2\u0b09\u0b0d\t\35\2\2\u0b0a\u0b0e\5\u0296"+
		"\u014c\2\u0b0b\u0b0c\7\3\2\2\u0b0c\u0b0e\7\4\2\2\u0b0d\u0b0a\3\2\2\2\u0b0d"+
		"\u0b0b\3\2\2\2\u0b0d\u0b0e\3\2\2\2\u0b0e\u0b11\3\2\2\2\u0b0f\u0b10\7<"+
		"\2\2\u0b10\u0b12\t\6\2\2\u0b11\u0b0f\3\2\2\2\u0b11\u0b12\3\2\2\2\u0b12"+
		"\u0b3e\3\2\2\2\u0b13\u0b17\7\u0256\2\2\u0b14\u0b18\5\u0294\u014b\2\u0b15"+
		"\u0b16\7\3\2\2\u0b16\u0b18\7\4\2\2\u0b17\u0b14\3\2\2\2\u0b17\u0b15\3\2"+
		"\2\2\u0b17\u0b18\3\2\2\2\u0b18\u0b3e\3\2\2\2\u0b19\u0b1b\7\u0256\2\2\u0b1a"+
		"\u0b1c\7\u01a1\2\2\u0b1b\u0b1a\3\2\2\2\u0b1b\u0b1c\3\2\2\2\u0b1c\u0b1f"+
		"\3\2\2\2\u0b1d\u0b1f\7\u0306\2\2\u0b1e\u0b19\3\2\2\2\u0b1e\u0b1d\3\2\2"+
		"\2\u0b1f\u0b23\3\2\2\2\u0b20\u0b24\5\u0294\u014b\2\u0b21\u0b22\7\3\2\2"+
		"\u0b22\u0b24\7\4\2\2\u0b23\u0b20\3\2\2\2\u0b23\u0b21\3\2\2\2\u0b23\u0b24"+
		"\3\2\2\2\u0b24\u0b3e\3\2\2\2\u0b25\u0b26\7\u0256\2\2\u0b26\u0b27\7\u0163"+
		"\2\2\u0b27\u0b2a\7\u0170\2\2\u0b28\u0b2a\7\u025c\2\2\u0b29\u0b25\3\2\2"+
		"\2\u0b29\u0b28\3\2\2\2\u0b2a\u0b30\3\2\2\2\u0b2b\u0b2c\7\3\2\2\u0b2c\u0b2d"+
		"\7\31\2\2\u0b2d\u0b2e\7\u0350\2\2\u0b2e\u0b2f\3\2\2\2\u0b2f\u0b31\7\4"+
		"\2\2\u0b30\u0b2b\3\2\2\2\u0b30\u0b31\3\2\2\2\u0b31\u0b3e\3\2\2\2\u0b32"+
		"\u0b3e\7\u026c\2\2\u0b33\u0b3e\7\u02ef\2\2\u0b34\u0b36\7\u02f0\2\2\u0b35"+
		"\u0b37\5\u0294\u014b\2\u0b36\u0b35\3\2\2\2\u0b36\u0b37\3\2\2\2\u0b37\u0b38"+
		"\3\2\2\2\u0b38\u0b39\t\b\2\2\u0b39\u0b3a\7\u02ef\2\2\u0b3a\u0b3e\7\u0143"+
		"\2\2\u0b3b\u0b3e\7\u02d8\2\2\u0b3c\u0b3e\7\u01a3\2\2\u0b3d\u0ac9\3\2\2"+
		"\2\u0b3d\u0aca\3\2\2\2\u0b3d\u0acb\3\2\2\2\u0b3d\u0acc\3\2\2\2\u0b3d\u0acd"+
		"\3\2\2\2\u0b3d\u0ad3\3\2\2\2\u0b3d\u0ad9\3\2\2\2\u0b3d\u0adf\3\2\2\2\u0b3d"+
		"\u0ae0\3\2\2\2\u0b3d\u0ae9\3\2\2\2\u0b3d\u0afb\3\2\2\2\u0b3d\u0b09\3\2"+
		"\2\2\u0b3d\u0b13\3\2\2\2\u0b3d\u0b1e\3\2\2\2\u0b3d\u0b29\3\2\2\2\u0b3d"+
		"\u0b32\3\2\2\2\u0b3d\u0b33\3\2\2\2\u0b3d\u0b34\3\2\2\2\u0b3d\u0b3b\3\2"+
		"\2\2\u0b3d\u0b3c\3\2\2\2\u0b3e\u0135\3\2\2\2\u0b3f\u0bb3\7\u02df\2\2\u0b40"+
		"\u0bb3\7\u02a2\2\2\u0b41\u0bb3\7\u02a1\2\2\u0b42\u0bb3\7\u0255\2\2\u0b43"+
		"\u0b47\t\33\2\2\u0b44\u0b48\5\u0294\u014b\2\u0b45\u0b46\7\3\2\2\u0b46"+
		"\u0b48\7\4\2\2\u0b47\u0b44\3\2\2\2\u0b47\u0b45\3\2\2\2\u0b48\u0bb3\3\2"+
		"\2\2\u0b49\u0b4d\7\u0274\2\2\u0b4a\u0b4e\5\u0294\u014b\2\u0b4b\u0b4c\7"+
		"\3\2\2\u0b4c\u0b4e\7\4\2\2\u0b4d\u0b4a\3\2\2\2\u0b4d\u0b4b\3\2\2\2\u0b4e"+
		"\u0bb3\3\2\2\2\u0b4f\u0b53\7\u0290\2\2\u0b50\u0b54\5\u0294\u014b\2\u0b51"+
		"\u0b52\7\3\2\2\u0b52\u0b54\7\4\2\2\u0b53\u0b50\3\2\2\2\u0b53\u0b51\3\2"+
		"\2\2\u0b54\u0bb3\3\2\2\2\u0b55\u0bb3\7\u02ce\2\2\u0b56\u0b58\7e\2\2\u0b57"+
		"\u0b59\7\u00de\2\2\u0b58\u0b57\3\2\2\2\u0b58\u0b59\3\2\2\2\u0b59\u0bb3"+
		"\3\2\2\2\u0b5a\u0b5c\t\34\2\2\u0b5b\u0b5d\7\u01a1\2\2\u0b5c\u0b5b\3\2"+
		"\2\2\u0b5c\u0b5d\3\2\2\2\u0b5d\u0b60\3\2\2\2\u0b5e\u0b60\7\u0307\2\2\u0b5f"+
		"\u0b5a\3\2\2\2\u0b5f\u0b5e\3\2\2\2\u0b60\u0b64\3\2\2\2\u0b61\u0b65\5\u0296"+
		"\u014c\2\u0b62\u0b63\7\3\2\2\u0b63\u0b65\7\4\2\2\u0b64\u0b61\3\2\2\2\u0b64"+
		"\u0b62\3\2\2\2\u0b64\u0b65\3\2\2\2\u0b65\u0b68\3\2\2\2\u0b66\u0b67\7<"+
		"\2\2\u0b67\u0b69\t\6\2\2\u0b68\u0b66\3\2\2\2\u0b68\u0b69\3\2\2\2\u0b69"+
		"\u0b6b\3\2\2\2\u0b6a\u0b6c\5\u029a\u014e\2\u0b6b\u0b6a\3\2\2\2\u0b6b\u0b6c"+
		"\3\2\2\2\u0b6c\u0bb3\3\2\2\2\u0b6d\u0b6e\t\34\2\2\u0b6e\u0b6f\7\u0163"+
		"\2\2\u0b6f\u0b72\7\u0170\2\2\u0b70\u0b72\7\u0266\2\2\u0b71\u0b6d\3\2\2"+
		"\2\u0b71\u0b70\3\2\2\2\u0b72\u0b76\3\2\2\2\u0b73\u0b77\5\u0296\u014c\2"+
		"\u0b74\u0b75\7\3\2\2\u0b75\u0b77\7\4\2\2\u0b76\u0b73\3\2\2\2\u0b76\u0b74"+
		"\3\2\2\2\u0b76\u0b77\3\2\2\2\u0b77\u0b7a\3\2\2\2\u0b78\u0b79\7<\2\2\u0b79"+
		"\u0b7b\t\6\2\2\u0b7a\u0b78\3\2\2\2\u0b7a\u0b7b\3\2\2\2\u0b7b\u0b7d\3\2"+
		"\2\2\u0b7c\u0b7e\5\u029a\u014e\2\u0b7d\u0b7c\3\2\2\2\u0b7d\u0b7e\3\2\2"+
		"\2\u0b7e\u0bb3\3\2\2\2\u0b7f\u0b83\t\35\2\2\u0b80\u0b84\5\u0296\u014c"+
		"\2\u0b81\u0b82\7\3\2\2\u0b82\u0b84\7\4\2\2\u0b83\u0b80\3\2\2\2\u0b83\u0b81"+
		"\3\2\2\2\u0b83\u0b84\3\2\2\2\u0b84\u0b87\3\2\2\2\u0b85\u0b86\7<\2\2\u0b86"+
		"\u0b88\t\6\2\2\u0b87\u0b85\3\2\2\2\u0b87\u0b88\3\2\2\2\u0b88\u0bb3\3\2"+
		"\2\2\u0b89\u0b8d\7\u0256\2\2\u0b8a\u0b8e\5\u0294\u014b\2\u0b8b\u0b8c\7"+
		"\3\2\2\u0b8c\u0b8e\7\4\2\2\u0b8d\u0b8a\3\2\2\2\u0b8d\u0b8b\3\2\2\2\u0b8d"+
		"\u0b8e\3\2\2\2\u0b8e\u0bb3\3\2\2\2\u0b8f\u0b91\7\u0256\2\2\u0b90\u0b92"+
		"\7\u01a1\2\2\u0b91\u0b90\3\2\2\2\u0b91\u0b92\3\2\2\2\u0b92\u0b95\3\2\2"+
		"\2\u0b93\u0b95\7\u0306\2\2\u0b94\u0b8f\3\2\2\2\u0b94\u0b93\3\2\2\2\u0b95"+
		"\u0b99\3\2\2\2\u0b96\u0b9a\5\u0294\u014b\2\u0b97\u0b98\7\3\2\2\u0b98\u0b9a"+
		"\7\4\2\2\u0b99\u0b96\3\2\2\2\u0b99\u0b97\3\2\2\2\u0b99\u0b9a\3\2\2\2\u0b9a"+
		"\u0bb3\3\2\2\2\u0b9b\u0b9c\7\u0256\2\2\u0b9c\u0b9d\7\u0163\2\2\u0b9d\u0ba0"+
		"\7\u0170\2\2\u0b9e\u0ba0\7\u025c\2\2\u0b9f\u0b9b\3\2\2\2\u0b9f\u0b9e\3"+
		"\2\2\2\u0ba0\u0ba6\3\2\2\2\u0ba1\u0ba2\7\3\2\2\u0ba2\u0ba3\7\31\2\2\u0ba3"+
		"\u0ba4\7\u0350\2\2\u0ba4\u0ba5\3\2\2\2\u0ba5\u0ba7\7\4\2\2\u0ba6\u0ba1"+
		"\3\2\2\2\u0ba6\u0ba7\3\2\2\2\u0ba7\u0bb3\3\2\2\2\u0ba8\u0bb3\7\u026c\2"+
		"\2\u0ba9\u0bb3\7\u02ef\2\2\u0baa\u0bac\7\u02f0\2\2\u0bab\u0bad\5\u0294"+
		"\u014b\2\u0bac\u0bab\3\2\2\2\u0bac\u0bad\3\2\2\2\u0bad\u0bae\3\2\2\2\u0bae"+
		"\u0baf\t\b\2\2\u0baf\u0bb0\7\u02ef\2\2\u0bb0\u0bb3\7\u0143\2\2\u0bb1\u0bb3"+
		"\7\u02d8\2\2\u0bb2\u0b3f\3\2\2\2\u0bb2\u0b40\3\2\2\2\u0bb2\u0b41\3\2\2"+
		"\2\u0bb2\u0b42\3\2\2\2\u0bb2\u0b43\3\2\2\2\u0bb2\u0b49\3\2\2\2\u0bb2\u0b4f"+
		"\3\2\2\2\u0bb2\u0b55\3\2\2\2\u0bb2\u0b56\3\2\2\2\u0bb2\u0b5f\3\2\2\2\u0bb2"+
		"\u0b71\3\2\2\2\u0bb2\u0b7f\3\2\2\2\u0bb2\u0b89\3\2\2\2\u0bb2\u0b94\3\2"+
		"\2\2\u0bb2\u0b9f\3\2\2\2\u0bb2\u0ba8\3\2\2\2\u0bb2\u0ba9\3\2\2\2\u0bb2"+
		"\u0baa\3\2\2\2\u0bb2\u0bb1\3\2\2\2\u0bb3\u0137\3\2\2\2\u0bb4\u0bd0\5n"+
		"8\2\u0bb5\u0bd0\5x=\2\u0bb6\u0bd0\5~@\2\u0bb7\u0bd0\5\u0082B\2\u0bb8\u0bd0"+
		"\5\u0086D\2\u0bb9\u0bd0\5\u0090I\2\u0bba\u0bd0\5\u0092J\2\u0bbb\u0bd0"+
		"\5\u0094K\2\u0bbc\u0bd0\5\u0096L\2\u0bbd\u0bd0\5\u0098M\2\u0bbe\u0bd0"+
		"\5\u009cO\2\u0bbf\u0bd0\5\u009eP\2\u0bc0\u0bd0\5\u00a0Q\2\u0bc1\u0bd0"+
		"\5\u00a2R\2\u0bc2\u0bd0\5\u00a6T\2\u0bc3\u0bd0\5\u00a8U\2\u0bc4\u0bd0"+
		"\5\u00aaV\2\u0bc5\u0bd0\5\u00acW\2\u0bc6\u0bd0\5\u00aeX\2\u0bc7\u0bd0"+
		"\5\u00b0Y\2\u0bc8\u0bd0\5\u00b2Z\2\u0bc9\u0bd0\5\u00b6\\\2\u0bca\u0bd0"+
		"\5\u00b8]\2\u0bcb\u0bd0\5\u00ba^\2\u0bcc\u0bd0\7\u0114\2\2\u0bcd\u0bce"+
		"\7\u00d5\2\2\u0bce\u0bd0\7<\2\2\u0bcf\u0bb4\3\2\2\2\u0bcf\u0bb5\3\2\2"+
		"\2\u0bcf\u0bb6\3\2\2\2\u0bcf\u0bb7\3\2\2\2\u0bcf\u0bb8\3\2\2\2\u0bcf\u0bb9"+
		"\3\2\2\2\u0bcf\u0bba\3\2\2\2\u0bcf\u0bbb\3\2\2\2\u0bcf\u0bbc\3\2\2\2\u0bcf"+
		"\u0bbd\3\2\2\2\u0bcf\u0bbe\3\2\2\2\u0bcf\u0bbf\3\2\2\2\u0bcf\u0bc0\3\2"+
		"\2\2\u0bcf\u0bc1\3\2\2\2\u0bcf\u0bc2\3\2\2\2\u0bcf\u0bc3\3\2\2\2\u0bcf"+
		"\u0bc4\3\2\2\2\u0bcf\u0bc5\3\2\2\2\u0bcf\u0bc6\3\2\2\2\u0bcf\u0bc7\3\2"+
		"\2\2\u0bcf\u0bc8\3\2\2\2\u0bcf\u0bc9\3\2\2\2\u0bcf\u0bca\3\2\2\2\u0bcf"+
		"\u0bcb\3\2\2\2\u0bcf\u0bcc\3\2\2\2\u0bcf\u0bcd\3\2\2\2\u0bd0\u0139\3\2"+
		"\2\2\u0bd1\u0bf1\5p9\2\u0bd2\u0bf1\5\u00c0a\2\u0bd3\u0bf1\5n8\2\u0bd4"+
		"\u0bf1\5z>\2\u0bd5\u0bf1\5\u0080A\2\u0bd6\u0bf1\5\u0082B\2\u0bd7\u0bf1"+
		"\5\u0094K\2\u0bd8\u0bf1\5\u0090I\2\u0bd9\u0bf1\5\u009eP\2\u0bda\u0bf1"+
		"\5\u00a2R\2\u0bdb\u0bf1\5\u00a6T\2\u0bdc\u0bf1\5\u00a8U\2\u0bdd\u0bf1"+
		"\5\u00aaV\2\u0bde\u0bf1\5\u00acW\2\u0bdf\u0bf1\5\u00aeX\2\u0be0\u0bf1"+
		"\5\u00b2Z\2\u0be1\u0be2\7G\2\2\u0be2\u0be3\7\u00ca\2\2\u0be3\u0be4\7\u00f4"+
		"\2\2\u0be4\u0bf1\t\5\2\2\u0be5\u0bf1\5\u00b6\\\2\u0be6\u0be7\7\u01b4\2"+
		"\2\u0be7\u0be8\7\u00ca\2\2\u0be8\u0be9\7\u00c3\2\2\u0be9\u0bf1\7\u0160"+
		"\2\2\u0bea\u0beb\7\u00c3\2\2\u0beb\u0bf1\7\67\2\2\u0bec\u0bf1\5\u00b0"+
		"Y\2\u0bed\u0bee\t\20\2\2\u0bee\u0bef\7\u01e2\2\2\u0bef\u0bf1\7\u01e4\2"+
		"\2\u0bf0\u0bd1\3\2\2\2\u0bf0\u0bd2\3\2\2\2\u0bf0\u0bd3\3\2\2\2\u0bf0\u0bd4"+
		"\3\2\2\2\u0bf0\u0bd5\3\2\2\2\u0bf0\u0bd6\3\2\2\2\u0bf0\u0bd7\3\2\2\2\u0bf0"+
		"\u0bd8\3\2\2\2\u0bf0\u0bd9\3\2\2\2\u0bf0\u0bda\3\2\2\2\u0bf0\u0bdb\3\2"+
		"\2\2\u0bf0\u0bdc\3\2\2\2\u0bf0\u0bdd\3\2\2\2\u0bf0\u0bde\3\2\2\2\u0bf0"+
		"\u0bdf\3\2\2\2\u0bf0\u0be0\3\2\2\2\u0bf0\u0be1\3\2\2\2\u0bf0\u0be5\3\2"+
		"\2\2\u0bf0\u0be6\3\2\2\2\u0bf0\u0bea\3\2\2\2\u0bf0\u0bec\3\2\2\2\u0bf0"+
		"\u0bed\3\2\2\2\u0bf1\u013b\3\2\2\2\u0bf2\u0c0a\5\u00be`\2\u0bf3\u0c0a"+
		"\5p9\2\u0bf4\u0c0a\5\u00c0a\2\u0bf5\u0c0a\5l\67\2\u0bf6\u0c0a\5z>\2\u0bf7"+
		"\u0c0a\5\u0090I\2\u0bf8\u0c0a\5\u0080A\2\u0bf9\u0c0a\5\u0082B\2\u0bfa"+
		"\u0c0a\5\u0094K\2\u0bfb\u0c0a\5\u0084C\2\u0bfc\u0c0a\5\u009eP\2\u0bfd"+
		"\u0c0a\5\u00a2R\2\u0bfe\u0c0a\5\u00a6T\2\u0bff\u0c0a\5\u00a8U\2\u0c00"+
		"\u0c0a\5\u00aaV\2\u0c01\u0c0a\5\u00acW\2\u0c02\u0c0a\5\u00aeX\2\u0c03"+
		"\u0c0a\5\u00b2Z\2\u0c04\u0c0a\5\u00b4[\2\u0c05\u0c0a\5\u00b6\\\2\u0c06"+
		"\u0c0a\5\u0088E\2\u0c07\u0c0a\5\u00b0Y\2\u0c08\u0c0a\5\u008aF\2\u0c09"+
		"\u0bf2\3\2\2\2\u0c09\u0bf3\3\2\2\2\u0c09\u0bf4\3\2\2\2\u0c09\u0bf5\3\2"+
		"\2\2\u0c09\u0bf6\3\2\2\2\u0c09\u0bf7\3\2\2\2\u0c09\u0bf8\3\2\2\2\u0c09"+
		"\u0bf9\3\2\2\2\u0c09\u0bfa\3\2\2\2\u0c09\u0bfb\3\2\2\2\u0c09\u0bfc\3\2"+
		"\2\2\u0c09\u0bfd\3\2\2\2\u0c09\u0bfe\3\2\2\2\u0c09\u0bff\3\2\2\2\u0c09"+
		"\u0c00\3\2\2\2\u0c09\u0c01\3\2\2\2\u0c09\u0c02\3\2\2\2\u0c09\u0c03\3\2"+
		"\2\2\u0c09\u0c04\3\2\2\2\u0c09\u0c05\3\2\2\2\u0c09\u0c06\3\2\2\2\u0c09"+
		"\u0c07\3\2\2\2\u0c09\u0c08\3\2\2\2\u0c0a\u013d\3\2\2\2\u0c0b\u0c0e\5\u0136"+
		"\u009c\2\u0c0c\u0c0e\5\u029c\u014f\2\u0c0d\u0c0b\3\2\2\2\u0c0d\u0c0c\3"+
		"\2\2\2\u0c0e\u013f\3\2\2\2\u0c0f\u0c12\7\u01e9\2\2\u0c10\u0c11\7\u013c"+
		"\2\2\u0c11\u0c13\7\31\2\2\u0c12\u0c10\3\2\2\2\u0c12\u0c13\3\2\2\2\u0c13"+
		"\u0c32\3\2\2\2\u0c14\u0c15\7\u01e8\2\2\u0c15\u0c16\7\66\2\2\u0c16\u0c32"+
		"\7\31\2\2\u0c17\u0c18\7\u00c0\2\2\u0c18\u0c1c\7\u01d3\2\2\u0c19\u0c1a"+
		"\7\u01d3\2\2\u0c1a\u0c1c\7\31\2\2\u0c1b\u0c17\3\2\2\2\u0c1b\u0c19\3\2"+
		"\2\2\u0c1c\u0c32\3\2\2\2\u0c1d\u0c1e\7\u00c0\2\2\u0c1e\u0c22\7\u01d2\2"+
		"\2\u0c1f\u0c20\7\u01d2\2\2\u0c20\u0c22\7\31\2\2\u0c21\u0c1d\3\2\2\2\u0c21"+
		"\u0c1f\3\2\2\2\u0c22\u0c32\3\2\2\2\u0c23\u0c25\7\u00c0\2\2\u0c24\u0c23"+
		"\3\2\2\2\u0c24\u0c25\3\2\2\2\u0c25\u0c26\3\2\2\2\u0c26\u0c32\7\u01e7\2"+
		"\2\u0c27\u0c28\7\u00c0\2\2\u0c28\u0c2c\7\u01e6\2\2\u0c29\u0c2a\7\u01e6"+
		"\2\2\u0c2a\u0c2c\7\31\2\2\u0c2b\u0c27\3\2\2\2\u0c2b\u0c29\3\2\2\2\u0c2c"+
		"\u0c32\3\2\2\2\u0c2d\u0c2f\7\u00c0\2\2\u0c2e\u0c2d\3\2\2\2\u0c2e\u0c2f"+
		"\3\2\2\2\u0c2f\u0c30\3\2\2\2\u0c30\u0c32\7\u00cf\2\2\u0c31\u0c0f\3\2\2"+
		"\2\u0c31\u0c14\3\2\2\2\u0c31\u0c1b\3\2\2\2\u0c31\u0c21\3\2\2\2\u0c31\u0c24"+
		"\3\2\2\2\u0c31\u0c2b\3\2\2\2\u0c31\u0c2e\3\2\2\2\u0c32\u0141\3\2\2\2\u0c33"+
		"\u0c34\7 \2\2\u0c34\u0c35\7\u0137\2\2\u0c35\u0c36\7\3\2\2\u0c36\u0c3b"+
		"\5\u0308\u0185\2\u0c37\u0c38\7\26\2\2\u0c38\u0c3a\5\u0308\u0185\2\u0c39"+
		"\u0c37\3\2\2\2\u0c3a\u0c3d\3\2\2\2\u0c3b\u0c39\3\2\2\2\u0c3b\u0c3c\3\2"+
		"\2\2\u0c3c\u0c3e\3\2\2\2\u0c3d\u0c3b\3\2\2\2\u0c3e\u0c3f\7\4\2\2\u0c3f"+
		"\u0c72\3\2\2\2\u0c40\u0c41\7 \2\2\u0c41\u0c42\7\u0137\2\2\u0c42\u0c43"+
		"\7\3\2\2\u0c43\u0c48\7\30\2\2\u0c44\u0c45\7\26\2\2\u0c45\u0c47\7\30\2"+
		"\2\u0c46\u0c44\3\2\2\2\u0c47\u0c4a\3\2\2\2\u0c48\u0c46\3\2\2\2\u0c48\u0c49"+
		"\3\2\2\2\u0c49\u0c4b\3\2\2\2\u0c4a\u0c48\3\2\2\2\u0c4b\u0c72\7\4\2\2\u0c4c"+
		"\u0c4d\7\u01ec\2\2\u0c4d\u0c4e\7\u0137\2\2\u0c4e\u0c4f\7\3\2\2\u0c4f\u0c54"+
		"\5\u0308\u0185\2\u0c50\u0c51\7\26\2\2\u0c51\u0c53\5\u0308\u0185\2\u0c52"+
		"\u0c50\3\2\2\2\u0c53\u0c56\3\2\2\2\u0c54\u0c52\3\2\2\2\u0c54\u0c55\3\2"+
		"\2\2\u0c55\u0c57\3\2\2\2\u0c56\u0c54\3\2\2\2\u0c57\u0c58\7\4\2\2\u0c58"+
		"\u0c72\3\2\2\2\u0c59\u0c5a\7\u01ec\2\2\u0c5a\u0c5b\7\u0137\2\2\u0c5b\u0c5c"+
		"\7\3\2\2\u0c5c\u0c61\7\30\2\2\u0c5d\u0c5e\7\26\2\2\u0c5e\u0c60\7\30\2"+
		"\2\u0c5f\u0c5d\3\2\2\2\u0c60\u0c63\3\2\2\2\u0c61\u0c5f\3\2\2\2\u0c61\u0c62"+
		"\3\2\2\2\u0c62\u0c64\3\2\2\2\u0c63\u0c61\3\2\2\2\u0c64\u0c72\7\4\2\2\u0c65"+
		"\u0c66\7\u00c0\2\2\u0c66\u0c67\7\u00a4\2\2\u0c67\u0c72\7\u00a5\2\2\u0c68"+
		"\u0c69\7\u00a4\2\2\u0c69\u0c6a\7\u00a5\2\2\u0c6a\u0c72\5\u030a\u0186\2"+
		"\u0c6b\u0c6c\7\u01ea\2\2\u0c6c\u0c72\5\u0302\u0182\2\u0c6d\u0c6e\7\u01eb"+
		"\2\2\u0c6e\u0c72\5\u0304\u0183\2\u0c6f\u0c70\7\u01ed\2\2\u0c70\u0c72\5"+
		"\u0306\u0184\2\u0c71\u0c33\3\2\2\2\u0c71\u0c40\3\2\2\2\u0c71\u0c4c\3\2"+
		"\2\2\u0c71\u0c59\3\2\2\2\u0c71\u0c65\3\2\2\2\u0c71\u0c68\3\2\2\2\u0c71"+
		"\u0c6b\3\2\2\2\u0c71\u0c6d\3\2\2\2\u0c71\u0c6f\3\2\2\2\u0c72\u0143\3\2"+
		"\2\2\u0c73\u0c75\7 \2\2\u0c74\u0c76\7E\2\2\u0c75\u0c74\3\2\2\2\u0c75\u0c76"+
		"\3\2\2\2\u0c76\u0c77\3\2\2\2\u0c77\u0d0f\5\u01d4\u00eb\2\u0c78\u0c7a\7"+
		"%\2\2\u0c79\u0c7b\7E\2\2\u0c7a\u0c79\3\2\2\2\u0c7a\u0c7b\3\2\2\2\u0c7b"+
		"\u0c7c\3\2\2\2\u0c7c\u0d0f\5\u0192\u00ca\2\u0c7d\u0c7e\7\u00ee\2\2\u0c7e"+
		"\u0c7f\7E\2\2\u0c7f\u0c80\5\u02a6\u0154\2\u0c80\u0c81\7\u0124\2\2\u0c81"+
		"\u0c82\5\u02a8\u0155\2\u0c82\u0d0f\3\2\2\2\u0c83\u0c85\7f\2\2\u0c84\u0c86"+
		"\7E\2\2\u0c85\u0c84\3\2\2\2\u0c85\u0c86\3\2\2\2\u0c86\u0c87\3\2\2\2\u0c87"+
		"\u0c88\5\u02a4\u0153\2\u0c88\u0c89\7\u00f1\2\2\u0c89\u0d0f\3\2\2\2\u0c8a"+
		"\u0c8b\7 \2\2\u0c8b\u0c8d\7\u00db\2\2\u0c8c\u0c8e\7\u0080\2\2\u0c8d\u0c8c"+
		"\3\2\2\2\u0c8d\u0c8e\3\2\2\2\u0c8e\u0c8f\3\2\2\2\u0c8f\u0d0f\5\u01d2\u00ea"+
		"\2\u0c90\u0c94\7 \2\2\u0c91\u0c95\5\u01ac\u00d7\2\u0c92\u0c95\5\u01ae"+
		"\u00d8\2\u0c93\u0c95\5\u01b2\u00da\2\u0c94\u0c91\3\2\2\2\u0c94\u0c92\3"+
		"\2\2\2\u0c94\u0c93\3\2\2\2\u0c95\u0d0f\3\2\2\2\u0c96\u0ca1\7f\2\2\u0c97"+
		"\u0c98\7\u020a\2\2\u0c98\u0ca2\7\u00a4\2\2\u0c99\u0c9f\7\u012a\2\2\u0c9a"+
		"\u0c9b\7\u01fc\2\2\u0c9b\u0c9f\7\u00a4\2\2\u0c9c\u0c9f\7?\2\2\u0c9d\u0c9f"+
		"\7L\2\2\u0c9e\u0c99\3\2\2\2\u0c9e\u0c9a\3\2\2\2\u0c9e\u0c9c\3\2\2\2\u0c9e"+
		"\u0c9d\3\2\2\2\u0c9f\u0ca0\3\2\2\2\u0ca0\u0ca2\5\u02d0\u0169\2\u0ca1\u0c97"+
		"\3\2\2\2\u0ca1\u0c9e\3\2\2\2\u0ca2\u0d0f\3\2\2\2\u0ca3\u0ca4\7 \2\2\u0ca4"+
		"\u0ca5\7\u00d7\2\2\u0ca5\u0ca6\7\66\2\2\u0ca6\u0d0f\5\u01b4\u00db\2\u0ca7"+
		"\u0ca8\7 \2\2\u0ca8\u0ca9\7\u00d7\2\2\u0ca9\u0d0f\5\u01c2\u00e2\2\u0caa"+
		"\u0cab\7%\2\2\u0cab\u0cac\7\u00d7\2\2\u0cac\u0cad\7\31\2\2\u0cad\u0d0f"+
		"\5\u01c2\u00e2\2\u0cae\u0caf\7\u020c\2\2\u0caf\u0cb0\7\u00d7\2\2\u0cb0"+
		"\u0cb1\t\36\2\2\u0cb1\u0cb2\7\u0124\2\2\u0cb2\u0cb3\7\u00a7\2\2\u0cb3"+
		"\u0d0f\5\u01c4\u00e3\2\u0cb4\u0cb5\7f\2\2\u0cb5\u0d0f\7\u00d0\2\2\u0cb6"+
		"\u0d0f\5\u01be\u00e0\2\u0cb7\u0cb9\7 \2\2\u0cb8\u0cba\7\u011f\2\2\u0cb9"+
		"\u0cb8\3\2\2\2\u0cb9\u0cba\3\2\2\2\u0cba\u0cbb\3\2\2\2\u0cbb\u0cbc\7\u0134"+
		"\2\2\u0cbc\u0cbd\7\u019b\2\2\u0cbd\u0cbe\7\u01fe\2\2\u0cbe\u0cbf\7\u0121"+
		"\2\2\u0cbf\u0cc1\5\u02bc\u015f\2\u0cc0\u0cc2\5\u01c6\u00e4\2\u0cc1\u0cc0"+
		"\3\2\2\2\u0cc1\u0cc2\3\2\2\2\u0cc2\u0d0f\3\2\2\2\u0cc3\u0cc5\7f\2\2\u0cc4"+
		"\u0cc6\7\u011f\2\2\u0cc5\u0cc4\3\2\2\2\u0cc5\u0cc6\3\2\2\2\u0cc6\u0cc7"+
		"\3\2\2\2\u0cc7\u0d0f\7\u0134\2\2\u0cc8\u0ccc\7 \2\2\u0cc9\u0cca\7\u00b7"+
		"\2\2\u0cca\u0ccd\7\u00e8\2\2\u0ccb\u0ccd\7\u00e8\2\2\u0ccc\u0cc9\3\2\2"+
		"\2\u0ccc\u0ccb\3\2\2\2\u0ccc\u0ccd\3\2\2\2\u0ccd\u0cce\3\2\2\2\u0cce\u0d0f"+
		"\5\u01c8\u00e5\2\u0ccf\u0cd1\7%\2\2\u0cd0\u0cd2\7\u00b7\2\2\u0cd1\u0cd0"+
		"\3\2\2\2\u0cd1\u0cd2\3\2\2\2\u0cd2\u0cd3\3\2\2\2\u0cd3\u0cd4\7\u00e8\2"+
		"\2\u0cd4\u0d0f\5\u01ca\u00e6\2\u0cd5\u0cd7\7f\2\2\u0cd6\u0cd8\7\u00b7"+
		"\2\2\u0cd7\u0cd6\3\2\2\2\u0cd7\u0cd8\3\2\2\2\u0cd8\u0cd9\3\2\2\2\u0cd9"+
		"\u0d0f\7\u00e8\2\2\u0cda\u0cdb\7V\2\2\u0cdb\u0cdc\78\2\2\u0cdc\u0d0f\t"+
		"\37\2\2\u0cdd\u0cdf\7\u00c2\2\2\u0cde\u0cdd\3\2\2\2\u0cde\u0cdf\3\2\2"+
		"\2\u0cdf\u0ce0\3\2\2\2\u0ce0\u0ce2\7\u0136\2\2\u0ce1\u0ce3\7\u025e\2\2"+
		"\u0ce2\u0ce1\3\2\2\2\u0ce2\u0ce3\3\2\2\2\u0ce3\u0d0f\3\2\2\2\u0ce4\u0ce5"+
		"\7 \2\2\u0ce5\u0ce6\7@\2\2\u0ce6\u0d0f\5\u02be\u0160\2\u0ce7\u0ce8\7f"+
		"\2\2\u0ce8\u0d0f\7@\2\2\u0ce9\u0cea\7 \2\2\u0cea\u0ceb\7\u00f1\2\2\u0ceb"+
		"\u0cec\7\u00ca\2\2\u0cec\u0d0f\7f\2\2\u0ced\u0cee\7f\2\2\u0cee\u0cef\7"+
		"\u00f1\2\2\u0cef\u0cf0\7\u00ca\2\2\u0cf0\u0d0f\7f\2\2\u0cf1\u0cf2\t \2"+
		"\2\u0cf2\u0cf3\7\u0102\2\2\u0cf3\u0cf4\7\u01ee\2\2\u0cf4\u0d0f\7\u01f6"+
		"\2\2\u0cf5\u0cf6\t \2\2\u0cf6\u0cf7\7E\2\2\u0cf7\u0cf8\7\u01ee\2\2\u0cf8"+
		"\u0d0f\7\u01f6\2\2\u0cf9\u0cfa\7\u01f1\2\2\u0cfa\u0d0f\t\5\2\2\u0cfb\u0cfc"+
		"\7/\2\2\u0cfc\u0d0f\t!\2\2\u0cfd\u0d00\7\u012e\2\2\u0cfe\u0d01\5\u02c4"+
		"\u0163\2\u0cff\u0d01\7\u00c3\2\2\u0d00\u0cfe\3\2\2\2\u0d00\u0cff\3\2\2"+
		"\2\u0d01\u0d0f\3\2\2\2\u0d02\u0d03\7\u01d7\2\2\u0d03\u0d04\7\u01f2\2\2"+
		"\u0d04\u0d05\7\u019b\2\2\u0d05\u0d0f\5\u02c0\u0161\2\u0d06\u0d07\7`\2"+
		"\2\u0d07\u0d0f\7\u01f2\2\2\u0d08\u0d09\7\u00c0\2\2\u0d09\u0d0a\7\u00a4"+
		"\2\2\u0d0a\u0d0f\7\u00a5\2\2\u0d0b\u0d0c\7\u00a4\2\2\u0d0c\u0d0d\7\u00a5"+
		"\2\2\u0d0d\u0d0f\5\u030a\u0186\2\u0d0e\u0c73\3\2\2\2\u0d0e\u0c78\3\2\2"+
		"\2\u0d0e\u0c7d\3\2\2\2\u0d0e\u0c83\3\2\2\2\u0d0e\u0c8a\3\2\2\2\u0d0e\u0c90"+
		"\3\2\2\2\u0d0e\u0c96\3\2\2\2\u0d0e\u0ca3\3\2\2\2\u0d0e\u0ca7\3\2\2\2\u0d0e"+
		"\u0caa\3\2\2\2\u0d0e\u0cae\3\2\2\2\u0d0e\u0cb4\3\2\2\2\u0d0e\u0cb6\3\2"+
		"\2\2\u0d0e\u0cb7\3\2\2\2\u0d0e\u0cc3\3\2\2\2\u0d0e\u0cc8\3\2\2\2\u0d0e"+
		"\u0ccf\3\2\2\2\u0d0e\u0cd5\3\2\2\2\u0d0e\u0cda\3\2\2\2\u0d0e\u0cde\3\2"+
		"\2\2\u0d0e\u0ce4\3\2\2\2\u0d0e\u0ce7\3\2\2\2\u0d0e\u0ce9\3\2\2\2\u0d0e"+
		"\u0ced\3\2\2\2\u0d0e\u0cf1\3\2\2\2\u0d0e\u0cf5\3\2\2\2\u0d0e\u0cf9\3\2"+
		"\2\2\u0d0e\u0cfb\3\2\2\2\u0d0e\u0cfd\3\2\2\2\u0d0e\u0d02\3\2\2\2\u0d0e"+
		"\u0d06\3\2\2\2\u0d0e\u0d08\3\2\2\2\u0d0e\u0d0b\3\2\2\2\u0d0f\u0145\3\2"+
		"\2\2\u0d10\u0d3b\5\u0106\u0084\2\u0d11\u0d12\7<\2\2\u0d12\u0d3b\7\31\2"+
		"\2\u0d13\u0d3b\5\u0108\u0085\2\u0d14\u0d3b\5\u0114\u008b\2\u0d15\u0d16"+
		"\7f\2\2\u0d16\u0d17\7\u0222\2\2\u0d17\u0d3b\7\u01f5\2\2\u0d18\u0d3b\5"+
		"\u010c\u0087\2\u0d19\u0d1a\7\u009b\2\2\u0d1a\u0d1b\7\u0216\2\2\u0d1b\u0d3b"+
		"\7\31\2\2\u0d1c\u0d1d\7\u00b2\2\2\u0d1d\u0d3b\t\30\2\2\u0d1e\u0d1f\7\u00b3"+
		"\2\2\u0d1f\u0d3b\t\"\2\2\u0d20\u0d22\7\u00c2\2\2\u0d21\u0d20\3\2\2\2\u0d21"+
		"\u0d22\3\2\2\2\u0d22\u0d23\3\2\2\2\u0d23\u0d3b\7\u021b\2\2\u0d24\u0d25"+
		"\7\u021a\2\2\u0d25\u0d29\7\u01c9\2\2\u0d26\u0d27\7\u021a\2\2\u0d27\u0d29"+
		"\7\u00c0\2\2\u0d28\u0d24\3\2\2\2\u0d28\u0d26\3\2\2\2\u0d29\u0d3b\3\2\2"+
		"\2\u0d2a\u0d2b\7\u021d\2\2\u0d2b\u0d3b\7\31\2\2\u0d2c\u0d2d\7\u021c\2"+
		"\2\u0d2d\u0d3b\7\31\2\2\u0d2e\u0d2f\7\u021e\2\2\u0d2f\u0d30\7B\2\2\u0d30"+
		"\u0d3b\t\5\2\2\u0d31\u0d32\7\u0224\2\2\u0d32\u0d3b\7\31\2\2\u0d33\u0d34"+
		"\7\u0225\2\2\u0d34\u0d3b\t\5\2\2\u0d35\u0d3b\5\u016a\u00b6\2\u0d36\u0d3b"+
		"\5\u016c\u00b7\2\u0d37\u0d3b\5\u0170\u00b9\2\u0d38\u0d39\7\u0221\2\2\u0d39"+
		"\u0d3b\7\u0223\2\2\u0d3a\u0d10\3\2\2\2\u0d3a\u0d11\3\2\2\2\u0d3a\u0d13"+
		"\3\2\2\2\u0d3a\u0d14\3\2\2\2\u0d3a\u0d15\3\2\2\2\u0d3a\u0d18\3\2\2\2\u0d3a"+
		"\u0d19\3\2\2\2\u0d3a\u0d1c\3\2\2\2\u0d3a\u0d1e\3\2\2\2\u0d3a\u0d21\3\2"+
		"\2\2\u0d3a\u0d28\3\2\2\2\u0d3a\u0d2a\3\2\2\2\u0d3a\u0d2c\3\2\2\2\u0d3a"+
		"\u0d2e\3\2\2\2\u0d3a\u0d31\3\2\2\2\u0d3a\u0d33\3\2\2\2\u0d3a\u0d35\3\2"+
		"\2\2\u0d3a\u0d36\3\2\2\2\u0d3a\u0d37\3\2\2\2\u0d3a\u0d38\3\2\2\2\u0d3b"+
		"\u0147\3\2\2\2\u0d3c\u0d3d\7%\2\2\u0d3d\u0d3e\7\u011f\2\2\u0d3e\u0d3f"+
		"\7\u0229\2\2\u0d3f\u0d95\5\u02ec\u0177\2\u0d40\u0d41\7%\2\2\u0d41\u0d42"+
		"\7\u00c0\2\2\u0d42\u0d43\7\\\2\2\u0d43\u0d95\7\u00f8\2\2\u0d44\u0d45\7"+
		"%\2\2\u0d45\u0d46\7\\\2\2\u0d46\u0d47\7\u00f8\2\2\u0d47\u0d54\5\u02f0"+
		"\u0179\2\u0d48\u0d49\7\u01a2\2\2\u0d49\u0d4a\7\u00f8\2\2\u0d4a\u0d4b\7"+
		"*\2\2\u0d4b\u0d4c\7\u0170\2\2\u0d4c\u0d55\7\u022c\2\2\u0d4d\u0d4e\7\u013c"+
		"\2\2\u0d4e\u0d4f\7\u00f8\2\2\u0d4f\u0d50\7*\2\2\u0d50\u0d51\7\u0170\2"+
		"\2\u0d51\u0d52\7\u022c\2\2\u0d52\u0d53\7\u0144\2\2\u0d53\u0d55\7\u022e"+
		"\2\2\u0d54\u0d48\3\2\2\2\u0d54\u0d4d\3\2\2\2\u0d54\u0d55\3\2\2\2\u0d55"+
		"\u0d95\3\2\2\2\u0d56\u0d58\7%\2\2\u0d57\u0d56\3\2\2\2\u0d57\u0d58\3\2"+
		"\2\2\u0d58\u0d59\3\2\2\2\u0d59\u0d95\7\u01d7\2\2\u0d5a\u0d5c\7%\2\2\u0d5b"+
		"\u0d5a\3\2\2\2\u0d5b\u0d5c\3\2\2\2\u0d5c\u0d5d\3\2\2\2\u0d5d\u0d95\7`"+
		"\2\2\u0d5e\u0d60\7%\2\2\u0d5f\u0d5e\3\2\2\2\u0d5f\u0d60\3\2\2\2\u0d60"+
		"\u0d61\3\2\2\2\u0d61\u0d62\7\u00c0\2\2\u0d62\u0d63\7\\\2\2\u0d63\u0d64"+
		"\7\u010b\2\2\u0d64\u0d95\7\u00a5\2\2\u0d65\u0d67\7%\2\2\u0d66\u0d65\3"+
		"\2\2\2\u0d66\u0d67\3\2\2\2\u0d67\u0d68\3\2\2\2\u0d68\u0d69\7\\\2\2\u0d69"+
		"\u0d6a\7\u010b\2\2\u0d6a\u0d6b\7\u00a5\2\2\u0d6b\u0d95\5\u02f2\u017a\2"+
		"\u0d6c\u0d6d\7%\2\2\u0d6d\u0d6e\7\u0227\2\2\u0d6e\u0d6f\7\3\2\2\u0d6f"+
		"\u0d74\5\u0156\u00ac\2\u0d70\u0d71\7\26\2\2\u0d71\u0d73\5\u0156\u00ac"+
		"\2\u0d72\u0d70\3\2\2\2\u0d73\u0d76\3\2\2\2\u0d74\u0d72\3\2\2\2\u0d74\u0d75"+
		"\3\2\2\2\u0d75\u0d77\3\2\2\2\u0d76\u0d74\3\2\2\2\u0d77\u0d78\7\4\2\2\u0d78"+
		"\u0d95\3\2\2\2\u0d79\u0d7a\7 \2\2\u0d7a\u0d7b\7\u0227\2\2\u0d7b\u0d7c"+
		"\7\3\2\2\u0d7c\u0d81\5\u0158\u00ad\2\u0d7d\u0d7e\7\26\2\2\u0d7e\u0d80"+
		"\5\u0158\u00ad\2\u0d7f\u0d7d\3\2\2\2\u0d80\u0d83\3\2\2\2\u0d81\u0d7f\3"+
		"\2\2\2\u0d81\u0d82\3\2\2\2\u0d82\u0d84\3\2\2\2\u0d83\u0d81\3\2\2\2\u0d84"+
		"\u0d85\7\4\2\2\u0d85\u0d95\3\2\2\2\u0d86\u0d87\7f\2\2\u0d87\u0d88\7\u0227"+
		"\2\2\u0d88\u0d89\7\3\2\2\u0d89\u0d8e\5\u015a\u00ae\2\u0d8a\u0d8b\7\26"+
		"\2\2\u0d8b\u0d8d\5\u015a\u00ae\2\u0d8c\u0d8a\3\2\2\2\u0d8d\u0d90\3\2\2"+
		"\2\u0d8e\u0d8c\3\2\2\2\u0d8e\u0d8f\3\2\2\2\u0d8f\u0d91\3\2\2\2\u0d90\u0d8e"+
		"\3\2\2\2\u0d91\u0d92\7\4\2\2\u0d92\u0d95\3\2\2\2\u0d93\u0d95\5\u015e\u00b0"+
		"\2\u0d94\u0d3c\3\2\2\2\u0d94\u0d40\3\2\2\2\u0d94\u0d44\3\2\2\2\u0d94\u0d57"+
		"\3\2\2\2\u0d94\u0d5b\3\2\2\2\u0d94\u0d5f\3\2\2\2\u0d94\u0d66\3\2\2\2\u0d94"+
		"\u0d6c\3\2\2\2\u0d94\u0d79\3\2\2\2\u0d94\u0d86\3\2\2\2\u0d94\u0d93\3\2"+
		"\2\2\u0d95\u0149\3\2\2\2\u0d96\u0da7\5\u0106\u0084\2\u0d97\u0d98\7\u0096"+
		"\2\2\u0d98\u0da7\5\u02fe\u0180\2\u0d99\u0d9a\7*\2\2\u0d9a\u0d9d\7\u0236"+
		"\2\2\u0d9b\u0d9c\7\u0080\2\2\u0d9c\u0d9e\5\u02e0\u0171\2\u0d9d\u0d9b\3"+
		"\2\2\2\u0d9d\u0d9e\3\2\2\2\u0d9e\u0da7\3\2\2\2\u0d9f\u0da2\7\u0119\2\2"+
		"\u0da0\u0da3\7\u0237\2\2\u0da1\u0da3\5\u0300\u0181\2\u0da2\u0da0\3\2\2"+
		"\2\u0da2\u0da1\3\2\2\2\u0da2\u0da3\3\2\2\2\u0da3\u0da7\3\2\2\2\u0da4\u0da5"+
		"\7<\2\2\u0da5\u0da7\t\6\2\2\u0da6\u0d96\3\2\2\2\u0da6\u0d97\3\2\2\2\u0da6"+
		"\u0d99\3\2\2\2\u0da6\u0d9f\3\2\2\2\u0da6\u0da4\3\2\2\2\u0da7\u014b\3\2"+
		"\2\2\u0da8\u0ddf\5\u0152\u00aa\2\u0da9\u0ddf\5\u015c\u00af\2\u0daa\u0ddf"+
		"\5\u0110\u0089\2\u0dab\u0ddf\7\u00d8\2\2\u0dac\u0ddf\5\u0112\u008a\2\u0dad"+
		"\u0ddf\5\u0114\u008b\2\u0dae\u0ddf\5\u0150\u00a9\2\u0daf\u0ddf\5\u0126"+
		"\u0094\2\u0db0\u0ddf\5\u0128\u0095\2\u0db1\u0ddf\5\u0116\u008c\2\u0db2"+
		"\u0db3\t#\2\2\u0db3\u0db4\7\u00c3\2\2\u0db4\u0ddf\7\u0240\2\2\u0db5\u0db6"+
		"\7\u00d7\2\2\u0db6\u0db8\7\66\2\2\u0db7\u0db9\7\u017a\2\2\u0db8\u0db7"+
		"\3\2\2\2\u0db8\u0db9\3\2\2\2\u0db9\u0dba\3\2\2\2\u0dba\u0dbb\7\3\2\2\u0dbb"+
		"\u0dc2\5\u012a\u0096\2\u0dbc\u0dc1\5\u0150\u00a9\2\u0dbd\u0dc1\5\u0126"+
		"\u0094\2\u0dbe\u0dc1\5\u0128\u0095\2\u0dbf\u0dc1\5\u010c\u0087\2\u0dc0"+
		"\u0dbc\3\2\2\2\u0dc0\u0dbd\3\2\2\2\u0dc0\u0dbe\3\2\2\2\u0dc0\u0dbf\3\2"+
		"\2\2\u0dc1\u0dc4\3\2\2\2\u0dc2\u0dc0\3\2\2\2\u0dc2\u0dc3\3\2\2\2\u0dc3"+
		"\u0dd2\3\2\2\2\u0dc4\u0dc2\3\2\2\2\u0dc5\u0dc6\7\26\2\2\u0dc6\u0dcd\5"+
		"\u012a\u0096\2\u0dc7\u0dcc\5\u0150\u00a9\2\u0dc8\u0dcc\5\u0126\u0094\2"+
		"\u0dc9\u0dcc\5\u0128\u0095\2\u0dca\u0dcc\5\u010c\u0087\2\u0dcb\u0dc7\3"+
		"\2\2\2\u0dcb\u0dc8\3\2\2\2\u0dcb\u0dc9\3\2\2\2\u0dcb\u0dca\3\2\2\2\u0dcc"+
		"\u0dcf\3\2\2\2\u0dcd\u0dcb\3\2\2\2\u0dcd\u0dce\3\2\2\2\u0dce\u0dd1\3\2"+
		"\2\2\u0dcf\u0dcd\3\2\2\2\u0dd0\u0dc5\3\2\2\2\u0dd1\u0dd4\3\2\2\2\u0dd2"+
		"\u0dd0\3\2\2\2\u0dd2\u0dd3\3\2\2\2\u0dd3\u0dd5\3\2\2\2\u0dd4\u0dd2\3\2"+
		"\2\2\u0dd5\u0dd6\7\4\2\2\u0dd6\u0ddf\3\2\2\2\u0dd7\u0ddf\5\u0106\u0084"+
		"\2\u0dd8\u0ddf\5\u0108\u0085\2\u0dd9\u0dda\7\u023c\2\2\u0dda\u0ddf\t\5"+
		"\2\2\u0ddb\u0ddf\5\u010c\u0087\2\u0ddc\u0ddf\5\u010e\u0088\2\u0ddd\u0ddf"+
		"\5\u010a\u0086\2\u0dde\u0da8\3\2\2\2\u0dde\u0da9\3\2\2\2\u0dde\u0daa\3"+
		"\2\2\2\u0dde\u0dab\3\2\2\2\u0dde\u0dac\3\2\2\2\u0dde\u0dad\3\2\2\2\u0dde"+
		"\u0dae\3\2\2\2\u0dde\u0daf\3\2\2\2\u0dde\u0db0\3\2\2\2\u0dde\u0db1\3\2"+
		"\2\2\u0dde\u0db2\3\2\2\2\u0dde\u0db5\3\2\2\2\u0dde\u0dd7\3\2\2\2\u0dde"+
		"\u0dd8\3\2\2\2\u0dde\u0dd9\3\2\2\2\u0dde\u0ddb\3\2\2\2\u0dde\u0ddc\3\2"+
		"\2\2\u0dde\u0ddd\3\2\2\2\u0ddf\u014d\3\2\2\2\u0de0\u0de1\7\u0093\2\2\u0de1"+
		"\u0ded\5\u02e2\u0172\2\u0de2\u0ded\5\u0106\u0084\2\u0de3\u0ded\5\u0108"+
		"\u0085\2\u0de4\u0ded\5\u0114\u008b\2\u0de5\u0ded\5\u0116\u008c\2\u0de6"+
		"\u0ded\5\u010c\u0087\2\u0de7\u0ded\5\u0128\u0095\2\u0de8\u0ded\5\u011a"+
		"\u008e\2\u0de9\u0ded\5\u0118\u008d\2\u0dea\u0ded\5\u011e\u0090\2\u0deb"+
		"\u0ded\5\u0150\u00a9\2\u0dec\u0de0\3\2\2\2\u0dec\u0de2\3\2\2\2\u0dec\u0de3"+
		"\3\2\2\2\u0dec\u0de4\3\2\2\2\u0dec\u0de5\3\2\2\2\u0dec\u0de6\3\2\2\2\u0dec"+
		"\u0de7\3\2\2\2\u0dec\u0de8\3\2\2\2\u0dec\u0de9\3\2\2\2\u0dec\u0dea\3\2"+
		"\2\2\u0dec\u0deb\3\2\2\2\u0ded\u014f\3\2\2\2\u0dee\u0dfe\7\u012d\2\2\u0def"+
		"\u0df0\7\u0119\2\2\u0df0\u0df9\5\u0300\u0181\2\u0df1\u0df2\7\u00e2\2\2"+
		"\u0df2\u0df8\7\31\2\2\u0df3\u0df4\7\u010a\2\2\u0df4\u0df8\7\31\2\2\u0df5"+
		"\u0df6\7q\2\2\u0df6\u0df8\t\5\2\2\u0df7\u0df1\3\2\2\2\u0df7\u0df3\3\2"+
		"\2\2\u0df7\u0df5\3\2\2\2\u0df8\u0dfb\3\2\2\2\u0df9\u0df7\3\2\2\2\u0df9"+
		"\u0dfa\3\2\2\2\u0dfa\u0dff\3\2\2\2\u0dfb\u0df9\3\2\2\2\u0dfc\u0dfd\7\u0133"+
		"\2\2\u0dfd\u0dff\5\u02e6\u0174\2\u0dfe\u0def\3\2\2\2\u0dfe\u0dfc\3\2\2"+
		"\2\u0dff\u0151\3\2\2\2\u0e00\u0e01\7\u023f\2\2\u0e01\u0e02\t$\2\2\u0e02"+
		"\u0e03\7\u012d\2\2\u0e03\u0e04\7\u0241\2\2\u0e04\u0e05\5\u0154\u00ab\2"+
		"\u0e05\u0e06\7*\2\2\u0e06\u0e07\7\u01c6\2\2\u0e07\u0e08\5\u019c\u00cf"+
		"\2\u0e08\u0153\3\2\2\2\u0e09\u0e0a\7\30\2\2\u0e0a\u0155\3\2\2\2\u0e0b"+
		"\u0e0c\7\u0226\2\2\u0e0c\u0e14\5\u02f6\u017c\2\u0e0d\u0e0e\7m\2\2\u0e0e"+
		"\u0e14\5\u02fc\u017f\2\u0e0f\u0e10\7\u022f\2\2\u0e10\u0e14\5\u02fa\u017e"+
		"\2\u0e11\u0e12\7\u022b\2\2\u0e12\u0e14\5\u02f8\u017d\2\u0e13\u0e0b\3\2"+
		"\2\2\u0e13\u0e0d\3\2\2\2\u0e13\u0e0f\3\2\2\2\u0e13\u0e11\3\2\2\2\u0e14"+
		"\u0157\3\2\2\2\u0e15\u0e16\7\u0226\2\2\u0e16\u0e1c\5\u02f6\u017c\2\u0e17"+
		"\u0e18\7\u022f\2\2\u0e18\u0e1c\5\u02fa\u017e\2\u0e19\u0e1a\7\u022b\2\2"+
		"\u0e1a\u0e1c\5\u02f8\u017d\2\u0e1b\u0e15\3\2\2\2\u0e1b\u0e17\3\2\2\2\u0e1b"+
		"\u0e19\3\2\2\2\u0e1c\u0159\3\2\2\2\u0e1d\u0e1f\7\u0226\2\2\u0e1e\u0e20"+
		"\5\u02f6\u017c\2\u0e1f\u0e1e\3\2\2\2\u0e1f\u0e20\3\2\2\2\u0e20\u0e2a\3"+
		"\2\2\2\u0e21\u0e23\7\u022f\2\2\u0e22\u0e24\5\u02fa\u017e\2\u0e23\u0e22"+
		"\3\2\2\2\u0e23\u0e24\3\2\2\2\u0e24\u0e2a\3\2\2\2\u0e25\u0e27\7\u022b\2"+
		"\2\u0e26\u0e28\5\u02f8\u017d\2\u0e27\u0e26\3\2\2\2\u0e27\u0e28\3\2\2\2"+
		"\u0e28\u0e2a\3\2\2\2\u0e29\u0e1d\3\2\2\2\u0e29\u0e21\3\2\2\2\u0e29\u0e25"+
		"\3\2\2\2\u0e2a\u015b\3\2\2\2\u0e2b\u0e2c\7\u01d1\2\2\u0e2c\u0e2d\7\3\2"+
		"\2\u0e2d\u0e32\5\u02a4\u0153\2\u0e2e\u0e2f\7\26\2\2\u0e2f\u0e31\5\u02a4"+
		"\u0153\2\u0e30\u0e2e\3\2\2\2\u0e31\u0e34\3\2\2\2\u0e32\u0e30\3\2\2\2\u0e32"+
		"\u0e33\3\2\2\2\u0e33\u0e35\3\2\2\2\u0e34\u0e32\3\2\2\2\u0e35\u0e36\7\4"+
		"\2\2\u0e36\u015d\3\2\2\2\u0e37\u0e38\7 \2\2\u0e38\u0e39\7\u019b\2\2\u0e39"+
		"\u0e3a\7\u0080\2\2\u0e3a\u0e3f\5\u0160\u00b1\2\u0e3b\u0e3c\7\26\2\2\u0e3c"+
		"\u0e3e\5\u0160\u00b1\2\u0e3d\u0e3b\3\2\2\2\u0e3e\u0e41\3\2\2\2\u0e3f\u0e3d"+
		"\3\2\2\2\u0e3f\u0e40\3\2\2\2\u0e40\u0e59\3\2\2\2\u0e41\u0e3f\3\2\2\2\u0e42"+
		"\u0e43\7\u02d4\2\2\u0e43\u0e44\7\u019b\2\2\u0e44\u0e45\7\u0080\2\2\u0e45"+
		"\u0e4a\5\u0162\u00b2\2\u0e46\u0e47\7\26\2\2\u0e47\u0e49\5\u0162\u00b2"+
		"\2\u0e48\u0e46\3\2\2\2\u0e49\u0e4c\3\2\2\2\u0e4a\u0e48\3\2\2\2\u0e4a\u0e4b"+
		"\3\2\2\2\u0e4b\u0e59\3\2\2\2\u0e4c\u0e4a\3\2\2\2\u0e4d\u0e4e\7f\2\2\u0e4e"+
		"\u0e4f\7\u019b\2\2\u0e4f\u0e50\7\u0080\2\2\u0e50\u0e55\5\u0164\u00b3\2"+
		"\u0e51\u0e52\7\26\2\2\u0e52\u0e54\5\u0164\u00b3\2\u0e53\u0e51\3\2\2\2"+
		"\u0e54\u0e57\3\2\2\2\u0e55\u0e53\3\2\2\2\u0e55\u0e56\3\2\2\2\u0e56\u0e59"+
		"\3\2\2\2\u0e57\u0e55\3\2\2\2\u0e58\u0e37\3\2\2\2\u0e58\u0e42\3\2\2\2\u0e58"+
		"\u0e4d\3\2\2\2\u0e59\u015f\3\2\2\2\u0e5a\u0e5c\5\u02ec\u0177\2\u0e5b\u0e5d"+
		"\5\u0166\u00b4\2\u0e5c\u0e5b\3\2\2\2\u0e5c\u0e5d\3\2\2\2\u0e5d\u0e69\3"+
		"\2\2\2\u0e5e\u0e5f\7z\2\2\u0e5f\u0e60\7\u010b\2\2\u0e60\u0e61\7\u022d"+
		"\2\2\u0e61\u0e63\5\u02ee\u0178\2\u0e62\u0e64\5\u0166\u00b4\2\u0e63\u0e62"+
		"\3\2\2\2\u0e63\u0e64\3\2\2\2\u0e64\u0e69\3\2\2\2\u0e65\u0e66\7\u00e7\2"+
		"\2\u0e66\u0e67\t\b\2\2\u0e67\u0e69\7\u0228\2\2\u0e68\u0e5a\3\2\2\2\u0e68"+
		"\u0e5e\3\2\2\2\u0e68\u0e65\3\2\2\2\u0e69\u0161\3\2\2\2\u0e6a\u0e6b\5\u0160"+
		"\u00b1\2\u0e6b\u0163\3\2\2\2\u0e6c\u0e73\5\u02ec\u0177\2\u0e6d\u0e6e\7"+
		"z\2\2\u0e6e\u0e6f\7\u010b\2\2\u0e6f\u0e70\7\u022d\2\2\u0e70\u0e73\5\u02ee"+
		"\u0178\2\u0e71\u0e73\7\u00e7\2\2\u0e72\u0e6c\3\2\2\2\u0e72\u0e6d\3\2\2"+
		"\2\u0e72\u0e71\3\2\2\2\u0e73\u0165\3\2\2\2\u0e74\u0e75\7\u00f8\2\2\u0e75"+
		"\u0e77\5\u02f0\u0179\2\u0e76\u0e74\3\2\2\2\u0e76\u0e77\3\2\2\2\u0e77\u0e7b"+
		"\3\2\2\2\u0e78\u0e79\7\u010b\2\2\u0e79\u0e7a\7\u00a5\2\2\u0e7a\u0e7c\5"+
		"\u02f2\u017a\2\u0e7b\u0e78\3\2\2\2\u0e7b\u0e7c\3\2\2\2\u0e7c\u0e7d\3\2"+
		"\2\2\u0e7d\u0e7e\t\b\2\2\u0e7e\u0e7f\7\u0228\2\2\u0e7f\u0167\3\2\2\2\u0e80"+
		"\u0e82\7%\2\2\u0e81\u0e80\3\2\2\2\u0e81\u0e82\3\2\2\2\u0e82\u0e83\3\2"+
		"\2\2\u0e83\u0e86\7\u00d7\2\2\u0e84\u0e86\7\u00d6\2\2\u0e85\u0e81\3\2\2"+
		"\2\u0e85\u0e84\3\2\2\2\u0e86\u0e87\3\2\2\2\u0e87\u0e8f\7\31\2\2\u0e88"+
		"\u0e90\5\u016a\u00b6\2\u0e89\u0e90\5\u016c\u00b7\2\u0e8a\u0e90\5\u0170"+
		"\u00b9\2\u0e8b\u0e90\5\u0114\u008b\2\u0e8c\u0e90\5\u010c\u0087\2\u0e8d"+
		"\u0e8e\7\u0225\2\2\u0e8e\u0e90\t\5\2\2\u0e8f\u0e88\3\2\2\2\u0e8f\u0e89"+
		"\3\2\2\2\u0e8f\u0e8a\3\2\2\2\u0e8f\u0e8b\3\2\2\2\u0e8f\u0e8c\3\2\2\2\u0e8f"+
		"\u0e8d\3\2\2\2\u0e90\u0e91\3\2\2\2\u0e91\u0e8f\3\2\2\2\u0e91\u0e92\3\2"+
		"\2\2\u0e92\u0169\3\2\2\2\u0e93\u0e95\5\u0124\u0093\2\u0e94\u0e93\3\2\2"+
		"\2\u0e95\u0e96\3\2\2\2\u0e96\u0e94\3\2\2\2\u0e96\u0e97\3\2\2\2\u0e97\u016b"+
		"\3\2\2\2\u0e98\u0e99\7\u01cf\2\2\u0e99\u0ea6\7\31\2\2\u0e9a\u0e9b\7\u01d4"+
		"\2\2\u0e9b\u0ea6\7\31\2\2\u0e9c\u0ea3\7\u01d4\2\2\u0e9d\u0e9f\7\31\2\2"+
		"\u0e9e\u0e9d\3\2\2\2\u0e9e\u0e9f\3\2\2\2\u0e9f\u0ea0\3\2\2\2\u0ea0\u0ea1"+
		"\7\u0080\2\2\u0ea1\u0ea2\7\u012c\2\2\u0ea2\u0ea4\7\31\2\2\u0ea3\u0e9e"+
		"\3\2\2\2\u0ea3\u0ea4\3\2\2\2\u0ea4\u0ea6\3\2\2\2\u0ea5\u0e98\3\2\2\2\u0ea5"+
		"\u0e9a\3\2\2\2\u0ea5\u0e9c\3\2\2\2\u0ea6\u0ea7\3\2\2\2\u0ea7\u0ea5\3\2"+
		"\2\2\u0ea7\u0ea8\3\2\2\2\u0ea8\u016d\3\2\2\2\u0ea9\u0eaa\7\u021f\2\2\u0eaa"+
		"\u0eab\7\u0121\2\2\u0eab\u0eac\5\u02b6\u015c\2\u0eac\u0ead\7\u0124\2\2"+
		"\u0ead\u0eb1\7\u0122\2\2\u0eae\u0eaf\5\u02e2\u0172\2\u0eaf\u0eb0\7\23"+
		"\2\2\u0eb0\u0eb2\3\2\2\2\u0eb1\u0eae\3\2\2\2\u0eb1\u0eb2\3\2\2\2\u0eb2"+
		"\u0eb3\3\2\2\2\u0eb3\u0eb4\5\u02e4\u0173\2\u0eb4\u016f\3\2\2\2\u0eb5\u0eb6"+
		"\7\u01d0\2\2\u0eb6\u0eb7\t\32\2\2\u0eb7\u0171\3\2\2\2\u0eb8\u0eba\7\u00e7"+
		"\2\2\u0eb9\u0eb8\3\2\2\2\u0eb9\u0eba\3\2\2\2\u0eba\u0ebb\3\2\2\2\u0ebb"+
		"\u0ebc\7\u0234\2\2\u0ebc\u0ebd\5\u02ce\u0168\2\u0ebd\u0ebe\7\u0080\2\2"+
		"\u0ebe\u0ebf\t%\2\2\u0ebf\u0173\3\2\2\2\u0ec0\u0ec1\5\u02b6\u015c\2\u0ec1"+
		"\u0ec2\7\3\2\2\u0ec2\u0ec3\5\u02a4\u0153\2\u0ec3\u0ec4\7\u009e\2\2\u0ec4"+
		"\u0ecc\7\30\2\2\u0ec5\u0ec6\7\26\2\2\u0ec6\u0ec7\5\u02a4\u0153\2\u0ec7"+
		"\u0ec8\7\u009e\2\2\u0ec8\u0ec9\7\30\2\2\u0ec9\u0ecb\3\2\2\2\u0eca\u0ec5"+
		"\3\2\2\2\u0ecb\u0ece\3\2\2\2\u0ecc\u0eca\3\2\2\2\u0ecc\u0ecd\3\2\2\2\u0ecd"+
		"\u0ecf\3\2\2\2\u0ece\u0ecc\3\2\2\2\u0ecf\u0ed0\7\4\2\2\u0ed0\u0175\3\2"+
		"\2\2\u0ed1\u0ed2\7\u0084\2\2\u0ed2\u0edf\5\u030c\u0187\2\u0ed3\u0edc\7"+
		"\3\2\2\u0ed4\u0ed9\5\u0178\u00bd\2\u0ed5\u0ed6\7\26\2\2\u0ed6\u0ed8\5"+
		"\u0178\u00bd\2\u0ed7\u0ed5\3\2\2\2\u0ed8\u0edb\3\2\2\2\u0ed9\u0ed7\3\2"+
		"\2\2\u0ed9\u0eda\3\2\2\2\u0eda\u0edd\3\2\2\2\u0edb\u0ed9\3\2\2\2\u0edc"+
		"\u0ed4\3\2\2\2\u0edc\u0edd\3\2\2\2\u0edd\u0ede\3\2\2\2\u0ede\u0ee0\7\4"+
		"\2\2\u0edf\u0ed3\3\2\2\2\u0edf\u0ee0\3\2\2\2\u0ee0\u0ee5\3\2\2\2\u0ee1"+
		"\u0ee2\7\u0114\2\2\u0ee2\u0ee3\7\u0084\2\2\u0ee3\u0ee5\5\u030e\u0188\2"+
		"\u0ee4\u0ed1\3\2\2\2\u0ee4\u0ee1\3\2\2\2\u0ee5\u0177\3\2\2\2\u0ee6\u0ee9"+
		"\5\u0198\u00cd\2\u0ee7\u0ee8\7*\2\2\u0ee8\u0eea\7\u00af\2\2\u0ee9\u0ee7"+
		"\3\2\2\2\u0ee9\u0eea\3\2\2\2\u0eea\u0179\3\2\2\2\u0eeb\u0f06\5\u024c\u0127"+
		"\2\u0eec\u0eed\7\u00c2\2\2\u0eed\u0f06\7\u00c3\2\2\u0eee\u0f06\5\u017e"+
		"\u00c0\2\u0eef\u0f06\5\u0180\u00c1\2\u0ef0\u0ef1\7\u0201\2\2\u0ef1\u0f06"+
		"\7\u01fd\2\2\u0ef2\u0ef3\7*\2\2\u0ef3\u0ef4\7\u010b\2\2\u0ef4\u0f06\7"+
		"\u00a5\2\2\u0ef5\u0ef6\7}\2\2\u0ef6\u0ef7\5\u02c4\u0163\2\u0ef7\u0ef8"+
		"\7\3\2\2\u0ef8\u0efd\5\u02a0\u0151\2\u0ef9\u0efa\7\26\2\2\u0efa\u0efc"+
		"\5\u02a0\u0151\2\u0efb\u0ef9\3\2\2\2\u0efc\u0eff\3\2\2\2\u0efd\u0efb\3"+
		"\2\2\2\u0efd\u0efe\3\2\2\2\u0efe\u0f00\3\2\2\2\u0eff\u0efd\3\2\2\2\u0f00"+
		"\u0f01\7\4\2\2\u0f01\u0f06\3\2\2\2\u0f02\u0f03\7\u0203\2\2\u0f03\u0f04"+
		"\7\u02a7\2\2\u0f04\u0f06\7\31\2\2\u0f05\u0eeb\3\2\2\2\u0f05\u0eec\3\2"+
		"\2\2\u0f05\u0eee\3\2\2\2\u0f05\u0eef\3\2\2\2\u0f05\u0ef0\3\2\2\2\u0f05"+
		"\u0ef2\3\2\2\2\u0f05\u0ef5\3\2\2\2\u0f05\u0f02\3\2\2\2\u0f06\u017b\3\2"+
		"\2\2\u0f07\u0f22\5\u024e\u0128\2\u0f08\u0f09\7\u00c2\2\2\u0f09\u0f22\7"+
		"\u00c3\2\2\u0f0a\u0f22\5\u017e\u00c0\2\u0f0b\u0f22\5\u0180\u00c1\2\u0f0c"+
		"\u0f0d\7\u0201\2\2\u0f0d\u0f22\7\u01fd\2\2\u0f0e\u0f0f\7*\2\2\u0f0f\u0f10"+
		"\7\u010b\2\2\u0f10\u0f22\7\u00a5\2\2\u0f11\u0f12\7}\2\2\u0f12\u0f13\5"+
		"\u02c4\u0163\2\u0f13\u0f14\7\3\2\2\u0f14\u0f19\5\u02a0\u0151\2\u0f15\u0f16"+
		"\7\26\2\2\u0f16\u0f18\5\u02a0\u0151\2\u0f17\u0f15\3\2\2\2\u0f18\u0f1b"+
		"\3\2\2\2\u0f19\u0f17\3\2\2\2\u0f19\u0f1a\3\2\2\2\u0f1a\u0f1c\3\2\2\2\u0f1b"+
		"\u0f19\3\2\2\2\u0f1c\u0f1d\7\4\2\2\u0f1d\u0f22\3\2\2\2\u0f1e\u0f1f\7\u0203"+
		"\2\2\u0f1f\u0f20\7\u02a7\2\2\u0f20\u0f22\7\31\2\2\u0f21\u0f07\3\2\2\2"+
		"\u0f21\u0f08\3\2\2\2\u0f21\u0f0a\3\2\2\2\u0f21\u0f0b\3\2\2\2\u0f21\u0f0c"+
		"\3\2\2\2\u0f21\u0f0e\3\2\2\2\u0f21\u0f11\3\2\2\2\u0f21\u0f1e\3\2\2\2\u0f22"+
		"\u017d\3\2\2\2\u0f23\u0f26\5\u01b0\u00d9\2\u0f24\u0f26\5\u01b2\u00da\2"+
		"\u0f25\u0f23\3\2\2\2\u0f25\u0f24\3\2\2\2\u0f26\u017f\3\2\2\2\u0f27\u0f2b"+
		"\7\u0085\2\2\u0f28\u0f2c\7\u01f0\2\2\u0f29\u0f2a\7\66\2\2\u0f2a\u0f2c"+
		"\7\\\2\2\u0f2b\u0f28\3\2\2\2\u0f2b\u0f29\3\2\2\2\u0f2c\u0f2f\3\2\2\2\u0f2d"+
		"\u0f30\5\u0182\u00c2\2\u0f2e\u0f30\5\u0186\u00c4\2\u0f2f\u0f2d\3\2\2\2"+
		"\u0f2f\u0f2e\3\2\2\2\u0f30\u0f3b\3\2\2\2\u0f31\u0f33\7\u0085\2\2\u0f32"+
		"\u0f34\7\u01f0\2\2\u0f33\u0f32\3\2\2\2\u0f33\u0f34\3\2\2\2\u0f34\u0f38"+
		"\3\2\2\2\u0f35\u0f39\5\u0188\u00c5\2\u0f36\u0f39\5\u018a\u00c6\2\u0f37"+
		"\u0f39\5\u018c\u00c7\2\u0f38\u0f35\3\2\2\2\u0f38\u0f36\3\2\2\2\u0f38\u0f37"+
		"\3\2\2\2\u0f39\u0f3b\3\2\2\2\u0f3a\u0f27\3\2\2\2\u0f3a\u0f31\3\2\2\2\u0f3b"+
		"\u0181\3\2\2\2\u0f3c\u0f3d\7*\2\2\u0f3d\u0f3e\7\u0200\2\2\u0f3e\u0f3f"+
		"\7\3\2\2\u0f3f\u0f46\5\u0184\u00c3\2\u0f40\u0f42\7\26\2\2\u0f41\u0f40"+
		"\3\2\2\2\u0f41\u0f42\3\2\2\2\u0f42\u0f43\3\2\2\2\u0f43\u0f45\5\u0184\u00c3"+
		"\2\u0f44\u0f41\3\2\2\2\u0f45\u0f48\3\2\2\2\u0f46\u0f44\3\2\2\2\u0f46\u0f47"+
		"\3\2\2\2\u0f47\u0f49\3\2\2\2\u0f48\u0f46\3\2\2\2\u0f49\u0f4a\7\4\2\2\u0f4a"+
		"\u0183\3\2\2\2\u0f4b\u0f4c\7\u020d\2\2\u0f4c\u0f4d\7\u013c\2\2\u0f4d\u0f6c"+
		"\7\31\2\2\u0f4e\u0f4f\7\u01e8\2\2\u0f4f\u0f50\7\66\2\2\u0f50\u0f6c\7\31"+
		"\2\2\u0f51\u0f52\7\u00c0\2\2\u0f52\u0f56\7\u01d3\2\2\u0f53\u0f54\7\u01d3"+
		"\2\2\u0f54\u0f56\7\31\2\2\u0f55\u0f51\3\2\2\2\u0f55\u0f53\3\2\2\2\u0f56"+
		"\u0f6c\3\2\2\2\u0f57\u0f58\7\u00c0\2\2\u0f58\u0f5c\7\u01d2\2\2\u0f59\u0f5a"+
		"\7\u01d2\2\2\u0f5a\u0f5c\7\31\2\2\u0f5b\u0f57\3\2\2\2\u0f5b\u0f59\3\2"+
		"\2\2\u0f5c\u0f6c\3\2\2\2\u0f5d\u0f5f\7\u00c0\2\2\u0f5e\u0f5d\3\2\2\2\u0f5e"+
		"\u0f5f\3\2\2\2\u0f5f\u0f60\3\2\2\2\u0f60\u0f6c\7\u01e7\2\2\u0f61\u0f62"+
		"\7\u00c0\2\2\u0f62\u0f66\7\u01e6\2\2\u0f63\u0f64\7\u01e6\2\2\u0f64\u0f66"+
		"\7\31\2\2\u0f65\u0f61\3\2\2\2\u0f65\u0f63\3\2\2\2\u0f66\u0f6c\3\2\2\2"+
		"\u0f67\u0f69\7\u00c0\2\2\u0f68\u0f67\3\2\2\2\u0f68\u0f69\3\2\2\2\u0f69"+
		"\u0f6a\3\2\2\2\u0f6a\u0f6c\7\u00cf\2\2\u0f6b\u0f4b\3\2\2\2\u0f6b\u0f4e"+
		"\3\2\2\2\u0f6b\u0f55\3\2\2\2\u0f6b\u0f5b\3\2\2\2\u0f6b\u0f5e\3\2\2\2\u0f6b"+
		"\u0f65\3\2\2\2\u0f6b\u0f68\3\2\2\2\u0f6c\u0185\3\2\2\2\u0f6d\u0f6e\7\u0080"+
		"\2\2\u0f6e\u0f6f\7\u01f9\2\2\u0f6f\u0f70\7\u0102\2\2\u0f70\u0f71\7\u00ca"+
		"\2\2\u0f71\u0f72\7\u012c\2\2\u0f72\u0f73\7*\2\2\u0f73\u0f74\7\u0102\2"+
		"\2\u0f74\u0f75\7\u0149\2\2\u0f75\u0f76\7\u02f0\2\2\u0f76\u0187\3\2\2\2"+
		"\u0f77\u0f78\7*\2\2\u0f78\u0f79\7\u020f\2\2\u0f79\u0f7a\7\u020d\2\2\u0f7a"+
		"\u0f7b\7\u01ff\2\2\u0f7b\u0189\3\2\2\2\u0f7c\u0f7d\7*\2\2\u0f7d\u0f7e"+
		"\7\u0102\2\2\u0f7e\u0f7f\t&\2\2\u0f7f\u018b\3\2\2\2\u0f80\u0f81\7*\2\2"+
		"\u0f81\u0f82\7\3\2\2\u0f82\u0f83\5\u018e\u00c8\2\u0f83\u0f84\7\4\2\2\u0f84"+
		"\u018d\3\2\2\2\u0f85\u0f86\7V\2\2\u0f86\u0f87\7\u0149\2\2\u0f87\u0f8b"+
		"\7\u0204\2\2\u0f88\u0f8b\5\u023c\u011f\2\u0f89\u0f8b\5\u0190\u00c9\2\u0f8a"+
		"\u0f85\3\2\2\2\u0f8a\u0f88\3\2\2\2\u0f8a\u0f89\3\2\2\2\u0f8b\u018f\3\2"+
		"\2\2\u0f8c\u0f8d\7\u020e\2\2\u0f8d\u0f8e\7\23\2\2\u0f8e\u0f96\7\u0207"+
		"\2\2\u0f8f\u0f90\7\u020e\2\2\u0f90\u0f91\7\23\2\2\u0f91\u0f96\7\u0208"+
		"\2\2\u0f92\u0f93\7\u020e\2\2\u0f93\u0f94\7\23\2\2\u0f94\u0f96\7\u0209"+
		"\2\2\u0f95\u0f8c\3\2\2\2\u0f95\u0f8f\3\2\2\2\u0f95\u0f92\3\2\2\2\u0f96"+
		"\u0191\3\2\2\2\u0f97\u0f99\5\u02a4\u0153\2\u0f98\u0f9a\5\u0194\u00cb\2"+
		"\u0f99\u0f98\3\2\2\2\u0f9a\u0f9b\3\2\2\2\u0f9b\u0f99\3\2\2\2\u0f9b\u0f9c"+
		"\3\2\2\2\u0f9c\u0193\3\2\2\2\u0f9d\u0f9e\7\u010f\2\2\u0f9e\u0f9f\7V\2"+
		"\2\u0f9f\u0fa0\7\u0127\2\2\u0fa0\u0fa4\5\u0196\u00cc\2\u0fa1\u0fa2\7\u0203"+
		"\2\2\u0fa2\u0fa3\7\u02a7\2\2\u0fa3\u0fa5\7\31\2\2\u0fa4\u0fa1\3\2\2\2"+
		"\u0fa4\u0fa5\3\2\2\2\u0fa5\u0fc3\3\2\2\2\u0fa6\u0fa7\7\u010f\2\2\u0fa7"+
		"\u0fc3\5\u024a\u0126\2\u0fa8\u0fa9\7\u010f\2\2\u0fa9\u0faa\7\u0203\2\2"+
		"\u0faa\u0fab\7\u02a7\2\2\u0fab\u0fc3\7\31\2\2\u0fac\u0fad\7\u010f\2\2"+
		"\u0fad\u0fb1\7\u0085\2\2\u0fae\u0fb2\7\u01f0\2\2\u0faf\u0fb0\7\66\2\2"+
		"\u0fb0\u0fb2\7\\\2\2\u0fb1\u0fae\3\2\2\2\u0fb1\u0faf\3\2\2\2\u0fb2\u0fb4"+
		"\3\2\2\2\u0fb3\u0fb5\5\u01aa\u00d6\2\u0fb4\u0fb3\3\2\2\2\u0fb4\u0fb5\3"+
		"\2\2\2\u0fb5\u0fc3\3\2\2\2\u0fb6\u0fc3\5\u01aa\u00d6\2\u0fb7\u0fb8\7\u010f"+
		"\2\2\u0fb8\u0fba\7\u0085\2\2\u0fb9\u0fbb\7\u01f0\2\2\u0fba\u0fb9\3\2\2"+
		"\2\u0fba\u0fbb\3\2\2\2\u0fbb\u0fbe\3\2\2\2\u0fbc\u0fbf\5\u018a\u00c6\2"+
		"\u0fbd\u0fbf\5\u0188\u00c5\2\u0fbe\u0fbc\3\2\2\2\u0fbe\u0fbd\3\2\2\2\u0fbf"+
		"\u0fc3\3\2\2\2\u0fc0\u0fc1\7f\2\2\u0fc1\u0fc3\7\\\2\2\u0fc2\u0f9d\3\2"+
		"\2\2\u0fc2\u0fa6\3\2\2\2\u0fc2\u0fa8\3\2\2\2\u0fc2\u0fac\3\2\2\2\u0fc2"+
		"\u0fb6\3\2\2\2\u0fc2\u0fb7\3\2\2\2\u0fc2\u0fc0\3\2\2\2\u0fc3\u0195\3\2"+
		"\2\2\u0fc4\u0fc5\5\u0198\u00cd\2\u0fc5\u0197\3\2\2\2\u0fc6\u0fc9\5\u019a"+
		"\u00ce\2\u0fc7\u0fc9\5\u029c\u014f\2\u0fc8\u0fc6\3\2\2\2\u0fc8\u0fc7\3"+
		"\2\2\2\u0fc9\u0199\3\2\2\2\u0fca\u1041\7\u02df\2\2\u0fcb\u1041\7\u02a2"+
		"\2\2\u0fcc\u1041\7\u02a1\2\2\u0fcd\u1041\7\u0255\2\2\u0fce\u0fd2\t\33"+
		"\2\2\u0fcf\u0fd3\5\u0294\u014b\2\u0fd0\u0fd1\7\3\2\2\u0fd1\u0fd3\7\4\2"+
		"\2\u0fd2\u0fcf\3\2\2\2\u0fd2\u0fd0\3\2\2\2\u0fd3\u1041\3\2\2\2\u0fd4\u0fd8"+
		"\7\u0274\2\2\u0fd5\u0fd9\5\u0294\u014b\2\u0fd6\u0fd7\7\3\2\2\u0fd7\u0fd9"+
		"\7\4\2\2\u0fd8\u0fd5\3\2\2\2\u0fd8\u0fd6\3\2\2\2\u0fd9\u1041\3\2\2\2\u0fda"+
		"\u0fde\7\u0290\2\2\u0fdb\u0fdf\5\u0294\u014b\2\u0fdc\u0fdd\7\3\2\2\u0fdd"+
		"\u0fdf\7\4\2\2\u0fde\u0fdb\3\2\2\2\u0fde\u0fdc\3\2\2\2\u0fdf\u1041\3\2"+
		"\2\2\u0fe0\u1041\7\u02ce\2\2\u0fe1\u0fe3\7e\2\2\u0fe2\u0fe4\7\u00de\2"+
		"\2\u0fe3\u0fe2\3\2\2\2\u0fe3\u0fe4\3\2\2\2\u0fe4\u1041\3\2\2\2\u0fe5\u0fe7"+
		"\t\34\2\2\u0fe6\u0fe8\7\u01a1\2\2\u0fe7\u0fe6\3\2\2\2\u0fe7\u0fe8\3\2"+
		"\2\2\u0fe8\u0feb\3\2\2\2\u0fe9\u0feb\7\u0307\2\2\u0fea\u0fe5\3\2\2\2\u0fea"+
		"\u0fe9\3\2\2\2\u0feb\u0fef\3\2\2\2\u0fec\u0ff0\5\u0296\u014c\2\u0fed\u0fee"+
		"\7\3\2\2\u0fee\u0ff0\7\4\2\2\u0fef\u0fec\3\2\2\2\u0fef\u0fed\3\2\2\2\u0fef"+
		"\u0ff0\3\2\2\2\u0ff0\u0ff4\3\2\2\2\u0ff1\u0ff5\5\u029a\u014e\2\u0ff2\u0ff3"+
		"\7<\2\2\u0ff3\u0ff5\7\31\2\2\u0ff4\u0ff1\3\2\2\2\u0ff4\u0ff2\3\2\2\2\u0ff4"+
		"\u0ff5\3\2\2\2\u0ff5\u1041\3\2\2\2\u0ff6\u0ff7\t\34\2\2\u0ff7\u0ff8\7"+
		"\u0163\2\2\u0ff8\u0ffb\7\u0170\2\2\u0ff9\u0ffb\7\u0266\2\2\u0ffa\u0ff6"+
		"\3\2\2\2\u0ffa\u0ff9\3\2\2\2\u0ffb\u0fff\3\2\2\2\u0ffc\u1000\5\u0296\u014c"+
		"\2\u0ffd\u0ffe\7\3\2\2\u0ffe\u1000\7\4\2\2\u0fff\u0ffc\3\2\2\2\u0fff\u0ffd"+
		"\3\2\2\2\u0fff\u1000\3\2\2\2\u1000\u1004\3\2\2\2\u1001\u1005\5\u029a\u014e"+
		"\2\u1002\u1003\7<\2\2\u1003\u1005\7\31\2\2\u1004\u1001\3\2\2\2\u1004\u1002"+
		"\3\2\2\2\u1004\u1005\3\2\2\2\u1005\u1041\3\2\2\2\u1006\u100a\t\35\2\2"+
		"\u1007\u100b\5\u0296\u014c\2\u1008\u1009\7\3\2\2\u1009\u100b\7\4\2\2\u100a"+
		"\u1007\3\2\2\2\u100a\u1008\3\2\2\2\u100a\u100b\3\2\2\2\u100b\u100e\3\2"+
		"\2\2\u100c\u100d\7<\2\2\u100d\u100f\7\31\2\2\u100e\u100c\3\2\2\2\u100e"+
		"\u100f\3\2\2\2\u100f\u1041\3\2\2\2\u1010\u1014\7\u0256\2\2\u1011\u1015"+
		"\5\u0294\u014b\2\u1012\u1013\7\3\2\2\u1013\u1015\7\4\2\2\u1014\u1011\3"+
		"\2\2\2\u1014\u1012\3\2\2\2\u1014\u1015\3\2\2\2\u1015\u1041\3\2\2\2\u1016"+
		"\u1018\7\u0256\2\2\u1017\u1019\7\u01a1\2\2\u1018\u1017\3\2\2\2\u1018\u1019"+
		"\3\2\2\2\u1019\u101c\3\2\2\2\u101a\u101c\7\u0306\2\2\u101b\u1016\3\2\2"+
		"\2\u101b\u101a\3\2\2\2\u101c\u1020\3\2\2\2\u101d\u1021\5\u0294\u014b\2"+
		"\u101e\u101f\7\3\2\2\u101f\u1021\7\4\2\2\u1020\u101d\3\2\2\2\u1020\u101e"+
		"\3\2\2\2\u1020\u1021\3\2\2\2\u1021\u1041\3\2\2\2\u1022\u1023\7\u0256\2"+
		"\2\u1023\u1024\7\u0163\2\2\u1024\u1027\7\u0170\2\2\u1025\u1027\7\u025c"+
		"\2\2\u1026\u1022\3\2\2\2\u1026\u1025\3\2\2\2\u1027\u102b\3\2\2\2\u1028"+
		"\u1029\7\3\2\2\u1029\u102a\t\'\2\2\u102a\u102c\7\4\2\2\u102b\u1028\3\2"+
		"\2\2\u102b\u102c\3\2\2\2\u102c\u1041\3\2\2\2\u102d\u1041\7\u026c\2\2\u102e"+
		"\u1041\7\u02ef\2\2\u102f\u1031\7\u02f0\2\2\u1030\u1032\5\u0294\u014b\2"+
		"\u1031\u1030\3\2\2\2\u1031\u1032\3\2\2\2\u1032\u1036\3\2\2\2\u1033\u1034"+
		"\t\b\2\2\u1034\u1035\7\u02ef\2\2\u1035\u1037\7\u0143\2\2\u1036\u1033\3"+
		"\2\2\2\u1036\u1037\3\2\2\2\u1037\u1041\3\2\2\2\u1038\u1041\7\u02d8\2\2"+
		"\u1039\u103e\7\u01a3\2\2\u103a\u103b\7\3\2\2\u103b\u103c\5\u019e\u00d0"+
		"\2\u103c\u103d\7\4\2\2\u103d\u103f\3\2\2\2\u103e\u103a\3\2\2\2\u103e\u103f"+
		"\3\2\2\2\u103f\u1041\3\2\2\2\u1040\u0fca\3\2\2\2\u1040\u0fcb\3\2\2\2\u1040"+
		"\u0fcc\3\2\2\2\u1040\u0fcd\3\2\2\2\u1040\u0fce\3\2\2\2\u1040\u0fd4\3\2"+
		"\2\2\u1040\u0fda\3\2\2\2\u1040\u0fe0\3\2\2\2\u1040\u0fe1\3\2\2\2\u1040"+
		"\u0fea\3\2\2\2\u1040\u0ffa\3\2\2\2\u1040\u1006\3\2\2\2\u1040\u1010\3\2"+
		"\2\2\u1040\u101b\3\2\2\2\u1040\u1026\3\2\2\2\u1040\u102d\3\2\2\2\u1040"+
		"\u102e\3\2\2\2\u1040\u102f\3\2\2\2\u1040\u1038\3\2\2\2\u1040\u1039\3\2"+
		"\2\2\u1041\u019b\3\2\2\2\u1042\u1043\7\u0307\2\2\u1043\u1044\7\3\2\2\u1044"+
		"\u1045\7\31\2\2\u1045\u1054\7\4\2\2\u1046\u104a\7\u0274\2\2\u1047\u1048"+
		"\7\3\2\2\u1048\u1049\7\31\2\2\u1049\u104b\7\4\2\2\u104a\u1047\3\2\2\2"+
		"\u104a\u104b\3\2\2\2\u104b\u1054\3\2\2\2\u104c\u1054\7\u026c\2\2\u104d"+
		"\u1051\7\u02f0\2\2\u104e\u104f\7\3\2\2\u104f\u1050\7\31\2\2\u1050\u1052"+
		"\7\4\2\2\u1051\u104e\3\2\2\2\u1051\u1052\3\2\2\2\u1052\u1054\3\2\2\2\u1053"+
		"\u1042\3\2\2\2\u1053\u1046\3\2\2\2\u1053\u104c\3\2\2\2\u1053\u104d\3\2"+
		"\2\2\u1054\u019d\3\2\2\2\u1055\u1056\7\u0210\2\2\u1056\u1059\5\u01a0\u00d1"+
		"\2\u1057\u1058\7\u0211\2\2\u1058\u105a\5\u01a2\u00d2\2\u1059\u1057\3\2"+
		"\2\2\u1059\u105a\3\2\2\2\u105a\u1063\3\2\2\2\u105b\u105c\7\26\2\2\u105c"+
		"\u105f\5\u01a0\u00d1\2\u105d\u105e\7\u0211\2\2\u105e\u1060\5\u01a2\u00d2"+
		"\2\u105f\u105d\3\2\2\2\u105f\u1060\3\2\2\2\u1060\u1062\3\2\2\2\u1061\u105b"+
		"\3\2\2\2\u1062\u1065\3\2\2\2\u1063\u1061\3\2\2\2\u1063\u1064\3\2\2\2\u1064"+
		"\u019f\3\2\2\2\u1065\u1063\3\2\2\2\u1066\u1067\7\u01ff\2\2\u1067\u1073"+
		"\5\u01a4\u00d3\2\u1068\u1069\7\u0212\2\2\u1069\u106d\5\u01a6\u00d4\2\u106a"+
		"\u106b\7\u00c0\2\2\u106b\u106d\7\u0213\2\2\u106c\u1068\3\2\2\2\u106c\u106a"+
		"\3\2\2\2\u106d\u1070\3\2\2\2\u106e\u106f\7\u0214\2\2\u106f\u1071\5\u01a8"+
		"\u00d5\2\u1070\u106e\3\2\2\2\u1070\u1071\3\2\2\2\u1071\u1073\3\2\2\2\u1072"+
		"\u1066\3\2\2\2\u1072\u106c\3\2\2\2\u1073\u01a1\3\2\2\2\u1074\u1075\5\u037a"+
		"\u01be\2\u1075\u01a3\3\2\2\2\u1076\u1077\7\u0215\2\2\u1077\u1078\7\23"+
		"\2\2\u1078\u1079\7\u0350\2\2\u1079\u01a5\3\2\2\2\u107a\u107b\7\30\2\2"+
		"\u107b\u01a7\3\2\2\2\u107c\u107d\7\30\2\2\u107d\u01a9\3\2\2\2\u107e\u1081"+
		"\7\u01e9\2\2\u107f\u1080\7\u013c\2\2\u1080\u1082\7\31\2\2\u1081\u107f"+
		"\3\2\2\2\u1081\u1082\3\2\2\2\u1082\u10a7\3\2\2\2\u1083\u1084\7\u010f\2"+
		"\2\u1084\u1085\7\u01e8\2\2\u1085\u1086\7\66\2\2\u1086\u10a7\7\31\2\2\u1087"+
		"\u108c\7\u010f\2\2\u1088\u1089\7\u00c0\2\2\u1089\u108d\7\u01d3\2\2\u108a"+
		"\u108b\7\u01d3\2\2\u108b\u108d\7\31\2\2\u108c\u1088\3\2\2\2\u108c\u108a"+
		"\3\2\2\2\u108d\u10a7\3\2\2\2\u108e\u1093\7\u010f\2\2\u108f\u1090\7\u00c0"+
		"\2\2\u1090\u1094\7\u01d2\2\2\u1091\u1092\7\u01d2\2\2\u1092\u1094\7\31"+
		"\2\2\u1093\u108f\3\2\2\2\u1093\u1091\3\2\2\2\u1094\u10a7\3\2\2\2\u1095"+
		"\u1097\7\u010f\2\2\u1096\u1098\7\u00c0\2\2\u1097\u1096\3\2\2\2\u1097\u1098"+
		"\3\2\2\2\u1098\u1099\3\2\2\2\u1099\u10a7\7\u01e7\2\2\u109a\u109f\7\u010f"+
		"\2\2\u109b\u109c\7\u00c0\2\2\u109c\u10a0\7\u01e6\2\2\u109d\u109e\7\u01e6"+
		"\2\2\u109e\u10a0\7\31\2\2\u109f\u109b\3\2\2\2\u109f\u109d\3\2\2\2\u10a0"+
		"\u10a7\3\2\2\2\u10a1\u10a3\7\u010f\2\2\u10a2\u10a4\7\u00c0\2\2\u10a3\u10a2"+
		"\3\2\2\2\u10a3\u10a4\3\2\2\2\u10a4\u10a5\3\2\2\2\u10a5\u10a7\7\u00cf\2"+
		"\2\u10a6\u107e\3\2\2\2\u10a6\u1083\3\2\2\2\u10a6\u1087\3\2\2\2\u10a6\u108e"+
		"\3\2\2\2\u10a6\u1095\3\2\2\2\u10a6\u109a\3\2\2\2\u10a6\u10a1\3\2\2\2\u10a7"+
		"\u01ab\3\2\2\2\u10a8\u10a9\7L\2\2\u10a9\u10ab\5\u02d0\u0169\2\u10aa\u10a8"+
		"\3\2\2\2\u10aa\u10ab\3\2\2\2\u10ab\u10af\3\2\2\2\u10ac\u10ad\7\u020a\2"+
		"\2\u10ad\u10b0\7\u00a4\2\2\u10ae\u10b0\7\u012a\2\2\u10af\u10ac\3\2\2\2"+
		"\u10af\u10ae\3\2\2\2\u10b0\u10b1\3\2\2\2\u10b1\u10b2\7\3\2\2\u10b2\u10b7"+
		"\5\u02a4\u0153\2\u10b3\u10b4\7\26\2\2\u10b4\u10b6\5\u02a4\u0153\2\u10b5"+
		"\u10b3\3\2\2\2\u10b6\u10b9\3\2\2\2\u10b7\u10b5\3\2\2\2\u10b7\u10b8\3\2"+
		"\2\2\u10b8\u10be\3\2\2\2\u10b9\u10b7\3\2\2\2\u10ba\u10bb\7\26\2\2\u10bb"+
		"\u10bc\7\u01a9\2";
	private static final String _serializedATNSegment2 =
		"\2\u10bc\u10bd\7\u01a2\2\2\u10bd\u10bf\7\u0206\2\2\u10be\u10ba\3\2\2\2"+
		"\u10be\u10bf\3\2\2\2\u10bf\u10c0\3\2\2\2\u10c0\u10c1\7\4\2\2\u10c1\u01ad"+
		"\3\2\2\2\u10c2\u10c3\7L\2\2\u10c3\u10c4\5\u02d0\u0169\2\u10c4\u10c5\7"+
		"\u01fc\2\2\u10c5\u10c6\7\u00a4\2\2\u10c6\u10cd\3\2\2\2\u10c7\u10c8\7\u01fc"+
		"\2\2\u10c8\u10ca\7\u00a4\2\2\u10c9\u10cb\5\u02d0\u0169\2\u10ca\u10c9\3"+
		"\2\2\2\u10ca\u10cb\3\2\2\2\u10cb\u10cd\3\2\2\2\u10cc\u10c2\3\2\2\2\u10cc"+
		"\u10c7\3\2\2\2\u10cd\u10ce\3\2\2\2\u10ce\u10cf\7\3\2\2\u10cf\u10d3\5\u02a4"+
		"\u0153\2\u10d0\u10d1\7\u00db\2\2\u10d1\u10d2\7\u01f3\2\2\u10d2\u10d4\7"+
		"\u02ef\2\2\u10d3\u10d0\3\2\2\2\u10d3\u10d4\3\2\2\2\u10d4\u10de\3\2\2\2"+
		"\u10d5\u10d6\7\26\2\2\u10d6\u10da\5\u02a4\u0153\2\u10d7\u10d8\7\u00db"+
		"\2\2\u10d8\u10d9\7\u01f3\2\2\u10d9\u10db\7\u02ef\2\2\u10da\u10d7\3\2\2"+
		"\2\u10da\u10db\3\2\2\2\u10db\u10dd\3\2\2\2\u10dc\u10d5\3\2\2\2\u10dd\u10e0"+
		"\3\2\2\2\u10de\u10dc\3\2\2\2\u10de\u10df\3\2\2\2\u10df\u10e1\3\2\2\2\u10e0"+
		"\u10de\3\2\2\2\u10e1\u10e2\7\4\2\2\u10e2\u10e3\5\u01b0\u00d9\2\u10e3\u01af"+
		"\3\2\2\2\u10e4\u10e5\7\u00eb\2\2\u10e5\u10e6\5\u02b6\u015c\2\u10e6\u10e7"+
		"\7\3\2\2\u10e7\u10eb\5\u02a4\u0153\2\u10e8\u10e9\7\u00db\2\2\u10e9\u10ea"+
		"\7\u01f3\2\2\u10ea\u10ec\7\u02ef\2\2\u10eb\u10e8\3\2\2\2\u10eb\u10ec\3"+
		"\2\2\2\u10ec\u10f6\3\2\2\2\u10ed\u10ee\7\26\2\2\u10ee\u10f2\5\u02a4\u0153"+
		"\2\u10ef\u10f0\7\u00db\2\2\u10f0\u10f1\7\u01f3\2\2\u10f1\u10f3\7\u02ef"+
		"\2\2\u10f2\u10ef\3\2\2\2\u10f2\u10f3\3\2\2\2\u10f3\u10f5\3\2\2\2\u10f4"+
		"\u10ed\3\2\2\2\u10f5\u10f8\3\2\2\2\u10f6\u10f4\3\2\2\2\u10f6\u10f7\3\2"+
		"\2\2\u10f7\u10f9\3\2\2\2\u10f8\u10f6\3\2\2\2\u10f9\u1104\7\4\2\2\u10fa"+
		"\u10fb\7\u00ca\2\2\u10fb\u1102\7]\2\2\u10fc\u1103\7\u00f1\2\2\u10fd\u10fe"+
		"\7\u00c0\2\2\u10fe\u1103\7\u01b1\2\2\u10ff\u1103\7\u01f4\2\2\u1100\u1101"+
		"\7\u010f\2\2\u1101\u1103\7\u00c3\2\2\u1102\u10fc\3\2\2\2\u1102\u10fd\3"+
		"\2\2\2\u1102\u10ff\3\2\2\2\u1102\u1100\3\2\2\2\u1103\u1105\3\2\2\2\u1104"+
		"\u10fa\3\2\2\2\u1104\u1105\3\2\2\2\u1105\u1107\3\2\2\2\u1106\u1108\7\u00c2"+
		"\2\2\u1107\u1106\3\2\2\2\u1107\u1108\3\2\2\2\u1108\u1109\3\2\2\2\u1109"+
		"\u110d\7\u01fa\2\2\u110a\u110b\7\u01d7\2\2\u110b\u110c\7\u00e8\2\2\u110c"+
		"\u110e\7\u00cc\2\2\u110d\u110a\3\2\2\2\u110d\u110e\3\2\2\2\u110e\u01b1"+
		"\3\2\2\2\u110f\u1110\7L\2\2\u1110\u1112\5\u02d0\u0169\2\u1111\u110f\3"+
		"\2\2\2\u1111\u1112\3\2\2\2\u1112\u1113\3\2\2\2\u1113\u1114\7?\2\2\u1114"+
		"\u1115\7\3\2\2\u1115\u1116\5\u0270\u0139\2\u1116\u1117\7\4\2\2\u1117\u01b3"+
		"\3\2\2\2\u1118\u111a\7\u017a\2\2\u1119\u1118\3\2\2\2\u1119\u111a\3\2\2"+
		"\2\u111a\u111b\3\2\2\2\u111b\u111c\7\3\2\2\u111c\u1121\5\u01b6\u00dc\2"+
		"\u111d\u111e\7\26\2\2\u111e\u1120\5\u01b6\u00dc\2\u111f\u111d\3\2\2\2"+
		"\u1120\u1123\3\2\2\2\u1121\u111f\3\2\2\2\u1121\u1122\3\2\2\2\u1122\u1124"+
		"\3\2\2\2\u1123\u1121\3\2\2\2\u1124\u1125\7\4\2\2\u1125\u1126\7\3\2\2\u1126"+
		"\u112b\5\u01c0\u00e1\2\u1127\u1128\7\26\2\2\u1128\u112a\5\u01c0\u00e1"+
		"\2\u1129\u1127\3\2\2\2\u112a\u112d\3\2\2\2\u112b\u1129\3\2\2\2\u112b\u112c"+
		"\3\2\2\2\u112c\u112e\3\2\2\2\u112d\u112b\3\2\2\2\u112e\u112f\7\4\2\2\u112f"+
		"\u01b5\3\2\2\2\u1130\u1133\5\u02a4\u0153\2\u1131\u1132\7\u00c4\2\2\u1132"+
		"\u1134\7\u00a7\2\2\u1133\u1131\3\2\2\2\u1133\u1134\3\2\2\2\u1134\u1135"+
		"\3\2\2\2\u1135\u1136\t(\2\2\u1136\u01b7\3\2\2\2\u1137\u1138\t)\2\2\u1138"+
		"\u01b9\3\2\2\2\u1139\u113b\7p\2\2\u113a\u113c\7.\2\2\u113b\u113a\3\2\2"+
		"\2\u113b\u113c\3\2\2\2\u113c\u113d\3\2\2\2\u113d\u113e\7\3\2\2\u113e\u1143"+
		"\5\u01b8\u00dd\2\u113f\u1140\7\26\2\2\u1140\u1142\5\u01b8\u00dd\2\u1141"+
		"\u113f\3\2\2\2\u1142\u1145\3\2\2\2\u1143\u1141\3\2\2\2\u1143\u1144\3\2"+
		"\2\2\u1144\u1146\3\2\2\2\u1145\u1143\3\2\2\2\u1146\u1148\7\4\2\2\u1147"+
		"\u1149\7\u0094\2\2\u1148\u1147\3\2\2\2\u1148\u1149\3\2\2\2\u1149\u01bb"+
		"\3\2\2\2\u114a\u114b\7\u0298\2\2\u114b\u114c\7\u02e5\2\2\u114c\u114d\7"+
		"\u0350\2\2\u114d\u01bd\3\2\2\2\u114e\u114f\7 \2\2\u114f\u1150\7\u0205"+
		"\2\2\u1150\u1151\7\66\2\2\u1151\u1152\7\u0298\2\2\u1152\u1153\7\u012a"+
		"\2\2\u1153\u1154\7\3\2\2\u1154\u1159\5\u02a4\u0153\2\u1155\u1156\7\26"+
		"\2\2\u1156\u1158\5\u02a4\u0153\2\u1157\u1155\3\2\2\2\u1158\u115b\3\2\2"+
		"\2\u1159\u1157\3\2\2\2\u1159\u115a\3\2\2\2\u115a\u115c\3\2\2\2\u115b\u1159"+
		"\3\2\2\2\u115c\u115d\7\4\2\2\u115d\u115e\7\u0298\2\2\u115e\u115f\7\u02e5"+
		"\2\2\u115f\u1160\7\u0350\2\2\u1160\u1168\3\2\2\2\u1161\u1162\7%\2\2\u1162"+
		"\u1163\7\u00d0\2\2\u1163\u1164\7\u010f\2\2\u1164\u1165\7\u0298\2\2\u1165"+
		"\u1166\7\u02e5\2\2\u1166\u1168\7\u0350\2\2\u1167\u114e\3\2\2\2\u1167\u1161"+
		"\3\2\2\2\u1168\u01bf\3\2\2\2\u1169\u116a\7\u00d7\2\2\u116a\u116b\7\31"+
		"\2\2\u116b\u116d\5\u01ba\u00de\2\u116c\u116e\5\u01bc\u00df\2\u116d\u116c"+
		"\3\2\2\2\u116d\u116e\3\2\2\2\u116e\u01c1\3\2\2\2\u116f\u1172\5\u01ba\u00de"+
		"\2\u1170\u1172\5\u01bc\u00df\2\u1171\u116f\3\2\2\2\u1171\u1170\3\2\2\2"+
		"\u1172\u01c3\3\2\2\2\u1173\u1174\5\u01ba\u00de\2\u1174\u1175\7\u020b\2"+
		"\2\u1175\u01c5\3\2\2\2\u1176\u1177\7\u00ca\2\2\u1177\u1178\7]\2\2\u1178"+
		"\u1179\7 \2\2\u1179\u117a\7\u01fb\2\2\u117a\u117b\7\u0102\2\2\u117b\u01c7"+
		"\3\2\2\2\u117c\u117d\7\3\2\2\u117d\u117e\5\u036e\u01b8\2\u117e\u117f\7"+
		"\4\2\2\u117f\u1180\5\u01cc\u00e7\2\u1180\u01c9\3\2\2\2\u1181\u1183\7\u010f"+
		"\2\2\u1182\u1184\5\u01ce\u00e8\2\u1183\u1182\3\2\2\2\u1184\u1185\3\2\2"+
		"\2\u1185\u1183\3\2\2\2\u1185\u1186\3\2\2\2\u1186\u01cb\3\2\2\2\u1187\u1188"+
		"\7V\2\2\u1188\u1189\7\u0202\2\2\u1189\u118a\7\u01f8\2\2\u118a\u118b\7"+
		"\u00ec\2\2\u118b\u118f\7\u01f8\2\2\u118c\u118e\5\u01ce\u00e8\2\u118d\u118c"+
		"\3\2\2\2\u118e\u1191\3\2\2\2\u118f\u118d\3\2\2\2\u118f\u1190\3\2\2\2\u1190"+
		"\u01cd\3\2\2\2\u1191\u118f\3\2\2\2\u1192\u1193\7\u00b6\2\2\u1193\u1194"+
		"\7\66\2\2\u1194\u119a\t*\2\2\u1195\u1196\5\u011c\u008f\2\u1196\u1197\7"+
		"\u00e8\2\2\u1197\u1198\7\u00cc\2\2\u1198\u119a\3\2\2\2\u1199\u1192\3\2"+
		"\2\2\u1199\u1195\3\2\2\2\u119a\u01cf\3\2\2\2\u119b\u119d\7\u010f\2\2\u119c"+
		"\u119e\5\u01ce\u00e8\2\u119d\u119c\3\2\2\2\u119e\u119f\3\2\2\2\u119f\u119d"+
		"\3\2\2\2\u119f\u11a0\3\2\2\2\u11a0\u01d1\3\2\2\2\u11a1\u11a2\7\u01a8\2"+
		"\2\u11a2\u11a3\7\3\2\2\u11a3\u11a4\5\u02ac\u0157\2\u11a4\u11a5\7\26\2"+
		"\2\u11a5\u11a6\5\u02ae\u0158\2\u11a6\u11a7\7\4\2\2\u11a7\u11b1\3\2\2\2"+
		"\u11a8\u11a9\7\u01a9\2\2\u11a9\u11aa\7\3\2\2\u11aa\u11ab\5\u02ac\u0157"+
		"\2\u11ab\u11ac\7\26\2\2\u11ac\u11ad\5\u02ae\u0158\2\u11ad\u11ae\t+\2\2"+
		"\u11ae\u11af\7\4\2\2\u11af\u11b1\3\2\2\2\u11b0\u11a1\3\2\2\2\u11b0\u11a8"+
		"\3\2\2\2\u11b1\u01d3\3\2\2\2\u11b2\u11b3\5\u02a4\u0153\2\u11b3\u11b7\5"+
		"\u019a\u00ce\2\u11b4\u11b6\5\u017a\u00be\2\u11b5\u11b4\3\2\2\2\u11b6\u11b9"+
		"\3\2\2\2\u11b7\u11b5\3\2\2\2\u11b7\u11b8\3\2\2\2\u11b8\u11c3\3\2\2\2\u11b9"+
		"\u11b7\3\2\2\2\u11ba\u11bb\5\u02a4\u0153\2\u11bb\u11bf\5\u029c\u014f\2"+
		"\u11bc\u11be\5\u017c\u00bf\2\u11bd\u11bc\3\2\2\2\u11be\u11c1\3\2\2\2\u11bf"+
		"\u11bd\3\2\2\2\u11bf\u11c0\3\2\2\2\u11c0\u11c3\3\2\2\2\u11c1\u11bf\3\2"+
		"\2\2\u11c2\u11b2\3\2\2\2\u11c2\u11ba\3\2\2\2\u11c3\u01d5\3\2\2\2\u11c4"+
		"\u11c7\5\u037a\u01be\2\u11c5\u11c7\7\30\2\2\u11c6\u11c4\3\2\2\2\u11c6"+
		"\u11c5\3\2\2\2\u11c7\u01d7\3\2\2\2\u11c8\u11d3\5\u01da\u00ee\2\u11c9\u11d3"+
		"\7\u0345\2\2\u11ca\u11d3\7\u0346\2\2\u11cb\u11cc\7R\2\2\u11cc\u11cd\7"+
		"\u00d3\2\2\u11cd\u11d3\7\u00da\2\2\u11ce\u11cf\7R\2\2\u11cf\u11d3\7\u00da"+
		"\2\2\u11d0\u11d3\5\u0310\u0189\2\u11d1\u11d3\7\30\2\2\u11d2\u11c8\3\2"+
		"\2\2\u11d2\u11c9\3\2\2\2\u11d2\u11ca\3\2\2\2\u11d2\u11cb\3\2\2\2\u11d2"+
		"\u11ce\3\2\2\2\u11d2\u11d0\3\2\2\2\u11d2\u11d1\3\2\2\2\u11d3\u01d9\3\2"+
		"\2\2\u11d4\u11d5\5\u037a\u01be\2\u11d5\u01db\3\2\2\2\u11d6\u11d7\7\30"+
		"\2\2\u11d7\u01dd\3\2\2\2\u11d8\u11d9\t,\2\2\u11d9\u01df\3\2\2\2\u11da"+
		"\u11db\t-\2\2\u11db\u01e1\3\2\2\2\u11dc\u120f\5\u01ea\u00f6\2\u11dd\u11de"+
		"\7\3\2\2\u11de\u11df\5\u01e2\u00f2\2\u11df\u11e0\7\4\2\2\u11e0\u120f\3"+
		"\2\2\2\u11e1\u120f\5\u02a0\u0151\2\u11e2\u120f\5\u02a4\u0153\2\u11e3\u120f"+
		"\5\u0310\u0189\2\u11e4\u120f\5\u023c\u011f\2\u11e5\u120f\5\u036c\u01b7"+
		"\2\u11e6\u120f\5\u0262\u0132\2\u11e7\u120f\5\u01f4\u00fb\2\u11e8\u120f"+
		"\5\u0266\u0134\2\u11e9\u120f\5\u028c\u0147\2\u11ea\u120f\5\u01f6\u00fc"+
		"\2\u11eb\u120f\5\u01f8\u00fd\2\u11ec\u120f\5\u01fc\u00ff\2\u11ed\u120f"+
		"\5\u01fe\u0100\2\u11ee\u120f\5\u01e6\u00f4\2\u11ef\u120f\5\u01e8\u00f5"+
		"\2\u11f0\u1205\5\u01ea\u00f6\2\u11f1\u11f2\7\3\2\2\u11f2\u11f3\5\u01e2"+
		"\u00f2\2\u11f3\u11f4\7\4\2\2\u11f4\u1205\3\2\2\2\u11f5\u1205\5\u02a0\u0151"+
		"\2\u11f6\u1205\5\u02a4\u0153\2\u11f7\u1205\5\u0310\u0189\2\u11f8\u1205"+
		"\5\u023c\u011f\2\u11f9\u1205\5\u036c\u01b7\2\u11fa\u1205\5\u0262\u0132"+
		"\2\u11fb\u1205\5\u01f4\u00fb\2\u11fc\u1205\5\u0266\u0134\2\u11fd\u1205"+
		"\5\u028c\u0147\2\u11fe\u1205\5\u01f6\u00fc\2\u11ff\u1205\5\u01f8\u00fd"+
		"\2\u1200\u1205\5\u01fc\u00ff\2\u1201\u1205\5\u01fe\u0100\2\u1202\u1205"+
		"\5\u01e6\u00f4\2\u1203\u1205\5\u01e8\u00f5\2\u1204\u11f0\3\2\2\2\u1204"+
		"\u11f1\3\2\2\2\u1204\u11f5\3\2\2\2\u1204\u11f6\3\2\2\2\u1204\u11f7\3\2"+
		"\2\2\u1204\u11f8\3\2\2\2\u1204\u11f9\3\2\2\2\u1204\u11fa\3\2\2\2\u1204"+
		"\u11fb\3\2\2\2\u1204\u11fc\3\2\2\2\u1204\u11fd\3\2\2\2\u1204\u11fe\3\2"+
		"\2\2\u1204\u11ff\3\2\2\2\u1204\u1200\3\2\2\2\u1204\u1201\3\2\2\2\u1204"+
		"\u1202\3\2\2\2\u1204\u1203\3\2\2\2\u1205\u120b\3\2\2\2\u1206\u1207\5\u01e0"+
		"\u00f1\2\u1207\u1208\5\u01e2\u00f2\2\u1208\u120a\3\2\2\2\u1209\u1206\3"+
		"\2\2\2\u120a\u120d\3\2\2\2\u120b\u1209\3\2\2\2\u120b\u120c\3\2\2\2\u120c"+
		"\u120f\3\2\2\2\u120d\u120b\3\2\2\2\u120e\u11dc\3\2\2\2\u120e\u11dd\3\2"+
		"\2\2\u120e\u11e1\3\2\2\2\u120e\u11e2\3\2\2\2\u120e\u11e3\3\2\2\2\u120e"+
		"\u11e4\3\2\2\2\u120e\u11e5\3\2\2\2\u120e\u11e6\3\2\2\2\u120e\u11e7\3\2"+
		"\2\2\u120e\u11e8\3\2\2\2\u120e\u11e9\3\2\2\2\u120e\u11ea\3\2\2\2\u120e"+
		"\u11eb\3\2\2\2\u120e\u11ec\3\2\2\2\u120e\u11ed\3\2\2\2\u120e\u11ee\3\2"+
		"\2\2\u120e\u11ef\3\2\2\2\u120e\u1204\3\2\2\2\u120f\u01e3\3\2\2\2\u1210"+
		"\u1211\5\u01e2\u00f2\2\u1211\u01e5\3\2\2\2\u1212\u1213\7\u0102\2\2\u1213"+
		"\u1214\7\u0149\2\2\u1214\u1215\t.\2\2\u1215\u1216\7\u0080\2\2\u1216\u1217"+
		"\5\u02b6\u015c\2\u1217\u01e7\3\2\2\2\u1218\u1219\t/\2\2\u1219\u121a\7"+
		"\u012f\2\2\u121a\u121b\7\u0080\2\2\u121b\u121c\5\u02b6\u015c\2\u121c\u01e9"+
		"\3\2\2\2\u121d\u1222\5\u01ec\u00f7\2\u121e\u1222\5\u01ee\u00f8\2\u121f"+
		"\u1222\5\u01f0\u00f9\2\u1220\u1222\5\u01f2\u00fa\2\u1221\u121d\3\2\2\2"+
		"\u1221\u121e\3\2\2\2\u1221\u121f\3\2\2\2\u1221\u1220\3\2\2\2\u1222\u01eb"+
		"\3\2\2\2\u1223\u1224\5\u02b4\u015b\2\u1224\u1225\7\23\2\2\u1225\u1227"+
		"\3\2\2\2\u1226\u1223\3\2\2\2\u1226\u1227\3\2\2\2\u1227\u1228\3\2\2\2\u1228"+
		"\u1229\5\u0238\u011d\2\u1229\u122a\7\3\2\2\u122a\u122f\5\u01e2\u00f2\2"+
		"\u122b\u122c\7\26\2\2\u122c\u122e\5\u01e2\u00f2\2\u122d\u122b\3\2\2\2"+
		"\u122e\u1231\3\2\2\2\u122f\u122d\3\2\2\2\u122f\u1230\3\2\2\2\u1230\u1232"+
		"\3\2\2\2\u1231\u122f\3\2\2\2\u1232\u1233\7\4\2\2\u1233\u01ed\3\2\2\2\u1234"+
		"\u1235\5\u02b4\u015b\2\u1235\u1236\7\23\2\2\u1236\u1238\3\2\2\2\u1237"+
		"\u1234\3\2\2\2\u1237\u1238\3\2\2\2\u1238\u1239\3\2\2\2\u1239\u123a\5\u0214"+
		"\u010b\2\u123a\u123c\7\3\2\2\u123b\u123d\7b\2\2\u123c\u123b\3\2\2\2\u123c"+
		"\u123d\3\2\2\2\u123d\u1240\3\2\2\2\u123e\u1241\5\u01e2\u00f2\2\u123f\u1241"+
		"\7\20\2\2\u1240\u123e\3\2\2\2\u1240\u123f\3\2\2\2\u1241\u1242\3\2\2\2"+
		"\u1242\u1243\7\4\2\2\u1243\u01ef\3\2\2\2\u1244\u1245\5\u02b4\u015b\2\u1245"+
		"\u1246\7\23\2\2\u1246\u1248\3\2\2\2\u1247\u1244\3\2\2\2\u1247\u1248\3"+
		"\2\2\2\u1248\u1249\3\2\2\2\u1249\u124a\5\u0216\u010c\2\u124a\u124b\7\3"+
		"\2\2\u124b\u124c\5\u01e2\u00f2\2\u124c\u124d\7\26\2\2\u124d\u124e\5\u01e2"+
		"\u00f2\2\u124e\u124f\7\4\2\2\u124f\u01f1\3\2\2\2\u1250\u1251\5\u02b4\u015b"+
		"\2\u1251\u1252\7\23\2\2\u1252\u1254\3\2\2\2\u1253\u1250\3\2\2\2\u1253"+
		"\u1254\3\2\2\2\u1254\u1255\3\2\2\2\u1255\u1256\7\u0350\2\2\u1256\u1257"+
		"\7\3\2\2\u1257\u125c\5\u01e2\u00f2\2\u1258\u1259\7\26\2\2\u1259\u125b"+
		"\5\u01e2\u00f2\2\u125a\u1258\3\2\2\2\u125b\u125e\3\2\2\2\u125c\u125a\3"+
		"\2\2\2\u125c\u125d\3\2\2\2\u125d\u125f\3\2\2\2\u125e\u125c\3\2\2\2\u125f"+
		"\u1260\7\4\2\2\u1260\u01f3\3\2\2\2\u1261\u126a\5\u01ea\u00f6\2\u1262\u1263"+
		"\7\3\2\2\u1263\u1264\5\u01e2\u00f2\2\u1264\u1265\7\4\2\2\u1265\u126a\3"+
		"\2\2\2\u1266\u126a\7\31\2\2\u1267\u126a\5\u02a4\u0153\2\u1268\u126a\5"+
		"\u0316\u018c\2\u1269\u1261\3\2\2\2\u1269\u1262\3\2\2\2\u1269\u1266\3\2"+
		"\2\2\u1269\u1267\3\2\2\2\u1269\u1268\3\2\2\2\u126a\u126b\3\2\2\2\u126b"+
		"\u126c\t\60\2\2\u126c\u01f5\3\2\2\2\u126d\u1271\7\u013e\2\2\u126e\u1272"+
		"\5\u01e2\u00f2\2\u126f\u1272\7\u00c3\2\2\u1270\u1272\5\u028e\u0148\2\u1271"+
		"\u126e\3\2\2\2\u1271\u126f\3\2\2\2\u1271\u1270\3\2\2\2\u1272\u1273\3\2"+
		"\2\2\u1273\u1274\7*\2\2\u1274\u1275\5\u0198\u00cd\2\u1275\u01f7\3\2\2"+
		"\2\u1276\u1277\5\u028a\u0146\2\u1277\u1278\7\5\2\2\u1278\u1279\5\u01fa"+
		"\u00fe\2\u1279\u127a\7\6\2\2\u127a\u01f9\3\2\2\2\u127b\u1282\5\u01e2\u00f2"+
		"\2\u127c\u127e\5\u01e0\u00f1\2\u127d\u127c\3\2\2\2\u127d\u127e\3\2\2\2"+
		"\u127e\u127f\3\2\2\2\u127f\u1281\5\u01e2\u00f2\2\u1280\u127d\3\2\2\2\u1281"+
		"\u1284\3\2\2\2\u1282\u1280\3\2\2\2\u1282\u1283\3\2\2\2\u1283\u01fb\3\2"+
		"\2\2\u1284\u1282\3\2\2\2\u1285\u1286\7(\2\2\u1286\u1297\7\5\2\2\u1287"+
		"\u1298\7\7\2\2\u1288\u1298\5\u036e\u01b8\2\u1289\u128c\5\u01e2\u00f2\2"+
		"\u128a\u128c\7\u00c3\2\2\u128b\u1289\3\2\2\2\u128b\u128a\3\2\2\2\u128c"+
		"\u1294\3\2\2\2\u128d\u1290\7\26\2\2\u128e\u1291\5\u01e2\u00f2\2\u128f"+
		"\u1291\7\u00c3\2\2\u1290\u128e\3\2\2\2\u1290\u128f\3\2\2\2\u1291\u1293"+
		"\3\2\2\2\u1292\u128d\3\2\2\2\u1293\u1296\3\2\2\2\u1294\u1292\3\2\2\2\u1294"+
		"\u1295\3\2\2\2\u1295\u1298\3\2\2\2\u1296\u1294\3\2\2\2\u1297\u1287\3\2"+
		"\2\2\u1297\u1288\3\2\2\2\u1297\u128b\3\2\2\2\u1298\u1299\3\2\2\2\u1299"+
		"\u129a\7\6\2\2\u129a\u01fd\3\2\2\2\u129b\u129f\5\u0200\u0101\2\u129c\u129f"+
		"\5\u0210\u0109\2\u129d\u129f\5\u0212\u010a\2\u129e\u129b\3\2\2\2\u129e"+
		"\u129c\3\2\2\2\u129e\u129d\3\2\2\2\u129f\u01ff\3\2\2\2\u12a0\u12a1\5\u0202"+
		"\u0102\2\u12a1\u12a2\7\u0173\2\2\u12a2\u12a4\7\3\2\2\u12a3\u12a5\5\u020a"+
		"\u0106\2\u12a4\u12a3\3\2\2\2\u12a4\u12a5\3\2\2\2\u12a5\u12a6\3\2\2\2\u12a6"+
		"\u12a7\5\u020c\u0107\2\u12a7\u12a8\7\4\2\2\u12a8\u0201\3\2\2\2\u12a9\u12aa"+
		"\7\u0156\2\2\u12aa\u12ab\7\3\2\2\u12ab\u12bd\7\4\2\2\u12ac\u12ad\7\u0177"+
		"\2\2\u12ad\u12ae\7\3\2\2\u12ae\u12bd\7\4\2\2\u12af\u12b0\7\u017b\2\2\u12b0"+
		"\u12b1\7\3\2\2\u12b1\u12bd\7\4\2\2\u12b2\u12b3\7\u0157\2\2\u12b3\u12b4"+
		"\7\3\2\2\u12b4\u12bd\7\4\2\2\u12b5\u12b6\7\u016e\2\2\u12b6\u12b7\7\3\2"+
		"\2\u12b7\u12b8\5\u01e2\u00f2\2\u12b8\u12b9\7\4\2\2\u12b9\u12bd\3\2\2\2"+
		"\u12ba\u12bd\5\u0204\u0103\2\u12bb\u12bd\5\u0206\u0104\2\u12bc\u12a9\3"+
		"\2\2\2\u12bc\u12ac\3\2\2\2\u12bc\u12af\3\2\2\2\u12bc\u12b2\3\2\2\2\u12bc"+
		"\u12b5\3\2\2\2\u12bc\u12ba\3\2\2\2\u12bc\u12bb\3\2\2\2\u12bd\u0203\3\2"+
		"\2\2\u12be\u12bf\7\u0162\2\2\u12bf\u12c0\7\3\2\2\u12c0\u12c1\5\u01e2\u00f2"+
		"\2\u12c1\u12c2\7\26\2\2\u12c2\u12ce\7\31\2\2\u12c3\u12c4\7\26\2\2\u12c4"+
		"\u12cc\5\u01e2\u00f2\2\u12c5\u12ca\7\26\2\2\u12c6\u12c7\7\u0189\2\2\u12c7"+
		"\u12cb\7\u00c4\2\2\u12c8\u12c9\7\u015e\2\2\u12c9\u12cb\7\u00c4\2\2\u12ca"+
		"\u12c6\3\2\2\2\u12ca\u12c8\3\2\2\2\u12cb\u12cd\3\2\2\2\u12cc\u12c5\3\2"+
		"\2\2\u12cc\u12cd\3\2\2\2\u12cd\u12cf\3\2\2\2\u12ce\u12c3\3\2\2\2\u12ce"+
		"\u12cf\3\2\2\2\u12cf\u12d0\3\2\2\2\u12d0\u12d1\7\4\2\2\u12d1\u0205\3\2"+
		"\2\2\u12d2\u12d3\7\u0165\2\2\u12d3\u12d4\7\3\2\2\u12d4\u12d5\5\u01e2\u00f2"+
		"\2\u12d5\u12d6\7\26\2\2\u12d6\u12dd\7\31\2\2\u12d7\u12d8\7\26\2\2\u12d8"+
		"\u12db\5\u01e2\u00f2\2\u12d9\u12da\7\26\2\2\u12da\u12dc\5\u0208\u0105"+
		"\2\u12db\u12d9\3\2\2\2\u12db\u12dc\3\2\2\2\u12dc\u12de\3\2\2\2\u12dd\u12d7"+
		"\3\2\2\2\u12dd\u12de\3\2\2\2\u12de\u12df\3\2\2\2\u12df\u12e0\7\4\2\2\u12e0"+
		"\u0207\3\2\2\2\u12e1\u12e2\7\u0189\2\2\u12e2\u12e6\7\u00c4\2\2\u12e3\u12e4"+
		"\7\u015e\2\2\u12e4\u12e6\7\u00c4\2\2\u12e5\u12e1\3\2\2\2\u12e5\u12e3\3"+
		"\2\2\2\u12e6\u0209\3\2\2\2\u12e7\u12e8\7\u00d7\2\2\u12e8\u12e9\7\66\2"+
		"\2\u12e9\u12ee\5\u01e2\u00f2\2\u12ea\u12eb\7\26\2\2\u12eb\u12ed\5\u01e2"+
		"\u00f2\2\u12ec\u12ea\3\2\2\2\u12ed\u12f0\3\2\2\2\u12ee\u12ec\3\2\2\2\u12ee"+
		"\u12ef\3\2\2\2\u12ef\u020b\3\2\2\2\u12f0\u12ee\3\2\2\2\u12f1\u12f2\7\u00cf"+
		"\2\2\u12f2\u12f3\7\66\2\2\u12f3\u12f5\5\u01e2\u00f2\2\u12f4\u12f6\5\u020e"+
		"\u0108\2\u12f5\u12f4\3\2\2\2\u12f5\u12f6\3\2\2\2\u12f6\u12fe\3\2\2\2\u12f7"+
		"\u12f8\7\26\2\2\u12f8\u12fa\5\u01e2\u00f2\2\u12f9\u12fb\5\u020e\u0108"+
		"\2\u12fa\u12f9\3\2\2\2\u12fa\u12fb\3\2\2\2\u12fb\u12fd\3\2\2\2\u12fc\u12f7"+
		"\3\2\2\2\u12fd\u1300\3\2\2\2\u12fe\u12fc\3\2\2\2\u12fe\u12ff\3\2\2\2\u12ff"+
		"\u020d\3\2\2\2\u1300\u12fe\3\2\2\2\u1301\u1304\t(\2\2\u1302\u1303\7\u00c4"+
		"\2\2\u1303\u1305\t\61\2\2\u1304\u1302\3\2\2\2\u1304\u1305\3\2\2\2\u1305"+
		"\u020f\3\2\2\2\u1306\u1307\7\u018a\2\2\u1307\u1308\7\3\2\2\u1308\u1309"+
		"\7\4\2\2\u1309\u130a\7\u0173\2\2\u130a\u130c\7\3\2\2\u130b\u130d\5\u020a"+
		"\u0106\2\u130c\u130b\3\2\2\2\u130c\u130d\3\2\2\2\u130d\u130f\3\2\2\2\u130e"+
		"\u1310\5\u020c\u0107\2\u130f\u130e\3\2\2\2\u130f\u1310\3\2\2\2\u1310\u1311"+
		"\3\2\2\2\u1311\u1312\7\4\2\2\u1312\u0211\3\2\2\2\u1313\u1316\5\u01ee\u00f8"+
		"\2\u1314\u1316\5\u0218\u010d\2\u1315\u1313\3\2\2\2\u1315\u1314\3\2\2\2"+
		"\u1316\u1317\3\2\2\2\u1317\u1318\7\u0173\2\2\u1318\u131a\7\3\2\2\u1319"+
		"\u131b\5\u020a\u0106\2\u131a\u1319\3\2\2\2\u131a\u131b\3\2\2\2\u131b\u132e"+
		"\3\2\2\2\u131c\u131d\7\u017a\2\2\u131d\u131e\7\64\2\2\u131e\u131f\7\u0198"+
		"\2\2\u131f\u1320\7\u0178\2\2\u1320\u1321\7\u0144\2\2\u1321\u1322\7\u0198"+
		"\2\2\u1322\u132f\7\u015c\2\2\u1323\u132c\5\u020c\u0107\2\u1324\u1325\7"+
		"\u017a\2\2\u1325\u1326\7\64\2\2\u1326\u1327\7\u0198\2\2\u1327\u1328\7"+
		"\u0178\2\2\u1328\u1329\7\u0144\2\2\u1329\u132a\7R\2\2\u132a\u132d\7\u0102"+
		"\2\2\u132b\u132d\5\u0222\u0112\2\u132c\u1324\3\2\2\2\u132c\u132b\3\2\2"+
		"\2\u132c\u132d\3\2\2\2\u132d\u132f\3\2\2\2\u132e\u131c\3\2\2\2\u132e\u1323"+
		"\3\2\2\2\u132e\u132f\3\2\2\2\u132f\u1330\3\2\2\2\u1330\u1331\7\4\2\2\u1331"+
		"\u0213\3\2\2\2\u1332\u1333\t\62\2\2\u1333\u0215\3\2\2\2\u1334\u1335\t"+
		"\63\2\2\u1335\u0217\3\2\2\2\u1336\u133b\5\u021a\u010e\2\u1337\u133b\5"+
		"\u021c\u010f\2\u1338\u133b\5\u021e\u0110\2\u1339\u133b\5\u0220\u0111\2"+
		"\u133a\u1336\3\2\2\2\u133a\u1337\3\2\2\2\u133a\u1338\3\2\2\2\u133a\u1339"+
		"\3\2\2\2\u133b\u0219\3\2\2\2\u133c\u133d\7\u015b\2\2\u133d\u133e\7\3\2"+
		"\2\u133e\u1341\5\u01e2\u00f2\2\u133f\u1340\7\26\2\2\u1340\u1342\5\u0208"+
		"\u0105\2\u1341\u133f\3\2\2\2\u1341\u1342\3\2\2\2\u1342\u1343\3\2\2\2\u1343"+
		"\u1344\7\4\2\2\u1344\u021b\3\2\2\2\u1345\u1346\7\u0164\2\2\u1346\u1347"+
		"\7\3\2\2\u1347\u134a\5\u01e2\u00f2\2\u1348\u1349\7\26\2\2\u1349\u134b"+
		"\5\u0208\u0105\2\u134a\u1348\3\2\2\2\u134a\u134b\3\2\2\2\u134b\u134c\3"+
		"\2\2\2\u134c\u134d\7\4\2\2\u134d\u021d\3\2\2\2\u134e\u134f\7\u016d\2\2"+
		"\u134f\u1350\7\3\2\2\u1350\u1351\5\u01e2\u00f2\2\u1351\u1352\7\26\2\2"+
		"\u1352\u1353\7\31\2\2\u1353\u1354\7\4\2\2\u1354\u021f\3\2\2\2\u1355\u1356"+
		"\7\u017c\2\2\u1356\u1357\7\3\2\2\u1357\u1358\5\u01e2\u00f2\2\u1358\u1359"+
		"\7\4\2\2\u1359\u0221\3\2\2\2\u135a\u135e\t\64\2\2\u135b\u135f\5\u0224"+
		"\u0113\2\u135c\u135f\5\u0226\u0114\2\u135d\u135f\5\u0228\u0115\2\u135e"+
		"\u135b\3\2\2\2\u135e\u135c\3\2\2\2\u135e\u135d\3\2\2\2\u135f\u0223\3\2"+
		"\2\2\u1360\u1364\5\u022e\u0118\2\u1361\u1364\5\u0232\u011a\2\u1362\u1364"+
		"\5\u0236\u011c\2\u1363\u1360\3\2\2\2\u1363\u1361\3\2\2\2\u1363\u1362\3"+
		"\2\2\2\u1364\u0225\3\2\2\2\u1365\u1366\7\64\2\2\u1366\u1367\5\u022a\u0116"+
		"\2\u1367\u1368\7\u0144\2\2\u1368\u1369\5\u022c\u0117\2\u1369\u0227\3\2"+
		"\2\2\u136a\u136d\5\u0230\u0119\2\u136b\u136d\5\u0234\u011b\2\u136c\u136a"+
		"\3\2\2\2\u136c\u136b\3\2\2\2\u136d\u0229\3\2\2\2\u136e\u1373\5\u022e\u0118"+
		"\2\u136f\u1373\5\u0232\u011a\2\u1370\u1373\5\u0234\u011b\2\u1371\u1373"+
		"\5\u0236\u011c\2\u1372\u136e\3\2\2\2\u1372\u136f\3\2\2\2\u1372\u1370\3"+
		"\2\2\2\u1372\u1371\3\2\2\2\u1373\u022b\3\2\2\2\u1374\u1379\5\u0230\u0119"+
		"\2\u1375\u1379\5\u0232\u011a\2\u1376\u1379\5\u0234\u011b\2\u1377\u1379"+
		"\5\u0236\u011c\2\u1378\u1374\3\2\2\2\u1378\u1375\3\2\2\2\u1378\u1376\3"+
		"\2\2\2\u1378\u1377\3\2\2\2\u1379\u022d\3\2\2\2\u137a\u137b\7\u0198\2\2"+
		"\u137b\u137c\7\u0178\2\2\u137c\u022f\3\2\2\2\u137d\u137e\7\u0198\2\2\u137e"+
		"\u137f\7\u015c\2\2\u137f\u0231\3\2\2\2\u1380\u1381\7\31\2\2\u1381\u1382"+
		"\7\u0178\2\2\u1382\u0233\3\2\2\2\u1383\u1384\7\31\2\2\u1384\u1385\7\u015c"+
		"\2\2\u1385\u0235\3\2\2\2\u1386\u1387\7R\2\2\u1387\u1388\7\u0102\2\2\u1388"+
		"\u0237\3\2\2\2\u1389\u138a\t\65\2\2\u138a\u0239\3\2\2\2\u138b\u138c\t"+
		"\66\2\2\u138c\u023b\3\2\2\2\u138d\u138e\t\67\2\2\u138e\u023d\3\2\2\2\u138f"+
		"\u1390\7\u034f\2\2\u1390\u1394\7\3\2\2\u1391\u1392\5\u0258\u012d\2\u1392"+
		"\u1393\7\26\2\2\u1393\u1395\3\2\2\2\u1394\u1391\3\2\2\2\u1394\u1395\3"+
		"\2\2\2\u1395\u1396\3\2\2\2\u1396\u13a0\5\u0240\u0121\2\u1397\u139a\7\u0174"+
		"\2\2\u1398\u1399\7\66\2\2\u1399\u139b\7\u017e\2\2\u139a\u1398\3\2\2\2"+
		"\u139a\u139b\3\2\2\2\u139b\u139c\3\2\2\2\u139c\u139d\5\u0242\u0122\2\u139d"+
		"\u139e\7\26\2\2\u139e\u139f\5\u0242\u0122\2\u139f\u13a1\3\2\2\2\u13a0"+
		"\u1397\3\2\2\2\u13a0\u13a1\3\2\2\2\u13a1\u13b1\3\2\2\2\u13a2\u13a5\7\u01a5"+
		"\2\2\u13a3\u13a6\5\u0248\u0125\2\u13a4\u13a6\5\u0256\u012c\2\u13a5\u13a3"+
		"\3\2\2\2\u13a5\u13a4\3\2\2\2\u13a6\u13ae\3\2\2\2\u13a7\u13aa\7\26\2\2"+
		"\u13a8\u13ab\5\u0248\u0125\2\u13a9\u13ab\5\u0256\u012c\2\u13aa\u13a8\3"+
		"\2\2\2\u13aa\u13a9\3\2\2\2\u13ab\u13ad\3\2\2\2\u13ac\u13a7\3\2\2\2\u13ad"+
		"\u13b0\3\2\2\2\u13ae\u13ac\3\2\2\2\u13ae\u13af\3\2\2\2\u13af\u13b2\3\2"+
		"\2\2\u13b0\u13ae\3\2\2\2\u13b1\u13a2\3\2\2\2\u13b1\u13b2\3\2\2\2\u13b2"+
		"\u13b3\3\2\2\2\u13b3\u13b4\7\4\2\2\u13b4\u023f\3\2\2\2\u13b5\u13b6\7\30"+
		"\2\2\u13b6\u0241\3\2\2\2\u13b7\u13bd\5\u0244\u0123\2\u13b8\u13b9\5\u0246"+
		"\u0124\2\u13b9\u13ba\7*\2\2\u13ba\u13bb\5\u037a\u01be\2\u13bb\u13bd\3"+
		"\2\2\2\u13bc\u13b7\3\2\2\2\u13bc\u13b8\3\2\2\2\u13bd\u0243\3\2\2\2\u13be"+
		"\u13bf\5\u01e2\u00f2\2\u13bf\u0245\3\2\2\2\u13c0\u13c1\5\u01e2\u00f2\2"+
		"\u13c1\u0247\3\2\2\2\u13c2\u13c3\5\u02a4\u0153\2\u13c3\u13c7\5\u0198\u00cd"+
		"\2\u13c4\u13c8\5\u024a\u0126\2\u13c5\u13c6\7\u00da\2\2\u13c6\u13c8\5\u0254"+
		"\u012b\2\u13c7\u13c4\3\2\2\2\u13c7\u13c5\3\2\2\2\u13c7\u13c8\3\2\2\2\u13c8"+
		"\u0249\3\2\2\2\u13c9\u13cb\7\u013c\2\2\u13ca\u13c9\3\2\2\2\u13ca\u13cb"+
		"\3\2\2\2\u13cb\u13cc\3\2\2\2\u13cc\u13d3\7\\\2\2\u13cd\u13d4\5\u0250\u0129"+
		"\2\u13ce\u13cf\5\u0252\u012a\2\u13cf\u13d0\7\3\2\2\u13d0\u13d1\5\u0250"+
		"\u0129\2\u13d1\u13d2\7\4\2\2\u13d2\u13d4\3\2\2\2\u13d3\u13cd\3\2\2\2\u13d3"+
		"\u13ce\3\2\2\2\u13d4\u024b\3\2\2\2\u13d5\u13d7\7\u013c\2\2\u13d6\u13d5"+
		"\3\2\2\2\u13d6\u13d7\3\2\2\2\u13d7\u13d8\3\2\2\2\u13d8\u13d9\7\\\2\2\u13d9"+
		"\u13da\5\u0250\u0129\2\u13da\u024d\3\2\2\2\u13db\u13dd\7\u013c\2\2\u13dc"+
		"\u13db\3\2\2\2\u13dc\u13dd\3\2\2\2\u13dd\u13de\3\2\2\2\u13de\u13e5\7\\"+
		"\2\2\u13df\u13e6\5\u0250\u0129\2\u13e0\u13e1\5\u0252\u012a\2\u13e1\u13e2"+
		"\7\3\2\2\u13e2\u13e3\5\u0250\u0129\2\u13e3\u13e4\7\4\2\2\u13e4\u13e6\3"+
		"\2\2\2\u13e5\u13df\3\2\2\2\u13e5\u13e0\3\2\2\2\u13e6\u024f\3\2\2\2\u13e7"+
		"\u13ed\5\u02a0\u0151\2\u13e8\u13ed\7\u0345\2\2\u13e9\u13ed\7\u0346\2\2"+
		"\u13ea\u13ed\7\u033d\2\2\u13eb\u13ed\7\u00c3\2\2\u13ec\u13e7\3\2\2\2\u13ec"+
		"\u13e8\3\2\2\2\u13ec\u13e9\3\2\2\2\u13ec\u13ea\3\2\2\2\u13ec\u13eb\3\2"+
		"\2\2\u13ed\u0251\3\2\2\2\u13ee\u13ef\5\u037a\u01be\2\u13ef\u13f0\7\23"+
		"\2\2\u13f0\u13f1\5\u037a\u01be\2\u13f1\u0253\3\2\2\2\u13f2\u13f3\7\30"+
		"\2\2\u13f3\u0255\3\2\2\2\u13f4\u13f5\5\u02a4\u0153\2\u13f5\u13f6\7\u0080"+
		"\2\2\u13f6\u13f7\7\u01a7\2\2\u13f7\u0257\3\2\2\2\u13f8\u13fd\5\u025a\u012e"+
		"\2\u13f9\u13fa\7\26\2\2\u13fa\u13fc\5\u025a\u012e\2\u13fb\u13f9\3\2\2"+
		"\2\u13fc\u13ff\3\2\2\2\u13fd\u13fb\3\2\2\2\u13fd\u13fe\3\2\2\2\u13fe\u0259"+
		"\3\2\2\2\u13ff\u13fd\3\2\2\2\u1400\u1401\7\u0140\2\2\u1401\u1402\7\3\2"+
		"\2\u1402\u1407\5\u025c\u012f\2\u1403\u1404\7\26\2\2\u1404\u1406\5\u025c"+
		"\u012f\2\u1405\u1403\3\2\2\2\u1406\u1409\3\2\2\2\u1407\u1405\3\2\2\2\u1407"+
		"\u1408\3\2\2\2\u1408\u140a\3\2\2\2\u1409\u1407\3\2\2\2\u140a\u140b\7\4"+
		"\2\2\u140b\u025b\3\2\2\2\u140c\u140d\5\u025e\u0130\2\u140d\u140e\7*\2"+
		"\2\u140e\u140f\5\u0260\u0131\2\u140f\u1415\3\2\2\2\u1410\u1411\7\\\2\2"+
		"\u1411\u1415\5\u025e\u0130\2\u1412\u1413\7\u00c0\2\2\u1413\u1415\7\\\2"+
		"\2\u1414\u140c\3\2\2\2\u1414\u1410\3\2\2\2\u1414\u1412\3\2\2\2\u1415\u025d"+
		"\3\2\2\2\u1416\u1417\7\30\2\2\u1417\u025f\3\2\2\2\u1418\u1419\7\30\2\2"+
		"\u1419\u0261\3\2\2\2\u141a\u1421\5\u0264\u0133\2\u141b\u141c\7.\2\2\u141c"+
		"\u1422\7\u00ad\2\2\u141d\u141e\7.\2\2\u141e\u141f\7\u02ef\2\2\u141f\u1420"+
		"\7\u0143\2\2\u1420\u1422\5\u0264\u0133\2\u1421\u141b\3\2\2\2\u1421\u141d"+
		"\3\2\2\2\u1422\u0263\3\2\2\2\u1423\u142c\5\u01ea\u00f6\2\u1424\u142c\5"+
		"\u02a0\u0151\2\u1425\u142c\5\u02a4\u0153\2\u1426\u142c\5\u0310\u0189\2"+
		"\u1427\u142c\5\u023c\u011f\2\u1428\u142c\5\u036c\u01b7\2\u1429\u142c\5"+
		"\u0266\u0134\2\u142a\u142c\5\u028c\u0147\2\u142b\u1423\3\2\2\2\u142b\u1424"+
		"\3\2\2\2\u142b\u1425\3\2\2\2\u142b\u1426\3\2\2\2\u142b\u1427\3\2\2\2\u142b"+
		"\u1428\3\2\2\2\u142b\u1429\3\2\2\2\u142b\u142a\3\2\2\2\u142c\u0265\3\2"+
		"\2\2\u142d\u1430\7:\2\2\u142e\u1431\5\u026a\u0136\2\u142f\u1431\5\u026c"+
		"\u0137\2\u1430\u142e\3\2\2\2\u1430\u142f\3\2\2\2\u1431\u1432\3\2\2\2\u1432"+
		"\u1430\3\2\2\2\u1432\u1433\3\2\2\2\u1433\u1438\3\2\2\2\u1434\u1435\7j"+
		"\2\2\u1435\u1439\7\u00c3\2\2\u1436\u1437\7j\2\2\u1437\u1439\5\u0268\u0135"+
		"\2\u1438\u1434\3\2\2\2\u1438\u1436\3\2\2\2\u1439\u143a\3\2\2\2\u143a\u143b"+
		"\7n\2\2\u143b\u0267\3\2\2\2\u143c\u143d\5\u01e2\u00f2\2\u143d\u0269\3"+
		"\2\2\2\u143e\u143f\7\u0138\2\2\u143f\u1440\5\u026e\u0138\2\u1440\u1443"+
		"\7\u0123\2\2\u1441\u1444\5\u0268\u0135\2\u1442\u1444\7\u00c3\2\2\u1443"+
		"\u1441\3\2\2\2\u1443\u1442\3\2\2\2\u1444\u026b\3\2\2\2\u1445\u1446\5\u01e2"+
		"\u00f2\2\u1446\u1447\7\u0138\2\2\u1447\u1448\5\u01e2\u00f2\2\u1448\u144b"+
		"\7\u0123\2\2\u1449\u144c\5\u0268\u0135\2\u144a\u144c\7\u00c3\2\2\u144b"+
		"\u1449\3\2\2\2\u144b\u144a\3\2\2\2\u144c\u026d\3\2\2\2\u144d\u144f\7\u00c2"+
		"\2\2\u144e\u144d\3\2\2\2\u144e\u144f\3\2\2\2\u144f\u1459\3\2\2\2\u1450"+
		"\u1453\5\u0272\u013a\2\u1451\u1452\7\u018f\2\2\u1452\u1454\7\32\2\2\u1453"+
		"\u1451\3\2\2\2\u1453\u1454\3\2\2\2\u1454\u145a\3\2\2\2\u1455\u1456\7\3"+
		"\2\2\u1456\u1457\5\u026e\u0138\2\u1457\u1458\7\4\2\2\u1458\u145a\3\2\2"+
		"\2\u1459\u1450\3\2\2\2\u1459\u1455\3\2\2\2\u145a\u1468\3\2\2\2\u145b\u145d"+
		"\t8\2\2\u145c\u145e\7\u00c2\2\2\u145d\u145c\3\2\2\2\u145d\u145e\3\2\2"+
		"\2\u145e\u1464\3\2\2\2\u145f\u1465\5\u0272\u013a\2\u1460\u1461\7\3\2\2"+
		"\u1461\u1462\5\u026e\u0138\2\u1462\u1463\7\4\2\2\u1463\u1465\3\2\2\2\u1464"+
		"\u145f\3\2\2\2\u1464\u1460\3\2\2\2\u1465\u1467\3\2\2\2\u1466\u145b\3\2"+
		"\2\2\u1467\u146a\3\2\2\2\u1468\u1466\3\2\2\2\u1468\u1469\3\2\2\2\u1469"+
		"\u026f\3\2\2\2\u146a\u1468\3\2\2\2\u146b\u146c\5\u026e\u0138\2\u146c\u0271"+
		"\3\2\2\2\u146d\u1478\5\u0274\u013b\2\u146e\u1478\5\u0278\u013d\2\u146f"+
		"\u1478\5\u027a\u013e\2\u1470\u1478\5\u027c\u013f\2\u1471\u1478\5\u027e"+
		"\u0140\2\u1472\u1478\5\u0280\u0141\2\u1473\u1478\5\u0282\u0142\2\u1474"+
		"\u1478\5\u0284\u0143\2\u1475\u1478\5\u0286\u0144\2\u1476\u1478\5\u0288"+
		"\u0145\2\u1477\u146d\3\2\2\2\u1477\u146e\3\2\2\2\u1477\u146f\3\2\2\2\u1477"+
		"\u1470\3\2\2\2\u1477\u1471\3\2\2\2\u1477\u1472\3\2\2\2\u1477\u1473\3\2"+
		"\2\2\u1477\u1474\3\2\2\2\u1477\u1475\3\2\2\2\u1477\u1476\3\2\2\2\u1478"+
		"\u0273\3\2\2\2\u1479\u147a\5\u01e2\u00f2\2\u147a\u147b\5\u01de\u00f0\2"+
		"\u147b\u147c\5\u01e2\u00f2\2\u147c\u1482\3\2\2\2\u147d\u147e\5\u0276\u013c"+
		"\2\u147e\u147f\5\u01de\u00f0\2\u147f\u1480\5\u0276\u013c\2\u1480\u1482"+
		"\3\2\2\2\u1481\u1479\3\2\2\2\u1481\u147d\3\2\2\2\u1482\u0275\3\2\2\2\u1483"+
		"\u1484\7\3\2\2\u1484\u1489\5\u01e2\u00f2\2\u1485\u1486\7\26\2\2\u1486"+
		"\u1488\5\u01e2\u00f2\2\u1487\u1485\3\2\2\2\u1488\u148b\3\2\2\2\u1489\u1487"+
		"\3\2\2\2\u1489\u148a\3\2\2\2\u148a\u148c\3\2\2\2\u148b\u1489\3\2\2\2\u148c"+
		"\u148d\7\4\2\2\u148d\u0277\3\2\2\2\u148e\u148f\5\u01e2\u00f2\2\u148f\u1490"+
		"\5\u01de\u00f0\2\u1490\u1491\t9\2\2\u1491\u1492\7\3\2\2\u1492\u1493\5"+
		"\u036e\u01b8\2\u1493\u1494\7\4\2\2\u1494\u14a4\3\2\2\2\u1495\u1496\5\u0276"+
		"\u013c\2\u1496\u1497\7\b\2\2\u1497\u1498\t:\2\2\u1498\u1499\7\3\2\2\u1499"+
		"\u149a\5\u036e\u01b8\2\u149a\u149b\7\4\2\2\u149b\u14a4\3\2\2\2\u149c\u149d"+
		"\5\u0276\u013c\2\u149d\u149e\7\r\2\2\u149e\u149f\7\"\2\2\u149f\u14a0\7"+
		"\3\2\2\u14a0\u14a1\5\u036e\u01b8\2\u14a1\u14a2\7\4\2\2\u14a2\u14a4\3\2"+
		"\2\2\u14a3\u148e\3\2\2\2\u14a3\u1495\3\2\2\2\u14a3\u149c\3\2\2\2\u14a4"+
		"\u0279\3\2\2\2\u14a5\u14a6\7)\2\2\u14a6\u14a7\7\3\2\2\u14a7\u14a8\5\u028a"+
		"\u0146\2\u14a8\u14a9\7\31\2\2\u14a9\u14aa\7\4\2\2\u14aa\u027b\3\2\2\2"+
		"\u14ab\u14ad\5\u01e2\u00f2\2\u14ac\u14ae\7\u00c2\2\2\u14ad\u14ac\3\2\2"+
		"\2\u14ad\u14ae\3\2\2\2\u14ae\u14af\3\2\2\2\u14af\u14b0\7\64\2\2\u14b0"+
		"\u14b1\5\u01e2\u00f2\2\u14b1\u14b2\7\u0144\2\2\u14b2\u14b3\5\u01e2\u00f2"+
		"\2\u14b3\u027d\3\2\2\2\u14b4\u14b5\5\u01e2\u00f2\2\u14b5\u14b7\7\u009e"+
		"\2\2\u14b6\u14b8\7\u00c2\2\2\u14b7\u14b6\3\2\2\2\u14b7\u14b8\3\2\2\2\u14b8"+
		"\u14b9\3\2\2\2\u14b9\u14ba\7b\2\2\u14ba\u14bb\7\u0082\2\2\u14bb\u14bc"+
		"\5\u01e2\u00f2\2\u14bc\u027f\3\2\2\2\u14bd\u14be\7w\2\2\u14be\u14bf\7"+
		"\3\2\2\u14bf\u14c0\5\u036e\u01b8\2\u14c0\u14c1\7\4\2\2\u14c1\u0281\3\2"+
		"\2\2\u14c2\u14c4\5\u01e2\u00f2\2\u14c3\u14c5\7\u00c2\2\2\u14c4\u14c3\3"+
		"\2\2\2\u14c4\u14c5\3\2\2\2\u14c5\u14c6\3\2\2\2\u14c6\u14d6\7\u0093\2\2"+
		"\u14c7\u14c8\7\3\2\2\u14c8\u14c9\5\u036e\u01b8\2\u14c9\u14ca\7\4\2\2\u14ca"+
		"\u14d7\3\2\2\2\u14cb\u14cc\7\3\2\2\u14cc\u14d1\5\u01e2\u00f2\2\u14cd\u14ce"+
		"\7\26\2\2\u14ce\u14d0\5\u01e2\u00f2\2\u14cf\u14cd\3\2\2\2\u14d0\u14d3"+
		"\3\2\2\2\u14d1\u14cf\3\2\2\2\u14d1\u14d2\3\2\2\2\u14d2\u14d4\3\2\2\2\u14d3"+
		"\u14d1\3\2\2\2\u14d4\u14d5\7\4\2\2\u14d5\u14d7\3\2\2\2\u14d6\u14c7\3\2"+
		"\2\2\u14d6\u14cb\3\2\2\2\u14d7\u0283\3\2\2\2\u14d8\u14da\5\u01e2\u00f2"+
		"\2\u14d9\u14db\7\u00c2\2\2\u14da\u14d9\3\2\2\2\u14da\u14db\3\2\2\2\u14db"+
		"\u14dc\3\2\2\2\u14dc\u14dd\7\u00ab\2\2\u14dd\u14e0\5\u01e2\u00f2\2\u14de"+
		"\u14df\7r\2\2\u14df\u14e1\5\u01e2\u00f2\2\u14e0\u14de\3\2\2\2\u14e0\u14e1"+
		"\3\2\2\2\u14e1\u0285\3\2\2\2\u14e2\u14ea\5\u01e2\u00f2\2\u14e3\u14e5\7"+
		"\u009e\2\2\u14e4\u14e6\7\u00c2\2\2\u14e5\u14e4\3\2\2\2\u14e5\u14e6\3\2"+
		"\2\2\u14e6\u14e7\3\2\2\2\u14e7\u14eb\7\u00c3\2\2\u14e8\u14eb\7\u0161\2"+
		"\2\u14e9\u14eb\7\u016c\2\2\u14ea\u14e3\3\2\2\2\u14ea\u14e8\3\2\2\2\u14ea"+
		"\u14e9\3\2\2\2\u14eb\u0287\3\2\2\2\u14ec\u14ed\7\u013f\2\2\u14ed\u14ee"+
		"\7\3\2\2\u14ee\u14fc\7\30\2\2\u14ef\u14f2\7\u0174\2\2\u14f0\u14f1\7\66"+
		"\2\2\u14f1\u14f3\7\u017e\2\2\u14f2\u14f0\3\2\2\2\u14f2\u14f3\3\2\2\2\u14f3"+
		"\u14f4\3\2\2\2\u14f4\u14f9\5\u01e2\u00f2\2\u14f5\u14f6\7\26\2\2\u14f6"+
		"\u14f8\5\u01e2\u00f2\2\u14f7\u14f5\3\2\2\2\u14f8\u14fb\3\2\2\2\u14f9\u14f7"+
		"\3\2\2\2\u14f9\u14fa\3\2\2\2\u14fa\u14fd\3\2\2\2\u14fb\u14f9\3\2\2\2\u14fc"+
		"\u14ef\3\2\2\2\u14fc\u14fd\3\2\2\2\u14fd\u14fe\3\2\2\2\u14fe\u14ff\7\4"+
		"\2\2\u14ff\u0289\3\2\2\2\u1500\u1503\5\u0316\u018c\2\u1501\u1503\5\u028c"+
		"\u0147\2\u1502\u1500\3\2\2\2\u1502\u1501\3\2\2\2\u1503\u028b\3\2\2\2\u1504"+
		"\u1505\7;\2\2\u1505\u1509\7\3\2\2\u1506\u150a\5\u01e2\u00f2\2\u1507\u150a"+
		"\7\u00c3\2\2\u1508\u150a\5\u028e\u0148\2\u1509\u1506\3\2\2\2\u1509\u1507"+
		"\3\2\2\2\u1509\u1508\3\2\2\2\u150a\u150b\3\2\2\2\u150b\u150c\7*\2\2\u150c"+
		"\u150d\5\u0290\u0149\2\u150d\u150e\7\4\2\2\u150e\u028d\3\2\2\2\u150f\u1510"+
		"\7\7\2\2\u1510\u028f\3\2\2\2\u1511\u1515\5\u0292\u014a\2\u1512\u1515\5"+
		"\u029c\u014f\2\u1513\u1515\5\u029e\u0150\2\u1514\u1511\3\2\2\2\u1514\u1512"+
		"\3\2\2\2\u1514\u1513\3\2\2\2\u1515\u0291\3\2\2\2\u1516\u1582\7\u02df\2"+
		"\2\u1517\u1582\7\u02a2\2\2\u1518\u1582\7\u02a1\2\2\u1519\u1582\7\u0255"+
		"\2\2\u151a\u151e\t\33\2\2\u151b\u151f\5\u0294\u014b\2\u151c\u151d\7\3"+
		"\2\2\u151d\u151f\7\4\2\2\u151e\u151b\3\2\2\2\u151e\u151c\3\2\2\2\u151f"+
		"\u1582\3\2\2\2\u1520\u1524\7\u0274\2\2\u1521\u1525\5\u0294\u014b\2\u1522"+
		"\u1523\7\3\2\2\u1523\u1525\7\4\2\2\u1524\u1521\3\2\2\2\u1524\u1522\3\2"+
		"\2\2\u1525\u1582\3\2\2\2\u1526\u152a\7\u0290\2\2\u1527\u152b\5\u0294\u014b"+
		"\2\u1528\u1529\7\3\2\2\u1529\u152b\7\4\2\2\u152a\u1527\3\2\2\2\u152a\u1528"+
		"\3\2\2\2\u152b\u1582\3\2\2\2\u152c\u1582\7\u02ce\2\2\u152d\u152f\7e\2"+
		"\2\u152e\u1530\7\u00de\2\2\u152f\u152e\3\2\2\2\u152f\u1530\3\2\2\2\u1530"+
		"\u1582\3\2\2\2\u1531\u1533\t\34\2\2\u1532\u1534\7\u01a1\2\2\u1533\u1532"+
		"\3\2\2\2\u1533\u1534\3\2\2\2\u1534\u1537\3\2\2\2\u1535\u1537\7\u0307\2"+
		"\2\u1536\u1531\3\2\2\2\u1536\u1535\3\2\2\2\u1537\u153b\3\2\2\2\u1538\u153c"+
		"\5\u0296\u014c\2\u1539\u153a\7\3\2\2\u153a\u153c\7\4\2\2\u153b\u1538\3"+
		"\2\2\2\u153b\u1539\3\2\2\2\u153b\u153c\3\2\2\2\u153c\u153e\3\2\2\2\u153d"+
		"\u153f\5\u0298\u014d\2\u153e\u153d\3\2\2\2\u153e\u153f\3\2\2\2\u153f\u1582"+
		"\3\2\2\2\u1540\u1541\t\34\2\2\u1541\u1542\7\u0163\2\2\u1542\u1545\7\u0170"+
		"\2\2\u1543\u1545\7\u0266\2\2\u1544\u1540\3\2\2\2\u1544\u1543\3\2\2\2\u1545"+
		"\u1549\3\2\2\2\u1546\u154a\5\u0296\u014c\2\u1547\u1548\7\3\2\2\u1548\u154a"+
		"\7\4\2\2\u1549\u1546\3\2\2\2\u1549\u1547\3\2\2\2\u1549\u154a\3\2\2\2\u154a"+
		"\u154c\3\2\2\2\u154b\u154d\5\u0298\u014d\2\u154c\u154b\3\2\2\2\u154c\u154d"+
		"\3\2\2\2\u154d\u1582\3\2\2\2\u154e\u1552\t\35\2\2\u154f\u1553\5\u0296"+
		"\u014c\2\u1550\u1551\7\3\2\2\u1551\u1553\7\4\2\2\u1552\u154f\3\2\2\2\u1552"+
		"\u1550\3\2\2\2\u1552\u1553\3\2\2\2\u1553\u1555\3\2\2\2\u1554\u1556\5\u0298"+
		"\u014d\2\u1555\u1554\3\2\2\2\u1555\u1556\3\2\2\2\u1556\u1582\3\2\2\2\u1557"+
		"\u155b\7\u0256\2\2\u1558\u155c\5\u0294\u014b\2\u1559\u155a\7\3\2\2\u155a"+
		"\u155c\7\4\2\2\u155b\u1558\3\2\2\2\u155b\u1559\3\2\2\2\u155b\u155c\3\2"+
		"\2\2\u155c\u1582\3\2\2\2\u155d\u155f\7\u0256\2\2\u155e\u1560\7\u01a1\2"+
		"\2\u155f\u155e\3\2\2\2\u155f\u1560\3\2\2\2\u1560\u1563\3\2\2\2\u1561\u1563"+
		"\7\u0306\2\2\u1562\u155d\3\2\2\2\u1562\u1561\3\2\2\2\u1563\u1567\3\2\2"+
		"\2\u1564\u1568\5\u0294\u014b\2\u1565\u1566\7\3\2\2\u1566\u1568\7\4\2\2"+
		"\u1567\u1564\3\2\2\2\u1567\u1565\3\2\2\2\u1567\u1568\3\2\2\2\u1568\u1582"+
		"\3\2\2\2\u1569\u156a\7\u0256\2\2\u156a\u156b\7\u0163\2\2\u156b\u156e\7"+
		"\u0170\2\2\u156c\u156e\7\u025c\2\2\u156d\u1569\3\2\2\2\u156d\u156c\3\2"+
		"\2\2\u156e\u1574\3\2\2\2\u156f\u1570\7\3\2\2\u1570\u1571\7\31\2\2\u1571"+
		"\u1572\7\u0350\2\2\u1572\u1573\3\2\2\2\u1573\u1575\7\4\2\2\u1574\u156f"+
		"\3\2\2\2\u1574\u1575\3\2\2\2\u1575\u1582\3\2\2\2\u1576\u1582\7\u026c\2"+
		"\2\u1577\u1582\7\u02ef\2\2\u1578\u157a\7\u02f0\2\2\u1579\u157b\5\u0294"+
		"\u014b\2\u157a\u1579\3\2\2\2\u157a\u157b\3\2\2\2\u157b\u157c\3\2\2\2\u157c"+
		"\u157d\t\b\2\2\u157d\u157e\7\u02ef\2\2\u157e\u1582\7\u0143\2\2\u157f\u1582"+
		"\7\u02d8\2\2\u1580\u1582\7\u01a3\2\2\u1581\u1516\3\2\2\2\u1581\u1517\3"+
		"\2\2\2\u1581\u1518\3\2\2\2\u1581\u1519\3\2\2\2\u1581\u151a\3\2\2\2\u1581"+
		"\u1520\3\2\2\2\u1581\u1526\3\2\2\2\u1581\u152c\3\2\2\2\u1581\u152d\3\2"+
		"\2\2\u1581\u1536\3\2\2\2\u1581\u1544\3\2\2\2\u1581\u154e\3\2\2\2\u1581"+
		"\u1557\3\2\2\2\u1581\u1562\3\2\2\2\u1581\u156d\3\2\2\2\u1581\u1576\3\2"+
		"\2\2\u1581\u1577\3\2\2\2\u1581\u1578\3\2\2\2\u1581\u157f\3\2\2\2\u1581"+
		"\u1580\3\2\2\2\u1582\u0293\3\2\2\2\u1583\u1584\7\3\2\2\u1584\u1587\7\31"+
		"\2\2\u1585\u1586\7\26\2\2\u1586\u1588\7\31\2\2\u1587\u1585\3\2\2\2\u1587"+
		"\u1588\3\2\2\2\u1588\u1589\3\2\2\2\u1589\u158a\7\4\2\2\u158a\u0295\3\2"+
		"\2\2\u158b\u158c\7\3\2\2\u158c\u158e\t\'\2\2\u158d\u158f\t;\2\2\u158e"+
		"\u158d\3\2\2\2\u158e\u158f\3\2\2\2\u158f\u1590\3\2\2\2\u1590\u1591\7\4"+
		"\2\2\u1591\u0297\3\2\2\2\u1592\u1598\7<\2\2\u1593\u1595\t\6\2\2\u1594"+
		"\u1596\5\u029a\u014e\2\u1595\u1594\3\2\2\2\u1595\u1596\3\2\2\2\u1596\u1599"+
		"\3\2\2\2\u1597\u1599\7\31\2\2\u1598\u1593\3\2\2\2\u1598\u1597\3\2\2\2"+
		"\u1599\u0299\3\2\2\2\u159a\u159b\7\u0080\2\2\u159b\u159c\t<\2\2\u159c"+
		"\u159d\7V\2\2\u159d\u029b\3\2\2\2\u159e\u159f\5\u02b0\u0159\2\u159f\u15a0"+
		"\7\23\2\2\u15a0\u15a2\3\2\2\2\u15a1\u159e\3\2\2\2\u15a1\u15a2\3\2\2\2"+
		"\u15a2\u15a3\3\2\2\2\u15a3\u15a4\5\u037a\u01be\2\u15a4\u029d\3\2\2\2\u15a5"+
		"\u15a6\5\u037a\u01be\2\u15a6\u029f\3\2\2\2\u15a7\u15a8\t=\2\2\u15a8\u02a1"+
		"\3\2\2\2\u15a9\u15aa\7\31\2\2\u15aa\u02a3\3\2\2\2\u15ab\u15ac\5\u02b0"+
		"\u0159\2\u15ac\u15ad\7\23\2\2\u15ad\u15af\3\2\2\2\u15ae\u15ab\3\2\2\2"+
		"\u15ae\u15af\3\2\2\2\u15af\u15b0\3\2\2\2\u15b0\u15b1\5\u037a\u01be\2\u15b1"+
		"\u02a5\3\2\2\2\u15b2\u15b3\5\u02a4\u0153\2\u15b3\u02a7\3\2\2\2\u15b4\u15b5"+
		"\5\u02a4\u0153\2\u15b5\u02a9\3\2\2\2\u15b6\u15b7\5\u037a\u01be\2\u15b7"+
		"\u02ab\3\2\2\2\u15b8\u15b9\5\u037a\u01be\2\u15b9\u02ad\3\2\2\2\u15ba\u15bb"+
		"\5\u037a\u01be\2\u15bb\u02af\3\2\2\2\u15bc\u15bd\5\u037a\u01be\2\u15bd"+
		"\u02b1\3\2\2\2\u15be\u15c2\5\u037a\u01be\2\u15bf\u15c2\7\32\2\2\u15c0"+
		"\u15c2\7\31\2\2\u15c1\u15be\3\2\2\2\u15c1\u15bf\3\2\2\2\u15c1\u15c0\3"+
		"\2\2\2\u15c2\u15cd\3\2\2\2\u15c3\u15c5\7\23\2\2\u15c4\u15c3\3\2\2\2\u15c4"+
		"\u15c5\3\2\2\2\u15c5\u15c9\3\2\2\2\u15c6\u15ca\5\u037a\u01be\2\u15c7\u15ca"+
		"\7\32\2\2\u15c8\u15ca\7\31\2\2\u15c9\u15c6\3\2\2\2\u15c9\u15c7\3\2\2\2"+
		"\u15c9\u15c8\3\2\2\2\u15ca\u15cc\3\2\2\2\u15cb\u15c4\3\2\2\2\u15cc\u15cf"+
		"\3\2\2\2\u15cd\u15cb\3\2\2\2\u15cd\u15ce\3\2\2\2\u15ce\u02b3\3\2\2\2\u15cf"+
		"\u15cd\3\2\2\2\u15d0\u15d1\5\u037a\u01be\2\u15d1\u02b5\3\2\2\2\u15d2\u15d3"+
		"\5\u02b2\u015a\2\u15d3\u15d4\7\23\2\2\u15d4\u15d5\5\u02b4\u015b\2\u15d5"+
		"\u15d6\7\23\2\2\u15d6\u15db\3\2\2\2\u15d7\u15d8\5\u02b4\u015b\2\u15d8"+
		"\u15d9\7\23\2\2\u15d9\u15db\3\2\2\2\u15da\u15d2\3\2\2\2\u15da\u15d7\3"+
		"\2\2\2\u15da\u15db\3\2\2\2\u15db\u15dc\3\2\2\2\u15dc\u15de\5\u037a\u01be"+
		"\2\u15dd\u15df\7*\2\2\u15de\u15dd\3\2\2\2\u15de\u15df\3\2\2\2\u15df\u15e1"+
		"\3\2\2\2\u15e0\u15e2\5\u02b0\u0159\2\u15e1\u15e0\3\2\2\2\u15e1\u15e2\3"+
		"\2\2\2\u15e2\u02b7\3\2\2\2\u15e3\u15e4\5\u02b2\u015a\2\u15e4\u15e5\7\23"+
		"\2\2\u15e5\u15e6\5\u02b4\u015b\2\u15e6\u15e7\7\23\2\2\u15e7\u15ec\3\2"+
		"\2\2\u15e8\u15e9\5\u02b4\u015b\2\u15e9\u15ea\7\23\2\2\u15ea\u15ec\3\2"+
		"\2\2\u15eb\u15e3\3\2\2\2\u15eb\u15e8\3\2\2\2\u15eb\u15ec\3\2\2\2\u15ec"+
		"\u15ed\3\2\2\2\u15ed\u15ee\5\u037a\u01be\2\u15ee\u02b9\3\2\2\2\u15ef\u15f0"+
		"\5\u02b2\u015a\2\u15f0\u15f1\7\23\2\2\u15f1\u15f2\5\u02b4\u015b\2\u15f2"+
		"\u15f3\7\23\2\2\u15f3\u15f8\3\2\2\2\u15f4\u15f5\5\u02b4\u015b\2\u15f5"+
		"\u15f6\7\23\2\2\u15f6\u15f8\3\2\2\2\u15f7\u15ef\3\2\2\2\u15f7\u15f4\3"+
		"\2\2\2\u15f7\u15f8\3\2\2\2\u15f8\u15f9\3\2\2\2\u15f9\u15fa\5\u037a\u01be"+
		"\2\u15fa\u02bb\3\2\2\2\u15fb\u15fc\5\u02b6\u015c\2\u15fc\u02bd\3\2\2\2"+
		"\u15fd\u15fe\5\u02b6\u015c\2\u15fe\u02bf\3\2\2\2\u15ff\u1600\5\u02b6\u015c"+
		"\2\u1600\u02c1\3\2\2\2\u1601\u1602\5\u02b2\u015a\2\u1602\u1603\7\23\2"+
		"\2\u1603\u1604\5\u02b4\u015b\2\u1604\u1605\7\23\2\2\u1605\u160a\3\2\2"+
		"\2\u1606\u1607\5\u02b4\u015b\2\u1607\u1608\7\23\2\2\u1608\u160a\3\2\2"+
		"\2\u1609\u1601\3\2\2\2\u1609\u1606\3\2\2\2\u1609\u160a\3\2\2\2\u160a\u160b"+
		"\3\2\2\2\u160b\u160d\5\u037a\u01be\2\u160c\u160e\5\u02b0\u0159\2\u160d"+
		"\u160c\3\2\2\2\u160d\u160e\3\2\2\2\u160e\u02c3\3\2\2\2\u160f\u1610\5\u037a"+
		"\u01be\2\u1610\u02c5\3\2\2\2\u1611\u1612\5\u037a\u01be\2\u1612\u02c7\3"+
		"\2\2\2\u1613\u1614\5\u037a\u01be\2\u1614\u02c9\3\2\2\2\u1615\u1616\5\u037a"+
		"\u01be\2\u1616\u02cb\3\2\2\2\u1617\u1618\5\u037a\u01be\2\u1618\u02cd\3"+
		"\2\2\2\u1619\u161a\5\u037a\u01be\2\u161a\u02cf\3\2\2\2\u161b\u161c\5\u037a"+
		"\u01be\2\u161c\u02d1\3\2\2\2\u161d\u1621\5\u037a\u01be\2\u161e\u1621\7"+
		"\32\2\2\u161f\u1621\7\31\2\2\u1620\u161d\3\2\2\2\u1620\u161e\3\2\2\2\u1620"+
		"\u161f\3\2\2\2\u1621\u162c\3\2\2\2\u1622\u1624\7\23\2\2\u1623\u1622\3"+
		"\2\2\2\u1623\u1624\3\2\2\2\u1624\u1628\3\2\2\2\u1625\u1629\5\u037a\u01be"+
		"\2\u1626\u1629\7\32\2\2\u1627\u1629\7\31\2\2\u1628\u1625\3\2\2\2\u1628"+
		"\u1626\3\2\2\2\u1628\u1627\3\2\2\2\u1629\u162b\3\2\2\2\u162a\u1623\3\2"+
		"\2\2\u162b\u162e\3\2\2\2\u162c\u162a\3\2\2\2\u162c\u162d\3\2\2\2\u162d"+
		"\u02d3\3\2\2\2\u162e\u162c\3\2\2\2\u162f\u1633\5\u037a\u01be\2\u1630\u1633"+
		"\7\32\2\2\u1631\u1633\7\31\2\2\u1632\u162f\3\2\2\2\u1632\u1630\3\2\2\2"+
		"\u1632\u1631\3\2\2\2\u1633\u163e\3\2\2\2\u1634\u1636\7\23\2\2\u1635\u1634"+
		"\3\2\2\2\u1635\u1636\3\2\2\2\u1636\u163a\3\2\2\2\u1637\u163b\5\u037a\u01be"+
		"\2\u1638\u163b\7\32\2\2\u1639\u163b\7\31\2\2\u163a\u1637\3\2\2\2\u163a"+
		"\u1638\3\2\2\2\u163a\u1639\3\2\2\2\u163b\u163d\3\2\2\2\u163c\u1635\3\2"+
		"\2\2\u163d\u1640\3\2\2\2\u163e\u163c\3\2\2\2\u163e\u163f\3\2\2\2\u163f"+
		"\u02d5\3\2\2\2\u1640\u163e\3\2\2\2\u1641\u1642\5\u02b4\u015b\2\u1642\u1643"+
		"\7\23\2\2\u1643\u1645\3\2\2\2\u1644\u1641\3\2\2\2\u1644\u1645\3\2\2\2"+
		"\u1645\u1646\3\2\2\2\u1646\u1647\5\u037a\u01be\2\u1647\u02d7\3\2\2\2\u1648"+
		"\u1649\5\u02b4\u015b\2\u1649\u164a\7\23\2\2\u164a\u164c\3\2\2\2\u164b"+
		"\u1648\3\2\2\2\u164b\u164c\3\2\2\2\u164c\u164d\3\2\2\2\u164d\u164e\5\u037a"+
		"\u01be\2\u164e\u02d9\3\2\2\2\u164f\u1650\5\u02b4\u015b\2\u1650\u1651\7"+
		"\23\2\2\u1651\u1653\3\2\2\2\u1652\u164f\3\2\2\2\u1652\u1653\3\2\2\2\u1653"+
		"\u1654\3\2\2\2\u1654\u1655\5\u037a\u01be\2\u1655\u02db\3\2\2\2\u1656\u1657"+
		"\5\u02b2\u015a\2\u1657\u1658\7\23\2\2\u1658\u1659\5\u02b4\u015b\2\u1659"+
		"\u165a\7\23\2\2\u165a\u165f\3\2\2\2\u165b\u165c\5\u02b4\u015b\2\u165c"+
		"\u165d\7\23\2\2\u165d\u165f\3\2\2\2\u165e\u1656\3\2\2\2\u165e\u165b\3"+
		"\2\2\2\u165e\u165f\3\2\2\2\u165f\u1660\3\2\2\2\u1660\u1661\5\u037a\u01be"+
		"\2\u1661\u02dd\3\2\2\2\u1662\u1663\5\u02b4\u015b\2\u1663\u1664\7\23\2"+
		"\2\u1664\u1666\3\2\2\2\u1665\u1662\3\2\2\2\u1665\u1666\3\2\2\2\u1666\u1667"+
		"\3\2\2\2\u1667\u1668\5\u037a\u01be\2\u1668\u02df\3\2\2\2\u1669\u166a\5"+
		"\u037a\u01be\2\u166a\u02e1\3\2\2\2\u166b\u166c\5\u037a\u01be\2\u166c\u02e3"+
		"\3\2\2\2\u166d\u166e\5\u037a\u01be\2\u166e\u02e5\3\2\2\2\u166f\u1670\5"+
		"\u037a\u01be\2\u1670\u02e7\3\2\2\2\u1671\u1672\5\u037a\u01be\2\u1672\u02e9"+
		"\3\2\2\2\u1673\u1674\5\u037a\u01be\2\u1674\u02eb\3\2\2\2\u1675\u1676\5"+
		"\u037a\u01be\2\u1676\u02ed\3\2\2\2\u1677\u1678\5\u037a\u01be\2\u1678\u02ef"+
		"\3\2\2\2\u1679\u167a\5\u037a\u01be\2\u167a\u02f1\3\2\2\2\u167b\u167c\5"+
		"\u037a\u01be\2\u167c\u02f3\3\2\2\2\u167d\u167e\5\u037a\u01be\2\u167e\u02f5"+
		"\3\2\2\2\u167f\u1680\7\30\2\2\u1680\u02f7\3\2\2\2\u1681\u1682\7\30\2\2"+
		"\u1682\u02f9\3\2\2\2\u1683\u1684\7\30\2\2\u1684\u02fb\3\2\2\2\u1685\u1686"+
		"\7\30\2\2\u1686\u02fd\3\2\2\2\u1687\u1688\5\u037a\u01be\2\u1688\u02ff"+
		"\3\2\2\2\u1689\u168a\5\u037a\u01be\2\u168a\u0301\3\2\2\2\u168b\u168c\5"+
		"\u037a\u01be\2\u168c\u0303\3\2\2\2\u168d\u168e\5\u037a\u01be\2\u168e\u0305"+
		"\3\2\2\2\u168f\u1690\5\u037a\u01be\2\u1690\u0307\3\2\2\2\u1691\u1692\5"+
		"\u037a\u01be\2\u1692\u0309\3\2\2\2\u1693\u1696\5\u037a\u01be\2\u1694\u1696"+
		"\7\30\2\2\u1695\u1693\3\2\2\2\u1695\u1694\3\2\2\2\u1696\u030b\3\2\2\2"+
		"\u1697\u1698\5\u02b4\u015b\2\u1698\u1699\7\23\2\2\u1699\u169b\3\2\2\2"+
		"\u169a\u1697\3\2\2\2\u169a\u169b\3\2\2\2\u169b\u169c\3\2\2\2\u169c\u169d"+
		"\5\u037a\u01be\2\u169d\u030d\3\2\2\2\u169e\u169f\5\u02b4\u015b\2\u169f"+
		"\u16a0\7\23\2\2\u16a0\u16a2\3\2\2\2\u16a1\u169e\3\2\2\2\u16a1\u16a2\3"+
		"\2\2\2\u16a2\u16a3\3\2\2\2\u16a3\u16a4\5\u037a\u01be\2\u16a4\u030f\3\2"+
		"\2\2\u16a5\u16a9\7\24\2\2\u16a6\u16a7\5\u0314\u018b\2\u16a7\u16a8\7\23"+
		"\2\2\u16a8\u16aa\3\2\2\2\u16a9\u16a6\3\2\2\2\u16a9\u16aa\3\2\2\2\u16aa"+
		"\u16ab\3\2\2\2\u16ab\u16b6\5\u0312\u018a\2\u16ac\u16ae\7\u015f\2\2\u16ad"+
		"\u16ac\3\2\2\2\u16ad\u16ae\3\2\2\2\u16ae\u16af\3\2\2\2\u16af\u16b3\7\24"+
		"\2\2\u16b0\u16b1\5\u0314\u018b\2\u16b1\u16b2\7\23\2\2\u16b2\u16b4\3\2"+
		"\2\2\u16b3\u16b0\3\2\2\2\u16b3\u16b4\3\2\2\2\u16b4\u16b5\3\2\2\2\u16b5"+
		"\u16b7\5\u0312\u018a\2\u16b6\u16ad\3\2\2\2\u16b6\u16b7\3\2\2\2\u16b7\u0311"+
		"\3\2\2\2\u16b8\u16b9\5\u037a\u01be\2\u16b9\u0313\3\2\2\2\u16ba\u16bb\5"+
		"\u037a\u01be\2\u16bb\u0315\3\2\2\2\u16bc\u16bd\5\u02b4\u015b\2\u16bd\u16be"+
		"\7\23\2\2\u16be\u16c0\3\2\2\2\u16bf\u16bc\3\2\2\2\u16bf\u16c0\3\2\2\2"+
		"\u16c0\u16c1\3\2\2\2\u16c1\u16c4\5\u037a\u01be\2\u16c2\u16c4\5\u0310\u0189"+
		"\2\u16c3\u16bf\3\2\2\2\u16c3\u16c2\3\2\2\2\u16c4\u0317\3\2\2\2\u16c5\u16c8"+
		"\7\u009d\2\2\u16c6\u16c9\5\u0316\u018c\2\u16c7\u16c9\5\u01f8\u00fd\2\u16c8"+
		"\u16c6\3\2\2\2\u16c8\u16c7\3\2\2\2\u16c9\u16ce\3\2\2\2\u16ca\u16cb\7\26"+
		"\2\2\u16cb\u16cd\5\u0316\u018c\2\u16cc\u16ca\3\2\2\2\u16cd\u16d0\3\2\2"+
		"\2\u16ce\u16cc\3\2\2\2\u16ce\u16cf\3\2\2\2\u16cf\u0319\3\2\2\2\u16d0\u16ce"+
		"\3\2\2\2\u16d1\u16d3\7*\2\2\u16d2\u16d1\3\2\2\2\u16d2\u16d3\3\2\2\2\u16d3"+
		"\u16d4\3\2\2\2\u16d4\u16e0\5\u02b0\u0159\2\u16d5\u16d6\7\3\2\2\u16d6\u16db"+
		"\5\u02aa\u0156\2\u16d7\u16d8\7\26\2\2\u16d8\u16da\5\u02aa\u0156\2\u16d9"+
		"\u16d7\3\2\2\2\u16da\u16dd\3\2\2\2\u16db\u16d9\3\2\2\2\u16db\u16dc\3\2"+
		"\2\2\u16dc\u16de\3\2\2\2\u16dd\u16db\3\2\2\2\u16de\u16df\7\4\2\2\u16df"+
		"\u16e1\3\2\2\2\u16e0\u16d5\3\2\2\2\u16e0\u16e1\3\2\2\2\u16e1\u031b\3\2"+
		"\2\2\u16e2\u16f1\7\u0082\2\2\u16e3\u16e5\7\3\2\2\u16e4\u16e3\3\2\2\2\u16e5"+
		"\u16e8\3\2\2\2\u16e6\u16e4\3\2\2\2\u16e6\u16e7\3\2\2\2\u16e7\u16e9\3\2"+
		"\2\2\u16e8\u16e6\3\2\2\2\u16e9\u16ed\5\u031e\u0190\2\u16ea\u16ec\7\4\2"+
		"\2\u16eb\u16ea\3\2\2\2\u16ec\u16ef\3\2\2\2\u16ed\u16eb\3\2\2\2\u16ed\u16ee"+
		"\3\2\2\2\u16ee\u16f2\3\2\2\2\u16ef\u16ed\3\2\2\2\u16f0\u16f2\5\u0334\u019b"+
		"\2\u16f1\u16e6\3\2\2\2\u16f1\u16f0\3\2\2\2\u16f2\u1706\3\2\2\2\u16f3\u1702"+
		"\7\26\2\2\u16f4\u16f6\7\3\2\2\u16f5\u16f4\3\2\2\2\u16f6\u16f9\3\2\2\2"+
		"\u16f7\u16f5\3\2\2\2\u16f7\u16f8\3\2\2\2\u16f8\u16fa\3\2\2\2\u16f9\u16f7"+
		"\3\2\2\2\u16fa\u16fe\5\u031e\u0190\2\u16fb\u16fd\7\4\2\2\u16fc\u16fb\3"+
		"\2\2\2\u16fd\u1700\3\2\2\2\u16fe\u16fc\3\2\2\2\u16fe\u16ff\3\2\2\2\u16ff"+
		"\u1703\3\2\2\2\u1700\u16fe\3\2\2\2\u1701\u1703\5\u0334\u019b\2\u1702\u16f7"+
		"\3\2\2\2\u1702\u1701\3\2\2\2\u1703\u1705\3\2\2\2\u1704\u16f3\3\2\2\2\u1705"+
		"\u1708\3\2\2\2\u1706\u1704\3\2\2\2\u1706\u1707\3\2\2\2\u1707\u031d\3\2"+
		"\2\2\u1708\u1706\3\2\2\2\u1709\u1790\5\u0320\u0191\2\u170a\u1790\5\u0326"+
		"\u0194\2\u170b\u1790\5\u0328\u0195\2\u170c\u1790\5\u032a\u0196\2\u170d"+
		"\u1790\5\u0330\u0199\2\u170e\u1790\5\u0332\u019a\2\u170f\u1790\5\u0334"+
		"\u019b\2\u1710\u1741\5\u0320\u0191\2\u1711\u1741\5\u0326\u0194\2\u1712"+
		"\u1741\5\u032a\u0196\2\u1713\u1741\5\u0330\u0199\2\u1714\u1741\5\u0332"+
		"\u019a\2\u1715\u1741\5\u0334\u019b\2\u1716\u1718\7\3\2\2\u1717\u1716\3"+
		"\2\2\2\u1718\u1719\3\2\2\2\u1719\u1717\3\2\2\2\u1719\u171a\3\2\2\2\u171a"+
		"\u171b\3\2\2\2\u171b\u171d\5\u031e\u0190\2\u171c\u171e\7\4\2\2\u171d\u171c"+
		"\3\2\2\2\u171e\u171f\3\2\2\2\u171f\u171d\3\2\2\2\u171f\u1720\3\2\2\2\u1720"+
		"\u1741\3\2\2\2\u1721\u1733\5\u0320\u0191\2\u1722\u1733\5\u0326\u0194\2"+
		"\u1723\u1733\5\u032a\u0196\2\u1724\u1733\5\u0330\u0199\2\u1725\u1733\5"+
		"\u0332\u019a\2\u1726\u1728\7\3\2\2\u1727\u1726\3\2\2\2\u1728\u1729\3\2"+
		"\2\2\u1729\u1727\3\2\2\2\u1729\u172a\3\2\2\2\u172a\u172b\3\2\2\2\u172b"+
		"\u172d\5\u031e\u0190\2\u172c\u172e\7\4\2\2\u172d\u172c\3\2\2\2\u172e\u172f"+
		"\3\2\2\2\u172f\u172d\3\2\2\2\u172f\u1730\3\2\2\2\u1730\u1733\3\2\2\2\u1731"+
		"\u1733\5\u0334\u019b\2\u1732\u1721\3\2\2\2\u1732\u1722\3\2\2\2\u1732\u1723"+
		"\3\2\2\2\u1732\u1724\3\2\2\2\u1732\u1725\3\2\2\2\u1732\u1727\3\2\2\2\u1732"+
		"\u1731\3\2\2\2\u1733\u1739\3\2\2\2\u1734\u173a\7\u0098\2\2\u1735\u1737"+
		"\t>\2\2\u1736\u1738\7\u00d2\2\2\u1737\u1736\3\2\2\2\u1737\u1738\3\2\2"+
		"\2\u1738\u173a\3\2\2\2\u1739\u1734\3\2\2\2\u1739\u1735\3\2\2\2\u173a\u173b"+
		"\3\2\2\2\u173b\u173c\7\u00a2\2\2\u173c\u173d\5\u031e\u0190\2\u173d\u173e"+
		"\7\u00ca\2\2\u173e\u173f\5\u0336\u019c\2\u173f\u1741\3\2\2\2\u1740\u1710"+
		"\3\2\2\2\u1740\u1711\3\2\2\2\u1740\u1712\3\2\2\2\u1740\u1713\3\2\2\2\u1740"+
		"\u1714\3\2\2\2\u1740\u1715\3\2\2\2\u1740\u1717\3\2\2\2\u1740\u1732\3\2"+
		"\2\2\u1741\u1747\3\2\2\2\u1742\u1748\7\u0098\2\2\u1743\u1745\t>\2\2\u1744"+
		"\u1746\7\u00d2\2\2\u1745\u1744\3\2\2\2\u1745\u1746\3\2\2\2\u1746\u1748"+
		"\3\2\2\2\u1747\u1742\3\2\2\2\u1747\u1743\3\2\2\2\u1748\u1749\3\2\2\2\u1749"+
		"\u174a\7\u00a2\2\2\u174a\u174b\5\u031e\u0190\2\u174b\u174c\7\u00ca\2\2"+
		"\u174c\u174d\5\u0336\u019c\2\u174d\u1790\3\2\2\2\u174e\u177f\5\u0320\u0191"+
		"\2\u174f\u177f\5\u0326\u0194\2\u1750\u177f\5\u032a\u0196\2\u1751\u177f"+
		"\5\u0330\u0199\2\u1752\u177f\5\u0332\u019a\2\u1753\u177f\5\u0334\u019b"+
		"\2\u1754\u1756\7\3\2\2\u1755\u1754\3\2\2\2\u1756\u1757\3\2\2\2\u1757\u1755"+
		"\3\2\2\2\u1757\u1758\3\2\2\2\u1758\u1759\3\2\2\2\u1759\u175b\5\u031e\u0190"+
		"\2\u175a\u175c\7\4\2\2\u175b\u175a\3\2\2\2\u175c\u175d\3\2\2\2\u175d\u175b"+
		"\3\2\2\2\u175d\u175e\3\2\2\2\u175e\u177f\3\2\2\2\u175f\u1771\5\u0320\u0191"+
		"\2\u1760\u1771\5\u0326\u0194\2\u1761\u1771\5\u032a\u0196\2\u1762\u1771"+
		"\5\u0330\u0199\2\u1763\u1771\5\u0332\u019a\2\u1764\u1766\7\3\2\2\u1765"+
		"\u1764\3\2\2\2\u1766\u1767\3\2\2\2\u1767\u1765\3\2\2\2\u1767\u1768\3\2"+
		"\2\2\u1768\u1769\3\2\2\2\u1769\u176b\5\u031e\u0190\2\u176a\u176c\7\4\2"+
		"\2\u176b\u176a\3\2\2\2\u176c\u176d\3\2\2\2\u176d\u176b\3\2\2\2\u176d\u176e"+
		"\3\2\2\2\u176e\u1771\3\2\2\2\u176f\u1771\5\u0334\u019b\2\u1770\u175f\3"+
		"\2\2\2\u1770\u1760\3\2\2\2\u1770\u1761\3\2\2\2\u1770\u1762\3\2\2\2\u1770"+
		"\u1763\3\2\2\2\u1770\u1765\3\2\2\2\u1770\u176f\3\2\2\2\u1771\u1777\3\2"+
		"\2\2\u1772\u1778\7\u0098\2\2\u1773\u1775\t>\2\2\u1774\u1776\7\u00d2\2"+
		"\2\u1775\u1774\3\2\2\2\u1775\u1776\3\2\2\2\u1776\u1778\3\2\2\2\u1777\u1772"+
		"\3\2\2\2\u1777\u1773\3\2\2\2\u1778\u1779\3\2\2\2\u1779\u177a\7\u00a2\2"+
		"\2\u177a\u177b\5\u031e\u0190\2\u177b\u177c\7\u00ca\2\2\u177c\u177d\5\u0336"+
		"\u019c\2\u177d\u177f\3\2\2\2\u177e\u174e\3\2\2\2\u177e\u174f\3\2\2\2\u177e"+
		"\u1750\3\2\2\2\u177e\u1751\3\2\2\2\u177e\u1752\3\2\2\2\u177e\u1753\3\2"+
		"\2\2\u177e\u1755\3\2\2\2\u177e\u1770\3\2\2\2\u177f\u1780\3\2\2\2\u1780"+
		"\u1781\7\u01ac\2\2\u1781\u1782\7\u00a2\2\2\u1782\u1783\5\u031e\u0190\2"+
		"\u1783\u1790\3\2\2\2\u1784\u1786\7\3\2\2\u1785\u1784\3\2\2\2\u1786\u1787"+
		"\3\2\2\2\u1787\u1785\3\2\2\2\u1787\u1788\3\2\2\2\u1788\u1789\3\2\2\2\u1789"+
		"\u178b\5\u031e\u0190\2\u178a\u178c\7\4\2\2\u178b\u178a\3\2\2\2\u178c\u178d"+
		"\3\2\2\2\u178d\u178b\3\2\2\2\u178d\u178e\3\2\2\2\u178e\u1790\3\2\2\2\u178f"+
		"\u1709\3\2\2\2\u178f\u170a\3\2\2\2\u178f\u170b\3\2\2\2\u178f\u170c\3\2"+
		"\2\2\u178f\u170d\3\2\2\2\u178f\u170e\3\2\2\2\u178f\u170f\3\2\2\2\u178f"+
		"\u1740\3\2\2\2\u178f\u177e\3\2\2\2\u178f\u1785\3\2\2\2\u1790\u031f\3\2"+
		"\2\2\u1791\u1795\5\u02b6\u015c\2\u1792\u1794\5\u0322\u0192\2\u1793\u1792"+
		"\3\2\2\2\u1794\u1797\3\2\2\2\u1795\u1793\3\2\2\2\u1795\u1796\3\2\2\2\u1796"+
		"\u1799\3\2\2\2\u1797\u1795\3\2\2\2\u1798\u179a\5\u031a\u018e\2\u1799\u1798"+
		"\3\2\2\2\u1799\u179a\3\2\2\2\u179a\u0321\3\2\2\2\u179b\u179c\7\u0080\2"+
		"\2\u179c\u17aa\t?\2\2\u179d\u179e\7*\2\2\u179e\u179f\7\u00c7\2\2\u179f"+
		"\u17ab\5\u01e2\u00f2\2\u17a0\u17a1\7\u0082\2\2\u17a1\u17a2\5\u01e2\u00f2"+
		"\2\u17a2\u17a3\7\u0124\2\2\u17a3\u17a4\5\u01e2\u00f2\2\u17a4\u17ab\3\2"+
		"\2\2\u17a5\u17a6\7\64\2\2\u17a6\u17a7\5\u01e2\u00f2\2\u17a7\u17a8\7\u0144"+
		"\2\2\u17a8\u17a9\5\u01e2\u00f2\2\u17a9\u17ab\3\2\2\2\u17aa\u179d\3\2\2"+
		"\2\u17aa\u17a0\3\2\2\2\u17aa\u17a5\3\2\2\2\u17ab\u0323\3\2\2\2\u17ac\u17ad"+
		"\7\u0080\2\2\u17ad\u17ae\7\u01e0\2\2\u17ae\u17af\7\u00c7\2\2\u17af\u17ba"+
		"\7\u01a9\2\2\u17b0\u17b1\7\u0082\2\2\u17b1\u17b2\5\u01e2\u00f2\2\u17b2"+
		"\u17b3\7\u0124\2\2\u17b3\u17b4\5\u01e2\u00f2\2\u17b4\u17bb\3\2\2\2\u17b5"+
		"\u17b6\7\64\2\2\u17b6\u17b7\5\u01e2\u00f2\2\u17b7\u17b8\7\u0144\2\2\u17b8"+
		"\u17b9\5\u01e2\u00f2\2\u17b9\u17bb\3\2\2\2\u17ba\u17b0\3\2\2\2\u17ba\u17b5"+
		"\3\2\2\2\u17bb\u0325\3\2\2\2\u17bc\u17be\7\u0121\2\2\u17bd\u17bc\3\2\2"+
		"\2\u17bd\u17be\3\2\2\2\u17be\u17bf\3\2\2\2\u17bf\u17c0\7\3\2\2\u17c0\u17c1"+
		"\5\u036e\u01b8\2\u17c1\u17c3\7\4\2\2\u17c2\u17c4\5\u031a\u018e\2\u17c3"+
		"\u17c2\3\2\2\2\u17c3\u17c4\3\2\2\2\u17c4\u0327\3\2\2\2\u17c5\u17c6\7~"+
		"\2\2\u17c6\u17c7\7\u0121\2\2\u17c7\u17c8\7\3\2\2\u17c8\u17c9\5\u00d6l"+
		"\2\u17c9\u17cb\7\4\2\2\u17ca\u17cc\5\u031a\u018e\2\u17cb\u17ca\3\2\2\2"+
		"\u17cb\u17cc\3\2\2\2\u17cc\u17d7\3\2\2\2\u17cd\u17ce\t@\2\2\u17ce\u17cf"+
		"\7\u0121\2\2\u17cf\u17d7\5\u00dan\2\u17d0\u17d1\7\u00c9\2\2\u17d1\u17d2"+
		"\7\u0121\2\2\u17d2\u17d7\5\u00d0i\2\u17d3\u17d4\7~\2\2\u17d4\u17d5\7\u0121"+
		"\2\2\u17d5\u17d7\5\u00d8m\2\u17d6\u17c5\3\2\2\2\u17d6\u17cd\3\2\2\2\u17d6"+
		"\u17d0\3\2\2\2\u17d6\u17d3\3\2\2\2\u17d7\u0329\3\2\2\2\u17d8\u17d9\7\u0121"+
		"\2\2\u17d9\u17de\7\3\2\2\u17da\u17df\5\u0238\u011d\2\u17db\u17df\5\u0214"+
		"\u010b\2\u17dc\u17df\5\u0216\u010c\2\u17dd\u17df\5\u037a\u01be\2\u17de"+
		"\u17da\3\2\2\2\u17de\u17db\3\2\2\2\u17de\u17dc\3\2\2\2\u17de\u17dd\3\2"+
		"\2\2\u17df\u17e0\3\2\2\2\u17e0\u17e4\7\3\2\2\u17e1\u17e5\5\u01e2\u00f2"+
		"\2\u17e2\u17e3\7\u0121\2\2\u17e3\u17e5\5\u02b6\u015c\2\u17e4\u17e1\3\2"+
		"\2\2\u17e4\u17e2\3\2\2\2\u17e5\u17ee\3\2\2\2\u17e6\u17ea\7\26\2\2\u17e7"+
		"\u17eb\5\u01e2\u00f2\2\u17e8\u17e9\7\u0121\2\2\u17e9\u17eb\5\u02b6\u015c"+
		"\2\u17ea\u17e7\3\2\2\2\u17ea\u17e8\3\2\2\2\u17eb\u17ed\3\2\2\2\u17ec\u17e6"+
		"\3\2\2\2\u17ed\u17f0\3\2\2\2\u17ee\u17ec\3\2\2\2\u17ee\u17ef\3\2\2\2\u17ef"+
		"\u17f1\3\2\2\2\u17f0\u17ee\3\2\2\2\u17f1\u17f3\7\4\2\2\u17f2\u17f4\5\u032c"+
		"\u0197\2\u17f3\u17f2\3\2\2\2\u17f3\u17f4\3\2\2\2\u17f4\u17f5\3\2\2\2\u17f5"+
		"\u17f8\7\4\2\2\u17f6\u17f9\5\u031a\u018e\2\u17f7\u17f9\5\u032e\u0198\2"+
		"\u17f8\u17f6\3\2\2\2\u17f8\u17f7\3\2\2\2\u17f8\u17f9\3\2\2\2\u17f9\u032b"+
		"\3\2\2\2\u17fa\u17fc\7\u025e\2\2\u17fb\u17fd\7\u01aa\2\2\u17fc\u17fb\3"+
		"\2\2\2\u17fc\u17fd\3\2\2\2\u17fd\u17fe\3\2\2\2\u17fe\u17ff\tA\2\2\u17ff"+
		"\u032d\3\2\2\2\u1800\u1802\7*\2\2\u1801\u1800\3\2\2\2\u1801\u1802\3\2"+
		"\2\2\u1802\u1803\3\2\2\2\u1803\u1804\5\u02b0\u0159\2\u1804\u1805\7\3\2"+
		"\2\u1805\u1806\5\u02a4\u0153\2\u1806\u180d\5\u0198\u00cd\2\u1807\u1808"+
		"\7\26\2\2\u1808\u1809\5\u02a4\u0153\2\u1809\u180a\5\u0198\u00cd\2\u180a"+
		"\u180c\3\2\2\2\u180b\u1807\3\2\2\2\u180c\u180f\3\2\2\2\u180d\u180b\3\2"+
		"\2\2\u180d\u180e\3\2\2\2\u180e\u1810\3\2\2\2\u180f\u180d\3\2\2\2\u1810"+
		"\u1811\7\4\2\2\u1811\u032f\3\2\2\2\u1812\u1813\7\u0121\2\2\u1813\u1814"+
		"\7\3\2\2\u1814\u1815\5\u037a\u01be\2\u1815\u1816\7\u00ab\2\2\u1816\u1817"+
		"\5\u02b6\u015c\2\u1817\u1819\7\4\2\2\u1818\u181a\5\u02b0\u0159\2\u1819"+
		"\u1818\3\2\2\2\u1819\u181a\3\2\2\2\u181a\u0331\3\2\2\2\u181b\u181d\5\u023e"+
		"\u0120\2\u181c\u181e\5\u031a\u018e\2\u181d\u181c\3\2\2\2\u181d\u181e\3"+
		"\2\2\2\u181e\u0333\3\2\2\2\u181f\u1820\7\u01ab\2\2\u1820\u1823\7\3\2\2"+
		"\u1821\u1824\5\u033c\u019f\2\u1822\u1824\5\u033e\u01a0\2\u1823\u1821\3"+
		"\2\2\2\u1823\u1822\3\2\2\2\u1824\u182c\3\2\2\2\u1825\u1828\7\26\2\2\u1826"+
		"\u1829\5\u033c\u019f\2\u1827\u1829\5\u033e\u01a0\2\u1828\u1826\3\2\2\2"+
		"\u1828\u1827\3\2\2\2\u1829\u182b\3\2\2\2\u182a\u1825\3\2\2\2\u182b\u182e"+
		"\3\2\2\2\u182c\u182a\3\2\2\2\u182c\u182d\3\2\2\2\u182d\u182f\3\2\2\2\u182e"+
		"\u182c\3\2\2\2\u182f\u1832\7\4\2\2\u1830\u1831\7\u013c\2\2\u1831\u1833"+
		"\7\u01a7\2\2\u1832\u1830\3\2\2\2\u1832\u1833\3\2\2\2\u1833\u1835\3\2\2"+
		"\2\u1834\u1836\5\u031a\u018e\2\u1835\u1834\3\2\2\2\u1835\u1836\3\2\2\2"+
		"\u1836\u0335\3\2\2\2\u1837\u183d\5\u026e\u0138\2\u1838\u1839\5\u0338\u019d"+
		"\2\u1839\u183a\7\b\2\2\u183a\u183b\5\u0338\u019d\2\u183b\u183d\3\2\2\2"+
		"\u183c\u1837\3\2\2\2\u183c\u1838\3\2\2\2\u183d\u0337\3\2\2\2\u183e\u1853"+
		"\5\u02a4\u0153\2\u183f\u1853\5\u033a\u019e\2\u1840\u1841\7\u0267\2\2\u1841"+
		"\u1844\7\3\2\2\u1842\u1845\5\u02a4\u0153\2\u1843\u1845\5\u033a\u019e\2"+
		"\u1844\u1842\3\2\2\2\u1844\u1843\3\2\2\2\u1845\u184d\3\2\2\2\u1846\u1849"+
		"\7\26\2\2\u1847\u184a\5\u02a4\u0153\2\u1848\u184a\5\u033a\u019e\2\u1849"+
		"\u1847\3\2\2\2\u1849\u1848\3\2\2\2\u184a\u184c\3\2\2\2\u184b\u1846\3\2"+
		"\2\2\u184c\u184f\3\2\2\2\u184d\u184b\3\2\2\2\u184d\u184e\3\2\2\2\u184e"+
		"\u1850\3\2\2\2\u184f\u184d\3\2\2\2\u1850\u1851\7\4\2\2\u1851\u1853\3\2"+
		"\2\2\u1852\u183e\3\2\2\2\u1852\u183f\3\2\2\2\u1852\u1840\3\2\2\2\u1853"+
		"\u0339\3\2\2\2\u1854\u1855\5\u028c\u0147\2\u1855\u033b\3\2\2\2\u1856\u1857"+
		"\5\u01e2\u00f2\2\u1857\u033d\3\2\2\2\u1858\u1859\5\u01e2\u00f2\2\u1859"+
		"\u033f\3\2\2\2\u185a\u185b\5\u02a4\u0153\2\u185b\u185e\5\u01de\u00f0\2"+
		"\u185c\u185f\5\u02a4\u0153\2\u185d\u185f\5\u02a0\u0151\2\u185e\u185c\3"+
		"\2\2\2\u185e\u185d\3\2\2\2\u185f\u0341\3\2\2\2\u1860\u1861\7\u013a\2\2"+
		"\u1861\u1862\5\u026e\u0138\2\u1862\u0343\3\2\2\2\u1863\u1864\7\u008b\2"+
		"\2\u1864\u1868\7\66\2\2\u1865\u1869\5\u0348\u01a5\2\u1866\u1869\5\u034a"+
		"\u01a6\2\u1867\u1869\5\u034e\u01a8\2\u1868\u1865\3\2\2\2\u1868\u1866\3"+
		"\2\2\2\u1868\u1867\3\2\2\2\u1869\u0345\3\2\2\2\u186a\u186b\7\u008d\2\2"+
		"\u186b\u186c\5\u026e\u0138\2\u186c\u0347\3\2\2\2\u186d\u1872\5\u01e2\u00f2"+
		"\2\u186e\u186f\7\26\2\2\u186f\u1871\5\u01e2\u00f2\2\u1870\u186e\3\2\2"+
		"\2\u1871\u1874\3\2\2\2\u1872\u1870\3\2\2\2\u1872\u1873\3\2\2\2\u1873\u0349"+
		"\3\2\2\2\u1874\u1872\3\2\2\2\u1875\u1876\7\u015d\2\2\u1876\u1877\7\u0190"+
		"\2\2\u1877\u1878\5\u034c\u01a7\2\u1878\u034b\3\2\2\2\u1879\u187d\7\3\2"+
		"\2\u187a\u187e\5\u034c\u01a7\2\u187b\u187e\5\u0348\u01a5\2\u187c\u187e"+
		"\5\u034e\u01a8\2\u187d\u187a\3\2\2\2\u187d\u187b\3\2\2\2\u187d\u187c\3"+
		"\2\2\2\u187e\u1887\3\2\2\2\u187f\u1883\7\26\2\2\u1880\u1884\5\u034c\u01a7"+
		"\2\u1881\u1884\5\u0348\u01a5\2\u1882\u1884\5\u034e\u01a8\2\u1883\u1880"+
		"\3\2\2\2\u1883\u1881\3\2\2\2\u1883\u1882\3\2\2\2\u1884\u1886\3\2\2\2\u1885"+
		"\u187f\3\2\2\2\u1886\u1889\3\2\2\2\u1887\u1885\3\2\2\2\u1887\u1888\3\2"+
		"\2\2\u1888\u188a\3\2\2\2\u1889\u1887\3\2\2\2\u188a\u188b\7\4\2\2\u188b"+
		"\u034d\3\2\2\2\u188c\u188d\tB\2\2\u188d\u188e\7\3\2\2\u188e\u188f\5\u0348"+
		"\u01a5\2\u188f\u1890\7\4\2\2\u1890\u1894\3\2\2\2\u1891\u1892\7\3\2\2\u1892"+
		"\u1894\7\4\2\2\u1893\u188c\3\2\2\2\u1893\u1891\3\2\2\2\u1894\u034f\3\2"+
		"\2\2\u1895\u189b\5\u01e2\u00f2\2\u1896\u1897\5\u01e0\u00f1\2\u1897\u1898"+
		"\5\u01e2\u00f2\2\u1898\u189a\3\2\2\2\u1899\u1896\3\2\2\2\u189a\u189d\3"+
		"\2\2\2\u189b\u1899\3\2\2\2\u189b\u189c\3\2\2\2\u189c\u18a2\3\2\2\2\u189d"+
		"\u189b\3\2\2\2\u189e\u18a0\7*\2\2\u189f\u189e\3\2\2\2\u189f\u18a0\3\2"+
		"\2\2\u18a0\u18a1\3\2\2\2\u18a1\u18a3\5\u02aa\u0156\2\u18a2\u189f\3\2\2"+
		"\2\u18a2\u18a3\3\2\2\2\u18a3\u18aa\3\2\2\2\u18a4\u18a5\5\u02b6\u015c\2"+
		"\u18a5\u18a6\7\23\2\2\u18a6\u18a7\7\20\2\2\u18a7\u18aa\3\2\2\2\u18a8\u18aa"+
		"\5\u0352\u01aa\2\u18a9\u1895\3\2\2\2\u18a9\u18a4\3\2\2\2\u18a9\u18a8\3"+
		"\2\2\2\u18aa\u0351\3\2\2\2\u18ab\u18ac\7\u0199\2\2\u18ac\u18ad\7\3\2\2"+
		"\u18ad\u18ae\5\u01e2\u00f2\2\u18ae\u18af\7\4\2\2\u18af\u18b0\7\23\2\2"+
		"\u18b0\u18b1\7\20\2\2\u18b1\u18b2\7*\2\2\u18b2\u18b3\7\3\2\2\u18b3\u18b4"+
		"\5\u02a4\u0153\2\u18b4\u18bb\5\u0198\u00cd\2\u18b5\u18b6\7\26\2\2\u18b6"+
		"\u18b7\5\u02a4\u0153\2\u18b7\u18b8\5\u0198\u00cd\2\u18b8\u18ba\3\2\2\2"+
		"\u18b9\u18b5\3\2\2\2\u18ba\u18bd\3\2\2\2\u18bb\u18b9\3\2\2\2\u18bb\u18bc"+
		"\3\2\2\2\u18bc\u18be\3\2\2\2\u18bd\u18bb\3\2\2\2\u18be\u18bf\7\4\2\2\u18bf"+
		"\u0353\3\2\2\2\u18c0\u18c2\7\u010c\2\2\u18c1\u18c3\tC\2\2\u18c2\u18c1"+
		"\3\2\2\2\u18c2\u18c3\3\2\2\2\u18c3\u18cd\3\2\2\2\u18c4\u18ce\7\20\2\2"+
		"\u18c5\u18ca\5\u0350\u01a9\2\u18c6\u18c7\7\26\2\2\u18c7\u18c9\5\u0350"+
		"\u01a9\2\u18c8\u18c6\3\2\2\2\u18c9\u18cc\3\2\2\2\u18ca\u18c8\3\2\2\2\u18ca"+
		"\u18cb\3\2\2\2\u18cb\u18ce\3\2\2\2\u18cc\u18ca\3\2\2\2\u18cd\u18c4\3\2"+
		"\2\2\u18cd\u18c5\3\2\2\2\u18ce\u0355\3\2\2\2\u18cf\u18d0\5\u0354\u01ab"+
		"\2\u18d0\u18d2\5\u031c\u018f\2\u18d1\u18d3\5\u0342\u01a2\2\u18d2\u18d1"+
		"\3\2\2\2\u18d2\u18d3\3\2\2\2\u18d3\u18d5\3\2\2\2\u18d4\u18d6\5\u0344\u01a3"+
		"\2\u18d5\u18d4\3\2\2\2\u18d5\u18d6\3\2\2\2\u18d6\u18d8\3\2\2\2\u18d7\u18d9"+
		"\5\u0346\u01a4\2\u18d8\u18d7\3\2\2\2\u18d8\u18d9\3\2\2\2\u18d9\u18db\3"+
		"\2\2\2\u18da\u18dc\5\u0372\u01ba\2\u18db\u18da\3\2\2\2\u18db\u18dc\3\2"+
		"\2\2\u18dc\u18de\3\2\2\2\u18dd\u18df\5\u0376\u01bc\2\u18de\u18dd\3\2\2"+
		"\2\u18de\u18df\3\2\2\2\u18df\u18e1\3\2\2\2\u18e0\u18e2\5\u0378\u01bd\2"+
		"\u18e1\u18e0\3\2\2\2\u18e1\u18e2\3\2\2\2\u18e2\u0357\3\2\2\2\u18e3\u18e4"+
		"\7\u013c\2\2\u18e4\u18e9\5\u035c\u01af\2\u18e5\u18e6\7\26\2\2\u18e6\u18e8"+
		"\5\u035c\u01af\2\u18e7\u18e5\3\2\2\2\u18e8\u18eb\3\2\2\2\u18e9\u18e7\3"+
		"\2\2\2\u18e9\u18ea\3\2\2\2\u18ea\u18ed\3\2\2\2\u18eb\u18e9\3\2\2\2\u18ec"+
		"\u18e3\3\2\2\2\u18ec\u18ed\3\2\2\2\u18ed\u18ee\3\2\2\2\u18ee\u18ef\5\u0354"+
		"\u01ab\2\u18ef\u18f0\5\u0318\u018d\2\u18f0\u18f2\5\u031c\u018f\2\u18f1"+
		"\u18f3\5\u0342\u01a2\2\u18f2\u18f1\3\2\2\2\u18f2\u18f3\3\2\2\2\u18f3\u18f5"+
		"\3\2\2\2\u18f4\u18f6\5\u0344\u01a3\2\u18f5\u18f4\3\2\2\2\u18f5\u18f6\3"+
		"\2\2\2\u18f6\u18f8\3\2\2\2\u18f7\u18f9\5\u0346\u01a4\2\u18f8\u18f7\3\2"+
		"\2\2\u18f8\u18f9\3\2\2\2\u18f9\u18fb\3\2\2\2\u18fa\u18fc\5\u0372\u01ba"+
		"\2\u18fb\u18fa\3\2\2\2\u18fb\u18fc\3\2\2\2\u18fc\u18fe\3\2\2\2\u18fd\u18ff"+
		"\5\u0376\u01bc\2\u18fe\u18fd\3\2\2\2\u18fe\u18ff\3\2\2\2\u18ff\u1901\3"+
		"\2\2\2\u1900\u1902\5\u0378\u01bd\2\u1901\u1900\3\2\2\2\u1901\u1902\3\2"+
		"\2\2\u1902\u1905\3\2\2\2\u1903\u1906\5\u0364\u01b3\2\u1904\u1906\5\u0368"+
		"\u01b5\2\u1905\u1903\3\2\2\2\u1905\u1904\3\2\2\2\u1905\u1906\3\2\2\2\u1906"+
		"\u1908\3\2\2\2\u1907\u1909\5\u036a\u01b6\2\u1908\u1907\3\2\2\2\u1908\u1909"+
		"\3\2\2\2\u1909\u0359\3\2\2\2\u190a\u190b\7\u013c\2\2\u190b\u1910\5\u035c"+
		"\u01af\2\u190c\u190d\7\26\2\2\u190d\u190f\5\u035c\u01af\2\u190e\u190c"+
		"\3\2\2\2\u190f\u1912\3\2\2\2\u1910\u190e\3\2\2\2\u1910\u1911\3\2\2\2\u1911"+
		"\u1914\3\2\2\2\u1912\u1910\3\2\2\2\u1913\u190a\3\2\2\2\u1913\u1914\3\2"+
		"\2\2\u1914\u1915\3\2\2\2\u1915\u191e\5\u036e\u01b8\2\u1916\u191d\5\u035e"+
		"\u01b0\2\u1917\u191d\5\u0360\u01b1\2\u1918\u191d\5\u0362\u01b2\2\u1919"+
		"\u191d\5\u0364\u01b3\2\u191a\u191d\5\u0368\u01b5\2\u191b\u191d\5\u036a"+
		"\u01b6\2\u191c\u1916\3\2\2\2\u191c\u1917\3\2\2\2\u191c\u1918\3\2\2\2\u191c"+
		"\u1919\3\2\2\2\u191c\u191a\3\2\2\2\u191c\u191b\3\2\2\2\u191d\u1920\3\2"+
		"\2\2\u191e\u191c\3\2\2\2\u191e\u191f\3\2\2\2\u191f\u035b\3\2\2\2\u1920"+
		"\u191e\3\2\2\2\u1921\u1922\5\u02b6\u015c\2\u1922\u1923\7\3\2\2\u1923\u1928"+
		"\5\u02a4\u0153\2\u1924\u1925\7\26\2\2\u1925\u1927\5\u02a4\u0153\2\u1926"+
		"\u1924\3\2\2\2\u1927\u192a\3\2\2\2\u1928\u1926\3\2\2\2\u1928\u1929\3\2"+
		"\2\2\u1929\u192b\3\2\2\2\u192a\u1928\3\2\2\2\u192b\u192c\7\4\2\2\u192c"+
		"\u192d\7*\2\2\u192d\u192e\7\3\2\2\u192e\u192f\5\u036e\u01b8\2\u192f\u1930"+
		"\7\4\2\2\u1930\u035d\3\2\2\2\u1931\u1932\7\u0080\2\2\u1932\u193c\7\u012c"+
		"\2\2\u1933\u1934\7\u00c7\2\2\u1934\u1939\5\u02a4\u0153\2\u1935\u1936\7"+
		"\26\2\2\u1936\u1938\5\u02a4\u0153\2\u1937\u1935\3\2\2\2\u1938\u193b\3"+
		"\2\2\2\u1939\u1937\3\2\2\2\u1939\u193a\3\2\2\2\u193a\u193d\3\2\2\2\u193b"+
		"\u1939\3\2\2\2\u193c\u1933\3\2\2\2\u193c\u193d\3\2\2\2\u193d\u035f\3\2"+
		"\2\2\u193e\u193f\7\u0080\2\2\u193f\u1940\7\u017d\2\2\u1940\u1941\7\u0172"+
		"\2\2\u1941\u0361\3\2\2\2\u1942\u1943\7\u00cd\2\2\u1943\u1944\7\u0080\2"+
		"\2\u1944\u1945\7\31\2\2\u1945\u1946\tD\2\2\u1946\u0363\3\2\2\2\u1947\u1952"+
		"\7\u013c\2\2\u1948\u194a\7\u018c\2\2\u1949\u194b\5\u0366\u01b4\2\u194a"+
		"\u1949\3\2\2\2\u194a\u194b\3\2\2\2\u194b\u1953\3\2\2\2\u194c\u194e\7\u018d"+
		"\2\2\u194d\u194f\5\u0366\u01b4\2\u194e\u194d\3\2\2\2\u194e\u194f\3\2\2"+
		"\2\u194f\u1953\3\2\2\2\u1950\u1953\7\u0155\2\2\u1951\u1953\7\u019a\2\2"+
		"\u1952\u1948\3\2\2\2\u1952\u194c\3\2\2\2\u1952\u1950\3\2\2\2\u1952\u1951"+
		"\3\2\2\2\u1953\u0365\3\2\2\2\u1954\u1955\7\u019b\2\2\u1955\u1956\7\u0144"+
		"\2\2\u1956\u1957\7\u00a3\2\2\u1957\u1958\tE\2\2\u1958\u1959\7\u0168\2"+
		"\2\u1959\u0367\3\2\2\2\u195a\u195b\7\u0192\2\2\u195b\u195c\7\u0167\2\2"+
		"\u195c\u195d\7V\2\2\u195d\u0369\3\2\2\2\u195e\u195f\7\u00e9\2\2\u195f"+
		"\u1960\7\31\2\2\u1960\u036b\3\2\2\2\u1961\u1962\7\3\2\2\u1962\u1963\5"+
		"\u036e\u01b8\2\u1963\u1964\7\4\2\2\u1964\u036d\3\2\2\2\u1965\u1966\7\3"+
		"\2\2\u1966\u1967\5\u036e\u01b8\2\u1967\u1968\7\4\2\2\u1968\u196c\3\2\2"+
		"\2\u1969\u196c\5\u0356\u01ac\2\u196a\u196c\5\u0370\u01b9\2\u196b\u1965"+
		"\3\2\2\2\u196b\u1969\3\2\2\2\u196b\u196a\3\2\2\2\u196c\u197a\3\2\2\2\u196d"+
		"\u196f\tF\2\2\u196e\u1970\tC\2\2\u196f\u196e\3\2\2\2\u196f\u1970\3\2\2"+
		"\2\u1970\u1976\3\2\2\2\u1971\u1977\5\u0356\u01ac\2\u1972\u1973\7\3\2\2"+
		"\u1973\u1974\5\u036e\u01b8\2\u1974\u1975\7\4\2\2\u1975\u1977\3\2\2\2\u1976"+
		"\u1971\3\2\2\2\u1976\u1972\3\2\2\2\u1977\u1979\3\2\2\2\u1978\u196d\3\2"+
		"\2\2\u1979\u197c\3\2\2\2\u197a\u1978\3\2\2\2\u197a\u197b\3\2\2\2\u197b"+
		"\u197e\3\2\2\2\u197c\u197a\3\2\2\2\u197d\u197f\5\u0372\u01ba\2\u197e\u197d"+
		"\3\2\2\2\u197e\u197f\3\2\2\2\u197f\u1981\3\2\2\2\u1980\u1982\5\u0376\u01bc"+
		"\2\u1981\u1980\3\2\2\2\u1981\u1982\3\2\2\2\u1982\u1984\3\2\2\2\u1983\u1985"+
		"\5\u0378\u01bd\2\u1984\u1983\3\2\2\2\u1984\u1985\3\2\2\2\u1985\u036f\3"+
		"\2\2\2\u1986\u1993\7\u0130\2\2\u1987\u1994\5\u01e8\u00f5\2\u1988\u1989"+
		"\7\3\2\2\u1989\u198e\5\u01e8\u00f5\2\u198a\u198b\7\26\2\2\u198b\u198d"+
		"\5\u01e8\u00f5\2\u198c\u198a\3\2\2\2\u198d\u1990\3\2\2\2\u198e\u198c\3"+
		"\2\2\2\u198e\u198f\3\2\2\2\u198f\u1991\3\2\2\2\u1990\u198e\3\2\2\2\u1991"+
		"\u1992\7\4\2\2\u1992\u1994\3\2\2\2\u1993\u1987\3\2\2\2\u1993\u1988\3\2"+
		"\2\2\u1994\u0371\3\2\2\2\u1995\u1996\7\u00cf\2\2\u1996\u19aa\7\66\2\2"+
		"\u1997\u1999\5\u0374\u01bb\2\u1998\u199a\t(\2\2\u1999\u1998\3\2\2\2\u1999"+
		"\u199a\3\2\2\2\u199a\u19a2\3\2\2\2\u199b\u199c\7\26\2\2\u199c\u199e\5"+
		"\u0374\u01bb\2\u199d\u199f\t(\2\2\u199e\u199d\3\2\2\2\u199e\u199f\3\2"+
		"\2\2\u199f\u19a1\3\2\2\2\u19a0\u199b\3\2\2\2\u19a1\u19a4\3\2\2\2\u19a2"+
		"\u19a0\3\2\2\2\u19a2\u19a3\3\2\2\2\u19a3\u19ab\3\2\2\2\u19a4\u19a2\3\2"+
		"\2\2\u19a5\u19a6\7\u0160\2\2\u19a6\u19ab\7\u010e\2\2\u19a7\u19a8\7\u00cf"+
		"\2\2\u19a8\u19a9\7\u00c7\2\2\u19a9\u19ab\5\u02b6\u015c\2\u19aa\u1997\3"+
		"\2\2\2\u19aa\u19a5\3\2\2\2\u19aa\u19a7\3\2\2\2\u19ab\u0373\3\2\2\2\u19ac"+
		"\u19b0\5\u02a4\u0153\2\u19ad\u19b0\7\31\2\2\u19ae\u19b0\5\u01e2\u00f2"+
		"\2\u19af\u19ac\3\2\2\2\u19af\u19ad\3\2\2\2\u19af\u19ae\3\2\2\2\u19b0\u0375"+
		"\3\2\2\2\u19b1\u19b2\7\u00c8\2\2\u19b2\u19b3\7\31\2\2\u19b3\u19b4\tD\2"+
		"\2\u19b4\u0377\3\2\2\2\u19b5\u19b6\7|\2\2\u19b6\u19b8\tG\2\2\u19b7\u19b9"+
		"\7\31\2\2\u19b8\u19b7\3\2\2\2\u19b8\u19b9\3\2\2\2\u19b9\u19ba\3\2\2\2"+
		"\u19ba\u19bb\tD\2\2\u19bb\u19bc\7\u0172\2\2\u19bc\u0379\3\2\2\2\u19bd"+
		"\u19c5\7\u0350\2\2\u19be\u19c5\5\u037c\u01bf\2\u19bf\u19c5\5\u023c\u011f"+
		"\2\u19c0\u19c5\5\u0238\u011d\2\u19c1\u19c5\5\u0214\u010b\2\u19c2\u19c5"+
		"\5\u0216\u010c\2\u19c3\u19c5\5\u023a\u011e\2\u19c4\u19bd\3\2\2\2\u19c4"+
		"\u19be\3\2\2\2\u19c4\u19bf\3\2\2\2\u19c4\u19c0\3\2\2\2\u19c4\u19c1\3\2"+
		"\2\2\u19c4\u19c2\3\2\2\2\u19c4\u19c3\3\2\2\2\u19c5\u037b\3\2\2\2\u19c6"+
		"\u19c7\tH\2\2\u19c7\u037d\3\2\2\2\u0311\u0381\u0385\u0388\u03b1\u03b6"+
		"\u03b9\u03bf\u03c9\u03cc\u03d2\u03d4\u03da\u03e4\u03ee\u03f0\u03f8\u0401"+
		"\u0407\u040b\u0416\u041e\u0437\u0439\u0444\u0449\u044e\u0451\u0456\u045c"+
		"\u0461\u0469\u046c\u0474\u047c\u0484\u048c\u0494\u049c\u04a3\u04a9\u04ad"+
		"\u04b0\u04b9\u04c4\u04ce\u04d3\u04dc\u04e4\u04ed\u04f4\u04fb\u04ff\u0505"+
		"\u0519\u0522\u0525\u052f\u053d\u054a\u0550\u0554\u055a\u055d\u0561\u0565"+
		"\u056a\u0572\u0579\u0586\u058d\u0598\u059b\u05a1\u05ac\u05af\u05b5\u05c0"+
		"\u05c3\u05c9\u05d4\u05d7\u05dd\u05ea\u05f1\u05f5\u05fc\u05fe\u0607\u060a"+
		"\u060f\u0612\u0616\u061d\u0622\u0627\u0631\u063a\u063d\u0645\u064d\u0650"+
		"\u065b\u0660\u066a\u066f\u0674\u067a\u067d\u0682\u0689\u068b\u0691\u0694"+
		"\u0699\u069f\u06a7\u06a9\u06c6\u06cc\u06ce\u06d4\u06d7\u0700\u0705\u0708"+
		"\u070c\u070f\u071e\u0726\u0731\u073a\u0746\u0749\u0754\u075a\u075d\u0769"+
		"\u0774\u077d\u0788\u078f\u07a8\u07bb\u07c1\u07cb\u07cd\u07da\u07e1\u07e5"+
		"\u07ec\u0809\u080f\u081b\u0821\u0823\u0828\u082e\u0838\u0842\u084f\u0852"+
		"\u0855\u0859\u085f\u0863\u0865\u0869\u086f\u0879\u087d\u0881\u088c\u0891"+
		"\u0894\u0899\u08a3\u08a8\u08b0\u08b3\u08b7\u08ba\u08bd\u08c3\u08c6\u08cc"+
		"\u08d3\u08d7\u08e0\u08e4\u08e8\u08eb\u08ee\u08f3\u08f6\u08f9\u08ff\u0903"+
		"\u0905\u0909\u090e\u091a\u091e\u0922\u0928\u092c\u0935\u0941\u0946\u094f"+
		"\u0957\u095b\u095e\u0963\u0968\u0974\u097d\u0988\u098c\u0990\u0999\u09a5"+
		"\u09b1\u09b6\u09bb\u09bf\u09ca\u09d3\u09d8\u09de\u09e2\u09e7\u09f3\u0a00"+
		"\u0a05\u0a0a\u0a0d\u0a11\u0a18\u0a2a\u0a34\u0a36\u0a48\u0a4d\u0a54\u0a57"+
		"\u0a65\u0a6c\u0a79\u0a7e\u0a82\u0a84\u0a8c\u0a94\u0a9a\u0aa3\u0aa9\u0aaf"+
		"\u0ab3\u0ab8\u0aba\u0ac3\u0ac7\u0ad1\u0ad7\u0add\u0ae2\u0ae6\u0ae9\u0aee"+
		"\u0af2\u0af5\u0afb\u0b00\u0b04\u0b07\u0b0d\u0b11\u0b17\u0b1b\u0b1e\u0b23"+
		"\u0b29\u0b30\u0b36\u0b3d\u0b47\u0b4d\u0b53\u0b58\u0b5c\u0b5f\u0b64\u0b68"+
		"\u0b6b\u0b71\u0b76\u0b7a\u0b7d\u0b83\u0b87\u0b8d\u0b91\u0b94\u0b99\u0b9f"+
		"\u0ba6\u0bac\u0bb2\u0bcf\u0bf0\u0c09\u0c0d\u0c12\u0c1b\u0c21\u0c24\u0c2b"+
		"\u0c2e\u0c31\u0c3b\u0c48\u0c54\u0c61\u0c71\u0c75\u0c7a\u0c85\u0c8d\u0c94"+
		"\u0c9e\u0ca1\u0cb9\u0cc1\u0cc5\u0ccc\u0cd1\u0cd7\u0cde\u0ce2\u0d00\u0d0e"+
		"\u0d21\u0d28\u0d3a\u0d54\u0d57\u0d5b\u0d5f\u0d66\u0d74\u0d81\u0d8e\u0d94"+
		"\u0d9d\u0da2\u0da6\u0db8\u0dc0\u0dc2\u0dcb\u0dcd\u0dd2\u0dde\u0dec\u0df7"+
		"\u0df9\u0dfe\u0e13\u0e1b\u0e1f\u0e23\u0e27\u0e29\u0e32\u0e3f\u0e4a\u0e55"+
		"\u0e58\u0e5c\u0e63\u0e68\u0e72\u0e76\u0e7b\u0e81\u0e85\u0e8f\u0e91\u0e96"+
		"\u0e9e\u0ea3\u0ea5\u0ea7\u0eb1\u0eb9\u0ecc\u0ed9\u0edc\u0edf\u0ee4\u0ee9"+
		"\u0efd\u0f05\u0f19\u0f21\u0f25\u0f2b\u0f2f\u0f33\u0f38\u0f3a\u0f41\u0f46"+
		"\u0f55\u0f5b\u0f5e\u0f65\u0f68\u0f6b\u0f8a\u0f95\u0f9b\u0fa4\u0fb1\u0fb4"+
		"\u0fba\u0fbe\u0fc2\u0fc8\u0fd2\u0fd8\u0fde\u0fe3\u0fe7\u0fea\u0fef\u0ff4"+
		"\u0ffa\u0fff\u1004\u100a\u100e\u1014\u1018\u101b\u1020\u1026\u102b\u1031"+
		"\u1036\u103e\u1040\u104a\u1051\u1053\u1059\u105f\u1063\u106c\u1070\u1072"+
		"\u1081\u108c\u1093\u1097\u109f\u10a3\u10a6\u10aa\u10af\u10b7\u10be\u10ca"+
		"\u10cc\u10d3\u10da\u10de\u10eb\u10f2\u10f6\u1102\u1104\u1107\u110d\u1111"+
		"\u1119\u1121\u112b\u1133\u113b\u1143\u1148\u1159\u1167\u116d\u1171\u1185"+
		"\u118f\u1199\u119f\u11b0\u11b7\u11bf\u11c2\u11c6\u11d2\u1204\u120b\u120e"+
		"\u1221\u1226\u122f\u1237\u123c\u1240\u1247\u1253\u125c\u1269\u1271\u127d"+
		"\u1282\u128b\u1290\u1294\u1297\u129e\u12a4\u12bc\u12ca\u12cc\u12ce\u12db"+
		"\u12dd\u12e5\u12ee\u12f5\u12fa\u12fe\u1304\u130c\u130f\u1315\u131a\u132c"+
		"\u132e\u133a\u1341\u134a\u135e\u1363\u136c\u1372\u1378\u1394\u139a\u13a0"+
		"\u13a5\u13aa\u13ae\u13b1\u13bc\u13c7\u13ca\u13d3\u13d6\u13dc\u13e5\u13ec"+
		"\u13fd\u1407\u1414\u1421\u142b\u1430\u1432\u1438\u1443\u144b\u144e\u1453"+
		"\u1459\u145d\u1464\u1468\u1477\u1481\u1489\u14a3\u14ad\u14b7\u14c4\u14d1"+
		"\u14d6\u14da\u14e0\u14e5\u14ea\u14f2\u14f9\u14fc\u1502\u1509\u1514\u151e"+
		"\u1524\u152a\u152f\u1533\u1536\u153b\u153e\u1544\u1549\u154c\u1552\u1555"+
		"\u155b\u155f\u1562\u1567\u156d\u1574\u157a\u1581\u1587\u158e\u1595\u1598"+
		"\u15a1\u15ae\u15c1\u15c4\u15c9\u15cd\u15da\u15de\u15e1\u15eb\u15f7\u1609"+
		"\u160d\u1620\u1623\u1628\u162c\u1632\u1635\u163a\u163e\u1644\u164b\u1652"+
		"\u165e\u1665\u1695\u169a\u16a1\u16a9\u16ad\u16b3\u16b6\u16bf\u16c3\u16c8"+
		"\u16ce\u16d2\u16db\u16e0\u16e6\u16ed\u16f1\u16f7\u16fe\u1702\u1706\u1719"+
		"\u171f\u1729\u172f\u1732\u1737\u1739\u1740\u1745\u1747\u1757\u175d\u1767"+
		"\u176d\u1770\u1775\u1777\u177e\u1787\u178d\u178f\u1795\u1799\u17aa\u17ba"+
		"\u17bd\u17c3\u17cb\u17d6\u17de\u17e4\u17ea\u17ee\u17f3\u17f8\u17fc\u1801"+
		"\u180d\u1819\u181d\u1823\u1828\u182c\u1832\u1835\u183c\u1844\u1849\u184d"+
		"\u1852\u185e\u1868\u1872\u187d\u1883\u1887\u1893\u189b\u189f\u18a2\u18a9"+
		"\u18bb\u18c2\u18ca\u18cd\u18d2\u18d5\u18d8\u18db\u18de\u18e1\u18e9\u18ec"+
		"\u18f2\u18f5\u18f8\u18fb\u18fe\u1901\u1905\u1908\u1910\u1913\u191c\u191e"+
		"\u1928\u1939\u193c\u194a\u194e\u1952\u196b\u196f\u1976\u197a\u197e\u1981"+
		"\u1984\u198e\u1993\u1999\u199e\u19a2\u19aa\u19af\u19b8\u19c4";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}
// Generated from src/DB2zSQLParser.g4 by ANTLR 4.7.2
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class DB2zSQLParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.7.2", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		LPAREN=1, RPAREN=2, OPENSQBRACKET=3, CLOSESQBRACKET=4, QUESTIONMARK=5, 
		EQ=6, GT=7, LT=8, GE=9, LE=10, NE=11, PLUS=12, MINUS=13, SPLAT=14, SLASH=15, 
		CONCATOP=16, DOT=17, COLON=18, SEMICOLON=19, COMMA=20, NONNUMERICLITERAL=21, 
		INTEGERLITERAL=22, NUMERICLITERAL=23, NEWLINE=24, WS=25, SQLCOMMENT=26, 
		SQLBLOCKCOMMENTBEGIN=27, SQLBLOCKCOMMENTEND=28, ADD=29, AFTER=30, ALL=31, 
		ALLOCATE=32, ALLOW=33, ALTER=34, ALTERAND=35, ANY=36, ARRAY=37, ARRAY_EXISTS=38, 
		AS=39, ASENSITIVE=40, ASSOCIATE=41, ASUTIME=42, AT=43, AUDIT=44, AUX=45, 
		AUXILIARY=46, BEFORE=47, BEGIN=48, BETWEEN=49, BUFFERPOOL=50, BY=51, CALL=52, 
		CAPTURE=53, CASCADED=54, CASE=55, CAST=56, CCSID=57, CHAR=58, CHARACTER=59, 
		CHECK=60, CLONE=61, CLOSE=62, CLUSTER=63, COLLECTION=64, COLLID=65, COLUMN=66, 
		COMMENT=67, COMMIT=68, CONCAT=69, CONDITION=70, CONNECT=71, CONNECTION=72, 
		CONSTRAINT=73, CONTAINS=74, CONTENT=75, CONTINUE=76, CREATE=77, CUBE=78, 
		CURRENT=79, CURRENT_LC_CTYPE=80, CURRVAL=81, CURSOR=82, DATA=83, DATABASE=84, 
		DAY=85, DAYS=86, DBINFO=87, DECLARE=88, DEFAULT=89, DELETE=90, DESCRIPTOR=91, 
		DETERMINISTIC=92, DISABLE=93, DISALLOW=94, DISTINCT=95, DO=96, DOCUMENT=97, 
		DOUBLE=98, DROP=99, DSSIZE=100, DYNAMIC=101, EDITPROC=102, ELSE=103, ELSEIF=104, 
		ENCODING=105, ENCRYPTION=106, END=107, END_EXEC=108, ENDING=109, ERASE=110, 
		ESCAPE=111, EXCEPT=112, EXCEPTION=113, EXEC_SQL=114, EXECUTE=115, EXISTS=116, 
		EXIT=117, EXPLAIN=118, EXTERNAL=119, FENCED=120, FETCH=121, FIELDPROC=122, 
		FINAL=123, FIRST=124, FOR=125, FREE=126, FROM=127, FULL=128, FUNCTION=129, 
		GENERATED=130, GET=131, GLOBAL=132, GO=133, GOTO=134, GRANT=135, GROUP=136, 
		HANDLER=137, HAVING=138, HOLD=139, HOUR=140, HOURS=141, IF=142, IMMEDIATE=143, 
		IN=144, INCLUSIVE=145, INDEX=146, INDEXBP=147, INHERIT=148, INNER=149, 
		INOUT=150, INSENSITIVE=151, INSERT=152, INTERSECT=153, INTO=154, IS=155, 
		ISOBID=156, ITERATE=157, JAR=158, JOIN=159, KEEP=160, KEY=161, LABEL=162, 
		LANGUAGE=163, LAST=164, LC_CTYPE=165, LEAVE=166, LEFT=167, LIKE=168, LIMIT=169, 
		LOCAL=170, LOCALE=171, LOCATOR=172, LOCATORS=173, LOCK=174, LOCKMAX=175, 
		LOCKSIZE=176, LONG=177, LOOP=178, MAINTAINED=179, MATERIALIZED=180, MICROSECOND=181, 
		MICROSECONDS=182, MINUTEMINUTES=183, MODIFIES=184, MONTH=185, MONTHS=186, 
		NEXT=187, NEXTVAL=188, NO=189, NONE=190, NOT=191, NULL=192, NULLS=193, 
		NUMPARTS=194, OBID=195, OF=196, OFFSET=197, OLD=198, ON=199, OPEN=200, 
		OPTIMIZATION=201, OPTIMIZE=202, OR=203, ORDER=204, ORGANIZATION=205, OUT=206, 
		OUTER=207, PACKAGE=208, PADDED=209, PARAMETER=210, PART=211, PARTITION=212, 
		PARTITIONED=213, PARTITIONING=214, PATH=215, PERIOD=216, PIECESIZE=217, 
		PLAN=218, PRECISION=219, PREPARE=220, PREVVAL=221, PRIOR=222, PRIQTY=223, 
		PRIVILEGES=224, PROCEDURE=225, PROGRAM=226, PSID=227, PUBLIC=228, QUERY=229, 
		QUERYNO=230, READS=231, REFERENCES=232, REFRESH=233, RELEASE=234, RENAME=235, 
		REPEAT=236, RESIGNAL=237, RESTRICT=238, RESULT=239, RESULT_SET_LOCATOR=240, 
		RETURN=241, RETURNS=242, REVOKE=243, RIGHT=244, ROLE=245, ROLLBACK=246, 
		ROLLUP=247, ROUND_CEILING=248, ROUND_DOWN=249, ROUND_FLOOR=250, ROUND_HALF_DOWN=251, 
		ROUND_HALF_EVEN=252, ROUND_HALF_UP=253, ROUND_UP=254, ROW=255, ROWSET=256, 
		RUN=257, SAVEPOINT=258, SCHEMA=259, SCRATCHPAD=260, SECOND=261, SECONDS=262, 
		SECQTY=263, SECURITY=264, SELECT=265, SENSITIVE=266, SEQUENCE=267, SET=268, 
		SIGNAL=269, SIMPLE=270, SOME=271, SOURCE=272, SPECIFIC=273, STANDARD=274, 
		STATEMENT=275, STATIC=276, STAY=277, STOGROUP=278, STORES=279, STYLE=280, 
		SUMMARY=281, SYNONYM=282, SYSDATE=283, SYSTEM=284, SYSTIMESTAMP=285, TABLE=286, 
		TABLESPACE=287, THEN=288, TO=289, TRIGGER=290, TRUNCATE=291, TYPE=292, 
		UNDO=293, UNION=294, UNIQUE=295, UNTIL=296, UPDATE=297, USING=298, VALIDPROC=299, 
		VALUE=300, VALUES=301, VARIABLE=302, VARIANT=303, VCAT=304, VERSIONING=305, 
		VIEW=306, VOLATILE=307, VOLUMES=308, WHEN=309, WHENEVER=310, WHERE=311, 
		WHILE=312, WITH=313, WLM=314, XMLCAST=315, XMLEXISTS=316, XMLNAMESPACES=317, 
		YEAR=318, YEARS=319, ZONE=320, AND=321, ARRAY_AGG=322, ASC=323, AVG=324, 
		BIT=325, CHANGE=326, CODEUNITS16=327, CODEUNITS32=328, CORR=329, CORRELATION=330, 
		COUNT=331, COUNT_BIG=332, COVAR=333, COVARIANCE=334, COVARIANCE_SAMP=335, 
		COVAR_POP=336, COVAR_SAMP=337, CS=338, CUME_DIST=339, DENSE_RANK=340, 
		DESC=341, EBCDIC=342, EXCLUSIVE=343, FIRST_VALUE=344, FOLLOWING=345, GROUPING=346, 
		IGNORE=347, INDICATOR=348, INPUT=349, ISNULL=350, LAG=351, LARGE=352, 
		LAST_VALUE=353, LEAD=354, LISTAGG=355, LOCKED=356, LOCKS=357, MEDIAN=358, 
		MINUTES=359, MIXED=360, NOTNULL=361, NTH_VALUE=362, NTILE=363, NUMERIC=364, 
		OBJECT=365, OCTETS=366, ONLY=367, OVER=368, PASSING=369, PERCENTILE_CONT=370, 
		PERCENTILE_DISC=371, PERCENT_RANK=372, PRECEDING=373, PREVIOUS=374, RANGE=375, 
		RANK=376, RATIO_TO_REPORT=377, READ=378, REF=379, REGR_AVGX=380, REGR_AVGY=381, 
		REGR_COUNT=382, REGR_ICPT=383, REGR_INTERCEPT=384, REGR_R2=385, REGR_SLOPE=386, 
		REGR_SXX=387, REGR_SXY=388, REGR_SYY=389, RESPECT=390, ROW_NUMBER=391, 
		ROWS=392, RR=393, RS=394, SBCS=395, SELECTIVITY=396, SETS=397, SHARE=398, 
		SKIP_=399, STDDEV=400, STDDEV_POP=401, STDDEV_SAMP=402, SUM=403, TOKEN=404, 
		UNBOUNDED=405, UNPACK=406, UR=407, USE=408, VAR=409, VARIANCE=410, VARIANCE_SAMP=411, 
		VAR_POP=412, VAR_SAMP=413, VARYING=414, WITHOUT=415, XML=416, XMLAGG=417, 
		COLUMNS=418, SQLID=419, ORDINALITY=420, SYSTEM_TIME=421, BUSINESS_TIME=422, 
		MULTIPLIER=423, UNNEST=424, CROSS=425, CALLER=426, CLIENT=427, POSITIONING=428, 
		SCROLL=429, ACTION=430, ASSEMBLE=431, C_=432, CALLED=433, COBOL=434, DB2=435, 
		DEFINER=436, DISPATCH=437, ENVIRONMENT=438, FAILURE=439, FAILURES=440, 
		JAVA=441, MAIN=442, NAME=443, OPTIONS=444, PARALLEL=445, PLI=446, REGISTERS=447, 
		RESIDENT=448, SECURED=449, SPECIAL=450, SQL=451, STOP=452, SUB=453, YES=454, 
		APPLICATION=455, CHANGED=456, COMPATIBILITY=457, COMPRESS=458, COPY=459, 
		FREEPAGE=460, GBPCACHE=461, INCLUDE=462, MAXVALUE=463, MINVALUE=464, PCTFREE=465, 
		REGENERATE=466, SEQTY=467, MASK=468, ENABLE=469, PERMISSION=470, ATOMIC=471, 
		SQLEXCEPTION=472, MERGE=473, MATCHED=474, SQLSTATE=475, MESSAGE_TEXT=476, 
		OVERRIDING=477, PORTION=478, DB2SQL=479, DEBUG=480, GENERAL=481, MODE_=482, 
		REXX=483, CACHE=484, CYCLE=485, INCREMENT=486, RESTART=487, DATACLAS=488, 
		MGMTCLAS=489, REMOVE=490, STORCLAS=491, ACCESS=492, ACTIVATE=493, ALWAYS=494, 
		APPEND=495, ARCHIVE=496, BUSINESS=497, CASCADE=498, CHANGES=499, CONTROL=500, 
		DEACTIVATE=501, DEFERRED=502, EACH=503, ENFORCED=504, EXTRA=505, FOREIGN=506, 
		HIDDEN_=507, HISTORY=508, ID=509, IDENTITY=510, IMPLICITLY=511, INITIALLY=512, 
		INLINE=513, OPERATION=514, ORGANIZE=515, OVERLAPS=516, PACKAGE_NAME=517, 
		PACKAGE_SCHEMA=518, PACKAGE_VERSION=519, PRIMARY=520, RESET=521, ROTATE=522, 
		START=523, SYSIBM=524, TRANSACTION=525, ABS=526, ABSVAL=527, ACOS=528, 
		ADD_DAYS=529, ADD_MONTHS=530, ARRAY_DELETE=531, ARRAY_FIRST=532, ARRAY_LAST=533, 
		ARRAY_NEXT=534, ARRAY_PRIOR=535, ARRAY_TRIM=536, ASCII=537, ASCII_CHR=538, 
		ASCIISTR=539, ASCII_STR=540, ASIN=541, ATAN=542, ATAN2=543, ATANH=544, 
		BIGINT=545, BINARY=546, BITAND=547, BITANDNOT=548, BITNOT=549, BITOR=550, 
		BITXOR=551, BLOB=552, BTRIM=553, CARDINALITY=554, CCSID_ENCODING=555, 
		CEIL=556, CEILING=557, CHAR9=558, CHARACTER_LENGTH=559, CHAR_LENGTH=560, 
		CHR=561, CLOB=562, COALESCE=563, COLLATION_KEY=564, COMPARE_DECFLOAT=565, 
		COS=566, COSH=567, DATE=568, DAYOFMONTH=569, DAYOFWEEK=570, DAYOFWEEK_ISO=571, 
		DAYOFYEAR=572, DAYS_BETWEEN=573, DBCLOB=574, DEC=575, DECFLOAT=576, DECFLOAT_FORMAT=577, 
		DECFLOAT_SORTKEY=578, DECIMAL=579, DECODE=580, DECRYPT_BINARY=581, DECRYPT_BIT=582, 
		DECRYPT_CHAR=583, DECRYPT_DATAKEY_BIGINT=584, DECRYPT_DATAKEY_BIT=585, 
		DECRYPT_DATAKEY_CLOB=586, DECRYPT_DATAKEY_DBCLOB=587, DECRYPT_DATAKEY_DECIMAL=588, 
		DECRYPT_DATAKEY_INTEGER=589, DECRYPT_DATAKEY_VARCHAR=590, DECRYPT_DATAKEY_VARGRAPHIC=591, 
		DECRYPT_DB=592, DEGREES=593, DIFFERENCE=594, DIGITS=595, DOUBLE_PRECISION=596, 
		DSN_XMLVALIDATE=597, EBCDIC_CHR=598, EBCDIC_STR=599, ENCRYPT_DATAKEY=600, 
		ENCRYPT_TDES=601, EXP=602, EXTRACT=603, FLOAT=604, FLOOR=605, GENERATE_UNIQUE=606, 
		GENERATE_UNIQUE_BINARY=607, GETHINT=608, GETVARIABLE=609, GRAPHIC=610, 
		GREATEST=611, HASH=612, HASH_CRC32=613, HASH_MD5=614, HASH_SHA1=615, HASH_SHA256=616, 
		HEX=617, IDENTITY_VAL_LOCAL=618, IFNULL=619, INSTR=620, INT=621, INTEGER=622, 
		JULIAN_DAY=623, LAST_DAY=624, LCASE=625, LEAST=626, LENGTH=627, LN=628, 
		LOCATE=629, LOCATE_IN_STRING=630, LOG10=631, LOWER=632, LPAD=633, LTRIM=634, 
		MAX=635, MAX_CARDINALITY=636, MIDNIGHT_SECONDS=637, MIN=638, MINUTE=639, 
		MOD=640, MONTHS_BETWEEN=641, MQREAD=642, MQREADCLOB=643, MQRECEIVE=644, 
		MQRECEIVECLOB=645, MQSEND=646, MULTIPLY_ALT=647, NEXT_DAY=648, NEXT_MONTH=649, 
		NORMALIZE_DECFLOAT=650, NORMALIZE_STRING=651, NULLIF=652, NVL=653, OVERLAY=654, 
		PACK=655, POSITION=656, POSSTR=657, POW=658, POWER=659, QUANTIZE=660, 
		QUARTER=661, RADIANS=662, RAISE_ERROR=663, RAND=664, RANDOM=665, REAL=666, 
		REGEXP_COUNT=667, REGEXP_INSTR=668, REGEXP_LIKE=669, REGEXP_REPLACE=670, 
		REGEXP_SUBSTR=671, REPLACE=672, RID=673, ROUND=674, ROUND_TIMESTAMP=675, 
		ROWID=676, RPAD=677, RTRIM=678, SCORE=679, SIGN=680, SIN=681, SINH=682, 
		SMALLINT=683, SOAPHTTPC=684, SOAPHTTPNC=685, SOAPHTTPNV=686, SOAPHTTPV=687, 
		SOUNDEX=688, SPACE=689, SQRT=690, STRIP=691, STRLEFT=692, STRPOS=693, 
		STRRIGHT=694, SUBSTR=695, SUBSTRING=696, TAN=697, TANH=698, TIME=699, 
		TIMESTAMP=700, TIMESTAMPADD=701, TIMESTAMPDIFF=702, TIMESTAMP_FORMAT=703, 
		TIMESTAMP_ISO=704, TIMESTAMP_TZ=705, TO_CHAR=706, TO_CLOB=707, TO_DATE=708, 
		TO_NUMBER=709, TOTALORDER=710, TO_TIMESTAMP=711, TRANSLATE=712, TRIM=713, 
		TRIM_ARRAY=714, TRUNC=715, TRUNC_TIMESTAMP=716, UCASE=717, UNICODE=718, 
		UNICODE_STR=719, UNISTR=720, UPPER=721, VARBINARY=722, VARCHAR=723, VARCHAR9=724, 
		VARCHAR_BIT_FORMAT=725, VARCHAR_FORMAT=726, VARGRAPHIC=727, VERIFY_GROUP_FOR_USER=728, 
		VERIFY_ROLE_FOR_USER=729, VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER=730, WEEK=731, 
		WEEK_ISO=732, WRAP=733, XMLATTRIBUTES=734, XMLCOMMENT=735, XMLCONCAT=736, 
		XMLDOCUMENT=737, XMLELEMENT=738, XMLFOREST=739, XMLMODIFY=740, XMLPARSE=741, 
		XMLPI=742, XMLQUERY=743, XMLSERIALIZE=744, XMLTEXT=745, XMLXSROBJECTID=746, 
		XSLTRANSFORM=747, CURRENT_ACCELERATOR=748, CURRENT_APPLICATION_COMPATIBILITY=749, 
		CURRENT_APPLICATION_ENCODING_SCHEME=750, CURRENT_CLIENT_ACCTNG=751, CURRENT_CLIENT_APPLNAME=752, 
		CURRENT_CLIENT_CORR_TOKEN=753, CURRENT_CLIENT_USERID=754, CURRENT_CLIENT_WRKSTNNAME=755, 
		CURRENT_DATE=756, CURRENT_DEBUG_MODE=757, CURRENT_DECFLOAT_ROUNDING_MODE=758, 
		CURRENT_DEGREE=759, CURRENT_EXPLAIN_MODE=760, CURRENT_GET_ACCEL_ARCHIVE=761, 
		CURRENT_LOCALE_LC_CTYPE=762, CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION=763, 
		CURRENT_MEMBER=764, CURRENT_OPTIMIZATION_HINT=765, CURRENT_PACKAGE_PATH=766, 
		CURRENT_PACKAGESET=767, CURRENT_PATH=768, CURRENT_PRECISION=769, CURRENT_QUERY_ACCELERATION=770, 
		CURRENT_QUERY_ACCELERATION_WAITFORDATA=771, CURRENT_REFRESH_AGE=772, CURRENT_ROUTINE_VERSION=773, 
		CURRENT_RULES=774, CURRENT_SCHEMA=775, CURRENT_SERVER=776, CURRENT_SQLID=777, 
		CURRENT_TEMPORAL_BUSINESS_TIME=778, CURRENT_TEMPORAL_SYSTEM_TIME=779, 
		CURRENT_TIME=780, CURRENT_TIMESTAMP=781, CURRENT_TIME_ZONE=782, ENCRYPTION_PASSWORD=783, 
		SESSION_TIME_ZONE=784, SESSION_USER=785, USER=786, ADMIN_TASK_LIST=787, 
		ADMIN_TASK_OUTPUT=788, ADMIN_TASK_STATUS=789, BLOCKING_THREADS=790, MQREADALL=791, 
		MQREADALLCLOB=792, MQRECEIVEALL=793, MQRECEIVEALLCLOB=794, XMLTABLE=795, 
		SQLIDENTIFIER=796;
	public static final int
		RULE_startRule = 0, RULE_sqlStatement = 1, RULE_query = 2, RULE_declareCursorStatement = 3, 
		RULE_cursorName = 4, RULE_statementName = 5, RULE_holdability = 6, RULE_returnability = 7, 
		RULE_rowsetPositioning = 8, RULE_declareTableStatement = 9, RULE_notNullPhrase = 10, 
		RULE_declareStatementStatement = 11, RULE_allocateCursorStatement = 12, 
		RULE_rsLocatorVariable = 13, RULE_alterDatabaseStatement = 14, RULE_alterFunctionStatement = 15, 
		RULE_alterIndexStatement = 16, RULE_alterMaskStatement = 17, RULE_alterPermissionStatement = 18, 
		RULE_alterProcedureStatement = 19, RULE_alterSequenceStatement = 20, RULE_alterStogroupStatement = 21, 
		RULE_alterTableStatement = 22, RULE_searchedDelete = 23, RULE_positionedDelete = 24, 
		RULE_deleteStatement = 25, RULE_insertStatement = 26, RULE_mergeStatement = 27, 
		RULE_searchedUpdate = 28, RULE_positionedUpdate = 29, RULE_updateStatement = 30, 
		RULE_sourceValues = 31, RULE_valuesSingleRow = 32, RULE_valuesMultipleRow = 33, 
		RULE_matchingCondition = 34, RULE_modificationOperation = 35, RULE_assignmentClause = 36, 
		RULE_updateOperation = 37, RULE_deleteOperation = 38, RULE_insertOperation = 39, 
		RULE_signalStatement = 40, RULE_signalInformation = 41, RULE_valuesList1 = 42, 
		RULE_valuesList2 = 43, RULE_valuesList3 = 44, RULE_valuesList4 = 45, RULE_includeColumns = 46, 
		RULE_multipleRowInsert = 47, RULE_regenerateClause = 48, RULE_alterIndexOptions = 49, 
		RULE_alterIndexPartitionOptions = 50, RULE_usingSpecification = 51, RULE_freeSpecification = 52, 
		RULE_gbpcacheSpecification = 53, RULE_partitionElement = 54, RULE_applCompatValue = 55, 
		RULE_functionLevel = 56, RULE_functionParameterType = 57, RULE_functionDataType = 58, 
		RULE_functionOptionList = 59, RULE_procedureOptionList = 60, RULE_sequenceOptionList = 61, 
		RULE_stogroupOptionList = 62, RULE_tableOptionList = 63, RULE_columnDefinitionOptionList1 = 64, 
		RULE_columnDefinitionOptionList2 = 65, RULE_columnConstraint = 66, RULE_generatedClause = 67, 
		RULE_asIdentityClause = 68, RULE_asIdentityClauseOptionList = 69, RULE_asRowChangeTimestampClause = 70, 
		RULE_asRowTransactionStartIDClause = 71, RULE_asRowTransactionTimestampClause = 72, 
		RULE_asGeneratedExpressionClause = 73, RULE_nonDeterministicExpression = 74, 
		RULE_nonDeterministicExpressionSessionVariable = 75, RULE_columnAlteration = 76, 
		RULE_columnAlterationOptionList = 77, RULE_alteredDataType = 78, RULE_dataType = 79, 
		RULE_builtInType = 80, RULE_identityAlteration = 81, RULE_uniqueConstraint = 82, 
		RULE_referentialConstraint = 83, RULE_referencesClause = 84, RULE_checkConstraint = 85, 
		RULE_partitioningClause = 86, RULE_partitionExpression = 87, RULE_partitionLimitKey = 88, 
		RULE_partitioningPhrase = 89, RULE_partitionHashSpace = 90, RULE_alterHashOrganization = 91, 
		RULE_partitioningClauseElement = 92, RULE_partitionClause = 93, RULE_rotatePartitionClause = 94, 
		RULE_extraRowOption = 95, RULE_materializedQueryDefinition = 96, RULE_materializedQueryAlteration = 97, 
		RULE_refreshableTableOptions = 98, RULE_refreshableTableOptionsList = 99, 
		RULE_materializedQueryTableAlteration = 100, RULE_periodDefinition = 101, 
		RULE_columnDefinition = 102, RULE_externalProgramName = 103, RULE_packagePath = 104, 
		RULE_collectionID = 105, RULE_runTimeOptions = 106, RULE_comparisonOperator = 107, 
		RULE_operator = 108, RULE_expression = 109, RULE_rowChangeExpression = 110, 
		RULE_sequenceReference = 111, RULE_functionInvocation = 112, RULE_scalarFunctionInvocation = 113, 
		RULE_aggregateFunctionInvocation = 114, RULE_regressionFunctionInvocation = 115, 
		RULE_externalFunctionInvocation = 116, RULE_labeledDuration = 117, RULE_xmlCastSpecification = 118, 
		RULE_arrayElementSpecification = 119, RULE_arrayIndex = 120, RULE_arrayConstructor = 121, 
		RULE_olapSpecification = 122, RULE_orderedOlapSpecification = 123, RULE_olapSpecificationFunction = 124, 
		RULE_lagFunction = 125, RULE_leadFunction = 126, RULE_respectNullsClause = 127, 
		RULE_windowPartitionClause = 128, RULE_windowOrderClause = 129, RULE_windowOrderClauseQualifier = 130, 
		RULE_numberingSpecification = 131, RULE_aggregationSpecification = 132, 
		RULE_aggregateFunction = 133, RULE_regressionFunction = 134, RULE_olapColumnFunction = 135, 
		RULE_firstValueFunction = 136, RULE_lastValueFunction = 137, RULE_nthValueFunction = 138, 
		RULE_ratioToReportFunction = 139, RULE_windowAggregationGroupClause = 140, 
		RULE_groupStart = 141, RULE_groupBetween = 142, RULE_groupEnd = 143, RULE_groupBound1 = 144, 
		RULE_groupBound2 = 145, RULE_unboundedPreceding = 146, RULE_unboundedFollowing = 147, 
		RULE_boundedPreceding = 148, RULE_boundedFollowing = 149, RULE_currentRow = 150, 
		RULE_scalarFunction = 151, RULE_tableFunction = 152, RULE_specialRegister = 153, 
		RULE_xmltableFunctionSpecification = 154, RULE_rowXqueryExpressionConstant = 155, 
		RULE_rowXqueryArgument = 156, RULE_xqueryContextItemExpression = 157, 
		RULE_xqueryVariableExpression = 158, RULE_xmlTableRegularColumnDefinition = 159, 
		RULE_defaultClause = 160, RULE_defaultClause1 = 161, RULE_defaultClause2 = 162, 
		RULE_defaultClauseAllowables = 163, RULE_distinctTypeCastFunctionName = 164, 
		RULE_columnXqueryExpressionConstant = 165, RULE_xmlTableOrdinalityColumnDefinition = 166, 
		RULE_xmlnamespacesDeclaration = 167, RULE_xmlnamespacesFunctionSpecification = 168, 
		RULE_xmlnamespacesFunctionArguments = 169, RULE_namespaceUri = 170, RULE_namespacePrefix = 171, 
		RULE_timeZoneSpecificExpression = 172, RULE_timeZoneExpressionSubset = 173, 
		RULE_caseExpression = 174, RULE_resultExpression = 175, RULE_searchedWhenClause = 176, 
		RULE_simpleWhenClause = 177, RULE_searchCondition = 178, RULE_checkCondition = 179, 
		RULE_predicate = 180, RULE_basicPredicate = 181, RULE_rowValueExpression = 182, 
		RULE_quantifiedPredicate = 183, RULE_arrayExistsPredicate = 184, RULE_betweenPredicate = 185, 
		RULE_distinctPredicate = 186, RULE_existsPredicate = 187, RULE_inPredicate = 188, 
		RULE_likePredicate = 189, RULE_nullPredicate = 190, RULE_xmlExistsPredicate = 191, 
		RULE_arrayExpression = 192, RULE_castSpecification = 193, RULE_parameterMarker = 194, 
		RULE_castDataType = 195, RULE_castBuiltInType = 196, RULE_integerInParens = 197, 
		RULE_length = 198, RULE_ccsidQualifier = 199, RULE_forDataQualifier = 200, 
		RULE_distinctTypeName = 201, RULE_arrayType = 202, RULE_literal = 203, 
		RULE_ccsidValue = 204, RULE_columnName = 205, RULE_sourceColumnName = 206, 
		RULE_targetColumnName = 207, RULE_newColumnName = 208, RULE_beginColumnName = 209, 
		RULE_endColumnName = 210, RULE_correlationName = 211, RULE_locationName = 212, 
		RULE_schemaName = 213, RULE_tableName = 214, RULE_alterTableName = 215, 
		RULE_historyTableName = 216, RULE_cloneTableName = 217, RULE_archiveTableName = 218, 
		RULE_programName = 219, RULE_constraintName = 220, RULE_indexName = 221, 
		RULE_maskName = 222, RULE_permissionName = 223, RULE_procedureName = 224, 
		RULE_sequenceName = 225, RULE_databaseName = 226, RULE_catalogName = 227, 
		RULE_bpName = 228, RULE_stogroupName = 229, RULE_dcName = 230, RULE_mcName = 231, 
		RULE_scName = 232, RULE_volumeID = 233, RULE_keyLabelName = 234, RULE_functionName = 235, 
		RULE_specificName = 236, RULE_hostVariable = 237, RULE_hostIdentifier = 238, 
		RULE_hostStructure = 239, RULE_variable = 240, RULE_intoClause = 241, 
		RULE_correlationClause = 242, RULE_fromClause = 243, RULE_tableReference = 244, 
		RULE_singleTableReference = 245, RULE_periodSpecification = 246, RULE_periodClause = 247, 
		RULE_nestedTableExpression = 248, RULE_dataChangeTableReference = 249, 
		RULE_tableFunctionReference = 250, RULE_tableUdfCardinalityClause = 251, 
		RULE_typedCorrelationClause = 252, RULE_tableLocatorReference = 253, RULE_xmltableExpression = 254, 
		RULE_collectionDerivedTable = 255, RULE_joinCondition = 256, RULE_fullJoinExpression = 257, 
		RULE_castFunction = 258, RULE_ordinaryArrayExpression = 259, RULE_associativeArrayExpression = 260, 
		RULE_comparison = 261, RULE_whereClause = 262, RULE_groupByClause = 263, 
		RULE_havingClause = 264, RULE_groupingExpression = 265, RULE_groupingSets = 266, 
		RULE_groupingSetsGroup = 267, RULE_superGroups = 268, RULE_selectColumns = 269, 
		RULE_unpackedRow = 270, RULE_selectClause = 271, RULE_subSelect = 272, 
		RULE_selectIntoStatement = 273, RULE_selectStatement = 274, RULE_commonTableExpression = 275, 
		RULE_updateClause = 276, RULE_readOnlyClause = 277, RULE_optimizeClause = 278, 
		RULE_isolationClause = 279, RULE_lockClause = 280, RULE_skipLockedDataClause = 281, 
		RULE_querynoClause = 282, RULE_scalarFullSelect = 283, RULE_fullSelect = 284, 
		RULE_valuesClause = 285, RULE_orderByClause = 286, RULE_sortKey = 287, 
		RULE_offsetClause = 288, RULE_fetchClause = 289, RULE_identifier = 290, 
		RULE_sqlKeyword = 291;
	private static String[] makeRuleNames() {
		return new String[] {
			"startRule", "sqlStatement", "query", "declareCursorStatement", "cursorName", 
			"statementName", "holdability", "returnability", "rowsetPositioning", 
			"declareTableStatement", "notNullPhrase", "declareStatementStatement", 
			"allocateCursorStatement", "rsLocatorVariable", "alterDatabaseStatement", 
			"alterFunctionStatement", "alterIndexStatement", "alterMaskStatement", 
			"alterPermissionStatement", "alterProcedureStatement", "alterSequenceStatement", 
			"alterStogroupStatement", "alterTableStatement", "searchedDelete", "positionedDelete", 
			"deleteStatement", "insertStatement", "mergeStatement", "searchedUpdate", 
			"positionedUpdate", "updateStatement", "sourceValues", "valuesSingleRow", 
			"valuesMultipleRow", "matchingCondition", "modificationOperation", "assignmentClause", 
			"updateOperation", "deleteOperation", "insertOperation", "signalStatement", 
			"signalInformation", "valuesList1", "valuesList2", "valuesList3", "valuesList4", 
			"includeColumns", "multipleRowInsert", "regenerateClause", "alterIndexOptions", 
			"alterIndexPartitionOptions", "usingSpecification", "freeSpecification", 
			"gbpcacheSpecification", "partitionElement", "applCompatValue", "functionLevel", 
			"functionParameterType", "functionDataType", "functionOptionList", "procedureOptionList", 
			"sequenceOptionList", "stogroupOptionList", "tableOptionList", "columnDefinitionOptionList1", 
			"columnDefinitionOptionList2", "columnConstraint", "generatedClause", 
			"asIdentityClause", "asIdentityClauseOptionList", "asRowChangeTimestampClause", 
			"asRowTransactionStartIDClause", "asRowTransactionTimestampClause", "asGeneratedExpressionClause", 
			"nonDeterministicExpression", "nonDeterministicExpressionSessionVariable", 
			"columnAlteration", "columnAlterationOptionList", "alteredDataType", 
			"dataType", "builtInType", "identityAlteration", "uniqueConstraint", 
			"referentialConstraint", "referencesClause", "checkConstraint", "partitioningClause", 
			"partitionExpression", "partitionLimitKey", "partitioningPhrase", "partitionHashSpace", 
			"alterHashOrganization", "partitioningClauseElement", "partitionClause", 
			"rotatePartitionClause", "extraRowOption", "materializedQueryDefinition", 
			"materializedQueryAlteration", "refreshableTableOptions", "refreshableTableOptionsList", 
			"materializedQueryTableAlteration", "periodDefinition", "columnDefinition", 
			"externalProgramName", "packagePath", "collectionID", "runTimeOptions", 
			"comparisonOperator", "operator", "expression", "rowChangeExpression", 
			"sequenceReference", "functionInvocation", "scalarFunctionInvocation", 
			"aggregateFunctionInvocation", "regressionFunctionInvocation", "externalFunctionInvocation", 
			"labeledDuration", "xmlCastSpecification", "arrayElementSpecification", 
			"arrayIndex", "arrayConstructor", "olapSpecification", "orderedOlapSpecification", 
			"olapSpecificationFunction", "lagFunction", "leadFunction", "respectNullsClause", 
			"windowPartitionClause", "windowOrderClause", "windowOrderClauseQualifier", 
			"numberingSpecification", "aggregationSpecification", "aggregateFunction", 
			"regressionFunction", "olapColumnFunction", "firstValueFunction", "lastValueFunction", 
			"nthValueFunction", "ratioToReportFunction", "windowAggregationGroupClause", 
			"groupStart", "groupBetween", "groupEnd", "groupBound1", "groupBound2", 
			"unboundedPreceding", "unboundedFollowing", "boundedPreceding", "boundedFollowing", 
			"currentRow", "scalarFunction", "tableFunction", "specialRegister", "xmltableFunctionSpecification", 
			"rowXqueryExpressionConstant", "rowXqueryArgument", "xqueryContextItemExpression", 
			"xqueryVariableExpression", "xmlTableRegularColumnDefinition", "defaultClause", 
			"defaultClause1", "defaultClause2", "defaultClauseAllowables", "distinctTypeCastFunctionName", 
			"columnXqueryExpressionConstant", "xmlTableOrdinalityColumnDefinition", 
			"xmlnamespacesDeclaration", "xmlnamespacesFunctionSpecification", "xmlnamespacesFunctionArguments", 
			"namespaceUri", "namespacePrefix", "timeZoneSpecificExpression", "timeZoneExpressionSubset", 
			"caseExpression", "resultExpression", "searchedWhenClause", "simpleWhenClause", 
			"searchCondition", "checkCondition", "predicate", "basicPredicate", "rowValueExpression", 
			"quantifiedPredicate", "arrayExistsPredicate", "betweenPredicate", "distinctPredicate", 
			"existsPredicate", "inPredicate", "likePredicate", "nullPredicate", "xmlExistsPredicate", 
			"arrayExpression", "castSpecification", "parameterMarker", "castDataType", 
			"castBuiltInType", "integerInParens", "length", "ccsidQualifier", "forDataQualifier", 
			"distinctTypeName", "arrayType", "literal", "ccsidValue", "columnName", 
			"sourceColumnName", "targetColumnName", "newColumnName", "beginColumnName", 
			"endColumnName", "correlationName", "locationName", "schemaName", "tableName", 
			"alterTableName", "historyTableName", "cloneTableName", "archiveTableName", 
			"programName", "constraintName", "indexName", "maskName", "permissionName", 
			"procedureName", "sequenceName", "databaseName", "catalogName", "bpName", 
			"stogroupName", "dcName", "mcName", "scName", "volumeID", "keyLabelName", 
			"functionName", "specificName", "hostVariable", "hostIdentifier", "hostStructure", 
			"variable", "intoClause", "correlationClause", "fromClause", "tableReference", 
			"singleTableReference", "periodSpecification", "periodClause", "nestedTableExpression", 
			"dataChangeTableReference", "tableFunctionReference", "tableUdfCardinalityClause", 
			"typedCorrelationClause", "tableLocatorReference", "xmltableExpression", 
			"collectionDerivedTable", "joinCondition", "fullJoinExpression", "castFunction", 
			"ordinaryArrayExpression", "associativeArrayExpression", "comparison", 
			"whereClause", "groupByClause", "havingClause", "groupingExpression", 
			"groupingSets", "groupingSetsGroup", "superGroups", "selectColumns", 
			"unpackedRow", "selectClause", "subSelect", "selectIntoStatement", "selectStatement", 
			"commonTableExpression", "updateClause", "readOnlyClause", "optimizeClause", 
			"isolationClause", "lockClause", "skipLockedDataClause", "querynoClause", 
			"scalarFullSelect", "fullSelect", "valuesClause", "orderByClause", "sortKey", 
			"offsetClause", "fetchClause", "identifier", "sqlKeyword"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'('", "')'", "'['", "']'", "'?'", "'='", "'>'", "'<'", null, null, 
			null, "'+'", "'-'", "'*'", "'/'", "'||'", "'.'", "':'", "';'", "','"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "LPAREN", "RPAREN", "OPENSQBRACKET", "CLOSESQBRACKET", "QUESTIONMARK", 
			"EQ", "GT", "LT", "GE", "LE", "NE", "PLUS", "MINUS", "SPLAT", "SLASH", 
			"CONCATOP", "DOT", "COLON", "SEMICOLON", "COMMA", "NONNUMERICLITERAL", 
			"INTEGERLITERAL", "NUMERICLITERAL", "NEWLINE", "WS", "SQLCOMMENT", "SQLBLOCKCOMMENTBEGIN", 
			"SQLBLOCKCOMMENTEND", "ADD", "AFTER", "ALL", "ALLOCATE", "ALLOW", "ALTER", 
			"ALTERAND", "ANY", "ARRAY", "ARRAY_EXISTS", "AS", "ASENSITIVE", "ASSOCIATE", 
			"ASUTIME", "AT", "AUDIT", "AUX", "AUXILIARY", "BEFORE", "BEGIN", "BETWEEN", 
			"BUFFERPOOL", "BY", "CALL", "CAPTURE", "CASCADED", "CASE", "CAST", "CCSID", 
			"CHAR", "CHARACTER", "CHECK", "CLONE", "CLOSE", "CLUSTER", "COLLECTION", 
			"COLLID", "COLUMN", "COMMENT", "COMMIT", "CONCAT", "CONDITION", "CONNECT", 
			"CONNECTION", "CONSTRAINT", "CONTAINS", "CONTENT", "CONTINUE", "CREATE", 
			"CUBE", "CURRENT", "CURRENT_LC_CTYPE", "CURRVAL", "CURSOR", "DATA", "DATABASE", 
			"DAY", "DAYS", "DBINFO", "DECLARE", "DEFAULT", "DELETE", "DESCRIPTOR", 
			"DETERMINISTIC", "DISABLE", "DISALLOW", "DISTINCT", "DO", "DOCUMENT", 
			"DOUBLE", "DROP", "DSSIZE", "DYNAMIC", "EDITPROC", "ELSE", "ELSEIF", 
			"ENCODING", "ENCRYPTION", "END", "END_EXEC", "ENDING", "ERASE", "ESCAPE", 
			"EXCEPT", "EXCEPTION", "EXEC_SQL", "EXECUTE", "EXISTS", "EXIT", "EXPLAIN", 
			"EXTERNAL", "FENCED", "FETCH", "FIELDPROC", "FINAL", "FIRST", "FOR", 
			"FREE", "FROM", "FULL", "FUNCTION", "GENERATED", "GET", "GLOBAL", "GO", 
			"GOTO", "GRANT", "GROUP", "HANDLER", "HAVING", "HOLD", "HOUR", "HOURS", 
			"IF", "IMMEDIATE", "IN", "INCLUSIVE", "INDEX", "INDEXBP", "INHERIT", 
			"INNER", "INOUT", "INSENSITIVE", "INSERT", "INTERSECT", "INTO", "IS", 
			"ISOBID", "ITERATE", "JAR", "JOIN", "KEEP", "KEY", "LABEL", "LANGUAGE", 
			"LAST", "LC_CTYPE", "LEAVE", "LEFT", "LIKE", "LIMIT", "LOCAL", "LOCALE", 
			"LOCATOR", "LOCATORS", "LOCK", "LOCKMAX", "LOCKSIZE", "LONG", "LOOP", 
			"MAINTAINED", "MATERIALIZED", "MICROSECOND", "MICROSECONDS", "MINUTEMINUTES", 
			"MODIFIES", "MONTH", "MONTHS", "NEXT", "NEXTVAL", "NO", "NONE", "NOT", 
			"NULL", "NULLS", "NUMPARTS", "OBID", "OF", "OFFSET", "OLD", "ON", "OPEN", 
			"OPTIMIZATION", "OPTIMIZE", "OR", "ORDER", "ORGANIZATION", "OUT", "OUTER", 
			"PACKAGE", "PADDED", "PARAMETER", "PART", "PARTITION", "PARTITIONED", 
			"PARTITIONING", "PATH", "PERIOD", "PIECESIZE", "PLAN", "PRECISION", "PREPARE", 
			"PREVVAL", "PRIOR", "PRIQTY", "PRIVILEGES", "PROCEDURE", "PROGRAM", "PSID", 
			"PUBLIC", "QUERY", "QUERYNO", "READS", "REFERENCES", "REFRESH", "RELEASE", 
			"RENAME", "REPEAT", "RESIGNAL", "RESTRICT", "RESULT", "RESULT_SET_LOCATOR", 
			"RETURN", "RETURNS", "REVOKE", "RIGHT", "ROLE", "ROLLBACK", "ROLLUP", 
			"ROUND_CEILING", "ROUND_DOWN", "ROUND_FLOOR", "ROUND_HALF_DOWN", "ROUND_HALF_EVEN", 
			"ROUND_HALF_UP", "ROUND_UP", "ROW", "ROWSET", "RUN", "SAVEPOINT", "SCHEMA", 
			"SCRATCHPAD", "SECOND", "SECONDS", "SECQTY", "SECURITY", "SELECT", "SENSITIVE", 
			"SEQUENCE", "SET", "SIGNAL", "SIMPLE", "SOME", "SOURCE", "SPECIFIC", 
			"STANDARD", "STATEMENT", "STATIC", "STAY", "STOGROUP", "STORES", "STYLE", 
			"SUMMARY", "SYNONYM", "SYSDATE", "SYSTEM", "SYSTIMESTAMP", "TABLE", "TABLESPACE", 
			"THEN", "TO", "TRIGGER", "TRUNCATE", "TYPE", "UNDO", "UNION", "UNIQUE", 
			"UNTIL", "UPDATE", "USING", "VALIDPROC", "VALUE", "VALUES", "VARIABLE", 
			"VARIANT", "VCAT", "VERSIONING", "VIEW", "VOLATILE", "VOLUMES", "WHEN", 
			"WHENEVER", "WHERE", "WHILE", "WITH", "WLM", "XMLCAST", "XMLEXISTS", 
			"XMLNAMESPACES", "YEAR", "YEARS", "ZONE", "AND", "ARRAY_AGG", "ASC", 
			"AVG", "BIT", "CHANGE", "CODEUNITS16", "CODEUNITS32", "CORR", "CORRELATION", 
			"COUNT", "COUNT_BIG", "COVAR", "COVARIANCE", "COVARIANCE_SAMP", "COVAR_POP", 
			"COVAR_SAMP", "CS", "CUME_DIST", "DENSE_RANK", "DESC", "EBCDIC", "EXCLUSIVE", 
			"FIRST_VALUE", "FOLLOWING", "GROUPING", "IGNORE", "INDICATOR", "INPUT", 
			"ISNULL", "LAG", "LARGE", "LAST_VALUE", "LEAD", "LISTAGG", "LOCKED", 
			"LOCKS", "MEDIAN", "MINUTES", "MIXED", "NOTNULL", "NTH_VALUE", "NTILE", 
			"NUMERIC", "OBJECT", "OCTETS", "ONLY", "OVER", "PASSING", "PERCENTILE_CONT", 
			"PERCENTILE_DISC", "PERCENT_RANK", "PRECEDING", "PREVIOUS", "RANGE", 
			"RANK", "RATIO_TO_REPORT", "READ", "REF", "REGR_AVGX", "REGR_AVGY", "REGR_COUNT", 
			"REGR_ICPT", "REGR_INTERCEPT", "REGR_R2", "REGR_SLOPE", "REGR_SXX", "REGR_SXY", 
			"REGR_SYY", "RESPECT", "ROW_NUMBER", "ROWS", "RR", "RS", "SBCS", "SELECTIVITY", 
			"SETS", "SHARE", "SKIP_", "STDDEV", "STDDEV_POP", "STDDEV_SAMP", "SUM", 
			"TOKEN", "UNBOUNDED", "UNPACK", "UR", "USE", "VAR", "VARIANCE", "VARIANCE_SAMP", 
			"VAR_POP", "VAR_SAMP", "VARYING", "WITHOUT", "XML", "XMLAGG", "COLUMNS", 
			"SQLID", "ORDINALITY", "SYSTEM_TIME", "BUSINESS_TIME", "MULTIPLIER", 
			"UNNEST", "CROSS", "CALLER", "CLIENT", "POSITIONING", "SCROLL", "ACTION", 
			"ASSEMBLE", "C_", "CALLED", "COBOL", "DB2", "DEFINER", "DISPATCH", "ENVIRONMENT", 
			"FAILURE", "FAILURES", "JAVA", "MAIN", "NAME", "OPTIONS", "PARALLEL", 
			"PLI", "REGISTERS", "RESIDENT", "SECURED", "SPECIAL", "SQL", "STOP", 
			"SUB", "YES", "APPLICATION", "CHANGED", "COMPATIBILITY", "COMPRESS", 
			"COPY", "FREEPAGE", "GBPCACHE", "INCLUDE", "MAXVALUE", "MINVALUE", "PCTFREE", 
			"REGENERATE", "SEQTY", "MASK", "ENABLE", "PERMISSION", "ATOMIC", "SQLEXCEPTION", 
			"MERGE", "MATCHED", "SQLSTATE", "MESSAGE_TEXT", "OVERRIDING", "PORTION", 
			"DB2SQL", "DEBUG", "GENERAL", "MODE_", "REXX", "CACHE", "CYCLE", "INCREMENT", 
			"RESTART", "DATACLAS", "MGMTCLAS", "REMOVE", "STORCLAS", "ACCESS", "ACTIVATE", 
			"ALWAYS", "APPEND", "ARCHIVE", "BUSINESS", "CASCADE", "CHANGES", "CONTROL", 
			"DEACTIVATE", "DEFERRED", "EACH", "ENFORCED", "EXTRA", "FOREIGN", "HIDDEN_", 
			"HISTORY", "ID", "IDENTITY", "IMPLICITLY", "INITIALLY", "INLINE", "OPERATION", 
			"ORGANIZE", "OVERLAPS", "PACKAGE_NAME", "PACKAGE_SCHEMA", "PACKAGE_VERSION", 
			"PRIMARY", "RESET", "ROTATE", "START", "SYSIBM", "TRANSACTION", "ABS", 
			"ABSVAL", "ACOS", "ADD_DAYS", "ADD_MONTHS", "ARRAY_DELETE", "ARRAY_FIRST", 
			"ARRAY_LAST", "ARRAY_NEXT", "ARRAY_PRIOR", "ARRAY_TRIM", "ASCII", "ASCII_CHR", 
			"ASCIISTR", "ASCII_STR", "ASIN", "ATAN", "ATAN2", "ATANH", "BIGINT", 
			"BINARY", "BITAND", "BITANDNOT", "BITNOT", "BITOR", "BITXOR", "BLOB", 
			"BTRIM", "CARDINALITY", "CCSID_ENCODING", "CEIL", "CEILING", "CHAR9", 
			"CHARACTER_LENGTH", "CHAR_LENGTH", "CHR", "CLOB", "COALESCE", "COLLATION_KEY", 
			"COMPARE_DECFLOAT", "COS", "COSH", "DATE", "DAYOFMONTH", "DAYOFWEEK", 
			"DAYOFWEEK_ISO", "DAYOFYEAR", "DAYS_BETWEEN", "DBCLOB", "DEC", "DECFLOAT", 
			"DECFLOAT_FORMAT", "DECFLOAT_SORTKEY", "DECIMAL", "DECODE", "DECRYPT_BINARY", 
			"DECRYPT_BIT", "DECRYPT_CHAR", "DECRYPT_DATAKEY_BIGINT", "DECRYPT_DATAKEY_BIT", 
			"DECRYPT_DATAKEY_CLOB", "DECRYPT_DATAKEY_DBCLOB", "DECRYPT_DATAKEY_DECIMAL", 
			"DECRYPT_DATAKEY_INTEGER", "DECRYPT_DATAKEY_VARCHAR", "DECRYPT_DATAKEY_VARGRAPHIC", 
			"DECRYPT_DB", "DEGREES", "DIFFERENCE", "DIGITS", "DOUBLE_PRECISION", 
			"DSN_XMLVALIDATE", "EBCDIC_CHR", "EBCDIC_STR", "ENCRYPT_DATAKEY", "ENCRYPT_TDES", 
			"EXP", "EXTRACT", "FLOAT", "FLOOR", "GENERATE_UNIQUE", "GENERATE_UNIQUE_BINARY", 
			"GETHINT", "GETVARIABLE", "GRAPHIC", "GREATEST", "HASH", "HASH_CRC32", 
			"HASH_MD5", "HASH_SHA1", "HASH_SHA256", "HEX", "IDENTITY_VAL_LOCAL", 
			"IFNULL", "INSTR", "INT", "INTEGER", "JULIAN_DAY", "LAST_DAY", "LCASE", 
			"LEAST", "LENGTH", "LN", "LOCATE", "LOCATE_IN_STRING", "LOG10", "LOWER", 
			"LPAD", "LTRIM", "MAX", "MAX_CARDINALITY", "MIDNIGHT_SECONDS", "MIN", 
			"MINUTE", "MOD", "MONTHS_BETWEEN", "MQREAD", "MQREADCLOB", "MQRECEIVE", 
			"MQRECEIVECLOB", "MQSEND", "MULTIPLY_ALT", "NEXT_DAY", "NEXT_MONTH", 
			"NORMALIZE_DECFLOAT", "NORMALIZE_STRING", "NULLIF", "NVL", "OVERLAY", 
			"PACK", "POSITION", "POSSTR", "POW", "POWER", "QUANTIZE", "QUARTER", 
			"RADIANS", "RAISE_ERROR", "RAND", "RANDOM", "REAL", "REGEXP_COUNT", "REGEXP_INSTR", 
			"REGEXP_LIKE", "REGEXP_REPLACE", "REGEXP_SUBSTR", "REPLACE", "RID", "ROUND", 
			"ROUND_TIMESTAMP", "ROWID", "RPAD", "RTRIM", "SCORE", "SIGN", "SIN", 
			"SINH", "SMALLINT", "SOAPHTTPC", "SOAPHTTPNC", "SOAPHTTPNV", "SOAPHTTPV", 
			"SOUNDEX", "SPACE", "SQRT", "STRIP", "STRLEFT", "STRPOS", "STRRIGHT", 
			"SUBSTR", "SUBSTRING", "TAN", "TANH", "TIME", "TIMESTAMP", "TIMESTAMPADD", 
			"TIMESTAMPDIFF", "TIMESTAMP_FORMAT", "TIMESTAMP_ISO", "TIMESTAMP_TZ", 
			"TO_CHAR", "TO_CLOB", "TO_DATE", "TO_NUMBER", "TOTALORDER", "TO_TIMESTAMP", 
			"TRANSLATE", "TRIM", "TRIM_ARRAY", "TRUNC", "TRUNC_TIMESTAMP", "UCASE", 
			"UNICODE", "UNICODE_STR", "UNISTR", "UPPER", "VARBINARY", "VARCHAR", 
			"VARCHAR9", "VARCHAR_BIT_FORMAT", "VARCHAR_FORMAT", "VARGRAPHIC", "VERIFY_GROUP_FOR_USER", 
			"VERIFY_ROLE_FOR_USER", "VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER", "WEEK", 
			"WEEK_ISO", "WRAP", "XMLATTRIBUTES", "XMLCOMMENT", "XMLCONCAT", "XMLDOCUMENT", 
			"XMLELEMENT", "XMLFOREST", "XMLMODIFY", "XMLPARSE", "XMLPI", "XMLQUERY", 
			"XMLSERIALIZE", "XMLTEXT", "XMLXSROBJECTID", "XSLTRANSFORM", "CURRENT_ACCELERATOR", 
			"CURRENT_APPLICATION_COMPATIBILITY", "CURRENT_APPLICATION_ENCODING_SCHEME", 
			"CURRENT_CLIENT_ACCTNG", "CURRENT_CLIENT_APPLNAME", "CURRENT_CLIENT_CORR_TOKEN", 
			"CURRENT_CLIENT_USERID", "CURRENT_CLIENT_WRKSTNNAME", "CURRENT_DATE", 
			"CURRENT_DEBUG_MODE", "CURRENT_DECFLOAT_ROUNDING_MODE", "CURRENT_DEGREE", 
			"CURRENT_EXPLAIN_MODE", "CURRENT_GET_ACCEL_ARCHIVE", "CURRENT_LOCALE_LC_CTYPE", 
			"CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION", "CURRENT_MEMBER", 
			"CURRENT_OPTIMIZATION_HINT", "CURRENT_PACKAGE_PATH", "CURRENT_PACKAGESET", 
			"CURRENT_PATH", "CURRENT_PRECISION", "CURRENT_QUERY_ACCELERATION", "CURRENT_QUERY_ACCELERATION_WAITFORDATA", 
			"CURRENT_REFRESH_AGE", "CURRENT_ROUTINE_VERSION", "CURRENT_RULES", "CURRENT_SCHEMA", 
			"CURRENT_SERVER", "CURRENT_SQLID", "CURRENT_TEMPORAL_BUSINESS_TIME", 
			"CURRENT_TEMPORAL_SYSTEM_TIME", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
			"CURRENT_TIME_ZONE", "ENCRYPTION_PASSWORD", "SESSION_TIME_ZONE", "SESSION_USER", 
			"USER", "ADMIN_TASK_LIST", "ADMIN_TASK_OUTPUT", "ADMIN_TASK_STATUS", 
			"BLOCKING_THREADS", "MQREADALL", "MQREADALLCLOB", "MQRECEIVEALL", "MQRECEIVEALLCLOB", 
			"XMLTABLE", "SQLIDENTIFIER"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "DB2zSQLParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public DB2zSQLParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	public static class StartRuleContext extends ParserRuleContext {
		public List<SqlStatementContext> sqlStatement() {
			return getRuleContexts(SqlStatementContext.class);
		}
		public SqlStatementContext sqlStatement(int i) {
			return getRuleContext(SqlStatementContext.class,i);
		}
		public TerminalNode EOF() { return getToken(DB2zSQLParser.EOF, 0); }
		public StartRuleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startRule; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterStartRule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitStartRule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitStartRule(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StartRuleContext startRule() throws RecognitionException {
		StartRuleContext _localctx = new StartRuleContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_startRule);
		int _la;
		try {
			setState(591);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(587);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAREN) | (1L << ALLOCATE) | (1L << ALTER))) != 0) || ((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & ((1L << (DECLARE - 88)) | (1L << (DELETE - 88)) | (1L << (EXEC_SQL - 88)))) != 0) || _la==INSERT || ((((_la - 265)) & ~0x3f) == 0 && ((1L << (_la - 265)) & ((1L << (SELECT - 265)) | (1L << (UPDATE - 265)) | (1L << (VALUES - 265)) | (1L << (WITH - 265)))) != 0) || _la==MERGE) {
					{
					{
					setState(584);
					sqlStatement();
					}
					}
					setState(589);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(590);
				match(EOF);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SqlStatementContext extends ParserRuleContext {
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public AllocateCursorStatementContext allocateCursorStatement() {
			return getRuleContext(AllocateCursorStatementContext.class,0);
		}
		public AlterDatabaseStatementContext alterDatabaseStatement() {
			return getRuleContext(AlterDatabaseStatementContext.class,0);
		}
		public AlterFunctionStatementContext alterFunctionStatement() {
			return getRuleContext(AlterFunctionStatementContext.class,0);
		}
		public AlterIndexStatementContext alterIndexStatement() {
			return getRuleContext(AlterIndexStatementContext.class,0);
		}
		public AlterMaskStatementContext alterMaskStatement() {
			return getRuleContext(AlterMaskStatementContext.class,0);
		}
		public AlterPermissionStatementContext alterPermissionStatement() {
			return getRuleContext(AlterPermissionStatementContext.class,0);
		}
		public AlterProcedureStatementContext alterProcedureStatement() {
			return getRuleContext(AlterProcedureStatementContext.class,0);
		}
		public AlterSequenceStatementContext alterSequenceStatement() {
			return getRuleContext(AlterSequenceStatementContext.class,0);
		}
		public AlterStogroupStatementContext alterStogroupStatement() {
			return getRuleContext(AlterStogroupStatementContext.class,0);
		}
		public AlterTableStatementContext alterTableStatement() {
			return getRuleContext(AlterTableStatementContext.class,0);
		}
		public DeclareCursorStatementContext declareCursorStatement() {
			return getRuleContext(DeclareCursorStatementContext.class,0);
		}
		public DeclareTableStatementContext declareTableStatement() {
			return getRuleContext(DeclareTableStatementContext.class,0);
		}
		public DeclareStatementStatementContext declareStatementStatement() {
			return getRuleContext(DeclareStatementStatementContext.class,0);
		}
		public DeleteStatementContext deleteStatement() {
			return getRuleContext(DeleteStatementContext.class,0);
		}
		public InsertStatementContext insertStatement() {
			return getRuleContext(InsertStatementContext.class,0);
		}
		public MergeStatementContext mergeStatement() {
			return getRuleContext(MergeStatementContext.class,0);
		}
		public UpdateStatementContext updateStatement() {
			return getRuleContext(UpdateStatementContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(DB2zSQLParser.SEMICOLON, 0); }
		public TerminalNode EOF() { return getToken(DB2zSQLParser.EOF, 0); }
		public TerminalNode EXEC_SQL() { return getToken(DB2zSQLParser.EXEC_SQL, 0); }
		public TerminalNode END_EXEC() { return getToken(DB2zSQLParser.END_EXEC, 0); }
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public SqlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSqlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSqlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSqlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SqlStatementContext sqlStatement() throws RecognitionException {
		SqlStatementContext _localctx = new SqlStatementContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_sqlStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(594);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXEC_SQL) {
				{
				setState(593);
				match(EXEC_SQL);
				}
			}

			setState(614);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {
			case 1:
				{
				setState(596);
				query();
				}
				break;
			case 2:
				{
				setState(597);
				allocateCursorStatement();
				}
				break;
			case 3:
				{
				setState(598);
				alterDatabaseStatement();
				}
				break;
			case 4:
				{
				setState(599);
				alterFunctionStatement();
				}
				break;
			case 5:
				{
				setState(600);
				alterIndexStatement();
				}
				break;
			case 6:
				{
				setState(601);
				alterMaskStatement();
				}
				break;
			case 7:
				{
				setState(602);
				alterPermissionStatement();
				}
				break;
			case 8:
				{
				setState(603);
				alterProcedureStatement();
				}
				break;
			case 9:
				{
				setState(604);
				alterSequenceStatement();
				}
				break;
			case 10:
				{
				setState(605);
				alterStogroupStatement();
				}
				break;
			case 11:
				{
				setState(606);
				alterTableStatement();
				}
				break;
			case 12:
				{
				setState(607);
				declareCursorStatement();
				}
				break;
			case 13:
				{
				setState(608);
				declareTableStatement();
				}
				break;
			case 14:
				{
				setState(609);
				declareStatementStatement();
				}
				break;
			case 15:
				{
				setState(610);
				deleteStatement();
				}
				break;
			case 16:
				{
				setState(611);
				insertStatement();
				}
				break;
			case 17:
				{
				setState(612);
				mergeStatement();
				}
				break;
			case 18:
				{
				setState(613);
				updateStatement();
				}
				break;
			}
			setState(622);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SEMICOLON:
				{
				setState(616);
				match(SEMICOLON);
				}
				break;
			case END_EXEC:
				{
				{
				setState(617);
				match(END_EXEC);
				setState(619);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT) {
					{
					setState(618);
					match(DOT);
					}
				}

				}
				}
				break;
			case EOF:
				{
				setState(621);
				match(EOF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryContext extends ParserRuleContext {
		public SubSelectContext subSelect() {
			return getRuleContext(SubSelectContext.class,0);
		}
		public FullSelectContext fullSelect() {
			return getRuleContext(FullSelectContext.class,0);
		}
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public SelectIntoStatementContext selectIntoStatement() {
			return getRuleContext(SelectIntoStatementContext.class,0);
		}
		public QueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterQuery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitQuery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitQuery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryContext query() throws RecognitionException {
		QueryContext _localctx = new QueryContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_query);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(628);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,6,_ctx) ) {
			case 1:
				{
				setState(624);
				subSelect();
				}
				break;
			case 2:
				{
				setState(625);
				fullSelect();
				}
				break;
			case 3:
				{
				setState(626);
				selectStatement();
				}
				break;
			case 4:
				{
				setState(627);
				selectIntoStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareCursorStatementContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(DB2zSQLParser.DECLARE, 0); }
		public CursorNameContext cursorName() {
			return getRuleContext(CursorNameContext.class,0);
		}
		public TerminalNode CURSOR() { return getToken(DB2zSQLParser.CURSOR, 0); }
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public StatementNameContext statementName() {
			return getRuleContext(StatementNameContext.class,0);
		}
		public List<HoldabilityContext> holdability() {
			return getRuleContexts(HoldabilityContext.class);
		}
		public HoldabilityContext holdability(int i) {
			return getRuleContext(HoldabilityContext.class,i);
		}
		public List<ReturnabilityContext> returnability() {
			return getRuleContexts(ReturnabilityContext.class);
		}
		public ReturnabilityContext returnability(int i) {
			return getRuleContext(ReturnabilityContext.class,i);
		}
		public List<RowsetPositioningContext> rowsetPositioning() {
			return getRuleContexts(RowsetPositioningContext.class);
		}
		public RowsetPositioningContext rowsetPositioning(int i) {
			return getRuleContext(RowsetPositioningContext.class,i);
		}
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode SCROLL() { return getToken(DB2zSQLParser.SCROLL, 0); }
		public TerminalNode ASENSITIVE() { return getToken(DB2zSQLParser.ASENSITIVE, 0); }
		public TerminalNode INSENSITIVE() { return getToken(DB2zSQLParser.INSENSITIVE, 0); }
		public TerminalNode SENSITIVE() { return getToken(DB2zSQLParser.SENSITIVE, 0); }
		public TerminalNode DYNAMIC() { return getToken(DB2zSQLParser.DYNAMIC, 0); }
		public TerminalNode STATIC() { return getToken(DB2zSQLParser.STATIC, 0); }
		public DeclareCursorStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareCursorStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDeclareCursorStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDeclareCursorStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDeclareCursorStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareCursorStatementContext declareCursorStatement() throws RecognitionException {
		DeclareCursorStatementContext _localctx = new DeclareCursorStatementContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_declareCursorStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(630);
			match(DECLARE);
			setState(631);
			cursorName();
			setState(641);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO:
				{
				{
				setState(632);
				match(NO);
				setState(633);
				match(SCROLL);
				}
				}
				break;
			case ASENSITIVE:
			case INSENSITIVE:
			case SENSITIVE:
				{
				{
				setState(638);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ASENSITIVE:
					{
					setState(634);
					match(ASENSITIVE);
					}
					break;
				case INSENSITIVE:
					{
					setState(635);
					match(INSENSITIVE);
					}
					break;
				case SENSITIVE:
					{
					{
					setState(636);
					match(SENSITIVE);
					setState(637);
					_la = _input.LA(1);
					if ( !(_la==DYNAMIC || _la==STATIC) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(640);
				match(SCROLL);
				}
				}
				break;
			case CURSOR:
				break;
			default:
				break;
			}
			setState(643);
			match(CURSOR);
			setState(649);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==WITH || _la==WITHOUT) {
				{
				setState(647);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,9,_ctx) ) {
				case 1:
					{
					setState(644);
					holdability();
					}
					break;
				case 2:
					{
					setState(645);
					returnability();
					}
					break;
				case 3:
					{
					setState(646);
					rowsetPositioning();
					}
					break;
				}
				}
				setState(651);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(652);
			match(FOR);
			setState(655);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,11,_ctx) ) {
			case 1:
				{
				setState(653);
				selectStatement();
				}
				break;
			case 2:
				{
				setState(654);
				statementName();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CursorNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public CursorNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursorName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCursorName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCursorName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCursorName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CursorNameContext cursorName() throws RecognitionException {
		CursorNameContext _localctx = new CursorNameContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_cursorName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(657);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatementNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public StatementNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statementName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterStatementName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitStatementName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitStatementName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StatementNameContext statementName() throws RecognitionException {
		StatementNameContext _localctx = new StatementNameContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_statementName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(659);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HoldabilityContext extends ParserRuleContext {
		public TerminalNode WITHOUT() { return getToken(DB2zSQLParser.WITHOUT, 0); }
		public TerminalNode HOLD() { return getToken(DB2zSQLParser.HOLD, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public HoldabilityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_holdability; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterHoldability(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitHoldability(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitHoldability(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HoldabilityContext holdability() throws RecognitionException {
		HoldabilityContext _localctx = new HoldabilityContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_holdability);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(665);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITHOUT:
				{
				{
				setState(661);
				match(WITHOUT);
				setState(662);
				match(HOLD);
				}
				}
				break;
			case WITH:
				{
				{
				setState(663);
				match(WITH);
				setState(664);
				match(HOLD);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReturnabilityContext extends ParserRuleContext {
		public TerminalNode WITHOUT() { return getToken(DB2zSQLParser.WITHOUT, 0); }
		public TerminalNode RETURN() { return getToken(DB2zSQLParser.RETURN, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode TO() { return getToken(DB2zSQLParser.TO, 0); }
		public TerminalNode CALLER() { return getToken(DB2zSQLParser.CALLER, 0); }
		public TerminalNode CLIENT() { return getToken(DB2zSQLParser.CLIENT, 0); }
		public ReturnabilityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_returnability; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterReturnability(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitReturnability(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitReturnability(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReturnabilityContext returnability() throws RecognitionException {
		ReturnabilityContext _localctx = new ReturnabilityContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_returnability);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(677);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITHOUT:
				{
				{
				setState(667);
				match(WITHOUT);
				setState(668);
				match(RETURN);
				}
				}
				break;
			case WITH:
				{
				{
				setState(669);
				match(WITH);
				setState(670);
				match(RETURN);
				setState(675);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,13,_ctx) ) {
				case 1:
					{
					{
					setState(671);
					match(TO);
					setState(672);
					match(CALLER);
					}
					}
					break;
				case 2:
					{
					{
					setState(673);
					match(TO);
					setState(674);
					match(CLIENT);
					}
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowsetPositioningContext extends ParserRuleContext {
		public TerminalNode WITHOUT() { return getToken(DB2zSQLParser.WITHOUT, 0); }
		public TerminalNode ROWSET() { return getToken(DB2zSQLParser.ROWSET, 0); }
		public TerminalNode POSITIONING() { return getToken(DB2zSQLParser.POSITIONING, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public RowsetPositioningContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowsetPositioning; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRowsetPositioning(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRowsetPositioning(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRowsetPositioning(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowsetPositioningContext rowsetPositioning() throws RecognitionException {
		RowsetPositioningContext _localctx = new RowsetPositioningContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_rowsetPositioning);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(685);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITHOUT:
				{
				{
				setState(679);
				match(WITHOUT);
				setState(680);
				match(ROWSET);
				setState(681);
				match(POSITIONING);
				}
				}
				break;
			case WITH:
				{
				{
				setState(682);
				match(WITH);
				setState(683);
				match(ROWSET);
				setState(684);
				match(POSITIONING);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareTableStatementContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(DB2zSQLParser.DECLARE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public List<DataTypeContext> dataType() {
			return getRuleContexts(DataTypeContext.class);
		}
		public DataTypeContext dataType(int i) {
			return getRuleContext(DataTypeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public List<NotNullPhraseContext> notNullPhrase() {
			return getRuleContexts(NotNullPhraseContext.class);
		}
		public NotNullPhraseContext notNullPhrase(int i) {
			return getRuleContext(NotNullPhraseContext.class,i);
		}
		public DeclareTableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareTableStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDeclareTableStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDeclareTableStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDeclareTableStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareTableStatementContext declareTableStatement() throws RecognitionException {
		DeclareTableStatementContext _localctx = new DeclareTableStatementContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_declareTableStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(687);
			match(DECLARE);
			setState(688);
			tableName();
			setState(689);
			match(TABLE);
			setState(690);
			match(LPAREN);
			{
			setState(691);
			columnName();
			setState(692);
			dataType();
			setState(694);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(693);
				notNullPhrase();
				}
			}

			}
			setState(704);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(696);
				match(COMMA);
				setState(697);
				columnName();
				setState(698);
				dataType();
				setState(700);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(699);
					notNullPhrase();
					}
				}

				}
				}
				setState(706);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(707);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NotNullPhraseContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode DEFAULT() { return getToken(DB2zSQLParser.DEFAULT, 0); }
		public NotNullPhraseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notNullPhrase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterNotNullPhrase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitNotNullPhrase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitNotNullPhrase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NotNullPhraseContext notNullPhrase() throws RecognitionException {
		NotNullPhraseContext _localctx = new NotNullPhraseContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_notNullPhrase);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(715);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,19,_ctx) ) {
			case 1:
				{
				{
				setState(709);
				match(NOT);
				setState(710);
				match(NULL);
				}
				}
				break;
			case 2:
				{
				{
				setState(711);
				match(NOT);
				setState(712);
				match(NULL);
				setState(713);
				match(WITH);
				setState(714);
				match(DEFAULT);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareStatementStatementContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(DB2zSQLParser.DECLARE, 0); }
		public List<StatementNameContext> statementName() {
			return getRuleContexts(StatementNameContext.class);
		}
		public StatementNameContext statementName(int i) {
			return getRuleContext(StatementNameContext.class,i);
		}
		public TerminalNode STATEMENT() { return getToken(DB2zSQLParser.STATEMENT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public DeclareStatementStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareStatementStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDeclareStatementStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDeclareStatementStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDeclareStatementStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareStatementStatementContext declareStatementStatement() throws RecognitionException {
		DeclareStatementStatementContext _localctx = new DeclareStatementStatementContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_declareStatementStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(717);
			match(DECLARE);
			setState(718);
			statementName();
			setState(723);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(719);
				match(COMMA);
				setState(720);
				statementName();
				}
				}
				setState(725);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(726);
			match(STATEMENT);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AllocateCursorStatementContext extends ParserRuleContext {
		public TerminalNode ALLOCATE() { return getToken(DB2zSQLParser.ALLOCATE, 0); }
		public CursorNameContext cursorName() {
			return getRuleContext(CursorNameContext.class,0);
		}
		public TerminalNode CURSOR() { return getToken(DB2zSQLParser.CURSOR, 0); }
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode RESULT() { return getToken(DB2zSQLParser.RESULT, 0); }
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public RsLocatorVariableContext rsLocatorVariable() {
			return getRuleContext(RsLocatorVariableContext.class,0);
		}
		public AllocateCursorStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_allocateCursorStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAllocateCursorStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAllocateCursorStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAllocateCursorStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AllocateCursorStatementContext allocateCursorStatement() throws RecognitionException {
		AllocateCursorStatementContext _localctx = new AllocateCursorStatementContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_allocateCursorStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(728);
			match(ALLOCATE);
			setState(729);
			cursorName();
			setState(730);
			match(CURSOR);
			setState(731);
			match(FOR);
			setState(732);
			match(RESULT);
			setState(733);
			match(SET);
			setState(734);
			rsLocatorVariable();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RsLocatorVariableContext extends ParserRuleContext {
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public RsLocatorVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rsLocatorVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRsLocatorVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRsLocatorVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRsLocatorVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RsLocatorVariableContext rsLocatorVariable() throws RecognitionException {
		RsLocatorVariableContext _localctx = new RsLocatorVariableContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_rsLocatorVariable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(736);
			hostVariable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDatabaseStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode DATABASE() { return getToken(DB2zSQLParser.DATABASE, 0); }
		public DatabaseNameContext databaseName() {
			return getRuleContext(DatabaseNameContext.class,0);
		}
		public List<TerminalNode> BUFFERPOOL() { return getTokens(DB2zSQLParser.BUFFERPOOL); }
		public TerminalNode BUFFERPOOL(int i) {
			return getToken(DB2zSQLParser.BUFFERPOOL, i);
		}
		public List<BpNameContext> bpName() {
			return getRuleContexts(BpNameContext.class);
		}
		public BpNameContext bpName(int i) {
			return getRuleContext(BpNameContext.class,i);
		}
		public List<TerminalNode> INDEXBP() { return getTokens(DB2zSQLParser.INDEXBP); }
		public TerminalNode INDEXBP(int i) {
			return getToken(DB2zSQLParser.INDEXBP, i);
		}
		public List<TerminalNode> STOGROUP() { return getTokens(DB2zSQLParser.STOGROUP); }
		public TerminalNode STOGROUP(int i) {
			return getToken(DB2zSQLParser.STOGROUP, i);
		}
		public List<StogroupNameContext> stogroupName() {
			return getRuleContexts(StogroupNameContext.class);
		}
		public StogroupNameContext stogroupName(int i) {
			return getRuleContext(StogroupNameContext.class,i);
		}
		public List<TerminalNode> CCSID() { return getTokens(DB2zSQLParser.CCSID); }
		public TerminalNode CCSID(int i) {
			return getToken(DB2zSQLParser.CCSID, i);
		}
		public List<CcsidValueContext> ccsidValue() {
			return getRuleContexts(CcsidValueContext.class);
		}
		public CcsidValueContext ccsidValue(int i) {
			return getRuleContext(CcsidValueContext.class,i);
		}
		public AlterDatabaseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDatabaseStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterDatabaseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterDatabaseStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterDatabaseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDatabaseStatementContext alterDatabaseStatement() throws RecognitionException {
		AlterDatabaseStatementContext _localctx = new AlterDatabaseStatementContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_alterDatabaseStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(738);
			match(ALTER);
			setState(739);
			match(DATABASE);
			setState(740);
			databaseName();
			setState(749); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(749);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BUFFERPOOL:
					{
					{
					setState(741);
					match(BUFFERPOOL);
					setState(742);
					bpName();
					}
					}
					break;
				case INDEXBP:
					{
					{
					setState(743);
					match(INDEXBP);
					setState(744);
					bpName();
					}
					}
					break;
				case STOGROUP:
					{
					{
					setState(745);
					match(STOGROUP);
					setState(746);
					stogroupName();
					}
					}
					break;
				case CCSID:
					{
					{
					setState(747);
					match(CCSID);
					setState(748);
					ccsidValue();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(751); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==BUFFERPOOL || _la==CCSID || _la==INDEXBP || _la==STOGROUP );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterFunctionStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode RESTRICT() { return getToken(DB2zSQLParser.RESTRICT, 0); }
		public List<FunctionOptionListContext> functionOptionList() {
			return getRuleContexts(FunctionOptionListContext.class);
		}
		public FunctionOptionListContext functionOptionList(int i) {
			return getRuleContext(FunctionOptionListContext.class,i);
		}
		public TerminalNode FUNCTION() { return getToken(DB2zSQLParser.FUNCTION, 0); }
		public FunctionNameContext functionName() {
			return getRuleContext(FunctionNameContext.class,0);
		}
		public TerminalNode SPECIFIC() { return getToken(DB2zSQLParser.SPECIFIC, 0); }
		public SpecificNameContext specificName() {
			return getRuleContext(SpecificNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<FunctionParameterTypeContext> functionParameterType() {
			return getRuleContexts(FunctionParameterTypeContext.class);
		}
		public FunctionParameterTypeContext functionParameterType(int i) {
			return getRuleContext(FunctionParameterTypeContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public AlterFunctionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterFunctionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterFunctionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterFunctionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterFunctionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterFunctionStatementContext alterFunctionStatement() throws RecognitionException {
		AlterFunctionStatementContext _localctx = new AlterFunctionStatementContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_alterFunctionStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(753);
			match(ALTER);
			setState(772);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FUNCTION:
				{
				{
				setState(754);
				match(FUNCTION);
				setState(755);
				functionName();
				setState(767);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(756);
					match(LPAREN);
					setState(757);
					functionParameterType();
					setState(762);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(758);
						match(COMMA);
						setState(759);
						functionParameterType();
						}
						}
						setState(764);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(765);
					match(RPAREN);
					}
				}

				}
				}
				break;
			case SPECIFIC:
				{
				{
				setState(769);
				match(SPECIFIC);
				setState(770);
				match(FUNCTION);
				setState(771);
				specificName();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(775);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RESTRICT) {
				{
				setState(774);
				match(RESTRICT);
				}
			}

			setState(778); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(777);
				functionOptionList();
				}
				}
				setState(780); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (ALLOW - 33)) | (1L << (ASUTIME - 33)) | (1L << (COLLID - 33)) | (1L << (CONTAINS - 33)) | (1L << (CONTINUE - 33)) | (1L << (DBINFO - 33)) | (1L << (DEFAULT - 33)) | (1L << (DETERMINISTIC - 33)) | (1L << (DISALLOW - 33)))) != 0) || ((((_la - 119)) & ~0x3f) == 0 && ((1L << (_la - 119)) & ((1L << (EXTERNAL - 119)) | (1L << (FINAL - 119)) | (1L << (INHERIT - 119)) | (1L << (LANGUAGE - 119)))) != 0) || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & ((1L << (MODIFIES - 184)) | (1L << (NO - 184)) | (1L << (NOT - 184)) | (1L << (NULL - 184)) | (1L << (PACKAGE - 184)) | (1L << (PARAMETER - 184)) | (1L << (PROGRAM - 184)) | (1L << (READS - 184)) | (1L << (RETURNS - 184)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (RUN - 257)) | (1L << (SCRATCHPAD - 257)) | (1L << (SECURITY - 257)) | (1L << (SPECIFIC - 257)) | (1L << (STATIC - 257)) | (1L << (STAY - 257)) | (1L << (VARIANT - 257)) | (1L << (WLM - 257)))) != 0) || ((((_la - 433)) & ~0x3f) == 0 && ((1L << (_la - 433)) & ((1L << (CALLED - 433)) | (1L << (SECURED - 433)) | (1L << (STOP - 433)))) != 0) || _la==CARDINALITY );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterIndexStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode INDEX() { return getToken(DB2zSQLParser.INDEX, 0); }
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public RegenerateClauseContext regenerateClause() {
			return getRuleContext(RegenerateClauseContext.class,0);
		}
		public List<AlterIndexOptionsContext> alterIndexOptions() {
			return getRuleContexts(AlterIndexOptionsContext.class);
		}
		public AlterIndexOptionsContext alterIndexOptions(int i) {
			return getRuleContext(AlterIndexOptionsContext.class,i);
		}
		public List<AlterIndexPartitionOptionsContext> alterIndexPartitionOptions() {
			return getRuleContexts(AlterIndexPartitionOptionsContext.class);
		}
		public AlterIndexPartitionOptionsContext alterIndexPartitionOptions(int i) {
			return getRuleContext(AlterIndexPartitionOptionsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public AlterIndexStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterIndexStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterIndexStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterIndexStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterIndexStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterIndexStatementContext alterIndexStatement() throws RecognitionException {
		AlterIndexStatementContext _localctx = new AlterIndexStatementContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_alterIndexStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(782);
			match(ALTER);
			setState(783);
			match(INDEX);
			setState(784);
			indexName();
			setState(786);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REGENERATE) {
				{
				setState(785);
				regenerateClause();
				}
			}

			setState(791);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << BUFFERPOOL) | (1L << CLOSE) | (1L << CLUSTER))) != 0) || _la==DSSIZE || _la==ERASE || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (NOT - 191)) | (1L << (PADDED - 191)) | (1L << (PIECESIZE - 191)) | (1L << (PRIQTY - 191)))) != 0) || _la==USING || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (COMPRESS - 458)) | (1L << (COPY - 458)) | (1L << (FREEPAGE - 458)) | (1L << (GBPCACHE - 458)) | (1L << (PCTFREE - 458)) | (1L << (SEQTY - 458)))) != 0)) {
				{
				{
				setState(788);
				alterIndexOptions();
				}
				}
				setState(793);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(802);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALTER) {
				{
				setState(794);
				alterIndexPartitionOptions();
				setState(799);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(795);
					match(COMMA);
					setState(796);
					alterIndexPartitionOptions();
					}
					}
					setState(801);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterMaskStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode MASK() { return getToken(DB2zSQLParser.MASK, 0); }
		public MaskNameContext maskName() {
			return getRuleContext(MaskNameContext.class,0);
		}
		public TerminalNode ENABLE() { return getToken(DB2zSQLParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(DB2zSQLParser.DISABLE, 0); }
		public RegenerateClauseContext regenerateClause() {
			return getRuleContext(RegenerateClauseContext.class,0);
		}
		public AlterMaskStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterMaskStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterMaskStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterMaskStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterMaskStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterMaskStatementContext alterMaskStatement() throws RecognitionException {
		AlterMaskStatementContext _localctx = new AlterMaskStatementContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_alterMaskStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(804);
			match(ALTER);
			setState(805);
			match(MASK);
			setState(806);
			maskName();
			setState(810);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENABLE:
				{
				setState(807);
				match(ENABLE);
				}
				break;
			case DISABLE:
				{
				setState(808);
				match(DISABLE);
				}
				break;
			case REGENERATE:
				{
				setState(809);
				regenerateClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterPermissionStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode PERMISSION() { return getToken(DB2zSQLParser.PERMISSION, 0); }
		public PermissionNameContext permissionName() {
			return getRuleContext(PermissionNameContext.class,0);
		}
		public TerminalNode ENABLE() { return getToken(DB2zSQLParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(DB2zSQLParser.DISABLE, 0); }
		public RegenerateClauseContext regenerateClause() {
			return getRuleContext(RegenerateClauseContext.class,0);
		}
		public AlterPermissionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterPermissionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterPermissionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterPermissionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterPermissionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterPermissionStatementContext alterPermissionStatement() throws RecognitionException {
		AlterPermissionStatementContext _localctx = new AlterPermissionStatementContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_alterPermissionStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(812);
			match(ALTER);
			setState(813);
			match(PERMISSION);
			setState(814);
			permissionName();
			setState(818);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENABLE:
				{
				setState(815);
				match(ENABLE);
				}
				break;
			case DISABLE:
				{
				setState(816);
				match(DISABLE);
				}
				break;
			case REGENERATE:
				{
				setState(817);
				regenerateClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterProcedureStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode PROCEDURE() { return getToken(DB2zSQLParser.PROCEDURE, 0); }
		public ProcedureNameContext procedureName() {
			return getRuleContext(ProcedureNameContext.class,0);
		}
		public List<ProcedureOptionListContext> procedureOptionList() {
			return getRuleContexts(ProcedureOptionListContext.class);
		}
		public ProcedureOptionListContext procedureOptionList(int i) {
			return getRuleContext(ProcedureOptionListContext.class,i);
		}
		public AlterProcedureStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterProcedureStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterProcedureStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterProcedureStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterProcedureStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterProcedureStatementContext alterProcedureStatement() throws RecognitionException {
		AlterProcedureStatementContext _localctx = new AlterProcedureStatementContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_alterProcedureStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(820);
			match(ALTER);
			setState(821);
			match(PROCEDURE);
			setState(822);
			procedureName();
			setState(824); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(823);
				procedureOptionList();
				}
				}
				setState(826); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (ALLOW - 33)) | (1L << (ASUTIME - 33)) | (1L << (COLLID - 33)) | (1L << (COMMIT - 33)) | (1L << (CONTAINS - 33)) | (1L << (CONTINUE - 33)) | (1L << (DBINFO - 33)) | (1L << (DEFAULT - 33)) | (1L << (DETERMINISTIC - 33)) | (1L << (DISABLE - 33)) | (1L << (DISALLOW - 33)))) != 0) || ((((_la - 101)) & ~0x3f) == 0 && ((1L << (_la - 101)) & ((1L << (DYNAMIC - 101)) | (1L << (EXTERNAL - 101)) | (1L << (INHERIT - 101)) | (1L << (LANGUAGE - 101)))) != 0) || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & ((1L << (MODIFIES - 184)) | (1L << (NO - 184)) | (1L << (NOT - 184)) | (1L << (NULL - 184)) | (1L << (PACKAGE - 184)) | (1L << (PARAMETER - 184)) | (1L << (PROGRAM - 184)) | (1L << (READS - 184)) | (1L << (RESULT - 184)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (RUN - 257)) | (1L << (SECURITY - 257)) | (1L << (STAY - 257)) | (1L << (VARIANT - 257)) | (1L << (WLM - 257)))) != 0) || _la==CALLED || _la==STOP );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterSequenceStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode SEQUENCE() { return getToken(DB2zSQLParser.SEQUENCE, 0); }
		public SequenceNameContext sequenceName() {
			return getRuleContext(SequenceNameContext.class,0);
		}
		public List<SequenceOptionListContext> sequenceOptionList() {
			return getRuleContexts(SequenceOptionListContext.class);
		}
		public SequenceOptionListContext sequenceOptionList(int i) {
			return getRuleContext(SequenceOptionListContext.class,i);
		}
		public AlterSequenceStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterSequenceStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterSequenceStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterSequenceStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterSequenceStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterSequenceStatementContext alterSequenceStatement() throws RecognitionException {
		AlterSequenceStatementContext _localctx = new AlterSequenceStatementContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_alterSequenceStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(828);
			match(ALTER);
			setState(829);
			match(SEQUENCE);
			setState(830);
			sequenceName();
			setState(832); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(831);
				sequenceOptionList();
				}
				}
				setState(834); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==NO || _la==ORDER || ((((_la - 463)) & ~0x3f) == 0 && ((1L << (_la - 463)) & ((1L << (MAXVALUE - 463)) | (1L << (MINVALUE - 463)) | (1L << (CACHE - 463)) | (1L << (CYCLE - 463)) | (1L << (INCREMENT - 463)) | (1L << (RESTART - 463)))) != 0) );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterStogroupStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode STOGROUP() { return getToken(DB2zSQLParser.STOGROUP, 0); }
		public StogroupNameContext stogroupName() {
			return getRuleContext(StogroupNameContext.class,0);
		}
		public List<StogroupOptionListContext> stogroupOptionList() {
			return getRuleContexts(StogroupOptionListContext.class);
		}
		public StogroupOptionListContext stogroupOptionList(int i) {
			return getRuleContext(StogroupOptionListContext.class,i);
		}
		public AlterStogroupStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterStogroupStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterStogroupStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterStogroupStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterStogroupStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterStogroupStatementContext alterStogroupStatement() throws RecognitionException {
		AlterStogroupStatementContext _localctx = new AlterStogroupStatementContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_alterStogroupStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(836);
			match(ALTER);
			setState(837);
			match(STOGROUP);
			setState(838);
			stogroupName();
			setState(840); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(839);
				stogroupOptionList();
				}
				}
				setState(842); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==ADD || _la==KEY || _la==NO || ((((_la - 488)) & ~0x3f) == 0 && ((1L << (_la - 488)) & ((1L << (DATACLAS - 488)) | (1L << (MGMTCLAS - 488)) | (1L << (REMOVE - 488)) | (1L << (STORCLAS - 488)))) != 0) );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public AlterTableNameContext alterTableName() {
			return getRuleContext(AlterTableNameContext.class,0);
		}
		public List<TableOptionListContext> tableOptionList() {
			return getRuleContexts(TableOptionListContext.class);
		}
		public TableOptionListContext tableOptionList(int i) {
			return getRuleContext(TableOptionListContext.class,i);
		}
		public AlterTableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTableStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterTableStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterTableStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterTableStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableStatementContext alterTableStatement() throws RecognitionException {
		AlterTableStatementContext _localctx = new AlterTableStatementContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_alterTableStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(844);
			match(ALTER);
			setState(845);
			match(TABLE);
			setState(846);
			alterTableName();
			setState(848); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(847);
				tableOptionList();
				}
				}
				setState(850); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALTER) | (1L << AUDIT))) != 0) || ((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & ((1L << (DATA - 83)) | (1L << (DISABLE - 83)) | (1L << (DROP - 83)))) != 0) || ((((_la - 161)) & ~0x3f) == 0 && ((1L << (_la - 161)) & ((1L << (KEY - 161)) | (1L << (NO - 161)) | (1L << (NOT - 161)))) != 0) || _la==RENAME || _la==VALIDPROC || _la==VOLATILE || ((((_la - 469)) & ~0x3f) == 0 && ((1L << (_la - 469)) & ((1L << (ENABLE - 469)) | (1L << (ACTIVATE - 469)) | (1L << (APPEND - 469)) | (1L << (DEACTIVATE - 469)) | (1L << (ROTATE - 469)))) != 0) );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SearchedDeleteContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(DB2zSQLParser.DELETE, 0); }
		public TerminalNode FROM() { return getToken(DB2zSQLParser.FROM, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(DB2zSQLParser.WHERE, 0); }
		public SearchConditionContext searchCondition() {
			return getRuleContext(SearchConditionContext.class,0);
		}
		public PeriodClauseContext periodClause() {
			return getRuleContext(PeriodClauseContext.class,0);
		}
		public CorrelationNameContext correlationName() {
			return getRuleContext(CorrelationNameContext.class,0);
		}
		public IncludeColumnsContext includeColumns() {
			return getRuleContext(IncludeColumnsContext.class,0);
		}
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public AssignmentClauseContext assignmentClause() {
			return getRuleContext(AssignmentClauseContext.class,0);
		}
		public FetchClauseContext fetchClause() {
			return getRuleContext(FetchClauseContext.class,0);
		}
		public List<IsolationClauseContext> isolationClause() {
			return getRuleContexts(IsolationClauseContext.class);
		}
		public IsolationClauseContext isolationClause(int i) {
			return getRuleContext(IsolationClauseContext.class,i);
		}
		public List<SkipLockedDataClauseContext> skipLockedDataClause() {
			return getRuleContexts(SkipLockedDataClauseContext.class);
		}
		public SkipLockedDataClauseContext skipLockedDataClause(int i) {
			return getRuleContext(SkipLockedDataClauseContext.class,i);
		}
		public TerminalNode QUERYNO() { return getToken(DB2zSQLParser.QUERYNO, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public SearchedDeleteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searchedDelete; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSearchedDelete(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSearchedDelete(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSearchedDelete(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SearchedDeleteContext searchedDelete() throws RecognitionException {
		SearchedDeleteContext _localctx = new SearchedDeleteContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_searchedDelete);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(852);
			match(DELETE);
			setState(853);
			match(FROM);
			setState(854);
			tableName();
			setState(856);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,38,_ctx) ) {
			case 1:
				{
				setState(855);
				periodClause();
				}
				break;
			}
			setState(859);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,39,_ctx) ) {
			case 1:
				{
				setState(858);
				correlationName();
				}
				break;
			}
			setState(862);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INCLUDE) {
				{
				setState(861);
				includeColumns();
				}
			}

			setState(866);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SET) {
				{
				setState(864);
				match(SET);
				setState(865);
				assignmentClause();
				}
			}

			{
			setState(868);
			match(WHERE);
			setState(869);
			searchCondition();
			}
			setState(872);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,42,_ctx) ) {
			case 1:
				{
				setState(871);
				fetchClause();
				}
				break;
			}
			setState(878);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,44,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(876);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case WITH:
						{
						setState(874);
						isolationClause();
						}
						break;
					case SKIP_:
						{
						setState(875);
						skipLockedDataClause();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(880);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,44,_ctx);
			}
			setState(883);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,45,_ctx) ) {
			case 1:
				{
				setState(881);
				match(QUERYNO);
				setState(882);
				match(INTEGERLITERAL);
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PositionedDeleteContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(DB2zSQLParser.DELETE, 0); }
		public TerminalNode FROM() { return getToken(DB2zSQLParser.FROM, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(DB2zSQLParser.WHERE, 0); }
		public TerminalNode CURRENT() { return getToken(DB2zSQLParser.CURRENT, 0); }
		public List<TerminalNode> OF() { return getTokens(DB2zSQLParser.OF); }
		public TerminalNode OF(int i) {
			return getToken(DB2zSQLParser.OF, i);
		}
		public CursorNameContext cursorName() {
			return getRuleContext(CursorNameContext.class,0);
		}
		public CorrelationNameContext correlationName() {
			return getRuleContext(CorrelationNameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode ROW() { return getToken(DB2zSQLParser.ROW, 0); }
		public TerminalNode ROWSET() { return getToken(DB2zSQLParser.ROWSET, 0); }
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public PositionedDeleteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_positionedDelete; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPositionedDelete(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPositionedDelete(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPositionedDelete(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PositionedDeleteContext positionedDelete() throws RecognitionException {
		PositionedDeleteContext _localctx = new PositionedDeleteContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_positionedDelete);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(885);
			match(DELETE);
			setState(886);
			match(FROM);
			setState(887);
			tableName();
			setState(889);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,46,_ctx) ) {
			case 1:
				{
				setState(888);
				correlationName();
				}
				break;
			}
			setState(891);
			match(WHERE);
			setState(892);
			match(CURRENT);
			setState(893);
			match(OF);
			setState(894);
			cursorName();
			setState(903);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(895);
				match(FOR);
				setState(896);
				match(ROW);
				setState(899);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case COLON:
					{
					setState(897);
					hostVariable();
					}
					break;
				case INTEGERLITERAL:
					{
					setState(898);
					match(INTEGERLITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(901);
				match(OF);
				setState(902);
				match(ROWSET);
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeleteStatementContext extends ParserRuleContext {
		public SearchedDeleteContext searchedDelete() {
			return getRuleContext(SearchedDeleteContext.class,0);
		}
		public PositionedDeleteContext positionedDelete() {
			return getRuleContext(PositionedDeleteContext.class,0);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deleteStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDeleteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDeleteStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDeleteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeleteStatementContext deleteStatement() throws RecognitionException {
		DeleteStatementContext _localctx = new DeleteStatementContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_deleteStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(907);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,49,_ctx) ) {
			case 1:
				{
				setState(905);
				searchedDelete();
				}
				break;
			case 2:
				{
				setState(906);
				positionedDelete();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertStatementContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(DB2zSQLParser.INSERT, 0); }
		public TerminalNode INTO() { return getToken(DB2zSQLParser.INTO, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public MultipleRowInsertContext multipleRowInsert() {
			return getRuleContext(MultipleRowInsertContext.class,0);
		}
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public IncludeColumnsContext includeColumns() {
			return getRuleContext(IncludeColumnsContext.class,0);
		}
		public TerminalNode OVERRIDING() { return getToken(DB2zSQLParser.OVERRIDING, 0); }
		public TerminalNode USER() { return getToken(DB2zSQLParser.USER, 0); }
		public TerminalNode VALUE() { return getToken(DB2zSQLParser.VALUE, 0); }
		public TerminalNode VALUES() { return getToken(DB2zSQLParser.VALUES, 0); }
		public FullSelectContext fullSelect() {
			return getRuleContext(FullSelectContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public List<ValuesList1Context> valuesList1() {
			return getRuleContexts(ValuesList1Context.class);
		}
		public ValuesList1Context valuesList1(int i) {
			return getRuleContext(ValuesList1Context.class,i);
		}
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public List<CommonTableExpressionContext> commonTableExpression() {
			return getRuleContexts(CommonTableExpressionContext.class);
		}
		public CommonTableExpressionContext commonTableExpression(int i) {
			return getRuleContext(CommonTableExpressionContext.class,i);
		}
		public IsolationClauseContext isolationClause() {
			return getRuleContext(IsolationClauseContext.class,0);
		}
		public TerminalNode QUERYNO() { return getToken(DB2zSQLParser.QUERYNO, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public InsertStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterInsertStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitInsertStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitInsertStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertStatementContext insertStatement() throws RecognitionException {
		InsertStatementContext _localctx = new InsertStatementContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_insertStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(909);
			match(INSERT);
			setState(910);
			match(INTO);
			setState(911);
			tableName();
			setState(923);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,51,_ctx) ) {
			case 1:
				{
				setState(912);
				match(LPAREN);
				setState(913);
				columnName();
				setState(918);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(914);
					match(COMMA);
					setState(915);
					columnName();
					}
					}
					setState(920);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(921);
				match(RPAREN);
				}
				break;
			}
			setState(926);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INCLUDE) {
				{
				setState(925);
				includeColumns();
				}
			}

			setState(931);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OVERRIDING) {
				{
				setState(928);
				match(OVERRIDING);
				setState(929);
				match(USER);
				setState(930);
				match(VALUE);
				}
			}

			setState(968);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,60,_ctx) ) {
			case 1:
				{
				{
				setState(933);
				match(VALUES);
				setState(946);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,55,_ctx) ) {
				case 1:
					{
					setState(934);
					valuesList1();
					}
					break;
				case 2:
					{
					{
					setState(935);
					match(LPAREN);
					setState(936);
					valuesList1();
					setState(941);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(937);
						match(COMMA);
						setState(938);
						valuesList1();
						}
						}
						setState(943);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(944);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 2:
				{
				{
				setState(957);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(948);
					match(WITH);
					setState(949);
					commonTableExpression();
					setState(954);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(950);
						match(COMMA);
						setState(951);
						commonTableExpression();
						}
						}
						setState(956);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(959);
				fullSelect();
				setState(961);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(960);
					isolationClause();
					}
				}

				setState(965);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==QUERYNO) {
					{
					setState(963);
					match(QUERYNO);
					setState(964);
					match(INTEGERLITERAL);
					}
				}

				}
				}
				break;
			case 3:
				{
				setState(967);
				multipleRowInsert();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MergeStatementContext extends ParserRuleContext {
		public TerminalNode MERGE() { return getToken(DB2zSQLParser.MERGE, 0); }
		public TerminalNode INTO() { return getToken(DB2zSQLParser.INTO, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode USING() { return getToken(DB2zSQLParser.USING, 0); }
		public List<TerminalNode> ON() { return getTokens(DB2zSQLParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(DB2zSQLParser.ON, i);
		}
		public SearchConditionContext searchCondition() {
			return getRuleContext(SearchConditionContext.class,0);
		}
		public SourceValuesContext sourceValues() {
			return getRuleContext(SourceValuesContext.class,0);
		}
		public CorrelationClauseContext correlationClause() {
			return getRuleContext(CorrelationClauseContext.class,0);
		}
		public IncludeColumnsContext includeColumns() {
			return getRuleContext(IncludeColumnsContext.class,0);
		}
		public List<TerminalNode> WHEN() { return getTokens(DB2zSQLParser.WHEN); }
		public TerminalNode WHEN(int i) {
			return getToken(DB2zSQLParser.WHEN, i);
		}
		public List<MatchingConditionContext> matchingCondition() {
			return getRuleContexts(MatchingConditionContext.class);
		}
		public MatchingConditionContext matchingCondition(int i) {
			return getRuleContext(MatchingConditionContext.class,i);
		}
		public List<TerminalNode> THEN() { return getTokens(DB2zSQLParser.THEN); }
		public TerminalNode THEN(int i) {
			return getToken(DB2zSQLParser.THEN, i);
		}
		public TerminalNode ELSE() { return getToken(DB2zSQLParser.ELSE, 0); }
		public TerminalNode IGNORE() { return getToken(DB2zSQLParser.IGNORE, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TerminalNode ATOMIC() { return getToken(DB2zSQLParser.ATOMIC, 0); }
		public TerminalNode CONTINUE() { return getToken(DB2zSQLParser.CONTINUE, 0); }
		public TerminalNode SQLEXCEPTION() { return getToken(DB2zSQLParser.SQLEXCEPTION, 0); }
		public TerminalNode QUERYNO() { return getToken(DB2zSQLParser.QUERYNO, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public List<ModificationOperationContext> modificationOperation() {
			return getRuleContexts(ModificationOperationContext.class);
		}
		public ModificationOperationContext modificationOperation(int i) {
			return getRuleContext(ModificationOperationContext.class,i);
		}
		public List<SignalStatementContext> signalStatement() {
			return getRuleContexts(SignalStatementContext.class);
		}
		public SignalStatementContext signalStatement(int i) {
			return getRuleContext(SignalStatementContext.class,i);
		}
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public MergeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mergeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterMergeStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitMergeStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitMergeStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MergeStatementContext mergeStatement() throws RecognitionException {
		MergeStatementContext _localctx = new MergeStatementContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_mergeStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(970);
			match(MERGE);
			setState(971);
			match(INTO);
			setState(972);
			tableName();
			setState(974);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,61,_ctx) ) {
			case 1:
				{
				setState(973);
				correlationClause();
				}
				break;
			}
			setState(977);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INCLUDE) {
				{
				setState(976);
				includeColumns();
				}
			}

			setState(979);
			match(USING);
			setState(994);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,65,_ctx) ) {
			case 1:
				{
				{
				setState(983);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,63,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(980);
						match(LPAREN);
						}
						} 
					}
					setState(985);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,63,_ctx);
				}
				setState(986);
				tableReference();
				setState(990);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==RPAREN) {
					{
					{
					setState(987);
					match(RPAREN);
					}
					}
					setState(992);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case 2:
				{
				setState(993);
				sourceValues();
				}
				break;
			}
			setState(996);
			match(ON);
			setState(997);
			searchCondition();
			setState(1005); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(998);
				match(WHEN);
				setState(999);
				matchingCondition();
				setState(1000);
				match(THEN);
				setState(1003);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DELETE:
				case INSERT:
				case UPDATE:
					{
					setState(1001);
					modificationOperation();
					}
					break;
				case SIGNAL:
					{
					setState(1002);
					signalStatement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				setState(1007); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(1011);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(1009);
				match(ELSE);
				setState(1010);
				match(IGNORE);
				}
			}

			setState(1018);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(1013);
				match(NOT);
				setState(1014);
				match(ATOMIC);
				setState(1015);
				match(CONTINUE);
				setState(1016);
				match(ON);
				setState(1017);
				match(SQLEXCEPTION);
				}
			}

			setState(1022);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,70,_ctx) ) {
			case 1:
				{
				setState(1020);
				match(QUERYNO);
				setState(1021);
				match(INTEGERLITERAL);
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SearchedUpdateContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(DB2zSQLParser.UPDATE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public AssignmentClauseContext assignmentClause() {
			return getRuleContext(AssignmentClauseContext.class,0);
		}
		public PeriodClauseContext periodClause() {
			return getRuleContext(PeriodClauseContext.class,0);
		}
		public CorrelationNameContext correlationName() {
			return getRuleContext(CorrelationNameContext.class,0);
		}
		public IncludeColumnsContext includeColumns() {
			return getRuleContext(IncludeColumnsContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(DB2zSQLParser.WHERE, 0); }
		public SearchConditionContext searchCondition() {
			return getRuleContext(SearchConditionContext.class,0);
		}
		public List<IsolationClauseContext> isolationClause() {
			return getRuleContexts(IsolationClauseContext.class);
		}
		public IsolationClauseContext isolationClause(int i) {
			return getRuleContext(IsolationClauseContext.class,i);
		}
		public List<SkipLockedDataClauseContext> skipLockedDataClause() {
			return getRuleContexts(SkipLockedDataClauseContext.class);
		}
		public SkipLockedDataClauseContext skipLockedDataClause(int i) {
			return getRuleContext(SkipLockedDataClauseContext.class,i);
		}
		public TerminalNode QUERYNO() { return getToken(DB2zSQLParser.QUERYNO, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public SearchedUpdateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searchedUpdate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSearchedUpdate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSearchedUpdate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSearchedUpdate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SearchedUpdateContext searchedUpdate() throws RecognitionException {
		SearchedUpdateContext _localctx = new SearchedUpdateContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_searchedUpdate);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1024);
			match(UPDATE);
			setState(1025);
			tableName();
			setState(1027);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,71,_ctx) ) {
			case 1:
				{
				setState(1026);
				periodClause();
				}
				break;
			}
			setState(1030);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,72,_ctx) ) {
			case 1:
				{
				setState(1029);
				correlationName();
				}
				break;
			}
			setState(1033);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INCLUDE) {
				{
				setState(1032);
				includeColumns();
				}
			}

			setState(1035);
			match(SET);
			setState(1036);
			assignmentClause();
			setState(1039);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,74,_ctx) ) {
			case 1:
				{
				setState(1037);
				match(WHERE);
				setState(1038);
				searchCondition();
				}
				break;
			}
			setState(1045);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,76,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(1043);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case WITH:
						{
						setState(1041);
						isolationClause();
						}
						break;
					case SKIP_:
						{
						setState(1042);
						skipLockedDataClause();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(1047);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,76,_ctx);
			}
			setState(1050);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,77,_ctx) ) {
			case 1:
				{
				setState(1048);
				match(QUERYNO);
				setState(1049);
				match(INTEGERLITERAL);
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PositionedUpdateContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(DB2zSQLParser.UPDATE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public AssignmentClauseContext assignmentClause() {
			return getRuleContext(AssignmentClauseContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(DB2zSQLParser.WHERE, 0); }
		public TerminalNode CURRENT() { return getToken(DB2zSQLParser.CURRENT, 0); }
		public List<TerminalNode> OF() { return getTokens(DB2zSQLParser.OF); }
		public TerminalNode OF(int i) {
			return getToken(DB2zSQLParser.OF, i);
		}
		public CursorNameContext cursorName() {
			return getRuleContext(CursorNameContext.class,0);
		}
		public CorrelationNameContext correlationName() {
			return getRuleContext(CorrelationNameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode ROW() { return getToken(DB2zSQLParser.ROW, 0); }
		public TerminalNode ROWSET() { return getToken(DB2zSQLParser.ROWSET, 0); }
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public PositionedUpdateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_positionedUpdate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPositionedUpdate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPositionedUpdate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPositionedUpdate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PositionedUpdateContext positionedUpdate() throws RecognitionException {
		PositionedUpdateContext _localctx = new PositionedUpdateContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_positionedUpdate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1052);
			match(UPDATE);
			setState(1053);
			tableName();
			setState(1055);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,78,_ctx) ) {
			case 1:
				{
				setState(1054);
				correlationName();
				}
				break;
			}
			setState(1057);
			match(SET);
			setState(1058);
			assignmentClause();
			setState(1059);
			match(WHERE);
			setState(1060);
			match(CURRENT);
			setState(1061);
			match(OF);
			setState(1062);
			cursorName();
			setState(1071);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(1063);
				match(FOR);
				setState(1064);
				match(ROW);
				setState(1067);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case COLON:
					{
					setState(1065);
					hostVariable();
					}
					break;
				case INTEGERLITERAL:
					{
					setState(1066);
					match(INTEGERLITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1069);
				match(OF);
				setState(1070);
				match(ROWSET);
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateStatementContext extends ParserRuleContext {
		public SearchedUpdateContext searchedUpdate() {
			return getRuleContext(SearchedUpdateContext.class,0);
		}
		public PositionedUpdateContext positionedUpdate() {
			return getRuleContext(PositionedUpdateContext.class,0);
		}
		public UpdateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterUpdateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitUpdateStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitUpdateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateStatementContext updateStatement() throws RecognitionException {
		UpdateStatementContext _localctx = new UpdateStatementContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_updateStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1075);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,81,_ctx) ) {
			case 1:
				{
				setState(1073);
				searchedUpdate();
				}
				break;
			case 2:
				{
				setState(1074);
				positionedUpdate();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SourceValuesContext extends ParserRuleContext {
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public TerminalNode VALUES() { return getToken(DB2zSQLParser.VALUES, 0); }
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public CorrelationNameContext correlationName() {
			return getRuleContext(CorrelationNameContext.class,0);
		}
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public ValuesSingleRowContext valuesSingleRow() {
			return getRuleContext(ValuesSingleRowContext.class,0);
		}
		public ValuesMultipleRowContext valuesMultipleRow() {
			return getRuleContext(ValuesMultipleRowContext.class,0);
		}
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public SourceValuesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sourceValues; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSourceValues(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSourceValues(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSourceValues(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SourceValuesContext sourceValues() throws RecognitionException {
		SourceValuesContext _localctx = new SourceValuesContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_sourceValues);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1077);
			match(LPAREN);
			setState(1078);
			match(VALUES);
			setState(1081);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,82,_ctx) ) {
			case 1:
				{
				setState(1079);
				valuesSingleRow();
				}
				break;
			case 2:
				{
				setState(1080);
				valuesMultipleRow();
				}
				break;
			}
			setState(1083);
			match(RPAREN);
			setState(1085);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,83,_ctx) ) {
			case 1:
				{
				setState(1084);
				match(AS);
				}
				break;
			}
			setState(1087);
			correlationName();
			setState(1088);
			match(LPAREN);
			setState(1089);
			columnName();
			setState(1094);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1090);
				match(COMMA);
				setState(1091);
				columnName();
				}
				}
				setState(1096);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1097);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValuesSingleRowContext extends ParserRuleContext {
		public List<ValuesList3Context> valuesList3() {
			return getRuleContexts(ValuesList3Context.class);
		}
		public ValuesList3Context valuesList3(int i) {
			return getRuleContext(ValuesList3Context.class,i);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public ValuesSingleRowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valuesSingleRow; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterValuesSingleRow(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitValuesSingleRow(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitValuesSingleRow(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValuesSingleRowContext valuesSingleRow() throws RecognitionException {
		ValuesSingleRowContext _localctx = new ValuesSingleRowContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_valuesSingleRow);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1111);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,86,_ctx) ) {
			case 1:
				{
				setState(1099);
				valuesList3();
				}
				break;
			case 2:
				{
				{
				setState(1100);
				match(LPAREN);
				setState(1101);
				valuesList3();
				setState(1106);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1102);
					match(COMMA);
					setState(1103);
					valuesList3();
					}
					}
					setState(1108);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1109);
				match(RPAREN);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValuesMultipleRowContext extends ParserRuleContext {
		public List<ValuesList4Context> valuesList4() {
			return getRuleContexts(ValuesList4Context.class);
		}
		public ValuesList4Context valuesList4(int i) {
			return getRuleContext(ValuesList4Context.class,i);
		}
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode ROWS() { return getToken(DB2zSQLParser.ROWS, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public ValuesMultipleRowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valuesMultipleRow; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterValuesMultipleRow(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitValuesMultipleRow(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitValuesMultipleRow(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValuesMultipleRowContext valuesMultipleRow() throws RecognitionException {
		ValuesMultipleRowContext _localctx = new ValuesMultipleRowContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_valuesMultipleRow);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1132);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,89,_ctx) ) {
			case 1:
				{
				setState(1113);
				valuesList4();
				}
				break;
			case 2:
				{
				{
				setState(1114);
				match(LPAREN);
				setState(1115);
				valuesList4();
				setState(1120);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1116);
					match(COMMA);
					setState(1117);
					valuesList4();
					}
					}
					setState(1122);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1123);
				match(RPAREN);
				}
				setState(1125);
				match(FOR);
				setState(1128);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case COLON:
					{
					setState(1126);
					hostVariable();
					}
					break;
				case INTEGERLITERAL:
					{
					setState(1127);
					match(INTEGERLITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1130);
				match(ROWS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MatchingConditionContext extends ParserRuleContext {
		public TerminalNode MATCHED() { return getToken(DB2zSQLParser.MATCHED, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TerminalNode AND() { return getToken(DB2zSQLParser.AND, 0); }
		public SearchConditionContext searchCondition() {
			return getRuleContext(SearchConditionContext.class,0);
		}
		public MatchingConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_matchingCondition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterMatchingCondition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitMatchingCondition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitMatchingCondition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MatchingConditionContext matchingCondition() throws RecognitionException {
		MatchingConditionContext _localctx = new MatchingConditionContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_matchingCondition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1135);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(1134);
				match(NOT);
				}
			}

			setState(1137);
			match(MATCHED);
			setState(1140);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(1138);
				match(AND);
				setState(1139);
				searchCondition();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ModificationOperationContext extends ParserRuleContext {
		public UpdateOperationContext updateOperation() {
			return getRuleContext(UpdateOperationContext.class,0);
		}
		public DeleteOperationContext deleteOperation() {
			return getRuleContext(DeleteOperationContext.class,0);
		}
		public InsertOperationContext insertOperation() {
			return getRuleContext(InsertOperationContext.class,0);
		}
		public ModificationOperationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modificationOperation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterModificationOperation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitModificationOperation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitModificationOperation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ModificationOperationContext modificationOperation() throws RecognitionException {
		ModificationOperationContext _localctx = new ModificationOperationContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_modificationOperation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1145);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UPDATE:
				{
				setState(1142);
				updateOperation();
				}
				break;
			case DELETE:
				{
				setState(1143);
				deleteOperation();
				}
				break;
			case INSERT:
				{
				setState(1144);
				insertOperation();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AssignmentClauseContext extends ParserRuleContext {
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public List<TerminalNode> EQ() { return getTokens(DB2zSQLParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(DB2zSQLParser.EQ, i);
		}
		public List<ValuesList1Context> valuesList1() {
			return getRuleContexts(ValuesList1Context.class);
		}
		public ValuesList1Context valuesList1(int i) {
			return getRuleContext(ValuesList1Context.class,i);
		}
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public FullSelectContext fullSelect() {
			return getRuleContext(FullSelectContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public AssignmentClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignmentClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAssignmentClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAssignmentClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAssignmentClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AssignmentClauseContext assignmentClause() throws RecognitionException {
		AssignmentClauseContext _localctx = new AssignmentClauseContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_assignmentClause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1185);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,97,_ctx) ) {
			case 1:
				{
				{
				setState(1147);
				columnName();
				setState(1148);
				match(EQ);
				setState(1149);
				valuesList1();
				setState(1157);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,93,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1150);
						match(COMMA);
						setState(1151);
						columnName();
						setState(1152);
						match(EQ);
						setState(1153);
						valuesList1();
						}
						} 
					}
					setState(1159);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,93,_ctx);
				}
				}
				}
				break;
			case 2:
				{
				setState(1181);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,96,_ctx) ) {
				case 1:
					{
					setState(1160);
					match(LPAREN);
					setState(1161);
					columnName();
					setState(1166);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1162);
						match(COMMA);
						setState(1163);
						columnName();
						}
						}
						setState(1168);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(1169);
					match(RPAREN);
					setState(1170);
					match(EQ);
					setState(1171);
					match(LPAREN);
					{
					setState(1172);
					valuesList1();
					setState(1177);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1173);
						match(COMMA);
						setState(1174);
						valuesList1();
						}
						}
						setState(1179);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					}
					break;
				case 2:
					{
					setState(1180);
					fullSelect();
					}
					break;
				}
				setState(1183);
				match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateOperationContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(DB2zSQLParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public List<AssignmentClauseContext> assignmentClause() {
			return getRuleContexts(AssignmentClauseContext.class);
		}
		public AssignmentClauseContext assignmentClause(int i) {
			return getRuleContext(AssignmentClauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public UpdateOperationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateOperation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterUpdateOperation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitUpdateOperation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitUpdateOperation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateOperationContext updateOperation() throws RecognitionException {
		UpdateOperationContext _localctx = new UpdateOperationContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_updateOperation);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1187);
			match(UPDATE);
			setState(1188);
			match(SET);
			setState(1189);
			assignmentClause();
			setState(1194);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,98,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1190);
					match(COMMA);
					setState(1191);
					assignmentClause();
					}
					} 
				}
				setState(1196);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,98,_ctx);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeleteOperationContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(DB2zSQLParser.DELETE, 0); }
		public DeleteOperationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deleteOperation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDeleteOperation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDeleteOperation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDeleteOperation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeleteOperationContext deleteOperation() throws RecognitionException {
		DeleteOperationContext _localctx = new DeleteOperationContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_deleteOperation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1197);
			match(DELETE);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertOperationContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(DB2zSQLParser.INSERT, 0); }
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public TerminalNode VALUES() { return getToken(DB2zSQLParser.VALUES, 0); }
		public List<ValuesList1Context> valuesList1() {
			return getRuleContexts(ValuesList1Context.class);
		}
		public ValuesList1Context valuesList1(int i) {
			return getRuleContext(ValuesList1Context.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public InsertOperationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertOperation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterInsertOperation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitInsertOperation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitInsertOperation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertOperationContext insertOperation() throws RecognitionException {
		InsertOperationContext _localctx = new InsertOperationContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_insertOperation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1199);
			match(INSERT);
			setState(1200);
			match(LPAREN);
			setState(1201);
			columnName();
			setState(1206);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1202);
				match(COMMA);
				setState(1203);
				columnName();
				}
				}
				setState(1208);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1209);
			match(RPAREN);
			setState(1210);
			match(VALUES);
			setState(1223);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,101,_ctx) ) {
			case 1:
				{
				setState(1211);
				valuesList1();
				}
				break;
			case 2:
				{
				{
				setState(1212);
				match(LPAREN);
				setState(1213);
				valuesList1();
				setState(1218);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1214);
					match(COMMA);
					setState(1215);
					valuesList1();
					}
					}
					setState(1220);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1221);
				match(RPAREN);
				}
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignalStatementContext extends ParserRuleContext {
		public TerminalNode SIGNAL() { return getToken(DB2zSQLParser.SIGNAL, 0); }
		public TerminalNode SQLSTATE() { return getToken(DB2zSQLParser.SQLSTATE, 0); }
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public TerminalNode VALUE() { return getToken(DB2zSQLParser.VALUE, 0); }
		public SignalInformationContext signalInformation() {
			return getRuleContext(SignalInformationContext.class,0);
		}
		public SignalStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signalStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSignalStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSignalStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSignalStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignalStatementContext signalStatement() throws RecognitionException {
		SignalStatementContext _localctx = new SignalStatementContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_signalStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1225);
			match(SIGNAL);
			setState(1226);
			match(SQLSTATE);
			setState(1228);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VALUE) {
				{
				setState(1227);
				match(VALUE);
				}
			}

			setState(1230);
			match(NONNUMERICLITERAL);
			setState(1232);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SET) {
				{
				setState(1231);
				signalInformation();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignalInformationContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public TerminalNode MESSAGE_TEXT() { return getToken(DB2zSQLParser.MESSAGE_TEXT, 0); }
		public TerminalNode EQ() { return getToken(DB2zSQLParser.EQ, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<OperatorContext> operator() {
			return getRuleContexts(OperatorContext.class);
		}
		public OperatorContext operator(int i) {
			return getRuleContext(OperatorContext.class,i);
		}
		public SignalInformationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signalInformation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSignalInformation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSignalInformation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSignalInformation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignalInformationContext signalInformation() throws RecognitionException {
		SignalInformationContext _localctx = new SignalInformationContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_signalInformation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1234);
			match(SET);
			setState(1235);
			match(MESSAGE_TEXT);
			setState(1236);
			match(EQ);
			setState(1237);
			expression();
			setState(1243);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 12)) & ~0x3f) == 0 && ((1L << (_la - 12)) & ((1L << (PLUS - 12)) | (1L << (MINUS - 12)) | (1L << (SPLAT - 12)) | (1L << (SLASH - 12)) | (1L << (CONCATOP - 12)) | (1L << (CONCAT - 12)))) != 0)) {
				{
				{
				setState(1238);
				operator();
				setState(1239);
				expression();
				}
				}
				setState(1245);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValuesList1Context extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(DB2zSQLParser.DEFAULT, 0); }
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<OperatorContext> operator() {
			return getRuleContexts(OperatorContext.class);
		}
		public OperatorContext operator(int i) {
			return getRuleContext(OperatorContext.class,i);
		}
		public ValuesList1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valuesList1; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterValuesList1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitValuesList1(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitValuesList1(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValuesList1Context valuesList1() throws RecognitionException {
		ValuesList1Context _localctx = new ValuesList1Context(_ctx, getState());
		enterRule(_localctx, 84, RULE_valuesList1);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1257);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,106,_ctx) ) {
			case 1:
				{
				{
				setState(1246);
				expression();
				setState(1252);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (((((_la - 12)) & ~0x3f) == 0 && ((1L << (_la - 12)) & ((1L << (PLUS - 12)) | (1L << (MINUS - 12)) | (1L << (SPLAT - 12)) | (1L << (SLASH - 12)) | (1L << (CONCATOP - 12)) | (1L << (CONCAT - 12)))) != 0)) {
					{
					{
					setState(1247);
					operator();
					setState(1248);
					expression();
					}
					}
					setState(1254);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case 2:
				{
				setState(1255);
				match(DEFAULT);
				}
				break;
			case 3:
				{
				setState(1256);
				match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValuesList2Context extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(DB2zSQLParser.DEFAULT, 0); }
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public ValuesList2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valuesList2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterValuesList2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitValuesList2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitValuesList2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValuesList2Context valuesList2() throws RecognitionException {
		ValuesList2Context _localctx = new ValuesList2Context(_ctx, getState());
		enterRule(_localctx, 86, RULE_valuesList2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1263);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,107,_ctx) ) {
			case 1:
				{
				setState(1259);
				expression();
				}
				break;
			case 2:
				{
				setState(1260);
				hostVariable();
				}
				break;
			case 3:
				{
				setState(1261);
				match(DEFAULT);
				}
				break;
			case 4:
				{
				setState(1262);
				match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValuesList3Context extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public ValuesList3Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valuesList3; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterValuesList3(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitValuesList3(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitValuesList3(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValuesList3Context valuesList3() throws RecognitionException {
		ValuesList3Context _localctx = new ValuesList3Context(_ctx, getState());
		enterRule(_localctx, 88, RULE_valuesList3);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1267);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,108,_ctx) ) {
			case 1:
				{
				setState(1265);
				expression();
				}
				break;
			case 2:
				{
				setState(1266);
				match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValuesList4Context extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public ValuesList4Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valuesList4; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterValuesList4(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitValuesList4(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitValuesList4(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValuesList4Context valuesList4() throws RecognitionException {
		ValuesList4Context _localctx = new ValuesList4Context(_ctx, getState());
		enterRule(_localctx, 90, RULE_valuesList4);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1272);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,109,_ctx) ) {
			case 1:
				{
				setState(1269);
				expression();
				}
				break;
			case 2:
				{
				setState(1270);
				hostVariable();
				}
				break;
			case 3:
				{
				setState(1271);
				match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IncludeColumnsContext extends ParserRuleContext {
		public TerminalNode INCLUDE() { return getToken(DB2zSQLParser.INCLUDE, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public List<DataTypeContext> dataType() {
			return getRuleContexts(DataTypeContext.class);
		}
		public DataTypeContext dataType(int i) {
			return getRuleContext(DataTypeContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public IncludeColumnsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_includeColumns; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterIncludeColumns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitIncludeColumns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitIncludeColumns(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IncludeColumnsContext includeColumns() throws RecognitionException {
		IncludeColumnsContext _localctx = new IncludeColumnsContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_includeColumns);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1274);
			match(INCLUDE);
			setState(1275);
			match(LPAREN);
			setState(1276);
			columnName();
			setState(1277);
			dataType();
			setState(1284);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1278);
				match(COMMA);
				setState(1279);
				columnName();
				setState(1280);
				dataType();
				}
				}
				setState(1286);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1287);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultipleRowInsertContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(DB2zSQLParser.VALUES, 0); }
		public List<ValuesList2Context> valuesList2() {
			return getRuleContexts(ValuesList2Context.class);
		}
		public ValuesList2Context valuesList2(int i) {
			return getRuleContext(ValuesList2Context.class,i);
		}
		public TerminalNode ATOMIC() { return getToken(DB2zSQLParser.ATOMIC, 0); }
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode ROWS() { return getToken(DB2zSQLParser.ROWS, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TerminalNode CONTINUE() { return getToken(DB2zSQLParser.CONTINUE, 0); }
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public TerminalNode SQLEXCEPTION() { return getToken(DB2zSQLParser.SQLEXCEPTION, 0); }
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public MultipleRowInsertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipleRowInsert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterMultipleRowInsert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitMultipleRowInsert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitMultipleRowInsert(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultipleRowInsertContext multipleRowInsert() throws RecognitionException {
		MultipleRowInsertContext _localctx = new MultipleRowInsertContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_multipleRowInsert);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1289);
			match(VALUES);
			setState(1302);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,112,_ctx) ) {
			case 1:
				{
				setState(1290);
				valuesList2();
				}
				break;
			case 2:
				{
				{
				setState(1291);
				match(LPAREN);
				setState(1292);
				valuesList2();
				setState(1297);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1293);
					match(COMMA);
					setState(1294);
					valuesList2();
					}
					}
					setState(1299);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1300);
				match(RPAREN);
				}
				}
				break;
			}
			setState(1310);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(1304);
				match(FOR);
				setState(1307);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case COLON:
					{
					setState(1305);
					hostVariable();
					}
					break;
				case INTEGERLITERAL:
					{
					setState(1306);
					match(INTEGERLITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1309);
				match(ROWS);
				}
			}

			setState(1318);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ATOMIC:
				{
				setState(1312);
				match(ATOMIC);
				}
				break;
			case NOT:
				{
				{
				setState(1313);
				match(NOT);
				setState(1314);
				match(ATOMIC);
				setState(1315);
				match(CONTINUE);
				setState(1316);
				match(ON);
				setState(1317);
				match(SQLEXCEPTION);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RegenerateClauseContext extends ParserRuleContext {
		public TerminalNode REGENERATE() { return getToken(DB2zSQLParser.REGENERATE, 0); }
		public TerminalNode USING() { return getToken(DB2zSQLParser.USING, 0); }
		public TerminalNode APPLICATION() { return getToken(DB2zSQLParser.APPLICATION, 0); }
		public TerminalNode COMPATIBILITY() { return getToken(DB2zSQLParser.COMPATIBILITY, 0); }
		public ApplCompatValueContext applCompatValue() {
			return getRuleContext(ApplCompatValueContext.class,0);
		}
		public RegenerateClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regenerateClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRegenerateClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRegenerateClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRegenerateClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RegenerateClauseContext regenerateClause() throws RecognitionException {
		RegenerateClauseContext _localctx = new RegenerateClauseContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_regenerateClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1320);
			match(REGENERATE);
			setState(1325);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,116,_ctx) ) {
			case 1:
				{
				setState(1321);
				match(USING);
				setState(1322);
				match(APPLICATION);
				setState(1323);
				match(COMPATIBILITY);
				setState(1324);
				applCompatValue();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterIndexOptionsContext extends ParserRuleContext {
		public UsingSpecificationContext usingSpecification() {
			return getRuleContext(UsingSpecificationContext.class,0);
		}
		public FreeSpecificationContext freeSpecification() {
			return getRuleContext(FreeSpecificationContext.class,0);
		}
		public GbpcacheSpecificationContext gbpcacheSpecification() {
			return getRuleContext(GbpcacheSpecificationContext.class,0);
		}
		public TerminalNode BUFFERPOOL() { return getToken(DB2zSQLParser.BUFFERPOOL, 0); }
		public BpNameContext bpName() {
			return getRuleContext(BpNameContext.class,0);
		}
		public TerminalNode CLOSE() { return getToken(DB2zSQLParser.CLOSE, 0); }
		public TerminalNode COPY() { return getToken(DB2zSQLParser.COPY, 0); }
		public TerminalNode DSSIZE() { return getToken(DB2zSQLParser.DSSIZE, 0); }
		public TerminalNode SQLIDENTIFIER() { return getToken(DB2zSQLParser.SQLIDENTIFIER, 0); }
		public TerminalNode PIECESIZE() { return getToken(DB2zSQLParser.PIECESIZE, 0); }
		public TerminalNode CLUSTER() { return getToken(DB2zSQLParser.CLUSTER, 0); }
		public TerminalNode PADDED() { return getToken(DB2zSQLParser.PADDED, 0); }
		public TerminalNode COMPRESS() { return getToken(DB2zSQLParser.COMPRESS, 0); }
		public TerminalNode ADD() { return getToken(DB2zSQLParser.ADD, 0); }
		public TerminalNode YES() { return getToken(DB2zSQLParser.YES, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TerminalNode COLUMN() { return getToken(DB2zSQLParser.COLUMN, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode INCLUDE() { return getToken(DB2zSQLParser.INCLUDE, 0); }
		public TerminalNode ASC() { return getToken(DB2zSQLParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(DB2zSQLParser.DESC, 0); }
		public TerminalNode RANDOM() { return getToken(DB2zSQLParser.RANDOM, 0); }
		public AlterIndexOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterIndexOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterIndexOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterIndexOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterIndexOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterIndexOptionsContext alterIndexOptions() throws RecognitionException {
		AlterIndexOptionsContext _localctx = new AlterIndexOptionsContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_alterIndexOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1367);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,121,_ctx) ) {
			case 1:
				{
				{
				setState(1327);
				match(BUFFERPOOL);
				setState(1328);
				bpName();
				}
				}
				break;
			case 2:
				{
				{
				setState(1329);
				match(CLOSE);
				setState(1330);
				_la = _input.LA(1);
				if ( !(_la==NO || _la==YES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case 3:
				{
				{
				setState(1331);
				match(COPY);
				setState(1332);
				_la = _input.LA(1);
				if ( !(_la==NO || _la==YES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case 4:
				{
				{
				setState(1333);
				match(DSSIZE);
				setState(1334);
				match(SQLIDENTIFIER);
				}
				}
				break;
			case 5:
				{
				{
				setState(1335);
				match(PIECESIZE);
				setState(1336);
				match(SQLIDENTIFIER);
				}
				}
				break;
			case 6:
				{
				setState(1337);
				usingSpecification();
				}
				break;
			case 7:
				{
				setState(1338);
				freeSpecification();
				}
				break;
			case 8:
				{
				setState(1339);
				gbpcacheSpecification();
				}
				break;
			case 9:
				{
				{
				setState(1341);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1340);
					match(NOT);
					}
				}

				setState(1343);
				match(CLUSTER);
				}
				}
				break;
			case 10:
				{
				{
				setState(1345);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1344);
					match(NOT);
					}
				}

				setState(1347);
				match(PADDED);
				}
				}
				break;
			case 11:
				{
				{
				setState(1348);
				match(COMPRESS);
				setState(1349);
				_la = _input.LA(1);
				if ( !(_la==NO || _la==YES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case 12:
				{
				{
				setState(1350);
				match(ADD);
				setState(1365);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case COLUMN:
					{
					{
					setState(1351);
					match(COLUMN);
					setState(1352);
					match(LPAREN);
					setState(1353);
					columnName();
					setState(1355);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ASC || _la==DESC || _la==RANDOM) {
						{
						setState(1354);
						_la = _input.LA(1);
						if ( !(_la==ASC || _la==DESC || _la==RANDOM) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(1357);
					match(RPAREN);
					}
					}
					break;
				case INCLUDE:
					{
					{
					setState(1359);
					match(INCLUDE);
					setState(1360);
					match(COLUMN);
					setState(1361);
					match(LPAREN);
					setState(1362);
					columnName();
					setState(1363);
					match(RPAREN);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterIndexPartitionOptionsContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public PartitionElementContext partitionElement() {
			return getRuleContext(PartitionElementContext.class,0);
		}
		public List<GbpcacheSpecificationContext> gbpcacheSpecification() {
			return getRuleContexts(GbpcacheSpecificationContext.class);
		}
		public GbpcacheSpecificationContext gbpcacheSpecification(int i) {
			return getRuleContext(GbpcacheSpecificationContext.class,i);
		}
		public List<TerminalNode> DSSIZE() { return getTokens(DB2zSQLParser.DSSIZE); }
		public TerminalNode DSSIZE(int i) {
			return getToken(DB2zSQLParser.DSSIZE, i);
		}
		public List<TerminalNode> SQLIDENTIFIER() { return getTokens(DB2zSQLParser.SQLIDENTIFIER); }
		public TerminalNode SQLIDENTIFIER(int i) {
			return getToken(DB2zSQLParser.SQLIDENTIFIER, i);
		}
		public List<UsingSpecificationContext> usingSpecification() {
			return getRuleContexts(UsingSpecificationContext.class);
		}
		public UsingSpecificationContext usingSpecification(int i) {
			return getRuleContext(UsingSpecificationContext.class,i);
		}
		public List<FreeSpecificationContext> freeSpecification() {
			return getRuleContexts(FreeSpecificationContext.class);
		}
		public FreeSpecificationContext freeSpecification(int i) {
			return getRuleContext(FreeSpecificationContext.class,i);
		}
		public AlterIndexPartitionOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterIndexPartitionOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterIndexPartitionOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterIndexPartitionOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterIndexPartitionOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterIndexPartitionOptionsContext alterIndexPartitionOptions() throws RecognitionException {
		AlterIndexPartitionOptionsContext _localctx = new AlterIndexPartitionOptionsContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_alterIndexPartitionOptions);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1369);
			match(ALTER);
			setState(1370);
			partitionElement();
			setState(1386);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DSSIZE || _la==ERASE || _la==PRIQTY || _la==USING || ((((_la - 460)) & ~0x3f) == 0 && ((1L << (_la - 460)) & ((1L << (FREEPAGE - 460)) | (1L << (GBPCACHE - 460)) | (1L << (PCTFREE - 460)) | (1L << (SEQTY - 460)))) != 0)) {
				{
				setState(1384);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ERASE:
				case PRIQTY:
				case USING:
				case SEQTY:
					{
					setState(1372); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(1371);
							usingSpecification();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(1374); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,122,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				case FREEPAGE:
				case PCTFREE:
					{
					setState(1377); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(1376);
							freeSpecification();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(1379); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,123,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				case GBPCACHE:
					{
					setState(1381);
					gbpcacheSpecification();
					}
					break;
				case DSSIZE:
					{
					{
					setState(1382);
					match(DSSIZE);
					setState(1383);
					match(SQLIDENTIFIER);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(1388);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UsingSpecificationContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(DB2zSQLParser.USING, 0); }
		public TerminalNode PRIQTY() { return getToken(DB2zSQLParser.PRIQTY, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode SEQTY() { return getToken(DB2zSQLParser.SEQTY, 0); }
		public TerminalNode ERASE() { return getToken(DB2zSQLParser.ERASE, 0); }
		public TerminalNode YES() { return getToken(DB2zSQLParser.YES, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode VCAT() { return getToken(DB2zSQLParser.VCAT, 0); }
		public CatalogNameContext catalogName() {
			return getRuleContext(CatalogNameContext.class,0);
		}
		public TerminalNode STOGROUP() { return getToken(DB2zSQLParser.STOGROUP, 0); }
		public StogroupNameContext stogroupName() {
			return getRuleContext(StogroupNameContext.class,0);
		}
		public UsingSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_usingSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterUsingSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitUsingSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitUsingSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UsingSpecificationContext usingSpecification() throws RecognitionException {
		UsingSpecificationContext _localctx = new UsingSpecificationContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_usingSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1402);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USING:
				{
				{
				setState(1389);
				match(USING);
				setState(1394);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case VCAT:
					{
					{
					setState(1390);
					match(VCAT);
					setState(1391);
					catalogName();
					}
					}
					break;
				case STOGROUP:
					{
					{
					setState(1392);
					match(STOGROUP);
					setState(1393);
					stogroupName();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case PRIQTY:
				{
				{
				setState(1396);
				match(PRIQTY);
				setState(1397);
				match(INTEGERLITERAL);
				}
				}
				break;
			case SEQTY:
				{
				{
				setState(1398);
				match(SEQTY);
				setState(1399);
				match(INTEGERLITERAL);
				}
				}
				break;
			case ERASE:
				{
				{
				setState(1400);
				match(ERASE);
				setState(1401);
				_la = _input.LA(1);
				if ( !(_la==NO || _la==YES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FreeSpecificationContext extends ParserRuleContext {
		public TerminalNode FREEPAGE() { return getToken(DB2zSQLParser.FREEPAGE, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode PCTFREE() { return getToken(DB2zSQLParser.PCTFREE, 0); }
		public FreeSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_freeSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFreeSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFreeSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFreeSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FreeSpecificationContext freeSpecification() throws RecognitionException {
		FreeSpecificationContext _localctx = new FreeSpecificationContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_freeSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1408);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FREEPAGE:
				{
				{
				setState(1404);
				match(FREEPAGE);
				setState(1405);
				match(INTEGERLITERAL);
				}
				}
				break;
			case PCTFREE:
				{
				{
				setState(1406);
				match(PCTFREE);
				setState(1407);
				match(INTEGERLITERAL);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GbpcacheSpecificationContext extends ParserRuleContext {
		public TerminalNode GBPCACHE() { return getToken(DB2zSQLParser.GBPCACHE, 0); }
		public TerminalNode CHANGED() { return getToken(DB2zSQLParser.CHANGED, 0); }
		public TerminalNode ALL() { return getToken(DB2zSQLParser.ALL, 0); }
		public TerminalNode NONE() { return getToken(DB2zSQLParser.NONE, 0); }
		public GbpcacheSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_gbpcacheSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGbpcacheSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGbpcacheSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGbpcacheSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GbpcacheSpecificationContext gbpcacheSpecification() throws RecognitionException {
		GbpcacheSpecificationContext _localctx = new GbpcacheSpecificationContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_gbpcacheSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1410);
			match(GBPCACHE);
			setState(1411);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==NONE || _la==CHANGED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionElementContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(DB2zSQLParser.PARTITION, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode ENDING() { return getToken(DB2zSQLParser.ENDING, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<LiteralContext> literal() {
			return getRuleContexts(LiteralContext.class);
		}
		public LiteralContext literal(int i) {
			return getRuleContext(LiteralContext.class,i);
		}
		public List<TerminalNode> MAXVALUE() { return getTokens(DB2zSQLParser.MAXVALUE); }
		public TerminalNode MAXVALUE(int i) {
			return getToken(DB2zSQLParser.MAXVALUE, i);
		}
		public List<TerminalNode> MINVALUE() { return getTokens(DB2zSQLParser.MINVALUE); }
		public TerminalNode MINVALUE(int i) {
			return getToken(DB2zSQLParser.MINVALUE, i);
		}
		public TerminalNode AT() { return getToken(DB2zSQLParser.AT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public TerminalNode INCLUSIVE() { return getToken(DB2zSQLParser.INCLUSIVE, 0); }
		public PartitionElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPartitionElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPartitionElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPartitionElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionElementContext partitionElement() throws RecognitionException {
		PartitionElementContext _localctx = new PartitionElementContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_partitionElement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1413);
			match(PARTITION);
			setState(1414);
			match(INTEGERLITERAL);
			setState(1440);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENDING) {
				{
				setState(1415);
				match(ENDING);
				setState(1417);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AT) {
					{
					setState(1416);
					match(AT);
					}
				}

				setState(1419);
				match(LPAREN);
				setState(1423);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NONNUMERICLITERAL:
				case INTEGERLITERAL:
				case NUMERICLITERAL:
					{
					setState(1420);
					literal();
					}
					break;
				case MAXVALUE:
					{
					setState(1421);
					match(MAXVALUE);
					}
					break;
				case MINVALUE:
					{
					setState(1422);
					match(MINVALUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1433);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1425);
					match(COMMA);
					setState(1429);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NONNUMERICLITERAL:
					case INTEGERLITERAL:
					case NUMERICLITERAL:
						{
						setState(1426);
						literal();
						}
						break;
					case MAXVALUE:
						{
						setState(1427);
						match(MAXVALUE);
						}
						break;
					case MINVALUE:
						{
						setState(1428);
						match(MINVALUE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					setState(1435);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1436);
				match(RPAREN);
				setState(1438);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INCLUSIVE) {
					{
					setState(1437);
					match(INCLUSIVE);
					}
				}

				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ApplCompatValueContext extends ParserRuleContext {
		public FunctionLevelContext functionLevel() {
			return getRuleContext(FunctionLevelContext.class,0);
		}
		public ApplCompatValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_applCompatValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterApplCompatValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitApplCompatValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitApplCompatValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ApplCompatValueContext applCompatValue() throws RecognitionException {
		ApplCompatValueContext _localctx = new ApplCompatValueContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_applCompatValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1442);
			functionLevel();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionLevelContext extends ParserRuleContext {
		public TerminalNode SQLIDENTIFIER() { return getToken(DB2zSQLParser.SQLIDENTIFIER, 0); }
		public FunctionLevelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionLevel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFunctionLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFunctionLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFunctionLevel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionLevelContext functionLevel() throws RecognitionException {
		FunctionLevelContext _localctx = new FunctionLevelContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_functionLevel);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1444);
			match(SQLIDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionParameterTypeContext extends ParserRuleContext {
		public FunctionDataTypeContext functionDataType() {
			return getRuleContext(FunctionDataTypeContext.class,0);
		}
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode LOCATOR() { return getToken(DB2zSQLParser.LOCATOR, 0); }
		public FunctionParameterTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionParameterType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFunctionParameterType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFunctionParameterType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFunctionParameterType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionParameterTypeContext functionParameterType() throws RecognitionException {
		FunctionParameterTypeContext _localctx = new FunctionParameterTypeContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_functionParameterType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1446);
			functionDataType();
			setState(1449);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(1447);
				match(AS);
				setState(1448);
				match(LOCATOR);
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionDataTypeContext extends ParserRuleContext {
		public TerminalNode SMALLINT() { return getToken(DB2zSQLParser.SMALLINT, 0); }
		public TerminalNode INTEGER() { return getToken(DB2zSQLParser.INTEGER, 0); }
		public TerminalNode INT() { return getToken(DB2zSQLParser.INT, 0); }
		public TerminalNode BIGINT() { return getToken(DB2zSQLParser.BIGINT, 0); }
		public TerminalNode REAL() { return getToken(DB2zSQLParser.REAL, 0); }
		public TerminalNode DATE() { return getToken(DB2zSQLParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(DB2zSQLParser.TIME, 0); }
		public TerminalNode ROWID() { return getToken(DB2zSQLParser.ROWID, 0); }
		public TerminalNode XML() { return getToken(DB2zSQLParser.XML, 0); }
		public TerminalNode DECFLOAT() { return getToken(DB2zSQLParser.DECFLOAT, 0); }
		public TerminalNode FLOAT() { return getToken(DB2zSQLParser.FLOAT, 0); }
		public TerminalNode DOUBLE() { return getToken(DB2zSQLParser.DOUBLE, 0); }
		public TerminalNode BINARY() { return getToken(DB2zSQLParser.BINARY, 0); }
		public TerminalNode TIMESTAMP() { return getToken(DB2zSQLParser.TIMESTAMP, 0); }
		public TerminalNode DECIMAL() { return getToken(DB2zSQLParser.DECIMAL, 0); }
		public TerminalNode DEC() { return getToken(DB2zSQLParser.DEC, 0); }
		public TerminalNode NUMERIC() { return getToken(DB2zSQLParser.NUMERIC, 0); }
		public TerminalNode GRAPHIC() { return getToken(DB2zSQLParser.GRAPHIC, 0); }
		public TerminalNode VARGRAPHIC() { return getToken(DB2zSQLParser.VARGRAPHIC, 0); }
		public TerminalNode DBCLOB() { return getToken(DB2zSQLParser.DBCLOB, 0); }
		public IntegerInParensContext integerInParens() {
			return getRuleContext(IntegerInParensContext.class,0);
		}
		public TerminalNode VARCHAR() { return getToken(DB2zSQLParser.VARCHAR, 0); }
		public TerminalNode CLOB() { return getToken(DB2zSQLParser.CLOB, 0); }
		public TerminalNode VARBINARY() { return getToken(DB2zSQLParser.VARBINARY, 0); }
		public TerminalNode BLOB() { return getToken(DB2zSQLParser.BLOB, 0); }
		public TerminalNode ZONE() { return getToken(DB2zSQLParser.ZONE, 0); }
		public TerminalNode PRECISION() { return getToken(DB2zSQLParser.PRECISION, 0); }
		public LengthContext length() {
			return getRuleContext(LengthContext.class,0);
		}
		public TerminalNode CCSID() { return getToken(DB2zSQLParser.CCSID, 0); }
		public ForDataQualifierContext forDataQualifier() {
			return getRuleContext(ForDataQualifierContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode WITHOUT() { return getToken(DB2zSQLParser.WITHOUT, 0); }
		public TerminalNode ASCII() { return getToken(DB2zSQLParser.ASCII, 0); }
		public TerminalNode EBCDIC() { return getToken(DB2zSQLParser.EBCDIC, 0); }
		public TerminalNode UNICODE() { return getToken(DB2zSQLParser.UNICODE, 0); }
		public TerminalNode LARGE() { return getToken(DB2zSQLParser.LARGE, 0); }
		public TerminalNode OBJECT() { return getToken(DB2zSQLParser.OBJECT, 0); }
		public TerminalNode CHARACTER() { return getToken(DB2zSQLParser.CHARACTER, 0); }
		public TerminalNode CHAR() { return getToken(DB2zSQLParser.CHAR, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode SQLIDENTIFIER() { return getToken(DB2zSQLParser.SQLIDENTIFIER, 0); }
		public TerminalNode VARYING() { return getToken(DB2zSQLParser.VARYING, 0); }
		public FunctionDataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionDataType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFunctionDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFunctionDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFunctionDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionDataTypeContext functionDataType() throws RecognitionException {
		FunctionDataTypeContext _localctx = new FunctionDataTypeContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_functionDataType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1567);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,158,_ctx) ) {
			case 1:
				{
				setState(1451);
				match(SMALLINT);
				}
				break;
			case 2:
				{
				setState(1452);
				match(INTEGER);
				}
				break;
			case 3:
				{
				setState(1453);
				match(INT);
				}
				break;
			case 4:
				{
				setState(1454);
				match(BIGINT);
				}
				break;
			case 5:
				{
				{
				setState(1455);
				_la = _input.LA(1);
				if ( !(_la==NUMERIC || _la==DEC || _la==DECIMAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1459);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,136,_ctx) ) {
				case 1:
					{
					setState(1456);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(1457);
					match(LPAREN);
					setState(1458);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 6:
				{
				{
				setState(1461);
				match(DECFLOAT);
				setState(1465);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,137,_ctx) ) {
				case 1:
					{
					setState(1462);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(1463);
					match(LPAREN);
					setState(1464);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 7:
				{
				{
				setState(1467);
				match(FLOAT);
				setState(1471);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,138,_ctx) ) {
				case 1:
					{
					setState(1468);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(1469);
					match(LPAREN);
					setState(1470);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 8:
				{
				setState(1473);
				match(REAL);
				}
				break;
			case 9:
				{
				{
				setState(1474);
				match(DOUBLE);
				setState(1476);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRECISION) {
					{
					setState(1475);
					match(PRECISION);
					}
				}

				}
				}
				break;
			case 10:
				{
				{
				setState(1483);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHAR:
				case CHARACTER:
					{
					{
					setState(1478);
					_la = _input.LA(1);
					if ( !(_la==CHAR || _la==CHARACTER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1480);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==VARYING) {
						{
						setState(1479);
						match(VARYING);
						}
					}

					}
					}
					break;
				case VARCHAR:
					{
					setState(1482);
					match(VARCHAR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1488);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,142,_ctx) ) {
				case 1:
					{
					setState(1485);
					length();
					}
					break;
				case 2:
					{
					{
					setState(1486);
					match(LPAREN);
					setState(1487);
					match(RPAREN);
					}
					}
					break;
				}
				setState(1492);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CCSID) {
					{
					setState(1490);
					match(CCSID);
					setState(1491);
					_la = _input.LA(1);
					if ( !(_la==EBCDIC || _la==ASCII || _la==UNICODE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1495);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(1494);
					forDataQualifier();
					}
				}

				}
				}
				break;
			case 11:
				{
				{
				setState(1501);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHAR:
				case CHARACTER:
					{
					{
					setState(1497);
					_la = _input.LA(1);
					if ( !(_la==CHAR || _la==CHARACTER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1498);
					match(LARGE);
					setState(1499);
					match(OBJECT);
					}
					}
					break;
				case CLOB:
					{
					setState(1500);
					match(CLOB);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1506);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,146,_ctx) ) {
				case 1:
					{
					setState(1503);
					length();
					}
					break;
				case 2:
					{
					{
					setState(1504);
					match(LPAREN);
					setState(1505);
					match(RPAREN);
					}
					}
					break;
				}
				setState(1510);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CCSID) {
					{
					setState(1508);
					match(CCSID);
					setState(1509);
					_la = _input.LA(1);
					if ( !(_la==EBCDIC || _la==ASCII || _la==UNICODE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1513);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(1512);
					forDataQualifier();
					}
				}

				}
				}
				break;
			case 12:
				{
				{
				setState(1515);
				_la = _input.LA(1);
				if ( !(_la==DBCLOB || _la==GRAPHIC || _la==VARGRAPHIC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1519);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,149,_ctx) ) {
				case 1:
					{
					setState(1516);
					length();
					}
					break;
				case 2:
					{
					{
					setState(1517);
					match(LPAREN);
					setState(1518);
					match(RPAREN);
					}
					}
					break;
				}
				setState(1523);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CCSID) {
					{
					setState(1521);
					match(CCSID);
					setState(1522);
					_la = _input.LA(1);
					if ( !(_la==EBCDIC || _la==ASCII || _la==UNICODE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				}
				break;
			case 13:
				{
				{
				setState(1525);
				match(BINARY);
				setState(1529);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,151,_ctx) ) {
				case 1:
					{
					setState(1526);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(1527);
					match(LPAREN);
					setState(1528);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 14:
				{
				{
				setState(1536);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
					{
					{
					setState(1531);
					match(BINARY);
					setState(1533);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==VARYING) {
						{
						setState(1532);
						match(VARYING);
						}
					}

					}
					}
					break;
				case VARBINARY:
					{
					setState(1535);
					match(VARBINARY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1541);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,154,_ctx) ) {
				case 1:
					{
					setState(1538);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(1539);
					match(LPAREN);
					setState(1540);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 15:
				{
				{
				setState(1547);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
					{
					{
					setState(1543);
					match(BINARY);
					setState(1544);
					match(LARGE);
					setState(1545);
					match(OBJECT);
					}
					}
					break;
				case BLOB:
					{
					setState(1546);
					match(BLOB);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1554);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(1549);
					match(LPAREN);
					{
					setState(1550);
					match(INTEGERLITERAL);
					setState(1551);
					match(SQLIDENTIFIER);
					}
					setState(1553);
					match(RPAREN);
					}
				}

				}
				}
				break;
			case 16:
				{
				setState(1556);
				match(DATE);
				}
				break;
			case 17:
				{
				setState(1557);
				match(TIME);
				}
				break;
			case 18:
				{
				{
				setState(1558);
				match(TIMESTAMP);
				setState(1560);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(1559);
					integerInParens();
					}
				}

				{
				setState(1562);
				_la = _input.LA(1);
				if ( !(_la==WITH || _la==WITHOUT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1563);
				match(TIME);
				setState(1564);
				match(ZONE);
				}
				}
				}
				break;
			case 19:
				{
				setState(1565);
				match(ROWID);
				}
				break;
			case 20:
				{
				setState(1566);
				match(XML);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionOptionListContext extends ParserRuleContext {
		public TerminalNode SPECIFIC() { return getToken(DB2zSQLParser.SPECIFIC, 0); }
		public TerminalNode EXTERNAL() { return getToken(DB2zSQLParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(DB2zSQLParser.NAME, 0); }
		public TerminalNode LANGUAGE() { return getToken(DB2zSQLParser.LANGUAGE, 0); }
		public TerminalNode PARAMETER() { return getToken(DB2zSQLParser.PARAMETER, 0); }
		public TerminalNode STYLE() { return getToken(DB2zSQLParser.STYLE, 0); }
		public TerminalNode DETERMINISTIC() { return getToken(DB2zSQLParser.DETERMINISTIC, 0); }
		public TerminalNode VARIANT() { return getToken(DB2zSQLParser.VARIANT, 0); }
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public List<TerminalNode> NULL() { return getTokens(DB2zSQLParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(DB2zSQLParser.NULL, i);
		}
		public TerminalNode INPUT() { return getToken(DB2zSQLParser.INPUT, 0); }
		public TerminalNode CALL() { return getToken(DB2zSQLParser.CALL, 0); }
		public TerminalNode ACTION() { return getToken(DB2zSQLParser.ACTION, 0); }
		public TerminalNode FINAL() { return getToken(DB2zSQLParser.FINAL, 0); }
		public TerminalNode PARALLEL() { return getToken(DB2zSQLParser.PARALLEL, 0); }
		public TerminalNode DBINFO() { return getToken(DB2zSQLParser.DBINFO, 0); }
		public TerminalNode CARDINALITY() { return getToken(DB2zSQLParser.CARDINALITY, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode WLM() { return getToken(DB2zSQLParser.WLM, 0); }
		public TerminalNode ENVIRONMENT() { return getToken(DB2zSQLParser.ENVIRONMENT, 0); }
		public TerminalNode ASUTIME() { return getToken(DB2zSQLParser.ASUTIME, 0); }
		public TerminalNode STAY() { return getToken(DB2zSQLParser.STAY, 0); }
		public TerminalNode RESIDENT() { return getToken(DB2zSQLParser.RESIDENT, 0); }
		public TerminalNode PROGRAM() { return getToken(DB2zSQLParser.PROGRAM, 0); }
		public TerminalNode TYPE() { return getToken(DB2zSQLParser.TYPE, 0); }
		public TerminalNode SECURITY() { return getToken(DB2zSQLParser.SECURITY, 0); }
		public TerminalNode RUN() { return getToken(DB2zSQLParser.RUN, 0); }
		public TerminalNode OPTIONS() { return getToken(DB2zSQLParser.OPTIONS, 0); }
		public RunTimeOptionsContext runTimeOptions() {
			return getRuleContext(RunTimeOptionsContext.class,0);
		}
		public TerminalNode SPECIAL() { return getToken(DB2zSQLParser.SPECIAL, 0); }
		public TerminalNode REGISTERS() { return getToken(DB2zSQLParser.REGISTERS, 0); }
		public TerminalNode STATIC() { return getToken(DB2zSQLParser.STATIC, 0); }
		public TerminalNode DISPATCH() { return getToken(DB2zSQLParser.DISPATCH, 0); }
		public TerminalNode SECURED() { return getToken(DB2zSQLParser.SECURED, 0); }
		public TerminalNode CCSID() { return getToken(DB2zSQLParser.CCSID, 0); }
		public TerminalNode ASSEMBLE() { return getToken(DB2zSQLParser.ASSEMBLE, 0); }
		public TerminalNode C_() { return getToken(DB2zSQLParser.C_, 0); }
		public TerminalNode COBOL() { return getToken(DB2zSQLParser.COBOL, 0); }
		public TerminalNode JAVA() { return getToken(DB2zSQLParser.JAVA, 0); }
		public TerminalNode PLI() { return getToken(DB2zSQLParser.PLI, 0); }
		public TerminalNode SQL() { return getToken(DB2zSQLParser.SQL, 0); }
		public TerminalNode ALLOW() { return getToken(DB2zSQLParser.ALLOW, 0); }
		public TerminalNode DISALLOW() { return getToken(DB2zSQLParser.DISALLOW, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode YES() { return getToken(DB2zSQLParser.YES, 0); }
		public TerminalNode SUB() { return getToken(DB2zSQLParser.SUB, 0); }
		public TerminalNode MAIN() { return getToken(DB2zSQLParser.MAIN, 0); }
		public TerminalNode DB2() { return getToken(DB2zSQLParser.DB2, 0); }
		public TerminalNode USER() { return getToken(DB2zSQLParser.USER, 0); }
		public TerminalNode DEFINER() { return getToken(DB2zSQLParser.DEFINER, 0); }
		public TerminalNode INHERIT() { return getToken(DB2zSQLParser.INHERIT, 0); }
		public TerminalNode DEFAULT() { return getToken(DB2zSQLParser.DEFAULT, 0); }
		public ExternalProgramNameContext externalProgramName() {
			return getRuleContext(ExternalProgramNameContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode CALLED() { return getToken(DB2zSQLParser.CALLED, 0); }
		public TerminalNode MODIFIES() { return getToken(DB2zSQLParser.MODIFIES, 0); }
		public TerminalNode DATA() { return getToken(DB2zSQLParser.DATA, 0); }
		public TerminalNode READS() { return getToken(DB2zSQLParser.READS, 0); }
		public TerminalNode CONTAINS() { return getToken(DB2zSQLParser.CONTAINS, 0); }
		public TerminalNode PACKAGE() { return getToken(DB2zSQLParser.PACKAGE, 0); }
		public TerminalNode PATH() { return getToken(DB2zSQLParser.PATH, 0); }
		public PackagePathContext packagePath() {
			return getRuleContext(PackagePathContext.class,0);
		}
		public TerminalNode SCRATCHPAD() { return getToken(DB2zSQLParser.SCRATCHPAD, 0); }
		public TerminalNode COLLID() { return getToken(DB2zSQLParser.COLLID, 0); }
		public CollectionIDContext collectionID() {
			return getRuleContext(CollectionIDContext.class,0);
		}
		public TerminalNode STOP() { return getToken(DB2zSQLParser.STOP, 0); }
		public TerminalNode AFTER() { return getToken(DB2zSQLParser.AFTER, 0); }
		public TerminalNode SYSTEM() { return getToken(DB2zSQLParser.SYSTEM, 0); }
		public TerminalNode FAILURES() { return getToken(DB2zSQLParser.FAILURES, 0); }
		public TerminalNode CONTINUE() { return getToken(DB2zSQLParser.CONTINUE, 0); }
		public TerminalNode FAILURE() { return getToken(DB2zSQLParser.FAILURE, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TerminalNode RETURNS() { return getToken(DB2zSQLParser.RETURNS, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode COMMA() { return getToken(DB2zSQLParser.COMMA, 0); }
		public TerminalNode SPLAT() { return getToken(DB2zSQLParser.SPLAT, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode LIMIT() { return getToken(DB2zSQLParser.LIMIT, 0); }
		public FunctionOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFunctionOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFunctionOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFunctionOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionOptionListContext functionOptionList() throws RecognitionException {
		FunctionOptionListContext _localctx = new FunctionOptionListContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_functionOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1703);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,174,_ctx) ) {
			case 1:
				{
				{
				setState(1569);
				match(EXTERNAL);
				setState(1570);
				match(NAME);
				setState(1573);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,159,_ctx) ) {
				case 1:
					{
					setState(1571);
					externalProgramName();
					}
					break;
				case 2:
					{
					setState(1572);
					identifier();
					}
					break;
				}
				}
				}
				break;
			case 2:
				{
				{
				setState(1575);
				match(LANGUAGE);
				setState(1576);
				_la = _input.LA(1);
				if ( !(((((_la - 431)) & ~0x3f) == 0 && ((1L << (_la - 431)) & ((1L << (ASSEMBLE - 431)) | (1L << (C_ - 431)) | (1L << (COBOL - 431)) | (1L << (JAVA - 431)) | (1L << (PLI - 431)) | (1L << (SQL - 431)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case 3:
				{
				{
				setState(1577);
				match(PARAMETER);
				setState(1578);
				match(STYLE);
				setState(1579);
				_la = _input.LA(1);
				if ( !(_la==JAVA || _la==SQL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case 4:
				{
				{
				setState(1581);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1580);
					match(NOT);
					}
				}

				setState(1583);
				match(DETERMINISTIC);
				}
				}
				break;
			case 5:
				{
				{
				setState(1585);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1584);
					match(NOT);
					}
				}

				setState(1587);
				match(VARIANT);
				}
				}
				break;
			case 6:
				{
				{
				setState(1591);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case RETURNS:
					{
					{
					setState(1588);
					match(RETURNS);
					setState(1589);
					match(NULL);
					}
					}
					break;
				case CALLED:
					{
					setState(1590);
					match(CALLED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1593);
				match(ON);
				setState(1594);
				match(NULL);
				setState(1595);
				match(INPUT);
				}
				}
				break;
			case 7:
				{
				{
				setState(1596);
				match(NULL);
				setState(1597);
				match(CALL);
				}
				}
				break;
			case 8:
				{
				setState(1608);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case MODIFIES:
					{
					{
					setState(1598);
					match(MODIFIES);
					setState(1599);
					match(SQL);
					setState(1600);
					match(DATA);
					}
					}
					break;
				case READS:
					{
					{
					setState(1601);
					match(READS);
					setState(1602);
					match(SQL);
					setState(1603);
					match(DATA);
					}
					}
					break;
				case CONTAINS:
					{
					{
					setState(1604);
					match(CONTAINS);
					setState(1605);
					match(SQL);
					}
					}
					break;
				case NO:
					{
					{
					setState(1606);
					match(NO);
					setState(1607);
					match(SQL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 9:
				{
				{
				setState(1611);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(1610);
					match(NO);
					}
				}

				setState(1613);
				match(EXTERNAL);
				setState(1614);
				match(ACTION);
				}
				}
				break;
			case 10:
				{
				setState(1621);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PACKAGE:
					{
					{
					setState(1615);
					match(PACKAGE);
					setState(1616);
					match(PATH);
					setState(1617);
					packagePath();
					}
					}
					break;
				case NO:
					{
					{
					setState(1618);
					match(NO);
					setState(1619);
					match(PACKAGE);
					setState(1620);
					match(PATH);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 11:
				{
				setState(1627);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NO:
					{
					{
					setState(1623);
					match(NO);
					setState(1624);
					match(SCRATCHPAD);
					}
					}
					break;
				case SCRATCHPAD:
					{
					{
					setState(1625);
					match(SCRATCHPAD);
					setState(1626);
					match(INTEGERLITERAL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 12:
				{
				{
				setState(1630);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(1629);
					match(NO);
					}
				}

				setState(1632);
				match(FINAL);
				setState(1633);
				match(CALL);
				}
				}
				break;
			case 13:
				{
				{
				setState(1634);
				_la = _input.LA(1);
				if ( !(_la==ALLOW || _la==DISALLOW) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1635);
				match(PARALLEL);
				}
				}
				break;
			case 14:
				{
				{
				setState(1637);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(1636);
					match(NO);
					}
				}

				setState(1639);
				match(DBINFO);
				}
				}
				break;
			case 15:
				{
				{
				setState(1640);
				match(CARDINALITY);
				setState(1641);
				match(INTEGERLITERAL);
				}
				}
				break;
			case 16:
				{
				setState(1646);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NO:
					{
					{
					setState(1642);
					match(NO);
					setState(1643);
					match(COLLID);
					}
					}
					break;
				case COLLID:
					{
					{
					setState(1644);
					match(COLLID);
					setState(1645);
					collectionID();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 17:
				{
				{
				setState(1648);
				match(WLM);
				setState(1649);
				match(ENVIRONMENT);
				setState(1657);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ADD:
				case AFTER:
				case ALL:
				case ALLOCATE:
				case ALLOW:
				case ALTER:
				case ALTERAND:
				case ANY:
				case ARRAY:
				case ARRAY_EXISTS:
				case AS:
				case ASENSITIVE:
				case ASSOCIATE:
				case ASUTIME:
				case AT:
				case AUDIT:
				case AUX:
				case AUXILIARY:
				case BEFORE:
				case BEGIN:
				case BETWEEN:
				case BUFFERPOOL:
				case BY:
				case CALL:
				case CAPTURE:
				case CASCADED:
				case CASE:
				case CAST:
				case CCSID:
				case CHAR:
				case CHARACTER:
				case CHECK:
				case CLONE:
				case CLOSE:
				case CLUSTER:
				case COLLECTION:
				case COLLID:
				case COLUMN:
				case COMMENT:
				case COMMIT:
				case CONCAT:
				case CONDITION:
				case CONNECT:
				case CONNECTION:
				case CONSTRAINT:
				case CONTAINS:
				case CONTENT:
				case CONTINUE:
				case CREATE:
				case CUBE:
				case CURRENT:
				case CURRENT_LC_CTYPE:
				case CURRVAL:
				case CURSOR:
				case DATA:
				case DATABASE:
				case DAY:
				case DAYS:
				case DBINFO:
				case DECLARE:
				case DEFAULT:
				case DELETE:
				case DESCRIPTOR:
				case DETERMINISTIC:
				case DISABLE:
				case DISALLOW:
				case DISTINCT:
				case DO:
				case DOCUMENT:
				case DOUBLE:
				case DROP:
				case DSSIZE:
				case DYNAMIC:
				case EDITPROC:
				case ELSE:
				case ELSEIF:
				case ENCODING:
				case ENCRYPTION:
				case END:
				case END_EXEC:
				case ENDING:
				case ERASE:
				case ESCAPE:
				case EXCEPT:
				case EXCEPTION:
				case EXEC_SQL:
				case EXECUTE:
				case EXISTS:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case FENCED:
				case FETCH:
				case FIELDPROC:
				case FINAL:
				case FIRST:
				case FOR:
				case FREE:
				case FROM:
				case FULL:
				case FUNCTION:
				case GENERATED:
				case GET:
				case GLOBAL:
				case GO:
				case GOTO:
				case GRANT:
				case GROUP:
				case HANDLER:
				case HAVING:
				case HOLD:
				case HOUR:
				case HOURS:
				case IF:
				case IMMEDIATE:
				case IN:
				case INCLUSIVE:
				case INDEX:
				case INDEXBP:
				case INHERIT:
				case INNER:
				case INOUT:
				case INSENSITIVE:
				case INSERT:
				case INTERSECT:
				case INTO:
				case IS:
				case ISOBID:
				case ITERATE:
				case JAR:
				case JOIN:
				case KEEP:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LAST:
				case LC_CTYPE:
				case LEAVE:
				case LEFT:
				case LIKE:
				case LIMIT:
				case LOCAL:
				case LOCALE:
				case LOCATOR:
				case LOCATORS:
				case LOCK:
				case LOCKMAX:
				case LOCKSIZE:
				case LONG:
				case LOOP:
				case MAINTAINED:
				case MATERIALIZED:
				case MICROSECOND:
				case MICROSECONDS:
				case MODIFIES:
				case MONTH:
				case MONTHS:
				case NEXT:
				case NEXTVAL:
				case NO:
				case NONE:
				case NOT:
				case NULL:
				case NULLS:
				case NUMPARTS:
				case OBID:
				case OF:
				case OFFSET:
				case OLD:
				case ON:
				case OPEN:
				case OPTIMIZATION:
				case OPTIMIZE:
				case OR:
				case ORDER:
				case ORGANIZATION:
				case OUT:
				case OUTER:
				case PACKAGE:
				case PADDED:
				case PARAMETER:
				case PART:
				case PARTITION:
				case PARTITIONED:
				case PARTITIONING:
				case PATH:
				case PERIOD:
				case PIECESIZE:
				case PLAN:
				case PRECISION:
				case PREPARE:
				case PREVVAL:
				case PRIOR:
				case PRIQTY:
				case PRIVILEGES:
				case PROCEDURE:
				case PROGRAM:
				case PSID:
				case PUBLIC:
				case QUERY:
				case QUERYNO:
				case READS:
				case REFERENCES:
				case REFRESH:
				case RELEASE:
				case RENAME:
				case REPEAT:
				case RESIGNAL:
				case RESTRICT:
				case RESULT:
				case RESULT_SET_LOCATOR:
				case RETURN:
				case RETURNS:
				case REVOKE:
				case RIGHT:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUND_CEILING:
				case ROUND_DOWN:
				case ROUND_FLOOR:
				case ROUND_HALF_DOWN:
				case ROUND_HALF_EVEN:
				case ROUND_HALF_UP:
				case ROUND_UP:
				case ROW:
				case ROWSET:
				case RUN:
				case SAVEPOINT:
				case SCHEMA:
				case SCRATCHPAD:
				case SECOND:
				case SECONDS:
				case SECQTY:
				case SECURITY:
				case SELECT:
				case SENSITIVE:
				case SEQUENCE:
				case SET:
				case SIGNAL:
				case SIMPLE:
				case SOME:
				case SOURCE:
				case SPECIFIC:
				case STANDARD:
				case STATEMENT:
				case STATIC:
				case STAY:
				case STOGROUP:
				case STORES:
				case STYLE:
				case SUMMARY:
				case SYNONYM:
				case SYSDATE:
				case SYSTEM:
				case SYSTIMESTAMP:
				case TABLE:
				case TABLESPACE:
				case THEN:
				case TO:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNDO:
				case UNION:
				case UNIQUE:
				case UNTIL:
				case UPDATE:
				case USING:
				case VALIDPROC:
				case VALUE:
				case VALUES:
				case VARIABLE:
				case VARIANT:
				case VCAT:
				case VERSIONING:
				case VIEW:
				case VOLATILE:
				case VOLUMES:
				case WHEN:
				case WHENEVER:
				case WHERE:
				case WHILE:
				case WITH:
				case WLM:
				case XMLCAST:
				case XMLEXISTS:
				case XMLNAMESPACES:
				case YEAR:
				case YEARS:
				case ZONE:
				case AND:
				case ARRAY_AGG:
				case ASC:
				case AVG:
				case BIT:
				case CHANGE:
				case CODEUNITS16:
				case CODEUNITS32:
				case CORR:
				case CORRELATION:
				case COUNT:
				case COUNT_BIG:
				case COVAR:
				case COVARIANCE:
				case COVARIANCE_SAMP:
				case COVAR_POP:
				case COVAR_SAMP:
				case CS:
				case CUME_DIST:
				case DENSE_RANK:
				case DESC:
				case EBCDIC:
				case EXCLUSIVE:
				case FIRST_VALUE:
				case FOLLOWING:
				case GROUPING:
				case IGNORE:
				case INDICATOR:
				case INPUT:
				case ISNULL:
				case LAG:
				case LARGE:
				case LAST_VALUE:
				case LEAD:
				case LISTAGG:
				case LOCKED:
				case LOCKS:
				case MEDIAN:
				case MINUTES:
				case MIXED:
				case NOTNULL:
				case NTH_VALUE:
				case NTILE:
				case NUMERIC:
				case OBJECT:
				case OCTETS:
				case ONLY:
				case OVER:
				case PASSING:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case PERCENT_RANK:
				case PRECEDING:
				case PREVIOUS:
				case RANGE:
				case RANK:
				case RATIO_TO_REPORT:
				case READ:
				case REF:
				case REGR_AVGX:
				case REGR_AVGY:
				case REGR_COUNT:
				case REGR_ICPT:
				case REGR_INTERCEPT:
				case REGR_R2:
				case REGR_SLOPE:
				case REGR_SXX:
				case REGR_SXY:
				case REGR_SYY:
				case RESPECT:
				case ROW_NUMBER:
				case ROWS:
				case RR:
				case RS:
				case SBCS:
				case SELECTIVITY:
				case SETS:
				case SHARE:
				case SKIP_:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case TOKEN:
				case UNBOUNDED:
				case UNPACK:
				case UR:
				case USE:
				case VAR:
				case VARIANCE:
				case VARIANCE_SAMP:
				case VAR_POP:
				case VAR_SAMP:
				case VARYING:
				case WITHOUT:
				case XML:
				case XMLAGG:
				case COLUMNS:
				case SQLID:
				case ORDINALITY:
				case SYSTEM_TIME:
				case BUSINESS_TIME:
				case MULTIPLIER:
				case UNNEST:
				case CROSS:
				case CALLER:
				case CLIENT:
				case POSITIONING:
				case SCROLL:
				case ACTION:
				case ASSEMBLE:
				case C_:
				case CALLED:
				case COBOL:
				case DB2:
				case DEFINER:
				case DISPATCH:
				case ENVIRONMENT:
				case FAILURE:
				case FAILURES:
				case JAVA:
				case MAIN:
				case NAME:
				case OPTIONS:
				case PARALLEL:
				case PLI:
				case REGISTERS:
				case RESIDENT:
				case SECURED:
				case SPECIAL:
				case SQL:
				case STOP:
				case SUB:
				case YES:
				case APPLICATION:
				case CHANGED:
				case COMPATIBILITY:
				case COMPRESS:
				case COPY:
				case FREEPAGE:
				case GBPCACHE:
				case INCLUDE:
				case MAXVALUE:
				case MINVALUE:
				case PCTFREE:
				case REGENERATE:
				case SEQTY:
				case MASK:
				case ENABLE:
				case PERMISSION:
				case ATOMIC:
				case SQLEXCEPTION:
				case MERGE:
				case MATCHED:
				case SQLSTATE:
				case MESSAGE_TEXT:
				case OVERRIDING:
				case PORTION:
				case DB2SQL:
				case DEBUG:
				case GENERAL:
				case MODE_:
				case REXX:
				case CACHE:
				case CYCLE:
				case INCREMENT:
				case RESTART:
				case DATACLAS:
				case MGMTCLAS:
				case REMOVE:
				case STORCLAS:
				case ACCESS:
				case ACTIVATE:
				case ALWAYS:
				case APPEND:
				case ARCHIVE:
				case BUSINESS:
				case CASCADE:
				case CHANGES:
				case CONTROL:
				case DEACTIVATE:
				case DEFERRED:
				case EACH:
				case ENFORCED:
				case EXTRA:
				case FOREIGN:
				case HIDDEN_:
				case HISTORY:
				case ID:
				case IDENTITY:
				case IMPLICITLY:
				case INITIALLY:
				case INLINE:
				case OPERATION:
				case ORGANIZE:
				case OVERLAPS:
				case PACKAGE_NAME:
				case PACKAGE_SCHEMA:
				case PACKAGE_VERSION:
				case PRIMARY:
				case RESET:
				case ROTATE:
				case START:
				case SYSIBM:
				case TRANSACTION:
				case ABS:
				case ABSVAL:
				case ACOS:
				case ADD_DAYS:
				case ADD_MONTHS:
				case ARRAY_DELETE:
				case ARRAY_FIRST:
				case ARRAY_LAST:
				case ARRAY_NEXT:
				case ARRAY_PRIOR:
				case ARRAY_TRIM:
				case ASCII:
				case ASCII_CHR:
				case ASCIISTR:
				case ASCII_STR:
				case ASIN:
				case ATAN:
				case ATAN2:
				case ATANH:
				case BIGINT:
				case BINARY:
				case BITAND:
				case BITANDNOT:
				case BITNOT:
				case BITOR:
				case BITXOR:
				case BLOB:
				case BTRIM:
				case CARDINALITY:
				case CCSID_ENCODING:
				case CEIL:
				case CEILING:
				case CHAR9:
				case CHARACTER_LENGTH:
				case CHAR_LENGTH:
				case CHR:
				case CLOB:
				case COALESCE:
				case COLLATION_KEY:
				case COMPARE_DECFLOAT:
				case COS:
				case COSH:
				case DATE:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFWEEK_ISO:
				case DAYOFYEAR:
				case DAYS_BETWEEN:
				case DBCLOB:
				case DEC:
				case DECFLOAT:
				case DECFLOAT_FORMAT:
				case DECFLOAT_SORTKEY:
				case DECIMAL:
				case DECODE:
				case DECRYPT_BINARY:
				case DECRYPT_BIT:
				case DECRYPT_CHAR:
				case DECRYPT_DATAKEY_BIGINT:
				case DECRYPT_DATAKEY_BIT:
				case DECRYPT_DATAKEY_CLOB:
				case DECRYPT_DATAKEY_DBCLOB:
				case DECRYPT_DATAKEY_DECIMAL:
				case DECRYPT_DATAKEY_INTEGER:
				case DECRYPT_DATAKEY_VARCHAR:
				case DECRYPT_DATAKEY_VARGRAPHIC:
				case DECRYPT_DB:
				case DEGREES:
				case DIFFERENCE:
				case DIGITS:
				case DOUBLE_PRECISION:
				case DSN_XMLVALIDATE:
				case EBCDIC_CHR:
				case EBCDIC_STR:
				case ENCRYPT_DATAKEY:
				case ENCRYPT_TDES:
				case EXP:
				case EXTRACT:
				case FLOAT:
				case FLOOR:
				case GENERATE_UNIQUE:
				case GENERATE_UNIQUE_BINARY:
				case GETHINT:
				case GETVARIABLE:
				case GRAPHIC:
				case GREATEST:
				case HASH:
				case HASH_CRC32:
				case HASH_MD5:
				case HASH_SHA1:
				case HASH_SHA256:
				case HEX:
				case IDENTITY_VAL_LOCAL:
				case IFNULL:
				case INSTR:
				case INT:
				case INTEGER:
				case JULIAN_DAY:
				case LAST_DAY:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LN:
				case LOCATE:
				case LOCATE_IN_STRING:
				case LOG10:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAX:
				case MAX_CARDINALITY:
				case MIDNIGHT_SECONDS:
				case MIN:
				case MINUTE:
				case MOD:
				case MONTHS_BETWEEN:
				case MQREAD:
				case MQREADCLOB:
				case MQRECEIVE:
				case MQRECEIVECLOB:
				case MQSEND:
				case MULTIPLY_ALT:
				case NEXT_DAY:
				case NEXT_MONTH:
				case NORMALIZE_DECFLOAT:
				case NORMALIZE_STRING:
				case NULLIF:
				case NVL:
				case OVERLAY:
				case PACK:
				case POSITION:
				case POSSTR:
				case POW:
				case POWER:
				case QUANTIZE:
				case QUARTER:
				case RADIANS:
				case RAISE_ERROR:
				case RAND:
				case RANDOM:
				case REAL:
				case REGEXP_COUNT:
				case REGEXP_INSTR:
				case REGEXP_LIKE:
				case REGEXP_REPLACE:
				case REGEXP_SUBSTR:
				case REPLACE:
				case RID:
				case ROUND:
				case ROUND_TIMESTAMP:
				case ROWID:
				case RPAD:
				case RTRIM:
				case SCORE:
				case SIGN:
				case SIN:
				case SINH:
				case SMALLINT:
				case SOAPHTTPC:
				case SOAPHTTPNC:
				case SOAPHTTPNV:
				case SOAPHTTPV:
				case SOUNDEX:
				case SPACE:
				case SQRT:
				case STRIP:
				case STRLEFT:
				case STRPOS:
				case STRRIGHT:
				case SUBSTR:
				case SUBSTRING:
				case TAN:
				case TANH:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIMESTAMP_FORMAT:
				case TIMESTAMP_ISO:
				case TIMESTAMP_TZ:
				case TO_CHAR:
				case TO_CLOB:
				case TO_DATE:
				case TO_NUMBER:
				case TOTALORDER:
				case TO_TIMESTAMP:
				case TRANSLATE:
				case TRIM:
				case TRIM_ARRAY:
				case TRUNC:
				case TRUNC_TIMESTAMP:
				case UCASE:
				case UNICODE:
				case UNICODE_STR:
				case UNISTR:
				case UPPER:
				case VARBINARY:
				case VARCHAR:
				case VARCHAR9:
				case VARCHAR_BIT_FORMAT:
				case VARCHAR_FORMAT:
				case VARGRAPHIC:
				case VERIFY_GROUP_FOR_USER:
				case VERIFY_ROLE_FOR_USER:
				case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
				case WEEK:
				case WEEK_ISO:
				case WRAP:
				case XMLATTRIBUTES:
				case XMLCOMMENT:
				case XMLCONCAT:
				case XMLDOCUMENT:
				case XMLELEMENT:
				case XMLFOREST:
				case XMLMODIFY:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLSERIALIZE:
				case XMLTEXT:
				case XMLXSROBJECTID:
				case XSLTRANSFORM:
				case CURRENT_ACCELERATOR:
				case CURRENT_APPLICATION_COMPATIBILITY:
				case CURRENT_APPLICATION_ENCODING_SCHEME:
				case CURRENT_CLIENT_ACCTNG:
				case CURRENT_CLIENT_APPLNAME:
				case CURRENT_CLIENT_CORR_TOKEN:
				case CURRENT_CLIENT_USERID:
				case CURRENT_CLIENT_WRKSTNNAME:
				case CURRENT_DATE:
				case CURRENT_DEBUG_MODE:
				case CURRENT_DECFLOAT_ROUNDING_MODE:
				case CURRENT_DEGREE:
				case CURRENT_EXPLAIN_MODE:
				case CURRENT_GET_ACCEL_ARCHIVE:
				case CURRENT_LOCALE_LC_CTYPE:
				case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
				case CURRENT_MEMBER:
				case CURRENT_OPTIMIZATION_HINT:
				case CURRENT_PACKAGE_PATH:
				case CURRENT_PACKAGESET:
				case CURRENT_PATH:
				case CURRENT_PRECISION:
				case CURRENT_QUERY_ACCELERATION:
				case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
				case CURRENT_REFRESH_AGE:
				case CURRENT_ROUTINE_VERSION:
				case CURRENT_RULES:
				case CURRENT_SCHEMA:
				case CURRENT_SERVER:
				case CURRENT_SQLID:
				case CURRENT_TEMPORAL_BUSINESS_TIME:
				case CURRENT_TEMPORAL_SYSTEM_TIME:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case CURRENT_TIME_ZONE:
				case ENCRYPTION_PASSWORD:
				case SESSION_TIME_ZONE:
				case SESSION_USER:
				case USER:
				case ADMIN_TASK_LIST:
				case ADMIN_TASK_OUTPUT:
				case ADMIN_TASK_STATUS:
				case BLOCKING_THREADS:
				case MQREADALL:
				case MQREADALLCLOB:
				case MQRECEIVEALL:
				case MQRECEIVEALLCLOB:
				case XMLTABLE:
				case SQLIDENTIFIER:
					{
					setState(1650);
					identifier();
					}
					break;
				case LPAREN:
					{
					{
					setState(1651);
					match(LPAREN);
					setState(1652);
					identifier();
					setState(1653);
					match(COMMA);
					setState(1654);
					match(SPLAT);
					setState(1655);
					match(RPAREN);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case 18:
				{
				{
				setState(1659);
				match(ASUTIME);
				setState(1664);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NO:
					{
					{
					setState(1660);
					match(NO);
					setState(1661);
					match(LIMIT);
					}
					}
					break;
				case LIMIT:
					{
					{
					setState(1662);
					match(LIMIT);
					setState(1663);
					match(INTEGERLITERAL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case 19:
				{
				{
				setState(1666);
				match(STAY);
				setState(1667);
				match(RESIDENT);
				setState(1668);
				_la = _input.LA(1);
				if ( !(_la==NO || _la==YES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case 20:
				{
				{
				setState(1669);
				match(PROGRAM);
				setState(1670);
				match(TYPE);
				setState(1671);
				_la = _input.LA(1);
				if ( !(_la==MAIN || _la==SUB) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case 21:
				{
				{
				setState(1672);
				match(SECURITY);
				setState(1673);
				_la = _input.LA(1);
				if ( !(_la==DB2 || _la==DEFINER || _la==USER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case 22:
				{
				setState(1686);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,172,_ctx) ) {
				case 1:
					{
					{
					setState(1674);
					match(STOP);
					setState(1675);
					match(AFTER);
					setState(1676);
					match(SYSTEM);
					setState(1677);
					match(DEFAULT);
					setState(1678);
					match(FAILURES);
					}
					}
					break;
				case 2:
					{
					{
					setState(1679);
					match(STOP);
					setState(1680);
					match(AFTER);
					setState(1681);
					match(INTEGERLITERAL);
					setState(1682);
					match(FAILURES);
					}
					}
					break;
				case 3:
					{
					{
					setState(1683);
					match(CONTINUE);
					setState(1684);
					match(AFTER);
					setState(1685);
					match(FAILURE);
					}
					}
					break;
				}
				}
				break;
			case 23:
				{
				{
				setState(1688);
				match(RUN);
				setState(1689);
				match(OPTIONS);
				setState(1690);
				runTimeOptions();
				}
				}
				break;
			case 24:
				{
				{
				setState(1691);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==INHERIT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1692);
				match(SPECIAL);
				setState(1693);
				match(REGISTERS);
				}
				}
				break;
			case 25:
				{
				{
				setState(1694);
				match(STATIC);
				setState(1695);
				match(DISPATCH);
				}
				}
				break;
			case 26:
				{
				{
				setState(1697);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1696);
					match(NOT);
					}
				}

				setState(1699);
				match(SECURED);
				}
				}
				break;
			case 27:
				{
				setState(1700);
				match(SPECIFIC);
				}
				break;
			case 28:
				{
				{
				setState(1701);
				match(PARAMETER);
				setState(1702);
				match(CCSID);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcedureOptionListContext extends ParserRuleContext {
		public TerminalNode RESULT() { return getToken(DB2zSQLParser.RESULT, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode EXTERNAL() { return getToken(DB2zSQLParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(DB2zSQLParser.NAME, 0); }
		public TerminalNode LANGUAGE() { return getToken(DB2zSQLParser.LANGUAGE, 0); }
		public TerminalNode PARAMETER() { return getToken(DB2zSQLParser.PARAMETER, 0); }
		public TerminalNode STYLE() { return getToken(DB2zSQLParser.STYLE, 0); }
		public TerminalNode DETERMINISTIC() { return getToken(DB2zSQLParser.DETERMINISTIC, 0); }
		public TerminalNode VARIANT() { return getToken(DB2zSQLParser.VARIANT, 0); }
		public TerminalNode DBINFO() { return getToken(DB2zSQLParser.DBINFO, 0); }
		public TerminalNode WLM() { return getToken(DB2zSQLParser.WLM, 0); }
		public TerminalNode ENVIRONMENT() { return getToken(DB2zSQLParser.ENVIRONMENT, 0); }
		public TerminalNode ASUTIME() { return getToken(DB2zSQLParser.ASUTIME, 0); }
		public TerminalNode STAY() { return getToken(DB2zSQLParser.STAY, 0); }
		public TerminalNode RESIDENT() { return getToken(DB2zSQLParser.RESIDENT, 0); }
		public TerminalNode PROGRAM() { return getToken(DB2zSQLParser.PROGRAM, 0); }
		public TerminalNode TYPE() { return getToken(DB2zSQLParser.TYPE, 0); }
		public TerminalNode SECURITY() { return getToken(DB2zSQLParser.SECURITY, 0); }
		public TerminalNode RUN() { return getToken(DB2zSQLParser.RUN, 0); }
		public TerminalNode OPTIONS() { return getToken(DB2zSQLParser.OPTIONS, 0); }
		public RunTimeOptionsContext runTimeOptions() {
			return getRuleContext(RunTimeOptionsContext.class,0);
		}
		public TerminalNode COMMIT() { return getToken(DB2zSQLParser.COMMIT, 0); }
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public TerminalNode RETURN() { return getToken(DB2zSQLParser.RETURN, 0); }
		public TerminalNode SPECIAL() { return getToken(DB2zSQLParser.SPECIAL, 0); }
		public TerminalNode REGISTERS() { return getToken(DB2zSQLParser.REGISTERS, 0); }
		public TerminalNode CALLED() { return getToken(DB2zSQLParser.CALLED, 0); }
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public TerminalNode INPUT() { return getToken(DB2zSQLParser.INPUT, 0); }
		public TerminalNode CALL() { return getToken(DB2zSQLParser.CALL, 0); }
		public TerminalNode DEBUG() { return getToken(DB2zSQLParser.DEBUG, 0); }
		public TerminalNode MODE_() { return getToken(DB2zSQLParser.MODE_, 0); }
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public TerminalNode SETS() { return getToken(DB2zSQLParser.SETS, 0); }
		public TerminalNode ASSEMBLE() { return getToken(DB2zSQLParser.ASSEMBLE, 0); }
		public TerminalNode C_() { return getToken(DB2zSQLParser.C_, 0); }
		public TerminalNode COBOL() { return getToken(DB2zSQLParser.COBOL, 0); }
		public TerminalNode JAVA() { return getToken(DB2zSQLParser.JAVA, 0); }
		public TerminalNode PLI() { return getToken(DB2zSQLParser.PLI, 0); }
		public TerminalNode REXX() { return getToken(DB2zSQLParser.REXX, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode YES() { return getToken(DB2zSQLParser.YES, 0); }
		public TerminalNode SUB() { return getToken(DB2zSQLParser.SUB, 0); }
		public TerminalNode MAIN() { return getToken(DB2zSQLParser.MAIN, 0); }
		public TerminalNode DB2() { return getToken(DB2zSQLParser.DB2, 0); }
		public TerminalNode USER() { return getToken(DB2zSQLParser.USER, 0); }
		public TerminalNode DEFINER() { return getToken(DB2zSQLParser.DEFINER, 0); }
		public TerminalNode INHERIT() { return getToken(DB2zSQLParser.INHERIT, 0); }
		public TerminalNode DEFAULT() { return getToken(DB2zSQLParser.DEFAULT, 0); }
		public TerminalNode DISALLOW() { return getToken(DB2zSQLParser.DISALLOW, 0); }
		public TerminalNode ALLOW() { return getToken(DB2zSQLParser.ALLOW, 0); }
		public TerminalNode DISABLE() { return getToken(DB2zSQLParser.DISABLE, 0); }
		public ExternalProgramNameContext externalProgramName() {
			return getRuleContext(ExternalProgramNameContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode SQL() { return getToken(DB2zSQLParser.SQL, 0); }
		public TerminalNode DB2SQL() { return getToken(DB2zSQLParser.DB2SQL, 0); }
		public TerminalNode GENERAL() { return getToken(DB2zSQLParser.GENERAL, 0); }
		public TerminalNode PACKAGE() { return getToken(DB2zSQLParser.PACKAGE, 0); }
		public TerminalNode PATH() { return getToken(DB2zSQLParser.PATH, 0); }
		public PackagePathContext packagePath() {
			return getRuleContext(PackagePathContext.class,0);
		}
		public TerminalNode MODIFIES() { return getToken(DB2zSQLParser.MODIFIES, 0); }
		public TerminalNode DATA() { return getToken(DB2zSQLParser.DATA, 0); }
		public TerminalNode READS() { return getToken(DB2zSQLParser.READS, 0); }
		public TerminalNode CONTAINS() { return getToken(DB2zSQLParser.CONTAINS, 0); }
		public TerminalNode COLLID() { return getToken(DB2zSQLParser.COLLID, 0); }
		public CollectionIDContext collectionID() {
			return getRuleContext(CollectionIDContext.class,0);
		}
		public TerminalNode STOP() { return getToken(DB2zSQLParser.STOP, 0); }
		public TerminalNode AFTER() { return getToken(DB2zSQLParser.AFTER, 0); }
		public TerminalNode SYSTEM() { return getToken(DB2zSQLParser.SYSTEM, 0); }
		public TerminalNode FAILURES() { return getToken(DB2zSQLParser.FAILURES, 0); }
		public TerminalNode CONTINUE() { return getToken(DB2zSQLParser.CONTINUE, 0); }
		public TerminalNode FAILURE() { return getToken(DB2zSQLParser.FAILURE, 0); }
		public TerminalNode DYNAMIC() { return getToken(DB2zSQLParser.DYNAMIC, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TerminalNode STANDARD() { return getToken(DB2zSQLParser.STANDARD, 0); }
		public TerminalNode SIMPLE() { return getToken(DB2zSQLParser.SIMPLE, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode NULLS() { return getToken(DB2zSQLParser.NULLS, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode COMMA() { return getToken(DB2zSQLParser.COMMA, 0); }
		public TerminalNode SPLAT() { return getToken(DB2zSQLParser.SPLAT, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode LIMIT() { return getToken(DB2zSQLParser.LIMIT, 0); }
		public ProcedureOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterProcedureOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitProcedureOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitProcedureOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProcedureOptionListContext procedureOptionList() throws RecognitionException {
		ProcedureOptionListContext _localctx = new ProcedureOptionListContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_procedureOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1835);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,188,_ctx) ) {
			case 1:
				{
				{
				setState(1706);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DYNAMIC) {
					{
					setState(1705);
					match(DYNAMIC);
					}
				}

				setState(1708);
				match(RESULT);
				setState(1709);
				_la = _input.LA(1);
				if ( !(_la==SET || _la==SETS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1710);
				match(INTEGERLITERAL);
				}
				}
				break;
			case 2:
				{
				{
				setState(1711);
				match(EXTERNAL);
				setState(1712);
				match(NAME);
				setState(1715);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,176,_ctx) ) {
				case 1:
					{
					setState(1713);
					externalProgramName();
					}
					break;
				case 2:
					{
					setState(1714);
					identifier();
					}
					break;
				}
				}
				}
				break;
			case 3:
				{
				{
				setState(1717);
				match(LANGUAGE);
				setState(1718);
				_la = _input.LA(1);
				if ( !(((((_la - 431)) & ~0x3f) == 0 && ((1L << (_la - 431)) & ((1L << (ASSEMBLE - 431)) | (1L << (C_ - 431)) | (1L << (COBOL - 431)) | (1L << (JAVA - 431)) | (1L << (PLI - 431)) | (1L << (REXX - 431)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case 4:
				{
				{
				setState(1719);
				match(PARAMETER);
				setState(1720);
				match(STYLE);
				setState(1736);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,178,_ctx) ) {
				case 1:
					{
					setState(1721);
					match(SQL);
					}
					break;
				case 2:
					{
					setState(1722);
					match(DB2SQL);
					}
					break;
				case 3:
					{
					{
					setState(1723);
					match(STANDARD);
					setState(1724);
					match(CALL);
					}
					}
					break;
				case 4:
					{
					setState(1725);
					match(GENERAL);
					}
					break;
				case 5:
					{
					{
					setState(1726);
					match(SIMPLE);
					setState(1727);
					match(CALL);
					}
					}
					break;
				case 6:
					{
					{
					setState(1731);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case GENERAL:
						{
						setState(1728);
						match(GENERAL);
						}
						break;
					case SIMPLE:
						{
						{
						setState(1729);
						match(SIMPLE);
						setState(1730);
						match(CALL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(1733);
					match(WITH);
					setState(1734);
					match(NULLS);
					}
					}
					break;
				case 7:
					{
					setState(1735);
					match(JAVA);
					}
					break;
				}
				}
				}
				break;
			case 5:
				{
				{
				setState(1739);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1738);
					match(NOT);
					}
				}

				setState(1741);
				match(DETERMINISTIC);
				}
				}
				break;
			case 6:
				{
				{
				setState(1743);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1742);
					match(NOT);
					}
				}

				setState(1745);
				match(VARIANT);
				}
				}
				break;
			case 7:
				{
				setState(1752);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PACKAGE:
					{
					{
					setState(1746);
					match(PACKAGE);
					setState(1747);
					match(PATH);
					setState(1748);
					packagePath();
					}
					}
					break;
				case NO:
					{
					{
					setState(1749);
					match(NO);
					setState(1750);
					match(PACKAGE);
					setState(1751);
					match(PATH);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 8:
				{
				setState(1764);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case MODIFIES:
					{
					{
					setState(1754);
					match(MODIFIES);
					setState(1755);
					match(SQL);
					setState(1756);
					match(DATA);
					}
					}
					break;
				case READS:
					{
					{
					setState(1757);
					match(READS);
					setState(1758);
					match(SQL);
					setState(1759);
					match(DATA);
					}
					}
					break;
				case CONTAINS:
					{
					{
					setState(1760);
					match(CONTAINS);
					setState(1761);
					match(SQL);
					}
					}
					break;
				case NO:
					{
					{
					setState(1762);
					match(NO);
					setState(1763);
					match(SQL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 9:
				{
				{
				setState(1767);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(1766);
					match(NO);
					}
				}

				setState(1769);
				match(DBINFO);
				}
				}
				break;
			case 10:
				{
				setState(1774);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NO:
					{
					{
					setState(1770);
					match(NO);
					setState(1771);
					match(COLLID);
					}
					}
					break;
				case COLLID:
					{
					{
					setState(1772);
					match(COLLID);
					setState(1773);
					collectionID();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 11:
				{
				{
				setState(1776);
				match(WLM);
				setState(1777);
				match(ENVIRONMENT);
				setState(1785);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ADD:
				case AFTER:
				case ALL:
				case ALLOCATE:
				case ALLOW:
				case ALTER:
				case ALTERAND:
				case ANY:
				case ARRAY:
				case ARRAY_EXISTS:
				case AS:
				case ASENSITIVE:
				case ASSOCIATE:
				case ASUTIME:
				case AT:
				case AUDIT:
				case AUX:
				case AUXILIARY:
				case BEFORE:
				case BEGIN:
				case BETWEEN:
				case BUFFERPOOL:
				case BY:
				case CALL:
				case CAPTURE:
				case CASCADED:
				case CASE:
				case CAST:
				case CCSID:
				case CHAR:
				case CHARACTER:
				case CHECK:
				case CLONE:
				case CLOSE:
				case CLUSTER:
				case COLLECTION:
				case COLLID:
				case COLUMN:
				case COMMENT:
				case COMMIT:
				case CONCAT:
				case CONDITION:
				case CONNECT:
				case CONNECTION:
				case CONSTRAINT:
				case CONTAINS:
				case CONTENT:
				case CONTINUE:
				case CREATE:
				case CUBE:
				case CURRENT:
				case CURRENT_LC_CTYPE:
				case CURRVAL:
				case CURSOR:
				case DATA:
				case DATABASE:
				case DAY:
				case DAYS:
				case DBINFO:
				case DECLARE:
				case DEFAULT:
				case DELETE:
				case DESCRIPTOR:
				case DETERMINISTIC:
				case DISABLE:
				case DISALLOW:
				case DISTINCT:
				case DO:
				case DOCUMENT:
				case DOUBLE:
				case DROP:
				case DSSIZE:
				case DYNAMIC:
				case EDITPROC:
				case ELSE:
				case ELSEIF:
				case ENCODING:
				case ENCRYPTION:
				case END:
				case END_EXEC:
				case ENDING:
				case ERASE:
				case ESCAPE:
				case EXCEPT:
				case EXCEPTION:
				case EXEC_SQL:
				case EXECUTE:
				case EXISTS:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case FENCED:
				case FETCH:
				case FIELDPROC:
				case FINAL:
				case FIRST:
				case FOR:
				case FREE:
				case FROM:
				case FULL:
				case FUNCTION:
				case GENERATED:
				case GET:
				case GLOBAL:
				case GO:
				case GOTO:
				case GRANT:
				case GROUP:
				case HANDLER:
				case HAVING:
				case HOLD:
				case HOUR:
				case HOURS:
				case IF:
				case IMMEDIATE:
				case IN:
				case INCLUSIVE:
				case INDEX:
				case INDEXBP:
				case INHERIT:
				case INNER:
				case INOUT:
				case INSENSITIVE:
				case INSERT:
				case INTERSECT:
				case INTO:
				case IS:
				case ISOBID:
				case ITERATE:
				case JAR:
				case JOIN:
				case KEEP:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LAST:
				case LC_CTYPE:
				case LEAVE:
				case LEFT:
				case LIKE:
				case LIMIT:
				case LOCAL:
				case LOCALE:
				case LOCATOR:
				case LOCATORS:
				case LOCK:
				case LOCKMAX:
				case LOCKSIZE:
				case LONG:
				case LOOP:
				case MAINTAINED:
				case MATERIALIZED:
				case MICROSECOND:
				case MICROSECONDS:
				case MODIFIES:
				case MONTH:
				case MONTHS:
				case NEXT:
				case NEXTVAL:
				case NO:
				case NONE:
				case NOT:
				case NULL:
				case NULLS:
				case NUMPARTS:
				case OBID:
				case OF:
				case OFFSET:
				case OLD:
				case ON:
				case OPEN:
				case OPTIMIZATION:
				case OPTIMIZE:
				case OR:
				case ORDER:
				case ORGANIZATION:
				case OUT:
				case OUTER:
				case PACKAGE:
				case PADDED:
				case PARAMETER:
				case PART:
				case PARTITION:
				case PARTITIONED:
				case PARTITIONING:
				case PATH:
				case PERIOD:
				case PIECESIZE:
				case PLAN:
				case PRECISION:
				case PREPARE:
				case PREVVAL:
				case PRIOR:
				case PRIQTY:
				case PRIVILEGES:
				case PROCEDURE:
				case PROGRAM:
				case PSID:
				case PUBLIC:
				case QUERY:
				case QUERYNO:
				case READS:
				case REFERENCES:
				case REFRESH:
				case RELEASE:
				case RENAME:
				case REPEAT:
				case RESIGNAL:
				case RESTRICT:
				case RESULT:
				case RESULT_SET_LOCATOR:
				case RETURN:
				case RETURNS:
				case REVOKE:
				case RIGHT:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUND_CEILING:
				case ROUND_DOWN:
				case ROUND_FLOOR:
				case ROUND_HALF_DOWN:
				case ROUND_HALF_EVEN:
				case ROUND_HALF_UP:
				case ROUND_UP:
				case ROW:
				case ROWSET:
				case RUN:
				case SAVEPOINT:
				case SCHEMA:
				case SCRATCHPAD:
				case SECOND:
				case SECONDS:
				case SECQTY:
				case SECURITY:
				case SELECT:
				case SENSITIVE:
				case SEQUENCE:
				case SET:
				case SIGNAL:
				case SIMPLE:
				case SOME:
				case SOURCE:
				case SPECIFIC:
				case STANDARD:
				case STATEMENT:
				case STATIC:
				case STAY:
				case STOGROUP:
				case STORES:
				case STYLE:
				case SUMMARY:
				case SYNONYM:
				case SYSDATE:
				case SYSTEM:
				case SYSTIMESTAMP:
				case TABLE:
				case TABLESPACE:
				case THEN:
				case TO:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNDO:
				case UNION:
				case UNIQUE:
				case UNTIL:
				case UPDATE:
				case USING:
				case VALIDPROC:
				case VALUE:
				case VALUES:
				case VARIABLE:
				case VARIANT:
				case VCAT:
				case VERSIONING:
				case VIEW:
				case VOLATILE:
				case VOLUMES:
				case WHEN:
				case WHENEVER:
				case WHERE:
				case WHILE:
				case WITH:
				case WLM:
				case XMLCAST:
				case XMLEXISTS:
				case XMLNAMESPACES:
				case YEAR:
				case YEARS:
				case ZONE:
				case AND:
				case ARRAY_AGG:
				case ASC:
				case AVG:
				case BIT:
				case CHANGE:
				case CODEUNITS16:
				case CODEUNITS32:
				case CORR:
				case CORRELATION:
				case COUNT:
				case COUNT_BIG:
				case COVAR:
				case COVARIANCE:
				case COVARIANCE_SAMP:
				case COVAR_POP:
				case COVAR_SAMP:
				case CS:
				case CUME_DIST:
				case DENSE_RANK:
				case DESC:
				case EBCDIC:
				case EXCLUSIVE:
				case FIRST_VALUE:
				case FOLLOWING:
				case GROUPING:
				case IGNORE:
				case INDICATOR:
				case INPUT:
				case ISNULL:
				case LAG:
				case LARGE:
				case LAST_VALUE:
				case LEAD:
				case LISTAGG:
				case LOCKED:
				case LOCKS:
				case MEDIAN:
				case MINUTES:
				case MIXED:
				case NOTNULL:
				case NTH_VALUE:
				case NTILE:
				case NUMERIC:
				case OBJECT:
				case OCTETS:
				case ONLY:
				case OVER:
				case PASSING:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case PERCENT_RANK:
				case PRECEDING:
				case PREVIOUS:
				case RANGE:
				case RANK:
				case RATIO_TO_REPORT:
				case READ:
				case REF:
				case REGR_AVGX:
				case REGR_AVGY:
				case REGR_COUNT:
				case REGR_ICPT:
				case REGR_INTERCEPT:
				case REGR_R2:
				case REGR_SLOPE:
				case REGR_SXX:
				case REGR_SXY:
				case REGR_SYY:
				case RESPECT:
				case ROW_NUMBER:
				case ROWS:
				case RR:
				case RS:
				case SBCS:
				case SELECTIVITY:
				case SETS:
				case SHARE:
				case SKIP_:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case TOKEN:
				case UNBOUNDED:
				case UNPACK:
				case UR:
				case USE:
				case VAR:
				case VARIANCE:
				case VARIANCE_SAMP:
				case VAR_POP:
				case VAR_SAMP:
				case VARYING:
				case WITHOUT:
				case XML:
				case XMLAGG:
				case COLUMNS:
				case SQLID:
				case ORDINALITY:
				case SYSTEM_TIME:
				case BUSINESS_TIME:
				case MULTIPLIER:
				case UNNEST:
				case CROSS:
				case CALLER:
				case CLIENT:
				case POSITIONING:
				case SCROLL:
				case ACTION:
				case ASSEMBLE:
				case C_:
				case CALLED:
				case COBOL:
				case DB2:
				case DEFINER:
				case DISPATCH:
				case ENVIRONMENT:
				case FAILURE:
				case FAILURES:
				case JAVA:
				case MAIN:
				case NAME:
				case OPTIONS:
				case PARALLEL:
				case PLI:
				case REGISTERS:
				case RESIDENT:
				case SECURED:
				case SPECIAL:
				case SQL:
				case STOP:
				case SUB:
				case YES:
				case APPLICATION:
				case CHANGED:
				case COMPATIBILITY:
				case COMPRESS:
				case COPY:
				case FREEPAGE:
				case GBPCACHE:
				case INCLUDE:
				case MAXVALUE:
				case MINVALUE:
				case PCTFREE:
				case REGENERATE:
				case SEQTY:
				case MASK:
				case ENABLE:
				case PERMISSION:
				case ATOMIC:
				case SQLEXCEPTION:
				case MERGE:
				case MATCHED:
				case SQLSTATE:
				case MESSAGE_TEXT:
				case OVERRIDING:
				case PORTION:
				case DB2SQL:
				case DEBUG:
				case GENERAL:
				case MODE_:
				case REXX:
				case CACHE:
				case CYCLE:
				case INCREMENT:
				case RESTART:
				case DATACLAS:
				case MGMTCLAS:
				case REMOVE:
				case STORCLAS:
				case ACCESS:
				case ACTIVATE:
				case ALWAYS:
				case APPEND:
				case ARCHIVE:
				case BUSINESS:
				case CASCADE:
				case CHANGES:
				case CONTROL:
				case DEACTIVATE:
				case DEFERRED:
				case EACH:
				case ENFORCED:
				case EXTRA:
				case FOREIGN:
				case HIDDEN_:
				case HISTORY:
				case ID:
				case IDENTITY:
				case IMPLICITLY:
				case INITIALLY:
				case INLINE:
				case OPERATION:
				case ORGANIZE:
				case OVERLAPS:
				case PACKAGE_NAME:
				case PACKAGE_SCHEMA:
				case PACKAGE_VERSION:
				case PRIMARY:
				case RESET:
				case ROTATE:
				case START:
				case SYSIBM:
				case TRANSACTION:
				case ABS:
				case ABSVAL:
				case ACOS:
				case ADD_DAYS:
				case ADD_MONTHS:
				case ARRAY_DELETE:
				case ARRAY_FIRST:
				case ARRAY_LAST:
				case ARRAY_NEXT:
				case ARRAY_PRIOR:
				case ARRAY_TRIM:
				case ASCII:
				case ASCII_CHR:
				case ASCIISTR:
				case ASCII_STR:
				case ASIN:
				case ATAN:
				case ATAN2:
				case ATANH:
				case BIGINT:
				case BINARY:
				case BITAND:
				case BITANDNOT:
				case BITNOT:
				case BITOR:
				case BITXOR:
				case BLOB:
				case BTRIM:
				case CARDINALITY:
				case CCSID_ENCODING:
				case CEIL:
				case CEILING:
				case CHAR9:
				case CHARACTER_LENGTH:
				case CHAR_LENGTH:
				case CHR:
				case CLOB:
				case COALESCE:
				case COLLATION_KEY:
				case COMPARE_DECFLOAT:
				case COS:
				case COSH:
				case DATE:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFWEEK_ISO:
				case DAYOFYEAR:
				case DAYS_BETWEEN:
				case DBCLOB:
				case DEC:
				case DECFLOAT:
				case DECFLOAT_FORMAT:
				case DECFLOAT_SORTKEY:
				case DECIMAL:
				case DECODE:
				case DECRYPT_BINARY:
				case DECRYPT_BIT:
				case DECRYPT_CHAR:
				case DECRYPT_DATAKEY_BIGINT:
				case DECRYPT_DATAKEY_BIT:
				case DECRYPT_DATAKEY_CLOB:
				case DECRYPT_DATAKEY_DBCLOB:
				case DECRYPT_DATAKEY_DECIMAL:
				case DECRYPT_DATAKEY_INTEGER:
				case DECRYPT_DATAKEY_VARCHAR:
				case DECRYPT_DATAKEY_VARGRAPHIC:
				case DECRYPT_DB:
				case DEGREES:
				case DIFFERENCE:
				case DIGITS:
				case DOUBLE_PRECISION:
				case DSN_XMLVALIDATE:
				case EBCDIC_CHR:
				case EBCDIC_STR:
				case ENCRYPT_DATAKEY:
				case ENCRYPT_TDES:
				case EXP:
				case EXTRACT:
				case FLOAT:
				case FLOOR:
				case GENERATE_UNIQUE:
				case GENERATE_UNIQUE_BINARY:
				case GETHINT:
				case GETVARIABLE:
				case GRAPHIC:
				case GREATEST:
				case HASH:
				case HASH_CRC32:
				case HASH_MD5:
				case HASH_SHA1:
				case HASH_SHA256:
				case HEX:
				case IDENTITY_VAL_LOCAL:
				case IFNULL:
				case INSTR:
				case INT:
				case INTEGER:
				case JULIAN_DAY:
				case LAST_DAY:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LN:
				case LOCATE:
				case LOCATE_IN_STRING:
				case LOG10:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAX:
				case MAX_CARDINALITY:
				case MIDNIGHT_SECONDS:
				case MIN:
				case MINUTE:
				case MOD:
				case MONTHS_BETWEEN:
				case MQREAD:
				case MQREADCLOB:
				case MQRECEIVE:
				case MQRECEIVECLOB:
				case MQSEND:
				case MULTIPLY_ALT:
				case NEXT_DAY:
				case NEXT_MONTH:
				case NORMALIZE_DECFLOAT:
				case NORMALIZE_STRING:
				case NULLIF:
				case NVL:
				case OVERLAY:
				case PACK:
				case POSITION:
				case POSSTR:
				case POW:
				case POWER:
				case QUANTIZE:
				case QUARTER:
				case RADIANS:
				case RAISE_ERROR:
				case RAND:
				case RANDOM:
				case REAL:
				case REGEXP_COUNT:
				case REGEXP_INSTR:
				case REGEXP_LIKE:
				case REGEXP_REPLACE:
				case REGEXP_SUBSTR:
				case REPLACE:
				case RID:
				case ROUND:
				case ROUND_TIMESTAMP:
				case ROWID:
				case RPAD:
				case RTRIM:
				case SCORE:
				case SIGN:
				case SIN:
				case SINH:
				case SMALLINT:
				case SOAPHTTPC:
				case SOAPHTTPNC:
				case SOAPHTTPNV:
				case SOAPHTTPV:
				case SOUNDEX:
				case SPACE:
				case SQRT:
				case STRIP:
				case STRLEFT:
				case STRPOS:
				case STRRIGHT:
				case SUBSTR:
				case SUBSTRING:
				case TAN:
				case TANH:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIMESTAMP_FORMAT:
				case TIMESTAMP_ISO:
				case TIMESTAMP_TZ:
				case TO_CHAR:
				case TO_CLOB:
				case TO_DATE:
				case TO_NUMBER:
				case TOTALORDER:
				case TO_TIMESTAMP:
				case TRANSLATE:
				case TRIM:
				case TRIM_ARRAY:
				case TRUNC:
				case TRUNC_TIMESTAMP:
				case UCASE:
				case UNICODE:
				case UNICODE_STR:
				case UNISTR:
				case UPPER:
				case VARBINARY:
				case VARCHAR:
				case VARCHAR9:
				case VARCHAR_BIT_FORMAT:
				case VARCHAR_FORMAT:
				case VARGRAPHIC:
				case VERIFY_GROUP_FOR_USER:
				case VERIFY_ROLE_FOR_USER:
				case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
				case WEEK:
				case WEEK_ISO:
				case WRAP:
				case XMLATTRIBUTES:
				case XMLCOMMENT:
				case XMLCONCAT:
				case XMLDOCUMENT:
				case XMLELEMENT:
				case XMLFOREST:
				case XMLMODIFY:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLSERIALIZE:
				case XMLTEXT:
				case XMLXSROBJECTID:
				case XSLTRANSFORM:
				case CURRENT_ACCELERATOR:
				case CURRENT_APPLICATION_COMPATIBILITY:
				case CURRENT_APPLICATION_ENCODING_SCHEME:
				case CURRENT_CLIENT_ACCTNG:
				case CURRENT_CLIENT_APPLNAME:
				case CURRENT_CLIENT_CORR_TOKEN:
				case CURRENT_CLIENT_USERID:
				case CURRENT_CLIENT_WRKSTNNAME:
				case CURRENT_DATE:
				case CURRENT_DEBUG_MODE:
				case CURRENT_DECFLOAT_ROUNDING_MODE:
				case CURRENT_DEGREE:
				case CURRENT_EXPLAIN_MODE:
				case CURRENT_GET_ACCEL_ARCHIVE:
				case CURRENT_LOCALE_LC_CTYPE:
				case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
				case CURRENT_MEMBER:
				case CURRENT_OPTIMIZATION_HINT:
				case CURRENT_PACKAGE_PATH:
				case CURRENT_PACKAGESET:
				case CURRENT_PATH:
				case CURRENT_PRECISION:
				case CURRENT_QUERY_ACCELERATION:
				case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
				case CURRENT_REFRESH_AGE:
				case CURRENT_ROUTINE_VERSION:
				case CURRENT_RULES:
				case CURRENT_SCHEMA:
				case CURRENT_SERVER:
				case CURRENT_SQLID:
				case CURRENT_TEMPORAL_BUSINESS_TIME:
				case CURRENT_TEMPORAL_SYSTEM_TIME:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case CURRENT_TIME_ZONE:
				case ENCRYPTION_PASSWORD:
				case SESSION_TIME_ZONE:
				case SESSION_USER:
				case USER:
				case ADMIN_TASK_LIST:
				case ADMIN_TASK_OUTPUT:
				case ADMIN_TASK_STATUS:
				case BLOCKING_THREADS:
				case MQREADALL:
				case MQREADALLCLOB:
				case MQRECEIVEALL:
				case MQRECEIVEALLCLOB:
				case XMLTABLE:
				case SQLIDENTIFIER:
					{
					setState(1778);
					identifier();
					}
					break;
				case LPAREN:
					{
					{
					setState(1779);
					match(LPAREN);
					setState(1780);
					identifier();
					setState(1781);
					match(COMMA);
					setState(1782);
					match(SPLAT);
					setState(1783);
					match(RPAREN);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case 12:
				{
				{
				setState(1787);
				match(ASUTIME);
				setState(1792);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NO:
					{
					{
					setState(1788);
					match(NO);
					setState(1789);
					match(LIMIT);
					}
					}
					break;
				case LIMIT:
					{
					{
					setState(1790);
					match(LIMIT);
					setState(1791);
					match(INTEGERLITERAL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case 13:
				{
				{
				setState(1794);
				match(STAY);
				setState(1795);
				match(RESIDENT);
				setState(1796);
				_la = _input.LA(1);
				if ( !(_la==NO || _la==YES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case 14:
				{
				{
				setState(1797);
				match(PROGRAM);
				setState(1798);
				match(TYPE);
				setState(1799);
				_la = _input.LA(1);
				if ( !(_la==MAIN || _la==SUB) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case 15:
				{
				{
				setState(1800);
				match(SECURITY);
				setState(1801);
				_la = _input.LA(1);
				if ( !(_la==DB2 || _la==DEFINER || _la==USER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case 16:
				{
				{
				setState(1802);
				match(RUN);
				setState(1803);
				match(OPTIONS);
				setState(1804);
				runTimeOptions();
				}
				}
				break;
			case 17:
				{
				{
				setState(1805);
				match(COMMIT);
				setState(1806);
				match(ON);
				setState(1807);
				match(RETURN);
				setState(1808);
				_la = _input.LA(1);
				if ( !(_la==NO || _la==YES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case 18:
				{
				{
				setState(1809);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==INHERIT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1810);
				match(SPECIAL);
				setState(1811);
				match(REGISTERS);
				}
				}
				break;
			case 19:
				{
				{
				setState(1812);
				match(CALLED);
				setState(1813);
				match(ON);
				setState(1814);
				match(NULL);
				setState(1815);
				match(INPUT);
				}
				}
				break;
			case 20:
				{
				{
				setState(1816);
				match(NULL);
				setState(1817);
				match(CALL);
				}
				}
				break;
			case 21:
				{
				setState(1830);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,187,_ctx) ) {
				case 1:
					{
					{
					setState(1818);
					match(STOP);
					setState(1819);
					match(AFTER);
					setState(1820);
					match(SYSTEM);
					setState(1821);
					match(DEFAULT);
					setState(1822);
					match(FAILURES);
					}
					}
					break;
				case 2:
					{
					{
					setState(1823);
					match(STOP);
					setState(1824);
					match(AFTER);
					setState(1825);
					match(INTEGERLITERAL);
					setState(1826);
					match(FAILURES);
					}
					}
					break;
				case 3:
					{
					{
					setState(1827);
					match(CONTINUE);
					setState(1828);
					match(AFTER);
					setState(1829);
					match(FAILURE);
					}
					}
					break;
				}
				}
				break;
			case 22:
				{
				{
				setState(1832);
				_la = _input.LA(1);
				if ( !(((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (ALLOW - 33)) | (1L << (DISABLE - 33)) | (1L << (DISALLOW - 33)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1833);
				match(DEBUG);
				setState(1834);
				match(MODE_);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SequenceOptionListContext extends ParserRuleContext {
		public TerminalNode RESTART() { return getToken(DB2zSQLParser.RESTART, 0); }
		public TerminalNode INCREMENT() { return getToken(DB2zSQLParser.INCREMENT, 0); }
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode CYCLE() { return getToken(DB2zSQLParser.CYCLE, 0); }
		public TerminalNode ORDER() { return getToken(DB2zSQLParser.ORDER, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode MINVALUE() { return getToken(DB2zSQLParser.MINVALUE, 0); }
		public TerminalNode MAXVALUE() { return getToken(DB2zSQLParser.MAXVALUE, 0); }
		public TerminalNode CACHE() { return getToken(DB2zSQLParser.CACHE, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public SequenceOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequenceOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSequenceOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSequenceOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSequenceOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SequenceOptionListContext sequenceOptionList() throws RecognitionException {
		SequenceOptionListContext _localctx = new SequenceOptionListContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_sequenceOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1871);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,195,_ctx) ) {
			case 1:
				{
				{
				setState(1837);
				match(RESTART);
				setState(1840);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(1838);
					match(WITH);
					setState(1839);
					match(INTEGERLITERAL);
					}
				}

				}
				}
				break;
			case 2:
				{
				{
				setState(1842);
				match(INCREMENT);
				setState(1843);
				match(BY);
				setState(1844);
				match(INTEGERLITERAL);
				}
				}
				break;
			case 3:
				{
				setState(1849);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NO:
					{
					{
					setState(1845);
					match(NO);
					setState(1846);
					match(MINVALUE);
					}
					}
					break;
				case MINVALUE:
					{
					{
					setState(1847);
					match(MINVALUE);
					setState(1848);
					match(INTEGERLITERAL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				{
				setState(1855);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NO:
					{
					{
					setState(1851);
					match(NO);
					setState(1852);
					match(MAXVALUE);
					}
					}
					break;
				case MAXVALUE:
					{
					{
					setState(1853);
					match(MAXVALUE);
					setState(1854);
					match(INTEGERLITERAL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 5:
				{
				{
				setState(1858);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(1857);
					match(NO);
					}
				}

				setState(1860);
				match(CYCLE);
				}
				}
				break;
			case 6:
				{
				setState(1865);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NO:
					{
					{
					setState(1861);
					match(NO);
					setState(1862);
					match(CACHE);
					}
					}
					break;
				case CACHE:
					{
					{
					setState(1863);
					match(CACHE);
					setState(1864);
					match(INTEGERLITERAL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 7:
				{
				{
				setState(1868);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(1867);
					match(NO);
					}
				}

				setState(1870);
				match(ORDER);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StogroupOptionListContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(DB2zSQLParser.ADD, 0); }
		public TerminalNode VOLUMES() { return getToken(DB2zSQLParser.VOLUMES, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<VolumeIDContext> volumeID() {
			return getRuleContexts(VolumeIDContext.class);
		}
		public VolumeIDContext volumeID(int i) {
			return getRuleContext(VolumeIDContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> NONNUMERICLITERAL() { return getTokens(DB2zSQLParser.NONNUMERICLITERAL); }
		public TerminalNode NONNUMERICLITERAL(int i) {
			return getToken(DB2zSQLParser.NONNUMERICLITERAL, i);
		}
		public TerminalNode REMOVE() { return getToken(DB2zSQLParser.REMOVE, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode KEY() { return getToken(DB2zSQLParser.KEY, 0); }
		public TerminalNode LABEL() { return getToken(DB2zSQLParser.LABEL, 0); }
		public KeyLabelNameContext keyLabelName() {
			return getRuleContext(KeyLabelNameContext.class,0);
		}
		public TerminalNode DATACLAS() { return getToken(DB2zSQLParser.DATACLAS, 0); }
		public DcNameContext dcName() {
			return getRuleContext(DcNameContext.class,0);
		}
		public TerminalNode MGMTCLAS() { return getToken(DB2zSQLParser.MGMTCLAS, 0); }
		public McNameContext mcName() {
			return getRuleContext(McNameContext.class,0);
		}
		public TerminalNode STORCLAS() { return getToken(DB2zSQLParser.STORCLAS, 0); }
		public ScNameContext scName() {
			return getRuleContext(ScNameContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public StogroupOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stogroupOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterStogroupOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitStogroupOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitStogroupOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StogroupOptionListContext stogroupOptionList() throws RecognitionException {
		StogroupOptionListContext _localctx = new StogroupOptionListContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_stogroupOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1935);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,200,_ctx) ) {
			case 1:
				{
				{
				setState(1873);
				match(ADD);
				setState(1874);
				match(VOLUMES);
				setState(1875);
				match(LPAREN);
				setState(1876);
				volumeID();
				setState(1881);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1877);
					match(COMMA);
					setState(1878);
					volumeID();
					}
					}
					setState(1883);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1884);
				match(RPAREN);
				}
				}
				break;
			case 2:
				{
				{
				setState(1886);
				match(ADD);
				setState(1887);
				match(VOLUMES);
				setState(1888);
				match(LPAREN);
				setState(1889);
				match(NONNUMERICLITERAL);
				setState(1894);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1890);
					match(COMMA);
					setState(1891);
					match(NONNUMERICLITERAL);
					}
					}
					setState(1896);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1897);
				match(RPAREN);
				}
				}
				break;
			case 3:
				{
				{
				setState(1898);
				match(REMOVE);
				setState(1899);
				match(VOLUMES);
				setState(1900);
				match(LPAREN);
				setState(1901);
				volumeID();
				setState(1906);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1902);
					match(COMMA);
					setState(1903);
					volumeID();
					}
					}
					setState(1908);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1909);
				match(RPAREN);
				}
				}
				break;
			case 4:
				{
				{
				setState(1911);
				match(REMOVE);
				setState(1912);
				match(VOLUMES);
				setState(1913);
				match(LPAREN);
				setState(1914);
				match(NONNUMERICLITERAL);
				setState(1919);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1915);
					match(COMMA);
					setState(1916);
					match(NONNUMERICLITERAL);
					}
					}
					setState(1921);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1922);
				match(RPAREN);
				}
				}
				break;
			case 5:
				{
				{
				setState(1923);
				match(NO);
				setState(1924);
				match(KEY);
				setState(1925);
				match(LABEL);
				}
				}
				break;
			case 6:
				{
				{
				setState(1926);
				match(KEY);
				setState(1927);
				match(LABEL);
				setState(1928);
				keyLabelName();
				}
				}
				break;
			case 7:
				{
				{
				setState(1929);
				match(DATACLAS);
				setState(1930);
				dcName();
				}
				}
				break;
			case 8:
				{
				{
				setState(1931);
				match(MGMTCLAS);
				setState(1932);
				mcName();
				}
				}
				break;
			case 9:
				{
				{
				setState(1933);
				match(STORCLAS);
				setState(1934);
				scName();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableOptionListContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(DB2zSQLParser.ADD, 0); }
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public ColumnAlterationContext columnAlteration() {
			return getRuleContext(ColumnAlterationContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(DB2zSQLParser.RENAME, 0); }
		public TerminalNode COLUMN() { return getToken(DB2zSQLParser.COLUMN, 0); }
		public SourceColumnNameContext sourceColumnName() {
			return getRuleContext(SourceColumnNameContext.class,0);
		}
		public TerminalNode TO() { return getToken(DB2zSQLParser.TO, 0); }
		public TargetColumnNameContext targetColumnName() {
			return getRuleContext(TargetColumnNameContext.class,0);
		}
		public List<TerminalNode> DROP() { return getTokens(DB2zSQLParser.DROP); }
		public TerminalNode DROP(int i) {
			return getToken(DB2zSQLParser.DROP, i);
		}
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TerminalNode RESTRICT() { return getToken(DB2zSQLParser.RESTRICT, 0); }
		public TerminalNode PERIOD() { return getToken(DB2zSQLParser.PERIOD, 0); }
		public PeriodDefinitionContext periodDefinition() {
			return getRuleContext(PeriodDefinitionContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(DB2zSQLParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public PartitioningClauseContext partitioningClause() {
			return getRuleContext(PartitioningClauseContext.class,0);
		}
		public PartitionClauseContext partitionClause() {
			return getRuleContext(PartitionClauseContext.class,0);
		}
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode ROTATE() { return getToken(DB2zSQLParser.ROTATE, 0); }
		public TerminalNode LAST() { return getToken(DB2zSQLParser.LAST, 0); }
		public RotatePartitionClauseContext rotatePartitionClause() {
			return getRuleContext(RotatePartitionClauseContext.class,0);
		}
		public TerminalNode ORGANIZATION() { return getToken(DB2zSQLParser.ORGANIZATION, 0); }
		public AlterHashOrganizationContext alterHashOrganization() {
			return getRuleContext(AlterHashOrganizationContext.class,0);
		}
		public TerminalNode VERSIONING() { return getToken(DB2zSQLParser.VERSIONING, 0); }
		public TerminalNode USE() { return getToken(DB2zSQLParser.USE, 0); }
		public TerminalNode HISTORY() { return getToken(DB2zSQLParser.HISTORY, 0); }
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public HistoryTableNameContext historyTableName() {
			return getRuleContext(HistoryTableNameContext.class,0);
		}
		public MaterializedQueryDefinitionContext materializedQueryDefinition() {
			return getRuleContext(MaterializedQueryDefinitionContext.class,0);
		}
		public TerminalNode QUERY() { return getToken(DB2zSQLParser.QUERY, 0); }
		public MaterializedQueryAlterationContext materializedQueryAlteration() {
			return getRuleContext(MaterializedQueryAlterationContext.class,0);
		}
		public TerminalNode DATA() { return getToken(DB2zSQLParser.DATA, 0); }
		public TerminalNode CAPTURE() { return getToken(DB2zSQLParser.CAPTURE, 0); }
		public TerminalNode VOLATILE() { return getToken(DB2zSQLParser.VOLATILE, 0); }
		public TerminalNode CLONE() { return getToken(DB2zSQLParser.CLONE, 0); }
		public CloneTableNameContext cloneTableName() {
			return getRuleContext(CloneTableNameContext.class,0);
		}
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public TerminalNode ROW() { return getToken(DB2zSQLParser.ROW, 0); }
		public TerminalNode ACCESS() { return getToken(DB2zSQLParser.ACCESS, 0); }
		public TerminalNode CONTROL() { return getToken(DB2zSQLParser.CONTROL, 0); }
		public TerminalNode APPEND() { return getToken(DB2zSQLParser.APPEND, 0); }
		public TerminalNode AUDIT() { return getToken(DB2zSQLParser.AUDIT, 0); }
		public TerminalNode VALIDPROC() { return getToken(DB2zSQLParser.VALIDPROC, 0); }
		public TerminalNode ENABLE() { return getToken(DB2zSQLParser.ENABLE, 0); }
		public TerminalNode ARCHIVE() { return getToken(DB2zSQLParser.ARCHIVE, 0); }
		public ArchiveTableNameContext archiveTableName() {
			return getRuleContext(ArchiveTableNameContext.class,0);
		}
		public TerminalNode DISABLE() { return getToken(DB2zSQLParser.DISABLE, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode KEY() { return getToken(DB2zSQLParser.KEY, 0); }
		public TerminalNode LABEL() { return getToken(DB2zSQLParser.LABEL, 0); }
		public KeyLabelNameContext keyLabelName() {
			return getRuleContext(KeyLabelNameContext.class,0);
		}
		public TerminalNode FIRST() { return getToken(DB2zSQLParser.FIRST, 0); }
		public TerminalNode NONE() { return getToken(DB2zSQLParser.NONE, 0); }
		public TerminalNode CHANGES() { return getToken(DB2zSQLParser.CHANGES, 0); }
		public TerminalNode ACTIVATE() { return getToken(DB2zSQLParser.ACTIVATE, 0); }
		public TerminalNode DEACTIVATE() { return getToken(DB2zSQLParser.DEACTIVATE, 0); }
		public TerminalNode YES() { return getToken(DB2zSQLParser.YES, 0); }
		public TerminalNode ALL() { return getToken(DB2zSQLParser.ALL, 0); }
		public UniqueConstraintContext uniqueConstraint() {
			return getRuleContext(UniqueConstraintContext.class,0);
		}
		public ReferentialConstraintContext referentialConstraint() {
			return getRuleContext(ReferentialConstraintContext.class,0);
		}
		public CheckConstraintContext checkConstraint() {
			return getRuleContext(CheckConstraintContext.class,0);
		}
		public ProgramNameContext programName() {
			return getRuleContext(ProgramNameContext.class,0);
		}
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode SYSTEM() { return getToken(DB2zSQLParser.SYSTEM, 0); }
		public ExtraRowOptionContext extraRowOption() {
			return getRuleContext(ExtraRowOptionContext.class,0);
		}
		public TerminalNode MATERIALIZED() { return getToken(DB2zSQLParser.MATERIALIZED, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TerminalNode CARDINALITY() { return getToken(DB2zSQLParser.CARDINALITY, 0); }
		public TerminalNode PRIMARY() { return getToken(DB2zSQLParser.PRIMARY, 0); }
		public ConstraintNameContext constraintName() {
			return getRuleContext(ConstraintNameContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(DB2zSQLParser.UNIQUE, 0); }
		public TerminalNode CHECK() { return getToken(DB2zSQLParser.CHECK, 0); }
		public TerminalNode CONSTRAINT() { return getToken(DB2zSQLParser.CONSTRAINT, 0); }
		public TerminalNode FOREIGN() { return getToken(DB2zSQLParser.FOREIGN, 0); }
		public TableOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTableOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTableOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTableOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableOptionListContext tableOptionList() throws RecognitionException {
		TableOptionListContext _localctx = new TableOptionListContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_tableOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2092);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,217,_ctx) ) {
			case 1:
				{
				{
				setState(1937);
				match(ADD);
				setState(1939);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,201,_ctx) ) {
				case 1:
					{
					setState(1938);
					match(COLUMN);
					}
					break;
				}
				setState(1941);
				columnDefinition();
				}
				}
				break;
			case 2:
				{
				{
				setState(1942);
				match(ALTER);
				setState(1944);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,202,_ctx) ) {
				case 1:
					{
					setState(1943);
					match(COLUMN);
					}
					break;
				}
				setState(1946);
				columnAlteration();
				}
				}
				break;
			case 3:
				{
				{
				setState(1947);
				match(RENAME);
				setState(1948);
				match(COLUMN);
				setState(1949);
				sourceColumnName();
				setState(1950);
				match(TO);
				setState(1951);
				targetColumnName();
				}
				}
				break;
			case 4:
				{
				{
				setState(1953);
				match(DROP);
				setState(1955);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,203,_ctx) ) {
				case 1:
					{
					setState(1954);
					match(COLUMN);
					}
					break;
				}
				setState(1957);
				columnName();
				setState(1958);
				match(RESTRICT);
				}
				}
				break;
			case 5:
				{
				{
				setState(1960);
				match(ADD);
				setState(1961);
				match(PERIOD);
				setState(1963);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(1962);
					match(FOR);
					}
				}

				setState(1965);
				periodDefinition();
				}
				}
				break;
			case 6:
				{
				{
				setState(1966);
				match(ADD);
				setState(1970);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,205,_ctx) ) {
				case 1:
					{
					setState(1967);
					uniqueConstraint();
					}
					break;
				case 2:
					{
					setState(1968);
					referentialConstraint();
					}
					break;
				case 3:
					{
					setState(1969);
					checkConstraint();
					}
					break;
				}
				}
				}
				break;
			case 7:
				{
				{
				setState(1972);
				match(DROP);
				setState(1983);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PRIMARY:
					{
					{
					setState(1973);
					match(PRIMARY);
					setState(1974);
					match(KEY);
					}
					}
					break;
				case CHECK:
				case CONSTRAINT:
				case UNIQUE:
				case FOREIGN:
					{
					{
					setState(1980);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case UNIQUE:
						{
						setState(1975);
						match(UNIQUE);
						}
						break;
					case FOREIGN:
						{
						{
						setState(1976);
						match(FOREIGN);
						setState(1977);
						match(KEY);
						}
						}
						break;
					case CHECK:
						{
						setState(1978);
						match(CHECK);
						}
						break;
					case CONSTRAINT:
						{
						setState(1979);
						match(CONSTRAINT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(1982);
					constraintName();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case 8:
				{
				{
				setState(1985);
				match(ADD);
				setState(1986);
				match(PARTITION);
				setState(1987);
				match(BY);
				setState(1988);
				partitioningClause();
				}
				}
				break;
			case 9:
				{
				{
				setState(1989);
				match(ADD);
				setState(1990);
				match(PARTITION);
				setState(1991);
				partitionClause();
				}
				}
				break;
			case 10:
				{
				{
				setState(1992);
				match(ALTER);
				setState(1993);
				match(PARTITION);
				setState(1994);
				match(INTEGERLITERAL);
				setState(1995);
				partitionClause();
				}
				}
				break;
			case 11:
				{
				{
				setState(1996);
				match(ROTATE);
				setState(1997);
				match(PARTITION);
				setState(1998);
				_la = _input.LA(1);
				if ( !(_la==INTEGERLITERAL || _la==FIRST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1999);
				match(TO);
				setState(2000);
				match(LAST);
				setState(2001);
				rotatePartitionClause();
				}
				}
				break;
			case 12:
				{
				{
				setState(2002);
				match(DROP);
				setState(2003);
				match(ORGANIZATION);
				}
				}
				break;
			case 13:
				{
				{
				setState(2004);
				alterHashOrganization();
				}
				}
				break;
			case 14:
				{
				{
				setState(2005);
				match(ADD);
				setState(2007);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SYSTEM) {
					{
					setState(2006);
					match(SYSTEM);
					}
				}

				setState(2009);
				match(VERSIONING);
				setState(2010);
				match(USE);
				setState(2011);
				match(HISTORY);
				setState(2012);
				match(TABLE);
				setState(2013);
				historyTableName();
				setState(2015);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(2014);
					extraRowOption();
					}
				}

				}
				}
				break;
			case 15:
				{
				{
				setState(2017);
				match(DROP);
				setState(2019);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SYSTEM) {
					{
					setState(2018);
					match(SYSTEM);
					}
				}

				setState(2021);
				match(VERSIONING);
				}
				}
				break;
			case 16:
				{
				{
				setState(2022);
				match(ADD);
				setState(2026);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case MATERIALIZED:
					{
					{
					setState(2023);
					match(MATERIALIZED);
					setState(2024);
					match(QUERY);
					}
					}
					break;
				case QUERY:
					{
					setState(2025);
					match(QUERY);
					}
					break;
				case LPAREN:
					break;
				default:
					break;
				}
				setState(2028);
				materializedQueryDefinition();
				}
				}
				break;
			case 17:
				{
				{
				setState(2029);
				match(ALTER);
				setState(2031);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MATERIALIZED) {
					{
					setState(2030);
					match(MATERIALIZED);
					}
				}

				setState(2033);
				match(QUERY);
				setState(2034);
				materializedQueryAlteration();
				}
				}
				break;
			case 18:
				{
				{
				setState(2035);
				match(DROP);
				setState(2037);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MATERIALIZED) {
					{
					setState(2036);
					match(MATERIALIZED);
					}
				}

				setState(2039);
				match(QUERY);
				}
				}
				break;
			case 19:
				{
				{
				setState(2040);
				match(DATA);
				setState(2041);
				match(CAPTURE);
				setState(2042);
				_la = _input.LA(1);
				if ( !(_la==NONE || _la==CHANGES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case 20:
				{
				{
				setState(2044);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2043);
					match(NOT);
					}
				}

				setState(2046);
				match(VOLATILE);
				setState(2048);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CARDINALITY) {
					{
					setState(2047);
					match(CARDINALITY);
					}
				}

				}
				}
				break;
			case 21:
				{
				{
				setState(2050);
				match(ADD);
				setState(2051);
				match(CLONE);
				setState(2052);
				cloneTableName();
				}
				}
				break;
			case 22:
				{
				{
				setState(2053);
				match(DROP);
				setState(2054);
				match(CLONE);
				}
				}
				break;
			case 23:
				{
				{
				setState(2055);
				match(ADD);
				setState(2056);
				match(RESTRICT);
				setState(2057);
				match(ON);
				setState(2058);
				match(DROP);
				}
				}
				break;
			case 24:
				{
				{
				setState(2059);
				match(DROP);
				setState(2060);
				match(RESTRICT);
				setState(2061);
				match(ON);
				setState(2062);
				match(DROP);
				}
				}
				break;
			case 25:
				{
				{
				setState(2063);
				_la = _input.LA(1);
				if ( !(_la==ACTIVATE || _la==DEACTIVATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2064);
				match(ROW);
				setState(2065);
				match(ACCESS);
				setState(2066);
				match(CONTROL);
				}
				}
				break;
			case 26:
				{
				{
				setState(2067);
				_la = _input.LA(1);
				if ( !(_la==ACTIVATE || _la==DEACTIVATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2068);
				match(COLUMN);
				setState(2069);
				match(ACCESS);
				setState(2070);
				match(CONTROL);
				}
				}
				break;
			case 27:
				{
				{
				setState(2071);
				match(APPEND);
				setState(2072);
				_la = _input.LA(1);
				if ( !(_la==NO || _la==YES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case 28:
				{
				{
				setState(2073);
				match(AUDIT);
				setState(2074);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==NONE || _la==CHANGES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case 29:
				{
				{
				setState(2075);
				match(VALIDPROC);
				setState(2078);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,216,_ctx) ) {
				case 1:
					{
					setState(2076);
					programName();
					}
					break;
				case 2:
					{
					setState(2077);
					match(NULL);
					}
					break;
				}
				}
				}
				break;
			case 30:
				{
				{
				setState(2080);
				match(ENABLE);
				setState(2081);
				match(ARCHIVE);
				setState(2082);
				match(USE);
				setState(2083);
				archiveTableName();
				}
				}
				break;
			case 31:
				{
				{
				setState(2084);
				match(DISABLE);
				setState(2085);
				match(ARCHIVE);
				}
				}
				break;
			case 32:
				{
				{
				setState(2086);
				match(NO);
				setState(2087);
				match(KEY);
				setState(2088);
				match(LABEL);
				}
				}
				break;
			case 33:
				{
				{
				setState(2089);
				match(KEY);
				setState(2090);
				match(LABEL);
				setState(2091);
				keyLabelName();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnDefinitionOptionList1Context extends ParserRuleContext {
		public DefaultClause1Context defaultClause1() {
			return getRuleContext(DefaultClause1Context.class,0);
		}
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public ColumnConstraintContext columnConstraint() {
			return getRuleContext(ColumnConstraintContext.class,0);
		}
		public GeneratedClauseContext generatedClause() {
			return getRuleContext(GeneratedClauseContext.class,0);
		}
		public TerminalNode IMPLICITLY() { return getToken(DB2zSQLParser.IMPLICITLY, 0); }
		public TerminalNode HIDDEN_() { return getToken(DB2zSQLParser.HIDDEN_, 0); }
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode SECURITY() { return getToken(DB2zSQLParser.SECURITY, 0); }
		public TerminalNode LABEL() { return getToken(DB2zSQLParser.LABEL, 0); }
		public TerminalNode FIELDPROC() { return getToken(DB2zSQLParser.FIELDPROC, 0); }
		public ProgramNameContext programName() {
			return getRuleContext(ProgramNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<LiteralContext> literal() {
			return getRuleContexts(LiteralContext.class);
		}
		public LiteralContext literal(int i) {
			return getRuleContext(LiteralContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode INLINE() { return getToken(DB2zSQLParser.INLINE, 0); }
		public TerminalNode LENGTH() { return getToken(DB2zSQLParser.LENGTH, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public ColumnDefinitionOptionList1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDefinitionOptionList1; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterColumnDefinitionOptionList1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitColumnDefinitionOptionList1(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitColumnDefinitionOptionList1(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnDefinitionOptionList1Context columnDefinitionOptionList1() throws RecognitionException {
		ColumnDefinitionOptionList1Context _localctx = new ColumnDefinitionOptionList1Context(_ctx, getState());
		enterRule(_localctx, 128, RULE_columnDefinitionOptionList1);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2120);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFAULT:
			case WITH:
				{
				{
				setState(2094);
				defaultClause1();
				}
				}
				break;
			case NOT:
				{
				{
				setState(2095);
				match(NOT);
				setState(2096);
				match(NULL);
				}
				}
				break;
			case CHECK:
			case CONSTRAINT:
			case REFERENCES:
				{
				{
				setState(2097);
				columnConstraint();
				}
				}
				break;
			case GENERATED:
				{
				{
				setState(2098);
				generatedClause();
				}
				}
				break;
			case IMPLICITLY:
				{
				{
				setState(2099);
				match(IMPLICITLY);
				setState(2100);
				match(HIDDEN_);
				}
				}
				break;
			case AS:
				{
				{
				setState(2101);
				match(AS);
				setState(2102);
				match(SECURITY);
				setState(2103);
				match(LABEL);
				}
				}
				break;
			case FIELDPROC:
				{
				{
				setState(2104);
				match(FIELDPROC);
				setState(2105);
				programName();
				setState(2106);
				match(LPAREN);
				setState(2107);
				literal();
				setState(2112);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2108);
					match(COMMA);
					setState(2109);
					literal();
					}
					}
					setState(2114);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2115);
				match(RPAREN);
				}
				}
				break;
			case INLINE:
				{
				{
				setState(2117);
				match(INLINE);
				setState(2118);
				match(LENGTH);
				setState(2119);
				match(INTEGERLITERAL);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnDefinitionOptionList2Context extends ParserRuleContext {
		public DefaultClause2Context defaultClause2() {
			return getRuleContext(DefaultClause2Context.class,0);
		}
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public ColumnConstraintContext columnConstraint() {
			return getRuleContext(ColumnConstraintContext.class,0);
		}
		public GeneratedClauseContext generatedClause() {
			return getRuleContext(GeneratedClauseContext.class,0);
		}
		public TerminalNode IMPLICITLY() { return getToken(DB2zSQLParser.IMPLICITLY, 0); }
		public TerminalNode HIDDEN_() { return getToken(DB2zSQLParser.HIDDEN_, 0); }
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode SECURITY() { return getToken(DB2zSQLParser.SECURITY, 0); }
		public TerminalNode LABEL() { return getToken(DB2zSQLParser.LABEL, 0); }
		public TerminalNode FIELDPROC() { return getToken(DB2zSQLParser.FIELDPROC, 0); }
		public ProgramNameContext programName() {
			return getRuleContext(ProgramNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<LiteralContext> literal() {
			return getRuleContexts(LiteralContext.class);
		}
		public LiteralContext literal(int i) {
			return getRuleContext(LiteralContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode INLINE() { return getToken(DB2zSQLParser.INLINE, 0); }
		public TerminalNode LENGTH() { return getToken(DB2zSQLParser.LENGTH, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public ColumnDefinitionOptionList2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDefinitionOptionList2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterColumnDefinitionOptionList2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitColumnDefinitionOptionList2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitColumnDefinitionOptionList2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnDefinitionOptionList2Context columnDefinitionOptionList2() throws RecognitionException {
		ColumnDefinitionOptionList2Context _localctx = new ColumnDefinitionOptionList2Context(_ctx, getState());
		enterRule(_localctx, 130, RULE_columnDefinitionOptionList2);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2148);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFAULT:
			case WITH:
				{
				{
				setState(2122);
				defaultClause2();
				}
				}
				break;
			case NOT:
				{
				{
				setState(2123);
				match(NOT);
				setState(2124);
				match(NULL);
				}
				}
				break;
			case CHECK:
			case CONSTRAINT:
			case REFERENCES:
				{
				{
				setState(2125);
				columnConstraint();
				}
				}
				break;
			case GENERATED:
				{
				{
				setState(2126);
				generatedClause();
				}
				}
				break;
			case IMPLICITLY:
				{
				{
				setState(2127);
				match(IMPLICITLY);
				setState(2128);
				match(HIDDEN_);
				}
				}
				break;
			case AS:
				{
				{
				setState(2129);
				match(AS);
				setState(2130);
				match(SECURITY);
				setState(2131);
				match(LABEL);
				}
				}
				break;
			case FIELDPROC:
				{
				{
				setState(2132);
				match(FIELDPROC);
				setState(2133);
				programName();
				setState(2134);
				match(LPAREN);
				setState(2135);
				literal();
				setState(2140);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2136);
					match(COMMA);
					setState(2137);
					literal();
					}
					}
					setState(2142);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2143);
				match(RPAREN);
				}
				}
				break;
			case INLINE:
				{
				{
				setState(2145);
				match(INLINE);
				setState(2146);
				match(LENGTH);
				setState(2147);
				match(INTEGERLITERAL);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnConstraintContext extends ParserRuleContext {
		public ReferencesClauseContext referencesClause() {
			return getRuleContext(ReferencesClauseContext.class,0);
		}
		public CheckConstraintContext checkConstraint() {
			return getRuleContext(CheckConstraintContext.class,0);
		}
		public ColumnConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnConstraintContext columnConstraint() throws RecognitionException {
		ColumnConstraintContext _localctx = new ColumnConstraintContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_columnConstraint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2152);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REFERENCES:
				{
				setState(2150);
				referencesClause();
				}
				break;
			case CHECK:
			case CONSTRAINT:
				{
				setState(2151);
				checkConstraint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GeneratedClauseContext extends ParserRuleContext {
		public TerminalNode GENERATED() { return getToken(DB2zSQLParser.GENERATED, 0); }
		public TerminalNode ALWAYS() { return getToken(DB2zSQLParser.ALWAYS, 0); }
		public AsIdentityClauseContext asIdentityClause() {
			return getRuleContext(AsIdentityClauseContext.class,0);
		}
		public AsRowChangeTimestampClauseContext asRowChangeTimestampClause() {
			return getRuleContext(AsRowChangeTimestampClauseContext.class,0);
		}
		public AsRowTransactionStartIDClauseContext asRowTransactionStartIDClause() {
			return getRuleContext(AsRowTransactionStartIDClauseContext.class,0);
		}
		public AsRowTransactionTimestampClauseContext asRowTransactionTimestampClause() {
			return getRuleContext(AsRowTransactionTimestampClauseContext.class,0);
		}
		public AsGeneratedExpressionClauseContext asGeneratedExpressionClause() {
			return getRuleContext(AsGeneratedExpressionClauseContext.class,0);
		}
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public TerminalNode DEFAULT() { return getToken(DB2zSQLParser.DEFAULT, 0); }
		public GeneratedClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generatedClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGeneratedClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGeneratedClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGeneratedClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GeneratedClauseContext generatedClause() throws RecognitionException {
		GeneratedClauseContext _localctx = new GeneratedClauseContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_generatedClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2173);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,227,_ctx) ) {
			case 1:
				{
				{
				setState(2154);
				match(GENERATED);
				setState(2158);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALWAYS:
					{
					setState(2155);
					match(ALWAYS);
					}
					break;
				case BY:
					{
					{
					setState(2156);
					match(BY);
					setState(2157);
					match(DEFAULT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2162);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AS:
					{
					setState(2160);
					asIdentityClause();
					}
					break;
				case FOR:
					{
					setState(2161);
					asRowChangeTimestampClause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case 2:
				{
				{
				setState(2164);
				match(GENERATED);
				setState(2166);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALWAYS) {
					{
					setState(2165);
					match(ALWAYS);
					}
				}

				setState(2171);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,226,_ctx) ) {
				case 1:
					{
					setState(2168);
					asRowTransactionStartIDClause();
					}
					break;
				case 2:
					{
					setState(2169);
					asRowTransactionTimestampClause();
					}
					break;
				case 3:
					{
					setState(2170);
					asGeneratedExpressionClause();
					}
					break;
				}
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AsIdentityClauseContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode IDENTITY() { return getToken(DB2zSQLParser.IDENTITY, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<AsIdentityClauseOptionListContext> asIdentityClauseOptionList() {
			return getRuleContexts(AsIdentityClauseOptionListContext.class);
		}
		public AsIdentityClauseOptionListContext asIdentityClauseOptionList(int i) {
			return getRuleContext(AsIdentityClauseOptionListContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public AsIdentityClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asIdentityClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAsIdentityClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAsIdentityClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAsIdentityClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AsIdentityClauseContext asIdentityClause() throws RecognitionException {
		AsIdentityClauseContext _localctx = new AsIdentityClauseContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_asIdentityClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2175);
			match(AS);
			setState(2176);
			match(IDENTITY);
			setState(2177);
			match(LPAREN);
			setState(2178);
			asIdentityClauseOptionList();
			setState(2185);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA || _la==NO || _la==ORDER || ((((_la - 463)) & ~0x3f) == 0 && ((1L << (_la - 463)) & ((1L << (MAXVALUE - 463)) | (1L << (MINVALUE - 463)) | (1L << (CACHE - 463)) | (1L << (CYCLE - 463)) | (1L << (INCREMENT - 463)) | (1L << (START - 463)))) != 0)) {
				{
				{
				setState(2180);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2179);
					match(COMMA);
					}
				}

				setState(2182);
				asIdentityClauseOptionList();
				}
				}
				setState(2187);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2188);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AsIdentityClauseOptionListContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(DB2zSQLParser.START, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode INCREMENT() { return getToken(DB2zSQLParser.INCREMENT, 0); }
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public TerminalNode CYCLE() { return getToken(DB2zSQLParser.CYCLE, 0); }
		public TerminalNode ORDER() { return getToken(DB2zSQLParser.ORDER, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode MINVALUE() { return getToken(DB2zSQLParser.MINVALUE, 0); }
		public TerminalNode MAXVALUE() { return getToken(DB2zSQLParser.MAXVALUE, 0); }
		public TerminalNode CACHE() { return getToken(DB2zSQLParser.CACHE, 0); }
		public AsIdentityClauseOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asIdentityClauseOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAsIdentityClauseOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAsIdentityClauseOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAsIdentityClauseOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AsIdentityClauseOptionListContext asIdentityClauseOptionList() throws RecognitionException {
		AsIdentityClauseOptionListContext _localctx = new AsIdentityClauseOptionListContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_asIdentityClauseOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2222);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,235,_ctx) ) {
			case 1:
				{
				{
				setState(2190);
				match(START);
				setState(2191);
				match(WITH);
				setState(2192);
				match(INTEGERLITERAL);
				}
				}
				break;
			case 2:
				{
				{
				setState(2193);
				match(INCREMENT);
				setState(2194);
				match(BY);
				setState(2195);
				match(INTEGERLITERAL);
				}
				}
				break;
			case 3:
				{
				setState(2200);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NO:
					{
					{
					setState(2196);
					match(NO);
					setState(2197);
					match(MINVALUE);
					}
					}
					break;
				case MINVALUE:
					{
					{
					setState(2198);
					match(MINVALUE);
					setState(2199);
					match(INTEGERLITERAL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				{
				setState(2206);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NO:
					{
					{
					setState(2202);
					match(NO);
					setState(2203);
					match(MAXVALUE);
					}
					}
					break;
				case MAXVALUE:
					{
					{
					setState(2204);
					match(MAXVALUE);
					setState(2205);
					match(INTEGERLITERAL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 5:
				{
				{
				setState(2209);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(2208);
					match(NO);
					}
				}

				setState(2211);
				match(CYCLE);
				}
				}
				break;
			case 6:
				{
				setState(2216);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NO:
					{
					{
					setState(2212);
					match(NO);
					setState(2213);
					match(CACHE);
					}
					}
					break;
				case CACHE:
					{
					{
					setState(2214);
					match(CACHE);
					setState(2215);
					match(INTEGERLITERAL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 7:
				{
				{
				setState(2219);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(2218);
					match(NO);
					}
				}

				setState(2221);
				match(ORDER);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AsRowChangeTimestampClauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode EACH() { return getToken(DB2zSQLParser.EACH, 0); }
		public List<TerminalNode> ROW() { return getTokens(DB2zSQLParser.ROW); }
		public TerminalNode ROW(int i) {
			return getToken(DB2zSQLParser.ROW, i);
		}
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(DB2zSQLParser.UPDATE, 0); }
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode CHANGE() { return getToken(DB2zSQLParser.CHANGE, 0); }
		public TerminalNode TIMESTAMP() { return getToken(DB2zSQLParser.TIMESTAMP, 0); }
		public AsRowChangeTimestampClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asRowChangeTimestampClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAsRowChangeTimestampClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAsRowChangeTimestampClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAsRowChangeTimestampClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AsRowChangeTimestampClauseContext asRowChangeTimestampClause() throws RecognitionException {
		AsRowChangeTimestampClauseContext _localctx = new AsRowChangeTimestampClauseContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_asRowChangeTimestampClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2224);
			match(FOR);
			setState(2225);
			match(EACH);
			setState(2226);
			match(ROW);
			setState(2227);
			match(ON);
			setState(2228);
			match(UPDATE);
			setState(2229);
			match(AS);
			setState(2230);
			match(ROW);
			setState(2231);
			match(CHANGE);
			setState(2232);
			match(TIMESTAMP);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AsRowTransactionStartIDClauseContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode TRANSACTION() { return getToken(DB2zSQLParser.TRANSACTION, 0); }
		public TerminalNode START() { return getToken(DB2zSQLParser.START, 0); }
		public TerminalNode ID() { return getToken(DB2zSQLParser.ID, 0); }
		public AsRowTransactionStartIDClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asRowTransactionStartIDClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAsRowTransactionStartIDClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAsRowTransactionStartIDClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAsRowTransactionStartIDClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AsRowTransactionStartIDClauseContext asRowTransactionStartIDClause() throws RecognitionException {
		AsRowTransactionStartIDClauseContext _localctx = new AsRowTransactionStartIDClauseContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_asRowTransactionStartIDClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2234);
			match(AS);
			setState(2235);
			match(TRANSACTION);
			setState(2236);
			match(START);
			setState(2237);
			match(ID);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AsRowTransactionTimestampClauseContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode ROW() { return getToken(DB2zSQLParser.ROW, 0); }
		public TerminalNode BEGIN() { return getToken(DB2zSQLParser.BEGIN, 0); }
		public TerminalNode START() { return getToken(DB2zSQLParser.START, 0); }
		public TerminalNode END() { return getToken(DB2zSQLParser.END, 0); }
		public AsRowTransactionTimestampClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asRowTransactionTimestampClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAsRowTransactionTimestampClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAsRowTransactionTimestampClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAsRowTransactionTimestampClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AsRowTransactionTimestampClauseContext asRowTransactionTimestampClause() throws RecognitionException {
		AsRowTransactionTimestampClauseContext _localctx = new AsRowTransactionTimestampClauseContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_asRowTransactionTimestampClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2239);
			match(AS);
			setState(2240);
			match(ROW);
			setState(2241);
			_la = _input.LA(1);
			if ( !(_la==BEGIN || _la==END || _la==START) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AsGeneratedExpressionClauseContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public NonDeterministicExpressionContext nonDeterministicExpression() {
			return getRuleContext(NonDeterministicExpressionContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public AsGeneratedExpressionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asGeneratedExpressionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAsGeneratedExpressionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAsGeneratedExpressionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAsGeneratedExpressionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AsGeneratedExpressionClauseContext asGeneratedExpressionClause() throws RecognitionException {
		AsGeneratedExpressionClauseContext _localctx = new AsGeneratedExpressionClauseContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_asGeneratedExpressionClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2243);
			match(AS);
			setState(2244);
			match(LPAREN);
			setState(2245);
			nonDeterministicExpression();
			setState(2246);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NonDeterministicExpressionContext extends ParserRuleContext {
		public SpecialRegisterContext specialRegister() {
			return getRuleContext(SpecialRegisterContext.class,0);
		}
		public NonDeterministicExpressionSessionVariableContext nonDeterministicExpressionSessionVariable() {
			return getRuleContext(NonDeterministicExpressionSessionVariableContext.class,0);
		}
		public TerminalNode DATA() { return getToken(DB2zSQLParser.DATA, 0); }
		public TerminalNode CHANGE() { return getToken(DB2zSQLParser.CHANGE, 0); }
		public TerminalNode OPERATION() { return getToken(DB2zSQLParser.OPERATION, 0); }
		public NonDeterministicExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonDeterministicExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterNonDeterministicExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitNonDeterministicExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitNonDeterministicExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NonDeterministicExpressionContext nonDeterministicExpression() throws RecognitionException {
		NonDeterministicExpressionContext _localctx = new NonDeterministicExpressionContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_nonDeterministicExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2253);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATA:
				{
				{
				setState(2248);
				match(DATA);
				setState(2249);
				match(CHANGE);
				setState(2250);
				match(OPERATION);
				}
				}
				break;
			case CURRENT_ACCELERATOR:
			case CURRENT_APPLICATION_COMPATIBILITY:
			case CURRENT_APPLICATION_ENCODING_SCHEME:
			case CURRENT_CLIENT_ACCTNG:
			case CURRENT_CLIENT_APPLNAME:
			case CURRENT_CLIENT_CORR_TOKEN:
			case CURRENT_CLIENT_USERID:
			case CURRENT_CLIENT_WRKSTNNAME:
			case CURRENT_DATE:
			case CURRENT_DEBUG_MODE:
			case CURRENT_DECFLOAT_ROUNDING_MODE:
			case CURRENT_DEGREE:
			case CURRENT_EXPLAIN_MODE:
			case CURRENT_GET_ACCEL_ARCHIVE:
			case CURRENT_LOCALE_LC_CTYPE:
			case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
			case CURRENT_MEMBER:
			case CURRENT_OPTIMIZATION_HINT:
			case CURRENT_PACKAGE_PATH:
			case CURRENT_PACKAGESET:
			case CURRENT_PATH:
			case CURRENT_PRECISION:
			case CURRENT_QUERY_ACCELERATION:
			case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
			case CURRENT_REFRESH_AGE:
			case CURRENT_ROUTINE_VERSION:
			case CURRENT_RULES:
			case CURRENT_SCHEMA:
			case CURRENT_SERVER:
			case CURRENT_SQLID:
			case CURRENT_TEMPORAL_BUSINESS_TIME:
			case CURRENT_TEMPORAL_SYSTEM_TIME:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_TIME_ZONE:
			case ENCRYPTION_PASSWORD:
			case SESSION_TIME_ZONE:
			case SESSION_USER:
			case USER:
				{
				setState(2251);
				specialRegister();
				}
				break;
			case SYSIBM:
				{
				setState(2252);
				nonDeterministicExpressionSessionVariable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NonDeterministicExpressionSessionVariableContext extends ParserRuleContext {
		public TerminalNode SYSIBM() { return getToken(DB2zSQLParser.SYSIBM, 0); }
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public TerminalNode PACKAGE_NAME() { return getToken(DB2zSQLParser.PACKAGE_NAME, 0); }
		public TerminalNode PACKAGE_SCHEMA() { return getToken(DB2zSQLParser.PACKAGE_SCHEMA, 0); }
		public TerminalNode PACKAGE_VERSION() { return getToken(DB2zSQLParser.PACKAGE_VERSION, 0); }
		public NonDeterministicExpressionSessionVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonDeterministicExpressionSessionVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterNonDeterministicExpressionSessionVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitNonDeterministicExpressionSessionVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitNonDeterministicExpressionSessionVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NonDeterministicExpressionSessionVariableContext nonDeterministicExpressionSessionVariable() throws RecognitionException {
		NonDeterministicExpressionSessionVariableContext _localctx = new NonDeterministicExpressionSessionVariableContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_nonDeterministicExpressionSessionVariable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2264);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,237,_ctx) ) {
			case 1:
				{
				{
				setState(2255);
				match(SYSIBM);
				setState(2256);
				match(DOT);
				setState(2257);
				match(PACKAGE_NAME);
				}
				}
				break;
			case 2:
				{
				{
				setState(2258);
				match(SYSIBM);
				setState(2259);
				match(DOT);
				setState(2260);
				match(PACKAGE_SCHEMA);
				}
				}
				break;
			case 3:
				{
				{
				setState(2261);
				match(SYSIBM);
				setState(2262);
				match(DOT);
				setState(2263);
				match(PACKAGE_VERSION);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnAlterationContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public List<ColumnAlterationOptionListContext> columnAlterationOptionList() {
			return getRuleContexts(ColumnAlterationOptionListContext.class);
		}
		public ColumnAlterationOptionListContext columnAlterationOptionList(int i) {
			return getRuleContext(ColumnAlterationOptionListContext.class,i);
		}
		public ColumnAlterationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnAlteration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterColumnAlteration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitColumnAlteration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitColumnAlteration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnAlterationContext columnAlteration() throws RecognitionException {
		ColumnAlterationContext _localctx = new ColumnAlterationContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_columnAlteration);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2266);
			columnName();
			setState(2268); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2267);
					columnAlterationOptionList();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2270); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,238,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnAlterationOptionListContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public TerminalNode DATA() { return getToken(DB2zSQLParser.DATA, 0); }
		public TerminalNode TYPE() { return getToken(DB2zSQLParser.TYPE, 0); }
		public AlteredDataTypeContext alteredDataType() {
			return getRuleContext(AlteredDataTypeContext.class,0);
		}
		public DefaultClauseContext defaultClause() {
			return getRuleContext(DefaultClauseContext.class,0);
		}
		public TerminalNode INLINE() { return getToken(DB2zSQLParser.INLINE, 0); }
		public TerminalNode LENGTH() { return getToken(DB2zSQLParser.LENGTH, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode GENERATED() { return getToken(DB2zSQLParser.GENERATED, 0); }
		public IdentityAlterationContext identityAlteration() {
			return getRuleContext(IdentityAlterationContext.class,0);
		}
		public TerminalNode DROP() { return getToken(DB2zSQLParser.DROP, 0); }
		public TerminalNode DEFAULT() { return getToken(DB2zSQLParser.DEFAULT, 0); }
		public TerminalNode ALWAYS() { return getToken(DB2zSQLParser.ALWAYS, 0); }
		public AsRowTransactionTimestampClauseContext asRowTransactionTimestampClause() {
			return getRuleContext(AsRowTransactionTimestampClauseContext.class,0);
		}
		public AsRowTransactionStartIDClauseContext asRowTransactionStartIDClause() {
			return getRuleContext(AsRowTransactionStartIDClauseContext.class,0);
		}
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public ColumnAlterationOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnAlterationOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterColumnAlterationOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitColumnAlterationOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitColumnAlterationOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnAlterationOptionListContext columnAlterationOptionList() throws RecognitionException {
		ColumnAlterationOptionListContext _localctx = new ColumnAlterationOptionListContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_columnAlterationOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2309);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,244,_ctx) ) {
			case 1:
				{
				{
				setState(2272);
				match(SET);
				setState(2273);
				match(DATA);
				setState(2274);
				match(TYPE);
				setState(2275);
				alteredDataType();
				setState(2279);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INLINE) {
					{
					setState(2276);
					match(INLINE);
					setState(2277);
					match(LENGTH);
					setState(2278);
					match(INTEGERLITERAL);
					}
				}

				}
				}
				break;
			case 2:
				{
				{
				setState(2281);
				match(SET);
				setState(2282);
				defaultClause();
				}
				}
				break;
			case 3:
				{
				{
				setState(2283);
				match(SET);
				setState(2284);
				match(INLINE);
				setState(2285);
				match(LENGTH);
				setState(2286);
				match(INTEGERLITERAL);
				}
				}
				break;
			case 4:
				{
				{
				setState(2287);
				match(SET);
				setState(2288);
				match(GENERATED);
				setState(2292);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALWAYS:
					{
					setState(2289);
					match(ALWAYS);
					}
					break;
				case BY:
					{
					{
					setState(2290);
					match(BY);
					setState(2291);
					match(DEFAULT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2295);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,241,_ctx) ) {
				case 1:
					{
					setState(2294);
					identityAlteration();
					}
					break;
				}
				}
				}
				break;
			case 5:
				{
				{
				setState(2297);
				identityAlteration();
				}
				}
				break;
			case 6:
				{
				{
				setState(2298);
				match(SET);
				setState(2299);
				match(GENERATED);
				setState(2301);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALWAYS) {
					{
					setState(2300);
					match(ALWAYS);
					}
				}

				setState(2305);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,243,_ctx) ) {
				case 1:
					{
					setState(2303);
					asRowTransactionTimestampClause();
					}
					break;
				case 2:
					{
					setState(2304);
					asRowTransactionStartIDClause();
					}
					break;
				}
				}
				}
				break;
			case 7:
				{
				{
				setState(2307);
				match(DROP);
				setState(2308);
				match(DEFAULT);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlteredDataTypeContext extends ParserRuleContext {
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public AlteredDataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alteredDataType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlteredDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlteredDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlteredDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlteredDataTypeContext alteredDataType() throws RecognitionException {
		AlteredDataTypeContext _localctx = new AlteredDataTypeContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_alteredDataType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2311);
			dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeContext extends ParserRuleContext {
		public BuiltInTypeContext builtInType() {
			return getRuleContext(BuiltInTypeContext.class,0);
		}
		public DistinctTypeNameContext distinctTypeName() {
			return getRuleContext(DistinctTypeNameContext.class,0);
		}
		public DataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeContext dataType() throws RecognitionException {
		DataTypeContext _localctx = new DataTypeContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_dataType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2315);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,245,_ctx) ) {
			case 1:
				{
				setState(2313);
				builtInType();
				}
				break;
			case 2:
				{
				setState(2314);
				distinctTypeName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BuiltInTypeContext extends ParserRuleContext {
		public TerminalNode SMALLINT() { return getToken(DB2zSQLParser.SMALLINT, 0); }
		public TerminalNode INTEGER() { return getToken(DB2zSQLParser.INTEGER, 0); }
		public TerminalNode INT() { return getToken(DB2zSQLParser.INT, 0); }
		public TerminalNode BIGINT() { return getToken(DB2zSQLParser.BIGINT, 0); }
		public TerminalNode REAL() { return getToken(DB2zSQLParser.REAL, 0); }
		public TerminalNode DATE() { return getToken(DB2zSQLParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(DB2zSQLParser.TIME, 0); }
		public TerminalNode ROWID() { return getToken(DB2zSQLParser.ROWID, 0); }
		public TerminalNode XML() { return getToken(DB2zSQLParser.XML, 0); }
		public TerminalNode DECFLOAT() { return getToken(DB2zSQLParser.DECFLOAT, 0); }
		public TerminalNode FLOAT() { return getToken(DB2zSQLParser.FLOAT, 0); }
		public TerminalNode DOUBLE() { return getToken(DB2zSQLParser.DOUBLE, 0); }
		public TerminalNode BINARY() { return getToken(DB2zSQLParser.BINARY, 0); }
		public TerminalNode TIMESTAMP() { return getToken(DB2zSQLParser.TIMESTAMP, 0); }
		public TerminalNode DECIMAL() { return getToken(DB2zSQLParser.DECIMAL, 0); }
		public TerminalNode DEC() { return getToken(DB2zSQLParser.DEC, 0); }
		public TerminalNode NUMERIC() { return getToken(DB2zSQLParser.NUMERIC, 0); }
		public TerminalNode GRAPHIC() { return getToken(DB2zSQLParser.GRAPHIC, 0); }
		public TerminalNode VARGRAPHIC() { return getToken(DB2zSQLParser.VARGRAPHIC, 0); }
		public TerminalNode DBCLOB() { return getToken(DB2zSQLParser.DBCLOB, 0); }
		public IntegerInParensContext integerInParens() {
			return getRuleContext(IntegerInParensContext.class,0);
		}
		public TerminalNode VARCHAR() { return getToken(DB2zSQLParser.VARCHAR, 0); }
		public TerminalNode CLOB() { return getToken(DB2zSQLParser.CLOB, 0); }
		public TerminalNode VARBINARY() { return getToken(DB2zSQLParser.VARBINARY, 0); }
		public TerminalNode BLOB() { return getToken(DB2zSQLParser.BLOB, 0); }
		public TerminalNode ZONE() { return getToken(DB2zSQLParser.ZONE, 0); }
		public TerminalNode PRECISION() { return getToken(DB2zSQLParser.PRECISION, 0); }
		public LengthContext length() {
			return getRuleContext(LengthContext.class,0);
		}
		public ForDataQualifierContext forDataQualifier() {
			return getRuleContext(ForDataQualifierContext.class,0);
		}
		public TerminalNode CCSID() { return getToken(DB2zSQLParser.CCSID, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode WITHOUT() { return getToken(DB2zSQLParser.WITHOUT, 0); }
		public TerminalNode LARGE() { return getToken(DB2zSQLParser.LARGE, 0); }
		public TerminalNode OBJECT() { return getToken(DB2zSQLParser.OBJECT, 0); }
		public TerminalNode CHARACTER() { return getToken(DB2zSQLParser.CHARACTER, 0); }
		public TerminalNode CHAR() { return getToken(DB2zSQLParser.CHAR, 0); }
		public TerminalNode SQLIDENTIFIER() { return getToken(DB2zSQLParser.SQLIDENTIFIER, 0); }
		public TerminalNode VARYING() { return getToken(DB2zSQLParser.VARYING, 0); }
		public BuiltInTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_builtInType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterBuiltInType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitBuiltInType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitBuiltInType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BuiltInTypeContext builtInType() throws RecognitionException {
		BuiltInTypeContext _localctx = new BuiltInTypeContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_builtInType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2429);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,266,_ctx) ) {
			case 1:
				{
				setState(2317);
				match(SMALLINT);
				}
				break;
			case 2:
				{
				setState(2318);
				match(INTEGER);
				}
				break;
			case 3:
				{
				setState(2319);
				match(INT);
				}
				break;
			case 4:
				{
				setState(2320);
				match(BIGINT);
				}
				break;
			case 5:
				{
				{
				setState(2321);
				_la = _input.LA(1);
				if ( !(_la==NUMERIC || _la==DEC || _la==DECIMAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2325);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,246,_ctx) ) {
				case 1:
					{
					setState(2322);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(2323);
					match(LPAREN);
					setState(2324);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 6:
				{
				{
				setState(2327);
				match(DECFLOAT);
				setState(2331);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,247,_ctx) ) {
				case 1:
					{
					setState(2328);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(2329);
					match(LPAREN);
					setState(2330);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 7:
				{
				{
				setState(2333);
				match(FLOAT);
				setState(2337);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,248,_ctx) ) {
				case 1:
					{
					setState(2334);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(2335);
					match(LPAREN);
					setState(2336);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 8:
				{
				setState(2339);
				match(REAL);
				}
				break;
			case 9:
				{
				{
				setState(2340);
				match(DOUBLE);
				setState(2342);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,249,_ctx) ) {
				case 1:
					{
					setState(2341);
					match(PRECISION);
					}
					break;
				}
				}
				}
				break;
			case 10:
				{
				{
				setState(2349);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHAR:
				case CHARACTER:
					{
					{
					setState(2344);
					_la = _input.LA(1);
					if ( !(_la==CHAR || _la==CHARACTER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(2346);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,250,_ctx) ) {
					case 1:
						{
						setState(2345);
						match(VARYING);
						}
						break;
					}
					}
					}
					break;
				case VARCHAR:
					{
					setState(2348);
					match(VARCHAR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2354);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,252,_ctx) ) {
				case 1:
					{
					setState(2351);
					length();
					}
					break;
				case 2:
					{
					{
					setState(2352);
					match(LPAREN);
					setState(2353);
					match(RPAREN);
					}
					}
					break;
				}
				setState(2359);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,253,_ctx) ) {
				case 1:
					{
					setState(2356);
					forDataQualifier();
					}
					break;
				case 2:
					{
					{
					setState(2357);
					match(CCSID);
					setState(2358);
					match(INTEGERLITERAL);
					}
					}
					break;
				}
				}
				}
				break;
			case 11:
				{
				{
				setState(2365);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHAR:
				case CHARACTER:
					{
					{
					setState(2361);
					_la = _input.LA(1);
					if ( !(_la==CHAR || _la==CHARACTER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(2362);
					match(LARGE);
					setState(2363);
					match(OBJECT);
					}
					}
					break;
				case CLOB:
					{
					setState(2364);
					match(CLOB);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2370);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,255,_ctx) ) {
				case 1:
					{
					setState(2367);
					length();
					}
					break;
				case 2:
					{
					{
					setState(2368);
					match(LPAREN);
					setState(2369);
					match(RPAREN);
					}
					}
					break;
				}
				setState(2375);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,256,_ctx) ) {
				case 1:
					{
					setState(2372);
					forDataQualifier();
					}
					break;
				case 2:
					{
					{
					setState(2373);
					match(CCSID);
					setState(2374);
					match(INTEGERLITERAL);
					}
					}
					break;
				}
				}
				}
				break;
			case 12:
				{
				{
				setState(2377);
				_la = _input.LA(1);
				if ( !(_la==DBCLOB || _la==GRAPHIC || _la==VARGRAPHIC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2381);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,257,_ctx) ) {
				case 1:
					{
					setState(2378);
					length();
					}
					break;
				case 2:
					{
					{
					setState(2379);
					match(LPAREN);
					setState(2380);
					match(RPAREN);
					}
					}
					break;
				}
				setState(2385);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,258,_ctx) ) {
				case 1:
					{
					setState(2383);
					match(CCSID);
					setState(2384);
					match(INTEGERLITERAL);
					}
					break;
				}
				}
				}
				break;
			case 13:
				{
				{
				setState(2387);
				match(BINARY);
				setState(2391);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,259,_ctx) ) {
				case 1:
					{
					setState(2388);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(2389);
					match(LPAREN);
					setState(2390);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 14:
				{
				{
				setState(2398);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
					{
					{
					setState(2393);
					match(BINARY);
					setState(2395);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,260,_ctx) ) {
					case 1:
						{
						setState(2394);
						match(VARYING);
						}
						break;
					}
					}
					}
					break;
				case VARBINARY:
					{
					setState(2397);
					match(VARBINARY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2403);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,262,_ctx) ) {
				case 1:
					{
					setState(2400);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(2401);
					match(LPAREN);
					setState(2402);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 15:
				{
				{
				setState(2409);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
					{
					{
					setState(2405);
					match(BINARY);
					setState(2406);
					match(LARGE);
					setState(2407);
					match(OBJECT);
					}
					}
					break;
				case BLOB:
					{
					setState(2408);
					match(BLOB);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2416);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,264,_ctx) ) {
				case 1:
					{
					setState(2411);
					match(LPAREN);
					{
					setState(2412);
					match(INTEGERLITERAL);
					setState(2413);
					match(SQLIDENTIFIER);
					}
					setState(2415);
					match(RPAREN);
					}
					break;
				}
				}
				}
				break;
			case 16:
				{
				setState(2418);
				match(DATE);
				}
				break;
			case 17:
				{
				setState(2419);
				match(TIME);
				}
				break;
			case 18:
				{
				{
				setState(2420);
				match(TIMESTAMP);
				setState(2422);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(2421);
					integerInParens();
					}
				}

				{
				setState(2424);
				_la = _input.LA(1);
				if ( !(_la==WITH || _la==WITHOUT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2425);
				match(TIME);
				setState(2426);
				match(ZONE);
				}
				}
				}
				break;
			case 19:
				{
				setState(2427);
				match(ROWID);
				}
				break;
			case 20:
				{
				setState(2428);
				match(XML);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentityAlterationContext extends ParserRuleContext {
		public TerminalNode RESTART() { return getToken(DB2zSQLParser.RESTART, 0); }
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public TerminalNode INCREMENT() { return getToken(DB2zSQLParser.INCREMENT, 0); }
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode CYCLE() { return getToken(DB2zSQLParser.CYCLE, 0); }
		public TerminalNode ORDER() { return getToken(DB2zSQLParser.ORDER, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode MINVALUE() { return getToken(DB2zSQLParser.MINVALUE, 0); }
		public TerminalNode MAXVALUE() { return getToken(DB2zSQLParser.MAXVALUE, 0); }
		public TerminalNode CACHE() { return getToken(DB2zSQLParser.CACHE, 0); }
		public IdentityAlterationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identityAlteration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterIdentityAlteration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitIdentityAlteration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitIdentityAlteration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentityAlterationContext identityAlteration() throws RecognitionException {
		IdentityAlterationContext _localctx = new IdentityAlterationContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_identityAlteration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2471);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,273,_ctx) ) {
			case 1:
				{
				{
				setState(2431);
				match(RESTART);
				setState(2434);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(2432);
					match(WITH);
					setState(2433);
					match(INTEGERLITERAL);
					}
				}

				}
				}
				break;
			case 2:
				{
				{
				setState(2436);
				match(SET);
				setState(2437);
				match(INCREMENT);
				setState(2438);
				match(BY);
				setState(2439);
				match(INTEGERLITERAL);
				}
				}
				break;
			case 3:
				{
				{
				setState(2440);
				match(SET);
				setState(2445);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NO:
					{
					{
					setState(2441);
					match(NO);
					setState(2442);
					match(MINVALUE);
					}
					}
					break;
				case MINVALUE:
					{
					{
					setState(2443);
					match(MINVALUE);
					setState(2444);
					match(INTEGERLITERAL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case 4:
				{
				{
				setState(2447);
				match(SET);
				setState(2452);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NO:
					{
					{
					setState(2448);
					match(NO);
					setState(2449);
					match(MAXVALUE);
					}
					}
					break;
				case MAXVALUE:
					{
					{
					setState(2450);
					match(MAXVALUE);
					setState(2451);
					match(INTEGERLITERAL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case 5:
				{
				{
				setState(2454);
				match(SET);
				setState(2456);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(2455);
					match(NO);
					}
				}

				setState(2458);
				match(CYCLE);
				}
				}
				break;
			case 6:
				{
				{
				setState(2459);
				match(SET);
				setState(2464);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NO:
					{
					{
					setState(2460);
					match(NO);
					setState(2461);
					match(CACHE);
					}
					}
					break;
				case CACHE:
					{
					{
					setState(2462);
					match(CACHE);
					setState(2463);
					match(INTEGERLITERAL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case 7:
				{
				{
				setState(2466);
				match(SET);
				setState(2468);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(2467);
					match(NO);
					}
				}

				setState(2470);
				match(ORDER);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UniqueConstraintContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode UNIQUE() { return getToken(DB2zSQLParser.UNIQUE, 0); }
		public TerminalNode CONSTRAINT() { return getToken(DB2zSQLParser.CONSTRAINT, 0); }
		public ConstraintNameContext constraintName() {
			return getRuleContext(ConstraintNameContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public TerminalNode BUSINESS_TIME() { return getToken(DB2zSQLParser.BUSINESS_TIME, 0); }
		public TerminalNode WITHOUT() { return getToken(DB2zSQLParser.WITHOUT, 0); }
		public TerminalNode OVERLAPS() { return getToken(DB2zSQLParser.OVERLAPS, 0); }
		public TerminalNode PRIMARY() { return getToken(DB2zSQLParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(DB2zSQLParser.KEY, 0); }
		public UniqueConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uniqueConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterUniqueConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitUniqueConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitUniqueConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UniqueConstraintContext uniqueConstraint() throws RecognitionException {
		UniqueConstraintContext _localctx = new UniqueConstraintContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_uniqueConstraint);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2475);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(2473);
				match(CONSTRAINT);
				setState(2474);
				constraintName();
				}
			}

			setState(2480);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PRIMARY:
				{
				{
				setState(2477);
				match(PRIMARY);
				setState(2478);
				match(KEY);
				}
				}
				break;
			case UNIQUE:
				{
				setState(2479);
				match(UNIQUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2482);
			match(LPAREN);
			setState(2483);
			columnName();
			setState(2488);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,276,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2484);
					match(COMMA);
					setState(2485);
					columnName();
					}
					} 
				}
				setState(2490);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,276,_ctx);
			}
			setState(2495);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(2491);
				match(COMMA);
				setState(2492);
				match(BUSINESS_TIME);
				setState(2493);
				match(WITHOUT);
				setState(2494);
				match(OVERLAPS);
				}
			}

			setState(2497);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferentialConstraintContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public ReferencesClauseContext referencesClause() {
			return getRuleContext(ReferencesClauseContext.class,0);
		}
		public List<TerminalNode> PERIOD() { return getTokens(DB2zSQLParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(DB2zSQLParser.PERIOD, i);
		}
		public List<TerminalNode> BUSINESS() { return getTokens(DB2zSQLParser.BUSINESS); }
		public TerminalNode BUSINESS(int i) {
			return getToken(DB2zSQLParser.BUSINESS, i);
		}
		public List<TerminalNode> TIME() { return getTokens(DB2zSQLParser.TIME); }
		public TerminalNode TIME(int i) {
			return getToken(DB2zSQLParser.TIME, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public TerminalNode CONSTRAINT() { return getToken(DB2zSQLParser.CONSTRAINT, 0); }
		public ConstraintNameContext constraintName() {
			return getRuleContext(ConstraintNameContext.class,0);
		}
		public TerminalNode FOREIGN() { return getToken(DB2zSQLParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(DB2zSQLParser.KEY, 0); }
		public ReferentialConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referentialConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterReferentialConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitReferentialConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitReferentialConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReferentialConstraintContext referentialConstraint() throws RecognitionException {
		ReferentialConstraintContext _localctx = new ReferentialConstraintContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_referentialConstraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2509);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CONSTRAINT:
				{
				{
				setState(2499);
				match(CONSTRAINT);
				setState(2500);
				constraintName();
				setState(2501);
				match(FOREIGN);
				setState(2502);
				match(KEY);
				}
				}
				break;
			case FOREIGN:
				{
				{
				setState(2504);
				match(FOREIGN);
				setState(2505);
				match(KEY);
				setState(2507);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 29)) & ~0x3f) == 0 && ((1L << (_la - 29)) & ((1L << (ADD - 29)) | (1L << (AFTER - 29)) | (1L << (ALL - 29)) | (1L << (ALLOCATE - 29)) | (1L << (ALLOW - 29)) | (1L << (ALTER - 29)) | (1L << (ALTERAND - 29)) | (1L << (ANY - 29)) | (1L << (ARRAY - 29)) | (1L << (ARRAY_EXISTS - 29)) | (1L << (AS - 29)) | (1L << (ASENSITIVE - 29)) | (1L << (ASSOCIATE - 29)) | (1L << (ASUTIME - 29)) | (1L << (AT - 29)) | (1L << (AUDIT - 29)) | (1L << (AUX - 29)) | (1L << (AUXILIARY - 29)) | (1L << (BEFORE - 29)) | (1L << (BEGIN - 29)) | (1L << (BETWEEN - 29)) | (1L << (BUFFERPOOL - 29)) | (1L << (BY - 29)) | (1L << (CALL - 29)) | (1L << (CAPTURE - 29)) | (1L << (CASCADED - 29)) | (1L << (CASE - 29)) | (1L << (CAST - 29)) | (1L << (CCSID - 29)) | (1L << (CHAR - 29)) | (1L << (CHARACTER - 29)) | (1L << (CHECK - 29)) | (1L << (CLONE - 29)) | (1L << (CLOSE - 29)) | (1L << (CLUSTER - 29)) | (1L << (COLLECTION - 29)) | (1L << (COLLID - 29)) | (1L << (COLUMN - 29)) | (1L << (COMMENT - 29)) | (1L << (COMMIT - 29)) | (1L << (CONCAT - 29)) | (1L << (CONDITION - 29)) | (1L << (CONNECT - 29)) | (1L << (CONNECTION - 29)) | (1L << (CONSTRAINT - 29)) | (1L << (CONTAINS - 29)) | (1L << (CONTENT - 29)) | (1L << (CONTINUE - 29)) | (1L << (CREATE - 29)) | (1L << (CUBE - 29)) | (1L << (CURRENT - 29)) | (1L << (CURRENT_LC_CTYPE - 29)) | (1L << (CURRVAL - 29)) | (1L << (CURSOR - 29)) | (1L << (DATA - 29)) | (1L << (DATABASE - 29)) | (1L << (DAY - 29)) | (1L << (DAYS - 29)) | (1L << (DBINFO - 29)) | (1L << (DECLARE - 29)) | (1L << (DEFAULT - 29)) | (1L << (DELETE - 29)) | (1L << (DESCRIPTOR - 29)) | (1L << (DETERMINISTIC - 29)))) != 0) || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (DISABLE - 93)) | (1L << (DISALLOW - 93)) | (1L << (DISTINCT - 93)) | (1L << (DO - 93)) | (1L << (DOCUMENT - 93)) | (1L << (DOUBLE - 93)) | (1L << (DROP - 93)) | (1L << (DSSIZE - 93)) | (1L << (DYNAMIC - 93)) | (1L << (EDITPROC - 93)) | (1L << (ELSE - 93)) | (1L << (ELSEIF - 93)) | (1L << (ENCODING - 93)) | (1L << (ENCRYPTION - 93)) | (1L << (END - 93)) | (1L << (END_EXEC - 93)) | (1L << (ENDING - 93)) | (1L << (ERASE - 93)) | (1L << (ESCAPE - 93)) | (1L << (EXCEPT - 93)) | (1L << (EXCEPTION - 93)) | (1L << (EXEC_SQL - 93)) | (1L << (EXECUTE - 93)) | (1L << (EXISTS - 93)) | (1L << (EXIT - 93)) | (1L << (EXPLAIN - 93)) | (1L << (EXTERNAL - 93)) | (1L << (FENCED - 93)) | (1L << (FETCH - 93)) | (1L << (FIELDPROC - 93)) | (1L << (FINAL - 93)) | (1L << (FIRST - 93)) | (1L << (FOR - 93)) | (1L << (FREE - 93)) | (1L << (FROM - 93)) | (1L << (FULL - 93)) | (1L << (FUNCTION - 93)) | (1L << (GENERATED - 93)) | (1L << (GET - 93)) | (1L << (GLOBAL - 93)) | (1L << (GO - 93)) | (1L << (GOTO - 93)) | (1L << (GRANT - 93)) | (1L << (GROUP - 93)) | (1L << (HANDLER - 93)) | (1L << (HAVING - 93)) | (1L << (HOLD - 93)) | (1L << (HOUR - 93)) | (1L << (HOURS - 93)) | (1L << (IF - 93)) | (1L << (IMMEDIATE - 93)) | (1L << (IN - 93)) | (1L << (INCLUSIVE - 93)) | (1L << (INDEX - 93)) | (1L << (INDEXBP - 93)) | (1L << (INHERIT - 93)) | (1L << (INNER - 93)) | (1L << (INOUT - 93)) | (1L << (INSENSITIVE - 93)) | (1L << (INSERT - 93)) | (1L << (INTERSECT - 93)) | (1L << (INTO - 93)) | (1L << (IS - 93)) | (1L << (ISOBID - 93)))) != 0) || ((((_la - 157)) & ~0x3f) == 0 && ((1L << (_la - 157)) & ((1L << (ITERATE - 157)) | (1L << (JAR - 157)) | (1L << (JOIN - 157)) | (1L << (KEEP - 157)) | (1L << (KEY - 157)) | (1L << (LABEL - 157)) | (1L << (LANGUAGE - 157)) | (1L << (LAST - 157)) | (1L << (LC_CTYPE - 157)) | (1L << (LEAVE - 157)) | (1L << (LEFT - 157)) | (1L << (LIKE - 157)) | (1L << (LIMIT - 157)) | (1L << (LOCAL - 157)) | (1L << (LOCALE - 157)) | (1L << (LOCATOR - 157)) | (1L << (LOCATORS - 157)) | (1L << (LOCK - 157)) | (1L << (LOCKMAX - 157)) | (1L << (LOCKSIZE - 157)) | (1L << (LONG - 157)) | (1L << (LOOP - 157)) | (1L << (MAINTAINED - 157)) | (1L << (MATERIALIZED - 157)) | (1L << (MICROSECOND - 157)) | (1L << (MICROSECONDS - 157)) | (1L << (MODIFIES - 157)) | (1L << (MONTH - 157)) | (1L << (MONTHS - 157)) | (1L << (NEXT - 157)) | (1L << (NEXTVAL - 157)) | (1L << (NO - 157)) | (1L << (NONE - 157)) | (1L << (NOT - 157)) | (1L << (NULL - 157)) | (1L << (NULLS - 157)) | (1L << (NUMPARTS - 157)) | (1L << (OBID - 157)) | (1L << (OF - 157)) | (1L << (OFFSET - 157)) | (1L << (OLD - 157)) | (1L << (ON - 157)) | (1L << (OPEN - 157)) | (1L << (OPTIMIZATION - 157)) | (1L << (OPTIMIZE - 157)) | (1L << (OR - 157)) | (1L << (ORDER - 157)) | (1L << (ORGANIZATION - 157)) | (1L << (OUT - 157)) | (1L << (OUTER - 157)) | (1L << (PACKAGE - 157)) | (1L << (PADDED - 157)) | (1L << (PARAMETER - 157)) | (1L << (PART - 157)) | (1L << (PARTITION - 157)) | (1L << (PARTITIONED - 157)) | (1L << (PARTITIONING - 157)) | (1L << (PATH - 157)) | (1L << (PERIOD - 157)) | (1L << (PIECESIZE - 157)) | (1L << (PLAN - 157)) | (1L << (PRECISION - 157)) | (1L << (PREPARE - 157)))) != 0) || ((((_la - 221)) & ~0x3f) == 0 && ((1L << (_la - 221)) & ((1L << (PREVVAL - 221)) | (1L << (PRIOR - 221)) | (1L << (PRIQTY - 221)) | (1L << (PRIVILEGES - 221)) | (1L << (PROCEDURE - 221)) | (1L << (PROGRAM - 221)) | (1L << (PSID - 221)) | (1L << (PUBLIC - 221)) | (1L << (QUERY - 221)) | (1L << (QUERYNO - 221)) | (1L << (READS - 221)) | (1L << (REFERENCES - 221)) | (1L << (REFRESH - 221)) | (1L << (RELEASE - 221)) | (1L << (RENAME - 221)) | (1L << (REPEAT - 221)) | (1L << (RESIGNAL - 221)) | (1L << (RESTRICT - 221)) | (1L << (RESULT - 221)) | (1L << (RESULT_SET_LOCATOR - 221)) | (1L << (RETURN - 221)) | (1L << (RETURNS - 221)) | (1L << (REVOKE - 221)) | (1L << (RIGHT - 221)) | (1L << (ROLE - 221)) | (1L << (ROLLBACK - 221)) | (1L << (ROLLUP - 221)) | (1L << (ROUND_CEILING - 221)) | (1L << (ROUND_DOWN - 221)) | (1L << (ROUND_FLOOR - 221)) | (1L << (ROUND_HALF_DOWN - 221)) | (1L << (ROUND_HALF_EVEN - 221)) | (1L << (ROUND_HALF_UP - 221)) | (1L << (ROUND_UP - 221)) | (1L << (ROW - 221)) | (1L << (ROWSET - 221)) | (1L << (RUN - 221)) | (1L << (SAVEPOINT - 221)) | (1L << (SCHEMA - 221)) | (1L << (SCRATCHPAD - 221)) | (1L << (SECOND - 221)) | (1L << (SECONDS - 221)) | (1L << (SECQTY - 221)) | (1L << (SECURITY - 221)) | (1L << (SELECT - 221)) | (1L << (SENSITIVE - 221)) | (1L << (SEQUENCE - 221)) | (1L << (SET - 221)) | (1L << (SIGNAL - 221)) | (1L << (SIMPLE - 221)) | (1L << (SOME - 221)) | (1L << (SOURCE - 221)) | (1L << (SPECIFIC - 221)) | (1L << (STANDARD - 221)) | (1L << (STATEMENT - 221)) | (1L << (STATIC - 221)) | (1L << (STAY - 221)) | (1L << (STOGROUP - 221)) | (1L << (STORES - 221)) | (1L << (STYLE - 221)) | (1L << (SUMMARY - 221)) | (1L << (SYNONYM - 221)) | (1L << (SYSDATE - 221)) | (1L << (SYSTEM - 221)))) != 0) || ((((_la - 285)) & ~0x3f) == 0 && ((1L << (_la - 285)) & ((1L << (SYSTIMESTAMP - 285)) | (1L << (TABLE - 285)) | (1L << (TABLESPACE - 285)) | (1L << (THEN - 285)) | (1L << (TO - 285)) | (1L << (TRIGGER - 285)) | (1L << (TRUNCATE - 285)) | (1L << (TYPE - 285)) | (1L << (UNDO - 285)) | (1L << (UNION - 285)) | (1L << (UNIQUE - 285)) | (1L << (UNTIL - 285)) | (1L << (UPDATE - 285)) | (1L << (USING - 285)) | (1L << (VALIDPROC - 285)) | (1L << (VALUE - 285)) | (1L << (VALUES - 285)) | (1L << (VARIABLE - 285)) | (1L << (VARIANT - 285)) | (1L << (VCAT - 285)) | (1L << (VERSIONING - 285)) | (1L << (VIEW - 285)) | (1L << (VOLATILE - 285)) | (1L << (VOLUMES - 285)) | (1L << (WHEN - 285)) | (1L << (WHENEVER - 285)) | (1L << (WHERE - 285)) | (1L << (WHILE - 285)) | (1L << (WITH - 285)) | (1L << (WLM - 285)) | (1L << (XMLCAST - 285)) | (1L << (XMLEXISTS - 285)) | (1L << (XMLNAMESPACES - 285)) | (1L << (YEAR - 285)) | (1L << (YEARS - 285)) | (1L << (ZONE - 285)) | (1L << (AND - 285)) | (1L << (ARRAY_AGG - 285)) | (1L << (ASC - 285)) | (1L << (AVG - 285)) | (1L << (BIT - 285)) | (1L << (CHANGE - 285)) | (1L << (CODEUNITS16 - 285)) | (1L << (CODEUNITS32 - 285)) | (1L << (CORR - 285)) | (1L << (CORRELATION - 285)) | (1L << (COUNT - 285)) | (1L << (COUNT_BIG - 285)) | (1L << (COVAR - 285)) | (1L << (COVARIANCE - 285)) | (1L << (COVARIANCE_SAMP - 285)) | (1L << (COVAR_POP - 285)) | (1L << (COVAR_SAMP - 285)) | (1L << (CS - 285)) | (1L << (CUME_DIST - 285)) | (1L << (DENSE_RANK - 285)) | (1L << (DESC - 285)) | (1L << (EBCDIC - 285)) | (1L << (EXCLUSIVE - 285)) | (1L << (FIRST_VALUE - 285)) | (1L << (FOLLOWING - 285)) | (1L << (GROUPING - 285)) | (1L << (IGNORE - 285)) | (1L << (INDICATOR - 285)))) != 0) || ((((_la - 349)) & ~0x3f) == 0 && ((1L << (_la - 349)) & ((1L << (INPUT - 349)) | (1L << (ISNULL - 349)) | (1L << (LAG - 349)) | (1L << (LARGE - 349)) | (1L << (LAST_VALUE - 349)) | (1L << (LEAD - 349)) | (1L << (LISTAGG - 349)) | (1L << (LOCKED - 349)) | (1L << (LOCKS - 349)) | (1L << (MEDIAN - 349)) | (1L << (MINUTES - 349)) | (1L << (MIXED - 349)) | (1L << (NOTNULL - 349)) | (1L << (NTH_VALUE - 349)) | (1L << (NTILE - 349)) | (1L << (NUMERIC - 349)) | (1L << (OBJECT - 349)) | (1L << (OCTETS - 349)) | (1L << (ONLY - 349)) | (1L << (OVER - 349)) | (1L << (PASSING - 349)) | (1L << (PERCENTILE_CONT - 349)) | (1L << (PERCENTILE_DISC - 349)) | (1L << (PERCENT_RANK - 349)) | (1L << (PRECEDING - 349)) | (1L << (PREVIOUS - 349)) | (1L << (RANGE - 349)) | (1L << (RANK - 349)) | (1L << (RATIO_TO_REPORT - 349)) | (1L << (READ - 349)) | (1L << (REF - 349)) | (1L << (REGR_AVGX - 349)) | (1L << (REGR_AVGY - 349)) | (1L << (REGR_COUNT - 349)) | (1L << (REGR_ICPT - 349)) | (1L << (REGR_INTERCEPT - 349)) | (1L << (REGR_R2 - 349)) | (1L << (REGR_SLOPE - 349)) | (1L << (REGR_SXX - 349)) | (1L << (REGR_SXY - 349)) | (1L << (REGR_SYY - 349)) | (1L << (RESPECT - 349)) | (1L << (ROW_NUMBER - 349)) | (1L << (ROWS - 349)) | (1L << (RR - 349)) | (1L << (RS - 349)) | (1L << (SBCS - 349)) | (1L << (SELECTIVITY - 349)) | (1L << (SETS - 349)) | (1L << (SHARE - 349)) | (1L << (SKIP_ - 349)) | (1L << (STDDEV - 349)) | (1L << (STDDEV_POP - 349)) | (1L << (STDDEV_SAMP - 349)) | (1L << (SUM - 349)) | (1L << (TOKEN - 349)) | (1L << (UNBOUNDED - 349)) | (1L << (UNPACK - 349)) | (1L << (UR - 349)) | (1L << (USE - 349)) | (1L << (VAR - 349)) | (1L << (VARIANCE - 349)) | (1L << (VARIANCE_SAMP - 349)) | (1L << (VAR_POP - 349)))) != 0) || ((((_la - 413)) & ~0x3f) == 0 && ((1L << (_la - 413)) & ((1L << (VAR_SAMP - 413)) | (1L << (VARYING - 413)) | (1L << (WITHOUT - 413)) | (1L << (XML - 413)) | (1L << (XMLAGG - 413)) | (1L << (COLUMNS - 413)) | (1L << (SQLID - 413)) | (1L << (ORDINALITY - 413)) | (1L << (SYSTEM_TIME - 413)) | (1L << (BUSINESS_TIME - 413)) | (1L << (MULTIPLIER - 413)) | (1L << (UNNEST - 413)) | (1L << (CROSS - 413)) | (1L << (CALLER - 413)) | (1L << (CLIENT - 413)) | (1L << (POSITIONING - 413)) | (1L << (SCROLL - 413)) | (1L << (ACTION - 413)) | (1L << (ASSEMBLE - 413)) | (1L << (C_ - 413)) | (1L << (CALLED - 413)) | (1L << (COBOL - 413)) | (1L << (DB2 - 413)) | (1L << (DEFINER - 413)) | (1L << (DISPATCH - 413)) | (1L << (ENVIRONMENT - 413)) | (1L << (FAILURE - 413)) | (1L << (FAILURES - 413)) | (1L << (JAVA - 413)) | (1L << (MAIN - 413)) | (1L << (NAME - 413)) | (1L << (OPTIONS - 413)) | (1L << (PARALLEL - 413)) | (1L << (PLI - 413)) | (1L << (REGISTERS - 413)) | (1L << (RESIDENT - 413)) | (1L << (SECURED - 413)) | (1L << (SPECIAL - 413)) | (1L << (SQL - 413)) | (1L << (STOP - 413)) | (1L << (SUB - 413)) | (1L << (YES - 413)) | (1L << (APPLICATION - 413)) | (1L << (CHANGED - 413)) | (1L << (COMPATIBILITY - 413)) | (1L << (COMPRESS - 413)) | (1L << (COPY - 413)) | (1L << (FREEPAGE - 413)) | (1L << (GBPCACHE - 413)) | (1L << (INCLUDE - 413)) | (1L << (MAXVALUE - 413)) | (1L << (MINVALUE - 413)) | (1L << (PCTFREE - 413)) | (1L << (REGENERATE - 413)) | (1L << (SEQTY - 413)) | (1L << (MASK - 413)) | (1L << (ENABLE - 413)) | (1L << (PERMISSION - 413)) | (1L << (ATOMIC - 413)) | (1L << (SQLEXCEPTION - 413)) | (1L << (MERGE - 413)) | (1L << (MATCHED - 413)) | (1L << (SQLSTATE - 413)) | (1L << (MESSAGE_TEXT - 413)))) != 0) || ((((_la - 477)) & ~0x3f) == 0 && ((1L << (_la - 477)) & ((1L << (OVERRIDING - 477)) | (1L << (PORTION - 477)) | (1L << (DB2SQL - 477)) | (1L << (DEBUG - 477)) | (1L << (GENERAL - 477)) | (1L << (MODE_ - 477)) | (1L << (REXX - 477)) | (1L << (CACHE - 477)) | (1L << (CYCLE - 477)) | (1L << (INCREMENT - 477)) | (1L << (RESTART - 477)) | (1L << (DATACLAS - 477)) | (1L << (MGMTCLAS - 477)) | (1L << (REMOVE - 477)) | (1L << (STORCLAS - 477)) | (1L << (ACCESS - 477)) | (1L << (ACTIVATE - 477)) | (1L << (ALWAYS - 477)) | (1L << (APPEND - 477)) | (1L << (ARCHIVE - 477)) | (1L << (BUSINESS - 477)) | (1L << (CASCADE - 477)) | (1L << (CHANGES - 477)) | (1L << (CONTROL - 477)) | (1L << (DEACTIVATE - 477)) | (1L << (DEFERRED - 477)) | (1L << (EACH - 477)) | (1L << (ENFORCED - 477)) | (1L << (EXTRA - 477)) | (1L << (FOREIGN - 477)) | (1L << (HIDDEN_ - 477)) | (1L << (HISTORY - 477)) | (1L << (ID - 477)) | (1L << (IDENTITY - 477)) | (1L << (IMPLICITLY - 477)) | (1L << (INITIALLY - 477)) | (1L << (INLINE - 477)) | (1L << (OPERATION - 477)) | (1L << (ORGANIZE - 477)) | (1L << (OVERLAPS - 477)) | (1L << (PACKAGE_NAME - 477)) | (1L << (PACKAGE_SCHEMA - 477)) | (1L << (PACKAGE_VERSION - 477)) | (1L << (PRIMARY - 477)) | (1L << (RESET - 477)) | (1L << (ROTATE - 477)) | (1L << (START - 477)) | (1L << (SYSIBM - 477)) | (1L << (TRANSACTION - 477)) | (1L << (ABS - 477)) | (1L << (ABSVAL - 477)) | (1L << (ACOS - 477)) | (1L << (ADD_DAYS - 477)) | (1L << (ADD_MONTHS - 477)) | (1L << (ARRAY_DELETE - 477)) | (1L << (ARRAY_FIRST - 477)) | (1L << (ARRAY_LAST - 477)) | (1L << (ARRAY_NEXT - 477)) | (1L << (ARRAY_PRIOR - 477)) | (1L << (ARRAY_TRIM - 477)) | (1L << (ASCII - 477)) | (1L << (ASCII_CHR - 477)) | (1L << (ASCIISTR - 477)) | (1L << (ASCII_STR - 477)))) != 0) || ((((_la - 541)) & ~0x3f) == 0 && ((1L << (_la - 541)) & ((1L << (ASIN - 541)) | (1L << (ATAN - 541)) | (1L << (ATAN2 - 541)) | (1L << (ATANH - 541)) | (1L << (BIGINT - 541)) | (1L << (BINARY - 541)) | (1L << (BITAND - 541)) | (1L << (BITANDNOT - 541)) | (1L << (BITNOT - 541)) | (1L << (BITOR - 541)) | (1L << (BITXOR - 541)) | (1L << (BLOB - 541)) | (1L << (BTRIM - 541)) | (1L << (CARDINALITY - 541)) | (1L << (CCSID_ENCODING - 541)) | (1L << (CEIL - 541)) | (1L << (CEILING - 541)) | (1L << (CHAR9 - 541)) | (1L << (CHARACTER_LENGTH - 541)) | (1L << (CHAR_LENGTH - 541)) | (1L << (CHR - 541)) | (1L << (CLOB - 541)) | (1L << (COALESCE - 541)) | (1L << (COLLATION_KEY - 541)) | (1L << (COMPARE_DECFLOAT - 541)) | (1L << (COS - 541)) | (1L << (COSH - 541)) | (1L << (DATE - 541)) | (1L << (DAYOFMONTH - 541)) | (1L << (DAYOFWEEK - 541)) | (1L << (DAYOFWEEK_ISO - 541)) | (1L << (DAYOFYEAR - 541)) | (1L << (DAYS_BETWEEN - 541)) | (1L << (DBCLOB - 541)) | (1L << (DEC - 541)) | (1L << (DECFLOAT - 541)) | (1L << (DECFLOAT_FORMAT - 541)) | (1L << (DECFLOAT_SORTKEY - 541)) | (1L << (DECIMAL - 541)) | (1L << (DECODE - 541)) | (1L << (DECRYPT_BINARY - 541)) | (1L << (DECRYPT_BIT - 541)) | (1L << (DECRYPT_CHAR - 541)) | (1L << (DECRYPT_DATAKEY_BIGINT - 541)) | (1L << (DECRYPT_DATAKEY_BIT - 541)) | (1L << (DECRYPT_DATAKEY_CLOB - 541)) | (1L << (DECRYPT_DATAKEY_DBCLOB - 541)) | (1L << (DECRYPT_DATAKEY_DECIMAL - 541)) | (1L << (DECRYPT_DATAKEY_INTEGER - 541)) | (1L << (DECRYPT_DATAKEY_VARCHAR - 541)) | (1L << (DECRYPT_DATAKEY_VARGRAPHIC - 541)) | (1L << (DECRYPT_DB - 541)) | (1L << (DEGREES - 541)) | (1L << (DIFFERENCE - 541)) | (1L << (DIGITS - 541)) | (1L << (DOUBLE_PRECISION - 541)) | (1L << (DSN_XMLVALIDATE - 541)) | (1L << (EBCDIC_CHR - 541)) | (1L << (EBCDIC_STR - 541)) | (1L << (ENCRYPT_DATAKEY - 541)) | (1L << (ENCRYPT_TDES - 541)) | (1L << (EXP - 541)) | (1L << (EXTRACT - 541)) | (1L << (FLOAT - 541)))) != 0) || ((((_la - 605)) & ~0x3f) == 0 && ((1L << (_la - 605)) & ((1L << (FLOOR - 605)) | (1L << (GENERATE_UNIQUE - 605)) | (1L << (GENERATE_UNIQUE_BINARY - 605)) | (1L << (GETHINT - 605)) | (1L << (GETVARIABLE - 605)) | (1L << (GRAPHIC - 605)) | (1L << (GREATEST - 605)) | (1L << (HASH - 605)) | (1L << (HASH_CRC32 - 605)) | (1L << (HASH_MD5 - 605)) | (1L << (HASH_SHA1 - 605)) | (1L << (HASH_SHA256 - 605)) | (1L << (HEX - 605)) | (1L << (IDENTITY_VAL_LOCAL - 605)) | (1L << (IFNULL - 605)) | (1L << (INSTR - 605)) | (1L << (INT - 605)) | (1L << (INTEGER - 605)) | (1L << (JULIAN_DAY - 605)) | (1L << (LAST_DAY - 605)) | (1L << (LCASE - 605)) | (1L << (LEAST - 605)) | (1L << (LENGTH - 605)) | (1L << (LN - 605)) | (1L << (LOCATE - 605)) | (1L << (LOCATE_IN_STRING - 605)) | (1L << (LOG10 - 605)) | (1L << (LOWER - 605)) | (1L << (LPAD - 605)) | (1L << (LTRIM - 605)) | (1L << (MAX - 605)) | (1L << (MAX_CARDINALITY - 605)) | (1L << (MIDNIGHT_SECONDS - 605)) | (1L << (MIN - 605)) | (1L << (MINUTE - 605)) | (1L << (MOD - 605)) | (1L << (MONTHS_BETWEEN - 605)) | (1L << (MQREAD - 605)) | (1L << (MQREADCLOB - 605)) | (1L << (MQRECEIVE - 605)) | (1L << (MQRECEIVECLOB - 605)) | (1L << (MQSEND - 605)) | (1L << (MULTIPLY_ALT - 605)) | (1L << (NEXT_DAY - 605)) | (1L << (NEXT_MONTH - 605)) | (1L << (NORMALIZE_DECFLOAT - 605)) | (1L << (NORMALIZE_STRING - 605)) | (1L << (NULLIF - 605)) | (1L << (NVL - 605)) | (1L << (OVERLAY - 605)) | (1L << (PACK - 605)) | (1L << (POSITION - 605)) | (1L << (POSSTR - 605)) | (1L << (POW - 605)) | (1L << (POWER - 605)) | (1L << (QUANTIZE - 605)) | (1L << (QUARTER - 605)) | (1L << (RADIANS - 605)) | (1L << (RAISE_ERROR - 605)) | (1L << (RAND - 605)) | (1L << (RANDOM - 605)) | (1L << (REAL - 605)) | (1L << (REGEXP_COUNT - 605)) | (1L << (REGEXP_INSTR - 605)))) != 0) || ((((_la - 669)) & ~0x3f) == 0 && ((1L << (_la - 669)) & ((1L << (REGEXP_LIKE - 669)) | (1L << (REGEXP_REPLACE - 669)) | (1L << (REGEXP_SUBSTR - 669)) | (1L << (REPLACE - 669)) | (1L << (RID - 669)) | (1L << (ROUND - 669)) | (1L << (ROUND_TIMESTAMP - 669)) | (1L << (ROWID - 669)) | (1L << (RPAD - 669)) | (1L << (RTRIM - 669)) | (1L << (SCORE - 669)) | (1L << (SIGN - 669)) | (1L << (SIN - 669)) | (1L << (SINH - 669)) | (1L << (SMALLINT - 669)) | (1L << (SOAPHTTPC - 669)) | (1L << (SOAPHTTPNC - 669)) | (1L << (SOAPHTTPNV - 669)) | (1L << (SOAPHTTPV - 669)) | (1L << (SOUNDEX - 669)) | (1L << (SPACE - 669)) | (1L << (SQRT - 669)) | (1L << (STRIP - 669)) | (1L << (STRLEFT - 669)) | (1L << (STRPOS - 669)) | (1L << (STRRIGHT - 669)) | (1L << (SUBSTR - 669)) | (1L << (SUBSTRING - 669)) | (1L << (TAN - 669)) | (1L << (TANH - 669)) | (1L << (TIME - 669)) | (1L << (TIMESTAMP - 669)) | (1L << (TIMESTAMPADD - 669)) | (1L << (TIMESTAMPDIFF - 669)) | (1L << (TIMESTAMP_FORMAT - 669)) | (1L << (TIMESTAMP_ISO - 669)) | (1L << (TIMESTAMP_TZ - 669)) | (1L << (TO_CHAR - 669)) | (1L << (TO_CLOB - 669)) | (1L << (TO_DATE - 669)) | (1L << (TO_NUMBER - 669)) | (1L << (TOTALORDER - 669)) | (1L << (TO_TIMESTAMP - 669)) | (1L << (TRANSLATE - 669)) | (1L << (TRIM - 669)) | (1L << (TRIM_ARRAY - 669)) | (1L << (TRUNC - 669)) | (1L << (TRUNC_TIMESTAMP - 669)) | (1L << (UCASE - 669)) | (1L << (UNICODE - 669)) | (1L << (UNICODE_STR - 669)) | (1L << (UNISTR - 669)) | (1L << (UPPER - 669)) | (1L << (VARBINARY - 669)) | (1L << (VARCHAR - 669)) | (1L << (VARCHAR9 - 669)) | (1L << (VARCHAR_BIT_FORMAT - 669)) | (1L << (VARCHAR_FORMAT - 669)) | (1L << (VARGRAPHIC - 669)) | (1L << (VERIFY_GROUP_FOR_USER - 669)) | (1L << (VERIFY_ROLE_FOR_USER - 669)) | (1L << (VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER - 669)) | (1L << (WEEK - 669)) | (1L << (WEEK_ISO - 669)))) != 0) || ((((_la - 733)) & ~0x3f) == 0 && ((1L << (_la - 733)) & ((1L << (WRAP - 733)) | (1L << (XMLATTRIBUTES - 733)) | (1L << (XMLCOMMENT - 733)) | (1L << (XMLCONCAT - 733)) | (1L << (XMLDOCUMENT - 733)) | (1L << (XMLELEMENT - 733)) | (1L << (XMLFOREST - 733)) | (1L << (XMLMODIFY - 733)) | (1L << (XMLPARSE - 733)) | (1L << (XMLPI - 733)) | (1L << (XMLQUERY - 733)) | (1L << (XMLSERIALIZE - 733)) | (1L << (XMLTEXT - 733)) | (1L << (XMLXSROBJECTID - 733)) | (1L << (XSLTRANSFORM - 733)) | (1L << (CURRENT_ACCELERATOR - 733)) | (1L << (CURRENT_APPLICATION_COMPATIBILITY - 733)) | (1L << (CURRENT_APPLICATION_ENCODING_SCHEME - 733)) | (1L << (CURRENT_CLIENT_ACCTNG - 733)) | (1L << (CURRENT_CLIENT_APPLNAME - 733)) | (1L << (CURRENT_CLIENT_CORR_TOKEN - 733)) | (1L << (CURRENT_CLIENT_USERID - 733)) | (1L << (CURRENT_CLIENT_WRKSTNNAME - 733)) | (1L << (CURRENT_DATE - 733)) | (1L << (CURRENT_DEBUG_MODE - 733)) | (1L << (CURRENT_DECFLOAT_ROUNDING_MODE - 733)) | (1L << (CURRENT_DEGREE - 733)) | (1L << (CURRENT_EXPLAIN_MODE - 733)) | (1L << (CURRENT_GET_ACCEL_ARCHIVE - 733)) | (1L << (CURRENT_LOCALE_LC_CTYPE - 733)) | (1L << (CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION - 733)) | (1L << (CURRENT_MEMBER - 733)) | (1L << (CURRENT_OPTIMIZATION_HINT - 733)) | (1L << (CURRENT_PACKAGE_PATH - 733)) | (1L << (CURRENT_PACKAGESET - 733)) | (1L << (CURRENT_PATH - 733)) | (1L << (CURRENT_PRECISION - 733)) | (1L << (CURRENT_QUERY_ACCELERATION - 733)) | (1L << (CURRENT_QUERY_ACCELERATION_WAITFORDATA - 733)) | (1L << (CURRENT_REFRESH_AGE - 733)) | (1L << (CURRENT_ROUTINE_VERSION - 733)) | (1L << (CURRENT_RULES - 733)) | (1L << (CURRENT_SCHEMA - 733)) | (1L << (CURRENT_SERVER - 733)) | (1L << (CURRENT_SQLID - 733)) | (1L << (CURRENT_TEMPORAL_BUSINESS_TIME - 733)) | (1L << (CURRENT_TEMPORAL_SYSTEM_TIME - 733)) | (1L << (CURRENT_TIME - 733)) | (1L << (CURRENT_TIMESTAMP - 733)) | (1L << (CURRENT_TIME_ZONE - 733)) | (1L << (ENCRYPTION_PASSWORD - 733)) | (1L << (SESSION_TIME_ZONE - 733)) | (1L << (SESSION_USER - 733)) | (1L << (USER - 733)) | (1L << (ADMIN_TASK_LIST - 733)) | (1L << (ADMIN_TASK_OUTPUT - 733)) | (1L << (ADMIN_TASK_STATUS - 733)) | (1L << (BLOCKING_THREADS - 733)) | (1L << (MQREADALL - 733)) | (1L << (MQREADALLCLOB - 733)) | (1L << (MQRECEIVEALL - 733)) | (1L << (MQRECEIVEALLCLOB - 733)) | (1L << (XMLTABLE - 733)) | (1L << (SQLIDENTIFIER - 733)))) != 0)) {
					{
					setState(2506);
					constraintName();
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2511);
			match(LPAREN);
			setState(2512);
			columnName();
			setState(2516);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(2513);
				match(PERIOD);
				setState(2514);
				match(BUSINESS);
				setState(2515);
				match(TIME);
				}
			}

			setState(2527);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2518);
				match(COMMA);
				setState(2519);
				columnName();
				setState(2523);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(2520);
					match(PERIOD);
					setState(2521);
					match(BUSINESS);
					setState(2522);
					match(TIME);
					}
				}

				}
				}
				setState(2529);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2530);
			match(RPAREN);
			setState(2531);
			referencesClause();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferencesClauseContext extends ParserRuleContext {
		public TerminalNode REFERENCES() { return getToken(DB2zSQLParser.REFERENCES, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode ENFORCED() { return getToken(DB2zSQLParser.ENFORCED, 0); }
		public List<TerminalNode> PERIOD() { return getTokens(DB2zSQLParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(DB2zSQLParser.PERIOD, i);
		}
		public List<TerminalNode> BUSINESS() { return getTokens(DB2zSQLParser.BUSINESS); }
		public TerminalNode BUSINESS(int i) {
			return getToken(DB2zSQLParser.BUSINESS, i);
		}
		public List<TerminalNode> TIME() { return getTokens(DB2zSQLParser.TIME); }
		public TerminalNode TIME(int i) {
			return getToken(DB2zSQLParser.TIME, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public TerminalNode DELETE() { return getToken(DB2zSQLParser.DELETE, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TerminalNode ENABLE() { return getToken(DB2zSQLParser.ENABLE, 0); }
		public TerminalNode QUERY() { return getToken(DB2zSQLParser.QUERY, 0); }
		public TerminalNode OPTIMIZATION() { return getToken(DB2zSQLParser.OPTIMIZATION, 0); }
		public TerminalNode RESTRICT() { return getToken(DB2zSQLParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(DB2zSQLParser.CASCADE, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(DB2zSQLParser.ACTION, 0); }
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public ReferencesClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referencesClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterReferencesClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitReferencesClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitReferencesClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReferencesClauseContext referencesClause() throws RecognitionException {
		ReferencesClauseContext _localctx = new ReferencesClauseContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_referencesClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2533);
			match(REFERENCES);
			setState(2534);
			tableName();
			setState(2535);
			match(LPAREN);
			setState(2536);
			columnName();
			setState(2540);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(2537);
				match(PERIOD);
				setState(2538);
				match(BUSINESS);
				setState(2539);
				match(TIME);
				}
			}

			setState(2551);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2542);
				match(COMMA);
				setState(2543);
				columnName();
				setState(2547);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(2544);
					match(PERIOD);
					setState(2545);
					match(BUSINESS);
					setState(2546);
					match(TIME);
					}
				}

				}
				}
				setState(2553);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2554);
			match(RPAREN);
			setState(2565);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(2555);
				match(ON);
				setState(2556);
				match(DELETE);
				setState(2563);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case RESTRICT:
					{
					setState(2557);
					match(RESTRICT);
					}
					break;
				case NO:
					{
					{
					setState(2558);
					match(NO);
					setState(2559);
					match(ACTION);
					}
					}
					break;
				case CASCADE:
					{
					setState(2560);
					match(CASCADE);
					}
					break;
				case SET:
					{
					{
					setState(2561);
					match(SET);
					setState(2562);
					match(NULL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(2568);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2567);
				match(NOT);
				}
			}

			setState(2570);
			match(ENFORCED);
			setState(2574);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,289,_ctx) ) {
			case 1:
				{
				setState(2571);
				match(ENABLE);
				setState(2572);
				match(QUERY);
				setState(2573);
				match(OPTIMIZATION);
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckConstraintContext extends ParserRuleContext {
		public TerminalNode CHECK() { return getToken(DB2zSQLParser.CHECK, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public CheckConditionContext checkCondition() {
			return getRuleContext(CheckConditionContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode CONSTRAINT() { return getToken(DB2zSQLParser.CONSTRAINT, 0); }
		public ConstraintNameContext constraintName() {
			return getRuleContext(ConstraintNameContext.class,0);
		}
		public CheckConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCheckConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCheckConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCheckConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckConstraintContext checkConstraint() throws RecognitionException {
		CheckConstraintContext _localctx = new CheckConstraintContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_checkConstraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2578);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(2576);
				match(CONSTRAINT);
				setState(2577);
				constraintName();
				}
			}

			setState(2580);
			match(CHECK);
			setState(2581);
			match(LPAREN);
			setState(2582);
			checkCondition();
			setState(2583);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitioningClauseContext extends ParserRuleContext {
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public List<PartitionExpressionContext> partitionExpression() {
			return getRuleContexts(PartitionExpressionContext.class);
		}
		public PartitionExpressionContext partitionExpression(int i) {
			return getRuleContext(PartitionExpressionContext.class,i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public List<PartitioningClauseElementContext> partitioningClauseElement() {
			return getRuleContexts(PartitioningClauseElementContext.class);
		}
		public PartitioningClauseElementContext partitioningClauseElement(int i) {
			return getRuleContext(PartitioningClauseElementContext.class,i);
		}
		public TerminalNode RANGE() { return getToken(DB2zSQLParser.RANGE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public PartitioningClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitioningClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPartitioningClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPartitioningClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPartitioningClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitioningClauseContext partitioningClause() throws RecognitionException {
		PartitioningClauseContext _localctx = new PartitioningClauseContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_partitioningClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2586);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RANGE) {
				{
				setState(2585);
				match(RANGE);
				}
			}

			setState(2588);
			match(LPAREN);
			setState(2589);
			partitionExpression();
			setState(2594);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2590);
				match(COMMA);
				setState(2591);
				partitionExpression();
				}
				}
				setState(2596);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2597);
			match(RPAREN);
			setState(2598);
			match(LPAREN);
			setState(2599);
			partitioningClauseElement();
			setState(2604);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2600);
				match(COMMA);
				setState(2601);
				partitioningClauseElement();
				}
				}
				setState(2606);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2607);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionExpressionContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TerminalNode ASC() { return getToken(DB2zSQLParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(DB2zSQLParser.DESC, 0); }
		public TerminalNode NULLS() { return getToken(DB2zSQLParser.NULLS, 0); }
		public TerminalNode LAST() { return getToken(DB2zSQLParser.LAST, 0); }
		public PartitionExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPartitionExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPartitionExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPartitionExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionExpressionContext partitionExpression() throws RecognitionException {
		PartitionExpressionContext _localctx = new PartitionExpressionContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_partitionExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2609);
			columnName();
			setState(2612);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NULLS) {
				{
				setState(2610);
				match(NULLS);
				setState(2611);
				match(LAST);
				}
			}

			setState(2614);
			_la = _input.LA(1);
			if ( !(_la==ASC || _la==DESC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionLimitKeyContext extends ParserRuleContext {
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode MAXVALUE() { return getToken(DB2zSQLParser.MAXVALUE, 0); }
		public TerminalNode MINVALUE() { return getToken(DB2zSQLParser.MINVALUE, 0); }
		public PartitionLimitKeyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionLimitKey; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPartitionLimitKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPartitionLimitKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPartitionLimitKey(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionLimitKeyContext partitionLimitKey() throws RecognitionException {
		PartitionLimitKeyContext _localctx = new PartitionLimitKeyContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_partitionLimitKey);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2616);
			_la = _input.LA(1);
			if ( !(_la==INTEGERLITERAL || _la==MAXVALUE || _la==MINVALUE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitioningPhraseContext extends ParserRuleContext {
		public TerminalNode ENDING() { return getToken(DB2zSQLParser.ENDING, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<PartitionLimitKeyContext> partitionLimitKey() {
			return getRuleContexts(PartitionLimitKeyContext.class);
		}
		public PartitionLimitKeyContext partitionLimitKey(int i) {
			return getRuleContext(PartitionLimitKeyContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode AT() { return getToken(DB2zSQLParser.AT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public TerminalNode INCLUSIVE() { return getToken(DB2zSQLParser.INCLUSIVE, 0); }
		public PartitioningPhraseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitioningPhrase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPartitioningPhrase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPartitioningPhrase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPartitioningPhrase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitioningPhraseContext partitioningPhrase() throws RecognitionException {
		PartitioningPhraseContext _localctx = new PartitioningPhraseContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_partitioningPhrase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2618);
			match(ENDING);
			setState(2620);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AT) {
				{
				setState(2619);
				match(AT);
				}
			}

			setState(2622);
			match(LPAREN);
			setState(2623);
			partitionLimitKey();
			setState(2628);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2624);
				match(COMMA);
				setState(2625);
				partitionLimitKey();
				}
				}
				setState(2630);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2631);
			match(RPAREN);
			setState(2633);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INCLUSIVE) {
				{
				setState(2632);
				match(INCLUSIVE);
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionHashSpaceContext extends ParserRuleContext {
		public TerminalNode HASH() { return getToken(DB2zSQLParser.HASH, 0); }
		public TerminalNode SPACE() { return getToken(DB2zSQLParser.SPACE, 0); }
		public TerminalNode SQLIDENTIFIER() { return getToken(DB2zSQLParser.SQLIDENTIFIER, 0); }
		public PartitionHashSpaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionHashSpace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPartitionHashSpace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPartitionHashSpace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPartitionHashSpace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionHashSpaceContext partitionHashSpace() throws RecognitionException {
		PartitionHashSpaceContext _localctx = new PartitionHashSpaceContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_partitionHashSpace);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2635);
			match(HASH);
			setState(2636);
			match(SPACE);
			setState(2637);
			match(SQLIDENTIFIER);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterHashOrganizationContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(DB2zSQLParser.ADD, 0); }
		public TerminalNode ORGANIZE() { return getToken(DB2zSQLParser.ORGANIZE, 0); }
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public List<TerminalNode> HASH() { return getTokens(DB2zSQLParser.HASH); }
		public TerminalNode HASH(int i) {
			return getToken(DB2zSQLParser.HASH, i);
		}
		public TerminalNode UNIQUE() { return getToken(DB2zSQLParser.UNIQUE, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode SPACE() { return getToken(DB2zSQLParser.SPACE, 0); }
		public TerminalNode SQLIDENTIFIER() { return getToken(DB2zSQLParser.SQLIDENTIFIER, 0); }
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode ORGANIZATION() { return getToken(DB2zSQLParser.ORGANIZATION, 0); }
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public AlterHashOrganizationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterHashOrganization; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterHashOrganization(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterHashOrganization(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterHashOrganization(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterHashOrganizationContext alterHashOrganization() throws RecognitionException {
		AlterHashOrganizationContext _localctx = new AlterHashOrganizationContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_alterHashOrganization);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2664);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
				{
				{
				setState(2639);
				match(ADD);
				setState(2640);
				match(ORGANIZE);
				setState(2641);
				match(BY);
				setState(2642);
				match(HASH);
				setState(2643);
				match(UNIQUE);
				setState(2644);
				match(LPAREN);
				setState(2645);
				columnName();
				setState(2650);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2646);
					match(COMMA);
					setState(2647);
					columnName();
					}
					}
					setState(2652);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2653);
				match(RPAREN);
				setState(2654);
				match(HASH);
				setState(2655);
				match(SPACE);
				setState(2656);
				match(SQLIDENTIFIER);
				}
				}
				break;
			case ALTER:
				{
				{
				setState(2658);
				match(ALTER);
				setState(2659);
				match(ORGANIZATION);
				setState(2660);
				match(SET);
				setState(2661);
				match(HASH);
				setState(2662);
				match(SPACE);
				setState(2663);
				match(SQLIDENTIFIER);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitioningClauseElementContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(DB2zSQLParser.PARTITION, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public PartitioningPhraseContext partitioningPhrase() {
			return getRuleContext(PartitioningPhraseContext.class,0);
		}
		public PartitionHashSpaceContext partitionHashSpace() {
			return getRuleContext(PartitionHashSpaceContext.class,0);
		}
		public PartitioningClauseElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitioningClauseElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPartitioningClauseElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPartitioningClauseElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPartitioningClauseElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitioningClauseElementContext partitioningClauseElement() throws RecognitionException {
		PartitioningClauseElementContext _localctx = new PartitioningClauseElementContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_partitioningClauseElement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2666);
			match(PARTITION);
			setState(2667);
			match(INTEGERLITERAL);
			setState(2668);
			partitioningPhrase();
			setState(2670);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HASH) {
				{
				setState(2669);
				partitionHashSpace();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionClauseContext extends ParserRuleContext {
		public PartitioningPhraseContext partitioningPhrase() {
			return getRuleContext(PartitioningPhraseContext.class,0);
		}
		public PartitionHashSpaceContext partitionHashSpace() {
			return getRuleContext(PartitionHashSpaceContext.class,0);
		}
		public PartitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPartitionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPartitionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPartitionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionClauseContext partitionClause() throws RecognitionException {
		PartitionClauseContext _localctx = new PartitionClauseContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_partitionClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2674);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENDING:
				{
				setState(2672);
				partitioningPhrase();
				}
				break;
			case HASH:
				{
				setState(2673);
				partitionHashSpace();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RotatePartitionClauseContext extends ParserRuleContext {
		public PartitioningPhraseContext partitioningPhrase() {
			return getRuleContext(PartitioningPhraseContext.class,0);
		}
		public TerminalNode RESET() { return getToken(DB2zSQLParser.RESET, 0); }
		public RotatePartitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rotatePartitionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRotatePartitionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRotatePartitionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRotatePartitionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RotatePartitionClauseContext rotatePartitionClause() throws RecognitionException {
		RotatePartitionClauseContext _localctx = new RotatePartitionClauseContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_rotatePartitionClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2676);
			partitioningPhrase();
			setState(2677);
			match(RESET);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExtraRowOptionContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public TerminalNode DELETE() { return getToken(DB2zSQLParser.DELETE, 0); }
		public TerminalNode ADD() { return getToken(DB2zSQLParser.ADD, 0); }
		public TerminalNode EXTRA() { return getToken(DB2zSQLParser.EXTRA, 0); }
		public TerminalNode ROW() { return getToken(DB2zSQLParser.ROW, 0); }
		public ExtraRowOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extraRowOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterExtraRowOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitExtraRowOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitExtraRowOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExtraRowOptionContext extraRowOption() throws RecognitionException {
		ExtraRowOptionContext _localctx = new ExtraRowOptionContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_extraRowOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2679);
			match(ON);
			setState(2680);
			match(DELETE);
			setState(2681);
			match(ADD);
			setState(2682);
			match(EXTRA);
			setState(2683);
			match(ROW);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MaterializedQueryDefinitionContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public FullSelectContext fullSelect() {
			return getRuleContext(FullSelectContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public RefreshableTableOptionsContext refreshableTableOptions() {
			return getRuleContext(RefreshableTableOptionsContext.class,0);
		}
		public MaterializedQueryDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_materializedQueryDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterMaterializedQueryDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitMaterializedQueryDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitMaterializedQueryDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MaterializedQueryDefinitionContext materializedQueryDefinition() throws RecognitionException {
		MaterializedQueryDefinitionContext _localctx = new MaterializedQueryDefinitionContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_materializedQueryDefinition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2685);
			match(LPAREN);
			setState(2686);
			fullSelect();
			setState(2687);
			match(RPAREN);
			setState(2688);
			refreshableTableOptions();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MaterializedQueryAlterationContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public List<RefreshableTableOptionsListContext> refreshableTableOptionsList() {
			return getRuleContexts(RefreshableTableOptionsListContext.class);
		}
		public RefreshableTableOptionsListContext refreshableTableOptionsList(int i) {
			return getRuleContext(RefreshableTableOptionsListContext.class,i);
		}
		public MaterializedQueryAlterationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_materializedQueryAlteration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterMaterializedQueryAlteration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitMaterializedQueryAlteration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitMaterializedQueryAlteration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MaterializedQueryAlterationContext materializedQueryAlteration() throws RecognitionException {
		MaterializedQueryAlterationContext _localctx = new MaterializedQueryAlterationContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_materializedQueryAlteration);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2690);
			match(SET);
			setState(2692); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2691);
					refreshableTableOptionsList();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2694); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,302,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RefreshableTableOptionsContext extends ParserRuleContext {
		public TerminalNode DATA() { return getToken(DB2zSQLParser.DATA, 0); }
		public TerminalNode INITIALLY() { return getToken(DB2zSQLParser.INITIALLY, 0); }
		public List<TerminalNode> DEFERRED() { return getTokens(DB2zSQLParser.DEFERRED); }
		public TerminalNode DEFERRED(int i) {
			return getToken(DB2zSQLParser.DEFERRED, i);
		}
		public TerminalNode REFRESH() { return getToken(DB2zSQLParser.REFRESH, 0); }
		public List<RefreshableTableOptionsListContext> refreshableTableOptionsList() {
			return getRuleContexts(RefreshableTableOptionsListContext.class);
		}
		public RefreshableTableOptionsListContext refreshableTableOptionsList(int i) {
			return getRuleContext(RefreshableTableOptionsListContext.class,i);
		}
		public RefreshableTableOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_refreshableTableOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRefreshableTableOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRefreshableTableOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRefreshableTableOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RefreshableTableOptionsContext refreshableTableOptions() throws RecognitionException {
		RefreshableTableOptionsContext _localctx = new RefreshableTableOptionsContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_refreshableTableOptions);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2696);
			match(DATA);
			setState(2697);
			match(INITIALLY);
			setState(2698);
			match(DEFERRED);
			setState(2699);
			match(REFRESH);
			setState(2700);
			match(DEFERRED);
			setState(2704);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,303,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2701);
					refreshableTableOptionsList();
					}
					} 
				}
				setState(2706);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,303,_ctx);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RefreshableTableOptionsListContext extends ParserRuleContext {
		public TerminalNode MAINTAINED() { return getToken(DB2zSQLParser.MAINTAINED, 0); }
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public TerminalNode QUERY() { return getToken(DB2zSQLParser.QUERY, 0); }
		public TerminalNode OPTIMIZATION() { return getToken(DB2zSQLParser.OPTIMIZATION, 0); }
		public TerminalNode SYSTEM() { return getToken(DB2zSQLParser.SYSTEM, 0); }
		public TerminalNode USER() { return getToken(DB2zSQLParser.USER, 0); }
		public TerminalNode ENABLE() { return getToken(DB2zSQLParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(DB2zSQLParser.DISABLE, 0); }
		public RefreshableTableOptionsListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_refreshableTableOptionsList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRefreshableTableOptionsList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRefreshableTableOptionsList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRefreshableTableOptionsList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RefreshableTableOptionsListContext refreshableTableOptionsList() throws RecognitionException {
		RefreshableTableOptionsListContext _localctx = new RefreshableTableOptionsListContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_refreshableTableOptionsList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2713);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAINTAINED:
				{
				{
				setState(2707);
				match(MAINTAINED);
				setState(2708);
				match(BY);
				setState(2709);
				_la = _input.LA(1);
				if ( !(_la==SYSTEM || _la==USER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case DISABLE:
			case ENABLE:
				{
				{
				setState(2710);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2711);
				match(QUERY);
				setState(2712);
				match(OPTIMIZATION);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MaterializedQueryTableAlterationContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public List<RefreshableTableOptionsListContext> refreshableTableOptionsList() {
			return getRuleContexts(RefreshableTableOptionsListContext.class);
		}
		public RefreshableTableOptionsListContext refreshableTableOptionsList(int i) {
			return getRuleContext(RefreshableTableOptionsListContext.class,i);
		}
		public MaterializedQueryTableAlterationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_materializedQueryTableAlteration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterMaterializedQueryTableAlteration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitMaterializedQueryTableAlteration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitMaterializedQueryTableAlteration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MaterializedQueryTableAlterationContext materializedQueryTableAlteration() throws RecognitionException {
		MaterializedQueryTableAlterationContext _localctx = new MaterializedQueryTableAlterationContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_materializedQueryTableAlteration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2715);
			match(SET);
			setState(2717); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2716);
				refreshableTableOptionsList();
				}
				}
				setState(2719); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==DISABLE || _la==MAINTAINED || _la==ENABLE );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PeriodDefinitionContext extends ParserRuleContext {
		public TerminalNode SYSTEM_TIME() { return getToken(DB2zSQLParser.SYSTEM_TIME, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public BeginColumnNameContext beginColumnName() {
			return getRuleContext(BeginColumnNameContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(DB2zSQLParser.COMMA, 0); }
		public EndColumnNameContext endColumnName() {
			return getRuleContext(EndColumnNameContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode BUSINESS_TIME() { return getToken(DB2zSQLParser.BUSINESS_TIME, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(DB2zSQLParser.EXCLUSIVE, 0); }
		public TerminalNode INCLUSIVE() { return getToken(DB2zSQLParser.INCLUSIVE, 0); }
		public PeriodDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_periodDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPeriodDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPeriodDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPeriodDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PeriodDefinitionContext periodDefinition() throws RecognitionException {
		PeriodDefinitionContext _localctx = new PeriodDefinitionContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_periodDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2736);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SYSTEM_TIME:
				{
				{
				setState(2721);
				match(SYSTEM_TIME);
				setState(2722);
				match(LPAREN);
				setState(2723);
				beginColumnName();
				setState(2724);
				match(COMMA);
				setState(2725);
				endColumnName();
				setState(2726);
				match(RPAREN);
				}
				}
				break;
			case BUSINESS_TIME:
				{
				{
				setState(2728);
				match(BUSINESS_TIME);
				setState(2729);
				match(LPAREN);
				setState(2730);
				beginColumnName();
				setState(2731);
				match(COMMA);
				setState(2732);
				endColumnName();
				setState(2733);
				_la = _input.LA(1);
				if ( !(_la==INCLUSIVE || _la==EXCLUSIVE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2734);
				match(RPAREN);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnDefinitionContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public BuiltInTypeContext builtInType() {
			return getRuleContext(BuiltInTypeContext.class,0);
		}
		public DistinctTypeNameContext distinctTypeName() {
			return getRuleContext(DistinctTypeNameContext.class,0);
		}
		public List<ColumnDefinitionOptionList1Context> columnDefinitionOptionList1() {
			return getRuleContexts(ColumnDefinitionOptionList1Context.class);
		}
		public ColumnDefinitionOptionList1Context columnDefinitionOptionList1(int i) {
			return getRuleContext(ColumnDefinitionOptionList1Context.class,i);
		}
		public List<ColumnDefinitionOptionList2Context> columnDefinitionOptionList2() {
			return getRuleContexts(ColumnDefinitionOptionList2Context.class);
		}
		public ColumnDefinitionOptionList2Context columnDefinitionOptionList2(int i) {
			return getRuleContext(ColumnDefinitionOptionList2Context.class,i);
		}
		public ColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterColumnDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitColumnDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitColumnDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnDefinitionContext columnDefinition() throws RecognitionException {
		ColumnDefinitionContext _localctx = new ColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_columnDefinition);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2754);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,309,_ctx) ) {
			case 1:
				{
				{
				setState(2738);
				columnName();
				setState(2739);
				builtInType();
				setState(2743);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,307,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2740);
						columnDefinitionOptionList1();
						}
						} 
					}
					setState(2745);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,307,_ctx);
				}
				}
				}
				break;
			case 2:
				{
				{
				setState(2746);
				columnName();
				setState(2747);
				distinctTypeName();
				setState(2751);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,308,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2748);
						columnDefinitionOptionList2();
						}
						} 
					}
					setState(2753);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,308,_ctx);
				}
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExternalProgramNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public ExternalProgramNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_externalProgramName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterExternalProgramName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitExternalProgramName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitExternalProgramName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExternalProgramNameContext externalProgramName() throws RecognitionException {
		ExternalProgramNameContext _localctx = new ExternalProgramNameContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_externalProgramName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2758);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case ALL:
			case ALLOCATE:
			case ALLOW:
			case ALTER:
			case ALTERAND:
			case ANY:
			case ARRAY:
			case ARRAY_EXISTS:
			case AS:
			case ASENSITIVE:
			case ASSOCIATE:
			case ASUTIME:
			case AT:
			case AUDIT:
			case AUX:
			case AUXILIARY:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BUFFERPOOL:
			case BY:
			case CALL:
			case CAPTURE:
			case CASCADED:
			case CASE:
			case CAST:
			case CCSID:
			case CHAR:
			case CHARACTER:
			case CHECK:
			case CLONE:
			case CLOSE:
			case CLUSTER:
			case COLLECTION:
			case COLLID:
			case COLUMN:
			case COMMENT:
			case COMMIT:
			case CONCAT:
			case CONDITION:
			case CONNECT:
			case CONNECTION:
			case CONSTRAINT:
			case CONTAINS:
			case CONTENT:
			case CONTINUE:
			case CREATE:
			case CUBE:
			case CURRENT:
			case CURRENT_LC_CTYPE:
			case CURRVAL:
			case CURSOR:
			case DATA:
			case DATABASE:
			case DAY:
			case DAYS:
			case DBINFO:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DISABLE:
			case DISALLOW:
			case DISTINCT:
			case DO:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSSIZE:
			case DYNAMIC:
			case EDITPROC:
			case ELSE:
			case ELSEIF:
			case ENCODING:
			case ENCRYPTION:
			case END:
			case END_EXEC:
			case ENDING:
			case ERASE:
			case ESCAPE:
			case EXCEPT:
			case EXCEPTION:
			case EXEC_SQL:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case FENCED:
			case FETCH:
			case FIELDPROC:
			case FINAL:
			case FIRST:
			case FOR:
			case FREE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANT:
			case GROUP:
			case HANDLER:
			case HAVING:
			case HOLD:
			case HOUR:
			case HOURS:
			case IF:
			case IMMEDIATE:
			case IN:
			case INCLUSIVE:
			case INDEX:
			case INDEXBP:
			case INHERIT:
			case INNER:
			case INOUT:
			case INSENSITIVE:
			case INSERT:
			case INTERSECT:
			case INTO:
			case IS:
			case ISOBID:
			case ITERATE:
			case JAR:
			case JOIN:
			case KEEP:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LAST:
			case LC_CTYPE:
			case LEAVE:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOCALE:
			case LOCATOR:
			case LOCATORS:
			case LOCK:
			case LOCKMAX:
			case LOCKSIZE:
			case LONG:
			case LOOP:
			case MAINTAINED:
			case MATERIALIZED:
			case MICROSECOND:
			case MICROSECONDS:
			case MODIFIES:
			case MONTH:
			case MONTHS:
			case NEXT:
			case NEXTVAL:
			case NO:
			case NONE:
			case NOT:
			case NULL:
			case NULLS:
			case NUMPARTS:
			case OBID:
			case OF:
			case OFFSET:
			case OLD:
			case ON:
			case OPEN:
			case OPTIMIZATION:
			case OPTIMIZE:
			case OR:
			case ORDER:
			case ORGANIZATION:
			case OUT:
			case OUTER:
			case PACKAGE:
			case PADDED:
			case PARAMETER:
			case PART:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONING:
			case PATH:
			case PERIOD:
			case PIECESIZE:
			case PLAN:
			case PRECISION:
			case PREPARE:
			case PREVVAL:
			case PRIOR:
			case PRIQTY:
			case PRIVILEGES:
			case PROCEDURE:
			case PROGRAM:
			case PSID:
			case PUBLIC:
			case QUERY:
			case QUERYNO:
			case READS:
			case REFERENCES:
			case REFRESH:
			case RELEASE:
			case RENAME:
			case REPEAT:
			case RESIGNAL:
			case RESTRICT:
			case RESULT:
			case RESULT_SET_LOCATOR:
			case RETURN:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUND_CEILING:
			case ROUND_DOWN:
			case ROUND_FLOOR:
			case ROUND_HALF_DOWN:
			case ROUND_HALF_EVEN:
			case ROUND_HALF_UP:
			case ROUND_UP:
			case ROW:
			case ROWSET:
			case RUN:
			case SAVEPOINT:
			case SCHEMA:
			case SCRATCHPAD:
			case SECOND:
			case SECONDS:
			case SECQTY:
			case SECURITY:
			case SELECT:
			case SENSITIVE:
			case SEQUENCE:
			case SET:
			case SIGNAL:
			case SIMPLE:
			case SOME:
			case SOURCE:
			case SPECIFIC:
			case STANDARD:
			case STATEMENT:
			case STATIC:
			case STAY:
			case STOGROUP:
			case STORES:
			case STYLE:
			case SUMMARY:
			case SYNONYM:
			case SYSDATE:
			case SYSTEM:
			case SYSTIMESTAMP:
			case TABLE:
			case TABLESPACE:
			case THEN:
			case TO:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNDO:
			case UNION:
			case UNIQUE:
			case UNTIL:
			case UPDATE:
			case USING:
			case VALIDPROC:
			case VALUE:
			case VALUES:
			case VARIABLE:
			case VARIANT:
			case VCAT:
			case VERSIONING:
			case VIEW:
			case VOLATILE:
			case VOLUMES:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WLM:
			case XMLCAST:
			case XMLEXISTS:
			case XMLNAMESPACES:
			case YEAR:
			case YEARS:
			case ZONE:
			case AND:
			case ARRAY_AGG:
			case ASC:
			case AVG:
			case BIT:
			case CHANGE:
			case CODEUNITS16:
			case CODEUNITS32:
			case CORR:
			case CORRELATION:
			case COUNT:
			case COUNT_BIG:
			case COVAR:
			case COVARIANCE:
			case COVARIANCE_SAMP:
			case COVAR_POP:
			case COVAR_SAMP:
			case CS:
			case CUME_DIST:
			case DENSE_RANK:
			case DESC:
			case EBCDIC:
			case EXCLUSIVE:
			case FIRST_VALUE:
			case FOLLOWING:
			case GROUPING:
			case IGNORE:
			case INDICATOR:
			case INPUT:
			case ISNULL:
			case LAG:
			case LARGE:
			case LAST_VALUE:
			case LEAD:
			case LISTAGG:
			case LOCKED:
			case LOCKS:
			case MEDIAN:
			case MINUTES:
			case MIXED:
			case NOTNULL:
			case NTH_VALUE:
			case NTILE:
			case NUMERIC:
			case OBJECT:
			case OCTETS:
			case ONLY:
			case OVER:
			case PASSING:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PERCENT_RANK:
			case PRECEDING:
			case PREVIOUS:
			case RANGE:
			case RANK:
			case RATIO_TO_REPORT:
			case READ:
			case REF:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_ICPT:
			case REGR_INTERCEPT:
			case REGR_R2:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case RESPECT:
			case ROW_NUMBER:
			case ROWS:
			case RR:
			case RS:
			case SBCS:
			case SELECTIVITY:
			case SETS:
			case SHARE:
			case SKIP_:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case TOKEN:
			case UNBOUNDED:
			case UNPACK:
			case UR:
			case USE:
			case VAR:
			case VARIANCE:
			case VARIANCE_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARYING:
			case WITHOUT:
			case XML:
			case XMLAGG:
			case COLUMNS:
			case SQLID:
			case ORDINALITY:
			case SYSTEM_TIME:
			case BUSINESS_TIME:
			case MULTIPLIER:
			case UNNEST:
			case CROSS:
			case CALLER:
			case CLIENT:
			case POSITIONING:
			case SCROLL:
			case ACTION:
			case ASSEMBLE:
			case C_:
			case CALLED:
			case COBOL:
			case DB2:
			case DEFINER:
			case DISPATCH:
			case ENVIRONMENT:
			case FAILURE:
			case FAILURES:
			case JAVA:
			case MAIN:
			case NAME:
			case OPTIONS:
			case PARALLEL:
			case PLI:
			case REGISTERS:
			case RESIDENT:
			case SECURED:
			case SPECIAL:
			case SQL:
			case STOP:
			case SUB:
			case YES:
			case APPLICATION:
			case CHANGED:
			case COMPATIBILITY:
			case COMPRESS:
			case COPY:
			case FREEPAGE:
			case GBPCACHE:
			case INCLUDE:
			case MAXVALUE:
			case MINVALUE:
			case PCTFREE:
			case REGENERATE:
			case SEQTY:
			case MASK:
			case ENABLE:
			case PERMISSION:
			case ATOMIC:
			case SQLEXCEPTION:
			case MERGE:
			case MATCHED:
			case SQLSTATE:
			case MESSAGE_TEXT:
			case OVERRIDING:
			case PORTION:
			case DB2SQL:
			case DEBUG:
			case GENERAL:
			case MODE_:
			case REXX:
			case CACHE:
			case CYCLE:
			case INCREMENT:
			case RESTART:
			case DATACLAS:
			case MGMTCLAS:
			case REMOVE:
			case STORCLAS:
			case ACCESS:
			case ACTIVATE:
			case ALWAYS:
			case APPEND:
			case ARCHIVE:
			case BUSINESS:
			case CASCADE:
			case CHANGES:
			case CONTROL:
			case DEACTIVATE:
			case DEFERRED:
			case EACH:
			case ENFORCED:
			case EXTRA:
			case FOREIGN:
			case HIDDEN_:
			case HISTORY:
			case ID:
			case IDENTITY:
			case IMPLICITLY:
			case INITIALLY:
			case INLINE:
			case OPERATION:
			case ORGANIZE:
			case OVERLAPS:
			case PACKAGE_NAME:
			case PACKAGE_SCHEMA:
			case PACKAGE_VERSION:
			case PRIMARY:
			case RESET:
			case ROTATE:
			case START:
			case SYSIBM:
			case TRANSACTION:
			case ABS:
			case ABSVAL:
			case ACOS:
			case ADD_DAYS:
			case ADD_MONTHS:
			case ARRAY_DELETE:
			case ARRAY_FIRST:
			case ARRAY_LAST:
			case ARRAY_NEXT:
			case ARRAY_PRIOR:
			case ARRAY_TRIM:
			case ASCII:
			case ASCII_CHR:
			case ASCIISTR:
			case ASCII_STR:
			case ASIN:
			case ATAN:
			case ATAN2:
			case ATANH:
			case BIGINT:
			case BINARY:
			case BITAND:
			case BITANDNOT:
			case BITNOT:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BTRIM:
			case CARDINALITY:
			case CCSID_ENCODING:
			case CEIL:
			case CEILING:
			case CHAR9:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case CHR:
			case CLOB:
			case COALESCE:
			case COLLATION_KEY:
			case COMPARE_DECFLOAT:
			case COS:
			case COSH:
			case DATE:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFWEEK_ISO:
			case DAYOFYEAR:
			case DAYS_BETWEEN:
			case DBCLOB:
			case DEC:
			case DECFLOAT:
			case DECFLOAT_FORMAT:
			case DECFLOAT_SORTKEY:
			case DECIMAL:
			case DECODE:
			case DECRYPT_BINARY:
			case DECRYPT_BIT:
			case DECRYPT_CHAR:
			case DECRYPT_DATAKEY_BIGINT:
			case DECRYPT_DATAKEY_BIT:
			case DECRYPT_DATAKEY_CLOB:
			case DECRYPT_DATAKEY_DBCLOB:
			case DECRYPT_DATAKEY_DECIMAL:
			case DECRYPT_DATAKEY_INTEGER:
			case DECRYPT_DATAKEY_VARCHAR:
			case DECRYPT_DATAKEY_VARGRAPHIC:
			case DECRYPT_DB:
			case DEGREES:
			case DIFFERENCE:
			case DIGITS:
			case DOUBLE_PRECISION:
			case DSN_XMLVALIDATE:
			case EBCDIC_CHR:
			case EBCDIC_STR:
			case ENCRYPT_DATAKEY:
			case ENCRYPT_TDES:
			case EXP:
			case EXTRACT:
			case FLOAT:
			case FLOOR:
			case GENERATE_UNIQUE:
			case GENERATE_UNIQUE_BINARY:
			case GETHINT:
			case GETVARIABLE:
			case GRAPHIC:
			case GREATEST:
			case HASH:
			case HASH_CRC32:
			case HASH_MD5:
			case HASH_SHA1:
			case HASH_SHA256:
			case HEX:
			case IDENTITY_VAL_LOCAL:
			case IFNULL:
			case INSTR:
			case INT:
			case INTEGER:
			case JULIAN_DAY:
			case LAST_DAY:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LN:
			case LOCATE:
			case LOCATE_IN_STRING:
			case LOG10:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAX:
			case MAX_CARDINALITY:
			case MIDNIGHT_SECONDS:
			case MIN:
			case MINUTE:
			case MOD:
			case MONTHS_BETWEEN:
			case MQREAD:
			case MQREADCLOB:
			case MQRECEIVE:
			case MQRECEIVECLOB:
			case MQSEND:
			case MULTIPLY_ALT:
			case NEXT_DAY:
			case NEXT_MONTH:
			case NORMALIZE_DECFLOAT:
			case NORMALIZE_STRING:
			case NULLIF:
			case NVL:
			case OVERLAY:
			case PACK:
			case POSITION:
			case POSSTR:
			case POW:
			case POWER:
			case QUANTIZE:
			case QUARTER:
			case RADIANS:
			case RAISE_ERROR:
			case RAND:
			case RANDOM:
			case REAL:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REPLACE:
			case RID:
			case ROUND:
			case ROUND_TIMESTAMP:
			case ROWID:
			case RPAD:
			case RTRIM:
			case SCORE:
			case SIGN:
			case SIN:
			case SINH:
			case SMALLINT:
			case SOAPHTTPC:
			case SOAPHTTPNC:
			case SOAPHTTPNV:
			case SOAPHTTPV:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STRIP:
			case STRLEFT:
			case STRPOS:
			case STRRIGHT:
			case SUBSTR:
			case SUBSTRING:
			case TAN:
			case TANH:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIMESTAMP_FORMAT:
			case TIMESTAMP_ISO:
			case TIMESTAMP_TZ:
			case TO_CHAR:
			case TO_CLOB:
			case TO_DATE:
			case TO_NUMBER:
			case TOTALORDER:
			case TO_TIMESTAMP:
			case TRANSLATE:
			case TRIM:
			case TRIM_ARRAY:
			case TRUNC:
			case TRUNC_TIMESTAMP:
			case UCASE:
			case UNICODE:
			case UNICODE_STR:
			case UNISTR:
			case UPPER:
			case VARBINARY:
			case VARCHAR:
			case VARCHAR9:
			case VARCHAR_BIT_FORMAT:
			case VARCHAR_FORMAT:
			case VARGRAPHIC:
			case VERIFY_GROUP_FOR_USER:
			case VERIFY_ROLE_FOR_USER:
			case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
			case WEEK:
			case WEEK_ISO:
			case WRAP:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLCONCAT:
			case XMLDOCUMENT:
			case XMLELEMENT:
			case XMLFOREST:
			case XMLMODIFY:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLSERIALIZE:
			case XMLTEXT:
			case XMLXSROBJECTID:
			case XSLTRANSFORM:
			case CURRENT_ACCELERATOR:
			case CURRENT_APPLICATION_COMPATIBILITY:
			case CURRENT_APPLICATION_ENCODING_SCHEME:
			case CURRENT_CLIENT_ACCTNG:
			case CURRENT_CLIENT_APPLNAME:
			case CURRENT_CLIENT_CORR_TOKEN:
			case CURRENT_CLIENT_USERID:
			case CURRENT_CLIENT_WRKSTNNAME:
			case CURRENT_DATE:
			case CURRENT_DEBUG_MODE:
			case CURRENT_DECFLOAT_ROUNDING_MODE:
			case CURRENT_DEGREE:
			case CURRENT_EXPLAIN_MODE:
			case CURRENT_GET_ACCEL_ARCHIVE:
			case CURRENT_LOCALE_LC_CTYPE:
			case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
			case CURRENT_MEMBER:
			case CURRENT_OPTIMIZATION_HINT:
			case CURRENT_PACKAGE_PATH:
			case CURRENT_PACKAGESET:
			case CURRENT_PATH:
			case CURRENT_PRECISION:
			case CURRENT_QUERY_ACCELERATION:
			case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
			case CURRENT_REFRESH_AGE:
			case CURRENT_ROUTINE_VERSION:
			case CURRENT_RULES:
			case CURRENT_SCHEMA:
			case CURRENT_SERVER:
			case CURRENT_SQLID:
			case CURRENT_TEMPORAL_BUSINESS_TIME:
			case CURRENT_TEMPORAL_SYSTEM_TIME:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_TIME_ZONE:
			case ENCRYPTION_PASSWORD:
			case SESSION_TIME_ZONE:
			case SESSION_USER:
			case USER:
			case ADMIN_TASK_LIST:
			case ADMIN_TASK_OUTPUT:
			case ADMIN_TASK_STATUS:
			case BLOCKING_THREADS:
			case MQREADALL:
			case MQREADALLCLOB:
			case MQRECEIVEALL:
			case MQRECEIVEALLCLOB:
			case XMLTABLE:
			case SQLIDENTIFIER:
				{
				setState(2756);
				identifier();
				}
				break;
			case NONNUMERICLITERAL:
				{
				setState(2757);
				match(NONNUMERICLITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PackagePathContext extends ParserRuleContext {
		public CollectionIDContext collectionID() {
			return getRuleContext(CollectionIDContext.class,0);
		}
		public TerminalNode SESSION_USER() { return getToken(DB2zSQLParser.SESSION_USER, 0); }
		public TerminalNode USER() { return getToken(DB2zSQLParser.USER, 0); }
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public TerminalNode CURRENT() { return getToken(DB2zSQLParser.CURRENT, 0); }
		public TerminalNode PACKAGE() { return getToken(DB2zSQLParser.PACKAGE, 0); }
		public TerminalNode PATH() { return getToken(DB2zSQLParser.PATH, 0); }
		public PackagePathContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_packagePath; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPackagePath(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPackagePath(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPackagePath(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PackagePathContext packagePath() throws RecognitionException {
		PackagePathContext _localctx = new PackagePathContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_packagePath);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2770);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,311,_ctx) ) {
			case 1:
				{
				setState(2760);
				collectionID();
				}
				break;
			case 2:
				{
				setState(2761);
				match(SESSION_USER);
				}
				break;
			case 3:
				{
				setState(2762);
				match(USER);
				}
				break;
			case 4:
				{
				{
				setState(2763);
				match(CURRENT);
				setState(2764);
				match(PACKAGE);
				setState(2765);
				match(PATH);
				}
				}
				break;
			case 5:
				{
				{
				setState(2766);
				match(CURRENT);
				setState(2767);
				match(PATH);
				}
				}
				break;
			case 6:
				{
				setState(2768);
				hostVariable();
				}
				break;
			case 7:
				{
				setState(2769);
				match(NONNUMERICLITERAL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollectionIDContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public CollectionIDContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collectionID; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCollectionID(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCollectionID(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCollectionID(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollectionIDContext collectionID() throws RecognitionException {
		CollectionIDContext _localctx = new CollectionIDContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_collectionID);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2772);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RunTimeOptionsContext extends ParserRuleContext {
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public RunTimeOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_runTimeOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRunTimeOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRunTimeOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRunTimeOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RunTimeOptionsContext runTimeOptions() throws RecognitionException {
		RunTimeOptionsContext _localctx = new RunTimeOptionsContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_runTimeOptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2774);
			match(NONNUMERICLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ComparisonOperatorContext extends ParserRuleContext {
		public TerminalNode EQ() { return getToken(DB2zSQLParser.EQ, 0); }
		public TerminalNode GT() { return getToken(DB2zSQLParser.GT, 0); }
		public TerminalNode LT() { return getToken(DB2zSQLParser.LT, 0); }
		public TerminalNode GE() { return getToken(DB2zSQLParser.GE, 0); }
		public TerminalNode LE() { return getToken(DB2zSQLParser.LE, 0); }
		public TerminalNode NE() { return getToken(DB2zSQLParser.NE, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparisonOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterComparisonOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitComparisonOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitComparisonOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ComparisonOperatorContext comparisonOperator() throws RecognitionException {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_comparisonOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2776);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQ) | (1L << GT) | (1L << LT) | (1L << GE) | (1L << LE) | (1L << NE))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OperatorContext extends ParserRuleContext {
		public TerminalNode SPLAT() { return getToken(DB2zSQLParser.SPLAT, 0); }
		public TerminalNode PLUS() { return getToken(DB2zSQLParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(DB2zSQLParser.MINUS, 0); }
		public TerminalNode SLASH() { return getToken(DB2zSQLParser.SLASH, 0); }
		public TerminalNode CONCAT() { return getToken(DB2zSQLParser.CONCAT, 0); }
		public TerminalNode CONCATOP() { return getToken(DB2zSQLParser.CONCATOP, 0); }
		public OperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OperatorContext operator() throws RecognitionException {
		OperatorContext _localctx = new OperatorContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_operator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2778);
			_la = _input.LA(1);
			if ( !(((((_la - 12)) & ~0x3f) == 0 && ((1L << (_la - 12)) & ((1L << (PLUS - 12)) | (1L << (MINUS - 12)) | (1L << (SPLAT - 12)) | (1L << (SLASH - 12)) | (1L << (CONCATOP - 12)) | (1L << (CONCAT - 12)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionContext extends ParserRuleContext {
		public FunctionInvocationContext functionInvocation() {
			return getRuleContext(FunctionInvocationContext.class,0);
		}
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public SpecialRegisterContext specialRegister() {
			return getRuleContext(SpecialRegisterContext.class,0);
		}
		public ScalarFullSelectContext scalarFullSelect() {
			return getRuleContext(ScalarFullSelectContext.class,0);
		}
		public TimeZoneSpecificExpressionContext timeZoneSpecificExpression() {
			return getRuleContext(TimeZoneSpecificExpressionContext.class,0);
		}
		public LabeledDurationContext labeledDuration() {
			return getRuleContext(LabeledDurationContext.class,0);
		}
		public CaseExpressionContext caseExpression() {
			return getRuleContext(CaseExpressionContext.class,0);
		}
		public CastSpecificationContext castSpecification() {
			return getRuleContext(CastSpecificationContext.class,0);
		}
		public XmlCastSpecificationContext xmlCastSpecification() {
			return getRuleContext(XmlCastSpecificationContext.class,0);
		}
		public ArrayElementSpecificationContext arrayElementSpecification() {
			return getRuleContext(ArrayElementSpecificationContext.class,0);
		}
		public ArrayConstructorContext arrayConstructor() {
			return getRuleContext(ArrayConstructorContext.class,0);
		}
		public OlapSpecificationContext olapSpecification() {
			return getRuleContext(OlapSpecificationContext.class,0);
		}
		public RowChangeExpressionContext rowChangeExpression() {
			return getRuleContext(RowChangeExpressionContext.class,0);
		}
		public SequenceReferenceContext sequenceReference() {
			return getRuleContext(SequenceReferenceContext.class,0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		ExpressionContext _localctx = new ExpressionContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2796);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,312,_ctx) ) {
			case 1:
				{
				setState(2780);
				functionInvocation();
				}
				break;
			case 2:
				{
				setState(2781);
				literal();
				}
				break;
			case 3:
				{
				setState(2782);
				columnName();
				}
				break;
			case 4:
				{
				setState(2783);
				hostVariable();
				}
				break;
			case 5:
				{
				setState(2784);
				specialRegister();
				}
				break;
			case 6:
				{
				setState(2785);
				scalarFullSelect();
				}
				break;
			case 7:
				{
				setState(2786);
				timeZoneSpecificExpression();
				}
				break;
			case 8:
				{
				setState(2787);
				labeledDuration();
				}
				break;
			case 9:
				{
				setState(2788);
				caseExpression();
				}
				break;
			case 10:
				{
				setState(2789);
				castSpecification();
				}
				break;
			case 11:
				{
				setState(2790);
				xmlCastSpecification();
				}
				break;
			case 12:
				{
				setState(2791);
				arrayElementSpecification();
				}
				break;
			case 13:
				{
				setState(2792);
				arrayConstructor();
				}
				break;
			case 14:
				{
				setState(2793);
				olapSpecification();
				}
				break;
			case 15:
				{
				setState(2794);
				rowChangeExpression();
				}
				break;
			case 16:
				{
				setState(2795);
				sequenceReference();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowChangeExpressionContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(DB2zSQLParser.ROW, 0); }
		public TerminalNode CHANGE() { return getToken(DB2zSQLParser.CHANGE, 0); }
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode TIMESTAMP() { return getToken(DB2zSQLParser.TIMESTAMP, 0); }
		public TerminalNode TOKEN() { return getToken(DB2zSQLParser.TOKEN, 0); }
		public RowChangeExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowChangeExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRowChangeExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRowChangeExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRowChangeExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowChangeExpressionContext rowChangeExpression() throws RecognitionException {
		RowChangeExpressionContext _localctx = new RowChangeExpressionContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_rowChangeExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2798);
			match(ROW);
			setState(2799);
			match(CHANGE);
			setState(2800);
			_la = _input.LA(1);
			if ( !(_la==TOKEN || _la==TIMESTAMP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2801);
			match(FOR);
			setState(2802);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SequenceReferenceContext extends ParserRuleContext {
		public TerminalNode VALUE() { return getToken(DB2zSQLParser.VALUE, 0); }
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode NEXT() { return getToken(DB2zSQLParser.NEXT, 0); }
		public TerminalNode PREVIOUS() { return getToken(DB2zSQLParser.PREVIOUS, 0); }
		public SequenceReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequenceReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSequenceReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSequenceReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSequenceReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SequenceReferenceContext sequenceReference() throws RecognitionException {
		SequenceReferenceContext _localctx = new SequenceReferenceContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_sequenceReference);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2804);
			_la = _input.LA(1);
			if ( !(_la==NEXT || _la==PREVIOUS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2805);
			match(VALUE);
			setState(2806);
			match(FOR);
			setState(2807);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionInvocationContext extends ParserRuleContext {
		public ScalarFunctionInvocationContext scalarFunctionInvocation() {
			return getRuleContext(ScalarFunctionInvocationContext.class,0);
		}
		public AggregateFunctionInvocationContext aggregateFunctionInvocation() {
			return getRuleContext(AggregateFunctionInvocationContext.class,0);
		}
		public RegressionFunctionInvocationContext regressionFunctionInvocation() {
			return getRuleContext(RegressionFunctionInvocationContext.class,0);
		}
		public ExternalFunctionInvocationContext externalFunctionInvocation() {
			return getRuleContext(ExternalFunctionInvocationContext.class,0);
		}
		public FunctionInvocationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionInvocation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFunctionInvocation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFunctionInvocation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFunctionInvocation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionInvocationContext functionInvocation() throws RecognitionException {
		FunctionInvocationContext _localctx = new FunctionInvocationContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_functionInvocation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2813);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,313,_ctx) ) {
			case 1:
				{
				setState(2809);
				scalarFunctionInvocation();
				}
				break;
			case 2:
				{
				setState(2810);
				aggregateFunctionInvocation();
				}
				break;
			case 3:
				{
				setState(2811);
				regressionFunctionInvocation();
				}
				break;
			case 4:
				{
				setState(2812);
				externalFunctionInvocation();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScalarFunctionInvocationContext extends ParserRuleContext {
		public ScalarFunctionContext scalarFunction() {
			return getRuleContext(ScalarFunctionContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public ScalarFunctionInvocationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scalarFunctionInvocation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterScalarFunctionInvocation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitScalarFunctionInvocation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitScalarFunctionInvocation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ScalarFunctionInvocationContext scalarFunctionInvocation() throws RecognitionException {
		ScalarFunctionInvocationContext _localctx = new ScalarFunctionInvocationContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_scalarFunctionInvocation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2818);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,314,_ctx) ) {
			case 1:
				{
				setState(2815);
				schemaName();
				setState(2816);
				match(DOT);
				}
				break;
			}
			setState(2820);
			scalarFunction();
			setState(2821);
			match(LPAREN);
			setState(2822);
			expression();
			setState(2827);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2823);
				match(COMMA);
				setState(2824);
				expression();
				}
				}
				setState(2829);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2830);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggregateFunctionInvocationContext extends ParserRuleContext {
		public AggregateFunctionContext aggregateFunction() {
			return getRuleContext(AggregateFunctionContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode SPLAT() { return getToken(DB2zSQLParser.SPLAT, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public TerminalNode DISTINCT() { return getToken(DB2zSQLParser.DISTINCT, 0); }
		public AggregateFunctionInvocationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregateFunctionInvocation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAggregateFunctionInvocation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAggregateFunctionInvocation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAggregateFunctionInvocation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggregateFunctionInvocationContext aggregateFunctionInvocation() throws RecognitionException {
		AggregateFunctionInvocationContext _localctx = new AggregateFunctionInvocationContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_aggregateFunctionInvocation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2835);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,316,_ctx) ) {
			case 1:
				{
				setState(2832);
				schemaName();
				setState(2833);
				match(DOT);
				}
				break;
			}
			setState(2837);
			aggregateFunction();
			setState(2838);
			match(LPAREN);
			setState(2840);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,317,_ctx) ) {
			case 1:
				{
				setState(2839);
				match(DISTINCT);
				}
				break;
			}
			setState(2844);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LPAREN:
			case COLON:
			case NONNUMERICLITERAL:
			case INTEGERLITERAL:
			case NUMERICLITERAL:
			case ADD:
			case AFTER:
			case ALL:
			case ALLOCATE:
			case ALLOW:
			case ALTER:
			case ALTERAND:
			case ANY:
			case ARRAY:
			case ARRAY_EXISTS:
			case AS:
			case ASENSITIVE:
			case ASSOCIATE:
			case ASUTIME:
			case AT:
			case AUDIT:
			case AUX:
			case AUXILIARY:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BUFFERPOOL:
			case BY:
			case CALL:
			case CAPTURE:
			case CASCADED:
			case CASE:
			case CAST:
			case CCSID:
			case CHAR:
			case CHARACTER:
			case CHECK:
			case CLONE:
			case CLOSE:
			case CLUSTER:
			case COLLECTION:
			case COLLID:
			case COLUMN:
			case COMMENT:
			case COMMIT:
			case CONCAT:
			case CONDITION:
			case CONNECT:
			case CONNECTION:
			case CONSTRAINT:
			case CONTAINS:
			case CONTENT:
			case CONTINUE:
			case CREATE:
			case CUBE:
			case CURRENT:
			case CURRENT_LC_CTYPE:
			case CURRVAL:
			case CURSOR:
			case DATA:
			case DATABASE:
			case DAY:
			case DAYS:
			case DBINFO:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DISABLE:
			case DISALLOW:
			case DISTINCT:
			case DO:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSSIZE:
			case DYNAMIC:
			case EDITPROC:
			case ELSE:
			case ELSEIF:
			case ENCODING:
			case ENCRYPTION:
			case END:
			case END_EXEC:
			case ENDING:
			case ERASE:
			case ESCAPE:
			case EXCEPT:
			case EXCEPTION:
			case EXEC_SQL:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case FENCED:
			case FETCH:
			case FIELDPROC:
			case FINAL:
			case FIRST:
			case FOR:
			case FREE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANT:
			case GROUP:
			case HANDLER:
			case HAVING:
			case HOLD:
			case HOUR:
			case HOURS:
			case IF:
			case IMMEDIATE:
			case IN:
			case INCLUSIVE:
			case INDEX:
			case INDEXBP:
			case INHERIT:
			case INNER:
			case INOUT:
			case INSENSITIVE:
			case INSERT:
			case INTERSECT:
			case INTO:
			case IS:
			case ISOBID:
			case ITERATE:
			case JAR:
			case JOIN:
			case KEEP:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LAST:
			case LC_CTYPE:
			case LEAVE:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOCALE:
			case LOCATOR:
			case LOCATORS:
			case LOCK:
			case LOCKMAX:
			case LOCKSIZE:
			case LONG:
			case LOOP:
			case MAINTAINED:
			case MATERIALIZED:
			case MICROSECOND:
			case MICROSECONDS:
			case MODIFIES:
			case MONTH:
			case MONTHS:
			case NEXT:
			case NEXTVAL:
			case NO:
			case NONE:
			case NOT:
			case NULL:
			case NULLS:
			case NUMPARTS:
			case OBID:
			case OF:
			case OFFSET:
			case OLD:
			case ON:
			case OPEN:
			case OPTIMIZATION:
			case OPTIMIZE:
			case OR:
			case ORDER:
			case ORGANIZATION:
			case OUT:
			case OUTER:
			case PACKAGE:
			case PADDED:
			case PARAMETER:
			case PART:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONING:
			case PATH:
			case PERIOD:
			case PIECESIZE:
			case PLAN:
			case PRECISION:
			case PREPARE:
			case PREVVAL:
			case PRIOR:
			case PRIQTY:
			case PRIVILEGES:
			case PROCEDURE:
			case PROGRAM:
			case PSID:
			case PUBLIC:
			case QUERY:
			case QUERYNO:
			case READS:
			case REFERENCES:
			case REFRESH:
			case RELEASE:
			case RENAME:
			case REPEAT:
			case RESIGNAL:
			case RESTRICT:
			case RESULT:
			case RESULT_SET_LOCATOR:
			case RETURN:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUND_CEILING:
			case ROUND_DOWN:
			case ROUND_FLOOR:
			case ROUND_HALF_DOWN:
			case ROUND_HALF_EVEN:
			case ROUND_HALF_UP:
			case ROUND_UP:
			case ROW:
			case ROWSET:
			case RUN:
			case SAVEPOINT:
			case SCHEMA:
			case SCRATCHPAD:
			case SECOND:
			case SECONDS:
			case SECQTY:
			case SECURITY:
			case SELECT:
			case SENSITIVE:
			case SEQUENCE:
			case SET:
			case SIGNAL:
			case SIMPLE:
			case SOME:
			case SOURCE:
			case SPECIFIC:
			case STANDARD:
			case STATEMENT:
			case STATIC:
			case STAY:
			case STOGROUP:
			case STORES:
			case STYLE:
			case SUMMARY:
			case SYNONYM:
			case SYSDATE:
			case SYSTEM:
			case SYSTIMESTAMP:
			case TABLE:
			case TABLESPACE:
			case THEN:
			case TO:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNDO:
			case UNION:
			case UNIQUE:
			case UNTIL:
			case UPDATE:
			case USING:
			case VALIDPROC:
			case VALUE:
			case VALUES:
			case VARIABLE:
			case VARIANT:
			case VCAT:
			case VERSIONING:
			case VIEW:
			case VOLATILE:
			case VOLUMES:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WLM:
			case XMLCAST:
			case XMLEXISTS:
			case XMLNAMESPACES:
			case YEAR:
			case YEARS:
			case ZONE:
			case AND:
			case ARRAY_AGG:
			case ASC:
			case AVG:
			case BIT:
			case CHANGE:
			case CODEUNITS16:
			case CODEUNITS32:
			case CORR:
			case CORRELATION:
			case COUNT:
			case COUNT_BIG:
			case COVAR:
			case COVARIANCE:
			case COVARIANCE_SAMP:
			case COVAR_POP:
			case COVAR_SAMP:
			case CS:
			case CUME_DIST:
			case DENSE_RANK:
			case DESC:
			case EBCDIC:
			case EXCLUSIVE:
			case FIRST_VALUE:
			case FOLLOWING:
			case GROUPING:
			case IGNORE:
			case INDICATOR:
			case INPUT:
			case ISNULL:
			case LAG:
			case LARGE:
			case LAST_VALUE:
			case LEAD:
			case LISTAGG:
			case LOCKED:
			case LOCKS:
			case MEDIAN:
			case MINUTES:
			case MIXED:
			case NOTNULL:
			case NTH_VALUE:
			case NTILE:
			case NUMERIC:
			case OBJECT:
			case OCTETS:
			case ONLY:
			case OVER:
			case PASSING:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PERCENT_RANK:
			case PRECEDING:
			case PREVIOUS:
			case RANGE:
			case RANK:
			case RATIO_TO_REPORT:
			case READ:
			case REF:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_ICPT:
			case REGR_INTERCEPT:
			case REGR_R2:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case RESPECT:
			case ROW_NUMBER:
			case ROWS:
			case RR:
			case RS:
			case SBCS:
			case SELECTIVITY:
			case SETS:
			case SHARE:
			case SKIP_:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case TOKEN:
			case UNBOUNDED:
			case UNPACK:
			case UR:
			case USE:
			case VAR:
			case VARIANCE:
			case VARIANCE_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARYING:
			case WITHOUT:
			case XML:
			case XMLAGG:
			case COLUMNS:
			case SQLID:
			case ORDINALITY:
			case SYSTEM_TIME:
			case BUSINESS_TIME:
			case MULTIPLIER:
			case UNNEST:
			case CROSS:
			case CALLER:
			case CLIENT:
			case POSITIONING:
			case SCROLL:
			case ACTION:
			case ASSEMBLE:
			case C_:
			case CALLED:
			case COBOL:
			case DB2:
			case DEFINER:
			case DISPATCH:
			case ENVIRONMENT:
			case FAILURE:
			case FAILURES:
			case JAVA:
			case MAIN:
			case NAME:
			case OPTIONS:
			case PARALLEL:
			case PLI:
			case REGISTERS:
			case RESIDENT:
			case SECURED:
			case SPECIAL:
			case SQL:
			case STOP:
			case SUB:
			case YES:
			case APPLICATION:
			case CHANGED:
			case COMPATIBILITY:
			case COMPRESS:
			case COPY:
			case FREEPAGE:
			case GBPCACHE:
			case INCLUDE:
			case MAXVALUE:
			case MINVALUE:
			case PCTFREE:
			case REGENERATE:
			case SEQTY:
			case MASK:
			case ENABLE:
			case PERMISSION:
			case ATOMIC:
			case SQLEXCEPTION:
			case MERGE:
			case MATCHED:
			case SQLSTATE:
			case MESSAGE_TEXT:
			case OVERRIDING:
			case PORTION:
			case DB2SQL:
			case DEBUG:
			case GENERAL:
			case MODE_:
			case REXX:
			case CACHE:
			case CYCLE:
			case INCREMENT:
			case RESTART:
			case DATACLAS:
			case MGMTCLAS:
			case REMOVE:
			case STORCLAS:
			case ACCESS:
			case ACTIVATE:
			case ALWAYS:
			case APPEND:
			case ARCHIVE:
			case BUSINESS:
			case CASCADE:
			case CHANGES:
			case CONTROL:
			case DEACTIVATE:
			case DEFERRED:
			case EACH:
			case ENFORCED:
			case EXTRA:
			case FOREIGN:
			case HIDDEN_:
			case HISTORY:
			case ID:
			case IDENTITY:
			case IMPLICITLY:
			case INITIALLY:
			case INLINE:
			case OPERATION:
			case ORGANIZE:
			case OVERLAPS:
			case PACKAGE_NAME:
			case PACKAGE_SCHEMA:
			case PACKAGE_VERSION:
			case PRIMARY:
			case RESET:
			case ROTATE:
			case START:
			case SYSIBM:
			case TRANSACTION:
			case ABS:
			case ABSVAL:
			case ACOS:
			case ADD_DAYS:
			case ADD_MONTHS:
			case ARRAY_DELETE:
			case ARRAY_FIRST:
			case ARRAY_LAST:
			case ARRAY_NEXT:
			case ARRAY_PRIOR:
			case ARRAY_TRIM:
			case ASCII:
			case ASCII_CHR:
			case ASCIISTR:
			case ASCII_STR:
			case ASIN:
			case ATAN:
			case ATAN2:
			case ATANH:
			case BIGINT:
			case BINARY:
			case BITAND:
			case BITANDNOT:
			case BITNOT:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BTRIM:
			case CARDINALITY:
			case CCSID_ENCODING:
			case CEIL:
			case CEILING:
			case CHAR9:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case CHR:
			case CLOB:
			case COALESCE:
			case COLLATION_KEY:
			case COMPARE_DECFLOAT:
			case COS:
			case COSH:
			case DATE:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFWEEK_ISO:
			case DAYOFYEAR:
			case DAYS_BETWEEN:
			case DBCLOB:
			case DEC:
			case DECFLOAT:
			case DECFLOAT_FORMAT:
			case DECFLOAT_SORTKEY:
			case DECIMAL:
			case DECODE:
			case DECRYPT_BINARY:
			case DECRYPT_BIT:
			case DECRYPT_CHAR:
			case DECRYPT_DATAKEY_BIGINT:
			case DECRYPT_DATAKEY_BIT:
			case DECRYPT_DATAKEY_CLOB:
			case DECRYPT_DATAKEY_DBCLOB:
			case DECRYPT_DATAKEY_DECIMAL:
			case DECRYPT_DATAKEY_INTEGER:
			case DECRYPT_DATAKEY_VARCHAR:
			case DECRYPT_DATAKEY_VARGRAPHIC:
			case DECRYPT_DB:
			case DEGREES:
			case DIFFERENCE:
			case DIGITS:
			case DOUBLE_PRECISION:
			case DSN_XMLVALIDATE:
			case EBCDIC_CHR:
			case EBCDIC_STR:
			case ENCRYPT_DATAKEY:
			case ENCRYPT_TDES:
			case EXP:
			case EXTRACT:
			case FLOAT:
			case FLOOR:
			case GENERATE_UNIQUE:
			case GENERATE_UNIQUE_BINARY:
			case GETHINT:
			case GETVARIABLE:
			case GRAPHIC:
			case GREATEST:
			case HASH:
			case HASH_CRC32:
			case HASH_MD5:
			case HASH_SHA1:
			case HASH_SHA256:
			case HEX:
			case IDENTITY_VAL_LOCAL:
			case IFNULL:
			case INSTR:
			case INT:
			case INTEGER:
			case JULIAN_DAY:
			case LAST_DAY:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LN:
			case LOCATE:
			case LOCATE_IN_STRING:
			case LOG10:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAX:
			case MAX_CARDINALITY:
			case MIDNIGHT_SECONDS:
			case MIN:
			case MINUTE:
			case MOD:
			case MONTHS_BETWEEN:
			case MQREAD:
			case MQREADCLOB:
			case MQRECEIVE:
			case MQRECEIVECLOB:
			case MQSEND:
			case MULTIPLY_ALT:
			case NEXT_DAY:
			case NEXT_MONTH:
			case NORMALIZE_DECFLOAT:
			case NORMALIZE_STRING:
			case NULLIF:
			case NVL:
			case OVERLAY:
			case PACK:
			case POSITION:
			case POSSTR:
			case POW:
			case POWER:
			case QUANTIZE:
			case QUARTER:
			case RADIANS:
			case RAISE_ERROR:
			case RAND:
			case RANDOM:
			case REAL:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REPLACE:
			case RID:
			case ROUND:
			case ROUND_TIMESTAMP:
			case ROWID:
			case RPAD:
			case RTRIM:
			case SCORE:
			case SIGN:
			case SIN:
			case SINH:
			case SMALLINT:
			case SOAPHTTPC:
			case SOAPHTTPNC:
			case SOAPHTTPNV:
			case SOAPHTTPV:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STRIP:
			case STRLEFT:
			case STRPOS:
			case STRRIGHT:
			case SUBSTR:
			case SUBSTRING:
			case TAN:
			case TANH:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIMESTAMP_FORMAT:
			case TIMESTAMP_ISO:
			case TIMESTAMP_TZ:
			case TO_CHAR:
			case TO_CLOB:
			case TO_DATE:
			case TO_NUMBER:
			case TOTALORDER:
			case TO_TIMESTAMP:
			case TRANSLATE:
			case TRIM:
			case TRIM_ARRAY:
			case TRUNC:
			case TRUNC_TIMESTAMP:
			case UCASE:
			case UNICODE:
			case UNICODE_STR:
			case UNISTR:
			case UPPER:
			case VARBINARY:
			case VARCHAR:
			case VARCHAR9:
			case VARCHAR_BIT_FORMAT:
			case VARCHAR_FORMAT:
			case VARGRAPHIC:
			case VERIFY_GROUP_FOR_USER:
			case VERIFY_ROLE_FOR_USER:
			case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
			case WEEK:
			case WEEK_ISO:
			case WRAP:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLCONCAT:
			case XMLDOCUMENT:
			case XMLELEMENT:
			case XMLFOREST:
			case XMLMODIFY:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLSERIALIZE:
			case XMLTEXT:
			case XMLXSROBJECTID:
			case XSLTRANSFORM:
			case CURRENT_ACCELERATOR:
			case CURRENT_APPLICATION_COMPATIBILITY:
			case CURRENT_APPLICATION_ENCODING_SCHEME:
			case CURRENT_CLIENT_ACCTNG:
			case CURRENT_CLIENT_APPLNAME:
			case CURRENT_CLIENT_CORR_TOKEN:
			case CURRENT_CLIENT_USERID:
			case CURRENT_CLIENT_WRKSTNNAME:
			case CURRENT_DATE:
			case CURRENT_DEBUG_MODE:
			case CURRENT_DECFLOAT_ROUNDING_MODE:
			case CURRENT_DEGREE:
			case CURRENT_EXPLAIN_MODE:
			case CURRENT_GET_ACCEL_ARCHIVE:
			case CURRENT_LOCALE_LC_CTYPE:
			case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
			case CURRENT_MEMBER:
			case CURRENT_OPTIMIZATION_HINT:
			case CURRENT_PACKAGE_PATH:
			case CURRENT_PACKAGESET:
			case CURRENT_PATH:
			case CURRENT_PRECISION:
			case CURRENT_QUERY_ACCELERATION:
			case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
			case CURRENT_REFRESH_AGE:
			case CURRENT_ROUTINE_VERSION:
			case CURRENT_RULES:
			case CURRENT_SCHEMA:
			case CURRENT_SERVER:
			case CURRENT_SQLID:
			case CURRENT_TEMPORAL_BUSINESS_TIME:
			case CURRENT_TEMPORAL_SYSTEM_TIME:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_TIME_ZONE:
			case ENCRYPTION_PASSWORD:
			case SESSION_TIME_ZONE:
			case SESSION_USER:
			case USER:
			case ADMIN_TASK_LIST:
			case ADMIN_TASK_OUTPUT:
			case ADMIN_TASK_STATUS:
			case BLOCKING_THREADS:
			case MQREADALL:
			case MQREADALLCLOB:
			case MQRECEIVEALL:
			case MQRECEIVEALLCLOB:
			case XMLTABLE:
			case SQLIDENTIFIER:
				{
				setState(2842);
				expression();
				}
				break;
			case SPLAT:
				{
				setState(2843);
				match(SPLAT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2846);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RegressionFunctionInvocationContext extends ParserRuleContext {
		public RegressionFunctionContext regressionFunction() {
			return getRuleContext(RegressionFunctionContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(DB2zSQLParser.COMMA, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public RegressionFunctionInvocationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regressionFunctionInvocation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRegressionFunctionInvocation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRegressionFunctionInvocation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRegressionFunctionInvocation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RegressionFunctionInvocationContext regressionFunctionInvocation() throws RecognitionException {
		RegressionFunctionInvocationContext _localctx = new RegressionFunctionInvocationContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_regressionFunctionInvocation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2851);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,319,_ctx) ) {
			case 1:
				{
				setState(2848);
				schemaName();
				setState(2849);
				match(DOT);
				}
				break;
			}
			setState(2853);
			regressionFunction();
			setState(2854);
			match(LPAREN);
			setState(2855);
			expression();
			setState(2856);
			match(COMMA);
			setState(2857);
			expression();
			setState(2858);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExternalFunctionInvocationContext extends ParserRuleContext {
		public TerminalNode SQLIDENTIFIER() { return getToken(DB2zSQLParser.SQLIDENTIFIER, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public ExternalFunctionInvocationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_externalFunctionInvocation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterExternalFunctionInvocation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitExternalFunctionInvocation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitExternalFunctionInvocation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExternalFunctionInvocationContext externalFunctionInvocation() throws RecognitionException {
		ExternalFunctionInvocationContext _localctx = new ExternalFunctionInvocationContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_externalFunctionInvocation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2863);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,320,_ctx) ) {
			case 1:
				{
				setState(2860);
				schemaName();
				setState(2861);
				match(DOT);
				}
				break;
			}
			setState(2865);
			match(SQLIDENTIFIER);
			setState(2866);
			match(LPAREN);
			setState(2867);
			expression();
			setState(2872);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2868);
				match(COMMA);
				setState(2869);
				expression();
				}
				}
				setState(2874);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2875);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LabeledDurationContext extends ParserRuleContext {
		public TerminalNode YEAR() { return getToken(DB2zSQLParser.YEAR, 0); }
		public TerminalNode YEARS() { return getToken(DB2zSQLParser.YEARS, 0); }
		public TerminalNode MONTH() { return getToken(DB2zSQLParser.MONTH, 0); }
		public TerminalNode MONTHS() { return getToken(DB2zSQLParser.MONTHS, 0); }
		public TerminalNode DAY() { return getToken(DB2zSQLParser.DAY, 0); }
		public TerminalNode DAYS() { return getToken(DB2zSQLParser.DAYS, 0); }
		public TerminalNode HOUR() { return getToken(DB2zSQLParser.HOUR, 0); }
		public TerminalNode HOURS() { return getToken(DB2zSQLParser.HOURS, 0); }
		public TerminalNode MINUTE() { return getToken(DB2zSQLParser.MINUTE, 0); }
		public TerminalNode MINUTES() { return getToken(DB2zSQLParser.MINUTES, 0); }
		public TerminalNode SECOND() { return getToken(DB2zSQLParser.SECOND, 0); }
		public TerminalNode SECONDS() { return getToken(DB2zSQLParser.SECONDS, 0); }
		public TerminalNode MICROSECOND() { return getToken(DB2zSQLParser.MICROSECOND, 0); }
		public TerminalNode MICROSECONDS() { return getToken(DB2zSQLParser.MICROSECONDS, 0); }
		public FunctionInvocationContext functionInvocation() {
			return getRuleContext(FunctionInvocationContext.class,0);
		}
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public LabeledDurationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_labeledDuration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterLabeledDuration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitLabeledDuration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitLabeledDuration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LabeledDurationContext labeledDuration() throws RecognitionException {
		LabeledDurationContext _localctx = new LabeledDurationContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_labeledDuration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2885);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,322,_ctx) ) {
			case 1:
				{
				setState(2877);
				functionInvocation();
				}
				break;
			case 2:
				{
				{
				setState(2878);
				match(LPAREN);
				setState(2879);
				expression();
				setState(2880);
				match(RPAREN);
				}
				}
				break;
			case 3:
				{
				setState(2882);
				match(INTEGERLITERAL);
				}
				break;
			case 4:
				{
				setState(2883);
				columnName();
				}
				break;
			case 5:
				{
				setState(2884);
				variable();
				}
				break;
			}
			setState(2887);
			_la = _input.LA(1);
			if ( !(((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & ((1L << (DAY - 85)) | (1L << (DAYS - 85)) | (1L << (HOUR - 85)) | (1L << (HOURS - 85)))) != 0) || ((((_la - 181)) & ~0x3f) == 0 && ((1L << (_la - 181)) & ((1L << (MICROSECOND - 181)) | (1L << (MICROSECONDS - 181)) | (1L << (MONTH - 181)) | (1L << (MONTHS - 181)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (SECOND - 261)) | (1L << (SECONDS - 261)) | (1L << (YEAR - 261)) | (1L << (YEARS - 261)))) != 0) || _la==MINUTES || _la==MINUTE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlCastSpecificationContext extends ParserRuleContext {
		public TerminalNode XMLCAST() { return getToken(DB2zSQLParser.XMLCAST, 0); }
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public ParameterMarkerContext parameterMarker() {
			return getRuleContext(ParameterMarkerContext.class,0);
		}
		public XmlCastSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlCastSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterXmlCastSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitXmlCastSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitXmlCastSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlCastSpecificationContext xmlCastSpecification() throws RecognitionException {
		XmlCastSpecificationContext _localctx = new XmlCastSpecificationContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_xmlCastSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2889);
			match(XMLCAST);
			setState(2893);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,323,_ctx) ) {
			case 1:
				{
				setState(2890);
				expression();
				}
				break;
			case 2:
				{
				setState(2891);
				match(NULL);
				}
				break;
			case 3:
				{
				setState(2892);
				parameterMarker();
				}
				break;
			}
			setState(2895);
			match(AS);
			setState(2896);
			dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArrayElementSpecificationContext extends ParserRuleContext {
		public ArrayExpressionContext arrayExpression() {
			return getRuleContext(ArrayExpressionContext.class,0);
		}
		public TerminalNode OPENSQBRACKET() { return getToken(DB2zSQLParser.OPENSQBRACKET, 0); }
		public ArrayIndexContext arrayIndex() {
			return getRuleContext(ArrayIndexContext.class,0);
		}
		public TerminalNode CLOSESQBRACKET() { return getToken(DB2zSQLParser.CLOSESQBRACKET, 0); }
		public ArrayElementSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arrayElementSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterArrayElementSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitArrayElementSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitArrayElementSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArrayElementSpecificationContext arrayElementSpecification() throws RecognitionException {
		ArrayElementSpecificationContext _localctx = new ArrayElementSpecificationContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_arrayElementSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2898);
			arrayExpression();
			setState(2899);
			match(OPENSQBRACKET);
			setState(2900);
			arrayIndex();
			setState(2901);
			match(CLOSESQBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArrayIndexContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<OperatorContext> operator() {
			return getRuleContexts(OperatorContext.class);
		}
		public OperatorContext operator(int i) {
			return getRuleContext(OperatorContext.class,i);
		}
		public ArrayIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arrayIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterArrayIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitArrayIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitArrayIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArrayIndexContext arrayIndex() throws RecognitionException {
		ArrayIndexContext _localctx = new ArrayIndexContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_arrayIndex);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2903);
			expression();
			setState(2910);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAREN) | (1L << PLUS) | (1L << MINUS) | (1L << SPLAT) | (1L << SLASH) | (1L << CONCATOP) | (1L << COLON) | (1L << NONNUMERICLITERAL) | (1L << INTEGERLITERAL) | (1L << NUMERICLITERAL) | (1L << ADD) | (1L << AFTER) | (1L << ALL) | (1L << ALLOCATE) | (1L << ALLOW) | (1L << ALTER) | (1L << ALTERAND) | (1L << ANY) | (1L << ARRAY) | (1L << ARRAY_EXISTS) | (1L << AS) | (1L << ASENSITIVE) | (1L << ASSOCIATE) | (1L << ASUTIME) | (1L << AT) | (1L << AUDIT) | (1L << AUX) | (1L << AUXILIARY) | (1L << BEFORE) | (1L << BEGIN) | (1L << BETWEEN) | (1L << BUFFERPOOL) | (1L << BY) | (1L << CALL) | (1L << CAPTURE) | (1L << CASCADED) | (1L << CASE) | (1L << CAST) | (1L << CCSID) | (1L << CHAR) | (1L << CHARACTER) | (1L << CHECK) | (1L << CLONE) | (1L << CLOSE) | (1L << CLUSTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLLECTION - 64)) | (1L << (COLLID - 64)) | (1L << (COLUMN - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (CONCAT - 64)) | (1L << (CONDITION - 64)) | (1L << (CONNECT - 64)) | (1L << (CONNECTION - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONTAINS - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CREATE - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT - 64)) | (1L << (CURRENT_LC_CTYPE - 64)) | (1L << (CURRVAL - 64)) | (1L << (CURSOR - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DAYS - 64)) | (1L << (DBINFO - 64)) | (1L << (DECLARE - 64)) | (1L << (DEFAULT - 64)) | (1L << (DELETE - 64)) | (1L << (DESCRIPTOR - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DISABLE - 64)) | (1L << (DISALLOW - 64)) | (1L << (DISTINCT - 64)) | (1L << (DO - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (DSSIZE - 64)) | (1L << (DYNAMIC - 64)) | (1L << (EDITPROC - 64)) | (1L << (ELSE - 64)) | (1L << (ELSEIF - 64)) | (1L << (ENCODING - 64)) | (1L << (ENCRYPTION - 64)) | (1L << (END - 64)) | (1L << (END_EXEC - 64)) | (1L << (ENDING - 64)) | (1L << (ERASE - 64)) | (1L << (ESCAPE - 64)) | (1L << (EXCEPT - 64)) | (1L << (EXCEPTION - 64)) | (1L << (EXEC_SQL - 64)) | (1L << (EXECUTE - 64)) | (1L << (EXISTS - 64)) | (1L << (EXIT - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FENCED - 64)) | (1L << (FETCH - 64)) | (1L << (FIELDPROC - 64)) | (1L << (FINAL - 64)) | (1L << (FIRST - 64)) | (1L << (FOR - 64)) | (1L << (FREE - 64)) | (1L << (FROM - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GENERATED - 128)) | (1L << (GET - 128)) | (1L << (GLOBAL - 128)) | (1L << (GO - 128)) | (1L << (GOTO - 128)) | (1L << (GRANT - 128)) | (1L << (GROUP - 128)) | (1L << (HANDLER - 128)) | (1L << (HAVING - 128)) | (1L << (HOLD - 128)) | (1L << (HOUR - 128)) | (1L << (HOURS - 128)) | (1L << (IF - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (IN - 128)) | (1L << (INCLUSIVE - 128)) | (1L << (INDEX - 128)) | (1L << (INDEXBP - 128)) | (1L << (INHERIT - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSENSITIVE - 128)) | (1L << (INSERT - 128)) | (1L << (INTERSECT - 128)) | (1L << (INTO - 128)) | (1L << (IS - 128)) | (1L << (ISOBID - 128)) | (1L << (ITERATE - 128)) | (1L << (JAR - 128)) | (1L << (JOIN - 128)) | (1L << (KEEP - 128)) | (1L << (KEY - 128)) | (1L << (LABEL - 128)) | (1L << (LANGUAGE - 128)) | (1L << (LAST - 128)) | (1L << (LC_CTYPE - 128)) | (1L << (LEAVE - 128)) | (1L << (LEFT - 128)) | (1L << (LIKE - 128)) | (1L << (LIMIT - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCALE - 128)) | (1L << (LOCATOR - 128)) | (1L << (LOCATORS - 128)) | (1L << (LOCK - 128)) | (1L << (LOCKMAX - 128)) | (1L << (LOCKSIZE - 128)) | (1L << (LONG - 128)) | (1L << (LOOP - 128)) | (1L << (MAINTAINED - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MICROSECOND - 128)) | (1L << (MICROSECONDS - 128)) | (1L << (MODIFIES - 128)) | (1L << (MONTH - 128)) | (1L << (MONTHS - 128)) | (1L << (NEXT - 128)) | (1L << (NEXTVAL - 128)) | (1L << (NO - 128)) | (1L << (NONE - 128)) | (1L << (NOT - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (NULL - 192)) | (1L << (NULLS - 192)) | (1L << (NUMPARTS - 192)) | (1L << (OBID - 192)) | (1L << (OF - 192)) | (1L << (OFFSET - 192)) | (1L << (OLD - 192)) | (1L << (ON - 192)) | (1L << (OPEN - 192)) | (1L << (OPTIMIZATION - 192)) | (1L << (OPTIMIZE - 192)) | (1L << (OR - 192)) | (1L << (ORDER - 192)) | (1L << (ORGANIZATION - 192)) | (1L << (OUT - 192)) | (1L << (OUTER - 192)) | (1L << (PACKAGE - 192)) | (1L << (PADDED - 192)) | (1L << (PARAMETER - 192)) | (1L << (PART - 192)) | (1L << (PARTITION - 192)) | (1L << (PARTITIONED - 192)) | (1L << (PARTITIONING - 192)) | (1L << (PATH - 192)) | (1L << (PERIOD - 192)) | (1L << (PIECESIZE - 192)) | (1L << (PLAN - 192)) | (1L << (PRECISION - 192)) | (1L << (PREPARE - 192)) | (1L << (PREVVAL - 192)) | (1L << (PRIOR - 192)) | (1L << (PRIQTY - 192)) | (1L << (PRIVILEGES - 192)) | (1L << (PROCEDURE - 192)) | (1L << (PROGRAM - 192)) | (1L << (PSID - 192)) | (1L << (PUBLIC - 192)) | (1L << (QUERY - 192)) | (1L << (QUERYNO - 192)) | (1L << (READS - 192)) | (1L << (REFERENCES - 192)) | (1L << (REFRESH - 192)) | (1L << (RELEASE - 192)) | (1L << (RENAME - 192)) | (1L << (REPEAT - 192)) | (1L << (RESIGNAL - 192)) | (1L << (RESTRICT - 192)) | (1L << (RESULT - 192)) | (1L << (RESULT_SET_LOCATOR - 192)) | (1L << (RETURN - 192)) | (1L << (RETURNS - 192)) | (1L << (REVOKE - 192)) | (1L << (RIGHT - 192)) | (1L << (ROLE - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROLLUP - 192)) | (1L << (ROUND_CEILING - 192)) | (1L << (ROUND_DOWN - 192)) | (1L << (ROUND_FLOOR - 192)) | (1L << (ROUND_HALF_DOWN - 192)) | (1L << (ROUND_HALF_EVEN - 192)) | (1L << (ROUND_HALF_UP - 192)) | (1L << (ROUND_UP - 192)) | (1L << (ROW - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (ROWSET - 256)) | (1L << (RUN - 256)) | (1L << (SAVEPOINT - 256)) | (1L << (SCHEMA - 256)) | (1L << (SCRATCHPAD - 256)) | (1L << (SECOND - 256)) | (1L << (SECONDS - 256)) | (1L << (SECQTY - 256)) | (1L << (SECURITY - 256)) | (1L << (SELECT - 256)) | (1L << (SENSITIVE - 256)) | (1L << (SEQUENCE - 256)) | (1L << (SET - 256)) | (1L << (SIGNAL - 256)) | (1L << (SIMPLE - 256)) | (1L << (SOME - 256)) | (1L << (SOURCE - 256)) | (1L << (SPECIFIC - 256)) | (1L << (STANDARD - 256)) | (1L << (STATEMENT - 256)) | (1L << (STATIC - 256)) | (1L << (STAY - 256)) | (1L << (STOGROUP - 256)) | (1L << (STORES - 256)) | (1L << (STYLE - 256)) | (1L << (SUMMARY - 256)) | (1L << (SYNONYM - 256)) | (1L << (SYSDATE - 256)) | (1L << (SYSTEM - 256)) | (1L << (SYSTIMESTAMP - 256)) | (1L << (TABLE - 256)) | (1L << (TABLESPACE - 256)) | (1L << (THEN - 256)) | (1L << (TO - 256)) | (1L << (TRIGGER - 256)) | (1L << (TRUNCATE - 256)) | (1L << (TYPE - 256)) | (1L << (UNDO - 256)) | (1L << (UNION - 256)) | (1L << (UNIQUE - 256)) | (1L << (UNTIL - 256)) | (1L << (UPDATE - 256)) | (1L << (USING - 256)) | (1L << (VALIDPROC - 256)) | (1L << (VALUE - 256)) | (1L << (VALUES - 256)) | (1L << (VARIABLE - 256)) | (1L << (VARIANT - 256)) | (1L << (VCAT - 256)) | (1L << (VERSIONING - 256)) | (1L << (VIEW - 256)) | (1L << (VOLATILE - 256)) | (1L << (VOLUMES - 256)) | (1L << (WHEN - 256)) | (1L << (WHENEVER - 256)) | (1L << (WHERE - 256)) | (1L << (WHILE - 256)) | (1L << (WITH - 256)) | (1L << (WLM - 256)) | (1L << (XMLCAST - 256)) | (1L << (XMLEXISTS - 256)) | (1L << (XMLNAMESPACES - 256)) | (1L << (YEAR - 256)) | (1L << (YEARS - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (ZONE - 320)) | (1L << (AND - 320)) | (1L << (ARRAY_AGG - 320)) | (1L << (ASC - 320)) | (1L << (AVG - 320)) | (1L << (BIT - 320)) | (1L << (CHANGE - 320)) | (1L << (CODEUNITS16 - 320)) | (1L << (CODEUNITS32 - 320)) | (1L << (CORR - 320)) | (1L << (CORRELATION - 320)) | (1L << (COUNT - 320)) | (1L << (COUNT_BIG - 320)) | (1L << (COVAR - 320)) | (1L << (COVARIANCE - 320)) | (1L << (COVARIANCE_SAMP - 320)) | (1L << (COVAR_POP - 320)) | (1L << (COVAR_SAMP - 320)) | (1L << (CS - 320)) | (1L << (CUME_DIST - 320)) | (1L << (DENSE_RANK - 320)) | (1L << (DESC - 320)) | (1L << (EBCDIC - 320)) | (1L << (EXCLUSIVE - 320)) | (1L << (FIRST_VALUE - 320)) | (1L << (FOLLOWING - 320)) | (1L << (GROUPING - 320)) | (1L << (IGNORE - 320)) | (1L << (INDICATOR - 320)) | (1L << (INPUT - 320)) | (1L << (ISNULL - 320)) | (1L << (LAG - 320)) | (1L << (LARGE - 320)) | (1L << (LAST_VALUE - 320)) | (1L << (LEAD - 320)) | (1L << (LISTAGG - 320)) | (1L << (LOCKED - 320)) | (1L << (LOCKS - 320)) | (1L << (MEDIAN - 320)) | (1L << (MINUTES - 320)) | (1L << (MIXED - 320)) | (1L << (NOTNULL - 320)) | (1L << (NTH_VALUE - 320)) | (1L << (NTILE - 320)) | (1L << (NUMERIC - 320)) | (1L << (OBJECT - 320)) | (1L << (OCTETS - 320)) | (1L << (ONLY - 320)) | (1L << (OVER - 320)) | (1L << (PASSING - 320)) | (1L << (PERCENTILE_CONT - 320)) | (1L << (PERCENTILE_DISC - 320)) | (1L << (PERCENT_RANK - 320)) | (1L << (PRECEDING - 320)) | (1L << (PREVIOUS - 320)) | (1L << (RANGE - 320)) | (1L << (RANK - 320)) | (1L << (RATIO_TO_REPORT - 320)) | (1L << (READ - 320)) | (1L << (REF - 320)) | (1L << (REGR_AVGX - 320)) | (1L << (REGR_AVGY - 320)) | (1L << (REGR_COUNT - 320)) | (1L << (REGR_ICPT - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (REGR_INTERCEPT - 384)) | (1L << (REGR_R2 - 384)) | (1L << (REGR_SLOPE - 384)) | (1L << (REGR_SXX - 384)) | (1L << (REGR_SXY - 384)) | (1L << (REGR_SYY - 384)) | (1L << (RESPECT - 384)) | (1L << (ROW_NUMBER - 384)) | (1L << (ROWS - 384)) | (1L << (RR - 384)) | (1L << (RS - 384)) | (1L << (SBCS - 384)) | (1L << (SELECTIVITY - 384)) | (1L << (SETS - 384)) | (1L << (SHARE - 384)) | (1L << (SKIP_ - 384)) | (1L << (STDDEV - 384)) | (1L << (STDDEV_POP - 384)) | (1L << (STDDEV_SAMP - 384)) | (1L << (SUM - 384)) | (1L << (TOKEN - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNPACK - 384)) | (1L << (UR - 384)) | (1L << (USE - 384)) | (1L << (VAR - 384)) | (1L << (VARIANCE - 384)) | (1L << (VARIANCE_SAMP - 384)) | (1L << (VAR_POP - 384)) | (1L << (VAR_SAMP - 384)) | (1L << (VARYING - 384)) | (1L << (WITHOUT - 384)) | (1L << (XML - 384)) | (1L << (XMLAGG - 384)) | (1L << (COLUMNS - 384)) | (1L << (SQLID - 384)) | (1L << (ORDINALITY - 384)) | (1L << (SYSTEM_TIME - 384)) | (1L << (BUSINESS_TIME - 384)) | (1L << (MULTIPLIER - 384)) | (1L << (UNNEST - 384)) | (1L << (CROSS - 384)) | (1L << (CALLER - 384)) | (1L << (CLIENT - 384)) | (1L << (POSITIONING - 384)) | (1L << (SCROLL - 384)) | (1L << (ACTION - 384)) | (1L << (ASSEMBLE - 384)) | (1L << (C_ - 384)) | (1L << (CALLED - 384)) | (1L << (COBOL - 384)) | (1L << (DB2 - 384)) | (1L << (DEFINER - 384)) | (1L << (DISPATCH - 384)) | (1L << (ENVIRONMENT - 384)) | (1L << (FAILURE - 384)) | (1L << (FAILURES - 384)) | (1L << (JAVA - 384)) | (1L << (MAIN - 384)) | (1L << (NAME - 384)) | (1L << (OPTIONS - 384)) | (1L << (PARALLEL - 384)) | (1L << (PLI - 384)) | (1L << (REGISTERS - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (RESIDENT - 448)) | (1L << (SECURED - 448)) | (1L << (SPECIAL - 448)) | (1L << (SQL - 448)) | (1L << (STOP - 448)) | (1L << (SUB - 448)) | (1L << (YES - 448)) | (1L << (APPLICATION - 448)) | (1L << (CHANGED - 448)) | (1L << (COMPATIBILITY - 448)) | (1L << (COMPRESS - 448)) | (1L << (COPY - 448)) | (1L << (FREEPAGE - 448)) | (1L << (GBPCACHE - 448)) | (1L << (INCLUDE - 448)) | (1L << (MAXVALUE - 448)) | (1L << (MINVALUE - 448)) | (1L << (PCTFREE - 448)) | (1L << (REGENERATE - 448)) | (1L << (SEQTY - 448)) | (1L << (MASK - 448)) | (1L << (ENABLE - 448)) | (1L << (PERMISSION - 448)) | (1L << (ATOMIC - 448)) | (1L << (SQLEXCEPTION - 448)) | (1L << (MERGE - 448)) | (1L << (MATCHED - 448)) | (1L << (SQLSTATE - 448)) | (1L << (MESSAGE_TEXT - 448)) | (1L << (OVERRIDING - 448)) | (1L << (PORTION - 448)) | (1L << (DB2SQL - 448)) | (1L << (DEBUG - 448)) | (1L << (GENERAL - 448)) | (1L << (MODE_ - 448)) | (1L << (REXX - 448)) | (1L << (CACHE - 448)) | (1L << (CYCLE - 448)) | (1L << (INCREMENT - 448)) | (1L << (RESTART - 448)) | (1L << (DATACLAS - 448)) | (1L << (MGMTCLAS - 448)) | (1L << (REMOVE - 448)) | (1L << (STORCLAS - 448)) | (1L << (ACCESS - 448)) | (1L << (ACTIVATE - 448)) | (1L << (ALWAYS - 448)) | (1L << (APPEND - 448)) | (1L << (ARCHIVE - 448)) | (1L << (BUSINESS - 448)) | (1L << (CASCADE - 448)) | (1L << (CHANGES - 448)) | (1L << (CONTROL - 448)) | (1L << (DEACTIVATE - 448)) | (1L << (DEFERRED - 448)) | (1L << (EACH - 448)) | (1L << (ENFORCED - 448)) | (1L << (EXTRA - 448)) | (1L << (FOREIGN - 448)) | (1L << (HIDDEN_ - 448)) | (1L << (HISTORY - 448)) | (1L << (ID - 448)) | (1L << (IDENTITY - 448)) | (1L << (IMPLICITLY - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (INITIALLY - 512)) | (1L << (INLINE - 512)) | (1L << (OPERATION - 512)) | (1L << (ORGANIZE - 512)) | (1L << (OVERLAPS - 512)) | (1L << (PACKAGE_NAME - 512)) | (1L << (PACKAGE_SCHEMA - 512)) | (1L << (PACKAGE_VERSION - 512)) | (1L << (PRIMARY - 512)) | (1L << (RESET - 512)) | (1L << (ROTATE - 512)) | (1L << (START - 512)) | (1L << (SYSIBM - 512)) | (1L << (TRANSACTION - 512)) | (1L << (ABS - 512)) | (1L << (ABSVAL - 512)) | (1L << (ACOS - 512)) | (1L << (ADD_DAYS - 512)) | (1L << (ADD_MONTHS - 512)) | (1L << (ARRAY_DELETE - 512)) | (1L << (ARRAY_FIRST - 512)) | (1L << (ARRAY_LAST - 512)) | (1L << (ARRAY_NEXT - 512)) | (1L << (ARRAY_PRIOR - 512)) | (1L << (ARRAY_TRIM - 512)) | (1L << (ASCII - 512)) | (1L << (ASCII_CHR - 512)) | (1L << (ASCIISTR - 512)) | (1L << (ASCII_STR - 512)) | (1L << (ASIN - 512)) | (1L << (ATAN - 512)) | (1L << (ATAN2 - 512)) | (1L << (ATANH - 512)) | (1L << (BIGINT - 512)) | (1L << (BINARY - 512)) | (1L << (BITAND - 512)) | (1L << (BITANDNOT - 512)) | (1L << (BITNOT - 512)) | (1L << (BITOR - 512)) | (1L << (BITXOR - 512)) | (1L << (BLOB - 512)) | (1L << (BTRIM - 512)) | (1L << (CARDINALITY - 512)) | (1L << (CCSID_ENCODING - 512)) | (1L << (CEIL - 512)) | (1L << (CEILING - 512)) | (1L << (CHAR9 - 512)) | (1L << (CHARACTER_LENGTH - 512)) | (1L << (CHAR_LENGTH - 512)) | (1L << (CHR - 512)) | (1L << (CLOB - 512)) | (1L << (COALESCE - 512)) | (1L << (COLLATION_KEY - 512)) | (1L << (COMPARE_DECFLOAT - 512)) | (1L << (COS - 512)) | (1L << (COSH - 512)) | (1L << (DATE - 512)) | (1L << (DAYOFMONTH - 512)) | (1L << (DAYOFWEEK - 512)) | (1L << (DAYOFWEEK_ISO - 512)) | (1L << (DAYOFYEAR - 512)) | (1L << (DAYS_BETWEEN - 512)) | (1L << (DBCLOB - 512)) | (1L << (DEC - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (DECFLOAT - 576)) | (1L << (DECFLOAT_FORMAT - 576)) | (1L << (DECFLOAT_SORTKEY - 576)) | (1L << (DECIMAL - 576)) | (1L << (DECODE - 576)) | (1L << (DECRYPT_BINARY - 576)) | (1L << (DECRYPT_BIT - 576)) | (1L << (DECRYPT_CHAR - 576)) | (1L << (DECRYPT_DATAKEY_BIGINT - 576)) | (1L << (DECRYPT_DATAKEY_BIT - 576)) | (1L << (DECRYPT_DATAKEY_CLOB - 576)) | (1L << (DECRYPT_DATAKEY_DBCLOB - 576)) | (1L << (DECRYPT_DATAKEY_DECIMAL - 576)) | (1L << (DECRYPT_DATAKEY_INTEGER - 576)) | (1L << (DECRYPT_DATAKEY_VARCHAR - 576)) | (1L << (DECRYPT_DATAKEY_VARGRAPHIC - 576)) | (1L << (DECRYPT_DB - 576)) | (1L << (DEGREES - 576)) | (1L << (DIFFERENCE - 576)) | (1L << (DIGITS - 576)) | (1L << (DOUBLE_PRECISION - 576)) | (1L << (DSN_XMLVALIDATE - 576)) | (1L << (EBCDIC_CHR - 576)) | (1L << (EBCDIC_STR - 576)) | (1L << (ENCRYPT_DATAKEY - 576)) | (1L << (ENCRYPT_TDES - 576)) | (1L << (EXP - 576)) | (1L << (EXTRACT - 576)) | (1L << (FLOAT - 576)) | (1L << (FLOOR - 576)) | (1L << (GENERATE_UNIQUE - 576)) | (1L << (GENERATE_UNIQUE_BINARY - 576)) | (1L << (GETHINT - 576)) | (1L << (GETVARIABLE - 576)) | (1L << (GRAPHIC - 576)) | (1L << (GREATEST - 576)) | (1L << (HASH - 576)) | (1L << (HASH_CRC32 - 576)) | (1L << (HASH_MD5 - 576)) | (1L << (HASH_SHA1 - 576)) | (1L << (HASH_SHA256 - 576)) | (1L << (HEX - 576)) | (1L << (IDENTITY_VAL_LOCAL - 576)) | (1L << (IFNULL - 576)) | (1L << (INSTR - 576)) | (1L << (INT - 576)) | (1L << (INTEGER - 576)) | (1L << (JULIAN_DAY - 576)) | (1L << (LAST_DAY - 576)) | (1L << (LCASE - 576)) | (1L << (LEAST - 576)) | (1L << (LENGTH - 576)) | (1L << (LN - 576)) | (1L << (LOCATE - 576)) | (1L << (LOCATE_IN_STRING - 576)) | (1L << (LOG10 - 576)) | (1L << (LOWER - 576)) | (1L << (LPAD - 576)) | (1L << (LTRIM - 576)) | (1L << (MAX - 576)) | (1L << (MAX_CARDINALITY - 576)) | (1L << (MIDNIGHT_SECONDS - 576)) | (1L << (MIN - 576)) | (1L << (MINUTE - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (MOD - 640)) | (1L << (MONTHS_BETWEEN - 640)) | (1L << (MQREAD - 640)) | (1L << (MQREADCLOB - 640)) | (1L << (MQRECEIVE - 640)) | (1L << (MQRECEIVECLOB - 640)) | (1L << (MQSEND - 640)) | (1L << (MULTIPLY_ALT - 640)) | (1L << (NEXT_DAY - 640)) | (1L << (NEXT_MONTH - 640)) | (1L << (NORMALIZE_DECFLOAT - 640)) | (1L << (NORMALIZE_STRING - 640)) | (1L << (NULLIF - 640)) | (1L << (NVL - 640)) | (1L << (OVERLAY - 640)) | (1L << (PACK - 640)) | (1L << (POSITION - 640)) | (1L << (POSSTR - 640)) | (1L << (POW - 640)) | (1L << (POWER - 640)) | (1L << (QUANTIZE - 640)) | (1L << (QUARTER - 640)) | (1L << (RADIANS - 640)) | (1L << (RAISE_ERROR - 640)) | (1L << (RAND - 640)) | (1L << (RANDOM - 640)) | (1L << (REAL - 640)) | (1L << (REGEXP_COUNT - 640)) | (1L << (REGEXP_INSTR - 640)) | (1L << (REGEXP_LIKE - 640)) | (1L << (REGEXP_REPLACE - 640)) | (1L << (REGEXP_SUBSTR - 640)) | (1L << (REPLACE - 640)) | (1L << (RID - 640)) | (1L << (ROUND - 640)) | (1L << (ROUND_TIMESTAMP - 640)) | (1L << (ROWID - 640)) | (1L << (RPAD - 640)) | (1L << (RTRIM - 640)) | (1L << (SCORE - 640)) | (1L << (SIGN - 640)) | (1L << (SIN - 640)) | (1L << (SINH - 640)) | (1L << (SMALLINT - 640)) | (1L << (SOAPHTTPC - 640)) | (1L << (SOAPHTTPNC - 640)) | (1L << (SOAPHTTPNV - 640)) | (1L << (SOAPHTTPV - 640)) | (1L << (SOUNDEX - 640)) | (1L << (SPACE - 640)) | (1L << (SQRT - 640)) | (1L << (STRIP - 640)) | (1L << (STRLEFT - 640)) | (1L << (STRPOS - 640)) | (1L << (STRRIGHT - 640)) | (1L << (SUBSTR - 640)) | (1L << (SUBSTRING - 640)) | (1L << (TAN - 640)) | (1L << (TANH - 640)) | (1L << (TIME - 640)) | (1L << (TIMESTAMP - 640)) | (1L << (TIMESTAMPADD - 640)) | (1L << (TIMESTAMPDIFF - 640)) | (1L << (TIMESTAMP_FORMAT - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (TIMESTAMP_ISO - 704)) | (1L << (TIMESTAMP_TZ - 704)) | (1L << (TO_CHAR - 704)) | (1L << (TO_CLOB - 704)) | (1L << (TO_DATE - 704)) | (1L << (TO_NUMBER - 704)) | (1L << (TOTALORDER - 704)) | (1L << (TO_TIMESTAMP - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRIM - 704)) | (1L << (TRIM_ARRAY - 704)) | (1L << (TRUNC - 704)) | (1L << (TRUNC_TIMESTAMP - 704)) | (1L << (UCASE - 704)) | (1L << (UNICODE - 704)) | (1L << (UNICODE_STR - 704)) | (1L << (UNISTR - 704)) | (1L << (UPPER - 704)) | (1L << (VARBINARY - 704)) | (1L << (VARCHAR - 704)) | (1L << (VARCHAR9 - 704)) | (1L << (VARCHAR_BIT_FORMAT - 704)) | (1L << (VARCHAR_FORMAT - 704)) | (1L << (VARGRAPHIC - 704)) | (1L << (VERIFY_GROUP_FOR_USER - 704)) | (1L << (VERIFY_ROLE_FOR_USER - 704)) | (1L << (VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER - 704)) | (1L << (WEEK - 704)) | (1L << (WEEK_ISO - 704)) | (1L << (WRAP - 704)) | (1L << (XMLATTRIBUTES - 704)) | (1L << (XMLCOMMENT - 704)) | (1L << (XMLCONCAT - 704)) | (1L << (XMLDOCUMENT - 704)) | (1L << (XMLELEMENT - 704)) | (1L << (XMLFOREST - 704)) | (1L << (XMLMODIFY - 704)) | (1L << (XMLPARSE - 704)) | (1L << (XMLPI - 704)) | (1L << (XMLQUERY - 704)) | (1L << (XMLSERIALIZE - 704)) | (1L << (XMLTEXT - 704)) | (1L << (XMLXSROBJECTID - 704)) | (1L << (XSLTRANSFORM - 704)) | (1L << (CURRENT_ACCELERATOR - 704)) | (1L << (CURRENT_APPLICATION_COMPATIBILITY - 704)) | (1L << (CURRENT_APPLICATION_ENCODING_SCHEME - 704)) | (1L << (CURRENT_CLIENT_ACCTNG - 704)) | (1L << (CURRENT_CLIENT_APPLNAME - 704)) | (1L << (CURRENT_CLIENT_CORR_TOKEN - 704)) | (1L << (CURRENT_CLIENT_USERID - 704)) | (1L << (CURRENT_CLIENT_WRKSTNNAME - 704)) | (1L << (CURRENT_DATE - 704)) | (1L << (CURRENT_DEBUG_MODE - 704)) | (1L << (CURRENT_DECFLOAT_ROUNDING_MODE - 704)) | (1L << (CURRENT_DEGREE - 704)) | (1L << (CURRENT_EXPLAIN_MODE - 704)) | (1L << (CURRENT_GET_ACCEL_ARCHIVE - 704)) | (1L << (CURRENT_LOCALE_LC_CTYPE - 704)) | (1L << (CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION - 704)) | (1L << (CURRENT_MEMBER - 704)) | (1L << (CURRENT_OPTIMIZATION_HINT - 704)) | (1L << (CURRENT_PACKAGE_PATH - 704)) | (1L << (CURRENT_PACKAGESET - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (CURRENT_PATH - 768)) | (1L << (CURRENT_PRECISION - 768)) | (1L << (CURRENT_QUERY_ACCELERATION - 768)) | (1L << (CURRENT_QUERY_ACCELERATION_WAITFORDATA - 768)) | (1L << (CURRENT_REFRESH_AGE - 768)) | (1L << (CURRENT_ROUTINE_VERSION - 768)) | (1L << (CURRENT_RULES - 768)) | (1L << (CURRENT_SCHEMA - 768)) | (1L << (CURRENT_SERVER - 768)) | (1L << (CURRENT_SQLID - 768)) | (1L << (CURRENT_TEMPORAL_BUSINESS_TIME - 768)) | (1L << (CURRENT_TEMPORAL_SYSTEM_TIME - 768)) | (1L << (CURRENT_TIME - 768)) | (1L << (CURRENT_TIMESTAMP - 768)) | (1L << (CURRENT_TIME_ZONE - 768)) | (1L << (ENCRYPTION_PASSWORD - 768)) | (1L << (SESSION_TIME_ZONE - 768)) | (1L << (SESSION_USER - 768)) | (1L << (USER - 768)) | (1L << (ADMIN_TASK_LIST - 768)) | (1L << (ADMIN_TASK_OUTPUT - 768)) | (1L << (ADMIN_TASK_STATUS - 768)) | (1L << (BLOCKING_THREADS - 768)) | (1L << (MQREADALL - 768)) | (1L << (MQREADALLCLOB - 768)) | (1L << (MQRECEIVEALL - 768)) | (1L << (MQRECEIVEALLCLOB - 768)) | (1L << (XMLTABLE - 768)) | (1L << (SQLIDENTIFIER - 768)))) != 0)) {
				{
				{
				setState(2905);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,324,_ctx) ) {
				case 1:
					{
					setState(2904);
					operator();
					}
					break;
				}
				setState(2907);
				expression();
				}
				}
				setState(2912);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArrayConstructorContext extends ParserRuleContext {
		public TerminalNode ARRAY() { return getToken(DB2zSQLParser.ARRAY, 0); }
		public TerminalNode OPENSQBRACKET() { return getToken(DB2zSQLParser.OPENSQBRACKET, 0); }
		public TerminalNode CLOSESQBRACKET() { return getToken(DB2zSQLParser.CLOSESQBRACKET, 0); }
		public TerminalNode QUESTIONMARK() { return getToken(DB2zSQLParser.QUESTIONMARK, 0); }
		public FullSelectContext fullSelect() {
			return getRuleContext(FullSelectContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> NULL() { return getTokens(DB2zSQLParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(DB2zSQLParser.NULL, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public ArrayConstructorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arrayConstructor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterArrayConstructor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitArrayConstructor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitArrayConstructor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArrayConstructorContext arrayConstructor() throws RecognitionException {
		ArrayConstructorContext _localctx = new ArrayConstructorContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_arrayConstructor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2913);
			match(ARRAY);
			setState(2914);
			match(OPENSQBRACKET);
			setState(2931);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,329,_ctx) ) {
			case 1:
				{
				setState(2915);
				match(QUESTIONMARK);
				}
				break;
			case 2:
				{
				setState(2916);
				fullSelect();
				}
				break;
			case 3:
				{
				{
				setState(2919);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,326,_ctx) ) {
				case 1:
					{
					setState(2917);
					expression();
					}
					break;
				case 2:
					{
					setState(2918);
					match(NULL);
					}
					break;
				}
				setState(2928);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2921);
					match(COMMA);
					setState(2924);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,327,_ctx) ) {
					case 1:
						{
						setState(2922);
						expression();
						}
						break;
					case 2:
						{
						setState(2923);
						match(NULL);
						}
						break;
					}
					}
					}
					setState(2930);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			}
			setState(2933);
			match(CLOSESQBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OlapSpecificationContext extends ParserRuleContext {
		public OrderedOlapSpecificationContext orderedOlapSpecification() {
			return getRuleContext(OrderedOlapSpecificationContext.class,0);
		}
		public NumberingSpecificationContext numberingSpecification() {
			return getRuleContext(NumberingSpecificationContext.class,0);
		}
		public AggregationSpecificationContext aggregationSpecification() {
			return getRuleContext(AggregationSpecificationContext.class,0);
		}
		public OlapSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_olapSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterOlapSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitOlapSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitOlapSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OlapSpecificationContext olapSpecification() throws RecognitionException {
		OlapSpecificationContext _localctx = new OlapSpecificationContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_olapSpecification);
		try {
			setState(2938);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,330,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2935);
				orderedOlapSpecification();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2936);
				numberingSpecification();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2937);
				aggregationSpecification();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderedOlapSpecificationContext extends ParserRuleContext {
		public OlapSpecificationFunctionContext olapSpecificationFunction() {
			return getRuleContext(OlapSpecificationFunctionContext.class,0);
		}
		public TerminalNode OVER() { return getToken(DB2zSQLParser.OVER, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public WindowOrderClauseContext windowOrderClause() {
			return getRuleContext(WindowOrderClauseContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public WindowPartitionClauseContext windowPartitionClause() {
			return getRuleContext(WindowPartitionClauseContext.class,0);
		}
		public OrderedOlapSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderedOlapSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterOrderedOlapSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitOrderedOlapSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitOrderedOlapSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderedOlapSpecificationContext orderedOlapSpecification() throws RecognitionException {
		OrderedOlapSpecificationContext _localctx = new OrderedOlapSpecificationContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_orderedOlapSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2940);
			olapSpecificationFunction();
			setState(2941);
			match(OVER);
			setState(2942);
			match(LPAREN);
			setState(2944);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(2943);
				windowPartitionClause();
				}
			}

			setState(2946);
			windowOrderClause();
			setState(2947);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OlapSpecificationFunctionContext extends ParserRuleContext {
		public LagFunctionContext lagFunction() {
			return getRuleContext(LagFunctionContext.class,0);
		}
		public LeadFunctionContext leadFunction() {
			return getRuleContext(LeadFunctionContext.class,0);
		}
		public TerminalNode CUME_DIST() { return getToken(DB2zSQLParser.CUME_DIST, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(DB2zSQLParser.PERCENT_RANK, 0); }
		public TerminalNode RANK() { return getToken(DB2zSQLParser.RANK, 0); }
		public TerminalNode DENSE_RANK() { return getToken(DB2zSQLParser.DENSE_RANK, 0); }
		public TerminalNode NTILE() { return getToken(DB2zSQLParser.NTILE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public OlapSpecificationFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_olapSpecificationFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterOlapSpecificationFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitOlapSpecificationFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitOlapSpecificationFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OlapSpecificationFunctionContext olapSpecificationFunction() throws RecognitionException {
		OlapSpecificationFunctionContext _localctx = new OlapSpecificationFunctionContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_olapSpecificationFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2968);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CUME_DIST:
				{
				{
				setState(2949);
				match(CUME_DIST);
				setState(2950);
				match(LPAREN);
				setState(2951);
				match(RPAREN);
				}
				}
				break;
			case PERCENT_RANK:
				{
				{
				setState(2952);
				match(PERCENT_RANK);
				setState(2953);
				match(LPAREN);
				setState(2954);
				match(RPAREN);
				}
				}
				break;
			case RANK:
				{
				{
				setState(2955);
				match(RANK);
				setState(2956);
				match(LPAREN);
				setState(2957);
				match(RPAREN);
				}
				}
				break;
			case DENSE_RANK:
				{
				{
				setState(2958);
				match(DENSE_RANK);
				setState(2959);
				match(LPAREN);
				setState(2960);
				match(RPAREN);
				}
				}
				break;
			case NTILE:
				{
				{
				setState(2961);
				match(NTILE);
				setState(2962);
				match(LPAREN);
				setState(2963);
				expression();
				setState(2964);
				match(RPAREN);
				}
				}
				break;
			case LAG:
				{
				setState(2966);
				lagFunction();
				}
				break;
			case LEAD:
				{
				setState(2967);
				leadFunction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LagFunctionContext extends ParserRuleContext {
		public TerminalNode LAG() { return getToken(DB2zSQLParser.LAG, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode RESPECT() { return getToken(DB2zSQLParser.RESPECT, 0); }
		public TerminalNode NULLS() { return getToken(DB2zSQLParser.NULLS, 0); }
		public TerminalNode IGNORE() { return getToken(DB2zSQLParser.IGNORE, 0); }
		public LagFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lagFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterLagFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitLagFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitLagFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LagFunctionContext lagFunction() throws RecognitionException {
		LagFunctionContext _localctx = new LagFunctionContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_lagFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2970);
			match(LAG);
			setState(2971);
			match(LPAREN);
			setState(2972);
			expression();
			{
			setState(2973);
			match(COMMA);
			setState(2974);
			match(INTEGERLITERAL);
			setState(2986);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(2975);
				match(COMMA);
				setState(2976);
				expression();
				setState(2984);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2977);
					match(COMMA);
					setState(2982);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case RESPECT:
						{
						{
						setState(2978);
						match(RESPECT);
						setState(2979);
						match(NULLS);
						}
						}
						break;
					case IGNORE:
						{
						{
						setState(2980);
						match(IGNORE);
						setState(2981);
						match(NULLS);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
			}

			setState(2988);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LeadFunctionContext extends ParserRuleContext {
		public TerminalNode LEAD() { return getToken(DB2zSQLParser.LEAD, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public RespectNullsClauseContext respectNullsClause() {
			return getRuleContext(RespectNullsClauseContext.class,0);
		}
		public LeadFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_leadFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterLeadFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitLeadFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitLeadFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LeadFunctionContext leadFunction() throws RecognitionException {
		LeadFunctionContext _localctx = new LeadFunctionContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_leadFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2990);
			match(LEAD);
			setState(2991);
			match(LPAREN);
			setState(2992);
			expression();
			{
			setState(2993);
			match(COMMA);
			setState(2994);
			match(INTEGERLITERAL);
			setState(3001);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(2995);
				match(COMMA);
				setState(2996);
				expression();
				setState(2999);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2997);
					match(COMMA);
					setState(2998);
					respectNullsClause();
					}
				}

				}
			}

			setState(3003);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RespectNullsClauseContext extends ParserRuleContext {
		public TerminalNode RESPECT() { return getToken(DB2zSQLParser.RESPECT, 0); }
		public TerminalNode NULLS() { return getToken(DB2zSQLParser.NULLS, 0); }
		public TerminalNode IGNORE() { return getToken(DB2zSQLParser.IGNORE, 0); }
		public RespectNullsClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_respectNullsClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRespectNullsClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRespectNullsClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRespectNullsClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RespectNullsClauseContext respectNullsClause() throws RecognitionException {
		RespectNullsClauseContext _localctx = new RespectNullsClauseContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_respectNullsClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3009);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RESPECT:
				{
				{
				setState(3005);
				match(RESPECT);
				setState(3006);
				match(NULLS);
				}
				}
				break;
			case IGNORE:
				{
				{
				setState(3007);
				match(IGNORE);
				setState(3008);
				match(NULLS);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowPartitionClauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(DB2zSQLParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public WindowPartitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowPartitionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterWindowPartitionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitWindowPartitionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitWindowPartitionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowPartitionClauseContext windowPartitionClause() throws RecognitionException {
		WindowPartitionClauseContext _localctx = new WindowPartitionClauseContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_windowPartitionClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3011);
			match(PARTITION);
			setState(3012);
			match(BY);
			setState(3013);
			expression();
			setState(3018);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3014);
				match(COMMA);
				setState(3015);
				expression();
				}
				}
				setState(3020);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowOrderClauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(DB2zSQLParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<WindowOrderClauseQualifierContext> windowOrderClauseQualifier() {
			return getRuleContexts(WindowOrderClauseQualifierContext.class);
		}
		public WindowOrderClauseQualifierContext windowOrderClauseQualifier(int i) {
			return getRuleContext(WindowOrderClauseQualifierContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public WindowOrderClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowOrderClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterWindowOrderClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitWindowOrderClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitWindowOrderClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowOrderClauseContext windowOrderClause() throws RecognitionException {
		WindowOrderClauseContext _localctx = new WindowOrderClauseContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_windowOrderClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3021);
			match(ORDER);
			setState(3022);
			match(BY);
			setState(3023);
			expression();
			setState(3025);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(3024);
				windowOrderClauseQualifier();
				}
			}

			setState(3034);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3027);
				match(COMMA);
				setState(3028);
				expression();
				setState(3030);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					setState(3029);
					windowOrderClauseQualifier();
					}
				}

				}
				}
				setState(3036);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowOrderClauseQualifierContext extends ParserRuleContext {
		public TerminalNode ASC() { return getToken(DB2zSQLParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(DB2zSQLParser.DESC, 0); }
		public TerminalNode NULLS() { return getToken(DB2zSQLParser.NULLS, 0); }
		public TerminalNode FIRST() { return getToken(DB2zSQLParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(DB2zSQLParser.LAST, 0); }
		public WindowOrderClauseQualifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowOrderClauseQualifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterWindowOrderClauseQualifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitWindowOrderClauseQualifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitWindowOrderClauseQualifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowOrderClauseQualifierContext windowOrderClauseQualifier() throws RecognitionException {
		WindowOrderClauseQualifierContext _localctx = new WindowOrderClauseQualifierContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_windowOrderClauseQualifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3037);
			_la = _input.LA(1);
			if ( !(_la==ASC || _la==DESC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3040);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NULLS) {
				{
				setState(3038);
				match(NULLS);
				setState(3039);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumberingSpecificationContext extends ParserRuleContext {
		public TerminalNode ROW_NUMBER() { return getToken(DB2zSQLParser.ROW_NUMBER, 0); }
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public TerminalNode OVER() { return getToken(DB2zSQLParser.OVER, 0); }
		public WindowPartitionClauseContext windowPartitionClause() {
			return getRuleContext(WindowPartitionClauseContext.class,0);
		}
		public WindowOrderClauseContext windowOrderClause() {
			return getRuleContext(WindowOrderClauseContext.class,0);
		}
		public NumberingSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numberingSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterNumberingSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitNumberingSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitNumberingSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumberingSpecificationContext numberingSpecification() throws RecognitionException {
		NumberingSpecificationContext _localctx = new NumberingSpecificationContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_numberingSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3042);
			match(ROW_NUMBER);
			setState(3043);
			match(LPAREN);
			setState(3044);
			match(RPAREN);
			setState(3045);
			match(OVER);
			setState(3046);
			match(LPAREN);
			setState(3048);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(3047);
				windowPartitionClause();
				}
			}

			setState(3051);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(3050);
				windowOrderClause();
				}
			}

			setState(3053);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggregationSpecificationContext extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(DB2zSQLParser.OVER, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public AggregateFunctionInvocationContext aggregateFunctionInvocation() {
			return getRuleContext(AggregateFunctionInvocationContext.class,0);
		}
		public OlapColumnFunctionContext olapColumnFunction() {
			return getRuleContext(OlapColumnFunctionContext.class,0);
		}
		public WindowPartitionClauseContext windowPartitionClause() {
			return getRuleContext(WindowPartitionClauseContext.class,0);
		}
		public TerminalNode RANGE() { return getToken(DB2zSQLParser.RANGE, 0); }
		public TerminalNode BETWEEN() { return getToken(DB2zSQLParser.BETWEEN, 0); }
		public List<TerminalNode> UNBOUNDED() { return getTokens(DB2zSQLParser.UNBOUNDED); }
		public TerminalNode UNBOUNDED(int i) {
			return getToken(DB2zSQLParser.UNBOUNDED, i);
		}
		public TerminalNode PRECEDING() { return getToken(DB2zSQLParser.PRECEDING, 0); }
		public TerminalNode AND() { return getToken(DB2zSQLParser.AND, 0); }
		public TerminalNode FOLLOWING() { return getToken(DB2zSQLParser.FOLLOWING, 0); }
		public WindowOrderClauseContext windowOrderClause() {
			return getRuleContext(WindowOrderClauseContext.class,0);
		}
		public WindowAggregationGroupClauseContext windowAggregationGroupClause() {
			return getRuleContext(WindowAggregationGroupClauseContext.class,0);
		}
		public TerminalNode CURRENT() { return getToken(DB2zSQLParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(DB2zSQLParser.ROW, 0); }
		public AggregationSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregationSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAggregationSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAggregationSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAggregationSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggregationSpecificationContext aggregationSpecification() throws RecognitionException {
		AggregationSpecificationContext _localctx = new AggregationSpecificationContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_aggregationSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3057);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,346,_ctx) ) {
			case 1:
				{
				setState(3055);
				aggregateFunctionInvocation();
				}
				break;
			case 2:
				{
				setState(3056);
				olapColumnFunction();
				}
				break;
			}
			setState(3059);
			match(OVER);
			setState(3060);
			match(LPAREN);
			setState(3062);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(3061);
				windowPartitionClause();
				}
			}

			setState(3082);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RANGE:
				{
				{
				setState(3064);
				match(RANGE);
				setState(3065);
				match(BETWEEN);
				setState(3066);
				match(UNBOUNDED);
				setState(3067);
				match(PRECEDING);
				setState(3068);
				match(AND);
				setState(3069);
				match(UNBOUNDED);
				setState(3070);
				match(FOLLOWING);
				}
				}
				break;
			case ORDER:
				{
				{
				setState(3071);
				windowOrderClause();
				setState(3080);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,348,_ctx) ) {
				case 1:
					{
					{
					setState(3072);
					match(RANGE);
					setState(3073);
					match(BETWEEN);
					setState(3074);
					match(UNBOUNDED);
					setState(3075);
					match(PRECEDING);
					setState(3076);
					match(AND);
					setState(3077);
					match(CURRENT);
					setState(3078);
					match(ROW);
					}
					}
					break;
				case 2:
					{
					setState(3079);
					windowAggregationGroupClause();
					}
					break;
				}
				}
				}
				break;
			case RPAREN:
				break;
			default:
				break;
			}
			setState(3084);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggregateFunctionContext extends ParserRuleContext {
		public TerminalNode ARRAY_AGG() { return getToken(DB2zSQLParser.ARRAY_AGG, 0); }
		public TerminalNode AVG() { return getToken(DB2zSQLParser.AVG, 0); }
		public TerminalNode CORR() { return getToken(DB2zSQLParser.CORR, 0); }
		public TerminalNode CORRELATION() { return getToken(DB2zSQLParser.CORRELATION, 0); }
		public TerminalNode COUNT() { return getToken(DB2zSQLParser.COUNT, 0); }
		public TerminalNode COUNT_BIG() { return getToken(DB2zSQLParser.COUNT_BIG, 0); }
		public TerminalNode COVAR_POP() { return getToken(DB2zSQLParser.COVAR_POP, 0); }
		public TerminalNode COVARIANCE() { return getToken(DB2zSQLParser.COVARIANCE, 0); }
		public TerminalNode COVAR() { return getToken(DB2zSQLParser.COVAR, 0); }
		public TerminalNode COVAR_SAMP() { return getToken(DB2zSQLParser.COVAR_SAMP, 0); }
		public TerminalNode COVARIANCE_SAMP() { return getToken(DB2zSQLParser.COVARIANCE_SAMP, 0); }
		public TerminalNode CUME_DIST() { return getToken(DB2zSQLParser.CUME_DIST, 0); }
		public TerminalNode GROUPING() { return getToken(DB2zSQLParser.GROUPING, 0); }
		public TerminalNode LISTAGG() { return getToken(DB2zSQLParser.LISTAGG, 0); }
		public TerminalNode MAX() { return getToken(DB2zSQLParser.MAX, 0); }
		public TerminalNode MEDIAN() { return getToken(DB2zSQLParser.MEDIAN, 0); }
		public TerminalNode MIN() { return getToken(DB2zSQLParser.MIN, 0); }
		public TerminalNode PERCENTILE_CONT() { return getToken(DB2zSQLParser.PERCENTILE_CONT, 0); }
		public TerminalNode PERCENTILE_DISC() { return getToken(DB2zSQLParser.PERCENTILE_DISC, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(DB2zSQLParser.PERCENT_RANK, 0); }
		public TerminalNode STDDEV_POP() { return getToken(DB2zSQLParser.STDDEV_POP, 0); }
		public TerminalNode STDDEV() { return getToken(DB2zSQLParser.STDDEV, 0); }
		public TerminalNode STDDEV_SAMP() { return getToken(DB2zSQLParser.STDDEV_SAMP, 0); }
		public TerminalNode SUM() { return getToken(DB2zSQLParser.SUM, 0); }
		public TerminalNode VAR_POP() { return getToken(DB2zSQLParser.VAR_POP, 0); }
		public TerminalNode VARIANCE() { return getToken(DB2zSQLParser.VARIANCE, 0); }
		public TerminalNode VAR() { return getToken(DB2zSQLParser.VAR, 0); }
		public TerminalNode VAR_SAMP() { return getToken(DB2zSQLParser.VAR_SAMP, 0); }
		public TerminalNode VARIANCE_SAMP() { return getToken(DB2zSQLParser.VARIANCE_SAMP, 0); }
		public TerminalNode XMLAGG() { return getToken(DB2zSQLParser.XMLAGG, 0); }
		public AggregateFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregateFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAggregateFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAggregateFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAggregateFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggregateFunctionContext aggregateFunction() throws RecognitionException {
		AggregateFunctionContext _localctx = new AggregateFunctionContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_aggregateFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3086);
			_la = _input.LA(1);
			if ( !(((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (ARRAY_AGG - 322)) | (1L << (AVG - 322)) | (1L << (CORR - 322)) | (1L << (CORRELATION - 322)) | (1L << (COUNT - 322)) | (1L << (COUNT_BIG - 322)) | (1L << (COVAR - 322)) | (1L << (COVARIANCE - 322)) | (1L << (COVARIANCE_SAMP - 322)) | (1L << (COVAR_POP - 322)) | (1L << (COVAR_SAMP - 322)) | (1L << (CUME_DIST - 322)) | (1L << (GROUPING - 322)) | (1L << (LISTAGG - 322)) | (1L << (MEDIAN - 322)) | (1L << (PERCENTILE_CONT - 322)) | (1L << (PERCENTILE_DISC - 322)) | (1L << (PERCENT_RANK - 322)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (STDDEV - 400)) | (1L << (STDDEV_POP - 400)) | (1L << (STDDEV_SAMP - 400)) | (1L << (SUM - 400)) | (1L << (VAR - 400)) | (1L << (VARIANCE - 400)) | (1L << (VARIANCE_SAMP - 400)) | (1L << (VAR_POP - 400)) | (1L << (VAR_SAMP - 400)) | (1L << (XMLAGG - 400)))) != 0) || _la==MAX || _la==MIN) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RegressionFunctionContext extends ParserRuleContext {
		public TerminalNode REGR_AVGX() { return getToken(DB2zSQLParser.REGR_AVGX, 0); }
		public TerminalNode REGR_AVGY() { return getToken(DB2zSQLParser.REGR_AVGY, 0); }
		public TerminalNode REGR_COUNT() { return getToken(DB2zSQLParser.REGR_COUNT, 0); }
		public TerminalNode REGR_INTERCEPT() { return getToken(DB2zSQLParser.REGR_INTERCEPT, 0); }
		public TerminalNode REGR_ICPT() { return getToken(DB2zSQLParser.REGR_ICPT, 0); }
		public TerminalNode REGR_R2() { return getToken(DB2zSQLParser.REGR_R2, 0); }
		public TerminalNode REGR_SLOPE() { return getToken(DB2zSQLParser.REGR_SLOPE, 0); }
		public TerminalNode REGR_SXX() { return getToken(DB2zSQLParser.REGR_SXX, 0); }
		public TerminalNode REGR_SXY() { return getToken(DB2zSQLParser.REGR_SXY, 0); }
		public TerminalNode REGR_SYY() { return getToken(DB2zSQLParser.REGR_SYY, 0); }
		public RegressionFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regressionFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRegressionFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRegressionFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRegressionFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RegressionFunctionContext regressionFunction() throws RecognitionException {
		RegressionFunctionContext _localctx = new RegressionFunctionContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_regressionFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3088);
			_la = _input.LA(1);
			if ( !(((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (REGR_AVGX - 380)) | (1L << (REGR_AVGY - 380)) | (1L << (REGR_COUNT - 380)) | (1L << (REGR_ICPT - 380)) | (1L << (REGR_INTERCEPT - 380)) | (1L << (REGR_R2 - 380)) | (1L << (REGR_SLOPE - 380)) | (1L << (REGR_SXX - 380)) | (1L << (REGR_SXY - 380)) | (1L << (REGR_SYY - 380)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OlapColumnFunctionContext extends ParserRuleContext {
		public FirstValueFunctionContext firstValueFunction() {
			return getRuleContext(FirstValueFunctionContext.class,0);
		}
		public LastValueFunctionContext lastValueFunction() {
			return getRuleContext(LastValueFunctionContext.class,0);
		}
		public NthValueFunctionContext nthValueFunction() {
			return getRuleContext(NthValueFunctionContext.class,0);
		}
		public RatioToReportFunctionContext ratioToReportFunction() {
			return getRuleContext(RatioToReportFunctionContext.class,0);
		}
		public OlapColumnFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_olapColumnFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterOlapColumnFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitOlapColumnFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitOlapColumnFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OlapColumnFunctionContext olapColumnFunction() throws RecognitionException {
		OlapColumnFunctionContext _localctx = new OlapColumnFunctionContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_olapColumnFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3094);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FIRST_VALUE:
				{
				setState(3090);
				firstValueFunction();
				}
				break;
			case LAST_VALUE:
				{
				setState(3091);
				lastValueFunction();
				}
				break;
			case NTH_VALUE:
				{
				setState(3092);
				nthValueFunction();
				}
				break;
			case RATIO_TO_REPORT:
				{
				setState(3093);
				ratioToReportFunction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FirstValueFunctionContext extends ParserRuleContext {
		public TerminalNode FIRST_VALUE() { return getToken(DB2zSQLParser.FIRST_VALUE, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode COMMA() { return getToken(DB2zSQLParser.COMMA, 0); }
		public RespectNullsClauseContext respectNullsClause() {
			return getRuleContext(RespectNullsClauseContext.class,0);
		}
		public FirstValueFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_firstValueFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFirstValueFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFirstValueFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFirstValueFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FirstValueFunctionContext firstValueFunction() throws RecognitionException {
		FirstValueFunctionContext _localctx = new FirstValueFunctionContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_firstValueFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3096);
			match(FIRST_VALUE);
			setState(3097);
			match(LPAREN);
			setState(3098);
			expression();
			setState(3101);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(3099);
				match(COMMA);
				setState(3100);
				respectNullsClause();
				}
			}

			setState(3103);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LastValueFunctionContext extends ParserRuleContext {
		public TerminalNode LAST_VALUE() { return getToken(DB2zSQLParser.LAST_VALUE, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode COMMA() { return getToken(DB2zSQLParser.COMMA, 0); }
		public RespectNullsClauseContext respectNullsClause() {
			return getRuleContext(RespectNullsClauseContext.class,0);
		}
		public LastValueFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lastValueFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterLastValueFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitLastValueFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitLastValueFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LastValueFunctionContext lastValueFunction() throws RecognitionException {
		LastValueFunctionContext _localctx = new LastValueFunctionContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_lastValueFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3105);
			match(LAST_VALUE);
			setState(3106);
			match(LPAREN);
			setState(3107);
			expression();
			setState(3110);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(3108);
				match(COMMA);
				setState(3109);
				respectNullsClause();
				}
			}

			setState(3112);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NthValueFunctionContext extends ParserRuleContext {
		public TerminalNode NTH_VALUE() { return getToken(DB2zSQLParser.NTH_VALUE, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(DB2zSQLParser.COMMA, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public NthValueFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nthValueFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterNthValueFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitNthValueFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitNthValueFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NthValueFunctionContext nthValueFunction() throws RecognitionException {
		NthValueFunctionContext _localctx = new NthValueFunctionContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_nthValueFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3114);
			match(NTH_VALUE);
			setState(3115);
			match(LPAREN);
			setState(3116);
			expression();
			setState(3117);
			match(COMMA);
			setState(3118);
			match(INTEGERLITERAL);
			setState(3119);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RatioToReportFunctionContext extends ParserRuleContext {
		public TerminalNode RATIO_TO_REPORT() { return getToken(DB2zSQLParser.RATIO_TO_REPORT, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public RatioToReportFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ratioToReportFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRatioToReportFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRatioToReportFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRatioToReportFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RatioToReportFunctionContext ratioToReportFunction() throws RecognitionException {
		RatioToReportFunctionContext _localctx = new RatioToReportFunctionContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_ratioToReportFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3121);
			match(RATIO_TO_REPORT);
			setState(3122);
			match(LPAREN);
			setState(3123);
			expression();
			setState(3124);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowAggregationGroupClauseContext extends ParserRuleContext {
		public TerminalNode ROWS() { return getToken(DB2zSQLParser.ROWS, 0); }
		public TerminalNode RANGE() { return getToken(DB2zSQLParser.RANGE, 0); }
		public GroupStartContext groupStart() {
			return getRuleContext(GroupStartContext.class,0);
		}
		public GroupBetweenContext groupBetween() {
			return getRuleContext(GroupBetweenContext.class,0);
		}
		public GroupEndContext groupEnd() {
			return getRuleContext(GroupEndContext.class,0);
		}
		public WindowAggregationGroupClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowAggregationGroupClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterWindowAggregationGroupClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitWindowAggregationGroupClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitWindowAggregationGroupClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowAggregationGroupClauseContext windowAggregationGroupClause() throws RecognitionException {
		WindowAggregationGroupClauseContext _localctx = new WindowAggregationGroupClauseContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_windowAggregationGroupClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3126);
			_la = _input.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3130);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,353,_ctx) ) {
			case 1:
				{
				setState(3127);
				groupStart();
				}
				break;
			case 2:
				{
				setState(3128);
				groupBetween();
				}
				break;
			case 3:
				{
				setState(3129);
				groupEnd();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupStartContext extends ParserRuleContext {
		public UnboundedPrecedingContext unboundedPreceding() {
			return getRuleContext(UnboundedPrecedingContext.class,0);
		}
		public BoundedPrecedingContext boundedPreceding() {
			return getRuleContext(BoundedPrecedingContext.class,0);
		}
		public CurrentRowContext currentRow() {
			return getRuleContext(CurrentRowContext.class,0);
		}
		public GroupStartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupStart; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGroupStart(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGroupStart(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGroupStart(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupStartContext groupStart() throws RecognitionException {
		GroupStartContext _localctx = new GroupStartContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_groupStart);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3135);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNBOUNDED:
				{
				setState(3132);
				unboundedPreceding();
				}
				break;
			case INTEGERLITERAL:
				{
				setState(3133);
				boundedPreceding();
				}
				break;
			case CURRENT:
				{
				setState(3134);
				currentRow();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupBetweenContext extends ParserRuleContext {
		public TerminalNode BETWEEN() { return getToken(DB2zSQLParser.BETWEEN, 0); }
		public GroupBound1Context groupBound1() {
			return getRuleContext(GroupBound1Context.class,0);
		}
		public TerminalNode AND() { return getToken(DB2zSQLParser.AND, 0); }
		public GroupBound2Context groupBound2() {
			return getRuleContext(GroupBound2Context.class,0);
		}
		public GroupBetweenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupBetween; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGroupBetween(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGroupBetween(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGroupBetween(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupBetweenContext groupBetween() throws RecognitionException {
		GroupBetweenContext _localctx = new GroupBetweenContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_groupBetween);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3137);
			match(BETWEEN);
			setState(3138);
			groupBound1();
			setState(3139);
			match(AND);
			setState(3140);
			groupBound2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupEndContext extends ParserRuleContext {
		public UnboundedFollowingContext unboundedFollowing() {
			return getRuleContext(UnboundedFollowingContext.class,0);
		}
		public BoundedFollowingContext boundedFollowing() {
			return getRuleContext(BoundedFollowingContext.class,0);
		}
		public GroupEndContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupEnd; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGroupEnd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGroupEnd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGroupEnd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupEndContext groupEnd() throws RecognitionException {
		GroupEndContext _localctx = new GroupEndContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_groupEnd);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3144);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNBOUNDED:
				{
				setState(3142);
				unboundedFollowing();
				}
				break;
			case INTEGERLITERAL:
				{
				setState(3143);
				boundedFollowing();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupBound1Context extends ParserRuleContext {
		public UnboundedPrecedingContext unboundedPreceding() {
			return getRuleContext(UnboundedPrecedingContext.class,0);
		}
		public BoundedPrecedingContext boundedPreceding() {
			return getRuleContext(BoundedPrecedingContext.class,0);
		}
		public BoundedFollowingContext boundedFollowing() {
			return getRuleContext(BoundedFollowingContext.class,0);
		}
		public CurrentRowContext currentRow() {
			return getRuleContext(CurrentRowContext.class,0);
		}
		public GroupBound1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupBound1; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGroupBound1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGroupBound1(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGroupBound1(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupBound1Context groupBound1() throws RecognitionException {
		GroupBound1Context _localctx = new GroupBound1Context(_ctx, getState());
		enterRule(_localctx, 288, RULE_groupBound1);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3150);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,356,_ctx) ) {
			case 1:
				{
				setState(3146);
				unboundedPreceding();
				}
				break;
			case 2:
				{
				setState(3147);
				boundedPreceding();
				}
				break;
			case 3:
				{
				setState(3148);
				boundedFollowing();
				}
				break;
			case 4:
				{
				setState(3149);
				currentRow();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupBound2Context extends ParserRuleContext {
		public UnboundedFollowingContext unboundedFollowing() {
			return getRuleContext(UnboundedFollowingContext.class,0);
		}
		public BoundedPrecedingContext boundedPreceding() {
			return getRuleContext(BoundedPrecedingContext.class,0);
		}
		public BoundedFollowingContext boundedFollowing() {
			return getRuleContext(BoundedFollowingContext.class,0);
		}
		public CurrentRowContext currentRow() {
			return getRuleContext(CurrentRowContext.class,0);
		}
		public GroupBound2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupBound2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGroupBound2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGroupBound2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGroupBound2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupBound2Context groupBound2() throws RecognitionException {
		GroupBound2Context _localctx = new GroupBound2Context(_ctx, getState());
		enterRule(_localctx, 290, RULE_groupBound2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3156);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,357,_ctx) ) {
			case 1:
				{
				setState(3152);
				unboundedFollowing();
				}
				break;
			case 2:
				{
				setState(3153);
				boundedPreceding();
				}
				break;
			case 3:
				{
				setState(3154);
				boundedFollowing();
				}
				break;
			case 4:
				{
				setState(3155);
				currentRow();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnboundedPrecedingContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(DB2zSQLParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(DB2zSQLParser.PRECEDING, 0); }
		public UnboundedPrecedingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unboundedPreceding; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterUnboundedPreceding(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitUnboundedPreceding(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitUnboundedPreceding(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnboundedPrecedingContext unboundedPreceding() throws RecognitionException {
		UnboundedPrecedingContext _localctx = new UnboundedPrecedingContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_unboundedPreceding);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3158);
			match(UNBOUNDED);
			setState(3159);
			match(PRECEDING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnboundedFollowingContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(DB2zSQLParser.UNBOUNDED, 0); }
		public TerminalNode FOLLOWING() { return getToken(DB2zSQLParser.FOLLOWING, 0); }
		public UnboundedFollowingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unboundedFollowing; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterUnboundedFollowing(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitUnboundedFollowing(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitUnboundedFollowing(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnboundedFollowingContext unboundedFollowing() throws RecognitionException {
		UnboundedFollowingContext _localctx = new UnboundedFollowingContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_unboundedFollowing);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3161);
			match(UNBOUNDED);
			setState(3162);
			match(FOLLOWING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BoundedPrecedingContext extends ParserRuleContext {
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode PRECEDING() { return getToken(DB2zSQLParser.PRECEDING, 0); }
		public BoundedPrecedingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boundedPreceding; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterBoundedPreceding(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitBoundedPreceding(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitBoundedPreceding(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BoundedPrecedingContext boundedPreceding() throws RecognitionException {
		BoundedPrecedingContext _localctx = new BoundedPrecedingContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_boundedPreceding);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3164);
			match(INTEGERLITERAL);
			setState(3165);
			match(PRECEDING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BoundedFollowingContext extends ParserRuleContext {
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode FOLLOWING() { return getToken(DB2zSQLParser.FOLLOWING, 0); }
		public BoundedFollowingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boundedFollowing; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterBoundedFollowing(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitBoundedFollowing(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitBoundedFollowing(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BoundedFollowingContext boundedFollowing() throws RecognitionException {
		BoundedFollowingContext _localctx = new BoundedFollowingContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_boundedFollowing);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3167);
			match(INTEGERLITERAL);
			setState(3168);
			match(FOLLOWING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CurrentRowContext extends ParserRuleContext {
		public TerminalNode CURRENT() { return getToken(DB2zSQLParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(DB2zSQLParser.ROW, 0); }
		public CurrentRowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_currentRow; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCurrentRow(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCurrentRow(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCurrentRow(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CurrentRowContext currentRow() throws RecognitionException {
		CurrentRowContext _localctx = new CurrentRowContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_currentRow);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3170);
			match(CURRENT);
			setState(3171);
			match(ROW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScalarFunctionContext extends ParserRuleContext {
		public TerminalNode ABS() { return getToken(DB2zSQLParser.ABS, 0); }
		public TerminalNode ABSVAL() { return getToken(DB2zSQLParser.ABSVAL, 0); }
		public TerminalNode ACOS() { return getToken(DB2zSQLParser.ACOS, 0); }
		public TerminalNode ADD_DAYS() { return getToken(DB2zSQLParser.ADD_DAYS, 0); }
		public TerminalNode ADD_MONTHS() { return getToken(DB2zSQLParser.ADD_MONTHS, 0); }
		public TerminalNode ARRAY_DELETE() { return getToken(DB2zSQLParser.ARRAY_DELETE, 0); }
		public TerminalNode ARRAY_FIRST() { return getToken(DB2zSQLParser.ARRAY_FIRST, 0); }
		public TerminalNode ARRAY_LAST() { return getToken(DB2zSQLParser.ARRAY_LAST, 0); }
		public TerminalNode ARRAY_NEXT() { return getToken(DB2zSQLParser.ARRAY_NEXT, 0); }
		public TerminalNode ARRAY_PRIOR() { return getToken(DB2zSQLParser.ARRAY_PRIOR, 0); }
		public TerminalNode ARRAY_TRIM() { return getToken(DB2zSQLParser.ARRAY_TRIM, 0); }
		public TerminalNode ASCII() { return getToken(DB2zSQLParser.ASCII, 0); }
		public TerminalNode ASCII_CHR() { return getToken(DB2zSQLParser.ASCII_CHR, 0); }
		public TerminalNode ASCIISTR() { return getToken(DB2zSQLParser.ASCIISTR, 0); }
		public TerminalNode ASCII_STR() { return getToken(DB2zSQLParser.ASCII_STR, 0); }
		public TerminalNode ASIN() { return getToken(DB2zSQLParser.ASIN, 0); }
		public TerminalNode ATAN() { return getToken(DB2zSQLParser.ATAN, 0); }
		public TerminalNode ATAN2() { return getToken(DB2zSQLParser.ATAN2, 0); }
		public TerminalNode ATANH() { return getToken(DB2zSQLParser.ATANH, 0); }
		public TerminalNode BIGINT() { return getToken(DB2zSQLParser.BIGINT, 0); }
		public TerminalNode BINARY() { return getToken(DB2zSQLParser.BINARY, 0); }
		public TerminalNode BITAND() { return getToken(DB2zSQLParser.BITAND, 0); }
		public TerminalNode BITANDNOT() { return getToken(DB2zSQLParser.BITANDNOT, 0); }
		public TerminalNode BITNOT() { return getToken(DB2zSQLParser.BITNOT, 0); }
		public TerminalNode BITOR() { return getToken(DB2zSQLParser.BITOR, 0); }
		public TerminalNode BITXOR() { return getToken(DB2zSQLParser.BITXOR, 0); }
		public TerminalNode BLOB() { return getToken(DB2zSQLParser.BLOB, 0); }
		public TerminalNode BTRIM() { return getToken(DB2zSQLParser.BTRIM, 0); }
		public TerminalNode CARDINALITY() { return getToken(DB2zSQLParser.CARDINALITY, 0); }
		public TerminalNode CCSID_ENCODING() { return getToken(DB2zSQLParser.CCSID_ENCODING, 0); }
		public TerminalNode CEIL() { return getToken(DB2zSQLParser.CEIL, 0); }
		public TerminalNode CEILING() { return getToken(DB2zSQLParser.CEILING, 0); }
		public TerminalNode CHAR() { return getToken(DB2zSQLParser.CHAR, 0); }
		public TerminalNode CHAR9() { return getToken(DB2zSQLParser.CHAR9, 0); }
		public TerminalNode CHARACTER_LENGTH() { return getToken(DB2zSQLParser.CHARACTER_LENGTH, 0); }
		public TerminalNode CHAR_LENGTH() { return getToken(DB2zSQLParser.CHAR_LENGTH, 0); }
		public TerminalNode CHR() { return getToken(DB2zSQLParser.CHR, 0); }
		public TerminalNode CLOB() { return getToken(DB2zSQLParser.CLOB, 0); }
		public TerminalNode COALESCE() { return getToken(DB2zSQLParser.COALESCE, 0); }
		public TerminalNode COLLATION_KEY() { return getToken(DB2zSQLParser.COLLATION_KEY, 0); }
		public TerminalNode COMPARE_DECFLOAT() { return getToken(DB2zSQLParser.COMPARE_DECFLOAT, 0); }
		public TerminalNode CONCAT() { return getToken(DB2zSQLParser.CONCAT, 0); }
		public TerminalNode CONTAINS() { return getToken(DB2zSQLParser.CONTAINS, 0); }
		public TerminalNode COS() { return getToken(DB2zSQLParser.COS, 0); }
		public TerminalNode COSH() { return getToken(DB2zSQLParser.COSH, 0); }
		public TerminalNode DATE() { return getToken(DB2zSQLParser.DATE, 0); }
		public TerminalNode DAY() { return getToken(DB2zSQLParser.DAY, 0); }
		public TerminalNode DAYOFMONTH() { return getToken(DB2zSQLParser.DAYOFMONTH, 0); }
		public TerminalNode DAYOFWEEK() { return getToken(DB2zSQLParser.DAYOFWEEK, 0); }
		public TerminalNode DAYOFWEEK_ISO() { return getToken(DB2zSQLParser.DAYOFWEEK_ISO, 0); }
		public TerminalNode DAYOFYEAR() { return getToken(DB2zSQLParser.DAYOFYEAR, 0); }
		public TerminalNode DAYS() { return getToken(DB2zSQLParser.DAYS, 0); }
		public TerminalNode DAYS_BETWEEN() { return getToken(DB2zSQLParser.DAYS_BETWEEN, 0); }
		public TerminalNode DBCLOB() { return getToken(DB2zSQLParser.DBCLOB, 0); }
		public TerminalNode DEC() { return getToken(DB2zSQLParser.DEC, 0); }
		public TerminalNode DECFLOAT() { return getToken(DB2zSQLParser.DECFLOAT, 0); }
		public TerminalNode DECFLOAT_FORMAT() { return getToken(DB2zSQLParser.DECFLOAT_FORMAT, 0); }
		public TerminalNode DECFLOAT_SORTKEY() { return getToken(DB2zSQLParser.DECFLOAT_SORTKEY, 0); }
		public TerminalNode DECIMAL() { return getToken(DB2zSQLParser.DECIMAL, 0); }
		public TerminalNode DECODE() { return getToken(DB2zSQLParser.DECODE, 0); }
		public TerminalNode DECRYPT_BINARY() { return getToken(DB2zSQLParser.DECRYPT_BINARY, 0); }
		public TerminalNode DECRYPT_BIT() { return getToken(DB2zSQLParser.DECRYPT_BIT, 0); }
		public TerminalNode DECRYPT_CHAR() { return getToken(DB2zSQLParser.DECRYPT_CHAR, 0); }
		public TerminalNode DECRYPT_DATAKEY_BIGINT() { return getToken(DB2zSQLParser.DECRYPT_DATAKEY_BIGINT, 0); }
		public TerminalNode DECRYPT_DATAKEY_BIT() { return getToken(DB2zSQLParser.DECRYPT_DATAKEY_BIT, 0); }
		public TerminalNode DECRYPT_DATAKEY_CLOB() { return getToken(DB2zSQLParser.DECRYPT_DATAKEY_CLOB, 0); }
		public TerminalNode DECRYPT_DATAKEY_DBCLOB() { return getToken(DB2zSQLParser.DECRYPT_DATAKEY_DBCLOB, 0); }
		public TerminalNode DECRYPT_DATAKEY_DECIMAL() { return getToken(DB2zSQLParser.DECRYPT_DATAKEY_DECIMAL, 0); }
		public TerminalNode DECRYPT_DATAKEY_INTEGER() { return getToken(DB2zSQLParser.DECRYPT_DATAKEY_INTEGER, 0); }
		public TerminalNode DECRYPT_DATAKEY_VARCHAR() { return getToken(DB2zSQLParser.DECRYPT_DATAKEY_VARCHAR, 0); }
		public TerminalNode DECRYPT_DATAKEY_VARGRAPHIC() { return getToken(DB2zSQLParser.DECRYPT_DATAKEY_VARGRAPHIC, 0); }
		public TerminalNode DECRYPT_DB() { return getToken(DB2zSQLParser.DECRYPT_DB, 0); }
		public TerminalNode DEGREES() { return getToken(DB2zSQLParser.DEGREES, 0); }
		public TerminalNode DIFFERENCE() { return getToken(DB2zSQLParser.DIFFERENCE, 0); }
		public TerminalNode DIGITS() { return getToken(DB2zSQLParser.DIGITS, 0); }
		public TerminalNode DOUBLE() { return getToken(DB2zSQLParser.DOUBLE, 0); }
		public TerminalNode DOUBLE_PRECISION() { return getToken(DB2zSQLParser.DOUBLE_PRECISION, 0); }
		public TerminalNode DSN_XMLVALIDATE() { return getToken(DB2zSQLParser.DSN_XMLVALIDATE, 0); }
		public TerminalNode EBCDIC_CHR() { return getToken(DB2zSQLParser.EBCDIC_CHR, 0); }
		public TerminalNode EBCDIC_STR() { return getToken(DB2zSQLParser.EBCDIC_STR, 0); }
		public TerminalNode ENCRYPT_DATAKEY() { return getToken(DB2zSQLParser.ENCRYPT_DATAKEY, 0); }
		public TerminalNode ENCRYPT_TDES() { return getToken(DB2zSQLParser.ENCRYPT_TDES, 0); }
		public TerminalNode EXP() { return getToken(DB2zSQLParser.EXP, 0); }
		public TerminalNode EXTRACT() { return getToken(DB2zSQLParser.EXTRACT, 0); }
		public TerminalNode FLOAT() { return getToken(DB2zSQLParser.FLOAT, 0); }
		public TerminalNode FLOOR() { return getToken(DB2zSQLParser.FLOOR, 0); }
		public TerminalNode GENERATE_UNIQUE() { return getToken(DB2zSQLParser.GENERATE_UNIQUE, 0); }
		public TerminalNode GENERATE_UNIQUE_BINARY() { return getToken(DB2zSQLParser.GENERATE_UNIQUE_BINARY, 0); }
		public TerminalNode GETHINT() { return getToken(DB2zSQLParser.GETHINT, 0); }
		public TerminalNode GETVARIABLE() { return getToken(DB2zSQLParser.GETVARIABLE, 0); }
		public TerminalNode GRAPHIC() { return getToken(DB2zSQLParser.GRAPHIC, 0); }
		public TerminalNode GREATEST() { return getToken(DB2zSQLParser.GREATEST, 0); }
		public TerminalNode HASH() { return getToken(DB2zSQLParser.HASH, 0); }
		public TerminalNode HASH_CRC32() { return getToken(DB2zSQLParser.HASH_CRC32, 0); }
		public TerminalNode HASH_MD5() { return getToken(DB2zSQLParser.HASH_MD5, 0); }
		public TerminalNode HASH_SHA1() { return getToken(DB2zSQLParser.HASH_SHA1, 0); }
		public TerminalNode HASH_SHA256() { return getToken(DB2zSQLParser.HASH_SHA256, 0); }
		public TerminalNode HEX() { return getToken(DB2zSQLParser.HEX, 0); }
		public TerminalNode HOUR() { return getToken(DB2zSQLParser.HOUR, 0); }
		public TerminalNode IDENTITY_VAL_LOCAL() { return getToken(DB2zSQLParser.IDENTITY_VAL_LOCAL, 0); }
		public TerminalNode IFNULL() { return getToken(DB2zSQLParser.IFNULL, 0); }
		public TerminalNode INSERT() { return getToken(DB2zSQLParser.INSERT, 0); }
		public TerminalNode INSTR() { return getToken(DB2zSQLParser.INSTR, 0); }
		public TerminalNode INT() { return getToken(DB2zSQLParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(DB2zSQLParser.INTEGER, 0); }
		public TerminalNode JULIAN_DAY() { return getToken(DB2zSQLParser.JULIAN_DAY, 0); }
		public TerminalNode LAST_DAY() { return getToken(DB2zSQLParser.LAST_DAY, 0); }
		public TerminalNode LCASE() { return getToken(DB2zSQLParser.LCASE, 0); }
		public TerminalNode LEAST() { return getToken(DB2zSQLParser.LEAST, 0); }
		public TerminalNode LEFT() { return getToken(DB2zSQLParser.LEFT, 0); }
		public TerminalNode LENGTH() { return getToken(DB2zSQLParser.LENGTH, 0); }
		public TerminalNode LN() { return getToken(DB2zSQLParser.LN, 0); }
		public TerminalNode LOCATE() { return getToken(DB2zSQLParser.LOCATE, 0); }
		public TerminalNode LOCATE_IN_STRING() { return getToken(DB2zSQLParser.LOCATE_IN_STRING, 0); }
		public TerminalNode LOG10() { return getToken(DB2zSQLParser.LOG10, 0); }
		public TerminalNode LOWER() { return getToken(DB2zSQLParser.LOWER, 0); }
		public TerminalNode LPAD() { return getToken(DB2zSQLParser.LPAD, 0); }
		public TerminalNode LTRIM() { return getToken(DB2zSQLParser.LTRIM, 0); }
		public TerminalNode MAX_CARDINALITY() { return getToken(DB2zSQLParser.MAX_CARDINALITY, 0); }
		public TerminalNode MICROSECOND() { return getToken(DB2zSQLParser.MICROSECOND, 0); }
		public TerminalNode MIDNIGHT_SECONDS() { return getToken(DB2zSQLParser.MIDNIGHT_SECONDS, 0); }
		public TerminalNode MINUTE() { return getToken(DB2zSQLParser.MINUTE, 0); }
		public TerminalNode MOD() { return getToken(DB2zSQLParser.MOD, 0); }
		public TerminalNode MONTH() { return getToken(DB2zSQLParser.MONTH, 0); }
		public TerminalNode MONTHS_BETWEEN() { return getToken(DB2zSQLParser.MONTHS_BETWEEN, 0); }
		public TerminalNode MQREAD() { return getToken(DB2zSQLParser.MQREAD, 0); }
		public TerminalNode MQREADCLOB() { return getToken(DB2zSQLParser.MQREADCLOB, 0); }
		public TerminalNode MQRECEIVE() { return getToken(DB2zSQLParser.MQRECEIVE, 0); }
		public TerminalNode MQRECEIVECLOB() { return getToken(DB2zSQLParser.MQRECEIVECLOB, 0); }
		public TerminalNode MQSEND() { return getToken(DB2zSQLParser.MQSEND, 0); }
		public TerminalNode MULTIPLY_ALT() { return getToken(DB2zSQLParser.MULTIPLY_ALT, 0); }
		public TerminalNode NEXT_DAY() { return getToken(DB2zSQLParser.NEXT_DAY, 0); }
		public TerminalNode NEXT_MONTH() { return getToken(DB2zSQLParser.NEXT_MONTH, 0); }
		public TerminalNode NORMALIZE_DECFLOAT() { return getToken(DB2zSQLParser.NORMALIZE_DECFLOAT, 0); }
		public TerminalNode NORMALIZE_STRING() { return getToken(DB2zSQLParser.NORMALIZE_STRING, 0); }
		public TerminalNode NULLIF() { return getToken(DB2zSQLParser.NULLIF, 0); }
		public TerminalNode NVL() { return getToken(DB2zSQLParser.NVL, 0); }
		public TerminalNode OVERLAY() { return getToken(DB2zSQLParser.OVERLAY, 0); }
		public TerminalNode PACK() { return getToken(DB2zSQLParser.PACK, 0); }
		public TerminalNode POSITION() { return getToken(DB2zSQLParser.POSITION, 0); }
		public TerminalNode POSSTR() { return getToken(DB2zSQLParser.POSSTR, 0); }
		public TerminalNode POW() { return getToken(DB2zSQLParser.POW, 0); }
		public TerminalNode POWER() { return getToken(DB2zSQLParser.POWER, 0); }
		public TerminalNode QUANTIZE() { return getToken(DB2zSQLParser.QUANTIZE, 0); }
		public TerminalNode QUARTER() { return getToken(DB2zSQLParser.QUARTER, 0); }
		public TerminalNode RADIANS() { return getToken(DB2zSQLParser.RADIANS, 0); }
		public TerminalNode RAISE_ERROR() { return getToken(DB2zSQLParser.RAISE_ERROR, 0); }
		public TerminalNode RAND() { return getToken(DB2zSQLParser.RAND, 0); }
		public TerminalNode RANDOM() { return getToken(DB2zSQLParser.RANDOM, 0); }
		public TerminalNode REAL() { return getToken(DB2zSQLParser.REAL, 0); }
		public TerminalNode REGEXP_COUNT() { return getToken(DB2zSQLParser.REGEXP_COUNT, 0); }
		public TerminalNode REGEXP_INSTR() { return getToken(DB2zSQLParser.REGEXP_INSTR, 0); }
		public TerminalNode REGEXP_LIKE() { return getToken(DB2zSQLParser.REGEXP_LIKE, 0); }
		public TerminalNode REGEXP_REPLACE() { return getToken(DB2zSQLParser.REGEXP_REPLACE, 0); }
		public TerminalNode REGEXP_SUBSTR() { return getToken(DB2zSQLParser.REGEXP_SUBSTR, 0); }
		public TerminalNode REPEAT() { return getToken(DB2zSQLParser.REPEAT, 0); }
		public TerminalNode REPLACE() { return getToken(DB2zSQLParser.REPLACE, 0); }
		public TerminalNode RID() { return getToken(DB2zSQLParser.RID, 0); }
		public TerminalNode RIGHT() { return getToken(DB2zSQLParser.RIGHT, 0); }
		public TerminalNode ROUND() { return getToken(DB2zSQLParser.ROUND, 0); }
		public TerminalNode ROUND_TIMESTAMP() { return getToken(DB2zSQLParser.ROUND_TIMESTAMP, 0); }
		public TerminalNode ROWID() { return getToken(DB2zSQLParser.ROWID, 0); }
		public TerminalNode RPAD() { return getToken(DB2zSQLParser.RPAD, 0); }
		public TerminalNode RTRIM() { return getToken(DB2zSQLParser.RTRIM, 0); }
		public TerminalNode SCORE() { return getToken(DB2zSQLParser.SCORE, 0); }
		public TerminalNode SECOND() { return getToken(DB2zSQLParser.SECOND, 0); }
		public TerminalNode SIGN() { return getToken(DB2zSQLParser.SIGN, 0); }
		public TerminalNode SIN() { return getToken(DB2zSQLParser.SIN, 0); }
		public TerminalNode SINH() { return getToken(DB2zSQLParser.SINH, 0); }
		public TerminalNode SMALLINT() { return getToken(DB2zSQLParser.SMALLINT, 0); }
		public TerminalNode SOAPHTTPC() { return getToken(DB2zSQLParser.SOAPHTTPC, 0); }
		public TerminalNode SOAPHTTPNC() { return getToken(DB2zSQLParser.SOAPHTTPNC, 0); }
		public TerminalNode SOAPHTTPNV() { return getToken(DB2zSQLParser.SOAPHTTPNV, 0); }
		public TerminalNode SOAPHTTPV() { return getToken(DB2zSQLParser.SOAPHTTPV, 0); }
		public TerminalNode SOUNDEX() { return getToken(DB2zSQLParser.SOUNDEX, 0); }
		public TerminalNode SPACE() { return getToken(DB2zSQLParser.SPACE, 0); }
		public TerminalNode SQRT() { return getToken(DB2zSQLParser.SQRT, 0); }
		public TerminalNode STRIP() { return getToken(DB2zSQLParser.STRIP, 0); }
		public TerminalNode STRLEFT() { return getToken(DB2zSQLParser.STRLEFT, 0); }
		public TerminalNode STRPOS() { return getToken(DB2zSQLParser.STRPOS, 0); }
		public TerminalNode STRRIGHT() { return getToken(DB2zSQLParser.STRRIGHT, 0); }
		public TerminalNode SUBSTR() { return getToken(DB2zSQLParser.SUBSTR, 0); }
		public TerminalNode SUBSTRING() { return getToken(DB2zSQLParser.SUBSTRING, 0); }
		public TerminalNode TAN() { return getToken(DB2zSQLParser.TAN, 0); }
		public TerminalNode TANH() { return getToken(DB2zSQLParser.TANH, 0); }
		public TerminalNode TIME() { return getToken(DB2zSQLParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(DB2zSQLParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMPADD() { return getToken(DB2zSQLParser.TIMESTAMPADD, 0); }
		public TerminalNode TIMESTAMPDIFF() { return getToken(DB2zSQLParser.TIMESTAMPDIFF, 0); }
		public TerminalNode TIMESTAMP_FORMAT() { return getToken(DB2zSQLParser.TIMESTAMP_FORMAT, 0); }
		public TerminalNode TIMESTAMP_ISO() { return getToken(DB2zSQLParser.TIMESTAMP_ISO, 0); }
		public TerminalNode TIMESTAMP_TZ() { return getToken(DB2zSQLParser.TIMESTAMP_TZ, 0); }
		public TerminalNode TO_CHAR() { return getToken(DB2zSQLParser.TO_CHAR, 0); }
		public TerminalNode TO_CLOB() { return getToken(DB2zSQLParser.TO_CLOB, 0); }
		public TerminalNode TO_DATE() { return getToken(DB2zSQLParser.TO_DATE, 0); }
		public TerminalNode TO_NUMBER() { return getToken(DB2zSQLParser.TO_NUMBER, 0); }
		public TerminalNode TOTALORDER() { return getToken(DB2zSQLParser.TOTALORDER, 0); }
		public TerminalNode TO_TIMESTAMP() { return getToken(DB2zSQLParser.TO_TIMESTAMP, 0); }
		public TerminalNode TRANSLATE() { return getToken(DB2zSQLParser.TRANSLATE, 0); }
		public TerminalNode TRIM() { return getToken(DB2zSQLParser.TRIM, 0); }
		public TerminalNode TRIM_ARRAY() { return getToken(DB2zSQLParser.TRIM_ARRAY, 0); }
		public TerminalNode TRUNC() { return getToken(DB2zSQLParser.TRUNC, 0); }
		public TerminalNode TRUNCATE() { return getToken(DB2zSQLParser.TRUNCATE, 0); }
		public TerminalNode TRUNC_TIMESTAMP() { return getToken(DB2zSQLParser.TRUNC_TIMESTAMP, 0); }
		public TerminalNode UCASE() { return getToken(DB2zSQLParser.UCASE, 0); }
		public TerminalNode UNICODE() { return getToken(DB2zSQLParser.UNICODE, 0); }
		public TerminalNode UNICODE_STR() { return getToken(DB2zSQLParser.UNICODE_STR, 0); }
		public TerminalNode UNISTR() { return getToken(DB2zSQLParser.UNISTR, 0); }
		public TerminalNode UPPER() { return getToken(DB2zSQLParser.UPPER, 0); }
		public TerminalNode VALUE() { return getToken(DB2zSQLParser.VALUE, 0); }
		public TerminalNode VARBINARY() { return getToken(DB2zSQLParser.VARBINARY, 0); }
		public TerminalNode VARCHAR() { return getToken(DB2zSQLParser.VARCHAR, 0); }
		public TerminalNode VARCHAR9() { return getToken(DB2zSQLParser.VARCHAR9, 0); }
		public TerminalNode VARCHAR_BIT_FORMAT() { return getToken(DB2zSQLParser.VARCHAR_BIT_FORMAT, 0); }
		public TerminalNode VARCHAR_FORMAT() { return getToken(DB2zSQLParser.VARCHAR_FORMAT, 0); }
		public TerminalNode VARGRAPHIC() { return getToken(DB2zSQLParser.VARGRAPHIC, 0); }
		public TerminalNode VERIFY_GROUP_FOR_USER() { return getToken(DB2zSQLParser.VERIFY_GROUP_FOR_USER, 0); }
		public TerminalNode VERIFY_ROLE_FOR_USER() { return getToken(DB2zSQLParser.VERIFY_ROLE_FOR_USER, 0); }
		public TerminalNode VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER() { return getToken(DB2zSQLParser.VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER, 0); }
		public TerminalNode WEEK() { return getToken(DB2zSQLParser.WEEK, 0); }
		public TerminalNode WEEK_ISO() { return getToken(DB2zSQLParser.WEEK_ISO, 0); }
		public TerminalNode WRAP() { return getToken(DB2zSQLParser.WRAP, 0); }
		public TerminalNode XMLATTRIBUTES() { return getToken(DB2zSQLParser.XMLATTRIBUTES, 0); }
		public TerminalNode XMLCOMMENT() { return getToken(DB2zSQLParser.XMLCOMMENT, 0); }
		public TerminalNode XMLCONCAT() { return getToken(DB2zSQLParser.XMLCONCAT, 0); }
		public TerminalNode XMLDOCUMENT() { return getToken(DB2zSQLParser.XMLDOCUMENT, 0); }
		public TerminalNode XMLELEMENT() { return getToken(DB2zSQLParser.XMLELEMENT, 0); }
		public TerminalNode XMLFOREST() { return getToken(DB2zSQLParser.XMLFOREST, 0); }
		public TerminalNode XMLMODIFY() { return getToken(DB2zSQLParser.XMLMODIFY, 0); }
		public TerminalNode XMLNAMESPACES() { return getToken(DB2zSQLParser.XMLNAMESPACES, 0); }
		public TerminalNode XMLPARSE() { return getToken(DB2zSQLParser.XMLPARSE, 0); }
		public TerminalNode XMLPI() { return getToken(DB2zSQLParser.XMLPI, 0); }
		public TerminalNode XMLQUERY() { return getToken(DB2zSQLParser.XMLQUERY, 0); }
		public TerminalNode XMLSERIALIZE() { return getToken(DB2zSQLParser.XMLSERIALIZE, 0); }
		public TerminalNode XMLTEXT() { return getToken(DB2zSQLParser.XMLTEXT, 0); }
		public TerminalNode XMLXSROBJECTID() { return getToken(DB2zSQLParser.XMLXSROBJECTID, 0); }
		public TerminalNode XSLTRANSFORM() { return getToken(DB2zSQLParser.XSLTRANSFORM, 0); }
		public TerminalNode YEAR() { return getToken(DB2zSQLParser.YEAR, 0); }
		public ScalarFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scalarFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterScalarFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitScalarFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitScalarFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ScalarFunctionContext scalarFunction() throws RecognitionException {
		ScalarFunctionContext _localctx = new ScalarFunctionContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_scalarFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3173);
			_la = _input.LA(1);
			if ( !(((((_la - 58)) & ~0x3f) == 0 && ((1L << (_la - 58)) & ((1L << (CHAR - 58)) | (1L << (CONCAT - 58)) | (1L << (CONTAINS - 58)) | (1L << (DAY - 58)) | (1L << (DAYS - 58)) | (1L << (DOUBLE - 58)))) != 0) || ((((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & ((1L << (HOUR - 140)) | (1L << (INSERT - 140)) | (1L << (LEFT - 140)) | (1L << (MICROSECOND - 140)) | (1L << (MONTH - 140)))) != 0) || ((((_la - 236)) & ~0x3f) == 0 && ((1L << (_la - 236)) & ((1L << (REPEAT - 236)) | (1L << (RIGHT - 236)) | (1L << (SECOND - 236)) | (1L << (TRUNCATE - 236)))) != 0) || ((((_la - 300)) & ~0x3f) == 0 && ((1L << (_la - 300)) & ((1L << (VALUE - 300)) | (1L << (XMLNAMESPACES - 300)) | (1L << (YEAR - 300)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (ABS - 526)) | (1L << (ABSVAL - 526)) | (1L << (ACOS - 526)) | (1L << (ADD_DAYS - 526)) | (1L << (ADD_MONTHS - 526)) | (1L << (ARRAY_DELETE - 526)) | (1L << (ARRAY_FIRST - 526)) | (1L << (ARRAY_LAST - 526)) | (1L << (ARRAY_NEXT - 526)) | (1L << (ARRAY_PRIOR - 526)) | (1L << (ARRAY_TRIM - 526)) | (1L << (ASCII - 526)) | (1L << (ASCII_CHR - 526)) | (1L << (ASCIISTR - 526)) | (1L << (ASCII_STR - 526)) | (1L << (ASIN - 526)) | (1L << (ATAN - 526)) | (1L << (ATAN2 - 526)) | (1L << (ATANH - 526)) | (1L << (BIGINT - 526)) | (1L << (BINARY - 526)) | (1L << (BITAND - 526)) | (1L << (BITANDNOT - 526)) | (1L << (BITNOT - 526)) | (1L << (BITOR - 526)) | (1L << (BITXOR - 526)) | (1L << (BLOB - 526)) | (1L << (BTRIM - 526)) | (1L << (CARDINALITY - 526)) | (1L << (CCSID_ENCODING - 526)) | (1L << (CEIL - 526)) | (1L << (CEILING - 526)) | (1L << (CHAR9 - 526)) | (1L << (CHARACTER_LENGTH - 526)) | (1L << (CHAR_LENGTH - 526)) | (1L << (CHR - 526)) | (1L << (CLOB - 526)) | (1L << (COALESCE - 526)) | (1L << (COLLATION_KEY - 526)) | (1L << (COMPARE_DECFLOAT - 526)) | (1L << (COS - 526)) | (1L << (COSH - 526)) | (1L << (DATE - 526)) | (1L << (DAYOFMONTH - 526)) | (1L << (DAYOFWEEK - 526)) | (1L << (DAYOFWEEK_ISO - 526)) | (1L << (DAYOFYEAR - 526)) | (1L << (DAYS_BETWEEN - 526)) | (1L << (DBCLOB - 526)) | (1L << (DEC - 526)) | (1L << (DECFLOAT - 526)) | (1L << (DECFLOAT_FORMAT - 526)) | (1L << (DECFLOAT_SORTKEY - 526)) | (1L << (DECIMAL - 526)) | (1L << (DECODE - 526)) | (1L << (DECRYPT_BINARY - 526)) | (1L << (DECRYPT_BIT - 526)) | (1L << (DECRYPT_CHAR - 526)) | (1L << (DECRYPT_DATAKEY_BIGINT - 526)) | (1L << (DECRYPT_DATAKEY_BIT - 526)) | (1L << (DECRYPT_DATAKEY_CLOB - 526)) | (1L << (DECRYPT_DATAKEY_DBCLOB - 526)) | (1L << (DECRYPT_DATAKEY_DECIMAL - 526)) | (1L << (DECRYPT_DATAKEY_INTEGER - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (DECRYPT_DATAKEY_VARCHAR - 590)) | (1L << (DECRYPT_DATAKEY_VARGRAPHIC - 590)) | (1L << (DECRYPT_DB - 590)) | (1L << (DEGREES - 590)) | (1L << (DIFFERENCE - 590)) | (1L << (DIGITS - 590)) | (1L << (DOUBLE_PRECISION - 590)) | (1L << (DSN_XMLVALIDATE - 590)) | (1L << (EBCDIC_CHR - 590)) | (1L << (EBCDIC_STR - 590)) | (1L << (ENCRYPT_DATAKEY - 590)) | (1L << (ENCRYPT_TDES - 590)) | (1L << (EXP - 590)) | (1L << (EXTRACT - 590)) | (1L << (FLOAT - 590)) | (1L << (FLOOR - 590)) | (1L << (GENERATE_UNIQUE - 590)) | (1L << (GENERATE_UNIQUE_BINARY - 590)) | (1L << (GETHINT - 590)) | (1L << (GETVARIABLE - 590)) | (1L << (GRAPHIC - 590)) | (1L << (GREATEST - 590)) | (1L << (HASH - 590)) | (1L << (HASH_CRC32 - 590)) | (1L << (HASH_MD5 - 590)) | (1L << (HASH_SHA1 - 590)) | (1L << (HASH_SHA256 - 590)) | (1L << (HEX - 590)) | (1L << (IDENTITY_VAL_LOCAL - 590)) | (1L << (IFNULL - 590)) | (1L << (INSTR - 590)) | (1L << (INT - 590)) | (1L << (INTEGER - 590)) | (1L << (JULIAN_DAY - 590)) | (1L << (LAST_DAY - 590)) | (1L << (LCASE - 590)) | (1L << (LEAST - 590)) | (1L << (LENGTH - 590)) | (1L << (LN - 590)) | (1L << (LOCATE - 590)) | (1L << (LOCATE_IN_STRING - 590)) | (1L << (LOG10 - 590)) | (1L << (LOWER - 590)) | (1L << (LPAD - 590)) | (1L << (LTRIM - 590)) | (1L << (MAX_CARDINALITY - 590)) | (1L << (MIDNIGHT_SECONDS - 590)) | (1L << (MINUTE - 590)) | (1L << (MOD - 590)) | (1L << (MONTHS_BETWEEN - 590)) | (1L << (MQREAD - 590)) | (1L << (MQREADCLOB - 590)) | (1L << (MQRECEIVE - 590)) | (1L << (MQRECEIVECLOB - 590)) | (1L << (MQSEND - 590)) | (1L << (MULTIPLY_ALT - 590)) | (1L << (NEXT_DAY - 590)) | (1L << (NEXT_MONTH - 590)) | (1L << (NORMALIZE_DECFLOAT - 590)) | (1L << (NORMALIZE_STRING - 590)) | (1L << (NULLIF - 590)) | (1L << (NVL - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (OVERLAY - 654)) | (1L << (PACK - 654)) | (1L << (POSITION - 654)) | (1L << (POSSTR - 654)) | (1L << (POW - 654)) | (1L << (POWER - 654)) | (1L << (QUANTIZE - 654)) | (1L << (QUARTER - 654)) | (1L << (RADIANS - 654)) | (1L << (RAISE_ERROR - 654)) | (1L << (RAND - 654)) | (1L << (RANDOM - 654)) | (1L << (REAL - 654)) | (1L << (REGEXP_COUNT - 654)) | (1L << (REGEXP_INSTR - 654)) | (1L << (REGEXP_LIKE - 654)) | (1L << (REGEXP_REPLACE - 654)) | (1L << (REGEXP_SUBSTR - 654)) | (1L << (REPLACE - 654)) | (1L << (RID - 654)) | (1L << (ROUND - 654)) | (1L << (ROUND_TIMESTAMP - 654)) | (1L << (ROWID - 654)) | (1L << (RPAD - 654)) | (1L << (RTRIM - 654)) | (1L << (SCORE - 654)) | (1L << (SIGN - 654)) | (1L << (SIN - 654)) | (1L << (SINH - 654)) | (1L << (SMALLINT - 654)) | (1L << (SOAPHTTPC - 654)) | (1L << (SOAPHTTPNC - 654)) | (1L << (SOAPHTTPNV - 654)) | (1L << (SOAPHTTPV - 654)) | (1L << (SOUNDEX - 654)) | (1L << (SPACE - 654)) | (1L << (SQRT - 654)) | (1L << (STRIP - 654)) | (1L << (STRLEFT - 654)) | (1L << (STRPOS - 654)) | (1L << (STRRIGHT - 654)) | (1L << (SUBSTR - 654)) | (1L << (SUBSTRING - 654)) | (1L << (TAN - 654)) | (1L << (TANH - 654)) | (1L << (TIME - 654)) | (1L << (TIMESTAMP - 654)) | (1L << (TIMESTAMPADD - 654)) | (1L << (TIMESTAMPDIFF - 654)) | (1L << (TIMESTAMP_FORMAT - 654)) | (1L << (TIMESTAMP_ISO - 654)) | (1L << (TIMESTAMP_TZ - 654)) | (1L << (TO_CHAR - 654)) | (1L << (TO_CLOB - 654)) | (1L << (TO_DATE - 654)) | (1L << (TO_NUMBER - 654)) | (1L << (TOTALORDER - 654)) | (1L << (TO_TIMESTAMP - 654)) | (1L << (TRANSLATE - 654)) | (1L << (TRIM - 654)) | (1L << (TRIM_ARRAY - 654)) | (1L << (TRUNC - 654)) | (1L << (TRUNC_TIMESTAMP - 654)) | (1L << (UCASE - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (UNICODE - 718)) | (1L << (UNICODE_STR - 718)) | (1L << (UNISTR - 718)) | (1L << (UPPER - 718)) | (1L << (VARBINARY - 718)) | (1L << (VARCHAR - 718)) | (1L << (VARCHAR9 - 718)) | (1L << (VARCHAR_BIT_FORMAT - 718)) | (1L << (VARCHAR_FORMAT - 718)) | (1L << (VARGRAPHIC - 718)) | (1L << (VERIFY_GROUP_FOR_USER - 718)) | (1L << (VERIFY_ROLE_FOR_USER - 718)) | (1L << (VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER - 718)) | (1L << (WEEK - 718)) | (1L << (WEEK_ISO - 718)) | (1L << (WRAP - 718)) | (1L << (XMLATTRIBUTES - 718)) | (1L << (XMLCOMMENT - 718)) | (1L << (XMLCONCAT - 718)) | (1L << (XMLDOCUMENT - 718)) | (1L << (XMLELEMENT - 718)) | (1L << (XMLFOREST - 718)) | (1L << (XMLMODIFY - 718)) | (1L << (XMLPARSE - 718)) | (1L << (XMLPI - 718)) | (1L << (XMLQUERY - 718)) | (1L << (XMLSERIALIZE - 718)) | (1L << (XMLTEXT - 718)) | (1L << (XMLXSROBJECTID - 718)) | (1L << (XSLTRANSFORM - 718)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableFunctionContext extends ParserRuleContext {
		public TerminalNode ADMIN_TASK_LIST() { return getToken(DB2zSQLParser.ADMIN_TASK_LIST, 0); }
		public TerminalNode ADMIN_TASK_OUTPUT() { return getToken(DB2zSQLParser.ADMIN_TASK_OUTPUT, 0); }
		public TerminalNode ADMIN_TASK_STATUS() { return getToken(DB2zSQLParser.ADMIN_TASK_STATUS, 0); }
		public TerminalNode BLOCKING_THREADS() { return getToken(DB2zSQLParser.BLOCKING_THREADS, 0); }
		public TerminalNode MQREADALL() { return getToken(DB2zSQLParser.MQREADALL, 0); }
		public TerminalNode MQREADALLCLOB() { return getToken(DB2zSQLParser.MQREADALLCLOB, 0); }
		public TerminalNode MQRECEIVEALL() { return getToken(DB2zSQLParser.MQRECEIVEALL, 0); }
		public TerminalNode MQRECEIVEALLCLOB() { return getToken(DB2zSQLParser.MQRECEIVEALLCLOB, 0); }
		public TerminalNode XMLTABLE() { return getToken(DB2zSQLParser.XMLTABLE, 0); }
		public TableFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTableFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTableFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTableFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableFunctionContext tableFunction() throws RecognitionException {
		TableFunctionContext _localctx = new TableFunctionContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_tableFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3175);
			_la = _input.LA(1);
			if ( !(((((_la - 787)) & ~0x3f) == 0 && ((1L << (_la - 787)) & ((1L << (ADMIN_TASK_LIST - 787)) | (1L << (ADMIN_TASK_OUTPUT - 787)) | (1L << (ADMIN_TASK_STATUS - 787)) | (1L << (BLOCKING_THREADS - 787)) | (1L << (MQREADALL - 787)) | (1L << (MQREADALLCLOB - 787)) | (1L << (MQRECEIVEALL - 787)) | (1L << (MQRECEIVEALLCLOB - 787)) | (1L << (XMLTABLE - 787)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SpecialRegisterContext extends ParserRuleContext {
		public TerminalNode CURRENT_ACCELERATOR() { return getToken(DB2zSQLParser.CURRENT_ACCELERATOR, 0); }
		public TerminalNode CURRENT_APPLICATION_COMPATIBILITY() { return getToken(DB2zSQLParser.CURRENT_APPLICATION_COMPATIBILITY, 0); }
		public TerminalNode CURRENT_APPLICATION_ENCODING_SCHEME() { return getToken(DB2zSQLParser.CURRENT_APPLICATION_ENCODING_SCHEME, 0); }
		public TerminalNode CURRENT_CLIENT_ACCTNG() { return getToken(DB2zSQLParser.CURRENT_CLIENT_ACCTNG, 0); }
		public TerminalNode CURRENT_CLIENT_APPLNAME() { return getToken(DB2zSQLParser.CURRENT_CLIENT_APPLNAME, 0); }
		public TerminalNode CURRENT_CLIENT_CORR_TOKEN() { return getToken(DB2zSQLParser.CURRENT_CLIENT_CORR_TOKEN, 0); }
		public TerminalNode CURRENT_CLIENT_USERID() { return getToken(DB2zSQLParser.CURRENT_CLIENT_USERID, 0); }
		public TerminalNode CURRENT_CLIENT_WRKSTNNAME() { return getToken(DB2zSQLParser.CURRENT_CLIENT_WRKSTNNAME, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(DB2zSQLParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_DEBUG_MODE() { return getToken(DB2zSQLParser.CURRENT_DEBUG_MODE, 0); }
		public TerminalNode CURRENT_DECFLOAT_ROUNDING_MODE() { return getToken(DB2zSQLParser.CURRENT_DECFLOAT_ROUNDING_MODE, 0); }
		public TerminalNode CURRENT_DEGREE() { return getToken(DB2zSQLParser.CURRENT_DEGREE, 0); }
		public TerminalNode CURRENT_EXPLAIN_MODE() { return getToken(DB2zSQLParser.CURRENT_EXPLAIN_MODE, 0); }
		public TerminalNode CURRENT_GET_ACCEL_ARCHIVE() { return getToken(DB2zSQLParser.CURRENT_GET_ACCEL_ARCHIVE, 0); }
		public TerminalNode CURRENT_LOCALE_LC_CTYPE() { return getToken(DB2zSQLParser.CURRENT_LOCALE_LC_CTYPE, 0); }
		public TerminalNode CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION() { return getToken(DB2zSQLParser.CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION, 0); }
		public TerminalNode CURRENT_MEMBER() { return getToken(DB2zSQLParser.CURRENT_MEMBER, 0); }
		public TerminalNode CURRENT_OPTIMIZATION_HINT() { return getToken(DB2zSQLParser.CURRENT_OPTIMIZATION_HINT, 0); }
		public TerminalNode CURRENT_PACKAGE_PATH() { return getToken(DB2zSQLParser.CURRENT_PACKAGE_PATH, 0); }
		public TerminalNode CURRENT_PACKAGESET() { return getToken(DB2zSQLParser.CURRENT_PACKAGESET, 0); }
		public TerminalNode CURRENT_PATH() { return getToken(DB2zSQLParser.CURRENT_PATH, 0); }
		public TerminalNode CURRENT_PRECISION() { return getToken(DB2zSQLParser.CURRENT_PRECISION, 0); }
		public TerminalNode CURRENT_QUERY_ACCELERATION() { return getToken(DB2zSQLParser.CURRENT_QUERY_ACCELERATION, 0); }
		public TerminalNode CURRENT_QUERY_ACCELERATION_WAITFORDATA() { return getToken(DB2zSQLParser.CURRENT_QUERY_ACCELERATION_WAITFORDATA, 0); }
		public TerminalNode CURRENT_REFRESH_AGE() { return getToken(DB2zSQLParser.CURRENT_REFRESH_AGE, 0); }
		public TerminalNode CURRENT_ROUTINE_VERSION() { return getToken(DB2zSQLParser.CURRENT_ROUTINE_VERSION, 0); }
		public TerminalNode CURRENT_RULES() { return getToken(DB2zSQLParser.CURRENT_RULES, 0); }
		public TerminalNode CURRENT_SCHEMA() { return getToken(DB2zSQLParser.CURRENT_SCHEMA, 0); }
		public TerminalNode CURRENT_SERVER() { return getToken(DB2zSQLParser.CURRENT_SERVER, 0); }
		public TerminalNode CURRENT_SQLID() { return getToken(DB2zSQLParser.CURRENT_SQLID, 0); }
		public TerminalNode CURRENT_TEMPORAL_BUSINESS_TIME() { return getToken(DB2zSQLParser.CURRENT_TEMPORAL_BUSINESS_TIME, 0); }
		public TerminalNode CURRENT_TEMPORAL_SYSTEM_TIME() { return getToken(DB2zSQLParser.CURRENT_TEMPORAL_SYSTEM_TIME, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(DB2zSQLParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(DB2zSQLParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_TIME_ZONE() { return getToken(DB2zSQLParser.CURRENT_TIME_ZONE, 0); }
		public TerminalNode ENCRYPTION_PASSWORD() { return getToken(DB2zSQLParser.ENCRYPTION_PASSWORD, 0); }
		public TerminalNode SESSION_TIME_ZONE() { return getToken(DB2zSQLParser.SESSION_TIME_ZONE, 0); }
		public TerminalNode SESSION_USER() { return getToken(DB2zSQLParser.SESSION_USER, 0); }
		public TerminalNode USER() { return getToken(DB2zSQLParser.USER, 0); }
		public SpecialRegisterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_specialRegister; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSpecialRegister(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSpecialRegister(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSpecialRegister(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SpecialRegisterContext specialRegister() throws RecognitionException {
		SpecialRegisterContext _localctx = new SpecialRegisterContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_specialRegister);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3177);
			_la = _input.LA(1);
			if ( !(((((_la - 748)) & ~0x3f) == 0 && ((1L << (_la - 748)) & ((1L << (CURRENT_ACCELERATOR - 748)) | (1L << (CURRENT_APPLICATION_COMPATIBILITY - 748)) | (1L << (CURRENT_APPLICATION_ENCODING_SCHEME - 748)) | (1L << (CURRENT_CLIENT_ACCTNG - 748)) | (1L << (CURRENT_CLIENT_APPLNAME - 748)) | (1L << (CURRENT_CLIENT_CORR_TOKEN - 748)) | (1L << (CURRENT_CLIENT_USERID - 748)) | (1L << (CURRENT_CLIENT_WRKSTNNAME - 748)) | (1L << (CURRENT_DATE - 748)) | (1L << (CURRENT_DEBUG_MODE - 748)) | (1L << (CURRENT_DECFLOAT_ROUNDING_MODE - 748)) | (1L << (CURRENT_DEGREE - 748)) | (1L << (CURRENT_EXPLAIN_MODE - 748)) | (1L << (CURRENT_GET_ACCEL_ARCHIVE - 748)) | (1L << (CURRENT_LOCALE_LC_CTYPE - 748)) | (1L << (CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION - 748)) | (1L << (CURRENT_MEMBER - 748)) | (1L << (CURRENT_OPTIMIZATION_HINT - 748)) | (1L << (CURRENT_PACKAGE_PATH - 748)) | (1L << (CURRENT_PACKAGESET - 748)) | (1L << (CURRENT_PATH - 748)) | (1L << (CURRENT_PRECISION - 748)) | (1L << (CURRENT_QUERY_ACCELERATION - 748)) | (1L << (CURRENT_QUERY_ACCELERATION_WAITFORDATA - 748)) | (1L << (CURRENT_REFRESH_AGE - 748)) | (1L << (CURRENT_ROUTINE_VERSION - 748)) | (1L << (CURRENT_RULES - 748)) | (1L << (CURRENT_SCHEMA - 748)) | (1L << (CURRENT_SERVER - 748)) | (1L << (CURRENT_SQLID - 748)) | (1L << (CURRENT_TEMPORAL_BUSINESS_TIME - 748)) | (1L << (CURRENT_TEMPORAL_SYSTEM_TIME - 748)) | (1L << (CURRENT_TIME - 748)) | (1L << (CURRENT_TIMESTAMP - 748)) | (1L << (CURRENT_TIME_ZONE - 748)) | (1L << (ENCRYPTION_PASSWORD - 748)) | (1L << (SESSION_TIME_ZONE - 748)) | (1L << (SESSION_USER - 748)) | (1L << (USER - 748)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmltableFunctionSpecificationContext extends ParserRuleContext {
		public TerminalNode XMLTABLE() { return getToken(DB2zSQLParser.XMLTABLE, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public RowXqueryExpressionConstantContext rowXqueryExpressionConstant() {
			return getRuleContext(RowXqueryExpressionConstantContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public XmlnamespacesDeclarationContext xmlnamespacesDeclaration() {
			return getRuleContext(XmlnamespacesDeclarationContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public TerminalNode PASSING() { return getToken(DB2zSQLParser.PASSING, 0); }
		public List<RowXqueryArgumentContext> rowXqueryArgument() {
			return getRuleContexts(RowXqueryArgumentContext.class);
		}
		public RowXqueryArgumentContext rowXqueryArgument(int i) {
			return getRuleContext(RowXqueryArgumentContext.class,i);
		}
		public TerminalNode COLUMNS() { return getToken(DB2zSQLParser.COLUMNS, 0); }
		public List<XmlTableRegularColumnDefinitionContext> xmlTableRegularColumnDefinition() {
			return getRuleContexts(XmlTableRegularColumnDefinitionContext.class);
		}
		public XmlTableRegularColumnDefinitionContext xmlTableRegularColumnDefinition(int i) {
			return getRuleContext(XmlTableRegularColumnDefinitionContext.class,i);
		}
		public List<XmlTableOrdinalityColumnDefinitionContext> xmlTableOrdinalityColumnDefinition() {
			return getRuleContexts(XmlTableOrdinalityColumnDefinitionContext.class);
		}
		public XmlTableOrdinalityColumnDefinitionContext xmlTableOrdinalityColumnDefinition(int i) {
			return getRuleContext(XmlTableOrdinalityColumnDefinitionContext.class,i);
		}
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public TerminalNode REF() { return getToken(DB2zSQLParser.REF, 0); }
		public XmltableFunctionSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmltableFunctionSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterXmltableFunctionSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitXmltableFunctionSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitXmltableFunctionSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmltableFunctionSpecificationContext xmltableFunctionSpecification() throws RecognitionException {
		XmltableFunctionSpecificationContext _localctx = new XmltableFunctionSpecificationContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_xmltableFunctionSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3179);
			match(XMLTABLE);
			setState(3180);
			match(LPAREN);
			setState(3184);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==XMLNAMESPACES) {
				{
				setState(3181);
				xmlnamespacesDeclaration();
				setState(3182);
				match(COMMA);
				}
			}

			setState(3186);
			rowXqueryExpressionConstant();
			setState(3196);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PASSING) {
				{
				setState(3187);
				match(PASSING);
				setState(3190);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,359,_ctx) ) {
				case 1:
					{
					setState(3188);
					match(BY);
					setState(3189);
					match(REF);
					}
					break;
				}
				setState(3192);
				rowXqueryArgument();
				{
				setState(3193);
				match(COMMA);
				setState(3194);
				rowXqueryArgument();
				}
				}
			}

			setState(3213);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMNS) {
				{
				setState(3198);
				match(COLUMNS);
				setState(3201);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,361,_ctx) ) {
				case 1:
					{
					setState(3199);
					xmlTableRegularColumnDefinition();
					}
					break;
				case 2:
					{
					setState(3200);
					xmlTableOrdinalityColumnDefinition();
					}
					break;
				}
				setState(3210);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3203);
					match(COMMA);
					setState(3206);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,362,_ctx) ) {
					case 1:
						{
						setState(3204);
						xmlTableRegularColumnDefinition();
						}
						break;
					case 2:
						{
						setState(3205);
						xmlTableOrdinalityColumnDefinition();
						}
						break;
					}
					}
					}
					setState(3212);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(3215);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowXqueryExpressionConstantContext extends ParserRuleContext {
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public RowXqueryExpressionConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowXqueryExpressionConstant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRowXqueryExpressionConstant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRowXqueryExpressionConstant(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRowXqueryExpressionConstant(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowXqueryExpressionConstantContext rowXqueryExpressionConstant() throws RecognitionException {
		RowXqueryExpressionConstantContext _localctx = new RowXqueryExpressionConstantContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_rowXqueryExpressionConstant);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3217);
			match(NONNUMERICLITERAL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowXqueryArgumentContext extends ParserRuleContext {
		public XqueryContextItemExpressionContext xqueryContextItemExpression() {
			return getRuleContext(XqueryContextItemExpressionContext.class,0);
		}
		public XqueryVariableExpressionContext xqueryVariableExpression() {
			return getRuleContext(XqueryVariableExpressionContext.class,0);
		}
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public RowXqueryArgumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowXqueryArgument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRowXqueryArgument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRowXqueryArgument(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRowXqueryArgument(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowXqueryArgumentContext rowXqueryArgument() throws RecognitionException {
		RowXqueryArgumentContext _localctx = new RowXqueryArgumentContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_rowXqueryArgument);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3224);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,365,_ctx) ) {
			case 1:
				{
				setState(3219);
				xqueryContextItemExpression();
				}
				break;
			case 2:
				{
				{
				setState(3220);
				xqueryVariableExpression();
				setState(3221);
				match(AS);
				setState(3222);
				identifier();
				}
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XqueryContextItemExpressionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public XqueryContextItemExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xqueryContextItemExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterXqueryContextItemExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitXqueryContextItemExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitXqueryContextItemExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XqueryContextItemExpressionContext xqueryContextItemExpression() throws RecognitionException {
		XqueryContextItemExpressionContext _localctx = new XqueryContextItemExpressionContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_xqueryContextItemExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3226);
			expression();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XqueryVariableExpressionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public XqueryVariableExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xqueryVariableExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterXqueryVariableExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitXqueryVariableExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitXqueryVariableExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XqueryVariableExpressionContext xqueryVariableExpression() throws RecognitionException {
		XqueryVariableExpressionContext _localctx = new XqueryVariableExpressionContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_xqueryVariableExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3228);
			expression();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlTableRegularColumnDefinitionContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public DefaultClauseContext defaultClause() {
			return getRuleContext(DefaultClauseContext.class,0);
		}
		public TerminalNode PATH() { return getToken(DB2zSQLParser.PATH, 0); }
		public ColumnXqueryExpressionConstantContext columnXqueryExpressionConstant() {
			return getRuleContext(ColumnXqueryExpressionConstantContext.class,0);
		}
		public XmlTableRegularColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlTableRegularColumnDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterXmlTableRegularColumnDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitXmlTableRegularColumnDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitXmlTableRegularColumnDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlTableRegularColumnDefinitionContext xmlTableRegularColumnDefinition() throws RecognitionException {
		XmlTableRegularColumnDefinitionContext _localctx = new XmlTableRegularColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_xmlTableRegularColumnDefinition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3230);
			columnName();
			setState(3231);
			dataType();
			setState(3235);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFAULT:
			case WITH:
				{
				setState(3232);
				defaultClause();
				}
				break;
			case PATH:
				{
				{
				setState(3233);
				match(PATH);
				setState(3234);
				columnXqueryExpressionConstant();
				}
				}
				break;
			case RPAREN:
			case COMMA:
				break;
			default:
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaultClauseContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(DB2zSQLParser.DEFAULT, 0); }
		public DefaultClauseAllowablesContext defaultClauseAllowables() {
			return getRuleContext(DefaultClauseAllowablesContext.class,0);
		}
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public DistinctTypeCastFunctionNameContext distinctTypeCastFunctionName() {
			return getRuleContext(DistinctTypeCastFunctionNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public DefaultClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDefaultClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDefaultClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDefaultClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefaultClauseContext defaultClause() throws RecognitionException {
		DefaultClauseContext _localctx = new DefaultClauseContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_defaultClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3238);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(3237);
				match(WITH);
				}
			}

			setState(3240);
			match(DEFAULT);
			setState(3247);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,368,_ctx) ) {
			case 1:
				{
				setState(3241);
				defaultClauseAllowables();
				}
				break;
			case 2:
				{
				{
				setState(3242);
				distinctTypeCastFunctionName();
				setState(3243);
				match(LPAREN);
				setState(3244);
				defaultClauseAllowables();
				setState(3245);
				match(RPAREN);
				}
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaultClause1Context extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(DB2zSQLParser.DEFAULT, 0); }
		public DefaultClauseAllowablesContext defaultClauseAllowables() {
			return getRuleContext(DefaultClauseAllowablesContext.class,0);
		}
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public DefaultClause1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultClause1; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDefaultClause1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDefaultClause1(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDefaultClause1(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefaultClause1Context defaultClause1() throws RecognitionException {
		DefaultClause1Context _localctx = new DefaultClause1Context(_ctx, getState());
		enterRule(_localctx, 322, RULE_defaultClause1);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3250);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(3249);
				match(WITH);
				}
			}

			setState(3252);
			match(DEFAULT);
			setState(3253);
			defaultClauseAllowables();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaultClause2Context extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(DB2zSQLParser.DEFAULT, 0); }
		public DefaultClauseAllowablesContext defaultClauseAllowables() {
			return getRuleContext(DefaultClauseAllowablesContext.class,0);
		}
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public DistinctTypeCastFunctionNameContext distinctTypeCastFunctionName() {
			return getRuleContext(DistinctTypeCastFunctionNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public DefaultClause2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultClause2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDefaultClause2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDefaultClause2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDefaultClause2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefaultClause2Context defaultClause2() throws RecognitionException {
		DefaultClause2Context _localctx = new DefaultClause2Context(_ctx, getState());
		enterRule(_localctx, 324, RULE_defaultClause2);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3256);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(3255);
				match(WITH);
				}
			}

			setState(3258);
			match(DEFAULT);
			setState(3265);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,371,_ctx) ) {
			case 1:
				{
				setState(3259);
				defaultClauseAllowables();
				}
				break;
			case 2:
				{
				{
				setState(3260);
				distinctTypeCastFunctionName();
				setState(3261);
				match(LPAREN);
				setState(3262);
				defaultClauseAllowables();
				setState(3263);
				match(RPAREN);
				}
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaultClauseAllowablesContext extends ParserRuleContext {
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public TerminalNode SESSION_USER() { return getToken(DB2zSQLParser.SESSION_USER, 0); }
		public TerminalNode USER() { return getToken(DB2zSQLParser.USER, 0); }
		public TerminalNode CURRENT_SQLID() { return getToken(DB2zSQLParser.CURRENT_SQLID, 0); }
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public DefaultClauseAllowablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultClauseAllowables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDefaultClauseAllowables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDefaultClauseAllowables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDefaultClauseAllowables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefaultClauseAllowablesContext defaultClauseAllowables() throws RecognitionException {
		DefaultClauseAllowablesContext _localctx = new DefaultClauseAllowablesContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_defaultClauseAllowables);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3272);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NONNUMERICLITERAL:
			case INTEGERLITERAL:
			case NUMERICLITERAL:
				{
				setState(3267);
				literal();
				}
				break;
			case SESSION_USER:
				{
				setState(3268);
				match(SESSION_USER);
				}
				break;
			case USER:
				{
				setState(3269);
				match(USER);
				}
				break;
			case CURRENT_SQLID:
				{
				setState(3270);
				match(CURRENT_SQLID);
				}
				break;
			case NULL:
				{
				setState(3271);
				match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DistinctTypeCastFunctionNameContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public DistinctTypeCastFunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_distinctTypeCastFunctionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDistinctTypeCastFunctionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDistinctTypeCastFunctionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDistinctTypeCastFunctionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DistinctTypeCastFunctionNameContext distinctTypeCastFunctionName() throws RecognitionException {
		DistinctTypeCastFunctionNameContext _localctx = new DistinctTypeCastFunctionNameContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_distinctTypeCastFunctionName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3274);
			identifier();
			setState(3275);
			match(DOT);
			setState(3276);
			identifier();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnXqueryExpressionConstantContext extends ParserRuleContext {
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public ColumnXqueryExpressionConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnXqueryExpressionConstant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterColumnXqueryExpressionConstant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitColumnXqueryExpressionConstant(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitColumnXqueryExpressionConstant(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnXqueryExpressionConstantContext columnXqueryExpressionConstant() throws RecognitionException {
		ColumnXqueryExpressionConstantContext _localctx = new ColumnXqueryExpressionConstantContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_columnXqueryExpressionConstant);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3278);
			match(NONNUMERICLITERAL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlTableOrdinalityColumnDefinitionContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode ORDINALITY() { return getToken(DB2zSQLParser.ORDINALITY, 0); }
		public XmlTableOrdinalityColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlTableOrdinalityColumnDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterXmlTableOrdinalityColumnDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitXmlTableOrdinalityColumnDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitXmlTableOrdinalityColumnDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlTableOrdinalityColumnDefinitionContext xmlTableOrdinalityColumnDefinition() throws RecognitionException {
		XmlTableOrdinalityColumnDefinitionContext _localctx = new XmlTableOrdinalityColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_xmlTableOrdinalityColumnDefinition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3280);
			columnName();
			setState(3281);
			match(FOR);
			setState(3282);
			match(ORDINALITY);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlnamespacesDeclarationContext extends ParserRuleContext {
		public List<XmlnamespacesFunctionSpecificationContext> xmlnamespacesFunctionSpecification() {
			return getRuleContexts(XmlnamespacesFunctionSpecificationContext.class);
		}
		public XmlnamespacesFunctionSpecificationContext xmlnamespacesFunctionSpecification(int i) {
			return getRuleContext(XmlnamespacesFunctionSpecificationContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public XmlnamespacesDeclarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlnamespacesDeclaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterXmlnamespacesDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitXmlnamespacesDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitXmlnamespacesDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlnamespacesDeclarationContext xmlnamespacesDeclaration() throws RecognitionException {
		XmlnamespacesDeclarationContext _localctx = new XmlnamespacesDeclarationContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_xmlnamespacesDeclaration);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3284);
			xmlnamespacesFunctionSpecification();
			setState(3289);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,373,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3285);
					match(COMMA);
					setState(3286);
					xmlnamespacesFunctionSpecification();
					}
					} 
				}
				setState(3291);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,373,_ctx);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlnamespacesFunctionSpecificationContext extends ParserRuleContext {
		public TerminalNode XMLNAMESPACES() { return getToken(DB2zSQLParser.XMLNAMESPACES, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<XmlnamespacesFunctionArgumentsContext> xmlnamespacesFunctionArguments() {
			return getRuleContexts(XmlnamespacesFunctionArgumentsContext.class);
		}
		public XmlnamespacesFunctionArgumentsContext xmlnamespacesFunctionArguments(int i) {
			return getRuleContext(XmlnamespacesFunctionArgumentsContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public XmlnamespacesFunctionSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlnamespacesFunctionSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterXmlnamespacesFunctionSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitXmlnamespacesFunctionSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitXmlnamespacesFunctionSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlnamespacesFunctionSpecificationContext xmlnamespacesFunctionSpecification() throws RecognitionException {
		XmlnamespacesFunctionSpecificationContext _localctx = new XmlnamespacesFunctionSpecificationContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_xmlnamespacesFunctionSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3292);
			match(XMLNAMESPACES);
			setState(3293);
			match(LPAREN);
			setState(3294);
			xmlnamespacesFunctionArguments();
			setState(3299);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3295);
				match(COMMA);
				setState(3296);
				xmlnamespacesFunctionArguments();
				}
				}
				setState(3301);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3302);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlnamespacesFunctionArgumentsContext extends ParserRuleContext {
		public NamespaceUriContext namespaceUri() {
			return getRuleContext(NamespaceUriContext.class,0);
		}
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public NamespacePrefixContext namespacePrefix() {
			return getRuleContext(NamespacePrefixContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(DB2zSQLParser.DEFAULT, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public XmlnamespacesFunctionArgumentsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlnamespacesFunctionArguments; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterXmlnamespacesFunctionArguments(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitXmlnamespacesFunctionArguments(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitXmlnamespacesFunctionArguments(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlnamespacesFunctionArgumentsContext xmlnamespacesFunctionArguments() throws RecognitionException {
		XmlnamespacesFunctionArgumentsContext _localctx = new XmlnamespacesFunctionArgumentsContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_xmlnamespacesFunctionArguments);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3312);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NONNUMERICLITERAL:
				{
				{
				setState(3304);
				namespaceUri();
				setState(3305);
				match(AS);
				setState(3306);
				namespacePrefix();
				}
				}
				break;
			case DEFAULT:
				{
				{
				setState(3308);
				match(DEFAULT);
				setState(3309);
				namespaceUri();
				}
				}
				break;
			case NO:
				{
				{
				setState(3310);
				match(NO);
				setState(3311);
				match(DEFAULT);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NamespaceUriContext extends ParserRuleContext {
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public NamespaceUriContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_namespaceUri; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterNamespaceUri(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitNamespaceUri(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitNamespaceUri(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NamespaceUriContext namespaceUri() throws RecognitionException {
		NamespaceUriContext _localctx = new NamespaceUriContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_namespaceUri);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3314);
			match(NONNUMERICLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NamespacePrefixContext extends ParserRuleContext {
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public NamespacePrefixContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_namespacePrefix; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterNamespacePrefix(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitNamespacePrefix(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitNamespacePrefix(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NamespacePrefixContext namespacePrefix() throws RecognitionException {
		NamespacePrefixContext _localctx = new NamespacePrefixContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_namespacePrefix);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3316);
			match(NONNUMERICLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TimeZoneSpecificExpressionContext extends ParserRuleContext {
		public List<TimeZoneExpressionSubsetContext> timeZoneExpressionSubset() {
			return getRuleContexts(TimeZoneExpressionSubsetContext.class);
		}
		public TimeZoneExpressionSubsetContext timeZoneExpressionSubset(int i) {
			return getRuleContext(TimeZoneExpressionSubsetContext.class,i);
		}
		public TerminalNode AT() { return getToken(DB2zSQLParser.AT, 0); }
		public TerminalNode LOCAL() { return getToken(DB2zSQLParser.LOCAL, 0); }
		public TerminalNode TIME() { return getToken(DB2zSQLParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(DB2zSQLParser.ZONE, 0); }
		public TimeZoneSpecificExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timeZoneSpecificExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTimeZoneSpecificExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTimeZoneSpecificExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTimeZoneSpecificExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TimeZoneSpecificExpressionContext timeZoneSpecificExpression() throws RecognitionException {
		TimeZoneSpecificExpressionContext _localctx = new TimeZoneSpecificExpressionContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_timeZoneSpecificExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3318);
			timeZoneExpressionSubset();
			setState(3325);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,376,_ctx) ) {
			case 1:
				{
				{
				setState(3319);
				match(AT);
				setState(3320);
				match(LOCAL);
				}
				}
				break;
			case 2:
				{
				{
				setState(3321);
				match(AT);
				setState(3322);
				match(TIME);
				setState(3323);
				match(ZONE);
				setState(3324);
				timeZoneExpressionSubset();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TimeZoneExpressionSubsetContext extends ParserRuleContext {
		public FunctionInvocationContext functionInvocation() {
			return getRuleContext(FunctionInvocationContext.class,0);
		}
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public SpecialRegisterContext specialRegister() {
			return getRuleContext(SpecialRegisterContext.class,0);
		}
		public ScalarFullSelectContext scalarFullSelect() {
			return getRuleContext(ScalarFullSelectContext.class,0);
		}
		public CaseExpressionContext caseExpression() {
			return getRuleContext(CaseExpressionContext.class,0);
		}
		public CastSpecificationContext castSpecification() {
			return getRuleContext(CastSpecificationContext.class,0);
		}
		public TimeZoneExpressionSubsetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timeZoneExpressionSubset; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTimeZoneExpressionSubset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTimeZoneExpressionSubset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTimeZoneExpressionSubset(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TimeZoneExpressionSubsetContext timeZoneExpressionSubset() throws RecognitionException {
		TimeZoneExpressionSubsetContext _localctx = new TimeZoneExpressionSubsetContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_timeZoneExpressionSubset);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3335);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,377,_ctx) ) {
			case 1:
				{
				setState(3327);
				functionInvocation();
				}
				break;
			case 2:
				{
				setState(3328);
				literal();
				}
				break;
			case 3:
				{
				setState(3329);
				columnName();
				}
				break;
			case 4:
				{
				setState(3330);
				hostVariable();
				}
				break;
			case 5:
				{
				setState(3331);
				specialRegister();
				}
				break;
			case 6:
				{
				setState(3332);
				scalarFullSelect();
				}
				break;
			case 7:
				{
				setState(3333);
				caseExpression();
				}
				break;
			case 8:
				{
				setState(3334);
				castSpecification();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseExpressionContext extends ParserRuleContext {
		public TerminalNode CASE() { return getToken(DB2zSQLParser.CASE, 0); }
		public TerminalNode END() { return getToken(DB2zSQLParser.END, 0); }
		public SearchedWhenClauseContext searchedWhenClause() {
			return getRuleContext(SearchedWhenClauseContext.class,0);
		}
		public SimpleWhenClauseContext simpleWhenClause() {
			return getRuleContext(SimpleWhenClauseContext.class,0);
		}
		public TerminalNode ELSE() { return getToken(DB2zSQLParser.ELSE, 0); }
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public ResultExpressionContext resultExpression() {
			return getRuleContext(ResultExpressionContext.class,0);
		}
		public CaseExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCaseExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCaseExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCaseExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseExpressionContext caseExpression() throws RecognitionException {
		CaseExpressionContext _localctx = new CaseExpressionContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_caseExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3337);
			match(CASE);
			setState(3340);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,378,_ctx) ) {
			case 1:
				{
				setState(3338);
				searchedWhenClause();
				}
				break;
			case 2:
				{
				setState(3339);
				simpleWhenClause();
				}
				break;
			}
			setState(3346);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,379,_ctx) ) {
			case 1:
				{
				{
				setState(3342);
				match(ELSE);
				setState(3343);
				match(NULL);
				}
				}
				break;
			case 2:
				{
				{
				setState(3344);
				match(ELSE);
				setState(3345);
				resultExpression();
				}
				}
				break;
			}
			setState(3348);
			match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResultExpressionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ResultExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resultExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterResultExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitResultExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitResultExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResultExpressionContext resultExpression() throws RecognitionException {
		ResultExpressionContext _localctx = new ResultExpressionContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_resultExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3350);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SearchedWhenClauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(DB2zSQLParser.WHEN, 0); }
		public SearchConditionContext searchCondition() {
			return getRuleContext(SearchConditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(DB2zSQLParser.THEN, 0); }
		public ResultExpressionContext resultExpression() {
			return getRuleContext(ResultExpressionContext.class,0);
		}
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public SearchedWhenClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searchedWhenClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSearchedWhenClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSearchedWhenClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSearchedWhenClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SearchedWhenClauseContext searchedWhenClause() throws RecognitionException {
		SearchedWhenClauseContext _localctx = new SearchedWhenClauseContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_searchedWhenClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3352);
			match(WHEN);
			setState(3353);
			searchCondition();
			setState(3354);
			match(THEN);
			setState(3357);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,380,_ctx) ) {
			case 1:
				{
				setState(3355);
				resultExpression();
				}
				break;
			case 2:
				{
				setState(3356);
				match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleWhenClauseContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode WHEN() { return getToken(DB2zSQLParser.WHEN, 0); }
		public TerminalNode THEN() { return getToken(DB2zSQLParser.THEN, 0); }
		public ResultExpressionContext resultExpression() {
			return getRuleContext(ResultExpressionContext.class,0);
		}
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public SimpleWhenClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleWhenClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSimpleWhenClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSimpleWhenClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSimpleWhenClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleWhenClauseContext simpleWhenClause() throws RecognitionException {
		SimpleWhenClauseContext _localctx = new SimpleWhenClauseContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_simpleWhenClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3359);
			expression();
			setState(3360);
			match(WHEN);
			setState(3361);
			expression();
			setState(3362);
			match(THEN);
			setState(3365);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,381,_ctx) ) {
			case 1:
				{
				setState(3363);
				resultExpression();
				}
				break;
			case 2:
				{
				setState(3364);
				match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SearchConditionContext extends ParserRuleContext {
		public List<TerminalNode> NOT() { return getTokens(DB2zSQLParser.NOT); }
		public TerminalNode NOT(int i) {
			return getToken(DB2zSQLParser.NOT, i);
		}
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public List<SearchConditionContext> searchCondition() {
			return getRuleContexts(SearchConditionContext.class);
		}
		public SearchConditionContext searchCondition(int i) {
			return getRuleContext(SearchConditionContext.class,i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public List<TerminalNode> AND() { return getTokens(DB2zSQLParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(DB2zSQLParser.AND, i);
		}
		public List<TerminalNode> OR() { return getTokens(DB2zSQLParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(DB2zSQLParser.OR, i);
		}
		public TerminalNode SELECTIVITY() { return getToken(DB2zSQLParser.SELECTIVITY, 0); }
		public TerminalNode NUMERICLITERAL() { return getToken(DB2zSQLParser.NUMERICLITERAL, 0); }
		public SearchConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searchCondition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSearchCondition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSearchCondition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSearchCondition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SearchConditionContext searchCondition() throws RecognitionException {
		SearchConditionContext _localctx = new SearchConditionContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_searchCondition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3368);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,382,_ctx) ) {
			case 1:
				{
				setState(3367);
				match(NOT);
				}
				break;
			}
			setState(3379);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,384,_ctx) ) {
			case 1:
				{
				{
				setState(3370);
				predicate();
				setState(3373);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SELECTIVITY) {
					{
					setState(3371);
					match(SELECTIVITY);
					setState(3372);
					match(NUMERICLITERAL);
					}
				}

				}
				}
				break;
			case 2:
				{
				{
				setState(3375);
				match(LPAREN);
				setState(3376);
				searchCondition();
				setState(3377);
				match(RPAREN);
				}
				}
				break;
			}
			setState(3394);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR || _la==AND) {
				{
				{
				setState(3381);
				_la = _input.LA(1);
				if ( !(_la==OR || _la==AND) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3383);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,385,_ctx) ) {
				case 1:
					{
					setState(3382);
					match(NOT);
					}
					break;
				}
				setState(3390);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,386,_ctx) ) {
				case 1:
					{
					setState(3385);
					predicate();
					}
					break;
				case 2:
					{
					{
					setState(3386);
					match(LPAREN);
					setState(3387);
					searchCondition();
					setState(3388);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				setState(3396);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckConditionContext extends ParserRuleContext {
		public SearchConditionContext searchCondition() {
			return getRuleContext(SearchConditionContext.class,0);
		}
		public CheckConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkCondition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCheckCondition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCheckCondition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCheckCondition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckConditionContext checkCondition() throws RecognitionException {
		CheckConditionContext _localctx = new CheckConditionContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_checkCondition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3397);
			searchCondition();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PredicateContext extends ParserRuleContext {
		public BasicPredicateContext basicPredicate() {
			return getRuleContext(BasicPredicateContext.class,0);
		}
		public QuantifiedPredicateContext quantifiedPredicate() {
			return getRuleContext(QuantifiedPredicateContext.class,0);
		}
		public ArrayExistsPredicateContext arrayExistsPredicate() {
			return getRuleContext(ArrayExistsPredicateContext.class,0);
		}
		public BetweenPredicateContext betweenPredicate() {
			return getRuleContext(BetweenPredicateContext.class,0);
		}
		public DistinctPredicateContext distinctPredicate() {
			return getRuleContext(DistinctPredicateContext.class,0);
		}
		public ExistsPredicateContext existsPredicate() {
			return getRuleContext(ExistsPredicateContext.class,0);
		}
		public InPredicateContext inPredicate() {
			return getRuleContext(InPredicateContext.class,0);
		}
		public LikePredicateContext likePredicate() {
			return getRuleContext(LikePredicateContext.class,0);
		}
		public NullPredicateContext nullPredicate() {
			return getRuleContext(NullPredicateContext.class,0);
		}
		public XmlExistsPredicateContext xmlExistsPredicate() {
			return getRuleContext(XmlExistsPredicateContext.class,0);
		}
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PredicateContext predicate() throws RecognitionException {
		PredicateContext _localctx = new PredicateContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_predicate);
		try {
			setState(3409);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,388,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3399);
				basicPredicate();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3400);
				quantifiedPredicate();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3401);
				arrayExistsPredicate();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3402);
				betweenPredicate();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3403);
				distinctPredicate();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3404);
				existsPredicate();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3405);
				inPredicate();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3406);
				likePredicate();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3407);
				nullPredicate();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3408);
				xmlExistsPredicate();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BasicPredicateContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public List<RowValueExpressionContext> rowValueExpression() {
			return getRuleContexts(RowValueExpressionContext.class);
		}
		public RowValueExpressionContext rowValueExpression(int i) {
			return getRuleContext(RowValueExpressionContext.class,i);
		}
		public BasicPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_basicPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterBasicPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitBasicPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitBasicPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BasicPredicateContext basicPredicate() throws RecognitionException {
		BasicPredicateContext _localctx = new BasicPredicateContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_basicPredicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3419);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,389,_ctx) ) {
			case 1:
				{
				{
				setState(3411);
				expression();
				setState(3412);
				comparisonOperator();
				setState(3413);
				expression();
				}
				}
				break;
			case 2:
				{
				{
				setState(3415);
				rowValueExpression();
				setState(3416);
				comparisonOperator();
				setState(3417);
				rowValueExpression();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowValueExpressionContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public RowValueExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowValueExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRowValueExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRowValueExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRowValueExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowValueExpressionContext rowValueExpression() throws RecognitionException {
		RowValueExpressionContext _localctx = new RowValueExpressionContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_rowValueExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3421);
			match(LPAREN);
			setState(3422);
			expression();
			setState(3427);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3423);
				match(COMMA);
				setState(3424);
				expression();
				}
				}
				setState(3429);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3430);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QuantifiedPredicateContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public FullSelectContext fullSelect() {
			return getRuleContext(FullSelectContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public RowValueExpressionContext rowValueExpression() {
			return getRuleContext(RowValueExpressionContext.class,0);
		}
		public TerminalNode EQ() { return getToken(DB2zSQLParser.EQ, 0); }
		public TerminalNode NE() { return getToken(DB2zSQLParser.NE, 0); }
		public TerminalNode ALL() { return getToken(DB2zSQLParser.ALL, 0); }
		public TerminalNode SOME() { return getToken(DB2zSQLParser.SOME, 0); }
		public TerminalNode ANY() { return getToken(DB2zSQLParser.ANY, 0); }
		public QuantifiedPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_quantifiedPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterQuantifiedPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitQuantifiedPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitQuantifiedPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QuantifiedPredicateContext quantifiedPredicate() throws RecognitionException {
		QuantifiedPredicateContext _localctx = new QuantifiedPredicateContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_quantifiedPredicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3453);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,391,_ctx) ) {
			case 1:
				{
				{
				setState(3432);
				expression();
				setState(3433);
				comparisonOperator();
				setState(3434);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3435);
				match(LPAREN);
				setState(3436);
				fullSelect();
				setState(3437);
				match(RPAREN);
				}
				}
				break;
			case 2:
				{
				{
				setState(3439);
				rowValueExpression();
				setState(3440);
				match(EQ);
				setState(3441);
				_la = _input.LA(1);
				if ( !(_la==ANY || _la==SOME) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3442);
				match(LPAREN);
				setState(3443);
				fullSelect();
				setState(3444);
				match(RPAREN);
				}
				}
				break;
			case 3:
				{
				{
				setState(3446);
				rowValueExpression();
				setState(3447);
				match(NE);
				setState(3448);
				match(ALL);
				setState(3449);
				match(LPAREN);
				setState(3450);
				fullSelect();
				setState(3451);
				match(RPAREN);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArrayExistsPredicateContext extends ParserRuleContext {
		public TerminalNode ARRAY_EXISTS() { return getToken(DB2zSQLParser.ARRAY_EXISTS, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public ArrayExpressionContext arrayExpression() {
			return getRuleContext(ArrayExpressionContext.class,0);
		}
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public ArrayExistsPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arrayExistsPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterArrayExistsPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitArrayExistsPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitArrayExistsPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArrayExistsPredicateContext arrayExistsPredicate() throws RecognitionException {
		ArrayExistsPredicateContext _localctx = new ArrayExistsPredicateContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_arrayExistsPredicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3455);
			match(ARRAY_EXISTS);
			setState(3456);
			match(LPAREN);
			setState(3457);
			arrayExpression();
			setState(3458);
			match(INTEGERLITERAL);
			setState(3459);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BetweenPredicateContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode BETWEEN() { return getToken(DB2zSQLParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(DB2zSQLParser.AND, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public BetweenPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_betweenPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterBetweenPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitBetweenPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitBetweenPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BetweenPredicateContext betweenPredicate() throws RecognitionException {
		BetweenPredicateContext _localctx = new BetweenPredicateContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_betweenPredicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3461);
			expression();
			setState(3463);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(3462);
				match(NOT);
				}
			}

			setState(3465);
			match(BETWEEN);
			setState(3466);
			expression();
			setState(3467);
			match(AND);
			setState(3468);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DistinctPredicateContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode IS() { return getToken(DB2zSQLParser.IS, 0); }
		public TerminalNode DISTINCT() { return getToken(DB2zSQLParser.DISTINCT, 0); }
		public TerminalNode FROM() { return getToken(DB2zSQLParser.FROM, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public DistinctPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_distinctPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDistinctPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDistinctPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDistinctPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DistinctPredicateContext distinctPredicate() throws RecognitionException {
		DistinctPredicateContext _localctx = new DistinctPredicateContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_distinctPredicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3470);
			expression();
			setState(3471);
			match(IS);
			setState(3473);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(3472);
				match(NOT);
				}
			}

			setState(3475);
			match(DISTINCT);
			setState(3476);
			match(FROM);
			setState(3477);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExistsPredicateContext extends ParserRuleContext {
		public TerminalNode EXISTS() { return getToken(DB2zSQLParser.EXISTS, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public FullSelectContext fullSelect() {
			return getRuleContext(FullSelectContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public ExistsPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_existsPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterExistsPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitExistsPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitExistsPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExistsPredicateContext existsPredicate() throws RecognitionException {
		ExistsPredicateContext _localctx = new ExistsPredicateContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_existsPredicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3479);
			match(EXISTS);
			setState(3480);
			match(LPAREN);
			setState(3481);
			fullSelect();
			setState(3482);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InPredicateContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode IN() { return getToken(DB2zSQLParser.IN, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public FullSelectContext fullSelect() {
			return getRuleContext(FullSelectContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public InPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterInPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitInPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitInPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InPredicateContext inPredicate() throws RecognitionException {
		InPredicateContext _localctx = new InPredicateContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_inPredicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3484);
			expression();
			setState(3486);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(3485);
				match(NOT);
				}
			}

			setState(3488);
			match(IN);
			setState(3504);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,396,_ctx) ) {
			case 1:
				{
				{
				setState(3489);
				match(LPAREN);
				setState(3490);
				fullSelect();
				setState(3491);
				match(RPAREN);
				}
				}
				break;
			case 2:
				{
				{
				setState(3493);
				match(LPAREN);
				setState(3494);
				expression();
				setState(3499);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3495);
					match(COMMA);
					setState(3496);
					expression();
					}
					}
					setState(3501);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3502);
				match(RPAREN);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LikePredicateContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode LIKE() { return getToken(DB2zSQLParser.LIKE, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TerminalNode ESCAPE() { return getToken(DB2zSQLParser.ESCAPE, 0); }
		public LikePredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_likePredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterLikePredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitLikePredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitLikePredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LikePredicateContext likePredicate() throws RecognitionException {
		LikePredicateContext _localctx = new LikePredicateContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_likePredicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3506);
			expression();
			setState(3508);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(3507);
				match(NOT);
				}
			}

			setState(3510);
			match(LIKE);
			setState(3511);
			expression();
			setState(3514);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ESCAPE) {
				{
				setState(3512);
				match(ESCAPE);
				setState(3513);
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NullPredicateContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ISNULL() { return getToken(DB2zSQLParser.ISNULL, 0); }
		public TerminalNode NOTNULL() { return getToken(DB2zSQLParser.NOTNULL, 0); }
		public TerminalNode IS() { return getToken(DB2zSQLParser.IS, 0); }
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public NullPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterNullPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitNullPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitNullPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NullPredicateContext nullPredicate() throws RecognitionException {
		NullPredicateContext _localctx = new NullPredicateContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_nullPredicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3516);
			expression();
			setState(3524);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IS:
				{
				{
				setState(3517);
				match(IS);
				setState(3519);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(3518);
					match(NOT);
					}
				}

				setState(3521);
				match(NULL);
				}
				}
				break;
			case ISNULL:
				{
				setState(3522);
				match(ISNULL);
				}
				break;
			case NOTNULL:
				{
				setState(3523);
				match(NOTNULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlExistsPredicateContext extends ParserRuleContext {
		public TerminalNode XMLEXISTS() { return getToken(DB2zSQLParser.XMLEXISTS, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode PASSING() { return getToken(DB2zSQLParser.PASSING, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public TerminalNode REF() { return getToken(DB2zSQLParser.REF, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public XmlExistsPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlExistsPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterXmlExistsPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitXmlExistsPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitXmlExistsPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlExistsPredicateContext xmlExistsPredicate() throws RecognitionException {
		XmlExistsPredicateContext _localctx = new XmlExistsPredicateContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_xmlExistsPredicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3526);
			match(XMLEXISTS);
			setState(3527);
			match(LPAREN);
			setState(3528);
			match(NONNUMERICLITERAL);
			setState(3542);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PASSING) {
				{
				setState(3529);
				match(PASSING);
				setState(3532);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,401,_ctx) ) {
				case 1:
					{
					setState(3530);
					match(BY);
					setState(3531);
					match(REF);
					}
					break;
				}
				setState(3534);
				expression();
				setState(3539);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3535);
					match(COMMA);
					setState(3536);
					expression();
					}
					}
					setState(3541);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(3544);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArrayExpressionContext extends ParserRuleContext {
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public CastSpecificationContext castSpecification() {
			return getRuleContext(CastSpecificationContext.class,0);
		}
		public ArrayExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arrayExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterArrayExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitArrayExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitArrayExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArrayExpressionContext arrayExpression() throws RecognitionException {
		ArrayExpressionContext _localctx = new ArrayExpressionContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_arrayExpression);
		try {
			setState(3548);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,404,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3546);
				variable();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3547);
				castSpecification();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CastSpecificationContext extends ParserRuleContext {
		public TerminalNode CAST() { return getToken(DB2zSQLParser.CAST, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public CastDataTypeContext castDataType() {
			return getRuleContext(CastDataTypeContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public ParameterMarkerContext parameterMarker() {
			return getRuleContext(ParameterMarkerContext.class,0);
		}
		public CastSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_castSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCastSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCastSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCastSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CastSpecificationContext castSpecification() throws RecognitionException {
		CastSpecificationContext _localctx = new CastSpecificationContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_castSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3550);
			match(CAST);
			setState(3551);
			match(LPAREN);
			setState(3555);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,405,_ctx) ) {
			case 1:
				{
				setState(3552);
				expression();
				}
				break;
			case 2:
				{
				setState(3553);
				match(NULL);
				}
				break;
			case 3:
				{
				setState(3554);
				parameterMarker();
				}
				break;
			}
			setState(3557);
			match(AS);
			setState(3558);
			castDataType();
			setState(3559);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterMarkerContext extends ParserRuleContext {
		public TerminalNode QUESTIONMARK() { return getToken(DB2zSQLParser.QUESTIONMARK, 0); }
		public ParameterMarkerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterMarker; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterParameterMarker(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitParameterMarker(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitParameterMarker(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParameterMarkerContext parameterMarker() throws RecognitionException {
		ParameterMarkerContext _localctx = new ParameterMarkerContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_parameterMarker);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3561);
			match(QUESTIONMARK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CastDataTypeContext extends ParserRuleContext {
		public CastBuiltInTypeContext castBuiltInType() {
			return getRuleContext(CastBuiltInTypeContext.class,0);
		}
		public DistinctTypeNameContext distinctTypeName() {
			return getRuleContext(DistinctTypeNameContext.class,0);
		}
		public ArrayTypeContext arrayType() {
			return getRuleContext(ArrayTypeContext.class,0);
		}
		public CastDataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_castDataType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCastDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCastDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCastDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CastDataTypeContext castDataType() throws RecognitionException {
		CastDataTypeContext _localctx = new CastDataTypeContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_castDataType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3566);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,406,_ctx) ) {
			case 1:
				{
				setState(3563);
				castBuiltInType();
				}
				break;
			case 2:
				{
				setState(3564);
				distinctTypeName();
				}
				break;
			case 3:
				{
				setState(3565);
				arrayType();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CastBuiltInTypeContext extends ParserRuleContext {
		public TerminalNode SMALLINT() { return getToken(DB2zSQLParser.SMALLINT, 0); }
		public TerminalNode INTEGER() { return getToken(DB2zSQLParser.INTEGER, 0); }
		public TerminalNode INT() { return getToken(DB2zSQLParser.INT, 0); }
		public TerminalNode BIGINT() { return getToken(DB2zSQLParser.BIGINT, 0); }
		public TerminalNode REAL() { return getToken(DB2zSQLParser.REAL, 0); }
		public TerminalNode DATE() { return getToken(DB2zSQLParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(DB2zSQLParser.TIME, 0); }
		public TerminalNode ROWID() { return getToken(DB2zSQLParser.ROWID, 0); }
		public TerminalNode XML() { return getToken(DB2zSQLParser.XML, 0); }
		public TerminalNode DECFLOAT() { return getToken(DB2zSQLParser.DECFLOAT, 0); }
		public TerminalNode FLOAT() { return getToken(DB2zSQLParser.FLOAT, 0); }
		public TerminalNode DOUBLE() { return getToken(DB2zSQLParser.DOUBLE, 0); }
		public TerminalNode BINARY() { return getToken(DB2zSQLParser.BINARY, 0); }
		public TerminalNode TIMESTAMP() { return getToken(DB2zSQLParser.TIMESTAMP, 0); }
		public TerminalNode DECIMAL() { return getToken(DB2zSQLParser.DECIMAL, 0); }
		public TerminalNode DEC() { return getToken(DB2zSQLParser.DEC, 0); }
		public TerminalNode NUMERIC() { return getToken(DB2zSQLParser.NUMERIC, 0); }
		public TerminalNode GRAPHIC() { return getToken(DB2zSQLParser.GRAPHIC, 0); }
		public TerminalNode VARGRAPHIC() { return getToken(DB2zSQLParser.VARGRAPHIC, 0); }
		public TerminalNode DBCLOB() { return getToken(DB2zSQLParser.DBCLOB, 0); }
		public IntegerInParensContext integerInParens() {
			return getRuleContext(IntegerInParensContext.class,0);
		}
		public TerminalNode VARCHAR() { return getToken(DB2zSQLParser.VARCHAR, 0); }
		public TerminalNode CLOB() { return getToken(DB2zSQLParser.CLOB, 0); }
		public TerminalNode VARBINARY() { return getToken(DB2zSQLParser.VARBINARY, 0); }
		public TerminalNode BLOB() { return getToken(DB2zSQLParser.BLOB, 0); }
		public TerminalNode ZONE() { return getToken(DB2zSQLParser.ZONE, 0); }
		public TerminalNode PRECISION() { return getToken(DB2zSQLParser.PRECISION, 0); }
		public LengthContext length() {
			return getRuleContext(LengthContext.class,0);
		}
		public CcsidQualifierContext ccsidQualifier() {
			return getRuleContext(CcsidQualifierContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode WITHOUT() { return getToken(DB2zSQLParser.WITHOUT, 0); }
		public TerminalNode LARGE() { return getToken(DB2zSQLParser.LARGE, 0); }
		public TerminalNode OBJECT() { return getToken(DB2zSQLParser.OBJECT, 0); }
		public TerminalNode CHARACTER() { return getToken(DB2zSQLParser.CHARACTER, 0); }
		public TerminalNode CHAR() { return getToken(DB2zSQLParser.CHAR, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode SQLIDENTIFIER() { return getToken(DB2zSQLParser.SQLIDENTIFIER, 0); }
		public TerminalNode VARYING() { return getToken(DB2zSQLParser.VARYING, 0); }
		public CastBuiltInTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_castBuiltInType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCastBuiltInType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCastBuiltInType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCastBuiltInType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CastBuiltInTypeContext castBuiltInType() throws RecognitionException {
		CastBuiltInTypeContext _localctx = new CastBuiltInTypeContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_castBuiltInType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3675);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,427,_ctx) ) {
			case 1:
				{
				setState(3568);
				match(SMALLINT);
				}
				break;
			case 2:
				{
				setState(3569);
				match(INTEGER);
				}
				break;
			case 3:
				{
				setState(3570);
				match(INT);
				}
				break;
			case 4:
				{
				setState(3571);
				match(BIGINT);
				}
				break;
			case 5:
				{
				{
				setState(3572);
				_la = _input.LA(1);
				if ( !(_la==NUMERIC || _la==DEC || _la==DECIMAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3576);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,407,_ctx) ) {
				case 1:
					{
					setState(3573);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(3574);
					match(LPAREN);
					setState(3575);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 6:
				{
				{
				setState(3578);
				match(DECFLOAT);
				setState(3582);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,408,_ctx) ) {
				case 1:
					{
					setState(3579);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(3580);
					match(LPAREN);
					setState(3581);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 7:
				{
				{
				setState(3584);
				match(FLOAT);
				setState(3588);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,409,_ctx) ) {
				case 1:
					{
					setState(3585);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(3586);
					match(LPAREN);
					setState(3587);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 8:
				{
				setState(3590);
				match(REAL);
				}
				break;
			case 9:
				{
				{
				setState(3591);
				match(DOUBLE);
				setState(3593);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRECISION) {
					{
					setState(3592);
					match(PRECISION);
					}
				}

				}
				}
				break;
			case 10:
				{
				{
				setState(3600);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHAR:
				case CHARACTER:
					{
					{
					setState(3595);
					_la = _input.LA(1);
					if ( !(_la==CHAR || _la==CHARACTER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(3597);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==VARYING) {
						{
						setState(3596);
						match(VARYING);
						}
					}

					}
					}
					break;
				case VARCHAR:
					{
					setState(3599);
					match(VARCHAR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3605);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,413,_ctx) ) {
				case 1:
					{
					setState(3602);
					length();
					}
					break;
				case 2:
					{
					{
					setState(3603);
					match(LPAREN);
					setState(3604);
					match(RPAREN);
					}
					}
					break;
				}
				setState(3608);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CCSID) {
					{
					setState(3607);
					ccsidQualifier();
					}
				}

				}
				}
				break;
			case 11:
				{
				{
				setState(3614);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHAR:
				case CHARACTER:
					{
					{
					setState(3610);
					_la = _input.LA(1);
					if ( !(_la==CHAR || _la==CHARACTER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(3611);
					match(LARGE);
					setState(3612);
					match(OBJECT);
					}
					}
					break;
				case CLOB:
					{
					setState(3613);
					match(CLOB);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3619);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,416,_ctx) ) {
				case 1:
					{
					setState(3616);
					length();
					}
					break;
				case 2:
					{
					{
					setState(3617);
					match(LPAREN);
					setState(3618);
					match(RPAREN);
					}
					}
					break;
				}
				setState(3622);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CCSID) {
					{
					setState(3621);
					ccsidQualifier();
					}
				}

				}
				}
				break;
			case 12:
				{
				{
				setState(3624);
				_la = _input.LA(1);
				if ( !(_la==DBCLOB || _la==GRAPHIC || _la==VARGRAPHIC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3628);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,418,_ctx) ) {
				case 1:
					{
					setState(3625);
					length();
					}
					break;
				case 2:
					{
					{
					setState(3626);
					match(LPAREN);
					setState(3627);
					match(RPAREN);
					}
					}
					break;
				}
				setState(3631);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CCSID) {
					{
					setState(3630);
					ccsidQualifier();
					}
				}

				}
				}
				break;
			case 13:
				{
				{
				setState(3633);
				match(BINARY);
				setState(3637);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,420,_ctx) ) {
				case 1:
					{
					setState(3634);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(3635);
					match(LPAREN);
					setState(3636);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 14:
				{
				{
				setState(3644);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
					{
					{
					setState(3639);
					match(BINARY);
					setState(3641);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==VARYING) {
						{
						setState(3640);
						match(VARYING);
						}
					}

					}
					}
					break;
				case VARBINARY:
					{
					setState(3643);
					match(VARBINARY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3649);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,423,_ctx) ) {
				case 1:
					{
					setState(3646);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(3647);
					match(LPAREN);
					setState(3648);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 15:
				{
				{
				setState(3655);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
					{
					{
					setState(3651);
					match(BINARY);
					setState(3652);
					match(LARGE);
					setState(3653);
					match(OBJECT);
					}
					}
					break;
				case BLOB:
					{
					setState(3654);
					match(BLOB);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3662);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(3657);
					match(LPAREN);
					{
					setState(3658);
					match(INTEGERLITERAL);
					setState(3659);
					match(SQLIDENTIFIER);
					}
					setState(3661);
					match(RPAREN);
					}
				}

				}
				}
				break;
			case 16:
				{
				setState(3664);
				match(DATE);
				}
				break;
			case 17:
				{
				setState(3665);
				match(TIME);
				}
				break;
			case 18:
				{
				{
				setState(3666);
				match(TIMESTAMP);
				setState(3668);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(3667);
					integerInParens();
					}
				}

				{
				setState(3670);
				_la = _input.LA(1);
				if ( !(_la==WITH || _la==WITHOUT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3671);
				match(TIME);
				setState(3672);
				match(ZONE);
				}
				}
				}
				break;
			case 19:
				{
				setState(3673);
				match(ROWID);
				}
				break;
			case 20:
				{
				setState(3674);
				match(XML);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntegerInParensContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<TerminalNode> INTEGERLITERAL() { return getTokens(DB2zSQLParser.INTEGERLITERAL); }
		public TerminalNode INTEGERLITERAL(int i) {
			return getToken(DB2zSQLParser.INTEGERLITERAL, i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode COMMA() { return getToken(DB2zSQLParser.COMMA, 0); }
		public IntegerInParensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_integerInParens; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterIntegerInParens(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitIntegerInParens(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitIntegerInParens(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntegerInParensContext integerInParens() throws RecognitionException {
		IntegerInParensContext _localctx = new IntegerInParensContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_integerInParens);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3677);
			match(LPAREN);
			setState(3678);
			match(INTEGERLITERAL);
			setState(3681);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(3679);
				match(COMMA);
				setState(3680);
				match(INTEGERLITERAL);
				}
			}

			setState(3683);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode SQLIDENTIFIER() { return getToken(DB2zSQLParser.SQLIDENTIFIER, 0); }
		public TerminalNode CODEUNITS16() { return getToken(DB2zSQLParser.CODEUNITS16, 0); }
		public TerminalNode CODEUNITS32() { return getToken(DB2zSQLParser.CODEUNITS32, 0); }
		public TerminalNode OCTETS() { return getToken(DB2zSQLParser.OCTETS, 0); }
		public LengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_length; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterLength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitLength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LengthContext length() throws RecognitionException {
		LengthContext _localctx = new LengthContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_length);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3685);
			match(LPAREN);
			setState(3686);
			_la = _input.LA(1);
			if ( !(_la==INTEGERLITERAL || _la==SQLIDENTIFIER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3688);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 327)) & ~0x3f) == 0 && ((1L << (_la - 327)) & ((1L << (CODEUNITS16 - 327)) | (1L << (CODEUNITS32 - 327)) | (1L << (OCTETS - 327)))) != 0)) {
				{
				setState(3687);
				_la = _input.LA(1);
				if ( !(((((_la - 327)) & ~0x3f) == 0 && ((1L << (_la - 327)) & ((1L << (CODEUNITS16 - 327)) | (1L << (CODEUNITS32 - 327)) | (1L << (OCTETS - 327)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3690);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CcsidQualifierContext extends ParserRuleContext {
		public TerminalNode CCSID() { return getToken(DB2zSQLParser.CCSID, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode ASCII() { return getToken(DB2zSQLParser.ASCII, 0); }
		public TerminalNode EBCDIC() { return getToken(DB2zSQLParser.EBCDIC, 0); }
		public TerminalNode UNICODE() { return getToken(DB2zSQLParser.UNICODE, 0); }
		public ForDataQualifierContext forDataQualifier() {
			return getRuleContext(ForDataQualifierContext.class,0);
		}
		public CcsidQualifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ccsidQualifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCcsidQualifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCcsidQualifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCcsidQualifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CcsidQualifierContext ccsidQualifier() throws RecognitionException {
		CcsidQualifierContext _localctx = new CcsidQualifierContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_ccsidQualifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3692);
			match(CCSID);
			setState(3698);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EBCDIC:
			case ASCII:
			case UNICODE:
				{
				{
				setState(3693);
				_la = _input.LA(1);
				if ( !(_la==EBCDIC || _la==ASCII || _la==UNICODE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3695);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(3694);
					forDataQualifier();
					}
				}

				}
				}
				break;
			case INTEGERLITERAL:
				{
				setState(3697);
				match(INTEGERLITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ForDataQualifierContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode DATA() { return getToken(DB2zSQLParser.DATA, 0); }
		public TerminalNode SBCS() { return getToken(DB2zSQLParser.SBCS, 0); }
		public TerminalNode MIXED() { return getToken(DB2zSQLParser.MIXED, 0); }
		public TerminalNode BIT() { return getToken(DB2zSQLParser.BIT, 0); }
		public ForDataQualifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forDataQualifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterForDataQualifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitForDataQualifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitForDataQualifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ForDataQualifierContext forDataQualifier() throws RecognitionException {
		ForDataQualifierContext _localctx = new ForDataQualifierContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_forDataQualifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3700);
			match(FOR);
			setState(3701);
			_la = _input.LA(1);
			if ( !(_la==BIT || _la==MIXED || _la==SBCS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3702);
			match(DATA);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DistinctTypeNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public CorrelationNameContext correlationName() {
			return getRuleContext(CorrelationNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public DistinctTypeNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_distinctTypeName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDistinctTypeName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDistinctTypeName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDistinctTypeName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DistinctTypeNameContext distinctTypeName() throws RecognitionException {
		DistinctTypeNameContext _localctx = new DistinctTypeNameContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_distinctTypeName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3707);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,432,_ctx) ) {
			case 1:
				{
				setState(3704);
				correlationName();
				setState(3705);
				match(DOT);
				}
				break;
			}
			setState(3709);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArrayTypeContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ArrayTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arrayType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterArrayType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitArrayType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitArrayType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArrayTypeContext arrayType() throws RecognitionException {
		ArrayTypeContext _localctx = new ArrayTypeContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_arrayType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3711);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LiteralContext extends ParserRuleContext {
		public TerminalNode NUMERICLITERAL() { return getToken(DB2zSQLParser.NUMERICLITERAL, 0); }
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LiteralContext literal() throws RecognitionException {
		LiteralContext _localctx = new LiteralContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_literal);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3713);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NONNUMERICLITERAL) | (1L << INTEGERLITERAL) | (1L << NUMERICLITERAL))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CcsidValueContext extends ParserRuleContext {
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public CcsidValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ccsidValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCcsidValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCcsidValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCcsidValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CcsidValueContext ccsidValue() throws RecognitionException {
		CcsidValueContext _localctx = new CcsidValueContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_ccsidValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3715);
			match(INTEGERLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public CorrelationNameContext correlationName() {
			return getRuleContext(CorrelationNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public ColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnNameContext columnName() throws RecognitionException {
		ColumnNameContext _localctx = new ColumnNameContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_columnName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3720);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,433,_ctx) ) {
			case 1:
				{
				setState(3717);
				correlationName();
				setState(3718);
				match(DOT);
				}
				break;
			}
			setState(3722);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SourceColumnNameContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public SourceColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sourceColumnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSourceColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSourceColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSourceColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SourceColumnNameContext sourceColumnName() throws RecognitionException {
		SourceColumnNameContext _localctx = new SourceColumnNameContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_sourceColumnName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3724);
			columnName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TargetColumnNameContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TargetColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_targetColumnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTargetColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTargetColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTargetColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TargetColumnNameContext targetColumnName() throws RecognitionException {
		TargetColumnNameContext _localctx = new TargetColumnNameContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_targetColumnName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3726);
			columnName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NewColumnNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public NewColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_newColumnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterNewColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitNewColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitNewColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NewColumnNameContext newColumnName() throws RecognitionException {
		NewColumnNameContext _localctx = new NewColumnNameContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_newColumnName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3728);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BeginColumnNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public BeginColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_beginColumnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterBeginColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitBeginColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitBeginColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BeginColumnNameContext beginColumnName() throws RecognitionException {
		BeginColumnNameContext _localctx = new BeginColumnNameContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_beginColumnName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3730);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EndColumnNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public EndColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_endColumnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterEndColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitEndColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitEndColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EndColumnNameContext endColumnName() throws RecognitionException {
		EndColumnNameContext _localctx = new EndColumnNameContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_endColumnName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3732);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CorrelationNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public CorrelationNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_correlationName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCorrelationName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCorrelationName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCorrelationName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CorrelationNameContext correlationName() throws RecognitionException {
		CorrelationNameContext _localctx = new CorrelationNameContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_correlationName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3734);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LocationNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public LocationNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_locationName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterLocationName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitLocationName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitLocationName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LocationNameContext locationName() throws RecognitionException {
		LocationNameContext _localctx = new LocationNameContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_locationName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3736);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SchemaNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSchemaName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSchemaName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSchemaName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SchemaNameContext schemaName() throws RecognitionException {
		SchemaNameContext _localctx = new SchemaNameContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_schemaName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3738);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public CorrelationNameContext correlationName() {
			return getRuleContext(CorrelationNameContext.class,0);
		}
		public LocationNameContext locationName() {
			return getRuleContext(LocationNameContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(DB2zSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(DB2zSQLParser.DOT, i);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableNameContext tableName() throws RecognitionException {
		TableNameContext _localctx = new TableNameContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_tableName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3748);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,434,_ctx) ) {
			case 1:
				{
				{
				setState(3740);
				locationName();
				setState(3741);
				match(DOT);
				setState(3742);
				schemaName();
				setState(3743);
				match(DOT);
				}
				}
				break;
			case 2:
				{
				{
				setState(3745);
				schemaName();
				setState(3746);
				match(DOT);
				}
				}
				break;
			}
			setState(3750);
			identifier();
			setState(3752);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,435,_ctx) ) {
			case 1:
				{
				setState(3751);
				correlationName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public LocationNameContext locationName() {
			return getRuleContext(LocationNameContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(DB2zSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(DB2zSQLParser.DOT, i);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public AlterTableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableNameContext alterTableName() throws RecognitionException {
		AlterTableNameContext _localctx = new AlterTableNameContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_alterTableName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3762);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,436,_ctx) ) {
			case 1:
				{
				{
				setState(3754);
				locationName();
				setState(3755);
				match(DOT);
				setState(3756);
				schemaName();
				setState(3757);
				match(DOT);
				}
				}
				break;
			case 2:
				{
				{
				setState(3759);
				schemaName();
				setState(3760);
				match(DOT);
				}
				}
				break;
			}
			setState(3764);
			identifier();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HistoryTableNameContext extends ParserRuleContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public HistoryTableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_historyTableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterHistoryTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitHistoryTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitHistoryTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HistoryTableNameContext historyTableName() throws RecognitionException {
		HistoryTableNameContext _localctx = new HistoryTableNameContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_historyTableName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3766);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CloneTableNameContext extends ParserRuleContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public CloneTableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cloneTableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCloneTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCloneTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCloneTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CloneTableNameContext cloneTableName() throws RecognitionException {
		CloneTableNameContext _localctx = new CloneTableNameContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_cloneTableName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3768);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArchiveTableNameContext extends ParserRuleContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public ArchiveTableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_archiveTableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterArchiveTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitArchiveTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitArchiveTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArchiveTableNameContext archiveTableName() throws RecognitionException {
		ArchiveTableNameContext _localctx = new ArchiveTableNameContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_archiveTableName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3770);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProgramNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ProgramNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_programName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterProgramName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitProgramName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitProgramName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProgramNameContext programName() throws RecognitionException {
		ProgramNameContext _localctx = new ProgramNameContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_programName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3772);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ConstraintNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterConstraintName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitConstraintName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitConstraintName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintNameContext constraintName() throws RecognitionException {
		ConstraintNameContext _localctx = new ConstraintNameContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_constraintName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3774);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public IndexNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterIndexName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitIndexName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitIndexName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexNameContext indexName() throws RecognitionException {
		IndexNameContext _localctx = new IndexNameContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_indexName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3779);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,437,_ctx) ) {
			case 1:
				{
				setState(3776);
				schemaName();
				setState(3777);
				match(DOT);
				}
				break;
			}
			setState(3781);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MaskNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public MaskNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_maskName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterMaskName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitMaskName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitMaskName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MaskNameContext maskName() throws RecognitionException {
		MaskNameContext _localctx = new MaskNameContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_maskName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3786);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,438,_ctx) ) {
			case 1:
				{
				setState(3783);
				schemaName();
				setState(3784);
				match(DOT);
				}
				break;
			}
			setState(3788);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PermissionNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public PermissionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_permissionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPermissionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPermissionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPermissionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PermissionNameContext permissionName() throws RecognitionException {
		PermissionNameContext _localctx = new PermissionNameContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_permissionName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3793);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,439,_ctx) ) {
			case 1:
				{
				setState(3790);
				schemaName();
				setState(3791);
				match(DOT);
				}
				break;
			}
			setState(3795);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcedureNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public LocationNameContext locationName() {
			return getRuleContext(LocationNameContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(DB2zSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(DB2zSQLParser.DOT, i);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public ProcedureNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterProcedureName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitProcedureName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitProcedureName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProcedureNameContext procedureName() throws RecognitionException {
		ProcedureNameContext _localctx = new ProcedureNameContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_procedureName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3805);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,440,_ctx) ) {
			case 1:
				{
				{
				setState(3797);
				locationName();
				setState(3798);
				match(DOT);
				setState(3799);
				schemaName();
				setState(3800);
				match(DOT);
				}
				}
				break;
			case 2:
				{
				{
				setState(3802);
				schemaName();
				setState(3803);
				match(DOT);
				}
				}
				break;
			}
			setState(3807);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SequenceNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public SequenceNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequenceName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSequenceName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSequenceName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSequenceName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SequenceNameContext sequenceName() throws RecognitionException {
		SequenceNameContext _localctx = new SequenceNameContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_sequenceName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3812);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,441,_ctx) ) {
			case 1:
				{
				setState(3809);
				schemaName();
				setState(3810);
				match(DOT);
				}
				break;
			}
			setState(3814);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DatabaseNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public DatabaseNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_databaseName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDatabaseName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDatabaseName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDatabaseName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DatabaseNameContext databaseName() throws RecognitionException {
		DatabaseNameContext _localctx = new DatabaseNameContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_databaseName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3816);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CatalogNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public CatalogNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_catalogName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCatalogName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCatalogName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCatalogName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CatalogNameContext catalogName() throws RecognitionException {
		CatalogNameContext _localctx = new CatalogNameContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_catalogName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3818);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BpNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public BpNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bpName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterBpName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitBpName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitBpName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BpNameContext bpName() throws RecognitionException {
		BpNameContext _localctx = new BpNameContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_bpName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3820);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StogroupNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public StogroupNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stogroupName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterStogroupName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitStogroupName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitStogroupName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StogroupNameContext stogroupName() throws RecognitionException {
		StogroupNameContext _localctx = new StogroupNameContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_stogroupName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3822);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DcNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public DcNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dcName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDcName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDcName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDcName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DcNameContext dcName() throws RecognitionException {
		DcNameContext _localctx = new DcNameContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_dcName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3824);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class McNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public McNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mcName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterMcName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitMcName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitMcName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final McNameContext mcName() throws RecognitionException {
		McNameContext _localctx = new McNameContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_mcName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3826);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ScNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterScName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitScName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitScName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ScNameContext scName() throws RecognitionException {
		ScNameContext _localctx = new ScNameContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_scName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3828);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VolumeIDContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public VolumeIDContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_volumeID; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterVolumeID(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitVolumeID(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitVolumeID(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VolumeIDContext volumeID() throws RecognitionException {
		VolumeIDContext _localctx = new VolumeIDContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_volumeID);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3830);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyLabelNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public KeyLabelNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyLabelName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterKeyLabelName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitKeyLabelName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitKeyLabelName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyLabelNameContext keyLabelName() throws RecognitionException {
		KeyLabelNameContext _localctx = new KeyLabelNameContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_keyLabelName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3834);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case ALL:
			case ALLOCATE:
			case ALLOW:
			case ALTER:
			case ALTERAND:
			case ANY:
			case ARRAY:
			case ARRAY_EXISTS:
			case AS:
			case ASENSITIVE:
			case ASSOCIATE:
			case ASUTIME:
			case AT:
			case AUDIT:
			case AUX:
			case AUXILIARY:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BUFFERPOOL:
			case BY:
			case CALL:
			case CAPTURE:
			case CASCADED:
			case CASE:
			case CAST:
			case CCSID:
			case CHAR:
			case CHARACTER:
			case CHECK:
			case CLONE:
			case CLOSE:
			case CLUSTER:
			case COLLECTION:
			case COLLID:
			case COLUMN:
			case COMMENT:
			case COMMIT:
			case CONCAT:
			case CONDITION:
			case CONNECT:
			case CONNECTION:
			case CONSTRAINT:
			case CONTAINS:
			case CONTENT:
			case CONTINUE:
			case CREATE:
			case CUBE:
			case CURRENT:
			case CURRENT_LC_CTYPE:
			case CURRVAL:
			case CURSOR:
			case DATA:
			case DATABASE:
			case DAY:
			case DAYS:
			case DBINFO:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DISABLE:
			case DISALLOW:
			case DISTINCT:
			case DO:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSSIZE:
			case DYNAMIC:
			case EDITPROC:
			case ELSE:
			case ELSEIF:
			case ENCODING:
			case ENCRYPTION:
			case END:
			case END_EXEC:
			case ENDING:
			case ERASE:
			case ESCAPE:
			case EXCEPT:
			case EXCEPTION:
			case EXEC_SQL:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case FENCED:
			case FETCH:
			case FIELDPROC:
			case FINAL:
			case FIRST:
			case FOR:
			case FREE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANT:
			case GROUP:
			case HANDLER:
			case HAVING:
			case HOLD:
			case HOUR:
			case HOURS:
			case IF:
			case IMMEDIATE:
			case IN:
			case INCLUSIVE:
			case INDEX:
			case INDEXBP:
			case INHERIT:
			case INNER:
			case INOUT:
			case INSENSITIVE:
			case INSERT:
			case INTERSECT:
			case INTO:
			case IS:
			case ISOBID:
			case ITERATE:
			case JAR:
			case JOIN:
			case KEEP:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LAST:
			case LC_CTYPE:
			case LEAVE:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOCALE:
			case LOCATOR:
			case LOCATORS:
			case LOCK:
			case LOCKMAX:
			case LOCKSIZE:
			case LONG:
			case LOOP:
			case MAINTAINED:
			case MATERIALIZED:
			case MICROSECOND:
			case MICROSECONDS:
			case MODIFIES:
			case MONTH:
			case MONTHS:
			case NEXT:
			case NEXTVAL:
			case NO:
			case NONE:
			case NOT:
			case NULL:
			case NULLS:
			case NUMPARTS:
			case OBID:
			case OF:
			case OFFSET:
			case OLD:
			case ON:
			case OPEN:
			case OPTIMIZATION:
			case OPTIMIZE:
			case OR:
			case ORDER:
			case ORGANIZATION:
			case OUT:
			case OUTER:
			case PACKAGE:
			case PADDED:
			case PARAMETER:
			case PART:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONING:
			case PATH:
			case PERIOD:
			case PIECESIZE:
			case PLAN:
			case PRECISION:
			case PREPARE:
			case PREVVAL:
			case PRIOR:
			case PRIQTY:
			case PRIVILEGES:
			case PROCEDURE:
			case PROGRAM:
			case PSID:
			case PUBLIC:
			case QUERY:
			case QUERYNO:
			case READS:
			case REFERENCES:
			case REFRESH:
			case RELEASE:
			case RENAME:
			case REPEAT:
			case RESIGNAL:
			case RESTRICT:
			case RESULT:
			case RESULT_SET_LOCATOR:
			case RETURN:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUND_CEILING:
			case ROUND_DOWN:
			case ROUND_FLOOR:
			case ROUND_HALF_DOWN:
			case ROUND_HALF_EVEN:
			case ROUND_HALF_UP:
			case ROUND_UP:
			case ROW:
			case ROWSET:
			case RUN:
			case SAVEPOINT:
			case SCHEMA:
			case SCRATCHPAD:
			case SECOND:
			case SECONDS:
			case SECQTY:
			case SECURITY:
			case SELECT:
			case SENSITIVE:
			case SEQUENCE:
			case SET:
			case SIGNAL:
			case SIMPLE:
			case SOME:
			case SOURCE:
			case SPECIFIC:
			case STANDARD:
			case STATEMENT:
			case STATIC:
			case STAY:
			case STOGROUP:
			case STORES:
			case STYLE:
			case SUMMARY:
			case SYNONYM:
			case SYSDATE:
			case SYSTEM:
			case SYSTIMESTAMP:
			case TABLE:
			case TABLESPACE:
			case THEN:
			case TO:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNDO:
			case UNION:
			case UNIQUE:
			case UNTIL:
			case UPDATE:
			case USING:
			case VALIDPROC:
			case VALUE:
			case VALUES:
			case VARIABLE:
			case VARIANT:
			case VCAT:
			case VERSIONING:
			case VIEW:
			case VOLATILE:
			case VOLUMES:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WLM:
			case XMLCAST:
			case XMLEXISTS:
			case XMLNAMESPACES:
			case YEAR:
			case YEARS:
			case ZONE:
			case AND:
			case ARRAY_AGG:
			case ASC:
			case AVG:
			case BIT:
			case CHANGE:
			case CODEUNITS16:
			case CODEUNITS32:
			case CORR:
			case CORRELATION:
			case COUNT:
			case COUNT_BIG:
			case COVAR:
			case COVARIANCE:
			case COVARIANCE_SAMP:
			case COVAR_POP:
			case COVAR_SAMP:
			case CS:
			case CUME_DIST:
			case DENSE_RANK:
			case DESC:
			case EBCDIC:
			case EXCLUSIVE:
			case FIRST_VALUE:
			case FOLLOWING:
			case GROUPING:
			case IGNORE:
			case INDICATOR:
			case INPUT:
			case ISNULL:
			case LAG:
			case LARGE:
			case LAST_VALUE:
			case LEAD:
			case LISTAGG:
			case LOCKED:
			case LOCKS:
			case MEDIAN:
			case MINUTES:
			case MIXED:
			case NOTNULL:
			case NTH_VALUE:
			case NTILE:
			case NUMERIC:
			case OBJECT:
			case OCTETS:
			case ONLY:
			case OVER:
			case PASSING:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PERCENT_RANK:
			case PRECEDING:
			case PREVIOUS:
			case RANGE:
			case RANK:
			case RATIO_TO_REPORT:
			case READ:
			case REF:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_ICPT:
			case REGR_INTERCEPT:
			case REGR_R2:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case RESPECT:
			case ROW_NUMBER:
			case ROWS:
			case RR:
			case RS:
			case SBCS:
			case SELECTIVITY:
			case SETS:
			case SHARE:
			case SKIP_:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case TOKEN:
			case UNBOUNDED:
			case UNPACK:
			case UR:
			case USE:
			case VAR:
			case VARIANCE:
			case VARIANCE_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARYING:
			case WITHOUT:
			case XML:
			case XMLAGG:
			case COLUMNS:
			case SQLID:
			case ORDINALITY:
			case SYSTEM_TIME:
			case BUSINESS_TIME:
			case MULTIPLIER:
			case UNNEST:
			case CROSS:
			case CALLER:
			case CLIENT:
			case POSITIONING:
			case SCROLL:
			case ACTION:
			case ASSEMBLE:
			case C_:
			case CALLED:
			case COBOL:
			case DB2:
			case DEFINER:
			case DISPATCH:
			case ENVIRONMENT:
			case FAILURE:
			case FAILURES:
			case JAVA:
			case MAIN:
			case NAME:
			case OPTIONS:
			case PARALLEL:
			case PLI:
			case REGISTERS:
			case RESIDENT:
			case SECURED:
			case SPECIAL:
			case SQL:
			case STOP:
			case SUB:
			case YES:
			case APPLICATION:
			case CHANGED:
			case COMPATIBILITY:
			case COMPRESS:
			case COPY:
			case FREEPAGE:
			case GBPCACHE:
			case INCLUDE:
			case MAXVALUE:
			case MINVALUE:
			case PCTFREE:
			case REGENERATE:
			case SEQTY:
			case MASK:
			case ENABLE:
			case PERMISSION:
			case ATOMIC:
			case SQLEXCEPTION:
			case MERGE:
			case MATCHED:
			case SQLSTATE:
			case MESSAGE_TEXT:
			case OVERRIDING:
			case PORTION:
			case DB2SQL:
			case DEBUG:
			case GENERAL:
			case MODE_:
			case REXX:
			case CACHE:
			case CYCLE:
			case INCREMENT:
			case RESTART:
			case DATACLAS:
			case MGMTCLAS:
			case REMOVE:
			case STORCLAS:
			case ACCESS:
			case ACTIVATE:
			case ALWAYS:
			case APPEND:
			case ARCHIVE:
			case BUSINESS:
			case CASCADE:
			case CHANGES:
			case CONTROL:
			case DEACTIVATE:
			case DEFERRED:
			case EACH:
			case ENFORCED:
			case EXTRA:
			case FOREIGN:
			case HIDDEN_:
			case HISTORY:
			case ID:
			case IDENTITY:
			case IMPLICITLY:
			case INITIALLY:
			case INLINE:
			case OPERATION:
			case ORGANIZE:
			case OVERLAPS:
			case PACKAGE_NAME:
			case PACKAGE_SCHEMA:
			case PACKAGE_VERSION:
			case PRIMARY:
			case RESET:
			case ROTATE:
			case START:
			case SYSIBM:
			case TRANSACTION:
			case ABS:
			case ABSVAL:
			case ACOS:
			case ADD_DAYS:
			case ADD_MONTHS:
			case ARRAY_DELETE:
			case ARRAY_FIRST:
			case ARRAY_LAST:
			case ARRAY_NEXT:
			case ARRAY_PRIOR:
			case ARRAY_TRIM:
			case ASCII:
			case ASCII_CHR:
			case ASCIISTR:
			case ASCII_STR:
			case ASIN:
			case ATAN:
			case ATAN2:
			case ATANH:
			case BIGINT:
			case BINARY:
			case BITAND:
			case BITANDNOT:
			case BITNOT:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BTRIM:
			case CARDINALITY:
			case CCSID_ENCODING:
			case CEIL:
			case CEILING:
			case CHAR9:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case CHR:
			case CLOB:
			case COALESCE:
			case COLLATION_KEY:
			case COMPARE_DECFLOAT:
			case COS:
			case COSH:
			case DATE:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFWEEK_ISO:
			case DAYOFYEAR:
			case DAYS_BETWEEN:
			case DBCLOB:
			case DEC:
			case DECFLOAT:
			case DECFLOAT_FORMAT:
			case DECFLOAT_SORTKEY:
			case DECIMAL:
			case DECODE:
			case DECRYPT_BINARY:
			case DECRYPT_BIT:
			case DECRYPT_CHAR:
			case DECRYPT_DATAKEY_BIGINT:
			case DECRYPT_DATAKEY_BIT:
			case DECRYPT_DATAKEY_CLOB:
			case DECRYPT_DATAKEY_DBCLOB:
			case DECRYPT_DATAKEY_DECIMAL:
			case DECRYPT_DATAKEY_INTEGER:
			case DECRYPT_DATAKEY_VARCHAR:
			case DECRYPT_DATAKEY_VARGRAPHIC:
			case DECRYPT_DB:
			case DEGREES:
			case DIFFERENCE:
			case DIGITS:
			case DOUBLE_PRECISION:
			case DSN_XMLVALIDATE:
			case EBCDIC_CHR:
			case EBCDIC_STR:
			case ENCRYPT_DATAKEY:
			case ENCRYPT_TDES:
			case EXP:
			case EXTRACT:
			case FLOAT:
			case FLOOR:
			case GENERATE_UNIQUE:
			case GENERATE_UNIQUE_BINARY:
			case GETHINT:
			case GETVARIABLE:
			case GRAPHIC:
			case GREATEST:
			case HASH:
			case HASH_CRC32:
			case HASH_MD5:
			case HASH_SHA1:
			case HASH_SHA256:
			case HEX:
			case IDENTITY_VAL_LOCAL:
			case IFNULL:
			case INSTR:
			case INT:
			case INTEGER:
			case JULIAN_DAY:
			case LAST_DAY:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LN:
			case LOCATE:
			case LOCATE_IN_STRING:
			case LOG10:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAX:
			case MAX_CARDINALITY:
			case MIDNIGHT_SECONDS:
			case MIN:
			case MINUTE:
			case MOD:
			case MONTHS_BETWEEN:
			case MQREAD:
			case MQREADCLOB:
			case MQRECEIVE:
			case MQRECEIVECLOB:
			case MQSEND:
			case MULTIPLY_ALT:
			case NEXT_DAY:
			case NEXT_MONTH:
			case NORMALIZE_DECFLOAT:
			case NORMALIZE_STRING:
			case NULLIF:
			case NVL:
			case OVERLAY:
			case PACK:
			case POSITION:
			case POSSTR:
			case POW:
			case POWER:
			case QUANTIZE:
			case QUARTER:
			case RADIANS:
			case RAISE_ERROR:
			case RAND:
			case RANDOM:
			case REAL:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REPLACE:
			case RID:
			case ROUND:
			case ROUND_TIMESTAMP:
			case ROWID:
			case RPAD:
			case RTRIM:
			case SCORE:
			case SIGN:
			case SIN:
			case SINH:
			case SMALLINT:
			case SOAPHTTPC:
			case SOAPHTTPNC:
			case SOAPHTTPNV:
			case SOAPHTTPV:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STRIP:
			case STRLEFT:
			case STRPOS:
			case STRRIGHT:
			case SUBSTR:
			case SUBSTRING:
			case TAN:
			case TANH:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIMESTAMP_FORMAT:
			case TIMESTAMP_ISO:
			case TIMESTAMP_TZ:
			case TO_CHAR:
			case TO_CLOB:
			case TO_DATE:
			case TO_NUMBER:
			case TOTALORDER:
			case TO_TIMESTAMP:
			case TRANSLATE:
			case TRIM:
			case TRIM_ARRAY:
			case TRUNC:
			case TRUNC_TIMESTAMP:
			case UCASE:
			case UNICODE:
			case UNICODE_STR:
			case UNISTR:
			case UPPER:
			case VARBINARY:
			case VARCHAR:
			case VARCHAR9:
			case VARCHAR_BIT_FORMAT:
			case VARCHAR_FORMAT:
			case VARGRAPHIC:
			case VERIFY_GROUP_FOR_USER:
			case VERIFY_ROLE_FOR_USER:
			case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
			case WEEK:
			case WEEK_ISO:
			case WRAP:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLCONCAT:
			case XMLDOCUMENT:
			case XMLELEMENT:
			case XMLFOREST:
			case XMLMODIFY:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLSERIALIZE:
			case XMLTEXT:
			case XMLXSROBJECTID:
			case XSLTRANSFORM:
			case CURRENT_ACCELERATOR:
			case CURRENT_APPLICATION_COMPATIBILITY:
			case CURRENT_APPLICATION_ENCODING_SCHEME:
			case CURRENT_CLIENT_ACCTNG:
			case CURRENT_CLIENT_APPLNAME:
			case CURRENT_CLIENT_CORR_TOKEN:
			case CURRENT_CLIENT_USERID:
			case CURRENT_CLIENT_WRKSTNNAME:
			case CURRENT_DATE:
			case CURRENT_DEBUG_MODE:
			case CURRENT_DECFLOAT_ROUNDING_MODE:
			case CURRENT_DEGREE:
			case CURRENT_EXPLAIN_MODE:
			case CURRENT_GET_ACCEL_ARCHIVE:
			case CURRENT_LOCALE_LC_CTYPE:
			case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
			case CURRENT_MEMBER:
			case CURRENT_OPTIMIZATION_HINT:
			case CURRENT_PACKAGE_PATH:
			case CURRENT_PACKAGESET:
			case CURRENT_PATH:
			case CURRENT_PRECISION:
			case CURRENT_QUERY_ACCELERATION:
			case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
			case CURRENT_REFRESH_AGE:
			case CURRENT_ROUTINE_VERSION:
			case CURRENT_RULES:
			case CURRENT_SCHEMA:
			case CURRENT_SERVER:
			case CURRENT_SQLID:
			case CURRENT_TEMPORAL_BUSINESS_TIME:
			case CURRENT_TEMPORAL_SYSTEM_TIME:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_TIME_ZONE:
			case ENCRYPTION_PASSWORD:
			case SESSION_TIME_ZONE:
			case SESSION_USER:
			case USER:
			case ADMIN_TASK_LIST:
			case ADMIN_TASK_OUTPUT:
			case ADMIN_TASK_STATUS:
			case BLOCKING_THREADS:
			case MQREADALL:
			case MQREADALLCLOB:
			case MQRECEIVEALL:
			case MQRECEIVEALLCLOB:
			case XMLTABLE:
			case SQLIDENTIFIER:
				{
				setState(3832);
				identifier();
				}
				break;
			case NONNUMERICLITERAL:
				{
				setState(3833);
				match(NONNUMERICLITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public FunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFunctionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFunctionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFunctionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionNameContext functionName() throws RecognitionException {
		FunctionNameContext _localctx = new FunctionNameContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_functionName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3839);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,443,_ctx) ) {
			case 1:
				{
				setState(3836);
				schemaName();
				setState(3837);
				match(DOT);
				}
				break;
			}
			setState(3841);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SpecificNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public SpecificNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_specificName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSpecificName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSpecificName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSpecificName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SpecificNameContext specificName() throws RecognitionException {
		SpecificNameContext _localctx = new SpecificNameContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_specificName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3846);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,444,_ctx) ) {
			case 1:
				{
				setState(3843);
				schemaName();
				setState(3844);
				match(DOT);
				}
				break;
			}
			setState(3848);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HostVariableContext extends ParserRuleContext {
		public List<TerminalNode> COLON() { return getTokens(DB2zSQLParser.COLON); }
		public TerminalNode COLON(int i) {
			return getToken(DB2zSQLParser.COLON, i);
		}
		public List<HostIdentifierContext> hostIdentifier() {
			return getRuleContexts(HostIdentifierContext.class);
		}
		public HostIdentifierContext hostIdentifier(int i) {
			return getRuleContext(HostIdentifierContext.class,i);
		}
		public List<HostStructureContext> hostStructure() {
			return getRuleContexts(HostStructureContext.class);
		}
		public HostStructureContext hostStructure(int i) {
			return getRuleContext(HostStructureContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(DB2zSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(DB2zSQLParser.DOT, i);
		}
		public TerminalNode INDICATOR() { return getToken(DB2zSQLParser.INDICATOR, 0); }
		public HostVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hostVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterHostVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitHostVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitHostVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HostVariableContext hostVariable() throws RecognitionException {
		HostVariableContext _localctx = new HostVariableContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_hostVariable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3850);
			match(COLON);
			setState(3854);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,445,_ctx) ) {
			case 1:
				{
				setState(3851);
				hostStructure();
				setState(3852);
				match(DOT);
				}
				break;
			}
			setState(3856);
			hostIdentifier();
			setState(3867);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,448,_ctx) ) {
			case 1:
				{
				setState(3858);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDICATOR) {
					{
					setState(3857);
					match(INDICATOR);
					}
				}

				setState(3860);
				match(COLON);
				setState(3864);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,447,_ctx) ) {
				case 1:
					{
					setState(3861);
					hostStructure();
					setState(3862);
					match(DOT);
					}
					break;
				}
				setState(3866);
				hostIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HostIdentifierContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public HostIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hostIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterHostIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitHostIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitHostIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HostIdentifierContext hostIdentifier() throws RecognitionException {
		HostIdentifierContext _localctx = new HostIdentifierContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_hostIdentifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3869);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HostStructureContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public HostStructureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hostStructure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterHostStructure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitHostStructure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitHostStructure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HostStructureContext hostStructure() throws RecognitionException {
		HostStructureContext _localctx = new HostStructureContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_hostStructure);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3871);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public VariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableContext variable() throws RecognitionException {
		VariableContext _localctx = new VariableContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_variable);
		try {
			setState(3880);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case ALL:
			case ALLOCATE:
			case ALLOW:
			case ALTER:
			case ALTERAND:
			case ANY:
			case ARRAY:
			case ARRAY_EXISTS:
			case AS:
			case ASENSITIVE:
			case ASSOCIATE:
			case ASUTIME:
			case AT:
			case AUDIT:
			case AUX:
			case AUXILIARY:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BUFFERPOOL:
			case BY:
			case CALL:
			case CAPTURE:
			case CASCADED:
			case CASE:
			case CAST:
			case CCSID:
			case CHAR:
			case CHARACTER:
			case CHECK:
			case CLONE:
			case CLOSE:
			case CLUSTER:
			case COLLECTION:
			case COLLID:
			case COLUMN:
			case COMMENT:
			case COMMIT:
			case CONCAT:
			case CONDITION:
			case CONNECT:
			case CONNECTION:
			case CONSTRAINT:
			case CONTAINS:
			case CONTENT:
			case CONTINUE:
			case CREATE:
			case CUBE:
			case CURRENT:
			case CURRENT_LC_CTYPE:
			case CURRVAL:
			case CURSOR:
			case DATA:
			case DATABASE:
			case DAY:
			case DAYS:
			case DBINFO:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DISABLE:
			case DISALLOW:
			case DISTINCT:
			case DO:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSSIZE:
			case DYNAMIC:
			case EDITPROC:
			case ELSE:
			case ELSEIF:
			case ENCODING:
			case ENCRYPTION:
			case END:
			case END_EXEC:
			case ENDING:
			case ERASE:
			case ESCAPE:
			case EXCEPT:
			case EXCEPTION:
			case EXEC_SQL:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case FENCED:
			case FETCH:
			case FIELDPROC:
			case FINAL:
			case FIRST:
			case FOR:
			case FREE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANT:
			case GROUP:
			case HANDLER:
			case HAVING:
			case HOLD:
			case HOUR:
			case HOURS:
			case IF:
			case IMMEDIATE:
			case IN:
			case INCLUSIVE:
			case INDEX:
			case INDEXBP:
			case INHERIT:
			case INNER:
			case INOUT:
			case INSENSITIVE:
			case INSERT:
			case INTERSECT:
			case INTO:
			case IS:
			case ISOBID:
			case ITERATE:
			case JAR:
			case JOIN:
			case KEEP:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LAST:
			case LC_CTYPE:
			case LEAVE:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOCALE:
			case LOCATOR:
			case LOCATORS:
			case LOCK:
			case LOCKMAX:
			case LOCKSIZE:
			case LONG:
			case LOOP:
			case MAINTAINED:
			case MATERIALIZED:
			case MICROSECOND:
			case MICROSECONDS:
			case MODIFIES:
			case MONTH:
			case MONTHS:
			case NEXT:
			case NEXTVAL:
			case NO:
			case NONE:
			case NOT:
			case NULL:
			case NULLS:
			case NUMPARTS:
			case OBID:
			case OF:
			case OFFSET:
			case OLD:
			case ON:
			case OPEN:
			case OPTIMIZATION:
			case OPTIMIZE:
			case OR:
			case ORDER:
			case ORGANIZATION:
			case OUT:
			case OUTER:
			case PACKAGE:
			case PADDED:
			case PARAMETER:
			case PART:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONING:
			case PATH:
			case PERIOD:
			case PIECESIZE:
			case PLAN:
			case PRECISION:
			case PREPARE:
			case PREVVAL:
			case PRIOR:
			case PRIQTY:
			case PRIVILEGES:
			case PROCEDURE:
			case PROGRAM:
			case PSID:
			case PUBLIC:
			case QUERY:
			case QUERYNO:
			case READS:
			case REFERENCES:
			case REFRESH:
			case RELEASE:
			case RENAME:
			case REPEAT:
			case RESIGNAL:
			case RESTRICT:
			case RESULT:
			case RESULT_SET_LOCATOR:
			case RETURN:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUND_CEILING:
			case ROUND_DOWN:
			case ROUND_FLOOR:
			case ROUND_HALF_DOWN:
			case ROUND_HALF_EVEN:
			case ROUND_HALF_UP:
			case ROUND_UP:
			case ROW:
			case ROWSET:
			case RUN:
			case SAVEPOINT:
			case SCHEMA:
			case SCRATCHPAD:
			case SECOND:
			case SECONDS:
			case SECQTY:
			case SECURITY:
			case SELECT:
			case SENSITIVE:
			case SEQUENCE:
			case SET:
			case SIGNAL:
			case SIMPLE:
			case SOME:
			case SOURCE:
			case SPECIFIC:
			case STANDARD:
			case STATEMENT:
			case STATIC:
			case STAY:
			case STOGROUP:
			case STORES:
			case STYLE:
			case SUMMARY:
			case SYNONYM:
			case SYSDATE:
			case SYSTEM:
			case SYSTIMESTAMP:
			case TABLE:
			case TABLESPACE:
			case THEN:
			case TO:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNDO:
			case UNION:
			case UNIQUE:
			case UNTIL:
			case UPDATE:
			case USING:
			case VALIDPROC:
			case VALUE:
			case VALUES:
			case VARIABLE:
			case VARIANT:
			case VCAT:
			case VERSIONING:
			case VIEW:
			case VOLATILE:
			case VOLUMES:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WLM:
			case XMLCAST:
			case XMLEXISTS:
			case XMLNAMESPACES:
			case YEAR:
			case YEARS:
			case ZONE:
			case AND:
			case ARRAY_AGG:
			case ASC:
			case AVG:
			case BIT:
			case CHANGE:
			case CODEUNITS16:
			case CODEUNITS32:
			case CORR:
			case CORRELATION:
			case COUNT:
			case COUNT_BIG:
			case COVAR:
			case COVARIANCE:
			case COVARIANCE_SAMP:
			case COVAR_POP:
			case COVAR_SAMP:
			case CS:
			case CUME_DIST:
			case DENSE_RANK:
			case DESC:
			case EBCDIC:
			case EXCLUSIVE:
			case FIRST_VALUE:
			case FOLLOWING:
			case GROUPING:
			case IGNORE:
			case INDICATOR:
			case INPUT:
			case ISNULL:
			case LAG:
			case LARGE:
			case LAST_VALUE:
			case LEAD:
			case LISTAGG:
			case LOCKED:
			case LOCKS:
			case MEDIAN:
			case MINUTES:
			case MIXED:
			case NOTNULL:
			case NTH_VALUE:
			case NTILE:
			case NUMERIC:
			case OBJECT:
			case OCTETS:
			case ONLY:
			case OVER:
			case PASSING:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PERCENT_RANK:
			case PRECEDING:
			case PREVIOUS:
			case RANGE:
			case RANK:
			case RATIO_TO_REPORT:
			case READ:
			case REF:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_ICPT:
			case REGR_INTERCEPT:
			case REGR_R2:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case RESPECT:
			case ROW_NUMBER:
			case ROWS:
			case RR:
			case RS:
			case SBCS:
			case SELECTIVITY:
			case SETS:
			case SHARE:
			case SKIP_:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case TOKEN:
			case UNBOUNDED:
			case UNPACK:
			case UR:
			case USE:
			case VAR:
			case VARIANCE:
			case VARIANCE_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARYING:
			case WITHOUT:
			case XML:
			case XMLAGG:
			case COLUMNS:
			case SQLID:
			case ORDINALITY:
			case SYSTEM_TIME:
			case BUSINESS_TIME:
			case MULTIPLIER:
			case UNNEST:
			case CROSS:
			case CALLER:
			case CLIENT:
			case POSITIONING:
			case SCROLL:
			case ACTION:
			case ASSEMBLE:
			case C_:
			case CALLED:
			case COBOL:
			case DB2:
			case DEFINER:
			case DISPATCH:
			case ENVIRONMENT:
			case FAILURE:
			case FAILURES:
			case JAVA:
			case MAIN:
			case NAME:
			case OPTIONS:
			case PARALLEL:
			case PLI:
			case REGISTERS:
			case RESIDENT:
			case SECURED:
			case SPECIAL:
			case SQL:
			case STOP:
			case SUB:
			case YES:
			case APPLICATION:
			case CHANGED:
			case COMPATIBILITY:
			case COMPRESS:
			case COPY:
			case FREEPAGE:
			case GBPCACHE:
			case INCLUDE:
			case MAXVALUE:
			case MINVALUE:
			case PCTFREE:
			case REGENERATE:
			case SEQTY:
			case MASK:
			case ENABLE:
			case PERMISSION:
			case ATOMIC:
			case SQLEXCEPTION:
			case MERGE:
			case MATCHED:
			case SQLSTATE:
			case MESSAGE_TEXT:
			case OVERRIDING:
			case PORTION:
			case DB2SQL:
			case DEBUG:
			case GENERAL:
			case MODE_:
			case REXX:
			case CACHE:
			case CYCLE:
			case INCREMENT:
			case RESTART:
			case DATACLAS:
			case MGMTCLAS:
			case REMOVE:
			case STORCLAS:
			case ACCESS:
			case ACTIVATE:
			case ALWAYS:
			case APPEND:
			case ARCHIVE:
			case BUSINESS:
			case CASCADE:
			case CHANGES:
			case CONTROL:
			case DEACTIVATE:
			case DEFERRED:
			case EACH:
			case ENFORCED:
			case EXTRA:
			case FOREIGN:
			case HIDDEN_:
			case HISTORY:
			case ID:
			case IDENTITY:
			case IMPLICITLY:
			case INITIALLY:
			case INLINE:
			case OPERATION:
			case ORGANIZE:
			case OVERLAPS:
			case PACKAGE_NAME:
			case PACKAGE_SCHEMA:
			case PACKAGE_VERSION:
			case PRIMARY:
			case RESET:
			case ROTATE:
			case START:
			case SYSIBM:
			case TRANSACTION:
			case ABS:
			case ABSVAL:
			case ACOS:
			case ADD_DAYS:
			case ADD_MONTHS:
			case ARRAY_DELETE:
			case ARRAY_FIRST:
			case ARRAY_LAST:
			case ARRAY_NEXT:
			case ARRAY_PRIOR:
			case ARRAY_TRIM:
			case ASCII:
			case ASCII_CHR:
			case ASCIISTR:
			case ASCII_STR:
			case ASIN:
			case ATAN:
			case ATAN2:
			case ATANH:
			case BIGINT:
			case BINARY:
			case BITAND:
			case BITANDNOT:
			case BITNOT:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BTRIM:
			case CARDINALITY:
			case CCSID_ENCODING:
			case CEIL:
			case CEILING:
			case CHAR9:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case CHR:
			case CLOB:
			case COALESCE:
			case COLLATION_KEY:
			case COMPARE_DECFLOAT:
			case COS:
			case COSH:
			case DATE:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFWEEK_ISO:
			case DAYOFYEAR:
			case DAYS_BETWEEN:
			case DBCLOB:
			case DEC:
			case DECFLOAT:
			case DECFLOAT_FORMAT:
			case DECFLOAT_SORTKEY:
			case DECIMAL:
			case DECODE:
			case DECRYPT_BINARY:
			case DECRYPT_BIT:
			case DECRYPT_CHAR:
			case DECRYPT_DATAKEY_BIGINT:
			case DECRYPT_DATAKEY_BIT:
			case DECRYPT_DATAKEY_CLOB:
			case DECRYPT_DATAKEY_DBCLOB:
			case DECRYPT_DATAKEY_DECIMAL:
			case DECRYPT_DATAKEY_INTEGER:
			case DECRYPT_DATAKEY_VARCHAR:
			case DECRYPT_DATAKEY_VARGRAPHIC:
			case DECRYPT_DB:
			case DEGREES:
			case DIFFERENCE:
			case DIGITS:
			case DOUBLE_PRECISION:
			case DSN_XMLVALIDATE:
			case EBCDIC_CHR:
			case EBCDIC_STR:
			case ENCRYPT_DATAKEY:
			case ENCRYPT_TDES:
			case EXP:
			case EXTRACT:
			case FLOAT:
			case FLOOR:
			case GENERATE_UNIQUE:
			case GENERATE_UNIQUE_BINARY:
			case GETHINT:
			case GETVARIABLE:
			case GRAPHIC:
			case GREATEST:
			case HASH:
			case HASH_CRC32:
			case HASH_MD5:
			case HASH_SHA1:
			case HASH_SHA256:
			case HEX:
			case IDENTITY_VAL_LOCAL:
			case IFNULL:
			case INSTR:
			case INT:
			case INTEGER:
			case JULIAN_DAY:
			case LAST_DAY:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LN:
			case LOCATE:
			case LOCATE_IN_STRING:
			case LOG10:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAX:
			case MAX_CARDINALITY:
			case MIDNIGHT_SECONDS:
			case MIN:
			case MINUTE:
			case MOD:
			case MONTHS_BETWEEN:
			case MQREAD:
			case MQREADCLOB:
			case MQRECEIVE:
			case MQRECEIVECLOB:
			case MQSEND:
			case MULTIPLY_ALT:
			case NEXT_DAY:
			case NEXT_MONTH:
			case NORMALIZE_DECFLOAT:
			case NORMALIZE_STRING:
			case NULLIF:
			case NVL:
			case OVERLAY:
			case PACK:
			case POSITION:
			case POSSTR:
			case POW:
			case POWER:
			case QUANTIZE:
			case QUARTER:
			case RADIANS:
			case RAISE_ERROR:
			case RAND:
			case RANDOM:
			case REAL:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REPLACE:
			case RID:
			case ROUND:
			case ROUND_TIMESTAMP:
			case ROWID:
			case RPAD:
			case RTRIM:
			case SCORE:
			case SIGN:
			case SIN:
			case SINH:
			case SMALLINT:
			case SOAPHTTPC:
			case SOAPHTTPNC:
			case SOAPHTTPNV:
			case SOAPHTTPV:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STRIP:
			case STRLEFT:
			case STRPOS:
			case STRRIGHT:
			case SUBSTR:
			case SUBSTRING:
			case TAN:
			case TANH:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIMESTAMP_FORMAT:
			case TIMESTAMP_ISO:
			case TIMESTAMP_TZ:
			case TO_CHAR:
			case TO_CLOB:
			case TO_DATE:
			case TO_NUMBER:
			case TOTALORDER:
			case TO_TIMESTAMP:
			case TRANSLATE:
			case TRIM:
			case TRIM_ARRAY:
			case TRUNC:
			case TRUNC_TIMESTAMP:
			case UCASE:
			case UNICODE:
			case UNICODE_STR:
			case UNISTR:
			case UPPER:
			case VARBINARY:
			case VARCHAR:
			case VARCHAR9:
			case VARCHAR_BIT_FORMAT:
			case VARCHAR_FORMAT:
			case VARGRAPHIC:
			case VERIFY_GROUP_FOR_USER:
			case VERIFY_ROLE_FOR_USER:
			case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
			case WEEK:
			case WEEK_ISO:
			case WRAP:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLCONCAT:
			case XMLDOCUMENT:
			case XMLELEMENT:
			case XMLFOREST:
			case XMLMODIFY:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLSERIALIZE:
			case XMLTEXT:
			case XMLXSROBJECTID:
			case XSLTRANSFORM:
			case CURRENT_ACCELERATOR:
			case CURRENT_APPLICATION_COMPATIBILITY:
			case CURRENT_APPLICATION_ENCODING_SCHEME:
			case CURRENT_CLIENT_ACCTNG:
			case CURRENT_CLIENT_APPLNAME:
			case CURRENT_CLIENT_CORR_TOKEN:
			case CURRENT_CLIENT_USERID:
			case CURRENT_CLIENT_WRKSTNNAME:
			case CURRENT_DATE:
			case CURRENT_DEBUG_MODE:
			case CURRENT_DECFLOAT_ROUNDING_MODE:
			case CURRENT_DEGREE:
			case CURRENT_EXPLAIN_MODE:
			case CURRENT_GET_ACCEL_ARCHIVE:
			case CURRENT_LOCALE_LC_CTYPE:
			case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
			case CURRENT_MEMBER:
			case CURRENT_OPTIMIZATION_HINT:
			case CURRENT_PACKAGE_PATH:
			case CURRENT_PACKAGESET:
			case CURRENT_PATH:
			case CURRENT_PRECISION:
			case CURRENT_QUERY_ACCELERATION:
			case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
			case CURRENT_REFRESH_AGE:
			case CURRENT_ROUTINE_VERSION:
			case CURRENT_RULES:
			case CURRENT_SCHEMA:
			case CURRENT_SERVER:
			case CURRENT_SQLID:
			case CURRENT_TEMPORAL_BUSINESS_TIME:
			case CURRENT_TEMPORAL_SYSTEM_TIME:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_TIME_ZONE:
			case ENCRYPTION_PASSWORD:
			case SESSION_TIME_ZONE:
			case SESSION_USER:
			case USER:
			case ADMIN_TASK_LIST:
			case ADMIN_TASK_OUTPUT:
			case ADMIN_TASK_STATUS:
			case BLOCKING_THREADS:
			case MQREADALL:
			case MQREADALLCLOB:
			case MQRECEIVEALL:
			case MQRECEIVEALLCLOB:
			case XMLTABLE:
			case SQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(3876);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,449,_ctx) ) {
				case 1:
					{
					setState(3873);
					schemaName();
					setState(3874);
					match(DOT);
					}
					break;
				}
				setState(3878);
				identifier();
				}
				}
				break;
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(3879);
				hostVariable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntoClauseContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(DB2zSQLParser.INTO, 0); }
		public List<VariableContext> variable() {
			return getRuleContexts(VariableContext.class);
		}
		public VariableContext variable(int i) {
			return getRuleContext(VariableContext.class,i);
		}
		public ArrayElementSpecificationContext arrayElementSpecification() {
			return getRuleContext(ArrayElementSpecificationContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public IntoClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intoClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterIntoClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitIntoClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitIntoClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntoClauseContext intoClause() throws RecognitionException {
		IntoClauseContext _localctx = new IntoClauseContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_intoClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3882);
			match(INTO);
			setState(3885);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,451,_ctx) ) {
			case 1:
				{
				setState(3883);
				variable();
				}
				break;
			case 2:
				{
				setState(3884);
				arrayElementSpecification();
				}
				break;
			}
			setState(3891);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3887);
				match(COMMA);
				setState(3888);
				variable();
				}
				}
				setState(3893);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CorrelationClauseContext extends ParserRuleContext {
		public CorrelationNameContext correlationName() {
			return getRuleContext(CorrelationNameContext.class,0);
		}
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<NewColumnNameContext> newColumnName() {
			return getRuleContexts(NewColumnNameContext.class);
		}
		public NewColumnNameContext newColumnName(int i) {
			return getRuleContext(NewColumnNameContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public CorrelationClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_correlationClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCorrelationClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCorrelationClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCorrelationClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CorrelationClauseContext correlationClause() throws RecognitionException {
		CorrelationClauseContext _localctx = new CorrelationClauseContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_correlationClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3895);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,453,_ctx) ) {
			case 1:
				{
				setState(3894);
				match(AS);
				}
				break;
			}
			setState(3897);
			correlationName();
			setState(3909);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LPAREN) {
				{
				setState(3898);
				match(LPAREN);
				setState(3899);
				newColumnName();
				setState(3904);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3900);
					match(COMMA);
					setState(3901);
					newColumnName();
					}
					}
					setState(3906);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3907);
				match(RPAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromClauseContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(DB2zSQLParser.FROM, 0); }
		public List<CollectionDerivedTableContext> collectionDerivedTable() {
			return getRuleContexts(CollectionDerivedTableContext.class);
		}
		public CollectionDerivedTableContext collectionDerivedTable(int i) {
			return getRuleContext(CollectionDerivedTableContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public List<TableReferenceContext> tableReference() {
			return getRuleContexts(TableReferenceContext.class);
		}
		public TableReferenceContext tableReference(int i) {
			return getRuleContext(TableReferenceContext.class,i);
		}
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFromClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFromClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFromClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromClauseContext fromClause() throws RecognitionException {
		FromClauseContext _localctx = new FromClauseContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_fromClause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3911);
			match(FROM);
			setState(3926);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,458,_ctx) ) {
			case 1:
				{
				{
				setState(3915);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,456,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3912);
						match(LPAREN);
						}
						} 
					}
					setState(3917);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,456,_ctx);
				}
				setState(3918);
				tableReference();
				setState(3922);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,457,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3919);
						match(RPAREN);
						}
						} 
					}
					setState(3924);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,457,_ctx);
				}
				}
				}
				break;
			case 2:
				{
				setState(3925);
				collectionDerivedTable();
				}
				break;
			}
			setState(3947);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3928);
				match(COMMA);
				setState(3943);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,461,_ctx) ) {
				case 1:
					{
					{
					setState(3932);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,459,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(3929);
							match(LPAREN);
							}
							} 
						}
						setState(3934);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,459,_ctx);
					}
					setState(3935);
					tableReference();
					setState(3939);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,460,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(3936);
							match(RPAREN);
							}
							} 
						}
						setState(3941);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,460,_ctx);
					}
					}
					}
					break;
				case 2:
					{
					setState(3942);
					collectionDerivedTable();
					}
					break;
				}
				}
				}
				setState(3949);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableReferenceContext extends ParserRuleContext {
		public SingleTableReferenceContext singleTableReference() {
			return getRuleContext(SingleTableReferenceContext.class,0);
		}
		public NestedTableExpressionContext nestedTableExpression() {
			return getRuleContext(NestedTableExpressionContext.class,0);
		}
		public DataChangeTableReferenceContext dataChangeTableReference() {
			return getRuleContext(DataChangeTableReferenceContext.class,0);
		}
		public TableFunctionReferenceContext tableFunctionReference() {
			return getRuleContext(TableFunctionReferenceContext.class,0);
		}
		public TableLocatorReferenceContext tableLocatorReference() {
			return getRuleContext(TableLocatorReferenceContext.class,0);
		}
		public XmltableExpressionContext xmltableExpression() {
			return getRuleContext(XmltableExpressionContext.class,0);
		}
		public CollectionDerivedTableContext collectionDerivedTable() {
			return getRuleContext(CollectionDerivedTableContext.class,0);
		}
		public List<TerminalNode> JOIN() { return getTokens(DB2zSQLParser.JOIN); }
		public TerminalNode JOIN(int i) {
			return getToken(DB2zSQLParser.JOIN, i);
		}
		public List<TableReferenceContext> tableReference() {
			return getRuleContexts(TableReferenceContext.class);
		}
		public TableReferenceContext tableReference(int i) {
			return getRuleContext(TableReferenceContext.class,i);
		}
		public List<TerminalNode> ON() { return getTokens(DB2zSQLParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(DB2zSQLParser.ON, i);
		}
		public List<JoinConditionContext> joinCondition() {
			return getRuleContexts(JoinConditionContext.class);
		}
		public JoinConditionContext joinCondition(int i) {
			return getRuleContext(JoinConditionContext.class,i);
		}
		public TerminalNode CROSS() { return getToken(DB2zSQLParser.CROSS, 0); }
		public List<TerminalNode> INNER() { return getTokens(DB2zSQLParser.INNER); }
		public TerminalNode INNER(int i) {
			return getToken(DB2zSQLParser.INNER, i);
		}
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public List<TerminalNode> LEFT() { return getTokens(DB2zSQLParser.LEFT); }
		public TerminalNode LEFT(int i) {
			return getToken(DB2zSQLParser.LEFT, i);
		}
		public List<TerminalNode> RIGHT() { return getTokens(DB2zSQLParser.RIGHT); }
		public TerminalNode RIGHT(int i) {
			return getToken(DB2zSQLParser.RIGHT, i);
		}
		public List<TerminalNode> FULL() { return getTokens(DB2zSQLParser.FULL); }
		public TerminalNode FULL(int i) {
			return getToken(DB2zSQLParser.FULL, i);
		}
		public List<TerminalNode> OUTER() { return getTokens(DB2zSQLParser.OUTER); }
		public TerminalNode OUTER(int i) {
			return getToken(DB2zSQLParser.OUTER, i);
		}
		public TableReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTableReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTableReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTableReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableReferenceContext tableReference() throws RecognitionException {
		TableReferenceContext _localctx = new TableReferenceContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_tableReference);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4084);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,483,_ctx) ) {
			case 1:
				{
				setState(3950);
				singleTableReference();
				}
				break;
			case 2:
				{
				setState(3951);
				nestedTableExpression();
				}
				break;
			case 3:
				{
				setState(3952);
				dataChangeTableReference();
				}
				break;
			case 4:
				{
				setState(3953);
				tableFunctionReference();
				}
				break;
			case 5:
				{
				setState(3954);
				tableLocatorReference();
				}
				break;
			case 6:
				{
				setState(3955);
				xmltableExpression();
				}
				break;
			case 7:
				{
				setState(3956);
				collectionDerivedTable();
				}
				break;
			case 8:
				{
				{
				setState(4005);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,470,_ctx) ) {
				case 1:
					{
					setState(3957);
					singleTableReference();
					}
					break;
				case 2:
					{
					setState(3958);
					nestedTableExpression();
					}
					break;
				case 3:
					{
					setState(3959);
					tableFunctionReference();
					}
					break;
				case 4:
					{
					setState(3960);
					tableLocatorReference();
					}
					break;
				case 5:
					{
					setState(3961);
					xmltableExpression();
					}
					break;
				case 6:
					{
					setState(3962);
					collectionDerivedTable();
					}
					break;
				case 7:
					{
					{
					setState(3964); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(3963);
							match(LPAREN);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(3966); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,463,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					setState(3968);
					tableReference();
					setState(3970); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(3969);
						match(RPAREN);
						}
						}
						setState(3972); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==RPAREN );
					}
					}
					break;
				case 8:
					{
					{
					setState(3991);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,467,_ctx) ) {
					case 1:
						{
						setState(3974);
						singleTableReference();
						}
						break;
					case 2:
						{
						setState(3975);
						nestedTableExpression();
						}
						break;
					case 3:
						{
						setState(3976);
						tableFunctionReference();
						}
						break;
					case 4:
						{
						setState(3977);
						tableLocatorReference();
						}
						break;
					case 5:
						{
						setState(3978);
						xmltableExpression();
						}
						break;
					case 6:
						{
						{
						setState(3980); 
						_errHandler.sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								setState(3979);
								match(LPAREN);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							setState(3982); 
							_errHandler.sync(this);
							_alt = getInterpreter().adaptivePredict(_input,465,_ctx);
						} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
						setState(3984);
						tableReference();
						setState(3986); 
						_errHandler.sync(this);
						_la = _input.LA(1);
						do {
							{
							{
							setState(3985);
							match(RPAREN);
							}
							}
							setState(3988); 
							_errHandler.sync(this);
							_la = _input.LA(1);
						} while ( _la==RPAREN );
						}
						}
						break;
					case 7:
						{
						setState(3990);
						collectionDerivedTable();
						}
						break;
					}
					setState(3998);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case INNER:
						{
						setState(3993);
						match(INNER);
						}
						break;
					case FULL:
					case LEFT:
					case RIGHT:
						{
						{
						setState(3994);
						_la = _input.LA(1);
						if ( !(_la==FULL || _la==LEFT || _la==RIGHT) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(3996);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==OUTER) {
							{
							setState(3995);
							match(OUTER);
							}
						}

						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(4000);
					match(JOIN);
					setState(4001);
					tableReference();
					setState(4002);
					match(ON);
					setState(4003);
					joinCondition();
					}
					}
					break;
				}
				setState(4012);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case INNER:
					{
					setState(4007);
					match(INNER);
					}
					break;
				case FULL:
				case LEFT:
				case RIGHT:
					{
					{
					setState(4008);
					_la = _input.LA(1);
					if ( !(_la==FULL || _la==LEFT || _la==RIGHT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4010);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OUTER) {
						{
						setState(4009);
						match(OUTER);
						}
					}

					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4014);
				match(JOIN);
				setState(4015);
				tableReference();
				setState(4016);
				match(ON);
				setState(4017);
				joinCondition();
				}
				}
				break;
			case 9:
				{
				{
				setState(4067);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,480,_ctx) ) {
				case 1:
					{
					setState(4019);
					singleTableReference();
					}
					break;
				case 2:
					{
					setState(4020);
					nestedTableExpression();
					}
					break;
				case 3:
					{
					setState(4021);
					tableFunctionReference();
					}
					break;
				case 4:
					{
					setState(4022);
					tableLocatorReference();
					}
					break;
				case 5:
					{
					setState(4023);
					xmltableExpression();
					}
					break;
				case 6:
					{
					setState(4024);
					collectionDerivedTable();
					}
					break;
				case 7:
					{
					{
					setState(4026); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(4025);
							match(LPAREN);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(4028); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,473,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					setState(4030);
					tableReference();
					setState(4032); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(4031);
						match(RPAREN);
						}
						}
						setState(4034); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==RPAREN );
					}
					}
					break;
				case 8:
					{
					{
					setState(4053);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,477,_ctx) ) {
					case 1:
						{
						setState(4036);
						singleTableReference();
						}
						break;
					case 2:
						{
						setState(4037);
						nestedTableExpression();
						}
						break;
					case 3:
						{
						setState(4038);
						tableFunctionReference();
						}
						break;
					case 4:
						{
						setState(4039);
						tableLocatorReference();
						}
						break;
					case 5:
						{
						setState(4040);
						xmltableExpression();
						}
						break;
					case 6:
						{
						{
						setState(4042); 
						_errHandler.sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								setState(4041);
								match(LPAREN);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							setState(4044); 
							_errHandler.sync(this);
							_alt = getInterpreter().adaptivePredict(_input,475,_ctx);
						} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
						setState(4046);
						tableReference();
						setState(4048); 
						_errHandler.sync(this);
						_la = _input.LA(1);
						do {
							{
							{
							setState(4047);
							match(RPAREN);
							}
							}
							setState(4050); 
							_errHandler.sync(this);
							_la = _input.LA(1);
						} while ( _la==RPAREN );
						}
						}
						break;
					case 7:
						{
						setState(4052);
						collectionDerivedTable();
						}
						break;
					}
					setState(4060);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case INNER:
						{
						setState(4055);
						match(INNER);
						}
						break;
					case FULL:
					case LEFT:
					case RIGHT:
						{
						{
						setState(4056);
						_la = _input.LA(1);
						if ( !(_la==FULL || _la==LEFT || _la==RIGHT) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(4058);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==OUTER) {
							{
							setState(4057);
							match(OUTER);
							}
						}

						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(4062);
					match(JOIN);
					setState(4063);
					tableReference();
					setState(4064);
					match(ON);
					setState(4065);
					joinCondition();
					}
					}
					break;
				}
				setState(4069);
				match(CROSS);
				setState(4070);
				match(JOIN);
				setState(4071);
				tableReference();
				}
				}
				break;
			case 10:
				{
				{
				setState(4074); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(4073);
						match(LPAREN);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(4076); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,481,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(4078);
				tableReference();
				setState(4080); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(4079);
						match(RPAREN);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(4082); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,482,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SingleTableReferenceContext extends ParserRuleContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public List<PeriodSpecificationContext> periodSpecification() {
			return getRuleContexts(PeriodSpecificationContext.class);
		}
		public PeriodSpecificationContext periodSpecification(int i) {
			return getRuleContext(PeriodSpecificationContext.class,i);
		}
		public CorrelationClauseContext correlationClause() {
			return getRuleContext(CorrelationClauseContext.class,0);
		}
		public SingleTableReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleTableReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSingleTableReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSingleTableReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSingleTableReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SingleTableReferenceContext singleTableReference() throws RecognitionException {
		SingleTableReferenceContext _localctx = new SingleTableReferenceContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_singleTableReference);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4086);
			tableName();
			setState(4090);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,484,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4087);
					periodSpecification();
					}
					} 
				}
				setState(4092);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,484,_ctx);
			}
			setState(4094);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,485,_ctx) ) {
			case 1:
				{
				setState(4093);
				correlationClause();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PeriodSpecificationContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode SYSTEM_TIME() { return getToken(DB2zSQLParser.SYSTEM_TIME, 0); }
		public TerminalNode BUSINESS_TIME() { return getToken(DB2zSQLParser.BUSINESS_TIME, 0); }
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode OF() { return getToken(DB2zSQLParser.OF, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode FROM() { return getToken(DB2zSQLParser.FROM, 0); }
		public TerminalNode TO() { return getToken(DB2zSQLParser.TO, 0); }
		public TerminalNode BETWEEN() { return getToken(DB2zSQLParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(DB2zSQLParser.AND, 0); }
		public PeriodSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_periodSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPeriodSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPeriodSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPeriodSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PeriodSpecificationContext periodSpecification() throws RecognitionException {
		PeriodSpecificationContext _localctx = new PeriodSpecificationContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_periodSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4096);
			match(FOR);
			setState(4097);
			_la = _input.LA(1);
			if ( !(_la==SYSTEM_TIME || _la==BUSINESS_TIME) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4111);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AS:
				{
				{
				setState(4098);
				match(AS);
				setState(4099);
				match(OF);
				setState(4100);
				expression();
				}
				}
				break;
			case FROM:
				{
				{
				setState(4101);
				match(FROM);
				setState(4102);
				expression();
				setState(4103);
				match(TO);
				setState(4104);
				expression();
				}
				}
				break;
			case BETWEEN:
				{
				{
				setState(4106);
				match(BETWEEN);
				setState(4107);
				expression();
				setState(4108);
				match(AND);
				setState(4109);
				expression();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PeriodClauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode PORTION() { return getToken(DB2zSQLParser.PORTION, 0); }
		public TerminalNode OF() { return getToken(DB2zSQLParser.OF, 0); }
		public TerminalNode BUSINESS_TIME() { return getToken(DB2zSQLParser.BUSINESS_TIME, 0); }
		public TerminalNode FROM() { return getToken(DB2zSQLParser.FROM, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode TO() { return getToken(DB2zSQLParser.TO, 0); }
		public TerminalNode BETWEEN() { return getToken(DB2zSQLParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(DB2zSQLParser.AND, 0); }
		public PeriodClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_periodClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPeriodClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPeriodClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPeriodClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PeriodClauseContext periodClause() throws RecognitionException {
		PeriodClauseContext _localctx = new PeriodClauseContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_periodClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4113);
			match(FOR);
			setState(4114);
			match(PORTION);
			setState(4115);
			match(OF);
			setState(4116);
			match(BUSINESS_TIME);
			setState(4127);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FROM:
				{
				{
				setState(4117);
				match(FROM);
				setState(4118);
				expression();
				setState(4119);
				match(TO);
				setState(4120);
				expression();
				}
				}
				break;
			case BETWEEN:
				{
				{
				setState(4122);
				match(BETWEEN);
				setState(4123);
				expression();
				setState(4124);
				match(AND);
				setState(4125);
				expression();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NestedTableExpressionContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public FullSelectContext fullSelect() {
			return getRuleContext(FullSelectContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public CorrelationClauseContext correlationClause() {
			return getRuleContext(CorrelationClauseContext.class,0);
		}
		public NestedTableExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nestedTableExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterNestedTableExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitNestedTableExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitNestedTableExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NestedTableExpressionContext nestedTableExpression() throws RecognitionException {
		NestedTableExpressionContext _localctx = new NestedTableExpressionContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_nestedTableExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4130);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLE) {
				{
				setState(4129);
				match(TABLE);
				}
			}

			setState(4132);
			match(LPAREN);
			setState(4133);
			fullSelect();
			setState(4134);
			match(RPAREN);
			setState(4136);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,489,_ctx) ) {
			case 1:
				{
				setState(4135);
				correlationClause();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataChangeTableReferenceContext extends ParserRuleContext {
		public TerminalNode FINAL() { return getToken(DB2zSQLParser.FINAL, 0); }
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public InsertStatementContext insertStatement() {
			return getRuleContext(InsertStatementContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public SearchedUpdateContext searchedUpdate() {
			return getRuleContext(SearchedUpdateContext.class,0);
		}
		public TerminalNode OLD() { return getToken(DB2zSQLParser.OLD, 0); }
		public SearchedDeleteContext searchedDelete() {
			return getRuleContext(SearchedDeleteContext.class,0);
		}
		public MergeStatementContext mergeStatement() {
			return getRuleContext(MergeStatementContext.class,0);
		}
		public CorrelationClauseContext correlationClause() {
			return getRuleContext(CorrelationClauseContext.class,0);
		}
		public DataChangeTableReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataChangeTableReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDataChangeTableReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDataChangeTableReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDataChangeTableReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataChangeTableReferenceContext dataChangeTableReference() throws RecognitionException {
		DataChangeTableReferenceContext _localctx = new DataChangeTableReferenceContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_dataChangeTableReference);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4155);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,491,_ctx) ) {
			case 1:
				{
				{
				setState(4138);
				match(FINAL);
				setState(4139);
				match(TABLE);
				setState(4140);
				match(LPAREN);
				setState(4141);
				insertStatement();
				setState(4142);
				match(RPAREN);
				setState(4144);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,490,_ctx) ) {
				case 1:
					{
					setState(4143);
					correlationClause();
					}
					break;
				}
				}
				}
				break;
			case 2:
				{
				{
				setState(4146);
				_la = _input.LA(1);
				if ( !(_la==FINAL || _la==OLD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4147);
				match(TABLE);
				setState(4148);
				searchedUpdate();
				}
				}
				break;
			case 3:
				{
				{
				setState(4149);
				match(OLD);
				setState(4150);
				match(TABLE);
				setState(4151);
				searchedDelete();
				}
				}
				break;
			case 4:
				{
				{
				setState(4152);
				match(FINAL);
				setState(4153);
				match(TABLE);
				setState(4154);
				mergeStatement();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableFunctionReferenceContext extends ParserRuleContext {
		public List<TerminalNode> TABLE() { return getTokens(DB2zSQLParser.TABLE); }
		public TerminalNode TABLE(int i) {
			return getToken(DB2zSQLParser.TABLE, i);
		}
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public ScalarFunctionContext scalarFunction() {
			return getRuleContext(ScalarFunctionContext.class,0);
		}
		public AggregateFunctionContext aggregateFunction() {
			return getRuleContext(AggregateFunctionContext.class,0);
		}
		public RegressionFunctionContext regressionFunction() {
			return getRuleContext(RegressionFunctionContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public TableUdfCardinalityClauseContext tableUdfCardinalityClause() {
			return getRuleContext(TableUdfCardinalityClauseContext.class,0);
		}
		public CorrelationClauseContext correlationClause() {
			return getRuleContext(CorrelationClauseContext.class,0);
		}
		public TypedCorrelationClauseContext typedCorrelationClause() {
			return getRuleContext(TypedCorrelationClauseContext.class,0);
		}
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TableFunctionReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableFunctionReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTableFunctionReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTableFunctionReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTableFunctionReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableFunctionReferenceContext tableFunctionReference() throws RecognitionException {
		TableFunctionReferenceContext _localctx = new TableFunctionReferenceContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_tableFunctionReference);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4157);
			match(TABLE);
			setState(4158);
			match(LPAREN);
			setState(4163);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,492,_ctx) ) {
			case 1:
				{
				setState(4159);
				scalarFunction();
				}
				break;
			case 2:
				{
				setState(4160);
				aggregateFunction();
				}
				break;
			case 3:
				{
				setState(4161);
				regressionFunction();
				}
				break;
			case 4:
				{
				setState(4162);
				identifier();
				}
				break;
			}
			setState(4165);
			match(LPAREN);
			setState(4169);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,493,_ctx) ) {
			case 1:
				{
				setState(4166);
				expression();
				}
				break;
			case 2:
				{
				{
				setState(4167);
				match(TABLE);
				setState(4168);
				tableName();
				}
				}
				break;
			}
			setState(4179);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4171);
				match(COMMA);
				setState(4175);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,494,_ctx) ) {
				case 1:
					{
					setState(4172);
					expression();
					}
					break;
				case 2:
					{
					{
					setState(4173);
					match(TABLE);
					setState(4174);
					tableName();
					}
					}
					break;
				}
				}
				}
				setState(4181);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4182);
			match(RPAREN);
			setState(4184);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CARDINALITY) {
				{
				setState(4183);
				tableUdfCardinalityClause();
				}
			}

			setState(4186);
			match(RPAREN);
			setState(4189);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,497,_ctx) ) {
			case 1:
				{
				setState(4187);
				correlationClause();
				}
				break;
			case 2:
				{
				setState(4188);
				typedCorrelationClause();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableUdfCardinalityClauseContext extends ParserRuleContext {
		public TerminalNode CARDINALITY() { return getToken(DB2zSQLParser.CARDINALITY, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode NUMERICLITERAL() { return getToken(DB2zSQLParser.NUMERICLITERAL, 0); }
		public TerminalNode MULTIPLIER() { return getToken(DB2zSQLParser.MULTIPLIER, 0); }
		public TableUdfCardinalityClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableUdfCardinalityClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTableUdfCardinalityClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTableUdfCardinalityClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTableUdfCardinalityClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableUdfCardinalityClauseContext tableUdfCardinalityClause() throws RecognitionException {
		TableUdfCardinalityClauseContext _localctx = new TableUdfCardinalityClauseContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_tableUdfCardinalityClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4191);
			match(CARDINALITY);
			setState(4193);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MULTIPLIER) {
				{
				setState(4192);
				match(MULTIPLIER);
				}
			}

			setState(4195);
			_la = _input.LA(1);
			if ( !(_la==INTEGERLITERAL || _la==NUMERICLITERAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypedCorrelationClauseContext extends ParserRuleContext {
		public CorrelationNameContext correlationName() {
			return getRuleContext(CorrelationNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public List<DataTypeContext> dataType() {
			return getRuleContexts(DataTypeContext.class);
		}
		public DataTypeContext dataType(int i) {
			return getRuleContext(DataTypeContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public TypedCorrelationClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typedCorrelationClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTypedCorrelationClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTypedCorrelationClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTypedCorrelationClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypedCorrelationClauseContext typedCorrelationClause() throws RecognitionException {
		TypedCorrelationClauseContext _localctx = new TypedCorrelationClauseContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_typedCorrelationClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4198);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,499,_ctx) ) {
			case 1:
				{
				setState(4197);
				match(AS);
				}
				break;
			}
			setState(4200);
			correlationName();
			setState(4201);
			match(LPAREN);
			setState(4202);
			columnName();
			setState(4203);
			dataType();
			setState(4210);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4204);
				match(COMMA);
				setState(4205);
				columnName();
				setState(4206);
				dataType();
				}
				}
				setState(4212);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4213);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableLocatorReferenceContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(DB2zSQLParser.LIKE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public CorrelationNameContext correlationName() {
			return getRuleContext(CorrelationNameContext.class,0);
		}
		public TableLocatorReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableLocatorReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTableLocatorReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTableLocatorReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTableLocatorReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableLocatorReferenceContext tableLocatorReference() throws RecognitionException {
		TableLocatorReferenceContext _localctx = new TableLocatorReferenceContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_tableLocatorReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4215);
			match(TABLE);
			setState(4216);
			match(LPAREN);
			setState(4217);
			identifier();
			setState(4218);
			match(LIKE);
			setState(4219);
			tableName();
			setState(4220);
			match(RPAREN);
			setState(4222);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,501,_ctx) ) {
			case 1:
				{
				setState(4221);
				correlationName();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmltableExpressionContext extends ParserRuleContext {
		public XmltableFunctionSpecificationContext xmltableFunctionSpecification() {
			return getRuleContext(XmltableFunctionSpecificationContext.class,0);
		}
		public CorrelationClauseContext correlationClause() {
			return getRuleContext(CorrelationClauseContext.class,0);
		}
		public XmltableExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmltableExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterXmltableExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitXmltableExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitXmltableExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmltableExpressionContext xmltableExpression() throws RecognitionException {
		XmltableExpressionContext _localctx = new XmltableExpressionContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_xmltableExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4224);
			xmltableFunctionSpecification();
			setState(4226);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,502,_ctx) ) {
			case 1:
				{
				setState(4225);
				correlationClause();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollectionDerivedTableContext extends ParserRuleContext {
		public TerminalNode UNNEST() { return getToken(DB2zSQLParser.UNNEST, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<OrdinaryArrayExpressionContext> ordinaryArrayExpression() {
			return getRuleContexts(OrdinaryArrayExpressionContext.class);
		}
		public OrdinaryArrayExpressionContext ordinaryArrayExpression(int i) {
			return getRuleContext(OrdinaryArrayExpressionContext.class,i);
		}
		public List<AssociativeArrayExpressionContext> associativeArrayExpression() {
			return getRuleContexts(AssociativeArrayExpressionContext.class);
		}
		public AssociativeArrayExpressionContext associativeArrayExpression(int i) {
			return getRuleContext(AssociativeArrayExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode ORDINALITY() { return getToken(DB2zSQLParser.ORDINALITY, 0); }
		public CorrelationClauseContext correlationClause() {
			return getRuleContext(CorrelationClauseContext.class,0);
		}
		public CollectionDerivedTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collectionDerivedTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCollectionDerivedTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCollectionDerivedTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCollectionDerivedTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollectionDerivedTableContext collectionDerivedTable() throws RecognitionException {
		CollectionDerivedTableContext _localctx = new CollectionDerivedTableContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_collectionDerivedTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4228);
			match(UNNEST);
			setState(4229);
			match(LPAREN);
			setState(4232);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,503,_ctx) ) {
			case 1:
				{
				setState(4230);
				ordinaryArrayExpression();
				}
				break;
			case 2:
				{
				setState(4231);
				associativeArrayExpression();
				}
				break;
			}
			setState(4241);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4234);
				match(COMMA);
				setState(4237);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,504,_ctx) ) {
				case 1:
					{
					setState(4235);
					ordinaryArrayExpression();
					}
					break;
				case 2:
					{
					setState(4236);
					associativeArrayExpression();
					}
					break;
				}
				}
				}
				setState(4243);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4244);
			match(RPAREN);
			setState(4247);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,506,_ctx) ) {
			case 1:
				{
				setState(4245);
				match(WITH);
				setState(4246);
				match(ORDINALITY);
				}
				break;
			}
			setState(4250);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,507,_ctx) ) {
			case 1:
				{
				setState(4249);
				correlationClause();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinConditionContext extends ParserRuleContext {
		public SearchConditionContext searchCondition() {
			return getRuleContext(SearchConditionContext.class,0);
		}
		public List<FullJoinExpressionContext> fullJoinExpression() {
			return getRuleContexts(FullJoinExpressionContext.class);
		}
		public FullJoinExpressionContext fullJoinExpression(int i) {
			return getRuleContext(FullJoinExpressionContext.class,i);
		}
		public TerminalNode EQ() { return getToken(DB2zSQLParser.EQ, 0); }
		public JoinConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinCondition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterJoinCondition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitJoinCondition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitJoinCondition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinConditionContext joinCondition() throws RecognitionException {
		JoinConditionContext _localctx = new JoinConditionContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_joinCondition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4257);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,508,_ctx) ) {
			case 1:
				{
				setState(4252);
				searchCondition();
				}
				break;
			case 2:
				{
				{
				setState(4253);
				fullJoinExpression();
				setState(4254);
				match(EQ);
				setState(4255);
				fullJoinExpression();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FullJoinExpressionContext extends ParserRuleContext {
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public List<CastFunctionContext> castFunction() {
			return getRuleContexts(CastFunctionContext.class);
		}
		public CastFunctionContext castFunction(int i) {
			return getRuleContext(CastFunctionContext.class,i);
		}
		public TerminalNode COALESCE() { return getToken(DB2zSQLParser.COALESCE, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public FullJoinExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullJoinExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFullJoinExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFullJoinExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFullJoinExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FullJoinExpressionContext fullJoinExpression() throws RecognitionException {
		FullJoinExpressionContext _localctx = new FullJoinExpressionContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_fullJoinExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4279);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,512,_ctx) ) {
			case 1:
				{
				setState(4259);
				columnName();
				}
				break;
			case 2:
				{
				setState(4260);
				castFunction();
				}
				break;
			case 3:
				{
				{
				setState(4261);
				match(COALESCE);
				setState(4262);
				match(LPAREN);
				setState(4265);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,509,_ctx) ) {
				case 1:
					{
					setState(4263);
					columnName();
					}
					break;
				case 2:
					{
					setState(4264);
					castFunction();
					}
					break;
				}
				setState(4274);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4267);
					match(COMMA);
					setState(4270);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,510,_ctx) ) {
					case 1:
						{
						setState(4268);
						columnName();
						}
						break;
					case 2:
						{
						setState(4269);
						castFunction();
						}
						break;
					}
					}
					}
					setState(4276);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4277);
				match(RPAREN);
				}
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CastFunctionContext extends ParserRuleContext {
		public CastSpecificationContext castSpecification() {
			return getRuleContext(CastSpecificationContext.class,0);
		}
		public CastFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_castFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCastFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCastFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCastFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CastFunctionContext castFunction() throws RecognitionException {
		CastFunctionContext _localctx = new CastFunctionContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_castFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4281);
			castSpecification();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrdinaryArrayExpressionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public OrdinaryArrayExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ordinaryArrayExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterOrdinaryArrayExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitOrdinaryArrayExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitOrdinaryArrayExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrdinaryArrayExpressionContext ordinaryArrayExpression() throws RecognitionException {
		OrdinaryArrayExpressionContext _localctx = new OrdinaryArrayExpressionContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_ordinaryArrayExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4283);
			expression();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AssociativeArrayExpressionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public AssociativeArrayExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_associativeArrayExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAssociativeArrayExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAssociativeArrayExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAssociativeArrayExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AssociativeArrayExpressionContext associativeArrayExpression() throws RecognitionException {
		AssociativeArrayExpressionContext _localctx = new AssociativeArrayExpressionContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_associativeArrayExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4285);
			expression();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ComparisonContext extends ParserRuleContext {
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public ComparisonContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparison; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterComparison(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitComparison(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitComparison(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ComparisonContext comparison() throws RecognitionException {
		ComparisonContext _localctx = new ComparisonContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_comparison);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4287);
			columnName();
			setState(4288);
			comparisonOperator();
			setState(4291);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case ALL:
			case ALLOCATE:
			case ALLOW:
			case ALTER:
			case ALTERAND:
			case ANY:
			case ARRAY:
			case ARRAY_EXISTS:
			case AS:
			case ASENSITIVE:
			case ASSOCIATE:
			case ASUTIME:
			case AT:
			case AUDIT:
			case AUX:
			case AUXILIARY:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BUFFERPOOL:
			case BY:
			case CALL:
			case CAPTURE:
			case CASCADED:
			case CASE:
			case CAST:
			case CCSID:
			case CHAR:
			case CHARACTER:
			case CHECK:
			case CLONE:
			case CLOSE:
			case CLUSTER:
			case COLLECTION:
			case COLLID:
			case COLUMN:
			case COMMENT:
			case COMMIT:
			case CONCAT:
			case CONDITION:
			case CONNECT:
			case CONNECTION:
			case CONSTRAINT:
			case CONTAINS:
			case CONTENT:
			case CONTINUE:
			case CREATE:
			case CUBE:
			case CURRENT:
			case CURRENT_LC_CTYPE:
			case CURRVAL:
			case CURSOR:
			case DATA:
			case DATABASE:
			case DAY:
			case DAYS:
			case DBINFO:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DISABLE:
			case DISALLOW:
			case DISTINCT:
			case DO:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSSIZE:
			case DYNAMIC:
			case EDITPROC:
			case ELSE:
			case ELSEIF:
			case ENCODING:
			case ENCRYPTION:
			case END:
			case END_EXEC:
			case ENDING:
			case ERASE:
			case ESCAPE:
			case EXCEPT:
			case EXCEPTION:
			case EXEC_SQL:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case FENCED:
			case FETCH:
			case FIELDPROC:
			case FINAL:
			case FIRST:
			case FOR:
			case FREE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANT:
			case GROUP:
			case HANDLER:
			case HAVING:
			case HOLD:
			case HOUR:
			case HOURS:
			case IF:
			case IMMEDIATE:
			case IN:
			case INCLUSIVE:
			case INDEX:
			case INDEXBP:
			case INHERIT:
			case INNER:
			case INOUT:
			case INSENSITIVE:
			case INSERT:
			case INTERSECT:
			case INTO:
			case IS:
			case ISOBID:
			case ITERATE:
			case JAR:
			case JOIN:
			case KEEP:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LAST:
			case LC_CTYPE:
			case LEAVE:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOCALE:
			case LOCATOR:
			case LOCATORS:
			case LOCK:
			case LOCKMAX:
			case LOCKSIZE:
			case LONG:
			case LOOP:
			case MAINTAINED:
			case MATERIALIZED:
			case MICROSECOND:
			case MICROSECONDS:
			case MODIFIES:
			case MONTH:
			case MONTHS:
			case NEXT:
			case NEXTVAL:
			case NO:
			case NONE:
			case NOT:
			case NULL:
			case NULLS:
			case NUMPARTS:
			case OBID:
			case OF:
			case OFFSET:
			case OLD:
			case ON:
			case OPEN:
			case OPTIMIZATION:
			case OPTIMIZE:
			case OR:
			case ORDER:
			case ORGANIZATION:
			case OUT:
			case OUTER:
			case PACKAGE:
			case PADDED:
			case PARAMETER:
			case PART:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONING:
			case PATH:
			case PERIOD:
			case PIECESIZE:
			case PLAN:
			case PRECISION:
			case PREPARE:
			case PREVVAL:
			case PRIOR:
			case PRIQTY:
			case PRIVILEGES:
			case PROCEDURE:
			case PROGRAM:
			case PSID:
			case PUBLIC:
			case QUERY:
			case QUERYNO:
			case READS:
			case REFERENCES:
			case REFRESH:
			case RELEASE:
			case RENAME:
			case REPEAT:
			case RESIGNAL:
			case RESTRICT:
			case RESULT:
			case RESULT_SET_LOCATOR:
			case RETURN:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUND_CEILING:
			case ROUND_DOWN:
			case ROUND_FLOOR:
			case ROUND_HALF_DOWN:
			case ROUND_HALF_EVEN:
			case ROUND_HALF_UP:
			case ROUND_UP:
			case ROW:
			case ROWSET:
			case RUN:
			case SAVEPOINT:
			case SCHEMA:
			case SCRATCHPAD:
			case SECOND:
			case SECONDS:
			case SECQTY:
			case SECURITY:
			case SELECT:
			case SENSITIVE:
			case SEQUENCE:
			case SET:
			case SIGNAL:
			case SIMPLE:
			case SOME:
			case SOURCE:
			case SPECIFIC:
			case STANDARD:
			case STATEMENT:
			case STATIC:
			case STAY:
			case STOGROUP:
			case STORES:
			case STYLE:
			case SUMMARY:
			case SYNONYM:
			case SYSDATE:
			case SYSTEM:
			case SYSTIMESTAMP:
			case TABLE:
			case TABLESPACE:
			case THEN:
			case TO:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNDO:
			case UNION:
			case UNIQUE:
			case UNTIL:
			case UPDATE:
			case USING:
			case VALIDPROC:
			case VALUE:
			case VALUES:
			case VARIABLE:
			case VARIANT:
			case VCAT:
			case VERSIONING:
			case VIEW:
			case VOLATILE:
			case VOLUMES:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WLM:
			case XMLCAST:
			case XMLEXISTS:
			case XMLNAMESPACES:
			case YEAR:
			case YEARS:
			case ZONE:
			case AND:
			case ARRAY_AGG:
			case ASC:
			case AVG:
			case BIT:
			case CHANGE:
			case CODEUNITS16:
			case CODEUNITS32:
			case CORR:
			case CORRELATION:
			case COUNT:
			case COUNT_BIG:
			case COVAR:
			case COVARIANCE:
			case COVARIANCE_SAMP:
			case COVAR_POP:
			case COVAR_SAMP:
			case CS:
			case CUME_DIST:
			case DENSE_RANK:
			case DESC:
			case EBCDIC:
			case EXCLUSIVE:
			case FIRST_VALUE:
			case FOLLOWING:
			case GROUPING:
			case IGNORE:
			case INDICATOR:
			case INPUT:
			case ISNULL:
			case LAG:
			case LARGE:
			case LAST_VALUE:
			case LEAD:
			case LISTAGG:
			case LOCKED:
			case LOCKS:
			case MEDIAN:
			case MINUTES:
			case MIXED:
			case NOTNULL:
			case NTH_VALUE:
			case NTILE:
			case NUMERIC:
			case OBJECT:
			case OCTETS:
			case ONLY:
			case OVER:
			case PASSING:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PERCENT_RANK:
			case PRECEDING:
			case PREVIOUS:
			case RANGE:
			case RANK:
			case RATIO_TO_REPORT:
			case READ:
			case REF:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_ICPT:
			case REGR_INTERCEPT:
			case REGR_R2:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case RESPECT:
			case ROW_NUMBER:
			case ROWS:
			case RR:
			case RS:
			case SBCS:
			case SELECTIVITY:
			case SETS:
			case SHARE:
			case SKIP_:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case TOKEN:
			case UNBOUNDED:
			case UNPACK:
			case UR:
			case USE:
			case VAR:
			case VARIANCE:
			case VARIANCE_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARYING:
			case WITHOUT:
			case XML:
			case XMLAGG:
			case COLUMNS:
			case SQLID:
			case ORDINALITY:
			case SYSTEM_TIME:
			case BUSINESS_TIME:
			case MULTIPLIER:
			case UNNEST:
			case CROSS:
			case CALLER:
			case CLIENT:
			case POSITIONING:
			case SCROLL:
			case ACTION:
			case ASSEMBLE:
			case C_:
			case CALLED:
			case COBOL:
			case DB2:
			case DEFINER:
			case DISPATCH:
			case ENVIRONMENT:
			case FAILURE:
			case FAILURES:
			case JAVA:
			case MAIN:
			case NAME:
			case OPTIONS:
			case PARALLEL:
			case PLI:
			case REGISTERS:
			case RESIDENT:
			case SECURED:
			case SPECIAL:
			case SQL:
			case STOP:
			case SUB:
			case YES:
			case APPLICATION:
			case CHANGED:
			case COMPATIBILITY:
			case COMPRESS:
			case COPY:
			case FREEPAGE:
			case GBPCACHE:
			case INCLUDE:
			case MAXVALUE:
			case MINVALUE:
			case PCTFREE:
			case REGENERATE:
			case SEQTY:
			case MASK:
			case ENABLE:
			case PERMISSION:
			case ATOMIC:
			case SQLEXCEPTION:
			case MERGE:
			case MATCHED:
			case SQLSTATE:
			case MESSAGE_TEXT:
			case OVERRIDING:
			case PORTION:
			case DB2SQL:
			case DEBUG:
			case GENERAL:
			case MODE_:
			case REXX:
			case CACHE:
			case CYCLE:
			case INCREMENT:
			case RESTART:
			case DATACLAS:
			case MGMTCLAS:
			case REMOVE:
			case STORCLAS:
			case ACCESS:
			case ACTIVATE:
			case ALWAYS:
			case APPEND:
			case ARCHIVE:
			case BUSINESS:
			case CASCADE:
			case CHANGES:
			case CONTROL:
			case DEACTIVATE:
			case DEFERRED:
			case EACH:
			case ENFORCED:
			case EXTRA:
			case FOREIGN:
			case HIDDEN_:
			case HISTORY:
			case ID:
			case IDENTITY:
			case IMPLICITLY:
			case INITIALLY:
			case INLINE:
			case OPERATION:
			case ORGANIZE:
			case OVERLAPS:
			case PACKAGE_NAME:
			case PACKAGE_SCHEMA:
			case PACKAGE_VERSION:
			case PRIMARY:
			case RESET:
			case ROTATE:
			case START:
			case SYSIBM:
			case TRANSACTION:
			case ABS:
			case ABSVAL:
			case ACOS:
			case ADD_DAYS:
			case ADD_MONTHS:
			case ARRAY_DELETE:
			case ARRAY_FIRST:
			case ARRAY_LAST:
			case ARRAY_NEXT:
			case ARRAY_PRIOR:
			case ARRAY_TRIM:
			case ASCII:
			case ASCII_CHR:
			case ASCIISTR:
			case ASCII_STR:
			case ASIN:
			case ATAN:
			case ATAN2:
			case ATANH:
			case BIGINT:
			case BINARY:
			case BITAND:
			case BITANDNOT:
			case BITNOT:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BTRIM:
			case CARDINALITY:
			case CCSID_ENCODING:
			case CEIL:
			case CEILING:
			case CHAR9:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case CHR:
			case CLOB:
			case COALESCE:
			case COLLATION_KEY:
			case COMPARE_DECFLOAT:
			case COS:
			case COSH:
			case DATE:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFWEEK_ISO:
			case DAYOFYEAR:
			case DAYS_BETWEEN:
			case DBCLOB:
			case DEC:
			case DECFLOAT:
			case DECFLOAT_FORMAT:
			case DECFLOAT_SORTKEY:
			case DECIMAL:
			case DECODE:
			case DECRYPT_BINARY:
			case DECRYPT_BIT:
			case DECRYPT_CHAR:
			case DECRYPT_DATAKEY_BIGINT:
			case DECRYPT_DATAKEY_BIT:
			case DECRYPT_DATAKEY_CLOB:
			case DECRYPT_DATAKEY_DBCLOB:
			case DECRYPT_DATAKEY_DECIMAL:
			case DECRYPT_DATAKEY_INTEGER:
			case DECRYPT_DATAKEY_VARCHAR:
			case DECRYPT_DATAKEY_VARGRAPHIC:
			case DECRYPT_DB:
			case DEGREES:
			case DIFFERENCE:
			case DIGITS:
			case DOUBLE_PRECISION:
			case DSN_XMLVALIDATE:
			case EBCDIC_CHR:
			case EBCDIC_STR:
			case ENCRYPT_DATAKEY:
			case ENCRYPT_TDES:
			case EXP:
			case EXTRACT:
			case FLOAT:
			case FLOOR:
			case GENERATE_UNIQUE:
			case GENERATE_UNIQUE_BINARY:
			case GETHINT:
			case GETVARIABLE:
			case GRAPHIC:
			case GREATEST:
			case HASH:
			case HASH_CRC32:
			case HASH_MD5:
			case HASH_SHA1:
			case HASH_SHA256:
			case HEX:
			case IDENTITY_VAL_LOCAL:
			case IFNULL:
			case INSTR:
			case INT:
			case INTEGER:
			case JULIAN_DAY:
			case LAST_DAY:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LN:
			case LOCATE:
			case LOCATE_IN_STRING:
			case LOG10:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAX:
			case MAX_CARDINALITY:
			case MIDNIGHT_SECONDS:
			case MIN:
			case MINUTE:
			case MOD:
			case MONTHS_BETWEEN:
			case MQREAD:
			case MQREADCLOB:
			case MQRECEIVE:
			case MQRECEIVECLOB:
			case MQSEND:
			case MULTIPLY_ALT:
			case NEXT_DAY:
			case NEXT_MONTH:
			case NORMALIZE_DECFLOAT:
			case NORMALIZE_STRING:
			case NULLIF:
			case NVL:
			case OVERLAY:
			case PACK:
			case POSITION:
			case POSSTR:
			case POW:
			case POWER:
			case QUANTIZE:
			case QUARTER:
			case RADIANS:
			case RAISE_ERROR:
			case RAND:
			case RANDOM:
			case REAL:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REPLACE:
			case RID:
			case ROUND:
			case ROUND_TIMESTAMP:
			case ROWID:
			case RPAD:
			case RTRIM:
			case SCORE:
			case SIGN:
			case SIN:
			case SINH:
			case SMALLINT:
			case SOAPHTTPC:
			case SOAPHTTPNC:
			case SOAPHTTPNV:
			case SOAPHTTPV:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STRIP:
			case STRLEFT:
			case STRPOS:
			case STRRIGHT:
			case SUBSTR:
			case SUBSTRING:
			case TAN:
			case TANH:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIMESTAMP_FORMAT:
			case TIMESTAMP_ISO:
			case TIMESTAMP_TZ:
			case TO_CHAR:
			case TO_CLOB:
			case TO_DATE:
			case TO_NUMBER:
			case TOTALORDER:
			case TO_TIMESTAMP:
			case TRANSLATE:
			case TRIM:
			case TRIM_ARRAY:
			case TRUNC:
			case TRUNC_TIMESTAMP:
			case UCASE:
			case UNICODE:
			case UNICODE_STR:
			case UNISTR:
			case UPPER:
			case VARBINARY:
			case VARCHAR:
			case VARCHAR9:
			case VARCHAR_BIT_FORMAT:
			case VARCHAR_FORMAT:
			case VARGRAPHIC:
			case VERIFY_GROUP_FOR_USER:
			case VERIFY_ROLE_FOR_USER:
			case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
			case WEEK:
			case WEEK_ISO:
			case WRAP:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLCONCAT:
			case XMLDOCUMENT:
			case XMLELEMENT:
			case XMLFOREST:
			case XMLMODIFY:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLSERIALIZE:
			case XMLTEXT:
			case XMLXSROBJECTID:
			case XSLTRANSFORM:
			case CURRENT_ACCELERATOR:
			case CURRENT_APPLICATION_COMPATIBILITY:
			case CURRENT_APPLICATION_ENCODING_SCHEME:
			case CURRENT_CLIENT_ACCTNG:
			case CURRENT_CLIENT_APPLNAME:
			case CURRENT_CLIENT_CORR_TOKEN:
			case CURRENT_CLIENT_USERID:
			case CURRENT_CLIENT_WRKSTNNAME:
			case CURRENT_DATE:
			case CURRENT_DEBUG_MODE:
			case CURRENT_DECFLOAT_ROUNDING_MODE:
			case CURRENT_DEGREE:
			case CURRENT_EXPLAIN_MODE:
			case CURRENT_GET_ACCEL_ARCHIVE:
			case CURRENT_LOCALE_LC_CTYPE:
			case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
			case CURRENT_MEMBER:
			case CURRENT_OPTIMIZATION_HINT:
			case CURRENT_PACKAGE_PATH:
			case CURRENT_PACKAGESET:
			case CURRENT_PATH:
			case CURRENT_PRECISION:
			case CURRENT_QUERY_ACCELERATION:
			case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
			case CURRENT_REFRESH_AGE:
			case CURRENT_ROUTINE_VERSION:
			case CURRENT_RULES:
			case CURRENT_SCHEMA:
			case CURRENT_SERVER:
			case CURRENT_SQLID:
			case CURRENT_TEMPORAL_BUSINESS_TIME:
			case CURRENT_TEMPORAL_SYSTEM_TIME:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_TIME_ZONE:
			case ENCRYPTION_PASSWORD:
			case SESSION_TIME_ZONE:
			case SESSION_USER:
			case USER:
			case ADMIN_TASK_LIST:
			case ADMIN_TASK_OUTPUT:
			case ADMIN_TASK_STATUS:
			case BLOCKING_THREADS:
			case MQREADALL:
			case MQREADALLCLOB:
			case MQRECEIVEALL:
			case MQRECEIVEALLCLOB:
			case XMLTABLE:
			case SQLIDENTIFIER:
				{
				setState(4289);
				columnName();
				}
				break;
			case NONNUMERICLITERAL:
			case INTEGERLITERAL:
			case NUMERICLITERAL:
				{
				setState(4290);
				literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhereClauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(DB2zSQLParser.WHERE, 0); }
		public SearchConditionContext searchCondition() {
			return getRuleContext(SearchConditionContext.class,0);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whereClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterWhereClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitWhereClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitWhereClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhereClauseContext whereClause() throws RecognitionException {
		WhereClauseContext _localctx = new WhereClauseContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_whereClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4293);
			match(WHERE);
			setState(4294);
			searchCondition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByClauseContext extends ParserRuleContext {
		public TerminalNode GROUP() { return getToken(DB2zSQLParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public GroupingExpressionContext groupingExpression() {
			return getRuleContext(GroupingExpressionContext.class,0);
		}
		public GroupingSetsContext groupingSets() {
			return getRuleContext(GroupingSetsContext.class,0);
		}
		public SuperGroupsContext superGroups() {
			return getRuleContext(SuperGroupsContext.class,0);
		}
		public GroupByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGroupByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGroupByClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGroupByClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByClauseContext groupByClause() throws RecognitionException {
		GroupByClauseContext _localctx = new GroupByClauseContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_groupByClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4296);
			match(GROUP);
			setState(4297);
			match(BY);
			setState(4301);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,514,_ctx) ) {
			case 1:
				{
				setState(4298);
				groupingExpression();
				}
				break;
			case 2:
				{
				setState(4299);
				groupingSets();
				}
				break;
			case 3:
				{
				setState(4300);
				superGroups();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HavingClauseContext extends ParserRuleContext {
		public TerminalNode HAVING() { return getToken(DB2zSQLParser.HAVING, 0); }
		public SearchConditionContext searchCondition() {
			return getRuleContext(SearchConditionContext.class,0);
		}
		public HavingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_havingClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterHavingClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitHavingClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitHavingClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HavingClauseContext havingClause() throws RecognitionException {
		HavingClauseContext _localctx = new HavingClauseContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_havingClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4303);
			match(HAVING);
			setState(4304);
			searchCondition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupingExpressionContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public GroupingExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupingExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGroupingExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGroupingExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGroupingExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupingExpressionContext groupingExpression() throws RecognitionException {
		GroupingExpressionContext _localctx = new GroupingExpressionContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_groupingExpression);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4306);
			expression();
			setState(4311);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,515,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4307);
					match(COMMA);
					setState(4308);
					expression();
					}
					} 
				}
				setState(4313);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,515,_ctx);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupingSetsContext extends ParserRuleContext {
		public TerminalNode GROUPING() { return getToken(DB2zSQLParser.GROUPING, 0); }
		public TerminalNode SETS() { return getToken(DB2zSQLParser.SETS, 0); }
		public GroupingSetsGroupContext groupingSetsGroup() {
			return getRuleContext(GroupingSetsGroupContext.class,0);
		}
		public GroupingSetsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupingSets; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGroupingSets(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGroupingSets(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGroupingSets(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupingSetsContext groupingSets() throws RecognitionException {
		GroupingSetsContext _localctx = new GroupingSetsContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_groupingSets);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4314);
			match(GROUPING);
			setState(4315);
			match(SETS);
			setState(4316);
			groupingSetsGroup();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupingSetsGroupContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<GroupingSetsGroupContext> groupingSetsGroup() {
			return getRuleContexts(GroupingSetsGroupContext.class);
		}
		public GroupingSetsGroupContext groupingSetsGroup(int i) {
			return getRuleContext(GroupingSetsGroupContext.class,i);
		}
		public List<GroupingExpressionContext> groupingExpression() {
			return getRuleContexts(GroupingExpressionContext.class);
		}
		public GroupingExpressionContext groupingExpression(int i) {
			return getRuleContext(GroupingExpressionContext.class,i);
		}
		public List<SuperGroupsContext> superGroups() {
			return getRuleContexts(SuperGroupsContext.class);
		}
		public SuperGroupsContext superGroups(int i) {
			return getRuleContext(SuperGroupsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public GroupingSetsGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupingSetsGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGroupingSetsGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGroupingSetsGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGroupingSetsGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupingSetsGroupContext groupingSetsGroup() throws RecognitionException {
		GroupingSetsGroupContext _localctx = new GroupingSetsGroupContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_groupingSetsGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4318);
			match(LPAREN);
			setState(4322);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,516,_ctx) ) {
			case 1:
				{
				setState(4319);
				groupingSetsGroup();
				}
				break;
			case 2:
				{
				setState(4320);
				groupingExpression();
				}
				break;
			case 3:
				{
				setState(4321);
				superGroups();
				}
				break;
			}
			setState(4332);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4324);
				match(COMMA);
				setState(4328);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,517,_ctx) ) {
				case 1:
					{
					setState(4325);
					groupingSetsGroup();
					}
					break;
				case 2:
					{
					setState(4326);
					groupingExpression();
					}
					break;
				case 3:
					{
					setState(4327);
					superGroups();
					}
					break;
				}
				}
				}
				setState(4334);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4335);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SuperGroupsContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public GroupingExpressionContext groupingExpression() {
			return getRuleContext(GroupingExpressionContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode ROLLUP() { return getToken(DB2zSQLParser.ROLLUP, 0); }
		public TerminalNode CUBE() { return getToken(DB2zSQLParser.CUBE, 0); }
		public SuperGroupsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_superGroups; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSuperGroups(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSuperGroups(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSuperGroups(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SuperGroupsContext superGroups() throws RecognitionException {
		SuperGroupsContext _localctx = new SuperGroupsContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_superGroups);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4344);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CUBE:
			case ROLLUP:
				{
				{
				setState(4337);
				_la = _input.LA(1);
				if ( !(_la==CUBE || _la==ROLLUP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4338);
				match(LPAREN);
				setState(4339);
				groupingExpression();
				setState(4340);
				match(RPAREN);
				}
				}
				break;
			case LPAREN:
				{
				{
				setState(4342);
				match(LPAREN);
				setState(4343);
				match(RPAREN);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectColumnsContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public TerminalNode SPLAT() { return getToken(DB2zSQLParser.SPLAT, 0); }
		public UnpackedRowContext unpackedRow() {
			return getRuleContext(UnpackedRowContext.class,0);
		}
		public List<OperatorContext> operator() {
			return getRuleContexts(OperatorContext.class);
		}
		public OperatorContext operator(int i) {
			return getRuleContext(OperatorContext.class,i);
		}
		public NewColumnNameContext newColumnName() {
			return getRuleContext(NewColumnNameContext.class,0);
		}
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public SelectColumnsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectColumns; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSelectColumns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSelectColumns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSelectColumns(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectColumnsContext selectColumns() throws RecognitionException {
		SelectColumnsContext _localctx = new SelectColumnsContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_selectColumns);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4366);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,523,_ctx) ) {
			case 1:
				{
				{
				setState(4346);
				expression();
				setState(4352);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,520,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4347);
						operator();
						setState(4348);
						expression();
						}
						} 
					}
					setState(4354);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,520,_ctx);
				}
				setState(4359);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,522,_ctx) ) {
				case 1:
					{
					setState(4356);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,521,_ctx) ) {
					case 1:
						{
						setState(4355);
						match(AS);
						}
						break;
					}
					setState(4358);
					newColumnName();
					}
					break;
				}
				}
				}
				break;
			case 2:
				{
				{
				setState(4361);
				tableName();
				setState(4362);
				match(DOT);
				setState(4363);
				match(SPLAT);
				}
				}
				break;
			case 3:
				{
				{
				setState(4365);
				unpackedRow();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnpackedRowContext extends ParserRuleContext {
		public TerminalNode UNPACK() { return getToken(DB2zSQLParser.UNPACK, 0); }
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public TerminalNode SPLAT() { return getToken(DB2zSQLParser.SPLAT, 0); }
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public List<DataTypeContext> dataType() {
			return getRuleContexts(DataTypeContext.class);
		}
		public DataTypeContext dataType(int i) {
			return getRuleContext(DataTypeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public UnpackedRowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpackedRow; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterUnpackedRow(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitUnpackedRow(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitUnpackedRow(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnpackedRowContext unpackedRow() throws RecognitionException {
		UnpackedRowContext _localctx = new UnpackedRowContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_unpackedRow);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4368);
			match(UNPACK);
			setState(4369);
			match(LPAREN);
			setState(4370);
			expression();
			setState(4371);
			match(RPAREN);
			setState(4372);
			match(DOT);
			setState(4373);
			match(SPLAT);
			setState(4374);
			match(AS);
			setState(4375);
			match(LPAREN);
			setState(4376);
			columnName();
			setState(4377);
			dataType();
			setState(4384);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4378);
				match(COMMA);
				setState(4379);
				columnName();
				setState(4380);
				dataType();
				}
				}
				setState(4386);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4387);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectClauseContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(DB2zSQLParser.SELECT, 0); }
		public TerminalNode SPLAT() { return getToken(DB2zSQLParser.SPLAT, 0); }
		public TerminalNode ALL() { return getToken(DB2zSQLParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(DB2zSQLParser.DISTINCT, 0); }
		public List<SelectColumnsContext> selectColumns() {
			return getRuleContexts(SelectColumnsContext.class);
		}
		public SelectColumnsContext selectColumns(int i) {
			return getRuleContext(SelectColumnsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public SelectClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSelectClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSelectClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSelectClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectClauseContext selectClause() throws RecognitionException {
		SelectClauseContext _localctx = new SelectClauseContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_selectClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4389);
			match(SELECT);
			setState(4391);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,525,_ctx) ) {
			case 1:
				{
				setState(4390);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(4402);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SPLAT:
				{
				setState(4393);
				match(SPLAT);
				}
				break;
			case LPAREN:
			case COLON:
			case NONNUMERICLITERAL:
			case INTEGERLITERAL:
			case NUMERICLITERAL:
			case ADD:
			case AFTER:
			case ALL:
			case ALLOCATE:
			case ALLOW:
			case ALTER:
			case ALTERAND:
			case ANY:
			case ARRAY:
			case ARRAY_EXISTS:
			case AS:
			case ASENSITIVE:
			case ASSOCIATE:
			case ASUTIME:
			case AT:
			case AUDIT:
			case AUX:
			case AUXILIARY:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BUFFERPOOL:
			case BY:
			case CALL:
			case CAPTURE:
			case CASCADED:
			case CASE:
			case CAST:
			case CCSID:
			case CHAR:
			case CHARACTER:
			case CHECK:
			case CLONE:
			case CLOSE:
			case CLUSTER:
			case COLLECTION:
			case COLLID:
			case COLUMN:
			case COMMENT:
			case COMMIT:
			case CONCAT:
			case CONDITION:
			case CONNECT:
			case CONNECTION:
			case CONSTRAINT:
			case CONTAINS:
			case CONTENT:
			case CONTINUE:
			case CREATE:
			case CUBE:
			case CURRENT:
			case CURRENT_LC_CTYPE:
			case CURRVAL:
			case CURSOR:
			case DATA:
			case DATABASE:
			case DAY:
			case DAYS:
			case DBINFO:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DISABLE:
			case DISALLOW:
			case DISTINCT:
			case DO:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSSIZE:
			case DYNAMIC:
			case EDITPROC:
			case ELSE:
			case ELSEIF:
			case ENCODING:
			case ENCRYPTION:
			case END:
			case END_EXEC:
			case ENDING:
			case ERASE:
			case ESCAPE:
			case EXCEPT:
			case EXCEPTION:
			case EXEC_SQL:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case FENCED:
			case FETCH:
			case FIELDPROC:
			case FINAL:
			case FIRST:
			case FOR:
			case FREE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANT:
			case GROUP:
			case HANDLER:
			case HAVING:
			case HOLD:
			case HOUR:
			case HOURS:
			case IF:
			case IMMEDIATE:
			case IN:
			case INCLUSIVE:
			case INDEX:
			case INDEXBP:
			case INHERIT:
			case INNER:
			case INOUT:
			case INSENSITIVE:
			case INSERT:
			case INTERSECT:
			case INTO:
			case IS:
			case ISOBID:
			case ITERATE:
			case JAR:
			case JOIN:
			case KEEP:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LAST:
			case LC_CTYPE:
			case LEAVE:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOCALE:
			case LOCATOR:
			case LOCATORS:
			case LOCK:
			case LOCKMAX:
			case LOCKSIZE:
			case LONG:
			case LOOP:
			case MAINTAINED:
			case MATERIALIZED:
			case MICROSECOND:
			case MICROSECONDS:
			case MODIFIES:
			case MONTH:
			case MONTHS:
			case NEXT:
			case NEXTVAL:
			case NO:
			case NONE:
			case NOT:
			case NULL:
			case NULLS:
			case NUMPARTS:
			case OBID:
			case OF:
			case OFFSET:
			case OLD:
			case ON:
			case OPEN:
			case OPTIMIZATION:
			case OPTIMIZE:
			case OR:
			case ORDER:
			case ORGANIZATION:
			case OUT:
			case OUTER:
			case PACKAGE:
			case PADDED:
			case PARAMETER:
			case PART:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONING:
			case PATH:
			case PERIOD:
			case PIECESIZE:
			case PLAN:
			case PRECISION:
			case PREPARE:
			case PREVVAL:
			case PRIOR:
			case PRIQTY:
			case PRIVILEGES:
			case PROCEDURE:
			case PROGRAM:
			case PSID:
			case PUBLIC:
			case QUERY:
			case QUERYNO:
			case READS:
			case REFERENCES:
			case REFRESH:
			case RELEASE:
			case RENAME:
			case REPEAT:
			case RESIGNAL:
			case RESTRICT:
			case RESULT:
			case RESULT_SET_LOCATOR:
			case RETURN:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUND_CEILING:
			case ROUND_DOWN:
			case ROUND_FLOOR:
			case ROUND_HALF_DOWN:
			case ROUND_HALF_EVEN:
			case ROUND_HALF_UP:
			case ROUND_UP:
			case ROW:
			case ROWSET:
			case RUN:
			case SAVEPOINT:
			case SCHEMA:
			case SCRATCHPAD:
			case SECOND:
			case SECONDS:
			case SECQTY:
			case SECURITY:
			case SELECT:
			case SENSITIVE:
			case SEQUENCE:
			case SET:
			case SIGNAL:
			case SIMPLE:
			case SOME:
			case SOURCE:
			case SPECIFIC:
			case STANDARD:
			case STATEMENT:
			case STATIC:
			case STAY:
			case STOGROUP:
			case STORES:
			case STYLE:
			case SUMMARY:
			case SYNONYM:
			case SYSDATE:
			case SYSTEM:
			case SYSTIMESTAMP:
			case TABLE:
			case TABLESPACE:
			case THEN:
			case TO:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNDO:
			case UNION:
			case UNIQUE:
			case UNTIL:
			case UPDATE:
			case USING:
			case VALIDPROC:
			case VALUE:
			case VALUES:
			case VARIABLE:
			case VARIANT:
			case VCAT:
			case VERSIONING:
			case VIEW:
			case VOLATILE:
			case VOLUMES:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WLM:
			case XMLCAST:
			case XMLEXISTS:
			case XMLNAMESPACES:
			case YEAR:
			case YEARS:
			case ZONE:
			case AND:
			case ARRAY_AGG:
			case ASC:
			case AVG:
			case BIT:
			case CHANGE:
			case CODEUNITS16:
			case CODEUNITS32:
			case CORR:
			case CORRELATION:
			case COUNT:
			case COUNT_BIG:
			case COVAR:
			case COVARIANCE:
			case COVARIANCE_SAMP:
			case COVAR_POP:
			case COVAR_SAMP:
			case CS:
			case CUME_DIST:
			case DENSE_RANK:
			case DESC:
			case EBCDIC:
			case EXCLUSIVE:
			case FIRST_VALUE:
			case FOLLOWING:
			case GROUPING:
			case IGNORE:
			case INDICATOR:
			case INPUT:
			case ISNULL:
			case LAG:
			case LARGE:
			case LAST_VALUE:
			case LEAD:
			case LISTAGG:
			case LOCKED:
			case LOCKS:
			case MEDIAN:
			case MINUTES:
			case MIXED:
			case NOTNULL:
			case NTH_VALUE:
			case NTILE:
			case NUMERIC:
			case OBJECT:
			case OCTETS:
			case ONLY:
			case OVER:
			case PASSING:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PERCENT_RANK:
			case PRECEDING:
			case PREVIOUS:
			case RANGE:
			case RANK:
			case RATIO_TO_REPORT:
			case READ:
			case REF:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_ICPT:
			case REGR_INTERCEPT:
			case REGR_R2:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case RESPECT:
			case ROW_NUMBER:
			case ROWS:
			case RR:
			case RS:
			case SBCS:
			case SELECTIVITY:
			case SETS:
			case SHARE:
			case SKIP_:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case TOKEN:
			case UNBOUNDED:
			case UNPACK:
			case UR:
			case USE:
			case VAR:
			case VARIANCE:
			case VARIANCE_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARYING:
			case WITHOUT:
			case XML:
			case XMLAGG:
			case COLUMNS:
			case SQLID:
			case ORDINALITY:
			case SYSTEM_TIME:
			case BUSINESS_TIME:
			case MULTIPLIER:
			case UNNEST:
			case CROSS:
			case CALLER:
			case CLIENT:
			case POSITIONING:
			case SCROLL:
			case ACTION:
			case ASSEMBLE:
			case C_:
			case CALLED:
			case COBOL:
			case DB2:
			case DEFINER:
			case DISPATCH:
			case ENVIRONMENT:
			case FAILURE:
			case FAILURES:
			case JAVA:
			case MAIN:
			case NAME:
			case OPTIONS:
			case PARALLEL:
			case PLI:
			case REGISTERS:
			case RESIDENT:
			case SECURED:
			case SPECIAL:
			case SQL:
			case STOP:
			case SUB:
			case YES:
			case APPLICATION:
			case CHANGED:
			case COMPATIBILITY:
			case COMPRESS:
			case COPY:
			case FREEPAGE:
			case GBPCACHE:
			case INCLUDE:
			case MAXVALUE:
			case MINVALUE:
			case PCTFREE:
			case REGENERATE:
			case SEQTY:
			case MASK:
			case ENABLE:
			case PERMISSION:
			case ATOMIC:
			case SQLEXCEPTION:
			case MERGE:
			case MATCHED:
			case SQLSTATE:
			case MESSAGE_TEXT:
			case OVERRIDING:
			case PORTION:
			case DB2SQL:
			case DEBUG:
			case GENERAL:
			case MODE_:
			case REXX:
			case CACHE:
			case CYCLE:
			case INCREMENT:
			case RESTART:
			case DATACLAS:
			case MGMTCLAS:
			case REMOVE:
			case STORCLAS:
			case ACCESS:
			case ACTIVATE:
			case ALWAYS:
			case APPEND:
			case ARCHIVE:
			case BUSINESS:
			case CASCADE:
			case CHANGES:
			case CONTROL:
			case DEACTIVATE:
			case DEFERRED:
			case EACH:
			case ENFORCED:
			case EXTRA:
			case FOREIGN:
			case HIDDEN_:
			case HISTORY:
			case ID:
			case IDENTITY:
			case IMPLICITLY:
			case INITIALLY:
			case INLINE:
			case OPERATION:
			case ORGANIZE:
			case OVERLAPS:
			case PACKAGE_NAME:
			case PACKAGE_SCHEMA:
			case PACKAGE_VERSION:
			case PRIMARY:
			case RESET:
			case ROTATE:
			case START:
			case SYSIBM:
			case TRANSACTION:
			case ABS:
			case ABSVAL:
			case ACOS:
			case ADD_DAYS:
			case ADD_MONTHS:
			case ARRAY_DELETE:
			case ARRAY_FIRST:
			case ARRAY_LAST:
			case ARRAY_NEXT:
			case ARRAY_PRIOR:
			case ARRAY_TRIM:
			case ASCII:
			case ASCII_CHR:
			case ASCIISTR:
			case ASCII_STR:
			case ASIN:
			case ATAN:
			case ATAN2:
			case ATANH:
			case BIGINT:
			case BINARY:
			case BITAND:
			case BITANDNOT:
			case BITNOT:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BTRIM:
			case CARDINALITY:
			case CCSID_ENCODING:
			case CEIL:
			case CEILING:
			case CHAR9:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case CHR:
			case CLOB:
			case COALESCE:
			case COLLATION_KEY:
			case COMPARE_DECFLOAT:
			case COS:
			case COSH:
			case DATE:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFWEEK_ISO:
			case DAYOFYEAR:
			case DAYS_BETWEEN:
			case DBCLOB:
			case DEC:
			case DECFLOAT:
			case DECFLOAT_FORMAT:
			case DECFLOAT_SORTKEY:
			case DECIMAL:
			case DECODE:
			case DECRYPT_BINARY:
			case DECRYPT_BIT:
			case DECRYPT_CHAR:
			case DECRYPT_DATAKEY_BIGINT:
			case DECRYPT_DATAKEY_BIT:
			case DECRYPT_DATAKEY_CLOB:
			case DECRYPT_DATAKEY_DBCLOB:
			case DECRYPT_DATAKEY_DECIMAL:
			case DECRYPT_DATAKEY_INTEGER:
			case DECRYPT_DATAKEY_VARCHAR:
			case DECRYPT_DATAKEY_VARGRAPHIC:
			case DECRYPT_DB:
			case DEGREES:
			case DIFFERENCE:
			case DIGITS:
			case DOUBLE_PRECISION:
			case DSN_XMLVALIDATE:
			case EBCDIC_CHR:
			case EBCDIC_STR:
			case ENCRYPT_DATAKEY:
			case ENCRYPT_TDES:
			case EXP:
			case EXTRACT:
			case FLOAT:
			case FLOOR:
			case GENERATE_UNIQUE:
			case GENERATE_UNIQUE_BINARY:
			case GETHINT:
			case GETVARIABLE:
			case GRAPHIC:
			case GREATEST:
			case HASH:
			case HASH_CRC32:
			case HASH_MD5:
			case HASH_SHA1:
			case HASH_SHA256:
			case HEX:
			case IDENTITY_VAL_LOCAL:
			case IFNULL:
			case INSTR:
			case INT:
			case INTEGER:
			case JULIAN_DAY:
			case LAST_DAY:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LN:
			case LOCATE:
			case LOCATE_IN_STRING:
			case LOG10:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAX:
			case MAX_CARDINALITY:
			case MIDNIGHT_SECONDS:
			case MIN:
			case MINUTE:
			case MOD:
			case MONTHS_BETWEEN:
			case MQREAD:
			case MQREADCLOB:
			case MQRECEIVE:
			case MQRECEIVECLOB:
			case MQSEND:
			case MULTIPLY_ALT:
			case NEXT_DAY:
			case NEXT_MONTH:
			case NORMALIZE_DECFLOAT:
			case NORMALIZE_STRING:
			case NULLIF:
			case NVL:
			case OVERLAY:
			case PACK:
			case POSITION:
			case POSSTR:
			case POW:
			case POWER:
			case QUANTIZE:
			case QUARTER:
			case RADIANS:
			case RAISE_ERROR:
			case RAND:
			case RANDOM:
			case REAL:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REPLACE:
			case RID:
			case ROUND:
			case ROUND_TIMESTAMP:
			case ROWID:
			case RPAD:
			case RTRIM:
			case SCORE:
			case SIGN:
			case SIN:
			case SINH:
			case SMALLINT:
			case SOAPHTTPC:
			case SOAPHTTPNC:
			case SOAPHTTPNV:
			case SOAPHTTPV:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STRIP:
			case STRLEFT:
			case STRPOS:
			case STRRIGHT:
			case SUBSTR:
			case SUBSTRING:
			case TAN:
			case TANH:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIMESTAMP_FORMAT:
			case TIMESTAMP_ISO:
			case TIMESTAMP_TZ:
			case TO_CHAR:
			case TO_CLOB:
			case TO_DATE:
			case TO_NUMBER:
			case TOTALORDER:
			case TO_TIMESTAMP:
			case TRANSLATE:
			case TRIM:
			case TRIM_ARRAY:
			case TRUNC:
			case TRUNC_TIMESTAMP:
			case UCASE:
			case UNICODE:
			case UNICODE_STR:
			case UNISTR:
			case UPPER:
			case VARBINARY:
			case VARCHAR:
			case VARCHAR9:
			case VARCHAR_BIT_FORMAT:
			case VARCHAR_FORMAT:
			case VARGRAPHIC:
			case VERIFY_GROUP_FOR_USER:
			case VERIFY_ROLE_FOR_USER:
			case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
			case WEEK:
			case WEEK_ISO:
			case WRAP:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLCONCAT:
			case XMLDOCUMENT:
			case XMLELEMENT:
			case XMLFOREST:
			case XMLMODIFY:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLSERIALIZE:
			case XMLTEXT:
			case XMLXSROBJECTID:
			case XSLTRANSFORM:
			case CURRENT_ACCELERATOR:
			case CURRENT_APPLICATION_COMPATIBILITY:
			case CURRENT_APPLICATION_ENCODING_SCHEME:
			case CURRENT_CLIENT_ACCTNG:
			case CURRENT_CLIENT_APPLNAME:
			case CURRENT_CLIENT_CORR_TOKEN:
			case CURRENT_CLIENT_USERID:
			case CURRENT_CLIENT_WRKSTNNAME:
			case CURRENT_DATE:
			case CURRENT_DEBUG_MODE:
			case CURRENT_DECFLOAT_ROUNDING_MODE:
			case CURRENT_DEGREE:
			case CURRENT_EXPLAIN_MODE:
			case CURRENT_GET_ACCEL_ARCHIVE:
			case CURRENT_LOCALE_LC_CTYPE:
			case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
			case CURRENT_MEMBER:
			case CURRENT_OPTIMIZATION_HINT:
			case CURRENT_PACKAGE_PATH:
			case CURRENT_PACKAGESET:
			case CURRENT_PATH:
			case CURRENT_PRECISION:
			case CURRENT_QUERY_ACCELERATION:
			case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
			case CURRENT_REFRESH_AGE:
			case CURRENT_ROUTINE_VERSION:
			case CURRENT_RULES:
			case CURRENT_SCHEMA:
			case CURRENT_SERVER:
			case CURRENT_SQLID:
			case CURRENT_TEMPORAL_BUSINESS_TIME:
			case CURRENT_TEMPORAL_SYSTEM_TIME:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_TIME_ZONE:
			case ENCRYPTION_PASSWORD:
			case SESSION_TIME_ZONE:
			case SESSION_USER:
			case USER:
			case ADMIN_TASK_LIST:
			case ADMIN_TASK_OUTPUT:
			case ADMIN_TASK_STATUS:
			case BLOCKING_THREADS:
			case MQREADALL:
			case MQREADALLCLOB:
			case MQRECEIVEALL:
			case MQRECEIVEALLCLOB:
			case XMLTABLE:
			case SQLIDENTIFIER:
				{
				{
				setState(4394);
				selectColumns();
				setState(4399);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4395);
					match(COMMA);
					setState(4396);
					selectColumns();
					}
					}
					setState(4401);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubSelectContext extends ParserRuleContext {
		public SelectClauseContext selectClause() {
			return getRuleContext(SelectClauseContext.class,0);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public GroupByClauseContext groupByClause() {
			return getRuleContext(GroupByClauseContext.class,0);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public OffsetClauseContext offsetClause() {
			return getRuleContext(OffsetClauseContext.class,0);
		}
		public FetchClauseContext fetchClause() {
			return getRuleContext(FetchClauseContext.class,0);
		}
		public SubSelectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subSelect; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSubSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSubSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSubSelect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubSelectContext subSelect() throws RecognitionException {
		SubSelectContext _localctx = new SubSelectContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_subSelect);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4404);
			selectClause();
			setState(4405);
			fromClause();
			setState(4407);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(4406);
				whereClause();
				}
			}

			setState(4410);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GROUP) {
				{
				setState(4409);
				groupByClause();
				}
			}

			setState(4413);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HAVING) {
				{
				setState(4412);
				havingClause();
				}
			}

			setState(4416);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,531,_ctx) ) {
			case 1:
				{
				setState(4415);
				orderByClause();
				}
				break;
			}
			setState(4419);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,532,_ctx) ) {
			case 1:
				{
				setState(4418);
				offsetClause();
				}
				break;
			}
			setState(4422);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,533,_ctx) ) {
			case 1:
				{
				setState(4421);
				fetchClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectIntoStatementContext extends ParserRuleContext {
		public SelectClauseContext selectClause() {
			return getRuleContext(SelectClauseContext.class,0);
		}
		public IntoClauseContext intoClause() {
			return getRuleContext(IntoClauseContext.class,0);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public List<CommonTableExpressionContext> commonTableExpression() {
			return getRuleContexts(CommonTableExpressionContext.class);
		}
		public CommonTableExpressionContext commonTableExpression(int i) {
			return getRuleContext(CommonTableExpressionContext.class,i);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public GroupByClauseContext groupByClause() {
			return getRuleContext(GroupByClauseContext.class,0);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public OffsetClauseContext offsetClause() {
			return getRuleContext(OffsetClauseContext.class,0);
		}
		public FetchClauseContext fetchClause() {
			return getRuleContext(FetchClauseContext.class,0);
		}
		public IsolationClauseContext isolationClause() {
			return getRuleContext(IsolationClauseContext.class,0);
		}
		public SkipLockedDataClauseContext skipLockedDataClause() {
			return getRuleContext(SkipLockedDataClauseContext.class,0);
		}
		public QuerynoClauseContext querynoClause() {
			return getRuleContext(QuerynoClauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public SelectIntoStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectIntoStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSelectIntoStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSelectIntoStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSelectIntoStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectIntoStatementContext selectIntoStatement() throws RecognitionException {
		SelectIntoStatementContext _localctx = new SelectIntoStatementContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_selectIntoStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4433);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4424);
				match(WITH);
				setState(4425);
				commonTableExpression();
				setState(4430);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4426);
					match(COMMA);
					setState(4427);
					commonTableExpression();
					}
					}
					setState(4432);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(4435);
			selectClause();
			setState(4436);
			intoClause();
			setState(4437);
			fromClause();
			setState(4439);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(4438);
				whereClause();
				}
			}

			setState(4442);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GROUP) {
				{
				setState(4441);
				groupByClause();
				}
			}

			setState(4445);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HAVING) {
				{
				setState(4444);
				havingClause();
				}
			}

			setState(4448);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(4447);
				orderByClause();
				}
			}

			setState(4451);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OFFSET) {
				{
				setState(4450);
				offsetClause();
				}
			}

			setState(4454);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FETCH) {
				{
				setState(4453);
				fetchClause();
				}
			}

			setState(4458);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				{
				setState(4456);
				isolationClause();
				}
				break;
			case SKIP_:
				{
				setState(4457);
				skipLockedDataClause();
				}
				break;
			case EOF:
			case SEMICOLON:
			case END_EXEC:
			case QUERYNO:
				break;
			default:
				break;
			}
			setState(4461);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==QUERYNO) {
				{
				setState(4460);
				querynoClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectStatementContext extends ParserRuleContext {
		public FullSelectContext fullSelect() {
			return getRuleContext(FullSelectContext.class,0);
		}
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public List<CommonTableExpressionContext> commonTableExpression() {
			return getRuleContexts(CommonTableExpressionContext.class);
		}
		public CommonTableExpressionContext commonTableExpression(int i) {
			return getRuleContext(CommonTableExpressionContext.class,i);
		}
		public List<UpdateClauseContext> updateClause() {
			return getRuleContexts(UpdateClauseContext.class);
		}
		public UpdateClauseContext updateClause(int i) {
			return getRuleContext(UpdateClauseContext.class,i);
		}
		public List<ReadOnlyClauseContext> readOnlyClause() {
			return getRuleContexts(ReadOnlyClauseContext.class);
		}
		public ReadOnlyClauseContext readOnlyClause(int i) {
			return getRuleContext(ReadOnlyClauseContext.class,i);
		}
		public List<OptimizeClauseContext> optimizeClause() {
			return getRuleContexts(OptimizeClauseContext.class);
		}
		public OptimizeClauseContext optimizeClause(int i) {
			return getRuleContext(OptimizeClauseContext.class,i);
		}
		public List<IsolationClauseContext> isolationClause() {
			return getRuleContexts(IsolationClauseContext.class);
		}
		public IsolationClauseContext isolationClause(int i) {
			return getRuleContext(IsolationClauseContext.class,i);
		}
		public List<SkipLockedDataClauseContext> skipLockedDataClause() {
			return getRuleContexts(SkipLockedDataClauseContext.class);
		}
		public SkipLockedDataClauseContext skipLockedDataClause(int i) {
			return getRuleContext(SkipLockedDataClauseContext.class,i);
		}
		public List<QuerynoClauseContext> querynoClause() {
			return getRuleContexts(QuerynoClauseContext.class);
		}
		public QuerynoClauseContext querynoClause(int i) {
			return getRuleContext(QuerynoClauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public SelectStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSelectStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSelectStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSelectStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectStatementContext selectStatement() throws RecognitionException {
		SelectStatementContext _localctx = new SelectStatementContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_selectStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4472);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4463);
				match(WITH);
				setState(4464);
				commonTableExpression();
				setState(4469);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4465);
					match(COMMA);
					setState(4466);
					commonTableExpression();
					}
					}
					setState(4471);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(4474);
			fullSelect();
			setState(4483);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FOR || _la==OPTIMIZE || _la==QUERYNO || _la==WITH || _la==SKIP_) {
				{
				setState(4481);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,546,_ctx) ) {
				case 1:
					{
					setState(4475);
					updateClause();
					}
					break;
				case 2:
					{
					setState(4476);
					readOnlyClause();
					}
					break;
				case 3:
					{
					setState(4477);
					optimizeClause();
					}
					break;
				case 4:
					{
					setState(4478);
					isolationClause();
					}
					break;
				case 5:
					{
					setState(4479);
					skipLockedDataClause();
					}
					break;
				case 6:
					{
					setState(4480);
					querynoClause();
					}
					break;
				}
				}
				setState(4485);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommonTableExpressionContext extends ParserRuleContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public FullSelectContext fullSelect() {
			return getRuleContext(FullSelectContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public CommonTableExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commonTableExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCommonTableExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCommonTableExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCommonTableExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommonTableExpressionContext commonTableExpression() throws RecognitionException {
		CommonTableExpressionContext _localctx = new CommonTableExpressionContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_commonTableExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4486);
			tableName();
			setState(4487);
			match(LPAREN);
			setState(4488);
			columnName();
			setState(4493);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4489);
				match(COMMA);
				setState(4490);
				columnName();
				}
				}
				setState(4495);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4496);
			match(RPAREN);
			setState(4497);
			match(AS);
			setState(4498);
			match(LPAREN);
			setState(4499);
			fullSelect();
			setState(4500);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateClauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(DB2zSQLParser.UPDATE, 0); }
		public TerminalNode OF() { return getToken(DB2zSQLParser.OF, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public UpdateClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterUpdateClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitUpdateClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitUpdateClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateClauseContext updateClause() throws RecognitionException {
		UpdateClauseContext _localctx = new UpdateClauseContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_updateClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4502);
			match(FOR);
			setState(4503);
			match(UPDATE);
			setState(4513);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OF) {
				{
				setState(4504);
				match(OF);
				setState(4505);
				columnName();
				setState(4510);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4506);
					match(COMMA);
					setState(4507);
					columnName();
					}
					}
					setState(4512);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReadOnlyClauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode READ() { return getToken(DB2zSQLParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(DB2zSQLParser.ONLY, 0); }
		public ReadOnlyClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_readOnlyClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterReadOnlyClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitReadOnlyClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitReadOnlyClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReadOnlyClauseContext readOnlyClause() throws RecognitionException {
		ReadOnlyClauseContext _localctx = new ReadOnlyClauseContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_readOnlyClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4515);
			match(FOR);
			setState(4516);
			match(READ);
			setState(4517);
			match(ONLY);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptimizeClauseContext extends ParserRuleContext {
		public TerminalNode OPTIMIZE() { return getToken(DB2zSQLParser.OPTIMIZE, 0); }
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode ROW() { return getToken(DB2zSQLParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(DB2zSQLParser.ROWS, 0); }
		public OptimizeClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optimizeClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterOptimizeClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitOptimizeClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitOptimizeClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptimizeClauseContext optimizeClause() throws RecognitionException {
		OptimizeClauseContext _localctx = new OptimizeClauseContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_optimizeClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4519);
			match(OPTIMIZE);
			setState(4520);
			match(FOR);
			setState(4521);
			match(INTEGERLITERAL);
			setState(4522);
			_la = _input.LA(1);
			if ( !(_la==ROW || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IsolationClauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode CS() { return getToken(DB2zSQLParser.CS, 0); }
		public TerminalNode UR() { return getToken(DB2zSQLParser.UR, 0); }
		public TerminalNode RR() { return getToken(DB2zSQLParser.RR, 0); }
		public TerminalNode RS() { return getToken(DB2zSQLParser.RS, 0); }
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public IsolationClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_isolationClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterIsolationClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitIsolationClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitIsolationClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IsolationClauseContext isolationClause() throws RecognitionException {
		IsolationClauseContext _localctx = new IsolationClauseContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_isolationClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4524);
			match(WITH);
			setState(4535);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RR:
				{
				{
				setState(4525);
				match(RR);
				setState(4527);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USE) {
					{
					setState(4526);
					lockClause();
					}
				}

				}
				}
				break;
			case RS:
				{
				{
				setState(4529);
				match(RS);
				setState(4531);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USE) {
					{
					setState(4530);
					lockClause();
					}
				}

				}
				}
				break;
			case CS:
				{
				setState(4533);
				match(CS);
				}
				break;
			case UR:
				{
				setState(4534);
				match(UR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockClauseContext extends ParserRuleContext {
		public TerminalNode USE() { return getToken(DB2zSQLParser.USE, 0); }
		public TerminalNode AND() { return getToken(DB2zSQLParser.AND, 0); }
		public TerminalNode KEEP() { return getToken(DB2zSQLParser.KEEP, 0); }
		public TerminalNode LOCKS() { return getToken(DB2zSQLParser.LOCKS, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(DB2zSQLParser.EXCLUSIVE, 0); }
		public TerminalNode UPDATE() { return getToken(DB2zSQLParser.UPDATE, 0); }
		public TerminalNode SHARE() { return getToken(DB2zSQLParser.SHARE, 0); }
		public LockClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterLockClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitLockClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitLockClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockClauseContext lockClause() throws RecognitionException {
		LockClauseContext _localctx = new LockClauseContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_lockClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4537);
			match(USE);
			setState(4538);
			match(AND);
			setState(4539);
			match(KEEP);
			setState(4540);
			_la = _input.LA(1);
			if ( !(_la==UPDATE || _la==EXCLUSIVE || _la==SHARE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4541);
			match(LOCKS);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SkipLockedDataClauseContext extends ParserRuleContext {
		public TerminalNode SKIP_() { return getToken(DB2zSQLParser.SKIP_, 0); }
		public TerminalNode LOCKED() { return getToken(DB2zSQLParser.LOCKED, 0); }
		public TerminalNode DATA() { return getToken(DB2zSQLParser.DATA, 0); }
		public SkipLockedDataClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_skipLockedDataClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSkipLockedDataClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSkipLockedDataClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSkipLockedDataClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SkipLockedDataClauseContext skipLockedDataClause() throws RecognitionException {
		SkipLockedDataClauseContext _localctx = new SkipLockedDataClauseContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_skipLockedDataClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4543);
			match(SKIP_);
			setState(4544);
			match(LOCKED);
			setState(4545);
			match(DATA);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QuerynoClauseContext extends ParserRuleContext {
		public TerminalNode QUERYNO() { return getToken(DB2zSQLParser.QUERYNO, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public QuerynoClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_querynoClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterQuerynoClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitQuerynoClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitQuerynoClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QuerynoClauseContext querynoClause() throws RecognitionException {
		QuerynoClauseContext _localctx = new QuerynoClauseContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_querynoClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4547);
			match(QUERYNO);
			setState(4548);
			match(INTEGERLITERAL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScalarFullSelectContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public FullSelectContext fullSelect() {
			return getRuleContext(FullSelectContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public ScalarFullSelectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scalarFullSelect; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterScalarFullSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitScalarFullSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitScalarFullSelect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ScalarFullSelectContext scalarFullSelect() throws RecognitionException {
		ScalarFullSelectContext _localctx = new ScalarFullSelectContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_scalarFullSelect);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4550);
			match(LPAREN);
			setState(4551);
			fullSelect();
			setState(4552);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FullSelectContext extends ParserRuleContext {
		public List<SubSelectContext> subSelect() {
			return getRuleContexts(SubSelectContext.class);
		}
		public SubSelectContext subSelect(int i) {
			return getRuleContext(SubSelectContext.class,i);
		}
		public ValuesClauseContext valuesClause() {
			return getRuleContext(ValuesClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public OffsetClauseContext offsetClause() {
			return getRuleContext(OffsetClauseContext.class,0);
		}
		public FetchClauseContext fetchClause() {
			return getRuleContext(FetchClauseContext.class,0);
		}
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public List<FullSelectContext> fullSelect() {
			return getRuleContexts(FullSelectContext.class);
		}
		public FullSelectContext fullSelect(int i) {
			return getRuleContext(FullSelectContext.class,i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public List<TerminalNode> UNION() { return getTokens(DB2zSQLParser.UNION); }
		public TerminalNode UNION(int i) {
			return getToken(DB2zSQLParser.UNION, i);
		}
		public List<TerminalNode> EXCEPT() { return getTokens(DB2zSQLParser.EXCEPT); }
		public TerminalNode EXCEPT(int i) {
			return getToken(DB2zSQLParser.EXCEPT, i);
		}
		public List<TerminalNode> INTERSECT() { return getTokens(DB2zSQLParser.INTERSECT); }
		public TerminalNode INTERSECT(int i) {
			return getToken(DB2zSQLParser.INTERSECT, i);
		}
		public List<TerminalNode> DISTINCT() { return getTokens(DB2zSQLParser.DISTINCT); }
		public TerminalNode DISTINCT(int i) {
			return getToken(DB2zSQLParser.DISTINCT, i);
		}
		public List<TerminalNode> ALL() { return getTokens(DB2zSQLParser.ALL); }
		public TerminalNode ALL(int i) {
			return getToken(DB2zSQLParser.ALL, i);
		}
		public FullSelectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullSelect; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFullSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFullSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFullSelect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FullSelectContext fullSelect() throws RecognitionException {
		FullSelectContext _localctx = new FullSelectContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_fullSelect);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4560);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LPAREN:
				{
				{
				setState(4554);
				match(LPAREN);
				setState(4555);
				fullSelect();
				setState(4556);
				match(RPAREN);
				}
				}
				break;
			case SELECT:
				{
				setState(4558);
				subSelect();
				}
				break;
			case VALUES:
				{
				setState(4559);
				valuesClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4575);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==EXCEPT || _la==INTERSECT || _la==UNION) {
				{
				{
				setState(4562);
				_la = _input.LA(1);
				if ( !(_la==EXCEPT || _la==INTERSECT || _la==UNION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4564);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					setState(4563);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(4571);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SELECT:
					{
					setState(4566);
					subSelect();
					}
					break;
				case LPAREN:
					{
					{
					setState(4567);
					match(LPAREN);
					setState(4568);
					fullSelect();
					setState(4569);
					match(RPAREN);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				setState(4577);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4579);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(4578);
				orderByClause();
				}
			}

			setState(4582);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OFFSET) {
				{
				setState(4581);
				offsetClause();
				}
			}

			setState(4585);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FETCH) {
				{
				setState(4584);
				fetchClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValuesClauseContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(DB2zSQLParser.VALUES, 0); }
		public List<SequenceReferenceContext> sequenceReference() {
			return getRuleContexts(SequenceReferenceContext.class);
		}
		public SequenceReferenceContext sequenceReference(int i) {
			return getRuleContext(SequenceReferenceContext.class,i);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public ValuesClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valuesClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterValuesClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitValuesClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitValuesClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValuesClauseContext valuesClause() throws RecognitionException {
		ValuesClauseContext _localctx = new ValuesClauseContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_valuesClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4587);
			match(VALUES);
			setState(4600);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NEXT:
			case PREVIOUS:
				{
				setState(4588);
				sequenceReference();
				}
				break;
			case LPAREN:
				{
				{
				setState(4589);
				match(LPAREN);
				setState(4590);
				sequenceReference();
				setState(4595);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4591);
					match(COMMA);
					setState(4592);
					sequenceReference();
					}
					}
					setState(4597);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4598);
				match(RPAREN);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderByClauseContext extends ParserRuleContext {
		public List<TerminalNode> ORDER() { return getTokens(DB2zSQLParser.ORDER); }
		public TerminalNode ORDER(int i) {
			return getToken(DB2zSQLParser.ORDER, i);
		}
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public List<SortKeyContext> sortKey() {
			return getRuleContexts(SortKeyContext.class);
		}
		public SortKeyContext sortKey(int i) {
			return getRuleContext(SortKeyContext.class,i);
		}
		public TerminalNode INPUT() { return getToken(DB2zSQLParser.INPUT, 0); }
		public TerminalNode SEQUENCE() { return getToken(DB2zSQLParser.SEQUENCE, 0); }
		public TerminalNode OF() { return getToken(DB2zSQLParser.OF, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public List<TerminalNode> ASC() { return getTokens(DB2zSQLParser.ASC); }
		public TerminalNode ASC(int i) {
			return getToken(DB2zSQLParser.ASC, i);
		}
		public List<TerminalNode> DESC() { return getTokens(DB2zSQLParser.DESC); }
		public TerminalNode DESC(int i) {
			return getToken(DB2zSQLParser.DESC, i);
		}
		public OrderByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterOrderByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitOrderByClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitOrderByClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderByClauseContext orderByClause() throws RecognitionException {
		OrderByClauseContext _localctx = new OrderByClauseContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_orderByClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4602);
			match(ORDER);
			setState(4603);
			match(BY);
			setState(4623);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,566,_ctx) ) {
			case 1:
				{
				{
				setState(4604);
				sortKey();
				setState(4606);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					setState(4605);
					_la = _input.LA(1);
					if ( !(_la==ASC || _la==DESC) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(4615);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4608);
					match(COMMA);
					setState(4609);
					sortKey();
					setState(4611);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ASC || _la==DESC) {
						{
						setState(4610);
						_la = _input.LA(1);
						if ( !(_la==ASC || _la==DESC) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					}
					}
					setState(4617);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case 2:
				{
				{
				setState(4618);
				match(INPUT);
				setState(4619);
				match(SEQUENCE);
				}
				}
				break;
			case 3:
				{
				{
				setState(4620);
				match(ORDER);
				setState(4621);
				match(OF);
				setState(4622);
				tableName();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SortKeyContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public SortKeyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sortKey; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSortKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSortKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSortKey(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SortKeyContext sortKey() throws RecognitionException {
		SortKeyContext _localctx = new SortKeyContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_sortKey);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4628);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,567,_ctx) ) {
			case 1:
				{
				setState(4625);
				columnName();
				}
				break;
			case 2:
				{
				setState(4626);
				match(INTEGERLITERAL);
				}
				break;
			case 3:
				{
				setState(4627);
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OffsetClauseContext extends ParserRuleContext {
		public TerminalNode OFFSET() { return getToken(DB2zSQLParser.OFFSET, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode ROW() { return getToken(DB2zSQLParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(DB2zSQLParser.ROWS, 0); }
		public OffsetClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_offsetClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterOffsetClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitOffsetClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitOffsetClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OffsetClauseContext offsetClause() throws RecognitionException {
		OffsetClauseContext _localctx = new OffsetClauseContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_offsetClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4630);
			match(OFFSET);
			setState(4631);
			match(INTEGERLITERAL);
			setState(4632);
			_la = _input.LA(1);
			if ( !(_la==ROW || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FetchClauseContext extends ParserRuleContext {
		public TerminalNode FETCH() { return getToken(DB2zSQLParser.FETCH, 0); }
		public TerminalNode ONLY() { return getToken(DB2zSQLParser.ONLY, 0); }
		public TerminalNode FIRST() { return getToken(DB2zSQLParser.FIRST, 0); }
		public TerminalNode NEXT() { return getToken(DB2zSQLParser.NEXT, 0); }
		public TerminalNode ROW() { return getToken(DB2zSQLParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(DB2zSQLParser.ROWS, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public FetchClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetchClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFetchClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFetchClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFetchClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FetchClauseContext fetchClause() throws RecognitionException {
		FetchClauseContext _localctx = new FetchClauseContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_fetchClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4634);
			match(FETCH);
			setState(4635);
			_la = _input.LA(1);
			if ( !(_la==FIRST || _la==NEXT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4637);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTEGERLITERAL) {
				{
				setState(4636);
				match(INTEGERLITERAL);
				}
			}

			setState(4639);
			_la = _input.LA(1);
			if ( !(_la==ROW || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4640);
			match(ONLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierContext extends ParserRuleContext {
		public TerminalNode SQLIDENTIFIER() { return getToken(DB2zSQLParser.SQLIDENTIFIER, 0); }
		public SqlKeywordContext sqlKeyword() {
			return getRuleContext(SqlKeywordContext.class,0);
		}
		public SpecialRegisterContext specialRegister() {
			return getRuleContext(SpecialRegisterContext.class,0);
		}
		public ScalarFunctionContext scalarFunction() {
			return getRuleContext(ScalarFunctionContext.class,0);
		}
		public AggregateFunctionContext aggregateFunction() {
			return getRuleContext(AggregateFunctionContext.class,0);
		}
		public RegressionFunctionContext regressionFunction() {
			return getRuleContext(RegressionFunctionContext.class,0);
		}
		public TableFunctionContext tableFunction() {
			return getRuleContext(TableFunctionContext.class,0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierContext identifier() throws RecognitionException {
		IdentifierContext _localctx = new IdentifierContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_identifier);
		try {
			setState(4649);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,569,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4642);
				match(SQLIDENTIFIER);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4643);
				sqlKeyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4644);
				specialRegister();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4645);
				scalarFunction();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4646);
				aggregateFunction();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4647);
				regressionFunction();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4648);
				tableFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SqlKeywordContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(DB2zSQLParser.ADD, 0); }
		public TerminalNode AFTER() { return getToken(DB2zSQLParser.AFTER, 0); }
		public TerminalNode ALL() { return getToken(DB2zSQLParser.ALL, 0); }
		public TerminalNode ALLOCATE() { return getToken(DB2zSQLParser.ALLOCATE, 0); }
		public TerminalNode ALLOW() { return getToken(DB2zSQLParser.ALLOW, 0); }
		public TerminalNode ALTERAND() { return getToken(DB2zSQLParser.ALTERAND, 0); }
		public TerminalNode ANY() { return getToken(DB2zSQLParser.ANY, 0); }
		public TerminalNode ARRAY() { return getToken(DB2zSQLParser.ARRAY, 0); }
		public TerminalNode ARRAY_EXISTS() { return getToken(DB2zSQLParser.ARRAY_EXISTS, 0); }
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode ASENSITIVE() { return getToken(DB2zSQLParser.ASENSITIVE, 0); }
		public TerminalNode ASSOCIATE() { return getToken(DB2zSQLParser.ASSOCIATE, 0); }
		public TerminalNode ASUTIME() { return getToken(DB2zSQLParser.ASUTIME, 0); }
		public TerminalNode AT() { return getToken(DB2zSQLParser.AT, 0); }
		public TerminalNode AUDIT() { return getToken(DB2zSQLParser.AUDIT, 0); }
		public TerminalNode AUX() { return getToken(DB2zSQLParser.AUX, 0); }
		public TerminalNode AUXILIARY() { return getToken(DB2zSQLParser.AUXILIARY, 0); }
		public TerminalNode BEFORE() { return getToken(DB2zSQLParser.BEFORE, 0); }
		public TerminalNode BEGIN() { return getToken(DB2zSQLParser.BEGIN, 0); }
		public TerminalNode BETWEEN() { return getToken(DB2zSQLParser.BETWEEN, 0); }
		public TerminalNode BUFFERPOOL() { return getToken(DB2zSQLParser.BUFFERPOOL, 0); }
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public TerminalNode CALL() { return getToken(DB2zSQLParser.CALL, 0); }
		public TerminalNode CAPTURE() { return getToken(DB2zSQLParser.CAPTURE, 0); }
		public TerminalNode CASCADED() { return getToken(DB2zSQLParser.CASCADED, 0); }
		public TerminalNode CASE() { return getToken(DB2zSQLParser.CASE, 0); }
		public TerminalNode CAST() { return getToken(DB2zSQLParser.CAST, 0); }
		public TerminalNode CCSID() { return getToken(DB2zSQLParser.CCSID, 0); }
		public TerminalNode CHAR() { return getToken(DB2zSQLParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(DB2zSQLParser.CHARACTER, 0); }
		public TerminalNode CHECK() { return getToken(DB2zSQLParser.CHECK, 0); }
		public TerminalNode CLONE() { return getToken(DB2zSQLParser.CLONE, 0); }
		public TerminalNode CLOSE() { return getToken(DB2zSQLParser.CLOSE, 0); }
		public TerminalNode CLUSTER() { return getToken(DB2zSQLParser.CLUSTER, 0); }
		public TerminalNode COLLECTION() { return getToken(DB2zSQLParser.COLLECTION, 0); }
		public TerminalNode COLLID() { return getToken(DB2zSQLParser.COLLID, 0); }
		public TerminalNode COLUMN() { return getToken(DB2zSQLParser.COLUMN, 0); }
		public TerminalNode COMMENT() { return getToken(DB2zSQLParser.COMMENT, 0); }
		public TerminalNode COMMIT() { return getToken(DB2zSQLParser.COMMIT, 0); }
		public TerminalNode CONCAT() { return getToken(DB2zSQLParser.CONCAT, 0); }
		public TerminalNode CONDITION() { return getToken(DB2zSQLParser.CONDITION, 0); }
		public TerminalNode CONNECT() { return getToken(DB2zSQLParser.CONNECT, 0); }
		public TerminalNode CONNECTION() { return getToken(DB2zSQLParser.CONNECTION, 0); }
		public TerminalNode CONSTRAINT() { return getToken(DB2zSQLParser.CONSTRAINT, 0); }
		public TerminalNode CONTAINS() { return getToken(DB2zSQLParser.CONTAINS, 0); }
		public TerminalNode CONTENT() { return getToken(DB2zSQLParser.CONTENT, 0); }
		public TerminalNode CONTINUE() { return getToken(DB2zSQLParser.CONTINUE, 0); }
		public TerminalNode CREATE() { return getToken(DB2zSQLParser.CREATE, 0); }
		public TerminalNode CUBE() { return getToken(DB2zSQLParser.CUBE, 0); }
		public TerminalNode CURRENT() { return getToken(DB2zSQLParser.CURRENT, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(DB2zSQLParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_LC_CTYPE() { return getToken(DB2zSQLParser.CURRENT_LC_CTYPE, 0); }
		public TerminalNode CURRENT_PATH() { return getToken(DB2zSQLParser.CURRENT_PATH, 0); }
		public TerminalNode CURRENT_SCHEMA() { return getToken(DB2zSQLParser.CURRENT_SCHEMA, 0); }
		public TerminalNode CURRENT_SERVER() { return getToken(DB2zSQLParser.CURRENT_SERVER, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(DB2zSQLParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(DB2zSQLParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_TIME_ZONE() { return getToken(DB2zSQLParser.CURRENT_TIME_ZONE, 0); }
		public TerminalNode CURRVAL() { return getToken(DB2zSQLParser.CURRVAL, 0); }
		public TerminalNode CURSOR() { return getToken(DB2zSQLParser.CURSOR, 0); }
		public TerminalNode DATA() { return getToken(DB2zSQLParser.DATA, 0); }
		public TerminalNode DATABASE() { return getToken(DB2zSQLParser.DATABASE, 0); }
		public TerminalNode DAY() { return getToken(DB2zSQLParser.DAY, 0); }
		public TerminalNode DAYS() { return getToken(DB2zSQLParser.DAYS, 0); }
		public TerminalNode DBINFO() { return getToken(DB2zSQLParser.DBINFO, 0); }
		public TerminalNode DECLARE() { return getToken(DB2zSQLParser.DECLARE, 0); }
		public TerminalNode DEFAULT() { return getToken(DB2zSQLParser.DEFAULT, 0); }
		public TerminalNode DELETE() { return getToken(DB2zSQLParser.DELETE, 0); }
		public TerminalNode DESCRIPTOR() { return getToken(DB2zSQLParser.DESCRIPTOR, 0); }
		public TerminalNode DETERMINISTIC() { return getToken(DB2zSQLParser.DETERMINISTIC, 0); }
		public TerminalNode DISABLE() { return getToken(DB2zSQLParser.DISABLE, 0); }
		public TerminalNode DISALLOW() { return getToken(DB2zSQLParser.DISALLOW, 0); }
		public TerminalNode DISTINCT() { return getToken(DB2zSQLParser.DISTINCT, 0); }
		public TerminalNode DO() { return getToken(DB2zSQLParser.DO, 0); }
		public TerminalNode DOCUMENT() { return getToken(DB2zSQLParser.DOCUMENT, 0); }
		public TerminalNode DOUBLE() { return getToken(DB2zSQLParser.DOUBLE, 0); }
		public TerminalNode DROP() { return getToken(DB2zSQLParser.DROP, 0); }
		public TerminalNode DSSIZE() { return getToken(DB2zSQLParser.DSSIZE, 0); }
		public TerminalNode DYNAMIC() { return getToken(DB2zSQLParser.DYNAMIC, 0); }
		public TerminalNode EDITPROC() { return getToken(DB2zSQLParser.EDITPROC, 0); }
		public TerminalNode ELSE() { return getToken(DB2zSQLParser.ELSE, 0); }
		public TerminalNode ELSEIF() { return getToken(DB2zSQLParser.ELSEIF, 0); }
		public TerminalNode ENCODING() { return getToken(DB2zSQLParser.ENCODING, 0); }
		public TerminalNode ENCRYPTION() { return getToken(DB2zSQLParser.ENCRYPTION, 0); }
		public TerminalNode END() { return getToken(DB2zSQLParser.END, 0); }
		public TerminalNode END_EXEC() { return getToken(DB2zSQLParser.END_EXEC, 0); }
		public TerminalNode ENDING() { return getToken(DB2zSQLParser.ENDING, 0); }
		public TerminalNode ERASE() { return getToken(DB2zSQLParser.ERASE, 0); }
		public TerminalNode ESCAPE() { return getToken(DB2zSQLParser.ESCAPE, 0); }
		public TerminalNode EXCEPT() { return getToken(DB2zSQLParser.EXCEPT, 0); }
		public TerminalNode EXCEPTION() { return getToken(DB2zSQLParser.EXCEPTION, 0); }
		public TerminalNode EXEC_SQL() { return getToken(DB2zSQLParser.EXEC_SQL, 0); }
		public TerminalNode EXECUTE() { return getToken(DB2zSQLParser.EXECUTE, 0); }
		public TerminalNode EXISTS() { return getToken(DB2zSQLParser.EXISTS, 0); }
		public TerminalNode EXIT() { return getToken(DB2zSQLParser.EXIT, 0); }
		public TerminalNode EXPLAIN() { return getToken(DB2zSQLParser.EXPLAIN, 0); }
		public TerminalNode EXTERNAL() { return getToken(DB2zSQLParser.EXTERNAL, 0); }
		public TerminalNode FENCED() { return getToken(DB2zSQLParser.FENCED, 0); }
		public TerminalNode FETCH() { return getToken(DB2zSQLParser.FETCH, 0); }
		public TerminalNode FIELDPROC() { return getToken(DB2zSQLParser.FIELDPROC, 0); }
		public TerminalNode FINAL() { return getToken(DB2zSQLParser.FINAL, 0); }
		public TerminalNode FIRST() { return getToken(DB2zSQLParser.FIRST, 0); }
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode FREE() { return getToken(DB2zSQLParser.FREE, 0); }
		public TerminalNode FROM() { return getToken(DB2zSQLParser.FROM, 0); }
		public TerminalNode FULL() { return getToken(DB2zSQLParser.FULL, 0); }
		public TerminalNode FUNCTION() { return getToken(DB2zSQLParser.FUNCTION, 0); }
		public TerminalNode GENERATED() { return getToken(DB2zSQLParser.GENERATED, 0); }
		public TerminalNode GET() { return getToken(DB2zSQLParser.GET, 0); }
		public TerminalNode GLOBAL() { return getToken(DB2zSQLParser.GLOBAL, 0); }
		public TerminalNode GO() { return getToken(DB2zSQLParser.GO, 0); }
		public TerminalNode GOTO() { return getToken(DB2zSQLParser.GOTO, 0); }
		public TerminalNode GRANT() { return getToken(DB2zSQLParser.GRANT, 0); }
		public TerminalNode GROUP() { return getToken(DB2zSQLParser.GROUP, 0); }
		public TerminalNode HANDLER() { return getToken(DB2zSQLParser.HANDLER, 0); }
		public TerminalNode HAVING() { return getToken(DB2zSQLParser.HAVING, 0); }
		public TerminalNode HOLD() { return getToken(DB2zSQLParser.HOLD, 0); }
		public TerminalNode HOUR() { return getToken(DB2zSQLParser.HOUR, 0); }
		public TerminalNode HOURS() { return getToken(DB2zSQLParser.HOURS, 0); }
		public TerminalNode IF() { return getToken(DB2zSQLParser.IF, 0); }
		public TerminalNode IMMEDIATE() { return getToken(DB2zSQLParser.IMMEDIATE, 0); }
		public TerminalNode IN() { return getToken(DB2zSQLParser.IN, 0); }
		public TerminalNode INCLUSIVE() { return getToken(DB2zSQLParser.INCLUSIVE, 0); }
		public TerminalNode INDEX() { return getToken(DB2zSQLParser.INDEX, 0); }
		public TerminalNode INHERIT() { return getToken(DB2zSQLParser.INHERIT, 0); }
		public TerminalNode INNER() { return getToken(DB2zSQLParser.INNER, 0); }
		public TerminalNode INOUT() { return getToken(DB2zSQLParser.INOUT, 0); }
		public TerminalNode INSENSITIVE() { return getToken(DB2zSQLParser.INSENSITIVE, 0); }
		public TerminalNode INSERT() { return getToken(DB2zSQLParser.INSERT, 0); }
		public TerminalNode INTERSECT() { return getToken(DB2zSQLParser.INTERSECT, 0); }
		public TerminalNode INTO() { return getToken(DB2zSQLParser.INTO, 0); }
		public TerminalNode IS() { return getToken(DB2zSQLParser.IS, 0); }
		public TerminalNode ISOBID() { return getToken(DB2zSQLParser.ISOBID, 0); }
		public TerminalNode ITERATE() { return getToken(DB2zSQLParser.ITERATE, 0); }
		public TerminalNode JAR() { return getToken(DB2zSQLParser.JAR, 0); }
		public TerminalNode JOIN() { return getToken(DB2zSQLParser.JOIN, 0); }
		public TerminalNode KEEP() { return getToken(DB2zSQLParser.KEEP, 0); }
		public TerminalNode KEY() { return getToken(DB2zSQLParser.KEY, 0); }
		public TerminalNode LABEL() { return getToken(DB2zSQLParser.LABEL, 0); }
		public TerminalNode LANGUAGE() { return getToken(DB2zSQLParser.LANGUAGE, 0); }
		public TerminalNode LAST() { return getToken(DB2zSQLParser.LAST, 0); }
		public TerminalNode LC_CTYPE() { return getToken(DB2zSQLParser.LC_CTYPE, 0); }
		public TerminalNode LEAVE() { return getToken(DB2zSQLParser.LEAVE, 0); }
		public TerminalNode LEFT() { return getToken(DB2zSQLParser.LEFT, 0); }
		public TerminalNode LIKE() { return getToken(DB2zSQLParser.LIKE, 0); }
		public TerminalNode LIMIT() { return getToken(DB2zSQLParser.LIMIT, 0); }
		public TerminalNode LOCAL() { return getToken(DB2zSQLParser.LOCAL, 0); }
		public TerminalNode LOCALE() { return getToken(DB2zSQLParser.LOCALE, 0); }
		public TerminalNode LOCATOR() { return getToken(DB2zSQLParser.LOCATOR, 0); }
		public TerminalNode LOCATORS() { return getToken(DB2zSQLParser.LOCATORS, 0); }
		public TerminalNode LOCK() { return getToken(DB2zSQLParser.LOCK, 0); }
		public TerminalNode LOCKMAX() { return getToken(DB2zSQLParser.LOCKMAX, 0); }
		public TerminalNode LOCKSIZE() { return getToken(DB2zSQLParser.LOCKSIZE, 0); }
		public TerminalNode LONG() { return getToken(DB2zSQLParser.LONG, 0); }
		public TerminalNode LOOP() { return getToken(DB2zSQLParser.LOOP, 0); }
		public TerminalNode MAINTAINED() { return getToken(DB2zSQLParser.MAINTAINED, 0); }
		public TerminalNode MATERIALIZED() { return getToken(DB2zSQLParser.MATERIALIZED, 0); }
		public TerminalNode MICROSECOND() { return getToken(DB2zSQLParser.MICROSECOND, 0); }
		public TerminalNode MICROSECONDS() { return getToken(DB2zSQLParser.MICROSECONDS, 0); }
		public TerminalNode MINUTE() { return getToken(DB2zSQLParser.MINUTE, 0); }
		public TerminalNode MINUTES() { return getToken(DB2zSQLParser.MINUTES, 0); }
		public TerminalNode MODIFIES() { return getToken(DB2zSQLParser.MODIFIES, 0); }
		public TerminalNode MONTH() { return getToken(DB2zSQLParser.MONTH, 0); }
		public TerminalNode MONTHS() { return getToken(DB2zSQLParser.MONTHS, 0); }
		public TerminalNode NEXT() { return getToken(DB2zSQLParser.NEXT, 0); }
		public TerminalNode NEXTVAL() { return getToken(DB2zSQLParser.NEXTVAL, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode NONE() { return getToken(DB2zSQLParser.NONE, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public TerminalNode NULLS() { return getToken(DB2zSQLParser.NULLS, 0); }
		public TerminalNode NUMPARTS() { return getToken(DB2zSQLParser.NUMPARTS, 0); }
		public TerminalNode OBID() { return getToken(DB2zSQLParser.OBID, 0); }
		public TerminalNode OF() { return getToken(DB2zSQLParser.OF, 0); }
		public TerminalNode OFFSET() { return getToken(DB2zSQLParser.OFFSET, 0); }
		public TerminalNode OLD() { return getToken(DB2zSQLParser.OLD, 0); }
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public TerminalNode OPEN() { return getToken(DB2zSQLParser.OPEN, 0); }
		public TerminalNode OPTIMIZATION() { return getToken(DB2zSQLParser.OPTIMIZATION, 0); }
		public TerminalNode OPTIMIZE() { return getToken(DB2zSQLParser.OPTIMIZE, 0); }
		public TerminalNode OR() { return getToken(DB2zSQLParser.OR, 0); }
		public TerminalNode ORDER() { return getToken(DB2zSQLParser.ORDER, 0); }
		public TerminalNode ORGANIZATION() { return getToken(DB2zSQLParser.ORGANIZATION, 0); }
		public TerminalNode OUT() { return getToken(DB2zSQLParser.OUT, 0); }
		public TerminalNode OUTER() { return getToken(DB2zSQLParser.OUTER, 0); }
		public TerminalNode PACKAGE() { return getToken(DB2zSQLParser.PACKAGE, 0); }
		public TerminalNode PADDED() { return getToken(DB2zSQLParser.PADDED, 0); }
		public TerminalNode PARAMETER() { return getToken(DB2zSQLParser.PARAMETER, 0); }
		public TerminalNode PART() { return getToken(DB2zSQLParser.PART, 0); }
		public TerminalNode PARTITION() { return getToken(DB2zSQLParser.PARTITION, 0); }
		public TerminalNode PARTITIONED() { return getToken(DB2zSQLParser.PARTITIONED, 0); }
		public TerminalNode PARTITIONING() { return getToken(DB2zSQLParser.PARTITIONING, 0); }
		public TerminalNode PATH() { return getToken(DB2zSQLParser.PATH, 0); }
		public TerminalNode PERIOD() { return getToken(DB2zSQLParser.PERIOD, 0); }
		public TerminalNode PIECESIZE() { return getToken(DB2zSQLParser.PIECESIZE, 0); }
		public TerminalNode PLAN() { return getToken(DB2zSQLParser.PLAN, 0); }
		public TerminalNode PRECISION() { return getToken(DB2zSQLParser.PRECISION, 0); }
		public TerminalNode PREPARE() { return getToken(DB2zSQLParser.PREPARE, 0); }
		public TerminalNode PREVVAL() { return getToken(DB2zSQLParser.PREVVAL, 0); }
		public TerminalNode PRIOR() { return getToken(DB2zSQLParser.PRIOR, 0); }
		public TerminalNode PRIQTY() { return getToken(DB2zSQLParser.PRIQTY, 0); }
		public TerminalNode PRIVILEGES() { return getToken(DB2zSQLParser.PRIVILEGES, 0); }
		public TerminalNode PROCEDURE() { return getToken(DB2zSQLParser.PROCEDURE, 0); }
		public TerminalNode PROGRAM() { return getToken(DB2zSQLParser.PROGRAM, 0); }
		public TerminalNode PSID() { return getToken(DB2zSQLParser.PSID, 0); }
		public TerminalNode PUBLIC() { return getToken(DB2zSQLParser.PUBLIC, 0); }
		public TerminalNode QUERY() { return getToken(DB2zSQLParser.QUERY, 0); }
		public TerminalNode QUERYNO() { return getToken(DB2zSQLParser.QUERYNO, 0); }
		public TerminalNode READS() { return getToken(DB2zSQLParser.READS, 0); }
		public TerminalNode REFERENCES() { return getToken(DB2zSQLParser.REFERENCES, 0); }
		public TerminalNode REFRESH() { return getToken(DB2zSQLParser.REFRESH, 0); }
		public TerminalNode RELEASE() { return getToken(DB2zSQLParser.RELEASE, 0); }
		public TerminalNode RENAME() { return getToken(DB2zSQLParser.RENAME, 0); }
		public TerminalNode REPEAT() { return getToken(DB2zSQLParser.REPEAT, 0); }
		public TerminalNode RESIGNAL() { return getToken(DB2zSQLParser.RESIGNAL, 0); }
		public TerminalNode RESTRICT() { return getToken(DB2zSQLParser.RESTRICT, 0); }
		public TerminalNode RESULT() { return getToken(DB2zSQLParser.RESULT, 0); }
		public TerminalNode RESULT_SET_LOCATOR() { return getToken(DB2zSQLParser.RESULT_SET_LOCATOR, 0); }
		public TerminalNode RETURN() { return getToken(DB2zSQLParser.RETURN, 0); }
		public TerminalNode RETURNS() { return getToken(DB2zSQLParser.RETURNS, 0); }
		public TerminalNode REVOKE() { return getToken(DB2zSQLParser.REVOKE, 0); }
		public TerminalNode RIGHT() { return getToken(DB2zSQLParser.RIGHT, 0); }
		public TerminalNode ROLE() { return getToken(DB2zSQLParser.ROLE, 0); }
		public TerminalNode ROLLBACK() { return getToken(DB2zSQLParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(DB2zSQLParser.ROLLUP, 0); }
		public TerminalNode ROUND_CEILING() { return getToken(DB2zSQLParser.ROUND_CEILING, 0); }
		public TerminalNode ROUND_DOWN() { return getToken(DB2zSQLParser.ROUND_DOWN, 0); }
		public TerminalNode ROUND_FLOOR() { return getToken(DB2zSQLParser.ROUND_FLOOR, 0); }
		public TerminalNode ROUND_HALF_DOWN() { return getToken(DB2zSQLParser.ROUND_HALF_DOWN, 0); }
		public TerminalNode ROUND_HALF_EVEN() { return getToken(DB2zSQLParser.ROUND_HALF_EVEN, 0); }
		public TerminalNode ROUND_HALF_UP() { return getToken(DB2zSQLParser.ROUND_HALF_UP, 0); }
		public TerminalNode ROUND_UP() { return getToken(DB2zSQLParser.ROUND_UP, 0); }
		public TerminalNode ROW() { return getToken(DB2zSQLParser.ROW, 0); }
		public TerminalNode ROWSET() { return getToken(DB2zSQLParser.ROWSET, 0); }
		public TerminalNode RUN() { return getToken(DB2zSQLParser.RUN, 0); }
		public TerminalNode SAVEPOINT() { return getToken(DB2zSQLParser.SAVEPOINT, 0); }
		public TerminalNode SCHEMA() { return getToken(DB2zSQLParser.SCHEMA, 0); }
		public TerminalNode SCRATCHPAD() { return getToken(DB2zSQLParser.SCRATCHPAD, 0); }
		public TerminalNode SECOND() { return getToken(DB2zSQLParser.SECOND, 0); }
		public TerminalNode SECONDS() { return getToken(DB2zSQLParser.SECONDS, 0); }
		public TerminalNode SECQTY() { return getToken(DB2zSQLParser.SECQTY, 0); }
		public TerminalNode SECURITY() { return getToken(DB2zSQLParser.SECURITY, 0); }
		public TerminalNode SELECT() { return getToken(DB2zSQLParser.SELECT, 0); }
		public TerminalNode SENSITIVE() { return getToken(DB2zSQLParser.SENSITIVE, 0); }
		public TerminalNode SEQUENCE() { return getToken(DB2zSQLParser.SEQUENCE, 0); }
		public TerminalNode SESSION_USER() { return getToken(DB2zSQLParser.SESSION_USER, 0); }
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public TerminalNode SIGNAL() { return getToken(DB2zSQLParser.SIGNAL, 0); }
		public TerminalNode SIMPLE() { return getToken(DB2zSQLParser.SIMPLE, 0); }
		public TerminalNode SOME() { return getToken(DB2zSQLParser.SOME, 0); }
		public TerminalNode SOURCE() { return getToken(DB2zSQLParser.SOURCE, 0); }
		public TerminalNode SPECIFIC() { return getToken(DB2zSQLParser.SPECIFIC, 0); }
		public TerminalNode STANDARD() { return getToken(DB2zSQLParser.STANDARD, 0); }
		public TerminalNode STATEMENT() { return getToken(DB2zSQLParser.STATEMENT, 0); }
		public TerminalNode STATIC() { return getToken(DB2zSQLParser.STATIC, 0); }
		public TerminalNode STAY() { return getToken(DB2zSQLParser.STAY, 0); }
		public TerminalNode STOGROUP() { return getToken(DB2zSQLParser.STOGROUP, 0); }
		public TerminalNode STORES() { return getToken(DB2zSQLParser.STORES, 0); }
		public TerminalNode STYLE() { return getToken(DB2zSQLParser.STYLE, 0); }
		public TerminalNode SUMMARY() { return getToken(DB2zSQLParser.SUMMARY, 0); }
		public TerminalNode SYNONYM() { return getToken(DB2zSQLParser.SYNONYM, 0); }
		public TerminalNode SYSDATE() { return getToken(DB2zSQLParser.SYSDATE, 0); }
		public TerminalNode SYSTEM() { return getToken(DB2zSQLParser.SYSTEM, 0); }
		public TerminalNode SYSTIMESTAMP() { return getToken(DB2zSQLParser.SYSTIMESTAMP, 0); }
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public TerminalNode TABLESPACE() { return getToken(DB2zSQLParser.TABLESPACE, 0); }
		public TerminalNode THEN() { return getToken(DB2zSQLParser.THEN, 0); }
		public TerminalNode TO() { return getToken(DB2zSQLParser.TO, 0); }
		public TerminalNode TRIGGER() { return getToken(DB2zSQLParser.TRIGGER, 0); }
		public TerminalNode TRUNCATE() { return getToken(DB2zSQLParser.TRUNCATE, 0); }
		public TerminalNode TYPE() { return getToken(DB2zSQLParser.TYPE, 0); }
		public TerminalNode UNDO() { return getToken(DB2zSQLParser.UNDO, 0); }
		public TerminalNode UNION() { return getToken(DB2zSQLParser.UNION, 0); }
		public TerminalNode UNIQUE() { return getToken(DB2zSQLParser.UNIQUE, 0); }
		public TerminalNode UNTIL() { return getToken(DB2zSQLParser.UNTIL, 0); }
		public TerminalNode UPDATE() { return getToken(DB2zSQLParser.UPDATE, 0); }
		public TerminalNode USER() { return getToken(DB2zSQLParser.USER, 0); }
		public TerminalNode USING() { return getToken(DB2zSQLParser.USING, 0); }
		public TerminalNode VALIDPROC() { return getToken(DB2zSQLParser.VALIDPROC, 0); }
		public TerminalNode VALUE() { return getToken(DB2zSQLParser.VALUE, 0); }
		public TerminalNode VALUES() { return getToken(DB2zSQLParser.VALUES, 0); }
		public TerminalNode VARIABLE() { return getToken(DB2zSQLParser.VARIABLE, 0); }
		public TerminalNode VARIANT() { return getToken(DB2zSQLParser.VARIANT, 0); }
		public TerminalNode VCAT() { return getToken(DB2zSQLParser.VCAT, 0); }
		public TerminalNode VERSIONING() { return getToken(DB2zSQLParser.VERSIONING, 0); }
		public TerminalNode VIEW() { return getToken(DB2zSQLParser.VIEW, 0); }
		public TerminalNode VOLATILE() { return getToken(DB2zSQLParser.VOLATILE, 0); }
		public TerminalNode VOLUMES() { return getToken(DB2zSQLParser.VOLUMES, 0); }
		public TerminalNode WHEN() { return getToken(DB2zSQLParser.WHEN, 0); }
		public TerminalNode WHENEVER() { return getToken(DB2zSQLParser.WHENEVER, 0); }
		public TerminalNode WHERE() { return getToken(DB2zSQLParser.WHERE, 0); }
		public TerminalNode WHILE() { return getToken(DB2zSQLParser.WHILE, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode WLM() { return getToken(DB2zSQLParser.WLM, 0); }
		public TerminalNode XMLCAST() { return getToken(DB2zSQLParser.XMLCAST, 0); }
		public TerminalNode XMLEXISTS() { return getToken(DB2zSQLParser.XMLEXISTS, 0); }
		public TerminalNode XMLNAMESPACES() { return getToken(DB2zSQLParser.XMLNAMESPACES, 0); }
		public TerminalNode YEAR() { return getToken(DB2zSQLParser.YEAR, 0); }
		public TerminalNode YEARS() { return getToken(DB2zSQLParser.YEARS, 0); }
		public TerminalNode ZONE() { return getToken(DB2zSQLParser.ZONE, 0); }
		public TerminalNode AND() { return getToken(DB2zSQLParser.AND, 0); }
		public TerminalNode ARRAY_AGG() { return getToken(DB2zSQLParser.ARRAY_AGG, 0); }
		public TerminalNode ASC() { return getToken(DB2zSQLParser.ASC, 0); }
		public TerminalNode AVG() { return getToken(DB2zSQLParser.AVG, 0); }
		public TerminalNode BIT() { return getToken(DB2zSQLParser.BIT, 0); }
		public TerminalNode CHANGE() { return getToken(DB2zSQLParser.CHANGE, 0); }
		public TerminalNode CODEUNITS16() { return getToken(DB2zSQLParser.CODEUNITS16, 0); }
		public TerminalNode CODEUNITS32() { return getToken(DB2zSQLParser.CODEUNITS32, 0); }
		public TerminalNode CORR() { return getToken(DB2zSQLParser.CORR, 0); }
		public TerminalNode CORRELATION() { return getToken(DB2zSQLParser.CORRELATION, 0); }
		public TerminalNode COVAR() { return getToken(DB2zSQLParser.COVAR, 0); }
		public TerminalNode COVARIANCE() { return getToken(DB2zSQLParser.COVARIANCE, 0); }
		public TerminalNode COVARIANCE_SAMP() { return getToken(DB2zSQLParser.COVARIANCE_SAMP, 0); }
		public TerminalNode COVAR_POP() { return getToken(DB2zSQLParser.COVAR_POP, 0); }
		public TerminalNode COVAR_SAMP() { return getToken(DB2zSQLParser.COVAR_SAMP, 0); }
		public TerminalNode CS() { return getToken(DB2zSQLParser.CS, 0); }
		public TerminalNode CUME_DIST() { return getToken(DB2zSQLParser.CUME_DIST, 0); }
		public TerminalNode DENSE_RANK() { return getToken(DB2zSQLParser.DENSE_RANK, 0); }
		public TerminalNode DESC() { return getToken(DB2zSQLParser.DESC, 0); }
		public TerminalNode EBCDIC() { return getToken(DB2zSQLParser.EBCDIC, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(DB2zSQLParser.EXCLUSIVE, 0); }
		public TerminalNode FIRST_VALUE() { return getToken(DB2zSQLParser.FIRST_VALUE, 0); }
		public TerminalNode FOLLOWING() { return getToken(DB2zSQLParser.FOLLOWING, 0); }
		public TerminalNode GROUPING() { return getToken(DB2zSQLParser.GROUPING, 0); }
		public TerminalNode IGNORE() { return getToken(DB2zSQLParser.IGNORE, 0); }
		public TerminalNode INDICATOR() { return getToken(DB2zSQLParser.INDICATOR, 0); }
		public TerminalNode INPUT() { return getToken(DB2zSQLParser.INPUT, 0); }
		public TerminalNode ISNULL() { return getToken(DB2zSQLParser.ISNULL, 0); }
		public TerminalNode LAG() { return getToken(DB2zSQLParser.LAG, 0); }
		public TerminalNode LARGE() { return getToken(DB2zSQLParser.LARGE, 0); }
		public TerminalNode LAST_VALUE() { return getToken(DB2zSQLParser.LAST_VALUE, 0); }
		public TerminalNode LEAD() { return getToken(DB2zSQLParser.LEAD, 0); }
		public TerminalNode LISTAGG() { return getToken(DB2zSQLParser.LISTAGG, 0); }
		public TerminalNode LOCKED() { return getToken(DB2zSQLParser.LOCKED, 0); }
		public TerminalNode LOCKS() { return getToken(DB2zSQLParser.LOCKS, 0); }
		public TerminalNode MEDIAN() { return getToken(DB2zSQLParser.MEDIAN, 0); }
		public TerminalNode MIXED() { return getToken(DB2zSQLParser.MIXED, 0); }
		public TerminalNode NOTNULL() { return getToken(DB2zSQLParser.NOTNULL, 0); }
		public TerminalNode NTH_VALUE() { return getToken(DB2zSQLParser.NTH_VALUE, 0); }
		public TerminalNode NTILE() { return getToken(DB2zSQLParser.NTILE, 0); }
		public TerminalNode NUMERIC() { return getToken(DB2zSQLParser.NUMERIC, 0); }
		public TerminalNode OBJECT() { return getToken(DB2zSQLParser.OBJECT, 0); }
		public TerminalNode OCTETS() { return getToken(DB2zSQLParser.OCTETS, 0); }
		public TerminalNode ONLY() { return getToken(DB2zSQLParser.ONLY, 0); }
		public TerminalNode OVER() { return getToken(DB2zSQLParser.OVER, 0); }
		public TerminalNode PASSING() { return getToken(DB2zSQLParser.PASSING, 0); }
		public TerminalNode PERCENTILE_CONT() { return getToken(DB2zSQLParser.PERCENTILE_CONT, 0); }
		public TerminalNode PERCENTILE_DISC() { return getToken(DB2zSQLParser.PERCENTILE_DISC, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(DB2zSQLParser.PERCENT_RANK, 0); }
		public TerminalNode PRECEDING() { return getToken(DB2zSQLParser.PRECEDING, 0); }
		public TerminalNode PREVIOUS() { return getToken(DB2zSQLParser.PREVIOUS, 0); }
		public TerminalNode RANGE() { return getToken(DB2zSQLParser.RANGE, 0); }
		public TerminalNode RANK() { return getToken(DB2zSQLParser.RANK, 0); }
		public TerminalNode RATIO_TO_REPORT() { return getToken(DB2zSQLParser.RATIO_TO_REPORT, 0); }
		public TerminalNode READ() { return getToken(DB2zSQLParser.READ, 0); }
		public TerminalNode REF() { return getToken(DB2zSQLParser.REF, 0); }
		public TerminalNode REGR_AVGX() { return getToken(DB2zSQLParser.REGR_AVGX, 0); }
		public TerminalNode REGR_AVGY() { return getToken(DB2zSQLParser.REGR_AVGY, 0); }
		public TerminalNode REGR_COUNT() { return getToken(DB2zSQLParser.REGR_COUNT, 0); }
		public TerminalNode REGR_ICPT() { return getToken(DB2zSQLParser.REGR_ICPT, 0); }
		public TerminalNode REGR_INTERCEPT() { return getToken(DB2zSQLParser.REGR_INTERCEPT, 0); }
		public TerminalNode REGR_R2() { return getToken(DB2zSQLParser.REGR_R2, 0); }
		public TerminalNode REGR_SLOPE() { return getToken(DB2zSQLParser.REGR_SLOPE, 0); }
		public TerminalNode REGR_SXX() { return getToken(DB2zSQLParser.REGR_SXX, 0); }
		public TerminalNode REGR_SXY() { return getToken(DB2zSQLParser.REGR_SXY, 0); }
		public TerminalNode REGR_SYY() { return getToken(DB2zSQLParser.REGR_SYY, 0); }
		public TerminalNode RESPECT() { return getToken(DB2zSQLParser.RESPECT, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(DB2zSQLParser.ROW_NUMBER, 0); }
		public TerminalNode ROWS() { return getToken(DB2zSQLParser.ROWS, 0); }
		public TerminalNode RR() { return getToken(DB2zSQLParser.RR, 0); }
		public TerminalNode RS() { return getToken(DB2zSQLParser.RS, 0); }
		public TerminalNode SBCS() { return getToken(DB2zSQLParser.SBCS, 0); }
		public TerminalNode SELECTIVITY() { return getToken(DB2zSQLParser.SELECTIVITY, 0); }
		public TerminalNode SETS() { return getToken(DB2zSQLParser.SETS, 0); }
		public TerminalNode SHARE() { return getToken(DB2zSQLParser.SHARE, 0); }
		public TerminalNode SKIP_() { return getToken(DB2zSQLParser.SKIP_, 0); }
		public TerminalNode STDDEV() { return getToken(DB2zSQLParser.STDDEV, 0); }
		public TerminalNode STDDEV_POP() { return getToken(DB2zSQLParser.STDDEV_POP, 0); }
		public TerminalNode STDDEV_SAMP() { return getToken(DB2zSQLParser.STDDEV_SAMP, 0); }
		public TerminalNode SUM() { return getToken(DB2zSQLParser.SUM, 0); }
		public TerminalNode TOKEN() { return getToken(DB2zSQLParser.TOKEN, 0); }
		public TerminalNode UNBOUNDED() { return getToken(DB2zSQLParser.UNBOUNDED, 0); }
		public TerminalNode UNPACK() { return getToken(DB2zSQLParser.UNPACK, 0); }
		public TerminalNode UR() { return getToken(DB2zSQLParser.UR, 0); }
		public TerminalNode USE() { return getToken(DB2zSQLParser.USE, 0); }
		public TerminalNode VAR() { return getToken(DB2zSQLParser.VAR, 0); }
		public TerminalNode VARIANCE() { return getToken(DB2zSQLParser.VARIANCE, 0); }
		public TerminalNode VARIANCE_SAMP() { return getToken(DB2zSQLParser.VARIANCE_SAMP, 0); }
		public TerminalNode VAR_POP() { return getToken(DB2zSQLParser.VAR_POP, 0); }
		public TerminalNode VAR_SAMP() { return getToken(DB2zSQLParser.VAR_SAMP, 0); }
		public TerminalNode VARYING() { return getToken(DB2zSQLParser.VARYING, 0); }
		public TerminalNode WITHOUT() { return getToken(DB2zSQLParser.WITHOUT, 0); }
		public TerminalNode XML() { return getToken(DB2zSQLParser.XML, 0); }
		public TerminalNode XMLAGG() { return getToken(DB2zSQLParser.XMLAGG, 0); }
		public TerminalNode COLUMNS() { return getToken(DB2zSQLParser.COLUMNS, 0); }
		public TerminalNode SQLID() { return getToken(DB2zSQLParser.SQLID, 0); }
		public TerminalNode ORDINALITY() { return getToken(DB2zSQLParser.ORDINALITY, 0); }
		public TerminalNode SYSTEM_TIME() { return getToken(DB2zSQLParser.SYSTEM_TIME, 0); }
		public TerminalNode BUSINESS_TIME() { return getToken(DB2zSQLParser.BUSINESS_TIME, 0); }
		public TerminalNode MULTIPLIER() { return getToken(DB2zSQLParser.MULTIPLIER, 0); }
		public TerminalNode UNNEST() { return getToken(DB2zSQLParser.UNNEST, 0); }
		public TerminalNode CROSS() { return getToken(DB2zSQLParser.CROSS, 0); }
		public TerminalNode CALLER() { return getToken(DB2zSQLParser.CALLER, 0); }
		public TerminalNode CLIENT() { return getToken(DB2zSQLParser.CLIENT, 0); }
		public TerminalNode POSITIONING() { return getToken(DB2zSQLParser.POSITIONING, 0); }
		public TerminalNode SCROLL() { return getToken(DB2zSQLParser.SCROLL, 0); }
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode INDEXBP() { return getToken(DB2zSQLParser.INDEXBP, 0); }
		public TerminalNode ACTION() { return getToken(DB2zSQLParser.ACTION, 0); }
		public TerminalNode ASSEMBLE() { return getToken(DB2zSQLParser.ASSEMBLE, 0); }
		public TerminalNode C_() { return getToken(DB2zSQLParser.C_, 0); }
		public TerminalNode CALLED() { return getToken(DB2zSQLParser.CALLED, 0); }
		public TerminalNode COBOL() { return getToken(DB2zSQLParser.COBOL, 0); }
		public TerminalNode DB2() { return getToken(DB2zSQLParser.DB2, 0); }
		public TerminalNode DEFINER() { return getToken(DB2zSQLParser.DEFINER, 0); }
		public TerminalNode DISPATCH() { return getToken(DB2zSQLParser.DISPATCH, 0); }
		public TerminalNode ENVIRONMENT() { return getToken(DB2zSQLParser.ENVIRONMENT, 0); }
		public TerminalNode FAILURE() { return getToken(DB2zSQLParser.FAILURE, 0); }
		public TerminalNode FAILURES() { return getToken(DB2zSQLParser.FAILURES, 0); }
		public TerminalNode JAVA() { return getToken(DB2zSQLParser.JAVA, 0); }
		public TerminalNode MAIN() { return getToken(DB2zSQLParser.MAIN, 0); }
		public TerminalNode NAME() { return getToken(DB2zSQLParser.NAME, 0); }
		public TerminalNode OPTIONS() { return getToken(DB2zSQLParser.OPTIONS, 0); }
		public TerminalNode PARALLEL() { return getToken(DB2zSQLParser.PARALLEL, 0); }
		public TerminalNode PLI() { return getToken(DB2zSQLParser.PLI, 0); }
		public TerminalNode REGISTERS() { return getToken(DB2zSQLParser.REGISTERS, 0); }
		public TerminalNode RESIDENT() { return getToken(DB2zSQLParser.RESIDENT, 0); }
		public TerminalNode SECURED() { return getToken(DB2zSQLParser.SECURED, 0); }
		public TerminalNode SPECIAL() { return getToken(DB2zSQLParser.SPECIAL, 0); }
		public TerminalNode SQL() { return getToken(DB2zSQLParser.SQL, 0); }
		public TerminalNode STOP() { return getToken(DB2zSQLParser.STOP, 0); }
		public TerminalNode SUB() { return getToken(DB2zSQLParser.SUB, 0); }
		public TerminalNode YES() { return getToken(DB2zSQLParser.YES, 0); }
		public TerminalNode APPLICATION() { return getToken(DB2zSQLParser.APPLICATION, 0); }
		public TerminalNode CHANGED() { return getToken(DB2zSQLParser.CHANGED, 0); }
		public TerminalNode COMPATIBILITY() { return getToken(DB2zSQLParser.COMPATIBILITY, 0); }
		public TerminalNode COMPRESS() { return getToken(DB2zSQLParser.COMPRESS, 0); }
		public TerminalNode COPY() { return getToken(DB2zSQLParser.COPY, 0); }
		public TerminalNode FREEPAGE() { return getToken(DB2zSQLParser.FREEPAGE, 0); }
		public TerminalNode GBPCACHE() { return getToken(DB2zSQLParser.GBPCACHE, 0); }
		public TerminalNode INCLUDE() { return getToken(DB2zSQLParser.INCLUDE, 0); }
		public TerminalNode MAXVALUE() { return getToken(DB2zSQLParser.MAXVALUE, 0); }
		public TerminalNode MINVALUE() { return getToken(DB2zSQLParser.MINVALUE, 0); }
		public TerminalNode PCTFREE() { return getToken(DB2zSQLParser.PCTFREE, 0); }
		public TerminalNode REGENERATE() { return getToken(DB2zSQLParser.REGENERATE, 0); }
		public TerminalNode SEQTY() { return getToken(DB2zSQLParser.SEQTY, 0); }
		public TerminalNode MASK() { return getToken(DB2zSQLParser.MASK, 0); }
		public TerminalNode ENABLE() { return getToken(DB2zSQLParser.ENABLE, 0); }
		public TerminalNode PERMISSION() { return getToken(DB2zSQLParser.PERMISSION, 0); }
		public TerminalNode ATOMIC() { return getToken(DB2zSQLParser.ATOMIC, 0); }
		public TerminalNode SQLEXCEPTION() { return getToken(DB2zSQLParser.SQLEXCEPTION, 0); }
		public TerminalNode MERGE() { return getToken(DB2zSQLParser.MERGE, 0); }
		public TerminalNode MATCHED() { return getToken(DB2zSQLParser.MATCHED, 0); }
		public TerminalNode SQLSTATE() { return getToken(DB2zSQLParser.SQLSTATE, 0); }
		public TerminalNode MESSAGE_TEXT() { return getToken(DB2zSQLParser.MESSAGE_TEXT, 0); }
		public TerminalNode OVERRIDING() { return getToken(DB2zSQLParser.OVERRIDING, 0); }
		public TerminalNode PORTION() { return getToken(DB2zSQLParser.PORTION, 0); }
		public TerminalNode DB2SQL() { return getToken(DB2zSQLParser.DB2SQL, 0); }
		public TerminalNode DEBUG() { return getToken(DB2zSQLParser.DEBUG, 0); }
		public TerminalNode GENERAL() { return getToken(DB2zSQLParser.GENERAL, 0); }
		public TerminalNode MODE_() { return getToken(DB2zSQLParser.MODE_, 0); }
		public TerminalNode REXX() { return getToken(DB2zSQLParser.REXX, 0); }
		public TerminalNode CACHE() { return getToken(DB2zSQLParser.CACHE, 0); }
		public TerminalNode CYCLE() { return getToken(DB2zSQLParser.CYCLE, 0); }
		public TerminalNode INCREMENT() { return getToken(DB2zSQLParser.INCREMENT, 0); }
		public TerminalNode RESTART() { return getToken(DB2zSQLParser.RESTART, 0); }
		public TerminalNode DATACLAS() { return getToken(DB2zSQLParser.DATACLAS, 0); }
		public TerminalNode MGMTCLAS() { return getToken(DB2zSQLParser.MGMTCLAS, 0); }
		public TerminalNode REMOVE() { return getToken(DB2zSQLParser.REMOVE, 0); }
		public TerminalNode STORCLAS() { return getToken(DB2zSQLParser.STORCLAS, 0); }
		public TerminalNode ACCESS() { return getToken(DB2zSQLParser.ACCESS, 0); }
		public TerminalNode ACTIVATE() { return getToken(DB2zSQLParser.ACTIVATE, 0); }
		public TerminalNode ALWAYS() { return getToken(DB2zSQLParser.ALWAYS, 0); }
		public TerminalNode APPEND() { return getToken(DB2zSQLParser.APPEND, 0); }
		public TerminalNode ARCHIVE() { return getToken(DB2zSQLParser.ARCHIVE, 0); }
		public TerminalNode BUSINESS() { return getToken(DB2zSQLParser.BUSINESS, 0); }
		public TerminalNode CASCADE() { return getToken(DB2zSQLParser.CASCADE, 0); }
		public TerminalNode CHANGES() { return getToken(DB2zSQLParser.CHANGES, 0); }
		public TerminalNode CONTROL() { return getToken(DB2zSQLParser.CONTROL, 0); }
		public TerminalNode DEACTIVATE() { return getToken(DB2zSQLParser.DEACTIVATE, 0); }
		public TerminalNode DEFERRED() { return getToken(DB2zSQLParser.DEFERRED, 0); }
		public TerminalNode EACH() { return getToken(DB2zSQLParser.EACH, 0); }
		public TerminalNode ENFORCED() { return getToken(DB2zSQLParser.ENFORCED, 0); }
		public TerminalNode EXTRA() { return getToken(DB2zSQLParser.EXTRA, 0); }
		public TerminalNode FOREIGN() { return getToken(DB2zSQLParser.FOREIGN, 0); }
		public TerminalNode HIDDEN_() { return getToken(DB2zSQLParser.HIDDEN_, 0); }
		public TerminalNode HISTORY() { return getToken(DB2zSQLParser.HISTORY, 0); }
		public TerminalNode ID() { return getToken(DB2zSQLParser.ID, 0); }
		public TerminalNode IDENTITY() { return getToken(DB2zSQLParser.IDENTITY, 0); }
		public TerminalNode IMPLICITLY() { return getToken(DB2zSQLParser.IMPLICITLY, 0); }
		public TerminalNode INITIALLY() { return getToken(DB2zSQLParser.INITIALLY, 0); }
		public TerminalNode INLINE() { return getToken(DB2zSQLParser.INLINE, 0); }
		public TerminalNode OPERATION() { return getToken(DB2zSQLParser.OPERATION, 0); }
		public TerminalNode ORGANIZE() { return getToken(DB2zSQLParser.ORGANIZE, 0); }
		public TerminalNode OVERLAPS() { return getToken(DB2zSQLParser.OVERLAPS, 0); }
		public TerminalNode PACKAGE_NAME() { return getToken(DB2zSQLParser.PACKAGE_NAME, 0); }
		public TerminalNode PACKAGE_SCHEMA() { return getToken(DB2zSQLParser.PACKAGE_SCHEMA, 0); }
		public TerminalNode PACKAGE_VERSION() { return getToken(DB2zSQLParser.PACKAGE_VERSION, 0); }
		public TerminalNode PRIMARY() { return getToken(DB2zSQLParser.PRIMARY, 0); }
		public TerminalNode RESET() { return getToken(DB2zSQLParser.RESET, 0); }
		public TerminalNode ROTATE() { return getToken(DB2zSQLParser.ROTATE, 0); }
		public TerminalNode START() { return getToken(DB2zSQLParser.START, 0); }
		public TerminalNode SYSIBM() { return getToken(DB2zSQLParser.SYSIBM, 0); }
		public TerminalNode TRANSACTION() { return getToken(DB2zSQLParser.TRANSACTION, 0); }
		public SqlKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSqlKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSqlKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSqlKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SqlKeywordContext sqlKeyword() throws RecognitionException {
		SqlKeywordContext _localctx = new SqlKeywordContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_sqlKeyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4651);
			_la = _input.LA(1);
			if ( !(((((_la - 29)) & ~0x3f) == 0 && ((1L << (_la - 29)) & ((1L << (ADD - 29)) | (1L << (AFTER - 29)) | (1L << (ALL - 29)) | (1L << (ALLOCATE - 29)) | (1L << (ALLOW - 29)) | (1L << (ALTER - 29)) | (1L << (ALTERAND - 29)) | (1L << (ANY - 29)) | (1L << (ARRAY - 29)) | (1L << (ARRAY_EXISTS - 29)) | (1L << (AS - 29)) | (1L << (ASENSITIVE - 29)) | (1L << (ASSOCIATE - 29)) | (1L << (ASUTIME - 29)) | (1L << (AT - 29)) | (1L << (AUDIT - 29)) | (1L << (AUX - 29)) | (1L << (AUXILIARY - 29)) | (1L << (BEFORE - 29)) | (1L << (BEGIN - 29)) | (1L << (BETWEEN - 29)) | (1L << (BUFFERPOOL - 29)) | (1L << (BY - 29)) | (1L << (CALL - 29)) | (1L << (CAPTURE - 29)) | (1L << (CASCADED - 29)) | (1L << (CASE - 29)) | (1L << (CAST - 29)) | (1L << (CCSID - 29)) | (1L << (CHAR - 29)) | (1L << (CHARACTER - 29)) | (1L << (CHECK - 29)) | (1L << (CLONE - 29)) | (1L << (CLOSE - 29)) | (1L << (CLUSTER - 29)) | (1L << (COLLECTION - 29)) | (1L << (COLLID - 29)) | (1L << (COLUMN - 29)) | (1L << (COMMENT - 29)) | (1L << (COMMIT - 29)) | (1L << (CONCAT - 29)) | (1L << (CONDITION - 29)) | (1L << (CONNECT - 29)) | (1L << (CONNECTION - 29)) | (1L << (CONSTRAINT - 29)) | (1L << (CONTAINS - 29)) | (1L << (CONTENT - 29)) | (1L << (CONTINUE - 29)) | (1L << (CREATE - 29)) | (1L << (CUBE - 29)) | (1L << (CURRENT - 29)) | (1L << (CURRENT_LC_CTYPE - 29)) | (1L << (CURRVAL - 29)) | (1L << (CURSOR - 29)) | (1L << (DATA - 29)) | (1L << (DATABASE - 29)) | (1L << (DAY - 29)) | (1L << (DAYS - 29)) | (1L << (DBINFO - 29)) | (1L << (DECLARE - 29)) | (1L << (DEFAULT - 29)) | (1L << (DELETE - 29)) | (1L << (DESCRIPTOR - 29)) | (1L << (DETERMINISTIC - 29)))) != 0) || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (DISABLE - 93)) | (1L << (DISALLOW - 93)) | (1L << (DISTINCT - 93)) | (1L << (DO - 93)) | (1L << (DOCUMENT - 93)) | (1L << (DOUBLE - 93)) | (1L << (DROP - 93)) | (1L << (DSSIZE - 93)) | (1L << (DYNAMIC - 93)) | (1L << (EDITPROC - 93)) | (1L << (ELSE - 93)) | (1L << (ELSEIF - 93)) | (1L << (ENCODING - 93)) | (1L << (ENCRYPTION - 93)) | (1L << (END - 93)) | (1L << (END_EXEC - 93)) | (1L << (ENDING - 93)) | (1L << (ERASE - 93)) | (1L << (ESCAPE - 93)) | (1L << (EXCEPT - 93)) | (1L << (EXCEPTION - 93)) | (1L << (EXEC_SQL - 93)) | (1L << (EXECUTE - 93)) | (1L << (EXISTS - 93)) | (1L << (EXIT - 93)) | (1L << (EXPLAIN - 93)) | (1L << (EXTERNAL - 93)) | (1L << (FENCED - 93)) | (1L << (FETCH - 93)) | (1L << (FIELDPROC - 93)) | (1L << (FINAL - 93)) | (1L << (FIRST - 93)) | (1L << (FOR - 93)) | (1L << (FREE - 93)) | (1L << (FROM - 93)) | (1L << (FULL - 93)) | (1L << (FUNCTION - 93)) | (1L << (GENERATED - 93)) | (1L << (GET - 93)) | (1L << (GLOBAL - 93)) | (1L << (GO - 93)) | (1L << (GOTO - 93)) | (1L << (GRANT - 93)) | (1L << (GROUP - 93)) | (1L << (HANDLER - 93)) | (1L << (HAVING - 93)) | (1L << (HOLD - 93)) | (1L << (HOUR - 93)) | (1L << (HOURS - 93)) | (1L << (IF - 93)) | (1L << (IMMEDIATE - 93)) | (1L << (IN - 93)) | (1L << (INCLUSIVE - 93)) | (1L << (INDEX - 93)) | (1L << (INDEXBP - 93)) | (1L << (INHERIT - 93)) | (1L << (INNER - 93)) | (1L << (INOUT - 93)) | (1L << (INSENSITIVE - 93)) | (1L << (INSERT - 93)) | (1L << (INTERSECT - 93)) | (1L << (INTO - 93)) | (1L << (IS - 93)) | (1L << (ISOBID - 93)))) != 0) || ((((_la - 157)) & ~0x3f) == 0 && ((1L << (_la - 157)) & ((1L << (ITERATE - 157)) | (1L << (JAR - 157)) | (1L << (JOIN - 157)) | (1L << (KEEP - 157)) | (1L << (KEY - 157)) | (1L << (LABEL - 157)) | (1L << (LANGUAGE - 157)) | (1L << (LAST - 157)) | (1L << (LC_CTYPE - 157)) | (1L << (LEAVE - 157)) | (1L << (LEFT - 157)) | (1L << (LIKE - 157)) | (1L << (LIMIT - 157)) | (1L << (LOCAL - 157)) | (1L << (LOCALE - 157)) | (1L << (LOCATOR - 157)) | (1L << (LOCATORS - 157)) | (1L << (LOCK - 157)) | (1L << (LOCKMAX - 157)) | (1L << (LOCKSIZE - 157)) | (1L << (LONG - 157)) | (1L << (LOOP - 157)) | (1L << (MAINTAINED - 157)) | (1L << (MATERIALIZED - 157)) | (1L << (MICROSECOND - 157)) | (1L << (MICROSECONDS - 157)) | (1L << (MODIFIES - 157)) | (1L << (MONTH - 157)) | (1L << (MONTHS - 157)) | (1L << (NEXT - 157)) | (1L << (NEXTVAL - 157)) | (1L << (NO - 157)) | (1L << (NONE - 157)) | (1L << (NOT - 157)) | (1L << (NULL - 157)) | (1L << (NULLS - 157)) | (1L << (NUMPARTS - 157)) | (1L << (OBID - 157)) | (1L << (OF - 157)) | (1L << (OFFSET - 157)) | (1L << (OLD - 157)) | (1L << (ON - 157)) | (1L << (OPEN - 157)) | (1L << (OPTIMIZATION - 157)) | (1L << (OPTIMIZE - 157)) | (1L << (OR - 157)) | (1L << (ORDER - 157)) | (1L << (ORGANIZATION - 157)) | (1L << (OUT - 157)) | (1L << (OUTER - 157)) | (1L << (PACKAGE - 157)) | (1L << (PADDED - 157)) | (1L << (PARAMETER - 157)) | (1L << (PART - 157)) | (1L << (PARTITION - 157)) | (1L << (PARTITIONED - 157)) | (1L << (PARTITIONING - 157)) | (1L << (PATH - 157)) | (1L << (PERIOD - 157)) | (1L << (PIECESIZE - 157)) | (1L << (PLAN - 157)) | (1L << (PRECISION - 157)) | (1L << (PREPARE - 157)))) != 0) || ((((_la - 221)) & ~0x3f) == 0 && ((1L << (_la - 221)) & ((1L << (PREVVAL - 221)) | (1L << (PRIOR - 221)) | (1L << (PRIQTY - 221)) | (1L << (PRIVILEGES - 221)) | (1L << (PROCEDURE - 221)) | (1L << (PROGRAM - 221)) | (1L << (PSID - 221)) | (1L << (PUBLIC - 221)) | (1L << (QUERY - 221)) | (1L << (QUERYNO - 221)) | (1L << (READS - 221)) | (1L << (REFERENCES - 221)) | (1L << (REFRESH - 221)) | (1L << (RELEASE - 221)) | (1L << (RENAME - 221)) | (1L << (REPEAT - 221)) | (1L << (RESIGNAL - 221)) | (1L << (RESTRICT - 221)) | (1L << (RESULT - 221)) | (1L << (RESULT_SET_LOCATOR - 221)) | (1L << (RETURN - 221)) | (1L << (RETURNS - 221)) | (1L << (REVOKE - 221)) | (1L << (RIGHT - 221)) | (1L << (ROLE - 221)) | (1L << (ROLLBACK - 221)) | (1L << (ROLLUP - 221)) | (1L << (ROUND_CEILING - 221)) | (1L << (ROUND_DOWN - 221)) | (1L << (ROUND_FLOOR - 221)) | (1L << (ROUND_HALF_DOWN - 221)) | (1L << (ROUND_HALF_EVEN - 221)) | (1L << (ROUND_HALF_UP - 221)) | (1L << (ROUND_UP - 221)) | (1L << (ROW - 221)) | (1L << (ROWSET - 221)) | (1L << (RUN - 221)) | (1L << (SAVEPOINT - 221)) | (1L << (SCHEMA - 221)) | (1L << (SCRATCHPAD - 221)) | (1L << (SECOND - 221)) | (1L << (SECONDS - 221)) | (1L << (SECQTY - 221)) | (1L << (SECURITY - 221)) | (1L << (SELECT - 221)) | (1L << (SENSITIVE - 221)) | (1L << (SEQUENCE - 221)) | (1L << (SET - 221)) | (1L << (SIGNAL - 221)) | (1L << (SIMPLE - 221)) | (1L << (SOME - 221)) | (1L << (SOURCE - 221)) | (1L << (SPECIFIC - 221)) | (1L << (STANDARD - 221)) | (1L << (STATEMENT - 221)) | (1L << (STATIC - 221)) | (1L << (STAY - 221)) | (1L << (STOGROUP - 221)) | (1L << (STORES - 221)) | (1L << (STYLE - 221)) | (1L << (SUMMARY - 221)) | (1L << (SYNONYM - 221)) | (1L << (SYSDATE - 221)) | (1L << (SYSTEM - 221)))) != 0) || ((((_la - 285)) & ~0x3f) == 0 && ((1L << (_la - 285)) & ((1L << (SYSTIMESTAMP - 285)) | (1L << (TABLE - 285)) | (1L << (TABLESPACE - 285)) | (1L << (THEN - 285)) | (1L << (TO - 285)) | (1L << (TRIGGER - 285)) | (1L << (TRUNCATE - 285)) | (1L << (TYPE - 285)) | (1L << (UNDO - 285)) | (1L << (UNION - 285)) | (1L << (UNIQUE - 285)) | (1L << (UNTIL - 285)) | (1L << (UPDATE - 285)) | (1L << (USING - 285)) | (1L << (VALIDPROC - 285)) | (1L << (VALUE - 285)) | (1L << (VALUES - 285)) | (1L << (VARIABLE - 285)) | (1L << (VARIANT - 285)) | (1L << (VCAT - 285)) | (1L << (VERSIONING - 285)) | (1L << (VIEW - 285)) | (1L << (VOLATILE - 285)) | (1L << (VOLUMES - 285)) | (1L << (WHEN - 285)) | (1L << (WHENEVER - 285)) | (1L << (WHERE - 285)) | (1L << (WHILE - 285)) | (1L << (WITH - 285)) | (1L << (WLM - 285)) | (1L << (XMLCAST - 285)) | (1L << (XMLEXISTS - 285)) | (1L << (XMLNAMESPACES - 285)) | (1L << (YEAR - 285)) | (1L << (YEARS - 285)) | (1L << (ZONE - 285)) | (1L << (AND - 285)) | (1L << (ARRAY_AGG - 285)) | (1L << (ASC - 285)) | (1L << (AVG - 285)) | (1L << (BIT - 285)) | (1L << (CHANGE - 285)) | (1L << (CODEUNITS16 - 285)) | (1L << (CODEUNITS32 - 285)) | (1L << (CORR - 285)) | (1L << (CORRELATION - 285)) | (1L << (COVAR - 285)) | (1L << (COVARIANCE - 285)) | (1L << (COVARIANCE_SAMP - 285)) | (1L << (COVAR_POP - 285)) | (1L << (COVAR_SAMP - 285)) | (1L << (CS - 285)) | (1L << (CUME_DIST - 285)) | (1L << (DENSE_RANK - 285)) | (1L << (DESC - 285)) | (1L << (EBCDIC - 285)) | (1L << (EXCLUSIVE - 285)) | (1L << (FIRST_VALUE - 285)) | (1L << (FOLLOWING - 285)) | (1L << (GROUPING - 285)) | (1L << (IGNORE - 285)) | (1L << (INDICATOR - 285)))) != 0) || ((((_la - 349)) & ~0x3f) == 0 && ((1L << (_la - 349)) & ((1L << (INPUT - 349)) | (1L << (ISNULL - 349)) | (1L << (LAG - 349)) | (1L << (LARGE - 349)) | (1L << (LAST_VALUE - 349)) | (1L << (LEAD - 349)) | (1L << (LISTAGG - 349)) | (1L << (LOCKED - 349)) | (1L << (LOCKS - 349)) | (1L << (MEDIAN - 349)) | (1L << (MINUTES - 349)) | (1L << (MIXED - 349)) | (1L << (NOTNULL - 349)) | (1L << (NTH_VALUE - 349)) | (1L << (NTILE - 349)) | (1L << (NUMERIC - 349)) | (1L << (OBJECT - 349)) | (1L << (OCTETS - 349)) | (1L << (ONLY - 349)) | (1L << (OVER - 349)) | (1L << (PASSING - 349)) | (1L << (PERCENTILE_CONT - 349)) | (1L << (PERCENTILE_DISC - 349)) | (1L << (PERCENT_RANK - 349)) | (1L << (PRECEDING - 349)) | (1L << (PREVIOUS - 349)) | (1L << (RANGE - 349)) | (1L << (RANK - 349)) | (1L << (RATIO_TO_REPORT - 349)) | (1L << (READ - 349)) | (1L << (REF - 349)) | (1L << (REGR_AVGX - 349)) | (1L << (REGR_AVGY - 349)) | (1L << (REGR_COUNT - 349)) | (1L << (REGR_ICPT - 349)) | (1L << (REGR_INTERCEPT - 349)) | (1L << (REGR_R2 - 349)) | (1L << (REGR_SLOPE - 349)) | (1L << (REGR_SXX - 349)) | (1L << (REGR_SXY - 349)) | (1L << (REGR_SYY - 349)) | (1L << (RESPECT - 349)) | (1L << (ROW_NUMBER - 349)) | (1L << (ROWS - 349)) | (1L << (RR - 349)) | (1L << (RS - 349)) | (1L << (SBCS - 349)) | (1L << (SELECTIVITY - 349)) | (1L << (SETS - 349)) | (1L << (SHARE - 349)) | (1L << (SKIP_ - 349)) | (1L << (STDDEV - 349)) | (1L << (STDDEV_POP - 349)) | (1L << (STDDEV_SAMP - 349)) | (1L << (SUM - 349)) | (1L << (TOKEN - 349)) | (1L << (UNBOUNDED - 349)) | (1L << (UNPACK - 349)) | (1L << (UR - 349)) | (1L << (USE - 349)) | (1L << (VAR - 349)) | (1L << (VARIANCE - 349)) | (1L << (VARIANCE_SAMP - 349)) | (1L << (VAR_POP - 349)))) != 0) || ((((_la - 413)) & ~0x3f) == 0 && ((1L << (_la - 413)) & ((1L << (VAR_SAMP - 413)) | (1L << (VARYING - 413)) | (1L << (WITHOUT - 413)) | (1L << (XML - 413)) | (1L << (XMLAGG - 413)) | (1L << (COLUMNS - 413)) | (1L << (SQLID - 413)) | (1L << (ORDINALITY - 413)) | (1L << (SYSTEM_TIME - 413)) | (1L << (BUSINESS_TIME - 413)) | (1L << (MULTIPLIER - 413)) | (1L << (UNNEST - 413)) | (1L << (CROSS - 413)) | (1L << (CALLER - 413)) | (1L << (CLIENT - 413)) | (1L << (POSITIONING - 413)) | (1L << (SCROLL - 413)) | (1L << (ACTION - 413)) | (1L << (ASSEMBLE - 413)) | (1L << (C_ - 413)) | (1L << (CALLED - 413)) | (1L << (COBOL - 413)) | (1L << (DB2 - 413)) | (1L << (DEFINER - 413)) | (1L << (DISPATCH - 413)) | (1L << (ENVIRONMENT - 413)) | (1L << (FAILURE - 413)) | (1L << (FAILURES - 413)) | (1L << (JAVA - 413)) | (1L << (MAIN - 413)) | (1L << (NAME - 413)) | (1L << (OPTIONS - 413)) | (1L << (PARALLEL - 413)) | (1L << (PLI - 413)) | (1L << (REGISTERS - 413)) | (1L << (RESIDENT - 413)) | (1L << (SECURED - 413)) | (1L << (SPECIAL - 413)) | (1L << (SQL - 413)) | (1L << (STOP - 413)) | (1L << (SUB - 413)) | (1L << (YES - 413)) | (1L << (APPLICATION - 413)) | (1L << (CHANGED - 413)) | (1L << (COMPATIBILITY - 413)) | (1L << (COMPRESS - 413)) | (1L << (COPY - 413)) | (1L << (FREEPAGE - 413)) | (1L << (GBPCACHE - 413)) | (1L << (INCLUDE - 413)) | (1L << (MAXVALUE - 413)) | (1L << (MINVALUE - 413)) | (1L << (PCTFREE - 413)) | (1L << (REGENERATE - 413)) | (1L << (SEQTY - 413)) | (1L << (MASK - 413)) | (1L << (ENABLE - 413)) | (1L << (PERMISSION - 413)) | (1L << (ATOMIC - 413)) | (1L << (SQLEXCEPTION - 413)) | (1L << (MERGE - 413)) | (1L << (MATCHED - 413)) | (1L << (SQLSTATE - 413)) | (1L << (MESSAGE_TEXT - 413)))) != 0) || ((((_la - 477)) & ~0x3f) == 0 && ((1L << (_la - 477)) & ((1L << (OVERRIDING - 477)) | (1L << (PORTION - 477)) | (1L << (DB2SQL - 477)) | (1L << (DEBUG - 477)) | (1L << (GENERAL - 477)) | (1L << (MODE_ - 477)) | (1L << (REXX - 477)) | (1L << (CACHE - 477)) | (1L << (CYCLE - 477)) | (1L << (INCREMENT - 477)) | (1L << (RESTART - 477)) | (1L << (DATACLAS - 477)) | (1L << (MGMTCLAS - 477)) | (1L << (REMOVE - 477)) | (1L << (STORCLAS - 477)) | (1L << (ACCESS - 477)) | (1L << (ACTIVATE - 477)) | (1L << (ALWAYS - 477)) | (1L << (APPEND - 477)) | (1L << (ARCHIVE - 477)) | (1L << (BUSINESS - 477)) | (1L << (CASCADE - 477)) | (1L << (CHANGES - 477)) | (1L << (CONTROL - 477)) | (1L << (DEACTIVATE - 477)) | (1L << (DEFERRED - 477)) | (1L << (EACH - 477)) | (1L << (ENFORCED - 477)) | (1L << (EXTRA - 477)) | (1L << (FOREIGN - 477)) | (1L << (HIDDEN_ - 477)) | (1L << (HISTORY - 477)) | (1L << (ID - 477)) | (1L << (IDENTITY - 477)) | (1L << (IMPLICITLY - 477)) | (1L << (INITIALLY - 477)) | (1L << (INLINE - 477)) | (1L << (OPERATION - 477)) | (1L << (ORGANIZE - 477)) | (1L << (OVERLAPS - 477)) | (1L << (PACKAGE_NAME - 477)) | (1L << (PACKAGE_SCHEMA - 477)) | (1L << (PACKAGE_VERSION - 477)) | (1L << (PRIMARY - 477)) | (1L << (RESET - 477)) | (1L << (ROTATE - 477)) | (1L << (START - 477)) | (1L << (SYSIBM - 477)) | (1L << (TRANSACTION - 477)))) != 0) || _la==MINUTE || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (CURRENT_DATE - 756)) | (1L << (CURRENT_PATH - 756)) | (1L << (CURRENT_SCHEMA - 756)) | (1L << (CURRENT_SERVER - 756)) | (1L << (CURRENT_TIME - 756)) | (1L << (CURRENT_TIMESTAMP - 756)) | (1L << (CURRENT_TIME_ZONE - 756)) | (1L << (SESSION_USER - 756)) | (1L << (USER - 756)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	private static final int _serializedATNSegments = 2;
	private static final String _serializedATNSegment0 =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u031e\u1230\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\3\2\7\2\u024c\n\2\f\2"+
		"\16\2\u024f\13\2\3\2\5\2\u0252\n\2\3\3\5\3\u0255\n\3\3\3\3\3\3\3\3\3\3"+
		"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\5\3\u0269\n\3\3"+
		"\3\3\3\3\3\5\3\u026e\n\3\3\3\5\3\u0271\n\3\3\4\3\4\3\4\3\4\5\4\u0277\n"+
		"\4\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u0281\n\5\3\5\5\5\u0284\n\5\3\5"+
		"\3\5\3\5\3\5\7\5\u028a\n\5\f\5\16\5\u028d\13\5\3\5\3\5\3\5\5\5\u0292\n"+
		"\5\3\6\3\6\3\7\3\7\3\b\3\b\3\b\3\b\5\b\u029c\n\b\3\t\3\t\3\t\3\t\3\t\3"+
		"\t\3\t\3\t\5\t\u02a6\n\t\5\t\u02a8\n\t\3\n\3\n\3\n\3\n\3\n\3\n\5\n\u02b0"+
		"\n\n\3\13\3\13\3\13\3\13\3\13\3\13\3\13\5\13\u02b9\n\13\3\13\3\13\3\13"+
		"\3\13\5\13\u02bf\n\13\7\13\u02c1\n\13\f\13\16\13\u02c4\13\13\3\13\3\13"+
		"\3\f\3\f\3\f\3\f\3\f\3\f\5\f\u02ce\n\f\3\r\3\r\3\r\3\r\7\r\u02d4\n\r\f"+
		"\r\16\r\u02d7\13\r\3\r\3\r\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\17"+
		"\3\17\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\6\20\u02f0"+
		"\n\20\r\20\16\20\u02f1\3\21\3\21\3\21\3\21\3\21\3\21\3\21\7\21\u02fb\n"+
		"\21\f\21\16\21\u02fe\13\21\3\21\3\21\5\21\u0302\n\21\3\21\3\21\3\21\5"+
		"\21\u0307\n\21\3\21\5\21\u030a\n\21\3\21\6\21\u030d\n\21\r\21\16\21\u030e"+
		"\3\22\3\22\3\22\3\22\5\22\u0315\n\22\3\22\7\22\u0318\n\22\f\22\16\22\u031b"+
		"\13\22\3\22\3\22\3\22\7\22\u0320\n\22\f\22\16\22\u0323\13\22\5\22\u0325"+
		"\n\22\3\23\3\23\3\23\3\23\3\23\3\23\5\23\u032d\n\23\3\24\3\24\3\24\3\24"+
		"\3\24\3\24\5\24\u0335\n\24\3\25\3\25\3\25\3\25\6\25\u033b\n\25\r\25\16"+
		"\25\u033c\3\26\3\26\3\26\3\26\6\26\u0343\n\26\r\26\16\26\u0344\3\27\3"+
		"\27\3\27\3\27\6\27\u034b\n\27\r\27\16\27\u034c\3\30\3\30\3\30\3\30\6\30"+
		"\u0353\n\30\r\30\16\30\u0354\3\31\3\31\3\31\3\31\5\31\u035b\n\31\3\31"+
		"\5\31\u035e\n\31\3\31\5\31\u0361\n\31\3\31\3\31\5\31\u0365\n\31\3\31\3"+
		"\31\3\31\3\31\5\31\u036b\n\31\3\31\3\31\7\31\u036f\n\31\f\31\16\31\u0372"+
		"\13\31\3\31\3\31\5\31\u0376\n\31\3\32\3\32\3\32\3\32\5\32\u037c\n\32\3"+
		"\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\5\32\u0386\n\32\3\32\3\32\5\32"+
		"\u038a\n\32\3\33\3\33\5\33\u038e\n\33\3\34\3\34\3\34\3\34\3\34\3\34\3"+
		"\34\7\34\u0397\n\34\f\34\16\34\u039a\13\34\3\34\3\34\5\34\u039e\n\34\3"+
		"\34\5\34\u03a1\n\34\3\34\3\34\3\34\5\34\u03a6\n\34\3\34\3\34\3\34\3\34"+
		"\3\34\3\34\7\34\u03ae\n\34\f\34\16\34\u03b1\13\34\3\34\3\34\5\34\u03b5"+
		"\n\34\3\34\3\34\3\34\3\34\7\34\u03bb\n\34\f\34\16\34\u03be\13\34\5\34"+
		"\u03c0\n\34\3\34\3\34\5\34\u03c4\n\34\3\34\3\34\5\34\u03c8\n\34\3\34\5"+
		"\34\u03cb\n\34\3\35\3\35\3\35\3\35\5\35\u03d1\n\35\3\35\5\35\u03d4\n\35"+
		"\3\35\3\35\7\35\u03d8\n\35\f\35\16\35\u03db\13\35\3\35\3\35\7\35\u03df"+
		"\n\35\f\35\16\35\u03e2\13\35\3\35\5\35\u03e5\n\35\3\35\3\35\3\35\3\35"+
		"\3\35\3\35\3\35\5\35\u03ee\n\35\6\35\u03f0\n\35\r\35\16\35\u03f1\3\35"+
		"\3\35\5\35\u03f6\n\35\3\35\3\35\3\35\3\35\3\35\5\35\u03fd\n\35\3\35\3"+
		"\35\5\35\u0401\n\35\3\36\3\36\3\36\5\36\u0406\n\36\3\36\5\36\u0409\n\36"+
		"\3\36\5\36\u040c\n\36\3\36\3\36\3\36\3\36\5\36\u0412\n\36\3\36\3\36\7"+
		"\36\u0416\n\36\f\36\16\36\u0419\13\36\3\36\3\36\5\36\u041d\n\36\3\37\3"+
		"\37\3\37\5\37\u0422\n\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37"+
		"\3\37\5\37\u042e\n\37\3\37\3\37\5\37\u0432\n\37\3 \3 \5 \u0436\n \3!\3"+
		"!\3!\3!\5!\u043c\n!\3!\3!\5!\u0440\n!\3!\3!\3!\3!\3!\7!\u0447\n!\f!\16"+
		"!\u044a\13!\3!\3!\3\"\3\"\3\"\3\"\3\"\7\"\u0453\n\"\f\"\16\"\u0456\13"+
		"\"\3\"\3\"\5\"\u045a\n\"\3#\3#\3#\3#\3#\7#\u0461\n#\f#\16#\u0464\13#\3"+
		"#\3#\3#\3#\3#\5#\u046b\n#\3#\3#\5#\u046f\n#\3$\5$\u0472\n$\3$\3$\3$\5"+
		"$\u0477\n$\3%\3%\3%\5%\u047c\n%\3&\3&\3&\3&\3&\3&\3&\3&\7&\u0486\n&\f"+
		"&\16&\u0489\13&\3&\3&\3&\3&\7&\u048f\n&\f&\16&\u0492\13&\3&\3&\3&\3&\3"+
		"&\3&\7&\u049a\n&\f&\16&\u049d\13&\3&\5&\u04a0\n&\3&\3&\5&\u04a4\n&\3\'"+
		"\3\'\3\'\3\'\3\'\7\'\u04ab\n\'\f\'\16\'\u04ae\13\'\3(\3(\3)\3)\3)\3)\3"+
		")\7)\u04b7\n)\f)\16)\u04ba\13)\3)\3)\3)\3)\3)\3)\3)\7)\u04c3\n)\f)\16"+
		")\u04c6\13)\3)\3)\5)\u04ca\n)\3*\3*\3*\5*\u04cf\n*\3*\3*\5*\u04d3\n*\3"+
		"+\3+\3+\3+\3+\3+\3+\7+\u04dc\n+\f+\16+\u04df\13+\3,\3,\3,\3,\7,\u04e5"+
		"\n,\f,\16,\u04e8\13,\3,\3,\5,\u04ec\n,\3-\3-\3-\3-\5-\u04f2\n-\3.\3.\5"+
		".\u04f6\n.\3/\3/\3/\5/\u04fb\n/\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60"+
		"\7\60\u0505\n\60\f\60\16\60\u0508\13\60\3\60\3\60\3\61\3\61\3\61\3\61"+
		"\3\61\3\61\7\61\u0512\n\61\f\61\16\61\u0515\13\61\3\61\3\61\5\61\u0519"+
		"\n\61\3\61\3\61\3\61\5\61\u051e\n\61\3\61\5\61\u0521\n\61\3\61\3\61\3"+
		"\61\3\61\3\61\3\61\5\61\u0529\n\61\3\62\3\62\3\62\3\62\3\62\5\62\u0530"+
		"\n\62\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63"+
		"\3\63\5\63\u0540\n\63\3\63\3\63\5\63\u0544\n\63\3\63\3\63\3\63\3\63\3"+
		"\63\3\63\3\63\3\63\5\63\u054e\n\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63"+
		"\3\63\5\63\u0558\n\63\5\63\u055a\n\63\3\64\3\64\3\64\6\64\u055f\n\64\r"+
		"\64\16\64\u0560\3\64\6\64\u0564\n\64\r\64\16\64\u0565\3\64\3\64\3\64\7"+
		"\64\u056b\n\64\f\64\16\64\u056e\13\64\3\65\3\65\3\65\3\65\3\65\5\65\u0575"+
		"\n\65\3\65\3\65\3\65\3\65\3\65\3\65\5\65\u057d\n\65\3\66\3\66\3\66\3\66"+
		"\5\66\u0583\n\66\3\67\3\67\3\67\38\38\38\38\58\u058c\n8\38\38\38\38\5"+
		"8\u0592\n8\38\38\38\38\58\u0598\n8\78\u059a\n8\f8\168\u059d\138\38\38"+
		"\58\u05a1\n8\58\u05a3\n8\39\39\3:\3:\3;\3;\3;\5;\u05ac\n;\3<\3<\3<\3<"+
		"\3<\3<\3<\3<\5<\u05b6\n<\3<\3<\3<\3<\5<\u05bc\n<\3<\3<\3<\3<\5<\u05c2"+
		"\n<\3<\3<\3<\5<\u05c7\n<\3<\3<\5<\u05cb\n<\3<\5<\u05ce\n<\3<\3<\3<\5<"+
		"\u05d3\n<\3<\3<\5<\u05d7\n<\3<\5<\u05da\n<\3<\3<\3<\3<\5<\u05e0\n<\3<"+
		"\3<\3<\5<\u05e5\n<\3<\3<\5<\u05e9\n<\3<\5<\u05ec\n<\3<\3<\3<\3<\5<\u05f2"+
		"\n<\3<\3<\5<\u05f6\n<\3<\3<\3<\3<\5<\u05fc\n<\3<\3<\5<\u0600\n<\3<\5<"+
		"\u0603\n<\3<\3<\3<\5<\u0608\n<\3<\3<\3<\3<\5<\u060e\n<\3<\3<\3<\3<\3<"+
		"\5<\u0615\n<\3<\3<\3<\3<\5<\u061b\n<\3<\3<\3<\3<\3<\5<\u0622\n<\3=\3="+
		"\3=\3=\5=\u0628\n=\3=\3=\3=\3=\3=\3=\5=\u0630\n=\3=\3=\5=\u0634\n=\3="+
		"\3=\3=\3=\5=\u063a\n=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\5="+
		"\u064b\n=\3=\5=\u064e\n=\3=\3=\3=\3=\3=\3=\3=\3=\5=\u0658\n=\3=\3=\3="+
		"\3=\5=\u065e\n=\3=\5=\u0661\n=\3=\3=\3=\3=\3=\5=\u0668\n=\3=\3=\3=\3="+
		"\3=\3=\3=\5=\u0671\n=\3=\3=\3=\3=\3=\3=\3=\3=\3=\5=\u067c\n=\3=\3=\3="+
		"\3=\3=\5=\u0683\n=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3="+
		"\3=\3=\3=\5=\u0699\n=\3=\3=\3=\3=\3=\3=\3=\3=\3=\5=\u06a4\n=\3=\3=\3="+
		"\3=\5=\u06aa\n=\3>\5>\u06ad\n>\3>\3>\3>\3>\3>\3>\3>\5>\u06b6\n>\3>\3>"+
		"\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\5>\u06c6\n>\3>\3>\3>\5>\u06cb\n>"+
		"\3>\5>\u06ce\n>\3>\3>\5>\u06d2\n>\3>\3>\3>\3>\3>\3>\3>\5>\u06db\n>\3>"+
		"\3>\3>\3>\3>\3>\3>\3>\3>\3>\5>\u06e7\n>\3>\5>\u06ea\n>\3>\3>\3>\3>\3>"+
		"\5>\u06f1\n>\3>\3>\3>\3>\3>\3>\3>\3>\3>\5>\u06fc\n>\3>\3>\3>\3>\3>\5>"+
		"\u0703\n>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>"+
		"\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\5>\u0729\n>\3>\3>\3>"+
		"\5>\u072e\n>\3?\3?\3?\5?\u0733\n?\3?\3?\3?\3?\3?\3?\3?\5?\u073c\n?\3?"+
		"\3?\3?\3?\5?\u0742\n?\3?\5?\u0745\n?\3?\3?\3?\3?\3?\5?\u074c\n?\3?\5?"+
		"\u074f\n?\3?\5?\u0752\n?\3@\3@\3@\3@\3@\3@\7@\u075a\n@\f@\16@\u075d\13"+
		"@\3@\3@\3@\3@\3@\3@\3@\3@\7@\u0767\n@\f@\16@\u076a\13@\3@\3@\3@\3@\3@"+
		"\3@\3@\7@\u0773\n@\f@\16@\u0776\13@\3@\3@\3@\3@\3@\3@\3@\3@\7@\u0780\n"+
		"@\f@\16@\u0783\13@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\5@\u0792\n@"+
		"\3A\3A\5A\u0796\nA\3A\3A\3A\5A\u079b\nA\3A\3A\3A\3A\3A\3A\3A\3A\3A\5A"+
		"\u07a6\nA\3A\3A\3A\3A\3A\3A\5A\u07ae\nA\3A\3A\3A\3A\3A\5A\u07b5\nA\3A"+
		"\3A\3A\3A\3A\3A\3A\3A\5A\u07bf\nA\3A\5A\u07c2\nA\3A\3A\3A\3A\3A\3A\3A"+
		"\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\5A\u07da\nA\3A\3A\3A\3A"+
		"\3A\3A\5A\u07e2\nA\3A\3A\5A\u07e6\nA\3A\3A\3A\3A\3A\5A\u07ed\nA\3A\3A"+
		"\3A\5A\u07f2\nA\3A\3A\3A\3A\5A\u07f8\nA\3A\3A\3A\3A\3A\5A\u07ff\nA\3A"+
		"\3A\5A\u0803\nA\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A"+
		"\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\5A\u0821\nA\3A\3A\3A\3A\3A\3A\3A\3A\3A"+
		"\3A\3A\3A\5A\u082f\nA\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B"+
		"\7B\u0841\nB\fB\16B\u0844\13B\3B\3B\3B\3B\3B\5B\u084b\nB\3C\3C\3C\3C\3"+
		"C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\7C\u085d\nC\fC\16C\u0860\13C\3C\3C"+
		"\3C\3C\3C\5C\u0867\nC\3D\3D\5D\u086b\nD\3E\3E\3E\3E\5E\u0871\nE\3E\3E"+
		"\5E\u0875\nE\3E\3E\5E\u0879\nE\3E\3E\3E\5E\u087e\nE\5E\u0880\nE\3F\3F"+
		"\3F\3F\3F\5F\u0887\nF\3F\7F\u088a\nF\fF\16F\u088d\13F\3F\3F\3G\3G\3G\3"+
		"G\3G\3G\3G\3G\3G\3G\5G\u089b\nG\3G\3G\3G\3G\5G\u08a1\nG\3G\5G\u08a4\n"+
		"G\3G\3G\3G\3G\3G\5G\u08ab\nG\3G\5G\u08ae\nG\3G\5G\u08b1\nG\3H\3H\3H\3"+
		"H\3H\3H\3H\3H\3H\3H\3I\3I\3I\3I\3I\3J\3J\3J\3J\3K\3K\3K\3K\3K\3L\3L\3"+
		"L\3L\3L\5L\u08d0\nL\3M\3M\3M\3M\3M\3M\3M\3M\3M\5M\u08db\nM\3N\3N\6N\u08df"+
		"\nN\rN\16N\u08e0\3O\3O\3O\3O\3O\3O\3O\5O\u08ea\nO\3O\3O\3O\3O\3O\3O\3"+
		"O\3O\3O\3O\3O\5O\u08f7\nO\3O\5O\u08fa\nO\3O\3O\3O\3O\5O\u0900\nO\3O\3"+
		"O\5O\u0904\nO\3O\3O\5O\u0908\nO\3P\3P\3Q\3Q\5Q\u090e\nQ\3R\3R\3R\3R\3"+
		"R\3R\3R\3R\5R\u0918\nR\3R\3R\3R\3R\5R\u091e\nR\3R\3R\3R\3R\5R\u0924\n"+
		"R\3R\3R\3R\5R\u0929\nR\3R\3R\5R\u092d\nR\3R\5R\u0930\nR\3R\3R\3R\5R\u0935"+
		"\nR\3R\3R\3R\5R\u093a\nR\3R\3R\3R\3R\5R\u0940\nR\3R\3R\3R\5R\u0945\nR"+
		"\3R\3R\3R\5R\u094a\nR\3R\3R\3R\3R\5R\u0950\nR\3R\3R\5R\u0954\nR\3R\3R"+
		"\3R\3R\5R\u095a\nR\3R\3R\5R\u095e\nR\3R\5R\u0961\nR\3R\3R\3R\5R\u0966"+
		"\nR\3R\3R\3R\3R\5R\u096c\nR\3R\3R\3R\3R\3R\5R\u0973\nR\3R\3R\3R\3R\5R"+
		"\u0979\nR\3R\3R\3R\3R\3R\5R\u0980\nR\3S\3S\3S\5S\u0985\nS\3S\3S\3S\3S"+
		"\3S\3S\3S\3S\3S\5S\u0990\nS\3S\3S\3S\3S\3S\5S\u0997\nS\3S\3S\5S\u099b"+
		"\nS\3S\3S\3S\3S\3S\3S\5S\u09a3\nS\3S\3S\5S\u09a7\nS\3S\5S\u09aa\nS\3T"+
		"\3T\5T\u09ae\nT\3T\3T\3T\5T\u09b3\nT\3T\3T\3T\3T\7T\u09b9\nT\fT\16T\u09bc"+
		"\13T\3T\3T\3T\3T\5T\u09c2\nT\3T\3T\3U\3U\3U\3U\3U\3U\3U\3U\5U\u09ce\n"+
		"U\5U\u09d0\nU\3U\3U\3U\3U\3U\5U\u09d7\nU\3U\3U\3U\3U\3U\5U\u09de\nU\7"+
		"U\u09e0\nU\fU\16U\u09e3\13U\3U\3U\3U\3V\3V\3V\3V\3V\3V\3V\5V\u09ef\nV"+
		"\3V\3V\3V\3V\3V\5V\u09f6\nV\7V\u09f8\nV\fV\16V\u09fb\13V\3V\3V\3V\3V\3"+
		"V\3V\3V\3V\3V\5V\u0a06\nV\5V\u0a08\nV\3V\5V\u0a0b\nV\3V\3V\3V\3V\5V\u0a11"+
		"\nV\3W\3W\5W\u0a15\nW\3W\3W\3W\3W\3W\3X\5X\u0a1d\nX\3X\3X\3X\3X\7X\u0a23"+
		"\nX\fX\16X\u0a26\13X\3X\3X\3X\3X\3X\7X\u0a2d\nX\fX\16X\u0a30\13X\3X\3"+
		"X\3Y\3Y\3Y\5Y\u0a37\nY\3Y\3Y\3Z\3Z\3[\3[\5[\u0a3f\n[\3[\3[\3[\3[\7[\u0a45"+
		"\n[\f[\16[\u0a48\13[\3[\3[\5[\u0a4c\n[\3\\\3\\\3\\\3\\\3]\3]\3]\3]\3]"+
		"\3]\3]\3]\3]\7]\u0a5b\n]\f]\16]\u0a5e\13]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3"+
		"]\3]\5]\u0a6b\n]\3^\3^\3^\3^\5^\u0a71\n^\3_\3_\5_\u0a75\n_\3`\3`\3`\3"+
		"a\3a\3a\3a\3a\3a\3b\3b\3b\3b\3b\3c\3c\6c\u0a87\nc\rc\16c\u0a88\3d\3d\3"+
		"d\3d\3d\3d\7d\u0a91\nd\fd\16d\u0a94\13d\3e\3e\3e\3e\3e\3e\5e\u0a9c\ne"+
		"\3f\3f\6f\u0aa0\nf\rf\16f\u0aa1\3g\3g\3g\3g\3g\3g\3g\3g\3g\3g\3g\3g\3"+
		"g\3g\3g\5g\u0ab3\ng\3h\3h\3h\7h\u0ab8\nh\fh\16h\u0abb\13h\3h\3h\3h\7h"+
		"\u0ac0\nh\fh\16h\u0ac3\13h\5h\u0ac5\nh\3i\3i\5i\u0ac9\ni\3j\3j\3j\3j\3"+
		"j\3j\3j\3j\3j\3j\5j\u0ad5\nj\3k\3k\3l\3l\3m\3m\3n\3n\3o\3o\3o\3o\3o\3"+
		"o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\5o\u0aef\no\3p\3p\3p\3p\3p\3p\3q\3q\3"+
		"q\3q\3q\3r\3r\3r\3r\5r\u0b00\nr\3s\3s\3s\5s\u0b05\ns\3s\3s\3s\3s\3s\7"+
		"s\u0b0c\ns\fs\16s\u0b0f\13s\3s\3s\3t\3t\3t\5t\u0b16\nt\3t\3t\3t\5t\u0b1b"+
		"\nt\3t\3t\5t\u0b1f\nt\3t\3t\3u\3u\3u\5u\u0b26\nu\3u\3u\3u\3u\3u\3u\3u"+
		"\3v\3v\3v\5v\u0b32\nv\3v\3v\3v\3v\3v\7v\u0b39\nv\fv\16v\u0b3c\13v\3v\3"+
		"v\3w\3w\3w\3w\3w\3w\3w\3w\5w\u0b48\nw\3w\3w\3x\3x\3x\3x\5x\u0b50\nx\3"+
		"x\3x\3x\3y\3y\3y\3y\3y\3z\3z\5z\u0b5c\nz\3z\7z\u0b5f\nz\fz\16z\u0b62\13"+
		"z\3{\3{\3{\3{\3{\3{\5{\u0b6a\n{\3{\3{\3{\5{\u0b6f\n{\7{\u0b71\n{\f{\16"+
		"{\u0b74\13{\5{\u0b76\n{\3{\3{\3|\3|\3|\5|\u0b7d\n|\3}\3}\3}\3}\5}\u0b83"+
		"\n}\3}\3}\3}\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~"+
		"\5~\u0b9b\n~\3\177\3\177\3\177\3\177\3\177\3\177\3\177\3\177\3\177\3\177"+
		"\3\177\3\177\5\177\u0ba9\n\177\5\177\u0bab\n\177\5\177\u0bad\n\177\3\177"+
		"\3\177\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080"+
		"\3\u0080\5\u0080\u0bba\n\u0080\5\u0080\u0bbc\n\u0080\3\u0080\3\u0080\3"+
		"\u0081\3\u0081\3\u0081\3\u0081\5\u0081\u0bc4\n\u0081\3\u0082\3\u0082\3"+
		"\u0082\3\u0082\3\u0082\7\u0082\u0bcb\n\u0082\f\u0082\16\u0082\u0bce\13"+
		"\u0082\3\u0083\3\u0083\3\u0083\3\u0083\5\u0083\u0bd4\n\u0083\3\u0083\3"+
		"\u0083\3\u0083\5\u0083\u0bd9\n\u0083\7\u0083\u0bdb\n\u0083\f\u0083\16"+
		"\u0083\u0bde\13\u0083\3\u0084\3\u0084\3\u0084\5\u0084\u0be3\n\u0084\3"+
		"\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\5\u0085\u0beb\n\u0085\3"+
		"\u0085\5\u0085\u0bee\n\u0085\3\u0085\3\u0085\3\u0086\3\u0086\5\u0086\u0bf4"+
		"\n\u0086\3\u0086\3\u0086\3\u0086\5\u0086\u0bf9\n\u0086\3\u0086\3\u0086"+
		"\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086"+
		"\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086\5\u0086\u0c0b\n\u0086\5\u0086"+
		"\u0c0d\n\u0086\3\u0086\3\u0086\3\u0087\3\u0087\3\u0088\3\u0088\3\u0089"+
		"\3\u0089\3\u0089\3\u0089\5\u0089\u0c19\n\u0089\3\u008a\3\u008a\3\u008a"+
		"\3\u008a\3\u008a\5\u008a\u0c20\n\u008a\3\u008a\3\u008a\3\u008b\3\u008b"+
		"\3\u008b\3\u008b\3\u008b\5\u008b\u0c29\n\u008b\3\u008b\3\u008b\3\u008c"+
		"\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3\u008d\3\u008d\3\u008d"+
		"\3\u008d\3\u008d\3\u008e\3\u008e\3\u008e\3\u008e\5\u008e\u0c3d\n\u008e"+
		"\3\u008f\3\u008f\3\u008f\5\u008f\u0c42\n\u008f\3\u0090\3\u0090\3\u0090"+
		"\3\u0090\3\u0090\3\u0091\3\u0091\5\u0091\u0c4b\n\u0091\3\u0092\3\u0092"+
		"\3\u0092\3\u0092\5\u0092\u0c51\n\u0092\3\u0093\3\u0093\3\u0093\3\u0093"+
		"\5\u0093\u0c57\n\u0093\3\u0094\3\u0094\3\u0094\3\u0095\3\u0095\3\u0095"+
		"\3\u0096\3\u0096\3\u0096\3\u0097\3\u0097\3\u0097\3\u0098\3\u0098\3\u0098"+
		"\3\u0099\3\u0099\3\u009a\3\u009a\3\u009b\3\u009b\3\u009c\3\u009c\3\u009c"+
		"\3\u009c\3\u009c\5\u009c\u0c73\n\u009c\3\u009c\3\u009c\3\u009c\3\u009c"+
		"\5\u009c\u0c79\n\u009c\3\u009c\3\u009c\3\u009c\3\u009c\5\u009c\u0c7f\n"+
		"\u009c\3\u009c\3\u009c\3\u009c\5\u009c\u0c84\n\u009c\3\u009c\3\u009c\3"+
		"\u009c\5\u009c\u0c89\n\u009c\7\u009c\u0c8b\n\u009c\f\u009c\16\u009c\u0c8e"+
		"\13\u009c\5\u009c\u0c90\n\u009c\3\u009c\3\u009c\3\u009d\3\u009d\3\u009e"+
		"\3\u009e\3\u009e\3\u009e\3\u009e\5\u009e\u0c9b\n\u009e\3\u009f\3\u009f"+
		"\3\u00a0\3\u00a0\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\5\u00a1\u0ca6"+
		"\n\u00a1\3\u00a2\5\u00a2\u0ca9\n\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2"+
		"\3\u00a2\3\u00a2\3\u00a2\5\u00a2\u0cb2\n\u00a2\3\u00a3\5\u00a3\u0cb5\n"+
		"\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a4\5\u00a4\u0cbb\n\u00a4\3\u00a4\3"+
		"\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\5\u00a4\u0cc4\n\u00a4\3"+
		"\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\5\u00a5\u0ccb\n\u00a5\3\u00a6\3"+
		"\u00a6\3\u00a6\3\u00a6\3\u00a7\3\u00a7\3\u00a8\3\u00a8\3\u00a8\3\u00a8"+
		"\3\u00a9\3\u00a9\3\u00a9\7\u00a9\u0cda\n\u00a9\f\u00a9\16\u00a9\u0cdd"+
		"\13\u00a9\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\7\u00aa\u0ce4\n\u00aa"+
		"\f\u00aa\16\u00aa\u0ce7\13\u00aa\3\u00aa\3\u00aa\3\u00ab\3\u00ab\3\u00ab"+
		"\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\5\u00ab\u0cf3\n\u00ab\3\u00ac"+
		"\3\u00ac\3\u00ad\3\u00ad\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae"+
		"\3\u00ae\5\u00ae\u0d00\n\u00ae\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af"+
		"\3\u00af\3\u00af\3\u00af\5\u00af\u0d0a\n\u00af\3\u00b0\3\u00b0\3\u00b0"+
		"\5\u00b0\u0d0f\n\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\5\u00b0\u0d15\n"+
		"\u00b0\3\u00b0\3\u00b0\3\u00b1\3\u00b1\3\u00b2\3\u00b2\3\u00b2\3\u00b2"+
		"\3\u00b2\5\u00b2\u0d20\n\u00b2\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3"+
		"\3\u00b3\5\u00b3\u0d28\n\u00b3\3\u00b4\5\u00b4\u0d2b\n\u00b4\3\u00b4\3"+
		"\u00b4\3\u00b4\5\u00b4\u0d30\n\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\5"+
		"\u00b4\u0d36\n\u00b4\3\u00b4\3\u00b4\5\u00b4\u0d3a\n\u00b4\3\u00b4\3\u00b4"+
		"\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u0d41\n\u00b4\7\u00b4\u0d43\n\u00b4\f"+
		"\u00b4\16\u00b4\u0d46\13\u00b4\3\u00b5\3\u00b5\3\u00b6\3\u00b6\3\u00b6"+
		"\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\5\u00b6\u0d54"+
		"\n\u00b6\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7"+
		"\5\u00b7\u0d5e\n\u00b7\3\u00b8\3\u00b8\3\u00b8\3\u00b8\7\u00b8\u0d64\n"+
		"\u00b8\f\u00b8\16\u00b8\u0d67\13\u00b8\3\u00b8\3\u00b8\3\u00b9\3\u00b9"+
		"\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9"+
		"\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9"+
		"\3\u00b9\5\u00b9\u0d80\n\u00b9\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba"+
		"\3\u00ba\3\u00bb\3\u00bb\5\u00bb\u0d8a\n\u00bb\3\u00bb\3\u00bb\3\u00bb"+
		"\3\u00bb\3\u00bb\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u0d94\n\u00bc\3\u00bc"+
		"\3\u00bc\3\u00bc\3\u00bc\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00be"+
		"\3\u00be\5\u00be\u0da1\n\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be"+
		"\3\u00be\3\u00be\3\u00be\3\u00be\7\u00be\u0dac\n\u00be\f\u00be\16\u00be"+
		"\u0daf\13\u00be\3\u00be\3\u00be\5\u00be\u0db3\n\u00be\3\u00bf\3\u00bf"+
		"\5\u00bf\u0db7\n\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u0dbd\n"+
		"\u00bf\3\u00c0\3\u00c0\3\u00c0\5\u00c0\u0dc2\n\u00c0\3\u00c0\3\u00c0\3"+
		"\u00c0\5\u00c0\u0dc7\n\u00c0\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3"+
		"\u00c1\5\u00c1\u0dcf\n\u00c1\3\u00c1\3\u00c1\3\u00c1\7\u00c1\u0dd4\n\u00c1"+
		"\f\u00c1\16\u00c1\u0dd7\13\u00c1\5\u00c1\u0dd9\n\u00c1\3\u00c1\3\u00c1"+
		"\3\u00c2\3\u00c2\5\u00c2\u0ddf\n\u00c2\3\u00c3\3\u00c3\3\u00c3\3\u00c3"+
		"\3\u00c3\5\u00c3\u0de6\n\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c4"+
		"\3\u00c4\3\u00c5\3\u00c5\3\u00c5\5\u00c5\u0df1\n\u00c5\3\u00c6\3\u00c6"+
		"\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\5\u00c6\u0dfb\n\u00c6"+
		"\3\u00c6\3\u00c6\3\u00c6\3\u00c6\5\u00c6\u0e01\n\u00c6\3\u00c6\3\u00c6"+
		"\3\u00c6\3\u00c6\5\u00c6\u0e07\n\u00c6\3\u00c6\3\u00c6\3\u00c6\5\u00c6"+
		"\u0e0c\n\u00c6\3\u00c6\3\u00c6\5\u00c6\u0e10\n\u00c6\3\u00c6\5\u00c6\u0e13"+
		"\n\u00c6\3\u00c6\3\u00c6\3\u00c6\5\u00c6\u0e18\n\u00c6\3\u00c6\5\u00c6"+
		"\u0e1b\n\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\5\u00c6\u0e21\n\u00c6\3"+
		"\u00c6\3\u00c6\3\u00c6\5\u00c6\u0e26\n\u00c6\3\u00c6\5\u00c6\u0e29\n\u00c6"+
		"\3\u00c6\3\u00c6\3\u00c6\3\u00c6\5\u00c6\u0e2f\n\u00c6\3\u00c6\5\u00c6"+
		"\u0e32\n\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\5\u00c6\u0e38\n\u00c6\3"+
		"\u00c6\3\u00c6\5\u00c6\u0e3c\n\u00c6\3\u00c6\5\u00c6\u0e3f\n\u00c6\3\u00c6"+
		"\3\u00c6\3\u00c6\5\u00c6\u0e44\n\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6"+
		"\5\u00c6\u0e4a\n\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\5\u00c6"+
		"\u0e51\n\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\5\u00c6\u0e57\n\u00c6\3"+
		"\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\5\u00c6\u0e5e\n\u00c6\3\u00c7\3"+
		"\u00c7\3\u00c7\3\u00c7\5\u00c7\u0e64\n\u00c7\3\u00c7\3\u00c7\3\u00c8\3"+
		"\u00c8\3\u00c8\5\u00c8\u0e6b\n\u00c8\3\u00c8\3\u00c8\3\u00c9\3\u00c9\3"+
		"\u00c9\5\u00c9\u0e72\n\u00c9\3\u00c9\5\u00c9\u0e75\n\u00c9\3\u00ca\3\u00ca"+
		"\3\u00ca\3\u00ca\3\u00cb\3\u00cb\3\u00cb\5\u00cb\u0e7e\n\u00cb\3\u00cb"+
		"\3\u00cb\3\u00cc\3\u00cc\3\u00cd\3\u00cd\3\u00ce\3\u00ce\3\u00cf\3\u00cf"+
		"\3\u00cf\5\u00cf\u0e8b\n\u00cf\3\u00cf\3\u00cf\3\u00d0\3\u00d0\3\u00d1"+
		"\3\u00d1\3\u00d2\3\u00d2\3\u00d3\3\u00d3\3\u00d4\3\u00d4\3\u00d5\3\u00d5"+
		"\3\u00d6\3\u00d6\3\u00d7\3\u00d7\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8"+
		"\3\u00d8\3\u00d8\3\u00d8\5\u00d8\u0ea7\n\u00d8\3\u00d8\3\u00d8\5\u00d8"+
		"\u0eab\n\u00d8\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9"+
		"\3\u00d9\5\u00d9\u0eb5\n\u00d9\3\u00d9\3\u00d9\3\u00da\3\u00da\3\u00db"+
		"\3\u00db\3\u00dc\3\u00dc\3\u00dd\3\u00dd\3\u00de\3\u00de\3\u00df\3\u00df"+
		"\3\u00df\5\u00df\u0ec6\n\u00df\3\u00df\3\u00df\3\u00e0\3\u00e0\3\u00e0"+
		"\5\u00e0\u0ecd\n\u00e0\3\u00e0\3\u00e0\3\u00e1\3\u00e1\3\u00e1\5\u00e1"+
		"\u0ed4\n\u00e1\3\u00e1\3\u00e1\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2"+
		"\3\u00e2\3\u00e2\3\u00e2\5\u00e2\u0ee0\n\u00e2\3\u00e2\3\u00e2\3\u00e3"+
		"\3\u00e3\3\u00e3\5\u00e3\u0ee7\n\u00e3\3\u00e3\3\u00e3\3\u00e4\3\u00e4"+
		"\3\u00e5\3\u00e5\3\u00e6\3\u00e6\3\u00e7\3\u00e7\3\u00e8\3\u00e8\3\u00e9"+
		"\3\u00e9\3\u00ea\3\u00ea\3\u00eb\3\u00eb\3\u00ec\3\u00ec\5\u00ec\u0efd"+
		"\n\u00ec\3\u00ed\3\u00ed\3\u00ed\5\u00ed\u0f02\n\u00ed\3\u00ed\3\u00ed"+
		"\3\u00ee\3\u00ee\3\u00ee\5\u00ee\u0f09\n\u00ee\3\u00ee\3\u00ee\3\u00ef"+
		"\3\u00ef\3\u00ef\3\u00ef\5\u00ef\u0f11\n\u00ef\3\u00ef\3\u00ef\5\u00ef"+
		"\u0f15\n\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef\5\u00ef\u0f1b\n\u00ef\3"+
		"\u00ef\5\u00ef\u0f1e\n\u00ef\3\u00f0\3\u00f0\3\u00f1\3\u00f1\3\u00f2\3"+
		"\u00f2\3\u00f2\5\u00f2\u0f27\n\u00f2\3\u00f2\3\u00f2\5\u00f2\u0f2b\n\u00f2"+
		"\3\u00f3\3\u00f3\3\u00f3\5\u00f3\u0f30\n\u00f3\3\u00f3\3\u00f3\7\u00f3"+
		"\u0f34\n\u00f3\f\u00f3\16\u00f3\u0f37\13\u00f3\3\u00f4\5\u00f4\u0f3a\n"+
		"\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\7\u00f4\u0f41\n\u00f4\f"+
		"\u00f4\16\u00f4\u0f44\13\u00f4\3\u00f4\3\u00f4\5\u00f4\u0f48\n\u00f4\3"+
		"\u00f5\3\u00f5\7\u00f5\u0f4c\n\u00f5\f\u00f5\16\u00f5\u0f4f\13\u00f5\3"+
		"\u00f5\3\u00f5\7\u00f5\u0f53\n\u00f5\f\u00f5\16\u00f5\u0f56\13\u00f5\3"+
		"\u00f5\5\u00f5\u0f59\n\u00f5\3\u00f5\3\u00f5\7\u00f5\u0f5d\n\u00f5\f\u00f5"+
		"\16\u00f5\u0f60\13\u00f5\3\u00f5\3\u00f5\7\u00f5\u0f64\n\u00f5\f\u00f5"+
		"\16\u00f5\u0f67\13\u00f5\3\u00f5\5\u00f5\u0f6a\n\u00f5\7\u00f5\u0f6c\n"+
		"\u00f5\f\u00f5\16\u00f5\u0f6f\13\u00f5\3\u00f6\3\u00f6\3\u00f6\3\u00f6"+
		"\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6"+
		"\3\u00f6\6\u00f6\u0f7f\n\u00f6\r\u00f6\16\u00f6\u0f80\3\u00f6\3\u00f6"+
		"\6\u00f6\u0f85\n\u00f6\r\u00f6\16\u00f6\u0f86\3\u00f6\3\u00f6\3\u00f6"+
		"\3\u00f6\3\u00f6\3\u00f6\6\u00f6\u0f8f\n\u00f6\r\u00f6\16\u00f6\u0f90"+
		"\3\u00f6\3\u00f6\6\u00f6\u0f95\n\u00f6\r\u00f6\16\u00f6\u0f96\3\u00f6"+
		"\5\u00f6\u0f9a\n\u00f6\3\u00f6\3\u00f6\3\u00f6\5\u00f6\u0f9f\n\u00f6\5"+
		"\u00f6\u0fa1\n\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\5\u00f6\u0fa8"+
		"\n\u00f6\3\u00f6\3\u00f6\3\u00f6\5\u00f6\u0fad\n\u00f6\5\u00f6\u0faf\n"+
		"\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6"+
		"\3\u00f6\3\u00f6\3\u00f6\3\u00f6\6\u00f6\u0fbd\n\u00f6\r\u00f6\16\u00f6"+
		"\u0fbe\3\u00f6\3\u00f6\6\u00f6\u0fc3\n\u00f6\r\u00f6\16\u00f6\u0fc4\3"+
		"\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\6\u00f6\u0fcd\n\u00f6\r"+
		"\u00f6\16\u00f6\u0fce\3\u00f6\3\u00f6\6\u00f6\u0fd3\n\u00f6\r\u00f6\16"+
		"\u00f6\u0fd4\3\u00f6\5\u00f6\u0fd8\n\u00f6\3\u00f6\3\u00f6\3\u00f6\5\u00f6"+
		"\u0fdd\n\u00f6\5\u00f6\u0fdf\n\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3"+
		"\u00f6\5\u00f6\u0fe6\n\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\6"+
		"\u00f6\u0fed\n\u00f6\r\u00f6\16\u00f6\u0fee\3\u00f6\3\u00f6\6\u00f6\u0ff3"+
		"\n\u00f6\r\u00f6\16\u00f6\u0ff4\5\u00f6\u0ff7\n\u00f6\3\u00f7\3\u00f7"+
		"\7\u00f7\u0ffb\n\u00f7\f\u00f7\16\u00f7\u0ffe\13\u00f7\3\u00f7\5\u00f7"+
		"\u1001\n\u00f7\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8"+
		"\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\5\u00f8"+
		"\u1012\n\u00f8\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9"+
		"\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\5\u00f9\u1022"+
		"\n\u00f9\3\u00fa\5\u00fa\u1025\n\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa"+
		"\5\u00fa\u102b\n\u00fa\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb"+
		"\5\u00fb\u1033\n\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb"+
		"\3\u00fb\3\u00fb\3\u00fb\5\u00fb\u103e\n\u00fb\3\u00fc\3\u00fc\3\u00fc"+
		"\3\u00fc\3\u00fc\3\u00fc\5\u00fc\u1046\n\u00fc\3\u00fc\3\u00fc\3\u00fc"+
		"\3\u00fc\5\u00fc\u104c\n\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\5\u00fc"+
		"\u1052\n\u00fc\7\u00fc\u1054\n\u00fc\f\u00fc\16\u00fc\u1057\13\u00fc\3"+
		"\u00fc\3\u00fc\5\u00fc\u105b\n\u00fc\3\u00fc\3\u00fc\3\u00fc\5\u00fc\u1060"+
		"\n\u00fc\3\u00fd\3\u00fd\5\u00fd\u1064\n\u00fd\3\u00fd\3\u00fd\3\u00fe"+
		"\5\u00fe\u1069\n\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe"+
		"\3\u00fe\3\u00fe\7\u00fe\u1073\n\u00fe\f\u00fe\16\u00fe\u1076\13\u00fe"+
		"\3\u00fe\3\u00fe\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff"+
		"\5\u00ff\u1081\n\u00ff\3\u0100\3\u0100\5\u0100\u1085\n\u0100\3\u0101\3"+
		"\u0101\3\u0101\3\u0101\5\u0101\u108b\n\u0101\3\u0101\3\u0101\3\u0101\5"+
		"\u0101\u1090\n\u0101\7\u0101\u1092\n\u0101\f\u0101\16\u0101\u1095\13\u0101"+
		"\3\u0101\3\u0101\3\u0101\5\u0101\u109a\n\u0101\3\u0101\5\u0101\u109d\n"+
		"\u0101\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\5\u0102\u10a4\n\u0102\3"+
		"\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\5\u0103\u10ac\n\u0103\3"+
		"\u0103\3\u0103\3\u0103\5\u0103\u10b1\n\u0103\7\u0103\u10b3\n\u0103\f\u0103"+
		"\16\u0103\u10b6\13\u0103\3\u0103\3\u0103\5\u0103\u10ba\n\u0103\3\u0104"+
		"\3\u0104\3\u0105\3\u0105\3\u0106\3\u0106\3\u0107\3\u0107\3\u0107\3\u0107"+
		"\5\u0107\u10c6\n\u0107\3\u0108\3\u0108\3\u0108\3\u0109\3\u0109\3\u0109"+
		"\3\u0109\3\u0109\5\u0109\u10d0\n\u0109\3\u010a\3\u010a\3\u010a\3\u010b"+
		"\3\u010b\3\u010b\7\u010b\u10d8\n\u010b\f\u010b\16\u010b\u10db\13\u010b"+
		"\3\u010c\3\u010c\3\u010c\3\u010c\3\u010d\3\u010d\3\u010d\3\u010d\5\u010d"+
		"\u10e5\n\u010d\3\u010d\3\u010d\3\u010d\3\u010d\5\u010d\u10eb\n\u010d\7"+
		"\u010d\u10ed\n\u010d\f\u010d\16\u010d\u10f0\13\u010d\3\u010d\3\u010d\3"+
		"\u010e\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\5\u010e\u10fb\n"+
		"\u010e\3\u010f\3\u010f\3\u010f\3\u010f\7\u010f\u1101\n\u010f\f\u010f\16"+
		"\u010f\u1104\13\u010f\3\u010f\5\u010f\u1107\n\u010f\3\u010f\5\u010f\u110a"+
		"\n\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\5\u010f\u1111\n\u010f"+
		"\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110"+
		"\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\7\u0110\u1121\n\u0110\f\u0110"+
		"\16\u0110\u1124\13\u0110\3\u0110\3\u0110\3\u0111\3\u0111\5\u0111\u112a"+
		"\n\u0111\3\u0111\3\u0111\3\u0111\3\u0111\7\u0111\u1130\n\u0111\f\u0111"+
		"\16\u0111\u1133\13\u0111\5\u0111\u1135\n\u0111\3\u0112\3\u0112\3\u0112"+
		"\5\u0112\u113a\n\u0112\3\u0112\5\u0112\u113d\n\u0112\3\u0112\5\u0112\u1140"+
		"\n\u0112\3\u0112\5\u0112\u1143\n\u0112\3\u0112\5\u0112\u1146\n\u0112\3"+
		"\u0112\5\u0112\u1149\n\u0112\3\u0113\3\u0113\3\u0113\3\u0113\7\u0113\u114f"+
		"\n\u0113\f\u0113\16\u0113\u1152\13\u0113\5\u0113\u1154\n\u0113\3\u0113"+
		"\3\u0113\3\u0113\3\u0113\5\u0113\u115a\n\u0113\3\u0113\5\u0113\u115d\n"+
		"\u0113\3\u0113\5\u0113\u1160\n\u0113\3\u0113\5\u0113\u1163\n\u0113\3\u0113"+
		"\5\u0113\u1166\n\u0113\3\u0113\5\u0113\u1169\n\u0113\3\u0113\3\u0113\5"+
		"\u0113\u116d\n\u0113\3\u0113\5\u0113\u1170\n\u0113\3\u0114\3\u0114\3\u0114"+
		"\3\u0114\7\u0114\u1176\n\u0114\f\u0114\16\u0114\u1179\13\u0114\5\u0114"+
		"\u117b\n\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114"+
		"\7\u0114\u1184\n\u0114\f\u0114\16\u0114\u1187\13\u0114\3\u0115\3\u0115"+
		"\3\u0115\3\u0115\3\u0115\7\u0115\u118e\n\u0115\f\u0115\16\u0115\u1191"+
		"\13\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0116\3\u0116"+
		"\3\u0116\3\u0116\3\u0116\3\u0116\7\u0116\u119f\n\u0116\f\u0116\16\u0116"+
		"\u11a2\13\u0116\5\u0116\u11a4\n\u0116\3\u0117\3\u0117\3\u0117\3\u0117"+
		"\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0119\3\u0119\3\u0119\5\u0119"+
		"\u11b2\n\u0119\3\u0119\3\u0119\5\u0119\u11b6\n\u0119\3\u0119\3\u0119\5"+
		"\u0119\u11ba\n\u0119\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3"+
		"\u011b\3\u011b\3\u011b\3\u011b\3\u011c\3\u011c\3\u011c\3\u011d\3\u011d"+
		"\3\u011d\3\u011d\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\5\u011e"+
		"\u11d3\n\u011e\3\u011e\3\u011e\5\u011e\u11d7\n\u011e\3\u011e\3\u011e\3"+
		"\u011e\3\u011e\3\u011e\5\u011e\u11de\n\u011e\7\u011e\u11e0\n\u011e\f\u011e"+
		"\16\u011e\u11e3\13\u011e\3\u011e\5\u011e\u11e6\n\u011e\3\u011e\5\u011e"+
		"\u11e9\n\u011e\3\u011e\5\u011e\u11ec\n\u011e\3\u011f\3\u011f\3\u011f\3"+
		"\u011f\3\u011f\3\u011f\7\u011f\u11f4\n\u011f\f\u011f\16\u011f\u11f7\13"+
		"\u011f\3\u011f\3\u011f\5\u011f\u11fb\n\u011f\3\u0120\3\u0120\3\u0120\3"+
		"\u0120\5\u0120\u1201\n\u0120\3\u0120\3\u0120\3\u0120\5\u0120\u1206\n\u0120"+
		"\7\u0120\u1208\n\u0120\f\u0120\16\u0120\u120b\13\u0120\3\u0120\3\u0120"+
		"\3\u0120\3\u0120\3\u0120\5\u0120\u1212\n\u0120\3\u0121\3\u0121\3\u0121"+
		"\5\u0121\u1217\n\u0121\3\u0122\3\u0122\3\u0122\3\u0122\3\u0123\3\u0123"+
		"\3\u0123\5\u0123\u1220\n\u0123\3\u0123\3\u0123\3\u0123\3\u0124\3\u0124"+
		"\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124\5\u0124\u122c\n\u0124\3\u0125"+
		"\3\u0125\3\u0125\2\2\u0126\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$"+
		"&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084"+
		"\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c"+
		"\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4"+
		"\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc"+
		"\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4"+
		"\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc"+
		"\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114"+
		"\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c"+
		"\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144"+
		"\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c"+
		"\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174"+
		"\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c"+
		"\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4"+
		"\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc"+
		"\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4"+
		"\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec"+
		"\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204"+
		"\u0206\u0208\u020a\u020c\u020e\u0210\u0212\u0214\u0216\u0218\u021a\u021c"+
		"\u021e\u0220\u0222\u0224\u0226\u0228\u022a\u022c\u022e\u0230\u0232\u0234"+
		"\u0236\u0238\u023a\u023c\u023e\u0240\u0242\u0244\u0246\u0248\2<\4\2gg"+
		"\u0116\u0116\4\2\u00bf\u00bf\u01c8\u01c8\5\2\u0145\u0145\u0157\u0157\u029b"+
		"\u029b\5\2!!\u00c0\u00c0\u01ca\u01ca\5\2\u016e\u016e\u0241\u0241\u0245"+
		"\u0245\3\2<=\5\2\u0158\u0158\u021b\u021b\u02d0\u02d0\5\2\u0240\u0240\u0264"+
		"\u0264\u02d9\u02d9\4\2\u013b\u013b\u01a1\u01a1\7\2\u01b1\u01b2\u01b4\u01b4"+
		"\u01bb\u01bb\u01c0\u01c0\u01c5\u01c5\4\2\u01bb\u01bb\u01c5\u01c5\4\2#"+
		"#``\4\2\u01bc\u01bc\u01c7\u01c7\4\2\u01b5\u01b6\u0314\u0314\4\2[[\u0096"+
		"\u0096\4\2\u010e\u010e\u018f\u018f\7\2\u01b1\u01b2\u01b4\u01b4\u01bb\u01bb"+
		"\u01c0\u01c0\u01e5\u01e5\4\2##_`\4\2\30\30~~\4\2\u00c0\u00c0\u01f5\u01f5"+
		"\4\2\u01ef\u01ef\u01f7\u01f7\5\2!!\u00c0\u00c0\u01f5\u01f5\5\2\62\62m"+
		"m\u020d\u020d\4\2\u0145\u0145\u0157\u0157\4\2\30\30\u01d1\u01d2\4\2\u011e"+
		"\u011e\u0314\u0314\4\2__\u01d7\u01d7\4\2\u0093\u0093\u0159\u0159\3\2\b"+
		"\r\4\2\16\22GG\4\2\u0196\u0196\u02be\u02be\4\2\u00bd\u00bd\u0178\u0178"+
		"\n\2WX\u008e\u008f\u00b7\u00b8\u00bb\u00bc\u0107\u0108\u0140\u0141\u0169"+
		"\u0169\u0281\u0281\4\2~~\u00a6\u00a6\17\2\u0144\u0144\u0146\u0146\u014b"+
		"\u0153\u0155\u0155\u015c\u015c\u0165\u0165\u0168\u0168\u0174\u0176\u0192"+
		"\u0195\u019b\u019f\u01a3\u01a3\u027d\u027d\u0280\u0280\3\2\u017e\u0187"+
		"\4\2\u0179\u0179\u018a\u018a\25\2<<GGLLWXdd\u008e\u008e\u009a\u009a\u00a9"+
		"\u00a9\u00b7\u00b7\u00bb\u00bb\u00ee\u00ee\u00f6\u00f6\u0107\u0107\u0125"+
		"\u0125\u012e\u012e\u013f\u0140\u0210\u027c\u027e\u027f\u0281\u02ed\3\2"+
		"\u0315\u031d\3\2\u02ee\u0314\4\2\u00cd\u00cd\u0143\u0143\5\2!!&&\u0111"+
		"\u0111\4\2&&\u0111\u0111\4\2\30\30\u031e\u031e\4\2\u0149\u014a\u0170\u0170"+
		"\5\2\u0147\u0147\u016a\u016a\u018d\u018d\3\2\27\31\5\2\u0082\u0082\u00a9"+
		"\u00a9\u00f6\u00f6\3\2\u01a7\u01a8\4\2}}\u00c8\u00c8\3\2\30\31\4\2PP\u00f9"+
		"\u00f9\4\2!!aa\4\2\u0101\u0101\u018a\u018a\5\2\u012b\u012b\u0159\u0159"+
		"\u0190\u0190\5\2rr\u009b\u009b\u0128\u0128\4\2~~\u00bd\u00bd\13\2\37\u00b8"+
		"\u00ba\u014c\u014f\u020f\u0281\u0281\u02f6\u02f6\u0302\u0302\u0309\u030a"+
		"\u030e\u0310\u0313\u0314\2\u14c1\2\u0251\3\2\2\2\4\u0254\3\2\2\2\6\u0276"+
		"\3\2\2\2\b\u0278\3\2\2\2\n\u0293\3\2\2\2\f\u0295\3\2\2\2\16\u029b\3\2"+
		"\2\2\20\u02a7\3\2\2\2\22\u02af\3\2\2\2\24\u02b1\3\2\2\2\26\u02cd\3\2\2"+
		"\2\30\u02cf\3\2\2\2\32\u02da\3\2\2\2\34\u02e2\3\2\2\2\36\u02e4\3\2\2\2"+
		" \u02f3\3\2\2\2\"\u0310\3\2\2\2$\u0326\3\2\2\2&\u032e\3\2\2\2(\u0336\3"+
		"\2\2\2*\u033e\3\2\2\2,\u0346\3\2\2\2.\u034e\3\2\2\2\60\u0356\3\2\2\2\62"+
		"\u0377\3\2\2\2\64\u038d\3\2\2\2\66\u038f\3\2\2\28\u03cc\3\2\2\2:\u0402"+
		"\3\2\2\2<\u041e\3\2\2\2>\u0435\3\2\2\2@\u0437\3\2\2\2B\u0459\3\2\2\2D"+
		"\u046e\3\2\2\2F\u0471\3\2\2\2H\u047b\3\2\2\2J\u04a3\3\2\2\2L\u04a5\3\2"+
		"\2\2N\u04af\3\2\2\2P\u04b1\3\2\2\2R\u04cb\3\2\2\2T\u04d4\3\2\2\2V\u04eb"+
		"\3\2\2\2X\u04f1\3\2\2\2Z\u04f5\3\2\2\2\\\u04fa\3\2\2\2^\u04fc\3\2\2\2"+
		"`\u050b\3\2\2\2b\u052a\3\2\2\2d\u0559\3\2\2\2f\u055b\3\2\2\2h\u057c\3"+
		"\2\2\2j\u0582\3\2\2\2l\u0584\3\2\2\2n\u0587\3\2\2\2p\u05a4\3\2\2\2r\u05a6"+
		"\3\2\2\2t\u05a8\3\2\2\2v\u0621\3\2\2\2x\u06a9\3\2\2\2z\u072d\3\2\2\2|"+
		"\u0751\3\2\2\2~\u0791\3\2\2\2\u0080\u082e\3\2\2\2\u0082\u084a\3\2\2\2"+
		"\u0084\u0866\3\2\2\2\u0086\u086a\3\2\2\2\u0088\u087f\3\2\2\2\u008a\u0881"+
		"\3\2\2\2\u008c\u08b0\3\2\2\2\u008e\u08b2\3\2\2\2\u0090\u08bc\3\2\2\2\u0092"+
		"\u08c1\3\2\2\2\u0094\u08c5\3\2\2\2\u0096\u08cf\3\2\2\2\u0098\u08da\3\2"+
		"\2\2\u009a\u08dc\3\2\2\2\u009c\u0907\3\2\2\2\u009e\u0909\3\2\2\2\u00a0"+
		"\u090d\3\2\2\2\u00a2\u097f\3\2\2\2\u00a4\u09a9\3\2\2\2\u00a6\u09ad\3\2"+
		"\2\2\u00a8\u09cf\3\2\2\2\u00aa\u09e7\3\2\2\2\u00ac\u0a14\3\2\2\2\u00ae"+
		"\u0a1c\3\2\2\2\u00b0\u0a33\3\2\2\2\u00b2\u0a3a\3\2\2\2\u00b4\u0a3c\3\2"+
		"\2\2\u00b6\u0a4d\3\2\2\2\u00b8\u0a6a\3\2\2\2\u00ba\u0a6c\3\2\2\2\u00bc"+
		"\u0a74\3\2\2\2\u00be\u0a76\3\2\2\2\u00c0\u0a79\3\2\2\2\u00c2\u0a7f\3\2"+
		"\2\2\u00c4\u0a84\3\2\2\2\u00c6\u0a8a\3\2\2\2\u00c8\u0a9b\3\2\2\2\u00ca"+
		"\u0a9d\3\2\2\2\u00cc\u0ab2\3\2\2\2\u00ce\u0ac4\3\2\2\2\u00d0\u0ac8\3\2"+
		"\2\2\u00d2\u0ad4\3\2\2\2\u00d4\u0ad6\3\2\2\2\u00d6\u0ad8\3\2\2\2\u00d8"+
		"\u0ada\3\2\2\2\u00da\u0adc\3\2\2\2\u00dc\u0aee\3\2\2\2\u00de\u0af0\3\2"+
		"\2\2\u00e0\u0af6\3\2\2\2\u00e2\u0aff\3\2\2\2\u00e4\u0b04\3\2\2\2\u00e6"+
		"\u0b15\3\2\2\2\u00e8\u0b25\3\2\2\2\u00ea\u0b31\3\2\2\2\u00ec\u0b47\3\2"+
		"\2\2\u00ee\u0b4b\3\2\2\2\u00f0\u0b54\3\2\2\2\u00f2\u0b59\3\2\2\2\u00f4"+
		"\u0b63\3\2\2\2\u00f6\u0b7c\3\2\2\2\u00f8\u0b7e\3\2\2\2\u00fa\u0b9a\3\2"+
		"\2\2\u00fc\u0b9c\3\2\2\2\u00fe\u0bb0\3\2\2\2\u0100\u0bc3\3\2\2\2\u0102"+
		"\u0bc5\3\2\2\2\u0104\u0bcf\3\2\2\2\u0106\u0bdf\3\2\2\2\u0108\u0be4\3\2"+
		"\2\2\u010a\u0bf3\3\2\2\2\u010c\u0c10\3\2\2\2\u010e\u0c12\3\2\2\2\u0110"+
		"\u0c18\3\2\2\2\u0112\u0c1a\3\2\2\2\u0114\u0c23\3\2\2\2\u0116\u0c2c\3\2"+
		"\2\2\u0118\u0c33\3\2\2\2\u011a\u0c38\3\2\2\2\u011c\u0c41\3\2\2\2\u011e"+
		"\u0c43\3\2\2\2\u0120\u0c4a\3\2\2\2\u0122\u0c50\3\2\2\2\u0124\u0c56\3\2"+
		"\2\2\u0126\u0c58\3\2\2\2\u0128\u0c5b\3\2\2\2\u012a\u0c5e\3\2\2\2\u012c"+
		"\u0c61\3\2\2\2\u012e\u0c64\3\2\2\2\u0130\u0c67\3\2\2\2\u0132\u0c69\3\2"+
		"\2\2\u0134\u0c6b\3\2\2\2\u0136\u0c6d\3\2\2\2\u0138\u0c93\3\2\2\2\u013a"+
		"\u0c9a\3\2\2\2\u013c\u0c9c\3\2\2\2\u013e\u0c9e\3\2\2\2\u0140\u0ca0\3\2"+
		"\2\2\u0142\u0ca8\3\2\2\2\u0144\u0cb4\3\2\2\2\u0146\u0cba\3\2\2\2\u0148"+
		"\u0cca\3\2\2\2\u014a\u0ccc\3\2\2\2\u014c\u0cd0\3\2\2\2\u014e\u0cd2\3\2"+
		"\2\2\u0150\u0cd6\3\2\2\2\u0152\u0cde\3\2\2\2\u0154\u0cf2\3\2\2\2\u0156"+
		"\u0cf4\3\2\2\2\u0158\u0cf6\3\2\2\2\u015a\u0cf8\3\2\2\2\u015c\u0d09\3\2"+
		"\2\2\u015e\u0d0b\3\2\2\2\u0160\u0d18\3\2\2\2\u0162\u0d1a\3\2\2\2\u0164"+
		"\u0d21\3\2\2\2\u0166\u0d2a\3\2\2\2\u0168\u0d47\3\2\2\2\u016a\u0d53\3\2"+
		"\2\2\u016c\u0d5d\3\2\2\2\u016e\u0d5f\3\2\2\2\u0170\u0d7f\3\2\2\2\u0172"+
		"\u0d81\3\2\2\2\u0174\u0d87\3\2\2\2\u0176\u0d90\3\2\2\2\u0178\u0d99\3\2"+
		"\2\2\u017a\u0d9e\3\2\2\2\u017c\u0db4\3\2\2\2\u017e\u0dbe\3\2\2\2\u0180"+
		"\u0dc8\3\2\2\2\u0182\u0dde\3\2\2\2\u0184\u0de0\3\2\2\2\u0186\u0deb\3\2"+
		"\2\2\u0188\u0df0\3\2\2\2\u018a\u0e5d\3\2\2\2\u018c\u0e5f\3\2\2\2\u018e"+
		"\u0e67\3\2\2\2\u0190\u0e6e\3\2\2\2\u0192\u0e76\3\2\2\2\u0194\u0e7d\3\2"+
		"\2\2\u0196\u0e81\3\2\2\2\u0198\u0e83\3\2\2\2\u019a\u0e85\3\2\2\2\u019c"+
		"\u0e8a\3\2\2\2\u019e\u0e8e\3\2\2\2\u01a0\u0e90\3\2\2\2\u01a2\u0e92\3\2"+
		"\2\2\u01a4\u0e94\3\2\2\2\u01a6\u0e96\3\2\2\2\u01a8\u0e98\3\2\2\2\u01aa"+
		"\u0e9a\3\2\2\2\u01ac\u0e9c\3\2\2\2\u01ae\u0ea6\3\2\2\2\u01b0\u0eb4\3\2"+
		"\2\2\u01b2\u0eb8\3\2\2\2\u01b4\u0eba\3\2\2\2\u01b6\u0ebc\3\2\2\2\u01b8"+
		"\u0ebe\3\2\2\2\u01ba\u0ec0\3\2\2\2\u01bc\u0ec5\3\2\2\2\u01be\u0ecc\3\2"+
		"\2\2\u01c0\u0ed3\3\2\2\2\u01c2\u0edf\3\2\2\2\u01c4\u0ee6\3\2\2\2\u01c6"+
		"\u0eea\3\2\2\2\u01c8\u0eec\3\2\2\2\u01ca\u0eee\3\2\2\2\u01cc\u0ef0\3\2"+
		"\2\2\u01ce\u0ef2\3\2\2\2\u01d0\u0ef4\3\2\2\2\u01d2\u0ef6\3\2\2\2\u01d4"+
		"\u0ef8\3\2\2\2\u01d6\u0efc\3\2\2\2\u01d8\u0f01\3\2\2\2\u01da\u0f08\3\2"+
		"\2\2\u01dc\u0f0c\3\2\2\2\u01de\u0f1f\3\2\2\2\u01e0\u0f21\3\2\2\2\u01e2"+
		"\u0f2a\3\2\2\2\u01e4\u0f2c\3\2\2\2\u01e6\u0f39\3\2\2\2\u01e8\u0f49\3\2"+
		"\2\2\u01ea\u0ff6\3\2\2\2\u01ec\u0ff8\3\2\2\2\u01ee\u1002\3\2\2\2\u01f0"+
		"\u1013\3\2\2\2\u01f2\u1024\3\2\2\2\u01f4\u103d\3\2\2\2\u01f6\u103f\3\2"+
		"\2\2\u01f8\u1061\3\2\2\2\u01fa\u1068\3\2\2\2\u01fc\u1079\3\2\2\2\u01fe"+
		"\u1082\3\2\2\2\u0200\u1086\3\2\2\2\u0202\u10a3\3\2\2\2\u0204\u10b9\3\2"+
		"\2\2\u0206\u10bb\3\2\2\2\u0208\u10bd\3\2\2\2\u020a\u10bf\3\2\2\2\u020c"+
		"\u10c1\3\2\2\2\u020e\u10c7\3\2\2\2\u0210\u10ca\3\2\2\2\u0212\u10d1\3\2"+
		"\2\2\u0214\u10d4\3\2\2\2\u0216\u10dc\3\2\2\2\u0218\u10e0\3\2\2\2\u021a"+
		"\u10fa\3\2\2\2\u021c\u1110\3\2\2\2\u021e\u1112\3\2\2\2\u0220\u1127\3\2"+
		"\2\2\u0222\u1136\3\2\2\2\u0224\u1153\3\2\2\2\u0226\u117a\3\2\2\2\u0228"+
		"\u1188\3\2\2\2\u022a\u1198\3\2\2\2\u022c\u11a5\3\2\2\2\u022e\u11a9\3\2"+
		"\2\2\u0230\u11ae\3\2\2\2\u0232\u11bb\3\2\2\2\u0234\u11c1\3\2\2\2\u0236"+
		"\u11c5\3\2\2\2\u0238\u11c8\3\2\2\2\u023a\u11d2\3\2\2\2\u023c\u11ed\3\2"+
		"\2\2\u023e\u11fc\3\2\2\2\u0240\u1216\3\2\2\2\u0242\u1218\3\2\2\2\u0244"+
		"\u121c\3\2\2\2\u0246\u122b\3\2\2\2\u0248\u122d\3\2\2\2\u024a\u024c\5\4"+
		"\3\2\u024b\u024a\3\2\2\2\u024c\u024f\3\2\2\2\u024d\u024b\3\2\2\2\u024d"+
		"\u024e\3\2\2\2\u024e\u0252\3\2\2\2\u024f\u024d\3\2\2\2\u0250\u0252\7\2"+
		"\2\3\u0251\u024d\3\2\2\2\u0251\u0250\3\2\2\2\u0252\3\3\2\2\2\u0253\u0255"+
		"\7t\2\2\u0254\u0253\3\2\2\2\u0254\u0255\3\2\2\2\u0255\u0268\3\2\2\2\u0256"+
		"\u0269\5\6\4\2\u0257\u0269\5\32\16\2\u0258\u0269\5\36\20\2\u0259\u0269"+
		"\5 \21\2\u025a\u0269\5\"\22\2\u025b\u0269\5$\23\2\u025c\u0269\5&\24\2"+
		"\u025d\u0269\5(\25\2\u025e\u0269\5*\26\2\u025f\u0269\5,\27\2\u0260\u0269"+
		"\5.\30\2\u0261\u0269\5\b\5\2\u0262\u0269\5\24\13\2\u0263\u0269\5\30\r"+
		"\2\u0264\u0269\5\64\33\2\u0265\u0269\5\66\34\2\u0266\u0269\58\35\2\u0267"+
		"\u0269\5> \2\u0268\u0256\3\2\2\2\u0268\u0257\3\2\2\2\u0268\u0258\3\2\2"+
		"\2\u0268\u0259\3\2\2\2\u0268\u025a\3\2\2\2\u0268\u025b\3\2\2\2\u0268\u025c"+
		"\3\2\2\2\u0268\u025d\3\2\2\2\u0268\u025e\3\2\2\2\u0268\u025f\3\2\2\2\u0268"+
		"\u0260\3\2\2\2\u0268\u0261\3\2\2\2\u0268\u0262\3\2\2\2\u0268\u0263\3\2"+
		"\2\2\u0268\u0264\3\2\2\2\u0268\u0265\3\2\2\2\u0268\u0266\3\2\2\2\u0268"+
		"\u0267\3\2\2\2\u0269\u0270\3\2\2\2\u026a\u0271\7\25\2\2\u026b\u026d\7"+
		"n\2\2\u026c\u026e\7\23\2\2\u026d\u026c\3\2\2\2\u026d\u026e\3\2\2\2\u026e"+
		"\u0271\3\2\2\2\u026f\u0271\7\2\2\3\u0270\u026a\3\2\2\2\u0270\u026b\3\2"+
		"\2\2\u0270\u026f\3\2\2\2\u0271\5\3\2\2\2\u0272\u0277\5\u0222\u0112\2\u0273"+
		"\u0277\5\u023a\u011e\2\u0274\u0277\5\u0226\u0114\2\u0275\u0277\5\u0224"+
		"\u0113\2\u0276\u0272\3\2\2\2\u0276\u0273\3\2\2\2\u0276\u0274\3\2\2\2\u0276"+
		"\u0275\3\2\2\2\u0277\7\3\2\2\2\u0278\u0279\7Z\2\2\u0279\u0283\5\n\6\2"+
		"\u027a\u027b\7\u00bf\2\2\u027b\u0284\7\u01af\2\2\u027c\u0281\7*\2\2\u027d"+
		"\u0281\7\u0099\2\2\u027e\u027f\7\u010c\2\2\u027f\u0281\t\2\2\2\u0280\u027c"+
		"\3\2\2\2\u0280\u027d\3\2\2\2\u0280\u027e\3\2\2\2\u0281\u0282\3\2\2\2\u0282"+
		"\u0284\7\u01af\2\2\u0283\u027a\3\2\2\2\u0283\u0280\3\2\2\2\u0283\u0284"+
		"\3\2\2\2\u0284\u0285\3\2\2\2\u0285\u028b\7T\2\2\u0286\u028a\5\16\b\2\u0287"+
		"\u028a\5\20\t\2\u0288\u028a\5\22\n\2\u0289\u0286\3\2\2\2\u0289\u0287\3"+
		"\2\2\2\u0289\u0288\3\2\2\2\u028a\u028d\3\2\2\2\u028b\u0289\3\2\2\2\u028b"+
		"\u028c\3\2\2\2\u028c\u028e\3\2\2\2\u028d\u028b\3\2\2\2\u028e\u0291\7\177"+
		"\2\2\u028f\u0292\5\u0226\u0114\2\u0290\u0292\5\f\7\2\u0291\u028f\3\2\2"+
		"\2\u0291\u0290\3\2\2\2\u0292\t\3\2\2\2\u0293\u0294\5\u0246\u0124\2\u0294"+
		"\13\3\2\2\2\u0295\u0296\5\u0246\u0124\2\u0296\r\3\2\2\2\u0297\u0298\7"+
		"\u01a1\2\2\u0298\u029c\7\u008d\2\2\u0299\u029a\7\u013b\2\2\u029a\u029c"+
		"\7\u008d\2\2\u029b\u0297\3\2\2\2\u029b\u0299\3\2\2\2\u029c\17\3\2\2\2"+
		"\u029d\u029e\7\u01a1\2\2\u029e\u02a8\7\u00f3\2\2\u029f\u02a0\7\u013b\2"+
		"\2\u02a0\u02a5\7\u00f3\2\2\u02a1\u02a2\7\u0123\2\2\u02a2\u02a6\7\u01ac"+
		"\2\2\u02a3\u02a4\7\u0123\2\2\u02a4\u02a6\7\u01ad\2\2\u02a5\u02a1\3\2\2"+
		"\2\u02a5\u02a3\3\2\2\2\u02a5\u02a6\3\2\2\2\u02a6\u02a8\3\2\2\2\u02a7\u029d"+
		"\3\2\2\2\u02a7\u029f\3\2\2\2\u02a8\21\3\2\2\2\u02a9\u02aa\7\u01a1\2\2"+
		"\u02aa\u02ab\7\u0102\2\2\u02ab\u02b0\7\u01ae\2\2\u02ac\u02ad\7\u013b\2"+
		"\2\u02ad\u02ae\7\u0102\2\2\u02ae\u02b0\7\u01ae\2\2\u02af\u02a9\3\2\2\2"+
		"\u02af\u02ac\3\2\2\2\u02b0\23\3\2\2\2\u02b1\u02b2\7Z\2\2\u02b2\u02b3\5"+
		"\u01ae\u00d8\2\u02b3\u02b4\7\u0120\2\2\u02b4\u02b5\7\3\2\2\u02b5\u02b6"+
		"\5\u019c\u00cf\2\u02b6\u02b8\5\u00a0Q\2\u02b7\u02b9\5\26\f\2\u02b8\u02b7"+
		"\3\2\2\2\u02b8\u02b9\3\2\2\2\u02b9\u02c2\3\2\2\2\u02ba\u02bb\7\26\2\2"+
		"\u02bb\u02bc\5\u019c\u00cf\2\u02bc\u02be\5\u00a0Q\2\u02bd\u02bf\5\26\f"+
		"\2\u02be\u02bd\3\2\2\2\u02be\u02bf\3\2\2\2\u02bf\u02c1\3\2\2\2\u02c0\u02ba"+
		"\3\2\2\2\u02c1\u02c4\3\2\2\2\u02c2\u02c0\3\2\2\2\u02c2\u02c3\3\2\2\2\u02c3"+
		"\u02c5\3\2\2\2\u02c4\u02c2\3\2\2\2\u02c5\u02c6\7\4\2\2\u02c6\25\3\2\2"+
		"\2\u02c7\u02c8\7\u00c1\2\2\u02c8\u02ce\7\u00c2\2\2\u02c9\u02ca\7\u00c1"+
		"\2\2\u02ca\u02cb\7\u00c2\2\2\u02cb\u02cc\7\u013b\2\2\u02cc\u02ce\7[\2"+
		"\2\u02cd\u02c7\3\2\2\2\u02cd\u02c9\3\2\2\2\u02ce\27\3\2\2\2\u02cf\u02d0"+
		"\7Z\2\2\u02d0\u02d5\5\f\7\2\u02d1\u02d2\7\26\2\2\u02d2\u02d4\5\f\7\2\u02d3"+
		"\u02d1\3\2\2\2\u02d4\u02d7\3\2\2\2\u02d5\u02d3\3\2\2\2\u02d5\u02d6\3\2"+
		"\2\2\u02d6\u02d8\3\2\2\2\u02d7\u02d5\3\2\2\2\u02d8\u02d9\7\u0115\2\2\u02d9"+
		"\31\3\2\2\2\u02da\u02db\7\"\2\2\u02db\u02dc\5\n\6\2\u02dc\u02dd\7T\2\2"+
		"\u02dd\u02de\7\177\2\2\u02de\u02df\7\u00f1\2\2\u02df\u02e0\7\u010e\2\2"+
		"\u02e0\u02e1\5\34\17\2\u02e1\33\3\2\2\2\u02e2\u02e3\5\u01dc\u00ef\2\u02e3"+
		"\35\3\2\2\2\u02e4\u02e5\7$\2\2\u02e5\u02e6\7V\2\2\u02e6\u02ef\5\u01c6"+
		"\u00e4\2\u02e7\u02e8\7\64\2\2\u02e8\u02f0\5\u01ca\u00e6\2\u02e9\u02ea"+
		"\7\u0095\2\2\u02ea\u02f0\5\u01ca\u00e6\2\u02eb\u02ec\7\u0118\2\2\u02ec"+
		"\u02f0\5\u01cc\u00e7\2\u02ed\u02ee\7;\2\2\u02ee\u02f0\5\u019a\u00ce\2"+
		"\u02ef\u02e7\3\2\2\2\u02ef\u02e9\3\2\2\2\u02ef\u02eb\3\2\2\2\u02ef\u02ed"+
		"\3\2\2\2\u02f0\u02f1\3\2\2\2\u02f1\u02ef\3\2\2\2\u02f1\u02f2\3\2\2\2\u02f2"+
		"\37\3\2\2\2\u02f3\u0306\7$\2\2\u02f4\u02f5\7\u0083\2\2\u02f5\u0301\5\u01d8"+
		"\u00ed\2\u02f6\u02f7\7\3\2\2\u02f7\u02fc\5t;\2\u02f8\u02f9\7\26\2\2\u02f9"+
		"\u02fb\5t;\2\u02fa\u02f8\3\2\2\2\u02fb\u02fe\3\2\2\2\u02fc\u02fa\3\2\2"+
		"\2\u02fc\u02fd\3\2\2\2\u02fd\u02ff\3\2\2\2\u02fe\u02fc\3\2\2\2\u02ff\u0300"+
		"\7\4\2\2\u0300\u0302\3\2\2\2\u0301\u02f6\3\2\2\2\u0301\u0302\3\2\2\2\u0302"+
		"\u0307\3\2\2\2\u0303\u0304\7\u0113\2\2\u0304\u0305\7\u0083\2\2\u0305\u0307"+
		"\5\u01da\u00ee\2\u0306\u02f4\3\2\2\2\u0306\u0303\3\2\2\2\u0307\u0309\3"+
		"\2\2\2\u0308\u030a\7\u00f0\2\2\u0309\u0308\3\2\2\2\u0309\u030a\3\2\2\2"+
		"\u030a\u030c\3\2\2\2\u030b\u030d\5x=\2\u030c\u030b\3\2\2\2\u030d\u030e"+
		"\3\2\2\2\u030e\u030c\3\2\2\2\u030e\u030f\3\2\2\2\u030f!\3\2\2\2\u0310"+
		"\u0311\7$\2\2\u0311\u0312\7\u0094\2\2\u0312\u0314\5\u01bc\u00df\2\u0313"+
		"\u0315\5b\62\2\u0314\u0313\3\2\2\2\u0314\u0315\3\2\2\2\u0315\u0319\3\2"+
		"\2\2\u0316\u0318\5d\63\2\u0317\u0316\3\2\2\2\u0318\u031b\3\2\2\2\u0319"+
		"\u0317\3\2\2\2\u0319\u031a\3\2\2\2\u031a\u0324\3\2\2\2\u031b\u0319\3\2"+
		"\2\2\u031c\u0321\5f\64\2\u031d\u031e\7\26\2\2\u031e\u0320\5f\64\2\u031f"+
		"\u031d\3\2\2\2\u0320\u0323\3\2\2\2\u0321\u031f\3\2\2\2\u0321\u0322\3\2"+
		"\2\2\u0322\u0325\3\2\2\2\u0323\u0321\3\2\2\2\u0324\u031c\3\2\2\2\u0324"+
		"\u0325\3\2\2\2\u0325#\3\2\2\2\u0326\u0327\7$\2\2\u0327\u0328\7\u01d6\2"+
		"\2\u0328\u032c\5\u01be\u00e0\2\u0329\u032d\7\u01d7\2\2\u032a\u032d\7_"+
		"\2\2\u032b\u032d\5b\62\2\u032c\u0329\3\2\2\2\u032c\u032a\3\2\2\2\u032c"+
		"\u032b\3\2\2\2\u032d%\3\2\2\2\u032e\u032f\7$\2\2\u032f\u0330\7\u01d8\2"+
		"\2\u0330\u0334\5\u01c0\u00e1\2\u0331\u0335\7\u01d7\2\2\u0332\u0335\7_"+
		"\2\2\u0333\u0335\5b\62\2\u0334\u0331\3\2\2\2\u0334\u0332\3\2\2\2\u0334"+
		"\u0333\3\2\2\2\u0335\'\3\2\2\2\u0336\u0337\7$\2\2\u0337\u0338\7\u00e3"+
		"\2\2\u0338\u033a\5\u01c2\u00e2\2\u0339\u033b\5z>\2\u033a\u0339\3\2\2\2"+
		"\u033b\u033c\3\2\2\2\u033c\u033a\3\2\2\2\u033c\u033d\3\2\2\2\u033d)\3"+
		"\2\2\2\u033e\u033f\7$\2\2\u033f\u0340\7\u010d\2\2\u0340\u0342\5\u01c4"+
		"\u00e3\2\u0341\u0343\5|?\2\u0342\u0341\3\2\2\2\u0343\u0344\3\2\2\2\u0344"+
		"\u0342\3\2\2\2\u0344\u0345\3\2\2\2\u0345+\3\2\2\2\u0346\u0347\7$\2\2\u0347"+
		"\u0348\7\u0118\2\2\u0348\u034a\5\u01cc\u00e7\2\u0349\u034b\5~@\2\u034a"+
		"\u0349\3\2\2\2\u034b\u034c\3\2\2\2\u034c\u034a\3\2\2\2\u034c\u034d\3\2"+
		"\2\2\u034d-\3\2\2\2\u034e\u034f\7$\2\2\u034f\u0350\7\u0120\2\2\u0350\u0352"+
		"\5\u01b0\u00d9\2\u0351\u0353\5\u0080A\2\u0352\u0351\3\2\2\2\u0353\u0354"+
		"\3\2\2\2\u0354\u0352\3\2\2\2\u0354\u0355\3\2\2\2\u0355/\3\2\2\2\u0356"+
		"\u0357\7\\\2\2\u0357\u0358\7\u0081\2\2\u0358\u035a\5\u01ae\u00d8\2\u0359"+
		"\u035b\5\u01f0\u00f9\2\u035a\u0359\3\2\2\2\u035a\u035b\3\2\2\2\u035b\u035d"+
		"\3\2\2\2\u035c\u035e\5\u01a8\u00d5\2\u035d\u035c\3\2\2\2\u035d\u035e\3"+
		"\2\2\2\u035e\u0360\3\2\2\2\u035f\u0361\5^\60\2\u0360\u035f\3\2\2\2\u0360"+
		"\u0361\3\2\2\2\u0361\u0364\3\2\2\2\u0362\u0363\7\u010e\2\2\u0363\u0365"+
		"\5J&\2\u0364\u0362\3\2\2\2\u0364\u0365\3\2\2\2\u0365\u0366\3\2\2\2\u0366"+
		"\u0367\7\u0139\2\2\u0367\u0368\5\u0166\u00b4\2\u0368\u036a\3\2\2\2\u0369"+
		"\u036b\5\u0244\u0123\2\u036a\u0369\3\2\2\2\u036a\u036b\3\2\2\2\u036b\u0370"+
		"\3\2\2\2\u036c\u036f\5\u0230\u0119\2\u036d\u036f\5\u0234\u011b\2\u036e"+
		"\u036c\3\2\2\2\u036e\u036d\3\2\2\2\u036f\u0372\3\2\2\2\u0370\u036e\3\2"+
		"\2\2\u0370\u0371\3\2\2\2\u0371\u0375\3\2\2\2\u0372\u0370\3\2\2\2\u0373"+
		"\u0374\7\u00e8\2\2\u0374\u0376\7\30\2\2\u0375\u0373\3\2\2\2\u0375\u0376"+
		"\3\2\2\2\u0376\61\3\2\2\2\u0377\u0378\7\\\2\2\u0378\u0379\7\u0081\2\2"+
		"\u0379\u037b\5\u01ae\u00d8\2\u037a\u037c\5\u01a8\u00d5\2\u037b\u037a\3"+
		"\2\2\2\u037b\u037c\3\2\2\2\u037c\u037d\3\2\2\2\u037d\u037e\7\u0139\2\2"+
		"\u037e\u037f\7Q\2\2\u037f\u0380\7\u00c6\2\2\u0380\u0389\5\n\6\2\u0381"+
		"\u0382\7\177\2\2\u0382\u0385\7\u0101\2\2\u0383\u0386\5\u01dc\u00ef\2\u0384"+
		"\u0386\7\30\2\2\u0385\u0383\3\2\2\2\u0385\u0384\3\2\2\2\u0386\u0387\3"+
		"\2\2\2\u0387\u0388\7\u00c6\2\2\u0388\u038a\7\u0102\2\2\u0389\u0381\3\2"+
		"\2\2\u0389\u038a\3\2\2\2\u038a\63\3\2\2\2\u038b\u038e\5\60\31\2\u038c"+
		"\u038e\5\62\32\2\u038d\u038b\3\2\2\2\u038d\u038c\3\2\2\2\u038e\65\3\2"+
		"\2\2\u038f\u0390\7\u009a\2\2\u0390\u0391\7\u009c\2\2\u0391\u039d\5\u01ae"+
		"\u00d8\2\u0392\u0393\7\3\2\2\u0393\u0398\5\u019c\u00cf\2\u0394\u0395\7"+
		"\26\2\2\u0395\u0397\5\u019c\u00cf\2\u0396\u0394\3\2\2\2\u0397\u039a\3"+
		"\2\2\2\u0398\u0396\3\2\2\2\u0398\u0399\3\2\2\2\u0399\u039b\3\2\2\2\u039a"+
		"\u0398\3\2\2\2\u039b\u039c\7\4\2\2\u039c\u039e\3\2\2\2\u039d\u0392\3\2"+
		"\2\2\u039d\u039e\3\2\2\2\u039e\u03a0\3\2\2\2\u039f\u03a1\5^\60\2\u03a0"+
		"\u039f\3\2\2\2\u03a0\u03a1\3\2\2\2\u03a1\u03a5\3\2\2\2\u03a2\u03a3\7\u01df"+
		"\2\2\u03a3\u03a4\7\u0314\2\2\u03a4\u03a6\7\u012e\2\2\u03a5\u03a2\3\2\2"+
		"\2\u03a5\u03a6\3\2\2\2\u03a6\u03ca\3\2\2\2\u03a7\u03b4\7\u012f\2\2\u03a8"+
		"\u03b5\5V,\2\u03a9\u03aa\7\3\2\2\u03aa\u03af\5V,\2\u03ab\u03ac\7\26\2"+
		"\2\u03ac\u03ae\5V,\2\u03ad\u03ab\3\2\2\2\u03ae\u03b1\3\2\2\2\u03af\u03ad"+
		"\3\2\2\2\u03af\u03b0\3\2\2\2\u03b0\u03b2\3\2\2\2\u03b1\u03af\3\2\2\2\u03b2"+
		"\u03b3\7\4\2\2\u03b3\u03b5\3\2\2\2\u03b4\u03a8\3\2\2\2\u03b4\u03a9\3\2"+
		"\2\2\u03b5\u03cb\3\2\2\2\u03b6\u03b7\7\u013b\2\2\u03b7\u03bc\5\u0228\u0115"+
		"\2\u03b8\u03b9\7\26\2\2\u03b9\u03bb\5\u0228\u0115\2\u03ba\u03b8\3\2\2"+
		"\2\u03bb\u03be\3\2\2\2\u03bc\u03ba\3\2\2\2\u03bc\u03bd\3\2\2\2\u03bd\u03c0"+
		"\3\2\2\2\u03be\u03bc\3\2\2\2\u03bf\u03b6\3\2\2\2\u03bf\u03c0\3\2\2\2\u03c0"+
		"\u03c1\3\2\2\2\u03c1\u03c3\5\u023a\u011e\2\u03c2\u03c4\5\u0230\u0119\2"+
		"\u03c3\u03c2\3\2\2\2\u03c3\u03c4\3\2\2\2\u03c4\u03c7\3\2\2\2\u03c5\u03c6"+
		"\7\u00e8\2\2\u03c6\u03c8\7\30\2\2\u03c7\u03c5\3\2\2\2\u03c7\u03c8\3\2"+
		"\2\2\u03c8\u03cb\3\2\2\2\u03c9\u03cb\5`\61\2\u03ca\u03a7\3\2\2\2\u03ca"+
		"\u03bf\3\2\2\2\u03ca\u03c9\3\2\2\2\u03cb\67\3\2\2\2\u03cc\u03cd\7\u01db"+
		"\2\2\u03cd\u03ce\7\u009c\2\2\u03ce\u03d0\5\u01ae\u00d8\2\u03cf\u03d1\5"+
		"\u01e6\u00f4\2\u03d0\u03cf\3\2\2\2\u03d0\u03d1\3\2\2\2\u03d1\u03d3\3\2"+
		"\2\2\u03d2\u03d4\5^\60\2\u03d3\u03d2\3\2\2\2\u03d3\u03d4\3\2\2\2\u03d4"+
		"\u03d5\3\2\2\2\u03d5\u03e4\7\u012c\2\2\u03d6\u03d8\7\3\2\2\u03d7\u03d6"+
		"\3\2\2\2\u03d8\u03db\3\2\2\2\u03d9\u03d7\3\2\2\2\u03d9\u03da\3\2\2\2\u03da"+
		"\u03dc\3\2\2\2\u03db\u03d9\3\2\2\2\u03dc\u03e0\5\u01ea\u00f6\2\u03dd\u03df"+
		"\7\4\2\2\u03de\u03dd\3\2\2\2\u03df\u03e2\3\2\2\2\u03e0\u03de\3\2\2\2\u03e0"+
		"\u03e1\3\2\2\2\u03e1\u03e5\3\2\2\2\u03e2\u03e0\3\2\2\2\u03e3\u03e5\5@"+
		"!\2\u03e4\u03d9\3\2\2\2\u03e4\u03e3\3\2\2\2\u03e5\u03e6\3\2\2\2\u03e6"+
		"\u03e7\7\u00c9\2\2\u03e7\u03ef\5\u0166\u00b4\2\u03e8\u03e9\7\u0137\2\2"+
		"\u03e9\u03ea\5F$\2\u03ea\u03ed\7\u0122\2\2\u03eb\u03ee\5H%\2\u03ec\u03ee"+
		"\5R*\2\u03ed\u03eb\3\2\2\2\u03ed\u03ec\3\2\2\2\u03ee\u03f0\3\2\2\2\u03ef"+
		"\u03e8\3\2\2\2\u03f0\u03f1\3\2\2\2\u03f1\u03ef\3\2\2\2\u03f1\u03f2\3\2"+
		"\2\2\u03f2\u03f5\3\2\2\2\u03f3\u03f4\7i\2\2\u03f4\u03f6\7\u015d\2\2\u03f5"+
		"\u03f3\3\2\2\2\u03f5\u03f6\3\2\2\2\u03f6\u03fc\3\2\2\2\u03f7\u03f8\7\u00c1"+
		"\2\2\u03f8\u03f9\7\u01d9\2\2\u03f9\u03fa\7N\2\2\u03fa\u03fb\7\u00c9\2"+
		"\2\u03fb\u03fd\7\u01da\2\2\u03fc\u03f7\3\2\2\2\u03fc\u03fd\3\2\2\2\u03fd"+
		"\u0400\3\2\2\2\u03fe\u03ff\7\u00e8\2\2\u03ff\u0401\7\30\2\2\u0400\u03fe"+
		"\3\2\2\2\u0400\u0401\3\2\2\2\u04019\3\2\2\2\u0402\u0403\7\u012b\2\2\u0403"+
		"\u0405\5\u01ae\u00d8\2\u0404\u0406\5\u01f0\u00f9\2\u0405\u0404\3\2\2\2"+
		"\u0405\u0406\3\2\2\2\u0406\u0408\3\2\2\2\u0407\u0409\5\u01a8\u00d5\2\u0408"+
		"\u0407\3\2\2\2\u0408\u0409\3\2\2\2\u0409\u040b\3\2\2\2\u040a\u040c\5^"+
		"\60\2\u040b\u040a\3\2\2\2\u040b\u040c\3\2\2\2\u040c\u040d\3\2\2\2\u040d"+
		"\u040e\7\u010e\2\2\u040e\u0411\5J&\2\u040f\u0410\7\u0139\2\2\u0410\u0412"+
		"\5\u0166\u00b4\2\u0411\u040f\3\2\2\2\u0411\u0412\3\2\2\2\u0412\u0417\3"+
		"\2\2\2\u0413\u0416\5\u0230\u0119\2\u0414\u0416\5\u0234\u011b\2\u0415\u0413"+
		"\3\2\2\2\u0415\u0414\3\2\2\2\u0416\u0419\3\2\2\2\u0417\u0415\3\2\2\2\u0417"+
		"\u0418\3\2\2\2\u0418\u041c\3\2\2\2\u0419\u0417\3\2\2\2\u041a\u041b\7\u00e8"+
		"\2\2\u041b\u041d\7\30\2\2\u041c\u041a\3\2\2\2\u041c\u041d\3\2\2\2\u041d"+
		";\3\2\2\2\u041e\u041f\7\u012b\2\2\u041f\u0421\5\u01ae\u00d8\2\u0420\u0422"+
		"\5\u01a8\u00d5\2\u0421\u0420\3\2\2\2\u0421\u0422\3\2\2\2\u0422\u0423\3"+
		"\2\2\2\u0423\u0424\7\u010e\2\2\u0424\u0425\5J&\2\u0425\u0426\7\u0139\2"+
		"\2\u0426\u0427\7Q\2\2\u0427\u0428\7\u00c6\2\2\u0428\u0431\5\n\6\2\u0429"+
		"\u042a\7\177\2\2\u042a\u042d\7\u0101\2\2\u042b\u042e\5\u01dc\u00ef\2\u042c"+
		"\u042e\7\30\2\2\u042d\u042b\3\2\2\2\u042d\u042c\3\2\2\2\u042e\u042f\3"+
		"\2\2\2\u042f\u0430\7\u00c6\2\2\u0430\u0432\7\u0102\2\2\u0431\u0429\3\2"+
		"\2\2\u0431\u0432\3\2\2\2\u0432=\3\2\2\2\u0433\u0436\5:\36\2\u0434\u0436"+
		"\5<\37\2\u0435\u0433\3\2\2\2\u0435\u0434\3\2\2\2\u0436?\3\2\2\2\u0437"+
		"\u0438\7\3\2\2\u0438\u043b\7\u012f\2\2\u0439\u043c\5B\"\2\u043a\u043c"+
		"\5D#\2\u043b\u0439\3\2\2\2\u043b\u043a\3\2\2\2\u043c\u043d\3\2\2\2\u043d"+
		"\u043f\7\4\2\2\u043e\u0440\7)\2\2\u043f\u043e\3\2\2\2\u043f\u0440\3\2"+
		"\2\2\u0440\u0441\3\2\2\2\u0441\u0442\5\u01a8\u00d5\2\u0442\u0443\7\3\2"+
		"\2\u0443\u0448\5\u019c\u00cf\2\u0444\u0445\7\26\2\2\u0445\u0447\5\u019c"+
		"\u00cf\2\u0446\u0444\3\2\2\2\u0447\u044a\3\2\2\2\u0448\u0446\3\2\2\2\u0448"+
		"\u0449\3\2\2\2\u0449\u044b\3\2\2\2\u044a\u0448\3\2\2\2\u044b\u044c\7\4"+
		"\2\2\u044cA\3\2\2\2\u044d\u045a\5Z.\2\u044e\u044f\7\3\2\2\u044f\u0454"+
		"\5Z.\2\u0450\u0451\7\26\2\2\u0451\u0453\5Z.\2\u0452\u0450\3\2\2\2\u0453"+
		"\u0456\3\2\2\2\u0454\u0452\3\2\2\2\u0454\u0455\3\2\2\2\u0455\u0457\3\2"+
		"\2\2\u0456\u0454\3\2\2\2\u0457\u0458\7\4\2\2\u0458\u045a\3\2\2\2\u0459"+
		"\u044d\3\2\2\2\u0459\u044e\3\2\2\2\u045aC\3\2\2\2\u045b\u046f\5\\/\2\u045c"+
		"\u045d\7\3\2\2\u045d\u0462\5\\/\2\u045e\u045f\7\26\2\2\u045f\u0461\5\\"+
		"/\2\u0460\u045e\3\2\2\2\u0461\u0464\3\2\2\2\u0462\u0460\3\2\2\2\u0462"+
		"\u0463\3\2\2\2\u0463\u0465\3\2\2\2\u0464\u0462\3\2\2\2\u0465\u0466\7\4"+
		"\2\2\u0466\u0467\3\2\2\2\u0467\u046a\7\177\2\2\u0468\u046b\5\u01dc\u00ef"+
		"\2\u0469\u046b\7\30\2\2\u046a\u0468\3\2\2\2\u046a\u0469\3\2\2\2\u046b"+
		"\u046c\3\2\2\2\u046c\u046d\7\u018a\2\2\u046d\u046f\3\2\2\2\u046e\u045b"+
		"\3\2\2\2\u046e\u045c\3\2\2\2\u046fE\3\2\2\2\u0470\u0472\7\u00c1\2\2\u0471"+
		"\u0470\3\2\2\2\u0471\u0472\3\2\2\2\u0472\u0473\3\2\2\2\u0473\u0476\7\u01dc"+
		"\2\2\u0474\u0475\7\u0143\2\2\u0475\u0477\5\u0166\u00b4\2\u0476\u0474\3"+
		"\2\2\2\u0476\u0477\3\2\2\2\u0477G\3\2\2\2\u0478\u047c\5L\'\2\u0479\u047c"+
		"\5N(\2\u047a\u047c\5P)\2\u047b\u0478\3\2\2\2\u047b\u0479\3\2\2\2\u047b"+
		"\u047a\3\2\2\2\u047cI\3\2\2\2\u047d\u047e\5\u019c\u00cf\2\u047e\u047f"+
		"\7\b\2\2\u047f\u0487\5V,\2\u0480\u0481\7\26\2\2\u0481\u0482\5\u019c\u00cf"+
		"\2\u0482\u0483\7\b\2\2\u0483\u0484\5V,\2\u0484\u0486\3\2\2\2\u0485\u0480"+
		"\3\2\2\2\u0486\u0489\3\2\2\2\u0487\u0485\3\2\2\2\u0487\u0488\3\2\2\2\u0488"+
		"\u04a4\3\2\2\2\u0489\u0487\3\2\2\2\u048a\u048b\7\3\2\2\u048b\u0490\5\u019c"+
		"\u00cf\2\u048c\u048d\7\26\2\2\u048d\u048f\5\u019c\u00cf\2\u048e\u048c"+
		"\3\2\2\2\u048f\u0492\3\2\2\2\u0490\u048e\3\2\2\2\u0490\u0491\3\2\2\2\u0491"+
		"\u0493\3\2\2\2\u0492\u0490\3\2\2\2\u0493\u0494\7\4\2\2\u0494\u0495\7\b"+
		"\2\2\u0495\u0496\7\3\2\2\u0496\u049b\5V,\2\u0497\u0498\7\26\2\2\u0498"+
		"\u049a\5V,\2\u0499\u0497\3\2\2\2\u049a\u049d\3\2\2\2\u049b\u0499\3\2\2"+
		"\2\u049b\u049c\3\2\2\2\u049c\u04a0\3\2\2\2\u049d\u049b\3\2\2\2\u049e\u04a0"+
		"\5\u023a\u011e\2\u049f\u048a\3\2\2\2\u049f\u049e\3\2\2\2\u04a0\u04a1\3"+
		"\2\2\2\u04a1\u04a2\7\4\2\2\u04a2\u04a4\3\2\2\2\u04a3\u047d\3\2\2\2\u04a3"+
		"\u049f\3\2\2\2\u04a4K\3\2\2\2\u04a5\u04a6\7\u012b\2\2\u04a6\u04a7\7\u010e"+
		"\2\2\u04a7\u04ac\5J&\2\u04a8\u04a9\7\26\2\2\u04a9\u04ab\5J&\2\u04aa\u04a8"+
		"\3\2\2\2\u04ab\u04ae\3\2\2\2\u04ac\u04aa\3\2\2\2\u04ac\u04ad\3\2\2\2\u04ad"+
		"M\3\2\2\2\u04ae\u04ac\3\2\2\2\u04af\u04b0\7\\\2\2\u04b0O\3\2\2\2\u04b1"+
		"\u04b2\7\u009a\2\2\u04b2\u04b3\7\3\2\2\u04b3\u04b8\5\u019c\u00cf\2\u04b4"+
		"\u04b5\7\26\2\2\u04b5\u04b7\5\u019c\u00cf\2\u04b6\u04b4\3\2\2\2\u04b7"+
		"\u04ba\3\2\2\2\u04b8\u04b6\3\2\2\2\u04b8\u04b9\3\2\2\2\u04b9\u04bb\3\2"+
		"\2\2\u04ba\u04b8\3\2\2\2\u04bb\u04bc\7\4\2\2\u04bc\u04c9\7\u012f\2\2\u04bd"+
		"\u04ca\5V,\2\u04be\u04bf\7\3\2\2\u04bf\u04c4\5V,\2\u04c0\u04c1\7\26\2"+
		"\2\u04c1\u04c3\5V,\2\u04c2\u04c0\3\2\2\2\u04c3\u04c6\3\2\2\2\u04c4\u04c2"+
		"\3\2\2\2\u04c4\u04c5\3\2\2\2\u04c5\u04c7\3\2\2\2\u04c6\u04c4\3\2\2\2\u04c7"+
		"\u04c8\7\4\2\2\u04c8\u04ca\3\2\2\2\u04c9\u04bd\3\2\2\2\u04c9\u04be\3\2"+
		"\2\2\u04caQ\3\2\2\2\u04cb\u04cc\7\u010f\2\2\u04cc\u04ce\7\u01dd\2\2\u04cd"+
		"\u04cf\7\u012e\2\2\u04ce\u04cd\3\2\2\2\u04ce\u04cf\3\2\2\2\u04cf\u04d0"+
		"\3\2\2\2\u04d0\u04d2\7\27\2\2\u04d1\u04d3\5T+\2\u04d2\u04d1\3\2\2\2\u04d2"+
		"\u04d3\3\2\2\2\u04d3S\3\2\2\2\u04d4\u04d5\7\u010e\2\2\u04d5\u04d6\7\u01de"+
		"\2\2\u04d6\u04d7\7\b\2\2\u04d7\u04dd\5\u00dco\2\u04d8\u04d9\5\u00dan\2"+
		"\u04d9\u04da\5\u00dco\2\u04da\u04dc\3\2\2\2\u04db\u04d8\3\2\2\2\u04dc"+
		"\u04df\3\2\2\2\u04dd\u04db\3\2\2\2\u04dd\u04de\3\2\2\2\u04deU\3\2\2\2"+
		"\u04df\u04dd\3\2\2\2\u04e0\u04e6\5\u00dco\2\u04e1\u04e2\5\u00dan\2\u04e2"+
		"\u04e3\5\u00dco\2\u04e3\u04e5\3\2\2\2\u04e4\u04e1\3\2\2\2\u04e5\u04e8"+
		"\3\2\2\2\u04e6\u04e4\3\2\2\2\u04e6\u04e7\3\2\2\2\u04e7\u04ec\3\2\2\2\u04e8"+
		"\u04e6\3\2\2\2\u04e9\u04ec\7[\2\2\u04ea\u04ec\7\u00c2\2\2\u04eb\u04e0"+
		"\3\2\2\2\u04eb\u04e9\3\2\2\2\u04eb\u04ea\3\2\2\2\u04ecW\3\2\2\2\u04ed"+
		"\u04f2\5\u00dco\2\u04ee\u04f2\5\u01dc\u00ef\2\u04ef\u04f2\7[\2\2\u04f0"+
		"\u04f2\7\u00c2\2\2\u04f1\u04ed\3\2\2\2\u04f1\u04ee\3\2\2\2\u04f1\u04ef"+
		"\3\2\2\2\u04f1\u04f0\3\2\2\2\u04f2Y\3\2\2\2\u04f3\u04f6\5\u00dco\2\u04f4"+
		"\u04f6\7\u00c2\2\2\u04f5\u04f3\3\2\2\2\u04f5\u04f4\3\2\2\2\u04f6[\3\2"+
		"\2\2\u04f7\u04fb\5\u00dco\2\u04f8\u04fb\5\u01dc\u00ef\2\u04f9\u04fb\7"+
		"\u00c2\2\2\u04fa\u04f7\3\2\2\2\u04fa\u04f8\3\2\2\2\u04fa\u04f9\3\2\2\2"+
		"\u04fb]\3\2\2\2\u04fc\u04fd\7\u01d0\2\2\u04fd\u04fe\7\3\2\2\u04fe\u04ff"+
		"\5\u019c\u00cf\2\u04ff\u0506\5\u00a0Q\2\u0500\u0501\7\26\2\2\u0501\u0502"+
		"\5\u019c\u00cf\2\u0502\u0503\5\u00a0Q\2\u0503\u0505\3\2\2\2\u0504\u0500"+
		"\3\2\2\2\u0505\u0508\3\2\2\2\u0506\u0504\3\2\2\2\u0506\u0507\3\2\2\2\u0507"+
		"\u0509\3\2\2\2\u0508\u0506\3\2\2\2\u0509\u050a\7\4\2\2\u050a_\3\2\2\2"+
		"\u050b\u0518\7\u012f\2\2\u050c\u0519\5X-\2\u050d\u050e\7\3\2\2\u050e\u0513"+
		"\5X-\2\u050f\u0510\7\26\2\2\u0510\u0512\5X-\2\u0511\u050f\3\2\2\2\u0512"+
		"\u0515\3\2\2\2\u0513\u0511\3\2\2\2\u0513\u0514\3\2\2\2\u0514\u0516\3\2"+
		"\2\2\u0515\u0513\3\2\2\2\u0516\u0517\7\4\2\2\u0517\u0519\3\2\2\2\u0518"+
		"\u050c\3\2\2\2\u0518\u050d\3\2\2\2\u0519\u0520\3\2\2\2\u051a\u051d\7\177"+
		"\2\2\u051b\u051e\5\u01dc\u00ef\2\u051c\u051e\7\30\2\2\u051d\u051b\3\2"+
		"\2\2\u051d\u051c\3\2\2\2\u051e\u051f\3\2\2\2\u051f\u0521\7\u018a\2\2\u0520"+
		"\u051a\3\2\2\2\u0520\u0521\3\2\2\2\u0521\u0528\3\2\2\2\u0522\u0529\7\u01d9"+
		"\2\2\u0523\u0524\7\u00c1\2\2\u0524\u0525\7\u01d9\2\2\u0525\u0526\7N\2"+
		"\2\u0526\u0527\7\u00c9\2\2\u0527\u0529\7\u01da\2\2\u0528\u0522\3\2\2\2"+
		"\u0528\u0523\3\2\2\2\u0529a\3\2\2\2\u052a\u052f\7\u01d4\2\2\u052b\u052c"+
		"\7\u012c\2\2\u052c\u052d\7\u01c9\2\2\u052d\u052e\7\u01cb\2\2\u052e\u0530"+
		"\5p9\2\u052f\u052b\3\2\2\2\u052f\u0530\3\2\2\2\u0530c\3\2\2\2\u0531\u0532"+
		"\7\64\2\2\u0532\u055a\5\u01ca\u00e6\2\u0533\u0534\7@\2\2\u0534\u055a\t"+
		"\3\2\2\u0535\u0536\7\u01cd\2\2\u0536\u055a\t\3\2\2\u0537\u0538\7f\2\2"+
		"\u0538\u055a\7\u031e\2\2\u0539\u053a\7\u00db\2\2\u053a\u055a\7\u031e\2"+
		"\2\u053b\u055a\5h\65\2\u053c\u055a\5j\66\2\u053d\u055a\5l\67\2\u053e\u0540"+
		"\7\u00c1\2\2\u053f\u053e\3\2\2\2\u053f\u0540\3\2\2\2\u0540\u0541\3\2\2"+
		"\2\u0541\u055a\7A\2\2\u0542\u0544\7\u00c1\2\2\u0543\u0542\3\2\2\2\u0543"+
		"\u0544\3\2\2\2\u0544\u0545\3\2\2\2\u0545\u055a\7\u00d3\2\2\u0546\u0547"+
		"\7\u01cc\2\2\u0547\u055a\t\3\2\2\u0548\u0557\7\37\2\2\u0549\u054a\7D\2"+
		"\2\u054a\u054b\7\3\2\2\u054b\u054d\5\u019c\u00cf\2\u054c\u054e\t\4\2\2"+
		"\u054d\u054c\3\2\2\2\u054d\u054e\3\2\2\2\u054e\u054f\3\2\2\2\u054f\u0550"+
		"\7\4\2\2\u0550\u0558\3\2\2\2\u0551\u0552\7\u01d0\2\2\u0552\u0553\7D\2"+
		"\2\u0553\u0554\7\3\2\2\u0554\u0555\5\u019c\u00cf\2\u0555\u0556\7\4\2\2"+
		"\u0556\u0558\3\2\2\2\u0557\u0549\3\2\2\2\u0557\u0551\3\2\2\2\u0558\u055a"+
		"\3\2\2\2\u0559\u0531\3\2\2\2\u0559\u0533\3\2\2\2\u0559\u0535\3\2\2\2\u0559"+
		"\u0537\3\2\2\2\u0559\u0539\3\2\2\2\u0559\u053b\3\2\2\2\u0559\u053c\3\2"+
		"\2\2\u0559\u053d\3\2\2\2\u0559\u053f\3\2\2\2\u0559\u0543\3\2\2\2\u0559"+
		"\u0546\3\2\2\2\u0559\u0548\3\2\2\2\u055ae\3\2\2\2\u055b\u055c\7$\2\2\u055c"+
		"\u056c\5n8\2\u055d\u055f\5h\65\2\u055e\u055d\3\2\2\2\u055f\u0560\3\2\2"+
		"\2\u0560\u055e\3\2\2\2\u0560\u0561\3\2\2\2\u0561\u056b\3\2\2\2\u0562\u0564"+
		"\5j\66\2\u0563\u0562\3\2\2\2\u0564\u0565\3\2\2\2\u0565\u0563\3\2\2\2\u0565"+
		"\u0566\3\2\2\2\u0566\u056b\3\2\2\2\u0567\u056b\5l\67\2\u0568\u0569\7f"+
		"\2\2\u0569\u056b\7\u031e\2\2\u056a\u055e\3\2\2\2\u056a\u0563\3\2\2\2\u056a"+
		"\u0567\3\2\2\2\u056a\u0568\3\2\2\2\u056b\u056e\3\2\2\2\u056c\u056a\3\2"+
		"\2\2\u056c\u056d\3\2\2\2\u056dg\3\2\2\2\u056e\u056c\3\2\2\2\u056f\u0574"+
		"\7\u012c\2\2\u0570\u0571\7\u0132\2\2\u0571\u0575\5\u01c8\u00e5\2\u0572"+
		"\u0573\7\u0118\2\2\u0573\u0575\5\u01cc\u00e7\2\u0574\u0570\3\2\2\2\u0574"+
		"\u0572\3\2\2\2\u0575\u057d\3\2\2\2\u0576\u0577\7\u00e1\2\2\u0577\u057d"+
		"\7\30\2\2\u0578\u0579\7\u01d5\2\2\u0579\u057d\7\30\2\2\u057a\u057b\7p"+
		"\2\2\u057b\u057d\t\3\2\2\u057c\u056f\3\2\2\2\u057c\u0576\3\2\2\2\u057c"+
		"\u0578\3\2\2\2\u057c\u057a\3\2\2\2\u057di\3\2\2\2\u057e\u057f\7\u01ce"+
		"\2\2\u057f\u0583\7\30\2\2\u0580\u0581\7\u01d3\2\2\u0581\u0583\7\30\2\2"+
		"\u0582\u057e\3\2\2\2\u0582\u0580\3\2\2\2\u0583k\3\2\2\2\u0584\u0585\7"+
		"\u01cf\2\2\u0585\u0586\t\5\2\2\u0586m\3\2\2\2\u0587\u0588\7\u00d6\2\2"+
		"\u0588\u05a2\7\30\2\2\u0589\u058b\7o\2\2\u058a\u058c\7-\2\2\u058b\u058a"+
		"\3\2\2\2\u058b\u058c\3\2\2\2\u058c\u058d\3\2\2\2\u058d\u0591\7\3\2\2\u058e"+
		"\u0592\5\u0198\u00cd\2\u058f\u0592\7\u01d1\2\2\u0590\u0592\7\u01d2\2\2"+
		"\u0591\u058e\3\2\2\2\u0591\u058f\3\2\2\2\u0591\u0590\3\2\2\2\u0592\u059b"+
		"\3\2\2\2\u0593\u0597\7\26\2\2\u0594\u0598\5\u0198\u00cd\2\u0595\u0598"+
		"\7\u01d1\2\2\u0596\u0598\7\u01d2\2\2\u0597\u0594\3\2\2\2\u0597\u0595\3"+
		"\2\2\2\u0597\u0596\3\2\2\2\u0598\u059a\3\2\2\2\u0599\u0593\3\2\2\2\u059a"+
		"\u059d\3\2\2\2\u059b\u0599\3\2\2\2\u059b\u059c\3\2\2\2\u059c\u059e\3\2"+
		"\2\2\u059d\u059b\3\2\2\2\u059e\u05a0\7\4\2\2\u059f\u05a1\7\u0093\2\2\u05a0"+
		"\u059f\3\2\2\2\u05a0\u05a1\3\2\2\2\u05a1\u05a3\3\2\2\2\u05a2\u0589\3\2"+
		"\2\2\u05a2\u05a3\3\2\2\2\u05a3o\3\2\2\2\u05a4\u05a5\5r:\2\u05a5q\3\2\2"+
		"\2\u05a6\u05a7\7\u031e\2\2\u05a7s\3\2\2\2\u05a8\u05ab\5v<\2\u05a9\u05aa"+
		"\7)\2\2\u05aa\u05ac\7\u00ae\2\2\u05ab\u05a9\3\2\2\2\u05ab\u05ac\3\2\2"+
		"\2\u05acu\3\2\2\2\u05ad\u0622\7\u02ad\2\2\u05ae\u0622\7\u0270\2\2\u05af"+
		"\u0622\7\u026f\2\2\u05b0\u0622\7\u0223\2\2\u05b1\u05b5\t\6\2\2\u05b2\u05b6"+
		"\5\u018c\u00c7\2\u05b3\u05b4\7\3\2\2\u05b4\u05b6\7\4\2\2\u05b5\u05b2\3"+
		"\2\2\2\u05b5\u05b3\3\2\2\2\u05b6\u0622\3\2\2\2\u05b7\u05bb\7\u0242\2\2"+
		"\u05b8\u05bc\5\u018c\u00c7\2\u05b9\u05ba\7\3\2\2\u05ba\u05bc\7\4\2\2\u05bb"+
		"\u05b8\3\2\2\2\u05bb\u05b9\3\2\2\2\u05bc\u0622\3\2\2\2\u05bd\u05c1\7\u025e"+
		"\2\2\u05be\u05c2\5\u018c\u00c7\2\u05bf\u05c0\7\3\2\2\u05c0\u05c2\7\4\2"+
		"\2\u05c1\u05be\3\2\2\2\u05c1\u05bf\3\2\2\2\u05c2\u0622\3\2\2\2\u05c3\u0622"+
		"\7\u029c\2\2\u05c4\u05c6\7d\2\2\u05c5\u05c7\7\u00dd\2\2\u05c6\u05c5\3"+
		"\2\2\2\u05c6\u05c7\3\2\2\2\u05c7\u0622\3\2\2\2\u05c8\u05ca\t\7\2\2\u05c9"+
		"\u05cb\7\u01a0\2\2\u05ca\u05c9\3\2\2\2\u05ca\u05cb\3\2\2\2\u05cb\u05ce"+
		"\3\2\2\2\u05cc\u05ce\7\u02d5\2\2\u05cd\u05c8\3\2\2\2\u05cd\u05cc\3\2\2"+
		"\2\u05ce\u05d2\3\2\2\2\u05cf\u05d3\5\u018e\u00c8\2\u05d0\u05d1\7\3\2\2"+
		"\u05d1\u05d3\7\4\2\2\u05d2\u05cf\3\2\2\2\u05d2\u05d0\3\2\2\2\u05d2\u05d3"+
		"\3\2\2\2\u05d3\u05d6\3\2\2\2\u05d4\u05d5\7;\2\2\u05d5\u05d7\t\b\2\2\u05d6"+
		"\u05d4\3\2\2\2\u05d6\u05d7\3\2\2\2\u05d7\u05d9\3\2\2\2\u05d8\u05da\5\u0192"+
		"\u00ca\2\u05d9\u05d8\3\2\2\2\u05d9\u05da\3\2\2\2\u05da\u0622\3\2\2\2\u05db"+
		"\u05dc\t\7\2\2\u05dc\u05dd\7\u0162\2\2\u05dd\u05e0\7\u016f\2\2\u05de\u05e0"+
		"\7\u0234\2\2\u05df\u05db\3\2\2\2\u05df\u05de\3\2\2\2\u05e0\u05e4\3\2\2"+
		"\2\u05e1\u05e5\5\u018e\u00c8\2\u05e2\u05e3\7\3\2\2\u05e3\u05e5\7\4\2\2"+
		"\u05e4\u05e1\3\2\2\2\u05e4\u05e2\3\2\2\2\u05e4\u05e5\3\2\2\2\u05e5\u05e8"+
		"\3\2\2\2\u05e6\u05e7\7;\2\2\u05e7\u05e9\t\b\2\2\u05e8\u05e6\3\2\2\2\u05e8"+
		"\u05e9\3\2\2\2\u05e9\u05eb\3\2\2\2\u05ea\u05ec\5\u0192\u00ca\2\u05eb\u05ea"+
		"\3\2\2\2\u05eb\u05ec\3\2\2\2\u05ec\u0622\3\2\2\2\u05ed\u05f1\t\t\2\2\u05ee"+
		"\u05f2\5\u018e\u00c8\2\u05ef\u05f0\7\3\2\2\u05f0\u05f2\7\4\2\2\u05f1\u05ee"+
		"\3\2\2\2\u05f1\u05ef\3\2\2\2\u05f1\u05f2\3\2\2\2\u05f2\u05f5\3\2\2\2\u05f3"+
		"\u05f4\7;\2\2\u05f4\u05f6\t\b\2\2\u05f5\u05f3\3\2\2\2\u05f5\u05f6\3\2"+
		"\2\2\u05f6\u0622\3\2\2\2\u05f7\u05fb\7\u0224\2\2\u05f8\u05fc\5\u018c\u00c7"+
		"\2\u05f9\u05fa\7\3\2\2\u05fa\u05fc\7\4\2\2\u05fb\u05f8\3\2\2\2\u05fb\u05f9"+
		"\3\2\2\2\u05fb\u05fc\3\2\2\2\u05fc\u0622\3\2\2\2\u05fd\u05ff\7\u0224\2"+
		"\2\u05fe\u0600\7\u01a0\2\2\u05ff\u05fe\3\2\2\2\u05ff\u0600\3\2\2\2\u0600"+
		"\u0603\3\2\2\2\u0601\u0603\7\u02d4\2\2\u0602\u05fd\3\2\2\2\u0602\u0601"+
		"\3\2\2\2\u0603\u0607\3\2\2\2\u0604\u0608\5\u018c\u00c7\2\u0605\u0606\7"+
		"\3\2\2\u0606\u0608\7\4\2\2\u0607\u0604\3\2\2\2\u0607\u0605\3\2\2\2\u0607"+
		"\u0608\3\2\2\2\u0608\u0622\3\2\2\2\u0609\u060a\7\u0224\2\2\u060a\u060b"+
		"\7\u0162\2\2\u060b\u060e\7\u016f\2\2\u060c\u060e\7\u022a\2\2\u060d\u0609"+
		"\3\2\2\2\u060d\u060c\3\2\2\2\u060e\u0614\3\2\2\2\u060f\u0610\7\3\2\2\u0610"+
		"\u0611\7\30\2\2\u0611\u0612\7\u031e\2\2\u0612\u0613\3\2\2\2\u0613\u0615"+
		"\7\4\2\2\u0614\u060f\3\2\2\2\u0614\u0615\3\2\2\2\u0615\u0622\3\2\2\2\u0616"+
		"\u0622\7\u023a\2\2\u0617\u0622\7\u02bd\2\2\u0618\u061a\7\u02be\2\2\u0619"+
		"\u061b\5\u018c\u00c7\2\u061a\u0619\3\2\2\2\u061a\u061b\3\2\2\2\u061b\u061c"+
		"\3\2\2\2\u061c\u061d\t\n\2\2\u061d\u061e\7\u02bd\2\2\u061e\u0622\7\u0142"+
		"\2\2\u061f\u0622\7\u02a6\2\2\u0620\u0622\7\u01a2\2\2\u0621\u05ad\3\2\2"+
		"\2\u0621\u05ae\3\2\2\2\u0621\u05af\3\2\2\2\u0621\u05b0\3\2\2\2\u0621\u05b1"+
		"\3\2\2\2\u0621\u05b7\3\2\2\2\u0621\u05bd\3\2\2\2\u0621\u05c3\3\2\2\2\u0621"+
		"\u05c4\3\2\2\2\u0621\u05cd\3\2\2\2\u0621\u05df\3\2\2\2\u0621\u05ed\3\2"+
		"\2\2\u0621\u05f7\3\2\2\2\u0621\u0602\3\2\2\2\u0621\u060d\3\2\2\2\u0621"+
		"\u0616\3\2\2\2\u0621\u0617\3\2\2\2\u0621\u0618\3\2\2\2\u0621\u061f\3\2"+
		"\2\2\u0621\u0620\3\2\2\2\u0622w\3\2\2\2\u0623\u0624\7y\2\2\u0624\u0627"+
		"\7\u01bd\2\2\u0625\u0628\5\u00d0i\2\u0626\u0628\5\u0246\u0124\2\u0627"+
		"\u0625\3\2\2\2\u0627\u0626\3\2\2\2\u0628\u06aa\3\2\2\2\u0629\u062a\7\u00a5"+
		"\2\2\u062a\u06aa\t\13\2\2\u062b\u062c\7\u00d4\2\2\u062c\u062d\7\u011a"+
		"\2\2\u062d\u06aa\t\f\2\2\u062e\u0630\7\u00c1\2\2\u062f\u062e\3\2\2\2\u062f"+
		"\u0630\3\2\2\2\u0630\u0631\3\2\2\2\u0631\u06aa\7^\2\2\u0632\u0634\7\u00c1"+
		"\2\2\u0633\u0632\3\2\2\2\u0633\u0634\3\2\2\2\u0634\u0635\3\2\2\2\u0635"+
		"\u06aa\7\u0131\2\2\u0636\u0637\7\u00f4\2\2\u0637\u063a\7\u00c2\2\2\u0638"+
		"\u063a\7\u01b3\2\2\u0639\u0636\3\2\2\2\u0639\u0638\3\2\2\2\u063a\u063b"+
		"\3\2\2\2\u063b\u063c\7\u00c9\2\2\u063c\u063d\7\u00c2\2\2\u063d\u06aa\7"+
		"\u015f\2\2\u063e\u063f\7\u00c2\2\2\u063f\u06aa\7\66\2\2\u0640\u0641\7"+
		"\u00ba\2\2\u0641\u0642\7\u01c5\2\2\u0642\u064b\7U\2\2\u0643\u0644\7\u00e9"+
		"\2\2\u0644\u0645\7\u01c5\2\2\u0645\u064b\7U\2\2\u0646\u0647\7L\2\2\u0647"+
		"\u064b\7\u01c5\2\2\u0648\u0649\7\u00bf\2\2\u0649\u064b\7\u01c5\2\2\u064a"+
		"\u0640\3\2\2\2\u064a\u0643\3\2\2\2\u064a\u0646\3\2\2\2\u064a\u0648\3\2"+
		"\2\2\u064b\u06aa\3\2\2\2\u064c\u064e\7\u00bf\2\2\u064d\u064c\3\2\2\2\u064d"+
		"\u064e\3\2\2\2\u064e\u064f\3\2\2\2\u064f\u0650\7y\2\2\u0650\u06aa\7\u01b0"+
		"\2\2\u0651\u0652\7\u00d2\2\2\u0652\u0653\7\u00d9\2\2\u0653\u0658\5\u00d2"+
		"j\2\u0654\u0655\7\u00bf\2\2\u0655\u0656\7\u00d2\2\2\u0656\u0658\7\u00d9"+
		"\2\2\u0657\u0651\3\2\2\2\u0657\u0654\3\2\2\2\u0658\u06aa\3\2\2\2\u0659"+
		"\u065a\7\u00bf\2\2\u065a\u065e\7\u0106\2\2\u065b\u065c\7\u0106\2\2\u065c"+
		"\u065e\7\30\2\2\u065d\u0659\3\2\2\2\u065d\u065b\3\2\2\2\u065e\u06aa\3"+
		"\2\2\2\u065f\u0661\7\u00bf\2\2\u0660\u065f\3\2\2\2\u0660\u0661\3\2\2\2"+
		"\u0661\u0662\3\2\2\2\u0662\u0663\7}\2\2\u0663\u06aa\7\66\2\2\u0664\u0665"+
		"\t\r\2\2\u0665\u06aa\7\u01bf\2\2\u0666\u0668\7\u00bf\2\2\u0667\u0666\3"+
		"\2\2\2\u0667\u0668\3\2\2\2\u0668\u0669\3\2\2\2\u0669\u06aa\7Y\2\2\u066a"+
		"\u066b\7\u022c\2\2\u066b\u06aa\7\30\2\2\u066c\u066d\7\u00bf\2\2\u066d"+
		"\u0671\7C\2\2\u066e\u066f\7C\2\2\u066f\u0671\5\u00d4k\2\u0670\u066c\3"+
		"\2\2\2\u0670\u066e\3\2\2\2\u0671\u06aa\3\2\2\2\u0672\u0673\7\u013c\2\2"+
		"\u0673\u067b\7\u01b8\2\2\u0674\u067c\5\u0246\u0124\2\u0675\u0676\7\3\2"+
		"\2\u0676\u0677\5\u0246\u0124\2\u0677\u0678\7\26\2\2\u0678\u0679\7\20\2"+
		"\2\u0679\u067a\7\4\2\2\u067a\u067c\3\2\2\2\u067b\u0674\3\2\2\2\u067b\u0675"+
		"\3\2\2\2\u067c\u06aa\3\2\2\2\u067d\u0682\7,\2\2\u067e\u067f\7\u00bf\2"+
		"\2\u067f\u0683\7\u00ab\2\2\u0680\u0681\7\u00ab\2\2\u0681\u0683\7\30\2"+
		"\2\u0682\u067e\3\2\2\2\u0682\u0680\3\2\2\2\u0683\u06aa\3\2\2\2\u0684\u0685"+
		"\7\u0117\2\2\u0685\u0686\7\u01c2\2\2\u0686\u06aa\t\3\2\2\u0687\u0688\7"+
		"\u00e4\2\2\u0688\u0689\7\u0126\2\2\u0689\u06aa\t\16\2\2\u068a\u068b\7"+
		"\u010a\2\2\u068b\u06aa\t\17\2\2\u068c\u068d\7\u01c6\2\2\u068d\u068e\7"+
		" \2\2\u068e\u068f\7\u011e\2\2\u068f\u0690\7[\2\2\u0690\u0699\7\u01ba\2"+
		"\2\u0691\u0692\7\u01c6\2\2\u0692\u0693\7 \2\2\u0693\u0694\7\30\2\2\u0694"+
		"\u0699\7\u01ba\2\2\u0695\u0696\7N\2\2\u0696\u0697\7 \2\2\u0697\u0699\7"+
		"\u01b9\2\2\u0698\u068c\3\2\2\2\u0698\u0691\3\2\2\2\u0698\u0695\3\2\2\2"+
		"\u0699\u06aa\3\2\2\2\u069a\u069b\7\u0103\2\2\u069b\u069c\7\u01be\2\2\u069c"+
		"\u06aa\5\u00d6l\2\u069d\u069e\t\20\2\2\u069e\u069f\7\u01c4\2\2\u069f\u06aa"+
		"\7\u01c1\2\2\u06a0\u06a1\7\u0116\2\2\u06a1\u06aa\7\u01b7\2\2\u06a2\u06a4"+
		"\7\u00c1\2\2\u06a3\u06a2\3\2\2\2\u06a3\u06a4\3\2\2\2\u06a4\u06a5\3\2\2"+
		"\2\u06a5\u06aa\7\u01c3\2\2\u06a6\u06aa\7\u0113\2\2\u06a7\u06a8\7\u00d4"+
		"\2\2\u06a8\u06aa\7;\2\2\u06a9\u0623\3\2\2\2\u06a9\u0629\3\2\2\2\u06a9"+
		"\u062b\3\2\2\2\u06a9\u062f\3\2\2\2\u06a9\u0633\3\2\2\2\u06a9\u0639\3\2"+
		"\2\2\u06a9\u063e\3\2\2\2\u06a9\u064a\3\2\2\2\u06a9\u064d\3\2\2\2\u06a9"+
		"\u0657\3\2\2\2\u06a9\u065d\3\2\2\2\u06a9\u0660\3\2\2\2\u06a9\u0664\3\2"+
		"\2\2\u06a9\u0667\3\2\2\2\u06a9\u066a\3\2\2\2\u06a9\u0670\3\2\2\2\u06a9"+
		"\u0672\3\2\2\2\u06a9\u067d\3\2\2\2\u06a9\u0684\3\2\2\2\u06a9\u0687\3\2"+
		"\2\2\u06a9\u068a\3\2\2\2\u06a9\u0698\3\2\2\2\u06a9\u069a\3\2\2\2\u06a9"+
		"\u069d\3\2\2\2\u06a9\u06a0\3\2\2\2\u06a9\u06a3\3\2\2\2\u06a9\u06a6\3\2"+
		"\2\2\u06a9\u06a7\3\2\2\2\u06aay\3\2\2\2\u06ab\u06ad\7g\2\2\u06ac\u06ab"+
		"\3\2\2\2\u06ac\u06ad\3\2\2\2\u06ad\u06ae\3\2\2\2\u06ae\u06af\7\u00f1\2"+
		"\2\u06af\u06b0\t\21\2\2\u06b0\u072e\7\30\2\2\u06b1\u06b2\7y\2\2\u06b2"+
		"\u06b5\7\u01bd\2\2\u06b3\u06b6\5\u00d0i\2\u06b4\u06b6\5\u0246\u0124\2"+
		"\u06b5\u06b3\3\2\2\2\u06b5\u06b4\3\2\2\2\u06b6\u072e\3\2\2\2\u06b7\u06b8"+
		"\7\u00a5\2\2\u06b8\u072e\t\22\2\2\u06b9\u06ba\7\u00d4\2\2\u06ba\u06ca"+
		"\7\u011a\2\2\u06bb\u06cb\7\u01c5\2\2\u06bc\u06cb\7\u01e1\2\2\u06bd\u06be"+
		"\7\u0114\2\2\u06be\u06cb\7\66\2\2\u06bf\u06cb\7\u01e3\2\2\u06c0\u06c1"+
		"\7\u0110\2\2\u06c1\u06cb\7\66\2\2\u06c2\u06c6\7\u01e3\2\2\u06c3\u06c4"+
		"\7\u0110\2\2\u06c4\u06c6\7\66\2\2\u06c5\u06c2\3\2\2\2\u06c5\u06c3\3\2"+
		"\2\2\u06c6\u06c7\3\2\2\2\u06c7\u06c8\7\u013b\2\2\u06c8\u06cb\7\u00c3\2"+
		"\2\u06c9\u06cb\7\u01bb\2\2\u06ca\u06bb\3\2\2\2\u06ca\u06bc\3\2\2\2\u06ca"+
		"\u06bd\3\2\2\2\u06ca\u06bf\3\2\2\2\u06ca\u06c0\3\2\2\2\u06ca\u06c5\3\2"+
		"\2\2\u06ca\u06c9\3\2\2\2\u06cb\u072e\3\2\2\2\u06cc\u06ce\7\u00c1\2\2\u06cd"+
		"\u06cc\3\2\2\2\u06cd\u06ce\3\2\2\2\u06ce\u06cf\3\2\2\2\u06cf\u072e\7^"+
		"\2\2\u06d0\u06d2\7\u00c1\2\2\u06d1\u06d0\3\2\2\2\u06d1\u06d2\3\2\2\2\u06d2"+
		"\u06d3\3\2\2\2\u06d3\u072e\7\u0131\2\2\u06d4\u06d5\7\u00d2\2\2\u06d5\u06d6"+
		"\7\u00d9\2\2\u06d6\u06db\5\u00d2j\2\u06d7\u06d8\7\u00bf\2\2\u06d8\u06d9"+
		"\7\u00d2\2\2\u06d9\u06db\7\u00d9\2\2\u06da\u06d4\3\2\2\2\u06da\u06d7\3"+
		"\2\2\2\u06db\u072e\3\2\2\2\u06dc\u06dd\7\u00ba\2\2\u06dd\u06de\7\u01c5"+
		"\2\2\u06de\u06e7\7U\2\2\u06df\u06e0\7\u00e9\2\2\u06e0\u06e1\7\u01c5\2"+
		"\2\u06e1\u06e7\7U\2\2\u06e2\u06e3\7L\2\2\u06e3\u06e7\7\u01c5\2\2\u06e4"+
		"\u06e5\7\u00bf\2\2\u06e5\u06e7\7\u01c5\2\2\u06e6\u06dc\3\2\2\2\u06e6\u06df"+
		"\3\2\2\2\u06e6\u06e2\3\2\2\2\u06e6\u06e4\3\2\2\2\u06e7\u072e\3\2\2\2\u06e8"+
		"\u06ea\7\u00bf\2\2\u06e9\u06e8\3\2\2\2\u06e9\u06ea\3\2\2\2\u06ea\u06eb"+
		"\3\2\2\2\u06eb\u072e\7Y\2\2\u06ec\u06ed\7\u00bf\2\2\u06ed\u06f1\7C\2\2"+
		"\u06ee\u06ef\7C\2\2\u06ef\u06f1\5\u00d4k\2\u06f0\u06ec\3\2\2\2\u06f0\u06ee"+
		"\3\2\2\2\u06f1\u072e\3\2\2\2\u06f2\u06f3\7\u013c\2\2\u06f3\u06fb\7\u01b8"+
		"\2\2\u06f4\u06fc\5\u0246\u0124\2\u06f5\u06f6\7\3\2\2\u06f6\u06f7\5\u0246"+
		"\u0124\2\u06f7\u06f8\7\26\2\2\u06f8\u06f9\7\20\2\2\u06f9\u06fa\7\4\2\2"+
		"\u06fa\u06fc\3\2\2\2\u06fb\u06f4\3\2\2\2\u06fb\u06f5\3\2\2\2\u06fc\u072e"+
		"\3\2\2\2\u06fd\u0702\7,\2\2\u06fe\u06ff\7\u00bf\2\2\u06ff\u0703\7\u00ab"+
		"\2\2\u0700\u0701\7\u00ab\2\2\u0701\u0703\7\30\2\2\u0702\u06fe\3\2\2\2"+
		"\u0702\u0700\3\2\2\2\u0703\u072e\3\2\2\2\u0704\u0705\7\u0117\2\2\u0705"+
		"\u0706\7\u01c2\2\2\u0706\u072e\t\3\2\2\u0707\u0708\7\u00e4\2\2\u0708\u0709"+
		"\7\u0126\2\2\u0709\u072e\t\16\2\2\u070a\u070b\7\u010a\2\2\u070b\u072e"+
		"\t\17\2\2\u070c\u070d\7\u0103\2\2\u070d\u070e\7\u01be\2\2\u070e\u072e"+
		"\5\u00d6l\2\u070f\u0710\7F\2\2\u0710\u0711\7\u00c9\2\2\u0711\u0712\7\u00f3"+
		"\2\2\u0712\u072e\t\3\2\2\u0713\u0714\t\20\2\2\u0714\u0715\7\u01c4\2\2"+
		"\u0715\u072e\7\u01c1\2\2\u0716\u0717\7\u01b3\2\2\u0717\u0718\7\u00c9\2"+
		"\2\u0718\u0719\7\u00c2\2\2\u0719\u072e\7\u015f\2\2\u071a\u071b\7\u00c2"+
		"\2\2\u071b\u072e\7\66\2\2\u071c\u071d\7\u01c6\2\2\u071d\u071e\7 \2\2\u071e"+
		"\u071f\7\u011e\2\2\u071f\u0720\7[\2\2\u0720\u0729\7\u01ba\2\2\u0721\u0722"+
		"\7\u01c6\2\2\u0722\u0723\7 \2\2\u0723\u0724\7\30\2\2\u0724\u0729\7\u01ba"+
		"\2\2\u0725\u0726\7N\2\2\u0726\u0727\7 \2\2\u0727\u0729\7\u01b9\2\2\u0728"+
		"\u071c\3\2\2\2\u0728\u0721\3\2\2\2\u0728\u0725\3\2\2\2\u0729\u072e\3\2"+
		"\2\2\u072a\u072b\t\23\2\2\u072b\u072c\7\u01e2\2\2\u072c\u072e\7\u01e4"+
		"\2\2\u072d\u06ac\3\2\2\2\u072d\u06b1\3\2\2\2\u072d\u06b7\3\2\2\2\u072d"+
		"\u06b9\3\2\2\2\u072d\u06cd\3\2\2\2\u072d\u06d1\3\2\2\2\u072d\u06da\3\2"+
		"\2\2\u072d\u06e6\3\2\2\2\u072d\u06e9\3\2\2\2\u072d\u06f0\3\2\2\2\u072d"+
		"\u06f2\3\2\2\2";
	private static final String _serializedATNSegment1 =
		"\u072d\u06fd\3\2\2\2\u072d\u0704\3\2\2\2\u072d\u0707\3\2\2\2\u072d\u070a"+
		"\3\2\2\2\u072d\u070c\3\2\2\2\u072d\u070f\3\2\2\2\u072d\u0713\3\2\2\2\u072d"+
		"\u0716\3\2\2\2\u072d\u071a\3\2\2\2\u072d\u0728\3\2\2\2\u072d\u072a\3\2"+
		"\2\2\u072e{\3\2\2\2\u072f\u0732\7\u01e9\2\2\u0730\u0731\7\u013b\2\2\u0731"+
		"\u0733\7\30\2\2\u0732\u0730\3\2\2\2\u0732\u0733\3\2\2\2\u0733\u0752\3"+
		"\2\2\2\u0734\u0735\7\u01e8\2\2\u0735\u0736\7\65\2\2\u0736\u0752\7\30\2"+
		"\2\u0737\u0738\7\u00bf\2\2\u0738\u073c\7\u01d2\2\2\u0739\u073a\7\u01d2"+
		"\2\2\u073a\u073c\7\30\2\2\u073b\u0737\3\2\2\2\u073b\u0739\3\2\2\2\u073c"+
		"\u0752\3\2\2\2\u073d\u073e\7\u00bf\2\2\u073e\u0742\7\u01d1\2\2\u073f\u0740"+
		"\7\u01d1\2\2\u0740\u0742\7\30\2\2\u0741\u073d\3\2\2\2\u0741\u073f\3\2"+
		"\2\2\u0742\u0752\3\2\2\2\u0743\u0745\7\u00bf\2\2\u0744\u0743\3\2\2\2\u0744"+
		"\u0745\3\2\2\2\u0745\u0746\3\2\2\2\u0746\u0752\7\u01e7\2\2\u0747\u0748"+
		"\7\u00bf\2\2\u0748\u074c\7\u01e6\2\2\u0749\u074a\7\u01e6\2\2\u074a\u074c"+
		"\7\30\2\2\u074b\u0747\3\2\2\2\u074b\u0749\3\2\2\2\u074c\u0752\3\2\2\2"+
		"\u074d\u074f\7\u00bf\2\2\u074e\u074d\3\2\2\2\u074e\u074f\3\2\2\2\u074f"+
		"\u0750\3\2\2\2\u0750\u0752\7\u00ce\2\2\u0751\u072f\3\2\2\2\u0751\u0734"+
		"\3\2\2\2\u0751\u073b\3\2\2\2\u0751\u0741\3\2\2\2\u0751\u0744\3\2\2\2\u0751"+
		"\u074b\3\2\2\2\u0751\u074e\3\2\2\2\u0752}\3\2\2\2\u0753\u0754\7\37\2\2"+
		"\u0754\u0755\7\u0136\2\2\u0755\u0756\7\3\2\2\u0756\u075b\5\u01d4\u00eb"+
		"\2\u0757\u0758\7\26\2\2\u0758\u075a\5\u01d4\u00eb\2\u0759\u0757\3\2\2"+
		"\2\u075a\u075d\3\2\2\2\u075b\u0759\3\2\2\2\u075b\u075c\3\2\2\2\u075c\u075e"+
		"\3\2\2\2\u075d\u075b\3\2\2\2\u075e\u075f\7\4\2\2\u075f\u0792\3\2\2\2\u0760"+
		"\u0761\7\37\2\2\u0761\u0762\7\u0136\2\2\u0762\u0763\7\3\2\2\u0763\u0768"+
		"\7\27\2\2\u0764\u0765\7\26\2\2\u0765\u0767\7\27\2\2\u0766\u0764\3\2\2"+
		"\2\u0767\u076a\3\2\2\2\u0768\u0766\3\2\2\2\u0768\u0769\3\2\2\2\u0769\u076b"+
		"\3\2\2\2\u076a\u0768\3\2\2\2\u076b\u0792\7\4\2\2\u076c\u076d\7\u01ec\2"+
		"\2\u076d\u076e\7\u0136\2\2\u076e\u076f\7\3\2\2\u076f\u0774\5\u01d4\u00eb"+
		"\2\u0770\u0771\7\26\2\2\u0771\u0773\5\u01d4\u00eb\2\u0772\u0770\3\2\2"+
		"\2\u0773\u0776\3\2\2\2\u0774\u0772\3\2\2\2\u0774\u0775\3\2\2\2\u0775\u0777"+
		"\3\2\2\2\u0776\u0774\3\2\2\2\u0777\u0778\7\4\2\2\u0778\u0792\3\2\2\2\u0779"+
		"\u077a\7\u01ec\2\2\u077a\u077b\7\u0136\2\2\u077b\u077c\7\3\2\2\u077c\u0781"+
		"\7\27\2\2\u077d\u077e\7\26\2\2\u077e\u0780\7\27\2\2\u077f\u077d\3\2\2"+
		"\2\u0780\u0783\3\2\2\2\u0781\u077f\3\2\2\2\u0781\u0782\3\2\2\2\u0782\u0784"+
		"\3\2\2\2\u0783\u0781\3\2\2\2\u0784\u0792\7\4\2\2\u0785\u0786\7\u00bf\2"+
		"\2\u0786\u0787\7\u00a3\2\2\u0787\u0792\7\u00a4\2\2\u0788\u0789\7\u00a3"+
		"\2\2\u0789\u078a\7\u00a4\2\2\u078a\u0792\5\u01d6\u00ec\2\u078b\u078c\7"+
		"\u01ea\2\2\u078c\u0792\5\u01ce\u00e8\2\u078d\u078e\7\u01eb\2\2\u078e\u0792"+
		"\5\u01d0\u00e9\2\u078f\u0790\7\u01ed\2\2\u0790\u0792\5\u01d2\u00ea\2\u0791"+
		"\u0753\3\2\2\2\u0791\u0760\3\2\2\2\u0791\u076c\3\2\2\2\u0791\u0779\3\2"+
		"\2\2\u0791\u0785\3\2\2\2\u0791\u0788\3\2\2\2\u0791\u078b\3\2\2\2\u0791"+
		"\u078d\3\2\2\2\u0791\u078f\3\2\2\2\u0792\177\3\2\2\2\u0793\u0795\7\37"+
		"\2\2\u0794\u0796\7D\2\2\u0795\u0794\3\2\2\2\u0795\u0796\3\2\2\2\u0796"+
		"\u0797\3\2\2\2\u0797\u082f\5\u00ceh\2\u0798\u079a\7$\2\2\u0799\u079b\7"+
		"D\2\2\u079a\u0799\3\2\2\2\u079a\u079b\3\2\2\2\u079b\u079c\3\2\2\2\u079c"+
		"\u082f\5\u009aN\2\u079d\u079e\7\u00ed\2\2\u079e\u079f\7D\2\2\u079f\u07a0"+
		"\5\u019e\u00d0\2\u07a0\u07a1\7\u0123\2\2\u07a1\u07a2\5\u01a0\u00d1\2\u07a2"+
		"\u082f\3\2\2\2\u07a3\u07a5\7e\2\2\u07a4\u07a6\7D\2\2\u07a5\u07a4\3\2\2"+
		"\2\u07a5\u07a6\3\2\2\2\u07a6\u07a7\3\2\2\2\u07a7\u07a8\5\u019c\u00cf\2"+
		"\u07a8\u07a9\7\u00f0\2\2\u07a9\u082f\3\2\2\2\u07aa\u07ab\7\37\2\2\u07ab"+
		"\u07ad\7\u00da\2\2\u07ac\u07ae\7\177\2\2\u07ad\u07ac\3\2\2\2\u07ad\u07ae"+
		"\3\2\2\2\u07ae\u07af\3\2\2\2\u07af\u082f\5\u00ccg\2\u07b0\u07b4\7\37\2"+
		"\2\u07b1\u07b5\5\u00a6T\2\u07b2\u07b5\5\u00a8U\2\u07b3\u07b5\5\u00acW"+
		"\2\u07b4\u07b1\3\2\2\2\u07b4\u07b2\3\2\2\2\u07b4\u07b3\3\2\2\2\u07b5\u082f"+
		"\3\2\2\2\u07b6\u07c1\7e\2\2\u07b7\u07b8\7\u020a\2\2\u07b8\u07c2\7\u00a3"+
		"\2\2\u07b9\u07bf\7\u0129\2\2\u07ba\u07bb\7\u01fc\2\2\u07bb\u07bf\7\u00a3"+
		"\2\2\u07bc\u07bf\7>\2\2\u07bd\u07bf\7K\2\2\u07be\u07b9\3\2\2\2\u07be\u07ba"+
		"\3\2\2\2\u07be\u07bc\3\2\2\2\u07be\u07bd\3\2\2\2\u07bf\u07c0\3\2\2\2\u07c0"+
		"\u07c2\5\u01ba\u00de\2\u07c1\u07b7\3\2\2\2\u07c1\u07be\3\2\2\2\u07c2\u082f"+
		"\3\2\2\2\u07c3\u07c4\7\37\2\2\u07c4\u07c5\7\u00d6\2\2\u07c5\u07c6\7\65"+
		"\2\2\u07c6\u082f\5\u00aeX\2\u07c7\u07c8\7\37\2\2\u07c8\u07c9\7\u00d6\2"+
		"\2\u07c9\u082f\5\u00bc_\2\u07ca\u07cb\7$\2\2\u07cb\u07cc\7\u00d6\2\2\u07cc"+
		"\u07cd\7\30\2\2\u07cd\u082f\5\u00bc_\2\u07ce\u07cf\7\u020c\2\2\u07cf\u07d0"+
		"\7\u00d6\2\2\u07d0\u07d1\t\24\2\2\u07d1\u07d2\7\u0123\2\2\u07d2\u07d3"+
		"\7\u00a6\2\2\u07d3\u082f\5\u00be`\2\u07d4\u07d5\7e\2\2\u07d5\u082f\7\u00cf"+
		"\2\2\u07d6\u082f\5\u00b8]\2\u07d7\u07d9\7\37\2\2\u07d8\u07da\7\u011e\2"+
		"\2\u07d9\u07d8\3\2\2\2\u07d9\u07da\3\2\2\2\u07da\u07db\3\2\2\2\u07db\u07dc"+
		"\7\u0133\2\2\u07dc\u07dd\7\u019a\2\2\u07dd\u07de\7\u01fe\2\2\u07de\u07df"+
		"\7\u0120\2\2\u07df\u07e1\5\u01b2\u00da\2\u07e0\u07e2\5\u00c0a\2\u07e1"+
		"\u07e0\3\2\2\2\u07e1\u07e2\3\2\2\2\u07e2\u082f\3\2\2\2\u07e3\u07e5\7e"+
		"\2\2\u07e4\u07e6\7\u011e\2\2\u07e5\u07e4\3\2\2\2\u07e5\u07e6\3\2\2\2\u07e6"+
		"\u07e7\3\2\2\2\u07e7\u082f\7\u0133\2\2\u07e8\u07ec\7\37\2\2\u07e9\u07ea"+
		"\7\u00b6\2\2\u07ea\u07ed\7\u00e7\2\2\u07eb\u07ed\7\u00e7\2\2\u07ec\u07e9"+
		"\3\2\2\2\u07ec\u07eb\3\2\2\2\u07ec\u07ed\3\2\2\2\u07ed\u07ee\3\2\2\2\u07ee"+
		"\u082f\5\u00c2b\2\u07ef\u07f1\7$\2\2\u07f0\u07f2\7\u00b6\2\2\u07f1\u07f0"+
		"\3\2\2\2\u07f1\u07f2\3\2\2\2\u07f2\u07f3\3\2\2\2\u07f3\u07f4\7\u00e7\2"+
		"\2\u07f4\u082f\5\u00c4c\2\u07f5\u07f7\7e\2\2\u07f6\u07f8\7\u00b6\2\2\u07f7"+
		"\u07f6\3\2\2\2\u07f7\u07f8\3\2\2\2\u07f8\u07f9\3\2\2\2\u07f9\u082f\7\u00e7"+
		"\2\2\u07fa\u07fb\7U\2\2\u07fb\u07fc\7\67\2\2\u07fc\u082f\t\25\2\2\u07fd"+
		"\u07ff\7\u00c1\2\2\u07fe\u07fd\3\2\2\2\u07fe\u07ff\3\2\2\2\u07ff\u0800"+
		"\3\2\2\2\u0800\u0802\7\u0135\2\2\u0801\u0803\7\u022c\2\2\u0802\u0801\3"+
		"\2\2\2\u0802\u0803\3\2\2\2\u0803\u082f\3\2\2\2\u0804\u0805\7\37\2\2\u0805"+
		"\u0806\7?\2\2\u0806\u082f\5\u01b4\u00db\2\u0807\u0808\7e\2\2\u0808\u082f"+
		"\7?\2\2\u0809\u080a\7\37\2\2\u080a\u080b\7\u00f0\2\2\u080b\u080c\7\u00c9"+
		"\2\2\u080c\u082f\7e\2\2\u080d\u080e\7e\2\2\u080e\u080f\7\u00f0\2\2\u080f"+
		"\u0810\7\u00c9\2\2\u0810\u082f\7e\2\2\u0811\u0812\t\26\2\2\u0812\u0813"+
		"\7\u0101\2\2\u0813\u0814\7\u01ee\2\2\u0814\u082f\7\u01f6\2\2\u0815\u0816"+
		"\t\26\2\2\u0816\u0817\7D\2\2\u0817\u0818\7\u01ee\2\2\u0818\u082f\7\u01f6"+
		"\2\2\u0819\u081a\7\u01f1\2\2\u081a\u082f\t\3\2\2\u081b\u081c\7.\2\2\u081c"+
		"\u082f\t\27\2\2\u081d\u0820\7\u012d\2\2\u081e\u0821\5\u01b8\u00dd\2\u081f"+
		"\u0821\7\u00c2\2\2\u0820\u081e\3\2\2\2\u0820\u081f\3\2\2\2\u0821\u082f"+
		"\3\2\2\2\u0822\u0823\7\u01d7\2\2\u0823\u0824\7\u01f2\2\2\u0824\u0825\7"+
		"\u019a\2\2\u0825\u082f\5\u01b6\u00dc\2\u0826\u0827\7_\2\2\u0827\u082f"+
		"\7\u01f2\2\2\u0828\u0829\7\u00bf\2\2\u0829\u082a\7\u00a3\2\2\u082a\u082f"+
		"\7\u00a4\2\2\u082b\u082c\7\u00a3\2\2\u082c\u082d\7\u00a4\2\2\u082d\u082f"+
		"\5\u01d6\u00ec\2\u082e\u0793\3\2\2\2\u082e\u0798\3\2\2\2\u082e\u079d\3"+
		"\2\2\2\u082e\u07a3\3\2\2\2\u082e\u07aa\3\2\2\2\u082e\u07b0\3\2\2\2\u082e"+
		"\u07b6\3\2\2\2\u082e\u07c3\3\2\2\2\u082e\u07c7\3\2\2\2\u082e\u07ca\3\2"+
		"\2\2\u082e\u07ce\3\2\2\2\u082e\u07d4\3\2\2\2\u082e\u07d6\3\2\2\2\u082e"+
		"\u07d7\3\2\2\2\u082e\u07e3\3\2\2\2\u082e\u07e8\3\2\2\2\u082e\u07ef\3\2"+
		"\2\2\u082e\u07f5\3\2\2\2\u082e\u07fa\3\2\2\2\u082e\u07fe\3\2\2\2\u082e"+
		"\u0804\3\2\2\2\u082e\u0807\3\2\2\2\u082e\u0809\3\2\2\2\u082e\u080d\3\2"+
		"\2\2\u082e\u0811\3\2\2\2\u082e\u0815\3\2\2\2\u082e\u0819\3\2\2\2\u082e"+
		"\u081b\3\2\2\2\u082e\u081d\3\2\2\2\u082e\u0822\3\2\2\2\u082e\u0826\3\2"+
		"\2\2\u082e\u0828\3\2\2\2\u082e\u082b\3\2\2\2\u082f\u0081\3\2\2\2\u0830"+
		"\u084b\5\u0144\u00a3\2\u0831\u0832\7\u00c1\2\2\u0832\u084b\7\u00c2\2\2"+
		"\u0833\u084b\5\u0086D\2\u0834\u084b\5\u0088E\2\u0835\u0836\7\u0201\2\2"+
		"\u0836\u084b\7\u01fd\2\2\u0837\u0838\7)\2\2\u0838\u0839\7\u010a\2\2\u0839"+
		"\u084b\7\u00a4\2\2\u083a\u083b\7|\2\2\u083b\u083c\5\u01b8\u00dd\2\u083c"+
		"\u083d\7\3\2\2\u083d\u0842\5\u0198\u00cd\2\u083e\u083f\7\26\2\2\u083f"+
		"\u0841\5\u0198\u00cd\2\u0840\u083e\3\2\2\2\u0841\u0844\3\2\2\2\u0842\u0840"+
		"\3\2\2\2\u0842\u0843\3\2\2\2\u0843\u0845\3\2\2\2\u0844\u0842\3\2\2\2\u0845"+
		"\u0846\7\4\2\2\u0846\u084b\3\2\2\2\u0847\u0848\7\u0203\2\2\u0848\u0849"+
		"\7\u0275\2\2\u0849\u084b\7\30\2\2\u084a\u0830\3\2\2\2\u084a\u0831\3\2"+
		"\2\2\u084a\u0833\3\2\2\2\u084a\u0834\3\2\2\2\u084a\u0835\3\2\2\2\u084a"+
		"\u0837\3\2\2\2\u084a\u083a\3\2\2\2\u084a\u0847\3\2\2\2\u084b\u0083\3\2"+
		"\2\2\u084c\u0867\5\u0146\u00a4\2\u084d\u084e\7\u00c1\2\2\u084e\u0867\7"+
		"\u00c2\2\2\u084f\u0867\5\u0086D\2\u0850\u0867\5\u0088E\2\u0851\u0852\7"+
		"\u0201\2\2\u0852\u0867\7\u01fd\2\2\u0853\u0854\7)\2\2\u0854\u0855\7\u010a"+
		"\2\2\u0855\u0867\7\u00a4\2\2\u0856\u0857\7|\2\2\u0857\u0858\5\u01b8\u00dd"+
		"\2\u0858\u0859\7\3\2\2\u0859\u085e\5\u0198\u00cd\2\u085a\u085b\7\26\2"+
		"\2\u085b\u085d\5\u0198\u00cd\2\u085c\u085a\3\2\2\2\u085d\u0860\3\2\2\2"+
		"\u085e\u085c\3\2\2\2\u085e\u085f\3\2\2\2\u085f\u0861\3\2\2\2\u0860\u085e"+
		"\3\2\2\2\u0861\u0862\7\4\2\2\u0862\u0867\3\2\2\2\u0863\u0864\7\u0203\2"+
		"\2\u0864\u0865\7\u0275\2\2\u0865\u0867\7\30\2\2\u0866\u084c\3\2\2\2\u0866"+
		"\u084d\3\2\2\2\u0866\u084f\3\2\2\2\u0866\u0850\3\2\2\2\u0866\u0851\3\2"+
		"\2\2\u0866\u0853\3\2\2\2\u0866\u0856\3\2\2\2\u0866\u0863\3\2\2\2\u0867"+
		"\u0085\3\2\2\2\u0868\u086b\5\u00aaV\2\u0869\u086b\5\u00acW\2\u086a\u0868"+
		"\3\2\2\2\u086a\u0869\3\2\2\2\u086b\u0087\3\2\2\2\u086c\u0870\7\u0084\2"+
		"\2\u086d\u0871\7\u01f0\2\2\u086e\u086f\7\65\2\2\u086f\u0871\7[\2\2\u0870"+
		"\u086d\3\2\2\2\u0870\u086e\3\2\2\2\u0871\u0874\3\2\2\2\u0872\u0875\5\u008a"+
		"F\2\u0873\u0875\5\u008eH\2\u0874\u0872\3\2\2\2\u0874\u0873\3\2\2\2\u0875"+
		"\u0880\3\2\2\2\u0876\u0878\7\u0084\2\2\u0877\u0879\7\u01f0\2\2\u0878\u0877"+
		"\3\2\2\2\u0878\u0879\3\2\2\2\u0879\u087d\3\2\2\2\u087a\u087e\5\u0090I"+
		"\2\u087b\u087e\5\u0092J\2\u087c\u087e\5\u0094K\2\u087d\u087a\3\2\2\2\u087d"+
		"\u087b\3\2\2\2\u087d\u087c\3\2\2\2\u087e\u0880\3\2\2\2\u087f\u086c\3\2"+
		"\2\2\u087f\u0876\3\2\2\2\u0880\u0089\3\2\2\2\u0881\u0882\7)\2\2\u0882"+
		"\u0883\7\u0200\2\2\u0883\u0884\7\3\2\2\u0884\u088b\5\u008cG\2\u0885\u0887"+
		"\7\26\2\2\u0886\u0885\3\2\2\2\u0886\u0887\3\2\2\2\u0887\u0888\3\2\2\2"+
		"\u0888\u088a\5\u008cG\2\u0889\u0886\3\2\2\2\u088a\u088d\3\2\2\2\u088b"+
		"\u0889\3\2\2\2\u088b\u088c\3\2\2\2\u088c\u088e\3\2\2\2\u088d\u088b\3\2"+
		"\2\2\u088e\u088f\7\4\2\2\u088f\u008b\3\2\2\2\u0890\u0891\7\u020d\2\2\u0891"+
		"\u0892\7\u013b\2\2\u0892\u08b1\7\30\2\2\u0893\u0894\7\u01e8\2\2\u0894"+
		"\u0895\7\65\2\2\u0895\u08b1\7\30\2\2\u0896\u0897\7\u00bf\2\2\u0897\u089b"+
		"\7\u01d2\2\2\u0898\u0899\7\u01d2\2\2\u0899\u089b\7\30\2\2\u089a\u0896"+
		"\3\2\2\2\u089a\u0898\3\2\2\2\u089b\u08b1\3\2\2\2\u089c\u089d\7\u00bf\2"+
		"\2\u089d\u08a1\7\u01d1\2\2\u089e\u089f\7\u01d1\2\2\u089f\u08a1\7\30\2"+
		"\2\u08a0\u089c\3\2\2\2\u08a0\u089e\3\2\2\2\u08a1\u08b1\3\2\2\2\u08a2\u08a4"+
		"\7\u00bf\2\2\u08a3\u08a2\3\2\2\2\u08a3\u08a4\3\2\2\2\u08a4\u08a5\3\2\2"+
		"\2\u08a5\u08b1\7\u01e7\2\2\u08a6\u08a7\7\u00bf\2\2\u08a7\u08ab\7\u01e6"+
		"\2\2\u08a8\u08a9\7\u01e6\2\2\u08a9\u08ab\7\30\2\2\u08aa\u08a6\3\2\2\2"+
		"\u08aa\u08a8\3\2\2\2\u08ab\u08b1\3\2\2\2\u08ac\u08ae\7\u00bf\2\2\u08ad"+
		"\u08ac\3\2\2\2\u08ad\u08ae\3\2\2\2\u08ae\u08af\3\2\2\2\u08af\u08b1\7\u00ce"+
		"\2\2\u08b0\u0890\3\2\2\2\u08b0\u0893\3\2\2\2\u08b0\u089a\3\2\2\2\u08b0"+
		"\u08a0\3\2\2\2\u08b0\u08a3\3\2\2\2\u08b0\u08aa\3\2\2\2\u08b0\u08ad\3\2"+
		"\2\2\u08b1\u008d\3\2\2\2\u08b2\u08b3\7\177\2\2\u08b3\u08b4\7\u01f9\2\2"+
		"\u08b4\u08b5\7\u0101\2\2\u08b5\u08b6\7\u00c9\2\2\u08b6\u08b7\7\u012b\2"+
		"\2\u08b7\u08b8\7)\2\2\u08b8\u08b9\7\u0101\2\2\u08b9\u08ba\7\u0148\2\2"+
		"\u08ba\u08bb\7\u02be\2\2\u08bb\u008f\3\2\2\2\u08bc\u08bd\7)\2\2\u08bd"+
		"\u08be\7\u020f\2\2\u08be\u08bf\7\u020d\2\2\u08bf\u08c0\7\u01ff\2\2\u08c0"+
		"\u0091\3\2\2\2\u08c1\u08c2\7)\2\2\u08c2\u08c3\7\u0101\2\2\u08c3\u08c4"+
		"\t\30\2\2\u08c4\u0093\3\2\2\2\u08c5\u08c6\7)\2\2\u08c6\u08c7\7\3\2\2\u08c7"+
		"\u08c8\5\u0096L\2\u08c8\u08c9\7\4\2\2\u08c9\u0095\3\2\2\2\u08ca\u08cb"+
		"\7U\2\2\u08cb\u08cc\7\u0148\2\2\u08cc\u08d0\7\u0204\2\2\u08cd\u08d0\5"+
		"\u0134\u009b\2\u08ce\u08d0\5\u0098M\2\u08cf\u08ca\3\2\2\2\u08cf\u08cd"+
		"\3\2\2\2\u08cf\u08ce\3\2\2\2\u08d0\u0097\3\2\2\2\u08d1\u08d2\7\u020e\2"+
		"\2\u08d2\u08d3\7\23\2\2\u08d3\u08db\7\u0207\2\2\u08d4\u08d5\7\u020e\2"+
		"\2\u08d5\u08d6\7\23\2\2\u08d6\u08db\7\u0208\2\2\u08d7\u08d8\7\u020e\2"+
		"\2\u08d8\u08d9\7\23\2\2\u08d9\u08db\7\u0209\2\2\u08da\u08d1\3\2\2\2\u08da"+
		"\u08d4\3\2\2\2\u08da\u08d7\3\2\2\2\u08db\u0099\3\2\2\2\u08dc\u08de\5\u019c"+
		"\u00cf\2\u08dd\u08df\5\u009cO\2\u08de\u08dd\3\2\2\2\u08df\u08e0\3\2\2"+
		"\2\u08e0\u08de\3\2\2\2\u08e0\u08e1\3\2\2\2\u08e1\u009b\3\2\2\2\u08e2\u08e3"+
		"\7\u010e\2\2\u08e3\u08e4\7U\2\2\u08e4\u08e5\7\u0126\2\2\u08e5\u08e9\5"+
		"\u009eP\2\u08e6\u08e7\7\u0203\2\2\u08e7\u08e8\7\u0275\2\2\u08e8\u08ea"+
		"\7\30\2\2\u08e9\u08e6\3\2\2\2\u08e9\u08ea\3\2\2\2\u08ea\u0908\3\2\2\2"+
		"\u08eb\u08ec\7\u010e\2\2\u08ec\u0908\5\u0142\u00a2\2\u08ed\u08ee\7\u010e"+
		"\2\2\u08ee\u08ef\7\u0203\2\2\u08ef\u08f0\7\u0275\2\2\u08f0\u0908\7\30"+
		"\2\2\u08f1\u08f2\7\u010e\2\2\u08f2\u08f6\7\u0084\2\2\u08f3\u08f7\7\u01f0"+
		"\2\2\u08f4\u08f5\7\65\2\2\u08f5\u08f7\7[\2\2\u08f6\u08f3\3\2\2\2\u08f6"+
		"\u08f4\3\2\2\2\u08f7\u08f9\3\2\2\2\u08f8\u08fa\5\u00a4S\2\u08f9\u08f8"+
		"\3\2\2\2\u08f9\u08fa\3\2\2\2\u08fa\u0908\3\2\2\2\u08fb\u0908\5\u00a4S"+
		"\2\u08fc\u08fd\7\u010e\2\2\u08fd\u08ff\7\u0084\2\2\u08fe\u0900\7\u01f0"+
		"\2\2\u08ff\u08fe\3\2\2\2\u08ff\u0900\3\2\2\2\u0900\u0903\3\2\2\2\u0901"+
		"\u0904\5\u0092J\2\u0902\u0904\5\u0090I\2\u0903\u0901\3\2\2\2\u0903\u0902"+
		"\3\2\2\2\u0904\u0908\3\2\2\2\u0905\u0906\7e\2\2\u0906\u0908\7[\2\2\u0907"+
		"\u08e2\3\2\2\2\u0907\u08eb\3\2\2\2\u0907\u08ed\3\2\2\2\u0907\u08f1\3\2"+
		"\2\2\u0907\u08fb\3\2\2\2\u0907\u08fc\3\2\2\2\u0907\u0905\3\2\2\2\u0908"+
		"\u009d\3\2\2\2\u0909\u090a\5\u00a0Q\2\u090a\u009f\3\2\2\2\u090b\u090e"+
		"\5\u00a2R\2\u090c\u090e\5\u0194\u00cb\2\u090d\u090b\3\2\2\2\u090d\u090c"+
		"\3\2\2\2\u090e\u00a1\3\2\2\2\u090f\u0980\7\u02ad\2\2\u0910\u0980\7\u0270"+
		"\2\2\u0911\u0980\7\u026f\2\2\u0912\u0980\7\u0223\2\2\u0913\u0917\t\6\2"+
		"\2\u0914\u0918\5\u018c\u00c7\2\u0915\u0916\7\3\2\2\u0916\u0918\7\4\2\2"+
		"\u0917\u0914\3\2\2\2\u0917\u0915\3\2\2\2\u0918\u0980\3\2\2\2\u0919\u091d"+
		"\7\u0242\2\2\u091a\u091e\5\u018c\u00c7\2\u091b\u091c\7\3\2\2\u091c\u091e"+
		"\7\4\2\2\u091d\u091a\3\2\2\2\u091d\u091b\3\2\2\2\u091e\u0980\3\2\2\2\u091f"+
		"\u0923\7\u025e\2\2\u0920\u0924\5\u018c\u00c7\2\u0921\u0922\7\3\2\2\u0922"+
		"\u0924\7\4\2\2\u0923\u0920\3\2\2\2\u0923\u0921\3\2\2\2\u0924\u0980\3\2"+
		"\2\2\u0925\u0980\7\u029c\2\2\u0926\u0928\7d\2\2\u0927\u0929\7\u00dd\2"+
		"\2\u0928\u0927\3\2\2\2\u0928\u0929\3\2\2\2\u0929\u0980\3\2\2\2\u092a\u092c"+
		"\t\7\2\2\u092b\u092d\7\u01a0\2\2\u092c\u092b\3\2\2\2\u092c\u092d\3\2\2"+
		"\2\u092d\u0930\3\2\2\2\u092e\u0930\7\u02d5\2\2\u092f\u092a\3\2\2\2\u092f"+
		"\u092e\3\2\2\2\u0930\u0934\3\2\2\2\u0931\u0935\5\u018e\u00c8\2\u0932\u0933"+
		"\7\3\2\2\u0933\u0935\7\4\2\2\u0934\u0931\3\2\2\2\u0934\u0932\3\2\2\2\u0934"+
		"\u0935\3\2\2\2\u0935\u0939\3\2\2\2\u0936\u093a\5\u0192\u00ca\2\u0937\u0938"+
		"\7;\2\2\u0938\u093a\7\30\2\2\u0939\u0936\3\2\2\2\u0939\u0937\3\2\2\2\u0939"+
		"\u093a\3\2\2\2\u093a\u0980\3\2\2\2\u093b\u093c\t\7\2\2\u093c\u093d\7\u0162"+
		"\2\2\u093d\u0940\7\u016f\2\2\u093e\u0940\7\u0234\2\2\u093f\u093b\3\2\2"+
		"\2\u093f\u093e\3\2\2\2\u0940\u0944\3\2\2\2\u0941\u0945\5\u018e\u00c8\2"+
		"\u0942\u0943\7\3\2\2\u0943\u0945\7\4\2\2\u0944\u0941\3\2\2\2\u0944\u0942"+
		"\3\2\2\2\u0944\u0945\3\2\2\2\u0945\u0949\3\2\2\2\u0946\u094a\5\u0192\u00ca"+
		"\2\u0947\u0948\7;\2\2\u0948\u094a\7\30\2\2\u0949\u0946\3\2\2\2\u0949\u0947"+
		"\3\2\2\2\u0949\u094a\3\2\2\2\u094a\u0980\3\2\2\2\u094b\u094f\t\t\2\2\u094c"+
		"\u0950\5\u018e\u00c8\2\u094d\u094e\7\3\2\2\u094e\u0950\7\4\2\2\u094f\u094c"+
		"\3\2\2\2\u094f\u094d\3\2\2\2\u094f\u0950\3\2\2\2\u0950\u0953\3\2\2\2\u0951"+
		"\u0952\7;\2\2\u0952\u0954\7\30\2\2\u0953\u0951\3\2\2\2\u0953\u0954\3\2"+
		"\2\2\u0954\u0980\3\2\2\2\u0955\u0959\7\u0224\2\2\u0956\u095a\5\u018c\u00c7"+
		"\2\u0957\u0958\7\3\2\2\u0958\u095a\7\4\2\2\u0959\u0956\3\2\2\2\u0959\u0957"+
		"\3\2\2\2\u0959\u095a\3\2\2\2\u095a\u0980\3\2\2\2\u095b\u095d\7\u0224\2"+
		"\2\u095c\u095e\7\u01a0\2\2\u095d\u095c\3\2\2\2\u095d\u095e\3\2\2\2\u095e"+
		"\u0961\3\2\2\2\u095f\u0961\7\u02d4\2\2\u0960\u095b\3\2\2\2\u0960\u095f"+
		"\3\2\2\2\u0961\u0965\3\2\2\2\u0962\u0966\5\u018c\u00c7\2\u0963\u0964\7"+
		"\3\2\2\u0964\u0966\7\4\2\2\u0965\u0962\3\2\2\2\u0965\u0963\3\2\2\2\u0965"+
		"\u0966\3\2\2\2\u0966\u0980\3\2\2\2\u0967\u0968\7\u0224\2\2\u0968\u0969"+
		"\7\u0162\2\2\u0969\u096c\7\u016f\2\2\u096a\u096c\7\u022a\2\2\u096b\u0967"+
		"\3\2\2\2\u096b\u096a\3\2\2\2\u096c\u0972\3\2\2\2\u096d\u096e\7\3\2\2\u096e"+
		"\u096f\7\30\2\2\u096f\u0970\7\u031e\2\2\u0970\u0971\3\2\2\2\u0971\u0973"+
		"\7\4\2\2\u0972\u096d\3\2\2\2\u0972\u0973\3\2\2\2\u0973\u0980\3\2\2\2\u0974"+
		"\u0980\7\u023a\2\2\u0975\u0980\7\u02bd\2\2\u0976\u0978\7\u02be\2\2\u0977"+
		"\u0979\5\u018c\u00c7\2\u0978\u0977\3\2\2\2\u0978\u0979\3\2\2\2\u0979\u097a"+
		"\3\2\2\2\u097a\u097b\t\n\2\2\u097b\u097c\7\u02bd\2\2\u097c\u0980\7\u0142"+
		"\2\2\u097d\u0980\7\u02a6\2\2\u097e\u0980\7\u01a2\2\2\u097f\u090f\3\2\2"+
		"\2\u097f\u0910\3\2\2\2\u097f\u0911\3\2\2\2\u097f\u0912\3\2\2\2\u097f\u0913"+
		"\3\2\2\2\u097f\u0919\3\2\2\2\u097f\u091f\3\2\2\2\u097f\u0925\3\2\2\2\u097f"+
		"\u0926\3\2\2\2\u097f\u092f\3\2\2\2\u097f\u093f\3\2\2\2\u097f\u094b\3\2"+
		"\2\2\u097f\u0955\3\2\2\2\u097f\u0960\3\2\2\2\u097f\u096b\3\2\2\2\u097f"+
		"\u0974\3\2\2\2\u097f\u0975\3\2\2\2\u097f\u0976\3\2\2\2\u097f\u097d\3\2"+
		"\2\2\u097f\u097e\3\2\2\2\u0980\u00a3\3\2\2\2\u0981\u0984\7\u01e9\2\2\u0982"+
		"\u0983\7\u013b\2\2\u0983\u0985\7\30\2\2\u0984\u0982\3\2\2\2\u0984\u0985"+
		"\3\2\2\2\u0985\u09aa\3\2\2\2\u0986\u0987\7\u010e\2\2\u0987\u0988\7\u01e8"+
		"\2\2\u0988\u0989\7\65\2\2\u0989\u09aa\7\30\2\2\u098a\u098f\7\u010e\2\2"+
		"\u098b\u098c\7\u00bf\2\2\u098c\u0990\7\u01d2\2\2\u098d\u098e\7\u01d2\2"+
		"\2\u098e\u0990\7\30\2\2\u098f\u098b\3\2\2\2\u098f\u098d\3\2\2\2\u0990"+
		"\u09aa\3\2\2\2\u0991\u0996\7\u010e\2\2\u0992\u0993\7\u00bf\2\2\u0993\u0997"+
		"\7\u01d1\2\2\u0994\u0995\7\u01d1\2\2\u0995\u0997\7\30\2\2\u0996\u0992"+
		"\3\2\2\2\u0996\u0994\3\2\2\2\u0997\u09aa\3\2\2\2\u0998\u099a\7\u010e\2"+
		"\2\u0999\u099b\7\u00bf\2\2\u099a\u0999\3\2\2\2\u099a\u099b\3\2\2\2\u099b"+
		"\u099c\3\2\2\2\u099c\u09aa\7\u01e7\2\2\u099d\u09a2\7\u010e\2\2\u099e\u099f"+
		"\7\u00bf\2\2\u099f\u09a3\7\u01e6\2\2\u09a0\u09a1\7\u01e6\2\2\u09a1\u09a3"+
		"\7\30\2\2\u09a2\u099e\3\2\2\2\u09a2\u09a0\3\2\2\2\u09a3\u09aa\3\2\2\2"+
		"\u09a4\u09a6\7\u010e\2\2\u09a5\u09a7\7\u00bf\2\2\u09a6\u09a5\3\2\2\2\u09a6"+
		"\u09a7\3\2\2\2\u09a7\u09a8\3\2\2\2\u09a8\u09aa\7\u00ce\2\2\u09a9\u0981"+
		"\3\2\2\2\u09a9\u0986\3\2\2\2\u09a9\u098a\3\2\2\2\u09a9\u0991\3\2\2\2\u09a9"+
		"\u0998\3\2\2\2\u09a9\u099d\3\2\2\2\u09a9\u09a4\3\2\2\2\u09aa\u00a5\3\2"+
		"\2\2\u09ab\u09ac\7K\2\2\u09ac\u09ae\5\u01ba\u00de\2\u09ad\u09ab\3\2\2"+
		"\2\u09ad\u09ae\3\2\2\2\u09ae\u09b2\3\2\2\2\u09af\u09b0\7\u020a\2\2\u09b0"+
		"\u09b3\7\u00a3\2\2\u09b1\u09b3\7\u0129\2\2\u09b2\u09af\3\2\2\2\u09b2\u09b1"+
		"\3\2\2\2\u09b3\u09b4\3\2\2\2\u09b4\u09b5\7\3\2\2\u09b5\u09ba\5\u019c\u00cf"+
		"\2\u09b6\u09b7\7\26\2\2\u09b7\u09b9\5\u019c\u00cf\2\u09b8\u09b6\3\2\2"+
		"\2\u09b9\u09bc\3\2\2\2\u09ba\u09b8\3\2\2\2\u09ba\u09bb\3\2\2\2\u09bb\u09c1"+
		"\3\2\2\2\u09bc\u09ba\3\2\2\2\u09bd\u09be\7\26\2\2\u09be\u09bf\7\u01a8"+
		"\2\2\u09bf\u09c0\7\u01a1\2\2\u09c0\u09c2\7\u0206\2\2\u09c1\u09bd\3\2\2"+
		"\2\u09c1\u09c2\3\2\2\2\u09c2\u09c3\3\2\2\2\u09c3\u09c4\7\4\2\2\u09c4\u00a7"+
		"\3\2\2\2\u09c5\u09c6\7K\2\2\u09c6\u09c7\5\u01ba\u00de\2\u09c7\u09c8\7"+
		"\u01fc\2\2\u09c8\u09c9\7\u00a3\2\2\u09c9\u09d0\3\2\2\2\u09ca\u09cb\7\u01fc"+
		"\2\2\u09cb\u09cd\7\u00a3\2\2\u09cc\u09ce\5\u01ba\u00de\2\u09cd\u09cc\3"+
		"\2\2\2\u09cd\u09ce\3\2\2\2\u09ce\u09d0\3\2\2\2\u09cf\u09c5\3\2\2\2\u09cf"+
		"\u09ca\3\2\2\2\u09d0\u09d1\3\2\2\2\u09d1\u09d2\7\3\2\2\u09d2\u09d6\5\u019c"+
		"\u00cf\2\u09d3\u09d4\7\u00da\2\2\u09d4\u09d5\7\u01f3\2\2\u09d5\u09d7\7"+
		"\u02bd\2\2\u09d6\u09d3\3\2\2\2\u09d6\u09d7\3\2\2\2\u09d7\u09e1\3\2\2\2"+
		"\u09d8\u09d9\7\26\2\2\u09d9\u09dd\5\u019c\u00cf\2\u09da\u09db\7\u00da"+
		"\2\2\u09db\u09dc\7\u01f3\2\2\u09dc\u09de\7\u02bd\2\2\u09dd\u09da\3\2\2"+
		"\2\u09dd\u09de\3\2\2\2\u09de\u09e0\3\2\2\2\u09df\u09d8\3\2\2\2\u09e0\u09e3"+
		"\3\2\2\2\u09e1\u09df\3\2\2\2\u09e1\u09e2\3\2\2\2\u09e2\u09e4\3\2\2\2\u09e3"+
		"\u09e1\3\2\2\2\u09e4\u09e5\7\4\2\2\u09e5\u09e6\5\u00aaV\2\u09e6\u00a9"+
		"\3\2\2\2\u09e7\u09e8\7\u00ea\2\2\u09e8\u09e9\5\u01ae\u00d8\2\u09e9\u09ea"+
		"\7\3\2\2\u09ea\u09ee\5\u019c\u00cf\2\u09eb\u09ec\7\u00da\2\2\u09ec\u09ed"+
		"\7\u01f3\2\2\u09ed\u09ef\7\u02bd\2\2\u09ee\u09eb\3\2\2\2\u09ee\u09ef\3"+
		"\2\2\2\u09ef\u09f9\3\2\2\2\u09f0\u09f1\7\26\2\2\u09f1\u09f5\5\u019c\u00cf"+
		"\2\u09f2\u09f3\7\u00da\2\2\u09f3\u09f4\7\u01f3\2\2\u09f4\u09f6\7\u02bd"+
		"\2\2\u09f5\u09f2\3\2\2\2\u09f5\u09f6\3\2\2\2\u09f6\u09f8\3\2\2\2\u09f7"+
		"\u09f0\3\2\2\2\u09f8\u09fb\3\2\2\2\u09f9\u09f7\3\2\2\2\u09f9\u09fa\3\2"+
		"\2\2\u09fa\u09fc\3\2\2\2\u09fb\u09f9\3\2\2\2\u09fc\u0a07\7\4\2\2\u09fd"+
		"\u09fe\7\u00c9\2\2\u09fe\u0a05\7\\\2\2\u09ff\u0a06\7\u00f0\2\2\u0a00\u0a01"+
		"\7\u00bf\2\2\u0a01\u0a06\7\u01b0\2\2\u0a02\u0a06\7\u01f4\2\2\u0a03\u0a04"+
		"\7\u010e\2\2\u0a04\u0a06\7\u00c2\2\2\u0a05\u09ff\3\2\2\2\u0a05\u0a00\3"+
		"\2\2\2\u0a05\u0a02\3\2\2\2\u0a05\u0a03\3\2\2\2\u0a06\u0a08\3\2\2\2\u0a07"+
		"\u09fd\3\2\2\2\u0a07\u0a08\3\2\2\2\u0a08\u0a0a\3\2\2\2\u0a09\u0a0b\7\u00c1"+
		"\2\2\u0a0a\u0a09\3\2\2\2\u0a0a\u0a0b\3\2\2\2\u0a0b\u0a0c\3\2\2\2\u0a0c"+
		"\u0a10\7\u01fa\2\2\u0a0d\u0a0e\7\u01d7\2\2\u0a0e\u0a0f\7\u00e7\2\2\u0a0f"+
		"\u0a11\7\u00cb\2\2\u0a10\u0a0d\3\2\2\2\u0a10\u0a11\3\2\2\2\u0a11\u00ab"+
		"\3\2\2\2\u0a12\u0a13\7K\2\2\u0a13\u0a15\5\u01ba\u00de\2\u0a14\u0a12\3"+
		"\2\2\2\u0a14\u0a15\3\2\2\2\u0a15\u0a16\3\2\2\2\u0a16\u0a17\7>\2\2\u0a17"+
		"\u0a18\7\3\2\2\u0a18\u0a19\5\u0168\u00b5\2\u0a19\u0a1a\7\4\2\2\u0a1a\u00ad"+
		"\3\2\2\2\u0a1b\u0a1d\7\u0179\2\2\u0a1c\u0a1b\3\2\2\2\u0a1c\u0a1d\3\2\2"+
		"\2\u0a1d\u0a1e\3\2\2\2\u0a1e\u0a1f\7\3\2\2\u0a1f\u0a24\5\u00b0Y\2\u0a20"+
		"\u0a21\7\26\2\2\u0a21\u0a23\5\u00b0Y\2\u0a22\u0a20\3\2\2\2\u0a23\u0a26"+
		"\3\2\2\2\u0a24\u0a22\3\2\2\2\u0a24\u0a25\3\2\2\2\u0a25\u0a27\3\2\2\2\u0a26"+
		"\u0a24\3\2\2\2\u0a27\u0a28\7\4\2\2\u0a28\u0a29\7\3\2\2\u0a29\u0a2e\5\u00ba"+
		"^\2\u0a2a\u0a2b\7\26\2\2\u0a2b\u0a2d\5\u00ba^\2\u0a2c\u0a2a\3\2\2\2\u0a2d"+
		"\u0a30\3\2\2\2\u0a2e\u0a2c\3\2\2\2\u0a2e\u0a2f\3\2\2\2\u0a2f\u0a31\3\2"+
		"\2\2\u0a30\u0a2e\3\2\2\2\u0a31\u0a32\7\4\2\2\u0a32\u00af\3\2\2\2\u0a33"+
		"\u0a36\5\u019c\u00cf\2\u0a34\u0a35\7\u00c3\2\2\u0a35\u0a37\7\u00a6\2\2"+
		"\u0a36\u0a34\3\2\2\2\u0a36\u0a37\3\2\2\2\u0a37\u0a38\3\2\2\2\u0a38\u0a39"+
		"\t\31\2\2\u0a39\u00b1\3\2\2\2\u0a3a\u0a3b\t\32\2\2\u0a3b\u00b3\3\2\2\2"+
		"\u0a3c\u0a3e\7o\2\2\u0a3d\u0a3f\7-\2\2\u0a3e\u0a3d\3\2\2\2\u0a3e\u0a3f"+
		"\3\2\2\2\u0a3f\u0a40\3\2\2\2\u0a40\u0a41\7\3\2\2\u0a41\u0a46\5\u00b2Z"+
		"\2\u0a42\u0a43\7\26\2\2\u0a43\u0a45\5\u00b2Z\2\u0a44\u0a42\3\2\2\2\u0a45"+
		"\u0a48\3\2\2\2\u0a46\u0a44\3\2\2\2\u0a46\u0a47\3\2\2\2\u0a47\u0a49\3\2"+
		"\2\2\u0a48\u0a46\3\2\2\2\u0a49\u0a4b\7\4\2\2\u0a4a\u0a4c\7\u0093\2\2\u0a4b"+
		"\u0a4a\3\2\2\2\u0a4b\u0a4c\3\2\2\2\u0a4c\u00b5\3\2\2\2\u0a4d\u0a4e\7\u0266"+
		"\2\2\u0a4e\u0a4f\7\u02b3\2\2\u0a4f\u0a50\7\u031e\2\2\u0a50\u00b7\3\2\2"+
		"\2\u0a51\u0a52\7\37\2\2\u0a52\u0a53\7\u0205\2\2\u0a53\u0a54\7\65\2\2\u0a54"+
		"\u0a55\7\u0266\2\2\u0a55\u0a56\7\u0129\2\2\u0a56\u0a57\7\3\2\2\u0a57\u0a5c"+
		"\5\u019c\u00cf\2\u0a58\u0a59\7\26\2\2\u0a59\u0a5b\5\u019c\u00cf\2\u0a5a"+
		"\u0a58\3\2\2\2\u0a5b\u0a5e\3\2\2\2\u0a5c\u0a5a\3\2\2\2\u0a5c\u0a5d\3\2"+
		"\2\2\u0a5d\u0a5f\3\2\2\2\u0a5e\u0a5c\3\2\2\2\u0a5f\u0a60\7\4\2\2\u0a60"+
		"\u0a61\7\u0266\2\2\u0a61\u0a62\7\u02b3\2\2\u0a62\u0a63\7\u031e\2\2\u0a63"+
		"\u0a6b\3\2\2\2\u0a64\u0a65\7$\2\2\u0a65\u0a66\7\u00cf\2\2\u0a66\u0a67"+
		"\7\u010e\2\2\u0a67\u0a68\7\u0266\2\2\u0a68\u0a69\7\u02b3\2\2\u0a69\u0a6b"+
		"\7\u031e\2\2\u0a6a\u0a51\3\2\2\2\u0a6a\u0a64\3\2\2\2\u0a6b\u00b9\3\2\2"+
		"\2\u0a6c\u0a6d\7\u00d6\2\2\u0a6d\u0a6e\7\30\2\2\u0a6e\u0a70\5\u00b4[\2"+
		"\u0a6f\u0a71\5\u00b6\\\2\u0a70\u0a6f\3\2\2\2\u0a70\u0a71\3\2\2\2\u0a71"+
		"\u00bb\3\2\2\2\u0a72\u0a75\5\u00b4[\2\u0a73\u0a75\5\u00b6\\\2\u0a74\u0a72"+
		"\3\2\2\2\u0a74\u0a73\3\2\2\2\u0a75\u00bd\3\2\2\2\u0a76\u0a77\5\u00b4["+
		"\2\u0a77\u0a78\7\u020b\2\2\u0a78\u00bf\3\2\2\2\u0a79\u0a7a\7\u00c9\2\2"+
		"\u0a7a\u0a7b\7\\\2\2\u0a7b\u0a7c\7\37\2\2\u0a7c\u0a7d\7\u01fb\2\2\u0a7d"+
		"\u0a7e\7\u0101\2\2\u0a7e\u00c1\3\2\2\2\u0a7f\u0a80\7\3\2\2\u0a80\u0a81"+
		"\5\u023a\u011e\2\u0a81\u0a82\7\4\2\2\u0a82\u0a83\5\u00c6d\2\u0a83\u00c3"+
		"\3\2\2\2\u0a84\u0a86\7\u010e\2\2\u0a85\u0a87\5\u00c8e\2\u0a86\u0a85\3"+
		"\2\2\2\u0a87\u0a88\3\2\2\2\u0a88\u0a86\3\2\2\2\u0a88\u0a89\3\2\2\2\u0a89"+
		"\u00c5\3\2\2\2\u0a8a\u0a8b\7U\2\2\u0a8b\u0a8c\7\u0202\2\2\u0a8c\u0a8d"+
		"\7\u01f8\2\2\u0a8d\u0a8e\7\u00eb\2\2\u0a8e\u0a92\7\u01f8\2\2\u0a8f\u0a91"+
		"\5\u00c8e\2\u0a90\u0a8f\3\2\2\2\u0a91\u0a94\3\2\2\2\u0a92\u0a90\3\2\2"+
		"\2\u0a92\u0a93\3\2\2\2\u0a93\u00c7\3\2\2\2\u0a94\u0a92\3\2\2\2\u0a95\u0a96"+
		"\7\u00b5\2\2\u0a96\u0a97\7\65\2\2\u0a97\u0a9c\t\33\2\2\u0a98\u0a99\t\34"+
		"\2\2\u0a99\u0a9a\7\u00e7\2\2\u0a9a\u0a9c\7\u00cb\2\2\u0a9b\u0a95\3\2\2"+
		"\2\u0a9b\u0a98\3\2\2\2\u0a9c\u00c9\3\2\2\2\u0a9d\u0a9f\7\u010e\2\2\u0a9e"+
		"\u0aa0\5\u00c8e\2\u0a9f\u0a9e\3\2\2\2\u0aa0\u0aa1\3\2\2\2\u0aa1\u0a9f"+
		"\3\2\2\2\u0aa1\u0aa2\3\2\2\2\u0aa2\u00cb\3\2\2\2\u0aa3\u0aa4\7\u01a7\2"+
		"\2\u0aa4\u0aa5\7\3\2\2\u0aa5\u0aa6\5\u01a4\u00d3\2\u0aa6\u0aa7\7\26\2"+
		"\2\u0aa7\u0aa8\5\u01a6\u00d4\2\u0aa8\u0aa9\7\4\2\2\u0aa9\u0ab3\3\2\2\2"+
		"\u0aaa\u0aab\7\u01a8\2\2\u0aab\u0aac\7\3\2\2\u0aac\u0aad\5\u01a4\u00d3"+
		"\2\u0aad\u0aae\7\26\2\2\u0aae\u0aaf\5\u01a6\u00d4\2\u0aaf\u0ab0\t\35\2"+
		"\2\u0ab0\u0ab1\7\4\2\2\u0ab1\u0ab3\3\2\2\2\u0ab2\u0aa3\3\2\2\2\u0ab2\u0aaa"+
		"\3\2\2\2\u0ab3\u00cd\3\2\2\2\u0ab4\u0ab5\5\u019c\u00cf\2\u0ab5\u0ab9\5"+
		"\u00a2R\2\u0ab6\u0ab8\5\u0082B\2\u0ab7\u0ab6\3\2\2\2\u0ab8\u0abb\3\2\2"+
		"\2\u0ab9\u0ab7\3\2\2\2\u0ab9\u0aba\3\2\2\2\u0aba\u0ac5\3\2\2\2\u0abb\u0ab9"+
		"\3\2\2\2\u0abc\u0abd\5\u019c\u00cf\2\u0abd\u0ac1\5\u0194\u00cb\2\u0abe"+
		"\u0ac0\5\u0084C\2\u0abf\u0abe\3\2\2\2\u0ac0\u0ac3\3\2\2\2\u0ac1\u0abf"+
		"\3\2\2\2\u0ac1\u0ac2\3\2\2\2\u0ac2\u0ac5\3\2\2\2\u0ac3\u0ac1\3\2\2\2\u0ac4"+
		"\u0ab4\3\2\2\2\u0ac4\u0abc\3\2\2\2\u0ac5\u00cf\3\2\2\2\u0ac6\u0ac9\5\u0246"+
		"\u0124\2\u0ac7\u0ac9\7\27\2\2\u0ac8\u0ac6\3\2\2\2\u0ac8\u0ac7\3\2\2\2"+
		"\u0ac9\u00d1\3\2\2\2\u0aca\u0ad5\5\u00d4k\2\u0acb\u0ad5\7\u0313\2\2\u0acc"+
		"\u0ad5\7\u0314\2\2\u0acd\u0ace\7Q\2\2\u0ace\u0acf\7\u00d2\2\2\u0acf\u0ad5"+
		"\7\u00d9\2\2\u0ad0\u0ad1\7Q\2\2\u0ad1\u0ad5\7\u00d9\2\2\u0ad2\u0ad5\5"+
		"\u01dc\u00ef\2\u0ad3\u0ad5\7\27\2\2\u0ad4\u0aca\3\2\2\2\u0ad4\u0acb\3"+
		"\2\2\2\u0ad4\u0acc\3\2\2\2\u0ad4\u0acd\3\2\2\2\u0ad4\u0ad0\3\2\2\2\u0ad4"+
		"\u0ad2\3\2\2\2\u0ad4\u0ad3\3\2\2\2\u0ad5\u00d3\3\2\2\2\u0ad6\u0ad7\5\u0246"+
		"\u0124\2\u0ad7\u00d5\3\2\2\2\u0ad8\u0ad9\7\27\2\2\u0ad9\u00d7\3\2\2\2"+
		"\u0ada\u0adb\t\36\2\2\u0adb\u00d9\3\2\2\2\u0adc\u0add\t\37\2\2\u0add\u00db"+
		"\3\2\2\2\u0ade\u0aef\5\u00e2r\2\u0adf\u0aef\5\u0198\u00cd\2\u0ae0\u0aef"+
		"\5\u019c\u00cf\2\u0ae1\u0aef\5\u01dc\u00ef\2\u0ae2\u0aef\5\u0134\u009b"+
		"\2\u0ae3\u0aef\5\u0238\u011d\2\u0ae4\u0aef\5\u015a\u00ae\2\u0ae5\u0aef"+
		"\5\u00ecw\2\u0ae6\u0aef\5\u015e\u00b0\2\u0ae7\u0aef\5\u0184\u00c3\2\u0ae8"+
		"\u0aef\5\u00eex\2\u0ae9\u0aef\5\u00f0y\2\u0aea\u0aef\5\u00f4{\2\u0aeb"+
		"\u0aef\5\u00f6|\2\u0aec\u0aef\5\u00dep\2\u0aed\u0aef\5\u00e0q\2\u0aee"+
		"\u0ade\3\2\2\2\u0aee\u0adf\3\2\2\2\u0aee\u0ae0\3\2\2\2\u0aee\u0ae1\3\2"+
		"\2\2\u0aee\u0ae2\3\2\2\2\u0aee\u0ae3\3\2\2\2\u0aee\u0ae4\3\2\2\2\u0aee"+
		"\u0ae5\3\2\2\2\u0aee\u0ae6\3\2\2\2\u0aee\u0ae7\3\2\2\2\u0aee\u0ae8\3\2"+
		"\2\2\u0aee\u0ae9\3\2\2\2\u0aee\u0aea\3\2\2\2\u0aee\u0aeb\3\2\2\2\u0aee"+
		"\u0aec\3\2\2\2\u0aee\u0aed\3\2\2\2\u0aef\u00dd\3\2\2\2\u0af0\u0af1\7\u0101"+
		"\2\2\u0af1\u0af2\7\u0148\2\2\u0af2\u0af3\t \2\2\u0af3\u0af4\7\177\2\2"+
		"\u0af4\u0af5\5\u01ae\u00d8\2\u0af5\u00df\3\2\2\2\u0af6\u0af7\t!\2\2\u0af7"+
		"\u0af8\7\u012e\2\2\u0af8\u0af9\7\177\2\2\u0af9\u0afa\5\u01ae\u00d8\2\u0afa"+
		"\u00e1\3\2\2\2\u0afb\u0b00\5\u00e4s\2\u0afc\u0b00\5\u00e6t\2\u0afd\u0b00"+
		"\5\u00e8u\2\u0afe\u0b00\5\u00eav\2\u0aff\u0afb\3\2\2\2\u0aff\u0afc\3\2"+
		"\2\2\u0aff\u0afd\3\2\2\2\u0aff\u0afe\3\2\2\2\u0b00\u00e3\3\2\2\2\u0b01"+
		"\u0b02\5\u01ac\u00d7\2\u0b02\u0b03\7\23\2\2\u0b03\u0b05\3\2\2\2\u0b04"+
		"\u0b01\3\2\2\2\u0b04\u0b05\3\2\2\2\u0b05\u0b06\3\2\2\2\u0b06\u0b07\5\u0130"+
		"\u0099\2\u0b07\u0b08\7\3\2\2\u0b08\u0b0d\5\u00dco\2\u0b09\u0b0a\7\26\2"+
		"\2\u0b0a\u0b0c\5\u00dco\2\u0b0b\u0b09\3\2\2\2\u0b0c\u0b0f\3\2\2\2\u0b0d"+
		"\u0b0b\3\2\2\2\u0b0d\u0b0e\3\2\2\2\u0b0e\u0b10\3\2\2\2\u0b0f\u0b0d\3\2"+
		"\2\2\u0b10\u0b11\7\4\2\2\u0b11\u00e5\3\2\2\2\u0b12\u0b13\5\u01ac\u00d7"+
		"\2\u0b13\u0b14\7\23\2\2\u0b14\u0b16\3\2\2\2\u0b15\u0b12\3\2\2\2\u0b15"+
		"\u0b16\3\2\2\2\u0b16\u0b17\3\2\2\2\u0b17\u0b18\5\u010c\u0087\2\u0b18\u0b1a"+
		"\7\3\2\2\u0b19\u0b1b\7a\2\2\u0b1a\u0b19\3\2\2\2\u0b1a\u0b1b\3\2\2\2\u0b1b"+
		"\u0b1e\3\2\2\2\u0b1c\u0b1f\5\u00dco\2\u0b1d\u0b1f\7\20\2\2\u0b1e\u0b1c"+
		"\3\2\2\2\u0b1e\u0b1d\3\2\2\2\u0b1f\u0b20\3\2\2\2\u0b20\u0b21\7\4\2\2\u0b21"+
		"\u00e7\3\2\2\2\u0b22\u0b23\5\u01ac\u00d7\2\u0b23\u0b24\7\23\2\2\u0b24"+
		"\u0b26\3\2\2\2\u0b25\u0b22\3\2\2\2\u0b25\u0b26\3\2\2\2\u0b26\u0b27\3\2"+
		"\2\2\u0b27\u0b28\5\u010e\u0088\2\u0b28\u0b29\7\3\2\2\u0b29\u0b2a\5\u00dc"+
		"o\2\u0b2a\u0b2b\7\26\2\2\u0b2b\u0b2c\5\u00dco\2\u0b2c\u0b2d\7\4\2\2\u0b2d"+
		"\u00e9\3\2\2\2\u0b2e\u0b2f\5\u01ac\u00d7\2\u0b2f\u0b30\7\23\2\2\u0b30"+
		"\u0b32\3\2\2\2\u0b31\u0b2e\3\2\2\2\u0b31\u0b32\3\2\2\2\u0b32\u0b33\3\2"+
		"\2\2\u0b33\u0b34\7\u031e\2\2\u0b34\u0b35\7\3\2\2\u0b35\u0b3a\5\u00dco"+
		"\2\u0b36\u0b37\7\26\2\2\u0b37\u0b39\5\u00dco\2\u0b38\u0b36\3\2\2\2\u0b39"+
		"\u0b3c\3\2\2\2\u0b3a\u0b38\3\2\2\2\u0b3a\u0b3b\3\2\2\2\u0b3b\u0b3d\3\2"+
		"\2\2\u0b3c\u0b3a\3\2\2\2\u0b3d\u0b3e\7\4\2\2\u0b3e\u00eb\3\2\2\2\u0b3f"+
		"\u0b48\5\u00e2r\2\u0b40\u0b41\7\3\2\2\u0b41\u0b42\5\u00dco\2\u0b42\u0b43"+
		"\7\4\2\2\u0b43\u0b48\3\2\2\2\u0b44\u0b48\7\30\2\2\u0b45\u0b48\5\u019c"+
		"\u00cf\2\u0b46\u0b48\5\u01e2\u00f2\2\u0b47\u0b3f\3\2\2\2\u0b47\u0b40\3"+
		"\2\2\2\u0b47\u0b44\3\2\2\2\u0b47\u0b45\3\2\2\2\u0b47\u0b46\3\2\2\2\u0b48"+
		"\u0b49\3\2\2\2\u0b49\u0b4a\t\"\2\2\u0b4a\u00ed\3\2\2\2\u0b4b\u0b4f\7\u013d"+
		"\2\2\u0b4c\u0b50\5\u00dco\2\u0b4d\u0b50\7\u00c2\2\2\u0b4e\u0b50\5\u0186"+
		"\u00c4\2\u0b4f\u0b4c\3\2\2\2\u0b4f\u0b4d\3\2\2\2\u0b4f\u0b4e\3\2\2\2\u0b50"+
		"\u0b51\3\2\2\2\u0b51\u0b52\7)\2\2\u0b52\u0b53\5\u00a0Q\2\u0b53\u00ef\3"+
		"\2\2\2\u0b54\u0b55\5\u0182\u00c2\2\u0b55\u0b56\7\5\2\2\u0b56\u0b57\5\u00f2"+
		"z\2\u0b57\u0b58\7\6\2\2\u0b58\u00f1\3\2\2\2\u0b59\u0b60\5\u00dco\2\u0b5a"+
		"\u0b5c\5\u00dan\2\u0b5b\u0b5a\3\2\2\2\u0b5b\u0b5c\3\2\2\2\u0b5c\u0b5d"+
		"\3\2\2\2\u0b5d\u0b5f\5\u00dco\2\u0b5e\u0b5b\3\2\2\2\u0b5f\u0b62\3\2\2"+
		"\2\u0b60\u0b5e\3\2\2\2\u0b60\u0b61\3\2\2\2\u0b61\u00f3\3\2\2\2\u0b62\u0b60"+
		"\3\2\2\2\u0b63\u0b64\7\'\2\2\u0b64\u0b75\7\5\2\2\u0b65\u0b76\7\7\2\2\u0b66"+
		"\u0b76\5\u023a\u011e\2\u0b67\u0b6a\5\u00dco\2\u0b68\u0b6a\7\u00c2\2\2"+
		"\u0b69\u0b67\3\2\2\2\u0b69\u0b68\3\2\2\2\u0b6a\u0b72\3\2\2\2\u0b6b\u0b6e"+
		"\7\26\2\2\u0b6c\u0b6f\5\u00dco\2\u0b6d\u0b6f\7\u00c2\2\2\u0b6e\u0b6c\3"+
		"\2\2\2\u0b6e\u0b6d\3\2\2\2\u0b6f\u0b71\3\2\2\2\u0b70\u0b6b\3\2\2\2\u0b71"+
		"\u0b74\3\2\2\2\u0b72\u0b70\3\2\2\2\u0b72\u0b73\3\2\2\2\u0b73\u0b76\3\2"+
		"\2\2\u0b74\u0b72\3\2\2\2\u0b75\u0b65\3\2\2\2\u0b75\u0b66\3\2\2\2\u0b75"+
		"\u0b69\3\2\2\2\u0b76\u0b77\3\2\2\2\u0b77\u0b78\7\6\2\2\u0b78\u00f5\3\2"+
		"\2\2\u0b79\u0b7d\5\u00f8}\2\u0b7a\u0b7d\5\u0108\u0085\2\u0b7b\u0b7d\5"+
		"\u010a\u0086\2\u0b7c\u0b79\3\2\2\2\u0b7c\u0b7a\3\2\2\2\u0b7c\u0b7b\3\2"+
		"\2\2\u0b7d\u00f7\3\2\2\2\u0b7e\u0b7f\5\u00fa~\2\u0b7f\u0b80\7\u0172\2"+
		"\2\u0b80\u0b82\7\3\2\2\u0b81\u0b83\5\u0102\u0082\2\u0b82\u0b81\3\2\2\2"+
		"\u0b82\u0b83\3\2\2\2\u0b83\u0b84\3\2\2\2\u0b84\u0b85\5\u0104\u0083\2\u0b85"+
		"\u0b86\7\4\2\2\u0b86\u00f9\3\2\2\2\u0b87\u0b88\7\u0155\2\2\u0b88\u0b89"+
		"\7\3\2\2\u0b89\u0b9b\7\4\2\2\u0b8a\u0b8b\7\u0176\2\2\u0b8b\u0b8c\7\3\2"+
		"\2\u0b8c\u0b9b\7\4\2\2\u0b8d\u0b8e\7\u017a\2\2\u0b8e\u0b8f\7\3\2\2\u0b8f"+
		"\u0b9b\7\4\2\2\u0b90\u0b91\7\u0156\2\2\u0b91\u0b92\7\3\2\2\u0b92\u0b9b"+
		"\7\4\2\2\u0b93\u0b94\7\u016d\2\2\u0b94\u0b95\7\3\2\2\u0b95\u0b96\5\u00dc"+
		"o\2\u0b96\u0b97\7\4\2\2\u0b97\u0b9b\3\2\2\2\u0b98\u0b9b\5\u00fc\177\2"+
		"\u0b99\u0b9b\5\u00fe\u0080\2\u0b9a\u0b87\3\2\2\2\u0b9a\u0b8a\3\2\2\2\u0b9a"+
		"\u0b8d\3\2\2\2\u0b9a\u0b90\3\2\2\2\u0b9a\u0b93\3\2\2\2\u0b9a\u0b98\3\2"+
		"\2\2\u0b9a\u0b99\3\2\2\2\u0b9b\u00fb\3\2\2\2\u0b9c\u0b9d\7\u0161\2\2\u0b9d"+
		"\u0b9e\7\3\2\2\u0b9e\u0b9f\5\u00dco\2\u0b9f\u0ba0\7\26\2\2\u0ba0\u0bac"+
		"\7\30\2\2\u0ba1\u0ba2\7\26\2\2\u0ba2\u0baa\5\u00dco\2\u0ba3\u0ba8\7\26"+
		"\2\2\u0ba4\u0ba5\7\u0188\2\2\u0ba5\u0ba9\7\u00c3\2\2\u0ba6\u0ba7\7\u015d"+
		"\2\2\u0ba7\u0ba9\7\u00c3\2\2\u0ba8\u0ba4\3\2\2\2\u0ba8\u0ba6\3\2\2\2\u0ba9"+
		"\u0bab\3\2\2\2\u0baa\u0ba3\3\2\2\2\u0baa\u0bab\3\2\2\2\u0bab\u0bad\3\2"+
		"\2\2\u0bac\u0ba1\3\2\2\2\u0bac\u0bad\3\2\2\2\u0bad\u0bae\3\2\2\2\u0bae"+
		"\u0baf\7\4\2\2\u0baf\u00fd\3\2\2\2\u0bb0\u0bb1\7\u0164\2\2\u0bb1\u0bb2"+
		"\7\3\2\2\u0bb2\u0bb3\5\u00dco\2\u0bb3\u0bb4\7\26\2\2\u0bb4\u0bbb\7\30"+
		"\2\2\u0bb5\u0bb6\7\26\2\2\u0bb6\u0bb9\5\u00dco\2\u0bb7\u0bb8\7\26\2\2"+
		"\u0bb8\u0bba\5\u0100\u0081\2\u0bb9\u0bb7\3\2\2\2\u0bb9\u0bba\3\2\2\2\u0bba"+
		"\u0bbc\3\2\2\2\u0bbb\u0bb5\3\2\2\2\u0bbb\u0bbc\3\2\2\2\u0bbc\u0bbd\3\2"+
		"\2\2\u0bbd\u0bbe\7\4\2\2\u0bbe\u00ff\3\2\2\2\u0bbf\u0bc0\7\u0188\2\2\u0bc0"+
		"\u0bc4\7\u00c3\2\2\u0bc1\u0bc2\7\u015d\2\2\u0bc2\u0bc4\7\u00c3\2\2\u0bc3"+
		"\u0bbf\3\2\2\2\u0bc3\u0bc1\3\2\2\2\u0bc4\u0101\3\2\2\2\u0bc5\u0bc6\7\u00d6"+
		"\2\2\u0bc6\u0bc7\7\65\2\2\u0bc7\u0bcc\5\u00dco\2\u0bc8\u0bc9\7\26\2\2"+
		"\u0bc9\u0bcb\5\u00dco\2\u0bca\u0bc8\3\2\2\2\u0bcb\u0bce\3\2\2\2\u0bcc"+
		"\u0bca\3\2\2\2\u0bcc\u0bcd\3\2\2\2\u0bcd\u0103\3\2\2\2\u0bce\u0bcc\3\2"+
		"\2\2\u0bcf\u0bd0\7\u00ce\2\2\u0bd0\u0bd1\7\65\2\2\u0bd1\u0bd3\5\u00dc"+
		"o\2\u0bd2\u0bd4\5\u0106\u0084\2\u0bd3\u0bd2\3\2\2\2\u0bd3\u0bd4\3\2\2"+
		"\2\u0bd4\u0bdc\3\2\2\2\u0bd5\u0bd6\7\26\2\2\u0bd6\u0bd8\5\u00dco\2\u0bd7"+
		"\u0bd9\5\u0106\u0084\2\u0bd8\u0bd7\3\2\2\2\u0bd8\u0bd9\3\2\2\2\u0bd9\u0bdb"+
		"\3\2\2\2\u0bda\u0bd5\3\2\2\2\u0bdb\u0bde\3\2\2\2\u0bdc\u0bda\3\2\2\2\u0bdc"+
		"\u0bdd\3\2\2\2\u0bdd\u0105\3\2\2\2\u0bde\u0bdc\3\2\2\2\u0bdf\u0be2\t\31"+
		"\2\2\u0be0\u0be1\7\u00c3\2\2\u0be1\u0be3\t#\2\2\u0be2\u0be0\3\2\2\2\u0be2"+
		"\u0be3\3\2\2\2\u0be3\u0107\3\2\2\2\u0be4\u0be5\7\u0189\2\2\u0be5\u0be6"+
		"\7\3\2\2\u0be6\u0be7\7\4\2\2\u0be7\u0be8\7\u0172\2\2\u0be8\u0bea\7\3\2"+
		"\2\u0be9\u0beb\5\u0102\u0082\2\u0bea\u0be9\3\2\2\2\u0bea\u0beb\3\2\2\2"+
		"\u0beb\u0bed\3\2\2\2\u0bec\u0bee\5\u0104\u0083\2\u0bed\u0bec\3\2\2\2\u0bed"+
		"\u0bee\3\2\2\2\u0bee\u0bef\3\2\2\2\u0bef\u0bf0\7\4\2\2\u0bf0\u0109\3\2"+
		"\2\2\u0bf1\u0bf4\5\u00e6t\2\u0bf2\u0bf4\5\u0110\u0089\2\u0bf3\u0bf1\3"+
		"\2\2\2\u0bf3\u0bf2\3\2\2\2\u0bf4\u0bf5\3\2\2\2\u0bf5\u0bf6\7\u0172\2\2"+
		"\u0bf6\u0bf8\7\3\2\2\u0bf7\u0bf9\5\u0102\u0082\2\u0bf8\u0bf7\3\2\2\2\u0bf8"+
		"\u0bf9\3\2\2\2\u0bf9\u0c0c\3\2\2\2\u0bfa\u0bfb\7\u0179\2\2\u0bfb\u0bfc"+
		"\7\63\2\2\u0bfc\u0bfd\7\u0197\2\2\u0bfd\u0bfe\7\u0177\2\2\u0bfe\u0bff"+
		"\7\u0143\2\2\u0bff\u0c00\7\u0197\2\2\u0c00\u0c0d\7\u015b\2\2\u0c01\u0c0a"+
		"\5\u0104\u0083\2\u0c02\u0c03\7\u0179\2\2\u0c03\u0c04\7\63\2\2\u0c04\u0c05"+
		"\7\u0197\2\2\u0c05\u0c06\7\u0177\2\2\u0c06\u0c07\7\u0143\2\2\u0c07\u0c08"+
		"\7Q\2\2\u0c08\u0c0b\7\u0101\2\2\u0c09\u0c0b\5\u011a\u008e\2\u0c0a\u0c02"+
		"\3\2\2\2\u0c0a\u0c09\3\2\2\2\u0c0a\u0c0b\3\2\2\2\u0c0b\u0c0d\3\2\2\2\u0c0c"+
		"\u0bfa\3\2\2\2\u0c0c\u0c01\3\2\2\2\u0c0c\u0c0d\3\2\2\2\u0c0d\u0c0e\3\2"+
		"\2\2\u0c0e\u0c0f\7\4\2\2\u0c0f\u010b\3\2\2\2\u0c10\u0c11\t$\2\2\u0c11"+
		"\u010d\3\2\2\2\u0c12\u0c13\t%\2\2\u0c13\u010f\3\2\2\2\u0c14\u0c19\5\u0112"+
		"\u008a\2\u0c15\u0c19\5\u0114\u008b\2\u0c16\u0c19\5\u0116\u008c\2\u0c17"+
		"\u0c19\5\u0118\u008d\2\u0c18\u0c14\3\2\2\2\u0c18\u0c15\3\2\2\2\u0c18\u0c16"+
		"\3\2\2\2\u0c18\u0c17\3\2\2\2\u0c19\u0111\3\2\2\2\u0c1a\u0c1b\7\u015a\2"+
		"\2\u0c1b\u0c1c\7\3\2\2\u0c1c\u0c1f\5\u00dco\2\u0c1d\u0c1e\7\26\2\2\u0c1e"+
		"\u0c20\5\u0100\u0081\2\u0c1f\u0c1d\3\2\2\2\u0c1f\u0c20\3\2\2\2\u0c20\u0c21"+
		"\3\2\2\2\u0c21\u0c22\7\4\2\2\u0c22\u0113\3\2\2\2\u0c23\u0c24\7\u0163\2"+
		"\2\u0c24\u0c25\7\3\2\2\u0c25\u0c28\5\u00dco\2\u0c26\u0c27\7\26\2\2\u0c27"+
		"\u0c29\5\u0100\u0081\2\u0c28\u0c26\3\2\2\2\u0c28\u0c29\3\2\2\2\u0c29\u0c2a"+
		"\3\2\2\2\u0c2a\u0c2b\7\4\2\2\u0c2b\u0115\3\2\2\2\u0c2c\u0c2d\7\u016c\2"+
		"\2\u0c2d\u0c2e\7\3\2\2\u0c2e\u0c2f\5\u00dco\2\u0c2f\u0c30\7\26\2\2\u0c30"+
		"\u0c31\7\30\2\2\u0c31\u0c32\7\4\2\2\u0c32\u0117\3\2\2\2\u0c33\u0c34\7"+
		"\u017b\2\2\u0c34\u0c35\7\3\2\2\u0c35\u0c36\5\u00dco\2\u0c36\u0c37\7\4"+
		"\2\2\u0c37\u0119\3\2\2\2\u0c38\u0c3c\t&\2\2\u0c39\u0c3d\5\u011c\u008f"+
		"\2\u0c3a\u0c3d\5\u011e\u0090\2\u0c3b\u0c3d\5\u0120\u0091\2\u0c3c\u0c39"+
		"\3\2\2\2\u0c3c\u0c3a\3\2\2\2\u0c3c\u0c3b\3\2\2\2\u0c3d\u011b\3\2\2\2\u0c3e"+
		"\u0c42\5\u0126\u0094\2\u0c3f\u0c42\5\u012a\u0096\2\u0c40\u0c42\5\u012e"+
		"\u0098\2\u0c41\u0c3e\3\2\2\2\u0c41\u0c3f\3\2\2\2\u0c41\u0c40\3\2\2\2\u0c42"+
		"\u011d\3\2\2\2\u0c43\u0c44\7\63\2\2\u0c44\u0c45\5\u0122\u0092\2\u0c45"+
		"\u0c46\7\u0143\2\2\u0c46\u0c47\5\u0124\u0093\2\u0c47\u011f\3\2\2\2\u0c48"+
		"\u0c4b\5\u0128\u0095\2\u0c49\u0c4b\5\u012c\u0097\2\u0c4a\u0c48\3\2\2\2"+
		"\u0c4a\u0c49\3\2\2\2\u0c4b\u0121\3\2\2\2\u0c4c\u0c51\5\u0126\u0094\2\u0c4d"+
		"\u0c51\5\u012a\u0096\2\u0c4e\u0c51\5\u012c\u0097\2\u0c4f\u0c51\5\u012e"+
		"\u0098\2\u0c50\u0c4c\3\2\2\2\u0c50\u0c4d\3\2\2\2\u0c50\u0c4e\3\2\2\2\u0c50"+
		"\u0c4f\3\2\2\2\u0c51\u0123\3\2\2\2\u0c52\u0c57\5\u0128\u0095\2\u0c53\u0c57"+
		"\5\u012a\u0096\2\u0c54\u0c57\5\u012c\u0097\2\u0c55\u0c57\5\u012e\u0098"+
		"\2\u0c56\u0c52\3\2\2\2\u0c56\u0c53\3\2\2\2\u0c56\u0c54\3\2\2\2\u0c56\u0c55"+
		"\3\2\2\2\u0c57\u0125\3\2\2\2\u0c58\u0c59\7\u0197\2\2\u0c59\u0c5a\7\u0177"+
		"\2\2\u0c5a\u0127\3\2\2\2\u0c5b\u0c5c\7\u0197\2\2\u0c5c\u0c5d\7\u015b\2"+
		"\2\u0c5d\u0129\3\2\2\2\u0c5e\u0c5f\7\30\2\2\u0c5f\u0c60\7\u0177\2\2\u0c60"+
		"\u012b\3\2\2\2\u0c61\u0c62\7\30\2\2\u0c62\u0c63\7\u015b\2\2\u0c63\u012d"+
		"\3\2\2\2\u0c64\u0c65\7Q\2\2\u0c65\u0c66\7\u0101\2\2\u0c66\u012f\3\2\2"+
		"\2\u0c67\u0c68\t\'\2\2\u0c68\u0131\3\2\2\2\u0c69\u0c6a\t(\2\2\u0c6a\u0133"+
		"\3\2\2\2\u0c6b\u0c6c\t)\2\2\u0c6c\u0135\3\2\2\2\u0c6d\u0c6e\7\u031d\2"+
		"\2\u0c6e\u0c72\7\3\2\2\u0c6f\u0c70\5\u0150\u00a9\2\u0c70\u0c71\7\26\2"+
		"\2\u0c71\u0c73\3\2\2\2\u0c72\u0c6f\3\2\2\2\u0c72\u0c73\3\2\2\2\u0c73\u0c74"+
		"\3\2\2\2\u0c74\u0c7e\5\u0138\u009d\2\u0c75\u0c78\7\u0173\2\2\u0c76\u0c77"+
		"\7\65\2\2\u0c77\u0c79\7\u017d\2\2\u0c78\u0c76\3\2\2\2\u0c78\u0c79\3\2"+
		"\2\2\u0c79\u0c7a\3\2\2\2\u0c7a\u0c7b\5\u013a\u009e\2\u0c7b\u0c7c\7\26"+
		"\2\2\u0c7c\u0c7d\5\u013a\u009e\2\u0c7d\u0c7f\3\2\2\2\u0c7e\u0c75\3\2\2"+
		"\2\u0c7e\u0c7f\3\2\2\2\u0c7f\u0c8f\3\2\2\2\u0c80\u0c83\7\u01a4\2\2\u0c81"+
		"\u0c84\5\u0140\u00a1\2\u0c82\u0c84\5\u014e\u00a8\2\u0c83\u0c81\3\2\2\2"+
		"\u0c83\u0c82\3\2\2\2\u0c84\u0c8c\3\2\2\2\u0c85\u0c88\7\26\2\2\u0c86\u0c89"+
		"\5\u0140\u00a1\2\u0c87\u0c89\5\u014e\u00a8\2\u0c88\u0c86\3\2\2\2\u0c88"+
		"\u0c87\3\2\2\2\u0c89\u0c8b\3\2\2\2\u0c8a\u0c85\3\2\2\2\u0c8b\u0c8e\3\2"+
		"\2\2\u0c8c\u0c8a\3\2\2\2\u0c8c\u0c8d\3\2\2\2\u0c8d\u0c90\3\2\2\2\u0c8e"+
		"\u0c8c\3\2\2\2\u0c8f\u0c80\3\2\2\2\u0c8f\u0c90\3\2\2\2\u0c90\u0c91\3\2"+
		"\2\2\u0c91\u0c92\7\4\2\2\u0c92\u0137\3\2\2\2\u0c93\u0c94\7\27\2\2\u0c94"+
		"\u0139\3\2\2\2\u0c95\u0c9b\5\u013c\u009f\2\u0c96\u0c97\5\u013e\u00a0\2"+
		"\u0c97\u0c98\7)\2\2\u0c98\u0c99\5\u0246\u0124\2\u0c99\u0c9b\3\2\2\2\u0c9a"+
		"\u0c95\3\2\2\2\u0c9a\u0c96\3\2\2\2\u0c9b\u013b\3\2\2\2\u0c9c\u0c9d\5\u00dc"+
		"o\2\u0c9d\u013d\3\2\2\2\u0c9e\u0c9f\5\u00dco\2\u0c9f\u013f\3\2\2\2\u0ca0"+
		"\u0ca1\5\u019c\u00cf\2\u0ca1\u0ca5\5\u00a0Q\2\u0ca2\u0ca6\5\u0142\u00a2"+
		"\2\u0ca3\u0ca4\7\u00d9\2\2\u0ca4\u0ca6\5\u014c\u00a7\2\u0ca5\u0ca2\3\2"+
		"\2\2\u0ca5\u0ca3\3\2\2\2\u0ca5\u0ca6\3\2\2\2\u0ca6\u0141\3\2\2\2\u0ca7"+
		"\u0ca9\7\u013b\2\2\u0ca8\u0ca7\3\2\2\2\u0ca8\u0ca9\3\2\2\2\u0ca9\u0caa"+
		"\3\2\2\2\u0caa\u0cb1\7[\2\2\u0cab\u0cb2\5\u0148\u00a5\2\u0cac\u0cad\5"+
		"\u014a\u00a6\2\u0cad\u0cae\7\3\2\2\u0cae\u0caf\5\u0148\u00a5\2\u0caf\u0cb0"+
		"\7\4\2\2\u0cb0\u0cb2\3\2\2\2\u0cb1\u0cab\3\2\2\2\u0cb1\u0cac\3\2\2\2\u0cb2"+
		"\u0143\3\2\2\2\u0cb3\u0cb5\7\u013b\2\2\u0cb4\u0cb3\3\2\2\2\u0cb4\u0cb5"+
		"\3\2\2\2\u0cb5\u0cb6\3\2\2\2\u0cb6\u0cb7\7[\2\2\u0cb7\u0cb8\5\u0148\u00a5"+
		"\2\u0cb8\u0145\3\2\2\2\u0cb9\u0cbb\7\u013b\2\2\u0cba\u0cb9\3\2\2\2\u0cba"+
		"\u0cbb\3\2\2\2\u0cbb\u0cbc\3\2\2\2\u0cbc\u0cc3\7[\2\2\u0cbd\u0cc4\5\u0148"+
		"\u00a5\2\u0cbe\u0cbf\5\u014a\u00a6\2\u0cbf\u0cc0\7\3\2\2\u0cc0\u0cc1\5"+
		"\u0148\u00a5\2\u0cc1\u0cc2\7\4\2\2\u0cc2\u0cc4\3\2\2\2\u0cc3\u0cbd\3\2"+
		"\2\2\u0cc3\u0cbe\3\2\2\2\u0cc4\u0147\3\2\2\2\u0cc5\u0ccb\5\u0198\u00cd"+
		"\2\u0cc6\u0ccb\7\u0313\2\2\u0cc7\u0ccb\7\u0314\2\2\u0cc8\u0ccb\7\u030b"+
		"\2\2\u0cc9\u0ccb\7\u00c2\2\2\u0cca\u0cc5\3\2\2\2\u0cca\u0cc6\3\2\2\2\u0cca"+
		"\u0cc7\3\2\2\2\u0cca\u0cc8\3\2\2\2\u0cca\u0cc9\3\2\2\2\u0ccb\u0149\3\2"+
		"\2\2\u0ccc\u0ccd\5\u0246\u0124\2\u0ccd\u0cce\7\23\2\2\u0cce\u0ccf\5\u0246"+
		"\u0124\2\u0ccf\u014b\3\2\2\2\u0cd0\u0cd1\7\27\2\2\u0cd1\u014d\3\2\2\2"+
		"\u0cd2\u0cd3\5\u019c\u00cf\2\u0cd3\u0cd4\7\177\2\2\u0cd4\u0cd5\7\u01a6"+
		"\2\2\u0cd5\u014f\3\2\2\2\u0cd6\u0cdb\5\u0152\u00aa\2\u0cd7\u0cd8\7\26"+
		"\2\2\u0cd8\u0cda\5\u0152\u00aa\2\u0cd9\u0cd7\3\2\2\2\u0cda\u0cdd\3\2\2"+
		"\2\u0cdb\u0cd9\3\2\2\2\u0cdb\u0cdc\3\2\2\2\u0cdc\u0151\3\2\2\2\u0cdd\u0cdb"+
		"\3\2\2\2\u0cde\u0cdf\7\u013f\2\2\u0cdf\u0ce0\7\3\2\2\u0ce0\u0ce5\5\u0154"+
		"\u00ab\2\u0ce1\u0ce2\7\26\2\2\u0ce2\u0ce4\5\u0154\u00ab\2\u0ce3\u0ce1"+
		"\3\2\2\2\u0ce4\u0ce7\3\2\2\2\u0ce5\u0ce3\3\2\2\2\u0ce5\u0ce6\3\2\2\2\u0ce6"+
		"\u0ce8\3\2\2\2\u0ce7\u0ce5\3\2\2\2\u0ce8\u0ce9\7\4\2\2\u0ce9\u0153\3\2"+
		"\2\2\u0cea\u0ceb\5\u0156\u00ac\2\u0ceb\u0cec\7)\2\2\u0cec\u0ced\5\u0158"+
		"\u00ad\2\u0ced\u0cf3\3\2\2\2\u0cee\u0cef\7[\2\2\u0cef\u0cf3\5\u0156\u00ac"+
		"\2\u0cf0\u0cf1\7\u00bf\2\2\u0cf1\u0cf3\7[\2\2\u0cf2\u0cea\3\2\2\2\u0cf2"+
		"\u0cee\3\2\2\2\u0cf2\u0cf0\3\2\2\2\u0cf3\u0155\3\2\2\2\u0cf4\u0cf5\7\27"+
		"\2\2\u0cf5\u0157\3\2\2\2\u0cf6\u0cf7\7\27\2\2\u0cf7\u0159\3\2\2\2\u0cf8"+
		"\u0cff\5\u015c\u00af\2\u0cf9\u0cfa\7-\2\2\u0cfa\u0d00\7\u00ac\2\2\u0cfb"+
		"\u0cfc\7-\2\2\u0cfc\u0cfd\7\u02bd\2\2\u0cfd\u0cfe\7\u0142\2\2\u0cfe\u0d00"+
		"\5\u015c\u00af\2\u0cff\u0cf9\3\2\2\2\u0cff\u0cfb\3\2\2\2\u0d00\u015b\3"+
		"\2\2\2\u0d01\u0d0a\5\u00e2r\2\u0d02\u0d0a\5\u0198\u00cd\2\u0d03\u0d0a"+
		"\5\u019c\u00cf\2\u0d04\u0d0a\5\u01dc\u00ef\2\u0d05\u0d0a\5\u0134\u009b"+
		"\2\u0d06\u0d0a\5\u0238\u011d\2\u0d07\u0d0a\5\u015e\u00b0\2\u0d08\u0d0a"+
		"\5\u0184\u00c3\2\u0d09\u0d01\3\2\2\2\u0d09\u0d02\3\2\2\2\u0d09\u0d03\3"+
		"\2\2\2\u0d09\u0d04\3\2\2\2\u0d09\u0d05\3\2\2\2\u0d09\u0d06\3\2\2\2\u0d09"+
		"\u0d07\3\2\2\2\u0d09\u0d08\3\2\2\2\u0d0a\u015d\3\2\2\2\u0d0b\u0d0e\79"+
		"\2\2\u0d0c\u0d0f\5\u0162\u00b2\2\u0d0d\u0d0f\5\u0164\u00b3\2\u0d0e\u0d0c"+
		"\3\2\2\2\u0d0e\u0d0d\3\2\2\2\u0d0f\u0d14\3\2\2\2\u0d10\u0d11\7i\2\2\u0d11"+
		"\u0d15\7\u00c2\2\2\u0d12\u0d13\7i\2\2\u0d13\u0d15\5\u0160\u00b1\2\u0d14"+
		"\u0d10\3\2\2\2\u0d14\u0d12\3\2\2\2\u0d15\u0d16\3\2\2\2\u0d16\u0d17\7m"+
		"\2\2\u0d17\u015f\3\2\2\2\u0d18\u0d19\5\u00dco\2\u0d19\u0161\3\2\2\2\u0d1a"+
		"\u0d1b\7\u0137\2\2\u0d1b\u0d1c\5\u0166\u00b4\2\u0d1c\u0d1f\7\u0122\2\2"+
		"\u0d1d\u0d20\5\u0160\u00b1\2\u0d1e\u0d20\7\u00c2\2\2\u0d1f\u0d1d\3\2\2"+
		"\2\u0d1f\u0d1e\3\2\2\2\u0d20\u0163\3\2\2\2\u0d21\u0d22\5\u00dco\2\u0d22"+
		"\u0d23\7\u0137\2\2\u0d23\u0d24\5\u00dco\2\u0d24\u0d27\7\u0122\2\2\u0d25"+
		"\u0d28\5\u0160\u00b1\2\u0d26\u0d28\7\u00c2\2\2\u0d27\u0d25\3\2\2\2\u0d27"+
		"\u0d26\3\2\2\2\u0d28\u0165\3\2\2\2\u0d29\u0d2b\7\u00c1\2\2\u0d2a\u0d29"+
		"\3\2\2\2\u0d2a\u0d2b\3\2\2\2\u0d2b\u0d35\3\2\2\2\u0d2c\u0d2f\5\u016a\u00b6"+
		"\2\u0d2d\u0d2e\7\u018e\2\2\u0d2e\u0d30\7\31\2\2\u0d2f\u0d2d\3\2\2\2\u0d2f"+
		"\u0d30\3\2\2\2\u0d30\u0d36\3\2\2\2\u0d31\u0d32\7\3\2\2\u0d32\u0d33\5\u0166"+
		"\u00b4\2\u0d33\u0d34\7\4\2\2\u0d34\u0d36\3\2\2\2\u0d35\u0d2c\3\2\2\2\u0d35"+
		"\u0d31\3\2\2\2\u0d36\u0d44\3\2\2\2\u0d37\u0d39\t*\2\2\u0d38\u0d3a\7\u00c1"+
		"\2\2\u0d39\u0d38\3\2\2\2\u0d39\u0d3a\3\2\2\2\u0d3a\u0d40\3\2\2\2\u0d3b"+
		"\u0d41\5\u016a\u00b6\2\u0d3c\u0d3d\7\3\2\2\u0d3d\u0d3e\5\u0166\u00b4\2"+
		"\u0d3e\u0d3f\7\4\2\2\u0d3f\u0d41\3\2\2\2\u0d40\u0d3b\3\2\2\2\u0d40\u0d3c"+
		"\3\2\2\2\u0d41\u0d43\3\2\2\2\u0d42\u0d37\3\2\2\2\u0d43\u0d46\3\2\2\2\u0d44"+
		"\u0d42\3\2\2\2\u0d44\u0d45\3\2\2\2\u0d45\u0167\3\2\2\2\u0d46\u0d44\3\2"+
		"\2\2\u0d47\u0d48\5\u0166\u00b4\2\u0d48\u0169\3\2\2\2\u0d49\u0d54\5\u016c"+
		"\u00b7\2\u0d4a\u0d54\5\u0170\u00b9\2\u0d4b\u0d54\5\u0172\u00ba\2\u0d4c"+
		"\u0d54\5\u0174\u00bb\2\u0d4d\u0d54\5\u0176\u00bc\2\u0d4e\u0d54\5\u0178"+
		"\u00bd\2\u0d4f\u0d54\5\u017a\u00be\2\u0d50\u0d54\5\u017c\u00bf\2\u0d51"+
		"\u0d54\5\u017e\u00c0\2\u0d52\u0d54\5\u0180\u00c1\2\u0d53\u0d49\3\2\2\2"+
		"\u0d53\u0d4a\3\2\2\2\u0d53\u0d4b\3\2\2\2\u0d53\u0d4c\3\2\2\2\u0d53\u0d4d"+
		"\3\2\2\2\u0d53\u0d4e\3\2\2\2\u0d53\u0d4f\3\2\2\2\u0d53\u0d50\3\2\2\2\u0d53"+
		"\u0d51\3\2\2\2\u0d53\u0d52\3\2\2\2\u0d54\u016b\3\2\2\2\u0d55\u0d56\5\u00dc"+
		"o\2\u0d56\u0d57\5\u00d8m\2\u0d57\u0d58\5\u00dco\2\u0d58\u0d5e\3\2\2\2"+
		"\u0d59\u0d5a\5\u016e\u00b8\2\u0d5a\u0d5b\5\u00d8m\2\u0d5b\u0d5c\5\u016e"+
		"\u00b8\2\u0d5c\u0d5e\3\2\2\2\u0d5d\u0d55\3\2\2\2\u0d5d\u0d59\3\2\2\2\u0d5e"+
		"\u016d\3\2\2\2\u0d5f\u0d60\7\3\2\2\u0d60\u0d65\5\u00dco\2\u0d61\u0d62"+
		"\7\26\2\2\u0d62\u0d64\5\u00dco\2\u0d63\u0d61\3\2\2\2\u0d64\u0d67\3\2\2"+
		"\2\u0d65\u0d63\3\2\2\2\u0d65\u0d66\3\2\2\2\u0d66\u0d68\3\2\2\2\u0d67\u0d65"+
		"\3\2\2\2\u0d68\u0d69\7\4\2\2\u0d69\u016f\3\2\2\2\u0d6a\u0d6b\5\u00dco"+
		"\2\u0d6b\u0d6c\5\u00d8m\2\u0d6c\u0d6d\t+\2\2\u0d6d\u0d6e\7\3\2\2\u0d6e"+
		"\u0d6f\5\u023a\u011e\2\u0d6f\u0d70\7\4\2\2\u0d70\u0d80\3\2\2\2\u0d71\u0d72"+
		"\5\u016e\u00b8\2\u0d72\u0d73\7\b\2\2\u0d73\u0d74\t,\2\2\u0d74\u0d75\7"+
		"\3\2\2\u0d75\u0d76\5\u023a\u011e\2\u0d76\u0d77\7\4\2\2\u0d77\u0d80\3\2"+
		"\2\2\u0d78\u0d79\5\u016e\u00b8\2\u0d79\u0d7a\7\r\2\2\u0d7a\u0d7b\7!\2"+
		"\2\u0d7b\u0d7c\7\3\2\2\u0d7c\u0d7d\5\u023a\u011e\2\u0d7d\u0d7e\7\4\2\2"+
		"\u0d7e\u0d80\3\2\2\2\u0d7f\u0d6a\3\2\2\2\u0d7f\u0d71\3\2\2\2\u0d7f\u0d78"+
		"\3\2\2\2\u0d80\u0171\3\2\2\2\u0d81\u0d82\7(\2\2\u0d82\u0d83\7\3\2\2\u0d83"+
		"\u0d84\5\u0182\u00c2\2\u0d84\u0d85\7\30\2\2\u0d85\u0d86\7\4\2\2\u0d86"+
		"\u0173\3\2\2\2\u0d87\u0d89\5\u00dco\2\u0d88\u0d8a\7\u00c1\2\2\u0d89\u0d88"+
		"\3\2\2\2\u0d89\u0d8a\3\2\2\2\u0d8a\u0d8b\3\2\2\2\u0d8b\u0d8c\7\63\2\2"+
		"\u0d8c\u0d8d\5\u00dco\2\u0d8d\u0d8e\7\u0143\2\2\u0d8e\u0d8f\5\u00dco\2"+
		"\u0d8f\u0175\3\2\2\2\u0d90\u0d91\5\u00dco\2\u0d91\u0d93\7\u009d\2\2\u0d92"+
		"\u0d94\7\u00c1\2\2\u0d93\u0d92\3\2\2\2\u0d93\u0d94\3\2\2\2\u0d94\u0d95"+
		"\3\2\2\2\u0d95\u0d96\7a\2\2\u0d96\u0d97\7\u0081\2\2\u0d97\u0d98\5\u00dc"+
		"o\2\u0d98\u0177\3\2\2\2\u0d99\u0d9a\7v\2\2\u0d9a\u0d9b\7\3\2\2\u0d9b\u0d9c"+
		"\5\u023a\u011e\2\u0d9c\u0d9d\7\4\2\2\u0d9d\u0179\3\2\2\2\u0d9e\u0da0\5"+
		"\u00dco\2\u0d9f\u0da1\7\u00c1\2\2\u0da0\u0d9f\3\2\2\2\u0da0\u0da1\3\2"+
		"\2\2\u0da1\u0da2\3\2\2\2\u0da2\u0db2\7\u0092\2\2\u0da3\u0da4\7\3\2\2\u0da4"+
		"\u0da5\5\u023a\u011e\2\u0da5\u0da6\7\4\2\2\u0da6\u0db3\3\2\2\2\u0da7\u0da8"+
		"\7\3\2\2\u0da8\u0dad\5\u00dco\2\u0da9\u0daa\7\26\2\2\u0daa\u0dac\5\u00dc"+
		"o\2\u0dab\u0da9\3\2\2\2\u0dac\u0daf\3\2\2\2\u0dad\u0dab\3\2\2\2\u0dad"+
		"\u0dae\3\2\2\2\u0dae\u0db0\3\2\2\2\u0daf\u0dad\3\2\2\2\u0db0\u0db1\7\4"+
		"\2\2\u0db1\u0db3\3\2\2\2\u0db2\u0da3\3\2\2\2\u0db2\u0da7\3\2\2\2\u0db3"+
		"\u017b\3\2\2\2\u0db4\u0db6\5\u00dco\2\u0db5\u0db7\7\u00c1\2\2\u0db6\u0db5"+
		"\3\2\2\2\u0db6\u0db7\3\2\2\2\u0db7\u0db8\3\2\2\2\u0db8\u0db9\7\u00aa\2"+
		"\2\u0db9\u0dbc\5\u00dco\2\u0dba\u0dbb\7q\2\2\u0dbb\u0dbd\5\u00dco\2\u0dbc"+
		"\u0dba\3\2\2\2\u0dbc\u0dbd\3\2\2\2\u0dbd\u017d\3\2\2\2\u0dbe\u0dc6\5\u00dc"+
		"o\2\u0dbf\u0dc1\7\u009d\2\2\u0dc0\u0dc2\7\u00c1\2\2\u0dc1\u0dc0\3\2\2"+
		"\2\u0dc1\u0dc2\3\2\2\2\u0dc2\u0dc3\3\2\2\2\u0dc3\u0dc7\7\u00c2\2\2\u0dc4"+
		"\u0dc7\7\u0160\2\2\u0dc5\u0dc7\7\u016b\2\2\u0dc6\u0dbf\3\2\2\2\u0dc6\u0dc4"+
		"\3\2\2\2\u0dc6\u0dc5\3\2\2\2\u0dc7\u017f\3\2\2\2\u0dc8\u0dc9\7\u013e\2"+
		"\2\u0dc9\u0dca\7\3\2\2\u0dca\u0dd8\7\27\2\2\u0dcb\u0dce\7\u0173\2\2\u0dcc"+
		"\u0dcd\7\65\2\2\u0dcd\u0dcf\7\u017d\2\2\u0dce\u0dcc\3\2\2\2\u0dce\u0dcf"+
		"\3\2\2\2\u0dcf\u0dd0\3\2\2\2\u0dd0\u0dd5\5\u00dco\2\u0dd1\u0dd2\7\26\2"+
		"\2\u0dd2\u0dd4\5\u00dco\2\u0dd3\u0dd1\3\2\2\2\u0dd4\u0dd7\3\2\2\2\u0dd5"+
		"\u0dd3\3\2\2\2\u0dd5\u0dd6\3\2\2\2\u0dd6\u0dd9\3\2\2\2\u0dd7\u0dd5\3\2"+
		"\2\2\u0dd8\u0dcb\3\2\2\2\u0dd8\u0dd9\3\2\2\2\u0dd9\u0dda\3\2\2\2\u0dda"+
		"\u0ddb\7\4\2\2\u0ddb\u0181\3\2\2\2\u0ddc\u0ddf\5\u01e2\u00f2\2\u0ddd\u0ddf"+
		"\5\u0184\u00c3\2\u0dde\u0ddc\3\2\2\2\u0dde\u0ddd\3\2\2\2\u0ddf\u0183\3"+
		"\2\2\2\u0de0\u0de1\7:\2\2\u0de1\u0de5\7\3\2\2\u0de2\u0de6\5\u00dco\2\u0de3"+
		"\u0de6\7\u00c2\2\2\u0de4\u0de6\5\u0186\u00c4\2\u0de5\u0de2\3\2\2\2\u0de5"+
		"\u0de3\3\2\2\2\u0de5\u0de4\3\2\2\2\u0de6\u0de7\3\2\2\2\u0de7\u0de8\7)"+
		"\2\2\u0de8\u0de9\5\u0188\u00c5\2\u0de9\u0dea\7\4\2\2\u0dea\u0185\3\2\2"+
		"\2\u0deb\u0dec\7\7\2\2\u0dec\u0187\3\2\2\2\u0ded\u0df1\5\u018a\u00c6\2"+
		"\u0dee\u0df1\5\u0194\u00cb\2\u0def\u0df1\5\u0196\u00cc\2\u0df0\u0ded\3"+
		"\2\2\2\u0df0\u0dee\3\2\2\2\u0df0\u0def\3\2\2\2\u0df1\u0189\3\2\2\2\u0df2"+
		"\u0e5e\7\u02ad\2\2\u0df3\u0e5e\7\u0270\2\2\u0df4\u0e5e\7\u026f\2\2\u0df5"+
		"\u0e5e\7\u0223\2\2\u0df6\u0dfa\t\6\2\2\u0df7\u0dfb\5\u018c\u00c7\2\u0df8"+
		"\u0df9\7\3\2\2\u0df9\u0dfb\7\4\2\2\u0dfa\u0df7\3\2\2\2\u0dfa\u0df8\3\2"+
		"\2\2\u0dfb\u0e5e\3\2\2\2\u0dfc\u0e00\7\u0242\2\2\u0dfd\u0e01\5\u018c\u00c7"+
		"\2\u0dfe\u0dff\7\3\2\2\u0dff\u0e01\7\4\2\2\u0e00\u0dfd\3\2\2\2\u0e00\u0dfe"+
		"\3\2\2\2\u0e01\u0e5e\3\2\2\2\u0e02\u0e06\7\u025e\2\2\u0e03\u0e07\5\u018c"+
		"\u00c7\2\u0e04\u0e05\7\3\2\2\u0e05\u0e07\7\4\2\2\u0e06\u0e03\3\2\2\2\u0e06"+
		"\u0e04\3\2\2\2\u0e07\u0e5e\3\2\2\2\u0e08\u0e5e\7\u029c\2\2\u0e09\u0e0b"+
		"\7d\2\2\u0e0a\u0e0c\7\u00dd\2\2\u0e0b\u0e0a\3\2\2\2\u0e0b\u0e0c\3\2\2"+
		"\2\u0e0c\u0e5e\3\2\2\2\u0e0d\u0e0f\t\7\2\2\u0e0e\u0e10\7\u01a0\2\2\u0e0f"+
		"\u0e0e\3\2\2\2\u0e0f\u0e10\3\2\2\2\u0e10\u0e13\3\2\2\2\u0e11\u0e13\7\u02d5"+
		"\2\2\u0e12\u0e0d\3\2\2\2\u0e12\u0e11\3\2\2\2\u0e13\u0e17\3\2\2\2\u0e14"+
		"\u0e18\5\u018e\u00c8\2\u0e15\u0e16\7\3\2\2\u0e16\u0e18\7\4\2\2\u0e17\u0e14"+
		"\3\2\2\2\u0e17\u0e15\3\2\2\2\u0e17\u0e18\3\2\2\2\u0e18\u0e1a\3\2\2\2\u0e19"+
		"\u0e1b\5\u0190\u00c9\2\u0e1a\u0e19\3\2\2\2\u0e1a\u0e1b\3\2\2\2\u0e1b\u0e5e"+
		"\3\2\2\2\u0e1c\u0e1d\t\7\2\2\u0e1d\u0e1e\7\u0162\2\2\u0e1e\u0e21\7\u016f"+
		"\2\2\u0e1f\u0e21\7\u0234\2\2\u0e20\u0e1c\3\2\2\2\u0e20\u0e1f\3\2\2\2\u0e21"+
		"\u0e25\3\2\2\2\u0e22\u0e26\5\u018e\u00c8\2\u0e23\u0e24\7\3\2\2\u0e24\u0e26"+
		"\7\4\2\2\u0e25\u0e22\3\2\2\2\u0e25\u0e23\3\2\2\2\u0e25\u0e26\3\2\2\2\u0e26"+
		"\u0e28\3\2\2\2\u0e27\u0e29\5\u0190\u00c9\2\u0e28\u0e27\3\2\2\2\u0e28\u0e29"+
		"\3\2\2\2\u0e29\u0e5e\3\2\2\2\u0e2a\u0e2e\t\t\2\2\u0e2b\u0e2f\5\u018e\u00c8"+
		"\2\u0e2c\u0e2d\7\3\2\2\u0e2d\u0e2f\7\4\2\2\u0e2e\u0e2b\3\2\2\2\u0e2e\u0e2c"+
		"\3\2\2\2\u0e2e\u0e2f\3\2\2\2\u0e2f\u0e31\3\2\2\2\u0e30\u0e32\5\u0190\u00c9"+
		"\2\u0e31\u0e30\3\2\2\2\u0e31\u0e32\3\2\2\2\u0e32\u0e5e\3\2\2\2\u0e33\u0e37"+
		"\7\u0224\2\2\u0e34\u0e38\5\u018c\u00c7\2\u0e35\u0e36\7\3\2\2\u0e36\u0e38"+
		"\7\4\2\2\u0e37\u0e34\3\2\2\2\u0e37\u0e35\3\2\2\2\u0e37\u0e38\3\2\2\2\u0e38"+
		"\u0e5e\3\2\2\2\u0e39\u0e3b\7\u0224\2\2\u0e3a\u0e3c\7\u01a0\2\2\u0e3b\u0e3a"+
		"\3\2\2\2\u0e3b\u0e3c\3\2\2\2\u0e3c\u0e3f\3\2\2\2\u0e3d\u0e3f\7\u02d4\2"+
		"\2\u0e3e\u0e39\3\2\2\2\u0e3e\u0e3d\3\2\2\2\u0e3f\u0e43\3\2\2\2\u0e40\u0e44"+
		"\5\u018c\u00c7\2\u0e41\u0e42\7\3\2\2\u0e42\u0e44\7\4\2\2\u0e43\u0e40\3"+
		"\2\2\2\u0e43\u0e41\3\2\2\2\u0e43\u0e44\3\2\2\2\u0e44\u0e5e\3\2\2\2\u0e45"+
		"\u0e46\7\u0224\2\2\u0e46\u0e47\7\u0162\2\2\u0e47\u0e4a\7\u016f\2\2\u0e48"+
		"\u0e4a\7\u022a\2\2\u0e49\u0e45\3\2\2\2\u0e49\u0e48\3\2\2\2\u0e4a\u0e50"+
		"\3\2\2\2\u0e4b\u0e4c\7\3\2\2\u0e4c\u0e4d\7\30\2\2\u0e4d\u0e4e\7\u031e"+
		"\2\2\u0e4e\u0e4f\3\2\2\2\u0e4f\u0e51\7\4\2\2\u0e50\u0e4b\3\2\2\2\u0e50"+
		"\u0e51\3\2\2\2\u0e51\u0e5e\3\2\2\2\u0e52\u0e5e\7\u023a\2\2\u0e53\u0e5e"+
		"\7\u02bd\2\2\u0e54\u0e56\7\u02be\2\2\u0e55\u0e57\5\u018c\u00c7\2\u0e56"+
		"\u0e55\3\2\2\2\u0e56\u0e57\3\2\2\2\u0e57\u0e58\3\2\2\2\u0e58\u0e59\t\n"+
		"\2\2\u0e59\u0e5a\7\u02bd\2\2\u0e5a\u0e5e\7\u0142\2\2\u0e5b\u0e5e\7\u02a6"+
		"\2\2\u0e5c\u0e5e\7\u01a2\2\2\u0e5d\u0df2\3\2\2\2\u0e5d\u0df3\3\2\2\2\u0e5d"+
		"\u0df4\3\2\2\2\u0e5d\u0df5\3\2\2\2\u0e5d\u0df6\3\2\2\2\u0e5d\u0dfc\3\2"+
		"\2\2\u0e5d\u0e02\3\2\2\2\u0e5d\u0e08\3\2\2\2\u0e5d\u0e09\3\2\2\2\u0e5d"+
		"\u0e12\3\2\2\2\u0e5d\u0e20\3\2\2\2\u0e5d\u0e2a\3\2\2\2\u0e5d\u0e33\3\2"+
		"\2\2\u0e5d\u0e3e\3\2\2\2\u0e5d\u0e49\3\2\2\2\u0e5d\u0e52\3\2\2\2\u0e5d"+
		"\u0e53\3\2\2\2\u0e5d\u0e54\3\2\2\2\u0e5d\u0e5b\3\2\2\2\u0e5d\u0e5c\3\2"+
		"\2\2\u0e5e\u018b\3\2\2\2\u0e5f\u0e60\7\3\2\2\u0e60\u0e63\7\30\2\2\u0e61"+
		"\u0e62\7\26\2\2\u0e62\u0e64\7\30\2\2\u0e63\u0e61\3\2\2\2\u0e63\u0e64\3"+
		"\2\2\2\u0e64\u0e65\3\2\2\2\u0e65\u0e66\7\4\2\2\u0e66\u018d\3\2\2\2\u0e67"+
		"\u0e68\7\3\2\2\u0e68\u0e6a\t-\2\2\u0e69\u0e6b\t.\2\2\u0e6a\u0e69\3\2\2"+
		"\2\u0e6a\u0e6b\3\2\2\2\u0e6b\u0e6c\3\2\2\2\u0e6c\u0e6d\7\4\2\2\u0e6d\u018f"+
		"\3\2\2\2\u0e6e\u0e74\7;\2\2\u0e6f\u0e71\t\b\2\2\u0e70\u0e72\5\u0192\u00ca"+
		"\2\u0e71\u0e70\3\2\2\2\u0e71\u0e72\3\2\2\2\u0e72\u0e75\3\2\2\2\u0e73\u0e75"+
		"\7\30\2\2\u0e74\u0e6f\3\2\2\2\u0e74\u0e73\3\2\2\2\u0e75\u0191\3\2\2\2"+
		"\u0e76\u0e77\7\177\2\2\u0e77\u0e78\t/\2\2\u0e78\u0e79\7U\2\2\u0e79\u0193"+
		"\3\2\2\2\u0e7a\u0e7b\5\u01a8\u00d5\2\u0e7b\u0e7c\7\23\2\2\u0e7c\u0e7e"+
		"\3\2\2\2\u0e7d\u0e7a\3\2\2\2\u0e7d\u0e7e\3\2\2\2\u0e7e\u0e7f\3\2\2\2\u0e7f"+
		"\u0e80\5\u0246\u0124\2\u0e80\u0195\3\2\2\2\u0e81\u0e82\5\u0246\u0124\2"+
		"\u0e82\u0197\3\2\2\2\u0e83\u0e84\t\60\2\2\u0e84\u0199\3\2\2\2\u0e85\u0e86"+
		"\7\30\2\2\u0e86\u019b\3\2\2\2\u0e87\u0e88\5\u01a8\u00d5\2\u0e88\u0e89"+
		"\7\23\2\2\u0e89\u0e8b\3\2\2\2\u0e8a\u0e87\3\2\2\2\u0e8a\u0e8b\3\2\2\2"+
		"\u0e8b\u0e8c\3\2\2\2\u0e8c\u0e8d\5\u0246\u0124\2\u0e8d\u019d\3\2\2\2\u0e8e"+
		"\u0e8f\5\u019c\u00cf\2\u0e8f\u019f\3\2\2\2\u0e90\u0e91\5\u019c\u00cf\2"+
		"\u0e91\u01a1\3\2\2\2\u0e92\u0e93\5\u0246\u0124\2\u0e93\u01a3\3\2\2\2\u0e94"+
		"\u0e95\5\u0246\u0124\2\u0e95\u01a5\3\2\2\2\u0e96\u0e97\5\u0246\u0124\2"+
		"\u0e97\u01a7\3\2\2\2\u0e98\u0e99\5\u0246\u0124\2\u0e99\u01a9\3\2\2\2\u0e9a"+
		"\u0e9b\5\u0246\u0124\2\u0e9b\u01ab\3\2\2\2\u0e9c\u0e9d\5\u0246\u0124\2"+
		"\u0e9d\u01ad\3\2\2\2\u0e9e\u0e9f\5\u01aa\u00d6\2\u0e9f\u0ea0\7\23\2\2"+
		"\u0ea0\u0ea1\5\u01ac\u00d7\2\u0ea1\u0ea2\7\23\2\2\u0ea2\u0ea7\3\2\2\2"+
		"\u0ea3\u0ea4\5\u01ac\u00d7\2\u0ea4\u0ea5\7\23\2\2\u0ea5\u0ea7\3\2\2\2"+
		"\u0ea6\u0e9e\3\2\2\2\u0ea6\u0ea3\3\2\2\2\u0ea6\u0ea7\3\2\2\2\u0ea7\u0ea8"+
		"\3\2\2\2\u0ea8\u0eaa\5\u0246\u0124\2\u0ea9\u0eab\5\u01a8\u00d5\2\u0eaa"+
		"\u0ea9\3\2\2\2\u0eaa\u0eab\3\2\2\2\u0eab\u01af\3\2\2\2\u0eac\u0ead\5\u01aa"+
		"\u00d6\2\u0ead\u0eae\7\23\2\2\u0eae\u0eaf\5\u01ac\u00d7\2\u0eaf\u0eb0"+
		"\7\23\2\2\u0eb0\u0eb5\3\2\2\2\u0eb1\u0eb2\5\u01ac\u00d7\2\u0eb2\u0eb3"+
		"\7\23\2\2\u0eb3\u0eb5\3\2\2\2\u0eb4\u0eac\3\2\2\2\u0eb4\u0eb1\3\2\2\2"+
		"\u0eb4\u0eb5\3\2\2\2\u0eb5\u0eb6\3\2\2\2\u0eb6\u0eb7\5\u0246\u0124\2\u0eb7"+
		"\u01b1\3\2\2\2\u0eb8\u0eb9\5\u01ae\u00d8\2\u0eb9\u01b3\3\2\2\2\u0eba\u0ebb"+
		"\5\u01ae\u00d8\2\u0ebb\u01b5\3\2\2\2\u0ebc\u0ebd\5\u01ae\u00d8\2\u0ebd"+
		"\u01b7\3\2\2\2\u0ebe\u0ebf\5\u0246\u0124\2\u0ebf\u01b9\3\2\2\2\u0ec0\u0ec1"+
		"\5\u0246\u0124\2\u0ec1\u01bb\3\2\2\2\u0ec2\u0ec3\5\u01ac\u00d7\2\u0ec3"+
		"\u0ec4\7\23\2\2\u0ec4\u0ec6\3\2\2\2\u0ec5\u0ec2\3\2\2\2\u0ec5\u0ec6\3"+
		"\2\2\2\u0ec6\u0ec7\3\2\2\2\u0ec7\u0ec8\5\u0246\u0124\2\u0ec8\u01bd\3\2"+
		"\2\2\u0ec9\u0eca\5\u01ac\u00d7\2\u0eca\u0ecb\7\23\2\2\u0ecb\u0ecd\3\2"+
		"\2\2\u0ecc\u0ec9\3\2\2\2\u0ecc\u0ecd\3\2\2\2\u0ecd\u0ece\3\2\2\2\u0ece"+
		"\u0ecf\5\u0246\u0124\2\u0ecf\u01bf\3\2\2\2\u0ed0\u0ed1\5\u01ac\u00d7\2"+
		"\u0ed1\u0ed2\7\23\2\2\u0ed2\u0ed4\3\2\2\2\u0ed3\u0ed0\3\2\2\2\u0ed3\u0ed4"+
		"\3\2\2\2\u0ed4\u0ed5\3\2\2\2\u0ed5\u0ed6\5\u0246\u0124\2\u0ed6\u01c1\3"+
		"\2\2\2\u0ed7\u0ed8\5\u01aa\u00d6\2\u0ed8\u0ed9\7\23\2\2\u0ed9\u0eda\5"+
		"\u01ac\u00d7\2\u0eda\u0edb\7\23\2\2\u0edb\u0ee0\3\2\2\2\u0edc\u0edd\5"+
		"\u01ac\u00d7\2\u0edd\u0ede\7\23\2\2\u0ede\u0ee0\3\2\2\2\u0edf\u0ed7\3"+
		"\2\2\2\u0edf\u0edc\3\2\2\2\u0edf\u0ee0\3\2\2\2\u0ee0\u0ee1\3\2\2\2\u0ee1"+
		"\u0ee2\5\u0246\u0124\2\u0ee2\u01c3\3\2\2\2\u0ee3\u0ee4\5\u01ac\u00d7\2"+
		"\u0ee4\u0ee5\7\23\2\2\u0ee5\u0ee7\3\2\2\2\u0ee6\u0ee3\3\2\2\2\u0ee6\u0ee7"+
		"\3\2\2\2\u0ee7\u0ee8\3\2\2\2\u0ee8\u0ee9\5\u0246\u0124\2\u0ee9\u01c5\3"+
		"\2\2\2\u0eea\u0eeb\5\u0246\u0124\2\u0eeb\u01c7\3\2\2\2\u0eec\u0eed\5\u0246"+
		"\u0124\2\u0eed\u01c9\3\2\2\2\u0eee\u0eef\5\u0246\u0124\2\u0eef\u01cb\3"+
		"\2\2\2\u0ef0\u0ef1\5\u0246\u0124\2\u0ef1\u01cd\3\2\2\2\u0ef2\u0ef3\5\u0246"+
		"\u0124\2\u0ef3\u01cf\3\2\2\2\u0ef4\u0ef5\5\u0246\u0124\2\u0ef5\u01d1\3"+
		"\2\2\2\u0ef6\u0ef7\5\u0246\u0124\2\u0ef7\u01d3\3\2\2\2\u0ef8\u0ef9\5\u0246"+
		"\u0124\2\u0ef9\u01d5\3\2\2\2\u0efa\u0efd\5\u0246\u0124\2\u0efb\u0efd\7"+
		"\27\2\2\u0efc\u0efa\3\2\2\2\u0efc\u0efb\3\2\2\2\u0efd\u01d7\3\2\2\2\u0efe"+
		"\u0eff\5\u01ac\u00d7\2\u0eff\u0f00\7\23\2\2\u0f00\u0f02\3\2\2\2\u0f01"+
		"\u0efe\3\2\2\2\u0f01\u0f02\3\2\2\2\u0f02\u0f03\3\2\2\2\u0f03\u0f04\5\u0246"+
		"\u0124\2\u0f04\u01d9\3\2\2\2\u0f05\u0f06\5\u01ac\u00d7\2\u0f06\u0f07\7"+
		"\23\2\2\u0f07\u0f09\3\2\2\2\u0f08\u0f05\3\2\2\2\u0f08\u0f09\3\2\2\2\u0f09"+
		"\u0f0a\3\2\2\2\u0f0a\u0f0b\5\u0246\u0124\2\u0f0b\u01db\3\2\2\2\u0f0c\u0f10"+
		"\7\24\2\2\u0f0d\u0f0e\5\u01e0\u00f1\2\u0f0e\u0f0f\7\23\2\2\u0f0f\u0f11"+
		"\3\2\2\2\u0f10\u0f0d\3\2\2\2\u0f10\u0f11\3\2\2\2\u0f11\u0f12\3\2\2\2\u0f12"+
		"\u0f1d\5\u01de\u00f0\2\u0f13\u0f15\7\u015e\2\2\u0f14\u0f13\3\2\2\2\u0f14"+
		"\u0f15\3\2\2\2\u0f15\u0f16\3\2\2\2\u0f16\u0f1a\7\24\2\2\u0f17\u0f18\5"+
		"\u01e0\u00f1\2\u0f18\u0f19\7\23\2\2\u0f19\u0f1b\3\2\2\2\u0f1a\u0f17\3"+
		"\2\2\2\u0f1a\u0f1b\3\2\2\2\u0f1b\u0f1c\3\2\2\2\u0f1c\u0f1e\5\u01de\u00f0"+
		"\2\u0f1d\u0f14\3\2\2\2\u0f1d\u0f1e\3\2\2\2\u0f1e\u01dd\3\2\2\2\u0f1f\u0f20"+
		"\5\u0246\u0124\2\u0f20\u01df\3\2\2\2\u0f21\u0f22\5\u0246\u0124\2\u0f22"+
		"\u01e1\3\2\2\2\u0f23\u0f24\5\u01ac\u00d7\2\u0f24\u0f25\7\23\2\2\u0f25"+
		"\u0f27\3\2\2\2\u0f26\u0f23\3\2\2\2\u0f26\u0f27\3\2\2\2\u0f27\u0f28\3\2"+
		"\2\2\u0f28\u0f2b\5\u0246\u0124\2\u0f29\u0f2b\5\u01dc\u00ef\2\u0f2a\u0f26"+
		"\3\2\2\2\u0f2a\u0f29\3\2\2\2\u0f2b\u01e3\3\2\2\2\u0f2c\u0f2f\7\u009c\2"+
		"\2\u0f2d\u0f30\5\u01e2\u00f2\2\u0f2e\u0f30\5\u00f0y\2\u0f2f\u0f2d\3\2"+
		"\2\2\u0f2f\u0f2e\3\2\2\2\u0f30\u0f35\3\2\2\2\u0f31\u0f32\7\26\2\2\u0f32"+
		"\u0f34\5\u01e2\u00f2\2\u0f33\u0f31\3\2\2\2\u0f34\u0f37\3\2\2\2\u0f35\u0f33"+
		"\3\2\2\2\u0f35\u0f36\3\2\2\2\u0f36\u01e5\3\2\2\2\u0f37\u0f35\3\2\2\2\u0f38"+
		"\u0f3a\7)\2\2\u0f39\u0f38\3\2\2\2\u0f39\u0f3a\3\2\2\2\u0f3a\u0f3b\3\2"+
		"\2\2\u0f3b\u0f47\5\u01a8\u00d5\2\u0f3c\u0f3d\7\3\2\2\u0f3d\u0f42\5\u01a2"+
		"\u00d2\2\u0f3e\u0f3f\7\26\2\2\u0f3f\u0f41\5\u01a2\u00d2\2\u0f40\u0f3e"+
		"\3\2\2\2\u0f41\u0f44\3\2\2\2\u0f42\u0f40\3\2\2\2\u0f42\u0f43\3\2\2\2\u0f43"+
		"\u0f45\3\2\2\2\u0f44\u0f42\3\2\2\2\u0f45\u0f46\7\4\2\2\u0f46\u0f48\3\2"+
		"\2\2\u0f47\u0f3c\3\2\2\2\u0f47\u0f48\3\2\2\2\u0f48\u01e7\3\2\2\2\u0f49"+
		"\u0f58\7\u0081\2\2\u0f4a\u0f4c\7\3\2\2\u0f4b\u0f4a\3\2\2\2\u0f4c\u0f4f"+
		"\3\2\2\2\u0f4d\u0f4b\3\2\2\2\u0f4d\u0f4e\3\2\2\2\u0f4e\u0f50\3\2\2\2\u0f4f"+
		"\u0f4d\3\2\2\2\u0f50\u0f54\5\u01ea\u00f6\2\u0f51\u0f53\7\4\2\2\u0f52\u0f51"+
		"\3\2\2\2\u0f53\u0f56\3\2\2\2\u0f54\u0f52\3\2\2\2\u0f54\u0f55\3\2\2\2\u0f55"+
		"\u0f59\3\2\2\2\u0f56\u0f54\3\2\2\2\u0f57\u0f59\5\u0200\u0101\2\u0f58\u0f4d"+
		"\3\2\2\2\u0f58\u0f57\3\2\2\2\u0f59\u0f6d\3\2\2\2\u0f5a\u0f69\7\26\2\2"+
		"\u0f5b\u0f5d\7\3\2\2\u0f5c\u0f5b\3\2\2\2\u0f5d\u0f60\3\2\2\2\u0f5e\u0f5c"+
		"\3\2\2\2\u0f5e\u0f5f\3\2\2\2\u0f5f\u0f61\3\2\2\2\u0f60\u0f5e\3\2\2\2\u0f61"+
		"\u0f65\5\u01ea\u00f6\2\u0f62\u0f64\7\4\2\2\u0f63\u0f62\3\2\2\2\u0f64\u0f67"+
		"\3\2\2\2\u0f65\u0f63\3\2\2\2\u0f65\u0f66\3\2\2\2\u0f66\u0f6a\3\2\2\2\u0f67"+
		"\u0f65\3\2\2\2\u0f68\u0f6a\5\u0200\u0101\2\u0f69\u0f5e\3\2\2\2\u0f69\u0f68"+
		"\3\2\2\2\u0f6a\u0f6c\3\2\2\2\u0f6b\u0f5a\3\2\2\2\u0f6c\u0f6f\3\2\2\2\u0f6d"+
		"\u0f6b\3\2\2\2\u0f6d\u0f6e\3\2\2\2\u0f6e\u01e9\3\2\2\2\u0f6f\u0f6d\3\2"+
		"\2\2\u0f70\u0ff7\5\u01ec\u00f7\2\u0f71\u0ff7\5\u01f2\u00fa\2\u0f72\u0ff7"+
		"\5\u01f4\u00fb\2\u0f73\u0ff7\5\u01f6\u00fc\2\u0f74\u0ff7\5\u01fc\u00ff"+
		"\2\u0f75\u0ff7\5\u01fe\u0100\2\u0f76\u0ff7\5\u0200\u0101\2\u0f77\u0fa8"+
		"\5\u01ec\u00f7\2\u0f78\u0fa8\5\u01f2\u00fa\2\u0f79\u0fa8\5\u01f6\u00fc"+
		"\2\u0f7a\u0fa8\5\u01fc\u00ff\2\u0f7b\u0fa8\5\u01fe\u0100\2\u0f7c\u0fa8"+
		"\5\u0200\u0101\2\u0f7d\u0f7f\7\3\2\2\u0f7e\u0f7d\3\2\2\2\u0f7f\u0f80\3"+
		"\2\2\2\u0f80\u0f7e\3\2\2\2\u0f80\u0f81\3\2\2\2\u0f81\u0f82\3\2\2\2\u0f82"+
		"\u0f84\5\u01ea\u00f6\2\u0f83\u0f85\7\4\2\2\u0f84\u0f83\3\2\2\2\u0f85\u0f86"+
		"\3\2\2\2\u0f86\u0f84\3\2\2\2\u0f86\u0f87\3\2\2\2\u0f87\u0fa8\3\2\2\2\u0f88"+
		"\u0f9a\5\u01ec\u00f7\2\u0f89\u0f9a\5\u01f2\u00fa\2\u0f8a\u0f9a\5\u01f6"+
		"\u00fc\2\u0f8b\u0f9a\5\u01fc\u00ff\2\u0f8c\u0f9a\5\u01fe\u0100\2\u0f8d"+
		"\u0f8f\7\3\2\2\u0f8e\u0f8d\3\2\2\2\u0f8f\u0f90\3\2\2\2\u0f90\u0f8e\3\2"+
		"\2\2\u0f90\u0f91\3\2\2\2\u0f91\u0f92\3\2\2\2\u0f92\u0f94\5\u01ea\u00f6"+
		"\2\u0f93\u0f95\7\4\2\2\u0f94\u0f93\3\2\2\2\u0f95\u0f96\3\2\2\2\u0f96\u0f94"+
		"\3\2\2\2\u0f96\u0f97\3\2\2\2\u0f97\u0f9a\3\2\2\2\u0f98\u0f9a\5\u0200\u0101"+
		"\2\u0f99\u0f88\3\2\2\2\u0f99\u0f89\3\2\2\2\u0f99\u0f8a\3\2\2\2\u0f99\u0f8b"+
		"\3\2\2\2\u0f99\u0f8c\3\2\2\2\u0f99\u0f8e\3\2\2\2\u0f99\u0f98\3\2\2\2\u0f9a"+
		"\u0fa0\3\2\2\2\u0f9b\u0fa1\7\u0097\2\2\u0f9c\u0f9e\t\61\2\2\u0f9d\u0f9f"+
		"\7\u00d1\2\2\u0f9e\u0f9d\3\2\2\2\u0f9e\u0f9f\3\2\2\2\u0f9f\u0fa1\3\2\2"+
		"\2\u0fa0\u0f9b\3\2\2\2\u0fa0\u0f9c\3\2\2\2\u0fa1\u0fa2\3\2\2\2\u0fa2\u0fa3"+
		"\7\u00a1\2\2\u0fa3\u0fa4\5\u01ea\u00f6\2\u0fa4\u0fa5\7\u00c9\2\2\u0fa5"+
		"\u0fa6\5\u0202\u0102\2\u0fa6\u0fa8\3\2\2\2\u0fa7\u0f77\3\2\2\2\u0fa7\u0f78"+
		"\3\2\2\2\u0fa7\u0f79\3\2\2\2\u0fa7\u0f7a\3\2\2\2\u0fa7\u0f7b\3\2\2\2\u0fa7"+
		"\u0f7c\3\2\2\2\u0fa7\u0f7e\3\2\2\2\u0fa7\u0f99\3\2\2\2\u0fa8\u0fae\3\2"+
		"\2\2\u0fa9\u0faf\7\u0097\2\2\u0faa\u0fac\t\61\2\2\u0fab\u0fad\7\u00d1"+
		"\2\2\u0fac\u0fab\3\2\2\2\u0fac\u0fad\3\2\2\2\u0fad\u0faf\3\2\2\2\u0fae"+
		"\u0fa9\3\2\2\2\u0fae\u0faa\3\2\2\2\u0faf\u0fb0\3\2\2\2\u0fb0\u0fb1\7\u00a1"+
		"\2\2\u0fb1\u0fb2\5\u01ea\u00f6\2\u0fb2\u0fb3\7\u00c9\2\2\u0fb3\u0fb4\5"+
		"\u0202\u0102\2\u0fb4\u0ff7\3\2\2\2\u0fb5\u0fe6\5\u01ec\u00f7\2\u0fb6\u0fe6"+
		"\5\u01f2\u00fa\2\u0fb7\u0fe6\5\u01f6\u00fc\2\u0fb8\u0fe6\5\u01fc\u00ff"+
		"\2\u0fb9\u0fe6\5\u01fe\u0100\2\u0fba\u0fe6\5\u0200\u0101\2\u0fbb\u0fbd"+
		"\7\3\2\2\u0fbc\u0fbb\3\2\2\2\u0fbd\u0fbe\3\2\2\2\u0fbe\u0fbc\3\2\2\2\u0fbe"+
		"\u0fbf\3\2\2\2\u0fbf\u0fc0\3\2\2\2\u0fc0\u0fc2\5\u01ea\u00f6\2\u0fc1\u0fc3"+
		"\7\4\2\2\u0fc2\u0fc1\3\2\2\2\u0fc3\u0fc4\3\2\2\2\u0fc4\u0fc2\3\2\2\2\u0fc4"+
		"\u0fc5\3\2\2\2\u0fc5\u0fe6\3\2\2\2\u0fc6\u0fd8\5\u01ec\u00f7\2\u0fc7\u0fd8"+
		"\5\u01f2\u00fa\2\u0fc8\u0fd8\5\u01f6\u00fc\2\u0fc9\u0fd8\5\u01fc\u00ff"+
		"\2\u0fca\u0fd8\5\u01fe\u0100\2\u0fcb\u0fcd\7\3\2\2\u0fcc\u0fcb\3\2\2\2"+
		"\u0fcd\u0fce\3\2\2\2\u0fce\u0fcc\3\2\2\2\u0fce\u0fcf\3\2\2\2\u0fcf\u0fd0"+
		"\3\2\2\2\u0fd0\u0fd2\5\u01ea\u00f6\2\u0fd1\u0fd3\7\4\2\2\u0fd2\u0fd1\3"+
		"\2\2\2\u0fd3\u0fd4\3\2\2\2\u0fd4\u0fd2\3\2\2\2\u0fd4\u0fd5\3\2\2\2\u0fd5"+
		"\u0fd8\3\2\2\2\u0fd6\u0fd8\5\u0200\u0101\2\u0fd7\u0fc6\3\2\2\2\u0fd7\u0fc7"+
		"\3\2\2\2\u0fd7\u0fc8\3\2\2\2\u0fd7\u0fc9\3\2\2\2\u0fd7\u0fca\3\2\2\2\u0fd7"+
		"\u0fcc\3\2\2\2\u0fd7\u0fd6\3\2\2\2\u0fd8\u0fde\3\2\2\2\u0fd9\u0fdf\7\u0097"+
		"\2\2\u0fda\u0fdc\t\61\2\2\u0fdb\u0fdd\7\u00d1\2\2\u0fdc\u0fdb\3\2\2\2"+
		"\u0fdc\u0fdd\3\2\2\2\u0fdd\u0fdf\3\2\2\2\u0fde\u0fd9\3\2\2\2\u0fde\u0fda"+
		"\3\2\2\2\u0fdf\u0fe0\3\2\2\2\u0fe0\u0fe1\7\u00a1\2\2\u0fe1\u0fe2\5\u01ea"+
		"\u00f6\2\u0fe2\u0fe3\7\u00c9\2\2\u0fe3\u0fe4\5\u0202\u0102\2\u0fe4\u0fe6"+
		"\3\2\2\2\u0fe5\u0fb5\3\2\2\2\u0fe5\u0fb6\3\2\2\2\u0fe5\u0fb7\3\2\2\2\u0fe5"+
		"\u0fb8\3\2\2\2\u0fe5\u0fb9\3\2\2\2\u0fe5\u0fba\3\2\2\2\u0fe5\u0fbc\3\2"+
		"\2\2\u0fe5\u0fd7\3\2\2\2\u0fe6\u0fe7\3\2\2\2\u0fe7\u0fe8\7\u01ab\2\2\u0fe8"+
		"\u0fe9\7\u00a1\2\2\u0fe9\u0fea\5\u01ea\u00f6\2\u0fea\u0ff7\3\2\2\2\u0feb"+
		"\u0fed\7\3\2\2\u0fec\u0feb\3\2\2\2\u0fed\u0fee\3\2\2\2\u0fee\u0fec\3\2"+
		"\2\2\u0fee\u0fef\3\2\2\2\u0fef\u0ff0\3\2\2\2\u0ff0\u0ff2\5\u01ea\u00f6"+
		"\2\u0ff1\u0ff3\7\4\2\2\u0ff2\u0ff1\3\2\2\2\u0ff3\u0ff4\3\2\2\2\u0ff4\u0ff2"+
		"\3\2\2\2\u0ff4\u0ff5\3\2\2\2\u0ff5\u0ff7\3\2\2\2\u0ff6\u0f70\3\2\2\2\u0ff6"+
		"\u0f71\3\2\2\2\u0ff6\u0f72\3\2\2\2\u0ff6\u0f73\3\2\2\2\u0ff6\u0f74\3\2"+
		"\2\2\u0ff6\u0f75\3\2\2\2\u0ff6\u0f76\3\2\2\2\u0ff6\u0fa7\3\2\2\2\u0ff6"+
		"\u0fe5\3\2\2\2\u0ff6\u0fec\3\2\2\2\u0ff7\u01eb\3\2\2\2\u0ff8\u0ffc\5\u01ae"+
		"\u00d8\2\u0ff9\u0ffb\5\u01ee\u00f8\2\u0ffa\u0ff9\3\2\2\2\u0ffb\u0ffe\3"+
		"\2\2\2\u0ffc\u0ffa\3\2\2\2\u0ffc\u0ffd\3\2\2\2\u0ffd\u1000\3\2\2\2\u0ffe"+
		"\u0ffc\3\2\2\2\u0fff\u1001\5\u01e6\u00f4\2\u1000\u0fff\3\2\2\2\u1000\u1001"+
		"\3\2\2\2\u1001\u01ed\3\2\2\2\u1002\u1003\7\177\2\2\u1003\u1011\t\62\2"+
		"\2\u1004\u1005\7)\2\2\u1005\u1006\7\u00c6\2\2\u1006\u1012\5\u00dco\2\u1007"+
		"\u1008\7\u0081\2\2\u1008\u1009\5\u00dco\2\u1009\u100a\7\u0123\2\2\u100a"+
		"\u100b\5\u00dco\2\u100b\u1012\3\2\2\2\u100c\u100d\7\63\2\2\u100d\u100e"+
		"\5\u00dco\2\u100e\u100f\7\u0143\2\2\u100f\u1010\5\u00dco\2\u1010\u1012"+
		"\3\2\2\2\u1011\u1004\3\2\2\2\u1011\u1007\3\2\2\2\u1011\u100c\3\2\2\2\u1012"+
		"\u01ef\3\2\2\2\u1013\u1014\7\177\2\2\u1014\u1015\7\u01e0\2\2\u1015\u1016"+
		"\7\u00c6\2\2\u1016\u1021\7\u01a8\2\2\u1017\u1018\7\u0081\2\2\u1018\u1019"+
		"\5\u00dco\2\u1019\u101a\7\u0123\2\2\u101a\u101b\5\u00dco\2\u101b\u1022"+
		"\3\2\2\2\u101c\u101d\7\63\2\2\u101d\u101e\5\u00dco\2\u101e\u101f\7\u0143"+
		"\2\2\u101f\u1020\5\u00dco\2\u1020\u1022\3\2\2\2\u1021\u1017\3\2\2\2\u1021"+
		"\u101c\3\2\2\2\u1022\u01f1\3\2\2\2\u1023\u1025\7\u0120\2\2\u1024\u1023"+
		"\3\2\2\2\u1024\u1025\3\2\2\2\u1025\u1026\3\2\2\2\u1026\u1027\7\3\2\2\u1027"+
		"\u1028\5\u023a\u011e\2\u1028\u102a\7\4\2\2\u1029\u102b\5\u01e6\u00f4\2"+
		"\u102a\u1029\3\2\2\2\u102a\u102b\3\2\2\2\u102b\u01f3\3\2\2\2\u102c\u102d"+
		"\7}\2\2\u102d\u102e\7\u0120\2\2\u102e\u102f\7\3\2\2\u102f\u1030\5\66\34"+
		"\2\u1030\u1032\7\4\2\2\u1031\u1033\5\u01e6\u00f4\2\u1032\u1031\3\2\2\2"+
		"\u1032\u1033\3\2\2\2\u1033\u103e\3\2\2\2\u1034\u1035\t\63\2\2\u1035\u1036"+
		"\7\u0120\2\2\u1036\u103e\5:\36\2\u1037\u1038\7\u00c8\2\2\u1038\u1039\7"+
		"\u0120\2\2\u1039\u103e\5\60\31\2\u103a\u103b\7}\2\2\u103b\u103c\7\u0120"+
		"\2\2\u103c\u103e\58\35\2\u103d\u102c\3\2\2\2\u103d\u1034\3\2\2\2\u103d"+
		"\u1037\3\2\2\2\u103d\u103a\3\2\2\2\u103e\u01f5\3\2\2\2\u103f\u1040\7\u0120"+
		"\2\2\u1040\u1045\7\3\2\2\u1041\u1046\5\u0130\u0099\2\u1042\u1046\5\u010c"+
		"\u0087\2\u1043\u1046\5\u010e\u0088\2\u1044\u1046\5\u0246\u0124\2\u1045"+
		"\u1041\3\2\2\2\u1045\u1042\3\2\2\2\u1045\u1043\3\2\2\2\u1045\u1044\3\2"+
		"\2\2\u1046\u1047\3\2\2\2\u1047\u104b\7\3\2\2\u1048\u104c\5\u00dco\2\u1049"+
		"\u104a\7\u0120\2\2\u104a\u104c\5\u01ae\u00d8\2\u104b\u1048\3\2\2\2\u104b"+
		"\u1049\3\2\2\2\u104c\u1055\3\2\2\2\u104d\u1051\7\26\2\2\u104e\u1052\5"+
		"\u00dco\2\u104f\u1050\7\u0120\2\2\u1050\u1052\5\u01ae\u00d8\2\u1051\u104e"+
		"\3\2\2\2\u1051\u104f\3\2\2\2\u1052\u1054\3\2\2\2\u1053\u104d\3\2\2\2\u1054"+
		"\u1057\3\2\2\2\u1055\u1053\3\2\2\2\u1055\u1056\3\2\2\2\u1056\u1058\3\2"+
		"\2\2\u1057\u1055\3\2\2\2\u1058\u105a\7\4\2\2\u1059\u105b\5\u01f8\u00fd"+
		"\2\u105a\u1059\3\2\2\2\u105a\u105b\3\2\2\2\u105b\u105c\3\2\2\2\u105c\u105f"+
		"\7\4\2\2\u105d\u1060\5\u01e6\u00f4\2\u105e\u1060\5\u01fa\u00fe\2\u105f"+
		"\u105d\3\2\2\2\u105f\u105e\3\2\2\2\u105f\u1060\3\2\2\2\u1060\u01f7\3\2"+
		"\2\2\u1061\u1063\7\u022c\2\2\u1062\u1064\7\u01a9\2\2\u1063\u1062\3\2\2"+
		"\2\u1063\u1064\3\2\2\2\u1064\u1065\3\2\2\2\u1065\u1066\t\64\2\2\u1066"+
		"\u01f9\3\2\2\2\u1067\u1069\7)\2\2\u1068\u1067\3\2\2\2\u1068\u1069\3\2"+
		"\2\2\u1069\u106a\3\2\2\2\u106a\u106b\5\u01a8\u00d5\2\u106b\u106c\7\3\2"+
		"\2\u106c\u106d\5\u019c\u00cf\2\u106d\u1074\5\u00a0Q\2\u106e\u106f\7\26"+
		"\2\2\u106f\u1070\5\u019c\u00cf\2\u1070\u1071\5\u00a0Q\2\u1071\u1073\3"+
		"\2\2\2\u1072\u106e\3\2\2\2\u1073\u1076\3\2\2\2\u1074\u1072\3\2\2\2\u1074"+
		"\u1075\3\2\2\2\u1075\u1077\3\2\2\2\u1076\u1074\3\2\2\2\u1077\u1078\7\4"+
		"\2\2\u1078\u01fb\3\2\2\2\u1079\u107a\7\u0120\2\2\u107a\u107b\7\3\2\2\u107b"+
		"\u107c\5\u0246\u0124\2\u107c\u107d\7\u00aa\2\2\u107d\u107e\5\u01ae\u00d8"+
		"\2\u107e\u1080\7\4\2\2\u107f\u1081\5\u01a8\u00d5\2\u1080\u107f\3\2\2\2"+
		"\u1080\u1081\3\2\2\2\u1081\u01fd\3\2\2\2\u1082\u1084\5\u0136\u009c\2\u1083"+
		"\u1085\5\u01e6\u00f4\2\u1084\u1083\3\2\2\2\u1084\u1085\3\2\2\2\u1085\u01ff"+
		"\3\2\2\2\u1086\u1087\7\u01aa\2\2\u1087\u108a\7\3\2\2\u1088\u108b\5\u0208"+
		"\u0105\2\u1089\u108b\5\u020a\u0106\2\u108a\u1088\3\2\2\2\u108a\u1089\3"+
		"\2\2\2\u108b\u1093\3\2\2\2\u108c\u108f\7\26\2\2\u108d\u1090\5\u0208\u0105"+
		"\2\u108e\u1090\5\u020a\u0106\2\u108f\u108d\3\2\2\2\u108f\u108e\3\2\2\2"+
		"\u1090\u1092\3\2\2\2\u1091\u108c\3\2\2\2\u1092\u1095\3\2\2\2\u1093\u1091"+
		"\3\2\2\2\u1093\u1094\3\2\2\2\u1094\u1096\3\2\2\2\u1095\u1093\3\2\2\2\u1096"+
		"\u1099\7\4\2\2\u1097\u1098\7\u013b\2\2\u1098\u109a\7\u01a6\2\2\u1099\u1097"+
		"\3\2\2\2\u1099\u109a\3\2\2\2\u109a\u109c\3\2\2\2\u109b\u109d\5\u01e6\u00f4"+
		"\2\u109c\u109b\3\2\2\2\u109c\u109d\3\2\2\2\u109d\u0201\3\2\2\2\u109e\u10a4"+
		"\5\u0166\u00b4\2\u109f\u10a0\5\u0204\u0103\2\u10a0\u10a1\7\b\2\2\u10a1"+
		"\u10a2\5\u0204\u0103\2\u10a2\u10a4\3\2\2\2\u10a3\u109e\3\2\2\2\u10a3\u109f"+
		"\3\2\2\2\u10a4\u0203\3\2\2\2\u10a5\u10ba\5\u019c\u00cf\2\u10a6\u10ba\5"+
		"\u0206\u0104\2\u10a7\u10a8\7\u0235\2\2\u10a8\u10ab\7\3\2\2\u10a9\u10ac"+
		"\5\u019c\u00cf\2\u10aa\u10ac\5\u0206\u0104\2\u10ab\u10a9\3\2\2\2\u10ab"+
		"\u10aa\3\2\2\2\u10ac\u10b4\3\2\2\2\u10ad\u10b0\7\26\2\2\u10ae\u10b1\5"+
		"\u019c\u00cf\2\u10af\u10b1\5\u0206\u0104\2\u10b0\u10ae\3\2\2\2\u10b0\u10af"+
		"\3\2\2\2\u10b1\u10b3\3\2\2\2\u10b2\u10ad\3\2\2\2\u10b3\u10b6\3\2\2\2\u10b4"+
		"\u10b2\3\2\2\2\u10b4\u10b5\3\2\2\2\u10b5\u10b7\3\2\2\2\u10b6\u10b4\3\2"+
		"\2\2\u10b7\u10b8\7\4\2\2\u10b8\u10ba\3\2\2\2\u10b9\u10a5\3\2\2\2\u10b9"+
		"\u10a6\3\2\2\2\u10b9\u10a7\3\2\2\2\u10ba\u0205\3\2\2\2\u10bb\u10bc\5\u0184"+
		"\u00c3\2\u10bc\u0207\3\2\2\2\u10bd\u10be\5\u00dco\2\u10be\u0209\3\2\2"+
		"\2\u10bf\u10c0\5\u00dco\2\u10c0\u020b\3\2\2\2\u10c1\u10c2\5\u019c\u00cf"+
		"\2\u10c2\u10c5\5\u00d8m\2\u10c3\u10c6\5\u019c\u00cf\2\u10c4\u10c6\5\u0198"+
		"\u00cd\2\u10c5\u10c3\3\2\2\2\u10c5\u10c4\3\2\2\2\u10c6\u020d\3\2\2\2\u10c7"+
		"\u10c8\7\u0139\2\2\u10c8\u10c9\5\u0166\u00b4\2\u10c9\u020f\3\2\2\2\u10ca"+
		"\u10cb\7\u008a\2\2\u10cb\u10cf\7\65\2\2\u10cc\u10d0\5\u0214\u010b\2\u10cd"+
		"\u10d0\5\u0216\u010c\2\u10ce\u10d0\5\u021a\u010e\2\u10cf\u10cc\3\2\2\2"+
		"\u10cf\u10cd\3\2\2\2\u10cf\u10ce\3\2\2\2\u10d0\u0211\3\2\2\2\u10d1\u10d2"+
		"\7\u008c\2\2\u10d2\u10d3\5\u0166\u00b4\2\u10d3\u0213\3\2\2\2\u10d4\u10d9"+
		"\5\u00dco\2\u10d5\u10d6\7\26\2\2\u10d6\u10d8\5\u00dco\2\u10d7\u10d5\3"+
		"\2\2\2\u10d8\u10db\3\2\2\2\u10d9\u10d7\3\2\2\2\u10d9\u10da\3\2\2\2\u10da"+
		"\u0215\3\2\2\2\u10db\u10d9\3\2\2\2\u10dc\u10dd\7\u015c\2\2\u10dd\u10de"+
		"\7\u018f\2\2\u10de\u10df\5\u0218\u010d\2\u10df\u0217\3\2\2\2\u10e0\u10e4"+
		"\7\3\2\2\u10e1\u10e5\5\u0218\u010d\2\u10e2\u10e5\5\u0214\u010b\2\u10e3"+
		"\u10e5\5\u021a\u010e\2\u10e4\u10e1\3\2\2\2\u10e4\u10e2\3\2\2\2\u10e4\u10e3"+
		"\3\2\2\2\u10e5\u10ee\3\2\2\2\u10e6\u10ea\7\26\2\2\u10e7\u10eb\5\u0218"+
		"\u010d\2\u10e8\u10eb\5\u0214\u010b\2\u10e9\u10eb\5\u021a\u010e\2\u10ea"+
		"\u10e7\3\2\2\2\u10ea\u10e8\3\2\2\2\u10ea\u10e9\3\2\2\2\u10eb\u10ed\3\2"+
		"\2\2\u10ec\u10e6\3\2\2\2\u10ed\u10f0\3\2\2\2\u10ee\u10ec\3\2\2\2\u10ee"+
		"\u10ef\3\2\2\2\u10ef\u10f1\3\2\2\2\u10f0\u10ee\3\2\2\2\u10f1\u10f2\7\4"+
		"\2\2\u10f2\u0219\3\2\2\2\u10f3\u10f4\t\65\2\2\u10f4\u10f5\7\3\2\2\u10f5"+
		"\u10f6\5\u0214\u010b\2\u10f6\u10f7\7\4\2\2\u10f7\u10fb\3\2\2\2\u10f8\u10f9"+
		"\7\3\2\2\u10f9\u10fb\7\4\2\2\u10fa\u10f3\3\2\2\2\u10fa\u10f8\3\2\2\2\u10fb"+
		"\u021b\3\2\2\2\u10fc\u1102\5\u00dco\2\u10fd\u10fe\5\u00dan\2\u10fe\u10ff"+
		"\5\u00dco\2\u10ff\u1101\3\2\2\2\u1100\u10fd\3\2\2\2\u1101\u1104\3\2\2"+
		"\2\u1102\u1100\3\2\2\2\u1102\u1103\3\2\2\2\u1103\u1109\3\2\2\2\u1104\u1102"+
		"\3\2\2\2\u1105\u1107\7)\2\2\u1106\u1105\3\2\2\2\u1106\u1107\3\2\2\2\u1107"+
		"\u1108\3\2\2\2\u1108\u110a\5\u01a2\u00d2\2\u1109\u1106\3\2\2\2\u1109\u110a"+
		"\3\2\2\2\u110a\u1111\3\2\2\2\u110b\u110c\5\u01ae\u00d8\2\u110c\u110d\7"+
		"\23\2\2\u110d\u110e\7\20\2\2\u110e\u1111\3\2\2\2\u110f\u1111\5\u021e\u0110"+
		"\2\u1110\u10fc\3\2\2\2\u1110\u110b\3\2\2\2\u1110\u110f\3\2\2\2\u1111\u021d"+
		"\3\2\2\2\u1112\u1113\7\u0198\2\2\u1113\u1114\7\3\2\2\u1114\u1115\5\u00dc"+
		"o\2\u1115\u1116\7\4\2\2\u1116\u1117\7\23\2\2\u1117\u1118\7\20\2\2\u1118"+
		"\u1119\7)\2\2\u1119\u111a\7\3\2\2\u111a\u111b\5\u019c\u00cf\2\u111b\u1122"+
		"\5\u00a0Q\2\u111c\u111d\7\26\2\2\u111d\u111e\5\u019c\u00cf\2\u111e\u111f"+
		"\5\u00a0Q\2\u111f\u1121\3\2\2\2\u1120\u111c\3\2\2\2\u1121\u1124\3\2\2"+
		"\2\u1122\u1120\3\2\2\2\u1122\u1123\3\2\2\2\u1123\u1125\3\2\2\2\u1124\u1122"+
		"\3\2\2\2\u1125\u1126\7\4\2\2\u1126\u021f\3\2\2\2\u1127\u1129\7\u010b\2"+
		"\2\u1128\u112a\t\66\2\2\u1129\u1128\3\2\2\2\u1129\u112a\3\2\2\2\u112a"+
		"\u1134\3\2\2\2\u112b\u1135\7\20\2\2\u112c\u1131\5\u021c\u010f\2\u112d"+
		"\u112e\7\26\2\2\u112e\u1130\5\u021c\u010f\2\u112f\u112d\3\2\2\2\u1130"+
		"\u1133\3\2\2\2\u1131\u112f\3\2\2\2\u1131\u1132\3\2\2\2\u1132\u1135\3\2"+
		"\2\2\u1133\u1131\3\2\2\2\u1134\u112b\3\2\2\2\u1134\u112c\3\2\2\2\u1135"+
		"\u0221\3\2\2\2\u1136\u1137\5\u0220\u0111\2\u1137\u1139\5\u01e8\u00f5\2"+
		"\u1138\u113a\5\u020e\u0108\2\u1139\u1138\3\2\2\2\u1139\u113a\3\2\2\2\u113a"+
		"\u113c\3\2\2\2\u113b\u113d\5\u0210\u0109\2\u113c\u113b\3\2\2\2\u113c\u113d"+
		"\3\2\2\2\u113d\u113f\3\2\2\2\u113e\u1140\5\u0212\u010a\2\u113f\u113e\3"+
		"\2\2\2\u113f\u1140\3\2\2\2\u1140\u1142\3\2\2\2\u1141\u1143\5\u023e\u0120"+
		"\2\u1142\u1141\3\2\2\2\u1142\u1143\3\2\2\2\u1143\u1145\3\2\2\2\u1144\u1146"+
		"\5\u0242\u0122\2\u1145\u1144\3\2\2\2\u1145\u1146\3\2\2\2\u1146\u1148\3"+
		"\2\2\2\u1147\u1149\5\u0244\u0123\2\u1148\u1147\3\2\2\2\u1148\u1149\3\2"+
		"\2\2\u1149\u0223\3\2\2\2\u114a\u114b\7\u013b\2\2\u114b\u1150\5\u0228\u0115"+
		"\2\u114c\u114d\7\26\2\2\u114d\u114f\5\u0228\u0115\2\u114e\u114c\3\2\2"+
		"\2\u114f\u1152\3\2\2\2\u1150\u114e\3\2\2\2\u1150\u1151\3\2\2\2\u1151\u1154"+
		"\3\2\2\2\u1152\u1150\3\2\2\2\u1153\u114a\3\2\2\2\u1153\u1154\3\2\2\2\u1154"+
		"\u1155\3\2\2\2\u1155\u1156\5\u0220\u0111\2\u1156\u1157\5\u01e4\u00f3\2"+
		"\u1157\u1159\5\u01e8\u00f5\2\u1158\u115a\5\u020e\u0108\2\u1159\u1158\3"+
		"\2\2\2\u1159\u115a\3\2\2\2\u115a\u115c\3\2\2\2\u115b\u115d\5\u0210\u0109"+
		"\2\u115c\u115b\3\2\2\2\u115c\u115d\3\2\2\2\u115d\u115f\3\2\2\2\u115e\u1160"+
		"\5\u0212\u010a\2\u115f\u115e\3\2\2\2\u115f\u1160\3\2\2\2\u1160\u1162\3"+
		"\2\2\2\u1161\u1163\5\u023e\u0120\2\u1162\u1161\3\2\2\2\u1162\u1163\3\2"+
		"\2\2\u1163\u1165\3\2\2\2\u1164\u1166\5\u0242\u0122\2\u1165\u1164\3\2\2"+
		"\2\u1165\u1166\3\2\2\2\u1166\u1168\3\2\2\2\u1167\u1169\5\u0244\u0123\2"+
		"\u1168\u1167\3\2\2\2\u1168\u1169\3\2\2\2\u1169\u116c\3\2\2\2\u116a\u116d"+
		"\5\u0230\u0119\2\u116b\u116d\5\u0234\u011b\2\u116c\u116a\3\2\2\2\u116c"+
		"\u116b\3\2\2\2\u116c\u116d\3\2\2\2\u116d\u116f\3\2\2\2\u116e\u1170\5\u0236"+
		"\u011c\2\u116f\u116e\3\2\2\2\u116f\u1170\3\2\2\2\u1170\u0225\3\2\2\2\u1171"+
		"\u1172\7\u013b\2\2\u1172\u1177\5\u0228\u0115\2\u1173\u1174\7\26\2\2\u1174"+
		"\u1176\5\u0228\u0115\2\u1175\u1173\3\2\2\2\u1176\u1179\3\2\2\2\u1177\u1175"+
		"\3\2\2\2\u1177\u1178\3\2\2\2\u1178\u117b\3\2\2\2\u1179\u1177\3\2\2\2\u117a"+
		"\u1171\3\2\2\2\u117a\u117b\3\2\2\2\u117b\u117c\3\2\2\2\u117c\u1185\5\u023a"+
		"\u011e\2\u117d\u1184\5\u022a\u0116\2\u117e\u1184\5\u022c\u0117\2\u117f"+
		"\u1184\5\u022e\u0118\2\u1180\u1184\5\u0230\u0119\2\u1181\u1184\5\u0234"+
		"\u011b\2\u1182\u1184\5\u0236\u011c\2\u1183\u117d\3\2\2\2\u1183\u117e\3"+
		"\2\2\2\u1183\u117f\3\2\2\2\u1183\u1180\3\2\2\2\u1183\u1181\3\2\2\2\u1183"+
		"\u1182\3\2\2\2\u1184\u1187\3\2\2\2\u1185\u1183\3\2\2\2\u1185\u1186\3\2"+
		"\2\2\u1186\u0227\3\2\2\2\u1187\u1185\3\2\2\2\u1188\u1189\5\u01ae\u00d8"+
		"\2\u1189\u118a\7\3\2\2\u118a\u118f\5\u019c\u00cf\2\u118b\u118c\7\26\2"+
		"\2\u118c\u118e\5\u019c\u00cf\2\u118d\u118b\3\2\2\2\u118e\u1191\3\2\2\2"+
		"\u118f\u118d\3\2\2\2\u118f\u1190\3\2\2\2\u1190\u1192\3\2\2\2\u1191\u118f"+
		"\3\2\2\2\u1192\u1193\7\4\2\2\u1193\u1194\7)\2\2\u1194\u1195\7\3\2\2\u1195"+
		"\u1196\5\u023a\u011e\2\u1196\u1197\7\4\2\2\u1197\u0229\3\2\2\2\u1198\u1199"+
		"\7\177\2\2\u1199\u11a3\7\u012b\2\2\u119a\u119b\7\u00c6\2\2\u119b\u11a0"+
		"\5\u019c\u00cf\2\u119c\u119d\7\26\2\2\u119d\u119f\5\u019c\u00cf\2\u119e"+
		"\u119c\3\2\2\2\u119f\u11a2\3\2\2\2\u11a0\u119e\3\2\2\2\u11a0\u11a1\3\2"+
		"\2\2\u11a1\u11a4\3\2\2\2\u11a2\u11a0\3\2\2\2\u11a3\u119a\3\2\2\2\u11a3"+
		"\u11a4\3\2\2\2\u11a4\u022b\3\2\2\2\u11a5\u11a6\7\177\2\2\u11a6\u11a7\7"+
		"\u017c\2\2\u11a7\u11a8\7\u0171\2\2\u11a8\u022d\3\2\2\2\u11a9\u11aa\7\u00cc"+
		"\2\2\u11aa\u11ab\7\177\2\2\u11ab\u11ac\7\30\2\2\u11ac\u11ad\t\67\2\2\u11ad"+
		"\u022f\3\2\2\2\u11ae\u11b9\7\u013b\2\2\u11af\u11b1\7\u018b\2\2\u11b0\u11b2"+
		"\5\u0232\u011a\2\u11b1\u11b0\3\2\2\2\u11b1\u11b2\3\2\2\2\u11b2\u11ba\3"+
		"\2\2\2\u11b3\u11b5\7\u018c\2\2\u11b4\u11b6\5\u0232\u011a\2\u11b5\u11b4"+
		"\3\2\2\2\u11b5\u11b6\3\2\2\2\u11b6\u11ba\3\2\2\2\u11b7\u11ba\7\u0154\2"+
		"\2\u11b8\u11ba\7\u0199\2\2\u11b9\u11af\3\2\2\2\u11b9\u11b3\3\2\2\2\u11b9"+
		"\u11b7\3\2\2\2\u11b9\u11b8\3\2\2\2\u11ba\u0231\3\2\2\2\u11bb\u11bc\7\u019a"+
		"\2\2\u11bc\u11bd\7\u0143\2\2\u11bd\u11be\7\u00a2\2\2\u11be\u11bf\t8\2"+
		"\2\u11bf\u11c0\7\u0167\2\2\u11c0\u0233\3\2\2\2\u11c1\u11c2\7\u0191\2\2"+
		"\u11c2\u11c3\7\u0166\2\2\u11c3\u11c4\7U\2\2\u11c4\u0235\3\2\2\2\u11c5"+
		"\u11c6\7\u00e8\2\2\u11c6\u11c7\7\30\2\2\u11c7\u0237\3\2\2\2\u11c8\u11c9"+
		"\7\3\2\2\u11c9\u11ca\5\u023a\u011e\2\u11ca\u11cb\7\4\2\2\u11cb\u0239\3"+
		"\2\2\2\u11cc\u11cd\7\3\2\2\u11cd\u11ce\5\u023a\u011e\2\u11ce\u11cf\7\4"+
		"\2\2\u11cf\u11d3\3\2\2\2\u11d0\u11d3\5\u0222\u0112\2\u11d1\u11d3\5\u023c"+
		"\u011f\2\u11d2\u11cc\3\2\2\2\u11d2\u11d0\3\2\2\2\u11d2\u11d1\3\2\2\2\u11d3"+
		"\u11e1\3\2\2\2\u11d4\u11d6\t9\2\2\u11d5\u11d7\t\66\2\2\u11d6\u11d5\3\2"+
		"\2\2\u11d6\u11d7\3\2\2\2\u11d7\u11dd\3\2\2\2\u11d8\u11de\5\u0222\u0112"+
		"\2\u11d9\u11da\7\3\2\2\u11da\u11db\5\u023a\u011e\2\u11db\u11dc\7\4\2\2"+
		"\u11dc\u11de\3\2\2\2\u11dd\u11d8\3\2\2\2\u11dd\u11d9\3\2\2\2\u11de\u11e0"+
		"\3\2\2\2\u11df\u11d4\3\2\2\2\u11e0\u11e3\3\2\2\2\u11e1\u11df\3\2\2\2\u11e1"+
		"\u11e2\3\2\2\2\u11e2\u11e5\3\2\2\2\u11e3\u11e1\3\2\2\2\u11e4\u11e6\5\u023e"+
		"\u0120\2\u11e5\u11e4\3\2\2\2\u11e5\u11e6\3\2\2\2\u11e6\u11e8\3\2\2\2\u11e7"+
		"\u11e9\5\u0242\u0122\2\u11e8\u11e7\3\2\2\2\u11e8\u11e9\3\2\2\2\u11e9\u11eb"+
		"\3\2\2\2\u11ea\u11ec\5\u0244\u0123\2\u11eb\u11ea\3\2\2\2\u11eb\u11ec\3"+
		"\2\2\2\u11ec\u023b\3\2\2\2\u11ed\u11fa\7\u012f\2\2\u11ee\u11fb\5\u00e0"+
		"q\2\u11ef\u11f0\7\3\2\2\u11f0\u11f5\5\u00e0q\2\u11f1\u11f2\7\26\2\2\u11f2"+
		"\u11f4\5\u00e0q\2\u11f3\u11f1\3\2\2\2\u11f4\u11f7\3\2\2\2\u11f5\u11f3"+
		"\3\2\2\2\u11f5\u11f6\3\2\2\2\u11f6\u11f8\3\2\2\2\u11f7\u11f5\3\2\2\2\u11f8"+
		"\u11f9\7\4\2\2\u11f9\u11fb\3\2\2\2\u11fa\u11ee\3\2\2\2\u11fa\u11ef\3\2"+
		"\2\2\u11fb\u023d\3\2\2\2\u11fc\u11fd\7\u00ce\2\2\u11fd\u1211\7\65\2\2"+
		"\u11fe\u1200\5\u0240\u0121\2\u11ff\u1201\t\31\2\2\u1200\u11ff\3\2\2\2"+
		"\u1200\u1201\3\2\2\2\u1201\u1209\3\2\2\2\u1202\u1203\7\26\2\2\u1203\u1205"+
		"\5\u0240\u0121\2\u1204\u1206\t\31\2\2\u1205\u1204\3\2\2\2\u1205\u1206"+
		"\3\2\2\2\u1206\u1208\3\2\2\2\u1207\u1202\3\2\2\2\u1208\u120b\3\2\2\2\u1209"+
		"\u1207\3\2\2\2\u1209\u120a\3\2\2\2\u120a\u1212\3\2\2\2\u120b\u1209\3\2"+
		"\2\2\u120c\u120d\7\u015f\2\2\u120d\u1212\7\u010d\2\2\u120e\u120f\7\u00ce"+
		"\2\2\u120f\u1210\7\u00c6\2\2\u1210\u1212\5\u01ae\u00d8\2\u1211\u11fe\3"+
		"\2\2\2\u1211\u120c\3\2\2\2\u1211\u120e\3\2\2\2\u1212\u023f\3\2\2\2\u1213"+
		"\u1217\5\u019c\u00cf\2\u1214\u1217\7\30\2\2\u1215\u1217\5\u00dco\2\u1216"+
		"\u1213\3\2\2\2\u1216\u1214\3\2\2\2\u1216\u1215\3\2\2\2\u1217\u0241\3\2"+
		"\2\2\u1218\u1219\7\u00c7\2\2\u1219\u121a\7\30\2\2\u121a\u121b\t\67\2\2"+
		"\u121b\u0243\3\2\2\2\u121c\u121d\7{\2\2\u121d\u121f\t:\2\2\u121e\u1220"+
		"\7\30\2\2\u121f\u121e\3\2\2\2\u121f\u1220\3\2\2\2\u1220\u1221\3\2\2\2"+
		"\u1221\u1222\t\67\2\2\u1222\u1223\7\u0171\2\2\u1223\u0245\3\2\2\2\u1224"+
		"\u122c\7\u031e\2\2\u1225\u122c\5\u0248\u0125\2\u1226\u122c\5\u0134\u009b"+
		"\2\u1227\u122c\5\u0130\u0099\2\u1228\u122c\5\u010c\u0087\2\u1229\u122c"+
		"\5\u010e\u0088\2\u122a\u122c\5\u0132\u009a\2\u122b\u1224\3\2\2\2\u122b"+
		"\u1225\3\2\2\2\u122b\u1226\3\2\2\2\u122b\u1227\3\2\2\2\u122b\u1228\3\2"+
		"\2\2\u122b\u1229\3\2\2\2\u122b\u122a\3\2\2\2\u122c\u0247\3\2\2\2\u122d"+
		"\u122e\t;\2\2\u122e\u0249\3\2\2\2\u023c\u024d\u0251\u0254\u0268\u026d"+
		"\u0270\u0276\u0280\u0283\u0289\u028b\u0291\u029b\u02a5\u02a7\u02af\u02b8"+
		"\u02be\u02c2\u02cd\u02d5\u02ef\u02f1\u02fc\u0301\u0306\u0309\u030e\u0314"+
		"\u0319\u0321\u0324\u032c\u0334\u033c\u0344\u034c\u0354\u035a\u035d\u0360"+
		"\u0364\u036a\u036e\u0370\u0375\u037b\u0385\u0389\u038d\u0398\u039d\u03a0"+
		"\u03a5\u03af\u03b4\u03bc\u03bf\u03c3\u03c7\u03ca\u03d0\u03d3\u03d9\u03e0"+
		"\u03e4\u03ed\u03f1\u03f5\u03fc\u0400\u0405\u0408\u040b\u0411\u0415\u0417"+
		"\u041c\u0421\u042d\u0431\u0435\u043b\u043f\u0448\u0454\u0459\u0462\u046a"+
		"\u046e\u0471\u0476\u047b\u0487\u0490\u049b\u049f\u04a3\u04ac\u04b8\u04c4"+
		"\u04c9\u04ce\u04d2\u04dd\u04e6\u04eb\u04f1\u04f5\u04fa\u0506\u0513\u0518"+
		"\u051d\u0520\u0528\u052f\u053f\u0543\u054d\u0557\u0559\u0560\u0565\u056a"+
		"\u056c\u0574\u057c\u0582\u058b\u0591\u0597\u059b\u05a0\u05a2\u05ab\u05b5"+
		"\u05bb\u05c1\u05c6\u05ca\u05cd\u05d2\u05d6\u05d9\u05df\u05e4\u05e8\u05eb"+
		"\u05f1\u05f5\u05fb\u05ff\u0602\u0607\u060d\u0614\u061a\u0621\u0627\u062f"+
		"\u0633\u0639\u064a\u064d\u0657\u065d\u0660\u0667\u0670\u067b\u0682\u0698"+
		"\u06a3\u06a9\u06ac\u06b5\u06c5\u06ca\u06cd\u06d1\u06da\u06e6\u06e9\u06f0"+
		"\u06fb\u0702\u0728\u072d\u0732\u073b\u0741\u0744\u074b\u074e\u0751\u075b"+
		"\u0768\u0774\u0781\u0791\u0795\u079a\u07a5\u07ad\u07b4\u07be\u07c1\u07d9"+
		"\u07e1\u07e5\u07ec\u07f1\u07f7\u07fe\u0802\u0820\u082e\u0842\u084a\u085e"+
		"\u0866\u086a\u0870\u0874\u0878\u087d\u087f\u0886\u088b\u089a\u08a0\u08a3"+
		"\u08aa\u08ad\u08b0\u08cf\u08da\u08e0\u08e9\u08f6\u08f9\u08ff\u0903\u0907"+
		"\u090d\u0917\u091d\u0923\u0928\u092c\u092f\u0934\u0939\u093f\u0944\u0949"+
		"\u094f\u0953\u0959\u095d\u0960\u0965\u096b\u0972\u0978\u097f\u0984\u098f"+
		"\u0996\u099a\u09a2\u09a6\u09a9\u09ad\u09b2\u09ba\u09c1\u09cd\u09cf\u09d6"+
		"\u09dd\u09e1\u09ee\u09f5\u09f9\u0a05\u0a07\u0a0a\u0a10\u0a14\u0a1c\u0a24"+
		"\u0a2e\u0a36\u0a3e\u0a46\u0a4b\u0a5c\u0a6a\u0a70\u0a74\u0a88\u0a92\u0a9b"+
		"\u0aa1\u0ab2\u0ab9\u0ac1\u0ac4\u0ac8\u0ad4\u0aee\u0aff\u0b04\u0b0d\u0b15"+
		"\u0b1a\u0b1e\u0b25\u0b31\u0b3a\u0b47\u0b4f\u0b5b\u0b60\u0b69\u0b6e\u0b72"+
		"\u0b75\u0b7c\u0b82\u0b9a\u0ba8\u0baa\u0bac\u0bb9\u0bbb\u0bc3\u0bcc\u0bd3"+
		"\u0bd8\u0bdc\u0be2\u0bea\u0bed\u0bf3\u0bf8\u0c0a\u0c0c\u0c18\u0c1f\u0c28"+
		"\u0c3c\u0c41\u0c4a\u0c50\u0c56\u0c72\u0c78\u0c7e\u0c83\u0c88\u0c8c\u0c8f"+
		"\u0c9a\u0ca5\u0ca8\u0cb1\u0cb4\u0cba\u0cc3\u0cca\u0cdb\u0ce5\u0cf2\u0cff"+
		"\u0d09\u0d0e\u0d14\u0d1f\u0d27\u0d2a\u0d2f\u0d35\u0d39\u0d40\u0d44\u0d53"+
		"\u0d5d\u0d65\u0d7f\u0d89\u0d93\u0da0\u0dad\u0db2\u0db6\u0dbc\u0dc1\u0dc6"+
		"\u0dce\u0dd5\u0dd8\u0dde\u0de5\u0df0\u0dfa\u0e00\u0e06\u0e0b\u0e0f\u0e12"+
		"\u0e17\u0e1a\u0e20\u0e25\u0e28\u0e2e\u0e31\u0e37\u0e3b\u0e3e\u0e43\u0e49"+
		"\u0e50\u0e56\u0e5d\u0e63\u0e6a\u0e71\u0e74\u0e7d\u0e8a\u0ea6\u0eaa\u0eb4"+
		"\u0ec5\u0ecc\u0ed3\u0edf\u0ee6\u0efc\u0f01\u0f08\u0f10\u0f14\u0f1a\u0f1d"+
		"\u0f26\u0f2a\u0f2f\u0f35\u0f39\u0f42\u0f47\u0f4d\u0f54\u0f58\u0f5e\u0f65"+
		"\u0f69\u0f6d\u0f80\u0f86\u0f90\u0f96\u0f99\u0f9e\u0fa0\u0fa7\u0fac\u0fae"+
		"\u0fbe\u0fc4\u0fce\u0fd4\u0fd7\u0fdc\u0fde\u0fe5\u0fee\u0ff4\u0ff6\u0ffc"+
		"\u1000\u1011\u1021\u1024\u102a\u1032\u103d\u1045\u104b\u1051\u1055\u105a"+
		"\u105f\u1063\u1068\u1074\u1080\u1084\u108a\u108f\u1093\u1099\u109c\u10a3"+
		"\u10ab\u10b0\u10b4\u10b9\u10c5\u10cf\u10d9\u10e4\u10ea\u10ee\u10fa\u1102"+
		"\u1106\u1109\u1110\u1122\u1129\u1131\u1134\u1139\u113c\u113f\u1142\u1145"+
		"\u1148\u1150\u1153\u1159\u115c\u115f\u1162\u1165\u1168\u116c\u116f\u1177"+
		"\u117a\u1183\u1185\u118f\u11a0\u11a3\u11b1\u11b5\u11b9\u11d2\u11d6\u11dd"+
		"\u11e1\u11e5\u11e8\u11eb\u11f5\u11fa\u1200\u1205\u1209\u1211\u1216\u121f"+
		"\u122b";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}
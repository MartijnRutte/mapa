// Generated from src/DB2zSQLParser.g4 by ANTLR 4.7.2
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class DB2zSQLParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.7.2", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		LPAREN=1, RPAREN=2, OPENSQBRACKET=3, CLOSESQBRACKET=4, QUESTIONMARK=5, 
		EQ=6, GT=7, LT=8, GE=9, LE=10, NE=11, PLUS=12, MINUS=13, SPLAT=14, SLASH=15, 
		CONCATOP=16, DOT=17, COLON=18, SEMICOLON=19, COMMA=20, ATSIGN=21, NONNUMERICLITERAL=22, 
		INTEGERLITERAL=23, NUMERICLITERAL=24, NEWLINE=25, WS=26, SQLCOMMENT=27, 
		SQLBLOCKCOMMENTBEGIN=28, SQLBLOCKCOMMENTEND=29, INSTEAD=30, NEW=31, NEW_TABLE=32, 
		OLD_TABLE=33, REFERENCING=34, BASED=35, UPON=36, ADD=37, AFTER=38, ALL=39, 
		ALLOCATE=40, ALLOW=41, ALTER=42, ALTERAND=43, ANY=44, ARRAY=45, ARRAY_EXISTS=46, 
		AS=47, ASENSITIVE=48, ASSOCIATE=49, ASUTIME=50, AT=51, AUDIT=52, AUX=53, 
		AUXILIARY=54, BEFORE=55, BEGIN=56, BETWEEN=57, BUFFERPOOL=58, BUFFERPOOLS=59, 
		BY=60, CALL=61, CAPTURE=62, CASCADED=63, CASE=64, CAST=65, CCSID=66, CHAR=67, 
		CHARACTER=68, CHECK=69, CLONE=70, CLOSE=71, CLUSTER=72, COLLECTION=73, 
		COLLID=74, COLUMN=75, COMMENT=76, COMMIT=77, CONCAT=78, CONDITION=79, 
		CONNECT=80, CONNECTION=81, CONSTRAINT=82, CONTAINS=83, CONTENT=84, CONTINUE=85, 
		CREATE=86, CUBE=87, CURRENT=88, CURRENT_LC_CTYPE=89, CURRVAL=90, CURSOR=91, 
		DATA=92, DATABASE=93, DAY=94, DAYS=95, DBINFO=96, DECLARE=97, DEFAULT=98, 
		DELETE=99, DESCRIPTOR=100, DETERMINISTIC=101, DISABLE=102, DISALLOW=103, 
		DISTINCT=104, DO=105, DOCUMENT=106, DOUBLE=107, DROP=108, DSSIZE=109, 
		DYNAMIC=110, EDITPROC=111, ELSE=112, ELSEIF=113, ENCODING=114, ENCRYPTION=115, 
		END=116, END_EXEC=117, ENDING=118, ERASE=119, ESCAPE=120, EXCEPT=121, 
		EXCEPTION=122, EXEC_SQL=123, EXECUTE=124, EXISTS=125, EXIT=126, EXPLAIN=127, 
		EXTERNAL=128, FENCED=129, FETCH=130, FIELDPROC=131, FINAL=132, FIRST=133, 
		FOR=134, FREE=135, FROM=136, FULL=137, FUNCTION=138, GENERATED=139, GET=140, 
		GLOBAL=141, GO=142, GOTO=143, GRANT=144, GROUP=145, HANDLER=146, HAVING=147, 
		HOLD=148, HOUR=149, HOURS=150, IF=151, IMMEDIATE=152, IN=153, INCLUSIVE=154, 
		INDEX=155, INDEXBP=156, INHERIT=157, INNER=158, INOUT=159, INSENSITIVE=160, 
		INSERT=161, INTERSECT=162, INTO=163, IS=164, ISOBID=165, ITERATE=166, 
		JAR=167, JOIN=168, KEEP=169, KEY=170, LABEL=171, LANGUAGE=172, LAST=173, 
		LC_CTYPE=174, LEAVE=175, LEFT=176, LIKE=177, LIMIT=178, LOCAL=179, LOCALE=180, 
		LOCATOR=181, LOCATORS=182, LOCK=183, LOCKMAX=184, LOCKSIZE=185, LONG=186, 
		LOOP=187, MAINTAINED=188, MATERIALIZED=189, MICROSECOND=190, MICROSECONDS=191, 
		MINUTEMINUTES=192, MODIFIES=193, MONTH=194, MONTHS=195, NEXT=196, NEXTVAL=197, 
		NO=198, NONE=199, NOT=200, NULL=201, NULLS=202, NUMPARTS=203, OBID=204, 
		OF=205, OFFSET=206, OLD=207, ON=208, OPEN=209, OPTIMIZATION=210, OPTIMIZE=211, 
		OR=212, ORDER=213, ORGANIZATION=214, OUT=215, OUTER=216, PACKAGE=217, 
		PADDED=218, PARAMETER=219, PART=220, PARTITION=221, PARTITIONED=222, PARTITIONING=223, 
		PATH=224, PERIOD=225, PIECESIZE=226, PLAN=227, PRECISION=228, PREPARE=229, 
		PREVVAL=230, PRIOR=231, PRIQTY=232, PRIVILEGES=233, PROCEDURE=234, PROGRAM=235, 
		PSID=236, PUBLIC=237, QUERY=238, QUERYNO=239, READS=240, REFERENCES=241, 
		REFRESH=242, RELEASE=243, RENAME=244, REPEAT=245, RESIGNAL=246, RESTRICT=247, 
		RESULT=248, RESULT_SET_LOCATOR=249, RETURN=250, RETURNS=251, REVOKE=252, 
		RIGHT=253, ROLE=254, ROLLBACK=255, ROLLUP=256, ROUND_CEILING=257, ROUND_DOWN=258, 
		ROUND_FLOOR=259, ROUND_HALF_DOWN=260, ROUND_HALF_EVEN=261, ROUND_HALF_UP=262, 
		ROUND_UP=263, ROW=264, ROWSET=265, RUN=266, SAVEPOINT=267, SCHEMA=268, 
		SCRATCHPAD=269, SECOND=270, SECONDS=271, SECQTY=272, SECURITY=273, SELECT=274, 
		SENSITIVE=275, SEQUENCE=276, SET=277, SIGNAL=278, SIMPLE=279, SOME=280, 
		SOURCE=281, SPECIFIC=282, STANDARD=283, STATEMENT=284, STATIC=285, STAY=286, 
		STOGROUP=287, STORES=288, STYLE=289, SUMMARY=290, SYNONYM=291, SYSDATE=292, 
		SYSTEM=293, SYSTIMESTAMP=294, TABLE=295, TABLESPACE=296, THEN=297, TO=298, 
		TRIGGER=299, TRUNCATE=300, TYPE=301, UNDO=302, UNION=303, UNIQUE=304, 
		UNTIL=305, UPDATE=306, USING=307, VALIDPROC=308, VALUE=309, VALUES=310, 
		VARIABLE=311, VARIANT=312, VCAT=313, VERSIONING=314, VIEW=315, VOLATILE=316, 
		VOLUMES=317, WHEN=318, WHENEVER=319, WHERE=320, WHILE=321, WITH=322, WLM=323, 
		XMLCAST=324, XMLEXISTS=325, XMLNAMESPACES=326, YEAR=327, YEARS=328, ZONE=329, 
		AND=330, ARRAY_AGG=331, ASC=332, AVG=333, BIT=334, CHANGE=335, CODEUNITS16=336, 
		CODEUNITS32=337, CORR=338, CORRELATION=339, COUNT=340, COUNT_BIG=341, 
		COVAR=342, COVARIANCE=343, COVARIANCE_SAMP=344, COVAR_POP=345, COVAR_SAMP=346, 
		CS=347, CUME_DIST=348, DENSE_RANK=349, DESC=350, EBCDIC=351, EXCLUSIVE=352, 
		FIRST_VALUE=353, FOLLOWING=354, GROUPING=355, IGNORE=356, INDICATOR=357, 
		INPUT=358, ISNULL=359, LAG=360, LARGE=361, LAST_VALUE=362, LEAD=363, LISTAGG=364, 
		LOCKED=365, LOCKS=366, MEDIAN=367, MINUTES=368, MIXED=369, NOTNULL=370, 
		NTH_VALUE=371, NTILE=372, NUMERIC=373, OBJECT=374, OCTETS=375, ONLY=376, 
		OVER=377, PASSING=378, PERCENTILE_CONT=379, PERCENTILE_DISC=380, PERCENT_RANK=381, 
		PRECEDING=382, PREVIOUS=383, RANGE=384, RANK=385, RATIO_TO_REPORT=386, 
		READ=387, REF=388, REGR_AVGX=389, REGR_AVGY=390, REGR_COUNT=391, REGR_ICPT=392, 
		REGR_INTERCEPT=393, REGR_R2=394, REGR_SLOPE=395, REGR_SXX=396, REGR_SXY=397, 
		REGR_SYY=398, RESPECT=399, ROW_NUMBER=400, ROWS=401, RR=402, RS=403, SBCS=404, 
		SELECTIVITY=405, SETS=406, SHARE=407, SKIP_=408, STDDEV=409, STDDEV_POP=410, 
		STDDEV_SAMP=411, SUM=412, TOKEN=413, UNBOUNDED=414, UNPACK=415, UR=416, 
		USE=417, VAR=418, VARIANCE=419, VARIANCE_SAMP=420, VAR_POP=421, VAR_SAMP=422, 
		VARYING=423, WITHOUT=424, XML=425, XMLAGG=426, COLUMNS=427, SQLID=428, 
		ORDINALITY=429, SYSTEM_TIME=430, BUSINESS_TIME=431, MULTIPLIER=432, UNNEST=433, 
		CROSS=434, CALLER=435, CLIENT=436, POSITIONING=437, SCROLL=438, ACTION=439, 
		ASSEMBLE=440, C_=441, CALLED=442, COBOL=443, DB2=444, DEFINER=445, DISPATCH=446, 
		ENVIRONMENT=447, FAILURE=448, FAILURES=449, JAVA=450, MAIN=451, NAME=452, 
		OPTIONS=453, PARALLEL=454, PLI=455, REGISTERS=456, RESIDENT=457, SECURED=458, 
		SPECIAL=459, SQL=460, STOP=461, SUB=462, YES=463, APPLICATION=464, CHANGED=465, 
		COMPATIBILITY=466, COMPRESS=467, COPY=468, FREEPAGE=469, GBPCACHE=470, 
		INCLUDE=471, MAXVALUE=472, MINVALUE=473, PCTFREE=474, REGENERATE=475, 
		MASK=476, ENABLE=477, PERMISSION=478, ATOMIC=479, SQLEXCEPTION=480, MERGE=481, 
		MATCHED=482, SQLSTATE=483, MESSAGE_TEXT=484, OVERRIDING=485, PORTION=486, 
		DB2SQL=487, DEBUG=488, GENERAL=489, MODE_=490, REXX=491, CACHE=492, CYCLE=493, 
		INCREMENT=494, RESTART=495, DATACLAS=496, MGMTCLAS=497, REMOVE=498, STORCLAS=499, 
		ACCESS=500, ACTIVATE=501, ALWAYS=502, APPEND=503, ARCHIVE=504, BUSINESS=505, 
		CASCADE=506, CHANGES=507, CONTROL=508, DEACTIVATE=509, DEFERRED=510, EACH=511, 
		ENFORCED=512, EXTRA=513, FOREIGN=514, HIDDEN_=515, HISTORY=516, ID=517, 
		IDENTITY=518, IMPLICITLY=519, INITIALLY=520, INLINE=521, OPERATION=522, 
		ORGANIZE=523, OVERLAPS=524, PACKAGE_NAME=525, PACKAGE_SCHEMA=526, PACKAGE_VERSION=527, 
		PRIMARY=528, RESET=529, ROTATE=530, START=531, SYSIBM=532, TRANSACTION=533, 
		XMLSCHEMA=534, ELEMENT=535, URL=536, NAMESPACE=537, LOCATION=538, SYSXSR=539, 
		ALGORITHM=540, FIXEDLENGTH=541, HUFFMAN=542, LOB=543, LOG=544, LOGGED=545, 
		MAXPARTITIONS=546, MAXROWS=547, MEMBER=548, MOVE=549, PAGE=550, PAGENUM=551, 
		PENDING=552, RELATIVE=553, SEGSIZE=554, TRACKMOD=555, ADDRESS=556, ATTRIBUTES=557, 
		AUTHENTICATION=558, AUTHID=559, CONTEXT=560, JOBNAME=561, OWNER=562, PROFILE=563, 
		QUALIFIER=564, SERVAUTH=565, TRUSTED=566, SECTION=567, ACTIVE=568, VERSION=569, 
		ALIAS=570, WORK=571, WORKFILE=572, SYSDEFLT=573, NULTERM=574, STRUCTURE=575, 
		GENERIC=576, TEMPORARY=577, DEFER=578, DEFINE=579, EXCLUDE=580, GENERATE=581, 
		KEYS=582, XMLPATTERN=583, SIZE=584, EVERY=585, ABSOLUTE=586, ACCELERATOR=587, 
		EXCLUDING=588, INCLUDING=589, DEFAULTS=590, MODIFIERS=591, OPTION=592, 
		PRESERVE=593, BOTH=594, DESCRIBE=595, LABELS=596, NAMES=597, OUTPUT=598, 
		EXCHANGE=599, STABILIZED=600, STMTCACHE=601, STMTID=602, STMTTOKEN=603, 
		STARTING=604, CATALOG_NAME=605, CONDITION_NUMBER=606, CURSOR_NAME=607, 
		DB2_AUTHENTICATION_TYPE=608, DB2_AUTHORIZATION_ID=609, DB2_CONNECTION_STATE=610, 
		DB2_CONNECTION_STATUS=611, DB2_ENCRYPTION_TYPE=612, DB2_ERROR_CODE1=613, 
		DB2_ERROR_CODE2=614, DB2_ERROR_CODE3=615, DB2_ERROR_CODE4=616, DB2_GET_DIAGNOSTICS_DIAGNOSTICS=617, 
		DB2_INTERNAL_ERROR_POINTER=618, DB2_LAST_ROW=619, DB2_LINE_NUMBER=620, 
		DB2_MESSAGE_ID=621, DB2_MODULE_DETECTING_ERROR=622, DB2_NUMBER_PARAMETER_MARKERS=623, 
		DB2_NUMBER_RESULT_SETS=624, DB2_NUMBER_ROWS=625, DB2_ORDINAL_TOKEN_=626, 
		DB2_ORDINAL_TOKEN_n=627, DB2_PRODUCT_ID=628, DB2_REASON_CODE=629, DB2_RETURNED_SQLCODE=630, 
		DB2_RETURN_STATUS=631, DB2_ROW_NUMBER=632, DB2_SERVER_CLASS_NAME=633, 
		DB2_SQL_ATTR_CURSOR_HOLD=634, DB2_SQL_ATTR_CURSOR_ROWSET=635, DB2_SQL_ATTR_CURSOR_SCROLLABLE=636, 
		DB2_SQL_ATTR_CURSOR_SENSITIVITY=637, DB2_SQL_ATTR_CURSOR_TYPE=638, DB2_SQLERRD1=639, 
		DB2_SQLERRD2=640, DB2_SQLERRD3=641, DB2_SQLERRD4=642, DB2_SQLERRD5=643, 
		DB2_SQLERRD6=644, DB2_SQLERRD_SET=645, DB2_SQL_NESTING_LEVEL=646, DB2_TOKEN_COUNT=647, 
		DIAGNOSTICS=648, MORE_=649, NUMBER=650, RETURNED_SQLSTATE=651, ROW_COUNT=652, 
		SERVER_NAME=653, STACKED=654, CREATETAB=655, CREATETS=656, DBADM=657, 
		DBCTRL=658, DBMAINT=659, DISPLAYDB=660, IMAGCOPY=661, LOAD=662, PACKADM=663, 
		RECOVERDB=664, REORG=665, REPAIR=666, STARTDB=667, STATS=668, STOPDB=669, 
		BIND=670, ALTERIN=671, CREATEIN=672, DROPIN=673, USAGE=674, ACCESSCTRL=675, 
		BINDADD=676, BINDAGENT=677, BSDS=678, CREATEALIAS=679, CREATEDBA=680, 
		CREATEDBC=681, CREATE_SECURE_OBJECT=682, CREATESG=683, CREATETMTAB=684, 
		DATAACCESS=685, DEBUGSESSION=686, DISPLAY=687, MONITOR1=688, MONITOR2=689, 
		RECOVER=690, SQLADM=691, STOPALL=692, STOSPACE=693, SYSADM=694, SYSCTRL=695, 
		SYSOPR=696, TRACE=697, UNLOAD=698, WRITE=699, ABS=700, ABSVAL=701, ACOS=702, 
		ADD_DAYS=703, ADD_MONTHS=704, ARRAY_DELETE=705, ARRAY_FIRST=706, ARRAY_LAST=707, 
		ARRAY_NEXT=708, ARRAY_PRIOR=709, ARRAY_TRIM=710, ASCII=711, ASCII_CHR=712, 
		ASCIISTR=713, ASCII_STR=714, ASIN=715, ATAN=716, ATAN2=717, ATANH=718, 
		BIGINT=719, BINARY=720, BITAND=721, BITANDNOT=722, BITNOT=723, BITOR=724, 
		BITXOR=725, BLOB=726, BTRIM=727, CARDINALITY=728, CCSID_ENCODING=729, 
		CEIL=730, CEILING=731, CHAR9=732, CHARACTER_LENGTH=733, CHAR_LENGTH=734, 
		CHR=735, CLOB=736, COALESCE=737, COLLATION_KEY=738, COMPARE_DECFLOAT=739, 
		COS=740, COSH=741, DATE=742, DAYOFMONTH=743, DAYOFWEEK=744, DAYOFWEEK_ISO=745, 
		DAYOFYEAR=746, DAYS_BETWEEN=747, DBCLOB=748, DEC=749, DECFLOAT=750, DECFLOAT_FORMAT=751, 
		DECFLOAT_SORTKEY=752, DECIMAL=753, DECODE=754, DECRYPT_BINARY=755, DECRYPT_BIT=756, 
		DECRYPT_CHAR=757, DECRYPT_DATAKEY_BIGINT=758, DECRYPT_DATAKEY_BIT=759, 
		DECRYPT_DATAKEY_CLOB=760, DECRYPT_DATAKEY_DBCLOB=761, DECRYPT_DATAKEY_DECIMAL=762, 
		DECRYPT_DATAKEY_INTEGER=763, DECRYPT_DATAKEY_VARCHAR=764, DECRYPT_DATAKEY_VARGRAPHIC=765, 
		DECRYPT_DB=766, DEGREES=767, DIFFERENCE=768, DIGITS=769, DOUBLE_PRECISION=770, 
		DSN_XMLVALIDATE=771, EBCDIC_CHR=772, EBCDIC_STR=773, ENCRYPT_DATAKEY=774, 
		ENCRYPT_TDES=775, EXP=776, EXTRACT=777, FLOAT=778, FLOOR=779, GENERATE_UNIQUE=780, 
		GENERATE_UNIQUE_BINARY=781, GETHINT=782, GETVARIABLE=783, GRAPHIC=784, 
		GREATEST=785, HASH=786, HASH_CRC32=787, HASH_MD5=788, HASH_SHA1=789, HASH_SHA256=790, 
		HEX=791, IDENTITY_VAL_LOCAL=792, IFNULL=793, INSTR=794, INT=795, INTEGER=796, 
		JULIAN_DAY=797, LAST_DAY=798, LCASE=799, LEAST=800, LENGTH=801, LN=802, 
		LOCATE=803, LOCATE_IN_STRING=804, LOG10=805, LOWER=806, LPAD=807, LTRIM=808, 
		MAX=809, MAX_CARDINALITY=810, MIDNIGHT_SECONDS=811, MIN=812, MINUTE=813, 
		MOD=814, MONTHS_BETWEEN=815, MQREAD=816, MQREADCLOB=817, MQRECEIVE=818, 
		MQRECEIVECLOB=819, MQSEND=820, MULTIPLY_ALT=821, NEXT_DAY=822, NEXT_MONTH=823, 
		NORMALIZE_DECFLOAT=824, NORMALIZE_STRING=825, NULLIF=826, NVL=827, OVERLAY=828, 
		PACK=829, POSITION=830, POSSTR=831, POW=832, POWER=833, QUANTIZE=834, 
		QUARTER=835, RADIANS=836, RAISE_ERROR=837, RAND=838, RANDOM=839, REAL=840, 
		REGEXP_COUNT=841, REGEXP_INSTR=842, REGEXP_LIKE=843, REGEXP_REPLACE=844, 
		REGEXP_SUBSTR=845, REPLACE=846, RID=847, ROUND=848, ROUND_TIMESTAMP=849, 
		ROWID=850, RPAD=851, RTRIM=852, SCORE=853, SIGN=854, SIN=855, SINH=856, 
		SMALLINT=857, SOAPHTTPC=858, SOAPHTTPNC=859, SOAPHTTPNV=860, SOAPHTTPV=861, 
		SOUNDEX=862, SPACE=863, SQRT=864, STRIP=865, STRLEFT=866, STRPOS=867, 
		STRRIGHT=868, SUBSTR=869, SUBSTRING=870, TAN=871, TANH=872, TIME=873, 
		TIMESTAMP=874, TIMESTAMPADD=875, TIMESTAMPDIFF=876, TIMESTAMP_FORMAT=877, 
		TIMESTAMP_ISO=878, TIMESTAMP_TZ=879, TO_CHAR=880, TO_CLOB=881, TO_DATE=882, 
		TO_NUMBER=883, TOTALORDER=884, TO_TIMESTAMP=885, TRANSLATE=886, TRIM=887, 
		TRIM_ARRAY=888, TRUNC=889, TRUNC_TIMESTAMP=890, UCASE=891, UNICODE=892, 
		UNICODE_STR=893, UNISTR=894, UPPER=895, VARBINARY=896, VARCHAR=897, VARCHAR9=898, 
		VARCHAR_BIT_FORMAT=899, VARCHAR_FORMAT=900, VARGRAPHIC=901, VERIFY_GROUP_FOR_USER=902, 
		VERIFY_ROLE_FOR_USER=903, VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER=904, WEEK=905, 
		WEEK_ISO=906, WRAP=907, XMLATTRIBUTES=908, XMLCOMMENT=909, XMLCONCAT=910, 
		XMLDOCUMENT=911, XMLELEMENT=912, XMLFOREST=913, XMLMODIFY=914, XMLPARSE=915, 
		XMLPI=916, XMLQUERY=917, XMLSERIALIZE=918, XMLTEXT=919, XMLXSROBJECTID=920, 
		XSLTRANSFORM=921, CURRENT_ACCELERATOR=922, CURRENT_APPLICATION_COMPATIBILITY=923, 
		CURRENT_APPLICATION_ENCODING_SCHEME=924, CURRENT_CLIENT_ACCTNG=925, CURRENT_CLIENT_APPLNAME=926, 
		CURRENT_CLIENT_CORR_TOKEN=927, CURRENT_CLIENT_USERID=928, CURRENT_CLIENT_WRKSTNNAME=929, 
		CURRENT_DATE=930, CURRENT_DEBUG_MODE=931, CURRENT_DECFLOAT_ROUNDING_MODE=932, 
		CURRENT_DEGREE=933, CURRENT_EXPLAIN_MODE=934, CURRENT_GET_ACCEL_ARCHIVE=935, 
		CURRENT_LOCALE_LC_CTYPE=936, CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION=937, 
		CURRENT_MEMBER=938, CURRENT_OPTIMIZATION_HINT=939, CURRENT_PACKAGE_PATH=940, 
		CURRENT_PACKAGESET=941, CURRENT_PATH=942, CURRENT_PRECISION=943, CURRENT_QUERY_ACCELERATION=944, 
		CURRENT_QUERY_ACCELERATION_WAITFORDATA=945, CURRENT_REFRESH_AGE=946, CURRENT_ROUTINE_VERSION=947, 
		CURRENT_RULES=948, CURRENT_SCHEMA=949, CURRENT_SERVER=950, CURRENT_SQLID=951, 
		CURRENT_TEMPORAL_BUSINESS_TIME=952, CURRENT_TEMPORAL_SYSTEM_TIME=953, 
		CURRENT_TIME=954, CURRENT_TIMESTAMP=955, CURRENT_TIME_ZONE=956, ENCRYPTION_PASSWORD=957, 
		SESSION_TIME_ZONE=958, SESSION_USER=959, USER=960, ADMIN_TASK_LIST=961, 
		ADMIN_TASK_OUTPUT=962, ADMIN_TASK_STATUS=963, BLOCKING_THREADS=964, MQREADALL=965, 
		MQREADALLCLOB=966, MQRECEIVEALL=967, MQRECEIVEALLCLOB=968, XMLTABLE=969, 
		SQLIDENTIFIER=970;
	public static final int
		RULE_startRule = 0, RULE_sqlStatement = 1, RULE_query = 2, RULE_cursorName = 3, 
		RULE_statementName = 4, RULE_descriptorName = 5, RULE_holdability = 6, 
		RULE_returnability = 7, RULE_rowsetPositioning = 8, RULE_notNullPhrase = 9, 
		RULE_allocateCursorStatement = 10, RULE_rsLocatorVariable = 11, RULE_alterDatabaseStatement = 12, 
		RULE_alterFunctionStatement = 13, RULE_alterIndexStatement = 14, RULE_alterMaskStatement = 15, 
		RULE_alterPermissionStatement = 16, RULE_alterProcedureStatement = 17, 
		RULE_alterSequenceStatement = 18, RULE_alterStogroupStatement = 19, RULE_alterTableStatement = 20, 
		RULE_alterTablespaceStatement = 21, RULE_alterTriggerStatement = 22, RULE_alterTrustedContextStatement = 23, 
		RULE_alterViewStatement = 24, RULE_associateLocatorsStatement = 25, RULE_beginDeclareSectionStatement = 26, 
		RULE_callStatement = 27, RULE_closeStatement = 28, RULE_commentStatement = 29, 
		RULE_commitStatement = 30, RULE_connectStatement = 31, RULE_createAliasStatement = 32, 
		RULE_createAuxiliaryTableStatement = 33, RULE_createDatabaseStatement = 34, 
		RULE_createFunctionStatement = 35, RULE_createFunctionStatementExternalScalar = 36, 
		RULE_createFunctionStatementExternalTable = 37, RULE_createFunctionStatementSourced = 38, 
		RULE_createFunctionStatementInlineSqlScalar = 39, RULE_createGlobalTemporaryTableStatement = 40, 
		RULE_createIndexStatement = 41, RULE_createLobTablespaceStatement = 42, 
		RULE_createMaskStatement = 43, RULE_createPermissionStatement = 44, RULE_createProcedureStatement = 45, 
		RULE_createRoleStatement = 46, RULE_createSequenceStatement = 47, RULE_createStogroupStatement = 48, 
		RULE_createTableStatement = 49, RULE_createTablespaceStatement = 50, RULE_createTriggerStatement = 51, 
		RULE_createTrustedContextStatement = 52, RULE_createTypeArrayStatement = 53, 
		RULE_createTypeDistinctStatement = 54, RULE_createVariableStatement = 55, 
		RULE_createViewStatement = 56, RULE_declareCursorStatement = 57, RULE_declareGlobalTemporaryTableStatement = 58, 
		RULE_declareTableStatement = 59, RULE_declareStatementStatement = 60, 
		RULE_declareVariableStatement = 61, RULE_deleteStatement = 62, RULE_describeStatement = 63, 
		RULE_describeCursorStatement = 64, RULE_describeInputStatement = 65, RULE_describeOutputStatement = 66, 
		RULE_describeProcedureStatement = 67, RULE_describeTableStatement = 68, 
		RULE_dropStatement = 69, RULE_endDeclareSectionStatement = 70, RULE_exchangeStatement = 71, 
		RULE_executeStatement = 72, RULE_executeImmediateStatement = 73, RULE_explainStatement = 74, 
		RULE_fetchStatement = 75, RULE_freeLocatorStatement = 76, RULE_getDiagnosticsStatement = 77, 
		RULE_grantStatement = 78, RULE_holdLocatorStatement = 79, RULE_includeStatement = 80, 
		RULE_insertStatement = 81, RULE_labelStatement = 82, RULE_lockTableStatement = 83, 
		RULE_mergeStatement = 84, RULE_openStatement = 85, RULE_setAssignmentStatement = 86, 
		RULE_updateStatement = 87, RULE_valuesStatement = 88, RULE_grantCollectionStatement = 89, 
		RULE_grantDatabaseStatement = 90, RULE_grantFunctionOrProcedureStatement = 91, 
		RULE_grantPackageStatement = 92, RULE_grantPlanStatement = 93, RULE_grantSchemaStatement = 94, 
		RULE_grantSequenceStatement = 95, RULE_grantSystemStatement = 96, RULE_grantTableStatement = 97, 
		RULE_grantTypeOrJarStatement = 98, RULE_grantVariableStatement = 99, RULE_grantUseOfStatement = 100, 
		RULE_grantUseOfTarget = 101, RULE_grantVariableAuthority = 102, RULE_grantTableAuthority = 103, 
		RULE_grantSystemAuthority = 104, RULE_grantSequenceAuthority = 105, RULE_grantSchemaAuthority = 106, 
		RULE_grantPlanAuthority = 107, RULE_grantPackageAuthority = 108, RULE_packageSpecification = 109, 
		RULE_functionSpecification = 110, RULE_grantee = 111, RULE_withGrantOption = 112, 
		RULE_grantDatabaseAuthority = 113, RULE_statementInformation = 114, RULE_statementInformationVariableEquate = 115, 
		RULE_statementInformationItemName = 116, RULE_conditionInformation = 117, 
		RULE_conditionInformationVariableEquate = 118, RULE_conditionInformationItemName = 119, 
		RULE_connectionInformationItemName = 120, RULE_combinedInformation = 121, 
		RULE_combinedInformationOption = 122, RULE_fetchOrientation = 123, RULE_rowPositioned = 124, 
		RULE_rowsetPositioned = 125, RULE_singleRowFetch = 126, RULE_fetchTargetVariable = 127, 
		RULE_multipleRowFetch = 128, RULE_multipleRowFetchForClause = 129, RULE_multipleRowFetchIntoClause = 130, 
		RULE_explainPlanClause = 131, RULE_explainStmtcacheClause = 132, RULE_explainPackageClause = 133, 
		RULE_explainStabilizedDynamicQueryClause = 134, RULE_packageScopeSpecification = 135, 
		RULE_collectionName = 136, RULE_packageScopePackageName = 137, RULE_versionName = 138, 
		RULE_sourceRowData = 139, RULE_aliasDesignation = 140, RULE_dropDatabaseClause = 141, 
		RULE_dropFunctionClause = 142, RULE_dropIndexClause = 143, RULE_dropMaskClause = 144, 
		RULE_dropPackageClause = 145, RULE_dropPermissionClause = 146, RULE_dropProcedureClause = 147, 
		RULE_dropRoleClause = 148, RULE_dropSequenceClause = 149, RULE_dropStogroupClause = 150, 
		RULE_dropSynonymClause = 151, RULE_dropTableClause = 152, RULE_dropTablespaceClause = 153, 
		RULE_dropTriggerClause = 154, RULE_dropTrustedContextClause = 155, RULE_dropTypeClause = 156, 
		RULE_dropVariableClause = 157, RULE_dropViewClause = 158, RULE_packageDesignator = 159, 
		RULE_describeUsingOption = 160, RULE_declareGlobalTemporaryTableLikeClause = 161, 
		RULE_onCommitClause = 162, RULE_loggedWithRollbackClause = 163, RULE_createViewCheckOptionClause = 164, 
		RULE_trustedContextDefaultRoleClause = 165, RULE_trustedContextEnableDisableClause = 166, 
		RULE_trustedContextDefaultSecurityLabelClause = 167, RULE_trustedContextAttributesClause = 168, 
		RULE_trustedContextWithUseForClause = 169, RULE_trustedContextAttribute1 = 170, 
		RULE_trustedContextAttribute2 = 171, RULE_trustedContextUseFor = 172, 
		RULE_userOptions = 173, RULE_triggerDefinition = 174, RULE_triggerActivationTime = 175, 
		RULE_triggerEvent = 176, RULE_triggerGranularity = 177, RULE_triggeredAction = 178, 
		RULE_sqlTriggerBody = 179, RULE_triggeredSqlStatement = 180, RULE_triggerDefinitionOption = 181, 
		RULE_createTableInClause = 182, RULE_createTableColumnDefinition = 183, 
		RULE_editprocClause = 184, RULE_validprocClause = 185, RULE_auditClause = 186, 
		RULE_obidClause = 187, RULE_dataCaptureClause = 188, RULE_restrictOnDropClause = 189, 
		RULE_ccsidClause1 = 190, RULE_ccsidClause2 = 191, RULE_cardinalityClause = 192, 
		RULE_appendClause = 193, RULE_memberClause = 194, RULE_trackmodClause = 195, 
		RULE_pagenumClause = 196, RULE_fieldprocClause = 197, RULE_asSecurityLabelClause = 198, 
		RULE_implicitlyHiddenClause = 199, RULE_inlineLengthClause = 200, RULE_copyOptions = 201, 
		RULE_copyOptionIdentity = 202, RULE_copyOptionRowChangeTimestamp = 203, 
		RULE_copyOptionColumnDefaults = 204, RULE_copyOptionXmlTypeModifiers = 205, 
		RULE_asResultTable = 206, RULE_declareGlobalTemporaryTableAsResultTable = 207, 
		RULE_createTableMaterializedQueryDefinition = 208, RULE_createTableColumnConstraint = 209, 
		RULE_organizationClause = 210, RULE_createGlobalTemporaryTableColumnDefinition = 211, 
		RULE_declareGlobalTemporaryTableColumnDefinition = 212, RULE_parameterDeclaration1 = 213, 
		RULE_parameterDeclaration2 = 214, RULE_parameterDeclaration3 = 215, RULE_createFunctionStatementExternalScalarOptions = 216, 
		RULE_externalNameOption1 = 217, RULE_externalNameOption2 = 218, RULE_dynamicResultSetOption = 219, 
		RULE_languageOption1 = 220, RULE_languageOption2 = 221, RULE_languageOption3 = 222, 
		RULE_languageOption4 = 223, RULE_languageOption5 = 224, RULE_parameterStyleOption1 = 225, 
		RULE_parameterStyleOption2 = 226, RULE_parameterStyleOption3 = 227, RULE_deterministicOption = 228, 
		RULE_fencedOption = 229, RULE_nullInputOption1 = 230, RULE_nullInputOption2 = 231, 
		RULE_debugOption = 232, RULE_sqlDataOption1 = 233, RULE_sqlDataOption2 = 234, 
		RULE_sqlDataOption3 = 235, RULE_externalActionOption = 236, RULE_packagePathOption = 237, 
		RULE_scratchpadOption = 238, RULE_finalCallOption = 239, RULE_parallelOption1 = 240, 
		RULE_parallelOption2 = 241, RULE_dbinfoOption = 242, RULE_cardinalityOption = 243, 
		RULE_collectionIdOption = 244, RULE_wlmEnvironmentOption1 = 245, RULE_wlmEnvironmentOption2 = 246, 
		RULE_asuTimeOption = 247, RULE_stayResidentOption = 248, RULE_programTypeOption = 249, 
		RULE_securityOption = 250, RULE_stopAfterFailureOption = 251, RULE_runOptionsOption = 252, 
		RULE_commitOnReturnOption = 253, RULE_specialRegistersOption = 254, RULE_dispatchOption = 255, 
		RULE_securedOption = 256, RULE_specificNameOption1 = 257, RULE_specificNameOption2 = 258, 
		RULE_parameterOption1 = 259, RULE_parameterOption2 = 260, RULE_createFunctionStatementExternalTableOptions = 261, 
		RULE_createFunctionStatementSourcedOptions = 262, RULE_createFunctionStatementInlineSqlScalarOptions = 263, 
		RULE_sequenceAlias = 264, RULE_tableAlias = 265, RULE_authorization = 266, 
		RULE_searchedDelete = 267, RULE_positionedDelete = 268, RULE_searchedUpdate = 269, 
		RULE_positionedUpdate = 270, RULE_sourceValues = 271, RULE_valuesSingleRow = 272, 
		RULE_valuesMultipleRow = 273, RULE_matchingCondition = 274, RULE_modificationOperation = 275, 
		RULE_setAssignmentClause = 276, RULE_assignmentClause = 277, RULE_updateOperation = 278, 
		RULE_deleteOperation = 279, RULE_insertOperation = 280, RULE_signalStatement = 281, 
		RULE_signalInformation = 282, RULE_valuesList1 = 283, RULE_valuesList2 = 284, 
		RULE_valuesList3 = 285, RULE_valuesList4 = 286, RULE_includeColumns = 287, 
		RULE_multipleRowInsert = 288, RULE_regenerateClause = 289, RULE_alterIndexOptions = 290, 
		RULE_bufferpoolOption = 291, RULE_closeOption = 292, RULE_copyOption = 293, 
		RULE_dssizeOption = 294, RULE_piecesizeOption = 295, RULE_clusterOption = 296, 
		RULE_paddedOption = 297, RULE_compressOption = 298, RULE_defineOption = 299, 
		RULE_locksizeOption = 300, RULE_lockmaxOption = 301, RULE_enableDisableOption = 302, 
		RULE_loggedOption = 303, RULE_notAtomicPhrase = 304, RULE_alterIndexPartitionOptions = 305, 
		RULE_usingSpecification1 = 306, RULE_freeSpecification = 307, RULE_gbpcacheSpecification = 308, 
		RULE_partitionElement = 309, RULE_applCompatValue = 310, RULE_functionLevel = 311, 
		RULE_functionParameterType = 312, RULE_functionDataType = 313, RULE_functionBuiltInType = 314, 
		RULE_procedureBuiltinType = 315, RULE_createTypeArrayBuiltinType = 316, 
		RULE_createTypeArrayBuiltinType2 = 317, RULE_createVariableBuiltInType = 318, 
		RULE_sourceDataType = 319, RULE_functionOptionList = 320, RULE_procedureOptionList = 321, 
		RULE_createProcedureOptionList = 322, RULE_procedureDataType = 323, RULE_alterSequenceOptionList = 324, 
		RULE_createSequenceOptionList = 325, RULE_asTypeOption = 326, RULE_startOption = 327, 
		RULE_restartOption = 328, RULE_incrementOption = 329, RULE_minvalueOption = 330, 
		RULE_maxvalueOption = 331, RULE_cycleOption = 332, RULE_cacheOption = 333, 
		RULE_orderOption = 334, RULE_keyLabelOption = 335, RULE_dataclasOption = 336, 
		RULE_mgmtclasOption = 337, RULE_storclasOption = 338, RULE_alterStogroupOptionList = 339, 
		RULE_alterTableOptionList = 340, RULE_alterTablespaceOptionList = 341, 
		RULE_createTablespaceOptionList = 342, RULE_trustedContextOptionList = 343, 
		RULE_databaseOptionList = 344, RULE_createIndexOptionList = 345, RULE_createLobTablespaceOptionList = 346, 
		RULE_inDatabaseOption = 347, RULE_segsizeOption = 348, RULE_numpartsOption = 349, 
		RULE_partitionByGrowthSpecification = 350, RULE_partitionByRangeSpecification = 351, 
		RULE_partitionByRangePartitionPhrase = 352, RULE_insertAlgorithmOption = 353, 
		RULE_maxrowsOption = 354, RULE_maxpartitionsOption = 355, RULE_usingSpecification2 = 356, 
		RULE_xmlIndexSpecification = 357, RULE_xmlPatternClause = 358, RULE_alterAttributesOptions = 359, 
		RULE_addAttributesOptions = 360, RULE_dropAttributesOptions = 361, RULE_includeColumnPhrase = 362, 
		RULE_userClause = 363, RULE_userClauseAddOptions = 364, RULE_userClauseReplaceOptions = 365, 
		RULE_userClauseDropOptions = 366, RULE_useOptions = 367, RULE_alterPartitionClause = 368, 
		RULE_usingBlock = 369, RULE_freeBlock = 370, RULE_moveTableClause = 371, 
		RULE_gbpcacheBlock = 372, RULE_aliasDesignator = 373, RULE_multipleColumnList = 374, 
		RULE_functionDesignator = 375, RULE_parameterType = 376, RULE_alterTableColumnDefinitionOptionList1 = 377, 
		RULE_alterTableColumnDefinitionOptionList2 = 378, RULE_columnConstraint = 379, 
		RULE_generatedClause = 380, RULE_generatedClause2 = 381, RULE_asIdentityClause = 382, 
		RULE_asIdentityClauseOptionList = 383, RULE_asRowChangeTimestampClause = 384, 
		RULE_asRowTransactionStartIDClause = 385, RULE_asRowTransactionTimestampClause = 386, 
		RULE_asGeneratedExpressionClause = 387, RULE_nonDeterministicExpression = 388, 
		RULE_nonDeterministicExpressionSessionVariable = 389, RULE_columnAlteration = 390, 
		RULE_columnAlterationOptionList = 391, RULE_alteredDataType = 392, RULE_dataType = 393, 
		RULE_builtInType = 394, RULE_sequenceDataType = 395, RULE_sequenceBuiltInType = 396, 
		RULE_sqlDataType = 397, RULE_xmlTypeModifier = 398, RULE_xmlSchemaSpecification = 399, 
		RULE_xmlElementName = 400, RULE_registeredXmlSchemaName = 401, RULE_targetNamespace = 402, 
		RULE_schemaLocation = 403, RULE_identityAlteration = 404, RULE_uniqueConstraint = 405, 
		RULE_referentialConstraint = 406, RULE_referencesClause = 407, RULE_checkConstraint = 408, 
		RULE_partitioningClause = 409, RULE_partitionExpression = 410, RULE_partitionLimitKey = 411, 
		RULE_partitioningPhrase = 412, RULE_partitionHashSpace = 413, RULE_alterHashOrganization = 414, 
		RULE_partitioningClauseElement = 415, RULE_partitionClause = 416, RULE_rotatePartitionClause = 417, 
		RULE_extraRowOption = 418, RULE_materializedQueryDefinition = 419, RULE_materializedQueryAlteration = 420, 
		RULE_refreshableTableOptions = 421, RULE_dataInitiallyDeferredPhrase = 422, 
		RULE_refreshDeferredPhrase = 423, RULE_refreshableTableOptionsList = 424, 
		RULE_materializedQueryTableAlteration = 425, RULE_periodDefinition = 426, 
		RULE_alterTableColumnDefinition = 427, RULE_externalProgramName = 428, 
		RULE_packagePath = 429, RULE_collectionID = 430, RULE_runTimeOptions = 431, 
		RULE_comparisonOperator = 432, RULE_operator = 433, RULE_expression = 434, 
		RULE_keyExpression = 435, RULE_rowChangeExpression = 436, RULE_sequenceReference = 437, 
		RULE_functionInvocation = 438, RULE_scalarFunctionInvocation = 439, RULE_aggregateFunctionInvocation = 440, 
		RULE_regressionFunctionInvocation = 441, RULE_externalFunctionInvocation = 442, 
		RULE_labeledDuration = 443, RULE_xmlCastSpecification = 444, RULE_arrayElementSpecification = 445, 
		RULE_arrayIndex = 446, RULE_arrayConstructor = 447, RULE_olapSpecification = 448, 
		RULE_orderedOlapSpecification = 449, RULE_olapSpecificationFunction = 450, 
		RULE_lagFunction = 451, RULE_leadFunction = 452, RULE_respectNullsClause = 453, 
		RULE_windowPartitionClause = 454, RULE_windowOrderClause = 455, RULE_windowOrderClauseQualifier = 456, 
		RULE_numberingSpecification = 457, RULE_aggregationSpecification = 458, 
		RULE_aggregateFunction = 459, RULE_regressionFunction = 460, RULE_olapColumnFunction = 461, 
		RULE_firstValueFunction = 462, RULE_lastValueFunction = 463, RULE_nthValueFunction = 464, 
		RULE_ratioToReportFunction = 465, RULE_windowAggregationGroupClause = 466, 
		RULE_groupStart = 467, RULE_groupBetween = 468, RULE_groupEnd = 469, RULE_groupBound1 = 470, 
		RULE_groupBound2 = 471, RULE_unboundedPreceding = 472, RULE_unboundedFollowing = 473, 
		RULE_boundedPreceding = 474, RULE_boundedFollowing = 475, RULE_currentRow = 476, 
		RULE_scalarFunction = 477, RULE_tableFunction = 478, RULE_specialRegister = 479, 
		RULE_xmltableFunctionSpecification = 480, RULE_rowXqueryExpressionConstant = 481, 
		RULE_rowXqueryArgument = 482, RULE_xqueryContextItemExpression = 483, 
		RULE_xqueryVariableExpression = 484, RULE_xmlTableRegularColumnDefinition = 485, 
		RULE_defaultClause = 486, RULE_defaultClause1 = 487, RULE_defaultClause2 = 488, 
		RULE_defaultClauseAllowables = 489, RULE_distinctTypeCastFunctionName = 490, 
		RULE_columnXqueryExpressionConstant = 491, RULE_xmlTableOrdinalityColumnDefinition = 492, 
		RULE_xmlnamespacesDeclaration = 493, RULE_xmlnamespacesFunctionSpecification = 494, 
		RULE_xmlnamespacesFunctionArguments = 495, RULE_namespaceUri = 496, RULE_namespacePrefix = 497, 
		RULE_timeZoneSpecificExpression = 498, RULE_timeZoneExpressionSubset = 499, 
		RULE_caseExpression = 500, RULE_resultExpression = 501, RULE_searchedWhenClause = 502, 
		RULE_simpleWhenClause = 503, RULE_searchCondition = 504, RULE_checkCondition = 505, 
		RULE_predicate = 506, RULE_basicPredicate = 507, RULE_rowValueExpression = 508, 
		RULE_quantifiedPredicate = 509, RULE_arrayExistsPredicate = 510, RULE_betweenPredicate = 511, 
		RULE_distinctPredicate = 512, RULE_existsPredicate = 513, RULE_inPredicate = 514, 
		RULE_likePredicate = 515, RULE_nullPredicate = 516, RULE_xmlExistsPredicate = 517, 
		RULE_arrayExpression = 518, RULE_castSpecification = 519, RULE_parameterMarker = 520, 
		RULE_castDataType = 521, RULE_castBuiltInType = 522, RULE_integerInParens = 523, 
		RULE_length = 524, RULE_ccsidQualifier = 525, RULE_forDataQualifier = 526, 
		RULE_distinctTypeName = 527, RULE_arrayType = 528, RULE_literal = 529, 
		RULE_ccsidValue = 530, RULE_columnName = 531, RULE_sourceColumnName = 532, 
		RULE_targetColumnName = 533, RULE_newColumnName = 534, RULE_beginColumnName = 535, 
		RULE_endColumnName = 536, RULE_correlationName = 537, RULE_locationName = 538, 
		RULE_schemaName = 539, RULE_tableName = 540, RULE_alterTableName = 541, 
		RULE_auxTableName = 542, RULE_historyTableName = 543, RULE_cloneTableName = 544, 
		RULE_archiveTableName = 545, RULE_viewName = 546, RULE_programName = 547, 
		RULE_packageName = 548, RULE_planName = 549, RULE_typeName = 550, RULE_variableName = 551, 
		RULE_arrayTypeName = 552, RULE_jarName = 553, RULE_aliasName = 554, RULE_constraintName = 555, 
		RULE_routineVersionID = 556, RULE_versionID = 557, RULE_indexName = 558, 
		RULE_maskName = 559, RULE_permissionName = 560, RULE_procedureName = 561, 
		RULE_sequenceName = 562, RULE_memberName = 563, RULE_databaseName = 564, 
		RULE_tablespaceName = 565, RULE_acceleratorName = 566, RULE_catalogName = 567, 
		RULE_triggerName = 568, RULE_contextName = 569, RULE_authorizationName = 570, 
		RULE_profileName = 571, RULE_roleName = 572, RULE_seclabelName = 573, 
		RULE_parameterName = 574, RULE_addressValue = 575, RULE_jobnameValue = 576, 
		RULE_servauthValue = 577, RULE_encryptionValue = 578, RULE_bpName = 579, 
		RULE_stogroupName = 580, RULE_dcName = 581, RULE_mcName = 582, RULE_scName = 583, 
		RULE_volumeID = 584, RULE_keyLabelName = 585, RULE_functionName = 586, 
		RULE_specificName = 587, RULE_hostVariable = 588, RULE_hostIdentifier = 589, 
		RULE_hostStructure = 590, RULE_synonym = 591, RULE_variable = 592, RULE_intoClause = 593, 
		RULE_correlationClause = 594, RULE_fromClause = 595, RULE_tableReference = 596, 
		RULE_singleTableReference = 597, RULE_periodSpecification = 598, RULE_periodClause = 599, 
		RULE_nestedTableExpression = 600, RULE_dataChangeTableReference = 601, 
		RULE_tableFunctionReference = 602, RULE_tableUdfCardinalityClause = 603, 
		RULE_typedCorrelationClause = 604, RULE_tableLocatorReference = 605, RULE_xmltableExpression = 606, 
		RULE_collectionDerivedTable = 607, RULE_joinCondition = 608, RULE_fullJoinExpression = 609, 
		RULE_castFunction = 610, RULE_ordinaryArrayExpression = 611, RULE_associativeArrayExpression = 612, 
		RULE_comparison = 613, RULE_whereClause = 614, RULE_groupByClause = 615, 
		RULE_havingClause = 616, RULE_groupingExpression = 617, RULE_groupingSets = 618, 
		RULE_groupingSetsGroup = 619, RULE_superGroups = 620, RULE_selectColumns = 621, 
		RULE_unpackedRow = 622, RULE_selectClause = 623, RULE_subSelect = 624, 
		RULE_selectIntoStatement = 625, RULE_selectStatement = 626, RULE_commonTableExpression = 627, 
		RULE_updateClause = 628, RULE_readOnlyClause = 629, RULE_optimizeClause = 630, 
		RULE_isolationClause = 631, RULE_lockClause = 632, RULE_skipLockedDataClause = 633, 
		RULE_querynoClause = 634, RULE_scalarFullSelect = 635, RULE_fullSelect = 636, 
		RULE_valuesClause = 637, RULE_orderByClause = 638, RULE_sortKey = 639, 
		RULE_offsetClause = 640, RULE_fetchClause = 641, RULE_identifier = 642, 
		RULE_sqlKeyword = 643;
	private static String[] makeRuleNames() {
		return new String[] {
			"startRule", "sqlStatement", "query", "cursorName", "statementName", 
			"descriptorName", "holdability", "returnability", "rowsetPositioning", 
			"notNullPhrase", "allocateCursorStatement", "rsLocatorVariable", "alterDatabaseStatement", 
			"alterFunctionStatement", "alterIndexStatement", "alterMaskStatement", 
			"alterPermissionStatement", "alterProcedureStatement", "alterSequenceStatement", 
			"alterStogroupStatement", "alterTableStatement", "alterTablespaceStatement", 
			"alterTriggerStatement", "alterTrustedContextStatement", "alterViewStatement", 
			"associateLocatorsStatement", "beginDeclareSectionStatement", "callStatement", 
			"closeStatement", "commentStatement", "commitStatement", "connectStatement", 
			"createAliasStatement", "createAuxiliaryTableStatement", "createDatabaseStatement", 
			"createFunctionStatement", "createFunctionStatementExternalScalar", "createFunctionStatementExternalTable", 
			"createFunctionStatementSourced", "createFunctionStatementInlineSqlScalar", 
			"createGlobalTemporaryTableStatement", "createIndexStatement", "createLobTablespaceStatement", 
			"createMaskStatement", "createPermissionStatement", "createProcedureStatement", 
			"createRoleStatement", "createSequenceStatement", "createStogroupStatement", 
			"createTableStatement", "createTablespaceStatement", "createTriggerStatement", 
			"createTrustedContextStatement", "createTypeArrayStatement", "createTypeDistinctStatement", 
			"createVariableStatement", "createViewStatement", "declareCursorStatement", 
			"declareGlobalTemporaryTableStatement", "declareTableStatement", "declareStatementStatement", 
			"declareVariableStatement", "deleteStatement", "describeStatement", "describeCursorStatement", 
			"describeInputStatement", "describeOutputStatement", "describeProcedureStatement", 
			"describeTableStatement", "dropStatement", "endDeclareSectionStatement", 
			"exchangeStatement", "executeStatement", "executeImmediateStatement", 
			"explainStatement", "fetchStatement", "freeLocatorStatement", "getDiagnosticsStatement", 
			"grantStatement", "holdLocatorStatement", "includeStatement", "insertStatement", 
			"labelStatement", "lockTableStatement", "mergeStatement", "openStatement", 
			"setAssignmentStatement", "updateStatement", "valuesStatement", "grantCollectionStatement", 
			"grantDatabaseStatement", "grantFunctionOrProcedureStatement", "grantPackageStatement", 
			"grantPlanStatement", "grantSchemaStatement", "grantSequenceStatement", 
			"grantSystemStatement", "grantTableStatement", "grantTypeOrJarStatement", 
			"grantVariableStatement", "grantUseOfStatement", "grantUseOfTarget", 
			"grantVariableAuthority", "grantTableAuthority", "grantSystemAuthority", 
			"grantSequenceAuthority", "grantSchemaAuthority", "grantPlanAuthority", 
			"grantPackageAuthority", "packageSpecification", "functionSpecification", 
			"grantee", "withGrantOption", "grantDatabaseAuthority", "statementInformation", 
			"statementInformationVariableEquate", "statementInformationItemName", 
			"conditionInformation", "conditionInformationVariableEquate", "conditionInformationItemName", 
			"connectionInformationItemName", "combinedInformation", "combinedInformationOption", 
			"fetchOrientation", "rowPositioned", "rowsetPositioned", "singleRowFetch", 
			"fetchTargetVariable", "multipleRowFetch", "multipleRowFetchForClause", 
			"multipleRowFetchIntoClause", "explainPlanClause", "explainStmtcacheClause", 
			"explainPackageClause", "explainStabilizedDynamicQueryClause", "packageScopeSpecification", 
			"collectionName", "packageScopePackageName", "versionName", "sourceRowData", 
			"aliasDesignation", "dropDatabaseClause", "dropFunctionClause", "dropIndexClause", 
			"dropMaskClause", "dropPackageClause", "dropPermissionClause", "dropProcedureClause", 
			"dropRoleClause", "dropSequenceClause", "dropStogroupClause", "dropSynonymClause", 
			"dropTableClause", "dropTablespaceClause", "dropTriggerClause", "dropTrustedContextClause", 
			"dropTypeClause", "dropVariableClause", "dropViewClause", "packageDesignator", 
			"describeUsingOption", "declareGlobalTemporaryTableLikeClause", "onCommitClause", 
			"loggedWithRollbackClause", "createViewCheckOptionClause", "trustedContextDefaultRoleClause", 
			"trustedContextEnableDisableClause", "trustedContextDefaultSecurityLabelClause", 
			"trustedContextAttributesClause", "trustedContextWithUseForClause", "trustedContextAttribute1", 
			"trustedContextAttribute2", "trustedContextUseFor", "userOptions", "triggerDefinition", 
			"triggerActivationTime", "triggerEvent", "triggerGranularity", "triggeredAction", 
			"sqlTriggerBody", "triggeredSqlStatement", "triggerDefinitionOption", 
			"createTableInClause", "createTableColumnDefinition", "editprocClause", 
			"validprocClause", "auditClause", "obidClause", "dataCaptureClause", 
			"restrictOnDropClause", "ccsidClause1", "ccsidClause2", "cardinalityClause", 
			"appendClause", "memberClause", "trackmodClause", "pagenumClause", "fieldprocClause", 
			"asSecurityLabelClause", "implicitlyHiddenClause", "inlineLengthClause", 
			"copyOptions", "copyOptionIdentity", "copyOptionRowChangeTimestamp", 
			"copyOptionColumnDefaults", "copyOptionXmlTypeModifiers", "asResultTable", 
			"declareGlobalTemporaryTableAsResultTable", "createTableMaterializedQueryDefinition", 
			"createTableColumnConstraint", "organizationClause", "createGlobalTemporaryTableColumnDefinition", 
			"declareGlobalTemporaryTableColumnDefinition", "parameterDeclaration1", 
			"parameterDeclaration2", "parameterDeclaration3", "createFunctionStatementExternalScalarOptions", 
			"externalNameOption1", "externalNameOption2", "dynamicResultSetOption", 
			"languageOption1", "languageOption2", "languageOption3", "languageOption4", 
			"languageOption5", "parameterStyleOption1", "parameterStyleOption2", 
			"parameterStyleOption3", "deterministicOption", "fencedOption", "nullInputOption1", 
			"nullInputOption2", "debugOption", "sqlDataOption1", "sqlDataOption2", 
			"sqlDataOption3", "externalActionOption", "packagePathOption", "scratchpadOption", 
			"finalCallOption", "parallelOption1", "parallelOption2", "dbinfoOption", 
			"cardinalityOption", "collectionIdOption", "wlmEnvironmentOption1", "wlmEnvironmentOption2", 
			"asuTimeOption", "stayResidentOption", "programTypeOption", "securityOption", 
			"stopAfterFailureOption", "runOptionsOption", "commitOnReturnOption", 
			"specialRegistersOption", "dispatchOption", "securedOption", "specificNameOption1", 
			"specificNameOption2", "parameterOption1", "parameterOption2", "createFunctionStatementExternalTableOptions", 
			"createFunctionStatementSourcedOptions", "createFunctionStatementInlineSqlScalarOptions", 
			"sequenceAlias", "tableAlias", "authorization", "searchedDelete", "positionedDelete", 
			"searchedUpdate", "positionedUpdate", "sourceValues", "valuesSingleRow", 
			"valuesMultipleRow", "matchingCondition", "modificationOperation", "setAssignmentClause", 
			"assignmentClause", "updateOperation", "deleteOperation", "insertOperation", 
			"signalStatement", "signalInformation", "valuesList1", "valuesList2", 
			"valuesList3", "valuesList4", "includeColumns", "multipleRowInsert", 
			"regenerateClause", "alterIndexOptions", "bufferpoolOption", "closeOption", 
			"copyOption", "dssizeOption", "piecesizeOption", "clusterOption", "paddedOption", 
			"compressOption", "defineOption", "locksizeOption", "lockmaxOption", 
			"enableDisableOption", "loggedOption", "notAtomicPhrase", "alterIndexPartitionOptions", 
			"usingSpecification1", "freeSpecification", "gbpcacheSpecification", 
			"partitionElement", "applCompatValue", "functionLevel", "functionParameterType", 
			"functionDataType", "functionBuiltInType", "procedureBuiltinType", "createTypeArrayBuiltinType", 
			"createTypeArrayBuiltinType2", "createVariableBuiltInType", "sourceDataType", 
			"functionOptionList", "procedureOptionList", "createProcedureOptionList", 
			"procedureDataType", "alterSequenceOptionList", "createSequenceOptionList", 
			"asTypeOption", "startOption", "restartOption", "incrementOption", "minvalueOption", 
			"maxvalueOption", "cycleOption", "cacheOption", "orderOption", "keyLabelOption", 
			"dataclasOption", "mgmtclasOption", "storclasOption", "alterStogroupOptionList", 
			"alterTableOptionList", "alterTablespaceOptionList", "createTablespaceOptionList", 
			"trustedContextOptionList", "databaseOptionList", "createIndexOptionList", 
			"createLobTablespaceOptionList", "inDatabaseOption", "segsizeOption", 
			"numpartsOption", "partitionByGrowthSpecification", "partitionByRangeSpecification", 
			"partitionByRangePartitionPhrase", "insertAlgorithmOption", "maxrowsOption", 
			"maxpartitionsOption", "usingSpecification2", "xmlIndexSpecification", 
			"xmlPatternClause", "alterAttributesOptions", "addAttributesOptions", 
			"dropAttributesOptions", "includeColumnPhrase", "userClause", "userClauseAddOptions", 
			"userClauseReplaceOptions", "userClauseDropOptions", "useOptions", "alterPartitionClause", 
			"usingBlock", "freeBlock", "moveTableClause", "gbpcacheBlock", "aliasDesignator", 
			"multipleColumnList", "functionDesignator", "parameterType", "alterTableColumnDefinitionOptionList1", 
			"alterTableColumnDefinitionOptionList2", "columnConstraint", "generatedClause", 
			"generatedClause2", "asIdentityClause", "asIdentityClauseOptionList", 
			"asRowChangeTimestampClause", "asRowTransactionStartIDClause", "asRowTransactionTimestampClause", 
			"asGeneratedExpressionClause", "nonDeterministicExpression", "nonDeterministicExpressionSessionVariable", 
			"columnAlteration", "columnAlterationOptionList", "alteredDataType", 
			"dataType", "builtInType", "sequenceDataType", "sequenceBuiltInType", 
			"sqlDataType", "xmlTypeModifier", "xmlSchemaSpecification", "xmlElementName", 
			"registeredXmlSchemaName", "targetNamespace", "schemaLocation", "identityAlteration", 
			"uniqueConstraint", "referentialConstraint", "referencesClause", "checkConstraint", 
			"partitioningClause", "partitionExpression", "partitionLimitKey", "partitioningPhrase", 
			"partitionHashSpace", "alterHashOrganization", "partitioningClauseElement", 
			"partitionClause", "rotatePartitionClause", "extraRowOption", "materializedQueryDefinition", 
			"materializedQueryAlteration", "refreshableTableOptions", "dataInitiallyDeferredPhrase", 
			"refreshDeferredPhrase", "refreshableTableOptionsList", "materializedQueryTableAlteration", 
			"periodDefinition", "alterTableColumnDefinition", "externalProgramName", 
			"packagePath", "collectionID", "runTimeOptions", "comparisonOperator", 
			"operator", "expression", "keyExpression", "rowChangeExpression", "sequenceReference", 
			"functionInvocation", "scalarFunctionInvocation", "aggregateFunctionInvocation", 
			"regressionFunctionInvocation", "externalFunctionInvocation", "labeledDuration", 
			"xmlCastSpecification", "arrayElementSpecification", "arrayIndex", "arrayConstructor", 
			"olapSpecification", "orderedOlapSpecification", "olapSpecificationFunction", 
			"lagFunction", "leadFunction", "respectNullsClause", "windowPartitionClause", 
			"windowOrderClause", "windowOrderClauseQualifier", "numberingSpecification", 
			"aggregationSpecification", "aggregateFunction", "regressionFunction", 
			"olapColumnFunction", "firstValueFunction", "lastValueFunction", "nthValueFunction", 
			"ratioToReportFunction", "windowAggregationGroupClause", "groupStart", 
			"groupBetween", "groupEnd", "groupBound1", "groupBound2", "unboundedPreceding", 
			"unboundedFollowing", "boundedPreceding", "boundedFollowing", "currentRow", 
			"scalarFunction", "tableFunction", "specialRegister", "xmltableFunctionSpecification", 
			"rowXqueryExpressionConstant", "rowXqueryArgument", "xqueryContextItemExpression", 
			"xqueryVariableExpression", "xmlTableRegularColumnDefinition", "defaultClause", 
			"defaultClause1", "defaultClause2", "defaultClauseAllowables", "distinctTypeCastFunctionName", 
			"columnXqueryExpressionConstant", "xmlTableOrdinalityColumnDefinition", 
			"xmlnamespacesDeclaration", "xmlnamespacesFunctionSpecification", "xmlnamespacesFunctionArguments", 
			"namespaceUri", "namespacePrefix", "timeZoneSpecificExpression", "timeZoneExpressionSubset", 
			"caseExpression", "resultExpression", "searchedWhenClause", "simpleWhenClause", 
			"searchCondition", "checkCondition", "predicate", "basicPredicate", "rowValueExpression", 
			"quantifiedPredicate", "arrayExistsPredicate", "betweenPredicate", "distinctPredicate", 
			"existsPredicate", "inPredicate", "likePredicate", "nullPredicate", "xmlExistsPredicate", 
			"arrayExpression", "castSpecification", "parameterMarker", "castDataType", 
			"castBuiltInType", "integerInParens", "length", "ccsidQualifier", "forDataQualifier", 
			"distinctTypeName", "arrayType", "literal", "ccsidValue", "columnName", 
			"sourceColumnName", "targetColumnName", "newColumnName", "beginColumnName", 
			"endColumnName", "correlationName", "locationName", "schemaName", "tableName", 
			"alterTableName", "auxTableName", "historyTableName", "cloneTableName", 
			"archiveTableName", "viewName", "programName", "packageName", "planName", 
			"typeName", "variableName", "arrayTypeName", "jarName", "aliasName", 
			"constraintName", "routineVersionID", "versionID", "indexName", "maskName", 
			"permissionName", "procedureName", "sequenceName", "memberName", "databaseName", 
			"tablespaceName", "acceleratorName", "catalogName", "triggerName", "contextName", 
			"authorizationName", "profileName", "roleName", "seclabelName", "parameterName", 
			"addressValue", "jobnameValue", "servauthValue", "encryptionValue", "bpName", 
			"stogroupName", "dcName", "mcName", "scName", "volumeID", "keyLabelName", 
			"functionName", "specificName", "hostVariable", "hostIdentifier", "hostStructure", 
			"synonym", "variable", "intoClause", "correlationClause", "fromClause", 
			"tableReference", "singleTableReference", "periodSpecification", "periodClause", 
			"nestedTableExpression", "dataChangeTableReference", "tableFunctionReference", 
			"tableUdfCardinalityClause", "typedCorrelationClause", "tableLocatorReference", 
			"xmltableExpression", "collectionDerivedTable", "joinCondition", "fullJoinExpression", 
			"castFunction", "ordinaryArrayExpression", "associativeArrayExpression", 
			"comparison", "whereClause", "groupByClause", "havingClause", "groupingExpression", 
			"groupingSets", "groupingSetsGroup", "superGroups", "selectColumns", 
			"unpackedRow", "selectClause", "subSelect", "selectIntoStatement", "selectStatement", 
			"commonTableExpression", "updateClause", "readOnlyClause", "optimizeClause", 
			"isolationClause", "lockClause", "skipLockedDataClause", "querynoClause", 
			"scalarFullSelect", "fullSelect", "valuesClause", "orderByClause", "sortKey", 
			"offsetClause", "fetchClause", "identifier", "sqlKeyword"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'('", "')'", "'['", "']'", "'?'", "'='", "'>'", "'<'", null, null, 
			null, "'+'", "'-'", "'*'", "'/'", "'||'", "'.'", "':'", "';'", "','", 
			"'@'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "LPAREN", "RPAREN", "OPENSQBRACKET", "CLOSESQBRACKET", "QUESTIONMARK", 
			"EQ", "GT", "LT", "GE", "LE", "NE", "PLUS", "MINUS", "SPLAT", "SLASH", 
			"CONCATOP", "DOT", "COLON", "SEMICOLON", "COMMA", "ATSIGN", "NONNUMERICLITERAL", 
			"INTEGERLITERAL", "NUMERICLITERAL", "NEWLINE", "WS", "SQLCOMMENT", "SQLBLOCKCOMMENTBEGIN", 
			"SQLBLOCKCOMMENTEND", "INSTEAD", "NEW", "NEW_TABLE", "OLD_TABLE", "REFERENCING", 
			"BASED", "UPON", "ADD", "AFTER", "ALL", "ALLOCATE", "ALLOW", "ALTER", 
			"ALTERAND", "ANY", "ARRAY", "ARRAY_EXISTS", "AS", "ASENSITIVE", "ASSOCIATE", 
			"ASUTIME", "AT", "AUDIT", "AUX", "AUXILIARY", "BEFORE", "BEGIN", "BETWEEN", 
			"BUFFERPOOL", "BUFFERPOOLS", "BY", "CALL", "CAPTURE", "CASCADED", "CASE", 
			"CAST", "CCSID", "CHAR", "CHARACTER", "CHECK", "CLONE", "CLOSE", "CLUSTER", 
			"COLLECTION", "COLLID", "COLUMN", "COMMENT", "COMMIT", "CONCAT", "CONDITION", 
			"CONNECT", "CONNECTION", "CONSTRAINT", "CONTAINS", "CONTENT", "CONTINUE", 
			"CREATE", "CUBE", "CURRENT", "CURRENT_LC_CTYPE", "CURRVAL", "CURSOR", 
			"DATA", "DATABASE", "DAY", "DAYS", "DBINFO", "DECLARE", "DEFAULT", "DELETE", 
			"DESCRIPTOR", "DETERMINISTIC", "DISABLE", "DISALLOW", "DISTINCT", "DO", 
			"DOCUMENT", "DOUBLE", "DROP", "DSSIZE", "DYNAMIC", "EDITPROC", "ELSE", 
			"ELSEIF", "ENCODING", "ENCRYPTION", "END", "END_EXEC", "ENDING", "ERASE", 
			"ESCAPE", "EXCEPT", "EXCEPTION", "EXEC_SQL", "EXECUTE", "EXISTS", "EXIT", 
			"EXPLAIN", "EXTERNAL", "FENCED", "FETCH", "FIELDPROC", "FINAL", "FIRST", 
			"FOR", "FREE", "FROM", "FULL", "FUNCTION", "GENERATED", "GET", "GLOBAL", 
			"GO", "GOTO", "GRANT", "GROUP", "HANDLER", "HAVING", "HOLD", "HOUR", 
			"HOURS", "IF", "IMMEDIATE", "IN", "INCLUSIVE", "INDEX", "INDEXBP", "INHERIT", 
			"INNER", "INOUT", "INSENSITIVE", "INSERT", "INTERSECT", "INTO", "IS", 
			"ISOBID", "ITERATE", "JAR", "JOIN", "KEEP", "KEY", "LABEL", "LANGUAGE", 
			"LAST", "LC_CTYPE", "LEAVE", "LEFT", "LIKE", "LIMIT", "LOCAL", "LOCALE", 
			"LOCATOR", "LOCATORS", "LOCK", "LOCKMAX", "LOCKSIZE", "LONG", "LOOP", 
			"MAINTAINED", "MATERIALIZED", "MICROSECOND", "MICROSECONDS", "MINUTEMINUTES", 
			"MODIFIES", "MONTH", "MONTHS", "NEXT", "NEXTVAL", "NO", "NONE", "NOT", 
			"NULL", "NULLS", "NUMPARTS", "OBID", "OF", "OFFSET", "OLD", "ON", "OPEN", 
			"OPTIMIZATION", "OPTIMIZE", "OR", "ORDER", "ORGANIZATION", "OUT", "OUTER", 
			"PACKAGE", "PADDED", "PARAMETER", "PART", "PARTITION", "PARTITIONED", 
			"PARTITIONING", "PATH", "PERIOD", "PIECESIZE", "PLAN", "PRECISION", "PREPARE", 
			"PREVVAL", "PRIOR", "PRIQTY", "PRIVILEGES", "PROCEDURE", "PROGRAM", "PSID", 
			"PUBLIC", "QUERY", "QUERYNO", "READS", "REFERENCES", "REFRESH", "RELEASE", 
			"RENAME", "REPEAT", "RESIGNAL", "RESTRICT", "RESULT", "RESULT_SET_LOCATOR", 
			"RETURN", "RETURNS", "REVOKE", "RIGHT", "ROLE", "ROLLBACK", "ROLLUP", 
			"ROUND_CEILING", "ROUND_DOWN", "ROUND_FLOOR", "ROUND_HALF_DOWN", "ROUND_HALF_EVEN", 
			"ROUND_HALF_UP", "ROUND_UP", "ROW", "ROWSET", "RUN", "SAVEPOINT", "SCHEMA", 
			"SCRATCHPAD", "SECOND", "SECONDS", "SECQTY", "SECURITY", "SELECT", "SENSITIVE", 
			"SEQUENCE", "SET", "SIGNAL", "SIMPLE", "SOME", "SOURCE", "SPECIFIC", 
			"STANDARD", "STATEMENT", "STATIC", "STAY", "STOGROUP", "STORES", "STYLE", 
			"SUMMARY", "SYNONYM", "SYSDATE", "SYSTEM", "SYSTIMESTAMP", "TABLE", "TABLESPACE", 
			"THEN", "TO", "TRIGGER", "TRUNCATE", "TYPE", "UNDO", "UNION", "UNIQUE", 
			"UNTIL", "UPDATE", "USING", "VALIDPROC", "VALUE", "VALUES", "VARIABLE", 
			"VARIANT", "VCAT", "VERSIONING", "VIEW", "VOLATILE", "VOLUMES", "WHEN", 
			"WHENEVER", "WHERE", "WHILE", "WITH", "WLM", "XMLCAST", "XMLEXISTS", 
			"XMLNAMESPACES", "YEAR", "YEARS", "ZONE", "AND", "ARRAY_AGG", "ASC", 
			"AVG", "BIT", "CHANGE", "CODEUNITS16", "CODEUNITS32", "CORR", "CORRELATION", 
			"COUNT", "COUNT_BIG", "COVAR", "COVARIANCE", "COVARIANCE_SAMP", "COVAR_POP", 
			"COVAR_SAMP", "CS", "CUME_DIST", "DENSE_RANK", "DESC", "EBCDIC", "EXCLUSIVE", 
			"FIRST_VALUE", "FOLLOWING", "GROUPING", "IGNORE", "INDICATOR", "INPUT", 
			"ISNULL", "LAG", "LARGE", "LAST_VALUE", "LEAD", "LISTAGG", "LOCKED", 
			"LOCKS", "MEDIAN", "MINUTES", "MIXED", "NOTNULL", "NTH_VALUE", "NTILE", 
			"NUMERIC", "OBJECT", "OCTETS", "ONLY", "OVER", "PASSING", "PERCENTILE_CONT", 
			"PERCENTILE_DISC", "PERCENT_RANK", "PRECEDING", "PREVIOUS", "RANGE", 
			"RANK", "RATIO_TO_REPORT", "READ", "REF", "REGR_AVGX", "REGR_AVGY", "REGR_COUNT", 
			"REGR_ICPT", "REGR_INTERCEPT", "REGR_R2", "REGR_SLOPE", "REGR_SXX", "REGR_SXY", 
			"REGR_SYY", "RESPECT", "ROW_NUMBER", "ROWS", "RR", "RS", "SBCS", "SELECTIVITY", 
			"SETS", "SHARE", "SKIP_", "STDDEV", "STDDEV_POP", "STDDEV_SAMP", "SUM", 
			"TOKEN", "UNBOUNDED", "UNPACK", "UR", "USE", "VAR", "VARIANCE", "VARIANCE_SAMP", 
			"VAR_POP", "VAR_SAMP", "VARYING", "WITHOUT", "XML", "XMLAGG", "COLUMNS", 
			"SQLID", "ORDINALITY", "SYSTEM_TIME", "BUSINESS_TIME", "MULTIPLIER", 
			"UNNEST", "CROSS", "CALLER", "CLIENT", "POSITIONING", "SCROLL", "ACTION", 
			"ASSEMBLE", "C_", "CALLED", "COBOL", "DB2", "DEFINER", "DISPATCH", "ENVIRONMENT", 
			"FAILURE", "FAILURES", "JAVA", "MAIN", "NAME", "OPTIONS", "PARALLEL", 
			"PLI", "REGISTERS", "RESIDENT", "SECURED", "SPECIAL", "SQL", "STOP", 
			"SUB", "YES", "APPLICATION", "CHANGED", "COMPATIBILITY", "COMPRESS", 
			"COPY", "FREEPAGE", "GBPCACHE", "INCLUDE", "MAXVALUE", "MINVALUE", "PCTFREE", 
			"REGENERATE", "MASK", "ENABLE", "PERMISSION", "ATOMIC", "SQLEXCEPTION", 
			"MERGE", "MATCHED", "SQLSTATE", "MESSAGE_TEXT", "OVERRIDING", "PORTION", 
			"DB2SQL", "DEBUG", "GENERAL", "MODE_", "REXX", "CACHE", "CYCLE", "INCREMENT", 
			"RESTART", "DATACLAS", "MGMTCLAS", "REMOVE", "STORCLAS", "ACCESS", "ACTIVATE", 
			"ALWAYS", "APPEND", "ARCHIVE", "BUSINESS", "CASCADE", "CHANGES", "CONTROL", 
			"DEACTIVATE", "DEFERRED", "EACH", "ENFORCED", "EXTRA", "FOREIGN", "HIDDEN_", 
			"HISTORY", "ID", "IDENTITY", "IMPLICITLY", "INITIALLY", "INLINE", "OPERATION", 
			"ORGANIZE", "OVERLAPS", "PACKAGE_NAME", "PACKAGE_SCHEMA", "PACKAGE_VERSION", 
			"PRIMARY", "RESET", "ROTATE", "START", "SYSIBM", "TRANSACTION", "XMLSCHEMA", 
			"ELEMENT", "URL", "NAMESPACE", "LOCATION", "SYSXSR", "ALGORITHM", "FIXEDLENGTH", 
			"HUFFMAN", "LOB", "LOG", "LOGGED", "MAXPARTITIONS", "MAXROWS", "MEMBER", 
			"MOVE", "PAGE", "PAGENUM", "PENDING", "RELATIVE", "SEGSIZE", "TRACKMOD", 
			"ADDRESS", "ATTRIBUTES", "AUTHENTICATION", "AUTHID", "CONTEXT", "JOBNAME", 
			"OWNER", "PROFILE", "QUALIFIER", "SERVAUTH", "TRUSTED", "SECTION", "ACTIVE", 
			"VERSION", "ALIAS", "WORK", "WORKFILE", "SYSDEFLT", "NULTERM", "STRUCTURE", 
			"GENERIC", "TEMPORARY", "DEFER", "DEFINE", "EXCLUDE", "GENERATE", "KEYS", 
			"XMLPATTERN", "SIZE", "EVERY", "ABSOLUTE", "ACCELERATOR", "EXCLUDING", 
			"INCLUDING", "DEFAULTS", "MODIFIERS", "OPTION", "PRESERVE", "BOTH", "DESCRIBE", 
			"LABELS", "NAMES", "OUTPUT", "EXCHANGE", "STABILIZED", "STMTCACHE", "STMTID", 
			"STMTTOKEN", "STARTING", "CATALOG_NAME", "CONDITION_NUMBER", "CURSOR_NAME", 
			"DB2_AUTHENTICATION_TYPE", "DB2_AUTHORIZATION_ID", "DB2_CONNECTION_STATE", 
			"DB2_CONNECTION_STATUS", "DB2_ENCRYPTION_TYPE", "DB2_ERROR_CODE1", "DB2_ERROR_CODE2", 
			"DB2_ERROR_CODE3", "DB2_ERROR_CODE4", "DB2_GET_DIAGNOSTICS_DIAGNOSTICS", 
			"DB2_INTERNAL_ERROR_POINTER", "DB2_LAST_ROW", "DB2_LINE_NUMBER", "DB2_MESSAGE_ID", 
			"DB2_MODULE_DETECTING_ERROR", "DB2_NUMBER_PARAMETER_MARKERS", "DB2_NUMBER_RESULT_SETS", 
			"DB2_NUMBER_ROWS", "DB2_ORDINAL_TOKEN_", "DB2_ORDINAL_TOKEN_n", "DB2_PRODUCT_ID", 
			"DB2_REASON_CODE", "DB2_RETURNED_SQLCODE", "DB2_RETURN_STATUS", "DB2_ROW_NUMBER", 
			"DB2_SERVER_CLASS_NAME", "DB2_SQL_ATTR_CURSOR_HOLD", "DB2_SQL_ATTR_CURSOR_ROWSET", 
			"DB2_SQL_ATTR_CURSOR_SCROLLABLE", "DB2_SQL_ATTR_CURSOR_SENSITIVITY", 
			"DB2_SQL_ATTR_CURSOR_TYPE", "DB2_SQLERRD1", "DB2_SQLERRD2", "DB2_SQLERRD3", 
			"DB2_SQLERRD4", "DB2_SQLERRD5", "DB2_SQLERRD6", "DB2_SQLERRD_SET", "DB2_SQL_NESTING_LEVEL", 
			"DB2_TOKEN_COUNT", "DIAGNOSTICS", "MORE_", "NUMBER", "RETURNED_SQLSTATE", 
			"ROW_COUNT", "SERVER_NAME", "STACKED", "CREATETAB", "CREATETS", "DBADM", 
			"DBCTRL", "DBMAINT", "DISPLAYDB", "IMAGCOPY", "LOAD", "PACKADM", "RECOVERDB", 
			"REORG", "REPAIR", "STARTDB", "STATS", "STOPDB", "BIND", "ALTERIN", "CREATEIN", 
			"DROPIN", "USAGE", "ACCESSCTRL", "BINDADD", "BINDAGENT", "BSDS", "CREATEALIAS", 
			"CREATEDBA", "CREATEDBC", "CREATE_SECURE_OBJECT", "CREATESG", "CREATETMTAB", 
			"DATAACCESS", "DEBUGSESSION", "DISPLAY", "MONITOR1", "MONITOR2", "RECOVER", 
			"SQLADM", "STOPALL", "STOSPACE", "SYSADM", "SYSCTRL", "SYSOPR", "TRACE", 
			"UNLOAD", "WRITE", "ABS", "ABSVAL", "ACOS", "ADD_DAYS", "ADD_MONTHS", 
			"ARRAY_DELETE", "ARRAY_FIRST", "ARRAY_LAST", "ARRAY_NEXT", "ARRAY_PRIOR", 
			"ARRAY_TRIM", "ASCII", "ASCII_CHR", "ASCIISTR", "ASCII_STR", "ASIN", 
			"ATAN", "ATAN2", "ATANH", "BIGINT", "BINARY", "BITAND", "BITANDNOT", 
			"BITNOT", "BITOR", "BITXOR", "BLOB", "BTRIM", "CARDINALITY", "CCSID_ENCODING", 
			"CEIL", "CEILING", "CHAR9", "CHARACTER_LENGTH", "CHAR_LENGTH", "CHR", 
			"CLOB", "COALESCE", "COLLATION_KEY", "COMPARE_DECFLOAT", "COS", "COSH", 
			"DATE", "DAYOFMONTH", "DAYOFWEEK", "DAYOFWEEK_ISO", "DAYOFYEAR", "DAYS_BETWEEN", 
			"DBCLOB", "DEC", "DECFLOAT", "DECFLOAT_FORMAT", "DECFLOAT_SORTKEY", "DECIMAL", 
			"DECODE", "DECRYPT_BINARY", "DECRYPT_BIT", "DECRYPT_CHAR", "DECRYPT_DATAKEY_BIGINT", 
			"DECRYPT_DATAKEY_BIT", "DECRYPT_DATAKEY_CLOB", "DECRYPT_DATAKEY_DBCLOB", 
			"DECRYPT_DATAKEY_DECIMAL", "DECRYPT_DATAKEY_INTEGER", "DECRYPT_DATAKEY_VARCHAR", 
			"DECRYPT_DATAKEY_VARGRAPHIC", "DECRYPT_DB", "DEGREES", "DIFFERENCE", 
			"DIGITS", "DOUBLE_PRECISION", "DSN_XMLVALIDATE", "EBCDIC_CHR", "EBCDIC_STR", 
			"ENCRYPT_DATAKEY", "ENCRYPT_TDES", "EXP", "EXTRACT", "FLOAT", "FLOOR", 
			"GENERATE_UNIQUE", "GENERATE_UNIQUE_BINARY", "GETHINT", "GETVARIABLE", 
			"GRAPHIC", "GREATEST", "HASH", "HASH_CRC32", "HASH_MD5", "HASH_SHA1", 
			"HASH_SHA256", "HEX", "IDENTITY_VAL_LOCAL", "IFNULL", "INSTR", "INT", 
			"INTEGER", "JULIAN_DAY", "LAST_DAY", "LCASE", "LEAST", "LENGTH", "LN", 
			"LOCATE", "LOCATE_IN_STRING", "LOG10", "LOWER", "LPAD", "LTRIM", "MAX", 
			"MAX_CARDINALITY", "MIDNIGHT_SECONDS", "MIN", "MINUTE", "MOD", "MONTHS_BETWEEN", 
			"MQREAD", "MQREADCLOB", "MQRECEIVE", "MQRECEIVECLOB", "MQSEND", "MULTIPLY_ALT", 
			"NEXT_DAY", "NEXT_MONTH", "NORMALIZE_DECFLOAT", "NORMALIZE_STRING", "NULLIF", 
			"NVL", "OVERLAY", "PACK", "POSITION", "POSSTR", "POW", "POWER", "QUANTIZE", 
			"QUARTER", "RADIANS", "RAISE_ERROR", "RAND", "RANDOM", "REAL", "REGEXP_COUNT", 
			"REGEXP_INSTR", "REGEXP_LIKE", "REGEXP_REPLACE", "REGEXP_SUBSTR", "REPLACE", 
			"RID", "ROUND", "ROUND_TIMESTAMP", "ROWID", "RPAD", "RTRIM", "SCORE", 
			"SIGN", "SIN", "SINH", "SMALLINT", "SOAPHTTPC", "SOAPHTTPNC", "SOAPHTTPNV", 
			"SOAPHTTPV", "SOUNDEX", "SPACE", "SQRT", "STRIP", "STRLEFT", "STRPOS", 
			"STRRIGHT", "SUBSTR", "SUBSTRING", "TAN", "TANH", "TIME", "TIMESTAMP", 
			"TIMESTAMPADD", "TIMESTAMPDIFF", "TIMESTAMP_FORMAT", "TIMESTAMP_ISO", 
			"TIMESTAMP_TZ", "TO_CHAR", "TO_CLOB", "TO_DATE", "TO_NUMBER", "TOTALORDER", 
			"TO_TIMESTAMP", "TRANSLATE", "TRIM", "TRIM_ARRAY", "TRUNC", "TRUNC_TIMESTAMP", 
			"UCASE", "UNICODE", "UNICODE_STR", "UNISTR", "UPPER", "VARBINARY", "VARCHAR", 
			"VARCHAR9", "VARCHAR_BIT_FORMAT", "VARCHAR_FORMAT", "VARGRAPHIC", "VERIFY_GROUP_FOR_USER", 
			"VERIFY_ROLE_FOR_USER", "VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER", "WEEK", 
			"WEEK_ISO", "WRAP", "XMLATTRIBUTES", "XMLCOMMENT", "XMLCONCAT", "XMLDOCUMENT", 
			"XMLELEMENT", "XMLFOREST", "XMLMODIFY", "XMLPARSE", "XMLPI", "XMLQUERY", 
			"XMLSERIALIZE", "XMLTEXT", "XMLXSROBJECTID", "XSLTRANSFORM", "CURRENT_ACCELERATOR", 
			"CURRENT_APPLICATION_COMPATIBILITY", "CURRENT_APPLICATION_ENCODING_SCHEME", 
			"CURRENT_CLIENT_ACCTNG", "CURRENT_CLIENT_APPLNAME", "CURRENT_CLIENT_CORR_TOKEN", 
			"CURRENT_CLIENT_USERID", "CURRENT_CLIENT_WRKSTNNAME", "CURRENT_DATE", 
			"CURRENT_DEBUG_MODE", "CURRENT_DECFLOAT_ROUNDING_MODE", "CURRENT_DEGREE", 
			"CURRENT_EXPLAIN_MODE", "CURRENT_GET_ACCEL_ARCHIVE", "CURRENT_LOCALE_LC_CTYPE", 
			"CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION", "CURRENT_MEMBER", 
			"CURRENT_OPTIMIZATION_HINT", "CURRENT_PACKAGE_PATH", "CURRENT_PACKAGESET", 
			"CURRENT_PATH", "CURRENT_PRECISION", "CURRENT_QUERY_ACCELERATION", "CURRENT_QUERY_ACCELERATION_WAITFORDATA", 
			"CURRENT_REFRESH_AGE", "CURRENT_ROUTINE_VERSION", "CURRENT_RULES", "CURRENT_SCHEMA", 
			"CURRENT_SERVER", "CURRENT_SQLID", "CURRENT_TEMPORAL_BUSINESS_TIME", 
			"CURRENT_TEMPORAL_SYSTEM_TIME", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
			"CURRENT_TIME_ZONE", "ENCRYPTION_PASSWORD", "SESSION_TIME_ZONE", "SESSION_USER", 
			"USER", "ADMIN_TASK_LIST", "ADMIN_TASK_OUTPUT", "ADMIN_TASK_STATUS", 
			"BLOCKING_THREADS", "MQREADALL", "MQREADALLCLOB", "MQRECEIVEALL", "MQRECEIVEALLCLOB", 
			"XMLTABLE", "SQLIDENTIFIER"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "DB2zSQLParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public DB2zSQLParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	public static class StartRuleContext extends ParserRuleContext {
		public List<SqlStatementContext> sqlStatement() {
			return getRuleContexts(SqlStatementContext.class);
		}
		public SqlStatementContext sqlStatement(int i) {
			return getRuleContext(SqlStatementContext.class,i);
		}
		public TerminalNode EOF() { return getToken(DB2zSQLParser.EOF, 0); }
		public StartRuleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startRule; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterStartRule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitStartRule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitStartRule(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StartRuleContext startRule() throws RecognitionException {
		StartRuleContext _localctx = new StartRuleContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_startRule);
		int _la;
		try {
			setState(1295);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1291);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAREN) | (1L << ALLOCATE) | (1L << ALTER) | (1L << ASSOCIATE) | (1L << BEGIN) | (1L << CALL))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (CLOSE - 71)) | (1L << (COMMENT - 71)) | (1L << (COMMIT - 71)) | (1L << (CONNECT - 71)) | (1L << (CREATE - 71)) | (1L << (DECLARE - 71)) | (1L << (DELETE - 71)) | (1L << (DROP - 71)) | (1L << (END - 71)) | (1L << (EXEC_SQL - 71)) | (1L << (EXECUTE - 71)) | (1L << (EXPLAIN - 71)) | (1L << (FETCH - 71)))) != 0) || ((((_la - 135)) & ~0x3f) == 0 && ((1L << (_la - 135)) & ((1L << (FREE - 135)) | (1L << (GET - 135)) | (1L << (GRANT - 135)) | (1L << (HOLD - 135)) | (1L << (INSERT - 135)) | (1L << (LABEL - 135)) | (1L << (LOCK - 135)))) != 0) || _la==OPEN || ((((_la - 274)) & ~0x3f) == 0 && ((1L << (_la - 274)) & ((1L << (SELECT - 274)) | (1L << (SET - 274)) | (1L << (UPDATE - 274)) | (1L << (VALUES - 274)) | (1L << (WITH - 274)))) != 0) || _la==INCLUDE || _la==MERGE || _la==DESCRIBE || _la==EXCHANGE) {
					{
					{
					setState(1288);
					sqlStatement();
					}
					}
					setState(1293);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1294);
				match(EOF);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SqlStatementContext extends ParserRuleContext {
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public AllocateCursorStatementContext allocateCursorStatement() {
			return getRuleContext(AllocateCursorStatementContext.class,0);
		}
		public AlterDatabaseStatementContext alterDatabaseStatement() {
			return getRuleContext(AlterDatabaseStatementContext.class,0);
		}
		public AlterFunctionStatementContext alterFunctionStatement() {
			return getRuleContext(AlterFunctionStatementContext.class,0);
		}
		public AlterIndexStatementContext alterIndexStatement() {
			return getRuleContext(AlterIndexStatementContext.class,0);
		}
		public AlterMaskStatementContext alterMaskStatement() {
			return getRuleContext(AlterMaskStatementContext.class,0);
		}
		public AlterPermissionStatementContext alterPermissionStatement() {
			return getRuleContext(AlterPermissionStatementContext.class,0);
		}
		public AlterProcedureStatementContext alterProcedureStatement() {
			return getRuleContext(AlterProcedureStatementContext.class,0);
		}
		public AlterSequenceStatementContext alterSequenceStatement() {
			return getRuleContext(AlterSequenceStatementContext.class,0);
		}
		public AlterStogroupStatementContext alterStogroupStatement() {
			return getRuleContext(AlterStogroupStatementContext.class,0);
		}
		public AlterTableStatementContext alterTableStatement() {
			return getRuleContext(AlterTableStatementContext.class,0);
		}
		public AlterTablespaceStatementContext alterTablespaceStatement() {
			return getRuleContext(AlterTablespaceStatementContext.class,0);
		}
		public AlterTriggerStatementContext alterTriggerStatement() {
			return getRuleContext(AlterTriggerStatementContext.class,0);
		}
		public AlterTrustedContextStatementContext alterTrustedContextStatement() {
			return getRuleContext(AlterTrustedContextStatementContext.class,0);
		}
		public AlterViewStatementContext alterViewStatement() {
			return getRuleContext(AlterViewStatementContext.class,0);
		}
		public AssociateLocatorsStatementContext associateLocatorsStatement() {
			return getRuleContext(AssociateLocatorsStatementContext.class,0);
		}
		public BeginDeclareSectionStatementContext beginDeclareSectionStatement() {
			return getRuleContext(BeginDeclareSectionStatementContext.class,0);
		}
		public CallStatementContext callStatement() {
			return getRuleContext(CallStatementContext.class,0);
		}
		public CloseStatementContext closeStatement() {
			return getRuleContext(CloseStatementContext.class,0);
		}
		public CommitStatementContext commitStatement() {
			return getRuleContext(CommitStatementContext.class,0);
		}
		public CommentStatementContext commentStatement() {
			return getRuleContext(CommentStatementContext.class,0);
		}
		public ConnectStatementContext connectStatement() {
			return getRuleContext(ConnectStatementContext.class,0);
		}
		public CreateAliasStatementContext createAliasStatement() {
			return getRuleContext(CreateAliasStatementContext.class,0);
		}
		public CreateAuxiliaryTableStatementContext createAuxiliaryTableStatement() {
			return getRuleContext(CreateAuxiliaryTableStatementContext.class,0);
		}
		public CreateDatabaseStatementContext createDatabaseStatement() {
			return getRuleContext(CreateDatabaseStatementContext.class,0);
		}
		public CreateFunctionStatementContext createFunctionStatement() {
			return getRuleContext(CreateFunctionStatementContext.class,0);
		}
		public CreateGlobalTemporaryTableStatementContext createGlobalTemporaryTableStatement() {
			return getRuleContext(CreateGlobalTemporaryTableStatementContext.class,0);
		}
		public CreateIndexStatementContext createIndexStatement() {
			return getRuleContext(CreateIndexStatementContext.class,0);
		}
		public CreateLobTablespaceStatementContext createLobTablespaceStatement() {
			return getRuleContext(CreateLobTablespaceStatementContext.class,0);
		}
		public CreateMaskStatementContext createMaskStatement() {
			return getRuleContext(CreateMaskStatementContext.class,0);
		}
		public CreatePermissionStatementContext createPermissionStatement() {
			return getRuleContext(CreatePermissionStatementContext.class,0);
		}
		public CreateProcedureStatementContext createProcedureStatement() {
			return getRuleContext(CreateProcedureStatementContext.class,0);
		}
		public CreateRoleStatementContext createRoleStatement() {
			return getRuleContext(CreateRoleStatementContext.class,0);
		}
		public CreateSequenceStatementContext createSequenceStatement() {
			return getRuleContext(CreateSequenceStatementContext.class,0);
		}
		public CreateStogroupStatementContext createStogroupStatement() {
			return getRuleContext(CreateStogroupStatementContext.class,0);
		}
		public CreateTableStatementContext createTableStatement() {
			return getRuleContext(CreateTableStatementContext.class,0);
		}
		public CreateTablespaceStatementContext createTablespaceStatement() {
			return getRuleContext(CreateTablespaceStatementContext.class,0);
		}
		public CreateTriggerStatementContext createTriggerStatement() {
			return getRuleContext(CreateTriggerStatementContext.class,0);
		}
		public CreateTrustedContextStatementContext createTrustedContextStatement() {
			return getRuleContext(CreateTrustedContextStatementContext.class,0);
		}
		public CreateTypeArrayStatementContext createTypeArrayStatement() {
			return getRuleContext(CreateTypeArrayStatementContext.class,0);
		}
		public CreateTypeDistinctStatementContext createTypeDistinctStatement() {
			return getRuleContext(CreateTypeDistinctStatementContext.class,0);
		}
		public CreateVariableStatementContext createVariableStatement() {
			return getRuleContext(CreateVariableStatementContext.class,0);
		}
		public CreateViewStatementContext createViewStatement() {
			return getRuleContext(CreateViewStatementContext.class,0);
		}
		public DeclareCursorStatementContext declareCursorStatement() {
			return getRuleContext(DeclareCursorStatementContext.class,0);
		}
		public DeclareGlobalTemporaryTableStatementContext declareGlobalTemporaryTableStatement() {
			return getRuleContext(DeclareGlobalTemporaryTableStatementContext.class,0);
		}
		public DeclareTableStatementContext declareTableStatement() {
			return getRuleContext(DeclareTableStatementContext.class,0);
		}
		public DeclareVariableStatementContext declareVariableStatement() {
			return getRuleContext(DeclareVariableStatementContext.class,0);
		}
		public DeclareStatementStatementContext declareStatementStatement() {
			return getRuleContext(DeclareStatementStatementContext.class,0);
		}
		public DeleteStatementContext deleteStatement() {
			return getRuleContext(DeleteStatementContext.class,0);
		}
		public DescribeStatementContext describeStatement() {
			return getRuleContext(DescribeStatementContext.class,0);
		}
		public DropStatementContext dropStatement() {
			return getRuleContext(DropStatementContext.class,0);
		}
		public EndDeclareSectionStatementContext endDeclareSectionStatement() {
			return getRuleContext(EndDeclareSectionStatementContext.class,0);
		}
		public ExchangeStatementContext exchangeStatement() {
			return getRuleContext(ExchangeStatementContext.class,0);
		}
		public ExecuteStatementContext executeStatement() {
			return getRuleContext(ExecuteStatementContext.class,0);
		}
		public ExecuteImmediateStatementContext executeImmediateStatement() {
			return getRuleContext(ExecuteImmediateStatementContext.class,0);
		}
		public ExplainStatementContext explainStatement() {
			return getRuleContext(ExplainStatementContext.class,0);
		}
		public FetchStatementContext fetchStatement() {
			return getRuleContext(FetchStatementContext.class,0);
		}
		public FreeLocatorStatementContext freeLocatorStatement() {
			return getRuleContext(FreeLocatorStatementContext.class,0);
		}
		public GetDiagnosticsStatementContext getDiagnosticsStatement() {
			return getRuleContext(GetDiagnosticsStatementContext.class,0);
		}
		public GrantStatementContext grantStatement() {
			return getRuleContext(GrantStatementContext.class,0);
		}
		public HoldLocatorStatementContext holdLocatorStatement() {
			return getRuleContext(HoldLocatorStatementContext.class,0);
		}
		public IncludeStatementContext includeStatement() {
			return getRuleContext(IncludeStatementContext.class,0);
		}
		public InsertStatementContext insertStatement() {
			return getRuleContext(InsertStatementContext.class,0);
		}
		public LabelStatementContext labelStatement() {
			return getRuleContext(LabelStatementContext.class,0);
		}
		public LockTableStatementContext lockTableStatement() {
			return getRuleContext(LockTableStatementContext.class,0);
		}
		public MergeStatementContext mergeStatement() {
			return getRuleContext(MergeStatementContext.class,0);
		}
		public OpenStatementContext openStatement() {
			return getRuleContext(OpenStatementContext.class,0);
		}
		public SetAssignmentStatementContext setAssignmentStatement() {
			return getRuleContext(SetAssignmentStatementContext.class,0);
		}
		public UpdateStatementContext updateStatement() {
			return getRuleContext(UpdateStatementContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(DB2zSQLParser.SEMICOLON, 0); }
		public TerminalNode EOF() { return getToken(DB2zSQLParser.EOF, 0); }
		public TerminalNode EXEC_SQL() { return getToken(DB2zSQLParser.EXEC_SQL, 0); }
		public TerminalNode END_EXEC() { return getToken(DB2zSQLParser.END_EXEC, 0); }
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public SqlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSqlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSqlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSqlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SqlStatementContext sqlStatement() throws RecognitionException {
		SqlStatementContext _localctx = new SqlStatementContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_sqlStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1298);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXEC_SQL) {
				{
				setState(1297);
				match(EXEC_SQL);
				}
			}

			setState(1369);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {
			case 1:
				{
				setState(1300);
				query();
				}
				break;
			case 2:
				{
				setState(1301);
				allocateCursorStatement();
				}
				break;
			case 3:
				{
				setState(1302);
				alterDatabaseStatement();
				}
				break;
			case 4:
				{
				setState(1303);
				alterFunctionStatement();
				}
				break;
			case 5:
				{
				setState(1304);
				alterIndexStatement();
				}
				break;
			case 6:
				{
				setState(1305);
				alterMaskStatement();
				}
				break;
			case 7:
				{
				setState(1306);
				alterPermissionStatement();
				}
				break;
			case 8:
				{
				setState(1307);
				alterProcedureStatement();
				}
				break;
			case 9:
				{
				setState(1308);
				alterSequenceStatement();
				}
				break;
			case 10:
				{
				setState(1309);
				alterStogroupStatement();
				}
				break;
			case 11:
				{
				setState(1310);
				alterTableStatement();
				}
				break;
			case 12:
				{
				setState(1311);
				alterTablespaceStatement();
				}
				break;
			case 13:
				{
				setState(1312);
				alterTriggerStatement();
				}
				break;
			case 14:
				{
				setState(1313);
				alterTrustedContextStatement();
				}
				break;
			case 15:
				{
				setState(1314);
				alterViewStatement();
				}
				break;
			case 16:
				{
				setState(1315);
				associateLocatorsStatement();
				}
				break;
			case 17:
				{
				setState(1316);
				beginDeclareSectionStatement();
				}
				break;
			case 18:
				{
				setState(1317);
				callStatement();
				}
				break;
			case 19:
				{
				setState(1318);
				closeStatement();
				}
				break;
			case 20:
				{
				setState(1319);
				commitStatement();
				}
				break;
			case 21:
				{
				setState(1320);
				commentStatement();
				}
				break;
			case 22:
				{
				setState(1321);
				connectStatement();
				}
				break;
			case 23:
				{
				setState(1322);
				createAliasStatement();
				}
				break;
			case 24:
				{
				setState(1323);
				createAuxiliaryTableStatement();
				}
				break;
			case 25:
				{
				setState(1324);
				createDatabaseStatement();
				}
				break;
			case 26:
				{
				setState(1325);
				createFunctionStatement();
				}
				break;
			case 27:
				{
				setState(1326);
				createGlobalTemporaryTableStatement();
				}
				break;
			case 28:
				{
				setState(1327);
				createIndexStatement();
				}
				break;
			case 29:
				{
				setState(1328);
				createLobTablespaceStatement();
				}
				break;
			case 30:
				{
				setState(1329);
				createMaskStatement();
				}
				break;
			case 31:
				{
				setState(1330);
				createPermissionStatement();
				}
				break;
			case 32:
				{
				setState(1331);
				createProcedureStatement();
				}
				break;
			case 33:
				{
				setState(1332);
				createRoleStatement();
				}
				break;
			case 34:
				{
				setState(1333);
				createSequenceStatement();
				}
				break;
			case 35:
				{
				setState(1334);
				createStogroupStatement();
				}
				break;
			case 36:
				{
				setState(1335);
				createTableStatement();
				}
				break;
			case 37:
				{
				setState(1336);
				createTablespaceStatement();
				}
				break;
			case 38:
				{
				setState(1337);
				createTriggerStatement();
				}
				break;
			case 39:
				{
				setState(1338);
				createTrustedContextStatement();
				}
				break;
			case 40:
				{
				setState(1339);
				createTypeArrayStatement();
				}
				break;
			case 41:
				{
				setState(1340);
				createTypeDistinctStatement();
				}
				break;
			case 42:
				{
				setState(1341);
				createVariableStatement();
				}
				break;
			case 43:
				{
				setState(1342);
				createViewStatement();
				}
				break;
			case 44:
				{
				setState(1343);
				declareCursorStatement();
				}
				break;
			case 45:
				{
				setState(1344);
				declareGlobalTemporaryTableStatement();
				}
				break;
			case 46:
				{
				setState(1345);
				declareTableStatement();
				}
				break;
			case 47:
				{
				setState(1346);
				declareVariableStatement();
				}
				break;
			case 48:
				{
				setState(1347);
				declareStatementStatement();
				}
				break;
			case 49:
				{
				setState(1348);
				deleteStatement();
				}
				break;
			case 50:
				{
				setState(1349);
				describeStatement();
				}
				break;
			case 51:
				{
				setState(1350);
				dropStatement();
				}
				break;
			case 52:
				{
				setState(1351);
				endDeclareSectionStatement();
				}
				break;
			case 53:
				{
				setState(1352);
				exchangeStatement();
				}
				break;
			case 54:
				{
				setState(1353);
				executeStatement();
				}
				break;
			case 55:
				{
				setState(1354);
				executeImmediateStatement();
				}
				break;
			case 56:
				{
				setState(1355);
				explainStatement();
				}
				break;
			case 57:
				{
				setState(1356);
				fetchStatement();
				}
				break;
			case 58:
				{
				setState(1357);
				freeLocatorStatement();
				}
				break;
			case 59:
				{
				setState(1358);
				getDiagnosticsStatement();
				}
				break;
			case 60:
				{
				setState(1359);
				grantStatement();
				}
				break;
			case 61:
				{
				setState(1360);
				holdLocatorStatement();
				}
				break;
			case 62:
				{
				setState(1361);
				includeStatement();
				}
				break;
			case 63:
				{
				setState(1362);
				insertStatement();
				}
				break;
			case 64:
				{
				setState(1363);
				labelStatement();
				}
				break;
			case 65:
				{
				setState(1364);
				lockTableStatement();
				}
				break;
			case 66:
				{
				setState(1365);
				mergeStatement();
				}
				break;
			case 67:
				{
				setState(1366);
				openStatement();
				}
				break;
			case 68:
				{
				setState(1367);
				setAssignmentStatement();
				}
				break;
			case 69:
				{
				setState(1368);
				updateStatement();
				}
				break;
			}
			setState(1377);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SEMICOLON:
				{
				setState(1371);
				match(SEMICOLON);
				}
				break;
			case END_EXEC:
				{
				{
				setState(1372);
				match(END_EXEC);
				setState(1374);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT) {
					{
					setState(1373);
					match(DOT);
					}
				}

				}
				}
				break;
			case EOF:
				{
				setState(1376);
				match(EOF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryContext extends ParserRuleContext {
		public SubSelectContext subSelect() {
			return getRuleContext(SubSelectContext.class,0);
		}
		public FullSelectContext fullSelect() {
			return getRuleContext(FullSelectContext.class,0);
		}
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public SelectIntoStatementContext selectIntoStatement() {
			return getRuleContext(SelectIntoStatementContext.class,0);
		}
		public QueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterQuery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitQuery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitQuery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryContext query() throws RecognitionException {
		QueryContext _localctx = new QueryContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_query);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1383);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,6,_ctx) ) {
			case 1:
				{
				setState(1379);
				subSelect();
				}
				break;
			case 2:
				{
				setState(1380);
				fullSelect();
				}
				break;
			case 3:
				{
				setState(1381);
				selectStatement();
				}
				break;
			case 4:
				{
				setState(1382);
				selectIntoStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CursorNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public CursorNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursorName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCursorName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCursorName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCursorName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CursorNameContext cursorName() throws RecognitionException {
		CursorNameContext _localctx = new CursorNameContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_cursorName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1385);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatementNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public StatementNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statementName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterStatementName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitStatementName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitStatementName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StatementNameContext statementName() throws RecognitionException {
		StatementNameContext _localctx = new StatementNameContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_statementName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1387);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DescriptorNameContext extends ParserRuleContext {
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public DescriptorNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_descriptorName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDescriptorName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDescriptorName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDescriptorName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DescriptorNameContext descriptorName() throws RecognitionException {
		DescriptorNameContext _localctx = new DescriptorNameContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_descriptorName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1389);
			hostVariable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HoldabilityContext extends ParserRuleContext {
		public TerminalNode WITHOUT() { return getToken(DB2zSQLParser.WITHOUT, 0); }
		public TerminalNode HOLD() { return getToken(DB2zSQLParser.HOLD, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public HoldabilityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_holdability; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterHoldability(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitHoldability(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitHoldability(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HoldabilityContext holdability() throws RecognitionException {
		HoldabilityContext _localctx = new HoldabilityContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_holdability);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1395);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITHOUT:
				{
				{
				setState(1391);
				match(WITHOUT);
				setState(1392);
				match(HOLD);
				}
				}
				break;
			case WITH:
				{
				{
				setState(1393);
				match(WITH);
				setState(1394);
				match(HOLD);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReturnabilityContext extends ParserRuleContext {
		public TerminalNode WITHOUT() { return getToken(DB2zSQLParser.WITHOUT, 0); }
		public TerminalNode RETURN() { return getToken(DB2zSQLParser.RETURN, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode TO() { return getToken(DB2zSQLParser.TO, 0); }
		public TerminalNode CALLER() { return getToken(DB2zSQLParser.CALLER, 0); }
		public TerminalNode CLIENT() { return getToken(DB2zSQLParser.CLIENT, 0); }
		public ReturnabilityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_returnability; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterReturnability(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitReturnability(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitReturnability(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReturnabilityContext returnability() throws RecognitionException {
		ReturnabilityContext _localctx = new ReturnabilityContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_returnability);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1407);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITHOUT:
				{
				{
				setState(1397);
				match(WITHOUT);
				setState(1398);
				match(RETURN);
				}
				}
				break;
			case WITH:
				{
				{
				setState(1399);
				match(WITH);
				setState(1400);
				match(RETURN);
				setState(1405);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,8,_ctx) ) {
				case 1:
					{
					{
					setState(1401);
					match(TO);
					setState(1402);
					match(CALLER);
					}
					}
					break;
				case 2:
					{
					{
					setState(1403);
					match(TO);
					setState(1404);
					match(CLIENT);
					}
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowsetPositioningContext extends ParserRuleContext {
		public TerminalNode WITHOUT() { return getToken(DB2zSQLParser.WITHOUT, 0); }
		public TerminalNode ROWSET() { return getToken(DB2zSQLParser.ROWSET, 0); }
		public TerminalNode POSITIONING() { return getToken(DB2zSQLParser.POSITIONING, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public RowsetPositioningContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowsetPositioning; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRowsetPositioning(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRowsetPositioning(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRowsetPositioning(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowsetPositioningContext rowsetPositioning() throws RecognitionException {
		RowsetPositioningContext _localctx = new RowsetPositioningContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_rowsetPositioning);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1415);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITHOUT:
				{
				{
				setState(1409);
				match(WITHOUT);
				setState(1410);
				match(ROWSET);
				setState(1411);
				match(POSITIONING);
				}
				}
				break;
			case WITH:
				{
				{
				setState(1412);
				match(WITH);
				setState(1413);
				match(ROWSET);
				setState(1414);
				match(POSITIONING);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NotNullPhraseContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode DEFAULT() { return getToken(DB2zSQLParser.DEFAULT, 0); }
		public NotNullPhraseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notNullPhrase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterNotNullPhrase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitNotNullPhrase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitNotNullPhrase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NotNullPhraseContext notNullPhrase() throws RecognitionException {
		NotNullPhraseContext _localctx = new NotNullPhraseContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_notNullPhrase);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1423);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,11,_ctx) ) {
			case 1:
				{
				{
				setState(1417);
				match(NOT);
				setState(1418);
				match(NULL);
				}
				}
				break;
			case 2:
				{
				{
				setState(1419);
				match(NOT);
				setState(1420);
				match(NULL);
				setState(1421);
				match(WITH);
				setState(1422);
				match(DEFAULT);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AllocateCursorStatementContext extends ParserRuleContext {
		public TerminalNode ALLOCATE() { return getToken(DB2zSQLParser.ALLOCATE, 0); }
		public CursorNameContext cursorName() {
			return getRuleContext(CursorNameContext.class,0);
		}
		public TerminalNode CURSOR() { return getToken(DB2zSQLParser.CURSOR, 0); }
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode RESULT() { return getToken(DB2zSQLParser.RESULT, 0); }
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public RsLocatorVariableContext rsLocatorVariable() {
			return getRuleContext(RsLocatorVariableContext.class,0);
		}
		public AllocateCursorStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_allocateCursorStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAllocateCursorStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAllocateCursorStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAllocateCursorStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AllocateCursorStatementContext allocateCursorStatement() throws RecognitionException {
		AllocateCursorStatementContext _localctx = new AllocateCursorStatementContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_allocateCursorStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1425);
			match(ALLOCATE);
			setState(1426);
			cursorName();
			setState(1427);
			match(CURSOR);
			setState(1428);
			match(FOR);
			setState(1429);
			match(RESULT);
			setState(1430);
			match(SET);
			setState(1431);
			rsLocatorVariable();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RsLocatorVariableContext extends ParserRuleContext {
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public RsLocatorVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rsLocatorVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRsLocatorVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRsLocatorVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRsLocatorVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RsLocatorVariableContext rsLocatorVariable() throws RecognitionException {
		RsLocatorVariableContext _localctx = new RsLocatorVariableContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_rsLocatorVariable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1433);
			hostVariable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDatabaseStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode DATABASE() { return getToken(DB2zSQLParser.DATABASE, 0); }
		public DatabaseNameContext databaseName() {
			return getRuleContext(DatabaseNameContext.class,0);
		}
		public List<BufferpoolOptionContext> bufferpoolOption() {
			return getRuleContexts(BufferpoolOptionContext.class);
		}
		public BufferpoolOptionContext bufferpoolOption(int i) {
			return getRuleContext(BufferpoolOptionContext.class,i);
		}
		public List<TerminalNode> INDEXBP() { return getTokens(DB2zSQLParser.INDEXBP); }
		public TerminalNode INDEXBP(int i) {
			return getToken(DB2zSQLParser.INDEXBP, i);
		}
		public List<BpNameContext> bpName() {
			return getRuleContexts(BpNameContext.class);
		}
		public BpNameContext bpName(int i) {
			return getRuleContext(BpNameContext.class,i);
		}
		public List<TerminalNode> STOGROUP() { return getTokens(DB2zSQLParser.STOGROUP); }
		public TerminalNode STOGROUP(int i) {
			return getToken(DB2zSQLParser.STOGROUP, i);
		}
		public List<StogroupNameContext> stogroupName() {
			return getRuleContexts(StogroupNameContext.class);
		}
		public StogroupNameContext stogroupName(int i) {
			return getRuleContext(StogroupNameContext.class,i);
		}
		public List<TerminalNode> CCSID() { return getTokens(DB2zSQLParser.CCSID); }
		public TerminalNode CCSID(int i) {
			return getToken(DB2zSQLParser.CCSID, i);
		}
		public List<CcsidValueContext> ccsidValue() {
			return getRuleContexts(CcsidValueContext.class);
		}
		public CcsidValueContext ccsidValue(int i) {
			return getRuleContext(CcsidValueContext.class,i);
		}
		public AlterDatabaseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDatabaseStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterDatabaseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterDatabaseStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterDatabaseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDatabaseStatementContext alterDatabaseStatement() throws RecognitionException {
		AlterDatabaseStatementContext _localctx = new AlterDatabaseStatementContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_alterDatabaseStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1435);
			match(ALTER);
			setState(1436);
			match(DATABASE);
			setState(1437);
			databaseName();
			setState(1445); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(1445);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BUFFERPOOL:
					{
					setState(1438);
					bufferpoolOption();
					}
					break;
				case INDEXBP:
					{
					{
					setState(1439);
					match(INDEXBP);
					setState(1440);
					bpName();
					}
					}
					break;
				case STOGROUP:
					{
					{
					setState(1441);
					match(STOGROUP);
					setState(1442);
					stogroupName();
					}
					}
					break;
				case CCSID:
					{
					{
					setState(1443);
					match(CCSID);
					setState(1444);
					ccsidValue();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(1447); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==BUFFERPOOL || _la==CCSID || _la==INDEXBP || _la==STOGROUP );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterFunctionStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode RESTRICT() { return getToken(DB2zSQLParser.RESTRICT, 0); }
		public List<FunctionOptionListContext> functionOptionList() {
			return getRuleContexts(FunctionOptionListContext.class);
		}
		public FunctionOptionListContext functionOptionList(int i) {
			return getRuleContext(FunctionOptionListContext.class,i);
		}
		public TerminalNode FUNCTION() { return getToken(DB2zSQLParser.FUNCTION, 0); }
		public FunctionNameContext functionName() {
			return getRuleContext(FunctionNameContext.class,0);
		}
		public TerminalNode SPECIFIC() { return getToken(DB2zSQLParser.SPECIFIC, 0); }
		public SpecificNameContext specificName() {
			return getRuleContext(SpecificNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<FunctionParameterTypeContext> functionParameterType() {
			return getRuleContexts(FunctionParameterTypeContext.class);
		}
		public FunctionParameterTypeContext functionParameterType(int i) {
			return getRuleContext(FunctionParameterTypeContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public AlterFunctionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterFunctionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterFunctionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterFunctionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterFunctionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterFunctionStatementContext alterFunctionStatement() throws RecognitionException {
		AlterFunctionStatementContext _localctx = new AlterFunctionStatementContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_alterFunctionStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1449);
			match(ALTER);
			setState(1468);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FUNCTION:
				{
				{
				setState(1450);
				match(FUNCTION);
				setState(1451);
				functionName();
				setState(1463);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(1452);
					match(LPAREN);
					setState(1453);
					functionParameterType();
					setState(1458);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1454);
						match(COMMA);
						setState(1455);
						functionParameterType();
						}
						}
						setState(1460);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(1461);
					match(RPAREN);
					}
				}

				}
				}
				break;
			case SPECIFIC:
				{
				{
				setState(1465);
				match(SPECIFIC);
				setState(1466);
				match(FUNCTION);
				setState(1467);
				specificName();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1471);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RESTRICT) {
				{
				setState(1470);
				match(RESTRICT);
				}
			}

			setState(1474); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1473);
				functionOptionList();
				}
				}
				setState(1476); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 41)) & ~0x3f) == 0 && ((1L << (_la - 41)) & ((1L << (ALLOW - 41)) | (1L << (ASUTIME - 41)) | (1L << (COLLID - 41)) | (1L << (CONTAINS - 41)) | (1L << (CONTINUE - 41)) | (1L << (DBINFO - 41)) | (1L << (DEFAULT - 41)) | (1L << (DETERMINISTIC - 41)) | (1L << (DISALLOW - 41)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (EXTERNAL - 128)) | (1L << (FINAL - 128)) | (1L << (INHERIT - 128)) | (1L << (LANGUAGE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (MODIFIES - 193)) | (1L << (NO - 193)) | (1L << (NOT - 193)) | (1L << (NULL - 193)) | (1L << (PACKAGE - 193)) | (1L << (PARAMETER - 193)) | (1L << (PROGRAM - 193)) | (1L << (READS - 193)) | (1L << (RETURNS - 193)))) != 0) || ((((_la - 266)) & ~0x3f) == 0 && ((1L << (_la - 266)) & ((1L << (RUN - 266)) | (1L << (SCRATCHPAD - 266)) | (1L << (SECURITY - 266)) | (1L << (SPECIFIC - 266)) | (1L << (STATIC - 266)) | (1L << (STAY - 266)) | (1L << (VARIANT - 266)) | (1L << (WLM - 266)))) != 0) || ((((_la - 442)) & ~0x3f) == 0 && ((1L << (_la - 442)) & ((1L << (CALLED - 442)) | (1L << (SECURED - 442)) | (1L << (STOP - 442)))) != 0) || _la==CARDINALITY );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterIndexStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode INDEX() { return getToken(DB2zSQLParser.INDEX, 0); }
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public RegenerateClauseContext regenerateClause() {
			return getRuleContext(RegenerateClauseContext.class,0);
		}
		public List<AlterIndexOptionsContext> alterIndexOptions() {
			return getRuleContexts(AlterIndexOptionsContext.class);
		}
		public AlterIndexOptionsContext alterIndexOptions(int i) {
			return getRuleContext(AlterIndexOptionsContext.class,i);
		}
		public List<AlterIndexPartitionOptionsContext> alterIndexPartitionOptions() {
			return getRuleContexts(AlterIndexPartitionOptionsContext.class);
		}
		public AlterIndexPartitionOptionsContext alterIndexPartitionOptions(int i) {
			return getRuleContext(AlterIndexPartitionOptionsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public AlterIndexStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterIndexStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterIndexStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterIndexStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterIndexStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterIndexStatementContext alterIndexStatement() throws RecognitionException {
		AlterIndexStatementContext _localctx = new AlterIndexStatementContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_alterIndexStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1478);
			match(ALTER);
			setState(1479);
			match(INDEX);
			setState(1480);
			indexName();
			setState(1482);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REGENERATE) {
				{
				setState(1481);
				regenerateClause();
				}
			}

			setState(1487);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ADD || _la==BUFFERPOOL || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (CLOSE - 71)) | (1L << (CLUSTER - 71)) | (1L << (DSSIZE - 71)) | (1L << (ERASE - 71)))) != 0) || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (NOT - 200)) | (1L << (PADDED - 200)) | (1L << (PIECESIZE - 200)) | (1L << (PRIQTY - 200)))) != 0) || _la==SECQTY || _la==USING || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (COMPRESS - 467)) | (1L << (COPY - 467)) | (1L << (FREEPAGE - 467)) | (1L << (GBPCACHE - 467)) | (1L << (PCTFREE - 467)))) != 0)) {
				{
				{
				setState(1484);
				alterIndexOptions();
				}
				}
				setState(1489);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1498);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALTER) {
				{
				setState(1490);
				alterIndexPartitionOptions();
				setState(1495);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1491);
					match(COMMA);
					setState(1492);
					alterIndexPartitionOptions();
					}
					}
					setState(1497);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterMaskStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode MASK() { return getToken(DB2zSQLParser.MASK, 0); }
		public MaskNameContext maskName() {
			return getRuleContext(MaskNameContext.class,0);
		}
		public TerminalNode ENABLE() { return getToken(DB2zSQLParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(DB2zSQLParser.DISABLE, 0); }
		public RegenerateClauseContext regenerateClause() {
			return getRuleContext(RegenerateClauseContext.class,0);
		}
		public AlterMaskStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterMaskStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterMaskStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterMaskStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterMaskStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterMaskStatementContext alterMaskStatement() throws RecognitionException {
		AlterMaskStatementContext _localctx = new AlterMaskStatementContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_alterMaskStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1500);
			match(ALTER);
			setState(1501);
			match(MASK);
			setState(1502);
			maskName();
			setState(1506);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENABLE:
				{
				setState(1503);
				match(ENABLE);
				}
				break;
			case DISABLE:
				{
				setState(1504);
				match(DISABLE);
				}
				break;
			case REGENERATE:
				{
				setState(1505);
				regenerateClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterPermissionStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode PERMISSION() { return getToken(DB2zSQLParser.PERMISSION, 0); }
		public PermissionNameContext permissionName() {
			return getRuleContext(PermissionNameContext.class,0);
		}
		public TerminalNode ENABLE() { return getToken(DB2zSQLParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(DB2zSQLParser.DISABLE, 0); }
		public RegenerateClauseContext regenerateClause() {
			return getRuleContext(RegenerateClauseContext.class,0);
		}
		public AlterPermissionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterPermissionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterPermissionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterPermissionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterPermissionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterPermissionStatementContext alterPermissionStatement() throws RecognitionException {
		AlterPermissionStatementContext _localctx = new AlterPermissionStatementContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_alterPermissionStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1508);
			match(ALTER);
			setState(1509);
			match(PERMISSION);
			setState(1510);
			permissionName();
			setState(1514);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENABLE:
				{
				setState(1511);
				match(ENABLE);
				}
				break;
			case DISABLE:
				{
				setState(1512);
				match(DISABLE);
				}
				break;
			case REGENERATE:
				{
				setState(1513);
				regenerateClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterProcedureStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode PROCEDURE() { return getToken(DB2zSQLParser.PROCEDURE, 0); }
		public ProcedureNameContext procedureName() {
			return getRuleContext(ProcedureNameContext.class,0);
		}
		public List<ProcedureOptionListContext> procedureOptionList() {
			return getRuleContexts(ProcedureOptionListContext.class);
		}
		public ProcedureOptionListContext procedureOptionList(int i) {
			return getRuleContext(ProcedureOptionListContext.class,i);
		}
		public AlterProcedureStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterProcedureStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterProcedureStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterProcedureStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterProcedureStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterProcedureStatementContext alterProcedureStatement() throws RecognitionException {
		AlterProcedureStatementContext _localctx = new AlterProcedureStatementContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_alterProcedureStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1516);
			match(ALTER);
			setState(1517);
			match(PROCEDURE);
			setState(1518);
			procedureName();
			setState(1520); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1519);
				procedureOptionList();
				}
				}
				setState(1522); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 41)) & ~0x3f) == 0 && ((1L << (_la - 41)) & ((1L << (ALLOW - 41)) | (1L << (ASUTIME - 41)) | (1L << (COLLID - 41)) | (1L << (COMMIT - 41)) | (1L << (CONTAINS - 41)) | (1L << (CONTINUE - 41)) | (1L << (DBINFO - 41)) | (1L << (DEFAULT - 41)) | (1L << (DETERMINISTIC - 41)) | (1L << (DISABLE - 41)) | (1L << (DISALLOW - 41)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (DYNAMIC - 110)) | (1L << (EXTERNAL - 110)) | (1L << (INHERIT - 110)) | (1L << (LANGUAGE - 110)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (MODIFIES - 193)) | (1L << (NO - 193)) | (1L << (NOT - 193)) | (1L << (NULL - 193)) | (1L << (PACKAGE - 193)) | (1L << (PARAMETER - 193)) | (1L << (PROGRAM - 193)) | (1L << (READS - 193)) | (1L << (RESULT - 193)))) != 0) || ((((_la - 266)) & ~0x3f) == 0 && ((1L << (_la - 266)) & ((1L << (RUN - 266)) | (1L << (SECURITY - 266)) | (1L << (STAY - 266)) | (1L << (VARIANT - 266)) | (1L << (WLM - 266)))) != 0) || _la==CALLED || _la==STOP );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterSequenceStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode SEQUENCE() { return getToken(DB2zSQLParser.SEQUENCE, 0); }
		public SequenceNameContext sequenceName() {
			return getRuleContext(SequenceNameContext.class,0);
		}
		public List<AlterSequenceOptionListContext> alterSequenceOptionList() {
			return getRuleContexts(AlterSequenceOptionListContext.class);
		}
		public AlterSequenceOptionListContext alterSequenceOptionList(int i) {
			return getRuleContext(AlterSequenceOptionListContext.class,i);
		}
		public AlterSequenceStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterSequenceStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterSequenceStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterSequenceStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterSequenceStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterSequenceStatementContext alterSequenceStatement() throws RecognitionException {
		AlterSequenceStatementContext _localctx = new AlterSequenceStatementContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_alterSequenceStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1524);
			match(ALTER);
			setState(1525);
			match(SEQUENCE);
			setState(1526);
			sequenceName();
			setState(1528); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1527);
				alterSequenceOptionList();
				}
				}
				setState(1530); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==NO || _la==ORDER || ((((_la - 472)) & ~0x3f) == 0 && ((1L << (_la - 472)) & ((1L << (MAXVALUE - 472)) | (1L << (MINVALUE - 472)) | (1L << (CACHE - 472)) | (1L << (CYCLE - 472)) | (1L << (INCREMENT - 472)) | (1L << (RESTART - 472)))) != 0) );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterStogroupStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode STOGROUP() { return getToken(DB2zSQLParser.STOGROUP, 0); }
		public StogroupNameContext stogroupName() {
			return getRuleContext(StogroupNameContext.class,0);
		}
		public List<AlterStogroupOptionListContext> alterStogroupOptionList() {
			return getRuleContexts(AlterStogroupOptionListContext.class);
		}
		public AlterStogroupOptionListContext alterStogroupOptionList(int i) {
			return getRuleContext(AlterStogroupOptionListContext.class,i);
		}
		public AlterStogroupStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterStogroupStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterStogroupStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterStogroupStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterStogroupStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterStogroupStatementContext alterStogroupStatement() throws RecognitionException {
		AlterStogroupStatementContext _localctx = new AlterStogroupStatementContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_alterStogroupStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1532);
			match(ALTER);
			setState(1533);
			match(STOGROUP);
			setState(1534);
			stogroupName();
			setState(1536); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1535);
				alterStogroupOptionList();
				}
				}
				setState(1538); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==ADD || _la==KEY || _la==NO || ((((_la - 496)) & ~0x3f) == 0 && ((1L << (_la - 496)) & ((1L << (DATACLAS - 496)) | (1L << (MGMTCLAS - 496)) | (1L << (REMOVE - 496)) | (1L << (STORCLAS - 496)))) != 0) );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public AlterTableNameContext alterTableName() {
			return getRuleContext(AlterTableNameContext.class,0);
		}
		public List<AlterTableOptionListContext> alterTableOptionList() {
			return getRuleContexts(AlterTableOptionListContext.class);
		}
		public AlterTableOptionListContext alterTableOptionList(int i) {
			return getRuleContext(AlterTableOptionListContext.class,i);
		}
		public AlterTableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTableStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterTableStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterTableStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterTableStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableStatementContext alterTableStatement() throws RecognitionException {
		AlterTableStatementContext _localctx = new AlterTableStatementContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_alterTableStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1540);
			match(ALTER);
			setState(1541);
			match(TABLE);
			setState(1542);
			alterTableName();
			setState(1544); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1543);
				alterTableOptionList();
				}
				}
				setState(1546); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALTER) | (1L << AUDIT))) != 0) || ((((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & ((1L << (DATA - 92)) | (1L << (DISABLE - 92)) | (1L << (DROP - 92)))) != 0) || ((((_la - 170)) & ~0x3f) == 0 && ((1L << (_la - 170)) & ((1L << (KEY - 170)) | (1L << (NO - 170)) | (1L << (NOT - 170)))) != 0) || _la==RENAME || _la==VALIDPROC || _la==VOLATILE || ((((_la - 477)) & ~0x3f) == 0 && ((1L << (_la - 477)) & ((1L << (ENABLE - 477)) | (1L << (ACTIVATE - 477)) | (1L << (APPEND - 477)) | (1L << (DEACTIVATE - 477)) | (1L << (ROTATE - 477)))) != 0) );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTablespaceStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode TABLESPACE() { return getToken(DB2zSQLParser.TABLESPACE, 0); }
		public TablespaceNameContext tablespaceName() {
			return getRuleContext(TablespaceNameContext.class,0);
		}
		public DatabaseNameContext databaseName() {
			return getRuleContext(DatabaseNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public List<AlterTablespaceOptionListContext> alterTablespaceOptionList() {
			return getRuleContexts(AlterTablespaceOptionListContext.class);
		}
		public AlterTablespaceOptionListContext alterTablespaceOptionList(int i) {
			return getRuleContext(AlterTablespaceOptionListContext.class,i);
		}
		public AlterPartitionClauseContext alterPartitionClause() {
			return getRuleContext(AlterPartitionClauseContext.class,0);
		}
		public MoveTableClauseContext moveTableClause() {
			return getRuleContext(MoveTableClauseContext.class,0);
		}
		public AlterTablespaceStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTablespaceStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterTablespaceStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterTablespaceStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterTablespaceStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTablespaceStatementContext alterTablespaceStatement() throws RecognitionException {
		AlterTablespaceStatementContext _localctx = new AlterTablespaceStatementContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_alterTablespaceStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1548);
			match(ALTER);
			setState(1549);
			match(TABLESPACE);
			setState(1553);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,29,_ctx) ) {
			case 1:
				{
				setState(1550);
				databaseName();
				setState(1551);
				match(DOT);
				}
				break;
			}
			setState(1555);
			tablespaceName();
			setState(1559);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 58)) & ~0x3f) == 0 && ((1L << (_la - 58)) & ((1L << (BUFFERPOOL - 58)) | (1L << (CCSID - 58)) | (1L << (CLOSE - 58)) | (1L << (DROP - 58)) | (1L << (DSSIZE - 58)) | (1L << (ERASE - 58)))) != 0) || ((((_la - 161)) & ~0x3f) == 0 && ((1L << (_la - 161)) & ((1L << (INSERT - 161)) | (1L << (LOCKMAX - 161)) | (1L << (LOCKSIZE - 161)) | (1L << (NOT - 161)))) != 0) || _la==PRIQTY || _la==SECQTY || _la==USING || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (COMPRESS - 467)) | (1L << (FREEPAGE - 467)) | (1L << (GBPCACHE - 467)) | (1L << (PCTFREE - 467)))) != 0) || ((((_la - 544)) & ~0x3f) == 0 && ((1L << (_la - 544)) & ((1L << (LOG - 544)) | (1L << (LOGGED - 544)) | (1L << (MAXPARTITIONS - 544)) | (1L << (MAXROWS - 544)) | (1L << (MEMBER - 544)) | (1L << (PAGENUM - 544)) | (1L << (SEGSIZE - 544)) | (1L << (TRACKMOD - 544)))) != 0)) {
				{
				{
				setState(1556);
				alterTablespaceOptionList();
				}
				}
				setState(1561);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1563);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALTER || _la==PART || _la==PARTITION) {
				{
				setState(1562);
				alterPartitionClause();
				}
			}

			setState(1566);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MOVE) {
				{
				setState(1565);
				moveTableClause();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTriggerStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode TRIGGER() { return getToken(DB2zSQLParser.TRIGGER, 0); }
		public TriggerNameContext triggerName() {
			return getRuleContext(TriggerNameContext.class,0);
		}
		public TerminalNode SECURED() { return getToken(DB2zSQLParser.SECURED, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public AlterTriggerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTriggerStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterTriggerStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterTriggerStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterTriggerStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTriggerStatementContext alterTriggerStatement() throws RecognitionException {
		AlterTriggerStatementContext _localctx = new AlterTriggerStatementContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_alterTriggerStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1568);
			match(ALTER);
			setState(1569);
			match(TRIGGER);
			{
			setState(1570);
			schemaName();
			setState(1571);
			match(DOT);
			}
			setState(1573);
			triggerName();
			setState(1575);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(1574);
				match(NOT);
				}
			}

			setState(1577);
			match(SECURED);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTrustedContextStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode TRUSTED() { return getToken(DB2zSQLParser.TRUSTED, 0); }
		public TerminalNode CONTEXT() { return getToken(DB2zSQLParser.CONTEXT, 0); }
		public ContextNameContext contextName() {
			return getRuleContext(ContextNameContext.class,0);
		}
		public List<TrustedContextOptionListContext> trustedContextOptionList() {
			return getRuleContexts(TrustedContextOptionListContext.class);
		}
		public TrustedContextOptionListContext trustedContextOptionList(int i) {
			return getRuleContext(TrustedContextOptionListContext.class,i);
		}
		public AlterTrustedContextStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTrustedContextStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterTrustedContextStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterTrustedContextStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterTrustedContextStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTrustedContextStatementContext alterTrustedContextStatement() throws RecognitionException {
		AlterTrustedContextStatementContext _localctx = new AlterTrustedContextStatementContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_alterTrustedContextStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1579);
			match(ALTER);
			setState(1580);
			match(TRUSTED);
			setState(1581);
			match(CONTEXT);
			setState(1582);
			contextName();
			setState(1584); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1583);
				trustedContextOptionList();
				}
				}
				setState(1586); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==ADD || _la==ALTER || ((((_la - 98)) & ~0x3f) == 0 && ((1L << (_la - 98)) & ((1L << (DEFAULT - 98)) | (1L << (DISABLE - 98)) | (1L << (DROP - 98)))) != 0) || _la==NO || _la==ENABLE || _la==REPLACE );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterViewStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode VIEW() { return getToken(DB2zSQLParser.VIEW, 0); }
		public ViewNameContext viewName() {
			return getRuleContext(ViewNameContext.class,0);
		}
		public TerminalNode REGENERATE() { return getToken(DB2zSQLParser.REGENERATE, 0); }
		public TerminalNode USING() { return getToken(DB2zSQLParser.USING, 0); }
		public TerminalNode APPLICATION() { return getToken(DB2zSQLParser.APPLICATION, 0); }
		public TerminalNode COMPATIBILITY() { return getToken(DB2zSQLParser.COMPATIBILITY, 0); }
		public ApplCompatValueContext applCompatValue() {
			return getRuleContext(ApplCompatValueContext.class,0);
		}
		public AlterViewStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterViewStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterViewStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterViewStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterViewStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterViewStatementContext alterViewStatement() throws RecognitionException {
		AlterViewStatementContext _localctx = new AlterViewStatementContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_alterViewStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1588);
			match(ALTER);
			setState(1589);
			match(VIEW);
			setState(1590);
			viewName();
			setState(1591);
			match(REGENERATE);
			setState(1596);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(1592);
				match(USING);
				setState(1593);
				match(APPLICATION);
				setState(1594);
				match(COMPATIBILITY);
				setState(1595);
				applCompatValue();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AssociateLocatorsStatementContext extends ParserRuleContext {
		public TerminalNode ASSOCIATE() { return getToken(DB2zSQLParser.ASSOCIATE, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<RsLocatorVariableContext> rsLocatorVariable() {
			return getRuleContexts(RsLocatorVariableContext.class);
		}
		public RsLocatorVariableContext rsLocatorVariable(int i) {
			return getRuleContext(RsLocatorVariableContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode PROCEDURE() { return getToken(DB2zSQLParser.PROCEDURE, 0); }
		public TerminalNode LOCATOR() { return getToken(DB2zSQLParser.LOCATOR, 0); }
		public TerminalNode LOCATORS() { return getToken(DB2zSQLParser.LOCATORS, 0); }
		public ProcedureNameContext procedureName() {
			return getRuleContext(ProcedureNameContext.class,0);
		}
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public TerminalNode RESULT() { return getToken(DB2zSQLParser.RESULT, 0); }
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public AssociateLocatorsStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_associateLocatorsStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAssociateLocatorsStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAssociateLocatorsStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAssociateLocatorsStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AssociateLocatorsStatementContext associateLocatorsStatement() throws RecognitionException {
		AssociateLocatorsStatementContext _localctx = new AssociateLocatorsStatementContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_associateLocatorsStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1598);
			match(ASSOCIATE);
			setState(1601);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RESULT) {
				{
				setState(1599);
				match(RESULT);
				setState(1600);
				match(SET);
				}
			}

			setState(1603);
			_la = _input.LA(1);
			if ( !(_la==LOCATOR || _la==LOCATORS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1604);
			match(LPAREN);
			setState(1605);
			rsLocatorVariable();
			setState(1610);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1606);
				match(COMMA);
				setState(1607);
				rsLocatorVariable();
				}
				}
				setState(1612);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1613);
			match(RPAREN);
			setState(1614);
			match(WITH);
			setState(1615);
			match(PROCEDURE);
			setState(1618);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTEGERLITERAL:
			case NUMERICLITERAL:
			case INSTEAD:
			case NEW:
			case NEW_TABLE:
			case OLD_TABLE:
			case REFERENCING:
			case BASED:
			case UPON:
			case ADD:
			case AFTER:
			case ALL:
			case ALLOCATE:
			case ALLOW:
			case ALTER:
			case ALTERAND:
			case ANY:
			case ARRAY:
			case ARRAY_EXISTS:
			case AS:
			case ASENSITIVE:
			case ASSOCIATE:
			case ASUTIME:
			case AT:
			case AUDIT:
			case AUX:
			case AUXILIARY:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BUFFERPOOL:
			case BUFFERPOOLS:
			case BY:
			case CALL:
			case CAPTURE:
			case CASCADED:
			case CASE:
			case CAST:
			case CCSID:
			case CHAR:
			case CHARACTER:
			case CHECK:
			case CLONE:
			case CLOSE:
			case CLUSTER:
			case COLLECTION:
			case COLLID:
			case COLUMN:
			case COMMENT:
			case COMMIT:
			case CONCAT:
			case CONDITION:
			case CONNECT:
			case CONNECTION:
			case CONSTRAINT:
			case CONTAINS:
			case CONTENT:
			case CONTINUE:
			case CREATE:
			case CUBE:
			case CURRENT:
			case CURRENT_LC_CTYPE:
			case CURRVAL:
			case CURSOR:
			case DATA:
			case DATABASE:
			case DAY:
			case DAYS:
			case DBINFO:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DISABLE:
			case DISALLOW:
			case DISTINCT:
			case DO:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSSIZE:
			case DYNAMIC:
			case EDITPROC:
			case ELSE:
			case ELSEIF:
			case ENCODING:
			case ENCRYPTION:
			case END:
			case END_EXEC:
			case ENDING:
			case ERASE:
			case ESCAPE:
			case EXCEPT:
			case EXCEPTION:
			case EXEC_SQL:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case FENCED:
			case FETCH:
			case FIELDPROC:
			case FINAL:
			case FIRST:
			case FOR:
			case FREE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANT:
			case GROUP:
			case HANDLER:
			case HAVING:
			case HOLD:
			case HOUR:
			case HOURS:
			case IF:
			case IMMEDIATE:
			case IN:
			case INCLUSIVE:
			case INDEX:
			case INDEXBP:
			case INHERIT:
			case INNER:
			case INOUT:
			case INSENSITIVE:
			case INSERT:
			case INTERSECT:
			case INTO:
			case IS:
			case ISOBID:
			case ITERATE:
			case JAR:
			case JOIN:
			case KEEP:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LAST:
			case LC_CTYPE:
			case LEAVE:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOCALE:
			case LOCATOR:
			case LOCATORS:
			case LOCK:
			case LOCKMAX:
			case LOCKSIZE:
			case LONG:
			case LOOP:
			case MAINTAINED:
			case MATERIALIZED:
			case MICROSECOND:
			case MICROSECONDS:
			case MODIFIES:
			case MONTH:
			case MONTHS:
			case NEXT:
			case NEXTVAL:
			case NO:
			case NONE:
			case NOT:
			case NULL:
			case NULLS:
			case NUMPARTS:
			case OBID:
			case OF:
			case OFFSET:
			case OLD:
			case ON:
			case OPEN:
			case OPTIMIZATION:
			case OPTIMIZE:
			case OR:
			case ORDER:
			case ORGANIZATION:
			case OUT:
			case OUTER:
			case PACKAGE:
			case PADDED:
			case PARAMETER:
			case PART:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONING:
			case PATH:
			case PERIOD:
			case PIECESIZE:
			case PLAN:
			case PRECISION:
			case PREPARE:
			case PREVVAL:
			case PRIOR:
			case PRIQTY:
			case PRIVILEGES:
			case PROCEDURE:
			case PROGRAM:
			case PSID:
			case PUBLIC:
			case QUERY:
			case QUERYNO:
			case READS:
			case REFERENCES:
			case REFRESH:
			case RELEASE:
			case RENAME:
			case REPEAT:
			case RESIGNAL:
			case RESTRICT:
			case RESULT:
			case RESULT_SET_LOCATOR:
			case RETURN:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUND_CEILING:
			case ROUND_DOWN:
			case ROUND_FLOOR:
			case ROUND_HALF_DOWN:
			case ROUND_HALF_EVEN:
			case ROUND_HALF_UP:
			case ROUND_UP:
			case ROW:
			case ROWSET:
			case RUN:
			case SAVEPOINT:
			case SCHEMA:
			case SCRATCHPAD:
			case SECOND:
			case SECONDS:
			case SECQTY:
			case SECURITY:
			case SELECT:
			case SENSITIVE:
			case SEQUENCE:
			case SET:
			case SIGNAL:
			case SIMPLE:
			case SOME:
			case SOURCE:
			case SPECIFIC:
			case STANDARD:
			case STATEMENT:
			case STATIC:
			case STAY:
			case STOGROUP:
			case STORES:
			case STYLE:
			case SUMMARY:
			case SYNONYM:
			case SYSDATE:
			case SYSTEM:
			case SYSTIMESTAMP:
			case TABLE:
			case TABLESPACE:
			case THEN:
			case TO:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNDO:
			case UNION:
			case UNIQUE:
			case UNTIL:
			case UPDATE:
			case USING:
			case VALIDPROC:
			case VALUE:
			case VALUES:
			case VARIABLE:
			case VARIANT:
			case VCAT:
			case VERSIONING:
			case VIEW:
			case VOLATILE:
			case VOLUMES:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WLM:
			case XMLCAST:
			case XMLEXISTS:
			case XMLNAMESPACES:
			case YEAR:
			case YEARS:
			case ZONE:
			case AND:
			case ARRAY_AGG:
			case ASC:
			case AVG:
			case BIT:
			case CHANGE:
			case CODEUNITS16:
			case CODEUNITS32:
			case CORR:
			case CORRELATION:
			case COUNT:
			case COUNT_BIG:
			case COVAR:
			case COVARIANCE:
			case COVARIANCE_SAMP:
			case COVAR_POP:
			case COVAR_SAMP:
			case CS:
			case CUME_DIST:
			case DENSE_RANK:
			case DESC:
			case EBCDIC:
			case EXCLUSIVE:
			case FIRST_VALUE:
			case FOLLOWING:
			case GROUPING:
			case IGNORE:
			case INDICATOR:
			case INPUT:
			case ISNULL:
			case LAG:
			case LARGE:
			case LAST_VALUE:
			case LEAD:
			case LISTAGG:
			case LOCKED:
			case LOCKS:
			case MEDIAN:
			case MINUTES:
			case MIXED:
			case NOTNULL:
			case NTH_VALUE:
			case NTILE:
			case NUMERIC:
			case OBJECT:
			case OCTETS:
			case ONLY:
			case OVER:
			case PASSING:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PERCENT_RANK:
			case PRECEDING:
			case PREVIOUS:
			case RANGE:
			case RANK:
			case RATIO_TO_REPORT:
			case READ:
			case REF:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_ICPT:
			case REGR_INTERCEPT:
			case REGR_R2:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case RESPECT:
			case ROW_NUMBER:
			case ROWS:
			case RR:
			case RS:
			case SBCS:
			case SELECTIVITY:
			case SETS:
			case SHARE:
			case SKIP_:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case TOKEN:
			case UNBOUNDED:
			case UNPACK:
			case UR:
			case USE:
			case VAR:
			case VARIANCE:
			case VARIANCE_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARYING:
			case WITHOUT:
			case XML:
			case XMLAGG:
			case COLUMNS:
			case SQLID:
			case ORDINALITY:
			case SYSTEM_TIME:
			case BUSINESS_TIME:
			case MULTIPLIER:
			case UNNEST:
			case CROSS:
			case CALLER:
			case CLIENT:
			case POSITIONING:
			case SCROLL:
			case ACTION:
			case ASSEMBLE:
			case C_:
			case CALLED:
			case COBOL:
			case DB2:
			case DEFINER:
			case DISPATCH:
			case ENVIRONMENT:
			case FAILURE:
			case FAILURES:
			case JAVA:
			case MAIN:
			case NAME:
			case OPTIONS:
			case PARALLEL:
			case PLI:
			case REGISTERS:
			case RESIDENT:
			case SECURED:
			case SPECIAL:
			case SQL:
			case STOP:
			case SUB:
			case YES:
			case APPLICATION:
			case CHANGED:
			case COMPATIBILITY:
			case COMPRESS:
			case COPY:
			case FREEPAGE:
			case GBPCACHE:
			case INCLUDE:
			case MAXVALUE:
			case MINVALUE:
			case PCTFREE:
			case REGENERATE:
			case MASK:
			case ENABLE:
			case PERMISSION:
			case ATOMIC:
			case SQLEXCEPTION:
			case MERGE:
			case MATCHED:
			case SQLSTATE:
			case MESSAGE_TEXT:
			case OVERRIDING:
			case PORTION:
			case DB2SQL:
			case DEBUG:
			case GENERAL:
			case MODE_:
			case REXX:
			case CACHE:
			case CYCLE:
			case INCREMENT:
			case RESTART:
			case DATACLAS:
			case MGMTCLAS:
			case REMOVE:
			case STORCLAS:
			case ACCESS:
			case ACTIVATE:
			case ALWAYS:
			case APPEND:
			case ARCHIVE:
			case BUSINESS:
			case CASCADE:
			case CHANGES:
			case CONTROL:
			case DEACTIVATE:
			case DEFERRED:
			case EACH:
			case ENFORCED:
			case EXTRA:
			case FOREIGN:
			case HIDDEN_:
			case HISTORY:
			case ID:
			case IDENTITY:
			case IMPLICITLY:
			case INITIALLY:
			case INLINE:
			case OPERATION:
			case ORGANIZE:
			case OVERLAPS:
			case PACKAGE_NAME:
			case PACKAGE_SCHEMA:
			case PACKAGE_VERSION:
			case PRIMARY:
			case RESET:
			case ROTATE:
			case START:
			case SYSIBM:
			case TRANSACTION:
			case XMLSCHEMA:
			case ELEMENT:
			case URL:
			case NAMESPACE:
			case LOCATION:
			case SYSXSR:
			case ALGORITHM:
			case FIXEDLENGTH:
			case HUFFMAN:
			case LOB:
			case LOG:
			case LOGGED:
			case MAXPARTITIONS:
			case MAXROWS:
			case MEMBER:
			case MOVE:
			case PAGE:
			case PAGENUM:
			case PENDING:
			case RELATIVE:
			case SEGSIZE:
			case TRACKMOD:
			case ADDRESS:
			case ATTRIBUTES:
			case AUTHENTICATION:
			case AUTHID:
			case CONTEXT:
			case JOBNAME:
			case OWNER:
			case PROFILE:
			case QUALIFIER:
			case SERVAUTH:
			case TRUSTED:
			case SECTION:
			case ACTIVE:
			case VERSION:
			case ALIAS:
			case WORK:
			case WORKFILE:
			case SYSDEFLT:
			case NULTERM:
			case STRUCTURE:
			case GENERIC:
			case TEMPORARY:
			case DEFER:
			case DEFINE:
			case EXCLUDE:
			case GENERATE:
			case KEYS:
			case XMLPATTERN:
			case SIZE:
			case EVERY:
			case ABSOLUTE:
			case ACCELERATOR:
			case EXCLUDING:
			case INCLUDING:
			case DEFAULTS:
			case MODIFIERS:
			case OPTION:
			case PRESERVE:
			case BOTH:
			case DESCRIBE:
			case LABELS:
			case NAMES:
			case OUTPUT:
			case EXCHANGE:
			case STABILIZED:
			case STMTCACHE:
			case STMTID:
			case STMTTOKEN:
			case STARTING:
			case CATALOG_NAME:
			case CONDITION_NUMBER:
			case CURSOR_NAME:
			case DB2_AUTHENTICATION_TYPE:
			case DB2_AUTHORIZATION_ID:
			case DB2_CONNECTION_STATE:
			case DB2_CONNECTION_STATUS:
			case DB2_ENCRYPTION_TYPE:
			case DB2_ERROR_CODE1:
			case DB2_ERROR_CODE2:
			case DB2_ERROR_CODE3:
			case DB2_ERROR_CODE4:
			case DB2_GET_DIAGNOSTICS_DIAGNOSTICS:
			case DB2_INTERNAL_ERROR_POINTER:
			case DB2_LAST_ROW:
			case DB2_LINE_NUMBER:
			case DB2_MESSAGE_ID:
			case DB2_MODULE_DETECTING_ERROR:
			case DB2_NUMBER_PARAMETER_MARKERS:
			case DB2_NUMBER_RESULT_SETS:
			case DB2_NUMBER_ROWS:
			case DB2_ORDINAL_TOKEN_:
			case DB2_PRODUCT_ID:
			case DB2_REASON_CODE:
			case DB2_RETURNED_SQLCODE:
			case DB2_RETURN_STATUS:
			case DB2_ROW_NUMBER:
			case DB2_SERVER_CLASS_NAME:
			case DB2_SQL_ATTR_CURSOR_HOLD:
			case DB2_SQL_ATTR_CURSOR_ROWSET:
			case DB2_SQL_ATTR_CURSOR_SCROLLABLE:
			case DB2_SQL_ATTR_CURSOR_SENSITIVITY:
			case DB2_SQL_ATTR_CURSOR_TYPE:
			case DB2_SQLERRD1:
			case DB2_SQLERRD2:
			case DB2_SQLERRD3:
			case DB2_SQLERRD4:
			case DB2_SQLERRD5:
			case DB2_SQLERRD6:
			case DB2_SQLERRD_SET:
			case DB2_SQL_NESTING_LEVEL:
			case DB2_TOKEN_COUNT:
			case DIAGNOSTICS:
			case MORE_:
			case NUMBER:
			case RETURNED_SQLSTATE:
			case ROW_COUNT:
			case SERVER_NAME:
			case STACKED:
			case CREATETAB:
			case CREATETS:
			case DBADM:
			case DBCTRL:
			case DBMAINT:
			case DISPLAYDB:
			case IMAGCOPY:
			case LOAD:
			case PACKADM:
			case RECOVERDB:
			case REORG:
			case REPAIR:
			case STARTDB:
			case STATS:
			case STOPDB:
			case BIND:
			case ALTERIN:
			case CREATEIN:
			case DROPIN:
			case USAGE:
			case ACCESSCTRL:
			case BINDADD:
			case BINDAGENT:
			case BSDS:
			case CREATEALIAS:
			case CREATEDBA:
			case CREATEDBC:
			case CREATE_SECURE_OBJECT:
			case CREATESG:
			case CREATETMTAB:
			case DATAACCESS:
			case DEBUGSESSION:
			case DISPLAY:
			case MONITOR1:
			case MONITOR2:
			case RECOVER:
			case SQLADM:
			case STOPALL:
			case STOSPACE:
			case SYSADM:
			case SYSCTRL:
			case SYSOPR:
			case TRACE:
			case UNLOAD:
			case WRITE:
			case ABS:
			case ABSVAL:
			case ACOS:
			case ADD_DAYS:
			case ADD_MONTHS:
			case ARRAY_DELETE:
			case ARRAY_FIRST:
			case ARRAY_LAST:
			case ARRAY_NEXT:
			case ARRAY_PRIOR:
			case ARRAY_TRIM:
			case ASCII:
			case ASCII_CHR:
			case ASCIISTR:
			case ASCII_STR:
			case ASIN:
			case ATAN:
			case ATAN2:
			case ATANH:
			case BIGINT:
			case BINARY:
			case BITAND:
			case BITANDNOT:
			case BITNOT:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BTRIM:
			case CARDINALITY:
			case CCSID_ENCODING:
			case CEIL:
			case CEILING:
			case CHAR9:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case CHR:
			case CLOB:
			case COALESCE:
			case COLLATION_KEY:
			case COMPARE_DECFLOAT:
			case COS:
			case COSH:
			case DATE:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFWEEK_ISO:
			case DAYOFYEAR:
			case DAYS_BETWEEN:
			case DBCLOB:
			case DEC:
			case DECFLOAT:
			case DECFLOAT_FORMAT:
			case DECFLOAT_SORTKEY:
			case DECIMAL:
			case DECODE:
			case DECRYPT_BINARY:
			case DECRYPT_BIT:
			case DECRYPT_CHAR:
			case DECRYPT_DATAKEY_BIGINT:
			case DECRYPT_DATAKEY_BIT:
			case DECRYPT_DATAKEY_CLOB:
			case DECRYPT_DATAKEY_DBCLOB:
			case DECRYPT_DATAKEY_DECIMAL:
			case DECRYPT_DATAKEY_INTEGER:
			case DECRYPT_DATAKEY_VARCHAR:
			case DECRYPT_DATAKEY_VARGRAPHIC:
			case DECRYPT_DB:
			case DEGREES:
			case DIFFERENCE:
			case DIGITS:
			case DOUBLE_PRECISION:
			case DSN_XMLVALIDATE:
			case EBCDIC_CHR:
			case EBCDIC_STR:
			case ENCRYPT_DATAKEY:
			case ENCRYPT_TDES:
			case EXP:
			case EXTRACT:
			case FLOAT:
			case FLOOR:
			case GENERATE_UNIQUE:
			case GENERATE_UNIQUE_BINARY:
			case GETHINT:
			case GETVARIABLE:
			case GRAPHIC:
			case GREATEST:
			case HASH:
			case HASH_CRC32:
			case HASH_MD5:
			case HASH_SHA1:
			case HASH_SHA256:
			case HEX:
			case IDENTITY_VAL_LOCAL:
			case IFNULL:
			case INSTR:
			case INT:
			case INTEGER:
			case JULIAN_DAY:
			case LAST_DAY:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LN:
			case LOCATE:
			case LOCATE_IN_STRING:
			case LOG10:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAX:
			case MAX_CARDINALITY:
			case MIDNIGHT_SECONDS:
			case MIN:
			case MINUTE:
			case MOD:
			case MONTHS_BETWEEN:
			case MQREAD:
			case MQREADCLOB:
			case MQRECEIVE:
			case MQRECEIVECLOB:
			case MQSEND:
			case MULTIPLY_ALT:
			case NEXT_DAY:
			case NEXT_MONTH:
			case NORMALIZE_DECFLOAT:
			case NORMALIZE_STRING:
			case NULLIF:
			case NVL:
			case OVERLAY:
			case PACK:
			case POSITION:
			case POSSTR:
			case POW:
			case POWER:
			case QUANTIZE:
			case QUARTER:
			case RADIANS:
			case RAISE_ERROR:
			case RAND:
			case RANDOM:
			case REAL:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REPLACE:
			case RID:
			case ROUND:
			case ROUND_TIMESTAMP:
			case ROWID:
			case RPAD:
			case RTRIM:
			case SCORE:
			case SIGN:
			case SIN:
			case SINH:
			case SMALLINT:
			case SOAPHTTPC:
			case SOAPHTTPNC:
			case SOAPHTTPNV:
			case SOAPHTTPV:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STRIP:
			case STRLEFT:
			case STRPOS:
			case STRRIGHT:
			case SUBSTR:
			case SUBSTRING:
			case TAN:
			case TANH:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIMESTAMP_FORMAT:
			case TIMESTAMP_ISO:
			case TIMESTAMP_TZ:
			case TO_CHAR:
			case TO_CLOB:
			case TO_DATE:
			case TO_NUMBER:
			case TOTALORDER:
			case TO_TIMESTAMP:
			case TRANSLATE:
			case TRIM:
			case TRIM_ARRAY:
			case TRUNC:
			case TRUNC_TIMESTAMP:
			case UCASE:
			case UNICODE:
			case UNICODE_STR:
			case UNISTR:
			case UPPER:
			case VARBINARY:
			case VARCHAR:
			case VARCHAR9:
			case VARCHAR_BIT_FORMAT:
			case VARCHAR_FORMAT:
			case VARGRAPHIC:
			case VERIFY_GROUP_FOR_USER:
			case VERIFY_ROLE_FOR_USER:
			case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
			case WEEK:
			case WEEK_ISO:
			case WRAP:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLCONCAT:
			case XMLDOCUMENT:
			case XMLELEMENT:
			case XMLFOREST:
			case XMLMODIFY:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLSERIALIZE:
			case XMLTEXT:
			case XMLXSROBJECTID:
			case XSLTRANSFORM:
			case CURRENT_ACCELERATOR:
			case CURRENT_APPLICATION_COMPATIBILITY:
			case CURRENT_APPLICATION_ENCODING_SCHEME:
			case CURRENT_CLIENT_ACCTNG:
			case CURRENT_CLIENT_APPLNAME:
			case CURRENT_CLIENT_CORR_TOKEN:
			case CURRENT_CLIENT_USERID:
			case CURRENT_CLIENT_WRKSTNNAME:
			case CURRENT_DATE:
			case CURRENT_DEBUG_MODE:
			case CURRENT_DECFLOAT_ROUNDING_MODE:
			case CURRENT_DEGREE:
			case CURRENT_EXPLAIN_MODE:
			case CURRENT_GET_ACCEL_ARCHIVE:
			case CURRENT_LOCALE_LC_CTYPE:
			case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
			case CURRENT_MEMBER:
			case CURRENT_OPTIMIZATION_HINT:
			case CURRENT_PACKAGE_PATH:
			case CURRENT_PACKAGESET:
			case CURRENT_PATH:
			case CURRENT_PRECISION:
			case CURRENT_QUERY_ACCELERATION:
			case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
			case CURRENT_REFRESH_AGE:
			case CURRENT_ROUTINE_VERSION:
			case CURRENT_RULES:
			case CURRENT_SCHEMA:
			case CURRENT_SERVER:
			case CURRENT_SQLID:
			case CURRENT_TEMPORAL_BUSINESS_TIME:
			case CURRENT_TEMPORAL_SYSTEM_TIME:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_TIME_ZONE:
			case ENCRYPTION_PASSWORD:
			case SESSION_TIME_ZONE:
			case SESSION_USER:
			case USER:
			case ADMIN_TASK_LIST:
			case ADMIN_TASK_OUTPUT:
			case ADMIN_TASK_STATUS:
			case BLOCKING_THREADS:
			case MQREADALL:
			case MQREADALLCLOB:
			case MQRECEIVEALL:
			case MQRECEIVEALLCLOB:
			case XMLTABLE:
			case SQLIDENTIFIER:
				{
				setState(1616);
				procedureName();
				}
				break;
			case COLON:
				{
				setState(1617);
				hostVariable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BeginDeclareSectionStatementContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(DB2zSQLParser.BEGIN, 0); }
		public TerminalNode DECLARE() { return getToken(DB2zSQLParser.DECLARE, 0); }
		public TerminalNode SECTION() { return getToken(DB2zSQLParser.SECTION, 0); }
		public BeginDeclareSectionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_beginDeclareSectionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterBeginDeclareSectionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitBeginDeclareSectionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitBeginDeclareSectionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BeginDeclareSectionStatementContext beginDeclareSectionStatement() throws RecognitionException {
		BeginDeclareSectionStatementContext _localctx = new BeginDeclareSectionStatementContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_beginDeclareSectionStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1620);
			match(BEGIN);
			setState(1621);
			match(DECLARE);
			setState(1622);
			match(SECTION);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CallStatementContext extends ParserRuleContext {
		public TerminalNode CALL() { return getToken(DB2zSQLParser.CALL, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public ProcedureNameContext procedureName() {
			return getRuleContext(ProcedureNameContext.class,0);
		}
		public List<HostVariableContext> hostVariable() {
			return getRuleContexts(HostVariableContext.class);
		}
		public HostVariableContext hostVariable(int i) {
			return getRuleContext(HostVariableContext.class,i);
		}
		public TerminalNode USING() { return getToken(DB2zSQLParser.USING, 0); }
		public TerminalNode DESCRIPTOR() { return getToken(DB2zSQLParser.DESCRIPTOR, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> NULL() { return getTokens(DB2zSQLParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(DB2zSQLParser.NULL, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public List<TerminalNode> TABLE() { return getTokens(DB2zSQLParser.TABLE); }
		public TerminalNode TABLE(int i) {
			return getToken(DB2zSQLParser.TABLE, i);
		}
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public CallStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_callStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCallStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCallStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCallStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CallStatementContext callStatement() throws RecognitionException {
		CallStatementContext _localctx = new CallStatementContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_callStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1624);
			match(CALL);
			setState(1627);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTEGERLITERAL:
			case NUMERICLITERAL:
			case INSTEAD:
			case NEW:
			case NEW_TABLE:
			case OLD_TABLE:
			case REFERENCING:
			case BASED:
			case UPON:
			case ADD:
			case AFTER:
			case ALL:
			case ALLOCATE:
			case ALLOW:
			case ALTER:
			case ALTERAND:
			case ANY:
			case ARRAY:
			case ARRAY_EXISTS:
			case AS:
			case ASENSITIVE:
			case ASSOCIATE:
			case ASUTIME:
			case AT:
			case AUDIT:
			case AUX:
			case AUXILIARY:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BUFFERPOOL:
			case BUFFERPOOLS:
			case BY:
			case CALL:
			case CAPTURE:
			case CASCADED:
			case CASE:
			case CAST:
			case CCSID:
			case CHAR:
			case CHARACTER:
			case CHECK:
			case CLONE:
			case CLOSE:
			case CLUSTER:
			case COLLECTION:
			case COLLID:
			case COLUMN:
			case COMMENT:
			case COMMIT:
			case CONCAT:
			case CONDITION:
			case CONNECT:
			case CONNECTION:
			case CONSTRAINT:
			case CONTAINS:
			case CONTENT:
			case CONTINUE:
			case CREATE:
			case CUBE:
			case CURRENT:
			case CURRENT_LC_CTYPE:
			case CURRVAL:
			case CURSOR:
			case DATA:
			case DATABASE:
			case DAY:
			case DAYS:
			case DBINFO:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DISABLE:
			case DISALLOW:
			case DISTINCT:
			case DO:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSSIZE:
			case DYNAMIC:
			case EDITPROC:
			case ELSE:
			case ELSEIF:
			case ENCODING:
			case ENCRYPTION:
			case END:
			case END_EXEC:
			case ENDING:
			case ERASE:
			case ESCAPE:
			case EXCEPT:
			case EXCEPTION:
			case EXEC_SQL:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case FENCED:
			case FETCH:
			case FIELDPROC:
			case FINAL:
			case FIRST:
			case FOR:
			case FREE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANT:
			case GROUP:
			case HANDLER:
			case HAVING:
			case HOLD:
			case HOUR:
			case HOURS:
			case IF:
			case IMMEDIATE:
			case IN:
			case INCLUSIVE:
			case INDEX:
			case INDEXBP:
			case INHERIT:
			case INNER:
			case INOUT:
			case INSENSITIVE:
			case INSERT:
			case INTERSECT:
			case INTO:
			case IS:
			case ISOBID:
			case ITERATE:
			case JAR:
			case JOIN:
			case KEEP:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LAST:
			case LC_CTYPE:
			case LEAVE:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOCALE:
			case LOCATOR:
			case LOCATORS:
			case LOCK:
			case LOCKMAX:
			case LOCKSIZE:
			case LONG:
			case LOOP:
			case MAINTAINED:
			case MATERIALIZED:
			case MICROSECOND:
			case MICROSECONDS:
			case MODIFIES:
			case MONTH:
			case MONTHS:
			case NEXT:
			case NEXTVAL:
			case NO:
			case NONE:
			case NOT:
			case NULL:
			case NULLS:
			case NUMPARTS:
			case OBID:
			case OF:
			case OFFSET:
			case OLD:
			case ON:
			case OPEN:
			case OPTIMIZATION:
			case OPTIMIZE:
			case OR:
			case ORDER:
			case ORGANIZATION:
			case OUT:
			case OUTER:
			case PACKAGE:
			case PADDED:
			case PARAMETER:
			case PART:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONING:
			case PATH:
			case PERIOD:
			case PIECESIZE:
			case PLAN:
			case PRECISION:
			case PREPARE:
			case PREVVAL:
			case PRIOR:
			case PRIQTY:
			case PRIVILEGES:
			case PROCEDURE:
			case PROGRAM:
			case PSID:
			case PUBLIC:
			case QUERY:
			case QUERYNO:
			case READS:
			case REFERENCES:
			case REFRESH:
			case RELEASE:
			case RENAME:
			case REPEAT:
			case RESIGNAL:
			case RESTRICT:
			case RESULT:
			case RESULT_SET_LOCATOR:
			case RETURN:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUND_CEILING:
			case ROUND_DOWN:
			case ROUND_FLOOR:
			case ROUND_HALF_DOWN:
			case ROUND_HALF_EVEN:
			case ROUND_HALF_UP:
			case ROUND_UP:
			case ROW:
			case ROWSET:
			case RUN:
			case SAVEPOINT:
			case SCHEMA:
			case SCRATCHPAD:
			case SECOND:
			case SECONDS:
			case SECQTY:
			case SECURITY:
			case SELECT:
			case SENSITIVE:
			case SEQUENCE:
			case SET:
			case SIGNAL:
			case SIMPLE:
			case SOME:
			case SOURCE:
			case SPECIFIC:
			case STANDARD:
			case STATEMENT:
			case STATIC:
			case STAY:
			case STOGROUP:
			case STORES:
			case STYLE:
			case SUMMARY:
			case SYNONYM:
			case SYSDATE:
			case SYSTEM:
			case SYSTIMESTAMP:
			case TABLE:
			case TABLESPACE:
			case THEN:
			case TO:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNDO:
			case UNION:
			case UNIQUE:
			case UNTIL:
			case UPDATE:
			case USING:
			case VALIDPROC:
			case VALUE:
			case VALUES:
			case VARIABLE:
			case VARIANT:
			case VCAT:
			case VERSIONING:
			case VIEW:
			case VOLATILE:
			case VOLUMES:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WLM:
			case XMLCAST:
			case XMLEXISTS:
			case XMLNAMESPACES:
			case YEAR:
			case YEARS:
			case ZONE:
			case AND:
			case ARRAY_AGG:
			case ASC:
			case AVG:
			case BIT:
			case CHANGE:
			case CODEUNITS16:
			case CODEUNITS32:
			case CORR:
			case CORRELATION:
			case COUNT:
			case COUNT_BIG:
			case COVAR:
			case COVARIANCE:
			case COVARIANCE_SAMP:
			case COVAR_POP:
			case COVAR_SAMP:
			case CS:
			case CUME_DIST:
			case DENSE_RANK:
			case DESC:
			case EBCDIC:
			case EXCLUSIVE:
			case FIRST_VALUE:
			case FOLLOWING:
			case GROUPING:
			case IGNORE:
			case INDICATOR:
			case INPUT:
			case ISNULL:
			case LAG:
			case LARGE:
			case LAST_VALUE:
			case LEAD:
			case LISTAGG:
			case LOCKED:
			case LOCKS:
			case MEDIAN:
			case MINUTES:
			case MIXED:
			case NOTNULL:
			case NTH_VALUE:
			case NTILE:
			case NUMERIC:
			case OBJECT:
			case OCTETS:
			case ONLY:
			case OVER:
			case PASSING:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PERCENT_RANK:
			case PRECEDING:
			case PREVIOUS:
			case RANGE:
			case RANK:
			case RATIO_TO_REPORT:
			case READ:
			case REF:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_ICPT:
			case REGR_INTERCEPT:
			case REGR_R2:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case RESPECT:
			case ROW_NUMBER:
			case ROWS:
			case RR:
			case RS:
			case SBCS:
			case SELECTIVITY:
			case SETS:
			case SHARE:
			case SKIP_:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case TOKEN:
			case UNBOUNDED:
			case UNPACK:
			case UR:
			case USE:
			case VAR:
			case VARIANCE:
			case VARIANCE_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARYING:
			case WITHOUT:
			case XML:
			case XMLAGG:
			case COLUMNS:
			case SQLID:
			case ORDINALITY:
			case SYSTEM_TIME:
			case BUSINESS_TIME:
			case MULTIPLIER:
			case UNNEST:
			case CROSS:
			case CALLER:
			case CLIENT:
			case POSITIONING:
			case SCROLL:
			case ACTION:
			case ASSEMBLE:
			case C_:
			case CALLED:
			case COBOL:
			case DB2:
			case DEFINER:
			case DISPATCH:
			case ENVIRONMENT:
			case FAILURE:
			case FAILURES:
			case JAVA:
			case MAIN:
			case NAME:
			case OPTIONS:
			case PARALLEL:
			case PLI:
			case REGISTERS:
			case RESIDENT:
			case SECURED:
			case SPECIAL:
			case SQL:
			case STOP:
			case SUB:
			case YES:
			case APPLICATION:
			case CHANGED:
			case COMPATIBILITY:
			case COMPRESS:
			case COPY:
			case FREEPAGE:
			case GBPCACHE:
			case INCLUDE:
			case MAXVALUE:
			case MINVALUE:
			case PCTFREE:
			case REGENERATE:
			case MASK:
			case ENABLE:
			case PERMISSION:
			case ATOMIC:
			case SQLEXCEPTION:
			case MERGE:
			case MATCHED:
			case SQLSTATE:
			case MESSAGE_TEXT:
			case OVERRIDING:
			case PORTION:
			case DB2SQL:
			case DEBUG:
			case GENERAL:
			case MODE_:
			case REXX:
			case CACHE:
			case CYCLE:
			case INCREMENT:
			case RESTART:
			case DATACLAS:
			case MGMTCLAS:
			case REMOVE:
			case STORCLAS:
			case ACCESS:
			case ACTIVATE:
			case ALWAYS:
			case APPEND:
			case ARCHIVE:
			case BUSINESS:
			case CASCADE:
			case CHANGES:
			case CONTROL:
			case DEACTIVATE:
			case DEFERRED:
			case EACH:
			case ENFORCED:
			case EXTRA:
			case FOREIGN:
			case HIDDEN_:
			case HISTORY:
			case ID:
			case IDENTITY:
			case IMPLICITLY:
			case INITIALLY:
			case INLINE:
			case OPERATION:
			case ORGANIZE:
			case OVERLAPS:
			case PACKAGE_NAME:
			case PACKAGE_SCHEMA:
			case PACKAGE_VERSION:
			case PRIMARY:
			case RESET:
			case ROTATE:
			case START:
			case SYSIBM:
			case TRANSACTION:
			case XMLSCHEMA:
			case ELEMENT:
			case URL:
			case NAMESPACE:
			case LOCATION:
			case SYSXSR:
			case ALGORITHM:
			case FIXEDLENGTH:
			case HUFFMAN:
			case LOB:
			case LOG:
			case LOGGED:
			case MAXPARTITIONS:
			case MAXROWS:
			case MEMBER:
			case MOVE:
			case PAGE:
			case PAGENUM:
			case PENDING:
			case RELATIVE:
			case SEGSIZE:
			case TRACKMOD:
			case ADDRESS:
			case ATTRIBUTES:
			case AUTHENTICATION:
			case AUTHID:
			case CONTEXT:
			case JOBNAME:
			case OWNER:
			case PROFILE:
			case QUALIFIER:
			case SERVAUTH:
			case TRUSTED:
			case SECTION:
			case ACTIVE:
			case VERSION:
			case ALIAS:
			case WORK:
			case WORKFILE:
			case SYSDEFLT:
			case NULTERM:
			case STRUCTURE:
			case GENERIC:
			case TEMPORARY:
			case DEFER:
			case DEFINE:
			case EXCLUDE:
			case GENERATE:
			case KEYS:
			case XMLPATTERN:
			case SIZE:
			case EVERY:
			case ABSOLUTE:
			case ACCELERATOR:
			case EXCLUDING:
			case INCLUDING:
			case DEFAULTS:
			case MODIFIERS:
			case OPTION:
			case PRESERVE:
			case BOTH:
			case DESCRIBE:
			case LABELS:
			case NAMES:
			case OUTPUT:
			case EXCHANGE:
			case STABILIZED:
			case STMTCACHE:
			case STMTID:
			case STMTTOKEN:
			case STARTING:
			case CATALOG_NAME:
			case CONDITION_NUMBER:
			case CURSOR_NAME:
			case DB2_AUTHENTICATION_TYPE:
			case DB2_AUTHORIZATION_ID:
			case DB2_CONNECTION_STATE:
			case DB2_CONNECTION_STATUS:
			case DB2_ENCRYPTION_TYPE:
			case DB2_ERROR_CODE1:
			case DB2_ERROR_CODE2:
			case DB2_ERROR_CODE3:
			case DB2_ERROR_CODE4:
			case DB2_GET_DIAGNOSTICS_DIAGNOSTICS:
			case DB2_INTERNAL_ERROR_POINTER:
			case DB2_LAST_ROW:
			case DB2_LINE_NUMBER:
			case DB2_MESSAGE_ID:
			case DB2_MODULE_DETECTING_ERROR:
			case DB2_NUMBER_PARAMETER_MARKERS:
			case DB2_NUMBER_RESULT_SETS:
			case DB2_NUMBER_ROWS:
			case DB2_ORDINAL_TOKEN_:
			case DB2_PRODUCT_ID:
			case DB2_REASON_CODE:
			case DB2_RETURNED_SQLCODE:
			case DB2_RETURN_STATUS:
			case DB2_ROW_NUMBER:
			case DB2_SERVER_CLASS_NAME:
			case DB2_SQL_ATTR_CURSOR_HOLD:
			case DB2_SQL_ATTR_CURSOR_ROWSET:
			case DB2_SQL_ATTR_CURSOR_SCROLLABLE:
			case DB2_SQL_ATTR_CURSOR_SENSITIVITY:
			case DB2_SQL_ATTR_CURSOR_TYPE:
			case DB2_SQLERRD1:
			case DB2_SQLERRD2:
			case DB2_SQLERRD3:
			case DB2_SQLERRD4:
			case DB2_SQLERRD5:
			case DB2_SQLERRD6:
			case DB2_SQLERRD_SET:
			case DB2_SQL_NESTING_LEVEL:
			case DB2_TOKEN_COUNT:
			case DIAGNOSTICS:
			case MORE_:
			case NUMBER:
			case RETURNED_SQLSTATE:
			case ROW_COUNT:
			case SERVER_NAME:
			case STACKED:
			case CREATETAB:
			case CREATETS:
			case DBADM:
			case DBCTRL:
			case DBMAINT:
			case DISPLAYDB:
			case IMAGCOPY:
			case LOAD:
			case PACKADM:
			case RECOVERDB:
			case REORG:
			case REPAIR:
			case STARTDB:
			case STATS:
			case STOPDB:
			case BIND:
			case ALTERIN:
			case CREATEIN:
			case DROPIN:
			case USAGE:
			case ACCESSCTRL:
			case BINDADD:
			case BINDAGENT:
			case BSDS:
			case CREATEALIAS:
			case CREATEDBA:
			case CREATEDBC:
			case CREATE_SECURE_OBJECT:
			case CREATESG:
			case CREATETMTAB:
			case DATAACCESS:
			case DEBUGSESSION:
			case DISPLAY:
			case MONITOR1:
			case MONITOR2:
			case RECOVER:
			case SQLADM:
			case STOPALL:
			case STOSPACE:
			case SYSADM:
			case SYSCTRL:
			case SYSOPR:
			case TRACE:
			case UNLOAD:
			case WRITE:
			case ABS:
			case ABSVAL:
			case ACOS:
			case ADD_DAYS:
			case ADD_MONTHS:
			case ARRAY_DELETE:
			case ARRAY_FIRST:
			case ARRAY_LAST:
			case ARRAY_NEXT:
			case ARRAY_PRIOR:
			case ARRAY_TRIM:
			case ASCII:
			case ASCII_CHR:
			case ASCIISTR:
			case ASCII_STR:
			case ASIN:
			case ATAN:
			case ATAN2:
			case ATANH:
			case BIGINT:
			case BINARY:
			case BITAND:
			case BITANDNOT:
			case BITNOT:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BTRIM:
			case CARDINALITY:
			case CCSID_ENCODING:
			case CEIL:
			case CEILING:
			case CHAR9:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case CHR:
			case CLOB:
			case COALESCE:
			case COLLATION_KEY:
			case COMPARE_DECFLOAT:
			case COS:
			case COSH:
			case DATE:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFWEEK_ISO:
			case DAYOFYEAR:
			case DAYS_BETWEEN:
			case DBCLOB:
			case DEC:
			case DECFLOAT:
			case DECFLOAT_FORMAT:
			case DECFLOAT_SORTKEY:
			case DECIMAL:
			case DECODE:
			case DECRYPT_BINARY:
			case DECRYPT_BIT:
			case DECRYPT_CHAR:
			case DECRYPT_DATAKEY_BIGINT:
			case DECRYPT_DATAKEY_BIT:
			case DECRYPT_DATAKEY_CLOB:
			case DECRYPT_DATAKEY_DBCLOB:
			case DECRYPT_DATAKEY_DECIMAL:
			case DECRYPT_DATAKEY_INTEGER:
			case DECRYPT_DATAKEY_VARCHAR:
			case DECRYPT_DATAKEY_VARGRAPHIC:
			case DECRYPT_DB:
			case DEGREES:
			case DIFFERENCE:
			case DIGITS:
			case DOUBLE_PRECISION:
			case DSN_XMLVALIDATE:
			case EBCDIC_CHR:
			case EBCDIC_STR:
			case ENCRYPT_DATAKEY:
			case ENCRYPT_TDES:
			case EXP:
			case EXTRACT:
			case FLOAT:
			case FLOOR:
			case GENERATE_UNIQUE:
			case GENERATE_UNIQUE_BINARY:
			case GETHINT:
			case GETVARIABLE:
			case GRAPHIC:
			case GREATEST:
			case HASH:
			case HASH_CRC32:
			case HASH_MD5:
			case HASH_SHA1:
			case HASH_SHA256:
			case HEX:
			case IDENTITY_VAL_LOCAL:
			case IFNULL:
			case INSTR:
			case INT:
			case INTEGER:
			case JULIAN_DAY:
			case LAST_DAY:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LN:
			case LOCATE:
			case LOCATE_IN_STRING:
			case LOG10:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAX:
			case MAX_CARDINALITY:
			case MIDNIGHT_SECONDS:
			case MIN:
			case MINUTE:
			case MOD:
			case MONTHS_BETWEEN:
			case MQREAD:
			case MQREADCLOB:
			case MQRECEIVE:
			case MQRECEIVECLOB:
			case MQSEND:
			case MULTIPLY_ALT:
			case NEXT_DAY:
			case NEXT_MONTH:
			case NORMALIZE_DECFLOAT:
			case NORMALIZE_STRING:
			case NULLIF:
			case NVL:
			case OVERLAY:
			case PACK:
			case POSITION:
			case POSSTR:
			case POW:
			case POWER:
			case QUANTIZE:
			case QUARTER:
			case RADIANS:
			case RAISE_ERROR:
			case RAND:
			case RANDOM:
			case REAL:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REPLACE:
			case RID:
			case ROUND:
			case ROUND_TIMESTAMP:
			case ROWID:
			case RPAD:
			case RTRIM:
			case SCORE:
			case SIGN:
			case SIN:
			case SINH:
			case SMALLINT:
			case SOAPHTTPC:
			case SOAPHTTPNC:
			case SOAPHTTPNV:
			case SOAPHTTPV:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STRIP:
			case STRLEFT:
			case STRPOS:
			case STRRIGHT:
			case SUBSTR:
			case SUBSTRING:
			case TAN:
			case TANH:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIMESTAMP_FORMAT:
			case TIMESTAMP_ISO:
			case TIMESTAMP_TZ:
			case TO_CHAR:
			case TO_CLOB:
			case TO_DATE:
			case TO_NUMBER:
			case TOTALORDER:
			case TO_TIMESTAMP:
			case TRANSLATE:
			case TRIM:
			case TRIM_ARRAY:
			case TRUNC:
			case TRUNC_TIMESTAMP:
			case UCASE:
			case UNICODE:
			case UNICODE_STR:
			case UNISTR:
			case UPPER:
			case VARBINARY:
			case VARCHAR:
			case VARCHAR9:
			case VARCHAR_BIT_FORMAT:
			case VARCHAR_FORMAT:
			case VARGRAPHIC:
			case VERIFY_GROUP_FOR_USER:
			case VERIFY_ROLE_FOR_USER:
			case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
			case WEEK:
			case WEEK_ISO:
			case WRAP:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLCONCAT:
			case XMLDOCUMENT:
			case XMLELEMENT:
			case XMLFOREST:
			case XMLMODIFY:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLSERIALIZE:
			case XMLTEXT:
			case XMLXSROBJECTID:
			case XSLTRANSFORM:
			case CURRENT_ACCELERATOR:
			case CURRENT_APPLICATION_COMPATIBILITY:
			case CURRENT_APPLICATION_ENCODING_SCHEME:
			case CURRENT_CLIENT_ACCTNG:
			case CURRENT_CLIENT_APPLNAME:
			case CURRENT_CLIENT_CORR_TOKEN:
			case CURRENT_CLIENT_USERID:
			case CURRENT_CLIENT_WRKSTNNAME:
			case CURRENT_DATE:
			case CURRENT_DEBUG_MODE:
			case CURRENT_DECFLOAT_ROUNDING_MODE:
			case CURRENT_DEGREE:
			case CURRENT_EXPLAIN_MODE:
			case CURRENT_GET_ACCEL_ARCHIVE:
			case CURRENT_LOCALE_LC_CTYPE:
			case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
			case CURRENT_MEMBER:
			case CURRENT_OPTIMIZATION_HINT:
			case CURRENT_PACKAGE_PATH:
			case CURRENT_PACKAGESET:
			case CURRENT_PATH:
			case CURRENT_PRECISION:
			case CURRENT_QUERY_ACCELERATION:
			case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
			case CURRENT_REFRESH_AGE:
			case CURRENT_ROUTINE_VERSION:
			case CURRENT_RULES:
			case CURRENT_SCHEMA:
			case CURRENT_SERVER:
			case CURRENT_SQLID:
			case CURRENT_TEMPORAL_BUSINESS_TIME:
			case CURRENT_TEMPORAL_SYSTEM_TIME:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_TIME_ZONE:
			case ENCRYPTION_PASSWORD:
			case SESSION_TIME_ZONE:
			case SESSION_USER:
			case USER:
			case ADMIN_TASK_LIST:
			case ADMIN_TASK_OUTPUT:
			case ADMIN_TASK_STATUS:
			case BLOCKING_THREADS:
			case MQREADALL:
			case MQREADALLCLOB:
			case MQRECEIVEALL:
			case MQRECEIVEALLCLOB:
			case XMLTABLE:
			case SQLIDENTIFIER:
				{
				setState(1625);
				procedureName();
				}
				break;
			case COLON:
				{
				setState(1626);
				hostVariable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1629);
			match(LPAREN);
			setState(1651);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,43,_ctx) ) {
			case 1:
				{
				{
				setState(1634);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,40,_ctx) ) {
				case 1:
					{
					setState(1630);
					expression();
					}
					break;
				case 2:
					{
					setState(1631);
					match(NULL);
					}
					break;
				case 3:
					{
					{
					setState(1632);
					match(TABLE);
					setState(1633);
					tableName();
					}
					}
					break;
				}
				setState(1645);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1636);
					match(COMMA);
					setState(1641);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,41,_ctx) ) {
					case 1:
						{
						setState(1637);
						expression();
						}
						break;
					case 2:
						{
						setState(1638);
						match(NULL);
						}
						break;
					case 3:
						{
						{
						setState(1639);
						match(TABLE);
						setState(1640);
						tableName();
						}
						}
						break;
					}
					}
					}
					setState(1647);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case 2:
				{
				{
				setState(1648);
				match(USING);
				setState(1649);
				match(DESCRIPTOR);
				setState(1650);
				hostVariable();
				}
				}
				break;
			}
			setState(1653);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CloseStatementContext extends ParserRuleContext {
		public TerminalNode CLOSE() { return getToken(DB2zSQLParser.CLOSE, 0); }
		public CursorNameContext cursorName() {
			return getRuleContext(CursorNameContext.class,0);
		}
		public CloseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_closeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCloseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCloseStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCloseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CloseStatementContext closeStatement() throws RecognitionException {
		CloseStatementContext _localctx = new CloseStatementContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_closeStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1655);
			match(CLOSE);
			setState(1656);
			cursorName();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommentStatementContext extends ParserRuleContext {
		public TerminalNode COMMENT() { return getToken(DB2zSQLParser.COMMENT, 0); }
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public MultipleColumnListContext multipleColumnList() {
			return getRuleContext(MultipleColumnListContext.class,0);
		}
		public TerminalNode IS() { return getToken(DB2zSQLParser.IS, 0); }
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public AliasDesignatorContext aliasDesignator() {
			return getRuleContext(AliasDesignatorContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(DB2zSQLParser.COLUMN, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public FunctionDesignatorContext functionDesignator() {
			return getRuleContext(FunctionDesignatorContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(DB2zSQLParser.INDEX, 0); }
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public TerminalNode PACKAGE() { return getToken(DB2zSQLParser.PACKAGE, 0); }
		public PackageDesignatorContext packageDesignator() {
			return getRuleContext(PackageDesignatorContext.class,0);
		}
		public TerminalNode PLAN() { return getToken(DB2zSQLParser.PLAN, 0); }
		public PlanNameContext planName() {
			return getRuleContext(PlanNameContext.class,0);
		}
		public TerminalNode PROCEDURE() { return getToken(DB2zSQLParser.PROCEDURE, 0); }
		public ProcedureNameContext procedureName() {
			return getRuleContext(ProcedureNameContext.class,0);
		}
		public TerminalNode ROLE() { return getToken(DB2zSQLParser.ROLE, 0); }
		public RoleNameContext roleName() {
			return getRuleContext(RoleNameContext.class,0);
		}
		public TerminalNode SEQUENCE() { return getToken(DB2zSQLParser.SEQUENCE, 0); }
		public SequenceNameContext sequenceName() {
			return getRuleContext(SequenceNameContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public TerminalNode TRIGGER() { return getToken(DB2zSQLParser.TRIGGER, 0); }
		public TriggerNameContext triggerName() {
			return getRuleContext(TriggerNameContext.class,0);
		}
		public TerminalNode TRUSTED() { return getToken(DB2zSQLParser.TRUSTED, 0); }
		public TerminalNode CONTEXT() { return getToken(DB2zSQLParser.CONTEXT, 0); }
		public ContextNameContext contextName() {
			return getRuleContext(ContextNameContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(DB2zSQLParser.TYPE, 0); }
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public TerminalNode MASK() { return getToken(DB2zSQLParser.MASK, 0); }
		public MaskNameContext maskName() {
			return getRuleContext(MaskNameContext.class,0);
		}
		public TerminalNode PERMISSION() { return getToken(DB2zSQLParser.PERMISSION, 0); }
		public PermissionNameContext permissionName() {
			return getRuleContext(PermissionNameContext.class,0);
		}
		public TerminalNode VARIABLE() { return getToken(DB2zSQLParser.VARIABLE, 0); }
		public VariableNameContext variableName() {
			return getRuleContext(VariableNameContext.class,0);
		}
		public TerminalNode ACTIVE() { return getToken(DB2zSQLParser.ACTIVE, 0); }
		public TerminalNode VERSION() { return getToken(DB2zSQLParser.VERSION, 0); }
		public RoutineVersionIDContext routineVersionID() {
			return getRuleContext(RoutineVersionIDContext.class,0);
		}
		public CommentStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commentStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCommentStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCommentStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCommentStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommentStatementContext commentStatement() throws RecognitionException {
		CommentStatementContext _localctx = new CommentStatementContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_commentStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1658);
			match(COMMENT);
			setState(1659);
			match(ON);
			setState(1718);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,48,_ctx) ) {
			case 1:
				{
				{
				setState(1712);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PUBLIC:
				case ALIAS:
					{
					setState(1660);
					aliasDesignator();
					}
					break;
				case COLUMN:
					{
					{
					setState(1661);
					match(COLUMN);
					setState(1662);
					tableName();
					setState(1663);
					match(DOT);
					setState(1664);
					columnName();
					}
					}
					break;
				case FUNCTION:
				case SPECIFIC:
					{
					{
					setState(1666);
					functionDesignator();
					setState(1671);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ACTIVE:
						{
						{
						setState(1667);
						match(ACTIVE);
						setState(1668);
						match(VERSION);
						}
						}
						break;
					case VERSION:
						{
						{
						setState(1669);
						match(VERSION);
						setState(1670);
						routineVersionID();
						}
						}
						break;
					case IS:
						break;
					default:
						break;
					}
					}
					}
					break;
				case INDEX:
					{
					{
					setState(1673);
					match(INDEX);
					setState(1674);
					indexName();
					}
					}
					break;
				case PACKAGE:
					{
					{
					setState(1675);
					match(PACKAGE);
					setState(1676);
					packageDesignator();
					}
					}
					break;
				case PLAN:
					{
					{
					setState(1677);
					match(PLAN);
					setState(1678);
					planName();
					}
					}
					break;
				case PROCEDURE:
					{
					{
					setState(1679);
					match(PROCEDURE);
					setState(1680);
					procedureName();
					setState(1685);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ACTIVE:
						{
						{
						setState(1681);
						match(ACTIVE);
						setState(1682);
						match(VERSION);
						}
						}
						break;
					case VERSION:
						{
						{
						setState(1683);
						match(VERSION);
						setState(1684);
						routineVersionID();
						}
						}
						break;
					case IS:
						break;
					default:
						break;
					}
					}
					}
					break;
				case ROLE:
					{
					{
					setState(1687);
					match(ROLE);
					setState(1688);
					roleName();
					}
					}
					break;
				case SEQUENCE:
					{
					{
					setState(1689);
					match(SEQUENCE);
					setState(1690);
					sequenceName();
					}
					}
					break;
				case TABLE:
					{
					{
					setState(1691);
					match(TABLE);
					setState(1692);
					tableName();
					}
					}
					break;
				case TRIGGER:
					{
					{
					setState(1693);
					match(TRIGGER);
					setState(1694);
					triggerName();
					setState(1699);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ACTIVE:
						{
						{
						setState(1695);
						match(ACTIVE);
						setState(1696);
						match(VERSION);
						}
						}
						break;
					case VERSION:
						{
						{
						setState(1697);
						match(VERSION);
						setState(1698);
						routineVersionID();
						}
						}
						break;
					case IS:
						break;
					default:
						break;
					}
					}
					}
					break;
				case TRUSTED:
					{
					{
					setState(1701);
					match(TRUSTED);
					setState(1702);
					match(CONTEXT);
					setState(1703);
					contextName();
					}
					}
					break;
				case TYPE:
					{
					{
					setState(1704);
					match(TYPE);
					setState(1705);
					typeName();
					}
					}
					break;
				case MASK:
					{
					{
					setState(1706);
					match(MASK);
					setState(1707);
					maskName();
					}
					}
					break;
				case PERMISSION:
					{
					{
					setState(1708);
					match(PERMISSION);
					setState(1709);
					permissionName();
					}
					}
					break;
				case VARIABLE:
					{
					{
					setState(1710);
					match(VARIABLE);
					setState(1711);
					variableName();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1714);
				match(IS);
				setState(1715);
				match(NONNUMERICLITERAL);
				}
				}
				break;
			case 2:
				{
				setState(1717);
				multipleColumnList();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommitStatementContext extends ParserRuleContext {
		public TerminalNode COMMIT() { return getToken(DB2zSQLParser.COMMIT, 0); }
		public TerminalNode WORK() { return getToken(DB2zSQLParser.WORK, 0); }
		public CommitStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commitStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCommitStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCommitStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCommitStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommitStatementContext commitStatement() throws RecognitionException {
		CommitStatementContext _localctx = new CommitStatementContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_commitStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1720);
			match(COMMIT);
			setState(1722);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(1721);
				match(WORK);
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConnectStatementContext extends ParserRuleContext {
		public TerminalNode CONNECT() { return getToken(DB2zSQLParser.CONNECT, 0); }
		public TerminalNode RESET() { return getToken(DB2zSQLParser.RESET, 0); }
		public AuthorizationContext authorization() {
			return getRuleContext(AuthorizationContext.class,0);
		}
		public TerminalNode TO() { return getToken(DB2zSQLParser.TO, 0); }
		public LocationNameContext locationName() {
			return getRuleContext(LocationNameContext.class,0);
		}
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public ConnectStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_connectStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterConnectStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitConnectStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitConnectStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConnectStatementContext connectStatement() throws RecognitionException {
		ConnectStatementContext _localctx = new ConnectStatementContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_connectStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1724);
			match(CONNECT);
			setState(1735);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TO:
				{
				{
				setState(1725);
				match(TO);
				setState(1728);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case INTEGERLITERAL:
				case NUMERICLITERAL:
				case INSTEAD:
				case NEW:
				case NEW_TABLE:
				case OLD_TABLE:
				case REFERENCING:
				case BASED:
				case UPON:
				case ADD:
				case AFTER:
				case ALL:
				case ALLOCATE:
				case ALLOW:
				case ALTER:
				case ALTERAND:
				case ANY:
				case ARRAY:
				case ARRAY_EXISTS:
				case AS:
				case ASENSITIVE:
				case ASSOCIATE:
				case ASUTIME:
				case AT:
				case AUDIT:
				case AUX:
				case AUXILIARY:
				case BEFORE:
				case BEGIN:
				case BETWEEN:
				case BUFFERPOOL:
				case BUFFERPOOLS:
				case BY:
				case CALL:
				case CAPTURE:
				case CASCADED:
				case CASE:
				case CAST:
				case CCSID:
				case CHAR:
				case CHARACTER:
				case CHECK:
				case CLONE:
				case CLOSE:
				case CLUSTER:
				case COLLECTION:
				case COLLID:
				case COLUMN:
				case COMMENT:
				case COMMIT:
				case CONCAT:
				case CONDITION:
				case CONNECT:
				case CONNECTION:
				case CONSTRAINT:
				case CONTAINS:
				case CONTENT:
				case CONTINUE:
				case CREATE:
				case CUBE:
				case CURRENT:
				case CURRENT_LC_CTYPE:
				case CURRVAL:
				case CURSOR:
				case DATA:
				case DATABASE:
				case DAY:
				case DAYS:
				case DBINFO:
				case DECLARE:
				case DEFAULT:
				case DELETE:
				case DESCRIPTOR:
				case DETERMINISTIC:
				case DISABLE:
				case DISALLOW:
				case DISTINCT:
				case DO:
				case DOCUMENT:
				case DOUBLE:
				case DROP:
				case DSSIZE:
				case DYNAMIC:
				case EDITPROC:
				case ELSE:
				case ELSEIF:
				case ENCODING:
				case ENCRYPTION:
				case END:
				case END_EXEC:
				case ENDING:
				case ERASE:
				case ESCAPE:
				case EXCEPT:
				case EXCEPTION:
				case EXEC_SQL:
				case EXECUTE:
				case EXISTS:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case FENCED:
				case FETCH:
				case FIELDPROC:
				case FINAL:
				case FIRST:
				case FOR:
				case FREE:
				case FROM:
				case FULL:
				case FUNCTION:
				case GENERATED:
				case GET:
				case GLOBAL:
				case GO:
				case GOTO:
				case GRANT:
				case GROUP:
				case HANDLER:
				case HAVING:
				case HOLD:
				case HOUR:
				case HOURS:
				case IF:
				case IMMEDIATE:
				case IN:
				case INCLUSIVE:
				case INDEX:
				case INDEXBP:
				case INHERIT:
				case INNER:
				case INOUT:
				case INSENSITIVE:
				case INSERT:
				case INTERSECT:
				case INTO:
				case IS:
				case ISOBID:
				case ITERATE:
				case JAR:
				case JOIN:
				case KEEP:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LAST:
				case LC_CTYPE:
				case LEAVE:
				case LEFT:
				case LIKE:
				case LIMIT:
				case LOCAL:
				case LOCALE:
				case LOCATOR:
				case LOCATORS:
				case LOCK:
				case LOCKMAX:
				case LOCKSIZE:
				case LONG:
				case LOOP:
				case MAINTAINED:
				case MATERIALIZED:
				case MICROSECOND:
				case MICROSECONDS:
				case MODIFIES:
				case MONTH:
				case MONTHS:
				case NEXT:
				case NEXTVAL:
				case NO:
				case NONE:
				case NOT:
				case NULL:
				case NULLS:
				case NUMPARTS:
				case OBID:
				case OF:
				case OFFSET:
				case OLD:
				case ON:
				case OPEN:
				case OPTIMIZATION:
				case OPTIMIZE:
				case OR:
				case ORDER:
				case ORGANIZATION:
				case OUT:
				case OUTER:
				case PACKAGE:
				case PADDED:
				case PARAMETER:
				case PART:
				case PARTITION:
				case PARTITIONED:
				case PARTITIONING:
				case PATH:
				case PERIOD:
				case PIECESIZE:
				case PLAN:
				case PRECISION:
				case PREPARE:
				case PREVVAL:
				case PRIOR:
				case PRIQTY:
				case PRIVILEGES:
				case PROCEDURE:
				case PROGRAM:
				case PSID:
				case PUBLIC:
				case QUERY:
				case QUERYNO:
				case READS:
				case REFERENCES:
				case REFRESH:
				case RELEASE:
				case RENAME:
				case REPEAT:
				case RESIGNAL:
				case RESTRICT:
				case RESULT:
				case RESULT_SET_LOCATOR:
				case RETURN:
				case RETURNS:
				case REVOKE:
				case RIGHT:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUND_CEILING:
				case ROUND_DOWN:
				case ROUND_FLOOR:
				case ROUND_HALF_DOWN:
				case ROUND_HALF_EVEN:
				case ROUND_HALF_UP:
				case ROUND_UP:
				case ROW:
				case ROWSET:
				case RUN:
				case SAVEPOINT:
				case SCHEMA:
				case SCRATCHPAD:
				case SECOND:
				case SECONDS:
				case SECQTY:
				case SECURITY:
				case SELECT:
				case SENSITIVE:
				case SEQUENCE:
				case SET:
				case SIGNAL:
				case SIMPLE:
				case SOME:
				case SOURCE:
				case SPECIFIC:
				case STANDARD:
				case STATEMENT:
				case STATIC:
				case STAY:
				case STOGROUP:
				case STORES:
				case STYLE:
				case SUMMARY:
				case SYNONYM:
				case SYSDATE:
				case SYSTEM:
				case SYSTIMESTAMP:
				case TABLE:
				case TABLESPACE:
				case THEN:
				case TO:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNDO:
				case UNION:
				case UNIQUE:
				case UNTIL:
				case UPDATE:
				case USING:
				case VALIDPROC:
				case VALUE:
				case VALUES:
				case VARIABLE:
				case VARIANT:
				case VCAT:
				case VERSIONING:
				case VIEW:
				case VOLATILE:
				case VOLUMES:
				case WHEN:
				case WHENEVER:
				case WHERE:
				case WHILE:
				case WITH:
				case WLM:
				case XMLCAST:
				case XMLEXISTS:
				case XMLNAMESPACES:
				case YEAR:
				case YEARS:
				case ZONE:
				case AND:
				case ARRAY_AGG:
				case ASC:
				case AVG:
				case BIT:
				case CHANGE:
				case CODEUNITS16:
				case CODEUNITS32:
				case CORR:
				case CORRELATION:
				case COUNT:
				case COUNT_BIG:
				case COVAR:
				case COVARIANCE:
				case COVARIANCE_SAMP:
				case COVAR_POP:
				case COVAR_SAMP:
				case CS:
				case CUME_DIST:
				case DENSE_RANK:
				case DESC:
				case EBCDIC:
				case EXCLUSIVE:
				case FIRST_VALUE:
				case FOLLOWING:
				case GROUPING:
				case IGNORE:
				case INDICATOR:
				case INPUT:
				case ISNULL:
				case LAG:
				case LARGE:
				case LAST_VALUE:
				case LEAD:
				case LISTAGG:
				case LOCKED:
				case LOCKS:
				case MEDIAN:
				case MINUTES:
				case MIXED:
				case NOTNULL:
				case NTH_VALUE:
				case NTILE:
				case NUMERIC:
				case OBJECT:
				case OCTETS:
				case ONLY:
				case OVER:
				case PASSING:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case PERCENT_RANK:
				case PRECEDING:
				case PREVIOUS:
				case RANGE:
				case RANK:
				case RATIO_TO_REPORT:
				case READ:
				case REF:
				case REGR_AVGX:
				case REGR_AVGY:
				case REGR_COUNT:
				case REGR_ICPT:
				case REGR_INTERCEPT:
				case REGR_R2:
				case REGR_SLOPE:
				case REGR_SXX:
				case REGR_SXY:
				case REGR_SYY:
				case RESPECT:
				case ROW_NUMBER:
				case ROWS:
				case RR:
				case RS:
				case SBCS:
				case SELECTIVITY:
				case SETS:
				case SHARE:
				case SKIP_:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case TOKEN:
				case UNBOUNDED:
				case UNPACK:
				case UR:
				case USE:
				case VAR:
				case VARIANCE:
				case VARIANCE_SAMP:
				case VAR_POP:
				case VAR_SAMP:
				case VARYING:
				case WITHOUT:
				case XML:
				case XMLAGG:
				case COLUMNS:
				case SQLID:
				case ORDINALITY:
				case SYSTEM_TIME:
				case BUSINESS_TIME:
				case MULTIPLIER:
				case UNNEST:
				case CROSS:
				case CALLER:
				case CLIENT:
				case POSITIONING:
				case SCROLL:
				case ACTION:
				case ASSEMBLE:
				case C_:
				case CALLED:
				case COBOL:
				case DB2:
				case DEFINER:
				case DISPATCH:
				case ENVIRONMENT:
				case FAILURE:
				case FAILURES:
				case JAVA:
				case MAIN:
				case NAME:
				case OPTIONS:
				case PARALLEL:
				case PLI:
				case REGISTERS:
				case RESIDENT:
				case SECURED:
				case SPECIAL:
				case SQL:
				case STOP:
				case SUB:
				case YES:
				case APPLICATION:
				case CHANGED:
				case COMPATIBILITY:
				case COMPRESS:
				case COPY:
				case FREEPAGE:
				case GBPCACHE:
				case INCLUDE:
				case MAXVALUE:
				case MINVALUE:
				case PCTFREE:
				case REGENERATE:
				case MASK:
				case ENABLE:
				case PERMISSION:
				case ATOMIC:
				case SQLEXCEPTION:
				case MERGE:
				case MATCHED:
				case SQLSTATE:
				case MESSAGE_TEXT:
				case OVERRIDING:
				case PORTION:
				case DB2SQL:
				case DEBUG:
				case GENERAL:
				case MODE_:
				case REXX:
				case CACHE:
				case CYCLE:
				case INCREMENT:
				case RESTART:
				case DATACLAS:
				case MGMTCLAS:
				case REMOVE:
				case STORCLAS:
				case ACCESS:
				case ACTIVATE:
				case ALWAYS:
				case APPEND:
				case ARCHIVE:
				case BUSINESS:
				case CASCADE:
				case CHANGES:
				case CONTROL:
				case DEACTIVATE:
				case DEFERRED:
				case EACH:
				case ENFORCED:
				case EXTRA:
				case FOREIGN:
				case HIDDEN_:
				case HISTORY:
				case ID:
				case IDENTITY:
				case IMPLICITLY:
				case INITIALLY:
				case INLINE:
				case OPERATION:
				case ORGANIZE:
				case OVERLAPS:
				case PACKAGE_NAME:
				case PACKAGE_SCHEMA:
				case PACKAGE_VERSION:
				case PRIMARY:
				case RESET:
				case ROTATE:
				case START:
				case SYSIBM:
				case TRANSACTION:
				case XMLSCHEMA:
				case ELEMENT:
				case URL:
				case NAMESPACE:
				case LOCATION:
				case SYSXSR:
				case ALGORITHM:
				case FIXEDLENGTH:
				case HUFFMAN:
				case LOB:
				case LOG:
				case LOGGED:
				case MAXPARTITIONS:
				case MAXROWS:
				case MEMBER:
				case MOVE:
				case PAGE:
				case PAGENUM:
				case PENDING:
				case RELATIVE:
				case SEGSIZE:
				case TRACKMOD:
				case ADDRESS:
				case ATTRIBUTES:
				case AUTHENTICATION:
				case AUTHID:
				case CONTEXT:
				case JOBNAME:
				case OWNER:
				case PROFILE:
				case QUALIFIER:
				case SERVAUTH:
				case TRUSTED:
				case SECTION:
				case ACTIVE:
				case VERSION:
				case ALIAS:
				case WORK:
				case WORKFILE:
				case SYSDEFLT:
				case NULTERM:
				case STRUCTURE:
				case GENERIC:
				case TEMPORARY:
				case DEFER:
				case DEFINE:
				case EXCLUDE:
				case GENERATE:
				case KEYS:
				case XMLPATTERN:
				case SIZE:
				case EVERY:
				case ABSOLUTE:
				case ACCELERATOR:
				case EXCLUDING:
				case INCLUDING:
				case DEFAULTS:
				case MODIFIERS:
				case OPTION:
				case PRESERVE:
				case BOTH:
				case DESCRIBE:
				case LABELS:
				case NAMES:
				case OUTPUT:
				case EXCHANGE:
				case STABILIZED:
				case STMTCACHE:
				case STMTID:
				case STMTTOKEN:
				case STARTING:
				case CATALOG_NAME:
				case CONDITION_NUMBER:
				case CURSOR_NAME:
				case DB2_AUTHENTICATION_TYPE:
				case DB2_AUTHORIZATION_ID:
				case DB2_CONNECTION_STATE:
				case DB2_CONNECTION_STATUS:
				case DB2_ENCRYPTION_TYPE:
				case DB2_ERROR_CODE1:
				case DB2_ERROR_CODE2:
				case DB2_ERROR_CODE3:
				case DB2_ERROR_CODE4:
				case DB2_GET_DIAGNOSTICS_DIAGNOSTICS:
				case DB2_INTERNAL_ERROR_POINTER:
				case DB2_LAST_ROW:
				case DB2_LINE_NUMBER:
				case DB2_MESSAGE_ID:
				case DB2_MODULE_DETECTING_ERROR:
				case DB2_NUMBER_PARAMETER_MARKERS:
				case DB2_NUMBER_RESULT_SETS:
				case DB2_NUMBER_ROWS:
				case DB2_ORDINAL_TOKEN_:
				case DB2_PRODUCT_ID:
				case DB2_REASON_CODE:
				case DB2_RETURNED_SQLCODE:
				case DB2_RETURN_STATUS:
				case DB2_ROW_NUMBER:
				case DB2_SERVER_CLASS_NAME:
				case DB2_SQL_ATTR_CURSOR_HOLD:
				case DB2_SQL_ATTR_CURSOR_ROWSET:
				case DB2_SQL_ATTR_CURSOR_SCROLLABLE:
				case DB2_SQL_ATTR_CURSOR_SENSITIVITY:
				case DB2_SQL_ATTR_CURSOR_TYPE:
				case DB2_SQLERRD1:
				case DB2_SQLERRD2:
				case DB2_SQLERRD3:
				case DB2_SQLERRD4:
				case DB2_SQLERRD5:
				case DB2_SQLERRD6:
				case DB2_SQLERRD_SET:
				case DB2_SQL_NESTING_LEVEL:
				case DB2_TOKEN_COUNT:
				case DIAGNOSTICS:
				case MORE_:
				case NUMBER:
				case RETURNED_SQLSTATE:
				case ROW_COUNT:
				case SERVER_NAME:
				case STACKED:
				case CREATETAB:
				case CREATETS:
				case DBADM:
				case DBCTRL:
				case DBMAINT:
				case DISPLAYDB:
				case IMAGCOPY:
				case LOAD:
				case PACKADM:
				case RECOVERDB:
				case REORG:
				case REPAIR:
				case STARTDB:
				case STATS:
				case STOPDB:
				case BIND:
				case ALTERIN:
				case CREATEIN:
				case DROPIN:
				case USAGE:
				case ACCESSCTRL:
				case BINDADD:
				case BINDAGENT:
				case BSDS:
				case CREATEALIAS:
				case CREATEDBA:
				case CREATEDBC:
				case CREATE_SECURE_OBJECT:
				case CREATESG:
				case CREATETMTAB:
				case DATAACCESS:
				case DEBUGSESSION:
				case DISPLAY:
				case MONITOR1:
				case MONITOR2:
				case RECOVER:
				case SQLADM:
				case STOPALL:
				case STOSPACE:
				case SYSADM:
				case SYSCTRL:
				case SYSOPR:
				case TRACE:
				case UNLOAD:
				case WRITE:
				case ABS:
				case ABSVAL:
				case ACOS:
				case ADD_DAYS:
				case ADD_MONTHS:
				case ARRAY_DELETE:
				case ARRAY_FIRST:
				case ARRAY_LAST:
				case ARRAY_NEXT:
				case ARRAY_PRIOR:
				case ARRAY_TRIM:
				case ASCII:
				case ASCII_CHR:
				case ASCIISTR:
				case ASCII_STR:
				case ASIN:
				case ATAN:
				case ATAN2:
				case ATANH:
				case BIGINT:
				case BINARY:
				case BITAND:
				case BITANDNOT:
				case BITNOT:
				case BITOR:
				case BITXOR:
				case BLOB:
				case BTRIM:
				case CARDINALITY:
				case CCSID_ENCODING:
				case CEIL:
				case CEILING:
				case CHAR9:
				case CHARACTER_LENGTH:
				case CHAR_LENGTH:
				case CHR:
				case CLOB:
				case COALESCE:
				case COLLATION_KEY:
				case COMPARE_DECFLOAT:
				case COS:
				case COSH:
				case DATE:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFWEEK_ISO:
				case DAYOFYEAR:
				case DAYS_BETWEEN:
				case DBCLOB:
				case DEC:
				case DECFLOAT:
				case DECFLOAT_FORMAT:
				case DECFLOAT_SORTKEY:
				case DECIMAL:
				case DECODE:
				case DECRYPT_BINARY:
				case DECRYPT_BIT:
				case DECRYPT_CHAR:
				case DECRYPT_DATAKEY_BIGINT:
				case DECRYPT_DATAKEY_BIT:
				case DECRYPT_DATAKEY_CLOB:
				case DECRYPT_DATAKEY_DBCLOB:
				case DECRYPT_DATAKEY_DECIMAL:
				case DECRYPT_DATAKEY_INTEGER:
				case DECRYPT_DATAKEY_VARCHAR:
				case DECRYPT_DATAKEY_VARGRAPHIC:
				case DECRYPT_DB:
				case DEGREES:
				case DIFFERENCE:
				case DIGITS:
				case DOUBLE_PRECISION:
				case DSN_XMLVALIDATE:
				case EBCDIC_CHR:
				case EBCDIC_STR:
				case ENCRYPT_DATAKEY:
				case ENCRYPT_TDES:
				case EXP:
				case EXTRACT:
				case FLOAT:
				case FLOOR:
				case GENERATE_UNIQUE:
				case GENERATE_UNIQUE_BINARY:
				case GETHINT:
				case GETVARIABLE:
				case GRAPHIC:
				case GREATEST:
				case HASH:
				case HASH_CRC32:
				case HASH_MD5:
				case HASH_SHA1:
				case HASH_SHA256:
				case HEX:
				case IDENTITY_VAL_LOCAL:
				case IFNULL:
				case INSTR:
				case INT:
				case INTEGER:
				case JULIAN_DAY:
				case LAST_DAY:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LN:
				case LOCATE:
				case LOCATE_IN_STRING:
				case LOG10:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAX:
				case MAX_CARDINALITY:
				case MIDNIGHT_SECONDS:
				case MIN:
				case MINUTE:
				case MOD:
				case MONTHS_BETWEEN:
				case MQREAD:
				case MQREADCLOB:
				case MQRECEIVE:
				case MQRECEIVECLOB:
				case MQSEND:
				case MULTIPLY_ALT:
				case NEXT_DAY:
				case NEXT_MONTH:
				case NORMALIZE_DECFLOAT:
				case NORMALIZE_STRING:
				case NULLIF:
				case NVL:
				case OVERLAY:
				case PACK:
				case POSITION:
				case POSSTR:
				case POW:
				case POWER:
				case QUANTIZE:
				case QUARTER:
				case RADIANS:
				case RAISE_ERROR:
				case RAND:
				case RANDOM:
				case REAL:
				case REGEXP_COUNT:
				case REGEXP_INSTR:
				case REGEXP_LIKE:
				case REGEXP_REPLACE:
				case REGEXP_SUBSTR:
				case REPLACE:
				case RID:
				case ROUND:
				case ROUND_TIMESTAMP:
				case ROWID:
				case RPAD:
				case RTRIM:
				case SCORE:
				case SIGN:
				case SIN:
				case SINH:
				case SMALLINT:
				case SOAPHTTPC:
				case SOAPHTTPNC:
				case SOAPHTTPNV:
				case SOAPHTTPV:
				case SOUNDEX:
				case SPACE:
				case SQRT:
				case STRIP:
				case STRLEFT:
				case STRPOS:
				case STRRIGHT:
				case SUBSTR:
				case SUBSTRING:
				case TAN:
				case TANH:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIMESTAMP_FORMAT:
				case TIMESTAMP_ISO:
				case TIMESTAMP_TZ:
				case TO_CHAR:
				case TO_CLOB:
				case TO_DATE:
				case TO_NUMBER:
				case TOTALORDER:
				case TO_TIMESTAMP:
				case TRANSLATE:
				case TRIM:
				case TRIM_ARRAY:
				case TRUNC:
				case TRUNC_TIMESTAMP:
				case UCASE:
				case UNICODE:
				case UNICODE_STR:
				case UNISTR:
				case UPPER:
				case VARBINARY:
				case VARCHAR:
				case VARCHAR9:
				case VARCHAR_BIT_FORMAT:
				case VARCHAR_FORMAT:
				case VARGRAPHIC:
				case VERIFY_GROUP_FOR_USER:
				case VERIFY_ROLE_FOR_USER:
				case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
				case WEEK:
				case WEEK_ISO:
				case WRAP:
				case XMLATTRIBUTES:
				case XMLCOMMENT:
				case XMLCONCAT:
				case XMLDOCUMENT:
				case XMLELEMENT:
				case XMLFOREST:
				case XMLMODIFY:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLSERIALIZE:
				case XMLTEXT:
				case XMLXSROBJECTID:
				case XSLTRANSFORM:
				case CURRENT_ACCELERATOR:
				case CURRENT_APPLICATION_COMPATIBILITY:
				case CURRENT_APPLICATION_ENCODING_SCHEME:
				case CURRENT_CLIENT_ACCTNG:
				case CURRENT_CLIENT_APPLNAME:
				case CURRENT_CLIENT_CORR_TOKEN:
				case CURRENT_CLIENT_USERID:
				case CURRENT_CLIENT_WRKSTNNAME:
				case CURRENT_DATE:
				case CURRENT_DEBUG_MODE:
				case CURRENT_DECFLOAT_ROUNDING_MODE:
				case CURRENT_DEGREE:
				case CURRENT_EXPLAIN_MODE:
				case CURRENT_GET_ACCEL_ARCHIVE:
				case CURRENT_LOCALE_LC_CTYPE:
				case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
				case CURRENT_MEMBER:
				case CURRENT_OPTIMIZATION_HINT:
				case CURRENT_PACKAGE_PATH:
				case CURRENT_PACKAGESET:
				case CURRENT_PATH:
				case CURRENT_PRECISION:
				case CURRENT_QUERY_ACCELERATION:
				case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
				case CURRENT_REFRESH_AGE:
				case CURRENT_ROUTINE_VERSION:
				case CURRENT_RULES:
				case CURRENT_SCHEMA:
				case CURRENT_SERVER:
				case CURRENT_SQLID:
				case CURRENT_TEMPORAL_BUSINESS_TIME:
				case CURRENT_TEMPORAL_SYSTEM_TIME:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case CURRENT_TIME_ZONE:
				case ENCRYPTION_PASSWORD:
				case SESSION_TIME_ZONE:
				case SESSION_USER:
				case USER:
				case ADMIN_TASK_LIST:
				case ADMIN_TASK_OUTPUT:
				case ADMIN_TASK_STATUS:
				case BLOCKING_THREADS:
				case MQREADALL:
				case MQREADALLCLOB:
				case MQRECEIVEALL:
				case MQRECEIVEALLCLOB:
				case XMLTABLE:
				case SQLIDENTIFIER:
					{
					setState(1726);
					locationName();
					}
					break;
				case COLON:
					{
					setState(1727);
					hostVariable();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1731);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USER) {
					{
					setState(1730);
					authorization();
					}
				}

				}
				}
				break;
			case RESET:
				{
				setState(1733);
				match(RESET);
				}
				break;
			case USER:
				{
				setState(1734);
				authorization();
				}
				break;
			case EOF:
			case SEMICOLON:
			case END_EXEC:
				break;
			default:
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateAliasStatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DB2zSQLParser.CREATE, 0); }
		public TerminalNode ALIAS() { return getToken(DB2zSQLParser.ALIAS, 0); }
		public SequenceAliasContext sequenceAlias() {
			return getRuleContext(SequenceAliasContext.class,0);
		}
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public TerminalNode PUBLIC() { return getToken(DB2zSQLParser.PUBLIC, 0); }
		public CreateAliasStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createAliasStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateAliasStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateAliasStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateAliasStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateAliasStatementContext createAliasStatement() throws RecognitionException {
		CreateAliasStatementContext _localctx = new CreateAliasStatementContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_createAliasStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1737);
			match(CREATE);
			setState(1739);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PUBLIC) {
				{
				setState(1738);
				match(PUBLIC);
				}
			}

			setState(1741);
			match(ALIAS);
			setState(1744);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,54,_ctx) ) {
			case 1:
				{
				setState(1742);
				sequenceAlias();
				}
				break;
			case 2:
				{
				setState(1743);
				tableAlias();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateAuxiliaryTableStatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DB2zSQLParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public AuxTableNameContext auxTableName() {
			return getRuleContext(AuxTableNameContext.class,0);
		}
		public TerminalNode IN() { return getToken(DB2zSQLParser.IN, 0); }
		public TablespaceNameContext tablespaceName() {
			return getRuleContext(TablespaceNameContext.class,0);
		}
		public TerminalNode STORES() { return getToken(DB2zSQLParser.STORES, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(DB2zSQLParser.COLUMN, 0); }
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TerminalNode PART() { return getToken(DB2zSQLParser.PART, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode AUX() { return getToken(DB2zSQLParser.AUX, 0); }
		public TerminalNode AUXILIARY() { return getToken(DB2zSQLParser.AUXILIARY, 0); }
		public DatabaseNameContext databaseName() {
			return getRuleContext(DatabaseNameContext.class,0);
		}
		public AppendClauseContext appendClause() {
			return getRuleContext(AppendClauseContext.class,0);
		}
		public CreateAuxiliaryTableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createAuxiliaryTableStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateAuxiliaryTableStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateAuxiliaryTableStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateAuxiliaryTableStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateAuxiliaryTableStatementContext createAuxiliaryTableStatement() throws RecognitionException {
		CreateAuxiliaryTableStatementContext _localctx = new CreateAuxiliaryTableStatementContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_createAuxiliaryTableStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1746);
			match(CREATE);
			setState(1747);
			_la = _input.LA(1);
			if ( !(_la==AUX || _la==AUXILIARY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1748);
			match(TABLE);
			setState(1749);
			auxTableName();
			setState(1750);
			match(IN);
			setState(1752);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,55,_ctx) ) {
			case 1:
				{
				setState(1751);
				databaseName();
				}
				break;
			}
			setState(1754);
			tablespaceName();
			setState(1755);
			match(STORES);
			setState(1756);
			tableName();
			setState(1758);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==APPEND) {
				{
				setState(1757);
				appendClause();
				}
			}

			setState(1760);
			match(COLUMN);
			setState(1761);
			columnName();
			setState(1762);
			match(PART);
			setState(1763);
			match(INTEGERLITERAL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDatabaseStatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DB2zSQLParser.CREATE, 0); }
		public TerminalNode DATABASE() { return getToken(DB2zSQLParser.DATABASE, 0); }
		public DatabaseNameContext databaseName() {
			return getRuleContext(DatabaseNameContext.class,0);
		}
		public List<DatabaseOptionListContext> databaseOptionList() {
			return getRuleContexts(DatabaseOptionListContext.class);
		}
		public DatabaseOptionListContext databaseOptionList(int i) {
			return getRuleContext(DatabaseOptionListContext.class,i);
		}
		public CreateDatabaseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDatabaseStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateDatabaseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateDatabaseStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateDatabaseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDatabaseStatementContext createDatabaseStatement() throws RecognitionException {
		CreateDatabaseStatementContext _localctx = new CreateDatabaseStatementContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_createDatabaseStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1765);
			match(CREATE);
			setState(1766);
			match(DATABASE);
			setState(1767);
			databaseName();
			setState(1771);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 47)) & ~0x3f) == 0 && ((1L << (_la - 47)) & ((1L << (AS - 47)) | (1L << (BUFFERPOOL - 47)) | (1L << (CCSID - 47)))) != 0) || _la==INDEXBP || _la==STOGROUP) {
				{
				{
				setState(1768);
				databaseOptionList();
				}
				}
				setState(1773);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFunctionStatementContext extends ParserRuleContext {
		public CreateFunctionStatementExternalScalarContext createFunctionStatementExternalScalar() {
			return getRuleContext(CreateFunctionStatementExternalScalarContext.class,0);
		}
		public CreateFunctionStatementExternalTableContext createFunctionStatementExternalTable() {
			return getRuleContext(CreateFunctionStatementExternalTableContext.class,0);
		}
		public CreateFunctionStatementSourcedContext createFunctionStatementSourced() {
			return getRuleContext(CreateFunctionStatementSourcedContext.class,0);
		}
		public CreateFunctionStatementInlineSqlScalarContext createFunctionStatementInlineSqlScalar() {
			return getRuleContext(CreateFunctionStatementInlineSqlScalarContext.class,0);
		}
		public CreateFunctionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunctionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateFunctionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateFunctionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateFunctionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFunctionStatementContext createFunctionStatement() throws RecognitionException {
		CreateFunctionStatementContext _localctx = new CreateFunctionStatementContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_createFunctionStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1778);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,58,_ctx) ) {
			case 1:
				{
				setState(1774);
				createFunctionStatementExternalScalar();
				}
				break;
			case 2:
				{
				setState(1775);
				createFunctionStatementExternalTable();
				}
				break;
			case 3:
				{
				setState(1776);
				createFunctionStatementSourced();
				}
				break;
			case 4:
				{
				setState(1777);
				createFunctionStatementInlineSqlScalar();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFunctionStatementExternalScalarContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DB2zSQLParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(DB2zSQLParser.FUNCTION, 0); }
		public FunctionNameContext functionName() {
			return getRuleContext(FunctionNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<ParameterDeclaration1Context> parameterDeclaration1() {
			return getRuleContexts(ParameterDeclaration1Context.class);
		}
		public ParameterDeclaration1Context parameterDeclaration1(int i) {
			return getRuleContext(ParameterDeclaration1Context.class,i);
		}
		public List<CreateFunctionStatementExternalScalarOptionsContext> createFunctionStatementExternalScalarOptions() {
			return getRuleContexts(CreateFunctionStatementExternalScalarOptionsContext.class);
		}
		public CreateFunctionStatementExternalScalarOptionsContext createFunctionStatementExternalScalarOptions(int i) {
			return getRuleContext(CreateFunctionStatementExternalScalarOptionsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public CreateFunctionStatementExternalScalarContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunctionStatementExternalScalar; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateFunctionStatementExternalScalar(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateFunctionStatementExternalScalar(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateFunctionStatementExternalScalar(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFunctionStatementExternalScalarContext createFunctionStatementExternalScalar() throws RecognitionException {
		CreateFunctionStatementExternalScalarContext _localctx = new CreateFunctionStatementExternalScalarContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_createFunctionStatementExternalScalar);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1780);
			match(CREATE);
			setState(1781);
			match(FUNCTION);
			setState(1782);
			functionName();
			setState(1783);
			match(LPAREN);
			setState(1792);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & ((1L << (INSTEAD - 30)) | (1L << (NEW - 30)) | (1L << (NEW_TABLE - 30)) | (1L << (OLD_TABLE - 30)) | (1L << (REFERENCING - 30)) | (1L << (BASED - 30)) | (1L << (UPON - 30)) | (1L << (ADD - 30)) | (1L << (AFTER - 30)) | (1L << (ALL - 30)) | (1L << (ALLOCATE - 30)) | (1L << (ALLOW - 30)) | (1L << (ALTER - 30)) | (1L << (ALTERAND - 30)) | (1L << (ANY - 30)) | (1L << (ARRAY - 30)) | (1L << (ARRAY_EXISTS - 30)) | (1L << (AS - 30)) | (1L << (ASENSITIVE - 30)) | (1L << (ASSOCIATE - 30)) | (1L << (ASUTIME - 30)) | (1L << (AT - 30)) | (1L << (AUDIT - 30)) | (1L << (AUX - 30)) | (1L << (AUXILIARY - 30)) | (1L << (BEFORE - 30)) | (1L << (BEGIN - 30)) | (1L << (BETWEEN - 30)) | (1L << (BUFFERPOOL - 30)) | (1L << (BUFFERPOOLS - 30)) | (1L << (BY - 30)) | (1L << (CALL - 30)) | (1L << (CAPTURE - 30)) | (1L << (CASCADED - 30)) | (1L << (CASE - 30)) | (1L << (CAST - 30)) | (1L << (CCSID - 30)) | (1L << (CHAR - 30)) | (1L << (CHARACTER - 30)) | (1L << (CHECK - 30)) | (1L << (CLONE - 30)) | (1L << (CLOSE - 30)) | (1L << (CLUSTER - 30)) | (1L << (COLLECTION - 30)) | (1L << (COLLID - 30)) | (1L << (COLUMN - 30)) | (1L << (COMMENT - 30)) | (1L << (COMMIT - 30)) | (1L << (CONCAT - 30)) | (1L << (CONDITION - 30)) | (1L << (CONNECT - 30)) | (1L << (CONNECTION - 30)) | (1L << (CONSTRAINT - 30)) | (1L << (CONTAINS - 30)) | (1L << (CONTENT - 30)) | (1L << (CONTINUE - 30)) | (1L << (CREATE - 30)) | (1L << (CUBE - 30)) | (1L << (CURRENT - 30)) | (1L << (CURRENT_LC_CTYPE - 30)) | (1L << (CURRVAL - 30)) | (1L << (CURSOR - 30)) | (1L << (DATA - 30)) | (1L << (DATABASE - 30)))) != 0) || ((((_la - 94)) & ~0x3f) == 0 && ((1L << (_la - 94)) & ((1L << (DAY - 94)) | (1L << (DAYS - 94)) | (1L << (DBINFO - 94)) | (1L << (DECLARE - 94)) | (1L << (DEFAULT - 94)) | (1L << (DELETE - 94)) | (1L << (DESCRIPTOR - 94)) | (1L << (DETERMINISTIC - 94)) | (1L << (DISABLE - 94)) | (1L << (DISALLOW - 94)) | (1L << (DISTINCT - 94)) | (1L << (DO - 94)) | (1L << (DOCUMENT - 94)) | (1L << (DOUBLE - 94)) | (1L << (DROP - 94)) | (1L << (DSSIZE - 94)) | (1L << (DYNAMIC - 94)) | (1L << (EDITPROC - 94)) | (1L << (ELSE - 94)) | (1L << (ELSEIF - 94)) | (1L << (ENCODING - 94)) | (1L << (ENCRYPTION - 94)) | (1L << (END - 94)) | (1L << (END_EXEC - 94)) | (1L << (ENDING - 94)) | (1L << (ERASE - 94)) | (1L << (ESCAPE - 94)) | (1L << (EXCEPT - 94)) | (1L << (EXCEPTION - 94)) | (1L << (EXEC_SQL - 94)) | (1L << (EXECUTE - 94)) | (1L << (EXISTS - 94)) | (1L << (EXIT - 94)) | (1L << (EXPLAIN - 94)) | (1L << (EXTERNAL - 94)) | (1L << (FENCED - 94)) | (1L << (FETCH - 94)) | (1L << (FIELDPROC - 94)) | (1L << (FINAL - 94)) | (1L << (FIRST - 94)) | (1L << (FOR - 94)) | (1L << (FREE - 94)) | (1L << (FROM - 94)) | (1L << (FULL - 94)) | (1L << (FUNCTION - 94)) | (1L << (GENERATED - 94)) | (1L << (GET - 94)) | (1L << (GLOBAL - 94)) | (1L << (GO - 94)) | (1L << (GOTO - 94)) | (1L << (GRANT - 94)) | (1L << (GROUP - 94)) | (1L << (HANDLER - 94)) | (1L << (HAVING - 94)) | (1L << (HOLD - 94)) | (1L << (HOUR - 94)) | (1L << (HOURS - 94)) | (1L << (IF - 94)) | (1L << (IMMEDIATE - 94)) | (1L << (IN - 94)) | (1L << (INCLUSIVE - 94)) | (1L << (INDEX - 94)) | (1L << (INDEXBP - 94)) | (1L << (INHERIT - 94)))) != 0) || ((((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & ((1L << (INNER - 158)) | (1L << (INOUT - 158)) | (1L << (INSENSITIVE - 158)) | (1L << (INSERT - 158)) | (1L << (INTERSECT - 158)) | (1L << (INTO - 158)) | (1L << (IS - 158)) | (1L << (ISOBID - 158)) | (1L << (ITERATE - 158)) | (1L << (JAR - 158)) | (1L << (JOIN - 158)) | (1L << (KEEP - 158)) | (1L << (KEY - 158)) | (1L << (LABEL - 158)) | (1L << (LANGUAGE - 158)) | (1L << (LAST - 158)) | (1L << (LC_CTYPE - 158)) | (1L << (LEAVE - 158)) | (1L << (LEFT - 158)) | (1L << (LIKE - 158)) | (1L << (LIMIT - 158)) | (1L << (LOCAL - 158)) | (1L << (LOCALE - 158)) | (1L << (LOCATOR - 158)) | (1L << (LOCATORS - 158)) | (1L << (LOCK - 158)) | (1L << (LOCKMAX - 158)) | (1L << (LOCKSIZE - 158)) | (1L << (LONG - 158)) | (1L << (LOOP - 158)) | (1L << (MAINTAINED - 158)) | (1L << (MATERIALIZED - 158)) | (1L << (MICROSECOND - 158)) | (1L << (MICROSECONDS - 158)) | (1L << (MODIFIES - 158)) | (1L << (MONTH - 158)) | (1L << (MONTHS - 158)) | (1L << (NEXT - 158)) | (1L << (NEXTVAL - 158)) | (1L << (NO - 158)) | (1L << (NONE - 158)) | (1L << (NOT - 158)) | (1L << (NULL - 158)) | (1L << (NULLS - 158)) | (1L << (NUMPARTS - 158)) | (1L << (OBID - 158)) | (1L << (OF - 158)) | (1L << (OFFSET - 158)) | (1L << (OLD - 158)) | (1L << (ON - 158)) | (1L << (OPEN - 158)) | (1L << (OPTIMIZATION - 158)) | (1L << (OPTIMIZE - 158)) | (1L << (OR - 158)) | (1L << (ORDER - 158)) | (1L << (ORGANIZATION - 158)) | (1L << (OUT - 158)) | (1L << (OUTER - 158)) | (1L << (PACKAGE - 158)) | (1L << (PADDED - 158)) | (1L << (PARAMETER - 158)) | (1L << (PART - 158)) | (1L << (PARTITION - 158)))) != 0) || ((((_la - 222)) & ~0x3f) == 0 && ((1L << (_la - 222)) & ((1L << (PARTITIONED - 222)) | (1L << (PARTITIONING - 222)) | (1L << (PATH - 222)) | (1L << (PERIOD - 222)) | (1L << (PIECESIZE - 222)) | (1L << (PLAN - 222)) | (1L << (PRECISION - 222)) | (1L << (PREPARE - 222)) | (1L << (PREVVAL - 222)) | (1L << (PRIOR - 222)) | (1L << (PRIQTY - 222)) | (1L << (PRIVILEGES - 222)) | (1L << (PROCEDURE - 222)) | (1L << (PROGRAM - 222)) | (1L << (PSID - 222)) | (1L << (PUBLIC - 222)) | (1L << (QUERY - 222)) | (1L << (QUERYNO - 222)) | (1L << (READS - 222)) | (1L << (REFERENCES - 222)) | (1L << (REFRESH - 222)) | (1L << (RELEASE - 222)) | (1L << (RENAME - 222)) | (1L << (REPEAT - 222)) | (1L << (RESIGNAL - 222)) | (1L << (RESTRICT - 222)) | (1L << (RESULT - 222)) | (1L << (RESULT_SET_LOCATOR - 222)) | (1L << (RETURN - 222)) | (1L << (RETURNS - 222)) | (1L << (REVOKE - 222)) | (1L << (RIGHT - 222)) | (1L << (ROLE - 222)) | (1L << (ROLLBACK - 222)) | (1L << (ROLLUP - 222)) | (1L << (ROUND_CEILING - 222)) | (1L << (ROUND_DOWN - 222)) | (1L << (ROUND_FLOOR - 222)) | (1L << (ROUND_HALF_DOWN - 222)) | (1L << (ROUND_HALF_EVEN - 222)) | (1L << (ROUND_HALF_UP - 222)) | (1L << (ROUND_UP - 222)) | (1L << (ROW - 222)) | (1L << (ROWSET - 222)) | (1L << (RUN - 222)) | (1L << (SAVEPOINT - 222)) | (1L << (SCHEMA - 222)) | (1L << (SCRATCHPAD - 222)) | (1L << (SECOND - 222)) | (1L << (SECONDS - 222)) | (1L << (SECQTY - 222)) | (1L << (SECURITY - 222)) | (1L << (SELECT - 222)) | (1L << (SENSITIVE - 222)) | (1L << (SEQUENCE - 222)) | (1L << (SET - 222)) | (1L << (SIGNAL - 222)) | (1L << (SIMPLE - 222)) | (1L << (SOME - 222)) | (1L << (SOURCE - 222)) | (1L << (SPECIFIC - 222)) | (1L << (STANDARD - 222)) | (1L << (STATEMENT - 222)) | (1L << (STATIC - 222)))) != 0) || ((((_la - 286)) & ~0x3f) == 0 && ((1L << (_la - 286)) & ((1L << (STAY - 286)) | (1L << (STOGROUP - 286)) | (1L << (STORES - 286)) | (1L << (STYLE - 286)) | (1L << (SUMMARY - 286)) | (1L << (SYNONYM - 286)) | (1L << (SYSDATE - 286)) | (1L << (SYSTEM - 286)) | (1L << (SYSTIMESTAMP - 286)) | (1L << (TABLE - 286)) | (1L << (TABLESPACE - 286)) | (1L << (THEN - 286)) | (1L << (TO - 286)) | (1L << (TRIGGER - 286)) | (1L << (TRUNCATE - 286)) | (1L << (TYPE - 286)) | (1L << (UNDO - 286)) | (1L << (UNION - 286)) | (1L << (UNIQUE - 286)) | (1L << (UNTIL - 286)) | (1L << (UPDATE - 286)) | (1L << (USING - 286)) | (1L << (VALIDPROC - 286)) | (1L << (VALUE - 286)) | (1L << (VALUES - 286)) | (1L << (VARIABLE - 286)) | (1L << (VARIANT - 286)) | (1L << (VCAT - 286)) | (1L << (VERSIONING - 286)) | (1L << (VIEW - 286)) | (1L << (VOLATILE - 286)) | (1L << (VOLUMES - 286)) | (1L << (WHEN - 286)) | (1L << (WHENEVER - 286)) | (1L << (WHERE - 286)) | (1L << (WHILE - 286)) | (1L << (WITH - 286)) | (1L << (WLM - 286)) | (1L << (XMLCAST - 286)) | (1L << (XMLEXISTS - 286)) | (1L << (XMLNAMESPACES - 286)) | (1L << (YEAR - 286)) | (1L << (YEARS - 286)) | (1L << (ZONE - 286)) | (1L << (AND - 286)) | (1L << (ARRAY_AGG - 286)) | (1L << (ASC - 286)) | (1L << (AVG - 286)) | (1L << (BIT - 286)) | (1L << (CHANGE - 286)) | (1L << (CODEUNITS16 - 286)) | (1L << (CODEUNITS32 - 286)) | (1L << (CORR - 286)) | (1L << (CORRELATION - 286)) | (1L << (COUNT - 286)) | (1L << (COUNT_BIG - 286)) | (1L << (COVAR - 286)) | (1L << (COVARIANCE - 286)) | (1L << (COVARIANCE_SAMP - 286)) | (1L << (COVAR_POP - 286)) | (1L << (COVAR_SAMP - 286)) | (1L << (CS - 286)) | (1L << (CUME_DIST - 286)) | (1L << (DENSE_RANK - 286)))) != 0) || ((((_la - 350)) & ~0x3f) == 0 && ((1L << (_la - 350)) & ((1L << (DESC - 350)) | (1L << (EBCDIC - 350)) | (1L << (EXCLUSIVE - 350)) | (1L << (FIRST_VALUE - 350)) | (1L << (FOLLOWING - 350)) | (1L << (GROUPING - 350)) | (1L << (IGNORE - 350)) | (1L << (INDICATOR - 350)) | (1L << (INPUT - 350)) | (1L << (ISNULL - 350)) | (1L << (LAG - 350)) | (1L << (LARGE - 350)) | (1L << (LAST_VALUE - 350)) | (1L << (LEAD - 350)) | (1L << (LISTAGG - 350)) | (1L << (LOCKED - 350)) | (1L << (LOCKS - 350)) | (1L << (MEDIAN - 350)) | (1L << (MINUTES - 350)) | (1L << (MIXED - 350)) | (1L << (NOTNULL - 350)) | (1L << (NTH_VALUE - 350)) | (1L << (NTILE - 350)) | (1L << (NUMERIC - 350)) | (1L << (OBJECT - 350)) | (1L << (OCTETS - 350)) | (1L << (ONLY - 350)) | (1L << (OVER - 350)) | (1L << (PASSING - 350)) | (1L << (PERCENTILE_CONT - 350)) | (1L << (PERCENTILE_DISC - 350)) | (1L << (PERCENT_RANK - 350)) | (1L << (PRECEDING - 350)) | (1L << (PREVIOUS - 350)) | (1L << (RANGE - 350)) | (1L << (RANK - 350)) | (1L << (RATIO_TO_REPORT - 350)) | (1L << (READ - 350)) | (1L << (REF - 350)) | (1L << (REGR_AVGX - 350)) | (1L << (REGR_AVGY - 350)) | (1L << (REGR_COUNT - 350)) | (1L << (REGR_ICPT - 350)) | (1L << (REGR_INTERCEPT - 350)) | (1L << (REGR_R2 - 350)) | (1L << (REGR_SLOPE - 350)) | (1L << (REGR_SXX - 350)) | (1L << (REGR_SXY - 350)) | (1L << (REGR_SYY - 350)) | (1L << (RESPECT - 350)) | (1L << (ROW_NUMBER - 350)) | (1L << (ROWS - 350)) | (1L << (RR - 350)) | (1L << (RS - 350)) | (1L << (SBCS - 350)) | (1L << (SELECTIVITY - 350)) | (1L << (SETS - 350)) | (1L << (SHARE - 350)) | (1L << (SKIP_ - 350)) | (1L << (STDDEV - 350)) | (1L << (STDDEV_POP - 350)) | (1L << (STDDEV_SAMP - 350)) | (1L << (SUM - 350)) | (1L << (TOKEN - 350)))) != 0) || ((((_la - 414)) & ~0x3f) == 0 && ((1L << (_la - 414)) & ((1L << (UNBOUNDED - 414)) | (1L << (UNPACK - 414)) | (1L << (UR - 414)) | (1L << (USE - 414)) | (1L << (VAR - 414)) | (1L << (VARIANCE - 414)) | (1L << (VARIANCE_SAMP - 414)) | (1L << (VAR_POP - 414)) | (1L << (VAR_SAMP - 414)) | (1L << (VARYING - 414)) | (1L << (WITHOUT - 414)) | (1L << (XML - 414)) | (1L << (XMLAGG - 414)) | (1L << (COLUMNS - 414)) | (1L << (SQLID - 414)) | (1L << (ORDINALITY - 414)) | (1L << (SYSTEM_TIME - 414)) | (1L << (BUSINESS_TIME - 414)) | (1L << (MULTIPLIER - 414)) | (1L << (UNNEST - 414)) | (1L << (CROSS - 414)) | (1L << (CALLER - 414)) | (1L << (CLIENT - 414)) | (1L << (POSITIONING - 414)) | (1L << (SCROLL - 414)) | (1L << (ACTION - 414)) | (1L << (ASSEMBLE - 414)) | (1L << (C_ - 414)) | (1L << (CALLED - 414)) | (1L << (COBOL - 414)) | (1L << (DB2 - 414)) | (1L << (DEFINER - 414)) | (1L << (DISPATCH - 414)) | (1L << (ENVIRONMENT - 414)) | (1L << (FAILURE - 414)) | (1L << (FAILURES - 414)) | (1L << (JAVA - 414)) | (1L << (MAIN - 414)) | (1L << (NAME - 414)) | (1L << (OPTIONS - 414)) | (1L << (PARALLEL - 414)) | (1L << (PLI - 414)) | (1L << (REGISTERS - 414)) | (1L << (RESIDENT - 414)) | (1L << (SECURED - 414)) | (1L << (SPECIAL - 414)) | (1L << (SQL - 414)) | (1L << (STOP - 414)) | (1L << (SUB - 414)) | (1L << (YES - 414)) | (1L << (APPLICATION - 414)) | (1L << (CHANGED - 414)) | (1L << (COMPATIBILITY - 414)) | (1L << (COMPRESS - 414)) | (1L << (COPY - 414)) | (1L << (FREEPAGE - 414)) | (1L << (GBPCACHE - 414)) | (1L << (INCLUDE - 414)) | (1L << (MAXVALUE - 414)) | (1L << (MINVALUE - 414)) | (1L << (PCTFREE - 414)) | (1L << (REGENERATE - 414)) | (1L << (MASK - 414)) | (1L << (ENABLE - 414)))) != 0) || ((((_la - 478)) & ~0x3f) == 0 && ((1L << (_la - 478)) & ((1L << (PERMISSION - 478)) | (1L << (ATOMIC - 478)) | (1L << (SQLEXCEPTION - 478)) | (1L << (MERGE - 478)) | (1L << (MATCHED - 478)) | (1L << (SQLSTATE - 478)) | (1L << (MESSAGE_TEXT - 478)) | (1L << (OVERRIDING - 478)) | (1L << (PORTION - 478)) | (1L << (DB2SQL - 478)) | (1L << (DEBUG - 478)) | (1L << (GENERAL - 478)) | (1L << (MODE_ - 478)) | (1L << (REXX - 478)) | (1L << (CACHE - 478)) | (1L << (CYCLE - 478)) | (1L << (INCREMENT - 478)) | (1L << (RESTART - 478)) | (1L << (DATACLAS - 478)) | (1L << (MGMTCLAS - 478)) | (1L << (REMOVE - 478)) | (1L << (STORCLAS - 478)) | (1L << (ACCESS - 478)) | (1L << (ACTIVATE - 478)) | (1L << (ALWAYS - 478)) | (1L << (APPEND - 478)) | (1L << (ARCHIVE - 478)) | (1L << (BUSINESS - 478)) | (1L << (CASCADE - 478)) | (1L << (CHANGES - 478)) | (1L << (CONTROL - 478)) | (1L << (DEACTIVATE - 478)) | (1L << (DEFERRED - 478)) | (1L << (EACH - 478)) | (1L << (ENFORCED - 478)) | (1L << (EXTRA - 478)) | (1L << (FOREIGN - 478)) | (1L << (HIDDEN_ - 478)) | (1L << (HISTORY - 478)) | (1L << (ID - 478)) | (1L << (IDENTITY - 478)) | (1L << (IMPLICITLY - 478)) | (1L << (INITIALLY - 478)) | (1L << (INLINE - 478)) | (1L << (OPERATION - 478)) | (1L << (ORGANIZE - 478)) | (1L << (OVERLAPS - 478)) | (1L << (PACKAGE_NAME - 478)) | (1L << (PACKAGE_SCHEMA - 478)) | (1L << (PACKAGE_VERSION - 478)) | (1L << (PRIMARY - 478)) | (1L << (RESET - 478)) | (1L << (ROTATE - 478)) | (1L << (START - 478)) | (1L << (SYSIBM - 478)) | (1L << (TRANSACTION - 478)) | (1L << (XMLSCHEMA - 478)) | (1L << (ELEMENT - 478)) | (1L << (URL - 478)) | (1L << (NAMESPACE - 478)) | (1L << (LOCATION - 478)) | (1L << (SYSXSR - 478)) | (1L << (ALGORITHM - 478)) | (1L << (FIXEDLENGTH - 478)))) != 0) || ((((_la - 542)) & ~0x3f) == 0 && ((1L << (_la - 542)) & ((1L << (HUFFMAN - 542)) | (1L << (LOB - 542)) | (1L << (LOG - 542)) | (1L << (LOGGED - 542)) | (1L << (MAXPARTITIONS - 542)) | (1L << (MAXROWS - 542)) | (1L << (MEMBER - 542)) | (1L << (MOVE - 542)) | (1L << (PAGE - 542)) | (1L << (PAGENUM - 542)) | (1L << (PENDING - 542)) | (1L << (RELATIVE - 542)) | (1L << (SEGSIZE - 542)) | (1L << (TRACKMOD - 542)) | (1L << (ADDRESS - 542)) | (1L << (ATTRIBUTES - 542)) | (1L << (AUTHENTICATION - 542)) | (1L << (AUTHID - 542)) | (1L << (CONTEXT - 542)) | (1L << (JOBNAME - 542)) | (1L << (OWNER - 542)) | (1L << (PROFILE - 542)) | (1L << (QUALIFIER - 542)) | (1L << (SERVAUTH - 542)) | (1L << (TRUSTED - 542)) | (1L << (SECTION - 542)) | (1L << (ACTIVE - 542)) | (1L << (VERSION - 542)) | (1L << (ALIAS - 542)) | (1L << (WORK - 542)) | (1L << (WORKFILE - 542)) | (1L << (SYSDEFLT - 542)) | (1L << (NULTERM - 542)) | (1L << (STRUCTURE - 542)) | (1L << (GENERIC - 542)) | (1L << (TEMPORARY - 542)) | (1L << (DEFER - 542)) | (1L << (DEFINE - 542)) | (1L << (EXCLUDE - 542)) | (1L << (GENERATE - 542)) | (1L << (KEYS - 542)) | (1L << (XMLPATTERN - 542)) | (1L << (SIZE - 542)) | (1L << (EVERY - 542)) | (1L << (ABSOLUTE - 542)) | (1L << (ACCELERATOR - 542)) | (1L << (EXCLUDING - 542)) | (1L << (INCLUDING - 542)) | (1L << (DEFAULTS - 542)) | (1L << (MODIFIERS - 542)) | (1L << (OPTION - 542)) | (1L << (PRESERVE - 542)) | (1L << (BOTH - 542)) | (1L << (DESCRIBE - 542)) | (1L << (LABELS - 542)) | (1L << (NAMES - 542)) | (1L << (OUTPUT - 542)) | (1L << (EXCHANGE - 542)) | (1L << (STABILIZED - 542)) | (1L << (STMTCACHE - 542)) | (1L << (STMTID - 542)) | (1L << (STMTTOKEN - 542)) | (1L << (STARTING - 542)) | (1L << (CATALOG_NAME - 542)))) != 0) || ((((_la - 606)) & ~0x3f) == 0 && ((1L << (_la - 606)) & ((1L << (CONDITION_NUMBER - 606)) | (1L << (CURSOR_NAME - 606)) | (1L << (DB2_AUTHENTICATION_TYPE - 606)) | (1L << (DB2_AUTHORIZATION_ID - 606)) | (1L << (DB2_CONNECTION_STATE - 606)) | (1L << (DB2_CONNECTION_STATUS - 606)) | (1L << (DB2_ENCRYPTION_TYPE - 606)) | (1L << (DB2_ERROR_CODE1 - 606)) | (1L << (DB2_ERROR_CODE2 - 606)) | (1L << (DB2_ERROR_CODE3 - 606)) | (1L << (DB2_ERROR_CODE4 - 606)) | (1L << (DB2_GET_DIAGNOSTICS_DIAGNOSTICS - 606)) | (1L << (DB2_INTERNAL_ERROR_POINTER - 606)) | (1L << (DB2_LAST_ROW - 606)) | (1L << (DB2_LINE_NUMBER - 606)) | (1L << (DB2_MESSAGE_ID - 606)) | (1L << (DB2_MODULE_DETECTING_ERROR - 606)) | (1L << (DB2_NUMBER_PARAMETER_MARKERS - 606)) | (1L << (DB2_NUMBER_RESULT_SETS - 606)) | (1L << (DB2_NUMBER_ROWS - 606)) | (1L << (DB2_ORDINAL_TOKEN_ - 606)) | (1L << (DB2_PRODUCT_ID - 606)) | (1L << (DB2_REASON_CODE - 606)) | (1L << (DB2_RETURNED_SQLCODE - 606)) | (1L << (DB2_RETURN_STATUS - 606)) | (1L << (DB2_ROW_NUMBER - 606)) | (1L << (DB2_SERVER_CLASS_NAME - 606)) | (1L << (DB2_SQL_ATTR_CURSOR_HOLD - 606)) | (1L << (DB2_SQL_ATTR_CURSOR_ROWSET - 606)) | (1L << (DB2_SQL_ATTR_CURSOR_SCROLLABLE - 606)) | (1L << (DB2_SQL_ATTR_CURSOR_SENSITIVITY - 606)) | (1L << (DB2_SQL_ATTR_CURSOR_TYPE - 606)) | (1L << (DB2_SQLERRD1 - 606)) | (1L << (DB2_SQLERRD2 - 606)) | (1L << (DB2_SQLERRD3 - 606)) | (1L << (DB2_SQLERRD4 - 606)) | (1L << (DB2_SQLERRD5 - 606)) | (1L << (DB2_SQLERRD6 - 606)) | (1L << (DB2_SQLERRD_SET - 606)) | (1L << (DB2_SQL_NESTING_LEVEL - 606)) | (1L << (DB2_TOKEN_COUNT - 606)) | (1L << (DIAGNOSTICS - 606)) | (1L << (MORE_ - 606)) | (1L << (NUMBER - 606)) | (1L << (RETURNED_SQLSTATE - 606)) | (1L << (ROW_COUNT - 606)) | (1L << (SERVER_NAME - 606)) | (1L << (STACKED - 606)) | (1L << (CREATETAB - 606)) | (1L << (CREATETS - 606)) | (1L << (DBADM - 606)) | (1L << (DBCTRL - 606)) | (1L << (DBMAINT - 606)) | (1L << (DISPLAYDB - 606)) | (1L << (IMAGCOPY - 606)) | (1L << (LOAD - 606)) | (1L << (PACKADM - 606)) | (1L << (RECOVERDB - 606)) | (1L << (REORG - 606)) | (1L << (REPAIR - 606)) | (1L << (STARTDB - 606)) | (1L << (STATS - 606)) | (1L << (STOPDB - 606)))) != 0) || ((((_la - 670)) & ~0x3f) == 0 && ((1L << (_la - 670)) & ((1L << (BIND - 670)) | (1L << (ALTERIN - 670)) | (1L << (CREATEIN - 670)) | (1L << (DROPIN - 670)) | (1L << (USAGE - 670)) | (1L << (ACCESSCTRL - 670)) | (1L << (BINDADD - 670)) | (1L << (BINDAGENT - 670)) | (1L << (BSDS - 670)) | (1L << (CREATEALIAS - 670)) | (1L << (CREATEDBA - 670)) | (1L << (CREATEDBC - 670)) | (1L << (CREATE_SECURE_OBJECT - 670)) | (1L << (CREATESG - 670)) | (1L << (CREATETMTAB - 670)) | (1L << (DATAACCESS - 670)) | (1L << (DEBUGSESSION - 670)) | (1L << (DISPLAY - 670)) | (1L << (MONITOR1 - 670)) | (1L << (MONITOR2 - 670)) | (1L << (RECOVER - 670)) | (1L << (SQLADM - 670)) | (1L << (STOPALL - 670)) | (1L << (STOSPACE - 670)) | (1L << (SYSADM - 670)) | (1L << (SYSCTRL - 670)) | (1L << (SYSOPR - 670)) | (1L << (TRACE - 670)) | (1L << (UNLOAD - 670)) | (1L << (WRITE - 670)) | (1L << (ABS - 670)) | (1L << (ABSVAL - 670)) | (1L << (ACOS - 670)) | (1L << (ADD_DAYS - 670)) | (1L << (ADD_MONTHS - 670)) | (1L << (ARRAY_DELETE - 670)) | (1L << (ARRAY_FIRST - 670)) | (1L << (ARRAY_LAST - 670)) | (1L << (ARRAY_NEXT - 670)) | (1L << (ARRAY_PRIOR - 670)) | (1L << (ARRAY_TRIM - 670)) | (1L << (ASCII - 670)) | (1L << (ASCII_CHR - 670)) | (1L << (ASCIISTR - 670)) | (1L << (ASCII_STR - 670)) | (1L << (ASIN - 670)) | (1L << (ATAN - 670)) | (1L << (ATAN2 - 670)) | (1L << (ATANH - 670)) | (1L << (BIGINT - 670)) | (1L << (BINARY - 670)) | (1L << (BITAND - 670)) | (1L << (BITANDNOT - 670)) | (1L << (BITNOT - 670)) | (1L << (BITOR - 670)) | (1L << (BITXOR - 670)) | (1L << (BLOB - 670)) | (1L << (BTRIM - 670)) | (1L << (CARDINALITY - 670)) | (1L << (CCSID_ENCODING - 670)) | (1L << (CEIL - 670)) | (1L << (CEILING - 670)) | (1L << (CHAR9 - 670)) | (1L << (CHARACTER_LENGTH - 670)))) != 0) || ((((_la - 734)) & ~0x3f) == 0 && ((1L << (_la - 734)) & ((1L << (CHAR_LENGTH - 734)) | (1L << (CHR - 734)) | (1L << (CLOB - 734)) | (1L << (COALESCE - 734)) | (1L << (COLLATION_KEY - 734)) | (1L << (COMPARE_DECFLOAT - 734)) | (1L << (COS - 734)) | (1L << (COSH - 734)) | (1L << (DATE - 734)) | (1L << (DAYOFMONTH - 734)) | (1L << (DAYOFWEEK - 734)) | (1L << (DAYOFWEEK_ISO - 734)) | (1L << (DAYOFYEAR - 734)) | (1L << (DAYS_BETWEEN - 734)) | (1L << (DBCLOB - 734)) | (1L << (DEC - 734)) | (1L << (DECFLOAT - 734)) | (1L << (DECFLOAT_FORMAT - 734)) | (1L << (DECFLOAT_SORTKEY - 734)) | (1L << (DECIMAL - 734)) | (1L << (DECODE - 734)) | (1L << (DECRYPT_BINARY - 734)) | (1L << (DECRYPT_BIT - 734)) | (1L << (DECRYPT_CHAR - 734)) | (1L << (DECRYPT_DATAKEY_BIGINT - 734)) | (1L << (DECRYPT_DATAKEY_BIT - 734)) | (1L << (DECRYPT_DATAKEY_CLOB - 734)) | (1L << (DECRYPT_DATAKEY_DBCLOB - 734)) | (1L << (DECRYPT_DATAKEY_DECIMAL - 734)) | (1L << (DECRYPT_DATAKEY_INTEGER - 734)) | (1L << (DECRYPT_DATAKEY_VARCHAR - 734)) | (1L << (DECRYPT_DATAKEY_VARGRAPHIC - 734)) | (1L << (DECRYPT_DB - 734)) | (1L << (DEGREES - 734)) | (1L << (DIFFERENCE - 734)) | (1L << (DIGITS - 734)) | (1L << (DOUBLE_PRECISION - 734)) | (1L << (DSN_XMLVALIDATE - 734)) | (1L << (EBCDIC_CHR - 734)) | (1L << (EBCDIC_STR - 734)) | (1L << (ENCRYPT_DATAKEY - 734)) | (1L << (ENCRYPT_TDES - 734)) | (1L << (EXP - 734)) | (1L << (EXTRACT - 734)) | (1L << (FLOAT - 734)) | (1L << (FLOOR - 734)) | (1L << (GENERATE_UNIQUE - 734)) | (1L << (GENERATE_UNIQUE_BINARY - 734)) | (1L << (GETHINT - 734)) | (1L << (GETVARIABLE - 734)) | (1L << (GRAPHIC - 734)) | (1L << (GREATEST - 734)) | (1L << (HASH - 734)) | (1L << (HASH_CRC32 - 734)) | (1L << (HASH_MD5 - 734)) | (1L << (HASH_SHA1 - 734)) | (1L << (HASH_SHA256 - 734)) | (1L << (HEX - 734)) | (1L << (IDENTITY_VAL_LOCAL - 734)) | (1L << (IFNULL - 734)) | (1L << (INSTR - 734)) | (1L << (INT - 734)) | (1L << (INTEGER - 734)) | (1L << (JULIAN_DAY - 734)))) != 0) || ((((_la - 798)) & ~0x3f) == 0 && ((1L << (_la - 798)) & ((1L << (LAST_DAY - 798)) | (1L << (LCASE - 798)) | (1L << (LEAST - 798)) | (1L << (LENGTH - 798)) | (1L << (LN - 798)) | (1L << (LOCATE - 798)) | (1L << (LOCATE_IN_STRING - 798)) | (1L << (LOG10 - 798)) | (1L << (LOWER - 798)) | (1L << (LPAD - 798)) | (1L << (LTRIM - 798)) | (1L << (MAX - 798)) | (1L << (MAX_CARDINALITY - 798)) | (1L << (MIDNIGHT_SECONDS - 798)) | (1L << (MIN - 798)) | (1L << (MINUTE - 798)) | (1L << (MOD - 798)) | (1L << (MONTHS_BETWEEN - 798)) | (1L << (MQREAD - 798)) | (1L << (MQREADCLOB - 798)) | (1L << (MQRECEIVE - 798)) | (1L << (MQRECEIVECLOB - 798)) | (1L << (MQSEND - 798)) | (1L << (MULTIPLY_ALT - 798)) | (1L << (NEXT_DAY - 798)) | (1L << (NEXT_MONTH - 798)) | (1L << (NORMALIZE_DECFLOAT - 798)) | (1L << (NORMALIZE_STRING - 798)) | (1L << (NULLIF - 798)) | (1L << (NVL - 798)) | (1L << (OVERLAY - 798)) | (1L << (PACK - 798)) | (1L << (POSITION - 798)) | (1L << (POSSTR - 798)) | (1L << (POW - 798)) | (1L << (POWER - 798)) | (1L << (QUANTIZE - 798)) | (1L << (QUARTER - 798)) | (1L << (RADIANS - 798)) | (1L << (RAISE_ERROR - 798)) | (1L << (RAND - 798)) | (1L << (RANDOM - 798)) | (1L << (REAL - 798)) | (1L << (REGEXP_COUNT - 798)) | (1L << (REGEXP_INSTR - 798)) | (1L << (REGEXP_LIKE - 798)) | (1L << (REGEXP_REPLACE - 798)) | (1L << (REGEXP_SUBSTR - 798)) | (1L << (REPLACE - 798)) | (1L << (RID - 798)) | (1L << (ROUND - 798)) | (1L << (ROUND_TIMESTAMP - 798)) | (1L << (ROWID - 798)) | (1L << (RPAD - 798)) | (1L << (RTRIM - 798)) | (1L << (SCORE - 798)) | (1L << (SIGN - 798)) | (1L << (SIN - 798)) | (1L << (SINH - 798)) | (1L << (SMALLINT - 798)) | (1L << (SOAPHTTPC - 798)) | (1L << (SOAPHTTPNC - 798)) | (1L << (SOAPHTTPNV - 798)) | (1L << (SOAPHTTPV - 798)))) != 0) || ((((_la - 862)) & ~0x3f) == 0 && ((1L << (_la - 862)) & ((1L << (SOUNDEX - 862)) | (1L << (SPACE - 862)) | (1L << (SQRT - 862)) | (1L << (STRIP - 862)) | (1L << (STRLEFT - 862)) | (1L << (STRPOS - 862)) | (1L << (STRRIGHT - 862)) | (1L << (SUBSTR - 862)) | (1L << (SUBSTRING - 862)) | (1L << (TAN - 862)) | (1L << (TANH - 862)) | (1L << (TIME - 862)) | (1L << (TIMESTAMP - 862)) | (1L << (TIMESTAMPADD - 862)) | (1L << (TIMESTAMPDIFF - 862)) | (1L << (TIMESTAMP_FORMAT - 862)) | (1L << (TIMESTAMP_ISO - 862)) | (1L << (TIMESTAMP_TZ - 862)) | (1L << (TO_CHAR - 862)) | (1L << (TO_CLOB - 862)) | (1L << (TO_DATE - 862)) | (1L << (TO_NUMBER - 862)) | (1L << (TOTALORDER - 862)) | (1L << (TO_TIMESTAMP - 862)) | (1L << (TRANSLATE - 862)) | (1L << (TRIM - 862)) | (1L << (TRIM_ARRAY - 862)) | (1L << (TRUNC - 862)) | (1L << (TRUNC_TIMESTAMP - 862)) | (1L << (UCASE - 862)) | (1L << (UNICODE - 862)) | (1L << (UNICODE_STR - 862)) | (1L << (UNISTR - 862)) | (1L << (UPPER - 862)) | (1L << (VARBINARY - 862)) | (1L << (VARCHAR - 862)) | (1L << (VARCHAR9 - 862)) | (1L << (VARCHAR_BIT_FORMAT - 862)) | (1L << (VARCHAR_FORMAT - 862)) | (1L << (VARGRAPHIC - 862)) | (1L << (VERIFY_GROUP_FOR_USER - 862)) | (1L << (VERIFY_ROLE_FOR_USER - 862)) | (1L << (VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER - 862)) | (1L << (WEEK - 862)) | (1L << (WEEK_ISO - 862)) | (1L << (WRAP - 862)) | (1L << (XMLATTRIBUTES - 862)) | (1L << (XMLCOMMENT - 862)) | (1L << (XMLCONCAT - 862)) | (1L << (XMLDOCUMENT - 862)) | (1L << (XMLELEMENT - 862)) | (1L << (XMLFOREST - 862)) | (1L << (XMLMODIFY - 862)) | (1L << (XMLPARSE - 862)) | (1L << (XMLPI - 862)) | (1L << (XMLQUERY - 862)) | (1L << (XMLSERIALIZE - 862)) | (1L << (XMLTEXT - 862)) | (1L << (XMLXSROBJECTID - 862)) | (1L << (XSLTRANSFORM - 862)) | (1L << (CURRENT_ACCELERATOR - 862)) | (1L << (CURRENT_APPLICATION_COMPATIBILITY - 862)) | (1L << (CURRENT_APPLICATION_ENCODING_SCHEME - 862)) | (1L << (CURRENT_CLIENT_ACCTNG - 862)))) != 0) || ((((_la - 926)) & ~0x3f) == 0 && ((1L << (_la - 926)) & ((1L << (CURRENT_CLIENT_APPLNAME - 926)) | (1L << (CURRENT_CLIENT_CORR_TOKEN - 926)) | (1L << (CURRENT_CLIENT_USERID - 926)) | (1L << (CURRENT_CLIENT_WRKSTNNAME - 926)) | (1L << (CURRENT_DATE - 926)) | (1L << (CURRENT_DEBUG_MODE - 926)) | (1L << (CURRENT_DECFLOAT_ROUNDING_MODE - 926)) | (1L << (CURRENT_DEGREE - 926)) | (1L << (CURRENT_EXPLAIN_MODE - 926)) | (1L << (CURRENT_GET_ACCEL_ARCHIVE - 926)) | (1L << (CURRENT_LOCALE_LC_CTYPE - 926)) | (1L << (CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION - 926)) | (1L << (CURRENT_MEMBER - 926)) | (1L << (CURRENT_OPTIMIZATION_HINT - 926)) | (1L << (CURRENT_PACKAGE_PATH - 926)) | (1L << (CURRENT_PACKAGESET - 926)) | (1L << (CURRENT_PATH - 926)) | (1L << (CURRENT_PRECISION - 926)) | (1L << (CURRENT_QUERY_ACCELERATION - 926)) | (1L << (CURRENT_QUERY_ACCELERATION_WAITFORDATA - 926)) | (1L << (CURRENT_REFRESH_AGE - 926)) | (1L << (CURRENT_ROUTINE_VERSION - 926)) | (1L << (CURRENT_RULES - 926)) | (1L << (CURRENT_SCHEMA - 926)) | (1L << (CURRENT_SERVER - 926)) | (1L << (CURRENT_SQLID - 926)) | (1L << (CURRENT_TEMPORAL_BUSINESS_TIME - 926)) | (1L << (CURRENT_TEMPORAL_SYSTEM_TIME - 926)) | (1L << (CURRENT_TIME - 926)) | (1L << (CURRENT_TIMESTAMP - 926)) | (1L << (CURRENT_TIME_ZONE - 926)) | (1L << (ENCRYPTION_PASSWORD - 926)) | (1L << (SESSION_TIME_ZONE - 926)) | (1L << (SESSION_USER - 926)) | (1L << (USER - 926)) | (1L << (ADMIN_TASK_LIST - 926)) | (1L << (ADMIN_TASK_OUTPUT - 926)) | (1L << (ADMIN_TASK_STATUS - 926)) | (1L << (BLOCKING_THREADS - 926)) | (1L << (MQREADALL - 926)) | (1L << (MQREADALLCLOB - 926)) | (1L << (MQRECEIVEALL - 926)) | (1L << (MQRECEIVEALLCLOB - 926)) | (1L << (XMLTABLE - 926)) | (1L << (SQLIDENTIFIER - 926)))) != 0)) {
				{
				setState(1784);
				parameterDeclaration1();
				setState(1789);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1785);
					match(COMMA);
					setState(1786);
					parameterDeclaration1();
					}
					}
					setState(1791);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(1794);
			match(RPAREN);
			setState(1796); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1795);
				createFunctionStatementExternalScalarOptions();
				}
				}
				setState(1798); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 41)) & ~0x3f) == 0 && ((1L << (_la - 41)) & ((1L << (ALLOW - 41)) | (1L << (ASUTIME - 41)) | (1L << (COLLID - 41)) | (1L << (CONTAINS - 41)) | (1L << (CONTINUE - 41)) | (1L << (DBINFO - 41)) | (1L << (DEFAULT - 41)) | (1L << (DETERMINISTIC - 41)) | (1L << (DISALLOW - 41)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (EXTERNAL - 128)) | (1L << (FENCED - 128)) | (1L << (FINAL - 128)) | (1L << (INHERIT - 128)) | (1L << (LANGUAGE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (MODIFIES - 193)) | (1L << (NO - 193)) | (1L << (NOT - 193)) | (1L << (NULL - 193)) | (1L << (PACKAGE - 193)) | (1L << (PARAMETER - 193)) | (1L << (PROGRAM - 193)) | (1L << (READS - 193)) | (1L << (RETURNS - 193)))) != 0) || ((((_la - 266)) & ~0x3f) == 0 && ((1L << (_la - 266)) & ((1L << (RUN - 266)) | (1L << (SCRATCHPAD - 266)) | (1L << (SECURITY - 266)) | (1L << (SPECIFIC - 266)) | (1L << (STATIC - 266)) | (1L << (STAY - 266)) | (1L << (VARIANT - 266)) | (1L << (WLM - 266)))) != 0) || ((((_la - 442)) & ~0x3f) == 0 && ((1L << (_la - 442)) & ((1L << (CALLED - 442)) | (1L << (SECURED - 442)) | (1L << (STOP - 442)))) != 0) || _la==CARDINALITY );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFunctionStatementExternalTableContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DB2zSQLParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(DB2zSQLParser.FUNCTION, 0); }
		public FunctionNameContext functionName() {
			return getRuleContext(FunctionNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<ParameterDeclaration1Context> parameterDeclaration1() {
			return getRuleContexts(ParameterDeclaration1Context.class);
		}
		public ParameterDeclaration1Context parameterDeclaration1(int i) {
			return getRuleContext(ParameterDeclaration1Context.class,i);
		}
		public List<CreateFunctionStatementExternalTableOptionsContext> createFunctionStatementExternalTableOptions() {
			return getRuleContexts(CreateFunctionStatementExternalTableOptionsContext.class);
		}
		public CreateFunctionStatementExternalTableOptionsContext createFunctionStatementExternalTableOptions(int i) {
			return getRuleContext(CreateFunctionStatementExternalTableOptionsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public CreateFunctionStatementExternalTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunctionStatementExternalTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateFunctionStatementExternalTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateFunctionStatementExternalTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateFunctionStatementExternalTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFunctionStatementExternalTableContext createFunctionStatementExternalTable() throws RecognitionException {
		CreateFunctionStatementExternalTableContext _localctx = new CreateFunctionStatementExternalTableContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_createFunctionStatementExternalTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1800);
			match(CREATE);
			setState(1801);
			match(FUNCTION);
			setState(1802);
			functionName();
			setState(1803);
			match(LPAREN);
			setState(1812);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & ((1L << (INSTEAD - 30)) | (1L << (NEW - 30)) | (1L << (NEW_TABLE - 30)) | (1L << (OLD_TABLE - 30)) | (1L << (REFERENCING - 30)) | (1L << (BASED - 30)) | (1L << (UPON - 30)) | (1L << (ADD - 30)) | (1L << (AFTER - 30)) | (1L << (ALL - 30)) | (1L << (ALLOCATE - 30)) | (1L << (ALLOW - 30)) | (1L << (ALTER - 30)) | (1L << (ALTERAND - 30)) | (1L << (ANY - 30)) | (1L << (ARRAY - 30)) | (1L << (ARRAY_EXISTS - 30)) | (1L << (AS - 30)) | (1L << (ASENSITIVE - 30)) | (1L << (ASSOCIATE - 30)) | (1L << (ASUTIME - 30)) | (1L << (AT - 30)) | (1L << (AUDIT - 30)) | (1L << (AUX - 30)) | (1L << (AUXILIARY - 30)) | (1L << (BEFORE - 30)) | (1L << (BEGIN - 30)) | (1L << (BETWEEN - 30)) | (1L << (BUFFERPOOL - 30)) | (1L << (BUFFERPOOLS - 30)) | (1L << (BY - 30)) | (1L << (CALL - 30)) | (1L << (CAPTURE - 30)) | (1L << (CASCADED - 30)) | (1L << (CASE - 30)) | (1L << (CAST - 30)) | (1L << (CCSID - 30)) | (1L << (CHAR - 30)) | (1L << (CHARACTER - 30)) | (1L << (CHECK - 30)) | (1L << (CLONE - 30)) | (1L << (CLOSE - 30)) | (1L << (CLUSTER - 30)) | (1L << (COLLECTION - 30)) | (1L << (COLLID - 30)) | (1L << (COLUMN - 30)) | (1L << (COMMENT - 30)) | (1L << (COMMIT - 30)) | (1L << (CONCAT - 30)) | (1L << (CONDITION - 30)) | (1L << (CONNECT - 30)) | (1L << (CONNECTION - 30)) | (1L << (CONSTRAINT - 30)) | (1L << (CONTAINS - 30)) | (1L << (CONTENT - 30)) | (1L << (CONTINUE - 30)) | (1L << (CREATE - 30)) | (1L << (CUBE - 30)) | (1L << (CURRENT - 30)) | (1L << (CURRENT_LC_CTYPE - 30)) | (1L << (CURRVAL - 30)) | (1L << (CURSOR - 30)) | (1L << (DATA - 30)) | (1L << (DATABASE - 30)))) != 0) || ((((_la - 94)) & ~0x3f) == 0 && ((1L << (_la - 94)) & ((1L << (DAY - 94)) | (1L << (DAYS - 94)) | (1L << (DBINFO - 94)) | (1L << (DECLARE - 94)) | (1L << (DEFAULT - 94)) | (1L << (DELETE - 94)) | (1L << (DESCRIPTOR - 94)) | (1L << (DETERMINISTIC - 94)) | (1L << (DISABLE - 94)) | (1L << (DISALLOW - 94)) | (1L << (DISTINCT - 94)) | (1L << (DO - 94)) | (1L << (DOCUMENT - 94)) | (1L << (DOUBLE - 94)) | (1L << (DROP - 94)) | (1L << (DSSIZE - 94)) | (1L << (DYNAMIC - 94)) | (1L << (EDITPROC - 94)) | (1L << (ELSE - 94)) | (1L << (ELSEIF - 94)) | (1L << (ENCODING - 94)) | (1L << (ENCRYPTION - 94)) | (1L << (END - 94)) | (1L << (END_EXEC - 94)) | (1L << (ENDING - 94)) | (1L << (ERASE - 94)) | (1L << (ESCAPE - 94)) | (1L << (EXCEPT - 94)) | (1L << (EXCEPTION - 94)) | (1L << (EXEC_SQL - 94)) | (1L << (EXECUTE - 94)) | (1L << (EXISTS - 94)) | (1L << (EXIT - 94)) | (1L << (EXPLAIN - 94)) | (1L << (EXTERNAL - 94)) | (1L << (FENCED - 94)) | (1L << (FETCH - 94)) | (1L << (FIELDPROC - 94)) | (1L << (FINAL - 94)) | (1L << (FIRST - 94)) | (1L << (FOR - 94)) | (1L << (FREE - 94)) | (1L << (FROM - 94)) | (1L << (FULL - 94)) | (1L << (FUNCTION - 94)) | (1L << (GENERATED - 94)) | (1L << (GET - 94)) | (1L << (GLOBAL - 94)) | (1L << (GO - 94)) | (1L << (GOTO - 94)) | (1L << (GRANT - 94)) | (1L << (GROUP - 94)) | (1L << (HANDLER - 94)) | (1L << (HAVING - 94)) | (1L << (HOLD - 94)) | (1L << (HOUR - 94)) | (1L << (HOURS - 94)) | (1L << (IF - 94)) | (1L << (IMMEDIATE - 94)) | (1L << (IN - 94)) | (1L << (INCLUSIVE - 94)) | (1L << (INDEX - 94)) | (1L << (INDEXBP - 94)) | (1L << (INHERIT - 94)))) != 0) || ((((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & ((1L << (INNER - 158)) | (1L << (INOUT - 158)) | (1L << (INSENSITIVE - 158)) | (1L << (INSERT - 158)) | (1L << (INTERSECT - 158)) | (1L << (INTO - 158)) | (1L << (IS - 158)) | (1L << (ISOBID - 158)) | (1L << (ITERATE - 158)) | (1L << (JAR - 158)) | (1L << (JOIN - 158)) | (1L << (KEEP - 158)) | (1L << (KEY - 158)) | (1L << (LABEL - 158)) | (1L << (LANGUAGE - 158)) | (1L << (LAST - 158)) | (1L << (LC_CTYPE - 158)) | (1L << (LEAVE - 158)) | (1L << (LEFT - 158)) | (1L << (LIKE - 158)) | (1L << (LIMIT - 158)) | (1L << (LOCAL - 158)) | (1L << (LOCALE - 158)) | (1L << (LOCATOR - 158)) | (1L << (LOCATORS - 158)) | (1L << (LOCK - 158)) | (1L << (LOCKMAX - 158)) | (1L << (LOCKSIZE - 158)) | (1L << (LONG - 158)) | (1L << (LOOP - 158)) | (1L << (MAINTAINED - 158)) | (1L << (MATERIALIZED - 158)) | (1L << (MICROSECOND - 158)) | (1L << (MICROSECONDS - 158)) | (1L << (MODIFIES - 158)) | (1L << (MONTH - 158)) | (1L << (MONTHS - 158)) | (1L << (NEXT - 158)) | (1L << (NEXTVAL - 158)) | (1L << (NO - 158)) | (1L << (NONE - 158)) | (1L << (NOT - 158)) | (1L << (NULL - 158)) | (1L << (NULLS - 158)) | (1L << (NUMPARTS - 158)) | (1L << (OBID - 158)) | (1L << (OF - 158)) | (1L << (OFFSET - 158)) | (1L << (OLD - 158)) | (1L << (ON - 158)) | (1L << (OPEN - 158)) | (1L << (OPTIMIZATION - 158)) | (1L << (OPTIMIZE - 158)) | (1L << (OR - 158)) | (1L << (ORDER - 158)) | (1L << (ORGANIZATION - 158)) | (1L << (OUT - 158)) | (1L << (OUTER - 158)) | (1L << (PACKAGE - 158)) | (1L << (PADDED - 158)) | (1L << (PARAMETER - 158)) | (1L << (PART - 158)) | (1L << (PARTITION - 158)))) != 0) || ((((_la - 222)) & ~0x3f) == 0 && ((1L << (_la - 222)) & ((1L << (PARTITIONED - 222)) | (1L << (PARTITIONING - 222)) | (1L << (PATH - 222)) | (1L << (PERIOD - 222)) | (1L << (PIECESIZE - 222)) | (1L << (PLAN - 222)) | (1L << (PRECISION - 222)) | (1L << (PREPARE - 222)) | (1L << (PREVVAL - 222)) | (1L << (PRIOR - 222)) | (1L << (PRIQTY - 222)) | (1L << (PRIVILEGES - 222)) | (1L << (PROCEDURE - 222)) | (1L << (PROGRAM - 222)) | (1L << (PSID - 222)) | (1L << (PUBLIC - 222)) | (1L << (QUERY - 222)) | (1L << (QUERYNO - 222)) | (1L << (READS - 222)) | (1L << (REFERENCES - 222)) | (1L << (REFRESH - 222)) | (1L << (RELEASE - 222)) | (1L << (RENAME - 222)) | (1L << (REPEAT - 222)) | (1L << (RESIGNAL - 222)) | (1L << (RESTRICT - 222)) | (1L << (RESULT - 222)) | (1L << (RESULT_SET_LOCATOR - 222)) | (1L << (RETURN - 222)) | (1L << (RETURNS - 222)) | (1L << (REVOKE - 222)) | (1L << (RIGHT - 222)) | (1L << (ROLE - 222)) | (1L << (ROLLBACK - 222)) | (1L << (ROLLUP - 222)) | (1L << (ROUND_CEILING - 222)) | (1L << (ROUND_DOWN - 222)) | (1L << (ROUND_FLOOR - 222)) | (1L << (ROUND_HALF_DOWN - 222)) | (1L << (ROUND_HALF_EVEN - 222)) | (1L << (ROUND_HALF_UP - 222)) | (1L << (ROUND_UP - 222)) | (1L << (ROW - 222)) | (1L << (ROWSET - 222)) | (1L << (RUN - 222)) | (1L << (SAVEPOINT - 222)) | (1L << (SCHEMA - 222)) | (1L << (SCRATCHPAD - 222)) | (1L << (SECOND - 222)) | (1L << (SECONDS - 222)) | (1L << (SECQTY - 222)) | (1L << (SECURITY - 222)) | (1L << (SELECT - 222)) | (1L << (SENSITIVE - 222)) | (1L << (SEQUENCE - 222)) | (1L << (SET - 222)) | (1L << (SIGNAL - 222)) | (1L << (SIMPLE - 222)) | (1L << (SOME - 222)) | (1L << (SOURCE - 222)) | (1L << (SPECIFIC - 222)) | (1L << (STANDARD - 222)) | (1L << (STATEMENT - 222)) | (1L << (STATIC - 222)))) != 0) || ((((_la - 286)) & ~0x3f) == 0 && ((1L << (_la - 286)) & ((1L << (STAY - 286)) | (1L << (STOGROUP - 286)) | (1L << (STORES - 286)) | (1L << (STYLE - 286)) | (1L << (SUMMARY - 286)) | (1L << (SYNONYM - 286)) | (1L << (SYSDATE - 286)) | (1L << (SYSTEM - 286)) | (1L << (SYSTIMESTAMP - 286)) | (1L << (TABLE - 286)) | (1L << (TABLESPACE - 286)) | (1L << (THEN - 286)) | (1L << (TO - 286)) | (1L << (TRIGGER - 286)) | (1L << (TRUNCATE - 286)) | (1L << (TYPE - 286)) | (1L << (UNDO - 286)) | (1L << (UNION - 286)) | (1L << (UNIQUE - 286)) | (1L << (UNTIL - 286)) | (1L << (UPDATE - 286)) | (1L << (USING - 286)) | (1L << (VALIDPROC - 286)) | (1L << (VALUE - 286)) | (1L << (VALUES - 286)) | (1L << (VARIABLE - 286)) | (1L << (VARIANT - 286)) | (1L << (VCAT - 286)) | (1L << (VERSIONING - 286)) | (1L << (VIEW - 286)) | (1L << (VOLATILE - 286)) | (1L << (VOLUMES - 286)) | (1L << (WHEN - 286)) | (1L << (WHENEVER - 286)) | (1L << (WHERE - 286)) | (1L << (WHILE - 286)) | (1L << (WITH - 286)) | (1L << (WLM - 286)) | (1L << (XMLCAST - 286)) | (1L << (XMLEXISTS - 286)) | (1L << (XMLNAMESPACES - 286)) | (1L << (YEAR - 286)) | (1L << (YEARS - 286)) | (1L << (ZONE - 286)) | (1L << (AND - 286)) | (1L << (ARRAY_AGG - 286)) | (1L << (ASC - 286)) | (1L << (AVG - 286)) | (1L << (BIT - 286)) | (1L << (CHANGE - 286)) | (1L << (CODEUNITS16 - 286)) | (1L << (CODEUNITS32 - 286)) | (1L << (CORR - 286)) | (1L << (CORRELATION - 286)) | (1L << (COUNT - 286)) | (1L << (COUNT_BIG - 286)) | (1L << (COVAR - 286)) | (1L << (COVARIANCE - 286)) | (1L << (COVARIANCE_SAMP - 286)) | (1L << (COVAR_POP - 286)) | (1L << (COVAR_SAMP - 286)) | (1L << (CS - 286)) | (1L << (CUME_DIST - 286)) | (1L << (DENSE_RANK - 286)))) != 0) || ((((_la - 350)) & ~0x3f) == 0 && ((1L << (_la - 350)) & ((1L << (DESC - 350)) | (1L << (EBCDIC - 350)) | (1L << (EXCLUSIVE - 350)) | (1L << (FIRST_VALUE - 350)) | (1L << (FOLLOWING - 350)) | (1L << (GROUPING - 350)) | (1L << (IGNORE - 350)) | (1L << (INDICATOR - 350)) | (1L << (INPUT - 350)) | (1L << (ISNULL - 350)) | (1L << (LAG - 350)) | (1L << (LARGE - 350)) | (1L << (LAST_VALUE - 350)) | (1L << (LEAD - 350)) | (1L << (LISTAGG - 350)) | (1L << (LOCKED - 350)) | (1L << (LOCKS - 350)) | (1L << (MEDIAN - 350)) | (1L << (MINUTES - 350)) | (1L << (MIXED - 350)) | (1L << (NOTNULL - 350)) | (1L << (NTH_VALUE - 350)) | (1L << (NTILE - 350)) | (1L << (NUMERIC - 350)) | (1L << (OBJECT - 350)) | (1L << (OCTETS - 350)) | (1L << (ONLY - 350)) | (1L << (OVER - 350)) | (1L << (PASSING - 350)) | (1L << (PERCENTILE_CONT - 350)) | (1L << (PERCENTILE_DISC - 350)) | (1L << (PERCENT_RANK - 350)) | (1L << (PRECEDING - 350)) | (1L << (PREVIOUS - 350)) | (1L << (RANGE - 350)) | (1L << (RANK - 350)) | (1L << (RATIO_TO_REPORT - 350)) | (1L << (READ - 350)) | (1L << (REF - 350)) | (1L << (REGR_AVGX - 350)) | (1L << (REGR_AVGY - 350)) | (1L << (REGR_COUNT - 350)) | (1L << (REGR_ICPT - 350)) | (1L << (REGR_INTERCEPT - 350)) | (1L << (REGR_R2 - 350)) | (1L << (REGR_SLOPE - 350)) | (1L << (REGR_SXX - 350)) | (1L << (REGR_SXY - 350)) | (1L << (REGR_SYY - 350)) | (1L << (RESPECT - 350)) | (1L << (ROW_NUMBER - 350)) | (1L << (ROWS - 350)) | (1L << (RR - 350)) | (1L << (RS - 350)) | (1L << (SBCS - 350)) | (1L << (SELECTIVITY - 350)) | (1L << (SETS - 350)) | (1L << (SHARE - 350)) | (1L << (SKIP_ - 350)) | (1L << (STDDEV - 350)) | (1L << (STDDEV_POP - 350)) | (1L << (STDDEV_SAMP - 350)) | (1L << (SUM - 350)) | (1L << (TOKEN - 350)))) != 0) || ((((_la - 414)) & ~0x3f) == 0 && ((1L << (_la - 414)) & ((1L << (UNBOUNDED - 414)) | (1L << (UNPACK - 414)) | (1L << (UR - 414)) | (1L << (USE - 414)) | (1L << (VAR - 414)) | (1L << (VARIANCE - 414)) | (1L << (VARIANCE_SAMP - 414)) | (1L << (VAR_POP - 414)) | (1L << (VAR_SAMP - 414)) | (1L << (VARYING - 414)) | (1L << (WITHOUT - 414)) | (1L << (XML - 414)) | (1L << (XMLAGG - 414)) | (1L << (COLUMNS - 414)) | (1L << (SQLID - 414)) | (1L << (ORDINALITY - 414)) | (1L << (SYSTEM_TIME - 414)) | (1L << (BUSINESS_TIME - 414)) | (1L << (MULTIPLIER - 414)) | (1L << (UNNEST - 414)) | (1L << (CROSS - 414)) | (1L << (CALLER - 414)) | (1L << (CLIENT - 414)) | (1L << (POSITIONING - 414)) | (1L << (SCROLL - 414)) | (1L << (ACTION - 414)) | (1L << (ASSEMBLE - 414)) | (1L << (C_ - 414)) | (1L << (CALLED - 414)) | (1L << (COBOL - 414)) | (1L << (DB2 - 414)) | (1L << (DEFINER - 414)) | (1L << (DISPATCH - 414)) | (1L << (ENVIRONMENT - 414)) | (1L << (FAILURE - 414)) | (1L << (FAILURES - 414)) | (1L << (JAVA - 414)) | (1L << (MAIN - 414)) | (1L << (NAME - 414)) | (1L << (OPTIONS - 414)) | (1L << (PARALLEL - 414)) | (1L << (PLI - 414)) | (1L << (REGISTERS - 414)) | (1L << (RESIDENT - 414)) | (1L << (SECURED - 414)) | (1L << (SPECIAL - 414)) | (1L << (SQL - 414)) | (1L << (STOP - 414)) | (1L << (SUB - 414)) | (1L << (YES - 414)) | (1L << (APPLICATION - 414)) | (1L << (CHANGED - 414)) | (1L << (COMPATIBILITY - 414)) | (1L << (COMPRESS - 414)) | (1L << (COPY - 414)) | (1L << (FREEPAGE - 414)) | (1L << (GBPCACHE - 414)) | (1L << (INCLUDE - 414)) | (1L << (MAXVALUE - 414)) | (1L << (MINVALUE - 414)) | (1L << (PCTFREE - 414)) | (1L << (REGENERATE - 414)) | (1L << (MASK - 414)) | (1L << (ENABLE - 414)))) != 0) || ((((_la - 478)) & ~0x3f) == 0 && ((1L << (_la - 478)) & ((1L << (PERMISSION - 478)) | (1L << (ATOMIC - 478)) | (1L << (SQLEXCEPTION - 478)) | (1L << (MERGE - 478)) | (1L << (MATCHED - 478)) | (1L << (SQLSTATE - 478)) | (1L << (MESSAGE_TEXT - 478)) | (1L << (OVERRIDING - 478)) | (1L << (PORTION - 478)) | (1L << (DB2SQL - 478)) | (1L << (DEBUG - 478)) | (1L << (GENERAL - 478)) | (1L << (MODE_ - 478)) | (1L << (REXX - 478)) | (1L << (CACHE - 478)) | (1L << (CYCLE - 478)) | (1L << (INCREMENT - 478)) | (1L << (RESTART - 478)) | (1L << (DATACLAS - 478)) | (1L << (MGMTCLAS - 478)) | (1L << (REMOVE - 478)) | (1L << (STORCLAS - 478)) | (1L << (ACCESS - 478)) | (1L << (ACTIVATE - 478)) | (1L << (ALWAYS - 478)) | (1L << (APPEND - 478)) | (1L << (ARCHIVE - 478)) | (1L << (BUSINESS - 478)) | (1L << (CASCADE - 478)) | (1L << (CHANGES - 478)) | (1L << (CONTROL - 478)) | (1L << (DEACTIVATE - 478)) | (1L << (DEFERRED - 478)) | (1L << (EACH - 478)) | (1L << (ENFORCED - 478)) | (1L << (EXTRA - 478)) | (1L << (FOREIGN - 478)) | (1L << (HIDDEN_ - 478)) | (1L << (HISTORY - 478)) | (1L << (ID - 478)) | (1L << (IDENTITY - 478)) | (1L << (IMPLICITLY - 478)) | (1L << (INITIALLY - 478)) | (1L << (INLINE - 478)) | (1L << (OPERATION - 478)) | (1L << (ORGANIZE - 478)) | (1L << (OVERLAPS - 478)) | (1L << (PACKAGE_NAME - 478)) | (1L << (PACKAGE_SCHEMA - 478)) | (1L << (PACKAGE_VERSION - 478)) | (1L << (PRIMARY - 478)) | (1L << (RESET - 478)) | (1L << (ROTATE - 478)) | (1L << (START - 478)) | (1L << (SYSIBM - 478)) | (1L << (TRANSACTION - 478)) | (1L << (XMLSCHEMA - 478)) | (1L << (ELEMENT - 478)) | (1L << (URL - 478)) | (1L << (NAMESPACE - 478)) | (1L << (LOCATION - 478)) | (1L << (SYSXSR - 478)) | (1L << (ALGORITHM - 478)) | (1L << (FIXEDLENGTH - 478)))) != 0) || ((((_la - 542)) & ~0x3f) == 0 && ((1L << (_la - 542)) & ((1L << (HUFFMAN - 542)) | (1L << (LOB - 542)) | (1L << (LOG - 542)) | (1L << (LOGGED - 542)) | (1L << (MAXPARTITIONS - 542)) | (1L << (MAXROWS - 542)) | (1L << (MEMBER - 542)) | (1L << (MOVE - 542)) | (1L << (PAGE - 542)) | (1L << (PAGENUM - 542)) | (1L << (PENDING - 542)) | (1L << (RELATIVE - 542)) | (1L << (SEGSIZE - 542)) | (1L << (TRACKMOD - 542)) | (1L << (ADDRESS - 542)) | (1L << (ATTRIBUTES - 542)) | (1L << (AUTHENTICATION - 542)) | (1L << (AUTHID - 542)) | (1L << (CONTEXT - 542)) | (1L << (JOBNAME - 542)) | (1L << (OWNER - 542)) | (1L << (PROFILE - 542)) | (1L << (QUALIFIER - 542)) | (1L << (SERVAUTH - 542)) | (1L << (TRUSTED - 542)) | (1L << (SECTION - 542)) | (1L << (ACTIVE - 542)) | (1L << (VERSION - 542)) | (1L << (ALIAS - 542)) | (1L << (WORK - 542)) | (1L << (WORKFILE - 542)) | (1L << (SYSDEFLT - 542)) | (1L << (NULTERM - 542)) | (1L << (STRUCTURE - 542)) | (1L << (GENERIC - 542)) | (1L << (TEMPORARY - 542)) | (1L << (DEFER - 542)) | (1L << (DEFINE - 542)) | (1L << (EXCLUDE - 542)) | (1L << (GENERATE - 542)) | (1L << (KEYS - 542)) | (1L << (XMLPATTERN - 542)) | (1L << (SIZE - 542)) | (1L << (EVERY - 542)) | (1L << (ABSOLUTE - 542)) | (1L << (ACCELERATOR - 542)) | (1L << (EXCLUDING - 542)) | (1L << (INCLUDING - 542)) | (1L << (DEFAULTS - 542)) | (1L << (MODIFIERS - 542)) | (1L << (OPTION - 542)) | (1L << (PRESERVE - 542)) | (1L << (BOTH - 542)) | (1L << (DESCRIBE - 542)) | (1L << (LABELS - 542)) | (1L << (NAMES - 542)) | (1L << (OUTPUT - 542)) | (1L << (EXCHANGE - 542)) | (1L << (STABILIZED - 542)) | (1L << (STMTCACHE - 542)) | (1L << (STMTID - 542)) | (1L << (STMTTOKEN - 542)) | (1L << (STARTING - 542)) | (1L << (CATALOG_NAME - 542)))) != 0) || ((((_la - 606)) & ~0x3f) == 0 && ((1L << (_la - 606)) & ((1L << (CONDITION_NUMBER - 606)) | (1L << (CURSOR_NAME - 606)) | (1L << (DB2_AUTHENTICATION_TYPE - 606)) | (1L << (DB2_AUTHORIZATION_ID - 606)) | (1L << (DB2_CONNECTION_STATE - 606)) | (1L << (DB2_CONNECTION_STATUS - 606)) | (1L << (DB2_ENCRYPTION_TYPE - 606)) | (1L << (DB2_ERROR_CODE1 - 606)) | (1L << (DB2_ERROR_CODE2 - 606)) | (1L << (DB2_ERROR_CODE3 - 606)) | (1L << (DB2_ERROR_CODE4 - 606)) | (1L << (DB2_GET_DIAGNOSTICS_DIAGNOSTICS - 606)) | (1L << (DB2_INTERNAL_ERROR_POINTER - 606)) | (1L << (DB2_LAST_ROW - 606)) | (1L << (DB2_LINE_NUMBER - 606)) | (1L << (DB2_MESSAGE_ID - 606)) | (1L << (DB2_MODULE_DETECTING_ERROR - 606)) | (1L << (DB2_NUMBER_PARAMETER_MARKERS - 606)) | (1L << (DB2_NUMBER_RESULT_SETS - 606)) | (1L << (DB2_NUMBER_ROWS - 606)) | (1L << (DB2_ORDINAL_TOKEN_ - 606)) | (1L << (DB2_PRODUCT_ID - 606)) | (1L << (DB2_REASON_CODE - 606)) | (1L << (DB2_RETURNED_SQLCODE - 606)) | (1L << (DB2_RETURN_STATUS - 606)) | (1L << (DB2_ROW_NUMBER - 606)) | (1L << (DB2_SERVER_CLASS_NAME - 606)) | (1L << (DB2_SQL_ATTR_CURSOR_HOLD - 606)) | (1L << (DB2_SQL_ATTR_CURSOR_ROWSET - 606)) | (1L << (DB2_SQL_ATTR_CURSOR_SCROLLABLE - 606)) | (1L << (DB2_SQL_ATTR_CURSOR_SENSITIVITY - 606)) | (1L << (DB2_SQL_ATTR_CURSOR_TYPE - 606)) | (1L << (DB2_SQLERRD1 - 606)) | (1L << (DB2_SQLERRD2 - 606)) | (1L << (DB2_SQLERRD3 - 606)) | (1L << (DB2_SQLERRD4 - 606)) | (1L << (DB2_SQLERRD5 - 606)) | (1L << (DB2_SQLERRD6 - 606)) | (1L << (DB2_SQLERRD_SET - 606)) | (1L << (DB2_SQL_NESTING_LEVEL - 606)) | (1L << (DB2_TOKEN_COUNT - 606)) | (1L << (DIAGNOSTICS - 606)) | (1L << (MORE_ - 606)) | (1L << (NUMBER - 606)) | (1L << (RETURNED_SQLSTATE - 606)) | (1L << (ROW_COUNT - 606)) | (1L << (SERVER_NAME - 606)) | (1L << (STACKED - 606)) | (1L << (CREATETAB - 606)) | (1L << (CREATETS - 606)) | (1L << (DBADM - 606)) | (1L << (DBCTRL - 606)) | (1L << (DBMAINT - 606)) | (1L << (DISPLAYDB - 606)) | (1L << (IMAGCOPY - 606)) | (1L << (LOAD - 606)) | (1L << (PACKADM - 606)) | (1L << (RECOVERDB - 606)) | (1L << (REORG - 606)) | (1L << (REPAIR - 606)) | (1L << (STARTDB - 606)) | (1L << (STATS - 606)) | (1L << (STOPDB - 606)))) != 0) || ((((_la - 670)) & ~0x3f) == 0 && ((1L << (_la - 670)) & ((1L << (BIND - 670)) | (1L << (ALTERIN - 670)) | (1L << (CREATEIN - 670)) | (1L << (DROPIN - 670)) | (1L << (USAGE - 670)) | (1L << (ACCESSCTRL - 670)) | (1L << (BINDADD - 670)) | (1L << (BINDAGENT - 670)) | (1L << (BSDS - 670)) | (1L << (CREATEALIAS - 670)) | (1L << (CREATEDBA - 670)) | (1L << (CREATEDBC - 670)) | (1L << (CREATE_SECURE_OBJECT - 670)) | (1L << (CREATESG - 670)) | (1L << (CREATETMTAB - 670)) | (1L << (DATAACCESS - 670)) | (1L << (DEBUGSESSION - 670)) | (1L << (DISPLAY - 670)) | (1L << (MONITOR1 - 670)) | (1L << (MONITOR2 - 670)) | (1L << (RECOVER - 670)) | (1L << (SQLADM - 670)) | (1L << (STOPALL - 670)) | (1L << (STOSPACE - 670)) | (1L << (SYSADM - 670)) | (1L << (SYSCTRL - 670)) | (1L << (SYSOPR - 670)) | (1L << (TRACE - 670)) | (1L << (UNLOAD - 670)) | (1L << (WRITE - 670)) | (1L << (ABS - 670)) | (1L << (ABSVAL - 670)) | (1L << (ACOS - 670)) | (1L << (ADD_DAYS - 670)) | (1L << (ADD_MONTHS - 670)) | (1L << (ARRAY_DELETE - 670)) | (1L << (ARRAY_FIRST - 670)) | (1L << (ARRAY_LAST - 670)) | (1L << (ARRAY_NEXT - 670)) | (1L << (ARRAY_PRIOR - 670)) | (1L << (ARRAY_TRIM - 670)) | (1L << (ASCII - 670)) | (1L << (ASCII_CHR - 670)) | (1L << (ASCIISTR - 670)) | (1L << (ASCII_STR - 670)) | (1L << (ASIN - 670)) | (1L << (ATAN - 670)) | (1L << (ATAN2 - 670)) | (1L << (ATANH - 670)) | (1L << (BIGINT - 670)) | (1L << (BINARY - 670)) | (1L << (BITAND - 670)) | (1L << (BITANDNOT - 670)) | (1L << (BITNOT - 670)) | (1L << (BITOR - 670)) | (1L << (BITXOR - 670)) | (1L << (BLOB - 670)) | (1L << (BTRIM - 670)) | (1L << (CARDINALITY - 670)) | (1L << (CCSID_ENCODING - 670)) | (1L << (CEIL - 670)) | (1L << (CEILING - 670)) | (1L << (CHAR9 - 670)) | (1L << (CHARACTER_LENGTH - 670)))) != 0) || ((((_la - 734)) & ~0x3f) == 0 && ((1L << (_la - 734)) & ((1L << (CHAR_LENGTH - 734)) | (1L << (CHR - 734)) | (1L << (CLOB - 734)) | (1L << (COALESCE - 734)) | (1L << (COLLATION_KEY - 734)) | (1L << (COMPARE_DECFLOAT - 734)) | (1L << (COS - 734)) | (1L << (COSH - 734)) | (1L << (DATE - 734)) | (1L << (DAYOFMONTH - 734)) | (1L << (DAYOFWEEK - 734)) | (1L << (DAYOFWEEK_ISO - 734)) | (1L << (DAYOFYEAR - 734)) | (1L << (DAYS_BETWEEN - 734)) | (1L << (DBCLOB - 734)) | (1L << (DEC - 734)) | (1L << (DECFLOAT - 734)) | (1L << (DECFLOAT_FORMAT - 734)) | (1L << (DECFLOAT_SORTKEY - 734)) | (1L << (DECIMAL - 734)) | (1L << (DECODE - 734)) | (1L << (DECRYPT_BINARY - 734)) | (1L << (DECRYPT_BIT - 734)) | (1L << (DECRYPT_CHAR - 734)) | (1L << (DECRYPT_DATAKEY_BIGINT - 734)) | (1L << (DECRYPT_DATAKEY_BIT - 734)) | (1L << (DECRYPT_DATAKEY_CLOB - 734)) | (1L << (DECRYPT_DATAKEY_DBCLOB - 734)) | (1L << (DECRYPT_DATAKEY_DECIMAL - 734)) | (1L << (DECRYPT_DATAKEY_INTEGER - 734)) | (1L << (DECRYPT_DATAKEY_VARCHAR - 734)) | (1L << (DECRYPT_DATAKEY_VARGRAPHIC - 734)) | (1L << (DECRYPT_DB - 734)) | (1L << (DEGREES - 734)) | (1L << (DIFFERENCE - 734)) | (1L << (DIGITS - 734)) | (1L << (DOUBLE_PRECISION - 734)) | (1L << (DSN_XMLVALIDATE - 734)) | (1L << (EBCDIC_CHR - 734)) | (1L << (EBCDIC_STR - 734)) | (1L << (ENCRYPT_DATAKEY - 734)) | (1L << (ENCRYPT_TDES - 734)) | (1L << (EXP - 734)) | (1L << (EXTRACT - 734)) | (1L << (FLOAT - 734)) | (1L << (FLOOR - 734)) | (1L << (GENERATE_UNIQUE - 734)) | (1L << (GENERATE_UNIQUE_BINARY - 734)) | (1L << (GETHINT - 734)) | (1L << (GETVARIABLE - 734)) | (1L << (GRAPHIC - 734)) | (1L << (GREATEST - 734)) | (1L << (HASH - 734)) | (1L << (HASH_CRC32 - 734)) | (1L << (HASH_MD5 - 734)) | (1L << (HASH_SHA1 - 734)) | (1L << (HASH_SHA256 - 734)) | (1L << (HEX - 734)) | (1L << (IDENTITY_VAL_LOCAL - 734)) | (1L << (IFNULL - 734)) | (1L << (INSTR - 734)) | (1L << (INT - 734)) | (1L << (INTEGER - 734)) | (1L << (JULIAN_DAY - 734)))) != 0) || ((((_la - 798)) & ~0x3f) == 0 && ((1L << (_la - 798)) & ((1L << (LAST_DAY - 798)) | (1L << (LCASE - 798)) | (1L << (LEAST - 798)) | (1L << (LENGTH - 798)) | (1L << (LN - 798)) | (1L << (LOCATE - 798)) | (1L << (LOCATE_IN_STRING - 798)) | (1L << (LOG10 - 798)) | (1L << (LOWER - 798)) | (1L << (LPAD - 798)) | (1L << (LTRIM - 798)) | (1L << (MAX - 798)) | (1L << (MAX_CARDINALITY - 798)) | (1L << (MIDNIGHT_SECONDS - 798)) | (1L << (MIN - 798)) | (1L << (MINUTE - 798)) | (1L << (MOD - 798)) | (1L << (MONTHS_BETWEEN - 798)) | (1L << (MQREAD - 798)) | (1L << (MQREADCLOB - 798)) | (1L << (MQRECEIVE - 798)) | (1L << (MQRECEIVECLOB - 798)) | (1L << (MQSEND - 798)) | (1L << (MULTIPLY_ALT - 798)) | (1L << (NEXT_DAY - 798)) | (1L << (NEXT_MONTH - 798)) | (1L << (NORMALIZE_DECFLOAT - 798)) | (1L << (NORMALIZE_STRING - 798)) | (1L << (NULLIF - 798)) | (1L << (NVL - 798)) | (1L << (OVERLAY - 798)) | (1L << (PACK - 798)) | (1L << (POSITION - 798)) | (1L << (POSSTR - 798)) | (1L << (POW - 798)) | (1L << (POWER - 798)) | (1L << (QUANTIZE - 798)) | (1L << (QUARTER - 798)) | (1L << (RADIANS - 798)) | (1L << (RAISE_ERROR - 798)) | (1L << (RAND - 798)) | (1L << (RANDOM - 798)) | (1L << (REAL - 798)) | (1L << (REGEXP_COUNT - 798)) | (1L << (REGEXP_INSTR - 798)) | (1L << (REGEXP_LIKE - 798)) | (1L << (REGEXP_REPLACE - 798)) | (1L << (REGEXP_SUBSTR - 798)) | (1L << (REPLACE - 798)) | (1L << (RID - 798)) | (1L << (ROUND - 798)) | (1L << (ROUND_TIMESTAMP - 798)) | (1L << (ROWID - 798)) | (1L << (RPAD - 798)) | (1L << (RTRIM - 798)) | (1L << (SCORE - 798)) | (1L << (SIGN - 798)) | (1L << (SIN - 798)) | (1L << (SINH - 798)) | (1L << (SMALLINT - 798)) | (1L << (SOAPHTTPC - 798)) | (1L << (SOAPHTTPNC - 798)) | (1L << (SOAPHTTPNV - 798)) | (1L << (SOAPHTTPV - 798)))) != 0) || ((((_la - 862)) & ~0x3f) == 0 && ((1L << (_la - 862)) & ((1L << (SOUNDEX - 862)) | (1L << (SPACE - 862)) | (1L << (SQRT - 862)) | (1L << (STRIP - 862)) | (1L << (STRLEFT - 862)) | (1L << (STRPOS - 862)) | (1L << (STRRIGHT - 862)) | (1L << (SUBSTR - 862)) | (1L << (SUBSTRING - 862)) | (1L << (TAN - 862)) | (1L << (TANH - 862)) | (1L << (TIME - 862)) | (1L << (TIMESTAMP - 862)) | (1L << (TIMESTAMPADD - 862)) | (1L << (TIMESTAMPDIFF - 862)) | (1L << (TIMESTAMP_FORMAT - 862)) | (1L << (TIMESTAMP_ISO - 862)) | (1L << (TIMESTAMP_TZ - 862)) | (1L << (TO_CHAR - 862)) | (1L << (TO_CLOB - 862)) | (1L << (TO_DATE - 862)) | (1L << (TO_NUMBER - 862)) | (1L << (TOTALORDER - 862)) | (1L << (TO_TIMESTAMP - 862)) | (1L << (TRANSLATE - 862)) | (1L << (TRIM - 862)) | (1L << (TRIM_ARRAY - 862)) | (1L << (TRUNC - 862)) | (1L << (TRUNC_TIMESTAMP - 862)) | (1L << (UCASE - 862)) | (1L << (UNICODE - 862)) | (1L << (UNICODE_STR - 862)) | (1L << (UNISTR - 862)) | (1L << (UPPER - 862)) | (1L << (VARBINARY - 862)) | (1L << (VARCHAR - 862)) | (1L << (VARCHAR9 - 862)) | (1L << (VARCHAR_BIT_FORMAT - 862)) | (1L << (VARCHAR_FORMAT - 862)) | (1L << (VARGRAPHIC - 862)) | (1L << (VERIFY_GROUP_FOR_USER - 862)) | (1L << (VERIFY_ROLE_FOR_USER - 862)) | (1L << (VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER - 862)) | (1L << (WEEK - 862)) | (1L << (WEEK_ISO - 862)) | (1L << (WRAP - 862)) | (1L << (XMLATTRIBUTES - 862)) | (1L << (XMLCOMMENT - 862)) | (1L << (XMLCONCAT - 862)) | (1L << (XMLDOCUMENT - 862)) | (1L << (XMLELEMENT - 862)) | (1L << (XMLFOREST - 862)) | (1L << (XMLMODIFY - 862)) | (1L << (XMLPARSE - 862)) | (1L << (XMLPI - 862)) | (1L << (XMLQUERY - 862)) | (1L << (XMLSERIALIZE - 862)) | (1L << (XMLTEXT - 862)) | (1L << (XMLXSROBJECTID - 862)) | (1L << (XSLTRANSFORM - 862)) | (1L << (CURRENT_ACCELERATOR - 862)) | (1L << (CURRENT_APPLICATION_COMPATIBILITY - 862)) | (1L << (CURRENT_APPLICATION_ENCODING_SCHEME - 862)) | (1L << (CURRENT_CLIENT_ACCTNG - 862)))) != 0) || ((((_la - 926)) & ~0x3f) == 0 && ((1L << (_la - 926)) & ((1L << (CURRENT_CLIENT_APPLNAME - 926)) | (1L << (CURRENT_CLIENT_CORR_TOKEN - 926)) | (1L << (CURRENT_CLIENT_USERID - 926)) | (1L << (CURRENT_CLIENT_WRKSTNNAME - 926)) | (1L << (CURRENT_DATE - 926)) | (1L << (CURRENT_DEBUG_MODE - 926)) | (1L << (CURRENT_DECFLOAT_ROUNDING_MODE - 926)) | (1L << (CURRENT_DEGREE - 926)) | (1L << (CURRENT_EXPLAIN_MODE - 926)) | (1L << (CURRENT_GET_ACCEL_ARCHIVE - 926)) | (1L << (CURRENT_LOCALE_LC_CTYPE - 926)) | (1L << (CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION - 926)) | (1L << (CURRENT_MEMBER - 926)) | (1L << (CURRENT_OPTIMIZATION_HINT - 926)) | (1L << (CURRENT_PACKAGE_PATH - 926)) | (1L << (CURRENT_PACKAGESET - 926)) | (1L << (CURRENT_PATH - 926)) | (1L << (CURRENT_PRECISION - 926)) | (1L << (CURRENT_QUERY_ACCELERATION - 926)) | (1L << (CURRENT_QUERY_ACCELERATION_WAITFORDATA - 926)) | (1L << (CURRENT_REFRESH_AGE - 926)) | (1L << (CURRENT_ROUTINE_VERSION - 926)) | (1L << (CURRENT_RULES - 926)) | (1L << (CURRENT_SCHEMA - 926)) | (1L << (CURRENT_SERVER - 926)) | (1L << (CURRENT_SQLID - 926)) | (1L << (CURRENT_TEMPORAL_BUSINESS_TIME - 926)) | (1L << (CURRENT_TEMPORAL_SYSTEM_TIME - 926)) | (1L << (CURRENT_TIME - 926)) | (1L << (CURRENT_TIMESTAMP - 926)) | (1L << (CURRENT_TIME_ZONE - 926)) | (1L << (ENCRYPTION_PASSWORD - 926)) | (1L << (SESSION_TIME_ZONE - 926)) | (1L << (SESSION_USER - 926)) | (1L << (USER - 926)) | (1L << (ADMIN_TASK_LIST - 926)) | (1L << (ADMIN_TASK_OUTPUT - 926)) | (1L << (ADMIN_TASK_STATUS - 926)) | (1L << (BLOCKING_THREADS - 926)) | (1L << (MQREADALL - 926)) | (1L << (MQREADALLCLOB - 926)) | (1L << (MQRECEIVEALL - 926)) | (1L << (MQRECEIVEALLCLOB - 926)) | (1L << (XMLTABLE - 926)) | (1L << (SQLIDENTIFIER - 926)))) != 0)) {
				{
				setState(1804);
				parameterDeclaration1();
				setState(1809);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1805);
					match(COMMA);
					setState(1806);
					parameterDeclaration1();
					}
					}
					setState(1811);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(1814);
			match(RPAREN);
			setState(1816); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1815);
				createFunctionStatementExternalTableOptions();
				}
				}
				setState(1818); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 50)) & ~0x3f) == 0 && ((1L << (_la - 50)) & ((1L << (ASUTIME - 50)) | (1L << (COLLID - 50)) | (1L << (CONTAINS - 50)) | (1L << (CONTINUE - 50)) | (1L << (DBINFO - 50)) | (1L << (DEFAULT - 50)) | (1L << (DETERMINISTIC - 50)) | (1L << (DISALLOW - 50)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (EXTERNAL - 128)) | (1L << (FENCED - 128)) | (1L << (FINAL - 128)) | (1L << (INHERIT - 128)) | (1L << (LANGUAGE - 128)))) != 0) || ((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & ((1L << (NO - 198)) | (1L << (NOT - 198)) | (1L << (NULL - 198)) | (1L << (PACKAGE - 198)) | (1L << (PARAMETER - 198)) | (1L << (PROGRAM - 198)) | (1L << (READS - 198)) | (1L << (RETURNS - 198)))) != 0) || ((((_la - 266)) & ~0x3f) == 0 && ((1L << (_la - 266)) & ((1L << (RUN - 266)) | (1L << (SCRATCHPAD - 266)) | (1L << (SECURITY - 266)) | (1L << (SPECIFIC - 266)) | (1L << (STATIC - 266)) | (1L << (STAY - 266)) | (1L << (VARIANT - 266)) | (1L << (WLM - 266)))) != 0) || ((((_la - 442)) & ~0x3f) == 0 && ((1L << (_la - 442)) & ((1L << (CALLED - 442)) | (1L << (SECURED - 442)) | (1L << (STOP - 442)))) != 0) || _la==CARDINALITY );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFunctionStatementSourcedContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DB2zSQLParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(DB2zSQLParser.FUNCTION, 0); }
		public FunctionNameContext functionName() {
			return getRuleContext(FunctionNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<ParameterDeclaration1Context> parameterDeclaration1() {
			return getRuleContexts(ParameterDeclaration1Context.class);
		}
		public ParameterDeclaration1Context parameterDeclaration1(int i) {
			return getRuleContext(ParameterDeclaration1Context.class,i);
		}
		public List<CreateFunctionStatementSourcedOptionsContext> createFunctionStatementSourcedOptions() {
			return getRuleContexts(CreateFunctionStatementSourcedOptionsContext.class);
		}
		public CreateFunctionStatementSourcedOptionsContext createFunctionStatementSourcedOptions(int i) {
			return getRuleContext(CreateFunctionStatementSourcedOptionsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public CreateFunctionStatementSourcedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunctionStatementSourced; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateFunctionStatementSourced(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateFunctionStatementSourced(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateFunctionStatementSourced(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFunctionStatementSourcedContext createFunctionStatementSourced() throws RecognitionException {
		CreateFunctionStatementSourcedContext _localctx = new CreateFunctionStatementSourcedContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_createFunctionStatementSourced);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1820);
			match(CREATE);
			setState(1821);
			match(FUNCTION);
			setState(1822);
			functionName();
			setState(1823);
			match(LPAREN);
			setState(1832);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & ((1L << (INSTEAD - 30)) | (1L << (NEW - 30)) | (1L << (NEW_TABLE - 30)) | (1L << (OLD_TABLE - 30)) | (1L << (REFERENCING - 30)) | (1L << (BASED - 30)) | (1L << (UPON - 30)) | (1L << (ADD - 30)) | (1L << (AFTER - 30)) | (1L << (ALL - 30)) | (1L << (ALLOCATE - 30)) | (1L << (ALLOW - 30)) | (1L << (ALTER - 30)) | (1L << (ALTERAND - 30)) | (1L << (ANY - 30)) | (1L << (ARRAY - 30)) | (1L << (ARRAY_EXISTS - 30)) | (1L << (AS - 30)) | (1L << (ASENSITIVE - 30)) | (1L << (ASSOCIATE - 30)) | (1L << (ASUTIME - 30)) | (1L << (AT - 30)) | (1L << (AUDIT - 30)) | (1L << (AUX - 30)) | (1L << (AUXILIARY - 30)) | (1L << (BEFORE - 30)) | (1L << (BEGIN - 30)) | (1L << (BETWEEN - 30)) | (1L << (BUFFERPOOL - 30)) | (1L << (BUFFERPOOLS - 30)) | (1L << (BY - 30)) | (1L << (CALL - 30)) | (1L << (CAPTURE - 30)) | (1L << (CASCADED - 30)) | (1L << (CASE - 30)) | (1L << (CAST - 30)) | (1L << (CCSID - 30)) | (1L << (CHAR - 30)) | (1L << (CHARACTER - 30)) | (1L << (CHECK - 30)) | (1L << (CLONE - 30)) | (1L << (CLOSE - 30)) | (1L << (CLUSTER - 30)) | (1L << (COLLECTION - 30)) | (1L << (COLLID - 30)) | (1L << (COLUMN - 30)) | (1L << (COMMENT - 30)) | (1L << (COMMIT - 30)) | (1L << (CONCAT - 30)) | (1L << (CONDITION - 30)) | (1L << (CONNECT - 30)) | (1L << (CONNECTION - 30)) | (1L << (CONSTRAINT - 30)) | (1L << (CONTAINS - 30)) | (1L << (CONTENT - 30)) | (1L << (CONTINUE - 30)) | (1L << (CREATE - 30)) | (1L << (CUBE - 30)) | (1L << (CURRENT - 30)) | (1L << (CURRENT_LC_CTYPE - 30)) | (1L << (CURRVAL - 30)) | (1L << (CURSOR - 30)) | (1L << (DATA - 30)) | (1L << (DATABASE - 30)))) != 0) || ((((_la - 94)) & ~0x3f) == 0 && ((1L << (_la - 94)) & ((1L << (DAY - 94)) | (1L << (DAYS - 94)) | (1L << (DBINFO - 94)) | (1L << (DECLARE - 94)) | (1L << (DEFAULT - 94)) | (1L << (DELETE - 94)) | (1L << (DESCRIPTOR - 94)) | (1L << (DETERMINISTIC - 94)) | (1L << (DISABLE - 94)) | (1L << (DISALLOW - 94)) | (1L << (DISTINCT - 94)) | (1L << (DO - 94)) | (1L << (DOCUMENT - 94)) | (1L << (DOUBLE - 94)) | (1L << (DROP - 94)) | (1L << (DSSIZE - 94)) | (1L << (DYNAMIC - 94)) | (1L << (EDITPROC - 94)) | (1L << (ELSE - 94)) | (1L << (ELSEIF - 94)) | (1L << (ENCODING - 94)) | (1L << (ENCRYPTION - 94)) | (1L << (END - 94)) | (1L << (END_EXEC - 94)) | (1L << (ENDING - 94)) | (1L << (ERASE - 94)) | (1L << (ESCAPE - 94)) | (1L << (EXCEPT - 94)) | (1L << (EXCEPTION - 94)) | (1L << (EXEC_SQL - 94)) | (1L << (EXECUTE - 94)) | (1L << (EXISTS - 94)) | (1L << (EXIT - 94)) | (1L << (EXPLAIN - 94)) | (1L << (EXTERNAL - 94)) | (1L << (FENCED - 94)) | (1L << (FETCH - 94)) | (1L << (FIELDPROC - 94)) | (1L << (FINAL - 94)) | (1L << (FIRST - 94)) | (1L << (FOR - 94)) | (1L << (FREE - 94)) | (1L << (FROM - 94)) | (1L << (FULL - 94)) | (1L << (FUNCTION - 94)) | (1L << (GENERATED - 94)) | (1L << (GET - 94)) | (1L << (GLOBAL - 94)) | (1L << (GO - 94)) | (1L << (GOTO - 94)) | (1L << (GRANT - 94)) | (1L << (GROUP - 94)) | (1L << (HANDLER - 94)) | (1L << (HAVING - 94)) | (1L << (HOLD - 94)) | (1L << (HOUR - 94)) | (1L << (HOURS - 94)) | (1L << (IF - 94)) | (1L << (IMMEDIATE - 94)) | (1L << (IN - 94)) | (1L << (INCLUSIVE - 94)) | (1L << (INDEX - 94)) | (1L << (INDEXBP - 94)) | (1L << (INHERIT - 94)))) != 0) || ((((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & ((1L << (INNER - 158)) | (1L << (INOUT - 158)) | (1L << (INSENSITIVE - 158)) | (1L << (INSERT - 158)) | (1L << (INTERSECT - 158)) | (1L << (INTO - 158)) | (1L << (IS - 158)) | (1L << (ISOBID - 158)) | (1L << (ITERATE - 158)) | (1L << (JAR - 158)) | (1L << (JOIN - 158)) | (1L << (KEEP - 158)) | (1L << (KEY - 158)) | (1L << (LABEL - 158)) | (1L << (LANGUAGE - 158)) | (1L << (LAST - 158)) | (1L << (LC_CTYPE - 158)) | (1L << (LEAVE - 158)) | (1L << (LEFT - 158)) | (1L << (LIKE - 158)) | (1L << (LIMIT - 158)) | (1L << (LOCAL - 158)) | (1L << (LOCALE - 158)) | (1L << (LOCATOR - 158)) | (1L << (LOCATORS - 158)) | (1L << (LOCK - 158)) | (1L << (LOCKMAX - 158)) | (1L << (LOCKSIZE - 158)) | (1L << (LONG - 158)) | (1L << (LOOP - 158)) | (1L << (MAINTAINED - 158)) | (1L << (MATERIALIZED - 158)) | (1L << (MICROSECOND - 158)) | (1L << (MICROSECONDS - 158)) | (1L << (MODIFIES - 158)) | (1L << (MONTH - 158)) | (1L << (MONTHS - 158)) | (1L << (NEXT - 158)) | (1L << (NEXTVAL - 158)) | (1L << (NO - 158)) | (1L << (NONE - 158)) | (1L << (NOT - 158)) | (1L << (NULL - 158)) | (1L << (NULLS - 158)) | (1L << (NUMPARTS - 158)) | (1L << (OBID - 158)) | (1L << (OF - 158)) | (1L << (OFFSET - 158)) | (1L << (OLD - 158)) | (1L << (ON - 158)) | (1L << (OPEN - 158)) | (1L << (OPTIMIZATION - 158)) | (1L << (OPTIMIZE - 158)) | (1L << (OR - 158)) | (1L << (ORDER - 158)) | (1L << (ORGANIZATION - 158)) | (1L << (OUT - 158)) | (1L << (OUTER - 158)) | (1L << (PACKAGE - 158)) | (1L << (PADDED - 158)) | (1L << (PARAMETER - 158)) | (1L << (PART - 158)) | (1L << (PARTITION - 158)))) != 0) || ((((_la - 222)) & ~0x3f) == 0 && ((1L << (_la - 222)) & ((1L << (PARTITIONED - 222)) | (1L << (PARTITIONING - 222)) | (1L << (PATH - 222)) | (1L << (PERIOD - 222)) | (1L << (PIECESIZE - 222)) | (1L << (PLAN - 222)) | (1L << (PRECISION - 222)) | (1L << (PREPARE - 222)) | (1L << (PREVVAL - 222)) | (1L << (PRIOR - 222)) | (1L << (PRIQTY - 222)) | (1L << (PRIVILEGES - 222)) | (1L << (PROCEDURE - 222)) | (1L << (PROGRAM - 222)) | (1L << (PSID - 222)) | (1L << (PUBLIC - 222)) | (1L << (QUERY - 222)) | (1L << (QUERYNO - 222)) | (1L << (READS - 222)) | (1L << (REFERENCES - 222)) | (1L << (REFRESH - 222)) | (1L << (RELEASE - 222)) | (1L << (RENAME - 222)) | (1L << (REPEAT - 222)) | (1L << (RESIGNAL - 222)) | (1L << (RESTRICT - 222)) | (1L << (RESULT - 222)) | (1L << (RESULT_SET_LOCATOR - 222)) | (1L << (RETURN - 222)) | (1L << (RETURNS - 222)) | (1L << (REVOKE - 222)) | (1L << (RIGHT - 222)) | (1L << (ROLE - 222)) | (1L << (ROLLBACK - 222)) | (1L << (ROLLUP - 222)) | (1L << (ROUND_CEILING - 222)) | (1L << (ROUND_DOWN - 222)) | (1L << (ROUND_FLOOR - 222)) | (1L << (ROUND_HALF_DOWN - 222)) | (1L << (ROUND_HALF_EVEN - 222)) | (1L << (ROUND_HALF_UP - 222)) | (1L << (ROUND_UP - 222)) | (1L << (ROW - 222)) | (1L << (ROWSET - 222)) | (1L << (RUN - 222)) | (1L << (SAVEPOINT - 222)) | (1L << (SCHEMA - 222)) | (1L << (SCRATCHPAD - 222)) | (1L << (SECOND - 222)) | (1L << (SECONDS - 222)) | (1L << (SECQTY - 222)) | (1L << (SECURITY - 222)) | (1L << (SELECT - 222)) | (1L << (SENSITIVE - 222)) | (1L << (SEQUENCE - 222)) | (1L << (SET - 222)) | (1L << (SIGNAL - 222)) | (1L << (SIMPLE - 222)) | (1L << (SOME - 222)) | (1L << (SOURCE - 222)) | (1L << (SPECIFIC - 222)) | (1L << (STANDARD - 222)) | (1L << (STATEMENT - 222)) | (1L << (STATIC - 222)))) != 0) || ((((_la - 286)) & ~0x3f) == 0 && ((1L << (_la - 286)) & ((1L << (STAY - 286)) | (1L << (STOGROUP - 286)) | (1L << (STORES - 286)) | (1L << (STYLE - 286)) | (1L << (SUMMARY - 286)) | (1L << (SYNONYM - 286)) | (1L << (SYSDATE - 286)) | (1L << (SYSTEM - 286)) | (1L << (SYSTIMESTAMP - 286)) | (1L << (TABLE - 286)) | (1L << (TABLESPACE - 286)) | (1L << (THEN - 286)) | (1L << (TO - 286)) | (1L << (TRIGGER - 286)) | (1L << (TRUNCATE - 286)) | (1L << (TYPE - 286)) | (1L << (UNDO - 286)) | (1L << (UNION - 286)) | (1L << (UNIQUE - 286)) | (1L << (UNTIL - 286)) | (1L << (UPDATE - 286)) | (1L << (USING - 286)) | (1L << (VALIDPROC - 286)) | (1L << (VALUE - 286)) | (1L << (VALUES - 286)) | (1L << (VARIABLE - 286)) | (1L << (VARIANT - 286)) | (1L << (VCAT - 286)) | (1L << (VERSIONING - 286)) | (1L << (VIEW - 286)) | (1L << (VOLATILE - 286)) | (1L << (VOLUMES - 286)) | (1L << (WHEN - 286)) | (1L << (WHENEVER - 286)) | (1L << (WHERE - 286)) | (1L << (WHILE - 286)) | (1L << (WITH - 286)) | (1L << (WLM - 286)) | (1L << (XMLCAST - 286)) | (1L << (XMLEXISTS - 286)) | (1L << (XMLNAMESPACES - 286)) | (1L << (YEAR - 286)) | (1L << (YEARS - 286)) | (1L << (ZONE - 286)) | (1L << (AND - 286)) | (1L << (ARRAY_AGG - 286)) | (1L << (ASC - 286)) | (1L << (AVG - 286)) | (1L << (BIT - 286)) | (1L << (CHANGE - 286)) | (1L << (CODEUNITS16 - 286)) | (1L << (CODEUNITS32 - 286)) | (1L << (CORR - 286)) | (1L << (CORRELATION - 286)) | (1L << (COUNT - 286)) | (1L << (COUNT_BIG - 286)) | (1L << (COVAR - 286)) | (1L << (COVARIANCE - 286)) | (1L << (COVARIANCE_SAMP - 286)) | (1L << (COVAR_POP - 286)) | (1L << (COVAR_SAMP - 286)) | (1L << (CS - 286)) | (1L << (CUME_DIST - 286)) | (1L << (DENSE_RANK - 286)))) != 0) || ((((_la - 350)) & ~0x3f) == 0 && ((1L << (_la - 350)) & ((1L << (DESC - 350)) | (1L << (EBCDIC - 350)) | (1L << (EXCLUSIVE - 350)) | (1L << (FIRST_VALUE - 350)) | (1L << (FOLLOWING - 350)) | (1L << (GROUPING - 350)) | (1L << (IGNORE - 350)) | (1L << (INDICATOR - 350)) | (1L << (INPUT - 350)) | (1L << (ISNULL - 350)) | (1L << (LAG - 350)) | (1L << (LARGE - 350)) | (1L << (LAST_VALUE - 350)) | (1L << (LEAD - 350)) | (1L << (LISTAGG - 350)) | (1L << (LOCKED - 350)) | (1L << (LOCKS - 350)) | (1L << (MEDIAN - 350)) | (1L << (MINUTES - 350)) | (1L << (MIXED - 350)) | (1L << (NOTNULL - 350)) | (1L << (NTH_VALUE - 350)) | (1L << (NTILE - 350)) | (1L << (NUMERIC - 350)) | (1L << (OBJECT - 350)) | (1L << (OCTETS - 350)) | (1L << (ONLY - 350)) | (1L << (OVER - 350)) | (1L << (PASSING - 350)) | (1L << (PERCENTILE_CONT - 350)) | (1L << (PERCENTILE_DISC - 350)) | (1L << (PERCENT_RANK - 350)) | (1L << (PRECEDING - 350)) | (1L << (PREVIOUS - 350)) | (1L << (RANGE - 350)) | (1L << (RANK - 350)) | (1L << (RATIO_TO_REPORT - 350)) | (1L << (READ - 350)) | (1L << (REF - 350)) | (1L << (REGR_AVGX - 350)) | (1L << (REGR_AVGY - 350)) | (1L << (REGR_COUNT - 350)) | (1L << (REGR_ICPT - 350)) | (1L << (REGR_INTERCEPT - 350)) | (1L << (REGR_R2 - 350)) | (1L << (REGR_SLOPE - 350)) | (1L << (REGR_SXX - 350)) | (1L << (REGR_SXY - 350)) | (1L << (REGR_SYY - 350)) | (1L << (RESPECT - 350)) | (1L << (ROW_NUMBER - 350)) | (1L << (ROWS - 350)) | (1L << (RR - 350)) | (1L << (RS - 350)) | (1L << (SBCS - 350)) | (1L << (SELECTIVITY - 350)) | (1L << (SETS - 350)) | (1L << (SHARE - 350)) | (1L << (SKIP_ - 350)) | (1L << (STDDEV - 350)) | (1L << (STDDEV_POP - 350)) | (1L << (STDDEV_SAMP - 350)) | (1L << (SUM - 350)) | (1L << (TOKEN - 350)))) != 0) || ((((_la - 414)) & ~0x3f) == 0 && ((1L << (_la - 414)) & ((1L << (UNBOUNDED - 414)) | (1L << (UNPACK - 414)) | (1L << (UR - 414)) | (1L << (USE - 414)) | (1L << (VAR - 414)) | (1L << (VARIANCE - 414)) | (1L << (VARIANCE_SAMP - 414)) | (1L << (VAR_POP - 414)) | (1L << (VAR_SAMP - 414)) | (1L << (VARYING - 414)) | (1L << (WITHOUT - 414)) | (1L << (XML - 414)) | (1L << (XMLAGG - 414)) | (1L << (COLUMNS - 414)) | (1L << (SQLID - 414)) | (1L << (ORDINALITY - 414)) | (1L << (SYSTEM_TIME - 414)) | (1L << (BUSINESS_TIME - 414)) | (1L << (MULTIPLIER - 414)) | (1L << (UNNEST - 414)) | (1L << (CROSS - 414)) | (1L << (CALLER - 414)) | (1L << (CLIENT - 414)) | (1L << (POSITIONING - 414)) | (1L << (SCROLL - 414)) | (1L << (ACTION - 414)) | (1L << (ASSEMBLE - 414)) | (1L << (C_ - 414)) | (1L << (CALLED - 414)) | (1L << (COBOL - 414)) | (1L << (DB2 - 414)) | (1L << (DEFINER - 414)) | (1L << (DISPATCH - 414)) | (1L << (ENVIRONMENT - 414)) | (1L << (FAILURE - 414)) | (1L << (FAILURES - 414)) | (1L << (JAVA - 414)) | (1L << (MAIN - 414)) | (1L << (NAME - 414)) | (1L << (OPTIONS - 414)) | (1L << (PARALLEL - 414)) | (1L << (PLI - 414)) | (1L << (REGISTERS - 414)) | (1L << (RESIDENT - 414)) | (1L << (SECURED - 414)) | (1L << (SPECIAL - 414)) | (1L << (SQL - 414)) | (1L << (STOP - 414)) | (1L << (SUB - 414)) | (1L << (YES - 414)) | (1L << (APPLICATION - 414)) | (1L << (CHANGED - 414)) | (1L << (COMPATIBILITY - 414)) | (1L << (COMPRESS - 414)) | (1L << (COPY - 414)) | (1L << (FREEPAGE - 414)) | (1L << (GBPCACHE - 414)) | (1L << (INCLUDE - 414)) | (1L << (MAXVALUE - 414)) | (1L << (MINVALUE - 414)) | (1L << (PCTFREE - 414)) | (1L << (REGENERATE - 414)) | (1L << (MASK - 414)) | (1L << (ENABLE - 414)))) != 0) || ((((_la - 478)) & ~0x3f) == 0 && ((1L << (_la - 478)) & ((1L << (PERMISSION - 478)) | (1L << (ATOMIC - 478)) | (1L << (SQLEXCEPTION - 478)) | (1L << (MERGE - 478)) | (1L << (MATCHED - 478)) | (1L << (SQLSTATE - 478)) | (1L << (MESSAGE_TEXT - 478)) | (1L << (OVERRIDING - 478)) | (1L << (PORTION - 478)) | (1L << (DB2SQL - 478)) | (1L << (DEBUG - 478)) | (1L << (GENERAL - 478)) | (1L << (MODE_ - 478)) | (1L << (REXX - 478)) | (1L << (CACHE - 478)) | (1L << (CYCLE - 478)) | (1L << (INCREMENT - 478)) | (1L << (RESTART - 478)) | (1L << (DATACLAS - 478)) | (1L << (MGMTCLAS - 478)) | (1L << (REMOVE - 478)) | (1L << (STORCLAS - 478)) | (1L << (ACCESS - 478)) | (1L << (ACTIVATE - 478)) | (1L << (ALWAYS - 478)) | (1L << (APPEND - 478)) | (1L << (ARCHIVE - 478)) | (1L << (BUSINESS - 478)) | (1L << (CASCADE - 478)) | (1L << (CHANGES - 478)) | (1L << (CONTROL - 478)) | (1L << (DEACTIVATE - 478)) | (1L << (DEFERRED - 478)) | (1L << (EACH - 478)) | (1L << (ENFORCED - 478)) | (1L << (EXTRA - 478)) | (1L << (FOREIGN - 478)) | (1L << (HIDDEN_ - 478)) | (1L << (HISTORY - 478)) | (1L << (ID - 478)) | (1L << (IDENTITY - 478)) | (1L << (IMPLICITLY - 478)) | (1L << (INITIALLY - 478)) | (1L << (INLINE - 478)) | (1L << (OPERATION - 478)) | (1L << (ORGANIZE - 478)) | (1L << (OVERLAPS - 478)) | (1L << (PACKAGE_NAME - 478)) | (1L << (PACKAGE_SCHEMA - 478)) | (1L << (PACKAGE_VERSION - 478)) | (1L << (PRIMARY - 478)) | (1L << (RESET - 478)) | (1L << (ROTATE - 478)) | (1L << (START - 478)) | (1L << (SYSIBM - 478)) | (1L << (TRANSACTION - 478)) | (1L << (XMLSCHEMA - 478)) | (1L << (ELEMENT - 478)) | (1L << (URL - 478)) | (1L << (NAMESPACE - 478)) | (1L << (LOCATION - 478)) | (1L << (SYSXSR - 478)) | (1L << (ALGORITHM - 478)) | (1L << (FIXEDLENGTH - 478)))) != 0) || ((((_la - 542)) & ~0x3f) == 0 && ((1L << (_la - 542)) & ((1L << (HUFFMAN - 542)) | (1L << (LOB - 542)) | (1L << (LOG - 542)) | (1L << (LOGGED - 542)) | (1L << (MAXPARTITIONS - 542)) | (1L << (MAXROWS - 542)) | (1L << (MEMBER - 542)) | (1L << (MOVE - 542)) | (1L << (PAGE - 542)) | (1L << (PAGENUM - 542)) | (1L << (PENDING - 542)) | (1L << (RELATIVE - 542)) | (1L << (SEGSIZE - 542)) | (1L << (TRACKMOD - 542)) | (1L << (ADDRESS - 542)) | (1L << (ATTRIBUTES - 542)) | (1L << (AUTHENTICATION - 542)) | (1L << (AUTHID - 542)) | (1L << (CONTEXT - 542)) | (1L << (JOBNAME - 542)) | (1L << (OWNER - 542)) | (1L << (PROFILE - 542)) | (1L << (QUALIFIER - 542)) | (1L << (SERVAUTH - 542)) | (1L << (TRUSTED - 542)) | (1L << (SECTION - 542)) | (1L << (ACTIVE - 542)) | (1L << (VERSION - 542)) | (1L << (ALIAS - 542)) | (1L << (WORK - 542)) | (1L << (WORKFILE - 542)) | (1L << (SYSDEFLT - 542)) | (1L << (NULTERM - 542)) | (1L << (STRUCTURE - 542)) | (1L << (GENERIC - 542)) | (1L << (TEMPORARY - 542)) | (1L << (DEFER - 542)) | (1L << (DEFINE - 542)) | (1L << (EXCLUDE - 542)) | (1L << (GENERATE - 542)) | (1L << (KEYS - 542)) | (1L << (XMLPATTERN - 542)) | (1L << (SIZE - 542)) | (1L << (EVERY - 542)) | (1L << (ABSOLUTE - 542)) | (1L << (ACCELERATOR - 542)) | (1L << (EXCLUDING - 542)) | (1L << (INCLUDING - 542)) | (1L << (DEFAULTS - 542)) | (1L << (MODIFIERS - 542)) | (1L << (OPTION - 542)) | (1L << (PRESERVE - 542)) | (1L << (BOTH - 542)) | (1L << (DESCRIBE - 542)) | (1L << (LABELS - 542)) | (1L << (NAMES - 542)) | (1L << (OUTPUT - 542)) | (1L << (EXCHANGE - 542)) | (1L << (STABILIZED - 542)) | (1L << (STMTCACHE - 542)) | (1L << (STMTID - 542)) | (1L << (STMTTOKEN - 542)) | (1L << (STARTING - 542)) | (1L << (CATALOG_NAME - 542)))) != 0) || ((((_la - 606)) & ~0x3f) == 0 && ((1L << (_la - 606)) & ((1L << (CONDITION_NUMBER - 606)) | (1L << (CURSOR_NAME - 606)) | (1L << (DB2_AUTHENTICATION_TYPE - 606)) | (1L << (DB2_AUTHORIZATION_ID - 606)) | (1L << (DB2_CONNECTION_STATE - 606)) | (1L << (DB2_CONNECTION_STATUS - 606)) | (1L << (DB2_ENCRYPTION_TYPE - 606)) | (1L << (DB2_ERROR_CODE1 - 606)) | (1L << (DB2_ERROR_CODE2 - 606)) | (1L << (DB2_ERROR_CODE3 - 606)) | (1L << (DB2_ERROR_CODE4 - 606)) | (1L << (DB2_GET_DIAGNOSTICS_DIAGNOSTICS - 606)) | (1L << (DB2_INTERNAL_ERROR_POINTER - 606)) | (1L << (DB2_LAST_ROW - 606)) | (1L << (DB2_LINE_NUMBER - 606)) | (1L << (DB2_MESSAGE_ID - 606)) | (1L << (DB2_MODULE_DETECTING_ERROR - 606)) | (1L << (DB2_NUMBER_PARAMETER_MARKERS - 606)) | (1L << (DB2_NUMBER_RESULT_SETS - 606)) | (1L << (DB2_NUMBER_ROWS - 606)) | (1L << (DB2_ORDINAL_TOKEN_ - 606)) | (1L << (DB2_PRODUCT_ID - 606)) | (1L << (DB2_REASON_CODE - 606)) | (1L << (DB2_RETURNED_SQLCODE - 606)) | (1L << (DB2_RETURN_STATUS - 606)) | (1L << (DB2_ROW_NUMBER - 606)) | (1L << (DB2_SERVER_CLASS_NAME - 606)) | (1L << (DB2_SQL_ATTR_CURSOR_HOLD - 606)) | (1L << (DB2_SQL_ATTR_CURSOR_ROWSET - 606)) | (1L << (DB2_SQL_ATTR_CURSOR_SCROLLABLE - 606)) | (1L << (DB2_SQL_ATTR_CURSOR_SENSITIVITY - 606)) | (1L << (DB2_SQL_ATTR_CURSOR_TYPE - 606)) | (1L << (DB2_SQLERRD1 - 606)) | (1L << (DB2_SQLERRD2 - 606)) | (1L << (DB2_SQLERRD3 - 606)) | (1L << (DB2_SQLERRD4 - 606)) | (1L << (DB2_SQLERRD5 - 606)) | (1L << (DB2_SQLERRD6 - 606)) | (1L << (DB2_SQLERRD_SET - 606)) | (1L << (DB2_SQL_NESTING_LEVEL - 606)) | (1L << (DB2_TOKEN_COUNT - 606)) | (1L << (DIAGNOSTICS - 606)) | (1L << (MORE_ - 606)) | (1L << (NUMBER - 606)) | (1L << (RETURNED_SQLSTATE - 606)) | (1L << (ROW_COUNT - 606)) | (1L << (SERVER_NAME - 606)) | (1L << (STACKED - 606)) | (1L << (CREATETAB - 606)) | (1L << (CREATETS - 606)) | (1L << (DBADM - 606)) | (1L << (DBCTRL - 606)) | (1L << (DBMAINT - 606)) | (1L << (DISPLAYDB - 606)) | (1L << (IMAGCOPY - 606)) | (1L << (LOAD - 606)) | (1L << (PACKADM - 606)) | (1L << (RECOVERDB - 606)) | (1L << (REORG - 606)) | (1L << (REPAIR - 606)) | (1L << (STARTDB - 606)) | (1L << (STATS - 606)) | (1L << (STOPDB - 606)))) != 0) || ((((_la - 670)) & ~0x3f) == 0 && ((1L << (_la - 670)) & ((1L << (BIND - 670)) | (1L << (ALTERIN - 670)) | (1L << (CREATEIN - 670)) | (1L << (DROPIN - 670)) | (1L << (USAGE - 670)) | (1L << (ACCESSCTRL - 670)) | (1L << (BINDADD - 670)) | (1L << (BINDAGENT - 670)) | (1L << (BSDS - 670)) | (1L << (CREATEALIAS - 670)) | (1L << (CREATEDBA - 670)) | (1L << (CREATEDBC - 670)) | (1L << (CREATE_SECURE_OBJECT - 670)) | (1L << (CREATESG - 670)) | (1L << (CREATETMTAB - 670)) | (1L << (DATAACCESS - 670)) | (1L << (DEBUGSESSION - 670)) | (1L << (DISPLAY - 670)) | (1L << (MONITOR1 - 670)) | (1L << (MONITOR2 - 670)) | (1L << (RECOVER - 670)) | (1L << (SQLADM - 670)) | (1L << (STOPALL - 670)) | (1L << (STOSPACE - 670)) | (1L << (SYSADM - 670)) | (1L << (SYSCTRL - 670)) | (1L << (SYSOPR - 670)) | (1L << (TRACE - 670)) | (1L << (UNLOAD - 670)) | (1L << (WRITE - 670)) | (1L << (ABS - 670)) | (1L << (ABSVAL - 670)) | (1L << (ACOS - 670)) | (1L << (ADD_DAYS - 670)) | (1L << (ADD_MONTHS - 670)) | (1L << (ARRAY_DELETE - 670)) | (1L << (ARRAY_FIRST - 670)) | (1L << (ARRAY_LAST - 670)) | (1L << (ARRAY_NEXT - 670)) | (1L << (ARRAY_PRIOR - 670)) | (1L << (ARRAY_TRIM - 670)) | (1L << (ASCII - 670)) | (1L << (ASCII_CHR - 670)) | (1L << (ASCIISTR - 670)) | (1L << (ASCII_STR - 670)) | (1L << (ASIN - 670)) | (1L << (ATAN - 670)) | (1L << (ATAN2 - 670)) | (1L << (ATANH - 670)) | (1L << (BIGINT - 670)) | (1L << (BINARY - 670)) | (1L << (BITAND - 670)) | (1L << (BITANDNOT - 670)) | (1L << (BITNOT - 670)) | (1L << (BITOR - 670)) | (1L << (BITXOR - 670)) | (1L << (BLOB - 670)) | (1L << (BTRIM - 670)) | (1L << (CARDINALITY - 670)) | (1L << (CCSID_ENCODING - 670)) | (1L << (CEIL - 670)) | (1L << (CEILING - 670)) | (1L << (CHAR9 - 670)) | (1L << (CHARACTER_LENGTH - 670)))) != 0) || ((((_la - 734)) & ~0x3f) == 0 && ((1L << (_la - 734)) & ((1L << (CHAR_LENGTH - 734)) | (1L << (CHR - 734)) | (1L << (CLOB - 734)) | (1L << (COALESCE - 734)) | (1L << (COLLATION_KEY - 734)) | (1L << (COMPARE_DECFLOAT - 734)) | (1L << (COS - 734)) | (1L << (COSH - 734)) | (1L << (DATE - 734)) | (1L << (DAYOFMONTH - 734)) | (1L << (DAYOFWEEK - 734)) | (1L << (DAYOFWEEK_ISO - 734)) | (1L << (DAYOFYEAR - 734)) | (1L << (DAYS_BETWEEN - 734)) | (1L << (DBCLOB - 734)) | (1L << (DEC - 734)) | (1L << (DECFLOAT - 734)) | (1L << (DECFLOAT_FORMAT - 734)) | (1L << (DECFLOAT_SORTKEY - 734)) | (1L << (DECIMAL - 734)) | (1L << (DECODE - 734)) | (1L << (DECRYPT_BINARY - 734)) | (1L << (DECRYPT_BIT - 734)) | (1L << (DECRYPT_CHAR - 734)) | (1L << (DECRYPT_DATAKEY_BIGINT - 734)) | (1L << (DECRYPT_DATAKEY_BIT - 734)) | (1L << (DECRYPT_DATAKEY_CLOB - 734)) | (1L << (DECRYPT_DATAKEY_DBCLOB - 734)) | (1L << (DECRYPT_DATAKEY_DECIMAL - 734)) | (1L << (DECRYPT_DATAKEY_INTEGER - 734)) | (1L << (DECRYPT_DATAKEY_VARCHAR - 734)) | (1L << (DECRYPT_DATAKEY_VARGRAPHIC - 734)) | (1L << (DECRYPT_DB - 734)) | (1L << (DEGREES - 734)) | (1L << (DIFFERENCE - 734)) | (1L << (DIGITS - 734)) | (1L << (DOUBLE_PRECISION - 734)) | (1L << (DSN_XMLVALIDATE - 734)) | (1L << (EBCDIC_CHR - 734)) | (1L << (EBCDIC_STR - 734)) | (1L << (ENCRYPT_DATAKEY - 734)) | (1L << (ENCRYPT_TDES - 734)) | (1L << (EXP - 734)) | (1L << (EXTRACT - 734)) | (1L << (FLOAT - 734)) | (1L << (FLOOR - 734)) | (1L << (GENERATE_UNIQUE - 734)) | (1L << (GENERATE_UNIQUE_BINARY - 734)) | (1L << (GETHINT - 734)) | (1L << (GETVARIABLE - 734)) | (1L << (GRAPHIC - 734)) | (1L << (GREATEST - 734)) | (1L << (HASH - 734)) | (1L << (HASH_CRC32 - 734)) | (1L << (HASH_MD5 - 734)) | (1L << (HASH_SHA1 - 734)) | (1L << (HASH_SHA256 - 734)) | (1L << (HEX - 734)) | (1L << (IDENTITY_VAL_LOCAL - 734)) | (1L << (IFNULL - 734)) | (1L << (INSTR - 734)) | (1L << (INT - 734)) | (1L << (INTEGER - 734)) | (1L << (JULIAN_DAY - 734)))) != 0) || ((((_la - 798)) & ~0x3f) == 0 && ((1L << (_la - 798)) & ((1L << (LAST_DAY - 798)) | (1L << (LCASE - 798)) | (1L << (LEAST - 798)) | (1L << (LENGTH - 798)) | (1L << (LN - 798)) | (1L << (LOCATE - 798)) | (1L << (LOCATE_IN_STRING - 798)) | (1L << (LOG10 - 798)) | (1L << (LOWER - 798)) | (1L << (LPAD - 798)) | (1L << (LTRIM - 798)) | (1L << (MAX - 798)) | (1L << (MAX_CARDINALITY - 798)) | (1L << (MIDNIGHT_SECONDS - 798)) | (1L << (MIN - 798)) | (1L << (MINUTE - 798)) | (1L << (MOD - 798)) | (1L << (MONTHS_BETWEEN - 798)) | (1L << (MQREAD - 798)) | (1L << (MQREADCLOB - 798)) | (1L << (MQRECEIVE - 798)) | (1L << (MQRECEIVECLOB - 798)) | (1L << (MQSEND - 798)) | (1L << (MULTIPLY_ALT - 798)) | (1L << (NEXT_DAY - 798)) | (1L << (NEXT_MONTH - 798)) | (1L << (NORMALIZE_DECFLOAT - 798)) | (1L << (NORMALIZE_STRING - 798)) | (1L << (NULLIF - 798)) | (1L << (NVL - 798)) | (1L << (OVERLAY - 798)) | (1L << (PACK - 798)) | (1L << (POSITION - 798)) | (1L << (POSSTR - 798)) | (1L << (POW - 798)) | (1L << (POWER - 798)) | (1L << (QUANTIZE - 798)) | (1L << (QUARTER - 798)) | (1L << (RADIANS - 798)) | (1L << (RAISE_ERROR - 798)) | (1L << (RAND - 798)) | (1L << (RANDOM - 798)) | (1L << (REAL - 798)) | (1L << (REGEXP_COUNT - 798)) | (1L << (REGEXP_INSTR - 798)) | (1L << (REGEXP_LIKE - 798)) | (1L << (REGEXP_REPLACE - 798)) | (1L << (REGEXP_SUBSTR - 798)) | (1L << (REPLACE - 798)) | (1L << (RID - 798)) | (1L << (ROUND - 798)) | (1L << (ROUND_TIMESTAMP - 798)) | (1L << (ROWID - 798)) | (1L << (RPAD - 798)) | (1L << (RTRIM - 798)) | (1L << (SCORE - 798)) | (1L << (SIGN - 798)) | (1L << (SIN - 798)) | (1L << (SINH - 798)) | (1L << (SMALLINT - 798)) | (1L << (SOAPHTTPC - 798)) | (1L << (SOAPHTTPNC - 798)) | (1L << (SOAPHTTPNV - 798)) | (1L << (SOAPHTTPV - 798)))) != 0) || ((((_la - 862)) & ~0x3f) == 0 && ((1L << (_la - 862)) & ((1L << (SOUNDEX - 862)) | (1L << (SPACE - 862)) | (1L << (SQRT - 862)) | (1L << (STRIP - 862)) | (1L << (STRLEFT - 862)) | (1L << (STRPOS - 862)) | (1L << (STRRIGHT - 862)) | (1L << (SUBSTR - 862)) | (1L << (SUBSTRING - 862)) | (1L << (TAN - 862)) | (1L << (TANH - 862)) | (1L << (TIME - 862)) | (1L << (TIMESTAMP - 862)) | (1L << (TIMESTAMPADD - 862)) | (1L << (TIMESTAMPDIFF - 862)) | (1L << (TIMESTAMP_FORMAT - 862)) | (1L << (TIMESTAMP_ISO - 862)) | (1L << (TIMESTAMP_TZ - 862)) | (1L << (TO_CHAR - 862)) | (1L << (TO_CLOB - 862)) | (1L << (TO_DATE - 862)) | (1L << (TO_NUMBER - 862)) | (1L << (TOTALORDER - 862)) | (1L << (TO_TIMESTAMP - 862)) | (1L << (TRANSLATE - 862)) | (1L << (TRIM - 862)) | (1L << (TRIM_ARRAY - 862)) | (1L << (TRUNC - 862)) | (1L << (TRUNC_TIMESTAMP - 862)) | (1L << (UCASE - 862)) | (1L << (UNICODE - 862)) | (1L << (UNICODE_STR - 862)) | (1L << (UNISTR - 862)) | (1L << (UPPER - 862)) | (1L << (VARBINARY - 862)) | (1L << (VARCHAR - 862)) | (1L << (VARCHAR9 - 862)) | (1L << (VARCHAR_BIT_FORMAT - 862)) | (1L << (VARCHAR_FORMAT - 862)) | (1L << (VARGRAPHIC - 862)) | (1L << (VERIFY_GROUP_FOR_USER - 862)) | (1L << (VERIFY_ROLE_FOR_USER - 862)) | (1L << (VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER - 862)) | (1L << (WEEK - 862)) | (1L << (WEEK_ISO - 862)) | (1L << (WRAP - 862)) | (1L << (XMLATTRIBUTES - 862)) | (1L << (XMLCOMMENT - 862)) | (1L << (XMLCONCAT - 862)) | (1L << (XMLDOCUMENT - 862)) | (1L << (XMLELEMENT - 862)) | (1L << (XMLFOREST - 862)) | (1L << (XMLMODIFY - 862)) | (1L << (XMLPARSE - 862)) | (1L << (XMLPI - 862)) | (1L << (XMLQUERY - 862)) | (1L << (XMLSERIALIZE - 862)) | (1L << (XMLTEXT - 862)) | (1L << (XMLXSROBJECTID - 862)) | (1L << (XSLTRANSFORM - 862)) | (1L << (CURRENT_ACCELERATOR - 862)) | (1L << (CURRENT_APPLICATION_COMPATIBILITY - 862)) | (1L << (CURRENT_APPLICATION_ENCODING_SCHEME - 862)) | (1L << (CURRENT_CLIENT_ACCTNG - 862)))) != 0) || ((((_la - 926)) & ~0x3f) == 0 && ((1L << (_la - 926)) & ((1L << (CURRENT_CLIENT_APPLNAME - 926)) | (1L << (CURRENT_CLIENT_CORR_TOKEN - 926)) | (1L << (CURRENT_CLIENT_USERID - 926)) | (1L << (CURRENT_CLIENT_WRKSTNNAME - 926)) | (1L << (CURRENT_DATE - 926)) | (1L << (CURRENT_DEBUG_MODE - 926)) | (1L << (CURRENT_DECFLOAT_ROUNDING_MODE - 926)) | (1L << (CURRENT_DEGREE - 926)) | (1L << (CURRENT_EXPLAIN_MODE - 926)) | (1L << (CURRENT_GET_ACCEL_ARCHIVE - 926)) | (1L << (CURRENT_LOCALE_LC_CTYPE - 926)) | (1L << (CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION - 926)) | (1L << (CURRENT_MEMBER - 926)) | (1L << (CURRENT_OPTIMIZATION_HINT - 926)) | (1L << (CURRENT_PACKAGE_PATH - 926)) | (1L << (CURRENT_PACKAGESET - 926)) | (1L << (CURRENT_PATH - 926)) | (1L << (CURRENT_PRECISION - 926)) | (1L << (CURRENT_QUERY_ACCELERATION - 926)) | (1L << (CURRENT_QUERY_ACCELERATION_WAITFORDATA - 926)) | (1L << (CURRENT_REFRESH_AGE - 926)) | (1L << (CURRENT_ROUTINE_VERSION - 926)) | (1L << (CURRENT_RULES - 926)) | (1L << (CURRENT_SCHEMA - 926)) | (1L << (CURRENT_SERVER - 926)) | (1L << (CURRENT_SQLID - 926)) | (1L << (CURRENT_TEMPORAL_BUSINESS_TIME - 926)) | (1L << (CURRENT_TEMPORAL_SYSTEM_TIME - 926)) | (1L << (CURRENT_TIME - 926)) | (1L << (CURRENT_TIMESTAMP - 926)) | (1L << (CURRENT_TIME_ZONE - 926)) | (1L << (ENCRYPTION_PASSWORD - 926)) | (1L << (SESSION_TIME_ZONE - 926)) | (1L << (SESSION_USER - 926)) | (1L << (USER - 926)) | (1L << (ADMIN_TASK_LIST - 926)) | (1L << (ADMIN_TASK_OUTPUT - 926)) | (1L << (ADMIN_TASK_STATUS - 926)) | (1L << (BLOCKING_THREADS - 926)) | (1L << (MQREADALL - 926)) | (1L << (MQREADALLCLOB - 926)) | (1L << (MQRECEIVEALL - 926)) | (1L << (MQRECEIVEALLCLOB - 926)) | (1L << (XMLTABLE - 926)) | (1L << (SQLIDENTIFIER - 926)))) != 0)) {
				{
				setState(1824);
				parameterDeclaration1();
				setState(1829);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1825);
					match(COMMA);
					setState(1826);
					parameterDeclaration1();
					}
					}
					setState(1831);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(1834);
			match(RPAREN);
			setState(1836); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1835);
				createFunctionStatementSourcedOptions();
				}
				}
				setState(1838); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 219)) & ~0x3f) == 0 && ((1L << (_la - 219)) & ((1L << (PARAMETER - 219)) | (1L << (RETURNS - 219)) | (1L << (SOURCE - 219)) | (1L << (SPECIFIC - 219)))) != 0) );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFunctionStatementInlineSqlScalarContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DB2zSQLParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(DB2zSQLParser.FUNCTION, 0); }
		public FunctionNameContext functionName() {
			return getRuleContext(FunctionNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<CreateFunctionStatementInlineSqlScalarOptionsContext> createFunctionStatementInlineSqlScalarOptions() {
			return getRuleContexts(CreateFunctionStatementInlineSqlScalarOptionsContext.class);
		}
		public CreateFunctionStatementInlineSqlScalarOptionsContext createFunctionStatementInlineSqlScalarOptions(int i) {
			return getRuleContext(CreateFunctionStatementInlineSqlScalarOptionsContext.class,i);
		}
		public List<ParameterDeclaration2Context> parameterDeclaration2() {
			return getRuleContexts(ParameterDeclaration2Context.class);
		}
		public ParameterDeclaration2Context parameterDeclaration2(int i) {
			return getRuleContext(ParameterDeclaration2Context.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public CreateFunctionStatementInlineSqlScalarContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunctionStatementInlineSqlScalar; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateFunctionStatementInlineSqlScalar(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateFunctionStatementInlineSqlScalar(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateFunctionStatementInlineSqlScalar(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFunctionStatementInlineSqlScalarContext createFunctionStatementInlineSqlScalar() throws RecognitionException {
		CreateFunctionStatementInlineSqlScalarContext _localctx = new CreateFunctionStatementInlineSqlScalarContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_createFunctionStatementInlineSqlScalar);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1840);
			match(CREATE);
			setState(1841);
			match(FUNCTION);
			setState(1842);
			functionName();
			setState(1843);
			match(LPAREN);
			{
			setState(1852);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & ((1L << (INSTEAD - 30)) | (1L << (NEW - 30)) | (1L << (NEW_TABLE - 30)) | (1L << (OLD_TABLE - 30)) | (1L << (REFERENCING - 30)) | (1L << (BASED - 30)) | (1L << (UPON - 30)) | (1L << (ADD - 30)) | (1L << (AFTER - 30)) | (1L << (ALL - 30)) | (1L << (ALLOCATE - 30)) | (1L << (ALLOW - 30)) | (1L << (ALTER - 30)) | (1L << (ALTERAND - 30)) | (1L << (ANY - 30)) | (1L << (ARRAY - 30)) | (1L << (ARRAY_EXISTS - 30)) | (1L << (AS - 30)) | (1L << (ASENSITIVE - 30)) | (1L << (ASSOCIATE - 30)) | (1L << (ASUTIME - 30)) | (1L << (AT - 30)) | (1L << (AUDIT - 30)) | (1L << (AUX - 30)) | (1L << (AUXILIARY - 30)) | (1L << (BEFORE - 30)) | (1L << (BEGIN - 30)) | (1L << (BETWEEN - 30)) | (1L << (BUFFERPOOL - 30)) | (1L << (BUFFERPOOLS - 30)) | (1L << (BY - 30)) | (1L << (CALL - 30)) | (1L << (CAPTURE - 30)) | (1L << (CASCADED - 30)) | (1L << (CASE - 30)) | (1L << (CAST - 30)) | (1L << (CCSID - 30)) | (1L << (CHAR - 30)) | (1L << (CHARACTER - 30)) | (1L << (CHECK - 30)) | (1L << (CLONE - 30)) | (1L << (CLOSE - 30)) | (1L << (CLUSTER - 30)) | (1L << (COLLECTION - 30)) | (1L << (COLLID - 30)) | (1L << (COLUMN - 30)) | (1L << (COMMENT - 30)) | (1L << (COMMIT - 30)) | (1L << (CONCAT - 30)) | (1L << (CONDITION - 30)) | (1L << (CONNECT - 30)) | (1L << (CONNECTION - 30)) | (1L << (CONSTRAINT - 30)) | (1L << (CONTAINS - 30)) | (1L << (CONTENT - 30)) | (1L << (CONTINUE - 30)) | (1L << (CREATE - 30)) | (1L << (CUBE - 30)) | (1L << (CURRENT - 30)) | (1L << (CURRENT_LC_CTYPE - 30)) | (1L << (CURRVAL - 30)) | (1L << (CURSOR - 30)) | (1L << (DATA - 30)) | (1L << (DATABASE - 30)))) != 0) || ((((_la - 94)) & ~0x3f) == 0 && ((1L << (_la - 94)) & ((1L << (DAY - 94)) | (1L << (DAYS - 94)) | (1L << (DBINFO - 94)) | (1L << (DECLARE - 94)) | (1L << (DEFAULT - 94)) | (1L << (DELETE - 94)) | (1L << (DESCRIPTOR - 94)) | (1L << (DETERMINISTIC - 94)) | (1L << (DISABLE - 94)) | (1L << (DISALLOW - 94)) | (1L << (DISTINCT - 94)) | (1L << (DO - 94)) | (1L << (DOCUMENT - 94)) | (1L << (DOUBLE - 94)) | (1L << (DROP - 94)) | (1L << (DSSIZE - 94)) | (1L << (DYNAMIC - 94)) | (1L << (EDITPROC - 94)) | (1L << (ELSE - 94)) | (1L << (ELSEIF - 94)) | (1L << (ENCODING - 94)) | (1L << (ENCRYPTION - 94)) | (1L << (END - 94)) | (1L << (END_EXEC - 94)) | (1L << (ENDING - 94)) | (1L << (ERASE - 94)) | (1L << (ESCAPE - 94)) | (1L << (EXCEPT - 94)) | (1L << (EXCEPTION - 94)) | (1L << (EXEC_SQL - 94)) | (1L << (EXECUTE - 94)) | (1L << (EXISTS - 94)) | (1L << (EXIT - 94)) | (1L << (EXPLAIN - 94)) | (1L << (EXTERNAL - 94)) | (1L << (FENCED - 94)) | (1L << (FETCH - 94)) | (1L << (FIELDPROC - 94)) | (1L << (FINAL - 94)) | (1L << (FIRST - 94)) | (1L << (FOR - 94)) | (1L << (FREE - 94)) | (1L << (FROM - 94)) | (1L << (FULL - 94)) | (1L << (FUNCTION - 94)) | (1L << (GENERATED - 94)) | (1L << (GET - 94)) | (1L << (GLOBAL - 94)) | (1L << (GO - 94)) | (1L << (GOTO - 94)) | (1L << (GRANT - 94)) | (1L << (GROUP - 94)) | (1L << (HANDLER - 94)) | (1L << (HAVING - 94)) | (1L << (HOLD - 94)) | (1L << (HOUR - 94)) | (1L << (HOURS - 94)) | (1L << (IF - 94)) | (1L << (IMMEDIATE - 94)) | (1L << (IN - 94)) | (1L << (INCLUSIVE - 94)) | (1L << (INDEX - 94)) | (1L << (INDEXBP - 94)) | (1L << (INHERIT - 94)))) != 0) || ((((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & ((1L << (INNER - 158)) | (1L << (INOUT - 158)) | (1L << (INSENSITIVE - 158)) | (1L << (INSERT - 158)) | (1L << (INTERSECT - 158)) | (1L << (INTO - 158)) | (1L << (IS - 158)) | (1L << (ISOBID - 158)) | (1L << (ITERATE - 158)) | (1L << (JAR - 158)) | (1L << (JOIN - 158)) | (1L << (KEEP - 158)) | (1L << (KEY - 158)) | (1L << (LABEL - 158)) | (1L << (LANGUAGE - 158)) | (1L << (LAST - 158)) | (1L << (LC_CTYPE - 158)) | (1L << (LEAVE - 158)) | (1L << (LEFT - 158)) | (1L << (LIKE - 158)) | (1L << (LIMIT - 158)) | (1L << (LOCAL - 158)) | (1L << (LOCALE - 158)) | (1L << (LOCATOR - 158)) | (1L << (LOCATORS - 158)) | (1L << (LOCK - 158)) | (1L << (LOCKMAX - 158)) | (1L << (LOCKSIZE - 158)) | (1L << (LONG - 158)) | (1L << (LOOP - 158)) | (1L << (MAINTAINED - 158)) | (1L << (MATERIALIZED - 158)) | (1L << (MICROSECOND - 158)) | (1L << (MICROSECONDS - 158)) | (1L << (MODIFIES - 158)) | (1L << (MONTH - 158)) | (1L << (MONTHS - 158)) | (1L << (NEXT - 158)) | (1L << (NEXTVAL - 158)) | (1L << (NO - 158)) | (1L << (NONE - 158)) | (1L << (NOT - 158)) | (1L << (NULL - 158)) | (1L << (NULLS - 158)) | (1L << (NUMPARTS - 158)) | (1L << (OBID - 158)) | (1L << (OF - 158)) | (1L << (OFFSET - 158)) | (1L << (OLD - 158)) | (1L << (ON - 158)) | (1L << (OPEN - 158)) | (1L << (OPTIMIZATION - 158)) | (1L << (OPTIMIZE - 158)) | (1L << (OR - 158)) | (1L << (ORDER - 158)) | (1L << (ORGANIZATION - 158)) | (1L << (OUT - 158)) | (1L << (OUTER - 158)) | (1L << (PACKAGE - 158)) | (1L << (PADDED - 158)) | (1L << (PARAMETER - 158)) | (1L << (PART - 158)) | (1L << (PARTITION - 158)))) != 0) || ((((_la - 222)) & ~0x3f) == 0 && ((1L << (_la - 222)) & ((1L << (PARTITIONED - 222)) | (1L << (PARTITIONING - 222)) | (1L << (PATH - 222)) | (1L << (PERIOD - 222)) | (1L << (PIECESIZE - 222)) | (1L << (PLAN - 222)) | (1L << (PRECISION - 222)) | (1L << (PREPARE - 222)) | (1L << (PREVVAL - 222)) | (1L << (PRIOR - 222)) | (1L << (PRIQTY - 222)) | (1L << (PRIVILEGES - 222)) | (1L << (PROCEDURE - 222)) | (1L << (PROGRAM - 222)) | (1L << (PSID - 222)) | (1L << (PUBLIC - 222)) | (1L << (QUERY - 222)) | (1L << (QUERYNO - 222)) | (1L << (READS - 222)) | (1L << (REFERENCES - 222)) | (1L << (REFRESH - 222)) | (1L << (RELEASE - 222)) | (1L << (RENAME - 222)) | (1L << (REPEAT - 222)) | (1L << (RESIGNAL - 222)) | (1L << (RESTRICT - 222)) | (1L << (RESULT - 222)) | (1L << (RESULT_SET_LOCATOR - 222)) | (1L << (RETURN - 222)) | (1L << (RETURNS - 222)) | (1L << (REVOKE - 222)) | (1L << (RIGHT - 222)) | (1L << (ROLE - 222)) | (1L << (ROLLBACK - 222)) | (1L << (ROLLUP - 222)) | (1L << (ROUND_CEILING - 222)) | (1L << (ROUND_DOWN - 222)) | (1L << (ROUND_FLOOR - 222)) | (1L << (ROUND_HALF_DOWN - 222)) | (1L << (ROUND_HALF_EVEN - 222)) | (1L << (ROUND_HALF_UP - 222)) | (1L << (ROUND_UP - 222)) | (1L << (ROW - 222)) | (1L << (ROWSET - 222)) | (1L << (RUN - 222)) | (1L << (SAVEPOINT - 222)) | (1L << (SCHEMA - 222)) | (1L << (SCRATCHPAD - 222)) | (1L << (SECOND - 222)) | (1L << (SECONDS - 222)) | (1L << (SECQTY - 222)) | (1L << (SECURITY - 222)) | (1L << (SELECT - 222)) | (1L << (SENSITIVE - 222)) | (1L << (SEQUENCE - 222)) | (1L << (SET - 222)) | (1L << (SIGNAL - 222)) | (1L << (SIMPLE - 222)) | (1L << (SOME - 222)) | (1L << (SOURCE - 222)) | (1L << (SPECIFIC - 222)) | (1L << (STANDARD - 222)) | (1L << (STATEMENT - 222)) | (1L << (STATIC - 222)))) != 0) || ((((_la - 286)) & ~0x3f) == 0 && ((1L << (_la - 286)) & ((1L << (STAY - 286)) | (1L << (STOGROUP - 286)) | (1L << (STORES - 286)) | (1L << (STYLE - 286)) | (1L << (SUMMARY - 286)) | (1L << (SYNONYM - 286)) | (1L << (SYSDATE - 286)) | (1L << (SYSTEM - 286)) | (1L << (SYSTIMESTAMP - 286)) | (1L << (TABLE - 286)) | (1L << (TABLESPACE - 286)) | (1L << (THEN - 286)) | (1L << (TO - 286)) | (1L << (TRIGGER - 286)) | (1L << (TRUNCATE - 286)) | (1L << (TYPE - 286)) | (1L << (UNDO - 286)) | (1L << (UNION - 286)) | (1L << (UNIQUE - 286)) | (1L << (UNTIL - 286)) | (1L << (UPDATE - 286)) | (1L << (USING - 286)) | (1L << (VALIDPROC - 286)) | (1L << (VALUE - 286)) | (1L << (VALUES - 286)) | (1L << (VARIABLE - 286)) | (1L << (VARIANT - 286)) | (1L << (VCAT - 286)) | (1L << (VERSIONING - 286)) | (1L << (VIEW - 286)) | (1L << (VOLATILE - 286)) | (1L << (VOLUMES - 286)) | (1L << (WHEN - 286)) | (1L << (WHENEVER - 286)) | (1L << (WHERE - 286)) | (1L << (WHILE - 286)) | (1L << (WITH - 286)) | (1L << (WLM - 286)) | (1L << (XMLCAST - 286)) | (1L << (XMLEXISTS - 286)) | (1L << (XMLNAMESPACES - 286)) | (1L << (YEAR - 286)) | (1L << (YEARS - 286)) | (1L << (ZONE - 286)) | (1L << (AND - 286)) | (1L << (ARRAY_AGG - 286)) | (1L << (ASC - 286)) | (1L << (AVG - 286)) | (1L << (BIT - 286)) | (1L << (CHANGE - 286)) | (1L << (CODEUNITS16 - 286)) | (1L << (CODEUNITS32 - 286)) | (1L << (CORR - 286)) | (1L << (CORRELATION - 286)) | (1L << (COUNT - 286)) | (1L << (COUNT_BIG - 286)) | (1L << (COVAR - 286)) | (1L << (COVARIANCE - 286)) | (1L << (COVARIANCE_SAMP - 286)) | (1L << (COVAR_POP - 286)) | (1L << (COVAR_SAMP - 286)) | (1L << (CS - 286)) | (1L << (CUME_DIST - 286)) | (1L << (DENSE_RANK - 286)))) != 0) || ((((_la - 350)) & ~0x3f) == 0 && ((1L << (_la - 350)) & ((1L << (DESC - 350)) | (1L << (EBCDIC - 350)) | (1L << (EXCLUSIVE - 350)) | (1L << (FIRST_VALUE - 350)) | (1L << (FOLLOWING - 350)) | (1L << (GROUPING - 350)) | (1L << (IGNORE - 350)) | (1L << (INDICATOR - 350)) | (1L << (INPUT - 350)) | (1L << (ISNULL - 350)) | (1L << (LAG - 350)) | (1L << (LARGE - 350)) | (1L << (LAST_VALUE - 350)) | (1L << (LEAD - 350)) | (1L << (LISTAGG - 350)) | (1L << (LOCKED - 350)) | (1L << (LOCKS - 350)) | (1L << (MEDIAN - 350)) | (1L << (MINUTES - 350)) | (1L << (MIXED - 350)) | (1L << (NOTNULL - 350)) | (1L << (NTH_VALUE - 350)) | (1L << (NTILE - 350)) | (1L << (NUMERIC - 350)) | (1L << (OBJECT - 350)) | (1L << (OCTETS - 350)) | (1L << (ONLY - 350)) | (1L << (OVER - 350)) | (1L << (PASSING - 350)) | (1L << (PERCENTILE_CONT - 350)) | (1L << (PERCENTILE_DISC - 350)) | (1L << (PERCENT_RANK - 350)) | (1L << (PRECEDING - 350)) | (1L << (PREVIOUS - 350)) | (1L << (RANGE - 350)) | (1L << (RANK - 350)) | (1L << (RATIO_TO_REPORT - 350)) | (1L << (READ - 350)) | (1L << (REF - 350)) | (1L << (REGR_AVGX - 350)) | (1L << (REGR_AVGY - 350)) | (1L << (REGR_COUNT - 350)) | (1L << (REGR_ICPT - 350)) | (1L << (REGR_INTERCEPT - 350)) | (1L << (REGR_R2 - 350)) | (1L << (REGR_SLOPE - 350)) | (1L << (REGR_SXX - 350)) | (1L << (REGR_SXY - 350)) | (1L << (REGR_SYY - 350)) | (1L << (RESPECT - 350)) | (1L << (ROW_NUMBER - 350)) | (1L << (ROWS - 350)) | (1L << (RR - 350)) | (1L << (RS - 350)) | (1L << (SBCS - 350)) | (1L << (SELECTIVITY - 350)) | (1L << (SETS - 350)) | (1L << (SHARE - 350)) | (1L << (SKIP_ - 350)) | (1L << (STDDEV - 350)) | (1L << (STDDEV_POP - 350)) | (1L << (STDDEV_SAMP - 350)) | (1L << (SUM - 350)) | (1L << (TOKEN - 350)))) != 0) || ((((_la - 414)) & ~0x3f) == 0 && ((1L << (_la - 414)) & ((1L << (UNBOUNDED - 414)) | (1L << (UNPACK - 414)) | (1L << (UR - 414)) | (1L << (USE - 414)) | (1L << (VAR - 414)) | (1L << (VARIANCE - 414)) | (1L << (VARIANCE_SAMP - 414)) | (1L << (VAR_POP - 414)) | (1L << (VAR_SAMP - 414)) | (1L << (VARYING - 414)) | (1L << (WITHOUT - 414)) | (1L << (XML - 414)) | (1L << (XMLAGG - 414)) | (1L << (COLUMNS - 414)) | (1L << (SQLID - 414)) | (1L << (ORDINALITY - 414)) | (1L << (SYSTEM_TIME - 414)) | (1L << (BUSINESS_TIME - 414)) | (1L << (MULTIPLIER - 414)) | (1L << (UNNEST - 414)) | (1L << (CROSS - 414)) | (1L << (CALLER - 414)) | (1L << (CLIENT - 414)) | (1L << (POSITIONING - 414)) | (1L << (SCROLL - 414)) | (1L << (ACTION - 414)) | (1L << (ASSEMBLE - 414)) | (1L << (C_ - 414)) | (1L << (CALLED - 414)) | (1L << (COBOL - 414)) | (1L << (DB2 - 414)) | (1L << (DEFINER - 414)) | (1L << (DISPATCH - 414)) | (1L << (ENVIRONMENT - 414)) | (1L << (FAILURE - 414)) | (1L << (FAILURES - 414)) | (1L << (JAVA - 414)) | (1L << (MAIN - 414)) | (1L << (NAME - 414)) | (1L << (OPTIONS - 414)) | (1L << (PARALLEL - 414)) | (1L << (PLI - 414)) | (1L << (REGISTERS - 414)) | (1L << (RESIDENT - 414)) | (1L << (SECURED - 414)) | (1L << (SPECIAL - 414)) | (1L << (SQL - 414)) | (1L << (STOP - 414)) | (1L << (SUB - 414)) | (1L << (YES - 414)) | (1L << (APPLICATION - 414)) | (1L << (CHANGED - 414)) | (1L << (COMPATIBILITY - 414)) | (1L << (COMPRESS - 414)) | (1L << (COPY - 414)) | (1L << (FREEPAGE - 414)) | (1L << (GBPCACHE - 414)) | (1L << (INCLUDE - 414)) | (1L << (MAXVALUE - 414)) | (1L << (MINVALUE - 414)) | (1L << (PCTFREE - 414)) | (1L << (REGENERATE - 414)) | (1L << (MASK - 414)) | (1L << (ENABLE - 414)))) != 0) || ((((_la - 478)) & ~0x3f) == 0 && ((1L << (_la - 478)) & ((1L << (PERMISSION - 478)) | (1L << (ATOMIC - 478)) | (1L << (SQLEXCEPTION - 478)) | (1L << (MERGE - 478)) | (1L << (MATCHED - 478)) | (1L << (SQLSTATE - 478)) | (1L << (MESSAGE_TEXT - 478)) | (1L << (OVERRIDING - 478)) | (1L << (PORTION - 478)) | (1L << (DB2SQL - 478)) | (1L << (DEBUG - 478)) | (1L << (GENERAL - 478)) | (1L << (MODE_ - 478)) | (1L << (REXX - 478)) | (1L << (CACHE - 478)) | (1L << (CYCLE - 478)) | (1L << (INCREMENT - 478)) | (1L << (RESTART - 478)) | (1L << (DATACLAS - 478)) | (1L << (MGMTCLAS - 478)) | (1L << (REMOVE - 478)) | (1L << (STORCLAS - 478)) | (1L << (ACCESS - 478)) | (1L << (ACTIVATE - 478)) | (1L << (ALWAYS - 478)) | (1L << (APPEND - 478)) | (1L << (ARCHIVE - 478)) | (1L << (BUSINESS - 478)) | (1L << (CASCADE - 478)) | (1L << (CHANGES - 478)) | (1L << (CONTROL - 478)) | (1L << (DEACTIVATE - 478)) | (1L << (DEFERRED - 478)) | (1L << (EACH - 478)) | (1L << (ENFORCED - 478)) | (1L << (EXTRA - 478)) | (1L << (FOREIGN - 478)) | (1L << (HIDDEN_ - 478)) | (1L << (HISTORY - 478)) | (1L << (ID - 478)) | (1L << (IDENTITY - 478)) | (1L << (IMPLICITLY - 478)) | (1L << (INITIALLY - 478)) | (1L << (INLINE - 478)) | (1L << (OPERATION - 478)) | (1L << (ORGANIZE - 478)) | (1L << (OVERLAPS - 478)) | (1L << (PACKAGE_NAME - 478)) | (1L << (PACKAGE_SCHEMA - 478)) | (1L << (PACKAGE_VERSION - 478)) | (1L << (PRIMARY - 478)) | (1L << (RESET - 478)) | (1L << (ROTATE - 478)) | (1L << (START - 478)) | (1L << (SYSIBM - 478)) | (1L << (TRANSACTION - 478)) | (1L << (XMLSCHEMA - 478)) | (1L << (ELEMENT - 478)) | (1L << (URL - 478)) | (1L << (NAMESPACE - 478)) | (1L << (LOCATION - 478)) | (1L << (SYSXSR - 478)) | (1L << (ALGORITHM - 478)) | (1L << (FIXEDLENGTH - 478)))) != 0) || ((((_la - 542)) & ~0x3f) == 0 && ((1L << (_la - 542)) & ((1L << (HUFFMAN - 542)) | (1L << (LOB - 542)) | (1L << (LOG - 542)) | (1L << (LOGGED - 542)) | (1L << (MAXPARTITIONS - 542)) | (1L << (MAXROWS - 542)) | (1L << (MEMBER - 542)) | (1L << (MOVE - 542)) | (1L << (PAGE - 542)) | (1L << (PAGENUM - 542)) | (1L << (PENDING - 542)) | (1L << (RELATIVE - 542)) | (1L << (SEGSIZE - 542)) | (1L << (TRACKMOD - 542)) | (1L << (ADDRESS - 542)) | (1L << (ATTRIBUTES - 542)) | (1L << (AUTHENTICATION - 542)) | (1L << (AUTHID - 542)) | (1L << (CONTEXT - 542)) | (1L << (JOBNAME - 542)) | (1L << (OWNER - 542)) | (1L << (PROFILE - 542)) | (1L << (QUALIFIER - 542)) | (1L << (SERVAUTH - 542)) | (1L << (TRUSTED - 542)) | (1L << (SECTION - 542)) | (1L << (ACTIVE - 542)) | (1L << (VERSION - 542)) | (1L << (ALIAS - 542)) | (1L << (WORK - 542)) | (1L << (WORKFILE - 542)) | (1L << (SYSDEFLT - 542)) | (1L << (NULTERM - 542)) | (1L << (STRUCTURE - 542)) | (1L << (GENERIC - 542)) | (1L << (TEMPORARY - 542)) | (1L << (DEFER - 542)) | (1L << (DEFINE - 542)) | (1L << (EXCLUDE - 542)) | (1L << (GENERATE - 542)) | (1L << (KEYS - 542)) | (1L << (XMLPATTERN - 542)) | (1L << (SIZE - 542)) | (1L << (EVERY - 542)) | (1L << (ABSOLUTE - 542)) | (1L << (ACCELERATOR - 542)) | (1L << (EXCLUDING - 542)) | (1L << (INCLUDING - 542)) | (1L << (DEFAULTS - 542)) | (1L << (MODIFIERS - 542)) | (1L << (OPTION - 542)) | (1L << (PRESERVE - 542)) | (1L << (BOTH - 542)) | (1L << (DESCRIBE - 542)) | (1L << (LABELS - 542)) | (1L << (NAMES - 542)) | (1L << (OUTPUT - 542)) | (1L << (EXCHANGE - 542)) | (1L << (STABILIZED - 542)) | (1L << (STMTCACHE - 542)) | (1L << (STMTID - 542)) | (1L << (STMTTOKEN - 542)) | (1L << (STARTING - 542)) | (1L << (CATALOG_NAME - 542)))) != 0) || ((((_la - 606)) & ~0x3f) == 0 && ((1L << (_la - 606)) & ((1L << (CONDITION_NUMBER - 606)) | (1L << (CURSOR_NAME - 606)) | (1L << (DB2_AUTHENTICATION_TYPE - 606)) | (1L << (DB2_AUTHORIZATION_ID - 606)) | (1L << (DB2_CONNECTION_STATE - 606)) | (1L << (DB2_CONNECTION_STATUS - 606)) | (1L << (DB2_ENCRYPTION_TYPE - 606)) | (1L << (DB2_ERROR_CODE1 - 606)) | (1L << (DB2_ERROR_CODE2 - 606)) | (1L << (DB2_ERROR_CODE3 - 606)) | (1L << (DB2_ERROR_CODE4 - 606)) | (1L << (DB2_GET_DIAGNOSTICS_DIAGNOSTICS - 606)) | (1L << (DB2_INTERNAL_ERROR_POINTER - 606)) | (1L << (DB2_LAST_ROW - 606)) | (1L << (DB2_LINE_NUMBER - 606)) | (1L << (DB2_MESSAGE_ID - 606)) | (1L << (DB2_MODULE_DETECTING_ERROR - 606)) | (1L << (DB2_NUMBER_PARAMETER_MARKERS - 606)) | (1L << (DB2_NUMBER_RESULT_SETS - 606)) | (1L << (DB2_NUMBER_ROWS - 606)) | (1L << (DB2_ORDINAL_TOKEN_ - 606)) | (1L << (DB2_PRODUCT_ID - 606)) | (1L << (DB2_REASON_CODE - 606)) | (1L << (DB2_RETURNED_SQLCODE - 606)) | (1L << (DB2_RETURN_STATUS - 606)) | (1L << (DB2_ROW_NUMBER - 606)) | (1L << (DB2_SERVER_CLASS_NAME - 606)) | (1L << (DB2_SQL_ATTR_CURSOR_HOLD - 606)) | (1L << (DB2_SQL_ATTR_CURSOR_ROWSET - 606)) | (1L << (DB2_SQL_ATTR_CURSOR_SCROLLABLE - 606)) | (1L << (DB2_SQL_ATTR_CURSOR_SENSITIVITY - 606)) | (1L << (DB2_SQL_ATTR_CURSOR_TYPE - 606)) | (1L << (DB2_SQLERRD1 - 606)) | (1L << (DB2_SQLERRD2 - 606)) | (1L << (DB2_SQLERRD3 - 606)) | (1L << (DB2_SQLERRD4 - 606)) | (1L << (DB2_SQLERRD5 - 606)) | (1L << (DB2_SQLERRD6 - 606)) | (1L << (DB2_SQLERRD_SET - 606)) | (1L << (DB2_SQL_NESTING_LEVEL - 606)) | (1L << (DB2_TOKEN_COUNT - 606)) | (1L << (DIAGNOSTICS - 606)) | (1L << (MORE_ - 606)) | (1L << (NUMBER - 606)) | (1L << (RETURNED_SQLSTATE - 606)) | (1L << (ROW_COUNT - 606)) | (1L << (SERVER_NAME - 606)) | (1L << (STACKED - 606)) | (1L << (CREATETAB - 606)) | (1L << (CREATETS - 606)) | (1L << (DBADM - 606)) | (1L << (DBCTRL - 606)) | (1L << (DBMAINT - 606)) | (1L << (DISPLAYDB - 606)) | (1L << (IMAGCOPY - 606)) | (1L << (LOAD - 606)) | (1L << (PACKADM - 606)) | (1L << (RECOVERDB - 606)) | (1L << (REORG - 606)) | (1L << (REPAIR - 606)) | (1L << (STARTDB - 606)) | (1L << (STATS - 606)) | (1L << (STOPDB - 606)))) != 0) || ((((_la - 670)) & ~0x3f) == 0 && ((1L << (_la - 670)) & ((1L << (BIND - 670)) | (1L << (ALTERIN - 670)) | (1L << (CREATEIN - 670)) | (1L << (DROPIN - 670)) | (1L << (USAGE - 670)) | (1L << (ACCESSCTRL - 670)) | (1L << (BINDADD - 670)) | (1L << (BINDAGENT - 670)) | (1L << (BSDS - 670)) | (1L << (CREATEALIAS - 670)) | (1L << (CREATEDBA - 670)) | (1L << (CREATEDBC - 670)) | (1L << (CREATE_SECURE_OBJECT - 670)) | (1L << (CREATESG - 670)) | (1L << (CREATETMTAB - 670)) | (1L << (DATAACCESS - 670)) | (1L << (DEBUGSESSION - 670)) | (1L << (DISPLAY - 670)) | (1L << (MONITOR1 - 670)) | (1L << (MONITOR2 - 670)) | (1L << (RECOVER - 670)) | (1L << (SQLADM - 670)) | (1L << (STOPALL - 670)) | (1L << (STOSPACE - 670)) | (1L << (SYSADM - 670)) | (1L << (SYSCTRL - 670)) | (1L << (SYSOPR - 670)) | (1L << (TRACE - 670)) | (1L << (UNLOAD - 670)) | (1L << (WRITE - 670)) | (1L << (ABS - 670)) | (1L << (ABSVAL - 670)) | (1L << (ACOS - 670)) | (1L << (ADD_DAYS - 670)) | (1L << (ADD_MONTHS - 670)) | (1L << (ARRAY_DELETE - 670)) | (1L << (ARRAY_FIRST - 670)) | (1L << (ARRAY_LAST - 670)) | (1L << (ARRAY_NEXT - 670)) | (1L << (ARRAY_PRIOR - 670)) | (1L << (ARRAY_TRIM - 670)) | (1L << (ASCII - 670)) | (1L << (ASCII_CHR - 670)) | (1L << (ASCIISTR - 670)) | (1L << (ASCII_STR - 670)) | (1L << (ASIN - 670)) | (1L << (ATAN - 670)) | (1L << (ATAN2 - 670)) | (1L << (ATANH - 670)) | (1L << (BIGINT - 670)) | (1L << (BINARY - 670)) | (1L << (BITAND - 670)) | (1L << (BITANDNOT - 670)) | (1L << (BITNOT - 670)) | (1L << (BITOR - 670)) | (1L << (BITXOR - 670)) | (1L << (BLOB - 670)) | (1L << (BTRIM - 670)) | (1L << (CARDINALITY - 670)) | (1L << (CCSID_ENCODING - 670)) | (1L << (CEIL - 670)) | (1L << (CEILING - 670)) | (1L << (CHAR9 - 670)) | (1L << (CHARACTER_LENGTH - 670)))) != 0) || ((((_la - 734)) & ~0x3f) == 0 && ((1L << (_la - 734)) & ((1L << (CHAR_LENGTH - 734)) | (1L << (CHR - 734)) | (1L << (CLOB - 734)) | (1L << (COALESCE - 734)) | (1L << (COLLATION_KEY - 734)) | (1L << (COMPARE_DECFLOAT - 734)) | (1L << (COS - 734)) | (1L << (COSH - 734)) | (1L << (DATE - 734)) | (1L << (DAYOFMONTH - 734)) | (1L << (DAYOFWEEK - 734)) | (1L << (DAYOFWEEK_ISO - 734)) | (1L << (DAYOFYEAR - 734)) | (1L << (DAYS_BETWEEN - 734)) | (1L << (DBCLOB - 734)) | (1L << (DEC - 734)) | (1L << (DECFLOAT - 734)) | (1L << (DECFLOAT_FORMAT - 734)) | (1L << (DECFLOAT_SORTKEY - 734)) | (1L << (DECIMAL - 734)) | (1L << (DECODE - 734)) | (1L << (DECRYPT_BINARY - 734)) | (1L << (DECRYPT_BIT - 734)) | (1L << (DECRYPT_CHAR - 734)) | (1L << (DECRYPT_DATAKEY_BIGINT - 734)) | (1L << (DECRYPT_DATAKEY_BIT - 734)) | (1L << (DECRYPT_DATAKEY_CLOB - 734)) | (1L << (DECRYPT_DATAKEY_DBCLOB - 734)) | (1L << (DECRYPT_DATAKEY_DECIMAL - 734)) | (1L << (DECRYPT_DATAKEY_INTEGER - 734)) | (1L << (DECRYPT_DATAKEY_VARCHAR - 734)) | (1L << (DECRYPT_DATAKEY_VARGRAPHIC - 734)) | (1L << (DECRYPT_DB - 734)) | (1L << (DEGREES - 734)) | (1L << (DIFFERENCE - 734)) | (1L << (DIGITS - 734)) | (1L << (DOUBLE_PRECISION - 734)) | (1L << (DSN_XMLVALIDATE - 734)) | (1L << (EBCDIC_CHR - 734)) | (1L << (EBCDIC_STR - 734)) | (1L << (ENCRYPT_DATAKEY - 734)) | (1L << (ENCRYPT_TDES - 734)) | (1L << (EXP - 734)) | (1L << (EXTRACT - 734)) | (1L << (FLOAT - 734)) | (1L << (FLOOR - 734)) | (1L << (GENERATE_UNIQUE - 734)) | (1L << (GENERATE_UNIQUE_BINARY - 734)) | (1L << (GETHINT - 734)) | (1L << (GETVARIABLE - 734)) | (1L << (GRAPHIC - 734)) | (1L << (GREATEST - 734)) | (1L << (HASH - 734)) | (1L << (HASH_CRC32 - 734)) | (1L << (HASH_MD5 - 734)) | (1L << (HASH_SHA1 - 734)) | (1L << (HASH_SHA256 - 734)) | (1L << (HEX - 734)) | (1L << (IDENTITY_VAL_LOCAL - 734)) | (1L << (IFNULL - 734)) | (1L << (INSTR - 734)) | (1L << (INT - 734)) | (1L << (INTEGER - 734)) | (1L << (JULIAN_DAY - 734)))) != 0) || ((((_la - 798)) & ~0x3f) == 0 && ((1L << (_la - 798)) & ((1L << (LAST_DAY - 798)) | (1L << (LCASE - 798)) | (1L << (LEAST - 798)) | (1L << (LENGTH - 798)) | (1L << (LN - 798)) | (1L << (LOCATE - 798)) | (1L << (LOCATE_IN_STRING - 798)) | (1L << (LOG10 - 798)) | (1L << (LOWER - 798)) | (1L << (LPAD - 798)) | (1L << (LTRIM - 798)) | (1L << (MAX - 798)) | (1L << (MAX_CARDINALITY - 798)) | (1L << (MIDNIGHT_SECONDS - 798)) | (1L << (MIN - 798)) | (1L << (MINUTE - 798)) | (1L << (MOD - 798)) | (1L << (MONTHS_BETWEEN - 798)) | (1L << (MQREAD - 798)) | (1L << (MQREADCLOB - 798)) | (1L << (MQRECEIVE - 798)) | (1L << (MQRECEIVECLOB - 798)) | (1L << (MQSEND - 798)) | (1L << (MULTIPLY_ALT - 798)) | (1L << (NEXT_DAY - 798)) | (1L << (NEXT_MONTH - 798)) | (1L << (NORMALIZE_DECFLOAT - 798)) | (1L << (NORMALIZE_STRING - 798)) | (1L << (NULLIF - 798)) | (1L << (NVL - 798)) | (1L << (OVERLAY - 798)) | (1L << (PACK - 798)) | (1L << (POSITION - 798)) | (1L << (POSSTR - 798)) | (1L << (POW - 798)) | (1L << (POWER - 798)) | (1L << (QUANTIZE - 798)) | (1L << (QUARTER - 798)) | (1L << (RADIANS - 798)) | (1L << (RAISE_ERROR - 798)) | (1L << (RAND - 798)) | (1L << (RANDOM - 798)) | (1L << (REAL - 798)) | (1L << (REGEXP_COUNT - 798)) | (1L << (REGEXP_INSTR - 798)) | (1L << (REGEXP_LIKE - 798)) | (1L << (REGEXP_REPLACE - 798)) | (1L << (REGEXP_SUBSTR - 798)) | (1L << (REPLACE - 798)) | (1L << (RID - 798)) | (1L << (ROUND - 798)) | (1L << (ROUND_TIMESTAMP - 798)) | (1L << (ROWID - 798)) | (1L << (RPAD - 798)) | (1L << (RTRIM - 798)) | (1L << (SCORE - 798)) | (1L << (SIGN - 798)) | (1L << (SIN - 798)) | (1L << (SINH - 798)) | (1L << (SMALLINT - 798)) | (1L << (SOAPHTTPC - 798)) | (1L << (SOAPHTTPNC - 798)) | (1L << (SOAPHTTPNV - 798)) | (1L << (SOAPHTTPV - 798)))) != 0) || ((((_la - 862)) & ~0x3f) == 0 && ((1L << (_la - 862)) & ((1L << (SOUNDEX - 862)) | (1L << (SPACE - 862)) | (1L << (SQRT - 862)) | (1L << (STRIP - 862)) | (1L << (STRLEFT - 862)) | (1L << (STRPOS - 862)) | (1L << (STRRIGHT - 862)) | (1L << (SUBSTR - 862)) | (1L << (SUBSTRING - 862)) | (1L << (TAN - 862)) | (1L << (TANH - 862)) | (1L << (TIME - 862)) | (1L << (TIMESTAMP - 862)) | (1L << (TIMESTAMPADD - 862)) | (1L << (TIMESTAMPDIFF - 862)) | (1L << (TIMESTAMP_FORMAT - 862)) | (1L << (TIMESTAMP_ISO - 862)) | (1L << (TIMESTAMP_TZ - 862)) | (1L << (TO_CHAR - 862)) | (1L << (TO_CLOB - 862)) | (1L << (TO_DATE - 862)) | (1L << (TO_NUMBER - 862)) | (1L << (TOTALORDER - 862)) | (1L << (TO_TIMESTAMP - 862)) | (1L << (TRANSLATE - 862)) | (1L << (TRIM - 862)) | (1L << (TRIM_ARRAY - 862)) | (1L << (TRUNC - 862)) | (1L << (TRUNC_TIMESTAMP - 862)) | (1L << (UCASE - 862)) | (1L << (UNICODE - 862)) | (1L << (UNICODE_STR - 862)) | (1L << (UNISTR - 862)) | (1L << (UPPER - 862)) | (1L << (VARBINARY - 862)) | (1L << (VARCHAR - 862)) | (1L << (VARCHAR9 - 862)) | (1L << (VARCHAR_BIT_FORMAT - 862)) | (1L << (VARCHAR_FORMAT - 862)) | (1L << (VARGRAPHIC - 862)) | (1L << (VERIFY_GROUP_FOR_USER - 862)) | (1L << (VERIFY_ROLE_FOR_USER - 862)) | (1L << (VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER - 862)) | (1L << (WEEK - 862)) | (1L << (WEEK_ISO - 862)) | (1L << (WRAP - 862)) | (1L << (XMLATTRIBUTES - 862)) | (1L << (XMLCOMMENT - 862)) | (1L << (XMLCONCAT - 862)) | (1L << (XMLDOCUMENT - 862)) | (1L << (XMLELEMENT - 862)) | (1L << (XMLFOREST - 862)) | (1L << (XMLMODIFY - 862)) | (1L << (XMLPARSE - 862)) | (1L << (XMLPI - 862)) | (1L << (XMLQUERY - 862)) | (1L << (XMLSERIALIZE - 862)) | (1L << (XMLTEXT - 862)) | (1L << (XMLXSROBJECTID - 862)) | (1L << (XSLTRANSFORM - 862)) | (1L << (CURRENT_ACCELERATOR - 862)) | (1L << (CURRENT_APPLICATION_COMPATIBILITY - 862)) | (1L << (CURRENT_APPLICATION_ENCODING_SCHEME - 862)) | (1L << (CURRENT_CLIENT_ACCTNG - 862)))) != 0) || ((((_la - 926)) & ~0x3f) == 0 && ((1L << (_la - 926)) & ((1L << (CURRENT_CLIENT_APPLNAME - 926)) | (1L << (CURRENT_CLIENT_CORR_TOKEN - 926)) | (1L << (CURRENT_CLIENT_USERID - 926)) | (1L << (CURRENT_CLIENT_WRKSTNNAME - 926)) | (1L << (CURRENT_DATE - 926)) | (1L << (CURRENT_DEBUG_MODE - 926)) | (1L << (CURRENT_DECFLOAT_ROUNDING_MODE - 926)) | (1L << (CURRENT_DEGREE - 926)) | (1L << (CURRENT_EXPLAIN_MODE - 926)) | (1L << (CURRENT_GET_ACCEL_ARCHIVE - 926)) | (1L << (CURRENT_LOCALE_LC_CTYPE - 926)) | (1L << (CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION - 926)) | (1L << (CURRENT_MEMBER - 926)) | (1L << (CURRENT_OPTIMIZATION_HINT - 926)) | (1L << (CURRENT_PACKAGE_PATH - 926)) | (1L << (CURRENT_PACKAGESET - 926)) | (1L << (CURRENT_PATH - 926)) | (1L << (CURRENT_PRECISION - 926)) | (1L << (CURRENT_QUERY_ACCELERATION - 926)) | (1L << (CURRENT_QUERY_ACCELERATION_WAITFORDATA - 926)) | (1L << (CURRENT_REFRESH_AGE - 926)) | (1L << (CURRENT_ROUTINE_VERSION - 926)) | (1L << (CURRENT_RULES - 926)) | (1L << (CURRENT_SCHEMA - 926)) | (1L << (CURRENT_SERVER - 926)) | (1L << (CURRENT_SQLID - 926)) | (1L << (CURRENT_TEMPORAL_BUSINESS_TIME - 926)) | (1L << (CURRENT_TEMPORAL_SYSTEM_TIME - 926)) | (1L << (CURRENT_TIME - 926)) | (1L << (CURRENT_TIMESTAMP - 926)) | (1L << (CURRENT_TIME_ZONE - 926)) | (1L << (ENCRYPTION_PASSWORD - 926)) | (1L << (SESSION_TIME_ZONE - 926)) | (1L << (SESSION_USER - 926)) | (1L << (USER - 926)) | (1L << (ADMIN_TASK_LIST - 926)) | (1L << (ADMIN_TASK_OUTPUT - 926)) | (1L << (ADMIN_TASK_STATUS - 926)) | (1L << (BLOCKING_THREADS - 926)) | (1L << (MQREADALL - 926)) | (1L << (MQREADALLCLOB - 926)) | (1L << (MQRECEIVEALL - 926)) | (1L << (MQRECEIVEALLCLOB - 926)) | (1L << (XMLTABLE - 926)) | (1L << (SQLIDENTIFIER - 926)))) != 0)) {
				{
				setState(1844);
				parameterDeclaration2();
				setState(1849);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1845);
					match(COMMA);
					setState(1846);
					parameterDeclaration2();
					}
					}
					setState(1851);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
			setState(1854);
			match(RPAREN);
			setState(1856); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1855);
				createFunctionStatementInlineSqlScalarOptions();
				}
				}
				setState(1858); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & ((1L << (CONTAINS - 83)) | (1L << (DETERMINISTIC - 83)) | (1L << (EXTERNAL - 83)))) != 0) || ((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & ((1L << (NO - 198)) | (1L << (NOT - 198)) | (1L << (NULL - 198)) | (1L << (PARAMETER - 198)) | (1L << (READS - 198)) | (1L << (RETURN - 198)) | (1L << (RETURNS - 198)))) != 0) || ((((_la - 282)) & ~0x3f) == 0 && ((1L << (_la - 282)) & ((1L << (SPECIFIC - 282)) | (1L << (STATIC - 282)) | (1L << (VARIANT - 282)))) != 0) || _la==CALLED || _la==SECURED );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateGlobalTemporaryTableStatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DB2zSQLParser.CREATE, 0); }
		public TerminalNode GLOBAL() { return getToken(DB2zSQLParser.GLOBAL, 0); }
		public TerminalNode TEMPORARY() { return getToken(DB2zSQLParser.TEMPORARY, 0); }
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public CcsidClause1Context ccsidClause1() {
			return getRuleContext(CcsidClause1Context.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<CreateGlobalTemporaryTableColumnDefinitionContext> createGlobalTemporaryTableColumnDefinition() {
			return getRuleContexts(CreateGlobalTemporaryTableColumnDefinitionContext.class);
		}
		public CreateGlobalTemporaryTableColumnDefinitionContext createGlobalTemporaryTableColumnDefinition(int i) {
			return getRuleContext(CreateGlobalTemporaryTableColumnDefinitionContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode LIKE() { return getToken(DB2zSQLParser.LIKE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public CreateGlobalTemporaryTableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createGlobalTemporaryTableStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateGlobalTemporaryTableStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateGlobalTemporaryTableStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateGlobalTemporaryTableStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateGlobalTemporaryTableStatementContext createGlobalTemporaryTableStatement() throws RecognitionException {
		CreateGlobalTemporaryTableStatementContext _localctx = new CreateGlobalTemporaryTableStatementContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_createGlobalTemporaryTableStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1860);
			match(CREATE);
			setState(1861);
			match(GLOBAL);
			setState(1862);
			match(TEMPORARY);
			setState(1863);
			match(TABLE);
			setState(1864);
			tableName();
			setState(1878);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LPAREN:
				{
				{
				setState(1865);
				match(LPAREN);
				setState(1866);
				createGlobalTemporaryTableColumnDefinition();
				setState(1871);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1867);
					match(COMMA);
					setState(1868);
					createGlobalTemporaryTableColumnDefinition();
					}
					}
					setState(1873);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1874);
				match(RPAREN);
				}
				}
				break;
			case LIKE:
				{
				{
				setState(1876);
				match(LIKE);
				setState(1877);
				tableName();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1881);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CCSID) {
				{
				setState(1880);
				ccsidClause1();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateIndexStatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DB2zSQLParser.CREATE, 0); }
		public TerminalNode INDEX() { return getToken(DB2zSQLParser.INDEX, 0); }
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public TerminalNode UNIQUE() { return getToken(DB2zSQLParser.UNIQUE, 0); }
		public List<CreateIndexOptionListContext> createIndexOptionList() {
			return getRuleContexts(CreateIndexOptionListContext.class);
		}
		public CreateIndexOptionListContext createIndexOptionList(int i) {
			return getRuleContext(CreateIndexOptionListContext.class,i);
		}
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public AuxTableNameContext auxTableName() {
			return getRuleContext(AuxTableNameContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(DB2zSQLParser.WHERE, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public List<KeyExpressionContext> keyExpression() {
			return getRuleContexts(KeyExpressionContext.class);
		}
		public KeyExpressionContext keyExpression(int i) {
			return getRuleContext(KeyExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public TerminalNode BUSINESS_TIME() { return getToken(DB2zSQLParser.BUSINESS_TIME, 0); }
		public TerminalNode OVERLAPS() { return getToken(DB2zSQLParser.OVERLAPS, 0); }
		public List<TerminalNode> ASC() { return getTokens(DB2zSQLParser.ASC); }
		public TerminalNode ASC(int i) {
			return getToken(DB2zSQLParser.ASC, i);
		}
		public List<TerminalNode> DESC() { return getTokens(DB2zSQLParser.DESC); }
		public TerminalNode DESC(int i) {
			return getToken(DB2zSQLParser.DESC, i);
		}
		public List<TerminalNode> RANDOM() { return getTokens(DB2zSQLParser.RANDOM); }
		public TerminalNode RANDOM(int i) {
			return getToken(DB2zSQLParser.RANDOM, i);
		}
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode WITHOUT() { return getToken(DB2zSQLParser.WITHOUT, 0); }
		public CreateIndexStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createIndexStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateIndexStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateIndexStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateIndexStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateIndexStatementContext createIndexStatement() throws RecognitionException {
		CreateIndexStatementContext _localctx = new CreateIndexStatementContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_createIndexStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1883);
			match(CREATE);
			setState(1890);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNIQUE) {
				{
				setState(1884);
				match(UNIQUE);
				setState(1888);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(1885);
					match(WHERE);
					setState(1886);
					match(NOT);
					setState(1887);
					match(NULL);
					}
				}

				}
			}

			setState(1892);
			match(INDEX);
			setState(1893);
			indexName();
			setState(1894);
			match(ON);
			setState(1926);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,82,_ctx) ) {
			case 1:
				{
				{
				setState(1895);
				tableName();
				setState(1896);
				match(LPAREN);
				setState(1899);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,76,_ctx) ) {
				case 1:
					{
					setState(1897);
					columnName();
					}
					break;
				case 2:
					{
					setState(1898);
					keyExpression();
					}
					break;
				}
				setState(1902);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC || _la==DESC || _la==RANDOM) {
					{
					setState(1901);
					_la = _input.LA(1);
					if ( !(_la==ASC || _la==DESC || _la==RANDOM) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1914);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,80,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1904);
						match(COMMA);
						setState(1907);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,78,_ctx) ) {
						case 1:
							{
							setState(1905);
							columnName();
							}
							break;
						case 2:
							{
							setState(1906);
							keyExpression();
							}
							break;
						}
						setState(1910);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==ASC || _la==DESC || _la==RANDOM) {
							{
							setState(1909);
							_la = _input.LA(1);
							if ( !(_la==ASC || _la==DESC || _la==RANDOM) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
						}

						}
						} 
					}
					setState(1916);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,80,_ctx);
				}
				setState(1921);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1917);
					match(COMMA);
					setState(1918);
					match(BUSINESS_TIME);
					setState(1919);
					_la = _input.LA(1);
					if ( !(_la==WITH || _la==WITHOUT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1920);
					match(OVERLAPS);
					}
				}

				setState(1923);
				match(RPAREN);
				}
				}
				break;
			case 2:
				{
				{
				setState(1925);
				auxTableName();
				}
				}
				break;
			}
			setState(1931);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 58)) & ~0x3f) == 0 && ((1L << (_la - 58)) & ((1L << (BUFFERPOOL - 58)) | (1L << (CLOSE - 58)) | (1L << (CLUSTER - 58)) | (1L << (DSSIZE - 58)))) != 0) || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (NOT - 200)) | (1L << (PADDED - 200)) | (1L << (PARTITION - 200)) | (1L << (PARTITIONED - 200)) | (1L << (PIECESIZE - 200)))) != 0) || _la==USING || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (COMPRESS - 467)) | (1L << (COPY - 467)) | (1L << (FREEPAGE - 467)) | (1L << (GBPCACHE - 467)) | (1L << (INCLUDE - 467)) | (1L << (PCTFREE - 467)))) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & ((1L << (DEFER - 578)) | (1L << (DEFINE - 578)) | (1L << (EXCLUDE - 578)) | (1L << (GENERATE - 578)))) != 0)) {
				{
				{
				setState(1928);
				createIndexOptionList();
				}
				}
				setState(1933);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateLobTablespaceStatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DB2zSQLParser.CREATE, 0); }
		public TerminalNode LOB() { return getToken(DB2zSQLParser.LOB, 0); }
		public TerminalNode TABLESPACE() { return getToken(DB2zSQLParser.TABLESPACE, 0); }
		public TablespaceNameContext tablespaceName() {
			return getRuleContext(TablespaceNameContext.class,0);
		}
		public List<CreateLobTablespaceOptionListContext> createLobTablespaceOptionList() {
			return getRuleContexts(CreateLobTablespaceOptionListContext.class);
		}
		public CreateLobTablespaceOptionListContext createLobTablespaceOptionList(int i) {
			return getRuleContext(CreateLobTablespaceOptionListContext.class,i);
		}
		public CreateLobTablespaceStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createLobTablespaceStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateLobTablespaceStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateLobTablespaceStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateLobTablespaceStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateLobTablespaceStatementContext createLobTablespaceStatement() throws RecognitionException {
		CreateLobTablespaceStatementContext _localctx = new CreateLobTablespaceStatementContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_createLobTablespaceStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1934);
			match(CREATE);
			setState(1935);
			match(LOB);
			setState(1936);
			match(TABLESPACE);
			setState(1937);
			tablespaceName();
			setState(1941);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 58)) & ~0x3f) == 0 && ((1L << (_la - 58)) & ((1L << (BUFFERPOOL - 58)) | (1L << (CLOSE - 58)) | (1L << (DSSIZE - 58)))) != 0) || ((((_la - 153)) & ~0x3f) == 0 && ((1L << (_la - 153)) & ((1L << (IN - 153)) | (1L << (LOCKMAX - 153)) | (1L << (LOCKSIZE - 153)) | (1L << (NOT - 153)))) != 0) || _la==USING || _la==COMPRESS || _la==GBPCACHE || ((((_la - 544)) & ~0x3f) == 0 && ((1L << (_la - 544)) & ((1L << (LOG - 544)) | (1L << (LOGGED - 544)) | (1L << (DEFINE - 544)))) != 0)) {
				{
				{
				setState(1938);
				createLobTablespaceOptionList();
				}
				}
				setState(1943);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateMaskStatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DB2zSQLParser.CREATE, 0); }
		public TerminalNode MASK() { return getToken(DB2zSQLParser.MASK, 0); }
		public MaskNameContext maskName() {
			return getRuleContext(MaskNameContext.class,0);
		}
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode COLUMN() { return getToken(DB2zSQLParser.COLUMN, 0); }
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(DB2zSQLParser.RETURN, 0); }
		public CaseExpressionContext caseExpression() {
			return getRuleContext(CaseExpressionContext.class,0);
		}
		public CorrelationNameContext correlationName() {
			return getRuleContext(CorrelationNameContext.class,0);
		}
		public EnableDisableOptionContext enableDisableOption() {
			return getRuleContext(EnableDisableOptionContext.class,0);
		}
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public CreateMaskStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createMaskStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateMaskStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateMaskStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateMaskStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateMaskStatementContext createMaskStatement() throws RecognitionException {
		CreateMaskStatementContext _localctx = new CreateMaskStatementContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_createMaskStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1944);
			match(CREATE);
			setState(1945);
			match(MASK);
			setState(1946);
			maskName();
			setState(1947);
			match(ON);
			setState(1948);
			tableName();
			setState(1953);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,86,_ctx) ) {
			case 1:
				{
				setState(1950);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,85,_ctx) ) {
				case 1:
					{
					setState(1949);
					match(AS);
					}
					break;
				}
				setState(1952);
				correlationName();
				}
				break;
			}
			setState(1955);
			match(FOR);
			setState(1956);
			match(COLUMN);
			setState(1957);
			columnName();
			setState(1958);
			match(RETURN);
			setState(1959);
			caseExpression();
			setState(1961);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISABLE || _la==ENABLE) {
				{
				setState(1960);
				enableDisableOption();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatePermissionStatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DB2zSQLParser.CREATE, 0); }
		public TerminalNode PERMISSION() { return getToken(DB2zSQLParser.PERMISSION, 0); }
		public PermissionNameContext permissionName() {
			return getRuleContext(PermissionNameContext.class,0);
		}
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public List<TerminalNode> FOR() { return getTokens(DB2zSQLParser.FOR); }
		public TerminalNode FOR(int i) {
			return getToken(DB2zSQLParser.FOR, i);
		}
		public TerminalNode ROWS() { return getToken(DB2zSQLParser.ROWS, 0); }
		public TerminalNode WHERE() { return getToken(DB2zSQLParser.WHERE, 0); }
		public SearchConditionContext searchCondition() {
			return getRuleContext(SearchConditionContext.class,0);
		}
		public TerminalNode ENFORCED() { return getToken(DB2zSQLParser.ENFORCED, 0); }
		public TerminalNode ALL() { return getToken(DB2zSQLParser.ALL, 0); }
		public TerminalNode ACCESS() { return getToken(DB2zSQLParser.ACCESS, 0); }
		public CorrelationNameContext correlationName() {
			return getRuleContext(CorrelationNameContext.class,0);
		}
		public EnableDisableOptionContext enableDisableOption() {
			return getRuleContext(EnableDisableOptionContext.class,0);
		}
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public CreatePermissionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createPermissionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreatePermissionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreatePermissionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreatePermissionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatePermissionStatementContext createPermissionStatement() throws RecognitionException {
		CreatePermissionStatementContext _localctx = new CreatePermissionStatementContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_createPermissionStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1963);
			match(CREATE);
			setState(1964);
			match(PERMISSION);
			setState(1965);
			permissionName();
			setState(1966);
			match(ON);
			setState(1967);
			tableName();
			setState(1972);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,89,_ctx) ) {
			case 1:
				{
				setState(1969);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,88,_ctx) ) {
				case 1:
					{
					setState(1968);
					match(AS);
					}
					break;
				}
				setState(1971);
				correlationName();
				}
				break;
			}
			setState(1974);
			match(FOR);
			setState(1975);
			match(ROWS);
			setState(1976);
			match(WHERE);
			setState(1977);
			searchCondition();
			setState(1978);
			match(ENFORCED);
			setState(1979);
			match(FOR);
			setState(1980);
			match(ALL);
			setState(1981);
			match(ACCESS);
			setState(1983);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISABLE || _la==ENABLE) {
				{
				setState(1982);
				enableDisableOption();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateProcedureStatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DB2zSQLParser.CREATE, 0); }
		public TerminalNode PROCEDURE() { return getToken(DB2zSQLParser.PROCEDURE, 0); }
		public ProcedureNameContext procedureName() {
			return getRuleContext(ProcedureNameContext.class,0);
		}
		public TerminalNode OR() { return getToken(DB2zSQLParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(DB2zSQLParser.REPLACE, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ParameterDeclaration3Context> parameterDeclaration3() {
			return getRuleContexts(ParameterDeclaration3Context.class);
		}
		public ParameterDeclaration3Context parameterDeclaration3(int i) {
			return getRuleContext(ParameterDeclaration3Context.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<CreateProcedureOptionListContext> createProcedureOptionList() {
			return getRuleContexts(CreateProcedureOptionListContext.class);
		}
		public CreateProcedureOptionListContext createProcedureOptionList(int i) {
			return getRuleContext(CreateProcedureOptionListContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public CreateProcedureStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createProcedureStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateProcedureStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateProcedureStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateProcedureStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateProcedureStatementContext createProcedureStatement() throws RecognitionException {
		CreateProcedureStatementContext _localctx = new CreateProcedureStatementContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_createProcedureStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1985);
			match(CREATE);
			setState(1988);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1986);
				match(OR);
				setState(1987);
				match(REPLACE);
				}
			}

			setState(1990);
			match(PROCEDURE);
			setState(1991);
			procedureName();
			setState(2003);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LPAREN) {
				{
				setState(1992);
				match(LPAREN);
				setState(1993);
				parameterDeclaration3();
				setState(1998);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1994);
					match(COMMA);
					setState(1995);
					parameterDeclaration3();
					}
					}
					setState(2000);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2001);
				match(RPAREN);
				}
			}

			setState(2006); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2005);
				createProcedureOptionList();
				}
				}
				setState(2008); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 41)) & ~0x3f) == 0 && ((1L << (_la - 41)) & ((1L << (ALLOW - 41)) | (1L << (ASUTIME - 41)) | (1L << (COLLID - 41)) | (1L << (COMMIT - 41)) | (1L << (CONTAINS - 41)) | (1L << (CONTINUE - 41)) | (1L << (DBINFO - 41)) | (1L << (DEFAULT - 41)) | (1L << (DETERMINISTIC - 41)) | (1L << (DISABLE - 41)) | (1L << (DISALLOW - 41)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (DYNAMIC - 110)) | (1L << (EXTERNAL - 110)) | (1L << (FENCED - 110)) | (1L << (INHERIT - 110)) | (1L << (LANGUAGE - 110)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (MODIFIES - 193)) | (1L << (NO - 193)) | (1L << (NOT - 193)) | (1L << (NULL - 193)) | (1L << (PACKAGE - 193)) | (1L << (PARAMETER - 193)) | (1L << (PROGRAM - 193)) | (1L << (READS - 193)) | (1L << (RESULT - 193)))) != 0) || ((((_la - 266)) & ~0x3f) == 0 && ((1L << (_la - 266)) & ((1L << (RUN - 266)) | (1L << (SECURITY - 266)) | (1L << (SPECIFIC - 266)) | (1L << (STAY - 266)) | (1L << (VARIANT - 266)) | (1L << (WLM - 266)))) != 0) || _la==CALLED || _la==STOP );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateRoleStatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DB2zSQLParser.CREATE, 0); }
		public TerminalNode ROLE() { return getToken(DB2zSQLParser.ROLE, 0); }
		public RoleNameContext roleName() {
			return getRuleContext(RoleNameContext.class,0);
		}
		public CreateRoleStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createRoleStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateRoleStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateRoleStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateRoleStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateRoleStatementContext createRoleStatement() throws RecognitionException {
		CreateRoleStatementContext _localctx = new CreateRoleStatementContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_createRoleStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2010);
			match(CREATE);
			setState(2011);
			match(ROLE);
			setState(2012);
			roleName();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateSequenceStatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DB2zSQLParser.CREATE, 0); }
		public TerminalNode SEQUENCE() { return getToken(DB2zSQLParser.SEQUENCE, 0); }
		public SequenceNameContext sequenceName() {
			return getRuleContext(SequenceNameContext.class,0);
		}
		public List<CreateSequenceOptionListContext> createSequenceOptionList() {
			return getRuleContexts(CreateSequenceOptionListContext.class);
		}
		public CreateSequenceOptionListContext createSequenceOptionList(int i) {
			return getRuleContext(CreateSequenceOptionListContext.class,i);
		}
		public CreateSequenceStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createSequenceStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateSequenceStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateSequenceStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateSequenceStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateSequenceStatementContext createSequenceStatement() throws RecognitionException {
		CreateSequenceStatementContext _localctx = new CreateSequenceStatementContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_createSequenceStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2014);
			match(CREATE);
			setState(2015);
			match(SEQUENCE);
			setState(2016);
			sequenceName();
			setState(2018); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2017);
				createSequenceOptionList();
				}
				}
				setState(2020); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==AS || _la==NO || _la==ORDER || ((((_la - 472)) & ~0x3f) == 0 && ((1L << (_la - 472)) & ((1L << (MAXVALUE - 472)) | (1L << (MINVALUE - 472)) | (1L << (CACHE - 472)) | (1L << (CYCLE - 472)) | (1L << (INCREMENT - 472)) | (1L << (START - 472)))) != 0) );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateStogroupStatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DB2zSQLParser.CREATE, 0); }
		public TerminalNode STOGROUP() { return getToken(DB2zSQLParser.STOGROUP, 0); }
		public StogroupNameContext stogroupName() {
			return getRuleContext(StogroupNameContext.class,0);
		}
		public TerminalNode VCAT() { return getToken(DB2zSQLParser.VCAT, 0); }
		public CatalogNameContext catalogName() {
			return getRuleContext(CatalogNameContext.class,0);
		}
		public TerminalNode VOLUMES() { return getToken(DB2zSQLParser.VOLUMES, 0); }
		public DataclasOptionContext dataclasOption() {
			return getRuleContext(DataclasOptionContext.class,0);
		}
		public MgmtclasOptionContext mgmtclasOption() {
			return getRuleContext(MgmtclasOptionContext.class,0);
		}
		public StorclasOptionContext storclasOption() {
			return getRuleContext(StorclasOptionContext.class,0);
		}
		public KeyLabelOptionContext keyLabelOption() {
			return getRuleContext(KeyLabelOptionContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<VolumeIDContext> volumeID() {
			return getRuleContexts(VolumeIDContext.class);
		}
		public VolumeIDContext volumeID(int i) {
			return getRuleContext(VolumeIDContext.class,i);
		}
		public List<TerminalNode> NONNUMERICLITERAL() { return getTokens(DB2zSQLParser.NONNUMERICLITERAL); }
		public TerminalNode NONNUMERICLITERAL(int i) {
			return getToken(DB2zSQLParser.NONNUMERICLITERAL, i);
		}
		public List<TerminalNode> SPLAT() { return getTokens(DB2zSQLParser.SPLAT); }
		public TerminalNode SPLAT(int i) {
			return getToken(DB2zSQLParser.SPLAT, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public CreateStogroupStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createStogroupStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateStogroupStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateStogroupStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateStogroupStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateStogroupStatementContext createStogroupStatement() throws RecognitionException {
		CreateStogroupStatementContext _localctx = new CreateStogroupStatementContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_createStogroupStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2022);
			match(CREATE);
			setState(2023);
			match(STOGROUP);
			setState(2024);
			stogroupName();
			setState(2044);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VOLUMES) {
				{
				setState(2025);
				match(VOLUMES);
				{
				setState(2026);
				match(LPAREN);
				setState(2030);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case INSTEAD:
				case NEW:
				case NEW_TABLE:
				case OLD_TABLE:
				case REFERENCING:
				case BASED:
				case UPON:
				case ADD:
				case AFTER:
				case ALL:
				case ALLOCATE:
				case ALLOW:
				case ALTER:
				case ALTERAND:
				case ANY:
				case ARRAY:
				case ARRAY_EXISTS:
				case AS:
				case ASENSITIVE:
				case ASSOCIATE:
				case ASUTIME:
				case AT:
				case AUDIT:
				case AUX:
				case AUXILIARY:
				case BEFORE:
				case BEGIN:
				case BETWEEN:
				case BUFFERPOOL:
				case BUFFERPOOLS:
				case BY:
				case CALL:
				case CAPTURE:
				case CASCADED:
				case CASE:
				case CAST:
				case CCSID:
				case CHAR:
				case CHARACTER:
				case CHECK:
				case CLONE:
				case CLOSE:
				case CLUSTER:
				case COLLECTION:
				case COLLID:
				case COLUMN:
				case COMMENT:
				case COMMIT:
				case CONCAT:
				case CONDITION:
				case CONNECT:
				case CONNECTION:
				case CONSTRAINT:
				case CONTAINS:
				case CONTENT:
				case CONTINUE:
				case CREATE:
				case CUBE:
				case CURRENT:
				case CURRENT_LC_CTYPE:
				case CURRVAL:
				case CURSOR:
				case DATA:
				case DATABASE:
				case DAY:
				case DAYS:
				case DBINFO:
				case DECLARE:
				case DEFAULT:
				case DELETE:
				case DESCRIPTOR:
				case DETERMINISTIC:
				case DISABLE:
				case DISALLOW:
				case DISTINCT:
				case DO:
				case DOCUMENT:
				case DOUBLE:
				case DROP:
				case DSSIZE:
				case DYNAMIC:
				case EDITPROC:
				case ELSE:
				case ELSEIF:
				case ENCODING:
				case ENCRYPTION:
				case END:
				case END_EXEC:
				case ENDING:
				case ERASE:
				case ESCAPE:
				case EXCEPT:
				case EXCEPTION:
				case EXEC_SQL:
				case EXECUTE:
				case EXISTS:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case FENCED:
				case FETCH:
				case FIELDPROC:
				case FINAL:
				case FIRST:
				case FOR:
				case FREE:
				case FROM:
				case FULL:
				case FUNCTION:
				case GENERATED:
				case GET:
				case GLOBAL:
				case GO:
				case GOTO:
				case GRANT:
				case GROUP:
				case HANDLER:
				case HAVING:
				case HOLD:
				case HOUR:
				case HOURS:
				case IF:
				case IMMEDIATE:
				case IN:
				case INCLUSIVE:
				case INDEX:
				case INDEXBP:
				case INHERIT:
				case INNER:
				case INOUT:
				case INSENSITIVE:
				case INSERT:
				case INTERSECT:
				case INTO:
				case IS:
				case ISOBID:
				case ITERATE:
				case JAR:
				case JOIN:
				case KEEP:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LAST:
				case LC_CTYPE:
				case LEAVE:
				case LEFT:
				case LIKE:
				case LIMIT:
				case LOCAL:
				case LOCALE:
				case LOCATOR:
				case LOCATORS:
				case LOCK:
				case LOCKMAX:
				case LOCKSIZE:
				case LONG:
				case LOOP:
				case MAINTAINED:
				case MATERIALIZED:
				case MICROSECOND:
				case MICROSECONDS:
				case MODIFIES:
				case MONTH:
				case MONTHS:
				case NEXT:
				case NEXTVAL:
				case NO:
				case NONE:
				case NOT:
				case NULL:
				case NULLS:
				case NUMPARTS:
				case OBID:
				case OF:
				case OFFSET:
				case OLD:
				case ON:
				case OPEN:
				case OPTIMIZATION:
				case OPTIMIZE:
				case OR:
				case ORDER:
				case ORGANIZATION:
				case OUT:
				case OUTER:
				case PACKAGE:
				case PADDED:
				case PARAMETER:
				case PART:
				case PARTITION:
				case PARTITIONED:
				case PARTITIONING:
				case PATH:
				case PERIOD:
				case PIECESIZE:
				case PLAN:
				case PRECISION:
				case PREPARE:
				case PREVVAL:
				case PRIOR:
				case PRIQTY:
				case PRIVILEGES:
				case PROCEDURE:
				case PROGRAM:
				case PSID:
				case PUBLIC:
				case QUERY:
				case QUERYNO:
				case READS:
				case REFERENCES:
				case REFRESH:
				case RELEASE:
				case RENAME:
				case REPEAT:
				case RESIGNAL:
				case RESTRICT:
				case RESULT:
				case RESULT_SET_LOCATOR:
				case RETURN:
				case RETURNS:
				case REVOKE:
				case RIGHT:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUND_CEILING:
				case ROUND_DOWN:
				case ROUND_FLOOR:
				case ROUND_HALF_DOWN:
				case ROUND_HALF_EVEN:
				case ROUND_HALF_UP:
				case ROUND_UP:
				case ROW:
				case ROWSET:
				case RUN:
				case SAVEPOINT:
				case SCHEMA:
				case SCRATCHPAD:
				case SECOND:
				case SECONDS:
				case SECQTY:
				case SECURITY:
				case SELECT:
				case SENSITIVE:
				case SEQUENCE:
				case SET:
				case SIGNAL:
				case SIMPLE:
				case SOME:
				case SOURCE:
				case SPECIFIC:
				case STANDARD:
				case STATEMENT:
				case STATIC:
				case STAY:
				case STOGROUP:
				case STORES:
				case STYLE:
				case SUMMARY:
				case SYNONYM:
				case SYSDATE:
				case SYSTEM:
				case SYSTIMESTAMP:
				case TABLE:
				case TABLESPACE:
				case THEN:
				case TO:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNDO:
				case UNION:
				case UNIQUE:
				case UNTIL:
				case UPDATE:
				case USING:
				case VALIDPROC:
				case VALUE:
				case VALUES:
				case VARIABLE:
				case VARIANT:
				case VCAT:
				case VERSIONING:
				case VIEW:
				case VOLATILE:
				case VOLUMES:
				case WHEN:
				case WHENEVER:
				case WHERE:
				case WHILE:
				case WITH:
				case WLM:
				case XMLCAST:
				case XMLEXISTS:
				case XMLNAMESPACES:
				case YEAR:
				case YEARS:
				case ZONE:
				case AND:
				case ARRAY_AGG:
				case ASC:
				case AVG:
				case BIT:
				case CHANGE:
				case CODEUNITS16:
				case CODEUNITS32:
				case CORR:
				case CORRELATION:
				case COUNT:
				case COUNT_BIG:
				case COVAR:
				case COVARIANCE:
				case COVARIANCE_SAMP:
				case COVAR_POP:
				case COVAR_SAMP:
				case CS:
				case CUME_DIST:
				case DENSE_RANK:
				case DESC:
				case EBCDIC:
				case EXCLUSIVE:
				case FIRST_VALUE:
				case FOLLOWING:
				case GROUPING:
				case IGNORE:
				case INDICATOR:
				case INPUT:
				case ISNULL:
				case LAG:
				case LARGE:
				case LAST_VALUE:
				case LEAD:
				case LISTAGG:
				case LOCKED:
				case LOCKS:
				case MEDIAN:
				case MINUTES:
				case MIXED:
				case NOTNULL:
				case NTH_VALUE:
				case NTILE:
				case NUMERIC:
				case OBJECT:
				case OCTETS:
				case ONLY:
				case OVER:
				case PASSING:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case PERCENT_RANK:
				case PRECEDING:
				case PREVIOUS:
				case RANGE:
				case RANK:
				case RATIO_TO_REPORT:
				case READ:
				case REF:
				case REGR_AVGX:
				case REGR_AVGY:
				case REGR_COUNT:
				case REGR_ICPT:
				case REGR_INTERCEPT:
				case REGR_R2:
				case REGR_SLOPE:
				case REGR_SXX:
				case REGR_SXY:
				case REGR_SYY:
				case RESPECT:
				case ROW_NUMBER:
				case ROWS:
				case RR:
				case RS:
				case SBCS:
				case SELECTIVITY:
				case SETS:
				case SHARE:
				case SKIP_:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case TOKEN:
				case UNBOUNDED:
				case UNPACK:
				case UR:
				case USE:
				case VAR:
				case VARIANCE:
				case VARIANCE_SAMP:
				case VAR_POP:
				case VAR_SAMP:
				case VARYING:
				case WITHOUT:
				case XML:
				case XMLAGG:
				case COLUMNS:
				case SQLID:
				case ORDINALITY:
				case SYSTEM_TIME:
				case BUSINESS_TIME:
				case MULTIPLIER:
				case UNNEST:
				case CROSS:
				case CALLER:
				case CLIENT:
				case POSITIONING:
				case SCROLL:
				case ACTION:
				case ASSEMBLE:
				case C_:
				case CALLED:
				case COBOL:
				case DB2:
				case DEFINER:
				case DISPATCH:
				case ENVIRONMENT:
				case FAILURE:
				case FAILURES:
				case JAVA:
				case MAIN:
				case NAME:
				case OPTIONS:
				case PARALLEL:
				case PLI:
				case REGISTERS:
				case RESIDENT:
				case SECURED:
				case SPECIAL:
				case SQL:
				case STOP:
				case SUB:
				case YES:
				case APPLICATION:
				case CHANGED:
				case COMPATIBILITY:
				case COMPRESS:
				case COPY:
				case FREEPAGE:
				case GBPCACHE:
				case INCLUDE:
				case MAXVALUE:
				case MINVALUE:
				case PCTFREE:
				case REGENERATE:
				case MASK:
				case ENABLE:
				case PERMISSION:
				case ATOMIC:
				case SQLEXCEPTION:
				case MERGE:
				case MATCHED:
				case SQLSTATE:
				case MESSAGE_TEXT:
				case OVERRIDING:
				case PORTION:
				case DB2SQL:
				case DEBUG:
				case GENERAL:
				case MODE_:
				case REXX:
				case CACHE:
				case CYCLE:
				case INCREMENT:
				case RESTART:
				case DATACLAS:
				case MGMTCLAS:
				case REMOVE:
				case STORCLAS:
				case ACCESS:
				case ACTIVATE:
				case ALWAYS:
				case APPEND:
				case ARCHIVE:
				case BUSINESS:
				case CASCADE:
				case CHANGES:
				case CONTROL:
				case DEACTIVATE:
				case DEFERRED:
				case EACH:
				case ENFORCED:
				case EXTRA:
				case FOREIGN:
				case HIDDEN_:
				case HISTORY:
				case ID:
				case IDENTITY:
				case IMPLICITLY:
				case INITIALLY:
				case INLINE:
				case OPERATION:
				case ORGANIZE:
				case OVERLAPS:
				case PACKAGE_NAME:
				case PACKAGE_SCHEMA:
				case PACKAGE_VERSION:
				case PRIMARY:
				case RESET:
				case ROTATE:
				case START:
				case SYSIBM:
				case TRANSACTION:
				case XMLSCHEMA:
				case ELEMENT:
				case URL:
				case NAMESPACE:
				case LOCATION:
				case SYSXSR:
				case ALGORITHM:
				case FIXEDLENGTH:
				case HUFFMAN:
				case LOB:
				case LOG:
				case LOGGED:
				case MAXPARTITIONS:
				case MAXROWS:
				case MEMBER:
				case MOVE:
				case PAGE:
				case PAGENUM:
				case PENDING:
				case RELATIVE:
				case SEGSIZE:
				case TRACKMOD:
				case ADDRESS:
				case ATTRIBUTES:
				case AUTHENTICATION:
				case AUTHID:
				case CONTEXT:
				case JOBNAME:
				case OWNER:
				case PROFILE:
				case QUALIFIER:
				case SERVAUTH:
				case TRUSTED:
				case SECTION:
				case ACTIVE:
				case VERSION:
				case ALIAS:
				case WORK:
				case WORKFILE:
				case SYSDEFLT:
				case NULTERM:
				case STRUCTURE:
				case GENERIC:
				case TEMPORARY:
				case DEFER:
				case DEFINE:
				case EXCLUDE:
				case GENERATE:
				case KEYS:
				case XMLPATTERN:
				case SIZE:
				case EVERY:
				case ABSOLUTE:
				case ACCELERATOR:
				case EXCLUDING:
				case INCLUDING:
				case DEFAULTS:
				case MODIFIERS:
				case OPTION:
				case PRESERVE:
				case BOTH:
				case DESCRIBE:
				case LABELS:
				case NAMES:
				case OUTPUT:
				case EXCHANGE:
				case STABILIZED:
				case STMTCACHE:
				case STMTID:
				case STMTTOKEN:
				case STARTING:
				case CATALOG_NAME:
				case CONDITION_NUMBER:
				case CURSOR_NAME:
				case DB2_AUTHENTICATION_TYPE:
				case DB2_AUTHORIZATION_ID:
				case DB2_CONNECTION_STATE:
				case DB2_CONNECTION_STATUS:
				case DB2_ENCRYPTION_TYPE:
				case DB2_ERROR_CODE1:
				case DB2_ERROR_CODE2:
				case DB2_ERROR_CODE3:
				case DB2_ERROR_CODE4:
				case DB2_GET_DIAGNOSTICS_DIAGNOSTICS:
				case DB2_INTERNAL_ERROR_POINTER:
				case DB2_LAST_ROW:
				case DB2_LINE_NUMBER:
				case DB2_MESSAGE_ID:
				case DB2_MODULE_DETECTING_ERROR:
				case DB2_NUMBER_PARAMETER_MARKERS:
				case DB2_NUMBER_RESULT_SETS:
				case DB2_NUMBER_ROWS:
				case DB2_ORDINAL_TOKEN_:
				case DB2_PRODUCT_ID:
				case DB2_REASON_CODE:
				case DB2_RETURNED_SQLCODE:
				case DB2_RETURN_STATUS:
				case DB2_ROW_NUMBER:
				case DB2_SERVER_CLASS_NAME:
				case DB2_SQL_ATTR_CURSOR_HOLD:
				case DB2_SQL_ATTR_CURSOR_ROWSET:
				case DB2_SQL_ATTR_CURSOR_SCROLLABLE:
				case DB2_SQL_ATTR_CURSOR_SENSITIVITY:
				case DB2_SQL_ATTR_CURSOR_TYPE:
				case DB2_SQLERRD1:
				case DB2_SQLERRD2:
				case DB2_SQLERRD3:
				case DB2_SQLERRD4:
				case DB2_SQLERRD5:
				case DB2_SQLERRD6:
				case DB2_SQLERRD_SET:
				case DB2_SQL_NESTING_LEVEL:
				case DB2_TOKEN_COUNT:
				case DIAGNOSTICS:
				case MORE_:
				case NUMBER:
				case RETURNED_SQLSTATE:
				case ROW_COUNT:
				case SERVER_NAME:
				case STACKED:
				case CREATETAB:
				case CREATETS:
				case DBADM:
				case DBCTRL:
				case DBMAINT:
				case DISPLAYDB:
				case IMAGCOPY:
				case LOAD:
				case PACKADM:
				case RECOVERDB:
				case REORG:
				case REPAIR:
				case STARTDB:
				case STATS:
				case STOPDB:
				case BIND:
				case ALTERIN:
				case CREATEIN:
				case DROPIN:
				case USAGE:
				case ACCESSCTRL:
				case BINDADD:
				case BINDAGENT:
				case BSDS:
				case CREATEALIAS:
				case CREATEDBA:
				case CREATEDBC:
				case CREATE_SECURE_OBJECT:
				case CREATESG:
				case CREATETMTAB:
				case DATAACCESS:
				case DEBUGSESSION:
				case DISPLAY:
				case MONITOR1:
				case MONITOR2:
				case RECOVER:
				case SQLADM:
				case STOPALL:
				case STOSPACE:
				case SYSADM:
				case SYSCTRL:
				case SYSOPR:
				case TRACE:
				case UNLOAD:
				case WRITE:
				case ABS:
				case ABSVAL:
				case ACOS:
				case ADD_DAYS:
				case ADD_MONTHS:
				case ARRAY_DELETE:
				case ARRAY_FIRST:
				case ARRAY_LAST:
				case ARRAY_NEXT:
				case ARRAY_PRIOR:
				case ARRAY_TRIM:
				case ASCII:
				case ASCII_CHR:
				case ASCIISTR:
				case ASCII_STR:
				case ASIN:
				case ATAN:
				case ATAN2:
				case ATANH:
				case BIGINT:
				case BINARY:
				case BITAND:
				case BITANDNOT:
				case BITNOT:
				case BITOR:
				case BITXOR:
				case BLOB:
				case BTRIM:
				case CARDINALITY:
				case CCSID_ENCODING:
				case CEIL:
				case CEILING:
				case CHAR9:
				case CHARACTER_LENGTH:
				case CHAR_LENGTH:
				case CHR:
				case CLOB:
				case COALESCE:
				case COLLATION_KEY:
				case COMPARE_DECFLOAT:
				case COS:
				case COSH:
				case DATE:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFWEEK_ISO:
				case DAYOFYEAR:
				case DAYS_BETWEEN:
				case DBCLOB:
				case DEC:
				case DECFLOAT:
				case DECFLOAT_FORMAT:
				case DECFLOAT_SORTKEY:
				case DECIMAL:
				case DECODE:
				case DECRYPT_BINARY:
				case DECRYPT_BIT:
				case DECRYPT_CHAR:
				case DECRYPT_DATAKEY_BIGINT:
				case DECRYPT_DATAKEY_BIT:
				case DECRYPT_DATAKEY_CLOB:
				case DECRYPT_DATAKEY_DBCLOB:
				case DECRYPT_DATAKEY_DECIMAL:
				case DECRYPT_DATAKEY_INTEGER:
				case DECRYPT_DATAKEY_VARCHAR:
				case DECRYPT_DATAKEY_VARGRAPHIC:
				case DECRYPT_DB:
				case DEGREES:
				case DIFFERENCE:
				case DIGITS:
				case DOUBLE_PRECISION:
				case DSN_XMLVALIDATE:
				case EBCDIC_CHR:
				case EBCDIC_STR:
				case ENCRYPT_DATAKEY:
				case ENCRYPT_TDES:
				case EXP:
				case EXTRACT:
				case FLOAT:
				case FLOOR:
				case GENERATE_UNIQUE:
				case GENERATE_UNIQUE_BINARY:
				case GETHINT:
				case GETVARIABLE:
				case GRAPHIC:
				case GREATEST:
				case HASH:
				case HASH_CRC32:
				case HASH_MD5:
				case HASH_SHA1:
				case HASH_SHA256:
				case HEX:
				case IDENTITY_VAL_LOCAL:
				case IFNULL:
				case INSTR:
				case INT:
				case INTEGER:
				case JULIAN_DAY:
				case LAST_DAY:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LN:
				case LOCATE:
				case LOCATE_IN_STRING:
				case LOG10:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAX:
				case MAX_CARDINALITY:
				case MIDNIGHT_SECONDS:
				case MIN:
				case MINUTE:
				case MOD:
				case MONTHS_BETWEEN:
				case MQREAD:
				case MQREADCLOB:
				case MQRECEIVE:
				case MQRECEIVECLOB:
				case MQSEND:
				case MULTIPLY_ALT:
				case NEXT_DAY:
				case NEXT_MONTH:
				case NORMALIZE_DECFLOAT:
				case NORMALIZE_STRING:
				case NULLIF:
				case NVL:
				case OVERLAY:
				case PACK:
				case POSITION:
				case POSSTR:
				case POW:
				case POWER:
				case QUANTIZE:
				case QUARTER:
				case RADIANS:
				case RAISE_ERROR:
				case RAND:
				case RANDOM:
				case REAL:
				case REGEXP_COUNT:
				case REGEXP_INSTR:
				case REGEXP_LIKE:
				case REGEXP_REPLACE:
				case REGEXP_SUBSTR:
				case REPLACE:
				case RID:
				case ROUND:
				case ROUND_TIMESTAMP:
				case ROWID:
				case RPAD:
				case RTRIM:
				case SCORE:
				case SIGN:
				case SIN:
				case SINH:
				case SMALLINT:
				case SOAPHTTPC:
				case SOAPHTTPNC:
				case SOAPHTTPNV:
				case SOAPHTTPV:
				case SOUNDEX:
				case SPACE:
				case SQRT:
				case STRIP:
				case STRLEFT:
				case STRPOS:
				case STRRIGHT:
				case SUBSTR:
				case SUBSTRING:
				case TAN:
				case TANH:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIMESTAMP_FORMAT:
				case TIMESTAMP_ISO:
				case TIMESTAMP_TZ:
				case TO_CHAR:
				case TO_CLOB:
				case TO_DATE:
				case TO_NUMBER:
				case TOTALORDER:
				case TO_TIMESTAMP:
				case TRANSLATE:
				case TRIM:
				case TRIM_ARRAY:
				case TRUNC:
				case TRUNC_TIMESTAMP:
				case UCASE:
				case UNICODE:
				case UNICODE_STR:
				case UNISTR:
				case UPPER:
				case VARBINARY:
				case VARCHAR:
				case VARCHAR9:
				case VARCHAR_BIT_FORMAT:
				case VARCHAR_FORMAT:
				case VARGRAPHIC:
				case VERIFY_GROUP_FOR_USER:
				case VERIFY_ROLE_FOR_USER:
				case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
				case WEEK:
				case WEEK_ISO:
				case WRAP:
				case XMLATTRIBUTES:
				case XMLCOMMENT:
				case XMLCONCAT:
				case XMLDOCUMENT:
				case XMLELEMENT:
				case XMLFOREST:
				case XMLMODIFY:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLSERIALIZE:
				case XMLTEXT:
				case XMLXSROBJECTID:
				case XSLTRANSFORM:
				case CURRENT_ACCELERATOR:
				case CURRENT_APPLICATION_COMPATIBILITY:
				case CURRENT_APPLICATION_ENCODING_SCHEME:
				case CURRENT_CLIENT_ACCTNG:
				case CURRENT_CLIENT_APPLNAME:
				case CURRENT_CLIENT_CORR_TOKEN:
				case CURRENT_CLIENT_USERID:
				case CURRENT_CLIENT_WRKSTNNAME:
				case CURRENT_DATE:
				case CURRENT_DEBUG_MODE:
				case CURRENT_DECFLOAT_ROUNDING_MODE:
				case CURRENT_DEGREE:
				case CURRENT_EXPLAIN_MODE:
				case CURRENT_GET_ACCEL_ARCHIVE:
				case CURRENT_LOCALE_LC_CTYPE:
				case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
				case CURRENT_MEMBER:
				case CURRENT_OPTIMIZATION_HINT:
				case CURRENT_PACKAGE_PATH:
				case CURRENT_PACKAGESET:
				case CURRENT_PATH:
				case CURRENT_PRECISION:
				case CURRENT_QUERY_ACCELERATION:
				case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
				case CURRENT_REFRESH_AGE:
				case CURRENT_ROUTINE_VERSION:
				case CURRENT_RULES:
				case CURRENT_SCHEMA:
				case CURRENT_SERVER:
				case CURRENT_SQLID:
				case CURRENT_TEMPORAL_BUSINESS_TIME:
				case CURRENT_TEMPORAL_SYSTEM_TIME:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case CURRENT_TIME_ZONE:
				case ENCRYPTION_PASSWORD:
				case SESSION_TIME_ZONE:
				case SESSION_USER:
				case USER:
				case ADMIN_TASK_LIST:
				case ADMIN_TASK_OUTPUT:
				case ADMIN_TASK_STATUS:
				case BLOCKING_THREADS:
				case MQREADALL:
				case MQREADALLCLOB:
				case MQRECEIVEALL:
				case MQRECEIVEALLCLOB:
				case XMLTABLE:
				case SQLIDENTIFIER:
					{
					setState(2027);
					volumeID();
					}
					break;
				case NONNUMERICLITERAL:
					{
					setState(2028);
					match(NONNUMERICLITERAL);
					}
					break;
				case SPLAT:
					{
					setState(2029);
					match(SPLAT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2040);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2032);
					match(COMMA);
					setState(2036);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case INSTEAD:
					case NEW:
					case NEW_TABLE:
					case OLD_TABLE:
					case REFERENCING:
					case BASED:
					case UPON:
					case ADD:
					case AFTER:
					case ALL:
					case ALLOCATE:
					case ALLOW:
					case ALTER:
					case ALTERAND:
					case ANY:
					case ARRAY:
					case ARRAY_EXISTS:
					case AS:
					case ASENSITIVE:
					case ASSOCIATE:
					case ASUTIME:
					case AT:
					case AUDIT:
					case AUX:
					case AUXILIARY:
					case BEFORE:
					case BEGIN:
					case BETWEEN:
					case BUFFERPOOL:
					case BUFFERPOOLS:
					case BY:
					case CALL:
					case CAPTURE:
					case CASCADED:
					case CASE:
					case CAST:
					case CCSID:
					case CHAR:
					case CHARACTER:
					case CHECK:
					case CLONE:
					case CLOSE:
					case CLUSTER:
					case COLLECTION:
					case COLLID:
					case COLUMN:
					case COMMENT:
					case COMMIT:
					case CONCAT:
					case CONDITION:
					case CONNECT:
					case CONNECTION:
					case CONSTRAINT:
					case CONTAINS:
					case CONTENT:
					case CONTINUE:
					case CREATE:
					case CUBE:
					case CURRENT:
					case CURRENT_LC_CTYPE:
					case CURRVAL:
					case CURSOR:
					case DATA:
					case DATABASE:
					case DAY:
					case DAYS:
					case DBINFO:
					case DECLARE:
					case DEFAULT:
					case DELETE:
					case DESCRIPTOR:
					case DETERMINISTIC:
					case DISABLE:
					case DISALLOW:
					case DISTINCT:
					case DO:
					case DOCUMENT:
					case DOUBLE:
					case DROP:
					case DSSIZE:
					case DYNAMIC:
					case EDITPROC:
					case ELSE:
					case ELSEIF:
					case ENCODING:
					case ENCRYPTION:
					case END:
					case END_EXEC:
					case ENDING:
					case ERASE:
					case ESCAPE:
					case EXCEPT:
					case EXCEPTION:
					case EXEC_SQL:
					case EXECUTE:
					case EXISTS:
					case EXIT:
					case EXPLAIN:
					case EXTERNAL:
					case FENCED:
					case FETCH:
					case FIELDPROC:
					case FINAL:
					case FIRST:
					case FOR:
					case FREE:
					case FROM:
					case FULL:
					case FUNCTION:
					case GENERATED:
					case GET:
					case GLOBAL:
					case GO:
					case GOTO:
					case GRANT:
					case GROUP:
					case HANDLER:
					case HAVING:
					case HOLD:
					case HOUR:
					case HOURS:
					case IF:
					case IMMEDIATE:
					case IN:
					case INCLUSIVE:
					case INDEX:
					case INDEXBP:
					case INHERIT:
					case INNER:
					case INOUT:
					case INSENSITIVE:
					case INSERT:
					case INTERSECT:
					case INTO:
					case IS:
					case ISOBID:
					case ITERATE:
					case JAR:
					case JOIN:
					case KEEP:
					case KEY:
					case LABEL:
					case LANGUAGE:
					case LAST:
					case LC_CTYPE:
					case LEAVE:
					case LEFT:
					case LIKE:
					case LIMIT:
					case LOCAL:
					case LOCALE:
					case LOCATOR:
					case LOCATORS:
					case LOCK:
					case LOCKMAX:
					case LOCKSIZE:
					case LONG:
					case LOOP:
					case MAINTAINED:
					case MATERIALIZED:
					case MICROSECOND:
					case MICROSECONDS:
					case MODIFIES:
					case MONTH:
					case MONTHS:
					case NEXT:
					case NEXTVAL:
					case NO:
					case NONE:
					case NOT:
					case NULL:
					case NULLS:
					case NUMPARTS:
					case OBID:
					case OF:
					case OFFSET:
					case OLD:
					case ON:
					case OPEN:
					case OPTIMIZATION:
					case OPTIMIZE:
					case OR:
					case ORDER:
					case ORGANIZATION:
					case OUT:
					case OUTER:
					case PACKAGE:
					case PADDED:
					case PARAMETER:
					case PART:
					case PARTITION:
					case PARTITIONED:
					case PARTITIONING:
					case PATH:
					case PERIOD:
					case PIECESIZE:
					case PLAN:
					case PRECISION:
					case PREPARE:
					case PREVVAL:
					case PRIOR:
					case PRIQTY:
					case PRIVILEGES:
					case PROCEDURE:
					case PROGRAM:
					case PSID:
					case PUBLIC:
					case QUERY:
					case QUERYNO:
					case READS:
					case REFERENCES:
					case REFRESH:
					case RELEASE:
					case RENAME:
					case REPEAT:
					case RESIGNAL:
					case RESTRICT:
					case RESULT:
					case RESULT_SET_LOCATOR:
					case RETURN:
					case RETURNS:
					case REVOKE:
					case RIGHT:
					case ROLE:
					case ROLLBACK:
					case ROLLUP:
					case ROUND_CEILING:
					case ROUND_DOWN:
					case ROUND_FLOOR:
					case ROUND_HALF_DOWN:
					case ROUND_HALF_EVEN:
					case ROUND_HALF_UP:
					case ROUND_UP:
					case ROW:
					case ROWSET:
					case RUN:
					case SAVEPOINT:
					case SCHEMA:
					case SCRATCHPAD:
					case SECOND:
					case SECONDS:
					case SECQTY:
					case SECURITY:
					case SELECT:
					case SENSITIVE:
					case SEQUENCE:
					case SET:
					case SIGNAL:
					case SIMPLE:
					case SOME:
					case SOURCE:
					case SPECIFIC:
					case STANDARD:
					case STATEMENT:
					case STATIC:
					case STAY:
					case STOGROUP:
					case STORES:
					case STYLE:
					case SUMMARY:
					case SYNONYM:
					case SYSDATE:
					case SYSTEM:
					case SYSTIMESTAMP:
					case TABLE:
					case TABLESPACE:
					case THEN:
					case TO:
					case TRIGGER:
					case TRUNCATE:
					case TYPE:
					case UNDO:
					case UNION:
					case UNIQUE:
					case UNTIL:
					case UPDATE:
					case USING:
					case VALIDPROC:
					case VALUE:
					case VALUES:
					case VARIABLE:
					case VARIANT:
					case VCAT:
					case VERSIONING:
					case VIEW:
					case VOLATILE:
					case VOLUMES:
					case WHEN:
					case WHENEVER:
					case WHERE:
					case WHILE:
					case WITH:
					case WLM:
					case XMLCAST:
					case XMLEXISTS:
					case XMLNAMESPACES:
					case YEAR:
					case YEARS:
					case ZONE:
					case AND:
					case ARRAY_AGG:
					case ASC:
					case AVG:
					case BIT:
					case CHANGE:
					case CODEUNITS16:
					case CODEUNITS32:
					case CORR:
					case CORRELATION:
					case COUNT:
					case COUNT_BIG:
					case COVAR:
					case COVARIANCE:
					case COVARIANCE_SAMP:
					case COVAR_POP:
					case COVAR_SAMP:
					case CS:
					case CUME_DIST:
					case DENSE_RANK:
					case DESC:
					case EBCDIC:
					case EXCLUSIVE:
					case FIRST_VALUE:
					case FOLLOWING:
					case GROUPING:
					case IGNORE:
					case INDICATOR:
					case INPUT:
					case ISNULL:
					case LAG:
					case LARGE:
					case LAST_VALUE:
					case LEAD:
					case LISTAGG:
					case LOCKED:
					case LOCKS:
					case MEDIAN:
					case MINUTES:
					case MIXED:
					case NOTNULL:
					case NTH_VALUE:
					case NTILE:
					case NUMERIC:
					case OBJECT:
					case OCTETS:
					case ONLY:
					case OVER:
					case PASSING:
					case PERCENTILE_CONT:
					case PERCENTILE_DISC:
					case PERCENT_RANK:
					case PRECEDING:
					case PREVIOUS:
					case RANGE:
					case RANK:
					case RATIO_TO_REPORT:
					case READ:
					case REF:
					case REGR_AVGX:
					case REGR_AVGY:
					case REGR_COUNT:
					case REGR_ICPT:
					case REGR_INTERCEPT:
					case REGR_R2:
					case REGR_SLOPE:
					case REGR_SXX:
					case REGR_SXY:
					case REGR_SYY:
					case RESPECT:
					case ROW_NUMBER:
					case ROWS:
					case RR:
					case RS:
					case SBCS:
					case SELECTIVITY:
					case SETS:
					case SHARE:
					case SKIP_:
					case STDDEV:
					case STDDEV_POP:
					case STDDEV_SAMP:
					case SUM:
					case TOKEN:
					case UNBOUNDED:
					case UNPACK:
					case UR:
					case USE:
					case VAR:
					case VARIANCE:
					case VARIANCE_SAMP:
					case VAR_POP:
					case VAR_SAMP:
					case VARYING:
					case WITHOUT:
					case XML:
					case XMLAGG:
					case COLUMNS:
					case SQLID:
					case ORDINALITY:
					case SYSTEM_TIME:
					case BUSINESS_TIME:
					case MULTIPLIER:
					case UNNEST:
					case CROSS:
					case CALLER:
					case CLIENT:
					case POSITIONING:
					case SCROLL:
					case ACTION:
					case ASSEMBLE:
					case C_:
					case CALLED:
					case COBOL:
					case DB2:
					case DEFINER:
					case DISPATCH:
					case ENVIRONMENT:
					case FAILURE:
					case FAILURES:
					case JAVA:
					case MAIN:
					case NAME:
					case OPTIONS:
					case PARALLEL:
					case PLI:
					case REGISTERS:
					case RESIDENT:
					case SECURED:
					case SPECIAL:
					case SQL:
					case STOP:
					case SUB:
					case YES:
					case APPLICATION:
					case CHANGED:
					case COMPATIBILITY:
					case COMPRESS:
					case COPY:
					case FREEPAGE:
					case GBPCACHE:
					case INCLUDE:
					case MAXVALUE:
					case MINVALUE:
					case PCTFREE:
					case REGENERATE:
					case MASK:
					case ENABLE:
					case PERMISSION:
					case ATOMIC:
					case SQLEXCEPTION:
					case MERGE:
					case MATCHED:
					case SQLSTATE:
					case MESSAGE_TEXT:
					case OVERRIDING:
					case PORTION:
					case DB2SQL:
					case DEBUG:
					case GENERAL:
					case MODE_:
					case REXX:
					case CACHE:
					case CYCLE:
					case INCREMENT:
					case RESTART:
					case DATACLAS:
					case MGMTCLAS:
					case REMOVE:
					case STORCLAS:
					case ACCESS:
					case ACTIVATE:
					case ALWAYS:
					case APPEND:
					case ARCHIVE:
					case BUSINESS:
					case CASCADE:
					case CHANGES:
					case CONTROL:
					case DEACTIVATE:
					case DEFERRED:
					case EACH:
					case ENFORCED:
					case EXTRA:
					case FOREIGN:
					case HIDDEN_:
					case HISTORY:
					case ID:
					case IDENTITY:
					case IMPLICITLY:
					case INITIALLY:
					case INLINE:
					case OPERATION:
					case ORGANIZE:
					case OVERLAPS:
					case PACKAGE_NAME:
					case PACKAGE_SCHEMA:
					case PACKAGE_VERSION:
					case PRIMARY:
					case RESET:
					case ROTATE:
					case START:
					case SYSIBM:
					case TRANSACTION:
					case XMLSCHEMA:
					case ELEMENT:
					case URL:
					case NAMESPACE:
					case LOCATION:
					case SYSXSR:
					case ALGORITHM:
					case FIXEDLENGTH:
					case HUFFMAN:
					case LOB:
					case LOG:
					case LOGGED:
					case MAXPARTITIONS:
					case MAXROWS:
					case MEMBER:
					case MOVE:
					case PAGE:
					case PAGENUM:
					case PENDING:
					case RELATIVE:
					case SEGSIZE:
					case TRACKMOD:
					case ADDRESS:
					case ATTRIBUTES:
					case AUTHENTICATION:
					case AUTHID:
					case CONTEXT:
					case JOBNAME:
					case OWNER:
					case PROFILE:
					case QUALIFIER:
					case SERVAUTH:
					case TRUSTED:
					case SECTION:
					case ACTIVE:
					case VERSION:
					case ALIAS:
					case WORK:
					case WORKFILE:
					case SYSDEFLT:
					case NULTERM:
					case STRUCTURE:
					case GENERIC:
					case TEMPORARY:
					case DEFER:
					case DEFINE:
					case EXCLUDE:
					case GENERATE:
					case KEYS:
					case XMLPATTERN:
					case SIZE:
					case EVERY:
					case ABSOLUTE:
					case ACCELERATOR:
					case EXCLUDING:
					case INCLUDING:
					case DEFAULTS:
					case MODIFIERS:
					case OPTION:
					case PRESERVE:
					case BOTH:
					case DESCRIBE:
					case LABELS:
					case NAMES:
					case OUTPUT:
					case EXCHANGE:
					case STABILIZED:
					case STMTCACHE:
					case STMTID:
					case STMTTOKEN:
					case STARTING:
					case CATALOG_NAME:
					case CONDITION_NUMBER:
					case CURSOR_NAME:
					case DB2_AUTHENTICATION_TYPE:
					case DB2_AUTHORIZATION_ID:
					case DB2_CONNECTION_STATE:
					case DB2_CONNECTION_STATUS:
					case DB2_ENCRYPTION_TYPE:
					case DB2_ERROR_CODE1:
					case DB2_ERROR_CODE2:
					case DB2_ERROR_CODE3:
					case DB2_ERROR_CODE4:
					case DB2_GET_DIAGNOSTICS_DIAGNOSTICS:
					case DB2_INTERNAL_ERROR_POINTER:
					case DB2_LAST_ROW:
					case DB2_LINE_NUMBER:
					case DB2_MESSAGE_ID:
					case DB2_MODULE_DETECTING_ERROR:
					case DB2_NUMBER_PARAMETER_MARKERS:
					case DB2_NUMBER_RESULT_SETS:
					case DB2_NUMBER_ROWS:
					case DB2_ORDINAL_TOKEN_:
					case DB2_PRODUCT_ID:
					case DB2_REASON_CODE:
					case DB2_RETURNED_SQLCODE:
					case DB2_RETURN_STATUS:
					case DB2_ROW_NUMBER:
					case DB2_SERVER_CLASS_NAME:
					case DB2_SQL_ATTR_CURSOR_HOLD:
					case DB2_SQL_ATTR_CURSOR_ROWSET:
					case DB2_SQL_ATTR_CURSOR_SCROLLABLE:
					case DB2_SQL_ATTR_CURSOR_SENSITIVITY:
					case DB2_SQL_ATTR_CURSOR_TYPE:
					case DB2_SQLERRD1:
					case DB2_SQLERRD2:
					case DB2_SQLERRD3:
					case DB2_SQLERRD4:
					case DB2_SQLERRD5:
					case DB2_SQLERRD6:
					case DB2_SQLERRD_SET:
					case DB2_SQL_NESTING_LEVEL:
					case DB2_TOKEN_COUNT:
					case DIAGNOSTICS:
					case MORE_:
					case NUMBER:
					case RETURNED_SQLSTATE:
					case ROW_COUNT:
					case SERVER_NAME:
					case STACKED:
					case CREATETAB:
					case CREATETS:
					case DBADM:
					case DBCTRL:
					case DBMAINT:
					case DISPLAYDB:
					case IMAGCOPY:
					case LOAD:
					case PACKADM:
					case RECOVERDB:
					case REORG:
					case REPAIR:
					case STARTDB:
					case STATS:
					case STOPDB:
					case BIND:
					case ALTERIN:
					case CREATEIN:
					case DROPIN:
					case USAGE:
					case ACCESSCTRL:
					case BINDADD:
					case BINDAGENT:
					case BSDS:
					case CREATEALIAS:
					case CREATEDBA:
					case CREATEDBC:
					case CREATE_SECURE_OBJECT:
					case CREATESG:
					case CREATETMTAB:
					case DATAACCESS:
					case DEBUGSESSION:
					case DISPLAY:
					case MONITOR1:
					case MONITOR2:
					case RECOVER:
					case SQLADM:
					case STOPALL:
					case STOSPACE:
					case SYSADM:
					case SYSCTRL:
					case SYSOPR:
					case TRACE:
					case UNLOAD:
					case WRITE:
					case ABS:
					case ABSVAL:
					case ACOS:
					case ADD_DAYS:
					case ADD_MONTHS:
					case ARRAY_DELETE:
					case ARRAY_FIRST:
					case ARRAY_LAST:
					case ARRAY_NEXT:
					case ARRAY_PRIOR:
					case ARRAY_TRIM:
					case ASCII:
					case ASCII_CHR:
					case ASCIISTR:
					case ASCII_STR:
					case ASIN:
					case ATAN:
					case ATAN2:
					case ATANH:
					case BIGINT:
					case BINARY:
					case BITAND:
					case BITANDNOT:
					case BITNOT:
					case BITOR:
					case BITXOR:
					case BLOB:
					case BTRIM:
					case CARDINALITY:
					case CCSID_ENCODING:
					case CEIL:
					case CEILING:
					case CHAR9:
					case CHARACTER_LENGTH:
					case CHAR_LENGTH:
					case CHR:
					case CLOB:
					case COALESCE:
					case COLLATION_KEY:
					case COMPARE_DECFLOAT:
					case COS:
					case COSH:
					case DATE:
					case DAYOFMONTH:
					case DAYOFWEEK:
					case DAYOFWEEK_ISO:
					case DAYOFYEAR:
					case DAYS_BETWEEN:
					case DBCLOB:
					case DEC:
					case DECFLOAT:
					case DECFLOAT_FORMAT:
					case DECFLOAT_SORTKEY:
					case DECIMAL:
					case DECODE:
					case DECRYPT_BINARY:
					case DECRYPT_BIT:
					case DECRYPT_CHAR:
					case DECRYPT_DATAKEY_BIGINT:
					case DECRYPT_DATAKEY_BIT:
					case DECRYPT_DATAKEY_CLOB:
					case DECRYPT_DATAKEY_DBCLOB:
					case DECRYPT_DATAKEY_DECIMAL:
					case DECRYPT_DATAKEY_INTEGER:
					case DECRYPT_DATAKEY_VARCHAR:
					case DECRYPT_DATAKEY_VARGRAPHIC:
					case DECRYPT_DB:
					case DEGREES:
					case DIFFERENCE:
					case DIGITS:
					case DOUBLE_PRECISION:
					case DSN_XMLVALIDATE:
					case EBCDIC_CHR:
					case EBCDIC_STR:
					case ENCRYPT_DATAKEY:
					case ENCRYPT_TDES:
					case EXP:
					case EXTRACT:
					case FLOAT:
					case FLOOR:
					case GENERATE_UNIQUE:
					case GENERATE_UNIQUE_BINARY:
					case GETHINT:
					case GETVARIABLE:
					case GRAPHIC:
					case GREATEST:
					case HASH:
					case HASH_CRC32:
					case HASH_MD5:
					case HASH_SHA1:
					case HASH_SHA256:
					case HEX:
					case IDENTITY_VAL_LOCAL:
					case IFNULL:
					case INSTR:
					case INT:
					case INTEGER:
					case JULIAN_DAY:
					case LAST_DAY:
					case LCASE:
					case LEAST:
					case LENGTH:
					case LN:
					case LOCATE:
					case LOCATE_IN_STRING:
					case LOG10:
					case LOWER:
					case LPAD:
					case LTRIM:
					case MAX:
					case MAX_CARDINALITY:
					case MIDNIGHT_SECONDS:
					case MIN:
					case MINUTE:
					case MOD:
					case MONTHS_BETWEEN:
					case MQREAD:
					case MQREADCLOB:
					case MQRECEIVE:
					case MQRECEIVECLOB:
					case MQSEND:
					case MULTIPLY_ALT:
					case NEXT_DAY:
					case NEXT_MONTH:
					case NORMALIZE_DECFLOAT:
					case NORMALIZE_STRING:
					case NULLIF:
					case NVL:
					case OVERLAY:
					case PACK:
					case POSITION:
					case POSSTR:
					case POW:
					case POWER:
					case QUANTIZE:
					case QUARTER:
					case RADIANS:
					case RAISE_ERROR:
					case RAND:
					case RANDOM:
					case REAL:
					case REGEXP_COUNT:
					case REGEXP_INSTR:
					case REGEXP_LIKE:
					case REGEXP_REPLACE:
					case REGEXP_SUBSTR:
					case REPLACE:
					case RID:
					case ROUND:
					case ROUND_TIMESTAMP:
					case ROWID:
					case RPAD:
					case RTRIM:
					case SCORE:
					case SIGN:
					case SIN:
					case SINH:
					case SMALLINT:
					case SOAPHTTPC:
					case SOAPHTTPNC:
					case SOAPHTTPNV:
					case SOAPHTTPV:
					case SOUNDEX:
					case SPACE:
					case SQRT:
					case STRIP:
					case STRLEFT:
					case STRPOS:
					case STRRIGHT:
					case SUBSTR:
					case SUBSTRING:
					case TAN:
					case TANH:
					case TIME:
					case TIMESTAMP:
					case TIMESTAMPADD:
					case TIMESTAMPDIFF:
					case TIMESTAMP_FORMAT:
					case TIMESTAMP_ISO:
					case TIMESTAMP_TZ:
					case TO_CHAR:
					case TO_CLOB:
					case TO_DATE:
					case TO_NUMBER:
					case TOTALORDER:
					case TO_TIMESTAMP:
					case TRANSLATE:
					case TRIM:
					case TRIM_ARRAY:
					case TRUNC:
					case TRUNC_TIMESTAMP:
					case UCASE:
					case UNICODE:
					case UNICODE_STR:
					case UNISTR:
					case UPPER:
					case VARBINARY:
					case VARCHAR:
					case VARCHAR9:
					case VARCHAR_BIT_FORMAT:
					case VARCHAR_FORMAT:
					case VARGRAPHIC:
					case VERIFY_GROUP_FOR_USER:
					case VERIFY_ROLE_FOR_USER:
					case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
					case WEEK:
					case WEEK_ISO:
					case WRAP:
					case XMLATTRIBUTES:
					case XMLCOMMENT:
					case XMLCONCAT:
					case XMLDOCUMENT:
					case XMLELEMENT:
					case XMLFOREST:
					case XMLMODIFY:
					case XMLPARSE:
					case XMLPI:
					case XMLQUERY:
					case XMLSERIALIZE:
					case XMLTEXT:
					case XMLXSROBJECTID:
					case XSLTRANSFORM:
					case CURRENT_ACCELERATOR:
					case CURRENT_APPLICATION_COMPATIBILITY:
					case CURRENT_APPLICATION_ENCODING_SCHEME:
					case CURRENT_CLIENT_ACCTNG:
					case CURRENT_CLIENT_APPLNAME:
					case CURRENT_CLIENT_CORR_TOKEN:
					case CURRENT_CLIENT_USERID:
					case CURRENT_CLIENT_WRKSTNNAME:
					case CURRENT_DATE:
					case CURRENT_DEBUG_MODE:
					case CURRENT_DECFLOAT_ROUNDING_MODE:
					case CURRENT_DEGREE:
					case CURRENT_EXPLAIN_MODE:
					case CURRENT_GET_ACCEL_ARCHIVE:
					case CURRENT_LOCALE_LC_CTYPE:
					case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
					case CURRENT_MEMBER:
					case CURRENT_OPTIMIZATION_HINT:
					case CURRENT_PACKAGE_PATH:
					case CURRENT_PACKAGESET:
					case CURRENT_PATH:
					case CURRENT_PRECISION:
					case CURRENT_QUERY_ACCELERATION:
					case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
					case CURRENT_REFRESH_AGE:
					case CURRENT_ROUTINE_VERSION:
					case CURRENT_RULES:
					case CURRENT_SCHEMA:
					case CURRENT_SERVER:
					case CURRENT_SQLID:
					case CURRENT_TEMPORAL_BUSINESS_TIME:
					case CURRENT_TEMPORAL_SYSTEM_TIME:
					case CURRENT_TIME:
					case CURRENT_TIMESTAMP:
					case CURRENT_TIME_ZONE:
					case ENCRYPTION_PASSWORD:
					case SESSION_TIME_ZONE:
					case SESSION_USER:
					case USER:
					case ADMIN_TASK_LIST:
					case ADMIN_TASK_OUTPUT:
					case ADMIN_TASK_STATUS:
					case BLOCKING_THREADS:
					case MQREADALL:
					case MQREADALLCLOB:
					case MQRECEIVEALL:
					case MQRECEIVEALLCLOB:
					case XMLTABLE:
					case SQLIDENTIFIER:
						{
						setState(2033);
						volumeID();
						}
						break;
					case NONNUMERICLITERAL:
						{
						setState(2034);
						match(NONNUMERICLITERAL);
						}
						break;
					case SPLAT:
						{
						setState(2035);
						match(SPLAT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					setState(2042);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2043);
				match(RPAREN);
				}
				}
			}

			setState(2046);
			match(VCAT);
			setState(2047);
			catalogName();
			setState(2049);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DATACLAS) {
				{
				setState(2048);
				dataclasOption();
				}
			}

			setState(2052);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MGMTCLAS) {
				{
				setState(2051);
				mgmtclasOption();
				}
			}

			setState(2055);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STORCLAS) {
				{
				setState(2054);
				storclasOption();
				}
			}

			setState(2058);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KEY || _la==NO) {
				{
				setState(2057);
				keyLabelOption();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTableStatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DB2zSQLParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public CreateTableMaterializedQueryDefinitionContext createTableMaterializedQueryDefinition() {
			return getRuleContext(CreateTableMaterializedQueryDefinitionContext.class,0);
		}
		public CreateTableInClauseContext createTableInClause() {
			return getRuleContext(CreateTableInClauseContext.class,0);
		}
		public PartitioningClauseContext partitioningClause() {
			return getRuleContext(PartitioningClauseContext.class,0);
		}
		public OrganizationClauseContext organizationClause() {
			return getRuleContext(OrganizationClauseContext.class,0);
		}
		public EditprocClauseContext editprocClause() {
			return getRuleContext(EditprocClauseContext.class,0);
		}
		public ValidprocClauseContext validprocClause() {
			return getRuleContext(ValidprocClauseContext.class,0);
		}
		public AuditClauseContext auditClause() {
			return getRuleContext(AuditClauseContext.class,0);
		}
		public ObidClauseContext obidClause() {
			return getRuleContext(ObidClauseContext.class,0);
		}
		public DataCaptureClauseContext dataCaptureClause() {
			return getRuleContext(DataCaptureClauseContext.class,0);
		}
		public RestrictOnDropClauseContext restrictOnDropClause() {
			return getRuleContext(RestrictOnDropClauseContext.class,0);
		}
		public CcsidClause1Context ccsidClause1() {
			return getRuleContext(CcsidClause1Context.class,0);
		}
		public CardinalityClauseContext cardinalityClause() {
			return getRuleContext(CardinalityClauseContext.class,0);
		}
		public LoggedOptionContext loggedOption() {
			return getRuleContext(LoggedOptionContext.class,0);
		}
		public CompressOptionContext compressOption() {
			return getRuleContext(CompressOptionContext.class,0);
		}
		public AppendClauseContext appendClause() {
			return getRuleContext(AppendClauseContext.class,0);
		}
		public DssizeOptionContext dssizeOption() {
			return getRuleContext(DssizeOptionContext.class,0);
		}
		public BufferpoolOptionContext bufferpoolOption() {
			return getRuleContext(BufferpoolOptionContext.class,0);
		}
		public MemberClauseContext memberClause() {
			return getRuleContext(MemberClauseContext.class,0);
		}
		public TrackmodClauseContext trackmodClause() {
			return getRuleContext(TrackmodClauseContext.class,0);
		}
		public PagenumClauseContext pagenumClause() {
			return getRuleContext(PagenumClauseContext.class,0);
		}
		public KeyLabelOptionContext keyLabelOption() {
			return getRuleContext(KeyLabelOptionContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode LIKE() { return getToken(DB2zSQLParser.LIKE, 0); }
		public AsResultTableContext asResultTable() {
			return getRuleContext(AsResultTableContext.class,0);
		}
		public List<CreateTableColumnDefinitionContext> createTableColumnDefinition() {
			return getRuleContexts(CreateTableColumnDefinitionContext.class);
		}
		public CreateTableColumnDefinitionContext createTableColumnDefinition(int i) {
			return getRuleContext(CreateTableColumnDefinitionContext.class,i);
		}
		public List<PeriodDefinitionContext> periodDefinition() {
			return getRuleContexts(PeriodDefinitionContext.class);
		}
		public PeriodDefinitionContext periodDefinition(int i) {
			return getRuleContext(PeriodDefinitionContext.class,i);
		}
		public List<UniqueConstraintContext> uniqueConstraint() {
			return getRuleContexts(UniqueConstraintContext.class);
		}
		public UniqueConstraintContext uniqueConstraint(int i) {
			return getRuleContext(UniqueConstraintContext.class,i);
		}
		public List<ReferentialConstraintContext> referentialConstraint() {
			return getRuleContexts(ReferentialConstraintContext.class);
		}
		public ReferentialConstraintContext referentialConstraint(int i) {
			return getRuleContext(ReferentialConstraintContext.class,i);
		}
		public List<CheckConstraintContext> checkConstraint() {
			return getRuleContexts(CheckConstraintContext.class);
		}
		public CheckConstraintContext checkConstraint(int i) {
			return getRuleContext(CheckConstraintContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public CopyOptionsContext copyOptions() {
			return getRuleContext(CopyOptionsContext.class,0);
		}
		public CreateTableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTableStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateTableStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateTableStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateTableStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTableStatementContext createTableStatement() throws RecognitionException {
		CreateTableStatementContext _localctx = new CreateTableStatementContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_createTableStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2060);
			match(CREATE);
			setState(2061);
			match(TABLE);
			setState(2062);
			tableName();
			setState(2096);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,109,_ctx) ) {
			case 1:
				{
				{
				setState(2063);
				match(LPAREN);
				setState(2069);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,104,_ctx) ) {
				case 1:
					{
					setState(2064);
					createTableColumnDefinition();
					}
					break;
				case 2:
					{
					setState(2065);
					periodDefinition();
					}
					break;
				case 3:
					{
					setState(2066);
					uniqueConstraint();
					}
					break;
				case 4:
					{
					setState(2067);
					referentialConstraint();
					}
					break;
				case 5:
					{
					setState(2068);
					checkConstraint();
					}
					break;
				}
				setState(2081);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2071);
					match(COMMA);
					setState(2077);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,105,_ctx) ) {
					case 1:
						{
						setState(2072);
						createTableColumnDefinition();
						}
						break;
					case 2:
						{
						setState(2073);
						periodDefinition();
						}
						break;
					case 3:
						{
						setState(2074);
						uniqueConstraint();
						}
						break;
					case 4:
						{
						setState(2075);
						referentialConstraint();
						}
						break;
					case 5:
						{
						setState(2076);
						checkConstraint();
						}
						break;
					}
					}
					}
					setState(2083);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2084);
				match(RPAREN);
				}
				}
				break;
			case 2:
				{
				{
				setState(2086);
				match(LIKE);
				setState(2087);
				tableName();
				setState(2089);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING || _la==EXCLUDING || _la==INCLUDING) {
					{
					setState(2088);
					copyOptions();
					}
				}

				}
				}
				break;
			case 3:
				{
				{
				setState(2091);
				asResultTable();
				setState(2093);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING || _la==EXCLUDING || _la==INCLUDING) {
					{
					setState(2092);
					copyOptions();
					}
				}

				}
				}
				break;
			case 4:
				{
				setState(2095);
				createTableMaterializedQueryDefinition();
				}
				break;
			}
			setState(2099);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(2098);
				createTableInClause();
				}
			}

			setState(2102);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(2101);
				partitioningClause();
				}
			}

			setState(2105);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORGANIZE) {
				{
				setState(2104);
				organizationClause();
				}
			}

			setState(2108);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EDITPROC) {
				{
				setState(2107);
				editprocClause();
				}
			}

			setState(2111);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VALIDPROC) {
				{
				setState(2110);
				validprocClause();
				}
			}

			setState(2114);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUDIT) {
				{
				setState(2113);
				auditClause();
				}
			}

			setState(2117);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OBID) {
				{
				setState(2116);
				obidClause();
				}
			}

			setState(2120);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DATA) {
				{
				setState(2119);
				dataCaptureClause();
				}
			}

			setState(2123);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2122);
				restrictOnDropClause();
				}
			}

			setState(2126);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CCSID) {
				{
				setState(2125);
				ccsidClause1();
				}
			}

			setState(2129);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,120,_ctx) ) {
			case 1:
				{
				setState(2128);
				cardinalityClause();
				}
				break;
			}
			setState(2132);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT || _la==LOG || _la==LOGGED) {
				{
				setState(2131);
				loggedOption();
				}
			}

			setState(2135);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMPRESS) {
				{
				setState(2134);
				compressOption();
				}
			}

			setState(2138);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==APPEND) {
				{
				setState(2137);
				appendClause();
				}
			}

			setState(2141);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DSSIZE) {
				{
				setState(2140);
				dssizeOption();
				}
			}

			setState(2144);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BUFFERPOOL) {
				{
				setState(2143);
				bufferpoolOption();
				}
			}

			setState(2147);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MEMBER) {
				{
				setState(2146);
				memberClause();
				}
			}

			setState(2150);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TRACKMOD) {
				{
				setState(2149);
				trackmodClause();
				}
			}

			setState(2153);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PAGENUM) {
				{
				setState(2152);
				pagenumClause();
				}
			}

			setState(2156);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KEY || _la==NO) {
				{
				setState(2155);
				keyLabelOption();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTablespaceStatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DB2zSQLParser.CREATE, 0); }
		public TerminalNode TABLESPACE() { return getToken(DB2zSQLParser.TABLESPACE, 0); }
		public TablespaceNameContext tablespaceName() {
			return getRuleContext(TablespaceNameContext.class,0);
		}
		public List<CreateTablespaceOptionListContext> createTablespaceOptionList() {
			return getRuleContexts(CreateTablespaceOptionListContext.class);
		}
		public CreateTablespaceOptionListContext createTablespaceOptionList(int i) {
			return getRuleContext(CreateTablespaceOptionListContext.class,i);
		}
		public CreateTablespaceStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTablespaceStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateTablespaceStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateTablespaceStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateTablespaceStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTablespaceStatementContext createTablespaceStatement() throws RecognitionException {
		CreateTablespaceStatementContext _localctx = new CreateTablespaceStatementContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_createTablespaceStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2158);
			match(CREATE);
			setState(2159);
			match(TABLESPACE);
			setState(2160);
			tablespaceName();
			setState(2164);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 58)) & ~0x3f) == 0 && ((1L << (_la - 58)) & ((1L << (BUFFERPOOL - 58)) | (1L << (CCSID - 58)) | (1L << (CLOSE - 58)) | (1L << (DSSIZE - 58)) | (1L << (ERASE - 58)))) != 0) || ((((_la - 153)) & ~0x3f) == 0 && ((1L << (_la - 153)) & ((1L << (IN - 153)) | (1L << (INSERT - 153)) | (1L << (LOCKMAX - 153)) | (1L << (LOCKSIZE - 153)) | (1L << (NOT - 153)) | (1L << (NUMPARTS - 153)))) != 0) || _la==PRIQTY || _la==SECQTY || _la==USING || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (COMPRESS - 467)) | (1L << (FREEPAGE - 467)) | (1L << (GBPCACHE - 467)) | (1L << (PCTFREE - 467)))) != 0) || ((((_la - 544)) & ~0x3f) == 0 && ((1L << (_la - 544)) & ((1L << (LOG - 544)) | (1L << (LOGGED - 544)) | (1L << (MAXPARTITIONS - 544)) | (1L << (MAXROWS - 544)) | (1L << (MEMBER - 544)) | (1L << (SEGSIZE - 544)) | (1L << (TRACKMOD - 544)) | (1L << (DEFINE - 544)))) != 0)) {
				{
				{
				setState(2161);
				createTablespaceOptionList();
				}
				}
				setState(2166);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTriggerStatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DB2zSQLParser.CREATE, 0); }
		public TerminalNode TRIGGER() { return getToken(DB2zSQLParser.TRIGGER, 0); }
		public TriggerNameContext triggerName() {
			return getRuleContext(TriggerNameContext.class,0);
		}
		public TriggerDefinitionContext triggerDefinition() {
			return getRuleContext(TriggerDefinitionContext.class,0);
		}
		public CreateTriggerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTriggerStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateTriggerStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateTriggerStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateTriggerStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTriggerStatementContext createTriggerStatement() throws RecognitionException {
		CreateTriggerStatementContext _localctx = new CreateTriggerStatementContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_createTriggerStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2167);
			match(CREATE);
			setState(2168);
			match(TRIGGER);
			setState(2169);
			triggerName();
			setState(2170);
			triggerDefinition();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTrustedContextStatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DB2zSQLParser.CREATE, 0); }
		public TerminalNode TRUSTED() { return getToken(DB2zSQLParser.TRUSTED, 0); }
		public TerminalNode CONTEXT() { return getToken(DB2zSQLParser.CONTEXT, 0); }
		public ContextNameContext contextName() {
			return getRuleContext(ContextNameContext.class,0);
		}
		public TerminalNode BASED() { return getToken(DB2zSQLParser.BASED, 0); }
		public TerminalNode UPON() { return getToken(DB2zSQLParser.UPON, 0); }
		public TerminalNode CONNECTION() { return getToken(DB2zSQLParser.CONNECTION, 0); }
		public TerminalNode USING() { return getToken(DB2zSQLParser.USING, 0); }
		public TerminalNode SYSTEM() { return getToken(DB2zSQLParser.SYSTEM, 0); }
		public TerminalNode AUTHID() { return getToken(DB2zSQLParser.AUTHID, 0); }
		public AuthorizationNameContext authorizationName() {
			return getRuleContext(AuthorizationNameContext.class,0);
		}
		public List<TrustedContextDefaultRoleClauseContext> trustedContextDefaultRoleClause() {
			return getRuleContexts(TrustedContextDefaultRoleClauseContext.class);
		}
		public TrustedContextDefaultRoleClauseContext trustedContextDefaultRoleClause(int i) {
			return getRuleContext(TrustedContextDefaultRoleClauseContext.class,i);
		}
		public List<TrustedContextEnableDisableClauseContext> trustedContextEnableDisableClause() {
			return getRuleContexts(TrustedContextEnableDisableClauseContext.class);
		}
		public TrustedContextEnableDisableClauseContext trustedContextEnableDisableClause(int i) {
			return getRuleContext(TrustedContextEnableDisableClauseContext.class,i);
		}
		public List<TrustedContextDefaultSecurityLabelClauseContext> trustedContextDefaultSecurityLabelClause() {
			return getRuleContexts(TrustedContextDefaultSecurityLabelClauseContext.class);
		}
		public TrustedContextDefaultSecurityLabelClauseContext trustedContextDefaultSecurityLabelClause(int i) {
			return getRuleContext(TrustedContextDefaultSecurityLabelClauseContext.class,i);
		}
		public List<TrustedContextAttributesClauseContext> trustedContextAttributesClause() {
			return getRuleContexts(TrustedContextAttributesClauseContext.class);
		}
		public TrustedContextAttributesClauseContext trustedContextAttributesClause(int i) {
			return getRuleContext(TrustedContextAttributesClauseContext.class,i);
		}
		public List<TrustedContextWithUseForClauseContext> trustedContextWithUseForClause() {
			return getRuleContexts(TrustedContextWithUseForClauseContext.class);
		}
		public TrustedContextWithUseForClauseContext trustedContextWithUseForClause(int i) {
			return getRuleContext(TrustedContextWithUseForClauseContext.class,i);
		}
		public CreateTrustedContextStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTrustedContextStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateTrustedContextStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateTrustedContextStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateTrustedContextStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTrustedContextStatementContext createTrustedContextStatement() throws RecognitionException {
		CreateTrustedContextStatementContext _localctx = new CreateTrustedContextStatementContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_createTrustedContextStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2172);
			match(CREATE);
			setState(2173);
			match(TRUSTED);
			setState(2174);
			match(CONTEXT);
			setState(2175);
			contextName();
			setState(2176);
			match(BASED);
			setState(2177);
			match(UPON);
			setState(2178);
			match(CONNECTION);
			setState(2179);
			match(USING);
			setState(2180);
			match(SYSTEM);
			setState(2181);
			match(AUTHID);
			setState(2182);
			authorizationName();
			setState(2188); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(2188);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,131,_ctx) ) {
				case 1:
					{
					setState(2183);
					trustedContextDefaultRoleClause();
					}
					break;
				case 2:
					{
					setState(2184);
					trustedContextEnableDisableClause();
					}
					break;
				case 3:
					{
					setState(2185);
					trustedContextDefaultSecurityLabelClause();
					}
					break;
				case 4:
					{
					setState(2186);
					trustedContextAttributesClause();
					}
					break;
				case 5:
					{
					setState(2187);
					trustedContextWithUseForClause();
					}
					break;
				}
				}
				setState(2190); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==DEFAULT || _la==DISABLE || _la==NO || _la==WITH || _la==ENABLE || _la==ATTRIBUTES );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTypeArrayStatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DB2zSQLParser.CREATE, 0); }
		public TerminalNode TYPE() { return getToken(DB2zSQLParser.TYPE, 0); }
		public ArrayTypeNameContext arrayTypeName() {
			return getRuleContext(ArrayTypeNameContext.class,0);
		}
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public CreateTypeArrayBuiltinTypeContext createTypeArrayBuiltinType() {
			return getRuleContext(CreateTypeArrayBuiltinTypeContext.class,0);
		}
		public TerminalNode ARRAY() { return getToken(DB2zSQLParser.ARRAY, 0); }
		public TerminalNode OPENSQBRACKET() { return getToken(DB2zSQLParser.OPENSQBRACKET, 0); }
		public TerminalNode CLOSESQBRACKET() { return getToken(DB2zSQLParser.CLOSESQBRACKET, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public CreateTypeArrayBuiltinType2Context createTypeArrayBuiltinType2() {
			return getRuleContext(CreateTypeArrayBuiltinType2Context.class,0);
		}
		public CreateTypeArrayStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTypeArrayStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateTypeArrayStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateTypeArrayStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateTypeArrayStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTypeArrayStatementContext createTypeArrayStatement() throws RecognitionException {
		CreateTypeArrayStatementContext _localctx = new CreateTypeArrayStatementContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_createTypeArrayStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2192);
			match(CREATE);
			setState(2193);
			match(TYPE);
			setState(2194);
			arrayTypeName();
			setState(2195);
			match(AS);
			setState(2196);
			createTypeArrayBuiltinType();
			setState(2197);
			match(ARRAY);
			setState(2198);
			match(OPENSQBRACKET);
			setState(2201);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTEGERLITERAL:
				{
				setState(2199);
				match(INTEGERLITERAL);
				}
				break;
			case CHAR:
			case CHARACTER:
			case INT:
			case INTEGER:
			case VARCHAR:
				{
				setState(2200);
				createTypeArrayBuiltinType2();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2203);
			match(CLOSESQBRACKET);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTypeDistinctStatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DB2zSQLParser.CREATE, 0); }
		public TerminalNode TYPE() { return getToken(DB2zSQLParser.TYPE, 0); }
		public DistinctTypeNameContext distinctTypeName() {
			return getRuleContext(DistinctTypeNameContext.class,0);
		}
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public SourceDataTypeContext sourceDataType() {
			return getRuleContext(SourceDataTypeContext.class,0);
		}
		public TerminalNode INLINE() { return getToken(DB2zSQLParser.INLINE, 0); }
		public TerminalNode LENGTH() { return getToken(DB2zSQLParser.LENGTH, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public CreateTypeDistinctStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTypeDistinctStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateTypeDistinctStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateTypeDistinctStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateTypeDistinctStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTypeDistinctStatementContext createTypeDistinctStatement() throws RecognitionException {
		CreateTypeDistinctStatementContext _localctx = new CreateTypeDistinctStatementContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_createTypeDistinctStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2205);
			match(CREATE);
			setState(2206);
			match(TYPE);
			setState(2207);
			distinctTypeName();
			setState(2208);
			match(AS);
			setState(2209);
			sourceDataType();
			setState(2213);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INLINE) {
				{
				setState(2210);
				match(INLINE);
				setState(2211);
				match(LENGTH);
				setState(2212);
				match(INTEGERLITERAL);
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateVariableStatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DB2zSQLParser.CREATE, 0); }
		public TerminalNode VARIABLE() { return getToken(DB2zSQLParser.VARIABLE, 0); }
		public VariableNameContext variableName() {
			return getRuleContext(VariableNameContext.class,0);
		}
		public CreateVariableBuiltInTypeContext createVariableBuiltInType() {
			return getRuleContext(CreateVariableBuiltInTypeContext.class,0);
		}
		public ArrayTypeNameContext arrayTypeName() {
			return getRuleContext(ArrayTypeNameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(DB2zSQLParser.DEFAULT, 0); }
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public SpecialRegisterContext specialRegister() {
			return getRuleContext(SpecialRegisterContext.class,0);
		}
		public CreateVariableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createVariableStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateVariableStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateVariableStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateVariableStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateVariableStatementContext createVariableStatement() throws RecognitionException {
		CreateVariableStatementContext _localctx = new CreateVariableStatementContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_createVariableStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2215);
			match(CREATE);
			setState(2216);
			match(VARIABLE);
			setState(2217);
			variableName();
			setState(2220);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,135,_ctx) ) {
			case 1:
				{
				setState(2218);
				createVariableBuiltInType();
				}
				break;
			case 2:
				{
				setState(2219);
				arrayTypeName();
				}
				break;
			}
			setState(2229);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(2222);
				match(DEFAULT);
				setState(2227);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NULL:
					{
					setState(2223);
					match(NULL);
					}
					break;
				case INTEGERLITERAL:
					{
					setState(2224);
					match(INTEGERLITERAL);
					}
					break;
				case NONNUMERICLITERAL:
					{
					setState(2225);
					match(NONNUMERICLITERAL);
					}
					break;
				case CURRENT_ACCELERATOR:
				case CURRENT_APPLICATION_COMPATIBILITY:
				case CURRENT_APPLICATION_ENCODING_SCHEME:
				case CURRENT_CLIENT_ACCTNG:
				case CURRENT_CLIENT_APPLNAME:
				case CURRENT_CLIENT_CORR_TOKEN:
				case CURRENT_CLIENT_USERID:
				case CURRENT_CLIENT_WRKSTNNAME:
				case CURRENT_DATE:
				case CURRENT_DEBUG_MODE:
				case CURRENT_DECFLOAT_ROUNDING_MODE:
				case CURRENT_DEGREE:
				case CURRENT_EXPLAIN_MODE:
				case CURRENT_GET_ACCEL_ARCHIVE:
				case CURRENT_LOCALE_LC_CTYPE:
				case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
				case CURRENT_MEMBER:
				case CURRENT_OPTIMIZATION_HINT:
				case CURRENT_PACKAGE_PATH:
				case CURRENT_PACKAGESET:
				case CURRENT_PATH:
				case CURRENT_PRECISION:
				case CURRENT_QUERY_ACCELERATION:
				case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
				case CURRENT_REFRESH_AGE:
				case CURRENT_ROUTINE_VERSION:
				case CURRENT_RULES:
				case CURRENT_SCHEMA:
				case CURRENT_SERVER:
				case CURRENT_SQLID:
				case CURRENT_TEMPORAL_BUSINESS_TIME:
				case CURRENT_TEMPORAL_SYSTEM_TIME:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case CURRENT_TIME_ZONE:
				case ENCRYPTION_PASSWORD:
				case SESSION_TIME_ZONE:
				case SESSION_USER:
				case USER:
					{
					setState(2226);
					specialRegister();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateViewStatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DB2zSQLParser.CREATE, 0); }
		public TerminalNode VIEW() { return getToken(DB2zSQLParser.VIEW, 0); }
		public ViewNameContext viewName() {
			return getRuleContext(ViewNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public FullSelectContext fullSelect() {
			return getRuleContext(FullSelectContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public List<CommonTableExpressionContext> commonTableExpression() {
			return getRuleContexts(CommonTableExpressionContext.class);
		}
		public CommonTableExpressionContext commonTableExpression(int i) {
			return getRuleContext(CommonTableExpressionContext.class,i);
		}
		public CreateViewCheckOptionClauseContext createViewCheckOptionClause() {
			return getRuleContext(CreateViewCheckOptionClauseContext.class,0);
		}
		public CreateViewStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createViewStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateViewStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateViewStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateViewStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateViewStatementContext createViewStatement() throws RecognitionException {
		CreateViewStatementContext _localctx = new CreateViewStatementContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_createViewStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2231);
			match(CREATE);
			setState(2232);
			match(VIEW);
			setState(2233);
			viewName();
			setState(2234);
			match(LPAREN);
			setState(2235);
			columnName();
			setState(2240);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2236);
				match(COMMA);
				setState(2237);
				columnName();
				}
				}
				setState(2242);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2243);
			match(RPAREN);
			setState(2244);
			match(AS);
			setState(2254);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2245);
				match(WITH);
				setState(2246);
				commonTableExpression();
				setState(2251);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2247);
					match(COMMA);
					setState(2248);
					commonTableExpression();
					}
					}
					setState(2253);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(2256);
			fullSelect();
			setState(2258);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2257);
				createViewCheckOptionClause();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareCursorStatementContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(DB2zSQLParser.DECLARE, 0); }
		public CursorNameContext cursorName() {
			return getRuleContext(CursorNameContext.class,0);
		}
		public TerminalNode CURSOR() { return getToken(DB2zSQLParser.CURSOR, 0); }
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public StatementNameContext statementName() {
			return getRuleContext(StatementNameContext.class,0);
		}
		public List<HoldabilityContext> holdability() {
			return getRuleContexts(HoldabilityContext.class);
		}
		public HoldabilityContext holdability(int i) {
			return getRuleContext(HoldabilityContext.class,i);
		}
		public List<ReturnabilityContext> returnability() {
			return getRuleContexts(ReturnabilityContext.class);
		}
		public ReturnabilityContext returnability(int i) {
			return getRuleContext(ReturnabilityContext.class,i);
		}
		public List<RowsetPositioningContext> rowsetPositioning() {
			return getRuleContexts(RowsetPositioningContext.class);
		}
		public RowsetPositioningContext rowsetPositioning(int i) {
			return getRuleContext(RowsetPositioningContext.class,i);
		}
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode SCROLL() { return getToken(DB2zSQLParser.SCROLL, 0); }
		public TerminalNode ASENSITIVE() { return getToken(DB2zSQLParser.ASENSITIVE, 0); }
		public TerminalNode INSENSITIVE() { return getToken(DB2zSQLParser.INSENSITIVE, 0); }
		public TerminalNode SENSITIVE() { return getToken(DB2zSQLParser.SENSITIVE, 0); }
		public TerminalNode DYNAMIC() { return getToken(DB2zSQLParser.DYNAMIC, 0); }
		public TerminalNode STATIC() { return getToken(DB2zSQLParser.STATIC, 0); }
		public DeclareCursorStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareCursorStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDeclareCursorStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDeclareCursorStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDeclareCursorStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareCursorStatementContext declareCursorStatement() throws RecognitionException {
		DeclareCursorStatementContext _localctx = new DeclareCursorStatementContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_declareCursorStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2260);
			match(DECLARE);
			setState(2261);
			cursorName();
			setState(2271);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO:
				{
				{
				setState(2262);
				match(NO);
				setState(2263);
				match(SCROLL);
				}
				}
				break;
			case ASENSITIVE:
			case INSENSITIVE:
			case SENSITIVE:
				{
				{
				setState(2268);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ASENSITIVE:
					{
					setState(2264);
					match(ASENSITIVE);
					}
					break;
				case INSENSITIVE:
					{
					setState(2265);
					match(INSENSITIVE);
					}
					break;
				case SENSITIVE:
					{
					{
					setState(2266);
					match(SENSITIVE);
					setState(2267);
					_la = _input.LA(1);
					if ( !(_la==DYNAMIC || _la==STATIC) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2270);
				match(SCROLL);
				}
				}
				break;
			case CURSOR:
				break;
			default:
				break;
			}
			setState(2273);
			match(CURSOR);
			setState(2279);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==WITH || _la==WITHOUT) {
				{
				setState(2277);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,144,_ctx) ) {
				case 1:
					{
					setState(2274);
					holdability();
					}
					break;
				case 2:
					{
					setState(2275);
					returnability();
					}
					break;
				case 3:
					{
					setState(2276);
					rowsetPositioning();
					}
					break;
				}
				}
				setState(2281);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2282);
			match(FOR);
			setState(2285);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,146,_ctx) ) {
			case 1:
				{
				setState(2283);
				selectStatement();
				}
				break;
			case 2:
				{
				setState(2284);
				statementName();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareGlobalTemporaryTableStatementContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(DB2zSQLParser.DECLARE, 0); }
		public TerminalNode GLOBAL() { return getToken(DB2zSQLParser.GLOBAL, 0); }
		public TerminalNode TEMPORARY() { return getToken(DB2zSQLParser.TEMPORARY, 0); }
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public DeclareGlobalTemporaryTableLikeClauseContext declareGlobalTemporaryTableLikeClause() {
			return getRuleContext(DeclareGlobalTemporaryTableLikeClauseContext.class,0);
		}
		public DeclareGlobalTemporaryTableAsResultTableContext declareGlobalTemporaryTableAsResultTable() {
			return getRuleContext(DeclareGlobalTemporaryTableAsResultTableContext.class,0);
		}
		public List<CcsidClause1Context> ccsidClause1() {
			return getRuleContexts(CcsidClause1Context.class);
		}
		public CcsidClause1Context ccsidClause1(int i) {
			return getRuleContext(CcsidClause1Context.class,i);
		}
		public List<OnCommitClauseContext> onCommitClause() {
			return getRuleContexts(OnCommitClauseContext.class);
		}
		public OnCommitClauseContext onCommitClause(int i) {
			return getRuleContext(OnCommitClauseContext.class,i);
		}
		public List<LoggedWithRollbackClauseContext> loggedWithRollbackClause() {
			return getRuleContexts(LoggedWithRollbackClauseContext.class);
		}
		public LoggedWithRollbackClauseContext loggedWithRollbackClause(int i) {
			return getRuleContext(LoggedWithRollbackClauseContext.class,i);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<DeclareGlobalTemporaryTableColumnDefinitionContext> declareGlobalTemporaryTableColumnDefinition() {
			return getRuleContexts(DeclareGlobalTemporaryTableColumnDefinitionContext.class);
		}
		public DeclareGlobalTemporaryTableColumnDefinitionContext declareGlobalTemporaryTableColumnDefinition(int i) {
			return getRuleContext(DeclareGlobalTemporaryTableColumnDefinitionContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public DeclareGlobalTemporaryTableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareGlobalTemporaryTableStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDeclareGlobalTemporaryTableStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDeclareGlobalTemporaryTableStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDeclareGlobalTemporaryTableStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareGlobalTemporaryTableStatementContext declareGlobalTemporaryTableStatement() throws RecognitionException {
		DeclareGlobalTemporaryTableStatementContext _localctx = new DeclareGlobalTemporaryTableStatementContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_declareGlobalTemporaryTableStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2287);
			match(DECLARE);
			setState(2288);
			match(GLOBAL);
			setState(2289);
			match(TEMPORARY);
			setState(2290);
			match(TABLE);
			setState(2291);
			tableName();
			setState(2305);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LPAREN:
				{
				{
				setState(2292);
				match(LPAREN);
				setState(2293);
				declareGlobalTemporaryTableColumnDefinition();
				setState(2298);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2294);
					match(COMMA);
					setState(2295);
					declareGlobalTemporaryTableColumnDefinition();
					}
					}
					setState(2300);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2301);
				match(RPAREN);
				}
				}
				break;
			case LIKE:
				{
				setState(2303);
				declareGlobalTemporaryTableLikeClause();
				}
				break;
			case AS:
				{
				setState(2304);
				declareGlobalTemporaryTableAsResultTable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2312);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==CCSID || _la==NOT || _la==ON || _la==LOGGED) {
				{
				setState(2310);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CCSID:
					{
					setState(2307);
					ccsidClause1();
					}
					break;
				case ON:
					{
					setState(2308);
					onCommitClause();
					}
					break;
				case NOT:
				case LOGGED:
					{
					setState(2309);
					loggedWithRollbackClause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(2314);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareTableStatementContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(DB2zSQLParser.DECLARE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public List<DataTypeContext> dataType() {
			return getRuleContexts(DataTypeContext.class);
		}
		public DataTypeContext dataType(int i) {
			return getRuleContext(DataTypeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public List<NotNullPhraseContext> notNullPhrase() {
			return getRuleContexts(NotNullPhraseContext.class);
		}
		public NotNullPhraseContext notNullPhrase(int i) {
			return getRuleContext(NotNullPhraseContext.class,i);
		}
		public DeclareTableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareTableStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDeclareTableStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDeclareTableStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDeclareTableStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareTableStatementContext declareTableStatement() throws RecognitionException {
		DeclareTableStatementContext _localctx = new DeclareTableStatementContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_declareTableStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2315);
			match(DECLARE);
			setState(2316);
			tableName();
			setState(2317);
			match(TABLE);
			setState(2318);
			match(LPAREN);
			{
			setState(2319);
			columnName();
			setState(2320);
			dataType();
			setState(2322);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2321);
				notNullPhrase();
				}
			}

			}
			setState(2332);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2324);
				match(COMMA);
				setState(2325);
				columnName();
				setState(2326);
				dataType();
				setState(2328);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2327);
					notNullPhrase();
					}
				}

				}
				}
				setState(2334);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2335);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareStatementStatementContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(DB2zSQLParser.DECLARE, 0); }
		public List<StatementNameContext> statementName() {
			return getRuleContexts(StatementNameContext.class);
		}
		public StatementNameContext statementName(int i) {
			return getRuleContext(StatementNameContext.class,i);
		}
		public TerminalNode STATEMENT() { return getToken(DB2zSQLParser.STATEMENT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public DeclareStatementStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareStatementStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDeclareStatementStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDeclareStatementStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDeclareStatementStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareStatementStatementContext declareStatementStatement() throws RecognitionException {
		DeclareStatementStatementContext _localctx = new DeclareStatementStatementContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_declareStatementStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2337);
			match(DECLARE);
			setState(2338);
			statementName();
			setState(2343);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2339);
				match(COMMA);
				setState(2340);
				statementName();
				}
				}
				setState(2345);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2346);
			match(STATEMENT);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareVariableStatementContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(DB2zSQLParser.DECLARE, 0); }
		public List<HostVariableContext> hostVariable() {
			return getRuleContexts(HostVariableContext.class);
		}
		public HostVariableContext hostVariable(int i) {
			return getRuleContext(HostVariableContext.class,i);
		}
		public TerminalNode VARIABLE() { return getToken(DB2zSQLParser.VARIABLE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public CcsidClause1Context ccsidClause1() {
			return getRuleContext(CcsidClause1Context.class,0);
		}
		public ForDataQualifierContext forDataQualifier() {
			return getRuleContext(ForDataQualifierContext.class,0);
		}
		public CcsidClause2Context ccsidClause2() {
			return getRuleContext(CcsidClause2Context.class,0);
		}
		public DeclareVariableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareVariableStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDeclareVariableStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDeclareVariableStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDeclareVariableStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareVariableStatementContext declareVariableStatement() throws RecognitionException {
		DeclareVariableStatementContext _localctx = new DeclareVariableStatementContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_declareVariableStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2348);
			match(DECLARE);
			setState(2349);
			hostVariable();
			setState(2354);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2350);
				match(COMMA);
				setState(2351);
				hostVariable();
				}
				}
				setState(2356);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2357);
			match(VARIABLE);
			setState(2364);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,156,_ctx) ) {
			case 1:
				{
				{
				setState(2358);
				ccsidClause1();
				setState(2359);
				forDataQualifier();
				}
				}
				break;
			case 2:
				{
				setState(2361);
				ccsidClause1();
				}
				break;
			case 3:
				{
				setState(2362);
				forDataQualifier();
				}
				break;
			case 4:
				{
				setState(2363);
				ccsidClause2();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeleteStatementContext extends ParserRuleContext {
		public SearchedDeleteContext searchedDelete() {
			return getRuleContext(SearchedDeleteContext.class,0);
		}
		public PositionedDeleteContext positionedDelete() {
			return getRuleContext(PositionedDeleteContext.class,0);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deleteStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDeleteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDeleteStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDeleteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeleteStatementContext deleteStatement() throws RecognitionException {
		DeleteStatementContext _localctx = new DeleteStatementContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_deleteStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2368);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,157,_ctx) ) {
			case 1:
				{
				setState(2366);
				searchedDelete();
				}
				break;
			case 2:
				{
				setState(2367);
				positionedDelete();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DescribeStatementContext extends ParserRuleContext {
		public DescribeCursorStatementContext describeCursorStatement() {
			return getRuleContext(DescribeCursorStatementContext.class,0);
		}
		public DescribeInputStatementContext describeInputStatement() {
			return getRuleContext(DescribeInputStatementContext.class,0);
		}
		public DescribeOutputStatementContext describeOutputStatement() {
			return getRuleContext(DescribeOutputStatementContext.class,0);
		}
		public DescribeProcedureStatementContext describeProcedureStatement() {
			return getRuleContext(DescribeProcedureStatementContext.class,0);
		}
		public DescribeTableStatementContext describeTableStatement() {
			return getRuleContext(DescribeTableStatementContext.class,0);
		}
		public DescribeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDescribeStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDescribeStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDescribeStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DescribeStatementContext describeStatement() throws RecognitionException {
		DescribeStatementContext _localctx = new DescribeStatementContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_describeStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2375);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,158,_ctx) ) {
			case 1:
				{
				setState(2370);
				describeCursorStatement();
				}
				break;
			case 2:
				{
				setState(2371);
				describeInputStatement();
				}
				break;
			case 3:
				{
				setState(2372);
				describeOutputStatement();
				}
				break;
			case 4:
				{
				setState(2373);
				describeProcedureStatement();
				}
				break;
			case 5:
				{
				setState(2374);
				describeTableStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DescribeCursorStatementContext extends ParserRuleContext {
		public TerminalNode DESCRIBE() { return getToken(DB2zSQLParser.DESCRIBE, 0); }
		public TerminalNode CURSOR() { return getToken(DB2zSQLParser.CURSOR, 0); }
		public TerminalNode INTO() { return getToken(DB2zSQLParser.INTO, 0); }
		public DescriptorNameContext descriptorName() {
			return getRuleContext(DescriptorNameContext.class,0);
		}
		public CursorNameContext cursorName() {
			return getRuleContext(CursorNameContext.class,0);
		}
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public DescribeCursorStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describeCursorStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDescribeCursorStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDescribeCursorStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDescribeCursorStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DescribeCursorStatementContext describeCursorStatement() throws RecognitionException {
		DescribeCursorStatementContext _localctx = new DescribeCursorStatementContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_describeCursorStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2377);
			match(DESCRIBE);
			setState(2378);
			match(CURSOR);
			setState(2381);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INSTEAD:
			case NEW:
			case NEW_TABLE:
			case OLD_TABLE:
			case REFERENCING:
			case BASED:
			case UPON:
			case ADD:
			case AFTER:
			case ALL:
			case ALLOCATE:
			case ALLOW:
			case ALTER:
			case ALTERAND:
			case ANY:
			case ARRAY:
			case ARRAY_EXISTS:
			case AS:
			case ASENSITIVE:
			case ASSOCIATE:
			case ASUTIME:
			case AT:
			case AUDIT:
			case AUX:
			case AUXILIARY:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BUFFERPOOL:
			case BUFFERPOOLS:
			case BY:
			case CALL:
			case CAPTURE:
			case CASCADED:
			case CASE:
			case CAST:
			case CCSID:
			case CHAR:
			case CHARACTER:
			case CHECK:
			case CLONE:
			case CLOSE:
			case CLUSTER:
			case COLLECTION:
			case COLLID:
			case COLUMN:
			case COMMENT:
			case COMMIT:
			case CONCAT:
			case CONDITION:
			case CONNECT:
			case CONNECTION:
			case CONSTRAINT:
			case CONTAINS:
			case CONTENT:
			case CONTINUE:
			case CREATE:
			case CUBE:
			case CURRENT:
			case CURRENT_LC_CTYPE:
			case CURRVAL:
			case CURSOR:
			case DATA:
			case DATABASE:
			case DAY:
			case DAYS:
			case DBINFO:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DISABLE:
			case DISALLOW:
			case DISTINCT:
			case DO:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSSIZE:
			case DYNAMIC:
			case EDITPROC:
			case ELSE:
			case ELSEIF:
			case ENCODING:
			case ENCRYPTION:
			case END:
			case END_EXEC:
			case ENDING:
			case ERASE:
			case ESCAPE:
			case EXCEPT:
			case EXCEPTION:
			case EXEC_SQL:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case FENCED:
			case FETCH:
			case FIELDPROC:
			case FINAL:
			case FIRST:
			case FOR:
			case FREE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANT:
			case GROUP:
			case HANDLER:
			case HAVING:
			case HOLD:
			case HOUR:
			case HOURS:
			case IF:
			case IMMEDIATE:
			case IN:
			case INCLUSIVE:
			case INDEX:
			case INDEXBP:
			case INHERIT:
			case INNER:
			case INOUT:
			case INSENSITIVE:
			case INSERT:
			case INTERSECT:
			case INTO:
			case IS:
			case ISOBID:
			case ITERATE:
			case JAR:
			case JOIN:
			case KEEP:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LAST:
			case LC_CTYPE:
			case LEAVE:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOCALE:
			case LOCATOR:
			case LOCATORS:
			case LOCK:
			case LOCKMAX:
			case LOCKSIZE:
			case LONG:
			case LOOP:
			case MAINTAINED:
			case MATERIALIZED:
			case MICROSECOND:
			case MICROSECONDS:
			case MODIFIES:
			case MONTH:
			case MONTHS:
			case NEXT:
			case NEXTVAL:
			case NO:
			case NONE:
			case NOT:
			case NULL:
			case NULLS:
			case NUMPARTS:
			case OBID:
			case OF:
			case OFFSET:
			case OLD:
			case ON:
			case OPEN:
			case OPTIMIZATION:
			case OPTIMIZE:
			case OR:
			case ORDER:
			case ORGANIZATION:
			case OUT:
			case OUTER:
			case PACKAGE:
			case PADDED:
			case PARAMETER:
			case PART:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONING:
			case PATH:
			case PERIOD:
			case PIECESIZE:
			case PLAN:
			case PRECISION:
			case PREPARE:
			case PREVVAL:
			case PRIOR:
			case PRIQTY:
			case PRIVILEGES:
			case PROCEDURE:
			case PROGRAM:
			case PSID:
			case PUBLIC:
			case QUERY:
			case QUERYNO:
			case READS:
			case REFERENCES:
			case REFRESH:
			case RELEASE:
			case RENAME:
			case REPEAT:
			case RESIGNAL:
			case RESTRICT:
			case RESULT:
			case RESULT_SET_LOCATOR:
			case RETURN:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUND_CEILING:
			case ROUND_DOWN:
			case ROUND_FLOOR:
			case ROUND_HALF_DOWN:
			case ROUND_HALF_EVEN:
			case ROUND_HALF_UP:
			case ROUND_UP:
			case ROW:
			case ROWSET:
			case RUN:
			case SAVEPOINT:
			case SCHEMA:
			case SCRATCHPAD:
			case SECOND:
			case SECONDS:
			case SECQTY:
			case SECURITY:
			case SELECT:
			case SENSITIVE:
			case SEQUENCE:
			case SET:
			case SIGNAL:
			case SIMPLE:
			case SOME:
			case SOURCE:
			case SPECIFIC:
			case STANDARD:
			case STATEMENT:
			case STATIC:
			case STAY:
			case STOGROUP:
			case STORES:
			case STYLE:
			case SUMMARY:
			case SYNONYM:
			case SYSDATE:
			case SYSTEM:
			case SYSTIMESTAMP:
			case TABLE:
			case TABLESPACE:
			case THEN:
			case TO:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNDO:
			case UNION:
			case UNIQUE:
			case UNTIL:
			case UPDATE:
			case USING:
			case VALIDPROC:
			case VALUE:
			case VALUES:
			case VARIABLE:
			case VARIANT:
			case VCAT:
			case VERSIONING:
			case VIEW:
			case VOLATILE:
			case VOLUMES:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WLM:
			case XMLCAST:
			case XMLEXISTS:
			case XMLNAMESPACES:
			case YEAR:
			case YEARS:
			case ZONE:
			case AND:
			case ARRAY_AGG:
			case ASC:
			case AVG:
			case BIT:
			case CHANGE:
			case CODEUNITS16:
			case CODEUNITS32:
			case CORR:
			case CORRELATION:
			case COUNT:
			case COUNT_BIG:
			case COVAR:
			case COVARIANCE:
			case COVARIANCE_SAMP:
			case COVAR_POP:
			case COVAR_SAMP:
			case CS:
			case CUME_DIST:
			case DENSE_RANK:
			case DESC:
			case EBCDIC:
			case EXCLUSIVE:
			case FIRST_VALUE:
			case FOLLOWING:
			case GROUPING:
			case IGNORE:
			case INDICATOR:
			case INPUT:
			case ISNULL:
			case LAG:
			case LARGE:
			case LAST_VALUE:
			case LEAD:
			case LISTAGG:
			case LOCKED:
			case LOCKS:
			case MEDIAN:
			case MINUTES:
			case MIXED:
			case NOTNULL:
			case NTH_VALUE:
			case NTILE:
			case NUMERIC:
			case OBJECT:
			case OCTETS:
			case ONLY:
			case OVER:
			case PASSING:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PERCENT_RANK:
			case PRECEDING:
			case PREVIOUS:
			case RANGE:
			case RANK:
			case RATIO_TO_REPORT:
			case READ:
			case REF:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_ICPT:
			case REGR_INTERCEPT:
			case REGR_R2:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case RESPECT:
			case ROW_NUMBER:
			case ROWS:
			case RR:
			case RS:
			case SBCS:
			case SELECTIVITY:
			case SETS:
			case SHARE:
			case SKIP_:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case TOKEN:
			case UNBOUNDED:
			case UNPACK:
			case UR:
			case USE:
			case VAR:
			case VARIANCE:
			case VARIANCE_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARYING:
			case WITHOUT:
			case XML:
			case XMLAGG:
			case COLUMNS:
			case SQLID:
			case ORDINALITY:
			case SYSTEM_TIME:
			case BUSINESS_TIME:
			case MULTIPLIER:
			case UNNEST:
			case CROSS:
			case CALLER:
			case CLIENT:
			case POSITIONING:
			case SCROLL:
			case ACTION:
			case ASSEMBLE:
			case C_:
			case CALLED:
			case COBOL:
			case DB2:
			case DEFINER:
			case DISPATCH:
			case ENVIRONMENT:
			case FAILURE:
			case FAILURES:
			case JAVA:
			case MAIN:
			case NAME:
			case OPTIONS:
			case PARALLEL:
			case PLI:
			case REGISTERS:
			case RESIDENT:
			case SECURED:
			case SPECIAL:
			case SQL:
			case STOP:
			case SUB:
			case YES:
			case APPLICATION:
			case CHANGED:
			case COMPATIBILITY:
			case COMPRESS:
			case COPY:
			case FREEPAGE:
			case GBPCACHE:
			case INCLUDE:
			case MAXVALUE:
			case MINVALUE:
			case PCTFREE:
			case REGENERATE:
			case MASK:
			case ENABLE:
			case PERMISSION:
			case ATOMIC:
			case SQLEXCEPTION:
			case MERGE:
			case MATCHED:
			case SQLSTATE:
			case MESSAGE_TEXT:
			case OVERRIDING:
			case PORTION:
			case DB2SQL:
			case DEBUG:
			case GENERAL:
			case MODE_:
			case REXX:
			case CACHE:
			case CYCLE:
			case INCREMENT:
			case RESTART:
			case DATACLAS:
			case MGMTCLAS:
			case REMOVE:
			case STORCLAS:
			case ACCESS:
			case ACTIVATE:
			case ALWAYS:
			case APPEND:
			case ARCHIVE:
			case BUSINESS:
			case CASCADE:
			case CHANGES:
			case CONTROL:
			case DEACTIVATE:
			case DEFERRED:
			case EACH:
			case ENFORCED:
			case EXTRA:
			case FOREIGN:
			case HIDDEN_:
			case HISTORY:
			case ID:
			case IDENTITY:
			case IMPLICITLY:
			case INITIALLY:
			case INLINE:
			case OPERATION:
			case ORGANIZE:
			case OVERLAPS:
			case PACKAGE_NAME:
			case PACKAGE_SCHEMA:
			case PACKAGE_VERSION:
			case PRIMARY:
			case RESET:
			case ROTATE:
			case START:
			case SYSIBM:
			case TRANSACTION:
			case XMLSCHEMA:
			case ELEMENT:
			case URL:
			case NAMESPACE:
			case LOCATION:
			case SYSXSR:
			case ALGORITHM:
			case FIXEDLENGTH:
			case HUFFMAN:
			case LOB:
			case LOG:
			case LOGGED:
			case MAXPARTITIONS:
			case MAXROWS:
			case MEMBER:
			case MOVE:
			case PAGE:
			case PAGENUM:
			case PENDING:
			case RELATIVE:
			case SEGSIZE:
			case TRACKMOD:
			case ADDRESS:
			case ATTRIBUTES:
			case AUTHENTICATION:
			case AUTHID:
			case CONTEXT:
			case JOBNAME:
			case OWNER:
			case PROFILE:
			case QUALIFIER:
			case SERVAUTH:
			case TRUSTED:
			case SECTION:
			case ACTIVE:
			case VERSION:
			case ALIAS:
			case WORK:
			case WORKFILE:
			case SYSDEFLT:
			case NULTERM:
			case STRUCTURE:
			case GENERIC:
			case TEMPORARY:
			case DEFER:
			case DEFINE:
			case EXCLUDE:
			case GENERATE:
			case KEYS:
			case XMLPATTERN:
			case SIZE:
			case EVERY:
			case ABSOLUTE:
			case ACCELERATOR:
			case EXCLUDING:
			case INCLUDING:
			case DEFAULTS:
			case MODIFIERS:
			case OPTION:
			case PRESERVE:
			case BOTH:
			case DESCRIBE:
			case LABELS:
			case NAMES:
			case OUTPUT:
			case EXCHANGE:
			case STABILIZED:
			case STMTCACHE:
			case STMTID:
			case STMTTOKEN:
			case STARTING:
			case CATALOG_NAME:
			case CONDITION_NUMBER:
			case CURSOR_NAME:
			case DB2_AUTHENTICATION_TYPE:
			case DB2_AUTHORIZATION_ID:
			case DB2_CONNECTION_STATE:
			case DB2_CONNECTION_STATUS:
			case DB2_ENCRYPTION_TYPE:
			case DB2_ERROR_CODE1:
			case DB2_ERROR_CODE2:
			case DB2_ERROR_CODE3:
			case DB2_ERROR_CODE4:
			case DB2_GET_DIAGNOSTICS_DIAGNOSTICS:
			case DB2_INTERNAL_ERROR_POINTER:
			case DB2_LAST_ROW:
			case DB2_LINE_NUMBER:
			case DB2_MESSAGE_ID:
			case DB2_MODULE_DETECTING_ERROR:
			case DB2_NUMBER_PARAMETER_MARKERS:
			case DB2_NUMBER_RESULT_SETS:
			case DB2_NUMBER_ROWS:
			case DB2_ORDINAL_TOKEN_:
			case DB2_PRODUCT_ID:
			case DB2_REASON_CODE:
			case DB2_RETURNED_SQLCODE:
			case DB2_RETURN_STATUS:
			case DB2_ROW_NUMBER:
			case DB2_SERVER_CLASS_NAME:
			case DB2_SQL_ATTR_CURSOR_HOLD:
			case DB2_SQL_ATTR_CURSOR_ROWSET:
			case DB2_SQL_ATTR_CURSOR_SCROLLABLE:
			case DB2_SQL_ATTR_CURSOR_SENSITIVITY:
			case DB2_SQL_ATTR_CURSOR_TYPE:
			case DB2_SQLERRD1:
			case DB2_SQLERRD2:
			case DB2_SQLERRD3:
			case DB2_SQLERRD4:
			case DB2_SQLERRD5:
			case DB2_SQLERRD6:
			case DB2_SQLERRD_SET:
			case DB2_SQL_NESTING_LEVEL:
			case DB2_TOKEN_COUNT:
			case DIAGNOSTICS:
			case MORE_:
			case NUMBER:
			case RETURNED_SQLSTATE:
			case ROW_COUNT:
			case SERVER_NAME:
			case STACKED:
			case CREATETAB:
			case CREATETS:
			case DBADM:
			case DBCTRL:
			case DBMAINT:
			case DISPLAYDB:
			case IMAGCOPY:
			case LOAD:
			case PACKADM:
			case RECOVERDB:
			case REORG:
			case REPAIR:
			case STARTDB:
			case STATS:
			case STOPDB:
			case BIND:
			case ALTERIN:
			case CREATEIN:
			case DROPIN:
			case USAGE:
			case ACCESSCTRL:
			case BINDADD:
			case BINDAGENT:
			case BSDS:
			case CREATEALIAS:
			case CREATEDBA:
			case CREATEDBC:
			case CREATE_SECURE_OBJECT:
			case CREATESG:
			case CREATETMTAB:
			case DATAACCESS:
			case DEBUGSESSION:
			case DISPLAY:
			case MONITOR1:
			case MONITOR2:
			case RECOVER:
			case SQLADM:
			case STOPALL:
			case STOSPACE:
			case SYSADM:
			case SYSCTRL:
			case SYSOPR:
			case TRACE:
			case UNLOAD:
			case WRITE:
			case ABS:
			case ABSVAL:
			case ACOS:
			case ADD_DAYS:
			case ADD_MONTHS:
			case ARRAY_DELETE:
			case ARRAY_FIRST:
			case ARRAY_LAST:
			case ARRAY_NEXT:
			case ARRAY_PRIOR:
			case ARRAY_TRIM:
			case ASCII:
			case ASCII_CHR:
			case ASCIISTR:
			case ASCII_STR:
			case ASIN:
			case ATAN:
			case ATAN2:
			case ATANH:
			case BIGINT:
			case BINARY:
			case BITAND:
			case BITANDNOT:
			case BITNOT:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BTRIM:
			case CARDINALITY:
			case CCSID_ENCODING:
			case CEIL:
			case CEILING:
			case CHAR9:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case CHR:
			case CLOB:
			case COALESCE:
			case COLLATION_KEY:
			case COMPARE_DECFLOAT:
			case COS:
			case COSH:
			case DATE:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFWEEK_ISO:
			case DAYOFYEAR:
			case DAYS_BETWEEN:
			case DBCLOB:
			case DEC:
			case DECFLOAT:
			case DECFLOAT_FORMAT:
			case DECFLOAT_SORTKEY:
			case DECIMAL:
			case DECODE:
			case DECRYPT_BINARY:
			case DECRYPT_BIT:
			case DECRYPT_CHAR:
			case DECRYPT_DATAKEY_BIGINT:
			case DECRYPT_DATAKEY_BIT:
			case DECRYPT_DATAKEY_CLOB:
			case DECRYPT_DATAKEY_DBCLOB:
			case DECRYPT_DATAKEY_DECIMAL:
			case DECRYPT_DATAKEY_INTEGER:
			case DECRYPT_DATAKEY_VARCHAR:
			case DECRYPT_DATAKEY_VARGRAPHIC:
			case DECRYPT_DB:
			case DEGREES:
			case DIFFERENCE:
			case DIGITS:
			case DOUBLE_PRECISION:
			case DSN_XMLVALIDATE:
			case EBCDIC_CHR:
			case EBCDIC_STR:
			case ENCRYPT_DATAKEY:
			case ENCRYPT_TDES:
			case EXP:
			case EXTRACT:
			case FLOAT:
			case FLOOR:
			case GENERATE_UNIQUE:
			case GENERATE_UNIQUE_BINARY:
			case GETHINT:
			case GETVARIABLE:
			case GRAPHIC:
			case GREATEST:
			case HASH:
			case HASH_CRC32:
			case HASH_MD5:
			case HASH_SHA1:
			case HASH_SHA256:
			case HEX:
			case IDENTITY_VAL_LOCAL:
			case IFNULL:
			case INSTR:
			case INT:
			case INTEGER:
			case JULIAN_DAY:
			case LAST_DAY:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LN:
			case LOCATE:
			case LOCATE_IN_STRING:
			case LOG10:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAX:
			case MAX_CARDINALITY:
			case MIDNIGHT_SECONDS:
			case MIN:
			case MINUTE:
			case MOD:
			case MONTHS_BETWEEN:
			case MQREAD:
			case MQREADCLOB:
			case MQRECEIVE:
			case MQRECEIVECLOB:
			case MQSEND:
			case MULTIPLY_ALT:
			case NEXT_DAY:
			case NEXT_MONTH:
			case NORMALIZE_DECFLOAT:
			case NORMALIZE_STRING:
			case NULLIF:
			case NVL:
			case OVERLAY:
			case PACK:
			case POSITION:
			case POSSTR:
			case POW:
			case POWER:
			case QUANTIZE:
			case QUARTER:
			case RADIANS:
			case RAISE_ERROR:
			case RAND:
			case RANDOM:
			case REAL:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REPLACE:
			case RID:
			case ROUND:
			case ROUND_TIMESTAMP:
			case ROWID:
			case RPAD:
			case RTRIM:
			case SCORE:
			case SIGN:
			case SIN:
			case SINH:
			case SMALLINT:
			case SOAPHTTPC:
			case SOAPHTTPNC:
			case SOAPHTTPNV:
			case SOAPHTTPV:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STRIP:
			case STRLEFT:
			case STRPOS:
			case STRRIGHT:
			case SUBSTR:
			case SUBSTRING:
			case TAN:
			case TANH:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIMESTAMP_FORMAT:
			case TIMESTAMP_ISO:
			case TIMESTAMP_TZ:
			case TO_CHAR:
			case TO_CLOB:
			case TO_DATE:
			case TO_NUMBER:
			case TOTALORDER:
			case TO_TIMESTAMP:
			case TRANSLATE:
			case TRIM:
			case TRIM_ARRAY:
			case TRUNC:
			case TRUNC_TIMESTAMP:
			case UCASE:
			case UNICODE:
			case UNICODE_STR:
			case UNISTR:
			case UPPER:
			case VARBINARY:
			case VARCHAR:
			case VARCHAR9:
			case VARCHAR_BIT_FORMAT:
			case VARCHAR_FORMAT:
			case VARGRAPHIC:
			case VERIFY_GROUP_FOR_USER:
			case VERIFY_ROLE_FOR_USER:
			case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
			case WEEK:
			case WEEK_ISO:
			case WRAP:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLCONCAT:
			case XMLDOCUMENT:
			case XMLELEMENT:
			case XMLFOREST:
			case XMLMODIFY:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLSERIALIZE:
			case XMLTEXT:
			case XMLXSROBJECTID:
			case XSLTRANSFORM:
			case CURRENT_ACCELERATOR:
			case CURRENT_APPLICATION_COMPATIBILITY:
			case CURRENT_APPLICATION_ENCODING_SCHEME:
			case CURRENT_CLIENT_ACCTNG:
			case CURRENT_CLIENT_APPLNAME:
			case CURRENT_CLIENT_CORR_TOKEN:
			case CURRENT_CLIENT_USERID:
			case CURRENT_CLIENT_WRKSTNNAME:
			case CURRENT_DATE:
			case CURRENT_DEBUG_MODE:
			case CURRENT_DECFLOAT_ROUNDING_MODE:
			case CURRENT_DEGREE:
			case CURRENT_EXPLAIN_MODE:
			case CURRENT_GET_ACCEL_ARCHIVE:
			case CURRENT_LOCALE_LC_CTYPE:
			case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
			case CURRENT_MEMBER:
			case CURRENT_OPTIMIZATION_HINT:
			case CURRENT_PACKAGE_PATH:
			case CURRENT_PACKAGESET:
			case CURRENT_PATH:
			case CURRENT_PRECISION:
			case CURRENT_QUERY_ACCELERATION:
			case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
			case CURRENT_REFRESH_AGE:
			case CURRENT_ROUTINE_VERSION:
			case CURRENT_RULES:
			case CURRENT_SCHEMA:
			case CURRENT_SERVER:
			case CURRENT_SQLID:
			case CURRENT_TEMPORAL_BUSINESS_TIME:
			case CURRENT_TEMPORAL_SYSTEM_TIME:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_TIME_ZONE:
			case ENCRYPTION_PASSWORD:
			case SESSION_TIME_ZONE:
			case SESSION_USER:
			case USER:
			case ADMIN_TASK_LIST:
			case ADMIN_TASK_OUTPUT:
			case ADMIN_TASK_STATUS:
			case BLOCKING_THREADS:
			case MQREADALL:
			case MQREADALLCLOB:
			case MQRECEIVEALL:
			case MQRECEIVEALLCLOB:
			case XMLTABLE:
			case SQLIDENTIFIER:
				{
				setState(2379);
				cursorName();
				}
				break;
			case COLON:
				{
				setState(2380);
				hostVariable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2383);
			match(INTO);
			setState(2384);
			descriptorName();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DescribeInputStatementContext extends ParserRuleContext {
		public TerminalNode DESCRIBE() { return getToken(DB2zSQLParser.DESCRIBE, 0); }
		public TerminalNode INPUT() { return getToken(DB2zSQLParser.INPUT, 0); }
		public StatementNameContext statementName() {
			return getRuleContext(StatementNameContext.class,0);
		}
		public TerminalNode INTO() { return getToken(DB2zSQLParser.INTO, 0); }
		public DescriptorNameContext descriptorName() {
			return getRuleContext(DescriptorNameContext.class,0);
		}
		public DescribeInputStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describeInputStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDescribeInputStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDescribeInputStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDescribeInputStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DescribeInputStatementContext describeInputStatement() throws RecognitionException {
		DescribeInputStatementContext _localctx = new DescribeInputStatementContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_describeInputStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2386);
			match(DESCRIBE);
			setState(2387);
			match(INPUT);
			setState(2388);
			statementName();
			setState(2389);
			match(INTO);
			setState(2390);
			descriptorName();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DescribeOutputStatementContext extends ParserRuleContext {
		public TerminalNode DESCRIBE() { return getToken(DB2zSQLParser.DESCRIBE, 0); }
		public StatementNameContext statementName() {
			return getRuleContext(StatementNameContext.class,0);
		}
		public TerminalNode INTO() { return getToken(DB2zSQLParser.INTO, 0); }
		public DescriptorNameContext descriptorName() {
			return getRuleContext(DescriptorNameContext.class,0);
		}
		public TerminalNode OUTPUT() { return getToken(DB2zSQLParser.OUTPUT, 0); }
		public DescribeUsingOptionContext describeUsingOption() {
			return getRuleContext(DescribeUsingOptionContext.class,0);
		}
		public DescribeOutputStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describeOutputStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDescribeOutputStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDescribeOutputStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDescribeOutputStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DescribeOutputStatementContext describeOutputStatement() throws RecognitionException {
		DescribeOutputStatementContext _localctx = new DescribeOutputStatementContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_describeOutputStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2392);
			match(DESCRIBE);
			setState(2394);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,160,_ctx) ) {
			case 1:
				{
				setState(2393);
				match(OUTPUT);
				}
				break;
			}
			setState(2396);
			statementName();
			setState(2397);
			match(INTO);
			setState(2398);
			descriptorName();
			setState(2400);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(2399);
				describeUsingOption();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DescribeProcedureStatementContext extends ParserRuleContext {
		public TerminalNode DESCRIBE() { return getToken(DB2zSQLParser.DESCRIBE, 0); }
		public TerminalNode PROCEDURE() { return getToken(DB2zSQLParser.PROCEDURE, 0); }
		public TerminalNode INTO() { return getToken(DB2zSQLParser.INTO, 0); }
		public DescriptorNameContext descriptorName() {
			return getRuleContext(DescriptorNameContext.class,0);
		}
		public ProcedureNameContext procedureName() {
			return getRuleContext(ProcedureNameContext.class,0);
		}
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public DescribeProcedureStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describeProcedureStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDescribeProcedureStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDescribeProcedureStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDescribeProcedureStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DescribeProcedureStatementContext describeProcedureStatement() throws RecognitionException {
		DescribeProcedureStatementContext _localctx = new DescribeProcedureStatementContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_describeProcedureStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2402);
			match(DESCRIBE);
			setState(2403);
			match(PROCEDURE);
			setState(2406);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTEGERLITERAL:
			case NUMERICLITERAL:
			case INSTEAD:
			case NEW:
			case NEW_TABLE:
			case OLD_TABLE:
			case REFERENCING:
			case BASED:
			case UPON:
			case ADD:
			case AFTER:
			case ALL:
			case ALLOCATE:
			case ALLOW:
			case ALTER:
			case ALTERAND:
			case ANY:
			case ARRAY:
			case ARRAY_EXISTS:
			case AS:
			case ASENSITIVE:
			case ASSOCIATE:
			case ASUTIME:
			case AT:
			case AUDIT:
			case AUX:
			case AUXILIARY:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BUFFERPOOL:
			case BUFFERPOOLS:
			case BY:
			case CALL:
			case CAPTURE:
			case CASCADED:
			case CASE:
			case CAST:
			case CCSID:
			case CHAR:
			case CHARACTER:
			case CHECK:
			case CLONE:
			case CLOSE:
			case CLUSTER:
			case COLLECTION:
			case COLLID:
			case COLUMN:
			case COMMENT:
			case COMMIT:
			case CONCAT:
			case CONDITION:
			case CONNECT:
			case CONNECTION:
			case CONSTRAINT:
			case CONTAINS:
			case CONTENT:
			case CONTINUE:
			case CREATE:
			case CUBE:
			case CURRENT:
			case CURRENT_LC_CTYPE:
			case CURRVAL:
			case CURSOR:
			case DATA:
			case DATABASE:
			case DAY:
			case DAYS:
			case DBINFO:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DISABLE:
			case DISALLOW:
			case DISTINCT:
			case DO:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSSIZE:
			case DYNAMIC:
			case EDITPROC:
			case ELSE:
			case ELSEIF:
			case ENCODING:
			case ENCRYPTION:
			case END:
			case END_EXEC:
			case ENDING:
			case ERASE:
			case ESCAPE:
			case EXCEPT:
			case EXCEPTION:
			case EXEC_SQL:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case FENCED:
			case FETCH:
			case FIELDPROC:
			case FINAL:
			case FIRST:
			case FOR:
			case FREE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANT:
			case GROUP:
			case HANDLER:
			case HAVING:
			case HOLD:
			case HOUR:
			case HOURS:
			case IF:
			case IMMEDIATE:
			case IN:
			case INCLUSIVE:
			case INDEX:
			case INDEXBP:
			case INHERIT:
			case INNER:
			case INOUT:
			case INSENSITIVE:
			case INSERT:
			case INTERSECT:
			case INTO:
			case IS:
			case ISOBID:
			case ITERATE:
			case JAR:
			case JOIN:
			case KEEP:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LAST:
			case LC_CTYPE:
			case LEAVE:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOCALE:
			case LOCATOR:
			case LOCATORS:
			case LOCK:
			case LOCKMAX:
			case LOCKSIZE:
			case LONG:
			case LOOP:
			case MAINTAINED:
			case MATERIALIZED:
			case MICROSECOND:
			case MICROSECONDS:
			case MODIFIES:
			case MONTH:
			case MONTHS:
			case NEXT:
			case NEXTVAL:
			case NO:
			case NONE:
			case NOT:
			case NULL:
			case NULLS:
			case NUMPARTS:
			case OBID:
			case OF:
			case OFFSET:
			case OLD:
			case ON:
			case OPEN:
			case OPTIMIZATION:
			case OPTIMIZE:
			case OR:
			case ORDER:
			case ORGANIZATION:
			case OUT:
			case OUTER:
			case PACKAGE:
			case PADDED:
			case PARAMETER:
			case PART:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONING:
			case PATH:
			case PERIOD:
			case PIECESIZE:
			case PLAN:
			case PRECISION:
			case PREPARE:
			case PREVVAL:
			case PRIOR:
			case PRIQTY:
			case PRIVILEGES:
			case PROCEDURE:
			case PROGRAM:
			case PSID:
			case PUBLIC:
			case QUERY:
			case QUERYNO:
			case READS:
			case REFERENCES:
			case REFRESH:
			case RELEASE:
			case RENAME:
			case REPEAT:
			case RESIGNAL:
			case RESTRICT:
			case RESULT:
			case RESULT_SET_LOCATOR:
			case RETURN:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUND_CEILING:
			case ROUND_DOWN:
			case ROUND_FLOOR:
			case ROUND_HALF_DOWN:
			case ROUND_HALF_EVEN:
			case ROUND_HALF_UP:
			case ROUND_UP:
			case ROW:
			case ROWSET:
			case RUN:
			case SAVEPOINT:
			case SCHEMA:
			case SCRATCHPAD:
			case SECOND:
			case SECONDS:
			case SECQTY:
			case SECURITY:
			case SELECT:
			case SENSITIVE:
			case SEQUENCE:
			case SET:
			case SIGNAL:
			case SIMPLE:
			case SOME:
			case SOURCE:
			case SPECIFIC:
			case STANDARD:
			case STATEMENT:
			case STATIC:
			case STAY:
			case STOGROUP:
			case STORES:
			case STYLE:
			case SUMMARY:
			case SYNONYM:
			case SYSDATE:
			case SYSTEM:
			case SYSTIMESTAMP:
			case TABLE:
			case TABLESPACE:
			case THEN:
			case TO:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNDO:
			case UNION:
			case UNIQUE:
			case UNTIL:
			case UPDATE:
			case USING:
			case VALIDPROC:
			case VALUE:
			case VALUES:
			case VARIABLE:
			case VARIANT:
			case VCAT:
			case VERSIONING:
			case VIEW:
			case VOLATILE:
			case VOLUMES:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WLM:
			case XMLCAST:
			case XMLEXISTS:
			case XMLNAMESPACES:
			case YEAR:
			case YEARS:
			case ZONE:
			case AND:
			case ARRAY_AGG:
			case ASC:
			case AVG:
			case BIT:
			case CHANGE:
			case CODEUNITS16:
			case CODEUNITS32:
			case CORR:
			case CORRELATION:
			case COUNT:
			case COUNT_BIG:
			case COVAR:
			case COVARIANCE:
			case COVARIANCE_SAMP:
			case COVAR_POP:
			case COVAR_SAMP:
			case CS:
			case CUME_DIST:
			case DENSE_RANK:
			case DESC:
			case EBCDIC:
			case EXCLUSIVE:
			case FIRST_VALUE:
			case FOLLOWING:
			case GROUPING:
			case IGNORE:
			case INDICATOR:
			case INPUT:
			case ISNULL:
			case LAG:
			case LARGE:
			case LAST_VALUE:
			case LEAD:
			case LISTAGG:
			case LOCKED:
			case LOCKS:
			case MEDIAN:
			case MINUTES:
			case MIXED:
			case NOTNULL:
			case NTH_VALUE:
			case NTILE:
			case NUMERIC:
			case OBJECT:
			case OCTETS:
			case ONLY:
			case OVER:
			case PASSING:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PERCENT_RANK:
			case PRECEDING:
			case PREVIOUS:
			case RANGE:
			case RANK:
			case RATIO_TO_REPORT:
			case READ:
			case REF:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_ICPT:
			case REGR_INTERCEPT:
			case REGR_R2:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case RESPECT:
			case ROW_NUMBER:
			case ROWS:
			case RR:
			case RS:
			case SBCS:
			case SELECTIVITY:
			case SETS:
			case SHARE:
			case SKIP_:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case TOKEN:
			case UNBOUNDED:
			case UNPACK:
			case UR:
			case USE:
			case VAR:
			case VARIANCE:
			case VARIANCE_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARYING:
			case WITHOUT:
			case XML:
			case XMLAGG:
			case COLUMNS:
			case SQLID:
			case ORDINALITY:
			case SYSTEM_TIME:
			case BUSINESS_TIME:
			case MULTIPLIER:
			case UNNEST:
			case CROSS:
			case CALLER:
			case CLIENT:
			case POSITIONING:
			case SCROLL:
			case ACTION:
			case ASSEMBLE:
			case C_:
			case CALLED:
			case COBOL:
			case DB2:
			case DEFINER:
			case DISPATCH:
			case ENVIRONMENT:
			case FAILURE:
			case FAILURES:
			case JAVA:
			case MAIN:
			case NAME:
			case OPTIONS:
			case PARALLEL:
			case PLI:
			case REGISTERS:
			case RESIDENT:
			case SECURED:
			case SPECIAL:
			case SQL:
			case STOP:
			case SUB:
			case YES:
			case APPLICATION:
			case CHANGED:
			case COMPATIBILITY:
			case COMPRESS:
			case COPY:
			case FREEPAGE:
			case GBPCACHE:
			case INCLUDE:
			case MAXVALUE:
			case MINVALUE:
			case PCTFREE:
			case REGENERATE:
			case MASK:
			case ENABLE:
			case PERMISSION:
			case ATOMIC:
			case SQLEXCEPTION:
			case MERGE:
			case MATCHED:
			case SQLSTATE:
			case MESSAGE_TEXT:
			case OVERRIDING:
			case PORTION:
			case DB2SQL:
			case DEBUG:
			case GENERAL:
			case MODE_:
			case REXX:
			case CACHE:
			case CYCLE:
			case INCREMENT:
			case RESTART:
			case DATACLAS:
			case MGMTCLAS:
			case REMOVE:
			case STORCLAS:
			case ACCESS:
			case ACTIVATE:
			case ALWAYS:
			case APPEND:
			case ARCHIVE:
			case BUSINESS:
			case CASCADE:
			case CHANGES:
			case CONTROL:
			case DEACTIVATE:
			case DEFERRED:
			case EACH:
			case ENFORCED:
			case EXTRA:
			case FOREIGN:
			case HIDDEN_:
			case HISTORY:
			case ID:
			case IDENTITY:
			case IMPLICITLY:
			case INITIALLY:
			case INLINE:
			case OPERATION:
			case ORGANIZE:
			case OVERLAPS:
			case PACKAGE_NAME:
			case PACKAGE_SCHEMA:
			case PACKAGE_VERSION:
			case PRIMARY:
			case RESET:
			case ROTATE:
			case START:
			case SYSIBM:
			case TRANSACTION:
			case XMLSCHEMA:
			case ELEMENT:
			case URL:
			case NAMESPACE:
			case LOCATION:
			case SYSXSR:
			case ALGORITHM:
			case FIXEDLENGTH:
			case HUFFMAN:
			case LOB:
			case LOG:
			case LOGGED:
			case MAXPARTITIONS:
			case MAXROWS:
			case MEMBER:
			case MOVE:
			case PAGE:
			case PAGENUM:
			case PENDING:
			case RELATIVE:
			case SEGSIZE:
			case TRACKMOD:
			case ADDRESS:
			case ATTRIBUTES:
			case AUTHENTICATION:
			case AUTHID:
			case CONTEXT:
			case JOBNAME:
			case OWNER:
			case PROFILE:
			case QUALIFIER:
			case SERVAUTH:
			case TRUSTED:
			case SECTION:
			case ACTIVE:
			case VERSION:
			case ALIAS:
			case WORK:
			case WORKFILE:
			case SYSDEFLT:
			case NULTERM:
			case STRUCTURE:
			case GENERIC:
			case TEMPORARY:
			case DEFER:
			case DEFINE:
			case EXCLUDE:
			case GENERATE:
			case KEYS:
			case XMLPATTERN:
			case SIZE:
			case EVERY:
			case ABSOLUTE:
			case ACCELERATOR:
			case EXCLUDING:
			case INCLUDING:
			case DEFAULTS:
			case MODIFIERS:
			case OPTION:
			case PRESERVE:
			case BOTH:
			case DESCRIBE:
			case LABELS:
			case NAMES:
			case OUTPUT:
			case EXCHANGE:
			case STABILIZED:
			case STMTCACHE:
			case STMTID:
			case STMTTOKEN:
			case STARTING:
			case CATALOG_NAME:
			case CONDITION_NUMBER:
			case CURSOR_NAME:
			case DB2_AUTHENTICATION_TYPE:
			case DB2_AUTHORIZATION_ID:
			case DB2_CONNECTION_STATE:
			case DB2_CONNECTION_STATUS:
			case DB2_ENCRYPTION_TYPE:
			case DB2_ERROR_CODE1:
			case DB2_ERROR_CODE2:
			case DB2_ERROR_CODE3:
			case DB2_ERROR_CODE4:
			case DB2_GET_DIAGNOSTICS_DIAGNOSTICS:
			case DB2_INTERNAL_ERROR_POINTER:
			case DB2_LAST_ROW:
			case DB2_LINE_NUMBER:
			case DB2_MESSAGE_ID:
			case DB2_MODULE_DETECTING_ERROR:
			case DB2_NUMBER_PARAMETER_MARKERS:
			case DB2_NUMBER_RESULT_SETS:
			case DB2_NUMBER_ROWS:
			case DB2_ORDINAL_TOKEN_:
			case DB2_PRODUCT_ID:
			case DB2_REASON_CODE:
			case DB2_RETURNED_SQLCODE:
			case DB2_RETURN_STATUS:
			case DB2_ROW_NUMBER:
			case DB2_SERVER_CLASS_NAME:
			case DB2_SQL_ATTR_CURSOR_HOLD:
			case DB2_SQL_ATTR_CURSOR_ROWSET:
			case DB2_SQL_ATTR_CURSOR_SCROLLABLE:
			case DB2_SQL_ATTR_CURSOR_SENSITIVITY:
			case DB2_SQL_ATTR_CURSOR_TYPE:
			case DB2_SQLERRD1:
			case DB2_SQLERRD2:
			case DB2_SQLERRD3:
			case DB2_SQLERRD4:
			case DB2_SQLERRD5:
			case DB2_SQLERRD6:
			case DB2_SQLERRD_SET:
			case DB2_SQL_NESTING_LEVEL:
			case DB2_TOKEN_COUNT:
			case DIAGNOSTICS:
			case MORE_:
			case NUMBER:
			case RETURNED_SQLSTATE:
			case ROW_COUNT:
			case SERVER_NAME:
			case STACKED:
			case CREATETAB:
			case CREATETS:
			case DBADM:
			case DBCTRL:
			case DBMAINT:
			case DISPLAYDB:
			case IMAGCOPY:
			case LOAD:
			case PACKADM:
			case RECOVERDB:
			case REORG:
			case REPAIR:
			case STARTDB:
			case STATS:
			case STOPDB:
			case BIND:
			case ALTERIN:
			case CREATEIN:
			case DROPIN:
			case USAGE:
			case ACCESSCTRL:
			case BINDADD:
			case BINDAGENT:
			case BSDS:
			case CREATEALIAS:
			case CREATEDBA:
			case CREATEDBC:
			case CREATE_SECURE_OBJECT:
			case CREATESG:
			case CREATETMTAB:
			case DATAACCESS:
			case DEBUGSESSION:
			case DISPLAY:
			case MONITOR1:
			case MONITOR2:
			case RECOVER:
			case SQLADM:
			case STOPALL:
			case STOSPACE:
			case SYSADM:
			case SYSCTRL:
			case SYSOPR:
			case TRACE:
			case UNLOAD:
			case WRITE:
			case ABS:
			case ABSVAL:
			case ACOS:
			case ADD_DAYS:
			case ADD_MONTHS:
			case ARRAY_DELETE:
			case ARRAY_FIRST:
			case ARRAY_LAST:
			case ARRAY_NEXT:
			case ARRAY_PRIOR:
			case ARRAY_TRIM:
			case ASCII:
			case ASCII_CHR:
			case ASCIISTR:
			case ASCII_STR:
			case ASIN:
			case ATAN:
			case ATAN2:
			case ATANH:
			case BIGINT:
			case BINARY:
			case BITAND:
			case BITANDNOT:
			case BITNOT:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BTRIM:
			case CARDINALITY:
			case CCSID_ENCODING:
			case CEIL:
			case CEILING:
			case CHAR9:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case CHR:
			case CLOB:
			case COALESCE:
			case COLLATION_KEY:
			case COMPARE_DECFLOAT:
			case COS:
			case COSH:
			case DATE:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFWEEK_ISO:
			case DAYOFYEAR:
			case DAYS_BETWEEN:
			case DBCLOB:
			case DEC:
			case DECFLOAT:
			case DECFLOAT_FORMAT:
			case DECFLOAT_SORTKEY:
			case DECIMAL:
			case DECODE:
			case DECRYPT_BINARY:
			case DECRYPT_BIT:
			case DECRYPT_CHAR:
			case DECRYPT_DATAKEY_BIGINT:
			case DECRYPT_DATAKEY_BIT:
			case DECRYPT_DATAKEY_CLOB:
			case DECRYPT_DATAKEY_DBCLOB:
			case DECRYPT_DATAKEY_DECIMAL:
			case DECRYPT_DATAKEY_INTEGER:
			case DECRYPT_DATAKEY_VARCHAR:
			case DECRYPT_DATAKEY_VARGRAPHIC:
			case DECRYPT_DB:
			case DEGREES:
			case DIFFERENCE:
			case DIGITS:
			case DOUBLE_PRECISION:
			case DSN_XMLVALIDATE:
			case EBCDIC_CHR:
			case EBCDIC_STR:
			case ENCRYPT_DATAKEY:
			case ENCRYPT_TDES:
			case EXP:
			case EXTRACT:
			case FLOAT:
			case FLOOR:
			case GENERATE_UNIQUE:
			case GENERATE_UNIQUE_BINARY:
			case GETHINT:
			case GETVARIABLE:
			case GRAPHIC:
			case GREATEST:
			case HASH:
			case HASH_CRC32:
			case HASH_MD5:
			case HASH_SHA1:
			case HASH_SHA256:
			case HEX:
			case IDENTITY_VAL_LOCAL:
			case IFNULL:
			case INSTR:
			case INT:
			case INTEGER:
			case JULIAN_DAY:
			case LAST_DAY:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LN:
			case LOCATE:
			case LOCATE_IN_STRING:
			case LOG10:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAX:
			case MAX_CARDINALITY:
			case MIDNIGHT_SECONDS:
			case MIN:
			case MINUTE:
			case MOD:
			case MONTHS_BETWEEN:
			case MQREAD:
			case MQREADCLOB:
			case MQRECEIVE:
			case MQRECEIVECLOB:
			case MQSEND:
			case MULTIPLY_ALT:
			case NEXT_DAY:
			case NEXT_MONTH:
			case NORMALIZE_DECFLOAT:
			case NORMALIZE_STRING:
			case NULLIF:
			case NVL:
			case OVERLAY:
			case PACK:
			case POSITION:
			case POSSTR:
			case POW:
			case POWER:
			case QUANTIZE:
			case QUARTER:
			case RADIANS:
			case RAISE_ERROR:
			case RAND:
			case RANDOM:
			case REAL:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REPLACE:
			case RID:
			case ROUND:
			case ROUND_TIMESTAMP:
			case ROWID:
			case RPAD:
			case RTRIM:
			case SCORE:
			case SIGN:
			case SIN:
			case SINH:
			case SMALLINT:
			case SOAPHTTPC:
			case SOAPHTTPNC:
			case SOAPHTTPNV:
			case SOAPHTTPV:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STRIP:
			case STRLEFT:
			case STRPOS:
			case STRRIGHT:
			case SUBSTR:
			case SUBSTRING:
			case TAN:
			case TANH:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIMESTAMP_FORMAT:
			case TIMESTAMP_ISO:
			case TIMESTAMP_TZ:
			case TO_CHAR:
			case TO_CLOB:
			case TO_DATE:
			case TO_NUMBER:
			case TOTALORDER:
			case TO_TIMESTAMP:
			case TRANSLATE:
			case TRIM:
			case TRIM_ARRAY:
			case TRUNC:
			case TRUNC_TIMESTAMP:
			case UCASE:
			case UNICODE:
			case UNICODE_STR:
			case UNISTR:
			case UPPER:
			case VARBINARY:
			case VARCHAR:
			case VARCHAR9:
			case VARCHAR_BIT_FORMAT:
			case VARCHAR_FORMAT:
			case VARGRAPHIC:
			case VERIFY_GROUP_FOR_USER:
			case VERIFY_ROLE_FOR_USER:
			case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
			case WEEK:
			case WEEK_ISO:
			case WRAP:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLCONCAT:
			case XMLDOCUMENT:
			case XMLELEMENT:
			case XMLFOREST:
			case XMLMODIFY:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLSERIALIZE:
			case XMLTEXT:
			case XMLXSROBJECTID:
			case XSLTRANSFORM:
			case CURRENT_ACCELERATOR:
			case CURRENT_APPLICATION_COMPATIBILITY:
			case CURRENT_APPLICATION_ENCODING_SCHEME:
			case CURRENT_CLIENT_ACCTNG:
			case CURRENT_CLIENT_APPLNAME:
			case CURRENT_CLIENT_CORR_TOKEN:
			case CURRENT_CLIENT_USERID:
			case CURRENT_CLIENT_WRKSTNNAME:
			case CURRENT_DATE:
			case CURRENT_DEBUG_MODE:
			case CURRENT_DECFLOAT_ROUNDING_MODE:
			case CURRENT_DEGREE:
			case CURRENT_EXPLAIN_MODE:
			case CURRENT_GET_ACCEL_ARCHIVE:
			case CURRENT_LOCALE_LC_CTYPE:
			case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
			case CURRENT_MEMBER:
			case CURRENT_OPTIMIZATION_HINT:
			case CURRENT_PACKAGE_PATH:
			case CURRENT_PACKAGESET:
			case CURRENT_PATH:
			case CURRENT_PRECISION:
			case CURRENT_QUERY_ACCELERATION:
			case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
			case CURRENT_REFRESH_AGE:
			case CURRENT_ROUTINE_VERSION:
			case CURRENT_RULES:
			case CURRENT_SCHEMA:
			case CURRENT_SERVER:
			case CURRENT_SQLID:
			case CURRENT_TEMPORAL_BUSINESS_TIME:
			case CURRENT_TEMPORAL_SYSTEM_TIME:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_TIME_ZONE:
			case ENCRYPTION_PASSWORD:
			case SESSION_TIME_ZONE:
			case SESSION_USER:
			case USER:
			case ADMIN_TASK_LIST:
			case ADMIN_TASK_OUTPUT:
			case ADMIN_TASK_STATUS:
			case BLOCKING_THREADS:
			case MQREADALL:
			case MQREADALLCLOB:
			case MQRECEIVEALL:
			case MQRECEIVEALLCLOB:
			case XMLTABLE:
			case SQLIDENTIFIER:
				{
				setState(2404);
				procedureName();
				}
				break;
			case COLON:
				{
				setState(2405);
				hostVariable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2408);
			match(INTO);
			setState(2409);
			descriptorName();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DescribeTableStatementContext extends ParserRuleContext {
		public TerminalNode DESCRIBE() { return getToken(DB2zSQLParser.DESCRIBE, 0); }
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public TerminalNode INTO() { return getToken(DB2zSQLParser.INTO, 0); }
		public DescriptorNameContext descriptorName() {
			return getRuleContext(DescriptorNameContext.class,0);
		}
		public DescribeUsingOptionContext describeUsingOption() {
			return getRuleContext(DescribeUsingOptionContext.class,0);
		}
		public DescribeTableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describeTableStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDescribeTableStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDescribeTableStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDescribeTableStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DescribeTableStatementContext describeTableStatement() throws RecognitionException {
		DescribeTableStatementContext _localctx = new DescribeTableStatementContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_describeTableStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2411);
			match(DESCRIBE);
			setState(2412);
			match(TABLE);
			setState(2413);
			hostVariable();
			setState(2414);
			match(INTO);
			setState(2415);
			descriptorName();
			setState(2417);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(2416);
				describeUsingOption();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropStatementContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DB2zSQLParser.DROP, 0); }
		public AliasDesignationContext aliasDesignation() {
			return getRuleContext(AliasDesignationContext.class,0);
		}
		public DropDatabaseClauseContext dropDatabaseClause() {
			return getRuleContext(DropDatabaseClauseContext.class,0);
		}
		public DropFunctionClauseContext dropFunctionClause() {
			return getRuleContext(DropFunctionClauseContext.class,0);
		}
		public DropIndexClauseContext dropIndexClause() {
			return getRuleContext(DropIndexClauseContext.class,0);
		}
		public DropMaskClauseContext dropMaskClause() {
			return getRuleContext(DropMaskClauseContext.class,0);
		}
		public DropPackageClauseContext dropPackageClause() {
			return getRuleContext(DropPackageClauseContext.class,0);
		}
		public DropPermissionClauseContext dropPermissionClause() {
			return getRuleContext(DropPermissionClauseContext.class,0);
		}
		public DropProcedureClauseContext dropProcedureClause() {
			return getRuleContext(DropProcedureClauseContext.class,0);
		}
		public DropRoleClauseContext dropRoleClause() {
			return getRuleContext(DropRoleClauseContext.class,0);
		}
		public DropSequenceClauseContext dropSequenceClause() {
			return getRuleContext(DropSequenceClauseContext.class,0);
		}
		public DropStogroupClauseContext dropStogroupClause() {
			return getRuleContext(DropStogroupClauseContext.class,0);
		}
		public DropSynonymClauseContext dropSynonymClause() {
			return getRuleContext(DropSynonymClauseContext.class,0);
		}
		public DropTableClauseContext dropTableClause() {
			return getRuleContext(DropTableClauseContext.class,0);
		}
		public DropTablespaceClauseContext dropTablespaceClause() {
			return getRuleContext(DropTablespaceClauseContext.class,0);
		}
		public DropTriggerClauseContext dropTriggerClause() {
			return getRuleContext(DropTriggerClauseContext.class,0);
		}
		public DropTrustedContextClauseContext dropTrustedContextClause() {
			return getRuleContext(DropTrustedContextClauseContext.class,0);
		}
		public DropTypeClauseContext dropTypeClause() {
			return getRuleContext(DropTypeClauseContext.class,0);
		}
		public DropVariableClauseContext dropVariableClause() {
			return getRuleContext(DropVariableClauseContext.class,0);
		}
		public DropViewClauseContext dropViewClause() {
			return getRuleContext(DropViewClauseContext.class,0);
		}
		public DropStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDropStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDropStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDropStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropStatementContext dropStatement() throws RecognitionException {
		DropStatementContext _localctx = new DropStatementContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_dropStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2419);
			match(DROP);
			setState(2439);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PUBLIC:
			case ALIAS:
				{
				setState(2420);
				aliasDesignation();
				}
				break;
			case DATABASE:
				{
				setState(2421);
				dropDatabaseClause();
				}
				break;
			case FUNCTION:
			case SPECIFIC:
				{
				setState(2422);
				dropFunctionClause();
				}
				break;
			case INDEX:
				{
				setState(2423);
				dropIndexClause();
				}
				break;
			case MASK:
				{
				setState(2424);
				dropMaskClause();
				}
				break;
			case PACKAGE:
				{
				setState(2425);
				dropPackageClause();
				}
				break;
			case PERMISSION:
				{
				setState(2426);
				dropPermissionClause();
				}
				break;
			case PROCEDURE:
				{
				setState(2427);
				dropProcedureClause();
				}
				break;
			case ROLE:
				{
				setState(2428);
				dropRoleClause();
				}
				break;
			case SEQUENCE:
				{
				setState(2429);
				dropSequenceClause();
				}
				break;
			case STOGROUP:
				{
				setState(2430);
				dropStogroupClause();
				}
				break;
			case SYNONYM:
				{
				setState(2431);
				dropSynonymClause();
				}
				break;
			case TABLE:
				{
				setState(2432);
				dropTableClause();
				}
				break;
			case TABLESPACE:
				{
				setState(2433);
				dropTablespaceClause();
				}
				break;
			case TRIGGER:
				{
				setState(2434);
				dropTriggerClause();
				}
				break;
			case TRUSTED:
				{
				setState(2435);
				dropTrustedContextClause();
				}
				break;
			case TYPE:
				{
				setState(2436);
				dropTypeClause();
				}
				break;
			case VARIABLE:
				{
				setState(2437);
				dropVariableClause();
				}
				break;
			case VIEW:
				{
				setState(2438);
				dropViewClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EndDeclareSectionStatementContext extends ParserRuleContext {
		public TerminalNode END() { return getToken(DB2zSQLParser.END, 0); }
		public TerminalNode DECLARE() { return getToken(DB2zSQLParser.DECLARE, 0); }
		public TerminalNode SECTION() { return getToken(DB2zSQLParser.SECTION, 0); }
		public EndDeclareSectionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_endDeclareSectionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterEndDeclareSectionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitEndDeclareSectionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitEndDeclareSectionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EndDeclareSectionStatementContext endDeclareSectionStatement() throws RecognitionException {
		EndDeclareSectionStatementContext _localctx = new EndDeclareSectionStatementContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_endDeclareSectionStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2441);
			match(END);
			setState(2442);
			match(DECLARE);
			setState(2443);
			match(SECTION);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExchangeStatementContext extends ParserRuleContext {
		public TerminalNode EXCHANGE() { return getToken(DB2zSQLParser.EXCHANGE, 0); }
		public TerminalNode DATA() { return getToken(DB2zSQLParser.DATA, 0); }
		public TerminalNode BETWEEN() { return getToken(DB2zSQLParser.BETWEEN, 0); }
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TerminalNode AND() { return getToken(DB2zSQLParser.AND, 0); }
		public ExchangeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exchangeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterExchangeStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitExchangeStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitExchangeStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExchangeStatementContext exchangeStatement() throws RecognitionException {
		ExchangeStatementContext _localctx = new ExchangeStatementContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_exchangeStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2445);
			match(EXCHANGE);
			setState(2446);
			match(DATA);
			setState(2447);
			match(BETWEEN);
			setState(2448);
			match(TABLE);
			setState(2449);
			tableName();
			setState(2450);
			match(AND);
			setState(2451);
			tableName();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExecuteStatementContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(DB2zSQLParser.EXECUTE, 0); }
		public StatementNameContext statementName() {
			return getRuleContext(StatementNameContext.class,0);
		}
		public SourceRowDataContext sourceRowData() {
			return getRuleContext(SourceRowDataContext.class,0);
		}
		public TerminalNode USING() { return getToken(DB2zSQLParser.USING, 0); }
		public TerminalNode DESCRIPTOR() { return getToken(DB2zSQLParser.DESCRIPTOR, 0); }
		public DescriptorNameContext descriptorName() {
			return getRuleContext(DescriptorNameContext.class,0);
		}
		public List<VariableContext> variable() {
			return getRuleContexts(VariableContext.class);
		}
		public VariableContext variable(int i) {
			return getRuleContext(VariableContext.class,i);
		}
		public List<ArrayElementSpecificationContext> arrayElementSpecification() {
			return getRuleContexts(ArrayElementSpecificationContext.class);
		}
		public ArrayElementSpecificationContext arrayElementSpecification(int i) {
			return getRuleContext(ArrayElementSpecificationContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public ExecuteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_executeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterExecuteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitExecuteStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitExecuteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExecuteStatementContext executeStatement() throws RecognitionException {
		ExecuteStatementContext _localctx = new ExecuteStatementContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_executeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2453);
			match(EXECUTE);
			setState(2454);
			statementName();
			setState(2474);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,168,_ctx) ) {
			case 1:
				{
				{
				setState(2455);
				match(USING);
				setState(2458);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,165,_ctx) ) {
				case 1:
					{
					setState(2456);
					variable();
					}
					break;
				case 2:
					{
					setState(2457);
					arrayElementSpecification();
					}
					break;
				}
				setState(2467);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2460);
					match(COMMA);
					setState(2463);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,166,_ctx) ) {
					case 1:
						{
						setState(2461);
						variable();
						}
						break;
					case 2:
						{
						setState(2462);
						arrayElementSpecification();
						}
						break;
					}
					}
					}
					setState(2469);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case 2:
				{
				{
				setState(2470);
				match(USING);
				setState(2471);
				match(DESCRIPTOR);
				setState(2472);
				descriptorName();
				}
				}
				break;
			case 3:
				{
				setState(2473);
				sourceRowData();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExecuteImmediateStatementContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(DB2zSQLParser.EXECUTE, 0); }
		public TerminalNode IMMEDIATE() { return getToken(DB2zSQLParser.IMMEDIATE, 0); }
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public ExecuteImmediateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_executeImmediateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterExecuteImmediateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitExecuteImmediateStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitExecuteImmediateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExecuteImmediateStatementContext executeImmediateStatement() throws RecognitionException {
		ExecuteImmediateStatementContext _localctx = new ExecuteImmediateStatementContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_executeImmediateStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2476);
			match(EXECUTE);
			setState(2477);
			match(IMMEDIATE);
			setState(2480);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COLON:
			case INSTEAD:
			case NEW:
			case NEW_TABLE:
			case OLD_TABLE:
			case REFERENCING:
			case BASED:
			case UPON:
			case ADD:
			case AFTER:
			case ALL:
			case ALLOCATE:
			case ALLOW:
			case ALTER:
			case ALTERAND:
			case ANY:
			case ARRAY:
			case ARRAY_EXISTS:
			case AS:
			case ASENSITIVE:
			case ASSOCIATE:
			case ASUTIME:
			case AT:
			case AUDIT:
			case AUX:
			case AUXILIARY:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BUFFERPOOL:
			case BUFFERPOOLS:
			case BY:
			case CALL:
			case CAPTURE:
			case CASCADED:
			case CASE:
			case CAST:
			case CCSID:
			case CHAR:
			case CHARACTER:
			case CHECK:
			case CLONE:
			case CLOSE:
			case CLUSTER:
			case COLLECTION:
			case COLLID:
			case COLUMN:
			case COMMENT:
			case COMMIT:
			case CONCAT:
			case CONDITION:
			case CONNECT:
			case CONNECTION:
			case CONSTRAINT:
			case CONTAINS:
			case CONTENT:
			case CONTINUE:
			case CREATE:
			case CUBE:
			case CURRENT:
			case CURRENT_LC_CTYPE:
			case CURRVAL:
			case CURSOR:
			case DATA:
			case DATABASE:
			case DAY:
			case DAYS:
			case DBINFO:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DISABLE:
			case DISALLOW:
			case DISTINCT:
			case DO:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSSIZE:
			case DYNAMIC:
			case EDITPROC:
			case ELSE:
			case ELSEIF:
			case ENCODING:
			case ENCRYPTION:
			case END:
			case END_EXEC:
			case ENDING:
			case ERASE:
			case ESCAPE:
			case EXCEPT:
			case EXCEPTION:
			case EXEC_SQL:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case FENCED:
			case FETCH:
			case FIELDPROC:
			case FINAL:
			case FIRST:
			case FOR:
			case FREE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANT:
			case GROUP:
			case HANDLER:
			case HAVING:
			case HOLD:
			case HOUR:
			case HOURS:
			case IF:
			case IMMEDIATE:
			case IN:
			case INCLUSIVE:
			case INDEX:
			case INDEXBP:
			case INHERIT:
			case INNER:
			case INOUT:
			case INSENSITIVE:
			case INSERT:
			case INTERSECT:
			case INTO:
			case IS:
			case ISOBID:
			case ITERATE:
			case JAR:
			case JOIN:
			case KEEP:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LAST:
			case LC_CTYPE:
			case LEAVE:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOCALE:
			case LOCATOR:
			case LOCATORS:
			case LOCK:
			case LOCKMAX:
			case LOCKSIZE:
			case LONG:
			case LOOP:
			case MAINTAINED:
			case MATERIALIZED:
			case MICROSECOND:
			case MICROSECONDS:
			case MODIFIES:
			case MONTH:
			case MONTHS:
			case NEXT:
			case NEXTVAL:
			case NO:
			case NONE:
			case NOT:
			case NULL:
			case NULLS:
			case NUMPARTS:
			case OBID:
			case OF:
			case OFFSET:
			case OLD:
			case ON:
			case OPEN:
			case OPTIMIZATION:
			case OPTIMIZE:
			case OR:
			case ORDER:
			case ORGANIZATION:
			case OUT:
			case OUTER:
			case PACKAGE:
			case PADDED:
			case PARAMETER:
			case PART:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONING:
			case PATH:
			case PERIOD:
			case PIECESIZE:
			case PLAN:
			case PRECISION:
			case PREPARE:
			case PREVVAL:
			case PRIOR:
			case PRIQTY:
			case PRIVILEGES:
			case PROCEDURE:
			case PROGRAM:
			case PSID:
			case PUBLIC:
			case QUERY:
			case QUERYNO:
			case READS:
			case REFERENCES:
			case REFRESH:
			case RELEASE:
			case RENAME:
			case REPEAT:
			case RESIGNAL:
			case RESTRICT:
			case RESULT:
			case RESULT_SET_LOCATOR:
			case RETURN:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUND_CEILING:
			case ROUND_DOWN:
			case ROUND_FLOOR:
			case ROUND_HALF_DOWN:
			case ROUND_HALF_EVEN:
			case ROUND_HALF_UP:
			case ROUND_UP:
			case ROW:
			case ROWSET:
			case RUN:
			case SAVEPOINT:
			case SCHEMA:
			case SCRATCHPAD:
			case SECOND:
			case SECONDS:
			case SECQTY:
			case SECURITY:
			case SELECT:
			case SENSITIVE:
			case SEQUENCE:
			case SET:
			case SIGNAL:
			case SIMPLE:
			case SOME:
			case SOURCE:
			case SPECIFIC:
			case STANDARD:
			case STATEMENT:
			case STATIC:
			case STAY:
			case STOGROUP:
			case STORES:
			case STYLE:
			case SUMMARY:
			case SYNONYM:
			case SYSDATE:
			case SYSTEM:
			case SYSTIMESTAMP:
			case TABLE:
			case TABLESPACE:
			case THEN:
			case TO:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNDO:
			case UNION:
			case UNIQUE:
			case UNTIL:
			case UPDATE:
			case USING:
			case VALIDPROC:
			case VALUE:
			case VALUES:
			case VARIABLE:
			case VARIANT:
			case VCAT:
			case VERSIONING:
			case VIEW:
			case VOLATILE:
			case VOLUMES:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WLM:
			case XMLCAST:
			case XMLEXISTS:
			case XMLNAMESPACES:
			case YEAR:
			case YEARS:
			case ZONE:
			case AND:
			case ARRAY_AGG:
			case ASC:
			case AVG:
			case BIT:
			case CHANGE:
			case CODEUNITS16:
			case CODEUNITS32:
			case CORR:
			case CORRELATION:
			case COUNT:
			case COUNT_BIG:
			case COVAR:
			case COVARIANCE:
			case COVARIANCE_SAMP:
			case COVAR_POP:
			case COVAR_SAMP:
			case CS:
			case CUME_DIST:
			case DENSE_RANK:
			case DESC:
			case EBCDIC:
			case EXCLUSIVE:
			case FIRST_VALUE:
			case FOLLOWING:
			case GROUPING:
			case IGNORE:
			case INDICATOR:
			case INPUT:
			case ISNULL:
			case LAG:
			case LARGE:
			case LAST_VALUE:
			case LEAD:
			case LISTAGG:
			case LOCKED:
			case LOCKS:
			case MEDIAN:
			case MINUTES:
			case MIXED:
			case NOTNULL:
			case NTH_VALUE:
			case NTILE:
			case NUMERIC:
			case OBJECT:
			case OCTETS:
			case ONLY:
			case OVER:
			case PASSING:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PERCENT_RANK:
			case PRECEDING:
			case PREVIOUS:
			case RANGE:
			case RANK:
			case RATIO_TO_REPORT:
			case READ:
			case REF:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_ICPT:
			case REGR_INTERCEPT:
			case REGR_R2:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case RESPECT:
			case ROW_NUMBER:
			case ROWS:
			case RR:
			case RS:
			case SBCS:
			case SELECTIVITY:
			case SETS:
			case SHARE:
			case SKIP_:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case TOKEN:
			case UNBOUNDED:
			case UNPACK:
			case UR:
			case USE:
			case VAR:
			case VARIANCE:
			case VARIANCE_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARYING:
			case WITHOUT:
			case XML:
			case XMLAGG:
			case COLUMNS:
			case SQLID:
			case ORDINALITY:
			case SYSTEM_TIME:
			case BUSINESS_TIME:
			case MULTIPLIER:
			case UNNEST:
			case CROSS:
			case CALLER:
			case CLIENT:
			case POSITIONING:
			case SCROLL:
			case ACTION:
			case ASSEMBLE:
			case C_:
			case CALLED:
			case COBOL:
			case DB2:
			case DEFINER:
			case DISPATCH:
			case ENVIRONMENT:
			case FAILURE:
			case FAILURES:
			case JAVA:
			case MAIN:
			case NAME:
			case OPTIONS:
			case PARALLEL:
			case PLI:
			case REGISTERS:
			case RESIDENT:
			case SECURED:
			case SPECIAL:
			case SQL:
			case STOP:
			case SUB:
			case YES:
			case APPLICATION:
			case CHANGED:
			case COMPATIBILITY:
			case COMPRESS:
			case COPY:
			case FREEPAGE:
			case GBPCACHE:
			case INCLUDE:
			case MAXVALUE:
			case MINVALUE:
			case PCTFREE:
			case REGENERATE:
			case MASK:
			case ENABLE:
			case PERMISSION:
			case ATOMIC:
			case SQLEXCEPTION:
			case MERGE:
			case MATCHED:
			case SQLSTATE:
			case MESSAGE_TEXT:
			case OVERRIDING:
			case PORTION:
			case DB2SQL:
			case DEBUG:
			case GENERAL:
			case MODE_:
			case REXX:
			case CACHE:
			case CYCLE:
			case INCREMENT:
			case RESTART:
			case DATACLAS:
			case MGMTCLAS:
			case REMOVE:
			case STORCLAS:
			case ACCESS:
			case ACTIVATE:
			case ALWAYS:
			case APPEND:
			case ARCHIVE:
			case BUSINESS:
			case CASCADE:
			case CHANGES:
			case CONTROL:
			case DEACTIVATE:
			case DEFERRED:
			case EACH:
			case ENFORCED:
			case EXTRA:
			case FOREIGN:
			case HIDDEN_:
			case HISTORY:
			case ID:
			case IDENTITY:
			case IMPLICITLY:
			case INITIALLY:
			case INLINE:
			case OPERATION:
			case ORGANIZE:
			case OVERLAPS:
			case PACKAGE_NAME:
			case PACKAGE_SCHEMA:
			case PACKAGE_VERSION:
			case PRIMARY:
			case RESET:
			case ROTATE:
			case START:
			case SYSIBM:
			case TRANSACTION:
			case XMLSCHEMA:
			case ELEMENT:
			case URL:
			case NAMESPACE:
			case LOCATION:
			case SYSXSR:
			case ALGORITHM:
			case FIXEDLENGTH:
			case HUFFMAN:
			case LOB:
			case LOG:
			case LOGGED:
			case MAXPARTITIONS:
			case MAXROWS:
			case MEMBER:
			case MOVE:
			case PAGE:
			case PAGENUM:
			case PENDING:
			case RELATIVE:
			case SEGSIZE:
			case TRACKMOD:
			case ADDRESS:
			case ATTRIBUTES:
			case AUTHENTICATION:
			case AUTHID:
			case CONTEXT:
			case JOBNAME:
			case OWNER:
			case PROFILE:
			case QUALIFIER:
			case SERVAUTH:
			case TRUSTED:
			case SECTION:
			case ACTIVE:
			case VERSION:
			case ALIAS:
			case WORK:
			case WORKFILE:
			case SYSDEFLT:
			case NULTERM:
			case STRUCTURE:
			case GENERIC:
			case TEMPORARY:
			case DEFER:
			case DEFINE:
			case EXCLUDE:
			case GENERATE:
			case KEYS:
			case XMLPATTERN:
			case SIZE:
			case EVERY:
			case ABSOLUTE:
			case ACCELERATOR:
			case EXCLUDING:
			case INCLUDING:
			case DEFAULTS:
			case MODIFIERS:
			case OPTION:
			case PRESERVE:
			case BOTH:
			case DESCRIBE:
			case LABELS:
			case NAMES:
			case OUTPUT:
			case EXCHANGE:
			case STABILIZED:
			case STMTCACHE:
			case STMTID:
			case STMTTOKEN:
			case STARTING:
			case CATALOG_NAME:
			case CONDITION_NUMBER:
			case CURSOR_NAME:
			case DB2_AUTHENTICATION_TYPE:
			case DB2_AUTHORIZATION_ID:
			case DB2_CONNECTION_STATE:
			case DB2_CONNECTION_STATUS:
			case DB2_ENCRYPTION_TYPE:
			case DB2_ERROR_CODE1:
			case DB2_ERROR_CODE2:
			case DB2_ERROR_CODE3:
			case DB2_ERROR_CODE4:
			case DB2_GET_DIAGNOSTICS_DIAGNOSTICS:
			case DB2_INTERNAL_ERROR_POINTER:
			case DB2_LAST_ROW:
			case DB2_LINE_NUMBER:
			case DB2_MESSAGE_ID:
			case DB2_MODULE_DETECTING_ERROR:
			case DB2_NUMBER_PARAMETER_MARKERS:
			case DB2_NUMBER_RESULT_SETS:
			case DB2_NUMBER_ROWS:
			case DB2_ORDINAL_TOKEN_:
			case DB2_PRODUCT_ID:
			case DB2_REASON_CODE:
			case DB2_RETURNED_SQLCODE:
			case DB2_RETURN_STATUS:
			case DB2_ROW_NUMBER:
			case DB2_SERVER_CLASS_NAME:
			case DB2_SQL_ATTR_CURSOR_HOLD:
			case DB2_SQL_ATTR_CURSOR_ROWSET:
			case DB2_SQL_ATTR_CURSOR_SCROLLABLE:
			case DB2_SQL_ATTR_CURSOR_SENSITIVITY:
			case DB2_SQL_ATTR_CURSOR_TYPE:
			case DB2_SQLERRD1:
			case DB2_SQLERRD2:
			case DB2_SQLERRD3:
			case DB2_SQLERRD4:
			case DB2_SQLERRD5:
			case DB2_SQLERRD6:
			case DB2_SQLERRD_SET:
			case DB2_SQL_NESTING_LEVEL:
			case DB2_TOKEN_COUNT:
			case DIAGNOSTICS:
			case MORE_:
			case NUMBER:
			case RETURNED_SQLSTATE:
			case ROW_COUNT:
			case SERVER_NAME:
			case STACKED:
			case CREATETAB:
			case CREATETS:
			case DBADM:
			case DBCTRL:
			case DBMAINT:
			case DISPLAYDB:
			case IMAGCOPY:
			case LOAD:
			case PACKADM:
			case RECOVERDB:
			case REORG:
			case REPAIR:
			case STARTDB:
			case STATS:
			case STOPDB:
			case BIND:
			case ALTERIN:
			case CREATEIN:
			case DROPIN:
			case USAGE:
			case ACCESSCTRL:
			case BINDADD:
			case BINDAGENT:
			case BSDS:
			case CREATEALIAS:
			case CREATEDBA:
			case CREATEDBC:
			case CREATE_SECURE_OBJECT:
			case CREATESG:
			case CREATETMTAB:
			case DATAACCESS:
			case DEBUGSESSION:
			case DISPLAY:
			case MONITOR1:
			case MONITOR2:
			case RECOVER:
			case SQLADM:
			case STOPALL:
			case STOSPACE:
			case SYSADM:
			case SYSCTRL:
			case SYSOPR:
			case TRACE:
			case UNLOAD:
			case WRITE:
			case ABS:
			case ABSVAL:
			case ACOS:
			case ADD_DAYS:
			case ADD_MONTHS:
			case ARRAY_DELETE:
			case ARRAY_FIRST:
			case ARRAY_LAST:
			case ARRAY_NEXT:
			case ARRAY_PRIOR:
			case ARRAY_TRIM:
			case ASCII:
			case ASCII_CHR:
			case ASCIISTR:
			case ASCII_STR:
			case ASIN:
			case ATAN:
			case ATAN2:
			case ATANH:
			case BIGINT:
			case BINARY:
			case BITAND:
			case BITANDNOT:
			case BITNOT:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BTRIM:
			case CARDINALITY:
			case CCSID_ENCODING:
			case CEIL:
			case CEILING:
			case CHAR9:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case CHR:
			case CLOB:
			case COALESCE:
			case COLLATION_KEY:
			case COMPARE_DECFLOAT:
			case COS:
			case COSH:
			case DATE:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFWEEK_ISO:
			case DAYOFYEAR:
			case DAYS_BETWEEN:
			case DBCLOB:
			case DEC:
			case DECFLOAT:
			case DECFLOAT_FORMAT:
			case DECFLOAT_SORTKEY:
			case DECIMAL:
			case DECODE:
			case DECRYPT_BINARY:
			case DECRYPT_BIT:
			case DECRYPT_CHAR:
			case DECRYPT_DATAKEY_BIGINT:
			case DECRYPT_DATAKEY_BIT:
			case DECRYPT_DATAKEY_CLOB:
			case DECRYPT_DATAKEY_DBCLOB:
			case DECRYPT_DATAKEY_DECIMAL:
			case DECRYPT_DATAKEY_INTEGER:
			case DECRYPT_DATAKEY_VARCHAR:
			case DECRYPT_DATAKEY_VARGRAPHIC:
			case DECRYPT_DB:
			case DEGREES:
			case DIFFERENCE:
			case DIGITS:
			case DOUBLE_PRECISION:
			case DSN_XMLVALIDATE:
			case EBCDIC_CHR:
			case EBCDIC_STR:
			case ENCRYPT_DATAKEY:
			case ENCRYPT_TDES:
			case EXP:
			case EXTRACT:
			case FLOAT:
			case FLOOR:
			case GENERATE_UNIQUE:
			case GENERATE_UNIQUE_BINARY:
			case GETHINT:
			case GETVARIABLE:
			case GRAPHIC:
			case GREATEST:
			case HASH:
			case HASH_CRC32:
			case HASH_MD5:
			case HASH_SHA1:
			case HASH_SHA256:
			case HEX:
			case IDENTITY_VAL_LOCAL:
			case IFNULL:
			case INSTR:
			case INT:
			case INTEGER:
			case JULIAN_DAY:
			case LAST_DAY:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LN:
			case LOCATE:
			case LOCATE_IN_STRING:
			case LOG10:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAX:
			case MAX_CARDINALITY:
			case MIDNIGHT_SECONDS:
			case MIN:
			case MINUTE:
			case MOD:
			case MONTHS_BETWEEN:
			case MQREAD:
			case MQREADCLOB:
			case MQRECEIVE:
			case MQRECEIVECLOB:
			case MQSEND:
			case MULTIPLY_ALT:
			case NEXT_DAY:
			case NEXT_MONTH:
			case NORMALIZE_DECFLOAT:
			case NORMALIZE_STRING:
			case NULLIF:
			case NVL:
			case OVERLAY:
			case PACK:
			case POSITION:
			case POSSTR:
			case POW:
			case POWER:
			case QUANTIZE:
			case QUARTER:
			case RADIANS:
			case RAISE_ERROR:
			case RAND:
			case RANDOM:
			case REAL:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REPLACE:
			case RID:
			case ROUND:
			case ROUND_TIMESTAMP:
			case ROWID:
			case RPAD:
			case RTRIM:
			case SCORE:
			case SIGN:
			case SIN:
			case SINH:
			case SMALLINT:
			case SOAPHTTPC:
			case SOAPHTTPNC:
			case SOAPHTTPNV:
			case SOAPHTTPV:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STRIP:
			case STRLEFT:
			case STRPOS:
			case STRRIGHT:
			case SUBSTR:
			case SUBSTRING:
			case TAN:
			case TANH:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIMESTAMP_FORMAT:
			case TIMESTAMP_ISO:
			case TIMESTAMP_TZ:
			case TO_CHAR:
			case TO_CLOB:
			case TO_DATE:
			case TO_NUMBER:
			case TOTALORDER:
			case TO_TIMESTAMP:
			case TRANSLATE:
			case TRIM:
			case TRIM_ARRAY:
			case TRUNC:
			case TRUNC_TIMESTAMP:
			case UCASE:
			case UNICODE:
			case UNICODE_STR:
			case UNISTR:
			case UPPER:
			case VARBINARY:
			case VARCHAR:
			case VARCHAR9:
			case VARCHAR_BIT_FORMAT:
			case VARCHAR_FORMAT:
			case VARGRAPHIC:
			case VERIFY_GROUP_FOR_USER:
			case VERIFY_ROLE_FOR_USER:
			case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
			case WEEK:
			case WEEK_ISO:
			case WRAP:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLCONCAT:
			case XMLDOCUMENT:
			case XMLELEMENT:
			case XMLFOREST:
			case XMLMODIFY:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLSERIALIZE:
			case XMLTEXT:
			case XMLXSROBJECTID:
			case XSLTRANSFORM:
			case CURRENT_ACCELERATOR:
			case CURRENT_APPLICATION_COMPATIBILITY:
			case CURRENT_APPLICATION_ENCODING_SCHEME:
			case CURRENT_CLIENT_ACCTNG:
			case CURRENT_CLIENT_APPLNAME:
			case CURRENT_CLIENT_CORR_TOKEN:
			case CURRENT_CLIENT_USERID:
			case CURRENT_CLIENT_WRKSTNNAME:
			case CURRENT_DATE:
			case CURRENT_DEBUG_MODE:
			case CURRENT_DECFLOAT_ROUNDING_MODE:
			case CURRENT_DEGREE:
			case CURRENT_EXPLAIN_MODE:
			case CURRENT_GET_ACCEL_ARCHIVE:
			case CURRENT_LOCALE_LC_CTYPE:
			case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
			case CURRENT_MEMBER:
			case CURRENT_OPTIMIZATION_HINT:
			case CURRENT_PACKAGE_PATH:
			case CURRENT_PACKAGESET:
			case CURRENT_PATH:
			case CURRENT_PRECISION:
			case CURRENT_QUERY_ACCELERATION:
			case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
			case CURRENT_REFRESH_AGE:
			case CURRENT_ROUTINE_VERSION:
			case CURRENT_RULES:
			case CURRENT_SCHEMA:
			case CURRENT_SERVER:
			case CURRENT_SQLID:
			case CURRENT_TEMPORAL_BUSINESS_TIME:
			case CURRENT_TEMPORAL_SYSTEM_TIME:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_TIME_ZONE:
			case ENCRYPTION_PASSWORD:
			case SESSION_TIME_ZONE:
			case SESSION_USER:
			case USER:
			case ADMIN_TASK_LIST:
			case ADMIN_TASK_OUTPUT:
			case ADMIN_TASK_STATUS:
			case BLOCKING_THREADS:
			case MQREADALL:
			case MQREADALLCLOB:
			case MQRECEIVEALL:
			case MQRECEIVEALLCLOB:
			case XMLTABLE:
			case SQLIDENTIFIER:
				{
				setState(2478);
				variable();
				}
				break;
			case NONNUMERICLITERAL:
				{
				setState(2479);
				match(NONNUMERICLITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExplainStatementContext extends ParserRuleContext {
		public TerminalNode EXPLAIN() { return getToken(DB2zSQLParser.EXPLAIN, 0); }
		public ExplainPlanClauseContext explainPlanClause() {
			return getRuleContext(ExplainPlanClauseContext.class,0);
		}
		public ExplainStmtcacheClauseContext explainStmtcacheClause() {
			return getRuleContext(ExplainStmtcacheClauseContext.class,0);
		}
		public ExplainPackageClauseContext explainPackageClause() {
			return getRuleContext(ExplainPackageClauseContext.class,0);
		}
		public ExplainStabilizedDynamicQueryClauseContext explainStabilizedDynamicQueryClause() {
			return getRuleContext(ExplainStabilizedDynamicQueryClauseContext.class,0);
		}
		public ExplainStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explainStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterExplainStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitExplainStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitExplainStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplainStatementContext explainStatement() throws RecognitionException {
		ExplainStatementContext _localctx = new ExplainStatementContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_explainStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2482);
			match(EXPLAIN);
			setState(2487);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
			case PLAN:
				{
				setState(2483);
				explainPlanClause();
				}
				break;
			case STMTCACHE:
				{
				setState(2484);
				explainStmtcacheClause();
				}
				break;
			case PACKAGE:
				{
				setState(2485);
				explainPackageClause();
				}
				break;
			case STABILIZED:
				{
				setState(2486);
				explainStabilizedDynamicQueryClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FetchStatementContext extends ParserRuleContext {
		public TerminalNode FETCH() { return getToken(DB2zSQLParser.FETCH, 0); }
		public CursorNameContext cursorName() {
			return getRuleContext(CursorNameContext.class,0);
		}
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode CONTINUE() { return getToken(DB2zSQLParser.CONTINUE, 0); }
		public FetchOrientationContext fetchOrientation() {
			return getRuleContext(FetchOrientationContext.class,0);
		}
		public TerminalNode FROM() { return getToken(DB2zSQLParser.FROM, 0); }
		public SingleRowFetchContext singleRowFetch() {
			return getRuleContext(SingleRowFetchContext.class,0);
		}
		public MultipleRowFetchContext multipleRowFetch() {
			return getRuleContext(MultipleRowFetchContext.class,0);
		}
		public TerminalNode INSENSITIVE() { return getToken(DB2zSQLParser.INSENSITIVE, 0); }
		public TerminalNode SENSITIVE() { return getToken(DB2zSQLParser.SENSITIVE, 0); }
		public FetchStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetchStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFetchStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFetchStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFetchStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FetchStatementContext fetchStatement() throws RecognitionException {
		FetchStatementContext _localctx = new FetchStatementContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_fetchStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2489);
			match(FETCH);
			setState(2491);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,171,_ctx) ) {
			case 1:
				{
				setState(2490);
				_la = _input.LA(1);
				if ( !(_la==INSENSITIVE || _la==SENSITIVE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(2495);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,172,_ctx) ) {
			case 1:
				{
				setState(2493);
				match(WITH);
				setState(2494);
				match(CONTINUE);
				}
				break;
			}
			setState(2498);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,173,_ctx) ) {
			case 1:
				{
				setState(2497);
				fetchOrientation();
				}
				break;
			}
			setState(2501);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,174,_ctx) ) {
			case 1:
				{
				setState(2500);
				match(FROM);
				}
				break;
			}
			setState(2503);
			cursorName();
			setState(2506);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,175,_ctx) ) {
			case 1:
				{
				setState(2504);
				singleRowFetch();
				}
				break;
			case 2:
				{
				setState(2505);
				multipleRowFetch();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FreeLocatorStatementContext extends ParserRuleContext {
		public TerminalNode FREE() { return getToken(DB2zSQLParser.FREE, 0); }
		public TerminalNode LOCATOR() { return getToken(DB2zSQLParser.LOCATOR, 0); }
		public List<HostVariableContext> hostVariable() {
			return getRuleContexts(HostVariableContext.class);
		}
		public HostVariableContext hostVariable(int i) {
			return getRuleContext(HostVariableContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public FreeLocatorStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_freeLocatorStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFreeLocatorStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFreeLocatorStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFreeLocatorStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FreeLocatorStatementContext freeLocatorStatement() throws RecognitionException {
		FreeLocatorStatementContext _localctx = new FreeLocatorStatementContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_freeLocatorStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2508);
			match(FREE);
			setState(2509);
			match(LOCATOR);
			setState(2510);
			hostVariable();
			setState(2515);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2511);
				match(COMMA);
				setState(2512);
				hostVariable();
				}
				}
				setState(2517);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GetDiagnosticsStatementContext extends ParserRuleContext {
		public TerminalNode GET() { return getToken(DB2zSQLParser.GET, 0); }
		public TerminalNode DIAGNOSTICS() { return getToken(DB2zSQLParser.DIAGNOSTICS, 0); }
		public StatementInformationContext statementInformation() {
			return getRuleContext(StatementInformationContext.class,0);
		}
		public ConditionInformationContext conditionInformation() {
			return getRuleContext(ConditionInformationContext.class,0);
		}
		public CombinedInformationContext combinedInformation() {
			return getRuleContext(CombinedInformationContext.class,0);
		}
		public TerminalNode CURRENT() { return getToken(DB2zSQLParser.CURRENT, 0); }
		public TerminalNode STACKED() { return getToken(DB2zSQLParser.STACKED, 0); }
		public GetDiagnosticsStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_getDiagnosticsStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGetDiagnosticsStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGetDiagnosticsStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGetDiagnosticsStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GetDiagnosticsStatementContext getDiagnosticsStatement() throws RecognitionException {
		GetDiagnosticsStatementContext _localctx = new GetDiagnosticsStatementContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_getDiagnosticsStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2518);
			match(GET);
			setState(2520);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CURRENT || _la==STACKED) {
				{
				setState(2519);
				_la = _input.LA(1);
				if ( !(_la==CURRENT || _la==STACKED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2522);
			match(DIAGNOSTICS);
			setState(2526);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,178,_ctx) ) {
			case 1:
				{
				setState(2523);
				statementInformation();
				}
				break;
			case 2:
				{
				setState(2524);
				conditionInformation();
				}
				break;
			case 3:
				{
				setState(2525);
				combinedInformation();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantStatementContext extends ParserRuleContext {
		public GrantCollectionStatementContext grantCollectionStatement() {
			return getRuleContext(GrantCollectionStatementContext.class,0);
		}
		public GrantDatabaseStatementContext grantDatabaseStatement() {
			return getRuleContext(GrantDatabaseStatementContext.class,0);
		}
		public GrantFunctionOrProcedureStatementContext grantFunctionOrProcedureStatement() {
			return getRuleContext(GrantFunctionOrProcedureStatementContext.class,0);
		}
		public GrantPackageStatementContext grantPackageStatement() {
			return getRuleContext(GrantPackageStatementContext.class,0);
		}
		public GrantPlanStatementContext grantPlanStatement() {
			return getRuleContext(GrantPlanStatementContext.class,0);
		}
		public GrantSchemaStatementContext grantSchemaStatement() {
			return getRuleContext(GrantSchemaStatementContext.class,0);
		}
		public GrantSequenceStatementContext grantSequenceStatement() {
			return getRuleContext(GrantSequenceStatementContext.class,0);
		}
		public GrantSystemStatementContext grantSystemStatement() {
			return getRuleContext(GrantSystemStatementContext.class,0);
		}
		public GrantTableStatementContext grantTableStatement() {
			return getRuleContext(GrantTableStatementContext.class,0);
		}
		public GrantTypeOrJarStatementContext grantTypeOrJarStatement() {
			return getRuleContext(GrantTypeOrJarStatementContext.class,0);
		}
		public GrantVariableStatementContext grantVariableStatement() {
			return getRuleContext(GrantVariableStatementContext.class,0);
		}
		public GrantUseOfStatementContext grantUseOfStatement() {
			return getRuleContext(GrantUseOfStatementContext.class,0);
		}
		public GrantStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGrantStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGrantStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGrantStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantStatementContext grantStatement() throws RecognitionException {
		GrantStatementContext _localctx = new GrantStatementContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_grantStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2540);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,179,_ctx) ) {
			case 1:
				{
				setState(2528);
				grantCollectionStatement();
				}
				break;
			case 2:
				{
				setState(2529);
				grantDatabaseStatement();
				}
				break;
			case 3:
				{
				setState(2530);
				grantFunctionOrProcedureStatement();
				}
				break;
			case 4:
				{
				setState(2531);
				grantPackageStatement();
				}
				break;
			case 5:
				{
				setState(2532);
				grantPlanStatement();
				}
				break;
			case 6:
				{
				setState(2533);
				grantSchemaStatement();
				}
				break;
			case 7:
				{
				setState(2534);
				grantSequenceStatement();
				}
				break;
			case 8:
				{
				setState(2535);
				grantSystemStatement();
				}
				break;
			case 9:
				{
				setState(2536);
				grantTableStatement();
				}
				break;
			case 10:
				{
				setState(2537);
				grantTypeOrJarStatement();
				}
				break;
			case 11:
				{
				setState(2538);
				grantVariableStatement();
				}
				break;
			case 12:
				{
				setState(2539);
				grantUseOfStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HoldLocatorStatementContext extends ParserRuleContext {
		public TerminalNode HOLD() { return getToken(DB2zSQLParser.HOLD, 0); }
		public TerminalNode LOCATOR() { return getToken(DB2zSQLParser.LOCATOR, 0); }
		public List<HostVariableContext> hostVariable() {
			return getRuleContexts(HostVariableContext.class);
		}
		public HostVariableContext hostVariable(int i) {
			return getRuleContext(HostVariableContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public HoldLocatorStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_holdLocatorStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterHoldLocatorStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitHoldLocatorStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitHoldLocatorStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HoldLocatorStatementContext holdLocatorStatement() throws RecognitionException {
		HoldLocatorStatementContext _localctx = new HoldLocatorStatementContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_holdLocatorStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2542);
			match(HOLD);
			setState(2543);
			match(LOCATOR);
			setState(2544);
			hostVariable();
			setState(2549);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2545);
				match(COMMA);
				setState(2546);
				hostVariable();
				}
				}
				setState(2551);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IncludeStatementContext extends ParserRuleContext {
		public TerminalNode INCLUDE() { return getToken(DB2zSQLParser.INCLUDE, 0); }
		public MemberNameContext memberName() {
			return getRuleContext(MemberNameContext.class,0);
		}
		public IncludeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_includeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterIncludeStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitIncludeStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitIncludeStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IncludeStatementContext includeStatement() throws RecognitionException {
		IncludeStatementContext _localctx = new IncludeStatementContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_includeStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2552);
			match(INCLUDE);
			setState(2553);
			memberName();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertStatementContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(DB2zSQLParser.INSERT, 0); }
		public TerminalNode INTO() { return getToken(DB2zSQLParser.INTO, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public MultipleRowInsertContext multipleRowInsert() {
			return getRuleContext(MultipleRowInsertContext.class,0);
		}
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public IncludeColumnsContext includeColumns() {
			return getRuleContext(IncludeColumnsContext.class,0);
		}
		public TerminalNode OVERRIDING() { return getToken(DB2zSQLParser.OVERRIDING, 0); }
		public TerminalNode USER() { return getToken(DB2zSQLParser.USER, 0); }
		public TerminalNode VALUE() { return getToken(DB2zSQLParser.VALUE, 0); }
		public TerminalNode VALUES() { return getToken(DB2zSQLParser.VALUES, 0); }
		public FullSelectContext fullSelect() {
			return getRuleContext(FullSelectContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public List<ValuesList1Context> valuesList1() {
			return getRuleContexts(ValuesList1Context.class);
		}
		public ValuesList1Context valuesList1(int i) {
			return getRuleContext(ValuesList1Context.class,i);
		}
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public List<CommonTableExpressionContext> commonTableExpression() {
			return getRuleContexts(CommonTableExpressionContext.class);
		}
		public CommonTableExpressionContext commonTableExpression(int i) {
			return getRuleContext(CommonTableExpressionContext.class,i);
		}
		public IsolationClauseContext isolationClause() {
			return getRuleContext(IsolationClauseContext.class,0);
		}
		public QuerynoClauseContext querynoClause() {
			return getRuleContext(QuerynoClauseContext.class,0);
		}
		public InsertStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterInsertStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitInsertStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitInsertStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertStatementContext insertStatement() throws RecognitionException {
		InsertStatementContext _localctx = new InsertStatementContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_insertStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2555);
			match(INSERT);
			setState(2556);
			match(INTO);
			setState(2557);
			tableName();
			setState(2569);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,182,_ctx) ) {
			case 1:
				{
				setState(2558);
				match(LPAREN);
				setState(2559);
				columnName();
				setState(2564);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2560);
					match(COMMA);
					setState(2561);
					columnName();
					}
					}
					setState(2566);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2567);
				match(RPAREN);
				}
				break;
			}
			setState(2572);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INCLUDE) {
				{
				setState(2571);
				includeColumns();
				}
			}

			setState(2577);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OVERRIDING) {
				{
				setState(2574);
				match(OVERRIDING);
				setState(2575);
				match(USER);
				setState(2576);
				match(VALUE);
				}
			}

			setState(2613);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,191,_ctx) ) {
			case 1:
				{
				{
				setState(2579);
				match(VALUES);
				setState(2592);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,186,_ctx) ) {
				case 1:
					{
					setState(2580);
					valuesList1();
					}
					break;
				case 2:
					{
					{
					setState(2581);
					match(LPAREN);
					setState(2582);
					valuesList1();
					setState(2587);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2583);
						match(COMMA);
						setState(2584);
						valuesList1();
						}
						}
						setState(2589);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2590);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 2:
				{
				{
				setState(2603);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(2594);
					match(WITH);
					setState(2595);
					commonTableExpression();
					setState(2600);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2596);
						match(COMMA);
						setState(2597);
						commonTableExpression();
						}
						}
						setState(2602);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(2605);
				fullSelect();
				setState(2607);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(2606);
					isolationClause();
					}
				}

				setState(2610);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==QUERYNO) {
					{
					setState(2609);
					querynoClause();
					}
				}

				}
				}
				break;
			case 3:
				{
				setState(2612);
				multipleRowInsert();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LabelStatementContext extends ParserRuleContext {
		public TerminalNode LABEL() { return getToken(DB2zSQLParser.LABEL, 0); }
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public List<TerminalNode> IS() { return getTokens(DB2zSQLParser.IS); }
		public TerminalNode IS(int i) {
			return getToken(DB2zSQLParser.IS, i);
		}
		public List<TerminalNode> NONNUMERICLITERAL() { return getTokens(DB2zSQLParser.NONNUMERICLITERAL); }
		public TerminalNode NONNUMERICLITERAL(int i) {
			return getToken(DB2zSQLParser.NONNUMERICLITERAL, i);
		}
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public TerminalNode ALIAS() { return getToken(DB2zSQLParser.ALIAS, 0); }
		public AliasNameContext aliasName() {
			return getRuleContext(AliasNameContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(DB2zSQLParser.COLUMN, 0); }
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public LabelStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_labelStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterLabelStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitLabelStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitLabelStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LabelStatementContext labelStatement() throws RecognitionException {
		LabelStatementContext _localctx = new LabelStatementContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_labelStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2615);
			match(LABEL);
			setState(2616);
			match(ON);
			setState(2648);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,194,_ctx) ) {
			case 1:
				{
				{
				setState(2626);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case TABLE:
					{
					{
					setState(2617);
					match(TABLE);
					setState(2618);
					tableName();
					}
					}
					break;
				case ALIAS:
					{
					{
					setState(2619);
					match(ALIAS);
					setState(2620);
					aliasName();
					}
					}
					break;
				case COLUMN:
					{
					{
					setState(2621);
					match(COLUMN);
					setState(2622);
					tableName();
					setState(2623);
					match(DOT);
					setState(2624);
					columnName();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2628);
				match(IS);
				setState(2629);
				match(NONNUMERICLITERAL);
				}
				}
				break;
			case 2:
				{
				{
				setState(2631);
				tableName();
				setState(2632);
				match(LPAREN);
				setState(2633);
				columnName();
				setState(2634);
				match(IS);
				setState(2635);
				match(NONNUMERICLITERAL);
				setState(2643);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2636);
					match(COMMA);
					setState(2637);
					columnName();
					setState(2638);
					match(IS);
					setState(2639);
					match(NONNUMERICLITERAL);
					}
					}
					setState(2645);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2646);
				match(RPAREN);
				}
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockTableStatementContext extends ParserRuleContext {
		public TerminalNode LOCK() { return getToken(DB2zSQLParser.LOCK, 0); }
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode IN() { return getToken(DB2zSQLParser.IN, 0); }
		public TerminalNode MODE_() { return getToken(DB2zSQLParser.MODE_, 0); }
		public TerminalNode SHARE() { return getToken(DB2zSQLParser.SHARE, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(DB2zSQLParser.EXCLUSIVE, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode PARTITION() { return getToken(DB2zSQLParser.PARTITION, 0); }
		public TerminalNode PART() { return getToken(DB2zSQLParser.PART, 0); }
		public LockTableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockTableStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterLockTableStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitLockTableStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitLockTableStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockTableStatementContext lockTableStatement() throws RecognitionException {
		LockTableStatementContext _localctx = new LockTableStatementContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_lockTableStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2650);
			match(LOCK);
			setState(2651);
			match(TABLE);
			setState(2652);
			tableName();
			setState(2655);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PART || _la==PARTITION) {
				{
				setState(2653);
				_la = _input.LA(1);
				if ( !(_la==PART || _la==PARTITION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2654);
				match(INTEGERLITERAL);
				}
			}

			setState(2657);
			match(IN);
			setState(2658);
			_la = _input.LA(1);
			if ( !(_la==EXCLUSIVE || _la==SHARE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2659);
			match(MODE_);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MergeStatementContext extends ParserRuleContext {
		public TerminalNode MERGE() { return getToken(DB2zSQLParser.MERGE, 0); }
		public TerminalNode INTO() { return getToken(DB2zSQLParser.INTO, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode USING() { return getToken(DB2zSQLParser.USING, 0); }
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public SearchConditionContext searchCondition() {
			return getRuleContext(SearchConditionContext.class,0);
		}
		public SourceValuesContext sourceValues() {
			return getRuleContext(SourceValuesContext.class,0);
		}
		public CorrelationClauseContext correlationClause() {
			return getRuleContext(CorrelationClauseContext.class,0);
		}
		public IncludeColumnsContext includeColumns() {
			return getRuleContext(IncludeColumnsContext.class,0);
		}
		public List<TerminalNode> WHEN() { return getTokens(DB2zSQLParser.WHEN); }
		public TerminalNode WHEN(int i) {
			return getToken(DB2zSQLParser.WHEN, i);
		}
		public List<MatchingConditionContext> matchingCondition() {
			return getRuleContexts(MatchingConditionContext.class);
		}
		public MatchingConditionContext matchingCondition(int i) {
			return getRuleContext(MatchingConditionContext.class,i);
		}
		public List<TerminalNode> THEN() { return getTokens(DB2zSQLParser.THEN); }
		public TerminalNode THEN(int i) {
			return getToken(DB2zSQLParser.THEN, i);
		}
		public TerminalNode ELSE() { return getToken(DB2zSQLParser.ELSE, 0); }
		public TerminalNode IGNORE() { return getToken(DB2zSQLParser.IGNORE, 0); }
		public NotAtomicPhraseContext notAtomicPhrase() {
			return getRuleContext(NotAtomicPhraseContext.class,0);
		}
		public QuerynoClauseContext querynoClause() {
			return getRuleContext(QuerynoClauseContext.class,0);
		}
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public List<ModificationOperationContext> modificationOperation() {
			return getRuleContexts(ModificationOperationContext.class);
		}
		public ModificationOperationContext modificationOperation(int i) {
			return getRuleContext(ModificationOperationContext.class,i);
		}
		public List<SignalStatementContext> signalStatement() {
			return getRuleContexts(SignalStatementContext.class);
		}
		public SignalStatementContext signalStatement(int i) {
			return getRuleContext(SignalStatementContext.class,i);
		}
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public MergeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mergeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterMergeStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitMergeStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitMergeStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MergeStatementContext mergeStatement() throws RecognitionException {
		MergeStatementContext _localctx = new MergeStatementContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_mergeStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2661);
			match(MERGE);
			setState(2662);
			match(INTO);
			setState(2663);
			tableName();
			setState(2665);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,196,_ctx) ) {
			case 1:
				{
				setState(2664);
				correlationClause();
				}
				break;
			}
			setState(2668);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INCLUDE) {
				{
				setState(2667);
				includeColumns();
				}
			}

			setState(2670);
			match(USING);
			setState(2685);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,200,_ctx) ) {
			case 1:
				{
				{
				setState(2674);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,198,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2671);
						match(LPAREN);
						}
						} 
					}
					setState(2676);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,198,_ctx);
				}
				setState(2677);
				tableReference();
				setState(2681);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==RPAREN) {
					{
					{
					setState(2678);
					match(RPAREN);
					}
					}
					setState(2683);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case 2:
				{
				setState(2684);
				sourceValues();
				}
				break;
			}
			setState(2687);
			match(ON);
			setState(2688);
			searchCondition();
			setState(2696); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2689);
				match(WHEN);
				setState(2690);
				matchingCondition();
				setState(2691);
				match(THEN);
				setState(2694);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DELETE:
				case INSERT:
				case UPDATE:
					{
					setState(2692);
					modificationOperation();
					}
					break;
				case SIGNAL:
					{
					setState(2693);
					signalStatement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				setState(2698); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(2702);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(2700);
				match(ELSE);
				setState(2701);
				match(IGNORE);
				}
			}

			setState(2705);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,204,_ctx) ) {
			case 1:
				{
				setState(2704);
				notAtomicPhrase();
				}
				break;
			}
			setState(2708);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,205,_ctx) ) {
			case 1:
				{
				setState(2707);
				querynoClause();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpenStatementContext extends ParserRuleContext {
		public TerminalNode OPEN() { return getToken(DB2zSQLParser.OPEN, 0); }
		public CursorNameContext cursorName() {
			return getRuleContext(CursorNameContext.class,0);
		}
		public TerminalNode USING() { return getToken(DB2zSQLParser.USING, 0); }
		public List<VariableContext> variable() {
			return getRuleContexts(VariableContext.class);
		}
		public VariableContext variable(int i) {
			return getRuleContext(VariableContext.class,i);
		}
		public TerminalNode DESCRIPTOR() { return getToken(DB2zSQLParser.DESCRIPTOR, 0); }
		public DescriptorNameContext descriptorName() {
			return getRuleContext(DescriptorNameContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public OpenStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_openStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterOpenStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitOpenStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitOpenStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpenStatementContext openStatement() throws RecognitionException {
		OpenStatementContext _localctx = new OpenStatementContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_openStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2710);
			match(OPEN);
			setState(2711);
			cursorName();
			setState(2724);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,207,_ctx) ) {
			case 1:
				{
				{
				setState(2712);
				match(USING);
				setState(2713);
				variable();
				setState(2718);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2714);
					match(COMMA);
					setState(2715);
					variable();
					}
					}
					setState(2720);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case 2:
				{
				{
				setState(2721);
				match(USING);
				setState(2722);
				match(DESCRIPTOR);
				setState(2723);
				descriptorName();
				}
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetAssignmentStatementContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public SetAssignmentClauseContext setAssignmentClause() {
			return getRuleContext(SetAssignmentClauseContext.class,0);
		}
		public SetAssignmentStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setAssignmentStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSetAssignmentStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSetAssignmentStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSetAssignmentStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetAssignmentStatementContext setAssignmentStatement() throws RecognitionException {
		SetAssignmentStatementContext _localctx = new SetAssignmentStatementContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_setAssignmentStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2726);
			match(SET);
			setState(2727);
			setAssignmentClause();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateStatementContext extends ParserRuleContext {
		public SearchedUpdateContext searchedUpdate() {
			return getRuleContext(SearchedUpdateContext.class,0);
		}
		public PositionedUpdateContext positionedUpdate() {
			return getRuleContext(PositionedUpdateContext.class,0);
		}
		public UpdateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterUpdateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitUpdateStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitUpdateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateStatementContext updateStatement() throws RecognitionException {
		UpdateStatementContext _localctx = new UpdateStatementContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_updateStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2731);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,208,_ctx) ) {
			case 1:
				{
				setState(2729);
				searchedUpdate();
				}
				break;
			case 2:
				{
				setState(2730);
				positionedUpdate();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValuesStatementContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(DB2zSQLParser.VALUES, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public ValuesStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valuesStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterValuesStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitValuesStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitValuesStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValuesStatementContext valuesStatement() throws RecognitionException {
		ValuesStatementContext _localctx = new ValuesStatementContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_valuesStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2733);
			match(VALUES);
			setState(2746);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,210,_ctx) ) {
			case 1:
				{
				setState(2734);
				expression();
				}
				break;
			case 2:
				{
				{
				setState(2735);
				match(LPAREN);
				setState(2736);
				expression();
				setState(2741);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2737);
					match(COMMA);
					setState(2738);
					expression();
					}
					}
					setState(2743);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2744);
				match(RPAREN);
				}
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantCollectionStatementContext extends ParserRuleContext {
		public TerminalNode GRANT() { return getToken(DB2zSQLParser.GRANT, 0); }
		public TerminalNode COLLECTION() { return getToken(DB2zSQLParser.COLLECTION, 0); }
		public TerminalNode TO() { return getToken(DB2zSQLParser.TO, 0); }
		public List<GranteeContext> grantee() {
			return getRuleContexts(GranteeContext.class);
		}
		public GranteeContext grantee(int i) {
			return getRuleContext(GranteeContext.class,i);
		}
		public TerminalNode CREATE() { return getToken(DB2zSQLParser.CREATE, 0); }
		public TerminalNode PACKADM() { return getToken(DB2zSQLParser.PACKADM, 0); }
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public TerminalNode IN() { return getToken(DB2zSQLParser.IN, 0); }
		public TerminalNode SPLAT() { return getToken(DB2zSQLParser.SPLAT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public WithGrantOptionContext withGrantOption() {
			return getRuleContext(WithGrantOptionContext.class,0);
		}
		public List<CollectionIDContext> collectionID() {
			return getRuleContexts(CollectionIDContext.class);
		}
		public CollectionIDContext collectionID(int i) {
			return getRuleContext(CollectionIDContext.class,i);
		}
		public GrantCollectionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantCollectionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGrantCollectionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGrantCollectionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGrantCollectionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantCollectionStatementContext grantCollectionStatement() throws RecognitionException {
		GrantCollectionStatementContext _localctx = new GrantCollectionStatementContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_grantCollectionStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2748);
			match(GRANT);
			setState(2749);
			_la = _input.LA(1);
			if ( !(_la==CREATE || _la==PACKADM) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2750);
			_la = _input.LA(1);
			if ( !(_la==IN || _la==ON) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2751);
			match(COLLECTION);
			setState(2761);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INSTEAD:
			case NEW:
			case NEW_TABLE:
			case OLD_TABLE:
			case REFERENCING:
			case BASED:
			case UPON:
			case ADD:
			case AFTER:
			case ALL:
			case ALLOCATE:
			case ALLOW:
			case ALTER:
			case ALTERAND:
			case ANY:
			case ARRAY:
			case ARRAY_EXISTS:
			case AS:
			case ASENSITIVE:
			case ASSOCIATE:
			case ASUTIME:
			case AT:
			case AUDIT:
			case AUX:
			case AUXILIARY:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BUFFERPOOL:
			case BUFFERPOOLS:
			case BY:
			case CALL:
			case CAPTURE:
			case CASCADED:
			case CASE:
			case CAST:
			case CCSID:
			case CHAR:
			case CHARACTER:
			case CHECK:
			case CLONE:
			case CLOSE:
			case CLUSTER:
			case COLLECTION:
			case COLLID:
			case COLUMN:
			case COMMENT:
			case COMMIT:
			case CONCAT:
			case CONDITION:
			case CONNECT:
			case CONNECTION:
			case CONSTRAINT:
			case CONTAINS:
			case CONTENT:
			case CONTINUE:
			case CREATE:
			case CUBE:
			case CURRENT:
			case CURRENT_LC_CTYPE:
			case CURRVAL:
			case CURSOR:
			case DATA:
			case DATABASE:
			case DAY:
			case DAYS:
			case DBINFO:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DISABLE:
			case DISALLOW:
			case DISTINCT:
			case DO:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSSIZE:
			case DYNAMIC:
			case EDITPROC:
			case ELSE:
			case ELSEIF:
			case ENCODING:
			case ENCRYPTION:
			case END:
			case END_EXEC:
			case ENDING:
			case ERASE:
			case ESCAPE:
			case EXCEPT:
			case EXCEPTION:
			case EXEC_SQL:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case FENCED:
			case FETCH:
			case FIELDPROC:
			case FINAL:
			case FIRST:
			case FOR:
			case FREE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANT:
			case GROUP:
			case HANDLER:
			case HAVING:
			case HOLD:
			case HOUR:
			case HOURS:
			case IF:
			case IMMEDIATE:
			case IN:
			case INCLUSIVE:
			case INDEX:
			case INDEXBP:
			case INHERIT:
			case INNER:
			case INOUT:
			case INSENSITIVE:
			case INSERT:
			case INTERSECT:
			case INTO:
			case IS:
			case ISOBID:
			case ITERATE:
			case JAR:
			case JOIN:
			case KEEP:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LAST:
			case LC_CTYPE:
			case LEAVE:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOCALE:
			case LOCATOR:
			case LOCATORS:
			case LOCK:
			case LOCKMAX:
			case LOCKSIZE:
			case LONG:
			case LOOP:
			case MAINTAINED:
			case MATERIALIZED:
			case MICROSECOND:
			case MICROSECONDS:
			case MODIFIES:
			case MONTH:
			case MONTHS:
			case NEXT:
			case NEXTVAL:
			case NO:
			case NONE:
			case NOT:
			case NULL:
			case NULLS:
			case NUMPARTS:
			case OBID:
			case OF:
			case OFFSET:
			case OLD:
			case ON:
			case OPEN:
			case OPTIMIZATION:
			case OPTIMIZE:
			case OR:
			case ORDER:
			case ORGANIZATION:
			case OUT:
			case OUTER:
			case PACKAGE:
			case PADDED:
			case PARAMETER:
			case PART:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONING:
			case PATH:
			case PERIOD:
			case PIECESIZE:
			case PLAN:
			case PRECISION:
			case PREPARE:
			case PREVVAL:
			case PRIOR:
			case PRIQTY:
			case PRIVILEGES:
			case PROCEDURE:
			case PROGRAM:
			case PSID:
			case PUBLIC:
			case QUERY:
			case QUERYNO:
			case READS:
			case REFERENCES:
			case REFRESH:
			case RELEASE:
			case RENAME:
			case REPEAT:
			case RESIGNAL:
			case RESTRICT:
			case RESULT:
			case RESULT_SET_LOCATOR:
			case RETURN:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUND_CEILING:
			case ROUND_DOWN:
			case ROUND_FLOOR:
			case ROUND_HALF_DOWN:
			case ROUND_HALF_EVEN:
			case ROUND_HALF_UP:
			case ROUND_UP:
			case ROW:
			case ROWSET:
			case RUN:
			case SAVEPOINT:
			case SCHEMA:
			case SCRATCHPAD:
			case SECOND:
			case SECONDS:
			case SECQTY:
			case SECURITY:
			case SELECT:
			case SENSITIVE:
			case SEQUENCE:
			case SET:
			case SIGNAL:
			case SIMPLE:
			case SOME:
			case SOURCE:
			case SPECIFIC:
			case STANDARD:
			case STATEMENT:
			case STATIC:
			case STAY:
			case STOGROUP:
			case STORES:
			case STYLE:
			case SUMMARY:
			case SYNONYM:
			case SYSDATE:
			case SYSTEM:
			case SYSTIMESTAMP:
			case TABLE:
			case TABLESPACE:
			case THEN:
			case TO:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNDO:
			case UNION:
			case UNIQUE:
			case UNTIL:
			case UPDATE:
			case USING:
			case VALIDPROC:
			case VALUE:
			case VALUES:
			case VARIABLE:
			case VARIANT:
			case VCAT:
			case VERSIONING:
			case VIEW:
			case VOLATILE:
			case VOLUMES:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WLM:
			case XMLCAST:
			case XMLEXISTS:
			case XMLNAMESPACES:
			case YEAR:
			case YEARS:
			case ZONE:
			case AND:
			case ARRAY_AGG:
			case ASC:
			case AVG:
			case BIT:
			case CHANGE:
			case CODEUNITS16:
			case CODEUNITS32:
			case CORR:
			case CORRELATION:
			case COUNT:
			case COUNT_BIG:
			case COVAR:
			case COVARIANCE:
			case COVARIANCE_SAMP:
			case COVAR_POP:
			case COVAR_SAMP:
			case CS:
			case CUME_DIST:
			case DENSE_RANK:
			case DESC:
			case EBCDIC:
			case EXCLUSIVE:
			case FIRST_VALUE:
			case FOLLOWING:
			case GROUPING:
			case IGNORE:
			case INDICATOR:
			case INPUT:
			case ISNULL:
			case LAG:
			case LARGE:
			case LAST_VALUE:
			case LEAD:
			case LISTAGG:
			case LOCKED:
			case LOCKS:
			case MEDIAN:
			case MINUTES:
			case MIXED:
			case NOTNULL:
			case NTH_VALUE:
			case NTILE:
			case NUMERIC:
			case OBJECT:
			case OCTETS:
			case ONLY:
			case OVER:
			case PASSING:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PERCENT_RANK:
			case PRECEDING:
			case PREVIOUS:
			case RANGE:
			case RANK:
			case RATIO_TO_REPORT:
			case READ:
			case REF:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_ICPT:
			case REGR_INTERCEPT:
			case REGR_R2:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case RESPECT:
			case ROW_NUMBER:
			case ROWS:
			case RR:
			case RS:
			case SBCS:
			case SELECTIVITY:
			case SETS:
			case SHARE:
			case SKIP_:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case TOKEN:
			case UNBOUNDED:
			case UNPACK:
			case UR:
			case USE:
			case VAR:
			case VARIANCE:
			case VARIANCE_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARYING:
			case WITHOUT:
			case XML:
			case XMLAGG:
			case COLUMNS:
			case SQLID:
			case ORDINALITY:
			case SYSTEM_TIME:
			case BUSINESS_TIME:
			case MULTIPLIER:
			case UNNEST:
			case CROSS:
			case CALLER:
			case CLIENT:
			case POSITIONING:
			case SCROLL:
			case ACTION:
			case ASSEMBLE:
			case C_:
			case CALLED:
			case COBOL:
			case DB2:
			case DEFINER:
			case DISPATCH:
			case ENVIRONMENT:
			case FAILURE:
			case FAILURES:
			case JAVA:
			case MAIN:
			case NAME:
			case OPTIONS:
			case PARALLEL:
			case PLI:
			case REGISTERS:
			case RESIDENT:
			case SECURED:
			case SPECIAL:
			case SQL:
			case STOP:
			case SUB:
			case YES:
			case APPLICATION:
			case CHANGED:
			case COMPATIBILITY:
			case COMPRESS:
			case COPY:
			case FREEPAGE:
			case GBPCACHE:
			case INCLUDE:
			case MAXVALUE:
			case MINVALUE:
			case PCTFREE:
			case REGENERATE:
			case MASK:
			case ENABLE:
			case PERMISSION:
			case ATOMIC:
			case SQLEXCEPTION:
			case MERGE:
			case MATCHED:
			case SQLSTATE:
			case MESSAGE_TEXT:
			case OVERRIDING:
			case PORTION:
			case DB2SQL:
			case DEBUG:
			case GENERAL:
			case MODE_:
			case REXX:
			case CACHE:
			case CYCLE:
			case INCREMENT:
			case RESTART:
			case DATACLAS:
			case MGMTCLAS:
			case REMOVE:
			case STORCLAS:
			case ACCESS:
			case ACTIVATE:
			case ALWAYS:
			case APPEND:
			case ARCHIVE:
			case BUSINESS:
			case CASCADE:
			case CHANGES:
			case CONTROL:
			case DEACTIVATE:
			case DEFERRED:
			case EACH:
			case ENFORCED:
			case EXTRA:
			case FOREIGN:
			case HIDDEN_:
			case HISTORY:
			case ID:
			case IDENTITY:
			case IMPLICITLY:
			case INITIALLY:
			case INLINE:
			case OPERATION:
			case ORGANIZE:
			case OVERLAPS:
			case PACKAGE_NAME:
			case PACKAGE_SCHEMA:
			case PACKAGE_VERSION:
			case PRIMARY:
			case RESET:
			case ROTATE:
			case START:
			case SYSIBM:
			case TRANSACTION:
			case XMLSCHEMA:
			case ELEMENT:
			case URL:
			case NAMESPACE:
			case LOCATION:
			case SYSXSR:
			case ALGORITHM:
			case FIXEDLENGTH:
			case HUFFMAN:
			case LOB:
			case LOG:
			case LOGGED:
			case MAXPARTITIONS:
			case MAXROWS:
			case MEMBER:
			case MOVE:
			case PAGE:
			case PAGENUM:
			case PENDING:
			case RELATIVE:
			case SEGSIZE:
			case TRACKMOD:
			case ADDRESS:
			case ATTRIBUTES:
			case AUTHENTICATION:
			case AUTHID:
			case CONTEXT:
			case JOBNAME:
			case OWNER:
			case PROFILE:
			case QUALIFIER:
			case SERVAUTH:
			case TRUSTED:
			case SECTION:
			case ACTIVE:
			case VERSION:
			case ALIAS:
			case WORK:
			case WORKFILE:
			case SYSDEFLT:
			case NULTERM:
			case STRUCTURE:
			case GENERIC:
			case TEMPORARY:
			case DEFER:
			case DEFINE:
			case EXCLUDE:
			case GENERATE:
			case KEYS:
			case XMLPATTERN:
			case SIZE:
			case EVERY:
			case ABSOLUTE:
			case ACCELERATOR:
			case EXCLUDING:
			case INCLUDING:
			case DEFAULTS:
			case MODIFIERS:
			case OPTION:
			case PRESERVE:
			case BOTH:
			case DESCRIBE:
			case LABELS:
			case NAMES:
			case OUTPUT:
			case EXCHANGE:
			case STABILIZED:
			case STMTCACHE:
			case STMTID:
			case STMTTOKEN:
			case STARTING:
			case CATALOG_NAME:
			case CONDITION_NUMBER:
			case CURSOR_NAME:
			case DB2_AUTHENTICATION_TYPE:
			case DB2_AUTHORIZATION_ID:
			case DB2_CONNECTION_STATE:
			case DB2_CONNECTION_STATUS:
			case DB2_ENCRYPTION_TYPE:
			case DB2_ERROR_CODE1:
			case DB2_ERROR_CODE2:
			case DB2_ERROR_CODE3:
			case DB2_ERROR_CODE4:
			case DB2_GET_DIAGNOSTICS_DIAGNOSTICS:
			case DB2_INTERNAL_ERROR_POINTER:
			case DB2_LAST_ROW:
			case DB2_LINE_NUMBER:
			case DB2_MESSAGE_ID:
			case DB2_MODULE_DETECTING_ERROR:
			case DB2_NUMBER_PARAMETER_MARKERS:
			case DB2_NUMBER_RESULT_SETS:
			case DB2_NUMBER_ROWS:
			case DB2_ORDINAL_TOKEN_:
			case DB2_PRODUCT_ID:
			case DB2_REASON_CODE:
			case DB2_RETURNED_SQLCODE:
			case DB2_RETURN_STATUS:
			case DB2_ROW_NUMBER:
			case DB2_SERVER_CLASS_NAME:
			case DB2_SQL_ATTR_CURSOR_HOLD:
			case DB2_SQL_ATTR_CURSOR_ROWSET:
			case DB2_SQL_ATTR_CURSOR_SCROLLABLE:
			case DB2_SQL_ATTR_CURSOR_SENSITIVITY:
			case DB2_SQL_ATTR_CURSOR_TYPE:
			case DB2_SQLERRD1:
			case DB2_SQLERRD2:
			case DB2_SQLERRD3:
			case DB2_SQLERRD4:
			case DB2_SQLERRD5:
			case DB2_SQLERRD6:
			case DB2_SQLERRD_SET:
			case DB2_SQL_NESTING_LEVEL:
			case DB2_TOKEN_COUNT:
			case DIAGNOSTICS:
			case MORE_:
			case NUMBER:
			case RETURNED_SQLSTATE:
			case ROW_COUNT:
			case SERVER_NAME:
			case STACKED:
			case CREATETAB:
			case CREATETS:
			case DBADM:
			case DBCTRL:
			case DBMAINT:
			case DISPLAYDB:
			case IMAGCOPY:
			case LOAD:
			case PACKADM:
			case RECOVERDB:
			case REORG:
			case REPAIR:
			case STARTDB:
			case STATS:
			case STOPDB:
			case BIND:
			case ALTERIN:
			case CREATEIN:
			case DROPIN:
			case USAGE:
			case ACCESSCTRL:
			case BINDADD:
			case BINDAGENT:
			case BSDS:
			case CREATEALIAS:
			case CREATEDBA:
			case CREATEDBC:
			case CREATE_SECURE_OBJECT:
			case CREATESG:
			case CREATETMTAB:
			case DATAACCESS:
			case DEBUGSESSION:
			case DISPLAY:
			case MONITOR1:
			case MONITOR2:
			case RECOVER:
			case SQLADM:
			case STOPALL:
			case STOSPACE:
			case SYSADM:
			case SYSCTRL:
			case SYSOPR:
			case TRACE:
			case UNLOAD:
			case WRITE:
			case ABS:
			case ABSVAL:
			case ACOS:
			case ADD_DAYS:
			case ADD_MONTHS:
			case ARRAY_DELETE:
			case ARRAY_FIRST:
			case ARRAY_LAST:
			case ARRAY_NEXT:
			case ARRAY_PRIOR:
			case ARRAY_TRIM:
			case ASCII:
			case ASCII_CHR:
			case ASCIISTR:
			case ASCII_STR:
			case ASIN:
			case ATAN:
			case ATAN2:
			case ATANH:
			case BIGINT:
			case BINARY:
			case BITAND:
			case BITANDNOT:
			case BITNOT:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BTRIM:
			case CARDINALITY:
			case CCSID_ENCODING:
			case CEIL:
			case CEILING:
			case CHAR9:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case CHR:
			case CLOB:
			case COALESCE:
			case COLLATION_KEY:
			case COMPARE_DECFLOAT:
			case COS:
			case COSH:
			case DATE:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFWEEK_ISO:
			case DAYOFYEAR:
			case DAYS_BETWEEN:
			case DBCLOB:
			case DEC:
			case DECFLOAT:
			case DECFLOAT_FORMAT:
			case DECFLOAT_SORTKEY:
			case DECIMAL:
			case DECODE:
			case DECRYPT_BINARY:
			case DECRYPT_BIT:
			case DECRYPT_CHAR:
			case DECRYPT_DATAKEY_BIGINT:
			case DECRYPT_DATAKEY_BIT:
			case DECRYPT_DATAKEY_CLOB:
			case DECRYPT_DATAKEY_DBCLOB:
			case DECRYPT_DATAKEY_DECIMAL:
			case DECRYPT_DATAKEY_INTEGER:
			case DECRYPT_DATAKEY_VARCHAR:
			case DECRYPT_DATAKEY_VARGRAPHIC:
			case DECRYPT_DB:
			case DEGREES:
			case DIFFERENCE:
			case DIGITS:
			case DOUBLE_PRECISION:
			case DSN_XMLVALIDATE:
			case EBCDIC_CHR:
			case EBCDIC_STR:
			case ENCRYPT_DATAKEY:
			case ENCRYPT_TDES:
			case EXP:
			case EXTRACT:
			case FLOAT:
			case FLOOR:
			case GENERATE_UNIQUE:
			case GENERATE_UNIQUE_BINARY:
			case GETHINT:
			case GETVARIABLE:
			case GRAPHIC:
			case GREATEST:
			case HASH:
			case HASH_CRC32:
			case HASH_MD5:
			case HASH_SHA1:
			case HASH_SHA256:
			case HEX:
			case IDENTITY_VAL_LOCAL:
			case IFNULL:
			case INSTR:
			case INT:
			case INTEGER:
			case JULIAN_DAY:
			case LAST_DAY:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LN:
			case LOCATE:
			case LOCATE_IN_STRING:
			case LOG10:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAX:
			case MAX_CARDINALITY:
			case MIDNIGHT_SECONDS:
			case MIN:
			case MINUTE:
			case MOD:
			case MONTHS_BETWEEN:
			case MQREAD:
			case MQREADCLOB:
			case MQRECEIVE:
			case MQRECEIVECLOB:
			case MQSEND:
			case MULTIPLY_ALT:
			case NEXT_DAY:
			case NEXT_MONTH:
			case NORMALIZE_DECFLOAT:
			case NORMALIZE_STRING:
			case NULLIF:
			case NVL:
			case OVERLAY:
			case PACK:
			case POSITION:
			case POSSTR:
			case POW:
			case POWER:
			case QUANTIZE:
			case QUARTER:
			case RADIANS:
			case RAISE_ERROR:
			case RAND:
			case RANDOM:
			case REAL:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REPLACE:
			case RID:
			case ROUND:
			case ROUND_TIMESTAMP:
			case ROWID:
			case RPAD:
			case RTRIM:
			case SCORE:
			case SIGN:
			case SIN:
			case SINH:
			case SMALLINT:
			case SOAPHTTPC:
			case SOAPHTTPNC:
			case SOAPHTTPNV:
			case SOAPHTTPV:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STRIP:
			case STRLEFT:
			case STRPOS:
			case STRRIGHT:
			case SUBSTR:
			case SUBSTRING:
			case TAN:
			case TANH:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIMESTAMP_FORMAT:
			case TIMESTAMP_ISO:
			case TIMESTAMP_TZ:
			case TO_CHAR:
			case TO_CLOB:
			case TO_DATE:
			case TO_NUMBER:
			case TOTALORDER:
			case TO_TIMESTAMP:
			case TRANSLATE:
			case TRIM:
			case TRIM_ARRAY:
			case TRUNC:
			case TRUNC_TIMESTAMP:
			case UCASE:
			case UNICODE:
			case UNICODE_STR:
			case UNISTR:
			case UPPER:
			case VARBINARY:
			case VARCHAR:
			case VARCHAR9:
			case VARCHAR_BIT_FORMAT:
			case VARCHAR_FORMAT:
			case VARGRAPHIC:
			case VERIFY_GROUP_FOR_USER:
			case VERIFY_ROLE_FOR_USER:
			case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
			case WEEK:
			case WEEK_ISO:
			case WRAP:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLCONCAT:
			case XMLDOCUMENT:
			case XMLELEMENT:
			case XMLFOREST:
			case XMLMODIFY:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLSERIALIZE:
			case XMLTEXT:
			case XMLXSROBJECTID:
			case XSLTRANSFORM:
			case CURRENT_ACCELERATOR:
			case CURRENT_APPLICATION_COMPATIBILITY:
			case CURRENT_APPLICATION_ENCODING_SCHEME:
			case CURRENT_CLIENT_ACCTNG:
			case CURRENT_CLIENT_APPLNAME:
			case CURRENT_CLIENT_CORR_TOKEN:
			case CURRENT_CLIENT_USERID:
			case CURRENT_CLIENT_WRKSTNNAME:
			case CURRENT_DATE:
			case CURRENT_DEBUG_MODE:
			case CURRENT_DECFLOAT_ROUNDING_MODE:
			case CURRENT_DEGREE:
			case CURRENT_EXPLAIN_MODE:
			case CURRENT_GET_ACCEL_ARCHIVE:
			case CURRENT_LOCALE_LC_CTYPE:
			case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
			case CURRENT_MEMBER:
			case CURRENT_OPTIMIZATION_HINT:
			case CURRENT_PACKAGE_PATH:
			case CURRENT_PACKAGESET:
			case CURRENT_PATH:
			case CURRENT_PRECISION:
			case CURRENT_QUERY_ACCELERATION:
			case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
			case CURRENT_REFRESH_AGE:
			case CURRENT_ROUTINE_VERSION:
			case CURRENT_RULES:
			case CURRENT_SCHEMA:
			case CURRENT_SERVER:
			case CURRENT_SQLID:
			case CURRENT_TEMPORAL_BUSINESS_TIME:
			case CURRENT_TEMPORAL_SYSTEM_TIME:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_TIME_ZONE:
			case ENCRYPTION_PASSWORD:
			case SESSION_TIME_ZONE:
			case SESSION_USER:
			case USER:
			case ADMIN_TASK_LIST:
			case ADMIN_TASK_OUTPUT:
			case ADMIN_TASK_STATUS:
			case BLOCKING_THREADS:
			case MQREADALL:
			case MQREADALLCLOB:
			case MQRECEIVEALL:
			case MQRECEIVEALLCLOB:
			case XMLTABLE:
			case SQLIDENTIFIER:
				{
				{
				setState(2752);
				collectionID();
				setState(2757);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2753);
					match(COMMA);
					setState(2754);
					collectionID();
					}
					}
					setState(2759);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case SPLAT:
				{
				setState(2760);
				match(SPLAT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2763);
			match(TO);
			setState(2764);
			grantee();
			setState(2769);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2765);
				match(COMMA);
				setState(2766);
				grantee();
				}
				}
				setState(2771);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2773);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2772);
				withGrantOption();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantDatabaseStatementContext extends ParserRuleContext {
		public TerminalNode GRANT() { return getToken(DB2zSQLParser.GRANT, 0); }
		public List<GrantDatabaseAuthorityContext> grantDatabaseAuthority() {
			return getRuleContexts(GrantDatabaseAuthorityContext.class);
		}
		public GrantDatabaseAuthorityContext grantDatabaseAuthority(int i) {
			return getRuleContext(GrantDatabaseAuthorityContext.class,i);
		}
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public TerminalNode DATABASE() { return getToken(DB2zSQLParser.DATABASE, 0); }
		public List<DatabaseNameContext> databaseName() {
			return getRuleContexts(DatabaseNameContext.class);
		}
		public DatabaseNameContext databaseName(int i) {
			return getRuleContext(DatabaseNameContext.class,i);
		}
		public TerminalNode TO() { return getToken(DB2zSQLParser.TO, 0); }
		public List<GranteeContext> grantee() {
			return getRuleContexts(GranteeContext.class);
		}
		public GranteeContext grantee(int i) {
			return getRuleContext(GranteeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public WithGrantOptionContext withGrantOption() {
			return getRuleContext(WithGrantOptionContext.class,0);
		}
		public GrantDatabaseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantDatabaseStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGrantDatabaseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGrantDatabaseStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGrantDatabaseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantDatabaseStatementContext grantDatabaseStatement() throws RecognitionException {
		GrantDatabaseStatementContext _localctx = new GrantDatabaseStatementContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_grantDatabaseStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2775);
			match(GRANT);
			setState(2776);
			grantDatabaseAuthority();
			setState(2781);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2777);
				match(COMMA);
				setState(2778);
				grantDatabaseAuthority();
				}
				}
				setState(2783);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2784);
			match(ON);
			setState(2785);
			match(DATABASE);
			setState(2786);
			databaseName();
			setState(2791);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2787);
				match(COMMA);
				setState(2788);
				databaseName();
				}
				}
				setState(2793);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2794);
			match(TO);
			setState(2795);
			grantee();
			setState(2800);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2796);
				match(COMMA);
				setState(2797);
				grantee();
				}
				}
				setState(2802);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2804);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2803);
				withGrantOption();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantFunctionOrProcedureStatementContext extends ParserRuleContext {
		public TerminalNode GRANT() { return getToken(DB2zSQLParser.GRANT, 0); }
		public TerminalNode EXECUTE() { return getToken(DB2zSQLParser.EXECUTE, 0); }
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public TerminalNode TO() { return getToken(DB2zSQLParser.TO, 0); }
		public List<GranteeContext> grantee() {
			return getRuleContexts(GranteeContext.class);
		}
		public GranteeContext grantee(int i) {
			return getRuleContext(GranteeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public WithGrantOptionContext withGrantOption() {
			return getRuleContext(WithGrantOptionContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(DB2zSQLParser.FUNCTION, 0); }
		public List<FunctionSpecificationContext> functionSpecification() {
			return getRuleContexts(FunctionSpecificationContext.class);
		}
		public FunctionSpecificationContext functionSpecification(int i) {
			return getRuleContext(FunctionSpecificationContext.class,i);
		}
		public TerminalNode SPLAT() { return getToken(DB2zSQLParser.SPLAT, 0); }
		public TerminalNode SPECIFIC() { return getToken(DB2zSQLParser.SPECIFIC, 0); }
		public List<SpecificNameContext> specificName() {
			return getRuleContexts(SpecificNameContext.class);
		}
		public SpecificNameContext specificName(int i) {
			return getRuleContext(SpecificNameContext.class,i);
		}
		public TerminalNode PROCEDURE() { return getToken(DB2zSQLParser.PROCEDURE, 0); }
		public List<ProcedureNameContext> procedureName() {
			return getRuleContexts(ProcedureNameContext.class);
		}
		public ProcedureNameContext procedureName(int i) {
			return getRuleContext(ProcedureNameContext.class,i);
		}
		public GrantFunctionOrProcedureStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantFunctionOrProcedureStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGrantFunctionOrProcedureStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGrantFunctionOrProcedureStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGrantFunctionOrProcedureStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantFunctionOrProcedureStatementContext grantFunctionOrProcedureStatement() throws RecognitionException {
		GrantFunctionOrProcedureStatementContext _localctx = new GrantFunctionOrProcedureStatementContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_grantFunctionOrProcedureStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2806);
			match(GRANT);
			setState(2807);
			match(EXECUTE);
			setState(2808);
			match(ON);
			setState(2842);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,223,_ctx) ) {
			case 1:
				{
				{
				setState(2809);
				match(FUNCTION);
				setState(2810);
				functionSpecification();
				setState(2815);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2811);
					match(COMMA);
					setState(2812);
					functionSpecification();
					}
					}
					setState(2817);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case 2:
				{
				{
				setState(2818);
				match(FUNCTION);
				setState(2819);
				match(SPLAT);
				}
				}
				break;
			case 3:
				{
				{
				setState(2820);
				match(SPECIFIC);
				setState(2821);
				match(FUNCTION);
				setState(2822);
				specificName();
				setState(2827);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2823);
					match(COMMA);
					setState(2824);
					specificName();
					}
					}
					setState(2829);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case 4:
				{
				{
				setState(2830);
				match(PROCEDURE);
				setState(2840);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case INTEGERLITERAL:
				case NUMERICLITERAL:
				case INSTEAD:
				case NEW:
				case NEW_TABLE:
				case OLD_TABLE:
				case REFERENCING:
				case BASED:
				case UPON:
				case ADD:
				case AFTER:
				case ALL:
				case ALLOCATE:
				case ALLOW:
				case ALTER:
				case ALTERAND:
				case ANY:
				case ARRAY:
				case ARRAY_EXISTS:
				case AS:
				case ASENSITIVE:
				case ASSOCIATE:
				case ASUTIME:
				case AT:
				case AUDIT:
				case AUX:
				case AUXILIARY:
				case BEFORE:
				case BEGIN:
				case BETWEEN:
				case BUFFERPOOL:
				case BUFFERPOOLS:
				case BY:
				case CALL:
				case CAPTURE:
				case CASCADED:
				case CASE:
				case CAST:
				case CCSID:
				case CHAR:
				case CHARACTER:
				case CHECK:
				case CLONE:
				case CLOSE:
				case CLUSTER:
				case COLLECTION:
				case COLLID:
				case COLUMN:
				case COMMENT:
				case COMMIT:
				case CONCAT:
				case CONDITION:
				case CONNECT:
				case CONNECTION:
				case CONSTRAINT:
				case CONTAINS:
				case CONTENT:
				case CONTINUE:
				case CREATE:
				case CUBE:
				case CURRENT:
				case CURRENT_LC_CTYPE:
				case CURRVAL:
				case CURSOR:
				case DATA:
				case DATABASE:
				case DAY:
				case DAYS:
				case DBINFO:
				case DECLARE:
				case DEFAULT:
				case DELETE:
				case DESCRIPTOR:
				case DETERMINISTIC:
				case DISABLE:
				case DISALLOW:
				case DISTINCT:
				case DO:
				case DOCUMENT:
				case DOUBLE:
				case DROP:
				case DSSIZE:
				case DYNAMIC:
				case EDITPROC:
				case ELSE:
				case ELSEIF:
				case ENCODING:
				case ENCRYPTION:
				case END:
				case END_EXEC:
				case ENDING:
				case ERASE:
				case ESCAPE:
				case EXCEPT:
				case EXCEPTION:
				case EXEC_SQL:
				case EXECUTE:
				case EXISTS:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case FENCED:
				case FETCH:
				case FIELDPROC:
				case FINAL:
				case FIRST:
				case FOR:
				case FREE:
				case FROM:
				case FULL:
				case FUNCTION:
				case GENERATED:
				case GET:
				case GLOBAL:
				case GO:
				case GOTO:
				case GRANT:
				case GROUP:
				case HANDLER:
				case HAVING:
				case HOLD:
				case HOUR:
				case HOURS:
				case IF:
				case IMMEDIATE:
				case IN:
				case INCLUSIVE:
				case INDEX:
				case INDEXBP:
				case INHERIT:
				case INNER:
				case INOUT:
				case INSENSITIVE:
				case INSERT:
				case INTERSECT:
				case INTO:
				case IS:
				case ISOBID:
				case ITERATE:
				case JAR:
				case JOIN:
				case KEEP:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LAST:
				case LC_CTYPE:
				case LEAVE:
				case LEFT:
				case LIKE:
				case LIMIT:
				case LOCAL:
				case LOCALE:
				case LOCATOR:
				case LOCATORS:
				case LOCK:
				case LOCKMAX:
				case LOCKSIZE:
				case LONG:
				case LOOP:
				case MAINTAINED:
				case MATERIALIZED:
				case MICROSECOND:
				case MICROSECONDS:
				case MODIFIES:
				case MONTH:
				case MONTHS:
				case NEXT:
				case NEXTVAL:
				case NO:
				case NONE:
				case NOT:
				case NULL:
				case NULLS:
				case NUMPARTS:
				case OBID:
				case OF:
				case OFFSET:
				case OLD:
				case ON:
				case OPEN:
				case OPTIMIZATION:
				case OPTIMIZE:
				case OR:
				case ORDER:
				case ORGANIZATION:
				case OUT:
				case OUTER:
				case PACKAGE:
				case PADDED:
				case PARAMETER:
				case PART:
				case PARTITION:
				case PARTITIONED:
				case PARTITIONING:
				case PATH:
				case PERIOD:
				case PIECESIZE:
				case PLAN:
				case PRECISION:
				case PREPARE:
				case PREVVAL:
				case PRIOR:
				case PRIQTY:
				case PRIVILEGES:
				case PROCEDURE:
				case PROGRAM:
				case PSID:
				case PUBLIC:
				case QUERY:
				case QUERYNO:
				case READS:
				case REFERENCES:
				case REFRESH:
				case RELEASE:
				case RENAME:
				case REPEAT:
				case RESIGNAL:
				case RESTRICT:
				case RESULT:
				case RESULT_SET_LOCATOR:
				case RETURN:
				case RETURNS:
				case REVOKE:
				case RIGHT:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUND_CEILING:
				case ROUND_DOWN:
				case ROUND_FLOOR:
				case ROUND_HALF_DOWN:
				case ROUND_HALF_EVEN:
				case ROUND_HALF_UP:
				case ROUND_UP:
				case ROW:
				case ROWSET:
				case RUN:
				case SAVEPOINT:
				case SCHEMA:
				case SCRATCHPAD:
				case SECOND:
				case SECONDS:
				case SECQTY:
				case SECURITY:
				case SELECT:
				case SENSITIVE:
				case SEQUENCE:
				case SET:
				case SIGNAL:
				case SIMPLE:
				case SOME:
				case SOURCE:
				case SPECIFIC:
				case STANDARD:
				case STATEMENT:
				case STATIC:
				case STAY:
				case STOGROUP:
				case STORES:
				case STYLE:
				case SUMMARY:
				case SYNONYM:
				case SYSDATE:
				case SYSTEM:
				case SYSTIMESTAMP:
				case TABLE:
				case TABLESPACE:
				case THEN:
				case TO:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNDO:
				case UNION:
				case UNIQUE:
				case UNTIL:
				case UPDATE:
				case USING:
				case VALIDPROC:
				case VALUE:
				case VALUES:
				case VARIABLE:
				case VARIANT:
				case VCAT:
				case VERSIONING:
				case VIEW:
				case VOLATILE:
				case VOLUMES:
				case WHEN:
				case WHENEVER:
				case WHERE:
				case WHILE:
				case WITH:
				case WLM:
				case XMLCAST:
				case XMLEXISTS:
				case XMLNAMESPACES:
				case YEAR:
				case YEARS:
				case ZONE:
				case AND:
				case ARRAY_AGG:
				case ASC:
				case AVG:
				case BIT:
				case CHANGE:
				case CODEUNITS16:
				case CODEUNITS32:
				case CORR:
				case CORRELATION:
				case COUNT:
				case COUNT_BIG:
				case COVAR:
				case COVARIANCE:
				case COVARIANCE_SAMP:
				case COVAR_POP:
				case COVAR_SAMP:
				case CS:
				case CUME_DIST:
				case DENSE_RANK:
				case DESC:
				case EBCDIC:
				case EXCLUSIVE:
				case FIRST_VALUE:
				case FOLLOWING:
				case GROUPING:
				case IGNORE:
				case INDICATOR:
				case INPUT:
				case ISNULL:
				case LAG:
				case LARGE:
				case LAST_VALUE:
				case LEAD:
				case LISTAGG:
				case LOCKED:
				case LOCKS:
				case MEDIAN:
				case MINUTES:
				case MIXED:
				case NOTNULL:
				case NTH_VALUE:
				case NTILE:
				case NUMERIC:
				case OBJECT:
				case OCTETS:
				case ONLY:
				case OVER:
				case PASSING:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case PERCENT_RANK:
				case PRECEDING:
				case PREVIOUS:
				case RANGE:
				case RANK:
				case RATIO_TO_REPORT:
				case READ:
				case REF:
				case REGR_AVGX:
				case REGR_AVGY:
				case REGR_COUNT:
				case REGR_ICPT:
				case REGR_INTERCEPT:
				case REGR_R2:
				case REGR_SLOPE:
				case REGR_SXX:
				case REGR_SXY:
				case REGR_SYY:
				case RESPECT:
				case ROW_NUMBER:
				case ROWS:
				case RR:
				case RS:
				case SBCS:
				case SELECTIVITY:
				case SETS:
				case SHARE:
				case SKIP_:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case TOKEN:
				case UNBOUNDED:
				case UNPACK:
				case UR:
				case USE:
				case VAR:
				case VARIANCE:
				case VARIANCE_SAMP:
				case VAR_POP:
				case VAR_SAMP:
				case VARYING:
				case WITHOUT:
				case XML:
				case XMLAGG:
				case COLUMNS:
				case SQLID:
				case ORDINALITY:
				case SYSTEM_TIME:
				case BUSINESS_TIME:
				case MULTIPLIER:
				case UNNEST:
				case CROSS:
				case CALLER:
				case CLIENT:
				case POSITIONING:
				case SCROLL:
				case ACTION:
				case ASSEMBLE:
				case C_:
				case CALLED:
				case COBOL:
				case DB2:
				case DEFINER:
				case DISPATCH:
				case ENVIRONMENT:
				case FAILURE:
				case FAILURES:
				case JAVA:
				case MAIN:
				case NAME:
				case OPTIONS:
				case PARALLEL:
				case PLI:
				case REGISTERS:
				case RESIDENT:
				case SECURED:
				case SPECIAL:
				case SQL:
				case STOP:
				case SUB:
				case YES:
				case APPLICATION:
				case CHANGED:
				case COMPATIBILITY:
				case COMPRESS:
				case COPY:
				case FREEPAGE:
				case GBPCACHE:
				case INCLUDE:
				case MAXVALUE:
				case MINVALUE:
				case PCTFREE:
				case REGENERATE:
				case MASK:
				case ENABLE:
				case PERMISSION:
				case ATOMIC:
				case SQLEXCEPTION:
				case MERGE:
				case MATCHED:
				case SQLSTATE:
				case MESSAGE_TEXT:
				case OVERRIDING:
				case PORTION:
				case DB2SQL:
				case DEBUG:
				case GENERAL:
				case MODE_:
				case REXX:
				case CACHE:
				case CYCLE:
				case INCREMENT:
				case RESTART:
				case DATACLAS:
				case MGMTCLAS:
				case REMOVE:
				case STORCLAS:
				case ACCESS:
				case ACTIVATE:
				case ALWAYS:
				case APPEND:
				case ARCHIVE:
				case BUSINESS:
				case CASCADE:
				case CHANGES:
				case CONTROL:
				case DEACTIVATE:
				case DEFERRED:
				case EACH:
				case ENFORCED:
				case EXTRA:
				case FOREIGN:
				case HIDDEN_:
				case HISTORY:
				case ID:
				case IDENTITY:
				case IMPLICITLY:
				case INITIALLY:
				case INLINE:
				case OPERATION:
				case ORGANIZE:
				case OVERLAPS:
				case PACKAGE_NAME:
				case PACKAGE_SCHEMA:
				case PACKAGE_VERSION:
				case PRIMARY:
				case RESET:
				case ROTATE:
				case START:
				case SYSIBM:
				case TRANSACTION:
				case XMLSCHEMA:
				case ELEMENT:
				case URL:
				case NAMESPACE:
				case LOCATION:
				case SYSXSR:
				case ALGORITHM:
				case FIXEDLENGTH:
				case HUFFMAN:
				case LOB:
				case LOG:
				case LOGGED:
				case MAXPARTITIONS:
				case MAXROWS:
				case MEMBER:
				case MOVE:
				case PAGE:
				case PAGENUM:
				case PENDING:
				case RELATIVE:
				case SEGSIZE:
				case TRACKMOD:
				case ADDRESS:
				case ATTRIBUTES:
				case AUTHENTICATION:
				case AUTHID:
				case CONTEXT:
				case JOBNAME:
				case OWNER:
				case PROFILE:
				case QUALIFIER:
				case SERVAUTH:
				case TRUSTED:
				case SECTION:
				case ACTIVE:
				case VERSION:
				case ALIAS:
				case WORK:
				case WORKFILE:
				case SYSDEFLT:
				case NULTERM:
				case STRUCTURE:
				case GENERIC:
				case TEMPORARY:
				case DEFER:
				case DEFINE:
				case EXCLUDE:
				case GENERATE:
				case KEYS:
				case XMLPATTERN:
				case SIZE:
				case EVERY:
				case ABSOLUTE:
				case ACCELERATOR:
				case EXCLUDING:
				case INCLUDING:
				case DEFAULTS:
				case MODIFIERS:
				case OPTION:
				case PRESERVE:
				case BOTH:
				case DESCRIBE:
				case LABELS:
				case NAMES:
				case OUTPUT:
				case EXCHANGE:
				case STABILIZED:
				case STMTCACHE:
				case STMTID:
				case STMTTOKEN:
				case STARTING:
				case CATALOG_NAME:
				case CONDITION_NUMBER:
				case CURSOR_NAME:
				case DB2_AUTHENTICATION_TYPE:
				case DB2_AUTHORIZATION_ID:
				case DB2_CONNECTION_STATE:
				case DB2_CONNECTION_STATUS:
				case DB2_ENCRYPTION_TYPE:
				case DB2_ERROR_CODE1:
				case DB2_ERROR_CODE2:
				case DB2_ERROR_CODE3:
				case DB2_ERROR_CODE4:
				case DB2_GET_DIAGNOSTICS_DIAGNOSTICS:
				case DB2_INTERNAL_ERROR_POINTER:
				case DB2_LAST_ROW:
				case DB2_LINE_NUMBER:
				case DB2_MESSAGE_ID:
				case DB2_MODULE_DETECTING_ERROR:
				case DB2_NUMBER_PARAMETER_MARKERS:
				case DB2_NUMBER_RESULT_SETS:
				case DB2_NUMBER_ROWS:
				case DB2_ORDINAL_TOKEN_:
				case DB2_PRODUCT_ID:
				case DB2_REASON_CODE:
				case DB2_RETURNED_SQLCODE:
				case DB2_RETURN_STATUS:
				case DB2_ROW_NUMBER:
				case DB2_SERVER_CLASS_NAME:
				case DB2_SQL_ATTR_CURSOR_HOLD:
				case DB2_SQL_ATTR_CURSOR_ROWSET:
				case DB2_SQL_ATTR_CURSOR_SCROLLABLE:
				case DB2_SQL_ATTR_CURSOR_SENSITIVITY:
				case DB2_SQL_ATTR_CURSOR_TYPE:
				case DB2_SQLERRD1:
				case DB2_SQLERRD2:
				case DB2_SQLERRD3:
				case DB2_SQLERRD4:
				case DB2_SQLERRD5:
				case DB2_SQLERRD6:
				case DB2_SQLERRD_SET:
				case DB2_SQL_NESTING_LEVEL:
				case DB2_TOKEN_COUNT:
				case DIAGNOSTICS:
				case MORE_:
				case NUMBER:
				case RETURNED_SQLSTATE:
				case ROW_COUNT:
				case SERVER_NAME:
				case STACKED:
				case CREATETAB:
				case CREATETS:
				case DBADM:
				case DBCTRL:
				case DBMAINT:
				case DISPLAYDB:
				case IMAGCOPY:
				case LOAD:
				case PACKADM:
				case RECOVERDB:
				case REORG:
				case REPAIR:
				case STARTDB:
				case STATS:
				case STOPDB:
				case BIND:
				case ALTERIN:
				case CREATEIN:
				case DROPIN:
				case USAGE:
				case ACCESSCTRL:
				case BINDADD:
				case BINDAGENT:
				case BSDS:
				case CREATEALIAS:
				case CREATEDBA:
				case CREATEDBC:
				case CREATE_SECURE_OBJECT:
				case CREATESG:
				case CREATETMTAB:
				case DATAACCESS:
				case DEBUGSESSION:
				case DISPLAY:
				case MONITOR1:
				case MONITOR2:
				case RECOVER:
				case SQLADM:
				case STOPALL:
				case STOSPACE:
				case SYSADM:
				case SYSCTRL:
				case SYSOPR:
				case TRACE:
				case UNLOAD:
				case WRITE:
				case ABS:
				case ABSVAL:
				case ACOS:
				case ADD_DAYS:
				case ADD_MONTHS:
				case ARRAY_DELETE:
				case ARRAY_FIRST:
				case ARRAY_LAST:
				case ARRAY_NEXT:
				case ARRAY_PRIOR:
				case ARRAY_TRIM:
				case ASCII:
				case ASCII_CHR:
				case ASCIISTR:
				case ASCII_STR:
				case ASIN:
				case ATAN:
				case ATAN2:
				case ATANH:
				case BIGINT:
				case BINARY:
				case BITAND:
				case BITANDNOT:
				case BITNOT:
				case BITOR:
				case BITXOR:
				case BLOB:
				case BTRIM:
				case CARDINALITY:
				case CCSID_ENCODING:
				case CEIL:
				case CEILING:
				case CHAR9:
				case CHARACTER_LENGTH:
				case CHAR_LENGTH:
				case CHR:
				case CLOB:
				case COALESCE:
				case COLLATION_KEY:
				case COMPARE_DECFLOAT:
				case COS:
				case COSH:
				case DATE:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFWEEK_ISO:
				case DAYOFYEAR:
				case DAYS_BETWEEN:
				case DBCLOB:
				case DEC:
				case DECFLOAT:
				case DECFLOAT_FORMAT:
				case DECFLOAT_SORTKEY:
				case DECIMAL:
				case DECODE:
				case DECRYPT_BINARY:
				case DECRYPT_BIT:
				case DECRYPT_CHAR:
				case DECRYPT_DATAKEY_BIGINT:
				case DECRYPT_DATAKEY_BIT:
				case DECRYPT_DATAKEY_CLOB:
				case DECRYPT_DATAKEY_DBCLOB:
				case DECRYPT_DATAKEY_DECIMAL:
				case DECRYPT_DATAKEY_INTEGER:
				case DECRYPT_DATAKEY_VARCHAR:
				case DECRYPT_DATAKEY_VARGRAPHIC:
				case DECRYPT_DB:
				case DEGREES:
				case DIFFERENCE:
				case DIGITS:
				case DOUBLE_PRECISION:
				case DSN_XMLVALIDATE:
				case EBCDIC_CHR:
				case EBCDIC_STR:
				case ENCRYPT_DATAKEY:
				case ENCRYPT_TDES:
				case EXP:
				case EXTRACT:
				case FLOAT:
				case FLOOR:
				case GENERATE_UNIQUE:
				case GENERATE_UNIQUE_BINARY:
				case GETHINT:
				case GETVARIABLE:
				case GRAPHIC:
				case GREATEST:
				case HASH:
				case HASH_CRC32:
				case HASH_MD5:
				case HASH_SHA1:
				case HASH_SHA256:
				case HEX:
				case IDENTITY_VAL_LOCAL:
				case IFNULL:
				case INSTR:
				case INT:
				case INTEGER:
				case JULIAN_DAY:
				case LAST_DAY:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LN:
				case LOCATE:
				case LOCATE_IN_STRING:
				case LOG10:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAX:
				case MAX_CARDINALITY:
				case MIDNIGHT_SECONDS:
				case MIN:
				case MINUTE:
				case MOD:
				case MONTHS_BETWEEN:
				case MQREAD:
				case MQREADCLOB:
				case MQRECEIVE:
				case MQRECEIVECLOB:
				case MQSEND:
				case MULTIPLY_ALT:
				case NEXT_DAY:
				case NEXT_MONTH:
				case NORMALIZE_DECFLOAT:
				case NORMALIZE_STRING:
				case NULLIF:
				case NVL:
				case OVERLAY:
				case PACK:
				case POSITION:
				case POSSTR:
				case POW:
				case POWER:
				case QUANTIZE:
				case QUARTER:
				case RADIANS:
				case RAISE_ERROR:
				case RAND:
				case RANDOM:
				case REAL:
				case REGEXP_COUNT:
				case REGEXP_INSTR:
				case REGEXP_LIKE:
				case REGEXP_REPLACE:
				case REGEXP_SUBSTR:
				case REPLACE:
				case RID:
				case ROUND:
				case ROUND_TIMESTAMP:
				case ROWID:
				case RPAD:
				case RTRIM:
				case SCORE:
				case SIGN:
				case SIN:
				case SINH:
				case SMALLINT:
				case SOAPHTTPC:
				case SOAPHTTPNC:
				case SOAPHTTPNV:
				case SOAPHTTPV:
				case SOUNDEX:
				case SPACE:
				case SQRT:
				case STRIP:
				case STRLEFT:
				case STRPOS:
				case STRRIGHT:
				case SUBSTR:
				case SUBSTRING:
				case TAN:
				case TANH:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIMESTAMP_FORMAT:
				case TIMESTAMP_ISO:
				case TIMESTAMP_TZ:
				case TO_CHAR:
				case TO_CLOB:
				case TO_DATE:
				case TO_NUMBER:
				case TOTALORDER:
				case TO_TIMESTAMP:
				case TRANSLATE:
				case TRIM:
				case TRIM_ARRAY:
				case TRUNC:
				case TRUNC_TIMESTAMP:
				case UCASE:
				case UNICODE:
				case UNICODE_STR:
				case UNISTR:
				case UPPER:
				case VARBINARY:
				case VARCHAR:
				case VARCHAR9:
				case VARCHAR_BIT_FORMAT:
				case VARCHAR_FORMAT:
				case VARGRAPHIC:
				case VERIFY_GROUP_FOR_USER:
				case VERIFY_ROLE_FOR_USER:
				case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
				case WEEK:
				case WEEK_ISO:
				case WRAP:
				case XMLATTRIBUTES:
				case XMLCOMMENT:
				case XMLCONCAT:
				case XMLDOCUMENT:
				case XMLELEMENT:
				case XMLFOREST:
				case XMLMODIFY:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLSERIALIZE:
				case XMLTEXT:
				case XMLXSROBJECTID:
				case XSLTRANSFORM:
				case CURRENT_ACCELERATOR:
				case CURRENT_APPLICATION_COMPATIBILITY:
				case CURRENT_APPLICATION_ENCODING_SCHEME:
				case CURRENT_CLIENT_ACCTNG:
				case CURRENT_CLIENT_APPLNAME:
				case CURRENT_CLIENT_CORR_TOKEN:
				case CURRENT_CLIENT_USERID:
				case CURRENT_CLIENT_WRKSTNNAME:
				case CURRENT_DATE:
				case CURRENT_DEBUG_MODE:
				case CURRENT_DECFLOAT_ROUNDING_MODE:
				case CURRENT_DEGREE:
				case CURRENT_EXPLAIN_MODE:
				case CURRENT_GET_ACCEL_ARCHIVE:
				case CURRENT_LOCALE_LC_CTYPE:
				case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
				case CURRENT_MEMBER:
				case CURRENT_OPTIMIZATION_HINT:
				case CURRENT_PACKAGE_PATH:
				case CURRENT_PACKAGESET:
				case CURRENT_PATH:
				case CURRENT_PRECISION:
				case CURRENT_QUERY_ACCELERATION:
				case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
				case CURRENT_REFRESH_AGE:
				case CURRENT_ROUTINE_VERSION:
				case CURRENT_RULES:
				case CURRENT_SCHEMA:
				case CURRENT_SERVER:
				case CURRENT_SQLID:
				case CURRENT_TEMPORAL_BUSINESS_TIME:
				case CURRENT_TEMPORAL_SYSTEM_TIME:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case CURRENT_TIME_ZONE:
				case ENCRYPTION_PASSWORD:
				case SESSION_TIME_ZONE:
				case SESSION_USER:
				case USER:
				case ADMIN_TASK_LIST:
				case ADMIN_TASK_OUTPUT:
				case ADMIN_TASK_STATUS:
				case BLOCKING_THREADS:
				case MQREADALL:
				case MQREADALLCLOB:
				case MQRECEIVEALL:
				case MQRECEIVEALLCLOB:
				case XMLTABLE:
				case SQLIDENTIFIER:
					{
					{
					setState(2831);
					procedureName();
					setState(2836);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2832);
						match(COMMA);
						setState(2833);
						procedureName();
						}
						}
						setState(2838);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					}
					break;
				case SPLAT:
					{
					setState(2839);
					match(SPLAT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			}
			setState(2844);
			match(TO);
			setState(2845);
			grantee();
			setState(2850);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2846);
				match(COMMA);
				setState(2847);
				grantee();
				}
				}
				setState(2852);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2854);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2853);
				withGrantOption();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantPackageStatementContext extends ParserRuleContext {
		public TerminalNode GRANT() { return getToken(DB2zSQLParser.GRANT, 0); }
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public TerminalNode PACKAGE() { return getToken(DB2zSQLParser.PACKAGE, 0); }
		public List<PackageSpecificationContext> packageSpecification() {
			return getRuleContexts(PackageSpecificationContext.class);
		}
		public PackageSpecificationContext packageSpecification(int i) {
			return getRuleContext(PackageSpecificationContext.class,i);
		}
		public TerminalNode TO() { return getToken(DB2zSQLParser.TO, 0); }
		public List<GranteeContext> grantee() {
			return getRuleContexts(GranteeContext.class);
		}
		public GranteeContext grantee(int i) {
			return getRuleContext(GranteeContext.class,i);
		}
		public TerminalNode ALL() { return getToken(DB2zSQLParser.ALL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public WithGrantOptionContext withGrantOption() {
			return getRuleContext(WithGrantOptionContext.class,0);
		}
		public List<GrantPackageAuthorityContext> grantPackageAuthority() {
			return getRuleContexts(GrantPackageAuthorityContext.class);
		}
		public GrantPackageAuthorityContext grantPackageAuthority(int i) {
			return getRuleContext(GrantPackageAuthorityContext.class,i);
		}
		public GrantPackageStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantPackageStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGrantPackageStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGrantPackageStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGrantPackageStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantPackageStatementContext grantPackageStatement() throws RecognitionException {
		GrantPackageStatementContext _localctx = new GrantPackageStatementContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_grantPackageStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2856);
			match(GRANT);
			setState(2866);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				{
				setState(2857);
				match(ALL);
				}
				break;
			case EXECUTE:
			case RUN:
			case COPY:
			case BIND:
				{
				{
				setState(2858);
				grantPackageAuthority();
				setState(2863);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2859);
					match(COMMA);
					setState(2860);
					grantPackageAuthority();
					}
					}
					setState(2865);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2868);
			match(ON);
			setState(2869);
			match(PACKAGE);
			setState(2870);
			packageSpecification();
			setState(2875);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2871);
				match(COMMA);
				setState(2872);
				packageSpecification();
				}
				}
				setState(2877);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2878);
			match(TO);
			setState(2879);
			grantee();
			setState(2884);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2880);
				match(COMMA);
				setState(2881);
				grantee();
				}
				}
				setState(2886);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2888);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2887);
				withGrantOption();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantPlanStatementContext extends ParserRuleContext {
		public TerminalNode GRANT() { return getToken(DB2zSQLParser.GRANT, 0); }
		public List<GrantPlanAuthorityContext> grantPlanAuthority() {
			return getRuleContexts(GrantPlanAuthorityContext.class);
		}
		public GrantPlanAuthorityContext grantPlanAuthority(int i) {
			return getRuleContext(GrantPlanAuthorityContext.class,i);
		}
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public TerminalNode PLAN() { return getToken(DB2zSQLParser.PLAN, 0); }
		public List<PlanNameContext> planName() {
			return getRuleContexts(PlanNameContext.class);
		}
		public PlanNameContext planName(int i) {
			return getRuleContext(PlanNameContext.class,i);
		}
		public TerminalNode TO() { return getToken(DB2zSQLParser.TO, 0); }
		public List<GranteeContext> grantee() {
			return getRuleContexts(GranteeContext.class);
		}
		public GranteeContext grantee(int i) {
			return getRuleContext(GranteeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public WithGrantOptionContext withGrantOption() {
			return getRuleContext(WithGrantOptionContext.class,0);
		}
		public GrantPlanStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantPlanStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGrantPlanStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGrantPlanStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGrantPlanStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantPlanStatementContext grantPlanStatement() throws RecognitionException {
		GrantPlanStatementContext _localctx = new GrantPlanStatementContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_grantPlanStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2890);
			match(GRANT);
			setState(2891);
			grantPlanAuthority();
			setState(2896);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2892);
				match(COMMA);
				setState(2893);
				grantPlanAuthority();
				}
				}
				setState(2898);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2899);
			match(ON);
			setState(2900);
			match(PLAN);
			setState(2901);
			planName();
			setState(2906);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2902);
				match(COMMA);
				setState(2903);
				planName();
				}
				}
				setState(2908);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2909);
			match(TO);
			setState(2910);
			grantee();
			setState(2915);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2911);
				match(COMMA);
				setState(2912);
				grantee();
				}
				}
				setState(2917);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2919);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2918);
				withGrantOption();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantSchemaStatementContext extends ParserRuleContext {
		public TerminalNode GRANT() { return getToken(DB2zSQLParser.GRANT, 0); }
		public List<GrantSchemaAuthorityContext> grantSchemaAuthority() {
			return getRuleContexts(GrantSchemaAuthorityContext.class);
		}
		public GrantSchemaAuthorityContext grantSchemaAuthority(int i) {
			return getRuleContext(GrantSchemaAuthorityContext.class,i);
		}
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public TerminalNode SCHEMA() { return getToken(DB2zSQLParser.SCHEMA, 0); }
		public TerminalNode TO() { return getToken(DB2zSQLParser.TO, 0); }
		public List<GranteeContext> grantee() {
			return getRuleContexts(GranteeContext.class);
		}
		public GranteeContext grantee(int i) {
			return getRuleContext(GranteeContext.class,i);
		}
		public TerminalNode SPLAT() { return getToken(DB2zSQLParser.SPLAT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public WithGrantOptionContext withGrantOption() {
			return getRuleContext(WithGrantOptionContext.class,0);
		}
		public List<SchemaNameContext> schemaName() {
			return getRuleContexts(SchemaNameContext.class);
		}
		public SchemaNameContext schemaName(int i) {
			return getRuleContext(SchemaNameContext.class,i);
		}
		public GrantSchemaStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantSchemaStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGrantSchemaStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGrantSchemaStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGrantSchemaStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantSchemaStatementContext grantSchemaStatement() throws RecognitionException {
		GrantSchemaStatementContext _localctx = new GrantSchemaStatementContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_grantSchemaStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2921);
			match(GRANT);
			setState(2922);
			grantSchemaAuthority();
			setState(2927);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2923);
				match(COMMA);
				setState(2924);
				grantSchemaAuthority();
				}
				}
				setState(2929);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2930);
			match(ON);
			setState(2931);
			match(SCHEMA);
			setState(2941);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SPLAT:
				{
				setState(2932);
				match(SPLAT);
				}
				break;
			case INSTEAD:
			case NEW:
			case NEW_TABLE:
			case OLD_TABLE:
			case REFERENCING:
			case BASED:
			case UPON:
			case ADD:
			case AFTER:
			case ALL:
			case ALLOCATE:
			case ALLOW:
			case ALTER:
			case ALTERAND:
			case ANY:
			case ARRAY:
			case ARRAY_EXISTS:
			case AS:
			case ASENSITIVE:
			case ASSOCIATE:
			case ASUTIME:
			case AT:
			case AUDIT:
			case AUX:
			case AUXILIARY:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BUFFERPOOL:
			case BUFFERPOOLS:
			case BY:
			case CALL:
			case CAPTURE:
			case CASCADED:
			case CASE:
			case CAST:
			case CCSID:
			case CHAR:
			case CHARACTER:
			case CHECK:
			case CLONE:
			case CLOSE:
			case CLUSTER:
			case COLLECTION:
			case COLLID:
			case COLUMN:
			case COMMENT:
			case COMMIT:
			case CONCAT:
			case CONDITION:
			case CONNECT:
			case CONNECTION:
			case CONSTRAINT:
			case CONTAINS:
			case CONTENT:
			case CONTINUE:
			case CREATE:
			case CUBE:
			case CURRENT:
			case CURRENT_LC_CTYPE:
			case CURRVAL:
			case CURSOR:
			case DATA:
			case DATABASE:
			case DAY:
			case DAYS:
			case DBINFO:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DISABLE:
			case DISALLOW:
			case DISTINCT:
			case DO:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSSIZE:
			case DYNAMIC:
			case EDITPROC:
			case ELSE:
			case ELSEIF:
			case ENCODING:
			case ENCRYPTION:
			case END:
			case END_EXEC:
			case ENDING:
			case ERASE:
			case ESCAPE:
			case EXCEPT:
			case EXCEPTION:
			case EXEC_SQL:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case FENCED:
			case FETCH:
			case FIELDPROC:
			case FINAL:
			case FIRST:
			case FOR:
			case FREE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANT:
			case GROUP:
			case HANDLER:
			case HAVING:
			case HOLD:
			case HOUR:
			case HOURS:
			case IF:
			case IMMEDIATE:
			case IN:
			case INCLUSIVE:
			case INDEX:
			case INDEXBP:
			case INHERIT:
			case INNER:
			case INOUT:
			case INSENSITIVE:
			case INSERT:
			case INTERSECT:
			case INTO:
			case IS:
			case ISOBID:
			case ITERATE:
			case JAR:
			case JOIN:
			case KEEP:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LAST:
			case LC_CTYPE:
			case LEAVE:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOCALE:
			case LOCATOR:
			case LOCATORS:
			case LOCK:
			case LOCKMAX:
			case LOCKSIZE:
			case LONG:
			case LOOP:
			case MAINTAINED:
			case MATERIALIZED:
			case MICROSECOND:
			case MICROSECONDS:
			case MODIFIES:
			case MONTH:
			case MONTHS:
			case NEXT:
			case NEXTVAL:
			case NO:
			case NONE:
			case NOT:
			case NULL:
			case NULLS:
			case NUMPARTS:
			case OBID:
			case OF:
			case OFFSET:
			case OLD:
			case ON:
			case OPEN:
			case OPTIMIZATION:
			case OPTIMIZE:
			case OR:
			case ORDER:
			case ORGANIZATION:
			case OUT:
			case OUTER:
			case PACKAGE:
			case PADDED:
			case PARAMETER:
			case PART:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONING:
			case PATH:
			case PERIOD:
			case PIECESIZE:
			case PLAN:
			case PRECISION:
			case PREPARE:
			case PREVVAL:
			case PRIOR:
			case PRIQTY:
			case PRIVILEGES:
			case PROCEDURE:
			case PROGRAM:
			case PSID:
			case PUBLIC:
			case QUERY:
			case QUERYNO:
			case READS:
			case REFERENCES:
			case REFRESH:
			case RELEASE:
			case RENAME:
			case REPEAT:
			case RESIGNAL:
			case RESTRICT:
			case RESULT:
			case RESULT_SET_LOCATOR:
			case RETURN:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUND_CEILING:
			case ROUND_DOWN:
			case ROUND_FLOOR:
			case ROUND_HALF_DOWN:
			case ROUND_HALF_EVEN:
			case ROUND_HALF_UP:
			case ROUND_UP:
			case ROW:
			case ROWSET:
			case RUN:
			case SAVEPOINT:
			case SCHEMA:
			case SCRATCHPAD:
			case SECOND:
			case SECONDS:
			case SECQTY:
			case SECURITY:
			case SELECT:
			case SENSITIVE:
			case SEQUENCE:
			case SET:
			case SIGNAL:
			case SIMPLE:
			case SOME:
			case SOURCE:
			case SPECIFIC:
			case STANDARD:
			case STATEMENT:
			case STATIC:
			case STAY:
			case STOGROUP:
			case STORES:
			case STYLE:
			case SUMMARY:
			case SYNONYM:
			case SYSDATE:
			case SYSTEM:
			case SYSTIMESTAMP:
			case TABLE:
			case TABLESPACE:
			case THEN:
			case TO:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNDO:
			case UNION:
			case UNIQUE:
			case UNTIL:
			case UPDATE:
			case USING:
			case VALIDPROC:
			case VALUE:
			case VALUES:
			case VARIABLE:
			case VARIANT:
			case VCAT:
			case VERSIONING:
			case VIEW:
			case VOLATILE:
			case VOLUMES:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WLM:
			case XMLCAST:
			case XMLEXISTS:
			case XMLNAMESPACES:
			case YEAR:
			case YEARS:
			case ZONE:
			case AND:
			case ARRAY_AGG:
			case ASC:
			case AVG:
			case BIT:
			case CHANGE:
			case CODEUNITS16:
			case CODEUNITS32:
			case CORR:
			case CORRELATION:
			case COUNT:
			case COUNT_BIG:
			case COVAR:
			case COVARIANCE:
			case COVARIANCE_SAMP:
			case COVAR_POP:
			case COVAR_SAMP:
			case CS:
			case CUME_DIST:
			case DENSE_RANK:
			case DESC:
			case EBCDIC:
			case EXCLUSIVE:
			case FIRST_VALUE:
			case FOLLOWING:
			case GROUPING:
			case IGNORE:
			case INDICATOR:
			case INPUT:
			case ISNULL:
			case LAG:
			case LARGE:
			case LAST_VALUE:
			case LEAD:
			case LISTAGG:
			case LOCKED:
			case LOCKS:
			case MEDIAN:
			case MINUTES:
			case MIXED:
			case NOTNULL:
			case NTH_VALUE:
			case NTILE:
			case NUMERIC:
			case OBJECT:
			case OCTETS:
			case ONLY:
			case OVER:
			case PASSING:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PERCENT_RANK:
			case PRECEDING:
			case PREVIOUS:
			case RANGE:
			case RANK:
			case RATIO_TO_REPORT:
			case READ:
			case REF:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_ICPT:
			case REGR_INTERCEPT:
			case REGR_R2:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case RESPECT:
			case ROW_NUMBER:
			case ROWS:
			case RR:
			case RS:
			case SBCS:
			case SELECTIVITY:
			case SETS:
			case SHARE:
			case SKIP_:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case TOKEN:
			case UNBOUNDED:
			case UNPACK:
			case UR:
			case USE:
			case VAR:
			case VARIANCE:
			case VARIANCE_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARYING:
			case WITHOUT:
			case XML:
			case XMLAGG:
			case COLUMNS:
			case SQLID:
			case ORDINALITY:
			case SYSTEM_TIME:
			case BUSINESS_TIME:
			case MULTIPLIER:
			case UNNEST:
			case CROSS:
			case CALLER:
			case CLIENT:
			case POSITIONING:
			case SCROLL:
			case ACTION:
			case ASSEMBLE:
			case C_:
			case CALLED:
			case COBOL:
			case DB2:
			case DEFINER:
			case DISPATCH:
			case ENVIRONMENT:
			case FAILURE:
			case FAILURES:
			case JAVA:
			case MAIN:
			case NAME:
			case OPTIONS:
			case PARALLEL:
			case PLI:
			case REGISTERS:
			case RESIDENT:
			case SECURED:
			case SPECIAL:
			case SQL:
			case STOP:
			case SUB:
			case YES:
			case APPLICATION:
			case CHANGED:
			case COMPATIBILITY:
			case COMPRESS:
			case COPY:
			case FREEPAGE:
			case GBPCACHE:
			case INCLUDE:
			case MAXVALUE:
			case MINVALUE:
			case PCTFREE:
			case REGENERATE:
			case MASK:
			case ENABLE:
			case PERMISSION:
			case ATOMIC:
			case SQLEXCEPTION:
			case MERGE:
			case MATCHED:
			case SQLSTATE:
			case MESSAGE_TEXT:
			case OVERRIDING:
			case PORTION:
			case DB2SQL:
			case DEBUG:
			case GENERAL:
			case MODE_:
			case REXX:
			case CACHE:
			case CYCLE:
			case INCREMENT:
			case RESTART:
			case DATACLAS:
			case MGMTCLAS:
			case REMOVE:
			case STORCLAS:
			case ACCESS:
			case ACTIVATE:
			case ALWAYS:
			case APPEND:
			case ARCHIVE:
			case BUSINESS:
			case CASCADE:
			case CHANGES:
			case CONTROL:
			case DEACTIVATE:
			case DEFERRED:
			case EACH:
			case ENFORCED:
			case EXTRA:
			case FOREIGN:
			case HIDDEN_:
			case HISTORY:
			case ID:
			case IDENTITY:
			case IMPLICITLY:
			case INITIALLY:
			case INLINE:
			case OPERATION:
			case ORGANIZE:
			case OVERLAPS:
			case PACKAGE_NAME:
			case PACKAGE_SCHEMA:
			case PACKAGE_VERSION:
			case PRIMARY:
			case RESET:
			case ROTATE:
			case START:
			case SYSIBM:
			case TRANSACTION:
			case XMLSCHEMA:
			case ELEMENT:
			case URL:
			case NAMESPACE:
			case LOCATION:
			case SYSXSR:
			case ALGORITHM:
			case FIXEDLENGTH:
			case HUFFMAN:
			case LOB:
			case LOG:
			case LOGGED:
			case MAXPARTITIONS:
			case MAXROWS:
			case MEMBER:
			case MOVE:
			case PAGE:
			case PAGENUM:
			case PENDING:
			case RELATIVE:
			case SEGSIZE:
			case TRACKMOD:
			case ADDRESS:
			case ATTRIBUTES:
			case AUTHENTICATION:
			case AUTHID:
			case CONTEXT:
			case JOBNAME:
			case OWNER:
			case PROFILE:
			case QUALIFIER:
			case SERVAUTH:
			case TRUSTED:
			case SECTION:
			case ACTIVE:
			case VERSION:
			case ALIAS:
			case WORK:
			case WORKFILE:
			case SYSDEFLT:
			case NULTERM:
			case STRUCTURE:
			case GENERIC:
			case TEMPORARY:
			case DEFER:
			case DEFINE:
			case EXCLUDE:
			case GENERATE:
			case KEYS:
			case XMLPATTERN:
			case SIZE:
			case EVERY:
			case ABSOLUTE:
			case ACCELERATOR:
			case EXCLUDING:
			case INCLUDING:
			case DEFAULTS:
			case MODIFIERS:
			case OPTION:
			case PRESERVE:
			case BOTH:
			case DESCRIBE:
			case LABELS:
			case NAMES:
			case OUTPUT:
			case EXCHANGE:
			case STABILIZED:
			case STMTCACHE:
			case STMTID:
			case STMTTOKEN:
			case STARTING:
			case CATALOG_NAME:
			case CONDITION_NUMBER:
			case CURSOR_NAME:
			case DB2_AUTHENTICATION_TYPE:
			case DB2_AUTHORIZATION_ID:
			case DB2_CONNECTION_STATE:
			case DB2_CONNECTION_STATUS:
			case DB2_ENCRYPTION_TYPE:
			case DB2_ERROR_CODE1:
			case DB2_ERROR_CODE2:
			case DB2_ERROR_CODE3:
			case DB2_ERROR_CODE4:
			case DB2_GET_DIAGNOSTICS_DIAGNOSTICS:
			case DB2_INTERNAL_ERROR_POINTER:
			case DB2_LAST_ROW:
			case DB2_LINE_NUMBER:
			case DB2_MESSAGE_ID:
			case DB2_MODULE_DETECTING_ERROR:
			case DB2_NUMBER_PARAMETER_MARKERS:
			case DB2_NUMBER_RESULT_SETS:
			case DB2_NUMBER_ROWS:
			case DB2_ORDINAL_TOKEN_:
			case DB2_PRODUCT_ID:
			case DB2_REASON_CODE:
			case DB2_RETURNED_SQLCODE:
			case DB2_RETURN_STATUS:
			case DB2_ROW_NUMBER:
			case DB2_SERVER_CLASS_NAME:
			case DB2_SQL_ATTR_CURSOR_HOLD:
			case DB2_SQL_ATTR_CURSOR_ROWSET:
			case DB2_SQL_ATTR_CURSOR_SCROLLABLE:
			case DB2_SQL_ATTR_CURSOR_SENSITIVITY:
			case DB2_SQL_ATTR_CURSOR_TYPE:
			case DB2_SQLERRD1:
			case DB2_SQLERRD2:
			case DB2_SQLERRD3:
			case DB2_SQLERRD4:
			case DB2_SQLERRD5:
			case DB2_SQLERRD6:
			case DB2_SQLERRD_SET:
			case DB2_SQL_NESTING_LEVEL:
			case DB2_TOKEN_COUNT:
			case DIAGNOSTICS:
			case MORE_:
			case NUMBER:
			case RETURNED_SQLSTATE:
			case ROW_COUNT:
			case SERVER_NAME:
			case STACKED:
			case CREATETAB:
			case CREATETS:
			case DBADM:
			case DBCTRL:
			case DBMAINT:
			case DISPLAYDB:
			case IMAGCOPY:
			case LOAD:
			case PACKADM:
			case RECOVERDB:
			case REORG:
			case REPAIR:
			case STARTDB:
			case STATS:
			case STOPDB:
			case BIND:
			case ALTERIN:
			case CREATEIN:
			case DROPIN:
			case USAGE:
			case ACCESSCTRL:
			case BINDADD:
			case BINDAGENT:
			case BSDS:
			case CREATEALIAS:
			case CREATEDBA:
			case CREATEDBC:
			case CREATE_SECURE_OBJECT:
			case CREATESG:
			case CREATETMTAB:
			case DATAACCESS:
			case DEBUGSESSION:
			case DISPLAY:
			case MONITOR1:
			case MONITOR2:
			case RECOVER:
			case SQLADM:
			case STOPALL:
			case STOSPACE:
			case SYSADM:
			case SYSCTRL:
			case SYSOPR:
			case TRACE:
			case UNLOAD:
			case WRITE:
			case ABS:
			case ABSVAL:
			case ACOS:
			case ADD_DAYS:
			case ADD_MONTHS:
			case ARRAY_DELETE:
			case ARRAY_FIRST:
			case ARRAY_LAST:
			case ARRAY_NEXT:
			case ARRAY_PRIOR:
			case ARRAY_TRIM:
			case ASCII:
			case ASCII_CHR:
			case ASCIISTR:
			case ASCII_STR:
			case ASIN:
			case ATAN:
			case ATAN2:
			case ATANH:
			case BIGINT:
			case BINARY:
			case BITAND:
			case BITANDNOT:
			case BITNOT:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BTRIM:
			case CARDINALITY:
			case CCSID_ENCODING:
			case CEIL:
			case CEILING:
			case CHAR9:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case CHR:
			case CLOB:
			case COALESCE:
			case COLLATION_KEY:
			case COMPARE_DECFLOAT:
			case COS:
			case COSH:
			case DATE:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFWEEK_ISO:
			case DAYOFYEAR:
			case DAYS_BETWEEN:
			case DBCLOB:
			case DEC:
			case DECFLOAT:
			case DECFLOAT_FORMAT:
			case DECFLOAT_SORTKEY:
			case DECIMAL:
			case DECODE:
			case DECRYPT_BINARY:
			case DECRYPT_BIT:
			case DECRYPT_CHAR:
			case DECRYPT_DATAKEY_BIGINT:
			case DECRYPT_DATAKEY_BIT:
			case DECRYPT_DATAKEY_CLOB:
			case DECRYPT_DATAKEY_DBCLOB:
			case DECRYPT_DATAKEY_DECIMAL:
			case DECRYPT_DATAKEY_INTEGER:
			case DECRYPT_DATAKEY_VARCHAR:
			case DECRYPT_DATAKEY_VARGRAPHIC:
			case DECRYPT_DB:
			case DEGREES:
			case DIFFERENCE:
			case DIGITS:
			case DOUBLE_PRECISION:
			case DSN_XMLVALIDATE:
			case EBCDIC_CHR:
			case EBCDIC_STR:
			case ENCRYPT_DATAKEY:
			case ENCRYPT_TDES:
			case EXP:
			case EXTRACT:
			case FLOAT:
			case FLOOR:
			case GENERATE_UNIQUE:
			case GENERATE_UNIQUE_BINARY:
			case GETHINT:
			case GETVARIABLE:
			case GRAPHIC:
			case GREATEST:
			case HASH:
			case HASH_CRC32:
			case HASH_MD5:
			case HASH_SHA1:
			case HASH_SHA256:
			case HEX:
			case IDENTITY_VAL_LOCAL:
			case IFNULL:
			case INSTR:
			case INT:
			case INTEGER:
			case JULIAN_DAY:
			case LAST_DAY:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LN:
			case LOCATE:
			case LOCATE_IN_STRING:
			case LOG10:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAX:
			case MAX_CARDINALITY:
			case MIDNIGHT_SECONDS:
			case MIN:
			case MINUTE:
			case MOD:
			case MONTHS_BETWEEN:
			case MQREAD:
			case MQREADCLOB:
			case MQRECEIVE:
			case MQRECEIVECLOB:
			case MQSEND:
			case MULTIPLY_ALT:
			case NEXT_DAY:
			case NEXT_MONTH:
			case NORMALIZE_DECFLOAT:
			case NORMALIZE_STRING:
			case NULLIF:
			case NVL:
			case OVERLAY:
			case PACK:
			case POSITION:
			case POSSTR:
			case POW:
			case POWER:
			case QUANTIZE:
			case QUARTER:
			case RADIANS:
			case RAISE_ERROR:
			case RAND:
			case RANDOM:
			case REAL:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REPLACE:
			case RID:
			case ROUND:
			case ROUND_TIMESTAMP:
			case ROWID:
			case RPAD:
			case RTRIM:
			case SCORE:
			case SIGN:
			case SIN:
			case SINH:
			case SMALLINT:
			case SOAPHTTPC:
			case SOAPHTTPNC:
			case SOAPHTTPNV:
			case SOAPHTTPV:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STRIP:
			case STRLEFT:
			case STRPOS:
			case STRRIGHT:
			case SUBSTR:
			case SUBSTRING:
			case TAN:
			case TANH:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIMESTAMP_FORMAT:
			case TIMESTAMP_ISO:
			case TIMESTAMP_TZ:
			case TO_CHAR:
			case TO_CLOB:
			case TO_DATE:
			case TO_NUMBER:
			case TOTALORDER:
			case TO_TIMESTAMP:
			case TRANSLATE:
			case TRIM:
			case TRIM_ARRAY:
			case TRUNC:
			case TRUNC_TIMESTAMP:
			case UCASE:
			case UNICODE:
			case UNICODE_STR:
			case UNISTR:
			case UPPER:
			case VARBINARY:
			case VARCHAR:
			case VARCHAR9:
			case VARCHAR_BIT_FORMAT:
			case VARCHAR_FORMAT:
			case VARGRAPHIC:
			case VERIFY_GROUP_FOR_USER:
			case VERIFY_ROLE_FOR_USER:
			case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
			case WEEK:
			case WEEK_ISO:
			case WRAP:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLCONCAT:
			case XMLDOCUMENT:
			case XMLELEMENT:
			case XMLFOREST:
			case XMLMODIFY:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLSERIALIZE:
			case XMLTEXT:
			case XMLXSROBJECTID:
			case XSLTRANSFORM:
			case CURRENT_ACCELERATOR:
			case CURRENT_APPLICATION_COMPATIBILITY:
			case CURRENT_APPLICATION_ENCODING_SCHEME:
			case CURRENT_CLIENT_ACCTNG:
			case CURRENT_CLIENT_APPLNAME:
			case CURRENT_CLIENT_CORR_TOKEN:
			case CURRENT_CLIENT_USERID:
			case CURRENT_CLIENT_WRKSTNNAME:
			case CURRENT_DATE:
			case CURRENT_DEBUG_MODE:
			case CURRENT_DECFLOAT_ROUNDING_MODE:
			case CURRENT_DEGREE:
			case CURRENT_EXPLAIN_MODE:
			case CURRENT_GET_ACCEL_ARCHIVE:
			case CURRENT_LOCALE_LC_CTYPE:
			case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
			case CURRENT_MEMBER:
			case CURRENT_OPTIMIZATION_HINT:
			case CURRENT_PACKAGE_PATH:
			case CURRENT_PACKAGESET:
			case CURRENT_PATH:
			case CURRENT_PRECISION:
			case CURRENT_QUERY_ACCELERATION:
			case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
			case CURRENT_REFRESH_AGE:
			case CURRENT_ROUTINE_VERSION:
			case CURRENT_RULES:
			case CURRENT_SCHEMA:
			case CURRENT_SERVER:
			case CURRENT_SQLID:
			case CURRENT_TEMPORAL_BUSINESS_TIME:
			case CURRENT_TEMPORAL_SYSTEM_TIME:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_TIME_ZONE:
			case ENCRYPTION_PASSWORD:
			case SESSION_TIME_ZONE:
			case SESSION_USER:
			case USER:
			case ADMIN_TASK_LIST:
			case ADMIN_TASK_OUTPUT:
			case ADMIN_TASK_STATUS:
			case BLOCKING_THREADS:
			case MQREADALL:
			case MQREADALLCLOB:
			case MQRECEIVEALL:
			case MQRECEIVEALLCLOB:
			case XMLTABLE:
			case SQLIDENTIFIER:
				{
				{
				setState(2933);
				schemaName();
				setState(2938);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2934);
					match(COMMA);
					setState(2935);
					schemaName();
					}
					}
					setState(2940);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2943);
			match(TO);
			setState(2944);
			grantee();
			setState(2949);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2945);
				match(COMMA);
				setState(2946);
				grantee();
				}
				}
				setState(2951);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2953);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2952);
				withGrantOption();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantSequenceStatementContext extends ParserRuleContext {
		public TerminalNode GRANT() { return getToken(DB2zSQLParser.GRANT, 0); }
		public List<GrantSequenceAuthorityContext> grantSequenceAuthority() {
			return getRuleContexts(GrantSequenceAuthorityContext.class);
		}
		public GrantSequenceAuthorityContext grantSequenceAuthority(int i) {
			return getRuleContext(GrantSequenceAuthorityContext.class,i);
		}
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public TerminalNode SEQUENCE() { return getToken(DB2zSQLParser.SEQUENCE, 0); }
		public List<SequenceNameContext> sequenceName() {
			return getRuleContexts(SequenceNameContext.class);
		}
		public SequenceNameContext sequenceName(int i) {
			return getRuleContext(SequenceNameContext.class,i);
		}
		public TerminalNode TO() { return getToken(DB2zSQLParser.TO, 0); }
		public List<GranteeContext> grantee() {
			return getRuleContexts(GranteeContext.class);
		}
		public GranteeContext grantee(int i) {
			return getRuleContext(GranteeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public WithGrantOptionContext withGrantOption() {
			return getRuleContext(WithGrantOptionContext.class,0);
		}
		public GrantSequenceStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantSequenceStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGrantSequenceStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGrantSequenceStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGrantSequenceStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantSequenceStatementContext grantSequenceStatement() throws RecognitionException {
		GrantSequenceStatementContext _localctx = new GrantSequenceStatementContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_grantSequenceStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2955);
			match(GRANT);
			setState(2956);
			grantSequenceAuthority();
			setState(2961);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2957);
				match(COMMA);
				setState(2958);
				grantSequenceAuthority();
				}
				}
				setState(2963);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2964);
			match(ON);
			setState(2965);
			match(SEQUENCE);
			setState(2966);
			sequenceName();
			setState(2971);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2967);
				match(COMMA);
				setState(2968);
				sequenceName();
				}
				}
				setState(2973);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2974);
			match(TO);
			setState(2975);
			grantee();
			setState(2980);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2976);
				match(COMMA);
				setState(2977);
				grantee();
				}
				}
				setState(2982);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2984);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2983);
				withGrantOption();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantSystemStatementContext extends ParserRuleContext {
		public TerminalNode GRANT() { return getToken(DB2zSQLParser.GRANT, 0); }
		public List<GrantSystemAuthorityContext> grantSystemAuthority() {
			return getRuleContexts(GrantSystemAuthorityContext.class);
		}
		public GrantSystemAuthorityContext grantSystemAuthority(int i) {
			return getRuleContext(GrantSystemAuthorityContext.class,i);
		}
		public TerminalNode TO() { return getToken(DB2zSQLParser.TO, 0); }
		public List<GranteeContext> grantee() {
			return getRuleContexts(GranteeContext.class);
		}
		public GranteeContext grantee(int i) {
			return getRuleContext(GranteeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public TerminalNode SYSTEM() { return getToken(DB2zSQLParser.SYSTEM, 0); }
		public WithGrantOptionContext withGrantOption() {
			return getRuleContext(WithGrantOptionContext.class,0);
		}
		public GrantSystemStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantSystemStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGrantSystemStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGrantSystemStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGrantSystemStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantSystemStatementContext grantSystemStatement() throws RecognitionException {
		GrantSystemStatementContext _localctx = new GrantSystemStatementContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_grantSystemStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2986);
			match(GRANT);
			setState(2987);
			grantSystemAuthority();
			setState(2992);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2988);
				match(COMMA);
				setState(2989);
				grantSystemAuthority();
				}
				}
				setState(2994);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2997);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(2995);
				match(ON);
				setState(2996);
				match(SYSTEM);
				}
			}

			setState(2999);
			match(TO);
			setState(3000);
			grantee();
			setState(3005);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3001);
				match(COMMA);
				setState(3002);
				grantee();
				}
				}
				setState(3007);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3009);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(3008);
				withGrantOption();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantTableStatementContext extends ParserRuleContext {
		public TerminalNode GRANT() { return getToken(DB2zSQLParser.GRANT, 0); }
		public List<GrantTableAuthorityContext> grantTableAuthority() {
			return getRuleContexts(GrantTableAuthorityContext.class);
		}
		public GrantTableAuthorityContext grantTableAuthority(int i) {
			return getRuleContext(GrantTableAuthorityContext.class,i);
		}
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode TO() { return getToken(DB2zSQLParser.TO, 0); }
		public List<GranteeContext> grantee() {
			return getRuleContexts(GranteeContext.class);
		}
		public GranteeContext grantee(int i) {
			return getRuleContext(GranteeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public WithGrantOptionContext withGrantOption() {
			return getRuleContext(WithGrantOptionContext.class,0);
		}
		public GrantTableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantTableStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGrantTableStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGrantTableStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGrantTableStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantTableStatementContext grantTableStatement() throws RecognitionException {
		GrantTableStatementContext _localctx = new GrantTableStatementContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_grantTableStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3011);
			match(GRANT);
			setState(3012);
			grantTableAuthority();
			setState(3017);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3013);
				match(COMMA);
				setState(3014);
				grantTableAuthority();
				}
				}
				setState(3019);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3020);
			match(ON);
			setState(3022);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,249,_ctx) ) {
			case 1:
				{
				setState(3021);
				match(TABLE);
				}
				break;
			}
			setState(3024);
			tableName();
			setState(3025);
			match(TO);
			setState(3026);
			grantee();
			setState(3031);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3027);
				match(COMMA);
				setState(3028);
				grantee();
				}
				}
				setState(3033);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3035);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(3034);
				withGrantOption();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantTypeOrJarStatementContext extends ParserRuleContext {
		public TerminalNode GRANT() { return getToken(DB2zSQLParser.GRANT, 0); }
		public TerminalNode USAGE() { return getToken(DB2zSQLParser.USAGE, 0); }
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public TerminalNode TO() { return getToken(DB2zSQLParser.TO, 0); }
		public List<GranteeContext> grantee() {
			return getRuleContexts(GranteeContext.class);
		}
		public GranteeContext grantee(int i) {
			return getRuleContext(GranteeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public WithGrantOptionContext withGrantOption() {
			return getRuleContext(WithGrantOptionContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(DB2zSQLParser.TYPE, 0); }
		public List<TypeNameContext> typeName() {
			return getRuleContexts(TypeNameContext.class);
		}
		public TypeNameContext typeName(int i) {
			return getRuleContext(TypeNameContext.class,i);
		}
		public TerminalNode JAR() { return getToken(DB2zSQLParser.JAR, 0); }
		public List<JarNameContext> jarName() {
			return getRuleContexts(JarNameContext.class);
		}
		public JarNameContext jarName(int i) {
			return getRuleContext(JarNameContext.class,i);
		}
		public TerminalNode DATA() { return getToken(DB2zSQLParser.DATA, 0); }
		public TerminalNode DISTINCT() { return getToken(DB2zSQLParser.DISTINCT, 0); }
		public GrantTypeOrJarStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantTypeOrJarStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGrantTypeOrJarStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGrantTypeOrJarStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGrantTypeOrJarStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantTypeOrJarStatementContext grantTypeOrJarStatement() throws RecognitionException {
		GrantTypeOrJarStatementContext _localctx = new GrantTypeOrJarStatementContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_grantTypeOrJarStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3037);
			match(GRANT);
			setState(3038);
			match(USAGE);
			setState(3039);
			match(ON);
			setState(3061);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATA:
			case DISTINCT:
			case TYPE:
				{
				{
				setState(3041);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DATA || _la==DISTINCT) {
					{
					setState(3040);
					_la = _input.LA(1);
					if ( !(_la==DATA || _la==DISTINCT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(3043);
				match(TYPE);
				setState(3044);
				typeName();
				setState(3049);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3045);
					match(COMMA);
					setState(3046);
					typeName();
					}
					}
					setState(3051);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case JAR:
				{
				{
				setState(3052);
				match(JAR);
				setState(3053);
				jarName();
				setState(3058);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3054);
					match(COMMA);
					setState(3055);
					jarName();
					}
					}
					setState(3060);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3063);
			match(TO);
			setState(3064);
			grantee();
			setState(3069);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3065);
				match(COMMA);
				setState(3066);
				grantee();
				}
				}
				setState(3071);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3073);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(3072);
				withGrantOption();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantVariableStatementContext extends ParserRuleContext {
		public TerminalNode GRANT() { return getToken(DB2zSQLParser.GRANT, 0); }
		public List<GrantVariableAuthorityContext> grantVariableAuthority() {
			return getRuleContexts(GrantVariableAuthorityContext.class);
		}
		public GrantVariableAuthorityContext grantVariableAuthority(int i) {
			return getRuleContext(GrantVariableAuthorityContext.class,i);
		}
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public TerminalNode VARIABLE() { return getToken(DB2zSQLParser.VARIABLE, 0); }
		public List<VariableNameContext> variableName() {
			return getRuleContexts(VariableNameContext.class);
		}
		public VariableNameContext variableName(int i) {
			return getRuleContext(VariableNameContext.class,i);
		}
		public TerminalNode TO() { return getToken(DB2zSQLParser.TO, 0); }
		public List<GranteeContext> grantee() {
			return getRuleContexts(GranteeContext.class);
		}
		public GranteeContext grantee(int i) {
			return getRuleContext(GranteeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public WithGrantOptionContext withGrantOption() {
			return getRuleContext(WithGrantOptionContext.class,0);
		}
		public GrantVariableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantVariableStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGrantVariableStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGrantVariableStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGrantVariableStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantVariableStatementContext grantVariableStatement() throws RecognitionException {
		GrantVariableStatementContext _localctx = new GrantVariableStatementContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_grantVariableStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3075);
			match(GRANT);
			setState(3076);
			grantVariableAuthority();
			setState(3081);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3077);
				match(COMMA);
				setState(3078);
				grantVariableAuthority();
				}
				}
				setState(3083);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3084);
			match(ON);
			setState(3085);
			match(VARIABLE);
			setState(3086);
			variableName();
			setState(3091);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3087);
				match(COMMA);
				setState(3088);
				variableName();
				}
				}
				setState(3093);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3094);
			match(TO);
			setState(3095);
			grantee();
			setState(3100);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3096);
				match(COMMA);
				setState(3097);
				grantee();
				}
				}
				setState(3102);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3104);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(3103);
				withGrantOption();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantUseOfStatementContext extends ParserRuleContext {
		public TerminalNode GRANT() { return getToken(DB2zSQLParser.GRANT, 0); }
		public TerminalNode USE() { return getToken(DB2zSQLParser.USE, 0); }
		public TerminalNode OF() { return getToken(DB2zSQLParser.OF, 0); }
		public GrantUseOfTargetContext grantUseOfTarget() {
			return getRuleContext(GrantUseOfTargetContext.class,0);
		}
		public TerminalNode TO() { return getToken(DB2zSQLParser.TO, 0); }
		public List<GranteeContext> grantee() {
			return getRuleContexts(GranteeContext.class);
		}
		public GranteeContext grantee(int i) {
			return getRuleContext(GranteeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public WithGrantOptionContext withGrantOption() {
			return getRuleContext(WithGrantOptionContext.class,0);
		}
		public GrantUseOfStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantUseOfStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGrantUseOfStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGrantUseOfStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGrantUseOfStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantUseOfStatementContext grantUseOfStatement() throws RecognitionException {
		GrantUseOfStatementContext _localctx = new GrantUseOfStatementContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_grantUseOfStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3106);
			match(GRANT);
			setState(3107);
			match(USE);
			setState(3108);
			match(OF);
			setState(3109);
			grantUseOfTarget();
			setState(3110);
			match(TO);
			setState(3111);
			grantee();
			setState(3116);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3112);
				match(COMMA);
				setState(3113);
				grantee();
				}
				}
				setState(3118);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3120);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(3119);
				withGrantOption();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantUseOfTargetContext extends ParserRuleContext {
		public TerminalNode BUFFERPOOL() { return getToken(DB2zSQLParser.BUFFERPOOL, 0); }
		public List<BpNameContext> bpName() {
			return getRuleContexts(BpNameContext.class);
		}
		public BpNameContext bpName(int i) {
			return getRuleContext(BpNameContext.class,i);
		}
		public TerminalNode ALL() { return getToken(DB2zSQLParser.ALL, 0); }
		public TerminalNode BUFFERPOOLS() { return getToken(DB2zSQLParser.BUFFERPOOLS, 0); }
		public TerminalNode STOGROUP() { return getToken(DB2zSQLParser.STOGROUP, 0); }
		public List<StogroupNameContext> stogroupName() {
			return getRuleContexts(StogroupNameContext.class);
		}
		public StogroupNameContext stogroupName(int i) {
			return getRuleContext(StogroupNameContext.class,i);
		}
		public TerminalNode TABLESPACE() { return getToken(DB2zSQLParser.TABLESPACE, 0); }
		public List<TablespaceNameContext> tablespaceName() {
			return getRuleContexts(TablespaceNameContext.class);
		}
		public TablespaceNameContext tablespaceName(int i) {
			return getRuleContext(TablespaceNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public List<DatabaseNameContext> databaseName() {
			return getRuleContexts(DatabaseNameContext.class);
		}
		public DatabaseNameContext databaseName(int i) {
			return getRuleContext(DatabaseNameContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(DB2zSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(DB2zSQLParser.DOT, i);
		}
		public GrantUseOfTargetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantUseOfTarget; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGrantUseOfTarget(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGrantUseOfTarget(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGrantUseOfTarget(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantUseOfTargetContext grantUseOfTarget() throws RecognitionException {
		GrantUseOfTargetContext _localctx = new GrantUseOfTargetContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_grantUseOfTarget);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3161);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BUFFERPOOL:
				{
				{
				setState(3122);
				match(BUFFERPOOL);
				setState(3123);
				bpName();
				setState(3128);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3124);
					match(COMMA);
					setState(3125);
					bpName();
					}
					}
					setState(3130);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case ALL:
				{
				{
				setState(3131);
				match(ALL);
				setState(3132);
				match(BUFFERPOOLS);
				}
				}
				break;
			case STOGROUP:
				{
				{
				setState(3133);
				match(STOGROUP);
				setState(3134);
				stogroupName();
				setState(3139);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3135);
					match(COMMA);
					setState(3136);
					stogroupName();
					}
					}
					setState(3141);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case TABLESPACE:
				{
				{
				setState(3142);
				match(TABLESPACE);
				setState(3146);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,266,_ctx) ) {
				case 1:
					{
					setState(3143);
					databaseName();
					setState(3144);
					match(DOT);
					}
					break;
				}
				setState(3148);
				tablespaceName();
				setState(3158);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3149);
					match(COMMA);
					setState(3153);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,267,_ctx) ) {
					case 1:
						{
						setState(3150);
						databaseName();
						setState(3151);
						match(DOT);
						}
						break;
					}
					setState(3155);
					tablespaceName();
					}
					}
					setState(3160);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantVariableAuthorityContext extends ParserRuleContext {
		public TerminalNode READ() { return getToken(DB2zSQLParser.READ, 0); }
		public TerminalNode WRITE() { return getToken(DB2zSQLParser.WRITE, 0); }
		public TerminalNode ALL() { return getToken(DB2zSQLParser.ALL, 0); }
		public TerminalNode PRIVILEGES() { return getToken(DB2zSQLParser.PRIVILEGES, 0); }
		public GrantVariableAuthorityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantVariableAuthority; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGrantVariableAuthority(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGrantVariableAuthority(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGrantVariableAuthority(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantVariableAuthorityContext grantVariableAuthority() throws RecognitionException {
		GrantVariableAuthorityContext _localctx = new GrantVariableAuthorityContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_grantVariableAuthority);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3169);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				{
				{
				setState(3163);
				match(ALL);
				setState(3165);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIVILEGES) {
					{
					setState(3164);
					match(PRIVILEGES);
					}
				}

				}
				}
				break;
			case READ:
				{
				setState(3167);
				match(READ);
				}
				break;
			case WRITE:
				{
				setState(3168);
				match(WRITE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantTableAuthorityContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode DELETE() { return getToken(DB2zSQLParser.DELETE, 0); }
		public TerminalNode INDEX() { return getToken(DB2zSQLParser.INDEX, 0); }
		public TerminalNode INSERT() { return getToken(DB2zSQLParser.INSERT, 0); }
		public TerminalNode SELECT() { return getToken(DB2zSQLParser.SELECT, 0); }
		public TerminalNode TRIGGER() { return getToken(DB2zSQLParser.TRIGGER, 0); }
		public TerminalNode UNLOAD() { return getToken(DB2zSQLParser.UNLOAD, 0); }
		public TerminalNode ALL() { return getToken(DB2zSQLParser.ALL, 0); }
		public TerminalNode REFERENCES() { return getToken(DB2zSQLParser.REFERENCES, 0); }
		public TerminalNode UPDATE() { return getToken(DB2zSQLParser.UPDATE, 0); }
		public TerminalNode PRIVILEGES() { return getToken(DB2zSQLParser.PRIVILEGES, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public GrantTableAuthorityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantTableAuthority; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGrantTableAuthority(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGrantTableAuthority(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGrantTableAuthority(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantTableAuthorityContext grantTableAuthority() throws RecognitionException {
		GrantTableAuthorityContext _localctx = new GrantTableAuthorityContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_grantTableAuthority);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3210);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				{
				{
				setState(3171);
				match(ALL);
				setState(3173);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIVILEGES) {
					{
					setState(3172);
					match(PRIVILEGES);
					}
				}

				}
				}
				break;
			case ALTER:
				{
				setState(3175);
				match(ALTER);
				}
				break;
			case DELETE:
				{
				setState(3176);
				match(DELETE);
				}
				break;
			case INDEX:
				{
				setState(3177);
				match(INDEX);
				}
				break;
			case INSERT:
				{
				setState(3178);
				match(INSERT);
				}
				break;
			case REFERENCES:
				{
				{
				setState(3179);
				match(REFERENCES);
				setState(3191);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(3180);
					match(LPAREN);
					setState(3181);
					columnName();
					setState(3186);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3182);
						match(COMMA);
						setState(3183);
						columnName();
						}
						}
						setState(3188);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(3189);
					match(RPAREN);
					}
				}

				}
				}
				break;
			case SELECT:
				{
				setState(3193);
				match(SELECT);
				}
				break;
			case TRIGGER:
				{
				setState(3194);
				match(TRIGGER);
				}
				break;
			case UNLOAD:
				{
				setState(3195);
				match(UNLOAD);
				}
				break;
			case UPDATE:
				{
				{
				setState(3196);
				match(UPDATE);
				setState(3208);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(3197);
					match(LPAREN);
					setState(3198);
					columnName();
					setState(3203);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3199);
						match(COMMA);
						setState(3200);
						columnName();
						}
						}
						setState(3205);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(3206);
					match(RPAREN);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantSystemAuthorityContext extends ParserRuleContext {
		public TerminalNode ACCESSCTRL() { return getToken(DB2zSQLParser.ACCESSCTRL, 0); }
		public TerminalNode ARCHIVE() { return getToken(DB2zSQLParser.ARCHIVE, 0); }
		public TerminalNode BINDADD() { return getToken(DB2zSQLParser.BINDADD, 0); }
		public TerminalNode BINDAGENT() { return getToken(DB2zSQLParser.BINDAGENT, 0); }
		public TerminalNode BSDS() { return getToken(DB2zSQLParser.BSDS, 0); }
		public TerminalNode CREATEALIAS() { return getToken(DB2zSQLParser.CREATEALIAS, 0); }
		public TerminalNode CREATEDBA() { return getToken(DB2zSQLParser.CREATEDBA, 0); }
		public TerminalNode CREATEDBC() { return getToken(DB2zSQLParser.CREATEDBC, 0); }
		public TerminalNode CREATESG() { return getToken(DB2zSQLParser.CREATESG, 0); }
		public TerminalNode CREATETMTAB() { return getToken(DB2zSQLParser.CREATETMTAB, 0); }
		public TerminalNode CREATE_SECURE_OBJECT() { return getToken(DB2zSQLParser.CREATE_SECURE_OBJECT, 0); }
		public TerminalNode DATAACCESS() { return getToken(DB2zSQLParser.DATAACCESS, 0); }
		public TerminalNode DEBUGSESSION() { return getToken(DB2zSQLParser.DEBUGSESSION, 0); }
		public TerminalNode DISPLAY() { return getToken(DB2zSQLParser.DISPLAY, 0); }
		public TerminalNode EXPLAIN() { return getToken(DB2zSQLParser.EXPLAIN, 0); }
		public TerminalNode MONITOR1() { return getToken(DB2zSQLParser.MONITOR1, 0); }
		public TerminalNode MONITOR2() { return getToken(DB2zSQLParser.MONITOR2, 0); }
		public TerminalNode RECOVER() { return getToken(DB2zSQLParser.RECOVER, 0); }
		public TerminalNode SQLADM() { return getToken(DB2zSQLParser.SQLADM, 0); }
		public TerminalNode STOPALL() { return getToken(DB2zSQLParser.STOPALL, 0); }
		public TerminalNode STOSPACE() { return getToken(DB2zSQLParser.STOSPACE, 0); }
		public TerminalNode SYSADM() { return getToken(DB2zSQLParser.SYSADM, 0); }
		public TerminalNode SYSCTRL() { return getToken(DB2zSQLParser.SYSCTRL, 0); }
		public TerminalNode SYSOPR() { return getToken(DB2zSQLParser.SYSOPR, 0); }
		public TerminalNode TRACE() { return getToken(DB2zSQLParser.TRACE, 0); }
		public TerminalNode DBADM() { return getToken(DB2zSQLParser.DBADM, 0); }
		public List<TerminalNode> WITH() { return getTokens(DB2zSQLParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(DB2zSQLParser.WITH, i);
		}
		public List<TerminalNode> WITHOUT() { return getTokens(DB2zSQLParser.WITHOUT); }
		public TerminalNode WITHOUT(int i) {
			return getToken(DB2zSQLParser.WITHOUT, i);
		}
		public GrantSystemAuthorityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantSystemAuthority; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGrantSystemAuthority(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGrantSystemAuthority(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGrantSystemAuthority(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantSystemAuthorityContext grantSystemAuthority() throws RecognitionException {
		GrantSystemAuthorityContext _localctx = new GrantSystemAuthorityContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_grantSystemAuthority);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3246);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ACCESSCTRL:
				{
				setState(3212);
				match(ACCESSCTRL);
				}
				break;
			case ARCHIVE:
				{
				setState(3213);
				match(ARCHIVE);
				}
				break;
			case BINDADD:
				{
				setState(3214);
				match(BINDADD);
				}
				break;
			case BINDAGENT:
				{
				setState(3215);
				match(BINDAGENT);
				}
				break;
			case BSDS:
				{
				setState(3216);
				match(BSDS);
				}
				break;
			case CREATEALIAS:
				{
				setState(3217);
				match(CREATEALIAS);
				}
				break;
			case CREATEDBA:
				{
				setState(3218);
				match(CREATEDBA);
				}
				break;
			case CREATEDBC:
				{
				setState(3219);
				match(CREATEDBC);
				}
				break;
			case CREATESG:
				{
				setState(3220);
				match(CREATESG);
				}
				break;
			case CREATETMTAB:
				{
				setState(3221);
				match(CREATETMTAB);
				}
				break;
			case CREATE_SECURE_OBJECT:
				{
				setState(3222);
				match(CREATE_SECURE_OBJECT);
				}
				break;
			case DATAACCESS:
				{
				setState(3223);
				match(DATAACCESS);
				}
				break;
			case DBADM:
				{
				{
				setState(3224);
				match(DBADM);
				setState(3227);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,278,_ctx) ) {
				case 1:
					{
					setState(3225);
					_la = _input.LA(1);
					if ( !(_la==WITH || _la==WITHOUT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(3226);
					match(ACCESSCTRL);
					}
					break;
				}
				setState(3231);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH || _la==WITHOUT) {
					{
					setState(3229);
					_la = _input.LA(1);
					if ( !(_la==WITH || _la==WITHOUT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(3230);
					match(DATAACCESS);
					}
				}

				}
				}
				break;
			case DEBUGSESSION:
				{
				setState(3233);
				match(DEBUGSESSION);
				}
				break;
			case DISPLAY:
				{
				setState(3234);
				match(DISPLAY);
				}
				break;
			case EXPLAIN:
				{
				setState(3235);
				match(EXPLAIN);
				}
				break;
			case MONITOR1:
				{
				setState(3236);
				match(MONITOR1);
				}
				break;
			case MONITOR2:
				{
				setState(3237);
				match(MONITOR2);
				}
				break;
			case RECOVER:
				{
				setState(3238);
				match(RECOVER);
				}
				break;
			case SQLADM:
				{
				setState(3239);
				match(SQLADM);
				}
				break;
			case STOPALL:
				{
				setState(3240);
				match(STOPALL);
				}
				break;
			case STOSPACE:
				{
				setState(3241);
				match(STOSPACE);
				}
				break;
			case SYSADM:
				{
				setState(3242);
				match(SYSADM);
				}
				break;
			case SYSCTRL:
				{
				setState(3243);
				match(SYSCTRL);
				}
				break;
			case SYSOPR:
				{
				setState(3244);
				match(SYSOPR);
				}
				break;
			case TRACE:
				{
				setState(3245);
				match(TRACE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantSequenceAuthorityContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode USAGE() { return getToken(DB2zSQLParser.USAGE, 0); }
		public GrantSequenceAuthorityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantSequenceAuthority; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGrantSequenceAuthority(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGrantSequenceAuthority(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGrantSequenceAuthority(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantSequenceAuthorityContext grantSequenceAuthority() throws RecognitionException {
		GrantSequenceAuthorityContext _localctx = new GrantSequenceAuthorityContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_grantSequenceAuthority);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3248);
			_la = _input.LA(1);
			if ( !(_la==ALTER || _la==USAGE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantSchemaAuthorityContext extends ParserRuleContext {
		public TerminalNode ALTERIN() { return getToken(DB2zSQLParser.ALTERIN, 0); }
		public TerminalNode CREATEIN() { return getToken(DB2zSQLParser.CREATEIN, 0); }
		public TerminalNode DROPIN() { return getToken(DB2zSQLParser.DROPIN, 0); }
		public GrantSchemaAuthorityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantSchemaAuthority; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGrantSchemaAuthority(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGrantSchemaAuthority(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGrantSchemaAuthority(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantSchemaAuthorityContext grantSchemaAuthority() throws RecognitionException {
		GrantSchemaAuthorityContext _localctx = new GrantSchemaAuthorityContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_grantSchemaAuthority);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3250);
			_la = _input.LA(1);
			if ( !(((((_la - 671)) & ~0x3f) == 0 && ((1L << (_la - 671)) & ((1L << (ALTERIN - 671)) | (1L << (CREATEIN - 671)) | (1L << (DROPIN - 671)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantPlanAuthorityContext extends ParserRuleContext {
		public TerminalNode BIND() { return getToken(DB2zSQLParser.BIND, 0); }
		public TerminalNode EXECUTE() { return getToken(DB2zSQLParser.EXECUTE, 0); }
		public GrantPlanAuthorityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantPlanAuthority; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGrantPlanAuthority(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGrantPlanAuthority(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGrantPlanAuthority(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantPlanAuthorityContext grantPlanAuthority() throws RecognitionException {
		GrantPlanAuthorityContext _localctx = new GrantPlanAuthorityContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_grantPlanAuthority);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3252);
			_la = _input.LA(1);
			if ( !(_la==EXECUTE || _la==BIND) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantPackageAuthorityContext extends ParserRuleContext {
		public TerminalNode BIND() { return getToken(DB2zSQLParser.BIND, 0); }
		public TerminalNode COPY() { return getToken(DB2zSQLParser.COPY, 0); }
		public TerminalNode EXECUTE() { return getToken(DB2zSQLParser.EXECUTE, 0); }
		public TerminalNode RUN() { return getToken(DB2zSQLParser.RUN, 0); }
		public GrantPackageAuthorityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantPackageAuthority; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGrantPackageAuthority(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGrantPackageAuthority(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGrantPackageAuthority(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantPackageAuthorityContext grantPackageAuthority() throws RecognitionException {
		GrantPackageAuthorityContext _localctx = new GrantPackageAuthorityContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_grantPackageAuthority);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3254);
			_la = _input.LA(1);
			if ( !(_la==EXECUTE || _la==RUN || _la==COPY || _la==BIND) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PackageSpecificationContext extends ParserRuleContext {
		public CollectionIDContext collectionID() {
			return getRuleContext(CollectionIDContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public PackageNameContext packageName() {
			return getRuleContext(PackageNameContext.class,0);
		}
		public TerminalNode SPLAT() { return getToken(DB2zSQLParser.SPLAT, 0); }
		public PackageSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_packageSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPackageSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPackageSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPackageSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PackageSpecificationContext packageSpecification() throws RecognitionException {
		PackageSpecificationContext _localctx = new PackageSpecificationContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_packageSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3256);
			collectionID();
			setState(3257);
			match(DOT);
			setState(3260);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INSTEAD:
			case NEW:
			case NEW_TABLE:
			case OLD_TABLE:
			case REFERENCING:
			case BASED:
			case UPON:
			case ADD:
			case AFTER:
			case ALL:
			case ALLOCATE:
			case ALLOW:
			case ALTER:
			case ALTERAND:
			case ANY:
			case ARRAY:
			case ARRAY_EXISTS:
			case AS:
			case ASENSITIVE:
			case ASSOCIATE:
			case ASUTIME:
			case AT:
			case AUDIT:
			case AUX:
			case AUXILIARY:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BUFFERPOOL:
			case BUFFERPOOLS:
			case BY:
			case CALL:
			case CAPTURE:
			case CASCADED:
			case CASE:
			case CAST:
			case CCSID:
			case CHAR:
			case CHARACTER:
			case CHECK:
			case CLONE:
			case CLOSE:
			case CLUSTER:
			case COLLECTION:
			case COLLID:
			case COLUMN:
			case COMMENT:
			case COMMIT:
			case CONCAT:
			case CONDITION:
			case CONNECT:
			case CONNECTION:
			case CONSTRAINT:
			case CONTAINS:
			case CONTENT:
			case CONTINUE:
			case CREATE:
			case CUBE:
			case CURRENT:
			case CURRENT_LC_CTYPE:
			case CURRVAL:
			case CURSOR:
			case DATA:
			case DATABASE:
			case DAY:
			case DAYS:
			case DBINFO:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DISABLE:
			case DISALLOW:
			case DISTINCT:
			case DO:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSSIZE:
			case DYNAMIC:
			case EDITPROC:
			case ELSE:
			case ELSEIF:
			case ENCODING:
			case ENCRYPTION:
			case END:
			case END_EXEC:
			case ENDING:
			case ERASE:
			case ESCAPE:
			case EXCEPT:
			case EXCEPTION:
			case EXEC_SQL:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case FENCED:
			case FETCH:
			case FIELDPROC:
			case FINAL:
			case FIRST:
			case FOR:
			case FREE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANT:
			case GROUP:
			case HANDLER:
			case HAVING:
			case HOLD:
			case HOUR:
			case HOURS:
			case IF:
			case IMMEDIATE:
			case IN:
			case INCLUSIVE:
			case INDEX:
			case INDEXBP:
			case INHERIT:
			case INNER:
			case INOUT:
			case INSENSITIVE:
			case INSERT:
			case INTERSECT:
			case INTO:
			case IS:
			case ISOBID:
			case ITERATE:
			case JAR:
			case JOIN:
			case KEEP:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LAST:
			case LC_CTYPE:
			case LEAVE:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOCALE:
			case LOCATOR:
			case LOCATORS:
			case LOCK:
			case LOCKMAX:
			case LOCKSIZE:
			case LONG:
			case LOOP:
			case MAINTAINED:
			case MATERIALIZED:
			case MICROSECOND:
			case MICROSECONDS:
			case MODIFIES:
			case MONTH:
			case MONTHS:
			case NEXT:
			case NEXTVAL:
			case NO:
			case NONE:
			case NOT:
			case NULL:
			case NULLS:
			case NUMPARTS:
			case OBID:
			case OF:
			case OFFSET:
			case OLD:
			case ON:
			case OPEN:
			case OPTIMIZATION:
			case OPTIMIZE:
			case OR:
			case ORDER:
			case ORGANIZATION:
			case OUT:
			case OUTER:
			case PACKAGE:
			case PADDED:
			case PARAMETER:
			case PART:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONING:
			case PATH:
			case PERIOD:
			case PIECESIZE:
			case PLAN:
			case PRECISION:
			case PREPARE:
			case PREVVAL:
			case PRIOR:
			case PRIQTY:
			case PRIVILEGES:
			case PROCEDURE:
			case PROGRAM:
			case PSID:
			case PUBLIC:
			case QUERY:
			case QUERYNO:
			case READS:
			case REFERENCES:
			case REFRESH:
			case RELEASE:
			case RENAME:
			case REPEAT:
			case RESIGNAL:
			case RESTRICT:
			case RESULT:
			case RESULT_SET_LOCATOR:
			case RETURN:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUND_CEILING:
			case ROUND_DOWN:
			case ROUND_FLOOR:
			case ROUND_HALF_DOWN:
			case ROUND_HALF_EVEN:
			case ROUND_HALF_UP:
			case ROUND_UP:
			case ROW:
			case ROWSET:
			case RUN:
			case SAVEPOINT:
			case SCHEMA:
			case SCRATCHPAD:
			case SECOND:
			case SECONDS:
			case SECQTY:
			case SECURITY:
			case SELECT:
			case SENSITIVE:
			case SEQUENCE:
			case SET:
			case SIGNAL:
			case SIMPLE:
			case SOME:
			case SOURCE:
			case SPECIFIC:
			case STANDARD:
			case STATEMENT:
			case STATIC:
			case STAY:
			case STOGROUP:
			case STORES:
			case STYLE:
			case SUMMARY:
			case SYNONYM:
			case SYSDATE:
			case SYSTEM:
			case SYSTIMESTAMP:
			case TABLE:
			case TABLESPACE:
			case THEN:
			case TO:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNDO:
			case UNION:
			case UNIQUE:
			case UNTIL:
			case UPDATE:
			case USING:
			case VALIDPROC:
			case VALUE:
			case VALUES:
			case VARIABLE:
			case VARIANT:
			case VCAT:
			case VERSIONING:
			case VIEW:
			case VOLATILE:
			case VOLUMES:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WLM:
			case XMLCAST:
			case XMLEXISTS:
			case XMLNAMESPACES:
			case YEAR:
			case YEARS:
			case ZONE:
			case AND:
			case ARRAY_AGG:
			case ASC:
			case AVG:
			case BIT:
			case CHANGE:
			case CODEUNITS16:
			case CODEUNITS32:
			case CORR:
			case CORRELATION:
			case COUNT:
			case COUNT_BIG:
			case COVAR:
			case COVARIANCE:
			case COVARIANCE_SAMP:
			case COVAR_POP:
			case COVAR_SAMP:
			case CS:
			case CUME_DIST:
			case DENSE_RANK:
			case DESC:
			case EBCDIC:
			case EXCLUSIVE:
			case FIRST_VALUE:
			case FOLLOWING:
			case GROUPING:
			case IGNORE:
			case INDICATOR:
			case INPUT:
			case ISNULL:
			case LAG:
			case LARGE:
			case LAST_VALUE:
			case LEAD:
			case LISTAGG:
			case LOCKED:
			case LOCKS:
			case MEDIAN:
			case MINUTES:
			case MIXED:
			case NOTNULL:
			case NTH_VALUE:
			case NTILE:
			case NUMERIC:
			case OBJECT:
			case OCTETS:
			case ONLY:
			case OVER:
			case PASSING:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PERCENT_RANK:
			case PRECEDING:
			case PREVIOUS:
			case RANGE:
			case RANK:
			case RATIO_TO_REPORT:
			case READ:
			case REF:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_ICPT:
			case REGR_INTERCEPT:
			case REGR_R2:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case RESPECT:
			case ROW_NUMBER:
			case ROWS:
			case RR:
			case RS:
			case SBCS:
			case SELECTIVITY:
			case SETS:
			case SHARE:
			case SKIP_:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case TOKEN:
			case UNBOUNDED:
			case UNPACK:
			case UR:
			case USE:
			case VAR:
			case VARIANCE:
			case VARIANCE_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARYING:
			case WITHOUT:
			case XML:
			case XMLAGG:
			case COLUMNS:
			case SQLID:
			case ORDINALITY:
			case SYSTEM_TIME:
			case BUSINESS_TIME:
			case MULTIPLIER:
			case UNNEST:
			case CROSS:
			case CALLER:
			case CLIENT:
			case POSITIONING:
			case SCROLL:
			case ACTION:
			case ASSEMBLE:
			case C_:
			case CALLED:
			case COBOL:
			case DB2:
			case DEFINER:
			case DISPATCH:
			case ENVIRONMENT:
			case FAILURE:
			case FAILURES:
			case JAVA:
			case MAIN:
			case NAME:
			case OPTIONS:
			case PARALLEL:
			case PLI:
			case REGISTERS:
			case RESIDENT:
			case SECURED:
			case SPECIAL:
			case SQL:
			case STOP:
			case SUB:
			case YES:
			case APPLICATION:
			case CHANGED:
			case COMPATIBILITY:
			case COMPRESS:
			case COPY:
			case FREEPAGE:
			case GBPCACHE:
			case INCLUDE:
			case MAXVALUE:
			case MINVALUE:
			case PCTFREE:
			case REGENERATE:
			case MASK:
			case ENABLE:
			case PERMISSION:
			case ATOMIC:
			case SQLEXCEPTION:
			case MERGE:
			case MATCHED:
			case SQLSTATE:
			case MESSAGE_TEXT:
			case OVERRIDING:
			case PORTION:
			case DB2SQL:
			case DEBUG:
			case GENERAL:
			case MODE_:
			case REXX:
			case CACHE:
			case CYCLE:
			case INCREMENT:
			case RESTART:
			case DATACLAS:
			case MGMTCLAS:
			case REMOVE:
			case STORCLAS:
			case ACCESS:
			case ACTIVATE:
			case ALWAYS:
			case APPEND:
			case ARCHIVE:
			case BUSINESS:
			case CASCADE:
			case CHANGES:
			case CONTROL:
			case DEACTIVATE:
			case DEFERRED:
			case EACH:
			case ENFORCED:
			case EXTRA:
			case FOREIGN:
			case HIDDEN_:
			case HISTORY:
			case ID:
			case IDENTITY:
			case IMPLICITLY:
			case INITIALLY:
			case INLINE:
			case OPERATION:
			case ORGANIZE:
			case OVERLAPS:
			case PACKAGE_NAME:
			case PACKAGE_SCHEMA:
			case PACKAGE_VERSION:
			case PRIMARY:
			case RESET:
			case ROTATE:
			case START:
			case SYSIBM:
			case TRANSACTION:
			case XMLSCHEMA:
			case ELEMENT:
			case URL:
			case NAMESPACE:
			case LOCATION:
			case SYSXSR:
			case ALGORITHM:
			case FIXEDLENGTH:
			case HUFFMAN:
			case LOB:
			case LOG:
			case LOGGED:
			case MAXPARTITIONS:
			case MAXROWS:
			case MEMBER:
			case MOVE:
			case PAGE:
			case PAGENUM:
			case PENDING:
			case RELATIVE:
			case SEGSIZE:
			case TRACKMOD:
			case ADDRESS:
			case ATTRIBUTES:
			case AUTHENTICATION:
			case AUTHID:
			case CONTEXT:
			case JOBNAME:
			case OWNER:
			case PROFILE:
			case QUALIFIER:
			case SERVAUTH:
			case TRUSTED:
			case SECTION:
			case ACTIVE:
			case VERSION:
			case ALIAS:
			case WORK:
			case WORKFILE:
			case SYSDEFLT:
			case NULTERM:
			case STRUCTURE:
			case GENERIC:
			case TEMPORARY:
			case DEFER:
			case DEFINE:
			case EXCLUDE:
			case GENERATE:
			case KEYS:
			case XMLPATTERN:
			case SIZE:
			case EVERY:
			case ABSOLUTE:
			case ACCELERATOR:
			case EXCLUDING:
			case INCLUDING:
			case DEFAULTS:
			case MODIFIERS:
			case OPTION:
			case PRESERVE:
			case BOTH:
			case DESCRIBE:
			case LABELS:
			case NAMES:
			case OUTPUT:
			case EXCHANGE:
			case STABILIZED:
			case STMTCACHE:
			case STMTID:
			case STMTTOKEN:
			case STARTING:
			case CATALOG_NAME:
			case CONDITION_NUMBER:
			case CURSOR_NAME:
			case DB2_AUTHENTICATION_TYPE:
			case DB2_AUTHORIZATION_ID:
			case DB2_CONNECTION_STATE:
			case DB2_CONNECTION_STATUS:
			case DB2_ENCRYPTION_TYPE:
			case DB2_ERROR_CODE1:
			case DB2_ERROR_CODE2:
			case DB2_ERROR_CODE3:
			case DB2_ERROR_CODE4:
			case DB2_GET_DIAGNOSTICS_DIAGNOSTICS:
			case DB2_INTERNAL_ERROR_POINTER:
			case DB2_LAST_ROW:
			case DB2_LINE_NUMBER:
			case DB2_MESSAGE_ID:
			case DB2_MODULE_DETECTING_ERROR:
			case DB2_NUMBER_PARAMETER_MARKERS:
			case DB2_NUMBER_RESULT_SETS:
			case DB2_NUMBER_ROWS:
			case DB2_ORDINAL_TOKEN_:
			case DB2_PRODUCT_ID:
			case DB2_REASON_CODE:
			case DB2_RETURNED_SQLCODE:
			case DB2_RETURN_STATUS:
			case DB2_ROW_NUMBER:
			case DB2_SERVER_CLASS_NAME:
			case DB2_SQL_ATTR_CURSOR_HOLD:
			case DB2_SQL_ATTR_CURSOR_ROWSET:
			case DB2_SQL_ATTR_CURSOR_SCROLLABLE:
			case DB2_SQL_ATTR_CURSOR_SENSITIVITY:
			case DB2_SQL_ATTR_CURSOR_TYPE:
			case DB2_SQLERRD1:
			case DB2_SQLERRD2:
			case DB2_SQLERRD3:
			case DB2_SQLERRD4:
			case DB2_SQLERRD5:
			case DB2_SQLERRD6:
			case DB2_SQLERRD_SET:
			case DB2_SQL_NESTING_LEVEL:
			case DB2_TOKEN_COUNT:
			case DIAGNOSTICS:
			case MORE_:
			case NUMBER:
			case RETURNED_SQLSTATE:
			case ROW_COUNT:
			case SERVER_NAME:
			case STACKED:
			case CREATETAB:
			case CREATETS:
			case DBADM:
			case DBCTRL:
			case DBMAINT:
			case DISPLAYDB:
			case IMAGCOPY:
			case LOAD:
			case PACKADM:
			case RECOVERDB:
			case REORG:
			case REPAIR:
			case STARTDB:
			case STATS:
			case STOPDB:
			case BIND:
			case ALTERIN:
			case CREATEIN:
			case DROPIN:
			case USAGE:
			case ACCESSCTRL:
			case BINDADD:
			case BINDAGENT:
			case BSDS:
			case CREATEALIAS:
			case CREATEDBA:
			case CREATEDBC:
			case CREATE_SECURE_OBJECT:
			case CREATESG:
			case CREATETMTAB:
			case DATAACCESS:
			case DEBUGSESSION:
			case DISPLAY:
			case MONITOR1:
			case MONITOR2:
			case RECOVER:
			case SQLADM:
			case STOPALL:
			case STOSPACE:
			case SYSADM:
			case SYSCTRL:
			case SYSOPR:
			case TRACE:
			case UNLOAD:
			case WRITE:
			case ABS:
			case ABSVAL:
			case ACOS:
			case ADD_DAYS:
			case ADD_MONTHS:
			case ARRAY_DELETE:
			case ARRAY_FIRST:
			case ARRAY_LAST:
			case ARRAY_NEXT:
			case ARRAY_PRIOR:
			case ARRAY_TRIM:
			case ASCII:
			case ASCII_CHR:
			case ASCIISTR:
			case ASCII_STR:
			case ASIN:
			case ATAN:
			case ATAN2:
			case ATANH:
			case BIGINT:
			case BINARY:
			case BITAND:
			case BITANDNOT:
			case BITNOT:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BTRIM:
			case CARDINALITY:
			case CCSID_ENCODING:
			case CEIL:
			case CEILING:
			case CHAR9:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case CHR:
			case CLOB:
			case COALESCE:
			case COLLATION_KEY:
			case COMPARE_DECFLOAT:
			case COS:
			case COSH:
			case DATE:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFWEEK_ISO:
			case DAYOFYEAR:
			case DAYS_BETWEEN:
			case DBCLOB:
			case DEC:
			case DECFLOAT:
			case DECFLOAT_FORMAT:
			case DECFLOAT_SORTKEY:
			case DECIMAL:
			case DECODE:
			case DECRYPT_BINARY:
			case DECRYPT_BIT:
			case DECRYPT_CHAR:
			case DECRYPT_DATAKEY_BIGINT:
			case DECRYPT_DATAKEY_BIT:
			case DECRYPT_DATAKEY_CLOB:
			case DECRYPT_DATAKEY_DBCLOB:
			case DECRYPT_DATAKEY_DECIMAL:
			case DECRYPT_DATAKEY_INTEGER:
			case DECRYPT_DATAKEY_VARCHAR:
			case DECRYPT_DATAKEY_VARGRAPHIC:
			case DECRYPT_DB:
			case DEGREES:
			case DIFFERENCE:
			case DIGITS:
			case DOUBLE_PRECISION:
			case DSN_XMLVALIDATE:
			case EBCDIC_CHR:
			case EBCDIC_STR:
			case ENCRYPT_DATAKEY:
			case ENCRYPT_TDES:
			case EXP:
			case EXTRACT:
			case FLOAT:
			case FLOOR:
			case GENERATE_UNIQUE:
			case GENERATE_UNIQUE_BINARY:
			case GETHINT:
			case GETVARIABLE:
			case GRAPHIC:
			case GREATEST:
			case HASH:
			case HASH_CRC32:
			case HASH_MD5:
			case HASH_SHA1:
			case HASH_SHA256:
			case HEX:
			case IDENTITY_VAL_LOCAL:
			case IFNULL:
			case INSTR:
			case INT:
			case INTEGER:
			case JULIAN_DAY:
			case LAST_DAY:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LN:
			case LOCATE:
			case LOCATE_IN_STRING:
			case LOG10:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAX:
			case MAX_CARDINALITY:
			case MIDNIGHT_SECONDS:
			case MIN:
			case MINUTE:
			case MOD:
			case MONTHS_BETWEEN:
			case MQREAD:
			case MQREADCLOB:
			case MQRECEIVE:
			case MQRECEIVECLOB:
			case MQSEND:
			case MULTIPLY_ALT:
			case NEXT_DAY:
			case NEXT_MONTH:
			case NORMALIZE_DECFLOAT:
			case NORMALIZE_STRING:
			case NULLIF:
			case NVL:
			case OVERLAY:
			case PACK:
			case POSITION:
			case POSSTR:
			case POW:
			case POWER:
			case QUANTIZE:
			case QUARTER:
			case RADIANS:
			case RAISE_ERROR:
			case RAND:
			case RANDOM:
			case REAL:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REPLACE:
			case RID:
			case ROUND:
			case ROUND_TIMESTAMP:
			case ROWID:
			case RPAD:
			case RTRIM:
			case SCORE:
			case SIGN:
			case SIN:
			case SINH:
			case SMALLINT:
			case SOAPHTTPC:
			case SOAPHTTPNC:
			case SOAPHTTPNV:
			case SOAPHTTPV:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STRIP:
			case STRLEFT:
			case STRPOS:
			case STRRIGHT:
			case SUBSTR:
			case SUBSTRING:
			case TAN:
			case TANH:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIMESTAMP_FORMAT:
			case TIMESTAMP_ISO:
			case TIMESTAMP_TZ:
			case TO_CHAR:
			case TO_CLOB:
			case TO_DATE:
			case TO_NUMBER:
			case TOTALORDER:
			case TO_TIMESTAMP:
			case TRANSLATE:
			case TRIM:
			case TRIM_ARRAY:
			case TRUNC:
			case TRUNC_TIMESTAMP:
			case UCASE:
			case UNICODE:
			case UNICODE_STR:
			case UNISTR:
			case UPPER:
			case VARBINARY:
			case VARCHAR:
			case VARCHAR9:
			case VARCHAR_BIT_FORMAT:
			case VARCHAR_FORMAT:
			case VARGRAPHIC:
			case VERIFY_GROUP_FOR_USER:
			case VERIFY_ROLE_FOR_USER:
			case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
			case WEEK:
			case WEEK_ISO:
			case WRAP:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLCONCAT:
			case XMLDOCUMENT:
			case XMLELEMENT:
			case XMLFOREST:
			case XMLMODIFY:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLSERIALIZE:
			case XMLTEXT:
			case XMLXSROBJECTID:
			case XSLTRANSFORM:
			case CURRENT_ACCELERATOR:
			case CURRENT_APPLICATION_COMPATIBILITY:
			case CURRENT_APPLICATION_ENCODING_SCHEME:
			case CURRENT_CLIENT_ACCTNG:
			case CURRENT_CLIENT_APPLNAME:
			case CURRENT_CLIENT_CORR_TOKEN:
			case CURRENT_CLIENT_USERID:
			case CURRENT_CLIENT_WRKSTNNAME:
			case CURRENT_DATE:
			case CURRENT_DEBUG_MODE:
			case CURRENT_DECFLOAT_ROUNDING_MODE:
			case CURRENT_DEGREE:
			case CURRENT_EXPLAIN_MODE:
			case CURRENT_GET_ACCEL_ARCHIVE:
			case CURRENT_LOCALE_LC_CTYPE:
			case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
			case CURRENT_MEMBER:
			case CURRENT_OPTIMIZATION_HINT:
			case CURRENT_PACKAGE_PATH:
			case CURRENT_PACKAGESET:
			case CURRENT_PATH:
			case CURRENT_PRECISION:
			case CURRENT_QUERY_ACCELERATION:
			case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
			case CURRENT_REFRESH_AGE:
			case CURRENT_ROUTINE_VERSION:
			case CURRENT_RULES:
			case CURRENT_SCHEMA:
			case CURRENT_SERVER:
			case CURRENT_SQLID:
			case CURRENT_TEMPORAL_BUSINESS_TIME:
			case CURRENT_TEMPORAL_SYSTEM_TIME:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_TIME_ZONE:
			case ENCRYPTION_PASSWORD:
			case SESSION_TIME_ZONE:
			case SESSION_USER:
			case USER:
			case ADMIN_TASK_LIST:
			case ADMIN_TASK_OUTPUT:
			case ADMIN_TASK_STATUS:
			case BLOCKING_THREADS:
			case MQREADALL:
			case MQREADALLCLOB:
			case MQRECEIVEALL:
			case MQRECEIVEALLCLOB:
			case XMLTABLE:
			case SQLIDENTIFIER:
				{
				setState(3258);
				packageName();
				}
				break;
			case SPLAT:
				{
				setState(3259);
				match(SPLAT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionSpecificationContext extends ParserRuleContext {
		public FunctionNameContext functionName() {
			return getRuleContext(FunctionNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<FunctionParameterTypeContext> functionParameterType() {
			return getRuleContexts(FunctionParameterTypeContext.class);
		}
		public FunctionParameterTypeContext functionParameterType(int i) {
			return getRuleContext(FunctionParameterTypeContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public FunctionSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFunctionSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFunctionSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFunctionSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionSpecificationContext functionSpecification() throws RecognitionException {
		FunctionSpecificationContext _localctx = new FunctionSpecificationContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_functionSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3262);
			functionName();
			setState(3274);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LPAREN) {
				{
				setState(3263);
				match(LPAREN);
				setState(3264);
				functionParameterType();
				setState(3269);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3265);
					match(COMMA);
					setState(3266);
					functionParameterType();
					}
					}
					setState(3271);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3272);
				match(RPAREN);
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GranteeContext extends ParserRuleContext {
		public AuthorizationNameContext authorizationName() {
			return getRuleContext(AuthorizationNameContext.class,0);
		}
		public TerminalNode PUBLIC() { return getToken(DB2zSQLParser.PUBLIC, 0); }
		public TerminalNode ROLE() { return getToken(DB2zSQLParser.ROLE, 0); }
		public RoleNameContext roleName() {
			return getRuleContext(RoleNameContext.class,0);
		}
		public GranteeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantee; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGrantee(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGrantee(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGrantee(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GranteeContext grantee() throws RecognitionException {
		GranteeContext _localctx = new GranteeContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_grantee);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3280);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,284,_ctx) ) {
			case 1:
				{
				setState(3276);
				authorizationName();
				}
				break;
			case 2:
				{
				{
				setState(3277);
				match(ROLE);
				setState(3278);
				roleName();
				}
				}
				break;
			case 3:
				{
				setState(3279);
				match(PUBLIC);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WithGrantOptionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode GRANT() { return getToken(DB2zSQLParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(DB2zSQLParser.OPTION, 0); }
		public WithGrantOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withGrantOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterWithGrantOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitWithGrantOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitWithGrantOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithGrantOptionContext withGrantOption() throws RecognitionException {
		WithGrantOptionContext _localctx = new WithGrantOptionContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_withGrantOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3282);
			match(WITH);
			setState(3283);
			match(GRANT);
			setState(3284);
			match(OPTION);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantDatabaseAuthorityContext extends ParserRuleContext {
		public TerminalNode DBADM() { return getToken(DB2zSQLParser.DBADM, 0); }
		public TerminalNode DBCTRL() { return getToken(DB2zSQLParser.DBCTRL, 0); }
		public TerminalNode DBMAINT() { return getToken(DB2zSQLParser.DBMAINT, 0); }
		public TerminalNode CREATETAB() { return getToken(DB2zSQLParser.CREATETAB, 0); }
		public TerminalNode CREATETS() { return getToken(DB2zSQLParser.CREATETS, 0); }
		public TerminalNode DISPLAYDB() { return getToken(DB2zSQLParser.DISPLAYDB, 0); }
		public TerminalNode DROP() { return getToken(DB2zSQLParser.DROP, 0); }
		public TerminalNode IMAGCOPY() { return getToken(DB2zSQLParser.IMAGCOPY, 0); }
		public TerminalNode LOAD() { return getToken(DB2zSQLParser.LOAD, 0); }
		public TerminalNode RECOVERDB() { return getToken(DB2zSQLParser.RECOVERDB, 0); }
		public TerminalNode REORG() { return getToken(DB2zSQLParser.REORG, 0); }
		public TerminalNode REPAIR() { return getToken(DB2zSQLParser.REPAIR, 0); }
		public TerminalNode STARTDB() { return getToken(DB2zSQLParser.STARTDB, 0); }
		public TerminalNode STATS() { return getToken(DB2zSQLParser.STATS, 0); }
		public TerminalNode STOPDB() { return getToken(DB2zSQLParser.STOPDB, 0); }
		public GrantDatabaseAuthorityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantDatabaseAuthority; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGrantDatabaseAuthority(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGrantDatabaseAuthority(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGrantDatabaseAuthority(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantDatabaseAuthorityContext grantDatabaseAuthority() throws RecognitionException {
		GrantDatabaseAuthorityContext _localctx = new GrantDatabaseAuthorityContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_grantDatabaseAuthority);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3286);
			_la = _input.LA(1);
			if ( !(_la==DROP || ((((_la - 655)) & ~0x3f) == 0 && ((1L << (_la - 655)) & ((1L << (CREATETAB - 655)) | (1L << (CREATETS - 655)) | (1L << (DBADM - 655)) | (1L << (DBCTRL - 655)) | (1L << (DBMAINT - 655)) | (1L << (DISPLAYDB - 655)) | (1L << (IMAGCOPY - 655)) | (1L << (LOAD - 655)) | (1L << (RECOVERDB - 655)) | (1L << (REORG - 655)) | (1L << (REPAIR - 655)) | (1L << (STARTDB - 655)) | (1L << (STATS - 655)) | (1L << (STOPDB - 655)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatementInformationContext extends ParserRuleContext {
		public List<StatementInformationVariableEquateContext> statementInformationVariableEquate() {
			return getRuleContexts(StatementInformationVariableEquateContext.class);
		}
		public StatementInformationVariableEquateContext statementInformationVariableEquate(int i) {
			return getRuleContext(StatementInformationVariableEquateContext.class,i);
		}
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public TerminalNode EQ() { return getToken(DB2zSQLParser.EQ, 0); }
		public TerminalNode DB2_GET_DIAGNOSTICS_DIAGNOSTICS() { return getToken(DB2zSQLParser.DB2_GET_DIAGNOSTICS_DIAGNOSTICS, 0); }
		public TerminalNode DB2_SQL_NESTING_LEVEL() { return getToken(DB2zSQLParser.DB2_SQL_NESTING_LEVEL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public StatementInformationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statementInformation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterStatementInformation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitStatementInformation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitStatementInformation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StatementInformationContext statementInformation() throws RecognitionException {
		StatementInformationContext _localctx = new StatementInformationContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_statementInformation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3304);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,286,_ctx) ) {
			case 1:
				{
				{
				setState(3288);
				statementInformationVariableEquate();
				setState(3293);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3289);
					match(COMMA);
					setState(3290);
					statementInformationVariableEquate();
					}
					}
					setState(3295);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case 2:
				{
				{
				setState(3296);
				variable();
				setState(3297);
				match(EQ);
				setState(3298);
				match(DB2_GET_DIAGNOSTICS_DIAGNOSTICS);
				}
				}
				break;
			case 3:
				{
				{
				setState(3300);
				variable();
				setState(3301);
				match(EQ);
				setState(3302);
				match(DB2_SQL_NESTING_LEVEL);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatementInformationVariableEquateContext extends ParserRuleContext {
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public TerminalNode EQ() { return getToken(DB2zSQLParser.EQ, 0); }
		public StatementInformationItemNameContext statementInformationItemName() {
			return getRuleContext(StatementInformationItemNameContext.class,0);
		}
		public StatementInformationVariableEquateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statementInformationVariableEquate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterStatementInformationVariableEquate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitStatementInformationVariableEquate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitStatementInformationVariableEquate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StatementInformationVariableEquateContext statementInformationVariableEquate() throws RecognitionException {
		StatementInformationVariableEquateContext _localctx = new StatementInformationVariableEquateContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_statementInformationVariableEquate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3306);
			variable();
			setState(3307);
			match(EQ);
			setState(3308);
			statementInformationItemName();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatementInformationItemNameContext extends ParserRuleContext {
		public TerminalNode DB2_LAST_ROW() { return getToken(DB2zSQLParser.DB2_LAST_ROW, 0); }
		public TerminalNode DB2_NUMBER_PARAMETER_MARKERS() { return getToken(DB2zSQLParser.DB2_NUMBER_PARAMETER_MARKERS, 0); }
		public TerminalNode DB2_NUMBER_RESULT_SETS() { return getToken(DB2zSQLParser.DB2_NUMBER_RESULT_SETS, 0); }
		public TerminalNode DB2_NUMBER_ROWS() { return getToken(DB2zSQLParser.DB2_NUMBER_ROWS, 0); }
		public TerminalNode DB2_RETURN_STATUS() { return getToken(DB2zSQLParser.DB2_RETURN_STATUS, 0); }
		public TerminalNode DB2_SQL_ATTR_CURSOR_HOLD() { return getToken(DB2zSQLParser.DB2_SQL_ATTR_CURSOR_HOLD, 0); }
		public TerminalNode DB2_SQL_ATTR_CURSOR_ROWSET() { return getToken(DB2zSQLParser.DB2_SQL_ATTR_CURSOR_ROWSET, 0); }
		public TerminalNode DB2_SQL_ATTR_CURSOR_SCROLLABLE() { return getToken(DB2zSQLParser.DB2_SQL_ATTR_CURSOR_SCROLLABLE, 0); }
		public TerminalNode DB2_SQL_ATTR_CURSOR_SENSITIVITY() { return getToken(DB2zSQLParser.DB2_SQL_ATTR_CURSOR_SENSITIVITY, 0); }
		public TerminalNode DB2_SQL_ATTR_CURSOR_TYPE() { return getToken(DB2zSQLParser.DB2_SQL_ATTR_CURSOR_TYPE, 0); }
		public TerminalNode MORE_() { return getToken(DB2zSQLParser.MORE_, 0); }
		public TerminalNode NUMBER() { return getToken(DB2zSQLParser.NUMBER, 0); }
		public TerminalNode ROW_COUNT() { return getToken(DB2zSQLParser.ROW_COUNT, 0); }
		public StatementInformationItemNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statementInformationItemName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterStatementInformationItemName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitStatementInformationItemName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitStatementInformationItemName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StatementInformationItemNameContext statementInformationItemName() throws RecognitionException {
		StatementInformationItemNameContext _localctx = new StatementInformationItemNameContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_statementInformationItemName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3310);
			_la = _input.LA(1);
			if ( !(((((_la - 619)) & ~0x3f) == 0 && ((1L << (_la - 619)) & ((1L << (DB2_LAST_ROW - 619)) | (1L << (DB2_NUMBER_PARAMETER_MARKERS - 619)) | (1L << (DB2_NUMBER_RESULT_SETS - 619)) | (1L << (DB2_NUMBER_ROWS - 619)) | (1L << (DB2_RETURN_STATUS - 619)) | (1L << (DB2_SQL_ATTR_CURSOR_HOLD - 619)) | (1L << (DB2_SQL_ATTR_CURSOR_ROWSET - 619)) | (1L << (DB2_SQL_ATTR_CURSOR_SCROLLABLE - 619)) | (1L << (DB2_SQL_ATTR_CURSOR_SENSITIVITY - 619)) | (1L << (DB2_SQL_ATTR_CURSOR_TYPE - 619)) | (1L << (MORE_ - 619)) | (1L << (NUMBER - 619)) | (1L << (ROW_COUNT - 619)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConditionInformationContext extends ParserRuleContext {
		public TerminalNode CONDITION() { return getToken(DB2zSQLParser.CONDITION, 0); }
		public List<ConditionInformationVariableEquateContext> conditionInformationVariableEquate() {
			return getRuleContexts(ConditionInformationVariableEquateContext.class);
		}
		public ConditionInformationVariableEquateContext conditionInformationVariableEquate(int i) {
			return getRuleContext(ConditionInformationVariableEquateContext.class,i);
		}
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public ConditionInformationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditionInformation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterConditionInformation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitConditionInformation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitConditionInformation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConditionInformationContext conditionInformation() throws RecognitionException {
		ConditionInformationContext _localctx = new ConditionInformationContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_conditionInformation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3312);
			match(CONDITION);
			setState(3315);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COLON:
			case INSTEAD:
			case NEW:
			case NEW_TABLE:
			case OLD_TABLE:
			case REFERENCING:
			case BASED:
			case UPON:
			case ADD:
			case AFTER:
			case ALL:
			case ALLOCATE:
			case ALLOW:
			case ALTER:
			case ALTERAND:
			case ANY:
			case ARRAY:
			case ARRAY_EXISTS:
			case AS:
			case ASENSITIVE:
			case ASSOCIATE:
			case ASUTIME:
			case AT:
			case AUDIT:
			case AUX:
			case AUXILIARY:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BUFFERPOOL:
			case BUFFERPOOLS:
			case BY:
			case CALL:
			case CAPTURE:
			case CASCADED:
			case CASE:
			case CAST:
			case CCSID:
			case CHAR:
			case CHARACTER:
			case CHECK:
			case CLONE:
			case CLOSE:
			case CLUSTER:
			case COLLECTION:
			case COLLID:
			case COLUMN:
			case COMMENT:
			case COMMIT:
			case CONCAT:
			case CONDITION:
			case CONNECT:
			case CONNECTION:
			case CONSTRAINT:
			case CONTAINS:
			case CONTENT:
			case CONTINUE:
			case CREATE:
			case CUBE:
			case CURRENT:
			case CURRENT_LC_CTYPE:
			case CURRVAL:
			case CURSOR:
			case DATA:
			case DATABASE:
			case DAY:
			case DAYS:
			case DBINFO:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DISABLE:
			case DISALLOW:
			case DISTINCT:
			case DO:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSSIZE:
			case DYNAMIC:
			case EDITPROC:
			case ELSE:
			case ELSEIF:
			case ENCODING:
			case ENCRYPTION:
			case END:
			case END_EXEC:
			case ENDING:
			case ERASE:
			case ESCAPE:
			case EXCEPT:
			case EXCEPTION:
			case EXEC_SQL:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case FENCED:
			case FETCH:
			case FIELDPROC:
			case FINAL:
			case FIRST:
			case FOR:
			case FREE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANT:
			case GROUP:
			case HANDLER:
			case HAVING:
			case HOLD:
			case HOUR:
			case HOURS:
			case IF:
			case IMMEDIATE:
			case IN:
			case INCLUSIVE:
			case INDEX:
			case INDEXBP:
			case INHERIT:
			case INNER:
			case INOUT:
			case INSENSITIVE:
			case INSERT:
			case INTERSECT:
			case INTO:
			case IS:
			case ISOBID:
			case ITERATE:
			case JAR:
			case JOIN:
			case KEEP:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LAST:
			case LC_CTYPE:
			case LEAVE:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOCALE:
			case LOCATOR:
			case LOCATORS:
			case LOCK:
			case LOCKMAX:
			case LOCKSIZE:
			case LONG:
			case LOOP:
			case MAINTAINED:
			case MATERIALIZED:
			case MICROSECOND:
			case MICROSECONDS:
			case MODIFIES:
			case MONTH:
			case MONTHS:
			case NEXT:
			case NEXTVAL:
			case NO:
			case NONE:
			case NOT:
			case NULL:
			case NULLS:
			case NUMPARTS:
			case OBID:
			case OF:
			case OFFSET:
			case OLD:
			case ON:
			case OPEN:
			case OPTIMIZATION:
			case OPTIMIZE:
			case OR:
			case ORDER:
			case ORGANIZATION:
			case OUT:
			case OUTER:
			case PACKAGE:
			case PADDED:
			case PARAMETER:
			case PART:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONING:
			case PATH:
			case PERIOD:
			case PIECESIZE:
			case PLAN:
			case PRECISION:
			case PREPARE:
			case PREVVAL:
			case PRIOR:
			case PRIQTY:
			case PRIVILEGES:
			case PROCEDURE:
			case PROGRAM:
			case PSID:
			case PUBLIC:
			case QUERY:
			case QUERYNO:
			case READS:
			case REFERENCES:
			case REFRESH:
			case RELEASE:
			case RENAME:
			case REPEAT:
			case RESIGNAL:
			case RESTRICT:
			case RESULT:
			case RESULT_SET_LOCATOR:
			case RETURN:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUND_CEILING:
			case ROUND_DOWN:
			case ROUND_FLOOR:
			case ROUND_HALF_DOWN:
			case ROUND_HALF_EVEN:
			case ROUND_HALF_UP:
			case ROUND_UP:
			case ROW:
			case ROWSET:
			case RUN:
			case SAVEPOINT:
			case SCHEMA:
			case SCRATCHPAD:
			case SECOND:
			case SECONDS:
			case SECQTY:
			case SECURITY:
			case SELECT:
			case SENSITIVE:
			case SEQUENCE:
			case SET:
			case SIGNAL:
			case SIMPLE:
			case SOME:
			case SOURCE:
			case SPECIFIC:
			case STANDARD:
			case STATEMENT:
			case STATIC:
			case STAY:
			case STOGROUP:
			case STORES:
			case STYLE:
			case SUMMARY:
			case SYNONYM:
			case SYSDATE:
			case SYSTEM:
			case SYSTIMESTAMP:
			case TABLE:
			case TABLESPACE:
			case THEN:
			case TO:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNDO:
			case UNION:
			case UNIQUE:
			case UNTIL:
			case UPDATE:
			case USING:
			case VALIDPROC:
			case VALUE:
			case VALUES:
			case VARIABLE:
			case VARIANT:
			case VCAT:
			case VERSIONING:
			case VIEW:
			case VOLATILE:
			case VOLUMES:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WLM:
			case XMLCAST:
			case XMLEXISTS:
			case XMLNAMESPACES:
			case YEAR:
			case YEARS:
			case ZONE:
			case AND:
			case ARRAY_AGG:
			case ASC:
			case AVG:
			case BIT:
			case CHANGE:
			case CODEUNITS16:
			case CODEUNITS32:
			case CORR:
			case CORRELATION:
			case COUNT:
			case COUNT_BIG:
			case COVAR:
			case COVARIANCE:
			case COVARIANCE_SAMP:
			case COVAR_POP:
			case COVAR_SAMP:
			case CS:
			case CUME_DIST:
			case DENSE_RANK:
			case DESC:
			case EBCDIC:
			case EXCLUSIVE:
			case FIRST_VALUE:
			case FOLLOWING:
			case GROUPING:
			case IGNORE:
			case INDICATOR:
			case INPUT:
			case ISNULL:
			case LAG:
			case LARGE:
			case LAST_VALUE:
			case LEAD:
			case LISTAGG:
			case LOCKED:
			case LOCKS:
			case MEDIAN:
			case MINUTES:
			case MIXED:
			case NOTNULL:
			case NTH_VALUE:
			case NTILE:
			case NUMERIC:
			case OBJECT:
			case OCTETS:
			case ONLY:
			case OVER:
			case PASSING:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PERCENT_RANK:
			case PRECEDING:
			case PREVIOUS:
			case RANGE:
			case RANK:
			case RATIO_TO_REPORT:
			case READ:
			case REF:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_ICPT:
			case REGR_INTERCEPT:
			case REGR_R2:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case RESPECT:
			case ROW_NUMBER:
			case ROWS:
			case RR:
			case RS:
			case SBCS:
			case SELECTIVITY:
			case SETS:
			case SHARE:
			case SKIP_:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case TOKEN:
			case UNBOUNDED:
			case UNPACK:
			case UR:
			case USE:
			case VAR:
			case VARIANCE:
			case VARIANCE_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARYING:
			case WITHOUT:
			case XML:
			case XMLAGG:
			case COLUMNS:
			case SQLID:
			case ORDINALITY:
			case SYSTEM_TIME:
			case BUSINESS_TIME:
			case MULTIPLIER:
			case UNNEST:
			case CROSS:
			case CALLER:
			case CLIENT:
			case POSITIONING:
			case SCROLL:
			case ACTION:
			case ASSEMBLE:
			case C_:
			case CALLED:
			case COBOL:
			case DB2:
			case DEFINER:
			case DISPATCH:
			case ENVIRONMENT:
			case FAILURE:
			case FAILURES:
			case JAVA:
			case MAIN:
			case NAME:
			case OPTIONS:
			case PARALLEL:
			case PLI:
			case REGISTERS:
			case RESIDENT:
			case SECURED:
			case SPECIAL:
			case SQL:
			case STOP:
			case SUB:
			case YES:
			case APPLICATION:
			case CHANGED:
			case COMPATIBILITY:
			case COMPRESS:
			case COPY:
			case FREEPAGE:
			case GBPCACHE:
			case INCLUDE:
			case MAXVALUE:
			case MINVALUE:
			case PCTFREE:
			case REGENERATE:
			case MASK:
			case ENABLE:
			case PERMISSION:
			case ATOMIC:
			case SQLEXCEPTION:
			case MERGE:
			case MATCHED:
			case SQLSTATE:
			case MESSAGE_TEXT:
			case OVERRIDING:
			case PORTION:
			case DB2SQL:
			case DEBUG:
			case GENERAL:
			case MODE_:
			case REXX:
			case CACHE:
			case CYCLE:
			case INCREMENT:
			case RESTART:
			case DATACLAS:
			case MGMTCLAS:
			case REMOVE:
			case STORCLAS:
			case ACCESS:
			case ACTIVATE:
			case ALWAYS:
			case APPEND:
			case ARCHIVE:
			case BUSINESS:
			case CASCADE:
			case CHANGES:
			case CONTROL:
			case DEACTIVATE:
			case DEFERRED:
			case EACH:
			case ENFORCED:
			case EXTRA:
			case FOREIGN:
			case HIDDEN_:
			case HISTORY:
			case ID:
			case IDENTITY:
			case IMPLICITLY:
			case INITIALLY:
			case INLINE:
			case OPERATION:
			case ORGANIZE:
			case OVERLAPS:
			case PACKAGE_NAME:
			case PACKAGE_SCHEMA:
			case PACKAGE_VERSION:
			case PRIMARY:
			case RESET:
			case ROTATE:
			case START:
			case SYSIBM:
			case TRANSACTION:
			case XMLSCHEMA:
			case ELEMENT:
			case URL:
			case NAMESPACE:
			case LOCATION:
			case SYSXSR:
			case ALGORITHM:
			case FIXEDLENGTH:
			case HUFFMAN:
			case LOB:
			case LOG:
			case LOGGED:
			case MAXPARTITIONS:
			case MAXROWS:
			case MEMBER:
			case MOVE:
			case PAGE:
			case PAGENUM:
			case PENDING:
			case RELATIVE:
			case SEGSIZE:
			case TRACKMOD:
			case ADDRESS:
			case ATTRIBUTES:
			case AUTHENTICATION:
			case AUTHID:
			case CONTEXT:
			case JOBNAME:
			case OWNER:
			case PROFILE:
			case QUALIFIER:
			case SERVAUTH:
			case TRUSTED:
			case SECTION:
			case ACTIVE:
			case VERSION:
			case ALIAS:
			case WORK:
			case WORKFILE:
			case SYSDEFLT:
			case NULTERM:
			case STRUCTURE:
			case GENERIC:
			case TEMPORARY:
			case DEFER:
			case DEFINE:
			case EXCLUDE:
			case GENERATE:
			case KEYS:
			case XMLPATTERN:
			case SIZE:
			case EVERY:
			case ABSOLUTE:
			case ACCELERATOR:
			case EXCLUDING:
			case INCLUDING:
			case DEFAULTS:
			case MODIFIERS:
			case OPTION:
			case PRESERVE:
			case BOTH:
			case DESCRIBE:
			case LABELS:
			case NAMES:
			case OUTPUT:
			case EXCHANGE:
			case STABILIZED:
			case STMTCACHE:
			case STMTID:
			case STMTTOKEN:
			case STARTING:
			case CATALOG_NAME:
			case CONDITION_NUMBER:
			case CURSOR_NAME:
			case DB2_AUTHENTICATION_TYPE:
			case DB2_AUTHORIZATION_ID:
			case DB2_CONNECTION_STATE:
			case DB2_CONNECTION_STATUS:
			case DB2_ENCRYPTION_TYPE:
			case DB2_ERROR_CODE1:
			case DB2_ERROR_CODE2:
			case DB2_ERROR_CODE3:
			case DB2_ERROR_CODE4:
			case DB2_GET_DIAGNOSTICS_DIAGNOSTICS:
			case DB2_INTERNAL_ERROR_POINTER:
			case DB2_LAST_ROW:
			case DB2_LINE_NUMBER:
			case DB2_MESSAGE_ID:
			case DB2_MODULE_DETECTING_ERROR:
			case DB2_NUMBER_PARAMETER_MARKERS:
			case DB2_NUMBER_RESULT_SETS:
			case DB2_NUMBER_ROWS:
			case DB2_ORDINAL_TOKEN_:
			case DB2_PRODUCT_ID:
			case DB2_REASON_CODE:
			case DB2_RETURNED_SQLCODE:
			case DB2_RETURN_STATUS:
			case DB2_ROW_NUMBER:
			case DB2_SERVER_CLASS_NAME:
			case DB2_SQL_ATTR_CURSOR_HOLD:
			case DB2_SQL_ATTR_CURSOR_ROWSET:
			case DB2_SQL_ATTR_CURSOR_SCROLLABLE:
			case DB2_SQL_ATTR_CURSOR_SENSITIVITY:
			case DB2_SQL_ATTR_CURSOR_TYPE:
			case DB2_SQLERRD1:
			case DB2_SQLERRD2:
			case DB2_SQLERRD3:
			case DB2_SQLERRD4:
			case DB2_SQLERRD5:
			case DB2_SQLERRD6:
			case DB2_SQLERRD_SET:
			case DB2_SQL_NESTING_LEVEL:
			case DB2_TOKEN_COUNT:
			case DIAGNOSTICS:
			case MORE_:
			case NUMBER:
			case RETURNED_SQLSTATE:
			case ROW_COUNT:
			case SERVER_NAME:
			case STACKED:
			case CREATETAB:
			case CREATETS:
			case DBADM:
			case DBCTRL:
			case DBMAINT:
			case DISPLAYDB:
			case IMAGCOPY:
			case LOAD:
			case PACKADM:
			case RECOVERDB:
			case REORG:
			case REPAIR:
			case STARTDB:
			case STATS:
			case STOPDB:
			case BIND:
			case ALTERIN:
			case CREATEIN:
			case DROPIN:
			case USAGE:
			case ACCESSCTRL:
			case BINDADD:
			case BINDAGENT:
			case BSDS:
			case CREATEALIAS:
			case CREATEDBA:
			case CREATEDBC:
			case CREATE_SECURE_OBJECT:
			case CREATESG:
			case CREATETMTAB:
			case DATAACCESS:
			case DEBUGSESSION:
			case DISPLAY:
			case MONITOR1:
			case MONITOR2:
			case RECOVER:
			case SQLADM:
			case STOPALL:
			case STOSPACE:
			case SYSADM:
			case SYSCTRL:
			case SYSOPR:
			case TRACE:
			case UNLOAD:
			case WRITE:
			case ABS:
			case ABSVAL:
			case ACOS:
			case ADD_DAYS:
			case ADD_MONTHS:
			case ARRAY_DELETE:
			case ARRAY_FIRST:
			case ARRAY_LAST:
			case ARRAY_NEXT:
			case ARRAY_PRIOR:
			case ARRAY_TRIM:
			case ASCII:
			case ASCII_CHR:
			case ASCIISTR:
			case ASCII_STR:
			case ASIN:
			case ATAN:
			case ATAN2:
			case ATANH:
			case BIGINT:
			case BINARY:
			case BITAND:
			case BITANDNOT:
			case BITNOT:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BTRIM:
			case CARDINALITY:
			case CCSID_ENCODING:
			case CEIL:
			case CEILING:
			case CHAR9:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case CHR:
			case CLOB:
			case COALESCE:
			case COLLATION_KEY:
			case COMPARE_DECFLOAT:
			case COS:
			case COSH:
			case DATE:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFWEEK_ISO:
			case DAYOFYEAR:
			case DAYS_BETWEEN:
			case DBCLOB:
			case DEC:
			case DECFLOAT:
			case DECFLOAT_FORMAT:
			case DECFLOAT_SORTKEY:
			case DECIMAL:
			case DECODE:
			case DECRYPT_BINARY:
			case DECRYPT_BIT:
			case DECRYPT_CHAR:
			case DECRYPT_DATAKEY_BIGINT:
			case DECRYPT_DATAKEY_BIT:
			case DECRYPT_DATAKEY_CLOB:
			case DECRYPT_DATAKEY_DBCLOB:
			case DECRYPT_DATAKEY_DECIMAL:
			case DECRYPT_DATAKEY_INTEGER:
			case DECRYPT_DATAKEY_VARCHAR:
			case DECRYPT_DATAKEY_VARGRAPHIC:
			case DECRYPT_DB:
			case DEGREES:
			case DIFFERENCE:
			case DIGITS:
			case DOUBLE_PRECISION:
			case DSN_XMLVALIDATE:
			case EBCDIC_CHR:
			case EBCDIC_STR:
			case ENCRYPT_DATAKEY:
			case ENCRYPT_TDES:
			case EXP:
			case EXTRACT:
			case FLOAT:
			case FLOOR:
			case GENERATE_UNIQUE:
			case GENERATE_UNIQUE_BINARY:
			case GETHINT:
			case GETVARIABLE:
			case GRAPHIC:
			case GREATEST:
			case HASH:
			case HASH_CRC32:
			case HASH_MD5:
			case HASH_SHA1:
			case HASH_SHA256:
			case HEX:
			case IDENTITY_VAL_LOCAL:
			case IFNULL:
			case INSTR:
			case INT:
			case INTEGER:
			case JULIAN_DAY:
			case LAST_DAY:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LN:
			case LOCATE:
			case LOCATE_IN_STRING:
			case LOG10:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAX:
			case MAX_CARDINALITY:
			case MIDNIGHT_SECONDS:
			case MIN:
			case MINUTE:
			case MOD:
			case MONTHS_BETWEEN:
			case MQREAD:
			case MQREADCLOB:
			case MQRECEIVE:
			case MQRECEIVECLOB:
			case MQSEND:
			case MULTIPLY_ALT:
			case NEXT_DAY:
			case NEXT_MONTH:
			case NORMALIZE_DECFLOAT:
			case NORMALIZE_STRING:
			case NULLIF:
			case NVL:
			case OVERLAY:
			case PACK:
			case POSITION:
			case POSSTR:
			case POW:
			case POWER:
			case QUANTIZE:
			case QUARTER:
			case RADIANS:
			case RAISE_ERROR:
			case RAND:
			case RANDOM:
			case REAL:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REPLACE:
			case RID:
			case ROUND:
			case ROUND_TIMESTAMP:
			case ROWID:
			case RPAD:
			case RTRIM:
			case SCORE:
			case SIGN:
			case SIN:
			case SINH:
			case SMALLINT:
			case SOAPHTTPC:
			case SOAPHTTPNC:
			case SOAPHTTPNV:
			case SOAPHTTPV:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STRIP:
			case STRLEFT:
			case STRPOS:
			case STRRIGHT:
			case SUBSTR:
			case SUBSTRING:
			case TAN:
			case TANH:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIMESTAMP_FORMAT:
			case TIMESTAMP_ISO:
			case TIMESTAMP_TZ:
			case TO_CHAR:
			case TO_CLOB:
			case TO_DATE:
			case TO_NUMBER:
			case TOTALORDER:
			case TO_TIMESTAMP:
			case TRANSLATE:
			case TRIM:
			case TRIM_ARRAY:
			case TRUNC:
			case TRUNC_TIMESTAMP:
			case UCASE:
			case UNICODE:
			case UNICODE_STR:
			case UNISTR:
			case UPPER:
			case VARBINARY:
			case VARCHAR:
			case VARCHAR9:
			case VARCHAR_BIT_FORMAT:
			case VARCHAR_FORMAT:
			case VARGRAPHIC:
			case VERIFY_GROUP_FOR_USER:
			case VERIFY_ROLE_FOR_USER:
			case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
			case WEEK:
			case WEEK_ISO:
			case WRAP:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLCONCAT:
			case XMLDOCUMENT:
			case XMLELEMENT:
			case XMLFOREST:
			case XMLMODIFY:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLSERIALIZE:
			case XMLTEXT:
			case XMLXSROBJECTID:
			case XSLTRANSFORM:
			case CURRENT_ACCELERATOR:
			case CURRENT_APPLICATION_COMPATIBILITY:
			case CURRENT_APPLICATION_ENCODING_SCHEME:
			case CURRENT_CLIENT_ACCTNG:
			case CURRENT_CLIENT_APPLNAME:
			case CURRENT_CLIENT_CORR_TOKEN:
			case CURRENT_CLIENT_USERID:
			case CURRENT_CLIENT_WRKSTNNAME:
			case CURRENT_DATE:
			case CURRENT_DEBUG_MODE:
			case CURRENT_DECFLOAT_ROUNDING_MODE:
			case CURRENT_DEGREE:
			case CURRENT_EXPLAIN_MODE:
			case CURRENT_GET_ACCEL_ARCHIVE:
			case CURRENT_LOCALE_LC_CTYPE:
			case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
			case CURRENT_MEMBER:
			case CURRENT_OPTIMIZATION_HINT:
			case CURRENT_PACKAGE_PATH:
			case CURRENT_PACKAGESET:
			case CURRENT_PATH:
			case CURRENT_PRECISION:
			case CURRENT_QUERY_ACCELERATION:
			case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
			case CURRENT_REFRESH_AGE:
			case CURRENT_ROUTINE_VERSION:
			case CURRENT_RULES:
			case CURRENT_SCHEMA:
			case CURRENT_SERVER:
			case CURRENT_SQLID:
			case CURRENT_TEMPORAL_BUSINESS_TIME:
			case CURRENT_TEMPORAL_SYSTEM_TIME:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_TIME_ZONE:
			case ENCRYPTION_PASSWORD:
			case SESSION_TIME_ZONE:
			case SESSION_USER:
			case USER:
			case ADMIN_TASK_LIST:
			case ADMIN_TASK_OUTPUT:
			case ADMIN_TASK_STATUS:
			case BLOCKING_THREADS:
			case MQREADALL:
			case MQREADALLCLOB:
			case MQRECEIVEALL:
			case MQRECEIVEALLCLOB:
			case XMLTABLE:
			case SQLIDENTIFIER:
				{
				setState(3313);
				variable();
				}
				break;
			case INTEGERLITERAL:
				{
				setState(3314);
				match(INTEGERLITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3317);
			conditionInformationVariableEquate();
			setState(3322);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3318);
				match(COMMA);
				setState(3319);
				conditionInformationVariableEquate();
				}
				}
				setState(3324);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConditionInformationVariableEquateContext extends ParserRuleContext {
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public TerminalNode EQ() { return getToken(DB2zSQLParser.EQ, 0); }
		public ConditionInformationItemNameContext conditionInformationItemName() {
			return getRuleContext(ConditionInformationItemNameContext.class,0);
		}
		public ConnectionInformationItemNameContext connectionInformationItemName() {
			return getRuleContext(ConnectionInformationItemNameContext.class,0);
		}
		public ConditionInformationVariableEquateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditionInformationVariableEquate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterConditionInformationVariableEquate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitConditionInformationVariableEquate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitConditionInformationVariableEquate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConditionInformationVariableEquateContext conditionInformationVariableEquate() throws RecognitionException {
		ConditionInformationVariableEquateContext _localctx = new ConditionInformationVariableEquateContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_conditionInformationVariableEquate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3325);
			variable();
			setState(3326);
			match(EQ);
			setState(3329);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MESSAGE_TEXT:
			case CATALOG_NAME:
			case CONDITION_NUMBER:
			case CURSOR_NAME:
			case DB2_ERROR_CODE1:
			case DB2_ERROR_CODE2:
			case DB2_ERROR_CODE3:
			case DB2_ERROR_CODE4:
			case DB2_INTERNAL_ERROR_POINTER:
			case DB2_LINE_NUMBER:
			case DB2_MESSAGE_ID:
			case DB2_MODULE_DETECTING_ERROR:
			case DB2_ORDINAL_TOKEN_n:
			case DB2_REASON_CODE:
			case DB2_RETURNED_SQLCODE:
			case DB2_ROW_NUMBER:
			case DB2_SQLERRD1:
			case DB2_SQLERRD2:
			case DB2_SQLERRD3:
			case DB2_SQLERRD4:
			case DB2_SQLERRD5:
			case DB2_SQLERRD6:
			case DB2_SQLERRD_SET:
			case DB2_TOKEN_COUNT:
			case RETURNED_SQLSTATE:
			case SERVER_NAME:
				{
				setState(3327);
				conditionInformationItemName();
				}
				break;
			case DB2_AUTHENTICATION_TYPE:
			case DB2_AUTHORIZATION_ID:
			case DB2_CONNECTION_STATE:
			case DB2_CONNECTION_STATUS:
			case DB2_ENCRYPTION_TYPE:
			case DB2_PRODUCT_ID:
			case DB2_SERVER_CLASS_NAME:
				{
				setState(3328);
				connectionInformationItemName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConditionInformationItemNameContext extends ParserRuleContext {
		public TerminalNode CATALOG_NAME() { return getToken(DB2zSQLParser.CATALOG_NAME, 0); }
		public TerminalNode CONDITION_NUMBER() { return getToken(DB2zSQLParser.CONDITION_NUMBER, 0); }
		public TerminalNode CURSOR_NAME() { return getToken(DB2zSQLParser.CURSOR_NAME, 0); }
		public TerminalNode DB2_ERROR_CODE1() { return getToken(DB2zSQLParser.DB2_ERROR_CODE1, 0); }
		public TerminalNode DB2_ERROR_CODE2() { return getToken(DB2zSQLParser.DB2_ERROR_CODE2, 0); }
		public TerminalNode DB2_ERROR_CODE3() { return getToken(DB2zSQLParser.DB2_ERROR_CODE3, 0); }
		public TerminalNode DB2_ERROR_CODE4() { return getToken(DB2zSQLParser.DB2_ERROR_CODE4, 0); }
		public TerminalNode DB2_INTERNAL_ERROR_POINTER() { return getToken(DB2zSQLParser.DB2_INTERNAL_ERROR_POINTER, 0); }
		public TerminalNode DB2_LINE_NUMBER() { return getToken(DB2zSQLParser.DB2_LINE_NUMBER, 0); }
		public TerminalNode DB2_MESSAGE_ID() { return getToken(DB2zSQLParser.DB2_MESSAGE_ID, 0); }
		public TerminalNode DB2_MODULE_DETECTING_ERROR() { return getToken(DB2zSQLParser.DB2_MODULE_DETECTING_ERROR, 0); }
		public TerminalNode DB2_ORDINAL_TOKEN_n() { return getToken(DB2zSQLParser.DB2_ORDINAL_TOKEN_n, 0); }
		public TerminalNode DB2_REASON_CODE() { return getToken(DB2zSQLParser.DB2_REASON_CODE, 0); }
		public TerminalNode DB2_RETURNED_SQLCODE() { return getToken(DB2zSQLParser.DB2_RETURNED_SQLCODE, 0); }
		public TerminalNode DB2_ROW_NUMBER() { return getToken(DB2zSQLParser.DB2_ROW_NUMBER, 0); }
		public TerminalNode DB2_SQLERRD_SET() { return getToken(DB2zSQLParser.DB2_SQLERRD_SET, 0); }
		public TerminalNode DB2_SQLERRD1() { return getToken(DB2zSQLParser.DB2_SQLERRD1, 0); }
		public TerminalNode DB2_SQLERRD2() { return getToken(DB2zSQLParser.DB2_SQLERRD2, 0); }
		public TerminalNode DB2_SQLERRD3() { return getToken(DB2zSQLParser.DB2_SQLERRD3, 0); }
		public TerminalNode DB2_SQLERRD4() { return getToken(DB2zSQLParser.DB2_SQLERRD4, 0); }
		public TerminalNode DB2_SQLERRD5() { return getToken(DB2zSQLParser.DB2_SQLERRD5, 0); }
		public TerminalNode DB2_SQLERRD6() { return getToken(DB2zSQLParser.DB2_SQLERRD6, 0); }
		public TerminalNode DB2_TOKEN_COUNT() { return getToken(DB2zSQLParser.DB2_TOKEN_COUNT, 0); }
		public TerminalNode MESSAGE_TEXT() { return getToken(DB2zSQLParser.MESSAGE_TEXT, 0); }
		public TerminalNode RETURNED_SQLSTATE() { return getToken(DB2zSQLParser.RETURNED_SQLSTATE, 0); }
		public TerminalNode SERVER_NAME() { return getToken(DB2zSQLParser.SERVER_NAME, 0); }
		public ConditionInformationItemNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditionInformationItemName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterConditionInformationItemName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitConditionInformationItemName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitConditionInformationItemName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConditionInformationItemNameContext conditionInformationItemName() throws RecognitionException {
		ConditionInformationItemNameContext _localctx = new ConditionInformationItemNameContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_conditionInformationItemName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3331);
			_la = _input.LA(1);
			if ( !(_la==MESSAGE_TEXT || ((((_la - 605)) & ~0x3f) == 0 && ((1L << (_la - 605)) & ((1L << (CATALOG_NAME - 605)) | (1L << (CONDITION_NUMBER - 605)) | (1L << (CURSOR_NAME - 605)) | (1L << (DB2_ERROR_CODE1 - 605)) | (1L << (DB2_ERROR_CODE2 - 605)) | (1L << (DB2_ERROR_CODE3 - 605)) | (1L << (DB2_ERROR_CODE4 - 605)) | (1L << (DB2_INTERNAL_ERROR_POINTER - 605)) | (1L << (DB2_LINE_NUMBER - 605)) | (1L << (DB2_MESSAGE_ID - 605)) | (1L << (DB2_MODULE_DETECTING_ERROR - 605)) | (1L << (DB2_ORDINAL_TOKEN_n - 605)) | (1L << (DB2_REASON_CODE - 605)) | (1L << (DB2_RETURNED_SQLCODE - 605)) | (1L << (DB2_ROW_NUMBER - 605)) | (1L << (DB2_SQLERRD1 - 605)) | (1L << (DB2_SQLERRD2 - 605)) | (1L << (DB2_SQLERRD3 - 605)) | (1L << (DB2_SQLERRD4 - 605)) | (1L << (DB2_SQLERRD5 - 605)) | (1L << (DB2_SQLERRD6 - 605)) | (1L << (DB2_SQLERRD_SET - 605)) | (1L << (DB2_TOKEN_COUNT - 605)) | (1L << (RETURNED_SQLSTATE - 605)) | (1L << (SERVER_NAME - 605)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConnectionInformationItemNameContext extends ParserRuleContext {
		public TerminalNode DB2_AUTHENTICATION_TYPE() { return getToken(DB2zSQLParser.DB2_AUTHENTICATION_TYPE, 0); }
		public TerminalNode DB2_AUTHORIZATION_ID() { return getToken(DB2zSQLParser.DB2_AUTHORIZATION_ID, 0); }
		public TerminalNode DB2_CONNECTION_STATE() { return getToken(DB2zSQLParser.DB2_CONNECTION_STATE, 0); }
		public TerminalNode DB2_CONNECTION_STATUS() { return getToken(DB2zSQLParser.DB2_CONNECTION_STATUS, 0); }
		public TerminalNode DB2_ENCRYPTION_TYPE() { return getToken(DB2zSQLParser.DB2_ENCRYPTION_TYPE, 0); }
		public TerminalNode DB2_SERVER_CLASS_NAME() { return getToken(DB2zSQLParser.DB2_SERVER_CLASS_NAME, 0); }
		public TerminalNode DB2_PRODUCT_ID() { return getToken(DB2zSQLParser.DB2_PRODUCT_ID, 0); }
		public ConnectionInformationItemNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_connectionInformationItemName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterConnectionInformationItemName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitConnectionInformationItemName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitConnectionInformationItemName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConnectionInformationItemNameContext connectionInformationItemName() throws RecognitionException {
		ConnectionInformationItemNameContext _localctx = new ConnectionInformationItemNameContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_connectionInformationItemName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3333);
			_la = _input.LA(1);
			if ( !(((((_la - 608)) & ~0x3f) == 0 && ((1L << (_la - 608)) & ((1L << (DB2_AUTHENTICATION_TYPE - 608)) | (1L << (DB2_AUTHORIZATION_ID - 608)) | (1L << (DB2_CONNECTION_STATE - 608)) | (1L << (DB2_CONNECTION_STATUS - 608)) | (1L << (DB2_ENCRYPTION_TYPE - 608)) | (1L << (DB2_PRODUCT_ID - 608)) | (1L << (DB2_SERVER_CLASS_NAME - 608)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CombinedInformationContext extends ParserRuleContext {
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public TerminalNode EQ() { return getToken(DB2zSQLParser.EQ, 0); }
		public TerminalNode ALL() { return getToken(DB2zSQLParser.ALL, 0); }
		public List<CombinedInformationOptionContext> combinedInformationOption() {
			return getRuleContexts(CombinedInformationOptionContext.class);
		}
		public CombinedInformationOptionContext combinedInformationOption(int i) {
			return getRuleContext(CombinedInformationOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public CombinedInformationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_combinedInformation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCombinedInformation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCombinedInformation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCombinedInformation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CombinedInformationContext combinedInformation() throws RecognitionException {
		CombinedInformationContext _localctx = new CombinedInformationContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_combinedInformation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3335);
			variable();
			setState(3336);
			match(EQ);
			setState(3337);
			match(ALL);
			setState(3338);
			combinedInformationOption();
			setState(3343);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3339);
				match(COMMA);
				setState(3340);
				combinedInformationOption();
				}
				}
				setState(3345);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CombinedInformationOptionContext extends ParserRuleContext {
		public TerminalNode STATEMENT() { return getToken(DB2zSQLParser.STATEMENT, 0); }
		public TerminalNode CONDITION() { return getToken(DB2zSQLParser.CONDITION, 0); }
		public TerminalNode CONNECTION() { return getToken(DB2zSQLParser.CONNECTION, 0); }
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public CombinedInformationOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_combinedInformationOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCombinedInformationOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCombinedInformationOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCombinedInformationOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CombinedInformationOptionContext combinedInformationOption() throws RecognitionException {
		CombinedInformationOptionContext _localctx = new CombinedInformationOptionContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_combinedInformationOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3352);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STATEMENT:
				{
				setState(3346);
				match(STATEMENT);
				}
				break;
			case CONDITION:
			case CONNECTION:
				{
				{
				setState(3347);
				_la = _input.LA(1);
				if ( !(_la==CONDITION || _la==CONNECTION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3350);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,291,_ctx) ) {
				case 1:
					{
					setState(3348);
					variable();
					}
					break;
				case 2:
					{
					setState(3349);
					match(INTEGERLITERAL);
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FetchOrientationContext extends ParserRuleContext {
		public TerminalNode BEFORE() { return getToken(DB2zSQLParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(DB2zSQLParser.AFTER, 0); }
		public RowPositionedContext rowPositioned() {
			return getRuleContext(RowPositionedContext.class,0);
		}
		public RowsetPositionedContext rowsetPositioned() {
			return getRuleContext(RowsetPositionedContext.class,0);
		}
		public FetchOrientationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetchOrientation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFetchOrientation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFetchOrientation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFetchOrientation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FetchOrientationContext fetchOrientation() throws RecognitionException {
		FetchOrientationContext _localctx = new FetchOrientationContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_fetchOrientation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3358);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,293,_ctx) ) {
			case 1:
				{
				setState(3354);
				match(BEFORE);
				}
				break;
			case 2:
				{
				setState(3355);
				match(AFTER);
				}
				break;
			case 3:
				{
				setState(3356);
				rowPositioned();
				}
				break;
			case 4:
				{
				setState(3357);
				rowsetPositioned();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowPositionedContext extends ParserRuleContext {
		public TerminalNode NEXT() { return getToken(DB2zSQLParser.NEXT, 0); }
		public TerminalNode PRIOR() { return getToken(DB2zSQLParser.PRIOR, 0); }
		public TerminalNode FIRST() { return getToken(DB2zSQLParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(DB2zSQLParser.LAST, 0); }
		public TerminalNode CURRENT() { return getToken(DB2zSQLParser.CURRENT, 0); }
		public TerminalNode ABSOLUTE() { return getToken(DB2zSQLParser.ABSOLUTE, 0); }
		public TerminalNode RELATIVE() { return getToken(DB2zSQLParser.RELATIVE, 0); }
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode CONTINUE() { return getToken(DB2zSQLParser.CONTINUE, 0); }
		public RowPositionedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowPositioned; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRowPositioned(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRowPositioned(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRowPositioned(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowPositionedContext rowPositioned() throws RecognitionException {
		RowPositionedContext _localctx = new RowPositionedContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_rowPositioned);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3378);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NEXT:
				{
				setState(3360);
				match(NEXT);
				}
				break;
			case PRIOR:
				{
				setState(3361);
				match(PRIOR);
				}
				break;
			case FIRST:
				{
				setState(3362);
				match(FIRST);
				}
				break;
			case LAST:
				{
				setState(3363);
				match(LAST);
				}
				break;
			case CURRENT:
				{
				{
				setState(3364);
				match(CURRENT);
				setState(3366);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,294,_ctx) ) {
				case 1:
					{
					setState(3365);
					match(CONTINUE);
					}
					break;
				}
				}
				}
				break;
			case ABSOLUTE:
				{
				{
				setState(3368);
				match(ABSOLUTE);
				setState(3371);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case COLON:
					{
					setState(3369);
					hostVariable();
					}
					break;
				case INTEGERLITERAL:
					{
					setState(3370);
					match(INTEGERLITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case RELATIVE:
				{
				{
				setState(3373);
				match(RELATIVE);
				setState(3376);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case COLON:
					{
					setState(3374);
					hostVariable();
					}
					break;
				case INTEGERLITERAL:
					{
					setState(3375);
					match(INTEGERLITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowsetPositionedContext extends ParserRuleContext {
		public TerminalNode NEXT() { return getToken(DB2zSQLParser.NEXT, 0); }
		public TerminalNode ROWSET() { return getToken(DB2zSQLParser.ROWSET, 0); }
		public TerminalNode PRIOR() { return getToken(DB2zSQLParser.PRIOR, 0); }
		public TerminalNode FIRST() { return getToken(DB2zSQLParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(DB2zSQLParser.LAST, 0); }
		public TerminalNode CURRENT() { return getToken(DB2zSQLParser.CURRENT, 0); }
		public TerminalNode STARTING() { return getToken(DB2zSQLParser.STARTING, 0); }
		public TerminalNode AT() { return getToken(DB2zSQLParser.AT, 0); }
		public TerminalNode ABSOLUTE() { return getToken(DB2zSQLParser.ABSOLUTE, 0); }
		public TerminalNode RELATIVE() { return getToken(DB2zSQLParser.RELATIVE, 0); }
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public RowsetPositionedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowsetPositioned; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRowsetPositioned(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRowsetPositioned(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRowsetPositioned(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowsetPositionedContext rowsetPositioned() throws RecognitionException {
		RowsetPositionedContext _localctx = new RowsetPositionedContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_rowsetPositioned);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3398);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NEXT:
				{
				{
				setState(3380);
				match(NEXT);
				setState(3381);
				match(ROWSET);
				}
				}
				break;
			case PRIOR:
				{
				{
				setState(3382);
				match(PRIOR);
				setState(3383);
				match(ROWSET);
				}
				}
				break;
			case FIRST:
				{
				{
				setState(3384);
				match(FIRST);
				setState(3385);
				match(ROWSET);
				}
				}
				break;
			case LAST:
				{
				{
				setState(3386);
				match(LAST);
				setState(3387);
				match(ROWSET);
				}
				}
				break;
			case CURRENT:
				{
				{
				setState(3388);
				match(CURRENT);
				setState(3389);
				match(ROWSET);
				}
				}
				break;
			case ROWSET:
				{
				{
				setState(3390);
				match(ROWSET);
				setState(3391);
				match(STARTING);
				setState(3392);
				match(AT);
				setState(3393);
				_la = _input.LA(1);
				if ( !(_la==RELATIVE || _la==ABSOLUTE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3396);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case COLON:
					{
					setState(3394);
					hostVariable();
					}
					break;
				case INTEGERLITERAL:
					{
					setState(3395);
					match(INTEGERLITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SingleRowFetchContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(DB2zSQLParser.INTO, 0); }
		public TerminalNode DESCRIPTOR() { return getToken(DB2zSQLParser.DESCRIPTOR, 0); }
		public DescriptorNameContext descriptorName() {
			return getRuleContext(DescriptorNameContext.class,0);
		}
		public TerminalNode USING() { return getToken(DB2zSQLParser.USING, 0); }
		public ArrayElementSpecificationContext arrayElementSpecification() {
			return getRuleContext(ArrayElementSpecificationContext.class,0);
		}
		public List<FetchTargetVariableContext> fetchTargetVariable() {
			return getRuleContexts(FetchTargetVariableContext.class);
		}
		public FetchTargetVariableContext fetchTargetVariable(int i) {
			return getRuleContext(FetchTargetVariableContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public SingleRowFetchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleRowFetch; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSingleRowFetch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSingleRowFetch(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSingleRowFetch(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SingleRowFetchContext singleRowFetch() throws RecognitionException {
		SingleRowFetchContext _localctx = new SingleRowFetchContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_singleRowFetch);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3415);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,302,_ctx) ) {
			case 1:
				{
				{
				setState(3400);
				match(INTO);
				setState(3410);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,301,_ctx) ) {
				case 1:
					{
					{
					setState(3401);
					fetchTargetVariable();
					setState(3406);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3402);
						match(COMMA);
						setState(3403);
						fetchTargetVariable();
						}
						}
						setState(3408);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					}
					break;
				case 2:
					{
					setState(3409);
					arrayElementSpecification();
					}
					break;
				}
				}
				}
				break;
			case 2:
				{
				{
				setState(3412);
				_la = _input.LA(1);
				if ( !(_la==INTO || _la==USING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3413);
				match(DESCRIPTOR);
				setState(3414);
				descriptorName();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FetchTargetVariableContext extends ParserRuleContext {
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public FetchTargetVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetchTargetVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFetchTargetVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFetchTargetVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFetchTargetVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FetchTargetVariableContext fetchTargetVariable() throws RecognitionException {
		FetchTargetVariableContext _localctx = new FetchTargetVariableContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_fetchTargetVariable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3419);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,303,_ctx) ) {
			case 1:
				{
				setState(3417);
				variable();
				}
				break;
			case 2:
				{
				setState(3418);
				hostVariable();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultipleRowFetchContext extends ParserRuleContext {
		public MultipleRowFetchIntoClauseContext multipleRowFetchIntoClause() {
			return getRuleContext(MultipleRowFetchIntoClauseContext.class,0);
		}
		public MultipleRowFetchForClauseContext multipleRowFetchForClause() {
			return getRuleContext(MultipleRowFetchForClauseContext.class,0);
		}
		public MultipleRowFetchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipleRowFetch; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterMultipleRowFetch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitMultipleRowFetch(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitMultipleRowFetch(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultipleRowFetchContext multipleRowFetch() throws RecognitionException {
		MultipleRowFetchContext _localctx = new MultipleRowFetchContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_multipleRowFetch);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3432);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,306,_ctx) ) {
			case 1:
				{
				{
				setState(3422);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(3421);
					multipleRowFetchForClause();
					}
				}

				setState(3424);
				multipleRowFetchIntoClause();
				}
				}
				break;
			case 2:
				{
				{
				setState(3425);
				multipleRowFetchForClause();
				setState(3427);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTO || _la==USING) {
					{
					setState(3426);
					multipleRowFetchIntoClause();
					}
				}

				}
				}
				break;
			case 3:
				{
				{
				setState(3429);
				multipleRowFetchForClause();
				setState(3430);
				multipleRowFetchIntoClause();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultipleRowFetchForClauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode ROWS() { return getToken(DB2zSQLParser.ROWS, 0); }
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public MultipleRowFetchForClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipleRowFetchForClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterMultipleRowFetchForClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitMultipleRowFetchForClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitMultipleRowFetchForClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultipleRowFetchForClauseContext multipleRowFetchForClause() throws RecognitionException {
		MultipleRowFetchForClauseContext _localctx = new MultipleRowFetchForClauseContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_multipleRowFetchForClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3434);
			match(FOR);
			setState(3437);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COLON:
				{
				setState(3435);
				hostVariable();
				}
				break;
			case INTEGERLITERAL:
				{
				setState(3436);
				match(INTEGERLITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3439);
			match(ROWS);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultipleRowFetchIntoClauseContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(DB2zSQLParser.INTO, 0); }
		public List<HostVariableContext> hostVariable() {
			return getRuleContexts(HostVariableContext.class);
		}
		public HostVariableContext hostVariable(int i) {
			return getRuleContext(HostVariableContext.class,i);
		}
		public TerminalNode DESCRIPTOR() { return getToken(DB2zSQLParser.DESCRIPTOR, 0); }
		public DescriptorNameContext descriptorName() {
			return getRuleContext(DescriptorNameContext.class,0);
		}
		public TerminalNode USING() { return getToken(DB2zSQLParser.USING, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public MultipleRowFetchIntoClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipleRowFetchIntoClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterMultipleRowFetchIntoClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitMultipleRowFetchIntoClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitMultipleRowFetchIntoClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultipleRowFetchIntoClauseContext multipleRowFetchIntoClause() throws RecognitionException {
		MultipleRowFetchIntoClauseContext _localctx = new MultipleRowFetchIntoClauseContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_multipleRowFetchIntoClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3453);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,309,_ctx) ) {
			case 1:
				{
				{
				setState(3441);
				match(INTO);
				setState(3442);
				hostVariable();
				setState(3447);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3443);
					match(COMMA);
					setState(3444);
					hostVariable();
					}
					}
					setState(3449);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case 2:
				{
				{
				setState(3450);
				_la = _input.LA(1);
				if ( !(_la==INTO || _la==USING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3451);
				match(DESCRIPTOR);
				setState(3452);
				descriptorName();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExplainPlanClauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode PLAN() { return getToken(DB2zSQLParser.PLAN, 0); }
		public TerminalNode ALL() { return getToken(DB2zSQLParser.ALL, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public InsertStatementContext insertStatement() {
			return getRuleContext(InsertStatementContext.class,0);
		}
		public MergeStatementContext mergeStatement() {
			return getRuleContext(MergeStatementContext.class,0);
		}
		public SearchedDeleteContext searchedDelete() {
			return getRuleContext(SearchedDeleteContext.class,0);
		}
		public SearchedUpdateContext searchedUpdate() {
			return getRuleContext(SearchedUpdateContext.class,0);
		}
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public TerminalNode QUERYNO() { return getToken(DB2zSQLParser.QUERYNO, 0); }
		public TerminalNode EQ() { return getToken(DB2zSQLParser.EQ, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public ExplainPlanClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explainPlanClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterExplainPlanClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitExplainPlanClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitExplainPlanClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplainPlanClauseContext explainPlanClause() throws RecognitionException {
		ExplainPlanClauseContext _localctx = new ExplainPlanClauseContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_explainPlanClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3455);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==PLAN) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3460);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SET) {
				{
				setState(3456);
				match(SET);
				setState(3457);
				match(QUERYNO);
				setState(3458);
				match(EQ);
				setState(3459);
				match(INTEGERLITERAL);
				}
			}

			setState(3462);
			match(FOR);
			setState(3468);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LPAREN:
			case SELECT:
			case VALUES:
			case WITH:
				{
				setState(3463);
				query();
				}
				break;
			case INSERT:
				{
				setState(3464);
				insertStatement();
				}
				break;
			case MERGE:
				{
				setState(3465);
				mergeStatement();
				}
				break;
			case DELETE:
				{
				setState(3466);
				searchedDelete();
				}
				break;
			case UPDATE:
				{
				setState(3467);
				searchedUpdate();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExplainStmtcacheClauseContext extends ParserRuleContext {
		public TerminalNode STMTCACHE() { return getToken(DB2zSQLParser.STMTCACHE, 0); }
		public TerminalNode ALL() { return getToken(DB2zSQLParser.ALL, 0); }
		public TerminalNode STMTID() { return getToken(DB2zSQLParser.STMTID, 0); }
		public TerminalNode STMTTOKEN() { return getToken(DB2zSQLParser.STMTTOKEN, 0); }
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public ExplainStmtcacheClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explainStmtcacheClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterExplainStmtcacheClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitExplainStmtcacheClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitExplainStmtcacheClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplainStmtcacheClauseContext explainStmtcacheClause() throws RecognitionException {
		ExplainStmtcacheClauseContext _localctx = new ExplainStmtcacheClauseContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_explainStmtcacheClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3470);
			match(STMTCACHE);
			setState(3482);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				{
				setState(3471);
				match(ALL);
				}
				break;
			case STMTID:
				{
				{
				setState(3472);
				match(STMTID);
				setState(3475);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case COLON:
					{
					setState(3473);
					hostVariable();
					}
					break;
				case INTEGERLITERAL:
					{
					setState(3474);
					match(INTEGERLITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case STMTTOKEN:
				{
				{
				setState(3477);
				match(STMTTOKEN);
				setState(3480);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case COLON:
					{
					setState(3478);
					hostVariable();
					}
					break;
				case NONNUMERICLITERAL:
					{
					setState(3479);
					match(NONNUMERICLITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExplainPackageClauseContext extends ParserRuleContext {
		public TerminalNode PACKAGE() { return getToken(DB2zSQLParser.PACKAGE, 0); }
		public PackageScopeSpecificationContext packageScopeSpecification() {
			return getRuleContext(PackageScopeSpecificationContext.class,0);
		}
		public ExplainPackageClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explainPackageClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterExplainPackageClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitExplainPackageClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitExplainPackageClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplainPackageClauseContext explainPackageClause() throws RecognitionException {
		ExplainPackageClauseContext _localctx = new ExplainPackageClauseContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_explainPackageClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3484);
			match(PACKAGE);
			setState(3485);
			packageScopeSpecification();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExplainStabilizedDynamicQueryClauseContext extends ParserRuleContext {
		public TerminalNode STABILIZED() { return getToken(DB2zSQLParser.STABILIZED, 0); }
		public TerminalNode DYNAMIC() { return getToken(DB2zSQLParser.DYNAMIC, 0); }
		public TerminalNode QUERY() { return getToken(DB2zSQLParser.QUERY, 0); }
		public TerminalNode STMTID() { return getToken(DB2zSQLParser.STMTID, 0); }
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode COPY() { return getToken(DB2zSQLParser.COPY, 0); }
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public ExplainStabilizedDynamicQueryClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explainStabilizedDynamicQueryClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterExplainStabilizedDynamicQueryClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitExplainStabilizedDynamicQueryClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitExplainStabilizedDynamicQueryClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplainStabilizedDynamicQueryClauseContext explainStabilizedDynamicQueryClause() throws RecognitionException {
		ExplainStabilizedDynamicQueryClauseContext _localctx = new ExplainStabilizedDynamicQueryClauseContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_explainStabilizedDynamicQueryClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3487);
			match(STABILIZED);
			setState(3488);
			match(DYNAMIC);
			setState(3489);
			match(QUERY);
			setState(3490);
			match(STMTID);
			setState(3493);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COLON:
				{
				setState(3491);
				hostVariable();
				}
				break;
			case INTEGERLITERAL:
				{
				setState(3492);
				match(INTEGERLITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3497);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COPY) {
				{
				setState(3495);
				match(COPY);
				setState(3496);
				match(NONNUMERICLITERAL);
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PackageScopeSpecificationContext extends ParserRuleContext {
		public TerminalNode COLLECTION() { return getToken(DB2zSQLParser.COLLECTION, 0); }
		public CollectionNameContext collectionName() {
			return getRuleContext(CollectionNameContext.class,0);
		}
		public TerminalNode PACKAGE() { return getToken(DB2zSQLParser.PACKAGE, 0); }
		public PackageScopePackageNameContext packageScopePackageName() {
			return getRuleContext(PackageScopePackageNameContext.class,0);
		}
		public TerminalNode VERSION() { return getToken(DB2zSQLParser.VERSION, 0); }
		public VersionNameContext versionName() {
			return getRuleContext(VersionNameContext.class,0);
		}
		public TerminalNode COPY() { return getToken(DB2zSQLParser.COPY, 0); }
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public PackageScopeSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_packageScopeSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPackageScopeSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPackageScopeSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPackageScopeSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PackageScopeSpecificationContext packageScopeSpecification() throws RecognitionException {
		PackageScopeSpecificationContext _localctx = new PackageScopeSpecificationContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_packageScopeSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3499);
			match(COLLECTION);
			setState(3500);
			collectionName();
			setState(3501);
			match(PACKAGE);
			setState(3502);
			packageScopePackageName();
			setState(3505);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VERSION) {
				{
				setState(3503);
				match(VERSION);
				setState(3504);
				versionName();
				}
			}

			setState(3509);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COPY) {
				{
				setState(3507);
				match(COPY);
				setState(3508);
				match(NONNUMERICLITERAL);
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollectionNameContext extends ParserRuleContext {
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public CollectionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collectionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCollectionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCollectionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCollectionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollectionNameContext collectionName() throws RecognitionException {
		CollectionNameContext _localctx = new CollectionNameContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_collectionName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3513);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COLON:
				{
				setState(3511);
				hostVariable();
				}
				break;
			case NONNUMERICLITERAL:
				{
				setState(3512);
				match(NONNUMERICLITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PackageScopePackageNameContext extends ParserRuleContext {
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public PackageScopePackageNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_packageScopePackageName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPackageScopePackageName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPackageScopePackageName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPackageScopePackageName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PackageScopePackageNameContext packageScopePackageName() throws RecognitionException {
		PackageScopePackageNameContext _localctx = new PackageScopePackageNameContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_packageScopePackageName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3517);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COLON:
				{
				setState(3515);
				hostVariable();
				}
				break;
			case NONNUMERICLITERAL:
				{
				setState(3516);
				match(NONNUMERICLITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VersionNameContext extends ParserRuleContext {
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public VersionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_versionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterVersionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitVersionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitVersionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VersionNameContext versionName() throws RecognitionException {
		VersionNameContext _localctx = new VersionNameContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_versionName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3521);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COLON:
				{
				setState(3519);
				hostVariable();
				}
				break;
			case NONNUMERICLITERAL:
				{
				setState(3520);
				match(NONNUMERICLITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SourceRowDataContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode ROWS() { return getToken(DB2zSQLParser.ROWS, 0); }
		public TerminalNode USING() { return getToken(DB2zSQLParser.USING, 0); }
		public List<HostVariableContext> hostVariable() {
			return getRuleContexts(HostVariableContext.class);
		}
		public HostVariableContext hostVariable(int i) {
			return getRuleContext(HostVariableContext.class,i);
		}
		public TerminalNode DESCRIPTOR() { return getToken(DB2zSQLParser.DESCRIPTOR, 0); }
		public DescriptorNameContext descriptorName() {
			return getRuleContext(DescriptorNameContext.class,0);
		}
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public SourceRowDataContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sourceRowData; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSourceRowData(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSourceRowData(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSourceRowData(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SourceRowDataContext sourceRowData() throws RecognitionException {
		SourceRowDataContext _localctx = new SourceRowDataContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_sourceRowData);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3535);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,323,_ctx) ) {
			case 1:
				{
				{
				setState(3523);
				match(USING);
				setState(3524);
				hostVariable();
				setState(3529);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3525);
					match(COMMA);
					setState(3526);
					hostVariable();
					}
					}
					setState(3531);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case 2:
				{
				{
				setState(3532);
				match(USING);
				setState(3533);
				match(DESCRIPTOR);
				setState(3534);
				descriptorName();
				}
				}
				break;
			}
			setState(3543);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(3537);
				match(FOR);
				setState(3540);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case INTEGERLITERAL:
					{
					setState(3538);
					match(INTEGERLITERAL);
					}
					break;
				case COLON:
					{
					setState(3539);
					hostVariable();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3542);
				match(ROWS);
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AliasDesignationContext extends ParserRuleContext {
		public TerminalNode ALIAS() { return getToken(DB2zSQLParser.ALIAS, 0); }
		public AliasNameContext aliasName() {
			return getRuleContext(AliasNameContext.class,0);
		}
		public TerminalNode PUBLIC() { return getToken(DB2zSQLParser.PUBLIC, 0); }
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public TerminalNode SEQUENCE() { return getToken(DB2zSQLParser.SEQUENCE, 0); }
		public AliasDesignationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aliasDesignation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAliasDesignation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAliasDesignation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAliasDesignation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AliasDesignationContext aliasDesignation() throws RecognitionException {
		AliasDesignationContext _localctx = new AliasDesignationContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_aliasDesignation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3546);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PUBLIC) {
				{
				setState(3545);
				match(PUBLIC);
				}
			}

			setState(3548);
			match(ALIAS);
			setState(3549);
			aliasName();
			setState(3552);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(3550);
				match(FOR);
				setState(3551);
				_la = _input.LA(1);
				if ( !(_la==SEQUENCE || _la==TABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropDatabaseClauseContext extends ParserRuleContext {
		public TerminalNode DATABASE() { return getToken(DB2zSQLParser.DATABASE, 0); }
		public DatabaseNameContext databaseName() {
			return getRuleContext(DatabaseNameContext.class,0);
		}
		public DropDatabaseClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropDatabaseClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDropDatabaseClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDropDatabaseClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDropDatabaseClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropDatabaseClauseContext dropDatabaseClause() throws RecognitionException {
		DropDatabaseClauseContext _localctx = new DropDatabaseClauseContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_dropDatabaseClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3554);
			match(DATABASE);
			setState(3555);
			databaseName();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropFunctionClauseContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(DB2zSQLParser.FUNCTION, 0); }
		public FunctionNameContext functionName() {
			return getRuleContext(FunctionNameContext.class,0);
		}
		public TerminalNode SPECIFIC() { return getToken(DB2zSQLParser.SPECIFIC, 0); }
		public SpecificNameContext specificName() {
			return getRuleContext(SpecificNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<FunctionParameterTypeContext> functionParameterType() {
			return getRuleContexts(FunctionParameterTypeContext.class);
		}
		public FunctionParameterTypeContext functionParameterType(int i) {
			return getRuleContext(FunctionParameterTypeContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode RESTRICT() { return getToken(DB2zSQLParser.RESTRICT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public DropFunctionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropFunctionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDropFunctionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDropFunctionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDropFunctionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropFunctionClauseContext dropFunctionClause() throws RecognitionException {
		DropFunctionClauseContext _localctx = new DropFunctionClauseContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_dropFunctionClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3581);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FUNCTION:
				{
				{
				setState(3557);
				match(FUNCTION);
				setState(3558);
				functionName();
				setState(3570);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(3559);
					match(LPAREN);
					setState(3560);
					functionParameterType();
					setState(3565);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3561);
						match(COMMA);
						setState(3562);
						functionParameterType();
						}
						}
						setState(3567);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(3568);
					match(RPAREN);
					}
				}

				setState(3573);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RESTRICT) {
					{
					setState(3572);
					match(RESTRICT);
					}
				}

				}
				}
				break;
			case SPECIFIC:
				{
				{
				setState(3575);
				match(SPECIFIC);
				setState(3576);
				match(FUNCTION);
				setState(3577);
				specificName();
				setState(3579);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RESTRICT) {
					{
					setState(3578);
					match(RESTRICT);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropIndexClauseContext extends ParserRuleContext {
		public TerminalNode INDEX() { return getToken(DB2zSQLParser.INDEX, 0); }
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public DropIndexClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropIndexClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDropIndexClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDropIndexClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDropIndexClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropIndexClauseContext dropIndexClause() throws RecognitionException {
		DropIndexClauseContext _localctx = new DropIndexClauseContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_dropIndexClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3583);
			match(INDEX);
			setState(3584);
			indexName();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropMaskClauseContext extends ParserRuleContext {
		public TerminalNode MASK() { return getToken(DB2zSQLParser.MASK, 0); }
		public MaskNameContext maskName() {
			return getRuleContext(MaskNameContext.class,0);
		}
		public DropMaskClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropMaskClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDropMaskClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDropMaskClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDropMaskClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropMaskClauseContext dropMaskClause() throws RecognitionException {
		DropMaskClauseContext _localctx = new DropMaskClauseContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_dropMaskClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3586);
			match(MASK);
			setState(3587);
			maskName();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropPackageClauseContext extends ParserRuleContext {
		public TerminalNode PACKAGE() { return getToken(DB2zSQLParser.PACKAGE, 0); }
		public PackageDesignatorContext packageDesignator() {
			return getRuleContext(PackageDesignatorContext.class,0);
		}
		public DropPackageClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropPackageClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDropPackageClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDropPackageClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDropPackageClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropPackageClauseContext dropPackageClause() throws RecognitionException {
		DropPackageClauseContext _localctx = new DropPackageClauseContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_dropPackageClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3589);
			match(PACKAGE);
			setState(3590);
			packageDesignator();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropPermissionClauseContext extends ParserRuleContext {
		public TerminalNode PERMISSION() { return getToken(DB2zSQLParser.PERMISSION, 0); }
		public PermissionNameContext permissionName() {
			return getRuleContext(PermissionNameContext.class,0);
		}
		public DropPermissionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropPermissionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDropPermissionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDropPermissionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDropPermissionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropPermissionClauseContext dropPermissionClause() throws RecognitionException {
		DropPermissionClauseContext _localctx = new DropPermissionClauseContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_dropPermissionClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3592);
			match(PERMISSION);
			setState(3593);
			permissionName();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropProcedureClauseContext extends ParserRuleContext {
		public TerminalNode PROCEDURE() { return getToken(DB2zSQLParser.PROCEDURE, 0); }
		public ProcedureNameContext procedureName() {
			return getRuleContext(ProcedureNameContext.class,0);
		}
		public TerminalNode RESTRICT() { return getToken(DB2zSQLParser.RESTRICT, 0); }
		public DropProcedureClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropProcedureClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDropProcedureClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDropProcedureClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDropProcedureClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropProcedureClauseContext dropProcedureClause() throws RecognitionException {
		DropProcedureClauseContext _localctx = new DropProcedureClauseContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_dropProcedureClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3595);
			match(PROCEDURE);
			setState(3596);
			procedureName();
			setState(3598);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RESTRICT) {
				{
				setState(3597);
				match(RESTRICT);
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropRoleClauseContext extends ParserRuleContext {
		public TerminalNode ROLE() { return getToken(DB2zSQLParser.ROLE, 0); }
		public RoleNameContext roleName() {
			return getRuleContext(RoleNameContext.class,0);
		}
		public TerminalNode RESTRICT() { return getToken(DB2zSQLParser.RESTRICT, 0); }
		public DropRoleClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropRoleClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDropRoleClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDropRoleClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDropRoleClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropRoleClauseContext dropRoleClause() throws RecognitionException {
		DropRoleClauseContext _localctx = new DropRoleClauseContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_dropRoleClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3600);
			match(ROLE);
			setState(3601);
			roleName();
			setState(3603);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RESTRICT) {
				{
				setState(3602);
				match(RESTRICT);
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropSequenceClauseContext extends ParserRuleContext {
		public TerminalNode SEQUENCE() { return getToken(DB2zSQLParser.SEQUENCE, 0); }
		public SequenceNameContext sequenceName() {
			return getRuleContext(SequenceNameContext.class,0);
		}
		public TerminalNode RESTRICT() { return getToken(DB2zSQLParser.RESTRICT, 0); }
		public DropSequenceClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropSequenceClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDropSequenceClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDropSequenceClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDropSequenceClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropSequenceClauseContext dropSequenceClause() throws RecognitionException {
		DropSequenceClauseContext _localctx = new DropSequenceClauseContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_dropSequenceClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3605);
			match(SEQUENCE);
			setState(3606);
			sequenceName();
			setState(3608);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RESTRICT) {
				{
				setState(3607);
				match(RESTRICT);
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropStogroupClauseContext extends ParserRuleContext {
		public TerminalNode STOGROUP() { return getToken(DB2zSQLParser.STOGROUP, 0); }
		public StogroupNameContext stogroupName() {
			return getRuleContext(StogroupNameContext.class,0);
		}
		public DropStogroupClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropStogroupClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDropStogroupClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDropStogroupClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDropStogroupClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropStogroupClauseContext dropStogroupClause() throws RecognitionException {
		DropStogroupClauseContext _localctx = new DropStogroupClauseContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_dropStogroupClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3610);
			match(STOGROUP);
			setState(3611);
			stogroupName();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropSynonymClauseContext extends ParserRuleContext {
		public TerminalNode SYNONYM() { return getToken(DB2zSQLParser.SYNONYM, 0); }
		public SynonymContext synonym() {
			return getRuleContext(SynonymContext.class,0);
		}
		public DropSynonymClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropSynonymClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDropSynonymClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDropSynonymClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDropSynonymClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropSynonymClauseContext dropSynonymClause() throws RecognitionException {
		DropSynonymClauseContext _localctx = new DropSynonymClauseContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_dropSynonymClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3613);
			match(SYNONYM);
			setState(3614);
			synonym();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTableClauseContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public DropTableClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTableClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDropTableClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDropTableClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDropTableClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTableClauseContext dropTableClause() throws RecognitionException {
		DropTableClauseContext _localctx = new DropTableClauseContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_dropTableClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3616);
			match(TABLE);
			setState(3617);
			tableName();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTablespaceClauseContext extends ParserRuleContext {
		public TerminalNode TABLESPACE() { return getToken(DB2zSQLParser.TABLESPACE, 0); }
		public TablespaceNameContext tablespaceName() {
			return getRuleContext(TablespaceNameContext.class,0);
		}
		public DatabaseNameContext databaseName() {
			return getRuleContext(DatabaseNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public DropTablespaceClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTablespaceClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDropTablespaceClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDropTablespaceClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDropTablespaceClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTablespaceClauseContext dropTablespaceClause() throws RecognitionException {
		DropTablespaceClauseContext _localctx = new DropTablespaceClauseContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_dropTablespaceClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3619);
			match(TABLESPACE);
			setState(3623);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,336,_ctx) ) {
			case 1:
				{
				setState(3620);
				databaseName();
				setState(3621);
				match(DOT);
				}
				break;
			}
			setState(3625);
			tablespaceName();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTriggerClauseContext extends ParserRuleContext {
		public TerminalNode TRIGGER() { return getToken(DB2zSQLParser.TRIGGER, 0); }
		public TriggerNameContext triggerName() {
			return getRuleContext(TriggerNameContext.class,0);
		}
		public DropTriggerClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTriggerClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDropTriggerClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDropTriggerClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDropTriggerClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTriggerClauseContext dropTriggerClause() throws RecognitionException {
		DropTriggerClauseContext _localctx = new DropTriggerClauseContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_dropTriggerClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3627);
			match(TRIGGER);
			setState(3628);
			triggerName();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTrustedContextClauseContext extends ParserRuleContext {
		public TerminalNode TRUSTED() { return getToken(DB2zSQLParser.TRUSTED, 0); }
		public TerminalNode CONTEXT() { return getToken(DB2zSQLParser.CONTEXT, 0); }
		public ContextNameContext contextName() {
			return getRuleContext(ContextNameContext.class,0);
		}
		public DropTrustedContextClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTrustedContextClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDropTrustedContextClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDropTrustedContextClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDropTrustedContextClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTrustedContextClauseContext dropTrustedContextClause() throws RecognitionException {
		DropTrustedContextClauseContext _localctx = new DropTrustedContextClauseContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_dropTrustedContextClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3630);
			match(TRUSTED);
			setState(3631);
			match(CONTEXT);
			setState(3632);
			contextName();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTypeClauseContext extends ParserRuleContext {
		public TerminalNode TYPE() { return getToken(DB2zSQLParser.TYPE, 0); }
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public TerminalNode RESTRICT() { return getToken(DB2zSQLParser.RESTRICT, 0); }
		public DropTypeClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTypeClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDropTypeClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDropTypeClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDropTypeClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTypeClauseContext dropTypeClause() throws RecognitionException {
		DropTypeClauseContext _localctx = new DropTypeClauseContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_dropTypeClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3634);
			match(TYPE);
			setState(3635);
			typeName();
			setState(3637);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RESTRICT) {
				{
				setState(3636);
				match(RESTRICT);
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropVariableClauseContext extends ParserRuleContext {
		public TerminalNode VARIABLE() { return getToken(DB2zSQLParser.VARIABLE, 0); }
		public VariableNameContext variableName() {
			return getRuleContext(VariableNameContext.class,0);
		}
		public TerminalNode RESTRICT() { return getToken(DB2zSQLParser.RESTRICT, 0); }
		public DropVariableClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropVariableClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDropVariableClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDropVariableClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDropVariableClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropVariableClauseContext dropVariableClause() throws RecognitionException {
		DropVariableClauseContext _localctx = new DropVariableClauseContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_dropVariableClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3639);
			match(VARIABLE);
			setState(3640);
			variableName();
			setState(3642);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RESTRICT) {
				{
				setState(3641);
				match(RESTRICT);
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropViewClauseContext extends ParserRuleContext {
		public TerminalNode VIEW() { return getToken(DB2zSQLParser.VIEW, 0); }
		public ViewNameContext viewName() {
			return getRuleContext(ViewNameContext.class,0);
		}
		public DropViewClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropViewClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDropViewClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDropViewClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDropViewClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropViewClauseContext dropViewClause() throws RecognitionException {
		DropViewClauseContext _localctx = new DropViewClauseContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_dropViewClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3644);
			match(VIEW);
			setState(3645);
			viewName();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PackageDesignatorContext extends ParserRuleContext {
		public CollectionIDContext collectionID() {
			return getRuleContext(CollectionIDContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public PackageNameContext packageName() {
			return getRuleContext(PackageNameContext.class,0);
		}
		public VersionIDContext versionID() {
			return getRuleContext(VersionIDContext.class,0);
		}
		public TerminalNode VERSION() { return getToken(DB2zSQLParser.VERSION, 0); }
		public PackageDesignatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_packageDesignator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPackageDesignator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPackageDesignator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPackageDesignator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PackageDesignatorContext packageDesignator() throws RecognitionException {
		PackageDesignatorContext _localctx = new PackageDesignatorContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_packageDesignator);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3647);
			collectionID();
			setState(3648);
			match(DOT);
			setState(3649);
			packageName();
			setState(3654);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,340,_ctx) ) {
			case 1:
				{
				setState(3651);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,339,_ctx) ) {
				case 1:
					{
					setState(3650);
					match(VERSION);
					}
					break;
				}
				setState(3653);
				versionID();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DescribeUsingOptionContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(DB2zSQLParser.USING, 0); }
		public TerminalNode NAMES() { return getToken(DB2zSQLParser.NAMES, 0); }
		public TerminalNode LABELS() { return getToken(DB2zSQLParser.LABELS, 0); }
		public TerminalNode ANY() { return getToken(DB2zSQLParser.ANY, 0); }
		public TerminalNode BOTH() { return getToken(DB2zSQLParser.BOTH, 0); }
		public DescribeUsingOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describeUsingOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDescribeUsingOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDescribeUsingOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDescribeUsingOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DescribeUsingOptionContext describeUsingOption() throws RecognitionException {
		DescribeUsingOptionContext _localctx = new DescribeUsingOptionContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_describeUsingOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3656);
			match(USING);
			setState(3657);
			_la = _input.LA(1);
			if ( !(_la==ANY || ((((_la - 594)) & ~0x3f) == 0 && ((1L << (_la - 594)) & ((1L << (BOTH - 594)) | (1L << (LABELS - 594)) | (1L << (NAMES - 594)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareGlobalTemporaryTableLikeClauseContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(DB2zSQLParser.LIKE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public CopyOptionsContext copyOptions() {
			return getRuleContext(CopyOptionsContext.class,0);
		}
		public DeclareGlobalTemporaryTableLikeClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareGlobalTemporaryTableLikeClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDeclareGlobalTemporaryTableLikeClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDeclareGlobalTemporaryTableLikeClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDeclareGlobalTemporaryTableLikeClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareGlobalTemporaryTableLikeClauseContext declareGlobalTemporaryTableLikeClause() throws RecognitionException {
		DeclareGlobalTemporaryTableLikeClauseContext _localctx = new DeclareGlobalTemporaryTableLikeClauseContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_declareGlobalTemporaryTableLikeClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3659);
			match(LIKE);
			setState(3660);
			tableName();
			setState(3662);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING || _la==EXCLUDING || _la==INCLUDING) {
				{
				setState(3661);
				copyOptions();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OnCommitClauseContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public TerminalNode COMMIT() { return getToken(DB2zSQLParser.COMMIT, 0); }
		public TerminalNode DELETE() { return getToken(DB2zSQLParser.DELETE, 0); }
		public TerminalNode ROWS() { return getToken(DB2zSQLParser.ROWS, 0); }
		public TerminalNode PRESERVE() { return getToken(DB2zSQLParser.PRESERVE, 0); }
		public TerminalNode DROP() { return getToken(DB2zSQLParser.DROP, 0); }
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public OnCommitClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onCommitClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterOnCommitClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitOnCommitClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitOnCommitClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OnCommitClauseContext onCommitClause() throws RecognitionException {
		OnCommitClauseContext _localctx = new OnCommitClauseContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_onCommitClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3664);
			match(ON);
			setState(3665);
			match(COMMIT);
			setState(3672);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DELETE:
				{
				{
				setState(3666);
				match(DELETE);
				setState(3667);
				match(ROWS);
				}
				}
				break;
			case PRESERVE:
				{
				{
				setState(3668);
				match(PRESERVE);
				setState(3669);
				match(ROWS);
				}
				}
				break;
			case DROP:
				{
				{
				setState(3670);
				match(DROP);
				setState(3671);
				match(TABLE);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoggedWithRollbackClauseContext extends ParserRuleContext {
		public TerminalNode LOGGED() { return getToken(DB2zSQLParser.LOGGED, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public TerminalNode ROLLBACK() { return getToken(DB2zSQLParser.ROLLBACK, 0); }
		public TerminalNode ROWS() { return getToken(DB2zSQLParser.ROWS, 0); }
		public TerminalNode DELETE() { return getToken(DB2zSQLParser.DELETE, 0); }
		public TerminalNode PRESERVE() { return getToken(DB2zSQLParser.PRESERVE, 0); }
		public LoggedWithRollbackClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loggedWithRollbackClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterLoggedWithRollbackClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitLoggedWithRollbackClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitLoggedWithRollbackClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoggedWithRollbackClauseContext loggedWithRollbackClause() throws RecognitionException {
		LoggedWithRollbackClauseContext _localctx = new LoggedWithRollbackClauseContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_loggedWithRollbackClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3683);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOGGED:
				{
				setState(3674);
				match(LOGGED);
				}
				break;
			case NOT:
				{
				{
				setState(3675);
				match(NOT);
				setState(3676);
				match(LOGGED);
				setState(3681);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,343,_ctx) ) {
				case 1:
					{
					setState(3677);
					match(ON);
					setState(3678);
					match(ROLLBACK);
					setState(3679);
					_la = _input.LA(1);
					if ( !(_la==DELETE || _la==PRESERVE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(3680);
					match(ROWS);
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateViewCheckOptionClauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(DB2zSQLParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(DB2zSQLParser.OPTION, 0); }
		public TerminalNode CASCADED() { return getToken(DB2zSQLParser.CASCADED, 0); }
		public TerminalNode LOCAL() { return getToken(DB2zSQLParser.LOCAL, 0); }
		public CreateViewCheckOptionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createViewCheckOptionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateViewCheckOptionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateViewCheckOptionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateViewCheckOptionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateViewCheckOptionClauseContext createViewCheckOptionClause() throws RecognitionException {
		CreateViewCheckOptionClauseContext _localctx = new CreateViewCheckOptionClauseContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_createViewCheckOptionClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3685);
			match(WITH);
			setState(3687);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADED || _la==LOCAL) {
				{
				setState(3686);
				_la = _input.LA(1);
				if ( !(_la==CASCADED || _la==LOCAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3689);
			match(CHECK);
			setState(3690);
			match(OPTION);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TrustedContextDefaultRoleClauseContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode DEFAULT() { return getToken(DB2zSQLParser.DEFAULT, 0); }
		public List<TerminalNode> ROLE() { return getTokens(DB2zSQLParser.ROLE); }
		public TerminalNode ROLE(int i) {
			return getToken(DB2zSQLParser.ROLE, i);
		}
		public RoleNameContext roleName() {
			return getRuleContext(RoleNameContext.class,0);
		}
		public TerminalNode WITHOUT() { return getToken(DB2zSQLParser.WITHOUT, 0); }
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode OBJECT() { return getToken(DB2zSQLParser.OBJECT, 0); }
		public TerminalNode OWNER() { return getToken(DB2zSQLParser.OWNER, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode AND() { return getToken(DB2zSQLParser.AND, 0); }
		public TerminalNode QUALIFIER() { return getToken(DB2zSQLParser.QUALIFIER, 0); }
		public TrustedContextDefaultRoleClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trustedContextDefaultRoleClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTrustedContextDefaultRoleClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTrustedContextDefaultRoleClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTrustedContextDefaultRoleClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TrustedContextDefaultRoleClauseContext trustedContextDefaultRoleClause() throws RecognitionException {
		TrustedContextDefaultRoleClauseContext _localctx = new TrustedContextDefaultRoleClauseContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_trustedContextDefaultRoleClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3712);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO:
				{
				{
				setState(3692);
				match(NO);
				setState(3693);
				match(DEFAULT);
				setState(3694);
				match(ROLE);
				}
				}
				break;
			case DEFAULT:
				{
				{
				setState(3695);
				match(DEFAULT);
				setState(3696);
				match(ROLE);
				setState(3697);
				roleName();
				setState(3710);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,346,_ctx) ) {
				case 1:
					{
					{
					setState(3698);
					match(WITHOUT);
					setState(3699);
					match(ROLE);
					setState(3700);
					match(AS);
					setState(3701);
					match(OBJECT);
					setState(3702);
					match(OWNER);
					}
					}
					break;
				case 2:
					{
					{
					setState(3703);
					match(WITH);
					setState(3704);
					match(ROLE);
					setState(3705);
					match(AS);
					setState(3706);
					match(OBJECT);
					setState(3707);
					match(OWNER);
					setState(3708);
					match(AND);
					setState(3709);
					match(QUALIFIER);
					}
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TrustedContextEnableDisableClauseContext extends ParserRuleContext {
		public TerminalNode DISABLE() { return getToken(DB2zSQLParser.DISABLE, 0); }
		public TerminalNode ENABLE() { return getToken(DB2zSQLParser.ENABLE, 0); }
		public TrustedContextEnableDisableClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trustedContextEnableDisableClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTrustedContextEnableDisableClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTrustedContextEnableDisableClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTrustedContextEnableDisableClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TrustedContextEnableDisableClauseContext trustedContextEnableDisableClause() throws RecognitionException {
		TrustedContextEnableDisableClauseContext _localctx = new TrustedContextEnableDisableClauseContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_trustedContextEnableDisableClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3714);
			_la = _input.LA(1);
			if ( !(_la==DISABLE || _la==ENABLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TrustedContextDefaultSecurityLabelClauseContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode DEFAULT() { return getToken(DB2zSQLParser.DEFAULT, 0); }
		public TerminalNode SECURITY() { return getToken(DB2zSQLParser.SECURITY, 0); }
		public TerminalNode LABEL() { return getToken(DB2zSQLParser.LABEL, 0); }
		public SeclabelNameContext seclabelName() {
			return getRuleContext(SeclabelNameContext.class,0);
		}
		public TrustedContextDefaultSecurityLabelClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trustedContextDefaultSecurityLabelClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTrustedContextDefaultSecurityLabelClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTrustedContextDefaultSecurityLabelClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTrustedContextDefaultSecurityLabelClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TrustedContextDefaultSecurityLabelClauseContext trustedContextDefaultSecurityLabelClause() throws RecognitionException {
		TrustedContextDefaultSecurityLabelClauseContext _localctx = new TrustedContextDefaultSecurityLabelClauseContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_trustedContextDefaultSecurityLabelClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3724);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO:
				{
				{
				setState(3716);
				match(NO);
				setState(3717);
				match(DEFAULT);
				setState(3718);
				match(SECURITY);
				setState(3719);
				match(LABEL);
				}
				}
				break;
			case DEFAULT:
				{
				{
				setState(3720);
				match(DEFAULT);
				setState(3721);
				match(SECURITY);
				setState(3722);
				match(LABEL);
				setState(3723);
				seclabelName();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TrustedContextAttributesClauseContext extends ParserRuleContext {
		public TerminalNode ATTRIBUTES() { return getToken(DB2zSQLParser.ATTRIBUTES, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TrustedContextAttribute1Context> trustedContextAttribute1() {
			return getRuleContexts(TrustedContextAttribute1Context.class);
		}
		public TrustedContextAttribute1Context trustedContextAttribute1(int i) {
			return getRuleContext(TrustedContextAttribute1Context.class,i);
		}
		public List<TrustedContextAttribute2Context> trustedContextAttribute2() {
			return getRuleContexts(TrustedContextAttribute2Context.class);
		}
		public TrustedContextAttribute2Context trustedContextAttribute2(int i) {
			return getRuleContext(TrustedContextAttribute2Context.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public TrustedContextAttributesClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trustedContextAttributesClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTrustedContextAttributesClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTrustedContextAttributesClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTrustedContextAttributesClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TrustedContextAttributesClauseContext trustedContextAttributesClause() throws RecognitionException {
		TrustedContextAttributesClauseContext _localctx = new TrustedContextAttributesClauseContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_trustedContextAttributesClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3726);
			match(ATTRIBUTES);
			setState(3727);
			match(LPAREN);
			setState(3744);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENCRYPTION:
			case ADDRESS:
			case SERVAUTH:
				{
				{
				setState(3728);
				trustedContextAttribute1();
				setState(3733);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3729);
					match(COMMA);
					setState(3730);
					trustedContextAttribute1();
					}
					}
					setState(3735);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case JOBNAME:
				{
				{
				setState(3736);
				trustedContextAttribute2();
				setState(3741);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3737);
					match(COMMA);
					setState(3738);
					trustedContextAttribute2();
					}
					}
					setState(3743);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3746);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TrustedContextWithUseForClauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode USE() { return getToken(DB2zSQLParser.USE, 0); }
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public List<TrustedContextUseForContext> trustedContextUseFor() {
			return getRuleContexts(TrustedContextUseForContext.class);
		}
		public TrustedContextUseForContext trustedContextUseFor(int i) {
			return getRuleContext(TrustedContextUseForContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public TrustedContextWithUseForClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trustedContextWithUseForClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTrustedContextWithUseForClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTrustedContextWithUseForClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTrustedContextWithUseForClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TrustedContextWithUseForClauseContext trustedContextWithUseForClause() throws RecognitionException {
		TrustedContextWithUseForClauseContext _localctx = new TrustedContextWithUseForClauseContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_trustedContextWithUseForClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3748);
			match(WITH);
			setState(3749);
			match(USE);
			setState(3750);
			match(FOR);
			setState(3751);
			trustedContextUseFor();
			setState(3756);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3752);
				match(COMMA);
				setState(3753);
				trustedContextUseFor();
				}
				}
				setState(3758);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TrustedContextAttribute1Context extends ParserRuleContext {
		public TerminalNode ADDRESS() { return getToken(DB2zSQLParser.ADDRESS, 0); }
		public AddressValueContext addressValue() {
			return getRuleContext(AddressValueContext.class,0);
		}
		public TerminalNode ENCRYPTION() { return getToken(DB2zSQLParser.ENCRYPTION, 0); }
		public EncryptionValueContext encryptionValue() {
			return getRuleContext(EncryptionValueContext.class,0);
		}
		public TerminalNode SERVAUTH() { return getToken(DB2zSQLParser.SERVAUTH, 0); }
		public ServauthValueContext servauthValue() {
			return getRuleContext(ServauthValueContext.class,0);
		}
		public TrustedContextAttribute1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trustedContextAttribute1; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTrustedContextAttribute1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTrustedContextAttribute1(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTrustedContextAttribute1(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TrustedContextAttribute1Context trustedContextAttribute1() throws RecognitionException {
		TrustedContextAttribute1Context _localctx = new TrustedContextAttribute1Context(_ctx, getState());
		enterRule(_localctx, 340, RULE_trustedContextAttribute1);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3765);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADDRESS:
				{
				{
				setState(3759);
				match(ADDRESS);
				setState(3760);
				addressValue();
				}
				}
				break;
			case ENCRYPTION:
				{
				{
				setState(3761);
				match(ENCRYPTION);
				setState(3762);
				encryptionValue();
				}
				}
				break;
			case SERVAUTH:
				{
				{
				setState(3763);
				match(SERVAUTH);
				setState(3764);
				servauthValue();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TrustedContextAttribute2Context extends ParserRuleContext {
		public TerminalNode JOBNAME() { return getToken(DB2zSQLParser.JOBNAME, 0); }
		public JobnameValueContext jobnameValue() {
			return getRuleContext(JobnameValueContext.class,0);
		}
		public TrustedContextAttribute2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trustedContextAttribute2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTrustedContextAttribute2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTrustedContextAttribute2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTrustedContextAttribute2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TrustedContextAttribute2Context trustedContextAttribute2() throws RecognitionException {
		TrustedContextAttribute2Context _localctx = new TrustedContextAttribute2Context(_ctx, getState());
		enterRule(_localctx, 342, RULE_trustedContextAttribute2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			{
			setState(3767);
			match(JOBNAME);
			setState(3768);
			jobnameValue();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TrustedContextUseForContext extends ParserRuleContext {
		public AuthorizationNameContext authorizationName() {
			return getRuleContext(AuthorizationNameContext.class,0);
		}
		public TerminalNode EXTERNAL() { return getToken(DB2zSQLParser.EXTERNAL, 0); }
		public TerminalNode SECURITY() { return getToken(DB2zSQLParser.SECURITY, 0); }
		public TerminalNode PROFILE() { return getToken(DB2zSQLParser.PROFILE, 0); }
		public ProfileNameContext profileName() {
			return getRuleContext(ProfileNameContext.class,0);
		}
		public TerminalNode PUBLIC() { return getToken(DB2zSQLParser.PUBLIC, 0); }
		public TerminalNode AUTHENTICATION() { return getToken(DB2zSQLParser.AUTHENTICATION, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode WITHOUT() { return getToken(DB2zSQLParser.WITHOUT, 0); }
		public List<UserOptionsContext> userOptions() {
			return getRuleContexts(UserOptionsContext.class);
		}
		public UserOptionsContext userOptions(int i) {
			return getRuleContext(UserOptionsContext.class,i);
		}
		public TrustedContextUseForContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trustedContextUseFor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTrustedContextUseFor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTrustedContextUseFor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTrustedContextUseFor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TrustedContextUseForContext trustedContextUseFor() throws RecognitionException {
		TrustedContextUseForContext _localctx = new TrustedContextUseForContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_trustedContextUseFor);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3790);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,356,_ctx) ) {
			case 1:
				{
				{
				setState(3770);
				authorizationName();
				setState(3774);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,354,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3771);
						userOptions();
						}
						} 
					}
					setState(3776);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,354,_ctx);
				}
				}
				}
				break;
			case 2:
				{
				{
				setState(3777);
				match(EXTERNAL);
				setState(3778);
				match(SECURITY);
				setState(3779);
				match(PROFILE);
				setState(3780);
				profileName();
				setState(3784);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,355,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3781);
						userOptions();
						}
						} 
					}
					setState(3786);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,355,_ctx);
				}
				}
				}
				break;
			case 3:
				{
				{
				setState(3787);
				match(PUBLIC);
				setState(3788);
				_la = _input.LA(1);
				if ( !(_la==WITH || _la==WITHOUT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3789);
				match(AUTHENTICATION);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserOptionsContext extends ParserRuleContext {
		public TerminalNode ROLE() { return getToken(DB2zSQLParser.ROLE, 0); }
		public RoleNameContext roleName() {
			return getRuleContext(RoleNameContext.class,0);
		}
		public TerminalNode SECURITY() { return getToken(DB2zSQLParser.SECURITY, 0); }
		public TerminalNode LABEL() { return getToken(DB2zSQLParser.LABEL, 0); }
		public SeclabelNameContext seclabelName() {
			return getRuleContext(SeclabelNameContext.class,0);
		}
		public TerminalNode AUTHENTICATION() { return getToken(DB2zSQLParser.AUTHENTICATION, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode WITHOUT() { return getToken(DB2zSQLParser.WITHOUT, 0); }
		public UserOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterUserOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitUserOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitUserOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserOptionsContext userOptions() throws RecognitionException {
		UserOptionsContext _localctx = new UserOptionsContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_userOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3799);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ROLE:
				{
				{
				setState(3792);
				match(ROLE);
				setState(3793);
				roleName();
				}
				}
				break;
			case SECURITY:
				{
				{
				setState(3794);
				match(SECURITY);
				setState(3795);
				match(LABEL);
				setState(3796);
				seclabelName();
				}
				}
				break;
			case WITH:
			case WITHOUT:
				{
				{
				setState(3797);
				_la = _input.LA(1);
				if ( !(_la==WITH || _la==WITHOUT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3798);
				match(AUTHENTICATION);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerDefinitionContext extends ParserRuleContext {
		public TriggerActivationTimeContext triggerActivationTime() {
			return getRuleContext(TriggerActivationTimeContext.class,0);
		}
		public TriggerEventContext triggerEvent() {
			return getRuleContext(TriggerEventContext.class,0);
		}
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TriggerGranularityContext triggerGranularity() {
			return getRuleContext(TriggerGranularityContext.class,0);
		}
		public TerminalNode MODE_() { return getToken(DB2zSQLParser.MODE_, 0); }
		public TerminalNode DB2SQL() { return getToken(DB2zSQLParser.DB2SQL, 0); }
		public TriggeredActionContext triggeredAction() {
			return getRuleContext(TriggeredActionContext.class,0);
		}
		public TerminalNode REFERENCING() { return getToken(DB2zSQLParser.REFERENCING, 0); }
		public TriggerDefinitionOptionContext triggerDefinitionOption() {
			return getRuleContext(TriggerDefinitionOptionContext.class,0);
		}
		public List<CorrelationNameContext> correlationName() {
			return getRuleContexts(CorrelationNameContext.class);
		}
		public CorrelationNameContext correlationName(int i) {
			return getRuleContext(CorrelationNameContext.class,i);
		}
		public List<TerminalNode> OLD() { return getTokens(DB2zSQLParser.OLD); }
		public TerminalNode OLD(int i) {
			return getToken(DB2zSQLParser.OLD, i);
		}
		public List<TerminalNode> NEW() { return getTokens(DB2zSQLParser.NEW); }
		public TerminalNode NEW(int i) {
			return getToken(DB2zSQLParser.NEW, i);
		}
		public List<TerminalNode> OLD_TABLE() { return getTokens(DB2zSQLParser.OLD_TABLE); }
		public TerminalNode OLD_TABLE(int i) {
			return getToken(DB2zSQLParser.OLD_TABLE, i);
		}
		public List<TerminalNode> NEW_TABLE() { return getTokens(DB2zSQLParser.NEW_TABLE); }
		public TerminalNode NEW_TABLE(int i) {
			return getToken(DB2zSQLParser.NEW_TABLE, i);
		}
		public List<TerminalNode> AS() { return getTokens(DB2zSQLParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(DB2zSQLParser.AS, i);
		}
		public List<TerminalNode> TABLE() { return getTokens(DB2zSQLParser.TABLE); }
		public TerminalNode TABLE(int i) {
			return getToken(DB2zSQLParser.TABLE, i);
		}
		public TriggerDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTriggerDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTriggerDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTriggerDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerDefinitionContext triggerDefinition() throws RecognitionException {
		TriggerDefinitionContext _localctx = new TriggerDefinitionContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_triggerDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3801);
			triggerActivationTime();
			setState(3802);
			triggerEvent();
			setState(3803);
			match(ON);
			setState(3804);
			tableName();
			setState(3824);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REFERENCING) {
				{
				setState(3805);
				match(REFERENCING);
				setState(3820); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3814);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,358,_ctx) ) {
					case 1:
						{
						setState(3806);
						match(OLD);
						}
						break;
					case 2:
						{
						setState(3807);
						match(NEW);
						}
						break;
					case 3:
						{
						setState(3808);
						match(OLD_TABLE);
						}
						break;
					case 4:
						{
						setState(3809);
						match(NEW_TABLE);
						}
						break;
					case 5:
						{
						{
						setState(3810);
						match(OLD);
						setState(3811);
						match(TABLE);
						}
						}
						break;
					case 6:
						{
						{
						setState(3812);
						match(NEW);
						setState(3813);
						match(TABLE);
						}
						}
						break;
					}
					setState(3817);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,359,_ctx) ) {
					case 1:
						{
						setState(3816);
						match(AS);
						}
						break;
					}
					setState(3819);
					correlationName();
					}
					}
					setState(3822); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << NEW_TABLE) | (1L << OLD_TABLE))) != 0) || _la==OLD );
				}
			}

			setState(3826);
			triggerGranularity();
			setState(3827);
			match(MODE_);
			setState(3828);
			match(DB2SQL);
			setState(3830);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,362,_ctx) ) {
			case 1:
				{
				setState(3829);
				triggerDefinitionOption();
				}
				break;
			}
			setState(3832);
			triggeredAction();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerActivationTimeContext extends ParserRuleContext {
		public TerminalNode AFTER() { return getToken(DB2zSQLParser.AFTER, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode CASCADE() { return getToken(DB2zSQLParser.CASCADE, 0); }
		public TerminalNode BEFORE() { return getToken(DB2zSQLParser.BEFORE, 0); }
		public TerminalNode INSTEAD() { return getToken(DB2zSQLParser.INSTEAD, 0); }
		public TerminalNode OF() { return getToken(DB2zSQLParser.OF, 0); }
		public TriggerActivationTimeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerActivationTime; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTriggerActivationTime(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTriggerActivationTime(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTriggerActivationTime(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerActivationTimeContext triggerActivationTime() throws RecognitionException {
		TriggerActivationTimeContext _localctx = new TriggerActivationTimeContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_triggerActivationTime);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3840);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO:
				{
				{
				setState(3834);
				match(NO);
				setState(3835);
				match(CASCADE);
				setState(3836);
				match(BEFORE);
				}
				}
				break;
			case AFTER:
				{
				setState(3837);
				match(AFTER);
				}
				break;
			case INSTEAD:
				{
				{
				setState(3838);
				match(INSTEAD);
				setState(3839);
				match(OF);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerEventContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(DB2zSQLParser.INSERT, 0); }
		public TerminalNode DELETE() { return getToken(DB2zSQLParser.DELETE, 0); }
		public TerminalNode UPDATE() { return getToken(DB2zSQLParser.UPDATE, 0); }
		public TerminalNode OF() { return getToken(DB2zSQLParser.OF, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public TriggerEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerEvent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTriggerEvent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTriggerEvent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTriggerEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerEventContext triggerEvent() throws RecognitionException {
		TriggerEventContext _localctx = new TriggerEventContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_triggerEvent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3856);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INSERT:
				{
				setState(3842);
				match(INSERT);
				}
				break;
			case DELETE:
				{
				setState(3843);
				match(DELETE);
				}
				break;
			case UPDATE:
				{
				{
				setState(3844);
				match(UPDATE);
				setState(3854);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OF) {
					{
					setState(3845);
					match(OF);
					setState(3846);
					columnName();
					setState(3851);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3847);
						match(COMMA);
						setState(3848);
						columnName();
						}
						}
						setState(3853);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerGranularityContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode EACH() { return getToken(DB2zSQLParser.EACH, 0); }
		public TerminalNode STATEMENT() { return getToken(DB2zSQLParser.STATEMENT, 0); }
		public TerminalNode ROW() { return getToken(DB2zSQLParser.ROW, 0); }
		public TriggerGranularityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerGranularity; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTriggerGranularity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTriggerGranularity(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTriggerGranularity(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerGranularityContext triggerGranularity() throws RecognitionException {
		TriggerGranularityContext _localctx = new TriggerGranularityContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_triggerGranularity);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3864);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,367,_ctx) ) {
			case 1:
				{
				{
				setState(3858);
				match(FOR);
				setState(3859);
				match(EACH);
				setState(3860);
				match(STATEMENT);
				}
				}
				break;
			case 2:
				{
				{
				setState(3861);
				match(FOR);
				setState(3862);
				match(EACH);
				setState(3863);
				match(ROW);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggeredActionContext extends ParserRuleContext {
		public SqlTriggerBodyContext sqlTriggerBody() {
			return getRuleContext(SqlTriggerBodyContext.class,0);
		}
		public TerminalNode WHEN() { return getToken(DB2zSQLParser.WHEN, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public SearchConditionContext searchCondition() {
			return getRuleContext(SearchConditionContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TriggeredActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggeredAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTriggeredAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTriggeredAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTriggeredAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggeredActionContext triggeredAction() throws RecognitionException {
		TriggeredActionContext _localctx = new TriggeredActionContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_triggeredAction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3871);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,368,_ctx) ) {
			case 1:
				{
				setState(3866);
				match(WHEN);
				setState(3867);
				match(LPAREN);
				setState(3868);
				searchCondition();
				setState(3869);
				match(RPAREN);
				}
				break;
			}
			setState(3873);
			sqlTriggerBody();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SqlTriggerBodyContext extends ParserRuleContext {
		public List<TriggeredSqlStatementContext> triggeredSqlStatement() {
			return getRuleContexts(TriggeredSqlStatementContext.class);
		}
		public TriggeredSqlStatementContext triggeredSqlStatement(int i) {
			return getRuleContext(TriggeredSqlStatementContext.class,i);
		}
		public TerminalNode BEGIN() { return getToken(DB2zSQLParser.BEGIN, 0); }
		public TerminalNode ATOMIC() { return getToken(DB2zSQLParser.ATOMIC, 0); }
		public TerminalNode END() { return getToken(DB2zSQLParser.END, 0); }
		public List<TerminalNode> SEMICOLON() { return getTokens(DB2zSQLParser.SEMICOLON); }
		public TerminalNode SEMICOLON(int i) {
			return getToken(DB2zSQLParser.SEMICOLON, i);
		}
		public SqlTriggerBodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlTriggerBody; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSqlTriggerBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSqlTriggerBody(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSqlTriggerBody(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SqlTriggerBodyContext sqlTriggerBody() throws RecognitionException {
		SqlTriggerBodyContext _localctx = new SqlTriggerBodyContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_sqlTriggerBody);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3887);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,370,_ctx) ) {
			case 1:
				{
				setState(3875);
				triggeredSqlStatement();
				}
				break;
			case 2:
				{
				{
				setState(3876);
				match(BEGIN);
				setState(3877);
				match(ATOMIC);
				setState(3881); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(3878);
						triggeredSqlStatement();
						setState(3879);
						match(SEMICOLON);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3883); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,369,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(3885);
				match(END);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggeredSqlStatementContext extends ParserRuleContext {
		public CallStatementContext callStatement() {
			return getRuleContext(CallStatementContext.class,0);
		}
		public SearchedDeleteContext searchedDelete() {
			return getRuleContext(SearchedDeleteContext.class,0);
		}
		public InsertStatementContext insertStatement() {
			return getRuleContext(InsertStatementContext.class,0);
		}
		public MergeStatementContext mergeStatement() {
			return getRuleContext(MergeStatementContext.class,0);
		}
		public SetAssignmentStatementContext setAssignmentStatement() {
			return getRuleContext(SetAssignmentStatementContext.class,0);
		}
		public SignalStatementContext signalStatement() {
			return getRuleContext(SignalStatementContext.class,0);
		}
		public SearchedUpdateContext searchedUpdate() {
			return getRuleContext(SearchedUpdateContext.class,0);
		}
		public ValuesStatementContext valuesStatement() {
			return getRuleContext(ValuesStatementContext.class,0);
		}
		public FullSelectContext fullSelect() {
			return getRuleContext(FullSelectContext.class,0);
		}
		public CommonTableExpressionContext commonTableExpression() {
			return getRuleContext(CommonTableExpressionContext.class,0);
		}
		public TriggeredSqlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggeredSqlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTriggeredSqlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTriggeredSqlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTriggeredSqlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggeredSqlStatementContext triggeredSqlStatement() throws RecognitionException {
		TriggeredSqlStatementContext _localctx = new TriggeredSqlStatementContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_triggeredSqlStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3901);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,372,_ctx) ) {
			case 1:
				{
				setState(3889);
				callStatement();
				}
				break;
			case 2:
				{
				setState(3890);
				searchedDelete();
				}
				break;
			case 3:
				{
				{
				setState(3892);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,371,_ctx) ) {
				case 1:
					{
					setState(3891);
					commonTableExpression();
					}
					break;
				}
				setState(3894);
				fullSelect();
				}
				}
				break;
			case 4:
				{
				setState(3895);
				insertStatement();
				}
				break;
			case 5:
				{
				setState(3896);
				mergeStatement();
				}
				break;
			case 6:
				{
				setState(3897);
				setAssignmentStatement();
				}
				break;
			case 7:
				{
				setState(3898);
				signalStatement();
				}
				break;
			case 8:
				{
				setState(3899);
				searchedUpdate();
				}
				break;
			case 9:
				{
				setState(3900);
				valuesStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerDefinitionOptionContext extends ParserRuleContext {
		public TerminalNode SECURED() { return getToken(DB2zSQLParser.SECURED, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TriggerDefinitionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerDefinitionOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTriggerDefinitionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTriggerDefinitionOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTriggerDefinitionOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerDefinitionOptionContext triggerDefinitionOption() throws RecognitionException {
		TriggerDefinitionOptionContext _localctx = new TriggerDefinitionOptionContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_triggerDefinitionOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3906);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT:
				{
				{
				setState(3903);
				match(NOT);
				setState(3904);
				match(SECURED);
				}
				}
				break;
			case SECURED:
				{
				setState(3905);
				match(SECURED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTableInClauseContext extends ParserRuleContext {
		public TerminalNode IN() { return getToken(DB2zSQLParser.IN, 0); }
		public TablespaceNameContext tablespaceName() {
			return getRuleContext(TablespaceNameContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(DB2zSQLParser.DATABASE, 0); }
		public DatabaseNameContext databaseName() {
			return getRuleContext(DatabaseNameContext.class,0);
		}
		public TerminalNode ACCELERATOR() { return getToken(DB2zSQLParser.ACCELERATOR, 0); }
		public AcceleratorNameContext acceleratorName() {
			return getRuleContext(AcceleratorNameContext.class,0);
		}
		public CreateTableInClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTableInClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateTableInClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateTableInClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateTableInClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTableInClauseContext createTableInClause() throws RecognitionException {
		CreateTableInClauseContext _localctx = new CreateTableInClauseContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_createTableInClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3919);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,375,_ctx) ) {
			case 1:
				{
				{
				setState(3908);
				match(IN);
				setState(3910);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,374,_ctx) ) {
				case 1:
					{
					setState(3909);
					databaseName();
					}
					break;
				}
				setState(3912);
				tablespaceName();
				}
				}
				break;
			case 2:
				{
				{
				setState(3913);
				match(IN);
				setState(3914);
				match(DATABASE);
				setState(3915);
				databaseName();
				}
				}
				break;
			case 3:
				{
				{
				setState(3916);
				match(IN);
				setState(3917);
				match(ACCELERATOR);
				setState(3918);
				acceleratorName();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTableColumnDefinitionContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public GeneratedClauseContext generatedClause() {
			return getRuleContext(GeneratedClauseContext.class,0);
		}
		public CreateTableColumnConstraintContext createTableColumnConstraint() {
			return getRuleContext(CreateTableColumnConstraintContext.class,0);
		}
		public DefaultClauseContext defaultClause() {
			return getRuleContext(DefaultClauseContext.class,0);
		}
		public FieldprocClauseContext fieldprocClause() {
			return getRuleContext(FieldprocClauseContext.class,0);
		}
		public AsSecurityLabelClauseContext asSecurityLabelClause() {
			return getRuleContext(AsSecurityLabelClauseContext.class,0);
		}
		public ImplicitlyHiddenClauseContext implicitlyHiddenClause() {
			return getRuleContext(ImplicitlyHiddenClauseContext.class,0);
		}
		public InlineLengthClauseContext inlineLengthClause() {
			return getRuleContext(InlineLengthClauseContext.class,0);
		}
		public CreateTableColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTableColumnDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateTableColumnDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateTableColumnDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateTableColumnDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTableColumnDefinitionContext createTableColumnDefinition() throws RecognitionException {
		CreateTableColumnDefinitionContext _localctx = new CreateTableColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_createTableColumnDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3921);
			columnName();
			setState(3923);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,376,_ctx) ) {
			case 1:
				{
				setState(3922);
				dataType();
				}
				break;
			}
			setState(3927);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(3925);
				match(NOT);
				setState(3926);
				match(NULL);
				}
			}

			setState(3930);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GENERATED) {
				{
				setState(3929);
				generatedClause();
				}
			}

			setState(3933);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CHECK || _la==CONSTRAINT || _la==REFERENCES || _la==UNIQUE || _la==PRIMARY) {
				{
				setState(3932);
				createTableColumnConstraint();
				}
			}

			setState(3936);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==WITH) {
				{
				setState(3935);
				defaultClause();
				}
			}

			setState(3939);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FIELDPROC) {
				{
				setState(3938);
				fieldprocClause();
				}
			}

			setState(3942);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(3941);
				asSecurityLabelClause();
				}
			}

			setState(3945);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IMPLICITLY) {
				{
				setState(3944);
				implicitlyHiddenClause();
				}
			}

			setState(3948);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INLINE) {
				{
				setState(3947);
				inlineLengthClause();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EditprocClauseContext extends ParserRuleContext {
		public TerminalNode EDITPROC() { return getToken(DB2zSQLParser.EDITPROC, 0); }
		public ProgramNameContext programName() {
			return getRuleContext(ProgramNameContext.class,0);
		}
		public TerminalNode ROW() { return getToken(DB2zSQLParser.ROW, 0); }
		public TerminalNode ATTRIBUTES() { return getToken(DB2zSQLParser.ATTRIBUTES, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode WITHOUT() { return getToken(DB2zSQLParser.WITHOUT, 0); }
		public EditprocClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_editprocClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterEditprocClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitEditprocClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitEditprocClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EditprocClauseContext editprocClause() throws RecognitionException {
		EditprocClauseContext _localctx = new EditprocClauseContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_editprocClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3950);
			match(EDITPROC);
			setState(3951);
			programName();
			setState(3955);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,385,_ctx) ) {
			case 1:
				{
				setState(3952);
				_la = _input.LA(1);
				if ( !(_la==WITH || _la==WITHOUT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3953);
				match(ROW);
				setState(3954);
				match(ATTRIBUTES);
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValidprocClauseContext extends ParserRuleContext {
		public TerminalNode VALIDPROC() { return getToken(DB2zSQLParser.VALIDPROC, 0); }
		public ProgramNameContext programName() {
			return getRuleContext(ProgramNameContext.class,0);
		}
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public ValidprocClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_validprocClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterValidprocClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitValidprocClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitValidprocClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValidprocClauseContext validprocClause() throws RecognitionException {
		ValidprocClauseContext _localctx = new ValidprocClauseContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_validprocClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3957);
			match(VALIDPROC);
			setState(3960);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,386,_ctx) ) {
			case 1:
				{
				setState(3958);
				programName();
				}
				break;
			case 2:
				{
				setState(3959);
				match(NULL);
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AuditClauseContext extends ParserRuleContext {
		public TerminalNode AUDIT() { return getToken(DB2zSQLParser.AUDIT, 0); }
		public TerminalNode NONE() { return getToken(DB2zSQLParser.NONE, 0); }
		public TerminalNode CHANGES() { return getToken(DB2zSQLParser.CHANGES, 0); }
		public TerminalNode ALL() { return getToken(DB2zSQLParser.ALL, 0); }
		public AuditClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_auditClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAuditClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAuditClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAuditClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AuditClauseContext auditClause() throws RecognitionException {
		AuditClauseContext _localctx = new AuditClauseContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_auditClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3962);
			match(AUDIT);
			setState(3963);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==NONE || _la==CHANGES) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ObidClauseContext extends ParserRuleContext {
		public TerminalNode OBID() { return getToken(DB2zSQLParser.OBID, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public ObidClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_obidClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterObidClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitObidClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitObidClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ObidClauseContext obidClause() throws RecognitionException {
		ObidClauseContext _localctx = new ObidClauseContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_obidClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3965);
			match(OBID);
			setState(3966);
			match(INTEGERLITERAL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataCaptureClauseContext extends ParserRuleContext {
		public TerminalNode DATA() { return getToken(DB2zSQLParser.DATA, 0); }
		public TerminalNode CAPTURE() { return getToken(DB2zSQLParser.CAPTURE, 0); }
		public TerminalNode NONE() { return getToken(DB2zSQLParser.NONE, 0); }
		public TerminalNode CHANGES() { return getToken(DB2zSQLParser.CHANGES, 0); }
		public DataCaptureClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataCaptureClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDataCaptureClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDataCaptureClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDataCaptureClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataCaptureClauseContext dataCaptureClause() throws RecognitionException {
		DataCaptureClauseContext _localctx = new DataCaptureClauseContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_dataCaptureClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3968);
			match(DATA);
			setState(3969);
			match(CAPTURE);
			setState(3970);
			_la = _input.LA(1);
			if ( !(_la==NONE || _la==CHANGES) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RestrictOnDropClauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode RESTRICT() { return getToken(DB2zSQLParser.RESTRICT, 0); }
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public TerminalNode DROP() { return getToken(DB2zSQLParser.DROP, 0); }
		public RestrictOnDropClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_restrictOnDropClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRestrictOnDropClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRestrictOnDropClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRestrictOnDropClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RestrictOnDropClauseContext restrictOnDropClause() throws RecognitionException {
		RestrictOnDropClauseContext _localctx = new RestrictOnDropClauseContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_restrictOnDropClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3972);
			match(WITH);
			setState(3973);
			match(RESTRICT);
			setState(3974);
			match(ON);
			setState(3975);
			match(DROP);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CcsidClause1Context extends ParserRuleContext {
		public TerminalNode CCSID() { return getToken(DB2zSQLParser.CCSID, 0); }
		public TerminalNode ASCII() { return getToken(DB2zSQLParser.ASCII, 0); }
		public TerminalNode EBCDIC() { return getToken(DB2zSQLParser.EBCDIC, 0); }
		public TerminalNode UNICODE() { return getToken(DB2zSQLParser.UNICODE, 0); }
		public CcsidClause1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ccsidClause1; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCcsidClause1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCcsidClause1(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCcsidClause1(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CcsidClause1Context ccsidClause1() throws RecognitionException {
		CcsidClause1Context _localctx = new CcsidClause1Context(_ctx, getState());
		enterRule(_localctx, 380, RULE_ccsidClause1);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3977);
			match(CCSID);
			setState(3978);
			_la = _input.LA(1);
			if ( !(_la==EBCDIC || _la==ASCII || _la==UNICODE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CcsidClause2Context extends ParserRuleContext {
		public TerminalNode CCSID() { return getToken(DB2zSQLParser.CCSID, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public CcsidClause2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ccsidClause2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCcsidClause2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCcsidClause2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCcsidClause2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CcsidClause2Context ccsidClause2() throws RecognitionException {
		CcsidClause2Context _localctx = new CcsidClause2Context(_ctx, getState());
		enterRule(_localctx, 382, RULE_ccsidClause2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3980);
			match(CCSID);
			setState(3981);
			match(INTEGERLITERAL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CardinalityClauseContext extends ParserRuleContext {
		public TerminalNode VOLATILE() { return getToken(DB2zSQLParser.VOLATILE, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TerminalNode CARDINALITY() { return getToken(DB2zSQLParser.CARDINALITY, 0); }
		public CardinalityClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cardinalityClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCardinalityClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCardinalityClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCardinalityClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CardinalityClauseContext cardinalityClause() throws RecognitionException {
		CardinalityClauseContext _localctx = new CardinalityClauseContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_cardinalityClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3984);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(3983);
				match(NOT);
				}
			}

			setState(3986);
			match(VOLATILE);
			setState(3988);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CARDINALITY) {
				{
				setState(3987);
				match(CARDINALITY);
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AppendClauseContext extends ParserRuleContext {
		public TerminalNode APPEND() { return getToken(DB2zSQLParser.APPEND, 0); }
		public TerminalNode YES() { return getToken(DB2zSQLParser.YES, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public AppendClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_appendClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAppendClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAppendClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAppendClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AppendClauseContext appendClause() throws RecognitionException {
		AppendClauseContext _localctx = new AppendClauseContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_appendClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3990);
			match(APPEND);
			setState(3991);
			_la = _input.LA(1);
			if ( !(_la==NO || _la==YES) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MemberClauseContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(DB2zSQLParser.MEMBER, 0); }
		public TerminalNode CLUSTER() { return getToken(DB2zSQLParser.CLUSTER, 0); }
		public MemberClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_memberClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterMemberClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitMemberClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitMemberClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MemberClauseContext memberClause() throws RecognitionException {
		MemberClauseContext _localctx = new MemberClauseContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_memberClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3993);
			match(MEMBER);
			setState(3994);
			match(CLUSTER);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TrackmodClauseContext extends ParserRuleContext {
		public TerminalNode TRACKMOD() { return getToken(DB2zSQLParser.TRACKMOD, 0); }
		public TerminalNode YES() { return getToken(DB2zSQLParser.YES, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TrackmodClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trackmodClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTrackmodClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTrackmodClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTrackmodClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TrackmodClauseContext trackmodClause() throws RecognitionException {
		TrackmodClauseContext _localctx = new TrackmodClauseContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_trackmodClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3996);
			match(TRACKMOD);
			setState(3997);
			_la = _input.LA(1);
			if ( !(_la==NO || _la==YES) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PagenumClauseContext extends ParserRuleContext {
		public TerminalNode PAGENUM() { return getToken(DB2zSQLParser.PAGENUM, 0); }
		public TerminalNode RELATIVE() { return getToken(DB2zSQLParser.RELATIVE, 0); }
		public TerminalNode ABSOLUTE() { return getToken(DB2zSQLParser.ABSOLUTE, 0); }
		public PagenumClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pagenumClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPagenumClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPagenumClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPagenumClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PagenumClauseContext pagenumClause() throws RecognitionException {
		PagenumClauseContext _localctx = new PagenumClauseContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_pagenumClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3999);
			match(PAGENUM);
			setState(4000);
			_la = _input.LA(1);
			if ( !(_la==RELATIVE || _la==ABSOLUTE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FieldprocClauseContext extends ParserRuleContext {
		public TerminalNode FIELDPROC() { return getToken(DB2zSQLParser.FIELDPROC, 0); }
		public ProgramNameContext programName() {
			return getRuleContext(ProgramNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<LiteralContext> literal() {
			return getRuleContexts(LiteralContext.class);
		}
		public LiteralContext literal(int i) {
			return getRuleContext(LiteralContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public FieldprocClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fieldprocClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFieldprocClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFieldprocClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFieldprocClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FieldprocClauseContext fieldprocClause() throws RecognitionException {
		FieldprocClauseContext _localctx = new FieldprocClauseContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_fieldprocClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4002);
			match(FIELDPROC);
			setState(4003);
			programName();
			setState(4004);
			match(LPAREN);
			setState(4005);
			literal();
			setState(4010);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4006);
				match(COMMA);
				setState(4007);
				literal();
				}
				}
				setState(4012);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4013);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AsSecurityLabelClauseContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode SECURITY() { return getToken(DB2zSQLParser.SECURITY, 0); }
		public TerminalNode LABEL() { return getToken(DB2zSQLParser.LABEL, 0); }
		public AsSecurityLabelClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asSecurityLabelClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAsSecurityLabelClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAsSecurityLabelClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAsSecurityLabelClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AsSecurityLabelClauseContext asSecurityLabelClause() throws RecognitionException {
		AsSecurityLabelClauseContext _localctx = new AsSecurityLabelClauseContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_asSecurityLabelClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4015);
			match(AS);
			setState(4016);
			match(SECURITY);
			setState(4017);
			match(LABEL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ImplicitlyHiddenClauseContext extends ParserRuleContext {
		public TerminalNode IMPLICITLY() { return getToken(DB2zSQLParser.IMPLICITLY, 0); }
		public TerminalNode HIDDEN_() { return getToken(DB2zSQLParser.HIDDEN_, 0); }
		public ImplicitlyHiddenClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_implicitlyHiddenClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterImplicitlyHiddenClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitImplicitlyHiddenClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitImplicitlyHiddenClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ImplicitlyHiddenClauseContext implicitlyHiddenClause() throws RecognitionException {
		ImplicitlyHiddenClauseContext _localctx = new ImplicitlyHiddenClauseContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_implicitlyHiddenClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4019);
			match(IMPLICITLY);
			setState(4020);
			match(HIDDEN_);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InlineLengthClauseContext extends ParserRuleContext {
		public TerminalNode INLINE() { return getToken(DB2zSQLParser.INLINE, 0); }
		public TerminalNode LENGTH() { return getToken(DB2zSQLParser.LENGTH, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public InlineLengthClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inlineLengthClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterInlineLengthClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitInlineLengthClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitInlineLengthClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InlineLengthClauseContext inlineLengthClause() throws RecognitionException {
		InlineLengthClauseContext _localctx = new InlineLengthClauseContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_inlineLengthClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4022);
			match(INLINE);
			setState(4023);
			match(LENGTH);
			setState(4024);
			match(INTEGERLITERAL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyOptionsContext extends ParserRuleContext {
		public List<CopyOptionIdentityContext> copyOptionIdentity() {
			return getRuleContexts(CopyOptionIdentityContext.class);
		}
		public CopyOptionIdentityContext copyOptionIdentity(int i) {
			return getRuleContext(CopyOptionIdentityContext.class,i);
		}
		public List<CopyOptionRowChangeTimestampContext> copyOptionRowChangeTimestamp() {
			return getRuleContexts(CopyOptionRowChangeTimestampContext.class);
		}
		public CopyOptionRowChangeTimestampContext copyOptionRowChangeTimestamp(int i) {
			return getRuleContext(CopyOptionRowChangeTimestampContext.class,i);
		}
		public List<CopyOptionColumnDefaultsContext> copyOptionColumnDefaults() {
			return getRuleContexts(CopyOptionColumnDefaultsContext.class);
		}
		public CopyOptionColumnDefaultsContext copyOptionColumnDefaults(int i) {
			return getRuleContext(CopyOptionColumnDefaultsContext.class,i);
		}
		public List<CopyOptionXmlTypeModifiersContext> copyOptionXmlTypeModifiers() {
			return getRuleContexts(CopyOptionXmlTypeModifiersContext.class);
		}
		public CopyOptionXmlTypeModifiersContext copyOptionXmlTypeModifiers(int i) {
			return getRuleContext(CopyOptionXmlTypeModifiersContext.class,i);
		}
		public CopyOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCopyOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCopyOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCopyOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyOptionsContext copyOptions() throws RecognitionException {
		CopyOptionsContext _localctx = new CopyOptionsContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_copyOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4030); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(4030);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,390,_ctx) ) {
				case 1:
					{
					setState(4026);
					copyOptionIdentity();
					}
					break;
				case 2:
					{
					setState(4027);
					copyOptionRowChangeTimestamp();
					}
					break;
				case 3:
					{
					setState(4028);
					copyOptionColumnDefaults();
					}
					break;
				case 4:
					{
					setState(4029);
					copyOptionXmlTypeModifiers();
					}
					break;
				}
				}
				setState(4032); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==USING || _la==EXCLUDING || _la==INCLUDING );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyOptionIdentityContext extends ParserRuleContext {
		public TerminalNode IDENTITY() { return getToken(DB2zSQLParser.IDENTITY, 0); }
		public TerminalNode EXCLUDING() { return getToken(DB2zSQLParser.EXCLUDING, 0); }
		public TerminalNode INCLUDING() { return getToken(DB2zSQLParser.INCLUDING, 0); }
		public TerminalNode COLUMN() { return getToken(DB2zSQLParser.COLUMN, 0); }
		public TerminalNode ATTRIBUTES() { return getToken(DB2zSQLParser.ATTRIBUTES, 0); }
		public CopyOptionIdentityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyOptionIdentity; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCopyOptionIdentity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCopyOptionIdentity(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCopyOptionIdentity(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyOptionIdentityContext copyOptionIdentity() throws RecognitionException {
		CopyOptionIdentityContext _localctx = new CopyOptionIdentityContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_copyOptionIdentity);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4034);
			_la = _input.LA(1);
			if ( !(_la==EXCLUDING || _la==INCLUDING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4035);
			match(IDENTITY);
			setState(4038);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMN) {
				{
				setState(4036);
				match(COLUMN);
				setState(4037);
				match(ATTRIBUTES);
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyOptionRowChangeTimestampContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(DB2zSQLParser.ROW, 0); }
		public TerminalNode CHANGE() { return getToken(DB2zSQLParser.CHANGE, 0); }
		public TerminalNode TIMESTAMP() { return getToken(DB2zSQLParser.TIMESTAMP, 0); }
		public TerminalNode EXCLUDING() { return getToken(DB2zSQLParser.EXCLUDING, 0); }
		public TerminalNode INCLUDING() { return getToken(DB2zSQLParser.INCLUDING, 0); }
		public TerminalNode COLUMN() { return getToken(DB2zSQLParser.COLUMN, 0); }
		public TerminalNode ATTRIBUTES() { return getToken(DB2zSQLParser.ATTRIBUTES, 0); }
		public CopyOptionRowChangeTimestampContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyOptionRowChangeTimestamp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCopyOptionRowChangeTimestamp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCopyOptionRowChangeTimestamp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCopyOptionRowChangeTimestamp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyOptionRowChangeTimestampContext copyOptionRowChangeTimestamp() throws RecognitionException {
		CopyOptionRowChangeTimestampContext _localctx = new CopyOptionRowChangeTimestampContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_copyOptionRowChangeTimestamp);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4040);
			_la = _input.LA(1);
			if ( !(_la==EXCLUDING || _la==INCLUDING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4041);
			match(ROW);
			setState(4042);
			match(CHANGE);
			setState(4043);
			match(TIMESTAMP);
			setState(4046);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMN) {
				{
				setState(4044);
				match(COLUMN);
				setState(4045);
				match(ATTRIBUTES);
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyOptionColumnDefaultsContext extends ParserRuleContext {
		public TerminalNode DEFAULTS() { return getToken(DB2zSQLParser.DEFAULTS, 0); }
		public TerminalNode USING() { return getToken(DB2zSQLParser.USING, 0); }
		public TerminalNode TYPE() { return getToken(DB2zSQLParser.TYPE, 0); }
		public TerminalNode EXCLUDING() { return getToken(DB2zSQLParser.EXCLUDING, 0); }
		public TerminalNode INCLUDING() { return getToken(DB2zSQLParser.INCLUDING, 0); }
		public TerminalNode COLUMN() { return getToken(DB2zSQLParser.COLUMN, 0); }
		public CopyOptionColumnDefaultsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyOptionColumnDefaults; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCopyOptionColumnDefaults(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCopyOptionColumnDefaults(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCopyOptionColumnDefaults(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyOptionColumnDefaultsContext copyOptionColumnDefaults() throws RecognitionException {
		CopyOptionColumnDefaultsContext _localctx = new CopyOptionColumnDefaultsContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_copyOptionColumnDefaults);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4056);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EXCLUDING:
			case INCLUDING:
				{
				{
				setState(4048);
				_la = _input.LA(1);
				if ( !(_la==EXCLUDING || _la==INCLUDING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4050);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(4049);
					match(COLUMN);
					}
				}

				setState(4052);
				match(DEFAULTS);
				}
				}
				break;
			case USING:
				{
				{
				setState(4053);
				match(USING);
				setState(4054);
				match(TYPE);
				setState(4055);
				match(DEFAULTS);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyOptionXmlTypeModifiersContext extends ParserRuleContext {
		public TerminalNode EXCLUDING() { return getToken(DB2zSQLParser.EXCLUDING, 0); }
		public TerminalNode XML() { return getToken(DB2zSQLParser.XML, 0); }
		public TerminalNode TYPE() { return getToken(DB2zSQLParser.TYPE, 0); }
		public TerminalNode MODIFIERS() { return getToken(DB2zSQLParser.MODIFIERS, 0); }
		public CopyOptionXmlTypeModifiersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyOptionXmlTypeModifiers; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCopyOptionXmlTypeModifiers(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCopyOptionXmlTypeModifiers(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCopyOptionXmlTypeModifiers(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyOptionXmlTypeModifiersContext copyOptionXmlTypeModifiers() throws RecognitionException {
		CopyOptionXmlTypeModifiersContext _localctx = new CopyOptionXmlTypeModifiersContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_copyOptionXmlTypeModifiers);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4058);
			match(EXCLUDING);
			setState(4059);
			match(XML);
			setState(4060);
			match(TYPE);
			setState(4061);
			match(MODIFIERS);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AsResultTableContext extends ParserRuleContext {
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public FullSelectContext fullSelect() {
			return getRuleContext(FullSelectContext.class,0);
		}
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode DATA() { return getToken(DB2zSQLParser.DATA, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public AsResultTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asResultTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAsResultTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAsResultTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAsResultTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AsResultTableContext asResultTable() throws RecognitionException {
		AsResultTableContext _localctx = new AsResultTableContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_asResultTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4063);
			match(LPAREN);
			setState(4072);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & ((1L << (INSTEAD - 30)) | (1L << (NEW - 30)) | (1L << (NEW_TABLE - 30)) | (1L << (OLD_TABLE - 30)) | (1L << (REFERENCING - 30)) | (1L << (BASED - 30)) | (1L << (UPON - 30)) | (1L << (ADD - 30)) | (1L << (AFTER - 30)) | (1L << (ALL - 30)) | (1L << (ALLOCATE - 30)) | (1L << (ALLOW - 30)) | (1L << (ALTER - 30)) | (1L << (ALTERAND - 30)) | (1L << (ANY - 30)) | (1L << (ARRAY - 30)) | (1L << (ARRAY_EXISTS - 30)) | (1L << (AS - 30)) | (1L << (ASENSITIVE - 30)) | (1L << (ASSOCIATE - 30)) | (1L << (ASUTIME - 30)) | (1L << (AT - 30)) | (1L << (AUDIT - 30)) | (1L << (AUX - 30)) | (1L << (AUXILIARY - 30)) | (1L << (BEFORE - 30)) | (1L << (BEGIN - 30)) | (1L << (BETWEEN - 30)) | (1L << (BUFFERPOOL - 30)) | (1L << (BUFFERPOOLS - 30)) | (1L << (BY - 30)) | (1L << (CALL - 30)) | (1L << (CAPTURE - 30)) | (1L << (CASCADED - 30)) | (1L << (CASE - 30)) | (1L << (CAST - 30)) | (1L << (CCSID - 30)) | (1L << (CHAR - 30)) | (1L << (CHARACTER - 30)) | (1L << (CHECK - 30)) | (1L << (CLONE - 30)) | (1L << (CLOSE - 30)) | (1L << (CLUSTER - 30)) | (1L << (COLLECTION - 30)) | (1L << (COLLID - 30)) | (1L << (COLUMN - 30)) | (1L << (COMMENT - 30)) | (1L << (COMMIT - 30)) | (1L << (CONCAT - 30)) | (1L << (CONDITION - 30)) | (1L << (CONNECT - 30)) | (1L << (CONNECTION - 30)) | (1L << (CONSTRAINT - 30)) | (1L << (CONTAINS - 30)) | (1L << (CONTENT - 30)) | (1L << (CONTINUE - 30)) | (1L << (CREATE - 30)) | (1L << (CUBE - 30)) | (1L << (CURRENT - 30)) | (1L << (CURRENT_LC_CTYPE - 30)) | (1L << (CURRVAL - 30)) | (1L << (CURSOR - 30)) | (1L << (DATA - 30)) | (1L << (DATABASE - 30)))) != 0) || ((((_la - 94)) & ~0x3f) == 0 && ((1L << (_la - 94)) & ((1L << (DAY - 94)) | (1L << (DAYS - 94)) | (1L << (DBINFO - 94)) | (1L << (DECLARE - 94)) | (1L << (DEFAULT - 94)) | (1L << (DELETE - 94)) | (1L << (DESCRIPTOR - 94)) | (1L << (DETERMINISTIC - 94)) | (1L << (DISABLE - 94)) | (1L << (DISALLOW - 94)) | (1L << (DISTINCT - 94)) | (1L << (DO - 94)) | (1L << (DOCUMENT - 94)) | (1L << (DOUBLE - 94)) | (1L << (DROP - 94)) | (1L << (DSSIZE - 94)) | (1L << (DYNAMIC - 94)) | (1L << (EDITPROC - 94)) | (1L << (ELSE - 94)) | (1L << (ELSEIF - 94)) | (1L << (ENCODING - 94)) | (1L << (ENCRYPTION - 94)) | (1L << (END - 94)) | (1L << (END_EXEC - 94)) | (1L << (ENDING - 94)) | (1L << (ERASE - 94)) | (1L << (ESCAPE - 94)) | (1L << (EXCEPT - 94)) | (1L << (EXCEPTION - 94)) | (1L << (EXEC_SQL - 94)) | (1L << (EXECUTE - 94)) | (1L << (EXISTS - 94)) | (1L << (EXIT - 94)) | (1L << (EXPLAIN - 94)) | (1L << (EXTERNAL - 94)) | (1L << (FENCED - 94)) | (1L << (FETCH - 94)) | (1L << (FIELDPROC - 94)) | (1L << (FINAL - 94)) | (1L << (FIRST - 94)) | (1L << (FOR - 94)) | (1L << (FREE - 94)) | (1L << (FROM - 94)) | (1L << (FULL - 94)) | (1L << (FUNCTION - 94)) | (1L << (GENERATED - 94)) | (1L << (GET - 94)) | (1L << (GLOBAL - 94)) | (1L << (GO - 94)) | (1L << (GOTO - 94)) | (1L << (GRANT - 94)) | (1L << (GROUP - 94)) | (1L << (HANDLER - 94)) | (1L << (HAVING - 94)) | (1L << (HOLD - 94)) | (1L << (HOUR - 94)) | (1L << (HOURS - 94)) | (1L << (IF - 94)) | (1L << (IMMEDIATE - 94)) | (1L << (IN - 94)) | (1L << (INCLUSIVE - 94)) | (1L << (INDEX - 94)) | (1L << (INDEXBP - 94)) | (1L << (INHERIT - 94)))) != 0) || ((((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & ((1L << (INNER - 158)) | (1L << (INOUT - 158)) | (1L << (INSENSITIVE - 158)) | (1L << (INSERT - 158)) | (1L << (INTERSECT - 158)) | (1L << (INTO - 158)) | (1L << (IS - 158)) | (1L << (ISOBID - 158)) | (1L << (ITERATE - 158)) | (1L << (JAR - 158)) | (1L << (JOIN - 158)) | (1L << (KEEP - 158)) | (1L << (KEY - 158)) | (1L << (LABEL - 158)) | (1L << (LANGUAGE - 158)) | (1L << (LAST - 158)) | (1L << (LC_CTYPE - 158)) | (1L << (LEAVE - 158)) | (1L << (LEFT - 158)) | (1L << (LIKE - 158)) | (1L << (LIMIT - 158)) | (1L << (LOCAL - 158)) | (1L << (LOCALE - 158)) | (1L << (LOCATOR - 158)) | (1L << (LOCATORS - 158)) | (1L << (LOCK - 158)) | (1L << (LOCKMAX - 158)) | (1L << (LOCKSIZE - 158)) | (1L << (LONG - 158)) | (1L << (LOOP - 158)) | (1L << (MAINTAINED - 158)) | (1L << (MATERIALIZED - 158)) | (1L << (MICROSECOND - 158)) | (1L << (MICROSECONDS - 158)) | (1L << (MODIFIES - 158)) | (1L << (MONTH - 158)) | (1L << (MONTHS - 158)) | (1L << (NEXT - 158)) | (1L << (NEXTVAL - 158)) | (1L << (NO - 158)) | (1L << (NONE - 158)) | (1L << (NOT - 158)) | (1L << (NULL - 158)) | (1L << (NULLS - 158)) | (1L << (NUMPARTS - 158)) | (1L << (OBID - 158)) | (1L << (OF - 158)) | (1L << (OFFSET - 158)) | (1L << (OLD - 158)) | (1L << (ON - 158)) | (1L << (OPEN - 158)) | (1L << (OPTIMIZATION - 158)) | (1L << (OPTIMIZE - 158)) | (1L << (OR - 158)) | (1L << (ORDER - 158)) | (1L << (ORGANIZATION - 158)) | (1L << (OUT - 158)) | (1L << (OUTER - 158)) | (1L << (PACKAGE - 158)) | (1L << (PADDED - 158)) | (1L << (PARAMETER - 158)) | (1L << (PART - 158)) | (1L << (PARTITION - 158)))) != 0) || ((((_la - 222)) & ~0x3f) == 0 && ((1L << (_la - 222)) & ((1L << (PARTITIONED - 222)) | (1L << (PARTITIONING - 222)) | (1L << (PATH - 222)) | (1L << (PERIOD - 222)) | (1L << (PIECESIZE - 222)) | (1L << (PLAN - 222)) | (1L << (PRECISION - 222)) | (1L << (PREPARE - 222)) | (1L << (PREVVAL - 222)) | (1L << (PRIOR - 222)) | (1L << (PRIQTY - 222)) | (1L << (PRIVILEGES - 222)) | (1L << (PROCEDURE - 222)) | (1L << (PROGRAM - 222)) | (1L << (PSID - 222)) | (1L << (PUBLIC - 222)) | (1L << (QUERY - 222)) | (1L << (QUERYNO - 222)) | (1L << (READS - 222)) | (1L << (REFERENCES - 222)) | (1L << (REFRESH - 222)) | (1L << (RELEASE - 222)) | (1L << (RENAME - 222)) | (1L << (REPEAT - 222)) | (1L << (RESIGNAL - 222)) | (1L << (RESTRICT - 222)) | (1L << (RESULT - 222)) | (1L << (RESULT_SET_LOCATOR - 222)) | (1L << (RETURN - 222)) | (1L << (RETURNS - 222)) | (1L << (REVOKE - 222)) | (1L << (RIGHT - 222)) | (1L << (ROLE - 222)) | (1L << (ROLLBACK - 222)) | (1L << (ROLLUP - 222)) | (1L << (ROUND_CEILING - 222)) | (1L << (ROUND_DOWN - 222)) | (1L << (ROUND_FLOOR - 222)) | (1L << (ROUND_HALF_DOWN - 222)) | (1L << (ROUND_HALF_EVEN - 222)) | (1L << (ROUND_HALF_UP - 222)) | (1L << (ROUND_UP - 222)) | (1L << (ROW - 222)) | (1L << (ROWSET - 222)) | (1L << (RUN - 222)) | (1L << (SAVEPOINT - 222)) | (1L << (SCHEMA - 222)) | (1L << (SCRATCHPAD - 222)) | (1L << (SECOND - 222)) | (1L << (SECONDS - 222)) | (1L << (SECQTY - 222)) | (1L << (SECURITY - 222)) | (1L << (SELECT - 222)) | (1L << (SENSITIVE - 222)) | (1L << (SEQUENCE - 222)) | (1L << (SET - 222)) | (1L << (SIGNAL - 222)) | (1L << (SIMPLE - 222)) | (1L << (SOME - 222)) | (1L << (SOURCE - 222)) | (1L << (SPECIFIC - 222)) | (1L << (STANDARD - 222)) | (1L << (STATEMENT - 222)) | (1L << (STATIC - 222)))) != 0) || ((((_la - 286)) & ~0x3f) == 0 && ((1L << (_la - 286)) & ((1L << (STAY - 286)) | (1L << (STOGROUP - 286)) | (1L << (STORES - 286)) | (1L << (STYLE - 286)) | (1L << (SUMMARY - 286)) | (1L << (SYNONYM - 286)) | (1L << (SYSDATE - 286)) | (1L << (SYSTEM - 286)) | (1L << (SYSTIMESTAMP - 286)) | (1L << (TABLE - 286)) | (1L << (TABLESPACE - 286)) | (1L << (THEN - 286)) | (1L << (TO - 286)) | (1L << (TRIGGER - 286)) | (1L << (TRUNCATE - 286)) | (1L << (TYPE - 286)) | (1L << (UNDO - 286)) | (1L << (UNION - 286)) | (1L << (UNIQUE - 286)) | (1L << (UNTIL - 286)) | (1L << (UPDATE - 286)) | (1L << (USING - 286)) | (1L << (VALIDPROC - 286)) | (1L << (VALUE - 286)) | (1L << (VALUES - 286)) | (1L << (VARIABLE - 286)) | (1L << (VARIANT - 286)) | (1L << (VCAT - 286)) | (1L << (VERSIONING - 286)) | (1L << (VIEW - 286)) | (1L << (VOLATILE - 286)) | (1L << (VOLUMES - 286)) | (1L << (WHEN - 286)) | (1L << (WHENEVER - 286)) | (1L << (WHERE - 286)) | (1L << (WHILE - 286)) | (1L << (WITH - 286)) | (1L << (WLM - 286)) | (1L << (XMLCAST - 286)) | (1L << (XMLEXISTS - 286)) | (1L << (XMLNAMESPACES - 286)) | (1L << (YEAR - 286)) | (1L << (YEARS - 286)) | (1L << (ZONE - 286)) | (1L << (AND - 286)) | (1L << (ARRAY_AGG - 286)) | (1L << (ASC - 286)) | (1L << (AVG - 286)) | (1L << (BIT - 286)) | (1L << (CHANGE - 286)) | (1L << (CODEUNITS16 - 286)) | (1L << (CODEUNITS32 - 286)) | (1L << (CORR - 286)) | (1L << (CORRELATION - 286)) | (1L << (COUNT - 286)) | (1L << (COUNT_BIG - 286)) | (1L << (COVAR - 286)) | (1L << (COVARIANCE - 286)) | (1L << (COVARIANCE_SAMP - 286)) | (1L << (COVAR_POP - 286)) | (1L << (COVAR_SAMP - 286)) | (1L << (CS - 286)) | (1L << (CUME_DIST - 286)) | (1L << (DENSE_RANK - 286)))) != 0) || ((((_la - 350)) & ~0x3f) == 0 && ((1L << (_la - 350)) & ((1L << (DESC - 350)) | (1L << (EBCDIC - 350)) | (1L << (EXCLUSIVE - 350)) | (1L << (FIRST_VALUE - 350)) | (1L << (FOLLOWING - 350)) | (1L << (GROUPING - 350)) | (1L << (IGNORE - 350)) | (1L << (INDICATOR - 350)) | (1L << (INPUT - 350)) | (1L << (ISNULL - 350)) | (1L << (LAG - 350)) | (1L << (LARGE - 350)) | (1L << (LAST_VALUE - 350)) | (1L << (LEAD - 350)) | (1L << (LISTAGG - 350)) | (1L << (LOCKED - 350)) | (1L << (LOCKS - 350)) | (1L << (MEDIAN - 350)) | (1L << (MINUTES - 350)) | (1L << (MIXED - 350)) | (1L << (NOTNULL - 350)) | (1L << (NTH_VALUE - 350)) | (1L << (NTILE - 350)) | (1L << (NUMERIC - 350)) | (1L << (OBJECT - 350)) | (1L << (OCTETS - 350)) | (1L << (ONLY - 350)) | (1L << (OVER - 350)) | (1L << (PASSING - 350)) | (1L << (PERCENTILE_CONT - 350)) | (1L << (PERCENTILE_DISC - 350)) | (1L << (PERCENT_RANK - 350)) | (1L << (PRECEDING - 350)) | (1L << (PREVIOUS - 350)) | (1L << (RANGE - 350)) | (1L << (RANK - 350)) | (1L << (RATIO_TO_REPORT - 350)) | (1L << (READ - 350)) | (1L << (REF - 350)) | (1L << (REGR_AVGX - 350)) | (1L << (REGR_AVGY - 350)) | (1L << (REGR_COUNT - 350)) | (1L << (REGR_ICPT - 350)) | (1L << (REGR_INTERCEPT - 350)) | (1L << (REGR_R2 - 350)) | (1L << (REGR_SLOPE - 350)) | (1L << (REGR_SXX - 350)) | (1L << (REGR_SXY - 350)) | (1L << (REGR_SYY - 350)) | (1L << (RESPECT - 350)) | (1L << (ROW_NUMBER - 350)) | (1L << (ROWS - 350)) | (1L << (RR - 350)) | (1L << (RS - 350)) | (1L << (SBCS - 350)) | (1L << (SELECTIVITY - 350)) | (1L << (SETS - 350)) | (1L << (SHARE - 350)) | (1L << (SKIP_ - 350)) | (1L << (STDDEV - 350)) | (1L << (STDDEV_POP - 350)) | (1L << (STDDEV_SAMP - 350)) | (1L << (SUM - 350)) | (1L << (TOKEN - 350)))) != 0) || ((((_la - 414)) & ~0x3f) == 0 && ((1L << (_la - 414)) & ((1L << (UNBOUNDED - 414)) | (1L << (UNPACK - 414)) | (1L << (UR - 414)) | (1L << (USE - 414)) | (1L << (VAR - 414)) | (1L << (VARIANCE - 414)) | (1L << (VARIANCE_SAMP - 414)) | (1L << (VAR_POP - 414)) | (1L << (VAR_SAMP - 414)) | (1L << (VARYING - 414)) | (1L << (WITHOUT - 414)) | (1L << (XML - 414)) | (1L << (XMLAGG - 414)) | (1L << (COLUMNS - 414)) | (1L << (SQLID - 414)) | (1L << (ORDINALITY - 414)) | (1L << (SYSTEM_TIME - 414)) | (1L << (BUSINESS_TIME - 414)) | (1L << (MULTIPLIER - 414)) | (1L << (UNNEST - 414)) | (1L << (CROSS - 414)) | (1L << (CALLER - 414)) | (1L << (CLIENT - 414)) | (1L << (POSITIONING - 414)) | (1L << (SCROLL - 414)) | (1L << (ACTION - 414)) | (1L << (ASSEMBLE - 414)) | (1L << (C_ - 414)) | (1L << (CALLED - 414)) | (1L << (COBOL - 414)) | (1L << (DB2 - 414)) | (1L << (DEFINER - 414)) | (1L << (DISPATCH - 414)) | (1L << (ENVIRONMENT - 414)) | (1L << (FAILURE - 414)) | (1L << (FAILURES - 414)) | (1L << (JAVA - 414)) | (1L << (MAIN - 414)) | (1L << (NAME - 414)) | (1L << (OPTIONS - 414)) | (1L << (PARALLEL - 414)) | (1L << (PLI - 414)) | (1L << (REGISTERS - 414)) | (1L << (RESIDENT - 414)) | (1L << (SECURED - 414)) | (1L << (SPECIAL - 414)) | (1L << (SQL - 414)) | (1L << (STOP - 414)) | (1L << (SUB - 414)) | (1L << (YES - 414)) | (1L << (APPLICATION - 414)) | (1L << (CHANGED - 414)) | (1L << (COMPATIBILITY - 414)) | (1L << (COMPRESS - 414)) | (1L << (COPY - 414)) | (1L << (FREEPAGE - 414)) | (1L << (GBPCACHE - 414)) | (1L << (INCLUDE - 414)) | (1L << (MAXVALUE - 414)) | (1L << (MINVALUE - 414)) | (1L << (PCTFREE - 414)) | (1L << (REGENERATE - 414)) | (1L << (MASK - 414)) | (1L << (ENABLE - 414)))) != 0) || ((((_la - 478)) & ~0x3f) == 0 && ((1L << (_la - 478)) & ((1L << (PERMISSION - 478)) | (1L << (ATOMIC - 478)) | (1L << (SQLEXCEPTION - 478)) | (1L << (MERGE - 478)) | (1L << (MATCHED - 478)) | (1L << (SQLSTATE - 478)) | (1L << (MESSAGE_TEXT - 478)) | (1L << (OVERRIDING - 478)) | (1L << (PORTION - 478)) | (1L << (DB2SQL - 478)) | (1L << (DEBUG - 478)) | (1L << (GENERAL - 478)) | (1L << (MODE_ - 478)) | (1L << (REXX - 478)) | (1L << (CACHE - 478)) | (1L << (CYCLE - 478)) | (1L << (INCREMENT - 478)) | (1L << (RESTART - 478)) | (1L << (DATACLAS - 478)) | (1L << (MGMTCLAS - 478)) | (1L << (REMOVE - 478)) | (1L << (STORCLAS - 478)) | (1L << (ACCESS - 478)) | (1L << (ACTIVATE - 478)) | (1L << (ALWAYS - 478)) | (1L << (APPEND - 478)) | (1L << (ARCHIVE - 478)) | (1L << (BUSINESS - 478)) | (1L << (CASCADE - 478)) | (1L << (CHANGES - 478)) | (1L << (CONTROL - 478)) | (1L << (DEACTIVATE - 478)) | (1L << (DEFERRED - 478)) | (1L << (EACH - 478)) | (1L << (ENFORCED - 478)) | (1L << (EXTRA - 478)) | (1L << (FOREIGN - 478)) | (1L << (HIDDEN_ - 478)) | (1L << (HISTORY - 478)) | (1L << (ID - 478)) | (1L << (IDENTITY - 478)) | (1L << (IMPLICITLY - 478)) | (1L << (INITIALLY - 478)) | (1L << (INLINE - 478)) | (1L << (OPERATION - 478)) | (1L << (ORGANIZE - 478)) | (1L << (OVERLAPS - 478)) | (1L << (PACKAGE_NAME - 478)) | (1L << (PACKAGE_SCHEMA - 478)) | (1L << (PACKAGE_VERSION - 478)) | (1L << (PRIMARY - 478)) | (1L << (RESET - 478)) | (1L << (ROTATE - 478)) | (1L << (START - 478)) | (1L << (SYSIBM - 478)) | (1L << (TRANSACTION - 478)) | (1L << (XMLSCHEMA - 478)) | (1L << (ELEMENT - 478)) | (1L << (URL - 478)) | (1L << (NAMESPACE - 478)) | (1L << (LOCATION - 478)) | (1L << (SYSXSR - 478)) | (1L << (ALGORITHM - 478)) | (1L << (FIXEDLENGTH - 478)))) != 0) || ((((_la - 542)) & ~0x3f) == 0 && ((1L << (_la - 542)) & ((1L << (HUFFMAN - 542)) | (1L << (LOB - 542)) | (1L << (LOG - 542)) | (1L << (LOGGED - 542)) | (1L << (MAXPARTITIONS - 542)) | (1L << (MAXROWS - 542)) | (1L << (MEMBER - 542)) | (1L << (MOVE - 542)) | (1L << (PAGE - 542)) | (1L << (PAGENUM - 542)) | (1L << (PENDING - 542)) | (1L << (RELATIVE - 542)) | (1L << (SEGSIZE - 542)) | (1L << (TRACKMOD - 542)) | (1L << (ADDRESS - 542)) | (1L << (ATTRIBUTES - 542)) | (1L << (AUTHENTICATION - 542)) | (1L << (AUTHID - 542)) | (1L << (CONTEXT - 542)) | (1L << (JOBNAME - 542)) | (1L << (OWNER - 542)) | (1L << (PROFILE - 542)) | (1L << (QUALIFIER - 542)) | (1L << (SERVAUTH - 542)) | (1L << (TRUSTED - 542)) | (1L << (SECTION - 542)) | (1L << (ACTIVE - 542)) | (1L << (VERSION - 542)) | (1L << (ALIAS - 542)) | (1L << (WORK - 542)) | (1L << (WORKFILE - 542)) | (1L << (SYSDEFLT - 542)) | (1L << (NULTERM - 542)) | (1L << (STRUCTURE - 542)) | (1L << (GENERIC - 542)) | (1L << (TEMPORARY - 542)) | (1L << (DEFER - 542)) | (1L << (DEFINE - 542)) | (1L << (EXCLUDE - 542)) | (1L << (GENERATE - 542)) | (1L << (KEYS - 542)) | (1L << (XMLPATTERN - 542)) | (1L << (SIZE - 542)) | (1L << (EVERY - 542)) | (1L << (ABSOLUTE - 542)) | (1L << (ACCELERATOR - 542)) | (1L << (EXCLUDING - 542)) | (1L << (INCLUDING - 542)) | (1L << (DEFAULTS - 542)) | (1L << (MODIFIERS - 542)) | (1L << (OPTION - 542)) | (1L << (PRESERVE - 542)) | (1L << (BOTH - 542)) | (1L << (DESCRIBE - 542)) | (1L << (LABELS - 542)) | (1L << (NAMES - 542)) | (1L << (OUTPUT - 542)) | (1L << (EXCHANGE - 542)) | (1L << (STABILIZED - 542)) | (1L << (STMTCACHE - 542)) | (1L << (STMTID - 542)) | (1L << (STMTTOKEN - 542)) | (1L << (STARTING - 542)) | (1L << (CATALOG_NAME - 542)))) != 0) || ((((_la - 606)) & ~0x3f) == 0 && ((1L << (_la - 606)) & ((1L << (CONDITION_NUMBER - 606)) | (1L << (CURSOR_NAME - 606)) | (1L << (DB2_AUTHENTICATION_TYPE - 606)) | (1L << (DB2_AUTHORIZATION_ID - 606)) | (1L << (DB2_CONNECTION_STATE - 606)) | (1L << (DB2_CONNECTION_STATUS - 606)) | (1L << (DB2_ENCRYPTION_TYPE - 606)) | (1L << (DB2_ERROR_CODE1 - 606)) | (1L << (DB2_ERROR_CODE2 - 606)) | (1L << (DB2_ERROR_CODE3 - 606)) | (1L << (DB2_ERROR_CODE4 - 606)) | (1L << (DB2_GET_DIAGNOSTICS_DIAGNOSTICS - 606)) | (1L << (DB2_INTERNAL_ERROR_POINTER - 606)) | (1L << (DB2_LAST_ROW - 606)) | (1L << (DB2_LINE_NUMBER - 606)) | (1L << (DB2_MESSAGE_ID - 606)) | (1L << (DB2_MODULE_DETECTING_ERROR - 606)) | (1L << (DB2_NUMBER_PARAMETER_MARKERS - 606)) | (1L << (DB2_NUMBER_RESULT_SETS - 606)) | (1L << (DB2_NUMBER_ROWS - 606)) | (1L << (DB2_ORDINAL_TOKEN_ - 606)) | (1L << (DB2_PRODUCT_ID - 606)) | (1L << (DB2_REASON_CODE - 606)) | (1L << (DB2_RETURNED_SQLCODE - 606)) | (1L << (DB2_RETURN_STATUS - 606)) | (1L << (DB2_ROW_NUMBER - 606)) | (1L << (DB2_SERVER_CLASS_NAME - 606)) | (1L << (DB2_SQL_ATTR_CURSOR_HOLD - 606)) | (1L << (DB2_SQL_ATTR_CURSOR_ROWSET - 606)) | (1L << (DB2_SQL_ATTR_CURSOR_SCROLLABLE - 606)) | (1L << (DB2_SQL_ATTR_CURSOR_SENSITIVITY - 606)) | (1L << (DB2_SQL_ATTR_CURSOR_TYPE - 606)) | (1L << (DB2_SQLERRD1 - 606)) | (1L << (DB2_SQLERRD2 - 606)) | (1L << (DB2_SQLERRD3 - 606)) | (1L << (DB2_SQLERRD4 - 606)) | (1L << (DB2_SQLERRD5 - 606)) | (1L << (DB2_SQLERRD6 - 606)) | (1L << (DB2_SQLERRD_SET - 606)) | (1L << (DB2_SQL_NESTING_LEVEL - 606)) | (1L << (DB2_TOKEN_COUNT - 606)) | (1L << (DIAGNOSTICS - 606)) | (1L << (MORE_ - 606)) | (1L << (NUMBER - 606)) | (1L << (RETURNED_SQLSTATE - 606)) | (1L << (ROW_COUNT - 606)) | (1L << (SERVER_NAME - 606)) | (1L << (STACKED - 606)) | (1L << (CREATETAB - 606)) | (1L << (CREATETS - 606)) | (1L << (DBADM - 606)) | (1L << (DBCTRL - 606)) | (1L << (DBMAINT - 606)) | (1L << (DISPLAYDB - 606)) | (1L << (IMAGCOPY - 606)) | (1L << (LOAD - 606)) | (1L << (PACKADM - 606)) | (1L << (RECOVERDB - 606)) | (1L << (REORG - 606)) | (1L << (REPAIR - 606)) | (1L << (STARTDB - 606)) | (1L << (STATS - 606)) | (1L << (STOPDB - 606)))) != 0) || ((((_la - 670)) & ~0x3f) == 0 && ((1L << (_la - 670)) & ((1L << (BIND - 670)) | (1L << (ALTERIN - 670)) | (1L << (CREATEIN - 670)) | (1L << (DROPIN - 670)) | (1L << (USAGE - 670)) | (1L << (ACCESSCTRL - 670)) | (1L << (BINDADD - 670)) | (1L << (BINDAGENT - 670)) | (1L << (BSDS - 670)) | (1L << (CREATEALIAS - 670)) | (1L << (CREATEDBA - 670)) | (1L << (CREATEDBC - 670)) | (1L << (CREATE_SECURE_OBJECT - 670)) | (1L << (CREATESG - 670)) | (1L << (CREATETMTAB - 670)) | (1L << (DATAACCESS - 670)) | (1L << (DEBUGSESSION - 670)) | (1L << (DISPLAY - 670)) | (1L << (MONITOR1 - 670)) | (1L << (MONITOR2 - 670)) | (1L << (RECOVER - 670)) | (1L << (SQLADM - 670)) | (1L << (STOPALL - 670)) | (1L << (STOSPACE - 670)) | (1L << (SYSADM - 670)) | (1L << (SYSCTRL - 670)) | (1L << (SYSOPR - 670)) | (1L << (TRACE - 670)) | (1L << (UNLOAD - 670)) | (1L << (WRITE - 670)) | (1L << (ABS - 670)) | (1L << (ABSVAL - 670)) | (1L << (ACOS - 670)) | (1L << (ADD_DAYS - 670)) | (1L << (ADD_MONTHS - 670)) | (1L << (ARRAY_DELETE - 670)) | (1L << (ARRAY_FIRST - 670)) | (1L << (ARRAY_LAST - 670)) | (1L << (ARRAY_NEXT - 670)) | (1L << (ARRAY_PRIOR - 670)) | (1L << (ARRAY_TRIM - 670)) | (1L << (ASCII - 670)) | (1L << (ASCII_CHR - 670)) | (1L << (ASCIISTR - 670)) | (1L << (ASCII_STR - 670)) | (1L << (ASIN - 670)) | (1L << (ATAN - 670)) | (1L << (ATAN2 - 670)) | (1L << (ATANH - 670)) | (1L << (BIGINT - 670)) | (1L << (BINARY - 670)) | (1L << (BITAND - 670)) | (1L << (BITANDNOT - 670)) | (1L << (BITNOT - 670)) | (1L << (BITOR - 670)) | (1L << (BITXOR - 670)) | (1L << (BLOB - 670)) | (1L << (BTRIM - 670)) | (1L << (CARDINALITY - 670)) | (1L << (CCSID_ENCODING - 670)) | (1L << (CEIL - 670)) | (1L << (CEILING - 670)) | (1L << (CHAR9 - 670)) | (1L << (CHARACTER_LENGTH - 670)))) != 0) || ((((_la - 734)) & ~0x3f) == 0 && ((1L << (_la - 734)) & ((1L << (CHAR_LENGTH - 734)) | (1L << (CHR - 734)) | (1L << (CLOB - 734)) | (1L << (COALESCE - 734)) | (1L << (COLLATION_KEY - 734)) | (1L << (COMPARE_DECFLOAT - 734)) | (1L << (COS - 734)) | (1L << (COSH - 734)) | (1L << (DATE - 734)) | (1L << (DAYOFMONTH - 734)) | (1L << (DAYOFWEEK - 734)) | (1L << (DAYOFWEEK_ISO - 734)) | (1L << (DAYOFYEAR - 734)) | (1L << (DAYS_BETWEEN - 734)) | (1L << (DBCLOB - 734)) | (1L << (DEC - 734)) | (1L << (DECFLOAT - 734)) | (1L << (DECFLOAT_FORMAT - 734)) | (1L << (DECFLOAT_SORTKEY - 734)) | (1L << (DECIMAL - 734)) | (1L << (DECODE - 734)) | (1L << (DECRYPT_BINARY - 734)) | (1L << (DECRYPT_BIT - 734)) | (1L << (DECRYPT_CHAR - 734)) | (1L << (DECRYPT_DATAKEY_BIGINT - 734)) | (1L << (DECRYPT_DATAKEY_BIT - 734)) | (1L << (DECRYPT_DATAKEY_CLOB - 734)) | (1L << (DECRYPT_DATAKEY_DBCLOB - 734)) | (1L << (DECRYPT_DATAKEY_DECIMAL - 734)) | (1L << (DECRYPT_DATAKEY_INTEGER - 734)) | (1L << (DECRYPT_DATAKEY_VARCHAR - 734)) | (1L << (DECRYPT_DATAKEY_VARGRAPHIC - 734)) | (1L << (DECRYPT_DB - 734)) | (1L << (DEGREES - 734)) | (1L << (DIFFERENCE - 734)) | (1L << (DIGITS - 734)) | (1L << (DOUBLE_PRECISION - 734)) | (1L << (DSN_XMLVALIDATE - 734)) | (1L << (EBCDIC_CHR - 734)) | (1L << (EBCDIC_STR - 734)) | (1L << (ENCRYPT_DATAKEY - 734)) | (1L << (ENCRYPT_TDES - 734)) | (1L << (EXP - 734)) | (1L << (EXTRACT - 734)) | (1L << (FLOAT - 734)) | (1L << (FLOOR - 734)) | (1L << (GENERATE_UNIQUE - 734)) | (1L << (GENERATE_UNIQUE_BINARY - 734)) | (1L << (GETHINT - 734)) | (1L << (GETVARIABLE - 734)) | (1L << (GRAPHIC - 734)) | (1L << (GREATEST - 734)) | (1L << (HASH - 734)) | (1L << (HASH_CRC32 - 734)) | (1L << (HASH_MD5 - 734)) | (1L << (HASH_SHA1 - 734)) | (1L << (HASH_SHA256 - 734)) | (1L << (HEX - 734)) | (1L << (IDENTITY_VAL_LOCAL - 734)) | (1L << (IFNULL - 734)) | (1L << (INSTR - 734)) | (1L << (INT - 734)) | (1L << (INTEGER - 734)) | (1L << (JULIAN_DAY - 734)))) != 0) || ((((_la - 798)) & ~0x3f) == 0 && ((1L << (_la - 798)) & ((1L << (LAST_DAY - 798)) | (1L << (LCASE - 798)) | (1L << (LEAST - 798)) | (1L << (LENGTH - 798)) | (1L << (LN - 798)) | (1L << (LOCATE - 798)) | (1L << (LOCATE_IN_STRING - 798)) | (1L << (LOG10 - 798)) | (1L << (LOWER - 798)) | (1L << (LPAD - 798)) | (1L << (LTRIM - 798)) | (1L << (MAX - 798)) | (1L << (MAX_CARDINALITY - 798)) | (1L << (MIDNIGHT_SECONDS - 798)) | (1L << (MIN - 798)) | (1L << (MINUTE - 798)) | (1L << (MOD - 798)) | (1L << (MONTHS_BETWEEN - 798)) | (1L << (MQREAD - 798)) | (1L << (MQREADCLOB - 798)) | (1L << (MQRECEIVE - 798)) | (1L << (MQRECEIVECLOB - 798)) | (1L << (MQSEND - 798)) | (1L << (MULTIPLY_ALT - 798)) | (1L << (NEXT_DAY - 798)) | (1L << (NEXT_MONTH - 798)) | (1L << (NORMALIZE_DECFLOAT - 798)) | (1L << (NORMALIZE_STRING - 798)) | (1L << (NULLIF - 798)) | (1L << (NVL - 798)) | (1L << (OVERLAY - 798)) | (1L << (PACK - 798)) | (1L << (POSITION - 798)) | (1L << (POSSTR - 798)) | (1L << (POW - 798)) | (1L << (POWER - 798)) | (1L << (QUANTIZE - 798)) | (1L << (QUARTER - 798)) | (1L << (RADIANS - 798)) | (1L << (RAISE_ERROR - 798)) | (1L << (RAND - 798)) | (1L << (RANDOM - 798)) | (1L << (REAL - 798)) | (1L << (REGEXP_COUNT - 798)) | (1L << (REGEXP_INSTR - 798)) | (1L << (REGEXP_LIKE - 798)) | (1L << (REGEXP_REPLACE - 798)) | (1L << (REGEXP_SUBSTR - 798)) | (1L << (REPLACE - 798)) | (1L << (RID - 798)) | (1L << (ROUND - 798)) | (1L << (ROUND_TIMESTAMP - 798)) | (1L << (ROWID - 798)) | (1L << (RPAD - 798)) | (1L << (RTRIM - 798)) | (1L << (SCORE - 798)) | (1L << (SIGN - 798)) | (1L << (SIN - 798)) | (1L << (SINH - 798)) | (1L << (SMALLINT - 798)) | (1L << (SOAPHTTPC - 798)) | (1L << (SOAPHTTPNC - 798)) | (1L << (SOAPHTTPNV - 798)) | (1L << (SOAPHTTPV - 798)))) != 0) || ((((_la - 862)) & ~0x3f) == 0 && ((1L << (_la - 862)) & ((1L << (SOUNDEX - 862)) | (1L << (SPACE - 862)) | (1L << (SQRT - 862)) | (1L << (STRIP - 862)) | (1L << (STRLEFT - 862)) | (1L << (STRPOS - 862)) | (1L << (STRRIGHT - 862)) | (1L << (SUBSTR - 862)) | (1L << (SUBSTRING - 862)) | (1L << (TAN - 862)) | (1L << (TANH - 862)) | (1L << (TIME - 862)) | (1L << (TIMESTAMP - 862)) | (1L << (TIMESTAMPADD - 862)) | (1L << (TIMESTAMPDIFF - 862)) | (1L << (TIMESTAMP_FORMAT - 862)) | (1L << (TIMESTAMP_ISO - 862)) | (1L << (TIMESTAMP_TZ - 862)) | (1L << (TO_CHAR - 862)) | (1L << (TO_CLOB - 862)) | (1L << (TO_DATE - 862)) | (1L << (TO_NUMBER - 862)) | (1L << (TOTALORDER - 862)) | (1L << (TO_TIMESTAMP - 862)) | (1L << (TRANSLATE - 862)) | (1L << (TRIM - 862)) | (1L << (TRIM_ARRAY - 862)) | (1L << (TRUNC - 862)) | (1L << (TRUNC_TIMESTAMP - 862)) | (1L << (UCASE - 862)) | (1L << (UNICODE - 862)) | (1L << (UNICODE_STR - 862)) | (1L << (UNISTR - 862)) | (1L << (UPPER - 862)) | (1L << (VARBINARY - 862)) | (1L << (VARCHAR - 862)) | (1L << (VARCHAR9 - 862)) | (1L << (VARCHAR_BIT_FORMAT - 862)) | (1L << (VARCHAR_FORMAT - 862)) | (1L << (VARGRAPHIC - 862)) | (1L << (VERIFY_GROUP_FOR_USER - 862)) | (1L << (VERIFY_ROLE_FOR_USER - 862)) | (1L << (VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER - 862)) | (1L << (WEEK - 862)) | (1L << (WEEK_ISO - 862)) | (1L << (WRAP - 862)) | (1L << (XMLATTRIBUTES - 862)) | (1L << (XMLCOMMENT - 862)) | (1L << (XMLCONCAT - 862)) | (1L << (XMLDOCUMENT - 862)) | (1L << (XMLELEMENT - 862)) | (1L << (XMLFOREST - 862)) | (1L << (XMLMODIFY - 862)) | (1L << (XMLPARSE - 862)) | (1L << (XMLPI - 862)) | (1L << (XMLQUERY - 862)) | (1L << (XMLSERIALIZE - 862)) | (1L << (XMLTEXT - 862)) | (1L << (XMLXSROBJECTID - 862)) | (1L << (XSLTRANSFORM - 862)) | (1L << (CURRENT_ACCELERATOR - 862)) | (1L << (CURRENT_APPLICATION_COMPATIBILITY - 862)) | (1L << (CURRENT_APPLICATION_ENCODING_SCHEME - 862)) | (1L << (CURRENT_CLIENT_ACCTNG - 862)))) != 0) || ((((_la - 926)) & ~0x3f) == 0 && ((1L << (_la - 926)) & ((1L << (CURRENT_CLIENT_APPLNAME - 926)) | (1L << (CURRENT_CLIENT_CORR_TOKEN - 926)) | (1L << (CURRENT_CLIENT_USERID - 926)) | (1L << (CURRENT_CLIENT_WRKSTNNAME - 926)) | (1L << (CURRENT_DATE - 926)) | (1L << (CURRENT_DEBUG_MODE - 926)) | (1L << (CURRENT_DECFLOAT_ROUNDING_MODE - 926)) | (1L << (CURRENT_DEGREE - 926)) | (1L << (CURRENT_EXPLAIN_MODE - 926)) | (1L << (CURRENT_GET_ACCEL_ARCHIVE - 926)) | (1L << (CURRENT_LOCALE_LC_CTYPE - 926)) | (1L << (CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION - 926)) | (1L << (CURRENT_MEMBER - 926)) | (1L << (CURRENT_OPTIMIZATION_HINT - 926)) | (1L << (CURRENT_PACKAGE_PATH - 926)) | (1L << (CURRENT_PACKAGESET - 926)) | (1L << (CURRENT_PATH - 926)) | (1L << (CURRENT_PRECISION - 926)) | (1L << (CURRENT_QUERY_ACCELERATION - 926)) | (1L << (CURRENT_QUERY_ACCELERATION_WAITFORDATA - 926)) | (1L << (CURRENT_REFRESH_AGE - 926)) | (1L << (CURRENT_ROUTINE_VERSION - 926)) | (1L << (CURRENT_RULES - 926)) | (1L << (CURRENT_SCHEMA - 926)) | (1L << (CURRENT_SERVER - 926)) | (1L << (CURRENT_SQLID - 926)) | (1L << (CURRENT_TEMPORAL_BUSINESS_TIME - 926)) | (1L << (CURRENT_TEMPORAL_SYSTEM_TIME - 926)) | (1L << (CURRENT_TIME - 926)) | (1L << (CURRENT_TIMESTAMP - 926)) | (1L << (CURRENT_TIME_ZONE - 926)) | (1L << (ENCRYPTION_PASSWORD - 926)) | (1L << (SESSION_TIME_ZONE - 926)) | (1L << (SESSION_USER - 926)) | (1L << (USER - 926)) | (1L << (ADMIN_TASK_LIST - 926)) | (1L << (ADMIN_TASK_OUTPUT - 926)) | (1L << (ADMIN_TASK_STATUS - 926)) | (1L << (BLOCKING_THREADS - 926)) | (1L << (MQREADALL - 926)) | (1L << (MQREADALLCLOB - 926)) | (1L << (MQRECEIVEALL - 926)) | (1L << (MQRECEIVEALLCLOB - 926)) | (1L << (XMLTABLE - 926)) | (1L << (SQLIDENTIFIER - 926)))) != 0)) {
				{
				setState(4064);
				columnName();
				setState(4069);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4065);
					match(COMMA);
					setState(4066);
					columnName();
					}
					}
					setState(4071);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(4074);
			match(RPAREN);
			setState(4075);
			match(AS);
			setState(4076);
			match(LPAREN);
			setState(4077);
			fullSelect();
			setState(4078);
			match(RPAREN);
			setState(4079);
			match(WITH);
			setState(4080);
			match(NO);
			setState(4081);
			match(DATA);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareGlobalTemporaryTableAsResultTableContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public FullSelectContext fullSelect() {
			return getRuleContext(FullSelectContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode DATA() { return getToken(DB2zSQLParser.DATA, 0); }
		public DeclareGlobalTemporaryTableAsResultTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareGlobalTemporaryTableAsResultTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDeclareGlobalTemporaryTableAsResultTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDeclareGlobalTemporaryTableAsResultTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDeclareGlobalTemporaryTableAsResultTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareGlobalTemporaryTableAsResultTableContext declareGlobalTemporaryTableAsResultTable() throws RecognitionException {
		DeclareGlobalTemporaryTableAsResultTableContext _localctx = new DeclareGlobalTemporaryTableAsResultTableContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_declareGlobalTemporaryTableAsResultTable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4083);
			match(AS);
			setState(4084);
			match(LPAREN);
			setState(4085);
			fullSelect();
			setState(4086);
			match(RPAREN);
			setState(4087);
			match(WITH);
			setState(4088);
			match(NO);
			setState(4089);
			match(DATA);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTableMaterializedQueryDefinitionContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public MaterializedQueryDefinitionContext materializedQueryDefinition() {
			return getRuleContext(MaterializedQueryDefinitionContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public CreateTableMaterializedQueryDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTableMaterializedQueryDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateTableMaterializedQueryDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateTableMaterializedQueryDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateTableMaterializedQueryDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTableMaterializedQueryDefinitionContext createTableMaterializedQueryDefinition() throws RecognitionException {
		CreateTableMaterializedQueryDefinitionContext _localctx = new CreateTableMaterializedQueryDefinitionContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_createTableMaterializedQueryDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4102);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LPAREN) {
				{
				setState(4091);
				match(LPAREN);
				setState(4092);
				columnName();
				setState(4097);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4093);
					match(COMMA);
					setState(4094);
					columnName();
					}
					}
					setState(4099);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4100);
				match(RPAREN);
				}
			}

			setState(4104);
			match(AS);
			setState(4105);
			materializedQueryDefinition();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTableColumnConstraintContext extends ParserRuleContext {
		public TerminalNode UNIQUE() { return getToken(DB2zSQLParser.UNIQUE, 0); }
		public ReferencesClauseContext referencesClause() {
			return getRuleContext(ReferencesClauseContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(DB2zSQLParser.CONSTRAINT, 0); }
		public ConstraintNameContext constraintName() {
			return getRuleContext(ConstraintNameContext.class,0);
		}
		public TerminalNode PRIMARY() { return getToken(DB2zSQLParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(DB2zSQLParser.KEY, 0); }
		public TerminalNode CHECK() { return getToken(DB2zSQLParser.CHECK, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public CheckConditionContext checkCondition() {
			return getRuleContext(CheckConditionContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public CreateTableColumnConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTableColumnConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateTableColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateTableColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateTableColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTableColumnConstraintContext createTableColumnConstraint() throws RecognitionException {
		CreateTableColumnConstraintContext _localctx = new CreateTableColumnConstraintContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_createTableColumnConstraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4109);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(4107);
				match(CONSTRAINT);
				setState(4108);
				constraintName();
				}
			}

			setState(4120);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PRIMARY:
				{
				{
				setState(4111);
				match(PRIMARY);
				setState(4112);
				match(KEY);
				}
				}
				break;
			case UNIQUE:
				{
				setState(4113);
				match(UNIQUE);
				}
				break;
			case REFERENCES:
				{
				setState(4114);
				referencesClause();
				}
				break;
			case CHECK:
				{
				{
				setState(4115);
				match(CHECK);
				setState(4116);
				match(LPAREN);
				setState(4117);
				checkCondition();
				setState(4118);
				match(RPAREN);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrganizationClauseContext extends ParserRuleContext {
		public TerminalNode ORGANIZE() { return getToken(DB2zSQLParser.ORGANIZE, 0); }
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public List<TerminalNode> HASH() { return getTokens(DB2zSQLParser.HASH); }
		public TerminalNode HASH(int i) {
			return getToken(DB2zSQLParser.HASH, i);
		}
		public TerminalNode UNIQUE() { return getToken(DB2zSQLParser.UNIQUE, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public TerminalNode SPACE() { return getToken(DB2zSQLParser.SPACE, 0); }
		public TerminalNode SQLIDENTIFIER() { return getToken(DB2zSQLParser.SQLIDENTIFIER, 0); }
		public OrganizationClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_organizationClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterOrganizationClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitOrganizationClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitOrganizationClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrganizationClauseContext organizationClause() throws RecognitionException {
		OrganizationClauseContext _localctx = new OrganizationClauseContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_organizationClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4122);
			match(ORGANIZE);
			setState(4123);
			match(BY);
			setState(4124);
			match(HASH);
			setState(4125);
			match(UNIQUE);
			setState(4126);
			match(LPAREN);
			setState(4127);
			columnName();
			setState(4132);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4128);
				match(COMMA);
				setState(4129);
				columnName();
				}
				}
				setState(4134);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4135);
			match(RPAREN);
			setState(4139);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HASH) {
				{
				setState(4136);
				match(HASH);
				setState(4137);
				match(SPACE);
				setState(4138);
				match(SQLIDENTIFIER);
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateGlobalTemporaryTableColumnDefinitionContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public CreateGlobalTemporaryTableColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createGlobalTemporaryTableColumnDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateGlobalTemporaryTableColumnDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateGlobalTemporaryTableColumnDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateGlobalTemporaryTableColumnDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateGlobalTemporaryTableColumnDefinitionContext createGlobalTemporaryTableColumnDefinition() throws RecognitionException {
		CreateGlobalTemporaryTableColumnDefinitionContext _localctx = new CreateGlobalTemporaryTableColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_createGlobalTemporaryTableColumnDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4141);
			columnName();
			setState(4142);
			dataType();
			setState(4145);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(4143);
				match(NOT);
				setState(4144);
				match(NULL);
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareGlobalTemporaryTableColumnDefinitionContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public List<DefaultClause1Context> defaultClause1() {
			return getRuleContexts(DefaultClause1Context.class);
		}
		public DefaultClause1Context defaultClause1(int i) {
			return getRuleContext(DefaultClause1Context.class,i);
		}
		public List<GeneratedClause2Context> generatedClause2() {
			return getRuleContexts(GeneratedClause2Context.class);
		}
		public GeneratedClause2Context generatedClause2(int i) {
			return getRuleContext(GeneratedClause2Context.class,i);
		}
		public List<TerminalNode> NOT() { return getTokens(DB2zSQLParser.NOT); }
		public TerminalNode NOT(int i) {
			return getToken(DB2zSQLParser.NOT, i);
		}
		public List<TerminalNode> NULL() { return getTokens(DB2zSQLParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(DB2zSQLParser.NULL, i);
		}
		public DeclareGlobalTemporaryTableColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareGlobalTemporaryTableColumnDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDeclareGlobalTemporaryTableColumnDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDeclareGlobalTemporaryTableColumnDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDeclareGlobalTemporaryTableColumnDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareGlobalTemporaryTableColumnDefinitionContext declareGlobalTemporaryTableColumnDefinition() throws RecognitionException {
		DeclareGlobalTemporaryTableColumnDefinitionContext _localctx = new DeclareGlobalTemporaryTableColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_declareGlobalTemporaryTableColumnDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4147);
			columnName();
			setState(4148);
			dataType();
			setState(4155);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DEFAULT || _la==GENERATED || _la==NOT || _la==WITH) {
				{
				setState(4153);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DEFAULT:
				case WITH:
					{
					setState(4149);
					defaultClause1();
					}
					break;
				case GENERATED:
					{
					setState(4150);
					generatedClause2();
					}
					break;
				case NOT:
					{
					{
					setState(4151);
					match(NOT);
					setState(4152);
					match(NULL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(4157);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterDeclaration1Context extends ParserRuleContext {
		public ParameterNameContext parameterName() {
			return getRuleContext(ParameterNameContext.class,0);
		}
		public FunctionDataTypeContext functionDataType() {
			return getRuleContext(FunctionDataTypeContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public TerminalNode LIKE() { return getToken(DB2zSQLParser.LIKE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode LOCATOR() { return getToken(DB2zSQLParser.LOCATOR, 0); }
		public ParameterDeclaration1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterDeclaration1; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterParameterDeclaration1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitParameterDeclaration1(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitParameterDeclaration1(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParameterDeclaration1Context parameterDeclaration1() throws RecognitionException {
		ParameterDeclaration1Context _localctx = new ParameterDeclaration1Context(_ctx, getState());
		enterRule(_localctx, 426, RULE_parameterDeclaration1);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4159);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,407,_ctx) ) {
			case 1:
				{
				setState(4158);
				parameterName();
				}
				break;
			}
			setState(4173);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,410,_ctx) ) {
			case 1:
				{
				{
				setState(4161);
				functionDataType();
				setState(4164);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(4162);
					match(AS);
					setState(4163);
					match(LOCATOR);
					}
				}

				}
				}
				break;
			case 2:
				{
				{
				setState(4166);
				match(TABLE);
				setState(4167);
				match(LIKE);
				setState(4168);
				tableName();
				setState(4171);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(4169);
					match(AS);
					setState(4170);
					match(LOCATOR);
					}
				}

				}
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterDeclaration2Context extends ParserRuleContext {
		public ParameterNameContext parameterName() {
			return getRuleContext(ParameterNameContext.class,0);
		}
		public FunctionDataTypeContext functionDataType() {
			return getRuleContext(FunctionDataTypeContext.class,0);
		}
		public ParameterDeclaration2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterDeclaration2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterParameterDeclaration2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitParameterDeclaration2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitParameterDeclaration2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParameterDeclaration2Context parameterDeclaration2() throws RecognitionException {
		ParameterDeclaration2Context _localctx = new ParameterDeclaration2Context(_ctx, getState());
		enterRule(_localctx, 428, RULE_parameterDeclaration2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4175);
			parameterName();
			setState(4176);
			functionDataType();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterDeclaration3Context extends ParserRuleContext {
		public ProcedureDataTypeContext procedureDataType() {
			return getRuleContext(ProcedureDataTypeContext.class,0);
		}
		public ParameterNameContext parameterName() {
			return getRuleContext(ParameterNameContext.class,0);
		}
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode LOCATOR() { return getToken(DB2zSQLParser.LOCATOR, 0); }
		public TerminalNode IN() { return getToken(DB2zSQLParser.IN, 0); }
		public TerminalNode OUT() { return getToken(DB2zSQLParser.OUT, 0); }
		public TerminalNode INOUT() { return getToken(DB2zSQLParser.INOUT, 0); }
		public ParameterDeclaration3Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterDeclaration3; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterParameterDeclaration3(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitParameterDeclaration3(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitParameterDeclaration3(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParameterDeclaration3Context parameterDeclaration3() throws RecognitionException {
		ParameterDeclaration3Context _localctx = new ParameterDeclaration3Context(_ctx, getState());
		enterRule(_localctx, 430, RULE_parameterDeclaration3);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4179);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,411,_ctx) ) {
			case 1:
				{
				setState(4178);
				_la = _input.LA(1);
				if ( !(((((_la - 153)) & ~0x3f) == 0 && ((1L << (_la - 153)) & ((1L << (IN - 153)) | (1L << (INOUT - 153)) | (1L << (OUT - 153)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(4182);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,412,_ctx) ) {
			case 1:
				{
				setState(4181);
				parameterName();
				}
				break;
			}
			setState(4184);
			procedureDataType();
			setState(4187);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(4185);
				match(AS);
				setState(4186);
				match(LOCATOR);
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFunctionStatementExternalScalarOptionsContext extends ParserRuleContext {
		public ExternalNameOption1Context externalNameOption1() {
			return getRuleContext(ExternalNameOption1Context.class,0);
		}
		public LanguageOption3Context languageOption3() {
			return getRuleContext(LanguageOption3Context.class,0);
		}
		public ParameterStyleOption2Context parameterStyleOption2() {
			return getRuleContext(ParameterStyleOption2Context.class,0);
		}
		public DeterministicOptionContext deterministicOption() {
			return getRuleContext(DeterministicOptionContext.class,0);
		}
		public FencedOptionContext fencedOption() {
			return getRuleContext(FencedOptionContext.class,0);
		}
		public NullInputOption1Context nullInputOption1() {
			return getRuleContext(NullInputOption1Context.class,0);
		}
		public SqlDataOption3Context sqlDataOption3() {
			return getRuleContext(SqlDataOption3Context.class,0);
		}
		public ExternalActionOptionContext externalActionOption() {
			return getRuleContext(ExternalActionOptionContext.class,0);
		}
		public PackagePathOptionContext packagePathOption() {
			return getRuleContext(PackagePathOptionContext.class,0);
		}
		public ScratchpadOptionContext scratchpadOption() {
			return getRuleContext(ScratchpadOptionContext.class,0);
		}
		public FinalCallOptionContext finalCallOption() {
			return getRuleContext(FinalCallOptionContext.class,0);
		}
		public ParallelOption2Context parallelOption2() {
			return getRuleContext(ParallelOption2Context.class,0);
		}
		public DbinfoOptionContext dbinfoOption() {
			return getRuleContext(DbinfoOptionContext.class,0);
		}
		public CardinalityOptionContext cardinalityOption() {
			return getRuleContext(CardinalityOptionContext.class,0);
		}
		public CollectionIdOptionContext collectionIdOption() {
			return getRuleContext(CollectionIdOptionContext.class,0);
		}
		public WlmEnvironmentOption1Context wlmEnvironmentOption1() {
			return getRuleContext(WlmEnvironmentOption1Context.class,0);
		}
		public AsuTimeOptionContext asuTimeOption() {
			return getRuleContext(AsuTimeOptionContext.class,0);
		}
		public StayResidentOptionContext stayResidentOption() {
			return getRuleContext(StayResidentOptionContext.class,0);
		}
		public ProgramTypeOptionContext programTypeOption() {
			return getRuleContext(ProgramTypeOptionContext.class,0);
		}
		public SecurityOptionContext securityOption() {
			return getRuleContext(SecurityOptionContext.class,0);
		}
		public StopAfterFailureOptionContext stopAfterFailureOption() {
			return getRuleContext(StopAfterFailureOptionContext.class,0);
		}
		public RunOptionsOptionContext runOptionsOption() {
			return getRuleContext(RunOptionsOptionContext.class,0);
		}
		public SpecialRegistersOptionContext specialRegistersOption() {
			return getRuleContext(SpecialRegistersOptionContext.class,0);
		}
		public DispatchOptionContext dispatchOption() {
			return getRuleContext(DispatchOptionContext.class,0);
		}
		public SecuredOptionContext securedOption() {
			return getRuleContext(SecuredOptionContext.class,0);
		}
		public SpecificNameOption1Context specificNameOption1() {
			return getRuleContext(SpecificNameOption1Context.class,0);
		}
		public ParameterOption1Context parameterOption1() {
			return getRuleContext(ParameterOption1Context.class,0);
		}
		public TerminalNode RETURNS() { return getToken(DB2zSQLParser.RETURNS, 0); }
		public List<DataTypeContext> dataType() {
			return getRuleContexts(DataTypeContext.class);
		}
		public DataTypeContext dataType(int i) {
			return getRuleContext(DataTypeContext.class,i);
		}
		public TerminalNode CAST() { return getToken(DB2zSQLParser.CAST, 0); }
		public TerminalNode FROM() { return getToken(DB2zSQLParser.FROM, 0); }
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode LOCATOR() { return getToken(DB2zSQLParser.LOCATOR, 0); }
		public CreateFunctionStatementExternalScalarOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunctionStatementExternalScalarOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateFunctionStatementExternalScalarOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateFunctionStatementExternalScalarOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateFunctionStatementExternalScalarOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFunctionStatementExternalScalarOptionsContext createFunctionStatementExternalScalarOptions() throws RecognitionException {
		CreateFunctionStatementExternalScalarOptionsContext _localctx = new CreateFunctionStatementExternalScalarOptionsContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_createFunctionStatementExternalScalarOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4232);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,417,_ctx) ) {
			case 1:
				{
				{
				setState(4189);
				match(RETURNS);
				setState(4203);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,416,_ctx) ) {
				case 1:
					{
					{
					setState(4190);
					dataType();
					setState(4193);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(4191);
						match(AS);
						setState(4192);
						match(LOCATOR);
						}
					}

					}
					}
					break;
				case 2:
					{
					{
					setState(4195);
					dataType();
					setState(4196);
					match(CAST);
					setState(4197);
					match(FROM);
					setState(4198);
					dataType();
					setState(4201);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(4199);
						match(AS);
						setState(4200);
						match(LOCATOR);
						}
					}

					}
					}
					break;
				}
				}
				}
				break;
			case 2:
				{
				setState(4205);
				externalNameOption1();
				}
				break;
			case 3:
				{
				setState(4206);
				languageOption3();
				}
				break;
			case 4:
				{
				setState(4207);
				parameterStyleOption2();
				}
				break;
			case 5:
				{
				setState(4208);
				deterministicOption();
				}
				break;
			case 6:
				{
				setState(4209);
				fencedOption();
				}
				break;
			case 7:
				{
				setState(4210);
				nullInputOption1();
				}
				break;
			case 8:
				{
				setState(4211);
				sqlDataOption3();
				}
				break;
			case 9:
				{
				setState(4212);
				externalActionOption();
				}
				break;
			case 10:
				{
				setState(4213);
				packagePathOption();
				}
				break;
			case 11:
				{
				setState(4214);
				scratchpadOption();
				}
				break;
			case 12:
				{
				setState(4215);
				finalCallOption();
				}
				break;
			case 13:
				{
				setState(4216);
				parallelOption2();
				}
				break;
			case 14:
				{
				setState(4217);
				dbinfoOption();
				}
				break;
			case 15:
				{
				setState(4218);
				cardinalityOption();
				}
				break;
			case 16:
				{
				setState(4219);
				collectionIdOption();
				}
				break;
			case 17:
				{
				setState(4220);
				wlmEnvironmentOption1();
				}
				break;
			case 18:
				{
				setState(4221);
				asuTimeOption();
				}
				break;
			case 19:
				{
				setState(4222);
				stayResidentOption();
				}
				break;
			case 20:
				{
				setState(4223);
				programTypeOption();
				}
				break;
			case 21:
				{
				setState(4224);
				securityOption();
				}
				break;
			case 22:
				{
				setState(4225);
				stopAfterFailureOption();
				}
				break;
			case 23:
				{
				setState(4226);
				runOptionsOption();
				}
				break;
			case 24:
				{
				setState(4227);
				specialRegistersOption();
				}
				break;
			case 25:
				{
				setState(4228);
				dispatchOption();
				}
				break;
			case 26:
				{
				setState(4229);
				securedOption();
				}
				break;
			case 27:
				{
				setState(4230);
				specificNameOption1();
				}
				break;
			case 28:
				{
				setState(4231);
				parameterOption1();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExternalNameOption1Context extends ParserRuleContext {
		public TerminalNode EXTERNAL() { return getToken(DB2zSQLParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(DB2zSQLParser.NAME, 0); }
		public ExternalProgramNameContext externalProgramName() {
			return getRuleContext(ExternalProgramNameContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ExternalNameOption1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_externalNameOption1; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterExternalNameOption1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitExternalNameOption1(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitExternalNameOption1(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExternalNameOption1Context externalNameOption1() throws RecognitionException {
		ExternalNameOption1Context _localctx = new ExternalNameOption1Context(_ctx, getState());
		enterRule(_localctx, 434, RULE_externalNameOption1);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4234);
			match(EXTERNAL);
			setState(4240);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NAME) {
				{
				setState(4235);
				match(NAME);
				setState(4238);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,418,_ctx) ) {
				case 1:
					{
					setState(4236);
					externalProgramName();
					}
					break;
				case 2:
					{
					setState(4237);
					identifier();
					}
					break;
				}
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExternalNameOption2Context extends ParserRuleContext {
		public TerminalNode EXTERNAL() { return getToken(DB2zSQLParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(DB2zSQLParser.NAME, 0); }
		public ExternalProgramNameContext externalProgramName() {
			return getRuleContext(ExternalProgramNameContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ExternalNameOption2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_externalNameOption2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterExternalNameOption2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitExternalNameOption2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitExternalNameOption2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExternalNameOption2Context externalNameOption2() throws RecognitionException {
		ExternalNameOption2Context _localctx = new ExternalNameOption2Context(_ctx, getState());
		enterRule(_localctx, 436, RULE_externalNameOption2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4242);
			match(EXTERNAL);
			setState(4243);
			match(NAME);
			setState(4246);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,420,_ctx) ) {
			case 1:
				{
				setState(4244);
				externalProgramName();
				}
				break;
			case 2:
				{
				setState(4245);
				identifier();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DynamicResultSetOptionContext extends ParserRuleContext {
		public TerminalNode RESULT() { return getToken(DB2zSQLParser.RESULT, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public TerminalNode SETS() { return getToken(DB2zSQLParser.SETS, 0); }
		public TerminalNode DYNAMIC() { return getToken(DB2zSQLParser.DYNAMIC, 0); }
		public DynamicResultSetOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dynamicResultSetOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDynamicResultSetOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDynamicResultSetOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDynamicResultSetOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DynamicResultSetOptionContext dynamicResultSetOption() throws RecognitionException {
		DynamicResultSetOptionContext _localctx = new DynamicResultSetOptionContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_dynamicResultSetOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4249);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DYNAMIC) {
				{
				setState(4248);
				match(DYNAMIC);
				}
			}

			setState(4251);
			match(RESULT);
			setState(4252);
			_la = _input.LA(1);
			if ( !(_la==SET || _la==SETS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4253);
			match(INTEGERLITERAL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LanguageOption1Context extends ParserRuleContext {
		public TerminalNode LANGUAGE() { return getToken(DB2zSQLParser.LANGUAGE, 0); }
		public TerminalNode SQL() { return getToken(DB2zSQLParser.SQL, 0); }
		public LanguageOption1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_languageOption1; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterLanguageOption1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitLanguageOption1(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitLanguageOption1(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LanguageOption1Context languageOption1() throws RecognitionException {
		LanguageOption1Context _localctx = new LanguageOption1Context(_ctx, getState());
		enterRule(_localctx, 440, RULE_languageOption1);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4255);
			match(LANGUAGE);
			setState(4256);
			match(SQL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LanguageOption2Context extends ParserRuleContext {
		public TerminalNode LANGUAGE() { return getToken(DB2zSQLParser.LANGUAGE, 0); }
		public TerminalNode ASSEMBLE() { return getToken(DB2zSQLParser.ASSEMBLE, 0); }
		public TerminalNode C_() { return getToken(DB2zSQLParser.C_, 0); }
		public TerminalNode COBOL() { return getToken(DB2zSQLParser.COBOL, 0); }
		public TerminalNode PLI() { return getToken(DB2zSQLParser.PLI, 0); }
		public LanguageOption2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_languageOption2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterLanguageOption2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitLanguageOption2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitLanguageOption2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LanguageOption2Context languageOption2() throws RecognitionException {
		LanguageOption2Context _localctx = new LanguageOption2Context(_ctx, getState());
		enterRule(_localctx, 442, RULE_languageOption2);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4258);
			match(LANGUAGE);
			setState(4259);
			_la = _input.LA(1);
			if ( !(((((_la - 440)) & ~0x3f) == 0 && ((1L << (_la - 440)) & ((1L << (ASSEMBLE - 440)) | (1L << (C_ - 440)) | (1L << (COBOL - 440)) | (1L << (PLI - 440)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LanguageOption3Context extends ParserRuleContext {
		public TerminalNode LANGUAGE() { return getToken(DB2zSQLParser.LANGUAGE, 0); }
		public TerminalNode ASSEMBLE() { return getToken(DB2zSQLParser.ASSEMBLE, 0); }
		public TerminalNode C_() { return getToken(DB2zSQLParser.C_, 0); }
		public TerminalNode COBOL() { return getToken(DB2zSQLParser.COBOL, 0); }
		public TerminalNode JAVA() { return getToken(DB2zSQLParser.JAVA, 0); }
		public TerminalNode PLI() { return getToken(DB2zSQLParser.PLI, 0); }
		public LanguageOption3Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_languageOption3; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterLanguageOption3(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitLanguageOption3(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitLanguageOption3(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LanguageOption3Context languageOption3() throws RecognitionException {
		LanguageOption3Context _localctx = new LanguageOption3Context(_ctx, getState());
		enterRule(_localctx, 444, RULE_languageOption3);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4261);
			match(LANGUAGE);
			setState(4262);
			_la = _input.LA(1);
			if ( !(((((_la - 440)) & ~0x3f) == 0 && ((1L << (_la - 440)) & ((1L << (ASSEMBLE - 440)) | (1L << (C_ - 440)) | (1L << (COBOL - 440)) | (1L << (JAVA - 440)) | (1L << (PLI - 440)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LanguageOption4Context extends ParserRuleContext {
		public TerminalNode LANGUAGE() { return getToken(DB2zSQLParser.LANGUAGE, 0); }
		public TerminalNode ASSEMBLE() { return getToken(DB2zSQLParser.ASSEMBLE, 0); }
		public TerminalNode C_() { return getToken(DB2zSQLParser.C_, 0); }
		public TerminalNode COBOL() { return getToken(DB2zSQLParser.COBOL, 0); }
		public TerminalNode JAVA() { return getToken(DB2zSQLParser.JAVA, 0); }
		public TerminalNode PLI() { return getToken(DB2zSQLParser.PLI, 0); }
		public TerminalNode SQL() { return getToken(DB2zSQLParser.SQL, 0); }
		public LanguageOption4Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_languageOption4; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterLanguageOption4(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitLanguageOption4(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitLanguageOption4(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LanguageOption4Context languageOption4() throws RecognitionException {
		LanguageOption4Context _localctx = new LanguageOption4Context(_ctx, getState());
		enterRule(_localctx, 446, RULE_languageOption4);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4264);
			match(LANGUAGE);
			setState(4265);
			_la = _input.LA(1);
			if ( !(((((_la - 440)) & ~0x3f) == 0 && ((1L << (_la - 440)) & ((1L << (ASSEMBLE - 440)) | (1L << (C_ - 440)) | (1L << (COBOL - 440)) | (1L << (JAVA - 440)) | (1L << (PLI - 440)) | (1L << (SQL - 440)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LanguageOption5Context extends ParserRuleContext {
		public TerminalNode LANGUAGE() { return getToken(DB2zSQLParser.LANGUAGE, 0); }
		public TerminalNode ASSEMBLE() { return getToken(DB2zSQLParser.ASSEMBLE, 0); }
		public TerminalNode C_() { return getToken(DB2zSQLParser.C_, 0); }
		public TerminalNode COBOL() { return getToken(DB2zSQLParser.COBOL, 0); }
		public TerminalNode JAVA() { return getToken(DB2zSQLParser.JAVA, 0); }
		public TerminalNode PLI() { return getToken(DB2zSQLParser.PLI, 0); }
		public TerminalNode REXX() { return getToken(DB2zSQLParser.REXX, 0); }
		public LanguageOption5Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_languageOption5; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterLanguageOption5(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitLanguageOption5(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitLanguageOption5(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LanguageOption5Context languageOption5() throws RecognitionException {
		LanguageOption5Context _localctx = new LanguageOption5Context(_ctx, getState());
		enterRule(_localctx, 448, RULE_languageOption5);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4267);
			match(LANGUAGE);
			setState(4268);
			_la = _input.LA(1);
			if ( !(((((_la - 440)) & ~0x3f) == 0 && ((1L << (_la - 440)) & ((1L << (ASSEMBLE - 440)) | (1L << (C_ - 440)) | (1L << (COBOL - 440)) | (1L << (JAVA - 440)) | (1L << (PLI - 440)) | (1L << (REXX - 440)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterStyleOption1Context extends ParserRuleContext {
		public TerminalNode PARAMETER() { return getToken(DB2zSQLParser.PARAMETER, 0); }
		public TerminalNode STYLE() { return getToken(DB2zSQLParser.STYLE, 0); }
		public TerminalNode SQL() { return getToken(DB2zSQLParser.SQL, 0); }
		public ParameterStyleOption1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterStyleOption1; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterParameterStyleOption1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitParameterStyleOption1(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitParameterStyleOption1(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParameterStyleOption1Context parameterStyleOption1() throws RecognitionException {
		ParameterStyleOption1Context _localctx = new ParameterStyleOption1Context(_ctx, getState());
		enterRule(_localctx, 450, RULE_parameterStyleOption1);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4270);
			match(PARAMETER);
			setState(4271);
			match(STYLE);
			setState(4272);
			match(SQL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterStyleOption2Context extends ParserRuleContext {
		public TerminalNode PARAMETER() { return getToken(DB2zSQLParser.PARAMETER, 0); }
		public TerminalNode STYLE() { return getToken(DB2zSQLParser.STYLE, 0); }
		public TerminalNode SQL() { return getToken(DB2zSQLParser.SQL, 0); }
		public TerminalNode JAVA() { return getToken(DB2zSQLParser.JAVA, 0); }
		public ParameterStyleOption2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterStyleOption2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterParameterStyleOption2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitParameterStyleOption2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitParameterStyleOption2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParameterStyleOption2Context parameterStyleOption2() throws RecognitionException {
		ParameterStyleOption2Context _localctx = new ParameterStyleOption2Context(_ctx, getState());
		enterRule(_localctx, 452, RULE_parameterStyleOption2);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4274);
			match(PARAMETER);
			setState(4275);
			match(STYLE);
			setState(4276);
			_la = _input.LA(1);
			if ( !(_la==JAVA || _la==SQL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterStyleOption3Context extends ParserRuleContext {
		public TerminalNode PARAMETER() { return getToken(DB2zSQLParser.PARAMETER, 0); }
		public TerminalNode STYLE() { return getToken(DB2zSQLParser.STYLE, 0); }
		public TerminalNode SQL() { return getToken(DB2zSQLParser.SQL, 0); }
		public TerminalNode DB2SQL() { return getToken(DB2zSQLParser.DB2SQL, 0); }
		public TerminalNode GENERAL() { return getToken(DB2zSQLParser.GENERAL, 0); }
		public TerminalNode JAVA() { return getToken(DB2zSQLParser.JAVA, 0); }
		public TerminalNode STANDARD() { return getToken(DB2zSQLParser.STANDARD, 0); }
		public TerminalNode CALL() { return getToken(DB2zSQLParser.CALL, 0); }
		public TerminalNode SIMPLE() { return getToken(DB2zSQLParser.SIMPLE, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode NULLS() { return getToken(DB2zSQLParser.NULLS, 0); }
		public ParameterStyleOption3Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterStyleOption3; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterParameterStyleOption3(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitParameterStyleOption3(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitParameterStyleOption3(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParameterStyleOption3Context parameterStyleOption3() throws RecognitionException {
		ParameterStyleOption3Context _localctx = new ParameterStyleOption3Context(_ctx, getState());
		enterRule(_localctx, 454, RULE_parameterStyleOption3);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4278);
			match(PARAMETER);
			setState(4279);
			match(STYLE);
			setState(4295);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,423,_ctx) ) {
			case 1:
				{
				setState(4280);
				match(SQL);
				}
				break;
			case 2:
				{
				setState(4281);
				match(DB2SQL);
				}
				break;
			case 3:
				{
				{
				setState(4282);
				match(STANDARD);
				setState(4283);
				match(CALL);
				}
				}
				break;
			case 4:
				{
				setState(4284);
				match(GENERAL);
				}
				break;
			case 5:
				{
				{
				setState(4285);
				match(SIMPLE);
				setState(4286);
				match(CALL);
				}
				}
				break;
			case 6:
				{
				{
				setState(4290);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case GENERAL:
					{
					setState(4287);
					match(GENERAL);
					}
					break;
				case SIMPLE:
					{
					{
					setState(4288);
					match(SIMPLE);
					setState(4289);
					match(CALL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4292);
				match(WITH);
				setState(4293);
				match(NULLS);
				}
				}
				break;
			case 7:
				{
				setState(4294);
				match(JAVA);
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeterministicOptionContext extends ParserRuleContext {
		public TerminalNode DETERMINISTIC() { return getToken(DB2zSQLParser.DETERMINISTIC, 0); }
		public TerminalNode VARIANT() { return getToken(DB2zSQLParser.VARIANT, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public DeterministicOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deterministicOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDeterministicOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDeterministicOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDeterministicOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeterministicOptionContext deterministicOption() throws RecognitionException {
		DeterministicOptionContext _localctx = new DeterministicOptionContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_deterministicOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4305);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,426,_ctx) ) {
			case 1:
				{
				{
				setState(4298);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(4297);
					match(NOT);
					}
				}

				setState(4300);
				match(DETERMINISTIC);
				}
				}
				break;
			case 2:
				{
				{
				setState(4302);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(4301);
					match(NOT);
					}
				}

				setState(4304);
				match(VARIANT);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FencedOptionContext extends ParserRuleContext {
		public TerminalNode FENCED() { return getToken(DB2zSQLParser.FENCED, 0); }
		public FencedOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fencedOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFencedOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFencedOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFencedOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FencedOptionContext fencedOption() throws RecognitionException {
		FencedOptionContext _localctx = new FencedOptionContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_fencedOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4307);
			match(FENCED);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NullInputOption1Context extends ParserRuleContext {
		public TerminalNode RETURNS() { return getToken(DB2zSQLParser.RETURNS, 0); }
		public List<TerminalNode> NULL() { return getTokens(DB2zSQLParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(DB2zSQLParser.NULL, i);
		}
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public TerminalNode INPUT() { return getToken(DB2zSQLParser.INPUT, 0); }
		public TerminalNode CALLED() { return getToken(DB2zSQLParser.CALLED, 0); }
		public TerminalNode CALL() { return getToken(DB2zSQLParser.CALL, 0); }
		public NullInputOption1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullInputOption1; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterNullInputOption1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitNullInputOption1(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitNullInputOption1(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NullInputOption1Context nullInputOption1() throws RecognitionException {
		NullInputOption1Context _localctx = new NullInputOption1Context(_ctx, getState());
		enterRule(_localctx, 460, RULE_nullInputOption1);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4320);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RETURNS:
				{
				{
				setState(4309);
				match(RETURNS);
				setState(4310);
				match(NULL);
				setState(4311);
				match(ON);
				setState(4312);
				match(NULL);
				setState(4313);
				match(INPUT);
				}
				}
				break;
			case CALLED:
				{
				{
				setState(4314);
				match(CALLED);
				setState(4315);
				match(ON);
				setState(4316);
				match(NULL);
				setState(4317);
				match(INPUT);
				}
				}
				break;
			case NULL:
				{
				{
				setState(4318);
				match(NULL);
				setState(4319);
				match(CALL);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NullInputOption2Context extends ParserRuleContext {
		public TerminalNode CALLED() { return getToken(DB2zSQLParser.CALLED, 0); }
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public TerminalNode INPUT() { return getToken(DB2zSQLParser.INPUT, 0); }
		public TerminalNode CALL() { return getToken(DB2zSQLParser.CALL, 0); }
		public NullInputOption2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullInputOption2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterNullInputOption2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitNullInputOption2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitNullInputOption2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NullInputOption2Context nullInputOption2() throws RecognitionException {
		NullInputOption2Context _localctx = new NullInputOption2Context(_ctx, getState());
		enterRule(_localctx, 462, RULE_nullInputOption2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4328);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
				{
				{
				setState(4322);
				match(CALLED);
				setState(4323);
				match(ON);
				setState(4324);
				match(NULL);
				setState(4325);
				match(INPUT);
				}
				}
				break;
			case NULL:
				{
				{
				setState(4326);
				match(NULL);
				setState(4327);
				match(CALL);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DebugOptionContext extends ParserRuleContext {
		public TerminalNode DEBUG() { return getToken(DB2zSQLParser.DEBUG, 0); }
		public TerminalNode MODE_() { return getToken(DB2zSQLParser.MODE_, 0); }
		public TerminalNode DISALLOW() { return getToken(DB2zSQLParser.DISALLOW, 0); }
		public TerminalNode ALLOW() { return getToken(DB2zSQLParser.ALLOW, 0); }
		public TerminalNode DISABLE() { return getToken(DB2zSQLParser.DISABLE, 0); }
		public DebugOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_debugOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDebugOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDebugOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDebugOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DebugOptionContext debugOption() throws RecognitionException {
		DebugOptionContext _localctx = new DebugOptionContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_debugOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4330);
			_la = _input.LA(1);
			if ( !(((((_la - 41)) & ~0x3f) == 0 && ((1L << (_la - 41)) & ((1L << (ALLOW - 41)) | (1L << (DISABLE - 41)) | (1L << (DISALLOW - 41)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4331);
			match(DEBUG);
			setState(4332);
			match(MODE_);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SqlDataOption1Context extends ParserRuleContext {
		public TerminalNode READS() { return getToken(DB2zSQLParser.READS, 0); }
		public TerminalNode SQL() { return getToken(DB2zSQLParser.SQL, 0); }
		public TerminalNode DATA() { return getToken(DB2zSQLParser.DATA, 0); }
		public TerminalNode CONTAINS() { return getToken(DB2zSQLParser.CONTAINS, 0); }
		public SqlDataOption1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlDataOption1; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSqlDataOption1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSqlDataOption1(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSqlDataOption1(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SqlDataOption1Context sqlDataOption1() throws RecognitionException {
		SqlDataOption1Context _localctx = new SqlDataOption1Context(_ctx, getState());
		enterRule(_localctx, 466, RULE_sqlDataOption1);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4339);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case READS:
				{
				{
				setState(4334);
				match(READS);
				setState(4335);
				match(SQL);
				setState(4336);
				match(DATA);
				}
				}
				break;
			case CONTAINS:
				{
				{
				setState(4337);
				match(CONTAINS);
				setState(4338);
				match(SQL);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SqlDataOption2Context extends ParserRuleContext {
		public TerminalNode READS() { return getToken(DB2zSQLParser.READS, 0); }
		public TerminalNode SQL() { return getToken(DB2zSQLParser.SQL, 0); }
		public TerminalNode DATA() { return getToken(DB2zSQLParser.DATA, 0); }
		public TerminalNode CONTAINS() { return getToken(DB2zSQLParser.CONTAINS, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public SqlDataOption2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlDataOption2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSqlDataOption2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSqlDataOption2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSqlDataOption2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SqlDataOption2Context sqlDataOption2() throws RecognitionException {
		SqlDataOption2Context _localctx = new SqlDataOption2Context(_ctx, getState());
		enterRule(_localctx, 468, RULE_sqlDataOption2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4348);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case READS:
				{
				{
				setState(4341);
				match(READS);
				setState(4342);
				match(SQL);
				setState(4343);
				match(DATA);
				}
				}
				break;
			case CONTAINS:
				{
				{
				setState(4344);
				match(CONTAINS);
				setState(4345);
				match(SQL);
				}
				}
				break;
			case NO:
				{
				{
				setState(4346);
				match(NO);
				setState(4347);
				match(SQL);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SqlDataOption3Context extends ParserRuleContext {
		public TerminalNode MODIFIES() { return getToken(DB2zSQLParser.MODIFIES, 0); }
		public TerminalNode SQL() { return getToken(DB2zSQLParser.SQL, 0); }
		public TerminalNode DATA() { return getToken(DB2zSQLParser.DATA, 0); }
		public TerminalNode READS() { return getToken(DB2zSQLParser.READS, 0); }
		public TerminalNode CONTAINS() { return getToken(DB2zSQLParser.CONTAINS, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public SqlDataOption3Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlDataOption3; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSqlDataOption3(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSqlDataOption3(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSqlDataOption3(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SqlDataOption3Context sqlDataOption3() throws RecognitionException {
		SqlDataOption3Context _localctx = new SqlDataOption3Context(_ctx, getState());
		enterRule(_localctx, 470, RULE_sqlDataOption3);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4360);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MODIFIES:
				{
				{
				setState(4350);
				match(MODIFIES);
				setState(4351);
				match(SQL);
				setState(4352);
				match(DATA);
				}
				}
				break;
			case READS:
				{
				{
				setState(4353);
				match(READS);
				setState(4354);
				match(SQL);
				setState(4355);
				match(DATA);
				}
				}
				break;
			case CONTAINS:
				{
				{
				setState(4356);
				match(CONTAINS);
				setState(4357);
				match(SQL);
				}
				}
				break;
			case NO:
				{
				{
				setState(4358);
				match(NO);
				setState(4359);
				match(SQL);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExternalActionOptionContext extends ParserRuleContext {
		public TerminalNode EXTERNAL() { return getToken(DB2zSQLParser.EXTERNAL, 0); }
		public TerminalNode ACTION() { return getToken(DB2zSQLParser.ACTION, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public ExternalActionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_externalActionOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterExternalActionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitExternalActionOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitExternalActionOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExternalActionOptionContext externalActionOption() throws RecognitionException {
		ExternalActionOptionContext _localctx = new ExternalActionOptionContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_externalActionOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4363);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO) {
				{
				setState(4362);
				match(NO);
				}
			}

			setState(4365);
			match(EXTERNAL);
			setState(4366);
			match(ACTION);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PackagePathOptionContext extends ParserRuleContext {
		public TerminalNode PACKAGE() { return getToken(DB2zSQLParser.PACKAGE, 0); }
		public TerminalNode PATH() { return getToken(DB2zSQLParser.PATH, 0); }
		public PackagePathContext packagePath() {
			return getRuleContext(PackagePathContext.class,0);
		}
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public PackagePathOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_packagePathOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPackagePathOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPackagePathOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPackagePathOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PackagePathOptionContext packagePathOption() throws RecognitionException {
		PackagePathOptionContext _localctx = new PackagePathOptionContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_packagePathOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4374);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PACKAGE:
				{
				{
				setState(4368);
				match(PACKAGE);
				setState(4369);
				match(PATH);
				setState(4370);
				packagePath();
				}
				}
				break;
			case NO:
				{
				{
				setState(4371);
				match(NO);
				setState(4372);
				match(PACKAGE);
				setState(4373);
				match(PATH);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScratchpadOptionContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode SCRATCHPAD() { return getToken(DB2zSQLParser.SCRATCHPAD, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public ScratchpadOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scratchpadOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterScratchpadOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitScratchpadOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitScratchpadOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ScratchpadOptionContext scratchpadOption() throws RecognitionException {
		ScratchpadOptionContext _localctx = new ScratchpadOptionContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_scratchpadOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4380);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO:
				{
				{
				setState(4376);
				match(NO);
				setState(4377);
				match(SCRATCHPAD);
				}
				}
				break;
			case SCRATCHPAD:
				{
				{
				setState(4378);
				match(SCRATCHPAD);
				setState(4379);
				match(INTEGERLITERAL);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FinalCallOptionContext extends ParserRuleContext {
		public TerminalNode FINAL() { return getToken(DB2zSQLParser.FINAL, 0); }
		public TerminalNode CALL() { return getToken(DB2zSQLParser.CALL, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public FinalCallOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_finalCallOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFinalCallOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFinalCallOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFinalCallOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FinalCallOptionContext finalCallOption() throws RecognitionException {
		FinalCallOptionContext _localctx = new FinalCallOptionContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_finalCallOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4383);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO) {
				{
				setState(4382);
				match(NO);
				}
			}

			setState(4385);
			match(FINAL);
			setState(4386);
			match(CALL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParallelOption1Context extends ParserRuleContext {
		public TerminalNode DISALLOW() { return getToken(DB2zSQLParser.DISALLOW, 0); }
		public TerminalNode PARALLEL() { return getToken(DB2zSQLParser.PARALLEL, 0); }
		public ParallelOption1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parallelOption1; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterParallelOption1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitParallelOption1(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitParallelOption1(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParallelOption1Context parallelOption1() throws RecognitionException {
		ParallelOption1Context _localctx = new ParallelOption1Context(_ctx, getState());
		enterRule(_localctx, 480, RULE_parallelOption1);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4388);
			match(DISALLOW);
			setState(4389);
			match(PARALLEL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParallelOption2Context extends ParserRuleContext {
		public TerminalNode PARALLEL() { return getToken(DB2zSQLParser.PARALLEL, 0); }
		public TerminalNode ALLOW() { return getToken(DB2zSQLParser.ALLOW, 0); }
		public TerminalNode DISALLOW() { return getToken(DB2zSQLParser.DISALLOW, 0); }
		public ParallelOption2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parallelOption2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterParallelOption2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitParallelOption2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitParallelOption2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParallelOption2Context parallelOption2() throws RecognitionException {
		ParallelOption2Context _localctx = new ParallelOption2Context(_ctx, getState());
		enterRule(_localctx, 482, RULE_parallelOption2);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4391);
			_la = _input.LA(1);
			if ( !(_la==ALLOW || _la==DISALLOW) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4392);
			match(PARALLEL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DbinfoOptionContext extends ParserRuleContext {
		public TerminalNode DBINFO() { return getToken(DB2zSQLParser.DBINFO, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public DbinfoOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dbinfoOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDbinfoOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDbinfoOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDbinfoOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DbinfoOptionContext dbinfoOption() throws RecognitionException {
		DbinfoOptionContext _localctx = new DbinfoOptionContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_dbinfoOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4395);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO) {
				{
				setState(4394);
				match(NO);
				}
			}

			setState(4397);
			match(DBINFO);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CardinalityOptionContext extends ParserRuleContext {
		public TerminalNode CARDINALITY() { return getToken(DB2zSQLParser.CARDINALITY, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public CardinalityOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cardinalityOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCardinalityOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCardinalityOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCardinalityOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CardinalityOptionContext cardinalityOption() throws RecognitionException {
		CardinalityOptionContext _localctx = new CardinalityOptionContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_cardinalityOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4399);
			match(CARDINALITY);
			setState(4400);
			match(INTEGERLITERAL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollectionIdOptionContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode COLLID() { return getToken(DB2zSQLParser.COLLID, 0); }
		public CollectionIDContext collectionID() {
			return getRuleContext(CollectionIDContext.class,0);
		}
		public CollectionIdOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collectionIdOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCollectionIdOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCollectionIdOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCollectionIdOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollectionIdOptionContext collectionIdOption() throws RecognitionException {
		CollectionIdOptionContext _localctx = new CollectionIdOptionContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_collectionIdOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4406);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO:
				{
				{
				setState(4402);
				match(NO);
				setState(4403);
				match(COLLID);
				}
				}
				break;
			case COLLID:
				{
				{
				setState(4404);
				match(COLLID);
				setState(4405);
				collectionID();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WlmEnvironmentOption1Context extends ParserRuleContext {
		public TerminalNode WLM() { return getToken(DB2zSQLParser.WLM, 0); }
		public TerminalNode ENVIRONMENT() { return getToken(DB2zSQLParser.ENVIRONMENT, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public WlmEnvironmentOption1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_wlmEnvironmentOption1; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterWlmEnvironmentOption1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitWlmEnvironmentOption1(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitWlmEnvironmentOption1(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WlmEnvironmentOption1Context wlmEnvironmentOption1() throws RecognitionException {
		WlmEnvironmentOption1Context _localctx = new WlmEnvironmentOption1Context(_ctx, getState());
		enterRule(_localctx, 490, RULE_wlmEnvironmentOption1);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4408);
			match(WLM);
			setState(4409);
			match(ENVIRONMENT);
			setState(4415);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INSTEAD:
			case NEW:
			case NEW_TABLE:
			case OLD_TABLE:
			case REFERENCING:
			case BASED:
			case UPON:
			case ADD:
			case AFTER:
			case ALL:
			case ALLOCATE:
			case ALLOW:
			case ALTER:
			case ALTERAND:
			case ANY:
			case ARRAY:
			case ARRAY_EXISTS:
			case AS:
			case ASENSITIVE:
			case ASSOCIATE:
			case ASUTIME:
			case AT:
			case AUDIT:
			case AUX:
			case AUXILIARY:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BUFFERPOOL:
			case BUFFERPOOLS:
			case BY:
			case CALL:
			case CAPTURE:
			case CASCADED:
			case CASE:
			case CAST:
			case CCSID:
			case CHAR:
			case CHARACTER:
			case CHECK:
			case CLONE:
			case CLOSE:
			case CLUSTER:
			case COLLECTION:
			case COLLID:
			case COLUMN:
			case COMMENT:
			case COMMIT:
			case CONCAT:
			case CONDITION:
			case CONNECT:
			case CONNECTION:
			case CONSTRAINT:
			case CONTAINS:
			case CONTENT:
			case CONTINUE:
			case CREATE:
			case CUBE:
			case CURRENT:
			case CURRENT_LC_CTYPE:
			case CURRVAL:
			case CURSOR:
			case DATA:
			case DATABASE:
			case DAY:
			case DAYS:
			case DBINFO:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DISABLE:
			case DISALLOW:
			case DISTINCT:
			case DO:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSSIZE:
			case DYNAMIC:
			case EDITPROC:
			case ELSE:
			case ELSEIF:
			case ENCODING:
			case ENCRYPTION:
			case END:
			case END_EXEC:
			case ENDING:
			case ERASE:
			case ESCAPE:
			case EXCEPT:
			case EXCEPTION:
			case EXEC_SQL:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case FENCED:
			case FETCH:
			case FIELDPROC:
			case FINAL:
			case FIRST:
			case FOR:
			case FREE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANT:
			case GROUP:
			case HANDLER:
			case HAVING:
			case HOLD:
			case HOUR:
			case HOURS:
			case IF:
			case IMMEDIATE:
			case IN:
			case INCLUSIVE:
			case INDEX:
			case INDEXBP:
			case INHERIT:
			case INNER:
			case INOUT:
			case INSENSITIVE:
			case INSERT:
			case INTERSECT:
			case INTO:
			case IS:
			case ISOBID:
			case ITERATE:
			case JAR:
			case JOIN:
			case KEEP:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LAST:
			case LC_CTYPE:
			case LEAVE:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOCALE:
			case LOCATOR:
			case LOCATORS:
			case LOCK:
			case LOCKMAX:
			case LOCKSIZE:
			case LONG:
			case LOOP:
			case MAINTAINED:
			case MATERIALIZED:
			case MICROSECOND:
			case MICROSECONDS:
			case MODIFIES:
			case MONTH:
			case MONTHS:
			case NEXT:
			case NEXTVAL:
			case NO:
			case NONE:
			case NOT:
			case NULL:
			case NULLS:
			case NUMPARTS:
			case OBID:
			case OF:
			case OFFSET:
			case OLD:
			case ON:
			case OPEN:
			case OPTIMIZATION:
			case OPTIMIZE:
			case OR:
			case ORDER:
			case ORGANIZATION:
			case OUT:
			case OUTER:
			case PACKAGE:
			case PADDED:
			case PARAMETER:
			case PART:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONING:
			case PATH:
			case PERIOD:
			case PIECESIZE:
			case PLAN:
			case PRECISION:
			case PREPARE:
			case PREVVAL:
			case PRIOR:
			case PRIQTY:
			case PRIVILEGES:
			case PROCEDURE:
			case PROGRAM:
			case PSID:
			case PUBLIC:
			case QUERY:
			case QUERYNO:
			case READS:
			case REFERENCES:
			case REFRESH:
			case RELEASE:
			case RENAME:
			case REPEAT:
			case RESIGNAL:
			case RESTRICT:
			case RESULT:
			case RESULT_SET_LOCATOR:
			case RETURN:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUND_CEILING:
			case ROUND_DOWN:
			case ROUND_FLOOR:
			case ROUND_HALF_DOWN:
			case ROUND_HALF_EVEN:
			case ROUND_HALF_UP:
			case ROUND_UP:
			case ROW:
			case ROWSET:
			case RUN:
			case SAVEPOINT:
			case SCHEMA:
			case SCRATCHPAD:
			case SECOND:
			case SECONDS:
			case SECQTY:
			case SECURITY:
			case SELECT:
			case SENSITIVE:
			case SEQUENCE:
			case SET:
			case SIGNAL:
			case SIMPLE:
			case SOME:
			case SOURCE:
			case SPECIFIC:
			case STANDARD:
			case STATEMENT:
			case STATIC:
			case STAY:
			case STOGROUP:
			case STORES:
			case STYLE:
			case SUMMARY:
			case SYNONYM:
			case SYSDATE:
			case SYSTEM:
			case SYSTIMESTAMP:
			case TABLE:
			case TABLESPACE:
			case THEN:
			case TO:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNDO:
			case UNION:
			case UNIQUE:
			case UNTIL:
			case UPDATE:
			case USING:
			case VALIDPROC:
			case VALUE:
			case VALUES:
			case VARIABLE:
			case VARIANT:
			case VCAT:
			case VERSIONING:
			case VIEW:
			case VOLATILE:
			case VOLUMES:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WLM:
			case XMLCAST:
			case XMLEXISTS:
			case XMLNAMESPACES:
			case YEAR:
			case YEARS:
			case ZONE:
			case AND:
			case ARRAY_AGG:
			case ASC:
			case AVG:
			case BIT:
			case CHANGE:
			case CODEUNITS16:
			case CODEUNITS32:
			case CORR:
			case CORRELATION:
			case COUNT:
			case COUNT_BIG:
			case COVAR:
			case COVARIANCE:
			case COVARIANCE_SAMP:
			case COVAR_POP:
			case COVAR_SAMP:
			case CS:
			case CUME_DIST:
			case DENSE_RANK:
			case DESC:
			case EBCDIC:
			case EXCLUSIVE:
			case FIRST_VALUE:
			case FOLLOWING:
			case GROUPING:
			case IGNORE:
			case INDICATOR:
			case INPUT:
			case ISNULL:
			case LAG:
			case LARGE:
			case LAST_VALUE:
			case LEAD:
			case LISTAGG:
			case LOCKED:
			case LOCKS:
			case MEDIAN:
			case MINUTES:
			case MIXED:
			case NOTNULL:
			case NTH_VALUE:
			case NTILE:
			case NUMERIC:
			case OBJECT:
			case OCTETS:
			case ONLY:
			case OVER:
			case PASSING:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PERCENT_RANK:
			case PRECEDING:
			case PREVIOUS:
			case RANGE:
			case RANK:
			case RATIO_TO_REPORT:
			case READ:
			case REF:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_ICPT:
			case REGR_INTERCEPT:
			case REGR_R2:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case RESPECT:
			case ROW_NUMBER:
			case ROWS:
			case RR:
			case RS:
			case SBCS:
			case SELECTIVITY:
			case SETS:
			case SHARE:
			case SKIP_:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case TOKEN:
			case UNBOUNDED:
			case UNPACK:
			case UR:
			case USE:
			case VAR:
			case VARIANCE:
			case VARIANCE_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARYING:
			case WITHOUT:
			case XML:
			case XMLAGG:
			case COLUMNS:
			case SQLID:
			case ORDINALITY:
			case SYSTEM_TIME:
			case BUSINESS_TIME:
			case MULTIPLIER:
			case UNNEST:
			case CROSS:
			case CALLER:
			case CLIENT:
			case POSITIONING:
			case SCROLL:
			case ACTION:
			case ASSEMBLE:
			case C_:
			case CALLED:
			case COBOL:
			case DB2:
			case DEFINER:
			case DISPATCH:
			case ENVIRONMENT:
			case FAILURE:
			case FAILURES:
			case JAVA:
			case MAIN:
			case NAME:
			case OPTIONS:
			case PARALLEL:
			case PLI:
			case REGISTERS:
			case RESIDENT:
			case SECURED:
			case SPECIAL:
			case SQL:
			case STOP:
			case SUB:
			case YES:
			case APPLICATION:
			case CHANGED:
			case COMPATIBILITY:
			case COMPRESS:
			case COPY:
			case FREEPAGE:
			case GBPCACHE:
			case INCLUDE:
			case MAXVALUE:
			case MINVALUE:
			case PCTFREE:
			case REGENERATE:
			case MASK:
			case ENABLE:
			case PERMISSION:
			case ATOMIC:
			case SQLEXCEPTION:
			case MERGE:
			case MATCHED:
			case SQLSTATE:
			case MESSAGE_TEXT:
			case OVERRIDING:
			case PORTION:
			case DB2SQL:
			case DEBUG:
			case GENERAL:
			case MODE_:
			case REXX:
			case CACHE:
			case CYCLE:
			case INCREMENT:
			case RESTART:
			case DATACLAS:
			case MGMTCLAS:
			case REMOVE:
			case STORCLAS:
			case ACCESS:
			case ACTIVATE:
			case ALWAYS:
			case APPEND:
			case ARCHIVE:
			case BUSINESS:
			case CASCADE:
			case CHANGES:
			case CONTROL:
			case DEACTIVATE:
			case DEFERRED:
			case EACH:
			case ENFORCED:
			case EXTRA:
			case FOREIGN:
			case HIDDEN_:
			case HISTORY:
			case ID:
			case IDENTITY:
			case IMPLICITLY:
			case INITIALLY:
			case INLINE:
			case OPERATION:
			case ORGANIZE:
			case OVERLAPS:
			case PACKAGE_NAME:
			case PACKAGE_SCHEMA:
			case PACKAGE_VERSION:
			case PRIMARY:
			case RESET:
			case ROTATE:
			case START:
			case SYSIBM:
			case TRANSACTION:
			case XMLSCHEMA:
			case ELEMENT:
			case URL:
			case NAMESPACE:
			case LOCATION:
			case SYSXSR:
			case ALGORITHM:
			case FIXEDLENGTH:
			case HUFFMAN:
			case LOB:
			case LOG:
			case LOGGED:
			case MAXPARTITIONS:
			case MAXROWS:
			case MEMBER:
			case MOVE:
			case PAGE:
			case PAGENUM:
			case PENDING:
			case RELATIVE:
			case SEGSIZE:
			case TRACKMOD:
			case ADDRESS:
			case ATTRIBUTES:
			case AUTHENTICATION:
			case AUTHID:
			case CONTEXT:
			case JOBNAME:
			case OWNER:
			case PROFILE:
			case QUALIFIER:
			case SERVAUTH:
			case TRUSTED:
			case SECTION:
			case ACTIVE:
			case VERSION:
			case ALIAS:
			case WORK:
			case WORKFILE:
			case SYSDEFLT:
			case NULTERM:
			case STRUCTURE:
			case GENERIC:
			case TEMPORARY:
			case DEFER:
			case DEFINE:
			case EXCLUDE:
			case GENERATE:
			case KEYS:
			case XMLPATTERN:
			case SIZE:
			case EVERY:
			case ABSOLUTE:
			case ACCELERATOR:
			case EXCLUDING:
			case INCLUDING:
			case DEFAULTS:
			case MODIFIERS:
			case OPTION:
			case PRESERVE:
			case BOTH:
			case DESCRIBE:
			case LABELS:
			case NAMES:
			case OUTPUT:
			case EXCHANGE:
			case STABILIZED:
			case STMTCACHE:
			case STMTID:
			case STMTTOKEN:
			case STARTING:
			case CATALOG_NAME:
			case CONDITION_NUMBER:
			case CURSOR_NAME:
			case DB2_AUTHENTICATION_TYPE:
			case DB2_AUTHORIZATION_ID:
			case DB2_CONNECTION_STATE:
			case DB2_CONNECTION_STATUS:
			case DB2_ENCRYPTION_TYPE:
			case DB2_ERROR_CODE1:
			case DB2_ERROR_CODE2:
			case DB2_ERROR_CODE3:
			case DB2_ERROR_CODE4:
			case DB2_GET_DIAGNOSTICS_DIAGNOSTICS:
			case DB2_INTERNAL_ERROR_POINTER:
			case DB2_LAST_ROW:
			case DB2_LINE_NUMBER:
			case DB2_MESSAGE_ID:
			case DB2_MODULE_DETECTING_ERROR:
			case DB2_NUMBER_PARAMETER_MARKERS:
			case DB2_NUMBER_RESULT_SETS:
			case DB2_NUMBER_ROWS:
			case DB2_ORDINAL_TOKEN_:
			case DB2_PRODUCT_ID:
			case DB2_REASON_CODE:
			case DB2_RETURNED_SQLCODE:
			case DB2_RETURN_STATUS:
			case DB2_ROW_NUMBER:
			case DB2_SERVER_CLASS_NAME:
			case DB2_SQL_ATTR_CURSOR_HOLD:
			case DB2_SQL_ATTR_CURSOR_ROWSET:
			case DB2_SQL_ATTR_CURSOR_SCROLLABLE:
			case DB2_SQL_ATTR_CURSOR_SENSITIVITY:
			case DB2_SQL_ATTR_CURSOR_TYPE:
			case DB2_SQLERRD1:
			case DB2_SQLERRD2:
			case DB2_SQLERRD3:
			case DB2_SQLERRD4:
			case DB2_SQLERRD5:
			case DB2_SQLERRD6:
			case DB2_SQLERRD_SET:
			case DB2_SQL_NESTING_LEVEL:
			case DB2_TOKEN_COUNT:
			case DIAGNOSTICS:
			case MORE_:
			case NUMBER:
			case RETURNED_SQLSTATE:
			case ROW_COUNT:
			case SERVER_NAME:
			case STACKED:
			case CREATETAB:
			case CREATETS:
			case DBADM:
			case DBCTRL:
			case DBMAINT:
			case DISPLAYDB:
			case IMAGCOPY:
			case LOAD:
			case PACKADM:
			case RECOVERDB:
			case REORG:
			case REPAIR:
			case STARTDB:
			case STATS:
			case STOPDB:
			case BIND:
			case ALTERIN:
			case CREATEIN:
			case DROPIN:
			case USAGE:
			case ACCESSCTRL:
			case BINDADD:
			case BINDAGENT:
			case BSDS:
			case CREATEALIAS:
			case CREATEDBA:
			case CREATEDBC:
			case CREATE_SECURE_OBJECT:
			case CREATESG:
			case CREATETMTAB:
			case DATAACCESS:
			case DEBUGSESSION:
			case DISPLAY:
			case MONITOR1:
			case MONITOR2:
			case RECOVER:
			case SQLADM:
			case STOPALL:
			case STOSPACE:
			case SYSADM:
			case SYSCTRL:
			case SYSOPR:
			case TRACE:
			case UNLOAD:
			case WRITE:
			case ABS:
			case ABSVAL:
			case ACOS:
			case ADD_DAYS:
			case ADD_MONTHS:
			case ARRAY_DELETE:
			case ARRAY_FIRST:
			case ARRAY_LAST:
			case ARRAY_NEXT:
			case ARRAY_PRIOR:
			case ARRAY_TRIM:
			case ASCII:
			case ASCII_CHR:
			case ASCIISTR:
			case ASCII_STR:
			case ASIN:
			case ATAN:
			case ATAN2:
			case ATANH:
			case BIGINT:
			case BINARY:
			case BITAND:
			case BITANDNOT:
			case BITNOT:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BTRIM:
			case CARDINALITY:
			case CCSID_ENCODING:
			case CEIL:
			case CEILING:
			case CHAR9:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case CHR:
			case CLOB:
			case COALESCE:
			case COLLATION_KEY:
			case COMPARE_DECFLOAT:
			case COS:
			case COSH:
			case DATE:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFWEEK_ISO:
			case DAYOFYEAR:
			case DAYS_BETWEEN:
			case DBCLOB:
			case DEC:
			case DECFLOAT:
			case DECFLOAT_FORMAT:
			case DECFLOAT_SORTKEY:
			case DECIMAL:
			case DECODE:
			case DECRYPT_BINARY:
			case DECRYPT_BIT:
			case DECRYPT_CHAR:
			case DECRYPT_DATAKEY_BIGINT:
			case DECRYPT_DATAKEY_BIT:
			case DECRYPT_DATAKEY_CLOB:
			case DECRYPT_DATAKEY_DBCLOB:
			case DECRYPT_DATAKEY_DECIMAL:
			case DECRYPT_DATAKEY_INTEGER:
			case DECRYPT_DATAKEY_VARCHAR:
			case DECRYPT_DATAKEY_VARGRAPHIC:
			case DECRYPT_DB:
			case DEGREES:
			case DIFFERENCE:
			case DIGITS:
			case DOUBLE_PRECISION:
			case DSN_XMLVALIDATE:
			case EBCDIC_CHR:
			case EBCDIC_STR:
			case ENCRYPT_DATAKEY:
			case ENCRYPT_TDES:
			case EXP:
			case EXTRACT:
			case FLOAT:
			case FLOOR:
			case GENERATE_UNIQUE:
			case GENERATE_UNIQUE_BINARY:
			case GETHINT:
			case GETVARIABLE:
			case GRAPHIC:
			case GREATEST:
			case HASH:
			case HASH_CRC32:
			case HASH_MD5:
			case HASH_SHA1:
			case HASH_SHA256:
			case HEX:
			case IDENTITY_VAL_LOCAL:
			case IFNULL:
			case INSTR:
			case INT:
			case INTEGER:
			case JULIAN_DAY:
			case LAST_DAY:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LN:
			case LOCATE:
			case LOCATE_IN_STRING:
			case LOG10:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAX:
			case MAX_CARDINALITY:
			case MIDNIGHT_SECONDS:
			case MIN:
			case MINUTE:
			case MOD:
			case MONTHS_BETWEEN:
			case MQREAD:
			case MQREADCLOB:
			case MQRECEIVE:
			case MQRECEIVECLOB:
			case MQSEND:
			case MULTIPLY_ALT:
			case NEXT_DAY:
			case NEXT_MONTH:
			case NORMALIZE_DECFLOAT:
			case NORMALIZE_STRING:
			case NULLIF:
			case NVL:
			case OVERLAY:
			case PACK:
			case POSITION:
			case POSSTR:
			case POW:
			case POWER:
			case QUANTIZE:
			case QUARTER:
			case RADIANS:
			case RAISE_ERROR:
			case RAND:
			case RANDOM:
			case REAL:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REPLACE:
			case RID:
			case ROUND:
			case ROUND_TIMESTAMP:
			case ROWID:
			case RPAD:
			case RTRIM:
			case SCORE:
			case SIGN:
			case SIN:
			case SINH:
			case SMALLINT:
			case SOAPHTTPC:
			case SOAPHTTPNC:
			case SOAPHTTPNV:
			case SOAPHTTPV:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STRIP:
			case STRLEFT:
			case STRPOS:
			case STRRIGHT:
			case SUBSTR:
			case SUBSTRING:
			case TAN:
			case TANH:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIMESTAMP_FORMAT:
			case TIMESTAMP_ISO:
			case TIMESTAMP_TZ:
			case TO_CHAR:
			case TO_CLOB:
			case TO_DATE:
			case TO_NUMBER:
			case TOTALORDER:
			case TO_TIMESTAMP:
			case TRANSLATE:
			case TRIM:
			case TRIM_ARRAY:
			case TRUNC:
			case TRUNC_TIMESTAMP:
			case UCASE:
			case UNICODE:
			case UNICODE_STR:
			case UNISTR:
			case UPPER:
			case VARBINARY:
			case VARCHAR:
			case VARCHAR9:
			case VARCHAR_BIT_FORMAT:
			case VARCHAR_FORMAT:
			case VARGRAPHIC:
			case VERIFY_GROUP_FOR_USER:
			case VERIFY_ROLE_FOR_USER:
			case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
			case WEEK:
			case WEEK_ISO:
			case WRAP:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLCONCAT:
			case XMLDOCUMENT:
			case XMLELEMENT:
			case XMLFOREST:
			case XMLMODIFY:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLSERIALIZE:
			case XMLTEXT:
			case XMLXSROBJECTID:
			case XSLTRANSFORM:
			case CURRENT_ACCELERATOR:
			case CURRENT_APPLICATION_COMPATIBILITY:
			case CURRENT_APPLICATION_ENCODING_SCHEME:
			case CURRENT_CLIENT_ACCTNG:
			case CURRENT_CLIENT_APPLNAME:
			case CURRENT_CLIENT_CORR_TOKEN:
			case CURRENT_CLIENT_USERID:
			case CURRENT_CLIENT_WRKSTNNAME:
			case CURRENT_DATE:
			case CURRENT_DEBUG_MODE:
			case CURRENT_DECFLOAT_ROUNDING_MODE:
			case CURRENT_DEGREE:
			case CURRENT_EXPLAIN_MODE:
			case CURRENT_GET_ACCEL_ARCHIVE:
			case CURRENT_LOCALE_LC_CTYPE:
			case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
			case CURRENT_MEMBER:
			case CURRENT_OPTIMIZATION_HINT:
			case CURRENT_PACKAGE_PATH:
			case CURRENT_PACKAGESET:
			case CURRENT_PATH:
			case CURRENT_PRECISION:
			case CURRENT_QUERY_ACCELERATION:
			case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
			case CURRENT_REFRESH_AGE:
			case CURRENT_ROUTINE_VERSION:
			case CURRENT_RULES:
			case CURRENT_SCHEMA:
			case CURRENT_SERVER:
			case CURRENT_SQLID:
			case CURRENT_TEMPORAL_BUSINESS_TIME:
			case CURRENT_TEMPORAL_SYSTEM_TIME:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_TIME_ZONE:
			case ENCRYPTION_PASSWORD:
			case SESSION_TIME_ZONE:
			case SESSION_USER:
			case USER:
			case ADMIN_TASK_LIST:
			case ADMIN_TASK_OUTPUT:
			case ADMIN_TASK_STATUS:
			case BLOCKING_THREADS:
			case MQREADALL:
			case MQREADALLCLOB:
			case MQRECEIVEALL:
			case MQRECEIVEALLCLOB:
			case XMLTABLE:
			case SQLIDENTIFIER:
				{
				setState(4410);
				identifier();
				}
				break;
			case LPAREN:
				{
				{
				setState(4411);
				match(LPAREN);
				setState(4412);
				identifier();
				setState(4413);
				match(RPAREN);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WlmEnvironmentOption2Context extends ParserRuleContext {
		public TerminalNode WLM() { return getToken(DB2zSQLParser.WLM, 0); }
		public TerminalNode ENVIRONMENT() { return getToken(DB2zSQLParser.ENVIRONMENT, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode COMMA() { return getToken(DB2zSQLParser.COMMA, 0); }
		public TerminalNode SPLAT() { return getToken(DB2zSQLParser.SPLAT, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public WlmEnvironmentOption2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_wlmEnvironmentOption2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterWlmEnvironmentOption2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitWlmEnvironmentOption2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitWlmEnvironmentOption2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WlmEnvironmentOption2Context wlmEnvironmentOption2() throws RecognitionException {
		WlmEnvironmentOption2Context _localctx = new WlmEnvironmentOption2Context(_ctx, getState());
		enterRule(_localctx, 492, RULE_wlmEnvironmentOption2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4417);
			match(WLM);
			setState(4418);
			match(ENVIRONMENT);
			setState(4426);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INSTEAD:
			case NEW:
			case NEW_TABLE:
			case OLD_TABLE:
			case REFERENCING:
			case BASED:
			case UPON:
			case ADD:
			case AFTER:
			case ALL:
			case ALLOCATE:
			case ALLOW:
			case ALTER:
			case ALTERAND:
			case ANY:
			case ARRAY:
			case ARRAY_EXISTS:
			case AS:
			case ASENSITIVE:
			case ASSOCIATE:
			case ASUTIME:
			case AT:
			case AUDIT:
			case AUX:
			case AUXILIARY:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BUFFERPOOL:
			case BUFFERPOOLS:
			case BY:
			case CALL:
			case CAPTURE:
			case CASCADED:
			case CASE:
			case CAST:
			case CCSID:
			case CHAR:
			case CHARACTER:
			case CHECK:
			case CLONE:
			case CLOSE:
			case CLUSTER:
			case COLLECTION:
			case COLLID:
			case COLUMN:
			case COMMENT:
			case COMMIT:
			case CONCAT:
			case CONDITION:
			case CONNECT:
			case CONNECTION:
			case CONSTRAINT:
			case CONTAINS:
			case CONTENT:
			case CONTINUE:
			case CREATE:
			case CUBE:
			case CURRENT:
			case CURRENT_LC_CTYPE:
			case CURRVAL:
			case CURSOR:
			case DATA:
			case DATABASE:
			case DAY:
			case DAYS:
			case DBINFO:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DISABLE:
			case DISALLOW:
			case DISTINCT:
			case DO:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSSIZE:
			case DYNAMIC:
			case EDITPROC:
			case ELSE:
			case ELSEIF:
			case ENCODING:
			case ENCRYPTION:
			case END:
			case END_EXEC:
			case ENDING:
			case ERASE:
			case ESCAPE:
			case EXCEPT:
			case EXCEPTION:
			case EXEC_SQL:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case FENCED:
			case FETCH:
			case FIELDPROC:
			case FINAL:
			case FIRST:
			case FOR:
			case FREE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANT:
			case GROUP:
			case HANDLER:
			case HAVING:
			case HOLD:
			case HOUR:
			case HOURS:
			case IF:
			case IMMEDIATE:
			case IN:
			case INCLUSIVE:
			case INDEX:
			case INDEXBP:
			case INHERIT:
			case INNER:
			case INOUT:
			case INSENSITIVE:
			case INSERT:
			case INTERSECT:
			case INTO:
			case IS:
			case ISOBID:
			case ITERATE:
			case JAR:
			case JOIN:
			case KEEP:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LAST:
			case LC_CTYPE:
			case LEAVE:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOCALE:
			case LOCATOR:
			case LOCATORS:
			case LOCK:
			case LOCKMAX:
			case LOCKSIZE:
			case LONG:
			case LOOP:
			case MAINTAINED:
			case MATERIALIZED:
			case MICROSECOND:
			case MICROSECONDS:
			case MODIFIES:
			case MONTH:
			case MONTHS:
			case NEXT:
			case NEXTVAL:
			case NO:
			case NONE:
			case NOT:
			case NULL:
			case NULLS:
			case NUMPARTS:
			case OBID:
			case OF:
			case OFFSET:
			case OLD:
			case ON:
			case OPEN:
			case OPTIMIZATION:
			case OPTIMIZE:
			case OR:
			case ORDER:
			case ORGANIZATION:
			case OUT:
			case OUTER:
			case PACKAGE:
			case PADDED:
			case PARAMETER:
			case PART:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONING:
			case PATH:
			case PERIOD:
			case PIECESIZE:
			case PLAN:
			case PRECISION:
			case PREPARE:
			case PREVVAL:
			case PRIOR:
			case PRIQTY:
			case PRIVILEGES:
			case PROCEDURE:
			case PROGRAM:
			case PSID:
			case PUBLIC:
			case QUERY:
			case QUERYNO:
			case READS:
			case REFERENCES:
			case REFRESH:
			case RELEASE:
			case RENAME:
			case REPEAT:
			case RESIGNAL:
			case RESTRICT:
			case RESULT:
			case RESULT_SET_LOCATOR:
			case RETURN:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUND_CEILING:
			case ROUND_DOWN:
			case ROUND_FLOOR:
			case ROUND_HALF_DOWN:
			case ROUND_HALF_EVEN:
			case ROUND_HALF_UP:
			case ROUND_UP:
			case ROW:
			case ROWSET:
			case RUN:
			case SAVEPOINT:
			case SCHEMA:
			case SCRATCHPAD:
			case SECOND:
			case SECONDS:
			case SECQTY:
			case SECURITY:
			case SELECT:
			case SENSITIVE:
			case SEQUENCE:
			case SET:
			case SIGNAL:
			case SIMPLE:
			case SOME:
			case SOURCE:
			case SPECIFIC:
			case STANDARD:
			case STATEMENT:
			case STATIC:
			case STAY:
			case STOGROUP:
			case STORES:
			case STYLE:
			case SUMMARY:
			case SYNONYM:
			case SYSDATE:
			case SYSTEM:
			case SYSTIMESTAMP:
			case TABLE:
			case TABLESPACE:
			case THEN:
			case TO:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNDO:
			case UNION:
			case UNIQUE:
			case UNTIL:
			case UPDATE:
			case USING:
			case VALIDPROC:
			case VALUE:
			case VALUES:
			case VARIABLE:
			case VARIANT:
			case VCAT:
			case VERSIONING:
			case VIEW:
			case VOLATILE:
			case VOLUMES:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WLM:
			case XMLCAST:
			case XMLEXISTS:
			case XMLNAMESPACES:
			case YEAR:
			case YEARS:
			case ZONE:
			case AND:
			case ARRAY_AGG:
			case ASC:
			case AVG:
			case BIT:
			case CHANGE:
			case CODEUNITS16:
			case CODEUNITS32:
			case CORR:
			case CORRELATION:
			case COUNT:
			case COUNT_BIG:
			case COVAR:
			case COVARIANCE:
			case COVARIANCE_SAMP:
			case COVAR_POP:
			case COVAR_SAMP:
			case CS:
			case CUME_DIST:
			case DENSE_RANK:
			case DESC:
			case EBCDIC:
			case EXCLUSIVE:
			case FIRST_VALUE:
			case FOLLOWING:
			case GROUPING:
			case IGNORE:
			case INDICATOR:
			case INPUT:
			case ISNULL:
			case LAG:
			case LARGE:
			case LAST_VALUE:
			case LEAD:
			case LISTAGG:
			case LOCKED:
			case LOCKS:
			case MEDIAN:
			case MINUTES:
			case MIXED:
			case NOTNULL:
			case NTH_VALUE:
			case NTILE:
			case NUMERIC:
			case OBJECT:
			case OCTETS:
			case ONLY:
			case OVER:
			case PASSING:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PERCENT_RANK:
			case PRECEDING:
			case PREVIOUS:
			case RANGE:
			case RANK:
			case RATIO_TO_REPORT:
			case READ:
			case REF:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_ICPT:
			case REGR_INTERCEPT:
			case REGR_R2:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case RESPECT:
			case ROW_NUMBER:
			case ROWS:
			case RR:
			case RS:
			case SBCS:
			case SELECTIVITY:
			case SETS:
			case SHARE:
			case SKIP_:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case TOKEN:
			case UNBOUNDED:
			case UNPACK:
			case UR:
			case USE:
			case VAR:
			case VARIANCE:
			case VARIANCE_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARYING:
			case WITHOUT:
			case XML:
			case XMLAGG:
			case COLUMNS:
			case SQLID:
			case ORDINALITY:
			case SYSTEM_TIME:
			case BUSINESS_TIME:
			case MULTIPLIER:
			case UNNEST:
			case CROSS:
			case CALLER:
			case CLIENT:
			case POSITIONING:
			case SCROLL:
			case ACTION:
			case ASSEMBLE:
			case C_:
			case CALLED:
			case COBOL:
			case DB2:
			case DEFINER:
			case DISPATCH:
			case ENVIRONMENT:
			case FAILURE:
			case FAILURES:
			case JAVA:
			case MAIN:
			case NAME:
			case OPTIONS:
			case PARALLEL:
			case PLI:
			case REGISTERS:
			case RESIDENT:
			case SECURED:
			case SPECIAL:
			case SQL:
			case STOP:
			case SUB:
			case YES:
			case APPLICATION:
			case CHANGED:
			case COMPATIBILITY:
			case COMPRESS:
			case COPY:
			case FREEPAGE:
			case GBPCACHE:
			case INCLUDE:
			case MAXVALUE:
			case MINVALUE:
			case PCTFREE:
			case REGENERATE:
			case MASK:
			case ENABLE:
			case PERMISSION:
			case ATOMIC:
			case SQLEXCEPTION:
			case MERGE:
			case MATCHED:
			case SQLSTATE:
			case MESSAGE_TEXT:
			case OVERRIDING:
			case PORTION:
			case DB2SQL:
			case DEBUG:
			case GENERAL:
			case MODE_:
			case REXX:
			case CACHE:
			case CYCLE:
			case INCREMENT:
			case RESTART:
			case DATACLAS:
			case MGMTCLAS:
			case REMOVE:
			case STORCLAS:
			case ACCESS:
			case ACTIVATE:
			case ALWAYS:
			case APPEND:
			case ARCHIVE:
			case BUSINESS:
			case CASCADE:
			case CHANGES:
			case CONTROL:
			case DEACTIVATE:
			case DEFERRED:
			case EACH:
			case ENFORCED:
			case EXTRA:
			case FOREIGN:
			case HIDDEN_:
			case HISTORY:
			case ID:
			case IDENTITY:
			case IMPLICITLY:
			case INITIALLY:
			case INLINE:
			case OPERATION:
			case ORGANIZE:
			case OVERLAPS:
			case PACKAGE_NAME:
			case PACKAGE_SCHEMA:
			case PACKAGE_VERSION:
			case PRIMARY:
			case RESET:
			case ROTATE:
			case START:
			case SYSIBM:
			case TRANSACTION:
			case XMLSCHEMA:
			case ELEMENT:
			case URL:
			case NAMESPACE:
			case LOCATION:
			case SYSXSR:
			case ALGORITHM:
			case FIXEDLENGTH:
			case HUFFMAN:
			case LOB:
			case LOG:
			case LOGGED:
			case MAXPARTITIONS:
			case MAXROWS:
			case MEMBER:
			case MOVE:
			case PAGE:
			case PAGENUM:
			case PENDING:
			case RELATIVE:
			case SEGSIZE:
			case TRACKMOD:
			case ADDRESS:
			case ATTRIBUTES:
			case AUTHENTICATION:
			case AUTHID:
			case CONTEXT:
			case JOBNAME:
			case OWNER:
			case PROFILE:
			case QUALIFIER:
			case SERVAUTH:
			case TRUSTED:
			case SECTION:
			case ACTIVE:
			case VERSION:
			case ALIAS:
			case WORK:
			case WORKFILE:
			case SYSDEFLT:
			case NULTERM:
			case STRUCTURE:
			case GENERIC:
			case TEMPORARY:
			case DEFER:
			case DEFINE:
			case EXCLUDE:
			case GENERATE:
			case KEYS:
			case XMLPATTERN:
			case SIZE:
			case EVERY:
			case ABSOLUTE:
			case ACCELERATOR:
			case EXCLUDING:
			case INCLUDING:
			case DEFAULTS:
			case MODIFIERS:
			case OPTION:
			case PRESERVE:
			case BOTH:
			case DESCRIBE:
			case LABELS:
			case NAMES:
			case OUTPUT:
			case EXCHANGE:
			case STABILIZED:
			case STMTCACHE:
			case STMTID:
			case STMTTOKEN:
			case STARTING:
			case CATALOG_NAME:
			case CONDITION_NUMBER:
			case CURSOR_NAME:
			case DB2_AUTHENTICATION_TYPE:
			case DB2_AUTHORIZATION_ID:
			case DB2_CONNECTION_STATE:
			case DB2_CONNECTION_STATUS:
			case DB2_ENCRYPTION_TYPE:
			case DB2_ERROR_CODE1:
			case DB2_ERROR_CODE2:
			case DB2_ERROR_CODE3:
			case DB2_ERROR_CODE4:
			case DB2_GET_DIAGNOSTICS_DIAGNOSTICS:
			case DB2_INTERNAL_ERROR_POINTER:
			case DB2_LAST_ROW:
			case DB2_LINE_NUMBER:
			case DB2_MESSAGE_ID:
			case DB2_MODULE_DETECTING_ERROR:
			case DB2_NUMBER_PARAMETER_MARKERS:
			case DB2_NUMBER_RESULT_SETS:
			case DB2_NUMBER_ROWS:
			case DB2_ORDINAL_TOKEN_:
			case DB2_PRODUCT_ID:
			case DB2_REASON_CODE:
			case DB2_RETURNED_SQLCODE:
			case DB2_RETURN_STATUS:
			case DB2_ROW_NUMBER:
			case DB2_SERVER_CLASS_NAME:
			case DB2_SQL_ATTR_CURSOR_HOLD:
			case DB2_SQL_ATTR_CURSOR_ROWSET:
			case DB2_SQL_ATTR_CURSOR_SCROLLABLE:
			case DB2_SQL_ATTR_CURSOR_SENSITIVITY:
			case DB2_SQL_ATTR_CURSOR_TYPE:
			case DB2_SQLERRD1:
			case DB2_SQLERRD2:
			case DB2_SQLERRD3:
			case DB2_SQLERRD4:
			case DB2_SQLERRD5:
			case DB2_SQLERRD6:
			case DB2_SQLERRD_SET:
			case DB2_SQL_NESTING_LEVEL:
			case DB2_TOKEN_COUNT:
			case DIAGNOSTICS:
			case MORE_:
			case NUMBER:
			case RETURNED_SQLSTATE:
			case ROW_COUNT:
			case SERVER_NAME:
			case STACKED:
			case CREATETAB:
			case CREATETS:
			case DBADM:
			case DBCTRL:
			case DBMAINT:
			case DISPLAYDB:
			case IMAGCOPY:
			case LOAD:
			case PACKADM:
			case RECOVERDB:
			case REORG:
			case REPAIR:
			case STARTDB:
			case STATS:
			case STOPDB:
			case BIND:
			case ALTERIN:
			case CREATEIN:
			case DROPIN:
			case USAGE:
			case ACCESSCTRL:
			case BINDADD:
			case BINDAGENT:
			case BSDS:
			case CREATEALIAS:
			case CREATEDBA:
			case CREATEDBC:
			case CREATE_SECURE_OBJECT:
			case CREATESG:
			case CREATETMTAB:
			case DATAACCESS:
			case DEBUGSESSION:
			case DISPLAY:
			case MONITOR1:
			case MONITOR2:
			case RECOVER:
			case SQLADM:
			case STOPALL:
			case STOSPACE:
			case SYSADM:
			case SYSCTRL:
			case SYSOPR:
			case TRACE:
			case UNLOAD:
			case WRITE:
			case ABS:
			case ABSVAL:
			case ACOS:
			case ADD_DAYS:
			case ADD_MONTHS:
			case ARRAY_DELETE:
			case ARRAY_FIRST:
			case ARRAY_LAST:
			case ARRAY_NEXT:
			case ARRAY_PRIOR:
			case ARRAY_TRIM:
			case ASCII:
			case ASCII_CHR:
			case ASCIISTR:
			case ASCII_STR:
			case ASIN:
			case ATAN:
			case ATAN2:
			case ATANH:
			case BIGINT:
			case BINARY:
			case BITAND:
			case BITANDNOT:
			case BITNOT:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BTRIM:
			case CARDINALITY:
			case CCSID_ENCODING:
			case CEIL:
			case CEILING:
			case CHAR9:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case CHR:
			case CLOB:
			case COALESCE:
			case COLLATION_KEY:
			case COMPARE_DECFLOAT:
			case COS:
			case COSH:
			case DATE:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFWEEK_ISO:
			case DAYOFYEAR:
			case DAYS_BETWEEN:
			case DBCLOB:
			case DEC:
			case DECFLOAT:
			case DECFLOAT_FORMAT:
			case DECFLOAT_SORTKEY:
			case DECIMAL:
			case DECODE:
			case DECRYPT_BINARY:
			case DECRYPT_BIT:
			case DECRYPT_CHAR:
			case DECRYPT_DATAKEY_BIGINT:
			case DECRYPT_DATAKEY_BIT:
			case DECRYPT_DATAKEY_CLOB:
			case DECRYPT_DATAKEY_DBCLOB:
			case DECRYPT_DATAKEY_DECIMAL:
			case DECRYPT_DATAKEY_INTEGER:
			case DECRYPT_DATAKEY_VARCHAR:
			case DECRYPT_DATAKEY_VARGRAPHIC:
			case DECRYPT_DB:
			case DEGREES:
			case DIFFERENCE:
			case DIGITS:
			case DOUBLE_PRECISION:
			case DSN_XMLVALIDATE:
			case EBCDIC_CHR:
			case EBCDIC_STR:
			case ENCRYPT_DATAKEY:
			case ENCRYPT_TDES:
			case EXP:
			case EXTRACT:
			case FLOAT:
			case FLOOR:
			case GENERATE_UNIQUE:
			case GENERATE_UNIQUE_BINARY:
			case GETHINT:
			case GETVARIABLE:
			case GRAPHIC:
			case GREATEST:
			case HASH:
			case HASH_CRC32:
			case HASH_MD5:
			case HASH_SHA1:
			case HASH_SHA256:
			case HEX:
			case IDENTITY_VAL_LOCAL:
			case IFNULL:
			case INSTR:
			case INT:
			case INTEGER:
			case JULIAN_DAY:
			case LAST_DAY:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LN:
			case LOCATE:
			case LOCATE_IN_STRING:
			case LOG10:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAX:
			case MAX_CARDINALITY:
			case MIDNIGHT_SECONDS:
			case MIN:
			case MINUTE:
			case MOD:
			case MONTHS_BETWEEN:
			case MQREAD:
			case MQREADCLOB:
			case MQRECEIVE:
			case MQRECEIVECLOB:
			case MQSEND:
			case MULTIPLY_ALT:
			case NEXT_DAY:
			case NEXT_MONTH:
			case NORMALIZE_DECFLOAT:
			case NORMALIZE_STRING:
			case NULLIF:
			case NVL:
			case OVERLAY:
			case PACK:
			case POSITION:
			case POSSTR:
			case POW:
			case POWER:
			case QUANTIZE:
			case QUARTER:
			case RADIANS:
			case RAISE_ERROR:
			case RAND:
			case RANDOM:
			case REAL:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REPLACE:
			case RID:
			case ROUND:
			case ROUND_TIMESTAMP:
			case ROWID:
			case RPAD:
			case RTRIM:
			case SCORE:
			case SIGN:
			case SIN:
			case SINH:
			case SMALLINT:
			case SOAPHTTPC:
			case SOAPHTTPNC:
			case SOAPHTTPNV:
			case SOAPHTTPV:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STRIP:
			case STRLEFT:
			case STRPOS:
			case STRRIGHT:
			case SUBSTR:
			case SUBSTRING:
			case TAN:
			case TANH:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIMESTAMP_FORMAT:
			case TIMESTAMP_ISO:
			case TIMESTAMP_TZ:
			case TO_CHAR:
			case TO_CLOB:
			case TO_DATE:
			case TO_NUMBER:
			case TOTALORDER:
			case TO_TIMESTAMP:
			case TRANSLATE:
			case TRIM:
			case TRIM_ARRAY:
			case TRUNC:
			case TRUNC_TIMESTAMP:
			case UCASE:
			case UNICODE:
			case UNICODE_STR:
			case UNISTR:
			case UPPER:
			case VARBINARY:
			case VARCHAR:
			case VARCHAR9:
			case VARCHAR_BIT_FORMAT:
			case VARCHAR_FORMAT:
			case VARGRAPHIC:
			case VERIFY_GROUP_FOR_USER:
			case VERIFY_ROLE_FOR_USER:
			case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
			case WEEK:
			case WEEK_ISO:
			case WRAP:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLCONCAT:
			case XMLDOCUMENT:
			case XMLELEMENT:
			case XMLFOREST:
			case XMLMODIFY:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLSERIALIZE:
			case XMLTEXT:
			case XMLXSROBJECTID:
			case XSLTRANSFORM:
			case CURRENT_ACCELERATOR:
			case CURRENT_APPLICATION_COMPATIBILITY:
			case CURRENT_APPLICATION_ENCODING_SCHEME:
			case CURRENT_CLIENT_ACCTNG:
			case CURRENT_CLIENT_APPLNAME:
			case CURRENT_CLIENT_CORR_TOKEN:
			case CURRENT_CLIENT_USERID:
			case CURRENT_CLIENT_WRKSTNNAME:
			case CURRENT_DATE:
			case CURRENT_DEBUG_MODE:
			case CURRENT_DECFLOAT_ROUNDING_MODE:
			case CURRENT_DEGREE:
			case CURRENT_EXPLAIN_MODE:
			case CURRENT_GET_ACCEL_ARCHIVE:
			case CURRENT_LOCALE_LC_CTYPE:
			case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
			case CURRENT_MEMBER:
			case CURRENT_OPTIMIZATION_HINT:
			case CURRENT_PACKAGE_PATH:
			case CURRENT_PACKAGESET:
			case CURRENT_PATH:
			case CURRENT_PRECISION:
			case CURRENT_QUERY_ACCELERATION:
			case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
			case CURRENT_REFRESH_AGE:
			case CURRENT_ROUTINE_VERSION:
			case CURRENT_RULES:
			case CURRENT_SCHEMA:
			case CURRENT_SERVER:
			case CURRENT_SQLID:
			case CURRENT_TEMPORAL_BUSINESS_TIME:
			case CURRENT_TEMPORAL_SYSTEM_TIME:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_TIME_ZONE:
			case ENCRYPTION_PASSWORD:
			case SESSION_TIME_ZONE:
			case SESSION_USER:
			case USER:
			case ADMIN_TASK_LIST:
			case ADMIN_TASK_OUTPUT:
			case ADMIN_TASK_STATUS:
			case BLOCKING_THREADS:
			case MQREADALL:
			case MQREADALLCLOB:
			case MQRECEIVEALL:
			case MQRECEIVEALLCLOB:
			case XMLTABLE:
			case SQLIDENTIFIER:
				{
				setState(4419);
				identifier();
				}
				break;
			case LPAREN:
				{
				{
				setState(4420);
				match(LPAREN);
				setState(4421);
				identifier();
				setState(4422);
				match(COMMA);
				setState(4423);
				match(SPLAT);
				setState(4424);
				match(RPAREN);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AsuTimeOptionContext extends ParserRuleContext {
		public TerminalNode ASUTIME() { return getToken(DB2zSQLParser.ASUTIME, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode LIMIT() { return getToken(DB2zSQLParser.LIMIT, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public AsuTimeOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asuTimeOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAsuTimeOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAsuTimeOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAsuTimeOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AsuTimeOptionContext asuTimeOption() throws RecognitionException {
		AsuTimeOptionContext _localctx = new AsuTimeOptionContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_asuTimeOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4428);
			match(ASUTIME);
			setState(4433);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO:
				{
				{
				setState(4429);
				match(NO);
				setState(4430);
				match(LIMIT);
				}
				}
				break;
			case LIMIT:
				{
				{
				setState(4431);
				match(LIMIT);
				setState(4432);
				match(INTEGERLITERAL);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StayResidentOptionContext extends ParserRuleContext {
		public TerminalNode STAY() { return getToken(DB2zSQLParser.STAY, 0); }
		public TerminalNode RESIDENT() { return getToken(DB2zSQLParser.RESIDENT, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode YES() { return getToken(DB2zSQLParser.YES, 0); }
		public StayResidentOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stayResidentOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterStayResidentOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitStayResidentOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitStayResidentOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StayResidentOptionContext stayResidentOption() throws RecognitionException {
		StayResidentOptionContext _localctx = new StayResidentOptionContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_stayResidentOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4435);
			match(STAY);
			setState(4436);
			match(RESIDENT);
			setState(4437);
			_la = _input.LA(1);
			if ( !(_la==NO || _la==YES) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProgramTypeOptionContext extends ParserRuleContext {
		public TerminalNode PROGRAM() { return getToken(DB2zSQLParser.PROGRAM, 0); }
		public TerminalNode TYPE() { return getToken(DB2zSQLParser.TYPE, 0); }
		public TerminalNode SUB() { return getToken(DB2zSQLParser.SUB, 0); }
		public TerminalNode MAIN() { return getToken(DB2zSQLParser.MAIN, 0); }
		public ProgramTypeOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_programTypeOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterProgramTypeOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitProgramTypeOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitProgramTypeOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProgramTypeOptionContext programTypeOption() throws RecognitionException {
		ProgramTypeOptionContext _localctx = new ProgramTypeOptionContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_programTypeOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4439);
			match(PROGRAM);
			setState(4440);
			match(TYPE);
			setState(4441);
			_la = _input.LA(1);
			if ( !(_la==MAIN || _la==SUB) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SecurityOptionContext extends ParserRuleContext {
		public TerminalNode SECURITY() { return getToken(DB2zSQLParser.SECURITY, 0); }
		public TerminalNode DB2() { return getToken(DB2zSQLParser.DB2, 0); }
		public TerminalNode USER() { return getToken(DB2zSQLParser.USER, 0); }
		public TerminalNode DEFINER() { return getToken(DB2zSQLParser.DEFINER, 0); }
		public SecurityOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_securityOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSecurityOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSecurityOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSecurityOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SecurityOptionContext securityOption() throws RecognitionException {
		SecurityOptionContext _localctx = new SecurityOptionContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_securityOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4443);
			match(SECURITY);
			setState(4444);
			_la = _input.LA(1);
			if ( !(_la==DB2 || _la==DEFINER || _la==USER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StopAfterFailureOptionContext extends ParserRuleContext {
		public TerminalNode STOP() { return getToken(DB2zSQLParser.STOP, 0); }
		public TerminalNode AFTER() { return getToken(DB2zSQLParser.AFTER, 0); }
		public TerminalNode SYSTEM() { return getToken(DB2zSQLParser.SYSTEM, 0); }
		public TerminalNode DEFAULT() { return getToken(DB2zSQLParser.DEFAULT, 0); }
		public TerminalNode FAILURES() { return getToken(DB2zSQLParser.FAILURES, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode CONTINUE() { return getToken(DB2zSQLParser.CONTINUE, 0); }
		public TerminalNode FAILURE() { return getToken(DB2zSQLParser.FAILURE, 0); }
		public StopAfterFailureOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stopAfterFailureOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterStopAfterFailureOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitStopAfterFailureOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitStopAfterFailureOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StopAfterFailureOptionContext stopAfterFailureOption() throws RecognitionException {
		StopAfterFailureOptionContext _localctx = new StopAfterFailureOptionContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_stopAfterFailureOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4458);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,441,_ctx) ) {
			case 1:
				{
				{
				setState(4446);
				match(STOP);
				setState(4447);
				match(AFTER);
				setState(4448);
				match(SYSTEM);
				setState(4449);
				match(DEFAULT);
				setState(4450);
				match(FAILURES);
				}
				}
				break;
			case 2:
				{
				{
				setState(4451);
				match(STOP);
				setState(4452);
				match(AFTER);
				setState(4453);
				match(INTEGERLITERAL);
				setState(4454);
				match(FAILURES);
				}
				}
				break;
			case 3:
				{
				{
				setState(4455);
				match(CONTINUE);
				setState(4456);
				match(AFTER);
				setState(4457);
				match(FAILURE);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RunOptionsOptionContext extends ParserRuleContext {
		public TerminalNode RUN() { return getToken(DB2zSQLParser.RUN, 0); }
		public TerminalNode OPTIONS() { return getToken(DB2zSQLParser.OPTIONS, 0); }
		public RunTimeOptionsContext runTimeOptions() {
			return getRuleContext(RunTimeOptionsContext.class,0);
		}
		public RunOptionsOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_runOptionsOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRunOptionsOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRunOptionsOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRunOptionsOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RunOptionsOptionContext runOptionsOption() throws RecognitionException {
		RunOptionsOptionContext _localctx = new RunOptionsOptionContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_runOptionsOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4460);
			match(RUN);
			setState(4461);
			match(OPTIONS);
			setState(4462);
			runTimeOptions();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommitOnReturnOptionContext extends ParserRuleContext {
		public TerminalNode COMMIT() { return getToken(DB2zSQLParser.COMMIT, 0); }
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public TerminalNode RETURN() { return getToken(DB2zSQLParser.RETURN, 0); }
		public TerminalNode YES() { return getToken(DB2zSQLParser.YES, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public CommitOnReturnOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commitOnReturnOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCommitOnReturnOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCommitOnReturnOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCommitOnReturnOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommitOnReturnOptionContext commitOnReturnOption() throws RecognitionException {
		CommitOnReturnOptionContext _localctx = new CommitOnReturnOptionContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_commitOnReturnOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4464);
			match(COMMIT);
			setState(4465);
			match(ON);
			setState(4466);
			match(RETURN);
			setState(4467);
			_la = _input.LA(1);
			if ( !(_la==NO || _la==YES) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SpecialRegistersOptionContext extends ParserRuleContext {
		public TerminalNode SPECIAL() { return getToken(DB2zSQLParser.SPECIAL, 0); }
		public TerminalNode REGISTERS() { return getToken(DB2zSQLParser.REGISTERS, 0); }
		public TerminalNode INHERIT() { return getToken(DB2zSQLParser.INHERIT, 0); }
		public TerminalNode DEFAULT() { return getToken(DB2zSQLParser.DEFAULT, 0); }
		public SpecialRegistersOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_specialRegistersOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSpecialRegistersOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSpecialRegistersOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSpecialRegistersOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SpecialRegistersOptionContext specialRegistersOption() throws RecognitionException {
		SpecialRegistersOptionContext _localctx = new SpecialRegistersOptionContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_specialRegistersOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4469);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT || _la==INHERIT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4470);
			match(SPECIAL);
			setState(4471);
			match(REGISTERS);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DispatchOptionContext extends ParserRuleContext {
		public TerminalNode STATIC() { return getToken(DB2zSQLParser.STATIC, 0); }
		public TerminalNode DISPATCH() { return getToken(DB2zSQLParser.DISPATCH, 0); }
		public DispatchOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dispatchOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDispatchOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDispatchOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDispatchOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DispatchOptionContext dispatchOption() throws RecognitionException {
		DispatchOptionContext _localctx = new DispatchOptionContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_dispatchOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4473);
			match(STATIC);
			setState(4474);
			match(DISPATCH);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SecuredOptionContext extends ParserRuleContext {
		public TerminalNode SECURED() { return getToken(DB2zSQLParser.SECURED, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public SecuredOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_securedOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSecuredOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSecuredOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSecuredOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SecuredOptionContext securedOption() throws RecognitionException {
		SecuredOptionContext _localctx = new SecuredOptionContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_securedOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4477);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(4476);
				match(NOT);
				}
			}

			setState(4479);
			match(SECURED);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SpecificNameOption1Context extends ParserRuleContext {
		public TerminalNode SPECIFIC() { return getToken(DB2zSQLParser.SPECIFIC, 0); }
		public SpecificNameContext specificName() {
			return getRuleContext(SpecificNameContext.class,0);
		}
		public SpecificNameOption1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_specificNameOption1; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSpecificNameOption1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSpecificNameOption1(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSpecificNameOption1(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SpecificNameOption1Context specificNameOption1() throws RecognitionException {
		SpecificNameOption1Context _localctx = new SpecificNameOption1Context(_ctx, getState());
		enterRule(_localctx, 514, RULE_specificNameOption1);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4481);
			match(SPECIFIC);
			setState(4483);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,443,_ctx) ) {
			case 1:
				{
				setState(4482);
				specificName();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SpecificNameOption2Context extends ParserRuleContext {
		public TerminalNode SPECIFIC() { return getToken(DB2zSQLParser.SPECIFIC, 0); }
		public SpecificNameContext specificName() {
			return getRuleContext(SpecificNameContext.class,0);
		}
		public SpecificNameOption2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_specificNameOption2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSpecificNameOption2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSpecificNameOption2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSpecificNameOption2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SpecificNameOption2Context specificNameOption2() throws RecognitionException {
		SpecificNameOption2Context _localctx = new SpecificNameOption2Context(_ctx, getState());
		enterRule(_localctx, 516, RULE_specificNameOption2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4485);
			match(SPECIFIC);
			setState(4486);
			specificName();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterOption1Context extends ParserRuleContext {
		public TerminalNode PARAMETER() { return getToken(DB2zSQLParser.PARAMETER, 0); }
		public List<CcsidClause1Context> ccsidClause1() {
			return getRuleContexts(CcsidClause1Context.class);
		}
		public CcsidClause1Context ccsidClause1(int i) {
			return getRuleContext(CcsidClause1Context.class,i);
		}
		public List<TerminalNode> VARCHAR() { return getTokens(DB2zSQLParser.VARCHAR); }
		public TerminalNode VARCHAR(int i) {
			return getToken(DB2zSQLParser.VARCHAR, i);
		}
		public List<TerminalNode> NULTERM() { return getTokens(DB2zSQLParser.NULTERM); }
		public TerminalNode NULTERM(int i) {
			return getToken(DB2zSQLParser.NULTERM, i);
		}
		public List<TerminalNode> STRUCTURE() { return getTokens(DB2zSQLParser.STRUCTURE); }
		public TerminalNode STRUCTURE(int i) {
			return getToken(DB2zSQLParser.STRUCTURE, i);
		}
		public ParameterOption1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterOption1; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterParameterOption1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitParameterOption1(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitParameterOption1(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParameterOption1Context parameterOption1() throws RecognitionException {
		ParameterOption1Context _localctx = new ParameterOption1Context(_ctx, getState());
		enterRule(_localctx, 518, RULE_parameterOption1);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4488);
			match(PARAMETER);
			setState(4492); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(4492);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CCSID:
					{
					setState(4489);
					ccsidClause1();
					}
					break;
				case VARCHAR:
					{
					{
					setState(4490);
					match(VARCHAR);
					setState(4491);
					_la = _input.LA(1);
					if ( !(_la==NULTERM || _la==STRUCTURE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(4494); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==CCSID || _la==VARCHAR );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterOption2Context extends ParserRuleContext {
		public TerminalNode PARAMETER() { return getToken(DB2zSQLParser.PARAMETER, 0); }
		public CcsidClause1Context ccsidClause1() {
			return getRuleContext(CcsidClause1Context.class,0);
		}
		public ParameterOption2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterOption2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterParameterOption2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitParameterOption2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitParameterOption2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParameterOption2Context parameterOption2() throws RecognitionException {
		ParameterOption2Context _localctx = new ParameterOption2Context(_ctx, getState());
		enterRule(_localctx, 520, RULE_parameterOption2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4496);
			match(PARAMETER);
			setState(4497);
			ccsidClause1();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFunctionStatementExternalTableOptionsContext extends ParserRuleContext {
		public ExternalNameOption1Context externalNameOption1() {
			return getRuleContext(ExternalNameOption1Context.class,0);
		}
		public LanguageOption2Context languageOption2() {
			return getRuleContext(LanguageOption2Context.class,0);
		}
		public ParameterStyleOption1Context parameterStyleOption1() {
			return getRuleContext(ParameterStyleOption1Context.class,0);
		}
		public DeterministicOptionContext deterministicOption() {
			return getRuleContext(DeterministicOptionContext.class,0);
		}
		public FencedOptionContext fencedOption() {
			return getRuleContext(FencedOptionContext.class,0);
		}
		public NullInputOption1Context nullInputOption1() {
			return getRuleContext(NullInputOption1Context.class,0);
		}
		public SqlDataOption2Context sqlDataOption2() {
			return getRuleContext(SqlDataOption2Context.class,0);
		}
		public ExternalActionOptionContext externalActionOption() {
			return getRuleContext(ExternalActionOptionContext.class,0);
		}
		public PackagePathOptionContext packagePathOption() {
			return getRuleContext(PackagePathOptionContext.class,0);
		}
		public ScratchpadOptionContext scratchpadOption() {
			return getRuleContext(ScratchpadOptionContext.class,0);
		}
		public FinalCallOptionContext finalCallOption() {
			return getRuleContext(FinalCallOptionContext.class,0);
		}
		public ParallelOption1Context parallelOption1() {
			return getRuleContext(ParallelOption1Context.class,0);
		}
		public DbinfoOptionContext dbinfoOption() {
			return getRuleContext(DbinfoOptionContext.class,0);
		}
		public CardinalityOptionContext cardinalityOption() {
			return getRuleContext(CardinalityOptionContext.class,0);
		}
		public CollectionIdOptionContext collectionIdOption() {
			return getRuleContext(CollectionIdOptionContext.class,0);
		}
		public WlmEnvironmentOption1Context wlmEnvironmentOption1() {
			return getRuleContext(WlmEnvironmentOption1Context.class,0);
		}
		public AsuTimeOptionContext asuTimeOption() {
			return getRuleContext(AsuTimeOptionContext.class,0);
		}
		public StayResidentOptionContext stayResidentOption() {
			return getRuleContext(StayResidentOptionContext.class,0);
		}
		public ProgramTypeOptionContext programTypeOption() {
			return getRuleContext(ProgramTypeOptionContext.class,0);
		}
		public SecurityOptionContext securityOption() {
			return getRuleContext(SecurityOptionContext.class,0);
		}
		public StopAfterFailureOptionContext stopAfterFailureOption() {
			return getRuleContext(StopAfterFailureOptionContext.class,0);
		}
		public RunOptionsOptionContext runOptionsOption() {
			return getRuleContext(RunOptionsOptionContext.class,0);
		}
		public SpecialRegistersOptionContext specialRegistersOption() {
			return getRuleContext(SpecialRegistersOptionContext.class,0);
		}
		public DispatchOptionContext dispatchOption() {
			return getRuleContext(DispatchOptionContext.class,0);
		}
		public SecuredOptionContext securedOption() {
			return getRuleContext(SecuredOptionContext.class,0);
		}
		public SpecificNameOption1Context specificNameOption1() {
			return getRuleContext(SpecificNameOption1Context.class,0);
		}
		public ParameterOption1Context parameterOption1() {
			return getRuleContext(ParameterOption1Context.class,0);
		}
		public TerminalNode RETURNS() { return getToken(DB2zSQLParser.RETURNS, 0); }
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public List<FunctionDataTypeContext> functionDataType() {
			return getRuleContexts(FunctionDataTypeContext.class);
		}
		public FunctionDataTypeContext functionDataType(int i) {
			return getRuleContext(FunctionDataTypeContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode GENERIC() { return getToken(DB2zSQLParser.GENERIC, 0); }
		public List<TerminalNode> AS() { return getTokens(DB2zSQLParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(DB2zSQLParser.AS, i);
		}
		public List<TerminalNode> LOCATOR() { return getTokens(DB2zSQLParser.LOCATOR); }
		public TerminalNode LOCATOR(int i) {
			return getToken(DB2zSQLParser.LOCATOR, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public CreateFunctionStatementExternalTableOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunctionStatementExternalTableOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateFunctionStatementExternalTableOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateFunctionStatementExternalTableOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateFunctionStatementExternalTableOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFunctionStatementExternalTableOptionsContext createFunctionStatementExternalTableOptions() throws RecognitionException {
		CreateFunctionStatementExternalTableOptionsContext _localctx = new CreateFunctionStatementExternalTableOptionsContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_createFunctionStatementExternalTableOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4553);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,450,_ctx) ) {
			case 1:
				{
				{
				setState(4499);
				match(RETURNS);
				setState(4524);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case TABLE:
					{
					{
					setState(4500);
					match(TABLE);
					setState(4501);
					match(LPAREN);
					setState(4502);
					columnName();
					setState(4503);
					functionDataType();
					setState(4506);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(4504);
						match(AS);
						setState(4505);
						match(LOCATOR);
						}
					}

					setState(4517);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(4508);
						match(COMMA);
						setState(4509);
						columnName();
						setState(4510);
						functionDataType();
						setState(4513);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==AS) {
							{
							setState(4511);
							match(AS);
							setState(4512);
							match(LOCATOR);
							}
						}

						}
						}
						setState(4519);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(4520);
					match(RPAREN);
					}
					}
					break;
				case GENERIC:
					{
					{
					setState(4522);
					match(GENERIC);
					setState(4523);
					match(TABLE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case 2:
				{
				setState(4526);
				externalNameOption1();
				}
				break;
			case 3:
				{
				setState(4527);
				languageOption2();
				}
				break;
			case 4:
				{
				setState(4528);
				parameterStyleOption1();
				}
				break;
			case 5:
				{
				setState(4529);
				deterministicOption();
				}
				break;
			case 6:
				{
				setState(4530);
				fencedOption();
				}
				break;
			case 7:
				{
				setState(4531);
				nullInputOption1();
				}
				break;
			case 8:
				{
				setState(4532);
				sqlDataOption2();
				}
				break;
			case 9:
				{
				setState(4533);
				externalActionOption();
				}
				break;
			case 10:
				{
				setState(4534);
				packagePathOption();
				}
				break;
			case 11:
				{
				setState(4535);
				scratchpadOption();
				}
				break;
			case 12:
				{
				setState(4536);
				finalCallOption();
				}
				break;
			case 13:
				{
				setState(4537);
				parallelOption1();
				}
				break;
			case 14:
				{
				setState(4538);
				dbinfoOption();
				}
				break;
			case 15:
				{
				setState(4539);
				cardinalityOption();
				}
				break;
			case 16:
				{
				setState(4540);
				collectionIdOption();
				}
				break;
			case 17:
				{
				setState(4541);
				wlmEnvironmentOption1();
				}
				break;
			case 18:
				{
				setState(4542);
				asuTimeOption();
				}
				break;
			case 19:
				{
				setState(4543);
				stayResidentOption();
				}
				break;
			case 20:
				{
				setState(4544);
				programTypeOption();
				}
				break;
			case 21:
				{
				setState(4545);
				securityOption();
				}
				break;
			case 22:
				{
				setState(4546);
				stopAfterFailureOption();
				}
				break;
			case 23:
				{
				setState(4547);
				runOptionsOption();
				}
				break;
			case 24:
				{
				setState(4548);
				specialRegistersOption();
				}
				break;
			case 25:
				{
				setState(4549);
				dispatchOption();
				}
				break;
			case 26:
				{
				setState(4550);
				securedOption();
				}
				break;
			case 27:
				{
				setState(4551);
				specificNameOption1();
				}
				break;
			case 28:
				{
				setState(4552);
				parameterOption1();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFunctionStatementSourcedOptionsContext extends ParserRuleContext {
		public SpecificNameOption2Context specificNameOption2() {
			return getRuleContext(SpecificNameOption2Context.class,0);
		}
		public ParameterOption2Context parameterOption2() {
			return getRuleContext(ParameterOption2Context.class,0);
		}
		public TerminalNode RETURNS() { return getToken(DB2zSQLParser.RETURNS, 0); }
		public FunctionDataTypeContext functionDataType() {
			return getRuleContext(FunctionDataTypeContext.class,0);
		}
		public TerminalNode SOURCE() { return getToken(DB2zSQLParser.SOURCE, 0); }
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode LOCATOR() { return getToken(DB2zSQLParser.LOCATOR, 0); }
		public FunctionNameContext functionName() {
			return getRuleContext(FunctionNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ParameterTypeContext> parameterType() {
			return getRuleContexts(ParameterTypeContext.class);
		}
		public ParameterTypeContext parameterType(int i) {
			return getRuleContext(ParameterTypeContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public CreateFunctionStatementSourcedOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunctionStatementSourcedOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateFunctionStatementSourcedOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateFunctionStatementSourcedOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateFunctionStatementSourcedOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFunctionStatementSourcedOptionsContext createFunctionStatementSourcedOptions() throws RecognitionException {
		CreateFunctionStatementSourcedOptionsContext _localctx = new CreateFunctionStatementSourcedOptionsContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_createFunctionStatementSourcedOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4579);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RETURNS:
				{
				{
				setState(4555);
				match(RETURNS);
				setState(4556);
				functionDataType();
				setState(4559);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(4557);
					match(AS);
					setState(4558);
					match(LOCATOR);
					}
				}

				}
				}
				break;
			case SPECIFIC:
				{
				setState(4561);
				specificNameOption2();
				}
				break;
			case PARAMETER:
				{
				setState(4562);
				parameterOption2();
				}
				break;
			case SOURCE:
				{
				{
				setState(4563);
				match(SOURCE);
				setState(4577);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,453,_ctx) ) {
				case 1:
					{
					{
					setState(4564);
					functionName();
					setState(4565);
					match(LPAREN);
					setState(4566);
					parameterType();
					setState(4571);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(4567);
						match(COMMA);
						setState(4568);
						parameterType();
						}
						}
						setState(4573);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(4574);
					match(RPAREN);
					}
					}
					break;
				case 2:
					{
					setState(4576);
					specificNameOption2();
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFunctionStatementInlineSqlScalarOptionsContext extends ParserRuleContext {
		public DeterministicOptionContext deterministicOption() {
			return getRuleContext(DeterministicOptionContext.class,0);
		}
		public NullInputOption1Context nullInputOption1() {
			return getRuleContext(NullInputOption1Context.class,0);
		}
		public SqlDataOption1Context sqlDataOption1() {
			return getRuleContext(SqlDataOption1Context.class,0);
		}
		public ExternalActionOptionContext externalActionOption() {
			return getRuleContext(ExternalActionOptionContext.class,0);
		}
		public DispatchOptionContext dispatchOption() {
			return getRuleContext(DispatchOptionContext.class,0);
		}
		public SecuredOptionContext securedOption() {
			return getRuleContext(SecuredOptionContext.class,0);
		}
		public SpecificNameOption1Context specificNameOption1() {
			return getRuleContext(SpecificNameOption1Context.class,0);
		}
		public ParameterOption2Context parameterOption2() {
			return getRuleContext(ParameterOption2Context.class,0);
		}
		public TerminalNode RETURNS() { return getToken(DB2zSQLParser.RETURNS, 0); }
		public FunctionDataTypeContext functionDataType() {
			return getRuleContext(FunctionDataTypeContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(DB2zSQLParser.RETURN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public FullSelectContext fullSelect() {
			return getRuleContext(FullSelectContext.class,0);
		}
		public LanguageOption1Context languageOption1() {
			return getRuleContext(LanguageOption1Context.class,0);
		}
		public CreateFunctionStatementInlineSqlScalarOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunctionStatementInlineSqlScalarOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateFunctionStatementInlineSqlScalarOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateFunctionStatementInlineSqlScalarOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateFunctionStatementInlineSqlScalarOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFunctionStatementInlineSqlScalarOptionsContext createFunctionStatementInlineSqlScalarOptions() throws RecognitionException {
		CreateFunctionStatementInlineSqlScalarOptionsContext _localctx = new CreateFunctionStatementInlineSqlScalarOptionsContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_createFunctionStatementInlineSqlScalarOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4600);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,457,_ctx) ) {
			case 1:
				{
				{
				setState(4581);
				match(RETURNS);
				setState(4582);
				functionDataType();
				setState(4584);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LANGUAGE) {
					{
					setState(4583);
					languageOption1();
					}
				}

				}
				}
				break;
			case 2:
				{
				{
				setState(4586);
				match(RETURN);
				setState(4590);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,456,_ctx) ) {
				case 1:
					{
					setState(4587);
					expression();
					}
					break;
				case 2:
					{
					setState(4588);
					match(NULL);
					}
					break;
				case 3:
					{
					setState(4589);
					fullSelect();
					}
					break;
				}
				}
				}
				break;
			case 3:
				{
				setState(4592);
				deterministicOption();
				}
				break;
			case 4:
				{
				setState(4593);
				nullInputOption1();
				}
				break;
			case 5:
				{
				setState(4594);
				sqlDataOption1();
				}
				break;
			case 6:
				{
				setState(4595);
				externalActionOption();
				}
				break;
			case 7:
				{
				setState(4596);
				dispatchOption();
				}
				break;
			case 8:
				{
				setState(4597);
				securedOption();
				}
				break;
			case 9:
				{
				setState(4598);
				specificNameOption1();
				}
				break;
			case 10:
				{
				setState(4599);
				parameterOption2();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SequenceAliasContext extends ParserRuleContext {
		public AliasNameContext aliasName() {
			return getRuleContext(AliasNameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode SEQUENCE() { return getToken(DB2zSQLParser.SEQUENCE, 0); }
		public SequenceNameContext sequenceName() {
			return getRuleContext(SequenceNameContext.class,0);
		}
		public SequenceAliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequenceAlias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSequenceAlias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSequenceAlias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSequenceAlias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SequenceAliasContext sequenceAlias() throws RecognitionException {
		SequenceAliasContext _localctx = new SequenceAliasContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_sequenceAlias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4602);
			aliasName();
			setState(4603);
			match(FOR);
			setState(4604);
			match(SEQUENCE);
			setState(4605);
			sequenceName();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableAliasContext extends ParserRuleContext {
		public AliasNameContext aliasName() {
			return getRuleContext(AliasNameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public TableAliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableAlias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTableAlias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTableAlias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTableAlias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableAliasContext tableAlias() throws RecognitionException {
		TableAliasContext _localctx = new TableAliasContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_tableAlias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4607);
			aliasName();
			setState(4608);
			match(FOR);
			setState(4610);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,458,_ctx) ) {
			case 1:
				{
				setState(4609);
				match(TABLE);
				}
				break;
			}
			setState(4612);
			tableName();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AuthorizationContext extends ParserRuleContext {
		public TerminalNode USER() { return getToken(DB2zSQLParser.USER, 0); }
		public List<HostVariableContext> hostVariable() {
			return getRuleContexts(HostVariableContext.class);
		}
		public HostVariableContext hostVariable(int i) {
			return getRuleContext(HostVariableContext.class,i);
		}
		public TerminalNode USING() { return getToken(DB2zSQLParser.USING, 0); }
		public AuthorizationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_authorization; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAuthorization(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAuthorization(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAuthorization(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AuthorizationContext authorization() throws RecognitionException {
		AuthorizationContext _localctx = new AuthorizationContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_authorization);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4614);
			match(USER);
			setState(4615);
			hostVariable();
			setState(4616);
			match(USING);
			setState(4617);
			hostVariable();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SearchedDeleteContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(DB2zSQLParser.DELETE, 0); }
		public TerminalNode FROM() { return getToken(DB2zSQLParser.FROM, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(DB2zSQLParser.WHERE, 0); }
		public SearchConditionContext searchCondition() {
			return getRuleContext(SearchConditionContext.class,0);
		}
		public PeriodClauseContext periodClause() {
			return getRuleContext(PeriodClauseContext.class,0);
		}
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public CorrelationNameContext correlationName() {
			return getRuleContext(CorrelationNameContext.class,0);
		}
		public IncludeColumnsContext includeColumns() {
			return getRuleContext(IncludeColumnsContext.class,0);
		}
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public AssignmentClauseContext assignmentClause() {
			return getRuleContext(AssignmentClauseContext.class,0);
		}
		public FetchClauseContext fetchClause() {
			return getRuleContext(FetchClauseContext.class,0);
		}
		public List<IsolationClauseContext> isolationClause() {
			return getRuleContexts(IsolationClauseContext.class);
		}
		public IsolationClauseContext isolationClause(int i) {
			return getRuleContext(IsolationClauseContext.class,i);
		}
		public List<SkipLockedDataClauseContext> skipLockedDataClause() {
			return getRuleContexts(SkipLockedDataClauseContext.class);
		}
		public SkipLockedDataClauseContext skipLockedDataClause(int i) {
			return getRuleContext(SkipLockedDataClauseContext.class,i);
		}
		public QuerynoClauseContext querynoClause() {
			return getRuleContext(QuerynoClauseContext.class,0);
		}
		public SearchedDeleteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searchedDelete; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSearchedDelete(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSearchedDelete(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSearchedDelete(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SearchedDeleteContext searchedDelete() throws RecognitionException {
		SearchedDeleteContext _localctx = new SearchedDeleteContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_searchedDelete);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4619);
			match(DELETE);
			setState(4620);
			match(FROM);
			setState(4621);
			tableName();
			setState(4623);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,459,_ctx) ) {
			case 1:
				{
				setState(4622);
				periodClause();
				}
				break;
			}
			setState(4626);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,460,_ctx) ) {
			case 1:
				{
				setState(4625);
				match(AS);
				}
				break;
			}
			setState(4629);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,461,_ctx) ) {
			case 1:
				{
				setState(4628);
				correlationName();
				}
				break;
			}
			setState(4632);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INCLUDE) {
				{
				setState(4631);
				includeColumns();
				}
			}

			setState(4636);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SET) {
				{
				setState(4634);
				match(SET);
				setState(4635);
				assignmentClause();
				}
			}

			{
			setState(4638);
			match(WHERE);
			setState(4639);
			searchCondition();
			}
			setState(4642);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,464,_ctx) ) {
			case 1:
				{
				setState(4641);
				fetchClause();
				}
				break;
			}
			setState(4648);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,466,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(4646);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case WITH:
						{
						setState(4644);
						isolationClause();
						}
						break;
					case SKIP_:
						{
						setState(4645);
						skipLockedDataClause();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(4650);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,466,_ctx);
			}
			setState(4652);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,467,_ctx) ) {
			case 1:
				{
				setState(4651);
				querynoClause();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PositionedDeleteContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(DB2zSQLParser.DELETE, 0); }
		public TerminalNode FROM() { return getToken(DB2zSQLParser.FROM, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(DB2zSQLParser.WHERE, 0); }
		public TerminalNode CURRENT() { return getToken(DB2zSQLParser.CURRENT, 0); }
		public List<TerminalNode> OF() { return getTokens(DB2zSQLParser.OF); }
		public TerminalNode OF(int i) {
			return getToken(DB2zSQLParser.OF, i);
		}
		public CursorNameContext cursorName() {
			return getRuleContext(CursorNameContext.class,0);
		}
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public CorrelationNameContext correlationName() {
			return getRuleContext(CorrelationNameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode ROW() { return getToken(DB2zSQLParser.ROW, 0); }
		public TerminalNode ROWSET() { return getToken(DB2zSQLParser.ROWSET, 0); }
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public PositionedDeleteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_positionedDelete; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPositionedDelete(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPositionedDelete(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPositionedDelete(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PositionedDeleteContext positionedDelete() throws RecognitionException {
		PositionedDeleteContext _localctx = new PositionedDeleteContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_positionedDelete);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4654);
			match(DELETE);
			setState(4655);
			match(FROM);
			setState(4656);
			tableName();
			setState(4658);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,468,_ctx) ) {
			case 1:
				{
				setState(4657);
				match(AS);
				}
				break;
			}
			setState(4661);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,469,_ctx) ) {
			case 1:
				{
				setState(4660);
				correlationName();
				}
				break;
			}
			setState(4663);
			match(WHERE);
			setState(4664);
			match(CURRENT);
			setState(4665);
			match(OF);
			setState(4666);
			cursorName();
			setState(4675);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(4667);
				match(FOR);
				setState(4668);
				match(ROW);
				setState(4671);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case COLON:
					{
					setState(4669);
					hostVariable();
					}
					break;
				case INTEGERLITERAL:
					{
					setState(4670);
					match(INTEGERLITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4673);
				match(OF);
				setState(4674);
				match(ROWSET);
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SearchedUpdateContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(DB2zSQLParser.UPDATE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public AssignmentClauseContext assignmentClause() {
			return getRuleContext(AssignmentClauseContext.class,0);
		}
		public PeriodClauseContext periodClause() {
			return getRuleContext(PeriodClauseContext.class,0);
		}
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public CorrelationNameContext correlationName() {
			return getRuleContext(CorrelationNameContext.class,0);
		}
		public IncludeColumnsContext includeColumns() {
			return getRuleContext(IncludeColumnsContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(DB2zSQLParser.WHERE, 0); }
		public SearchConditionContext searchCondition() {
			return getRuleContext(SearchConditionContext.class,0);
		}
		public List<IsolationClauseContext> isolationClause() {
			return getRuleContexts(IsolationClauseContext.class);
		}
		public IsolationClauseContext isolationClause(int i) {
			return getRuleContext(IsolationClauseContext.class,i);
		}
		public List<SkipLockedDataClauseContext> skipLockedDataClause() {
			return getRuleContexts(SkipLockedDataClauseContext.class);
		}
		public SkipLockedDataClauseContext skipLockedDataClause(int i) {
			return getRuleContext(SkipLockedDataClauseContext.class,i);
		}
		public QuerynoClauseContext querynoClause() {
			return getRuleContext(QuerynoClauseContext.class,0);
		}
		public SearchedUpdateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searchedUpdate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSearchedUpdate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSearchedUpdate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSearchedUpdate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SearchedUpdateContext searchedUpdate() throws RecognitionException {
		SearchedUpdateContext _localctx = new SearchedUpdateContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_searchedUpdate);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4677);
			match(UPDATE);
			setState(4678);
			tableName();
			setState(4680);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,472,_ctx) ) {
			case 1:
				{
				setState(4679);
				periodClause();
				}
				break;
			}
			setState(4683);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,473,_ctx) ) {
			case 1:
				{
				setState(4682);
				match(AS);
				}
				break;
			}
			setState(4686);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,474,_ctx) ) {
			case 1:
				{
				setState(4685);
				correlationName();
				}
				break;
			}
			setState(4689);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INCLUDE) {
				{
				setState(4688);
				includeColumns();
				}
			}

			setState(4691);
			match(SET);
			setState(4692);
			assignmentClause();
			setState(4695);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,476,_ctx) ) {
			case 1:
				{
				setState(4693);
				match(WHERE);
				setState(4694);
				searchCondition();
				}
				break;
			}
			setState(4701);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,478,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(4699);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case WITH:
						{
						setState(4697);
						isolationClause();
						}
						break;
					case SKIP_:
						{
						setState(4698);
						skipLockedDataClause();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(4703);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,478,_ctx);
			}
			setState(4705);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,479,_ctx) ) {
			case 1:
				{
				setState(4704);
				querynoClause();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PositionedUpdateContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(DB2zSQLParser.UPDATE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public AssignmentClauseContext assignmentClause() {
			return getRuleContext(AssignmentClauseContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(DB2zSQLParser.WHERE, 0); }
		public TerminalNode CURRENT() { return getToken(DB2zSQLParser.CURRENT, 0); }
		public List<TerminalNode> OF() { return getTokens(DB2zSQLParser.OF); }
		public TerminalNode OF(int i) {
			return getToken(DB2zSQLParser.OF, i);
		}
		public CursorNameContext cursorName() {
			return getRuleContext(CursorNameContext.class,0);
		}
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public CorrelationNameContext correlationName() {
			return getRuleContext(CorrelationNameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode ROW() { return getToken(DB2zSQLParser.ROW, 0); }
		public TerminalNode ROWSET() { return getToken(DB2zSQLParser.ROWSET, 0); }
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public PositionedUpdateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_positionedUpdate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPositionedUpdate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPositionedUpdate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPositionedUpdate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PositionedUpdateContext positionedUpdate() throws RecognitionException {
		PositionedUpdateContext _localctx = new PositionedUpdateContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_positionedUpdate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4707);
			match(UPDATE);
			setState(4708);
			tableName();
			setState(4710);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,480,_ctx) ) {
			case 1:
				{
				setState(4709);
				match(AS);
				}
				break;
			}
			setState(4713);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,481,_ctx) ) {
			case 1:
				{
				setState(4712);
				correlationName();
				}
				break;
			}
			setState(4715);
			match(SET);
			setState(4716);
			assignmentClause();
			setState(4717);
			match(WHERE);
			setState(4718);
			match(CURRENT);
			setState(4719);
			match(OF);
			setState(4720);
			cursorName();
			setState(4729);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(4721);
				match(FOR);
				setState(4722);
				match(ROW);
				setState(4725);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case COLON:
					{
					setState(4723);
					hostVariable();
					}
					break;
				case INTEGERLITERAL:
					{
					setState(4724);
					match(INTEGERLITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4727);
				match(OF);
				setState(4728);
				match(ROWSET);
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SourceValuesContext extends ParserRuleContext {
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public TerminalNode VALUES() { return getToken(DB2zSQLParser.VALUES, 0); }
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public CorrelationNameContext correlationName() {
			return getRuleContext(CorrelationNameContext.class,0);
		}
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public ValuesSingleRowContext valuesSingleRow() {
			return getRuleContext(ValuesSingleRowContext.class,0);
		}
		public ValuesMultipleRowContext valuesMultipleRow() {
			return getRuleContext(ValuesMultipleRowContext.class,0);
		}
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public SourceValuesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sourceValues; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSourceValues(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSourceValues(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSourceValues(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SourceValuesContext sourceValues() throws RecognitionException {
		SourceValuesContext _localctx = new SourceValuesContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_sourceValues);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4731);
			match(LPAREN);
			setState(4732);
			match(VALUES);
			setState(4735);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,484,_ctx) ) {
			case 1:
				{
				setState(4733);
				valuesSingleRow();
				}
				break;
			case 2:
				{
				setState(4734);
				valuesMultipleRow();
				}
				break;
			}
			setState(4737);
			match(RPAREN);
			setState(4739);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,485,_ctx) ) {
			case 1:
				{
				setState(4738);
				match(AS);
				}
				break;
			}
			setState(4741);
			correlationName();
			setState(4742);
			match(LPAREN);
			setState(4743);
			columnName();
			setState(4748);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4744);
				match(COMMA);
				setState(4745);
				columnName();
				}
				}
				setState(4750);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4751);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValuesSingleRowContext extends ParserRuleContext {
		public List<ValuesList3Context> valuesList3() {
			return getRuleContexts(ValuesList3Context.class);
		}
		public ValuesList3Context valuesList3(int i) {
			return getRuleContext(ValuesList3Context.class,i);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public ValuesSingleRowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valuesSingleRow; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterValuesSingleRow(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitValuesSingleRow(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitValuesSingleRow(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValuesSingleRowContext valuesSingleRow() throws RecognitionException {
		ValuesSingleRowContext _localctx = new ValuesSingleRowContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_valuesSingleRow);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4765);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,488,_ctx) ) {
			case 1:
				{
				setState(4753);
				valuesList3();
				}
				break;
			case 2:
				{
				{
				setState(4754);
				match(LPAREN);
				setState(4755);
				valuesList3();
				setState(4760);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4756);
					match(COMMA);
					setState(4757);
					valuesList3();
					}
					}
					setState(4762);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4763);
				match(RPAREN);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValuesMultipleRowContext extends ParserRuleContext {
		public List<ValuesList4Context> valuesList4() {
			return getRuleContexts(ValuesList4Context.class);
		}
		public ValuesList4Context valuesList4(int i) {
			return getRuleContext(ValuesList4Context.class,i);
		}
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode ROWS() { return getToken(DB2zSQLParser.ROWS, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public ValuesMultipleRowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valuesMultipleRow; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterValuesMultipleRow(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitValuesMultipleRow(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitValuesMultipleRow(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValuesMultipleRowContext valuesMultipleRow() throws RecognitionException {
		ValuesMultipleRowContext _localctx = new ValuesMultipleRowContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_valuesMultipleRow);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4786);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,491,_ctx) ) {
			case 1:
				{
				setState(4767);
				valuesList4();
				}
				break;
			case 2:
				{
				{
				setState(4768);
				match(LPAREN);
				setState(4769);
				valuesList4();
				setState(4774);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4770);
					match(COMMA);
					setState(4771);
					valuesList4();
					}
					}
					setState(4776);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4777);
				match(RPAREN);
				}
				setState(4779);
				match(FOR);
				setState(4782);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case COLON:
					{
					setState(4780);
					hostVariable();
					}
					break;
				case INTEGERLITERAL:
					{
					setState(4781);
					match(INTEGERLITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4784);
				match(ROWS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MatchingConditionContext extends ParserRuleContext {
		public TerminalNode MATCHED() { return getToken(DB2zSQLParser.MATCHED, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TerminalNode AND() { return getToken(DB2zSQLParser.AND, 0); }
		public SearchConditionContext searchCondition() {
			return getRuleContext(SearchConditionContext.class,0);
		}
		public MatchingConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_matchingCondition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterMatchingCondition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitMatchingCondition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitMatchingCondition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MatchingConditionContext matchingCondition() throws RecognitionException {
		MatchingConditionContext _localctx = new MatchingConditionContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_matchingCondition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4789);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(4788);
				match(NOT);
				}
			}

			setState(4791);
			match(MATCHED);
			setState(4794);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(4792);
				match(AND);
				setState(4793);
				searchCondition();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ModificationOperationContext extends ParserRuleContext {
		public UpdateOperationContext updateOperation() {
			return getRuleContext(UpdateOperationContext.class,0);
		}
		public DeleteOperationContext deleteOperation() {
			return getRuleContext(DeleteOperationContext.class,0);
		}
		public InsertOperationContext insertOperation() {
			return getRuleContext(InsertOperationContext.class,0);
		}
		public ModificationOperationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modificationOperation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterModificationOperation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitModificationOperation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitModificationOperation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ModificationOperationContext modificationOperation() throws RecognitionException {
		ModificationOperationContext _localctx = new ModificationOperationContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_modificationOperation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4799);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UPDATE:
				{
				setState(4796);
				updateOperation();
				}
				break;
			case DELETE:
				{
				setState(4797);
				deleteOperation();
				}
				break;
			case INSERT:
				{
				setState(4798);
				insertOperation();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetAssignmentClauseContext extends ParserRuleContext {
		public ArrayElementSpecificationContext arrayElementSpecification() {
			return getRuleContext(ArrayElementSpecificationContext.class,0);
		}
		public List<TerminalNode> EQ() { return getTokens(DB2zSQLParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(DB2zSQLParser.EQ, i);
		}
		public List<ValuesList1Context> valuesList1() {
			return getRuleContexts(ValuesList1Context.class);
		}
		public ValuesList1Context valuesList1(int i) {
			return getRuleContext(ValuesList1Context.class,i);
		}
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public List<VariableNameContext> variableName() {
			return getRuleContexts(VariableNameContext.class);
		}
		public VariableNameContext variableName(int i) {
			return getRuleContext(VariableNameContext.class,i);
		}
		public List<HostVariableContext> hostVariable() {
			return getRuleContexts(HostVariableContext.class);
		}
		public HostVariableContext hostVariable(int i) {
			return getRuleContext(HostVariableContext.class,i);
		}
		public SubSelectContext subSelect() {
			return getRuleContext(SubSelectContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public FullSelectContext fullSelect() {
			return getRuleContext(FullSelectContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(DB2zSQLParser.VALUES, 0); }
		public SetAssignmentClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setAssignmentClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSetAssignmentClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSetAssignmentClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSetAssignmentClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetAssignmentClauseContext setAssignmentClause() throws RecognitionException {
		SetAssignmentClauseContext _localctx = new SetAssignmentClauseContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_setAssignmentClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4874);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,506,_ctx) ) {
			case 1:
				{
				{
				setState(4801);
				arrayElementSpecification();
				setState(4802);
				match(EQ);
				setState(4805);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,495,_ctx) ) {
				case 1:
					{
					setState(4803);
					expression();
					}
					break;
				case 2:
					{
					setState(4804);
					match(NULL);
					}
					break;
				}
				}
				}
				break;
			case 2:
				{
				{
				setState(4809);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case INSTEAD:
				case NEW:
				case NEW_TABLE:
				case OLD_TABLE:
				case REFERENCING:
				case BASED:
				case UPON:
				case ADD:
				case AFTER:
				case ALL:
				case ALLOCATE:
				case ALLOW:
				case ALTER:
				case ALTERAND:
				case ANY:
				case ARRAY:
				case ARRAY_EXISTS:
				case AS:
				case ASENSITIVE:
				case ASSOCIATE:
				case ASUTIME:
				case AT:
				case AUDIT:
				case AUX:
				case AUXILIARY:
				case BEFORE:
				case BEGIN:
				case BETWEEN:
				case BUFFERPOOL:
				case BUFFERPOOLS:
				case BY:
				case CALL:
				case CAPTURE:
				case CASCADED:
				case CASE:
				case CAST:
				case CCSID:
				case CHAR:
				case CHARACTER:
				case CHECK:
				case CLONE:
				case CLOSE:
				case CLUSTER:
				case COLLECTION:
				case COLLID:
				case COLUMN:
				case COMMENT:
				case COMMIT:
				case CONCAT:
				case CONDITION:
				case CONNECT:
				case CONNECTION:
				case CONSTRAINT:
				case CONTAINS:
				case CONTENT:
				case CONTINUE:
				case CREATE:
				case CUBE:
				case CURRENT:
				case CURRENT_LC_CTYPE:
				case CURRVAL:
				case CURSOR:
				case DATA:
				case DATABASE:
				case DAY:
				case DAYS:
				case DBINFO:
				case DECLARE:
				case DEFAULT:
				case DELETE:
				case DESCRIPTOR:
				case DETERMINISTIC:
				case DISABLE:
				case DISALLOW:
				case DISTINCT:
				case DO:
				case DOCUMENT:
				case DOUBLE:
				case DROP:
				case DSSIZE:
				case DYNAMIC:
				case EDITPROC:
				case ELSE:
				case ELSEIF:
				case ENCODING:
				case ENCRYPTION:
				case END:
				case END_EXEC:
				case ENDING:
				case ERASE:
				case ESCAPE:
				case EXCEPT:
				case EXCEPTION:
				case EXEC_SQL:
				case EXECUTE:
				case EXISTS:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case FENCED:
				case FETCH:
				case FIELDPROC:
				case FINAL:
				case FIRST:
				case FOR:
				case FREE:
				case FROM:
				case FULL:
				case FUNCTION:
				case GENERATED:
				case GET:
				case GLOBAL:
				case GO:
				case GOTO:
				case GRANT:
				case GROUP:
				case HANDLER:
				case HAVING:
				case HOLD:
				case HOUR:
				case HOURS:
				case IF:
				case IMMEDIATE:
				case IN:
				case INCLUSIVE:
				case INDEX:
				case INDEXBP:
				case INHERIT:
				case INNER:
				case INOUT:
				case INSENSITIVE:
				case INSERT:
				case INTERSECT:
				case INTO:
				case IS:
				case ISOBID:
				case ITERATE:
				case JAR:
				case JOIN:
				case KEEP:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LAST:
				case LC_CTYPE:
				case LEAVE:
				case LEFT:
				case LIKE:
				case LIMIT:
				case LOCAL:
				case LOCALE:
				case LOCATOR:
				case LOCATORS:
				case LOCK:
				case LOCKMAX:
				case LOCKSIZE:
				case LONG:
				case LOOP:
				case MAINTAINED:
				case MATERIALIZED:
				case MICROSECOND:
				case MICROSECONDS:
				case MODIFIES:
				case MONTH:
				case MONTHS:
				case NEXT:
				case NEXTVAL:
				case NO:
				case NONE:
				case NOT:
				case NULL:
				case NULLS:
				case NUMPARTS:
				case OBID:
				case OF:
				case OFFSET:
				case OLD:
				case ON:
				case OPEN:
				case OPTIMIZATION:
				case OPTIMIZE:
				case OR:
				case ORDER:
				case ORGANIZATION:
				case OUT:
				case OUTER:
				case PACKAGE:
				case PADDED:
				case PARAMETER:
				case PART:
				case PARTITION:
				case PARTITIONED:
				case PARTITIONING:
				case PATH:
				case PERIOD:
				case PIECESIZE:
				case PLAN:
				case PRECISION:
				case PREPARE:
				case PREVVAL:
				case PRIOR:
				case PRIQTY:
				case PRIVILEGES:
				case PROCEDURE:
				case PROGRAM:
				case PSID:
				case PUBLIC:
				case QUERY:
				case QUERYNO:
				case READS:
				case REFERENCES:
				case REFRESH:
				case RELEASE:
				case RENAME:
				case REPEAT:
				case RESIGNAL:
				case RESTRICT:
				case RESULT:
				case RESULT_SET_LOCATOR:
				case RETURN:
				case RETURNS:
				case REVOKE:
				case RIGHT:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUND_CEILING:
				case ROUND_DOWN:
				case ROUND_FLOOR:
				case ROUND_HALF_DOWN:
				case ROUND_HALF_EVEN:
				case ROUND_HALF_UP:
				case ROUND_UP:
				case ROW:
				case ROWSET:
				case RUN:
				case SAVEPOINT:
				case SCHEMA:
				case SCRATCHPAD:
				case SECOND:
				case SECONDS:
				case SECQTY:
				case SECURITY:
				case SELECT:
				case SENSITIVE:
				case SEQUENCE:
				case SET:
				case SIGNAL:
				case SIMPLE:
				case SOME:
				case SOURCE:
				case SPECIFIC:
				case STANDARD:
				case STATEMENT:
				case STATIC:
				case STAY:
				case STOGROUP:
				case STORES:
				case STYLE:
				case SUMMARY:
				case SYNONYM:
				case SYSDATE:
				case SYSTEM:
				case SYSTIMESTAMP:
				case TABLE:
				case TABLESPACE:
				case THEN:
				case TO:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNDO:
				case UNION:
				case UNIQUE:
				case UNTIL:
				case UPDATE:
				case USING:
				case VALIDPROC:
				case VALUE:
				case VALUES:
				case VARIABLE:
				case VARIANT:
				case VCAT:
				case VERSIONING:
				case VIEW:
				case VOLATILE:
				case VOLUMES:
				case WHEN:
				case WHENEVER:
				case WHERE:
				case WHILE:
				case WITH:
				case WLM:
				case XMLCAST:
				case XMLEXISTS:
				case XMLNAMESPACES:
				case YEAR:
				case YEARS:
				case ZONE:
				case AND:
				case ARRAY_AGG:
				case ASC:
				case AVG:
				case BIT:
				case CHANGE:
				case CODEUNITS16:
				case CODEUNITS32:
				case CORR:
				case CORRELATION:
				case COUNT:
				case COUNT_BIG:
				case COVAR:
				case COVARIANCE:
				case COVARIANCE_SAMP:
				case COVAR_POP:
				case COVAR_SAMP:
				case CS:
				case CUME_DIST:
				case DENSE_RANK:
				case DESC:
				case EBCDIC:
				case EXCLUSIVE:
				case FIRST_VALUE:
				case FOLLOWING:
				case GROUPING:
				case IGNORE:
				case INDICATOR:
				case INPUT:
				case ISNULL:
				case LAG:
				case LARGE:
				case LAST_VALUE:
				case LEAD:
				case LISTAGG:
				case LOCKED:
				case LOCKS:
				case MEDIAN:
				case MINUTES:
				case MIXED:
				case NOTNULL:
				case NTH_VALUE:
				case NTILE:
				case NUMERIC:
				case OBJECT:
				case OCTETS:
				case ONLY:
				case OVER:
				case PASSING:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case PERCENT_RANK:
				case PRECEDING:
				case PREVIOUS:
				case RANGE:
				case RANK:
				case RATIO_TO_REPORT:
				case READ:
				case REF:
				case REGR_AVGX:
				case REGR_AVGY:
				case REGR_COUNT:
				case REGR_ICPT:
				case REGR_INTERCEPT:
				case REGR_R2:
				case REGR_SLOPE:
				case REGR_SXX:
				case REGR_SXY:
				case REGR_SYY:
				case RESPECT:
				case ROW_NUMBER:
				case ROWS:
				case RR:
				case RS:
				case SBCS:
				case SELECTIVITY:
				case SETS:
				case SHARE:
				case SKIP_:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case TOKEN:
				case UNBOUNDED:
				case UNPACK:
				case UR:
				case USE:
				case VAR:
				case VARIANCE:
				case VARIANCE_SAMP:
				case VAR_POP:
				case VAR_SAMP:
				case VARYING:
				case WITHOUT:
				case XML:
				case XMLAGG:
				case COLUMNS:
				case SQLID:
				case ORDINALITY:
				case SYSTEM_TIME:
				case BUSINESS_TIME:
				case MULTIPLIER:
				case UNNEST:
				case CROSS:
				case CALLER:
				case CLIENT:
				case POSITIONING:
				case SCROLL:
				case ACTION:
				case ASSEMBLE:
				case C_:
				case CALLED:
				case COBOL:
				case DB2:
				case DEFINER:
				case DISPATCH:
				case ENVIRONMENT:
				case FAILURE:
				case FAILURES:
				case JAVA:
				case MAIN:
				case NAME:
				case OPTIONS:
				case PARALLEL:
				case PLI:
				case REGISTERS:
				case RESIDENT:
				case SECURED:
				case SPECIAL:
				case SQL:
				case STOP:
				case SUB:
				case YES:
				case APPLICATION:
				case CHANGED:
				case COMPATIBILITY:
				case COMPRESS:
				case COPY:
				case FREEPAGE:
				case GBPCACHE:
				case INCLUDE:
				case MAXVALUE:
				case MINVALUE:
				case PCTFREE:
				case REGENERATE:
				case MASK:
				case ENABLE:
				case PERMISSION:
				case ATOMIC:
				case SQLEXCEPTION:
				case MERGE:
				case MATCHED:
				case SQLSTATE:
				case MESSAGE_TEXT:
				case OVERRIDING:
				case PORTION:
				case DB2SQL:
				case DEBUG:
				case GENERAL:
				case MODE_:
				case REXX:
				case CACHE:
				case CYCLE:
				case INCREMENT:
				case RESTART:
				case DATACLAS:
				case MGMTCLAS:
				case REMOVE:
				case STORCLAS:
				case ACCESS:
				case ACTIVATE:
				case ALWAYS:
				case APPEND:
				case ARCHIVE:
				case BUSINESS:
				case CASCADE:
				case CHANGES:
				case CONTROL:
				case DEACTIVATE:
				case DEFERRED:
				case EACH:
				case ENFORCED:
				case EXTRA:
				case FOREIGN:
				case HIDDEN_:
				case HISTORY:
				case ID:
				case IDENTITY:
				case IMPLICITLY:
				case INITIALLY:
				case INLINE:
				case OPERATION:
				case ORGANIZE:
				case OVERLAPS:
				case PACKAGE_NAME:
				case PACKAGE_SCHEMA:
				case PACKAGE_VERSION:
				case PRIMARY:
				case RESET:
				case ROTATE:
				case START:
				case SYSIBM:
				case TRANSACTION:
				case XMLSCHEMA:
				case ELEMENT:
				case URL:
				case NAMESPACE:
				case LOCATION:
				case SYSXSR:
				case ALGORITHM:
				case FIXEDLENGTH:
				case HUFFMAN:
				case LOB:
				case LOG:
				case LOGGED:
				case MAXPARTITIONS:
				case MAXROWS:
				case MEMBER:
				case MOVE:
				case PAGE:
				case PAGENUM:
				case PENDING:
				case RELATIVE:
				case SEGSIZE:
				case TRACKMOD:
				case ADDRESS:
				case ATTRIBUTES:
				case AUTHENTICATION:
				case AUTHID:
				case CONTEXT:
				case JOBNAME:
				case OWNER:
				case PROFILE:
				case QUALIFIER:
				case SERVAUTH:
				case TRUSTED:
				case SECTION:
				case ACTIVE:
				case VERSION:
				case ALIAS:
				case WORK:
				case WORKFILE:
				case SYSDEFLT:
				case NULTERM:
				case STRUCTURE:
				case GENERIC:
				case TEMPORARY:
				case DEFER:
				case DEFINE:
				case EXCLUDE:
				case GENERATE:
				case KEYS:
				case XMLPATTERN:
				case SIZE:
				case EVERY:
				case ABSOLUTE:
				case ACCELERATOR:
				case EXCLUDING:
				case INCLUDING:
				case DEFAULTS:
				case MODIFIERS:
				case OPTION:
				case PRESERVE:
				case BOTH:
				case DESCRIBE:
				case LABELS:
				case NAMES:
				case OUTPUT:
				case EXCHANGE:
				case STABILIZED:
				case STMTCACHE:
				case STMTID:
				case STMTTOKEN:
				case STARTING:
				case CATALOG_NAME:
				case CONDITION_NUMBER:
				case CURSOR_NAME:
				case DB2_AUTHENTICATION_TYPE:
				case DB2_AUTHORIZATION_ID:
				case DB2_CONNECTION_STATE:
				case DB2_CONNECTION_STATUS:
				case DB2_ENCRYPTION_TYPE:
				case DB2_ERROR_CODE1:
				case DB2_ERROR_CODE2:
				case DB2_ERROR_CODE3:
				case DB2_ERROR_CODE4:
				case DB2_GET_DIAGNOSTICS_DIAGNOSTICS:
				case DB2_INTERNAL_ERROR_POINTER:
				case DB2_LAST_ROW:
				case DB2_LINE_NUMBER:
				case DB2_MESSAGE_ID:
				case DB2_MODULE_DETECTING_ERROR:
				case DB2_NUMBER_PARAMETER_MARKERS:
				case DB2_NUMBER_RESULT_SETS:
				case DB2_NUMBER_ROWS:
				case DB2_ORDINAL_TOKEN_:
				case DB2_PRODUCT_ID:
				case DB2_REASON_CODE:
				case DB2_RETURNED_SQLCODE:
				case DB2_RETURN_STATUS:
				case DB2_ROW_NUMBER:
				case DB2_SERVER_CLASS_NAME:
				case DB2_SQL_ATTR_CURSOR_HOLD:
				case DB2_SQL_ATTR_CURSOR_ROWSET:
				case DB2_SQL_ATTR_CURSOR_SCROLLABLE:
				case DB2_SQL_ATTR_CURSOR_SENSITIVITY:
				case DB2_SQL_ATTR_CURSOR_TYPE:
				case DB2_SQLERRD1:
				case DB2_SQLERRD2:
				case DB2_SQLERRD3:
				case DB2_SQLERRD4:
				case DB2_SQLERRD5:
				case DB2_SQLERRD6:
				case DB2_SQLERRD_SET:
				case DB2_SQL_NESTING_LEVEL:
				case DB2_TOKEN_COUNT:
				case DIAGNOSTICS:
				case MORE_:
				case NUMBER:
				case RETURNED_SQLSTATE:
				case ROW_COUNT:
				case SERVER_NAME:
				case STACKED:
				case CREATETAB:
				case CREATETS:
				case DBADM:
				case DBCTRL:
				case DBMAINT:
				case DISPLAYDB:
				case IMAGCOPY:
				case LOAD:
				case PACKADM:
				case RECOVERDB:
				case REORG:
				case REPAIR:
				case STARTDB:
				case STATS:
				case STOPDB:
				case BIND:
				case ALTERIN:
				case CREATEIN:
				case DROPIN:
				case USAGE:
				case ACCESSCTRL:
				case BINDADD:
				case BINDAGENT:
				case BSDS:
				case CREATEALIAS:
				case CREATEDBA:
				case CREATEDBC:
				case CREATE_SECURE_OBJECT:
				case CREATESG:
				case CREATETMTAB:
				case DATAACCESS:
				case DEBUGSESSION:
				case DISPLAY:
				case MONITOR1:
				case MONITOR2:
				case RECOVER:
				case SQLADM:
				case STOPALL:
				case STOSPACE:
				case SYSADM:
				case SYSCTRL:
				case SYSOPR:
				case TRACE:
				case UNLOAD:
				case WRITE:
				case ABS:
				case ABSVAL:
				case ACOS:
				case ADD_DAYS:
				case ADD_MONTHS:
				case ARRAY_DELETE:
				case ARRAY_FIRST:
				case ARRAY_LAST:
				case ARRAY_NEXT:
				case ARRAY_PRIOR:
				case ARRAY_TRIM:
				case ASCII:
				case ASCII_CHR:
				case ASCIISTR:
				case ASCII_STR:
				case ASIN:
				case ATAN:
				case ATAN2:
				case ATANH:
				case BIGINT:
				case BINARY:
				case BITAND:
				case BITANDNOT:
				case BITNOT:
				case BITOR:
				case BITXOR:
				case BLOB:
				case BTRIM:
				case CARDINALITY:
				case CCSID_ENCODING:
				case CEIL:
				case CEILING:
				case CHAR9:
				case CHARACTER_LENGTH:
				case CHAR_LENGTH:
				case CHR:
				case CLOB:
				case COALESCE:
				case COLLATION_KEY:
				case COMPARE_DECFLOAT:
				case COS:
				case COSH:
				case DATE:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFWEEK_ISO:
				case DAYOFYEAR:
				case DAYS_BETWEEN:
				case DBCLOB:
				case DEC:
				case DECFLOAT:
				case DECFLOAT_FORMAT:
				case DECFLOAT_SORTKEY:
				case DECIMAL:
				case DECODE:
				case DECRYPT_BINARY:
				case DECRYPT_BIT:
				case DECRYPT_CHAR:
				case DECRYPT_DATAKEY_BIGINT:
				case DECRYPT_DATAKEY_BIT:
				case DECRYPT_DATAKEY_CLOB:
				case DECRYPT_DATAKEY_DBCLOB:
				case DECRYPT_DATAKEY_DECIMAL:
				case DECRYPT_DATAKEY_INTEGER:
				case DECRYPT_DATAKEY_VARCHAR:
				case DECRYPT_DATAKEY_VARGRAPHIC:
				case DECRYPT_DB:
				case DEGREES:
				case DIFFERENCE:
				case DIGITS:
				case DOUBLE_PRECISION:
				case DSN_XMLVALIDATE:
				case EBCDIC_CHR:
				case EBCDIC_STR:
				case ENCRYPT_DATAKEY:
				case ENCRYPT_TDES:
				case EXP:
				case EXTRACT:
				case FLOAT:
				case FLOOR:
				case GENERATE_UNIQUE:
				case GENERATE_UNIQUE_BINARY:
				case GETHINT:
				case GETVARIABLE:
				case GRAPHIC:
				case GREATEST:
				case HASH:
				case HASH_CRC32:
				case HASH_MD5:
				case HASH_SHA1:
				case HASH_SHA256:
				case HEX:
				case IDENTITY_VAL_LOCAL:
				case IFNULL:
				case INSTR:
				case INT:
				case INTEGER:
				case JULIAN_DAY:
				case LAST_DAY:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LN:
				case LOCATE:
				case LOCATE_IN_STRING:
				case LOG10:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAX:
				case MAX_CARDINALITY:
				case MIDNIGHT_SECONDS:
				case MIN:
				case MINUTE:
				case MOD:
				case MONTHS_BETWEEN:
				case MQREAD:
				case MQREADCLOB:
				case MQRECEIVE:
				case MQRECEIVECLOB:
				case MQSEND:
				case MULTIPLY_ALT:
				case NEXT_DAY:
				case NEXT_MONTH:
				case NORMALIZE_DECFLOAT:
				case NORMALIZE_STRING:
				case NULLIF:
				case NVL:
				case OVERLAY:
				case PACK:
				case POSITION:
				case POSSTR:
				case POW:
				case POWER:
				case QUANTIZE:
				case QUARTER:
				case RADIANS:
				case RAISE_ERROR:
				case RAND:
				case RANDOM:
				case REAL:
				case REGEXP_COUNT:
				case REGEXP_INSTR:
				case REGEXP_LIKE:
				case REGEXP_REPLACE:
				case REGEXP_SUBSTR:
				case REPLACE:
				case RID:
				case ROUND:
				case ROUND_TIMESTAMP:
				case ROWID:
				case RPAD:
				case RTRIM:
				case SCORE:
				case SIGN:
				case SIN:
				case SINH:
				case SMALLINT:
				case SOAPHTTPC:
				case SOAPHTTPNC:
				case SOAPHTTPNV:
				case SOAPHTTPV:
				case SOUNDEX:
				case SPACE:
				case SQRT:
				case STRIP:
				case STRLEFT:
				case STRPOS:
				case STRRIGHT:
				case SUBSTR:
				case SUBSTRING:
				case TAN:
				case TANH:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIMESTAMP_FORMAT:
				case TIMESTAMP_ISO:
				case TIMESTAMP_TZ:
				case TO_CHAR:
				case TO_CLOB:
				case TO_DATE:
				case TO_NUMBER:
				case TOTALORDER:
				case TO_TIMESTAMP:
				case TRANSLATE:
				case TRIM:
				case TRIM_ARRAY:
				case TRUNC:
				case TRUNC_TIMESTAMP:
				case UCASE:
				case UNICODE:
				case UNICODE_STR:
				case UNISTR:
				case UPPER:
				case VARBINARY:
				case VARCHAR:
				case VARCHAR9:
				case VARCHAR_BIT_FORMAT:
				case VARCHAR_FORMAT:
				case VARGRAPHIC:
				case VERIFY_GROUP_FOR_USER:
				case VERIFY_ROLE_FOR_USER:
				case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
				case WEEK:
				case WEEK_ISO:
				case WRAP:
				case XMLATTRIBUTES:
				case XMLCOMMENT:
				case XMLCONCAT:
				case XMLDOCUMENT:
				case XMLELEMENT:
				case XMLFOREST:
				case XMLMODIFY:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLSERIALIZE:
				case XMLTEXT:
				case XMLXSROBJECTID:
				case XSLTRANSFORM:
				case CURRENT_ACCELERATOR:
				case CURRENT_APPLICATION_COMPATIBILITY:
				case CURRENT_APPLICATION_ENCODING_SCHEME:
				case CURRENT_CLIENT_ACCTNG:
				case CURRENT_CLIENT_APPLNAME:
				case CURRENT_CLIENT_CORR_TOKEN:
				case CURRENT_CLIENT_USERID:
				case CURRENT_CLIENT_WRKSTNNAME:
				case CURRENT_DATE:
				case CURRENT_DEBUG_MODE:
				case CURRENT_DECFLOAT_ROUNDING_MODE:
				case CURRENT_DEGREE:
				case CURRENT_EXPLAIN_MODE:
				case CURRENT_GET_ACCEL_ARCHIVE:
				case CURRENT_LOCALE_LC_CTYPE:
				case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
				case CURRENT_MEMBER:
				case CURRENT_OPTIMIZATION_HINT:
				case CURRENT_PACKAGE_PATH:
				case CURRENT_PACKAGESET:
				case CURRENT_PATH:
				case CURRENT_PRECISION:
				case CURRENT_QUERY_ACCELERATION:
				case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
				case CURRENT_REFRESH_AGE:
				case CURRENT_ROUTINE_VERSION:
				case CURRENT_RULES:
				case CURRENT_SCHEMA:
				case CURRENT_SERVER:
				case CURRENT_SQLID:
				case CURRENT_TEMPORAL_BUSINESS_TIME:
				case CURRENT_TEMPORAL_SYSTEM_TIME:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case CURRENT_TIME_ZONE:
				case ENCRYPTION_PASSWORD:
				case SESSION_TIME_ZONE:
				case SESSION_USER:
				case USER:
				case ADMIN_TASK_LIST:
				case ADMIN_TASK_OUTPUT:
				case ADMIN_TASK_STATUS:
				case BLOCKING_THREADS:
				case MQREADALL:
				case MQREADALLCLOB:
				case MQRECEIVEALL:
				case MQRECEIVEALLCLOB:
				case XMLTABLE:
				case SQLIDENTIFIER:
					{
					setState(4807);
					variableName();
					}
					break;
				case COLON:
					{
					setState(4808);
					hostVariable();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4811);
				match(EQ);
				setState(4812);
				valuesList1();
				setState(4823);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4813);
					match(COMMA);
					setState(4816);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case INSTEAD:
					case NEW:
					case NEW_TABLE:
					case OLD_TABLE:
					case REFERENCING:
					case BASED:
					case UPON:
					case ADD:
					case AFTER:
					case ALL:
					case ALLOCATE:
					case ALLOW:
					case ALTER:
					case ALTERAND:
					case ANY:
					case ARRAY:
					case ARRAY_EXISTS:
					case AS:
					case ASENSITIVE:
					case ASSOCIATE:
					case ASUTIME:
					case AT:
					case AUDIT:
					case AUX:
					case AUXILIARY:
					case BEFORE:
					case BEGIN:
					case BETWEEN:
					case BUFFERPOOL:
					case BUFFERPOOLS:
					case BY:
					case CALL:
					case CAPTURE:
					case CASCADED:
					case CASE:
					case CAST:
					case CCSID:
					case CHAR:
					case CHARACTER:
					case CHECK:
					case CLONE:
					case CLOSE:
					case CLUSTER:
					case COLLECTION:
					case COLLID:
					case COLUMN:
					case COMMENT:
					case COMMIT:
					case CONCAT:
					case CONDITION:
					case CONNECT:
					case CONNECTION:
					case CONSTRAINT:
					case CONTAINS:
					case CONTENT:
					case CONTINUE:
					case CREATE:
					case CUBE:
					case CURRENT:
					case CURRENT_LC_CTYPE:
					case CURRVAL:
					case CURSOR:
					case DATA:
					case DATABASE:
					case DAY:
					case DAYS:
					case DBINFO:
					case DECLARE:
					case DEFAULT:
					case DELETE:
					case DESCRIPTOR:
					case DETERMINISTIC:
					case DISABLE:
					case DISALLOW:
					case DISTINCT:
					case DO:
					case DOCUMENT:
					case DOUBLE:
					case DROP:
					case DSSIZE:
					case DYNAMIC:
					case EDITPROC:
					case ELSE:
					case ELSEIF:
					case ENCODING:
					case ENCRYPTION:
					case END:
					case END_EXEC:
					case ENDING:
					case ERASE:
					case ESCAPE:
					case EXCEPT:
					case EXCEPTION:
					case EXEC_SQL:
					case EXECUTE:
					case EXISTS:
					case EXIT:
					case EXPLAIN:
					case EXTERNAL:
					case FENCED:
					case FETCH:
					case FIELDPROC:
					case FINAL:
					case FIRST:
					case FOR:
					case FREE:
					case FROM:
					case FULL:
					case FUNCTION:
					case GENERATED:
					case GET:
					case GLOBAL:
					case GO:
					case GOTO:
					case GRANT:
					case GROUP:
					case HANDLER:
					case HAVING:
					case HOLD:
					case HOUR:
					case HOURS:
					case IF:
					case IMMEDIATE:
					case IN:
					case INCLUSIVE:
					case INDEX:
					case INDEXBP:
					case INHERIT:
					case INNER:
					case INOUT:
					case INSENSITIVE:
					case INSERT:
					case INTERSECT:
					case INTO:
					case IS:
					case ISOBID:
					case ITERATE:
					case JAR:
					case JOIN:
					case KEEP:
					case KEY:
					case LABEL:
					case LANGUAGE:
					case LAST:
					case LC_CTYPE:
					case LEAVE:
					case LEFT:
					case LIKE:
					case LIMIT:
					case LOCAL:
					case LOCALE:
					case LOCATOR:
					case LOCATORS:
					case LOCK:
					case LOCKMAX:
					case LOCKSIZE:
					case LONG:
					case LOOP:
					case MAINTAINED:
					case MATERIALIZED:
					case MICROSECOND:
					case MICROSECONDS:
					case MODIFIES:
					case MONTH:
					case MONTHS:
					case NEXT:
					case NEXTVAL:
					case NO:
					case NONE:
					case NOT:
					case NULL:
					case NULLS:
					case NUMPARTS:
					case OBID:
					case OF:
					case OFFSET:
					case OLD:
					case ON:
					case OPEN:
					case OPTIMIZATION:
					case OPTIMIZE:
					case OR:
					case ORDER:
					case ORGANIZATION:
					case OUT:
					case OUTER:
					case PACKAGE:
					case PADDED:
					case PARAMETER:
					case PART:
					case PARTITION:
					case PARTITIONED:
					case PARTITIONING:
					case PATH:
					case PERIOD:
					case PIECESIZE:
					case PLAN:
					case PRECISION:
					case PREPARE:
					case PREVVAL:
					case PRIOR:
					case PRIQTY:
					case PRIVILEGES:
					case PROCEDURE:
					case PROGRAM:
					case PSID:
					case PUBLIC:
					case QUERY:
					case QUERYNO:
					case READS:
					case REFERENCES:
					case REFRESH:
					case RELEASE:
					case RENAME:
					case REPEAT:
					case RESIGNAL:
					case RESTRICT:
					case RESULT:
					case RESULT_SET_LOCATOR:
					case RETURN:
					case RETURNS:
					case REVOKE:
					case RIGHT:
					case ROLE:
					case ROLLBACK:
					case ROLLUP:
					case ROUND_CEILING:
					case ROUND_DOWN:
					case ROUND_FLOOR:
					case ROUND_HALF_DOWN:
					case ROUND_HALF_EVEN:
					case ROUND_HALF_UP:
					case ROUND_UP:
					case ROW:
					case ROWSET:
					case RUN:
					case SAVEPOINT:
					case SCHEMA:
					case SCRATCHPAD:
					case SECOND:
					case SECONDS:
					case SECQTY:
					case SECURITY:
					case SELECT:
					case SENSITIVE:
					case SEQUENCE:
					case SET:
					case SIGNAL:
					case SIMPLE:
					case SOME:
					case SOURCE:
					case SPECIFIC:
					case STANDARD:
					case STATEMENT:
					case STATIC:
					case STAY:
					case STOGROUP:
					case STORES:
					case STYLE:
					case SUMMARY:
					case SYNONYM:
					case SYSDATE:
					case SYSTEM:
					case SYSTIMESTAMP:
					case TABLE:
					case TABLESPACE:
					case THEN:
					case TO:
					case TRIGGER:
					case TRUNCATE:
					case TYPE:
					case UNDO:
					case UNION:
					case UNIQUE:
					case UNTIL:
					case UPDATE:
					case USING:
					case VALIDPROC:
					case VALUE:
					case VALUES:
					case VARIABLE:
					case VARIANT:
					case VCAT:
					case VERSIONING:
					case VIEW:
					case VOLATILE:
					case VOLUMES:
					case WHEN:
					case WHENEVER:
					case WHERE:
					case WHILE:
					case WITH:
					case WLM:
					case XMLCAST:
					case XMLEXISTS:
					case XMLNAMESPACES:
					case YEAR:
					case YEARS:
					case ZONE:
					case AND:
					case ARRAY_AGG:
					case ASC:
					case AVG:
					case BIT:
					case CHANGE:
					case CODEUNITS16:
					case CODEUNITS32:
					case CORR:
					case CORRELATION:
					case COUNT:
					case COUNT_BIG:
					case COVAR:
					case COVARIANCE:
					case COVARIANCE_SAMP:
					case COVAR_POP:
					case COVAR_SAMP:
					case CS:
					case CUME_DIST:
					case DENSE_RANK:
					case DESC:
					case EBCDIC:
					case EXCLUSIVE:
					case FIRST_VALUE:
					case FOLLOWING:
					case GROUPING:
					case IGNORE:
					case INDICATOR:
					case INPUT:
					case ISNULL:
					case LAG:
					case LARGE:
					case LAST_VALUE:
					case LEAD:
					case LISTAGG:
					case LOCKED:
					case LOCKS:
					case MEDIAN:
					case MINUTES:
					case MIXED:
					case NOTNULL:
					case NTH_VALUE:
					case NTILE:
					case NUMERIC:
					case OBJECT:
					case OCTETS:
					case ONLY:
					case OVER:
					case PASSING:
					case PERCENTILE_CONT:
					case PERCENTILE_DISC:
					case PERCENT_RANK:
					case PRECEDING:
					case PREVIOUS:
					case RANGE:
					case RANK:
					case RATIO_TO_REPORT:
					case READ:
					case REF:
					case REGR_AVGX:
					case REGR_AVGY:
					case REGR_COUNT:
					case REGR_ICPT:
					case REGR_INTERCEPT:
					case REGR_R2:
					case REGR_SLOPE:
					case REGR_SXX:
					case REGR_SXY:
					case REGR_SYY:
					case RESPECT:
					case ROW_NUMBER:
					case ROWS:
					case RR:
					case RS:
					case SBCS:
					case SELECTIVITY:
					case SETS:
					case SHARE:
					case SKIP_:
					case STDDEV:
					case STDDEV_POP:
					case STDDEV_SAMP:
					case SUM:
					case TOKEN:
					case UNBOUNDED:
					case UNPACK:
					case UR:
					case USE:
					case VAR:
					case VARIANCE:
					case VARIANCE_SAMP:
					case VAR_POP:
					case VAR_SAMP:
					case VARYING:
					case WITHOUT:
					case XML:
					case XMLAGG:
					case COLUMNS:
					case SQLID:
					case ORDINALITY:
					case SYSTEM_TIME:
					case BUSINESS_TIME:
					case MULTIPLIER:
					case UNNEST:
					case CROSS:
					case CALLER:
					case CLIENT:
					case POSITIONING:
					case SCROLL:
					case ACTION:
					case ASSEMBLE:
					case C_:
					case CALLED:
					case COBOL:
					case DB2:
					case DEFINER:
					case DISPATCH:
					case ENVIRONMENT:
					case FAILURE:
					case FAILURES:
					case JAVA:
					case MAIN:
					case NAME:
					case OPTIONS:
					case PARALLEL:
					case PLI:
					case REGISTERS:
					case RESIDENT:
					case SECURED:
					case SPECIAL:
					case SQL:
					case STOP:
					case SUB:
					case YES:
					case APPLICATION:
					case CHANGED:
					case COMPATIBILITY:
					case COMPRESS:
					case COPY:
					case FREEPAGE:
					case GBPCACHE:
					case INCLUDE:
					case MAXVALUE:
					case MINVALUE:
					case PCTFREE:
					case REGENERATE:
					case MASK:
					case ENABLE:
					case PERMISSION:
					case ATOMIC:
					case SQLEXCEPTION:
					case MERGE:
					case MATCHED:
					case SQLSTATE:
					case MESSAGE_TEXT:
					case OVERRIDING:
					case PORTION:
					case DB2SQL:
					case DEBUG:
					case GENERAL:
					case MODE_:
					case REXX:
					case CACHE:
					case CYCLE:
					case INCREMENT:
					case RESTART:
					case DATACLAS:
					case MGMTCLAS:
					case REMOVE:
					case STORCLAS:
					case ACCESS:
					case ACTIVATE:
					case ALWAYS:
					case APPEND:
					case ARCHIVE:
					case BUSINESS:
					case CASCADE:
					case CHANGES:
					case CONTROL:
					case DEACTIVATE:
					case DEFERRED:
					case EACH:
					case ENFORCED:
					case EXTRA:
					case FOREIGN:
					case HIDDEN_:
					case HISTORY:
					case ID:
					case IDENTITY:
					case IMPLICITLY:
					case INITIALLY:
					case INLINE:
					case OPERATION:
					case ORGANIZE:
					case OVERLAPS:
					case PACKAGE_NAME:
					case PACKAGE_SCHEMA:
					case PACKAGE_VERSION:
					case PRIMARY:
					case RESET:
					case ROTATE:
					case START:
					case SYSIBM:
					case TRANSACTION:
					case XMLSCHEMA:
					case ELEMENT:
					case URL:
					case NAMESPACE:
					case LOCATION:
					case SYSXSR:
					case ALGORITHM:
					case FIXEDLENGTH:
					case HUFFMAN:
					case LOB:
					case LOG:
					case LOGGED:
					case MAXPARTITIONS:
					case MAXROWS:
					case MEMBER:
					case MOVE:
					case PAGE:
					case PAGENUM:
					case PENDING:
					case RELATIVE:
					case SEGSIZE:
					case TRACKMOD:
					case ADDRESS:
					case ATTRIBUTES:
					case AUTHENTICATION:
					case AUTHID:
					case CONTEXT:
					case JOBNAME:
					case OWNER:
					case PROFILE:
					case QUALIFIER:
					case SERVAUTH:
					case TRUSTED:
					case SECTION:
					case ACTIVE:
					case VERSION:
					case ALIAS:
					case WORK:
					case WORKFILE:
					case SYSDEFLT:
					case NULTERM:
					case STRUCTURE:
					case GENERIC:
					case TEMPORARY:
					case DEFER:
					case DEFINE:
					case EXCLUDE:
					case GENERATE:
					case KEYS:
					case XMLPATTERN:
					case SIZE:
					case EVERY:
					case ABSOLUTE:
					case ACCELERATOR:
					case EXCLUDING:
					case INCLUDING:
					case DEFAULTS:
					case MODIFIERS:
					case OPTION:
					case PRESERVE:
					case BOTH:
					case DESCRIBE:
					case LABELS:
					case NAMES:
					case OUTPUT:
					case EXCHANGE:
					case STABILIZED:
					case STMTCACHE:
					case STMTID:
					case STMTTOKEN:
					case STARTING:
					case CATALOG_NAME:
					case CONDITION_NUMBER:
					case CURSOR_NAME:
					case DB2_AUTHENTICATION_TYPE:
					case DB2_AUTHORIZATION_ID:
					case DB2_CONNECTION_STATE:
					case DB2_CONNECTION_STATUS:
					case DB2_ENCRYPTION_TYPE:
					case DB2_ERROR_CODE1:
					case DB2_ERROR_CODE2:
					case DB2_ERROR_CODE3:
					case DB2_ERROR_CODE4:
					case DB2_GET_DIAGNOSTICS_DIAGNOSTICS:
					case DB2_INTERNAL_ERROR_POINTER:
					case DB2_LAST_ROW:
					case DB2_LINE_NUMBER:
					case DB2_MESSAGE_ID:
					case DB2_MODULE_DETECTING_ERROR:
					case DB2_NUMBER_PARAMETER_MARKERS:
					case DB2_NUMBER_RESULT_SETS:
					case DB2_NUMBER_ROWS:
					case DB2_ORDINAL_TOKEN_:
					case DB2_PRODUCT_ID:
					case DB2_REASON_CODE:
					case DB2_RETURNED_SQLCODE:
					case DB2_RETURN_STATUS:
					case DB2_ROW_NUMBER:
					case DB2_SERVER_CLASS_NAME:
					case DB2_SQL_ATTR_CURSOR_HOLD:
					case DB2_SQL_ATTR_CURSOR_ROWSET:
					case DB2_SQL_ATTR_CURSOR_SCROLLABLE:
					case DB2_SQL_ATTR_CURSOR_SENSITIVITY:
					case DB2_SQL_ATTR_CURSOR_TYPE:
					case DB2_SQLERRD1:
					case DB2_SQLERRD2:
					case DB2_SQLERRD3:
					case DB2_SQLERRD4:
					case DB2_SQLERRD5:
					case DB2_SQLERRD6:
					case DB2_SQLERRD_SET:
					case DB2_SQL_NESTING_LEVEL:
					case DB2_TOKEN_COUNT:
					case DIAGNOSTICS:
					case MORE_:
					case NUMBER:
					case RETURNED_SQLSTATE:
					case ROW_COUNT:
					case SERVER_NAME:
					case STACKED:
					case CREATETAB:
					case CREATETS:
					case DBADM:
					case DBCTRL:
					case DBMAINT:
					case DISPLAYDB:
					case IMAGCOPY:
					case LOAD:
					case PACKADM:
					case RECOVERDB:
					case REORG:
					case REPAIR:
					case STARTDB:
					case STATS:
					case STOPDB:
					case BIND:
					case ALTERIN:
					case CREATEIN:
					case DROPIN:
					case USAGE:
					case ACCESSCTRL:
					case BINDADD:
					case BINDAGENT:
					case BSDS:
					case CREATEALIAS:
					case CREATEDBA:
					case CREATEDBC:
					case CREATE_SECURE_OBJECT:
					case CREATESG:
					case CREATETMTAB:
					case DATAACCESS:
					case DEBUGSESSION:
					case DISPLAY:
					case MONITOR1:
					case MONITOR2:
					case RECOVER:
					case SQLADM:
					case STOPALL:
					case STOSPACE:
					case SYSADM:
					case SYSCTRL:
					case SYSOPR:
					case TRACE:
					case UNLOAD:
					case WRITE:
					case ABS:
					case ABSVAL:
					case ACOS:
					case ADD_DAYS:
					case ADD_MONTHS:
					case ARRAY_DELETE:
					case ARRAY_FIRST:
					case ARRAY_LAST:
					case ARRAY_NEXT:
					case ARRAY_PRIOR:
					case ARRAY_TRIM:
					case ASCII:
					case ASCII_CHR:
					case ASCIISTR:
					case ASCII_STR:
					case ASIN:
					case ATAN:
					case ATAN2:
					case ATANH:
					case BIGINT:
					case BINARY:
					case BITAND:
					case BITANDNOT:
					case BITNOT:
					case BITOR:
					case BITXOR:
					case BLOB:
					case BTRIM:
					case CARDINALITY:
					case CCSID_ENCODING:
					case CEIL:
					case CEILING:
					case CHAR9:
					case CHARACTER_LENGTH:
					case CHAR_LENGTH:
					case CHR:
					case CLOB:
					case COALESCE:
					case COLLATION_KEY:
					case COMPARE_DECFLOAT:
					case COS:
					case COSH:
					case DATE:
					case DAYOFMONTH:
					case DAYOFWEEK:
					case DAYOFWEEK_ISO:
					case DAYOFYEAR:
					case DAYS_BETWEEN:
					case DBCLOB:
					case DEC:
					case DECFLOAT:
					case DECFLOAT_FORMAT:
					case DECFLOAT_SORTKEY:
					case DECIMAL:
					case DECODE:
					case DECRYPT_BINARY:
					case DECRYPT_BIT:
					case DECRYPT_CHAR:
					case DECRYPT_DATAKEY_BIGINT:
					case DECRYPT_DATAKEY_BIT:
					case DECRYPT_DATAKEY_CLOB:
					case DECRYPT_DATAKEY_DBCLOB:
					case DECRYPT_DATAKEY_DECIMAL:
					case DECRYPT_DATAKEY_INTEGER:
					case DECRYPT_DATAKEY_VARCHAR:
					case DECRYPT_DATAKEY_VARGRAPHIC:
					case DECRYPT_DB:
					case DEGREES:
					case DIFFERENCE:
					case DIGITS:
					case DOUBLE_PRECISION:
					case DSN_XMLVALIDATE:
					case EBCDIC_CHR:
					case EBCDIC_STR:
					case ENCRYPT_DATAKEY:
					case ENCRYPT_TDES:
					case EXP:
					case EXTRACT:
					case FLOAT:
					case FLOOR:
					case GENERATE_UNIQUE:
					case GENERATE_UNIQUE_BINARY:
					case GETHINT:
					case GETVARIABLE:
					case GRAPHIC:
					case GREATEST:
					case HASH:
					case HASH_CRC32:
					case HASH_MD5:
					case HASH_SHA1:
					case HASH_SHA256:
					case HEX:
					case IDENTITY_VAL_LOCAL:
					case IFNULL:
					case INSTR:
					case INT:
					case INTEGER:
					case JULIAN_DAY:
					case LAST_DAY:
					case LCASE:
					case LEAST:
					case LENGTH:
					case LN:
					case LOCATE:
					case LOCATE_IN_STRING:
					case LOG10:
					case LOWER:
					case LPAD:
					case LTRIM:
					case MAX:
					case MAX_CARDINALITY:
					case MIDNIGHT_SECONDS:
					case MIN:
					case MINUTE:
					case MOD:
					case MONTHS_BETWEEN:
					case MQREAD:
					case MQREADCLOB:
					case MQRECEIVE:
					case MQRECEIVECLOB:
					case MQSEND:
					case MULTIPLY_ALT:
					case NEXT_DAY:
					case NEXT_MONTH:
					case NORMALIZE_DECFLOAT:
					case NORMALIZE_STRING:
					case NULLIF:
					case NVL:
					case OVERLAY:
					case PACK:
					case POSITION:
					case POSSTR:
					case POW:
					case POWER:
					case QUANTIZE:
					case QUARTER:
					case RADIANS:
					case RAISE_ERROR:
					case RAND:
					case RANDOM:
					case REAL:
					case REGEXP_COUNT:
					case REGEXP_INSTR:
					case REGEXP_LIKE:
					case REGEXP_REPLACE:
					case REGEXP_SUBSTR:
					case REPLACE:
					case RID:
					case ROUND:
					case ROUND_TIMESTAMP:
					case ROWID:
					case RPAD:
					case RTRIM:
					case SCORE:
					case SIGN:
					case SIN:
					case SINH:
					case SMALLINT:
					case SOAPHTTPC:
					case SOAPHTTPNC:
					case SOAPHTTPNV:
					case SOAPHTTPV:
					case SOUNDEX:
					case SPACE:
					case SQRT:
					case STRIP:
					case STRLEFT:
					case STRPOS:
					case STRRIGHT:
					case SUBSTR:
					case SUBSTRING:
					case TAN:
					case TANH:
					case TIME:
					case TIMESTAMP:
					case TIMESTAMPADD:
					case TIMESTAMPDIFF:
					case TIMESTAMP_FORMAT:
					case TIMESTAMP_ISO:
					case TIMESTAMP_TZ:
					case TO_CHAR:
					case TO_CLOB:
					case TO_DATE:
					case TO_NUMBER:
					case TOTALORDER:
					case TO_TIMESTAMP:
					case TRANSLATE:
					case TRIM:
					case TRIM_ARRAY:
					case TRUNC:
					case TRUNC_TIMESTAMP:
					case UCASE:
					case UNICODE:
					case UNICODE_STR:
					case UNISTR:
					case UPPER:
					case VARBINARY:
					case VARCHAR:
					case VARCHAR9:
					case VARCHAR_BIT_FORMAT:
					case VARCHAR_FORMAT:
					case VARGRAPHIC:
					case VERIFY_GROUP_FOR_USER:
					case VERIFY_ROLE_FOR_USER:
					case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
					case WEEK:
					case WEEK_ISO:
					case WRAP:
					case XMLATTRIBUTES:
					case XMLCOMMENT:
					case XMLCONCAT:
					case XMLDOCUMENT:
					case XMLELEMENT:
					case XMLFOREST:
					case XMLMODIFY:
					case XMLPARSE:
					case XMLPI:
					case XMLQUERY:
					case XMLSERIALIZE:
					case XMLTEXT:
					case XMLXSROBJECTID:
					case XSLTRANSFORM:
					case CURRENT_ACCELERATOR:
					case CURRENT_APPLICATION_COMPATIBILITY:
					case CURRENT_APPLICATION_ENCODING_SCHEME:
					case CURRENT_CLIENT_ACCTNG:
					case CURRENT_CLIENT_APPLNAME:
					case CURRENT_CLIENT_CORR_TOKEN:
					case CURRENT_CLIENT_USERID:
					case CURRENT_CLIENT_WRKSTNNAME:
					case CURRENT_DATE:
					case CURRENT_DEBUG_MODE:
					case CURRENT_DECFLOAT_ROUNDING_MODE:
					case CURRENT_DEGREE:
					case CURRENT_EXPLAIN_MODE:
					case CURRENT_GET_ACCEL_ARCHIVE:
					case CURRENT_LOCALE_LC_CTYPE:
					case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
					case CURRENT_MEMBER:
					case CURRENT_OPTIMIZATION_HINT:
					case CURRENT_PACKAGE_PATH:
					case CURRENT_PACKAGESET:
					case CURRENT_PATH:
					case CURRENT_PRECISION:
					case CURRENT_QUERY_ACCELERATION:
					case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
					case CURRENT_REFRESH_AGE:
					case CURRENT_ROUTINE_VERSION:
					case CURRENT_RULES:
					case CURRENT_SCHEMA:
					case CURRENT_SERVER:
					case CURRENT_SQLID:
					case CURRENT_TEMPORAL_BUSINESS_TIME:
					case CURRENT_TEMPORAL_SYSTEM_TIME:
					case CURRENT_TIME:
					case CURRENT_TIMESTAMP:
					case CURRENT_TIME_ZONE:
					case ENCRYPTION_PASSWORD:
					case SESSION_TIME_ZONE:
					case SESSION_USER:
					case USER:
					case ADMIN_TASK_LIST:
					case ADMIN_TASK_OUTPUT:
					case ADMIN_TASK_STATUS:
					case BLOCKING_THREADS:
					case MQREADALL:
					case MQREADALLCLOB:
					case MQRECEIVEALL:
					case MQRECEIVEALLCLOB:
					case XMLTABLE:
					case SQLIDENTIFIER:
						{
						setState(4814);
						variableName();
						}
						break;
					case COLON:
						{
						setState(4815);
						hostVariable();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(4818);
					match(EQ);
					setState(4819);
					valuesList1();
					}
					}
					setState(4825);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case 3:
				{
				{
				setState(4826);
				match(LPAREN);
				setState(4829);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case INSTEAD:
				case NEW:
				case NEW_TABLE:
				case OLD_TABLE:
				case REFERENCING:
				case BASED:
				case UPON:
				case ADD:
				case AFTER:
				case ALL:
				case ALLOCATE:
				case ALLOW:
				case ALTER:
				case ALTERAND:
				case ANY:
				case ARRAY:
				case ARRAY_EXISTS:
				case AS:
				case ASENSITIVE:
				case ASSOCIATE:
				case ASUTIME:
				case AT:
				case AUDIT:
				case AUX:
				case AUXILIARY:
				case BEFORE:
				case BEGIN:
				case BETWEEN:
				case BUFFERPOOL:
				case BUFFERPOOLS:
				case BY:
				case CALL:
				case CAPTURE:
				case CASCADED:
				case CASE:
				case CAST:
				case CCSID:
				case CHAR:
				case CHARACTER:
				case CHECK:
				case CLONE:
				case CLOSE:
				case CLUSTER:
				case COLLECTION:
				case COLLID:
				case COLUMN:
				case COMMENT:
				case COMMIT:
				case CONCAT:
				case CONDITION:
				case CONNECT:
				case CONNECTION:
				case CONSTRAINT:
				case CONTAINS:
				case CONTENT:
				case CONTINUE:
				case CREATE:
				case CUBE:
				case CURRENT:
				case CURRENT_LC_CTYPE:
				case CURRVAL:
				case CURSOR:
				case DATA:
				case DATABASE:
				case DAY:
				case DAYS:
				case DBINFO:
				case DECLARE:
				case DEFAULT:
				case DELETE:
				case DESCRIPTOR:
				case DETERMINISTIC:
				case DISABLE:
				case DISALLOW:
				case DISTINCT:
				case DO:
				case DOCUMENT:
				case DOUBLE:
				case DROP:
				case DSSIZE:
				case DYNAMIC:
				case EDITPROC:
				case ELSE:
				case ELSEIF:
				case ENCODING:
				case ENCRYPTION:
				case END:
				case END_EXEC:
				case ENDING:
				case ERASE:
				case ESCAPE:
				case EXCEPT:
				case EXCEPTION:
				case EXEC_SQL:
				case EXECUTE:
				case EXISTS:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case FENCED:
				case FETCH:
				case FIELDPROC:
				case FINAL:
				case FIRST:
				case FOR:
				case FREE:
				case FROM:
				case FULL:
				case FUNCTION:
				case GENERATED:
				case GET:
				case GLOBAL:
				case GO:
				case GOTO:
				case GRANT:
				case GROUP:
				case HANDLER:
				case HAVING:
				case HOLD:
				case HOUR:
				case HOURS:
				case IF:
				case IMMEDIATE:
				case IN:
				case INCLUSIVE:
				case INDEX:
				case INDEXBP:
				case INHERIT:
				case INNER:
				case INOUT:
				case INSENSITIVE:
				case INSERT:
				case INTERSECT:
				case INTO:
				case IS:
				case ISOBID:
				case ITERATE:
				case JAR:
				case JOIN:
				case KEEP:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LAST:
				case LC_CTYPE:
				case LEAVE:
				case LEFT:
				case LIKE:
				case LIMIT:
				case LOCAL:
				case LOCALE:
				case LOCATOR:
				case LOCATORS:
				case LOCK:
				case LOCKMAX:
				case LOCKSIZE:
				case LONG:
				case LOOP:
				case MAINTAINED:
				case MATERIALIZED:
				case MICROSECOND:
				case MICROSECONDS:
				case MODIFIES:
				case MONTH:
				case MONTHS:
				case NEXT:
				case NEXTVAL:
				case NO:
				case NONE:
				case NOT:
				case NULL:
				case NULLS:
				case NUMPARTS:
				case OBID:
				case OF:
				case OFFSET:
				case OLD:
				case ON:
				case OPEN:
				case OPTIMIZATION:
				case OPTIMIZE:
				case OR:
				case ORDER:
				case ORGANIZATION:
				case OUT:
				case OUTER:
				case PACKAGE:
				case PADDED:
				case PARAMETER:
				case PART:
				case PARTITION:
				case PARTITIONED:
				case PARTITIONING:
				case PATH:
				case PERIOD:
				case PIECESIZE:
				case PLAN:
				case PRECISION:
				case PREPARE:
				case PREVVAL:
				case PRIOR:
				case PRIQTY:
				case PRIVILEGES:
				case PROCEDURE:
				case PROGRAM:
				case PSID:
				case PUBLIC:
				case QUERY:
				case QUERYNO:
				case READS:
				case REFERENCES:
				case REFRESH:
				case RELEASE:
				case RENAME:
				case REPEAT:
				case RESIGNAL:
				case RESTRICT:
				case RESULT:
				case RESULT_SET_LOCATOR:
				case RETURN:
				case RETURNS:
				case REVOKE:
				case RIGHT:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUND_CEILING:
				case ROUND_DOWN:
				case ROUND_FLOOR:
				case ROUND_HALF_DOWN:
				case ROUND_HALF_EVEN:
				case ROUND_HALF_UP:
				case ROUND_UP:
				case ROW:
				case ROWSET:
				case RUN:
				case SAVEPOINT:
				case SCHEMA:
				case SCRATCHPAD:
				case SECOND:
				case SECONDS:
				case SECQTY:
				case SECURITY:
				case SELECT:
				case SENSITIVE:
				case SEQUENCE:
				case SET:
				case SIGNAL:
				case SIMPLE:
				case SOME:
				case SOURCE:
				case SPECIFIC:
				case STANDARD:
				case STATEMENT:
				case STATIC:
				case STAY:
				case STOGROUP:
				case STORES:
				case STYLE:
				case SUMMARY:
				case SYNONYM:
				case SYSDATE:
				case SYSTEM:
				case SYSTIMESTAMP:
				case TABLE:
				case TABLESPACE:
				case THEN:
				case TO:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNDO:
				case UNION:
				case UNIQUE:
				case UNTIL:
				case UPDATE:
				case USING:
				case VALIDPROC:
				case VALUE:
				case VALUES:
				case VARIABLE:
				case VARIANT:
				case VCAT:
				case VERSIONING:
				case VIEW:
				case VOLATILE:
				case VOLUMES:
				case WHEN:
				case WHENEVER:
				case WHERE:
				case WHILE:
				case WITH:
				case WLM:
				case XMLCAST:
				case XMLEXISTS:
				case XMLNAMESPACES:
				case YEAR:
				case YEARS:
				case ZONE:
				case AND:
				case ARRAY_AGG:
				case ASC:
				case AVG:
				case BIT:
				case CHANGE:
				case CODEUNITS16:
				case CODEUNITS32:
				case CORR:
				case CORRELATION:
				case COUNT:
				case COUNT_BIG:
				case COVAR:
				case COVARIANCE:
				case COVARIANCE_SAMP:
				case COVAR_POP:
				case COVAR_SAMP:
				case CS:
				case CUME_DIST:
				case DENSE_RANK:
				case DESC:
				case EBCDIC:
				case EXCLUSIVE:
				case FIRST_VALUE:
				case FOLLOWING:
				case GROUPING:
				case IGNORE:
				case INDICATOR:
				case INPUT:
				case ISNULL:
				case LAG:
				case LARGE:
				case LAST_VALUE:
				case LEAD:
				case LISTAGG:
				case LOCKED:
				case LOCKS:
				case MEDIAN:
				case MINUTES:
				case MIXED:
				case NOTNULL:
				case NTH_VALUE:
				case NTILE:
				case NUMERIC:
				case OBJECT:
				case OCTETS:
				case ONLY:
				case OVER:
				case PASSING:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case PERCENT_RANK:
				case PRECEDING:
				case PREVIOUS:
				case RANGE:
				case RANK:
				case RATIO_TO_REPORT:
				case READ:
				case REF:
				case REGR_AVGX:
				case REGR_AVGY:
				case REGR_COUNT:
				case REGR_ICPT:
				case REGR_INTERCEPT:
				case REGR_R2:
				case REGR_SLOPE:
				case REGR_SXX:
				case REGR_SXY:
				case REGR_SYY:
				case RESPECT:
				case ROW_NUMBER:
				case ROWS:
				case RR:
				case RS:
				case SBCS:
				case SELECTIVITY:
				case SETS:
				case SHARE:
				case SKIP_:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case TOKEN:
				case UNBOUNDED:
				case UNPACK:
				case UR:
				case USE:
				case VAR:
				case VARIANCE:
				case VARIANCE_SAMP:
				case VAR_POP:
				case VAR_SAMP:
				case VARYING:
				case WITHOUT:
				case XML:
				case XMLAGG:
				case COLUMNS:
				case SQLID:
				case ORDINALITY:
				case SYSTEM_TIME:
				case BUSINESS_TIME:
				case MULTIPLIER:
				case UNNEST:
				case CROSS:
				case CALLER:
				case CLIENT:
				case POSITIONING:
				case SCROLL:
				case ACTION:
				case ASSEMBLE:
				case C_:
				case CALLED:
				case COBOL:
				case DB2:
				case DEFINER:
				case DISPATCH:
				case ENVIRONMENT:
				case FAILURE:
				case FAILURES:
				case JAVA:
				case MAIN:
				case NAME:
				case OPTIONS:
				case PARALLEL:
				case PLI:
				case REGISTERS:
				case RESIDENT:
				case SECURED:
				case SPECIAL:
				case SQL:
				case STOP:
				case SUB:
				case YES:
				case APPLICATION:
				case CHANGED:
				case COMPATIBILITY:
				case COMPRESS:
				case COPY:
				case FREEPAGE:
				case GBPCACHE:
				case INCLUDE:
				case MAXVALUE:
				case MINVALUE:
				case PCTFREE:
				case REGENERATE:
				case MASK:
				case ENABLE:
				case PERMISSION:
				case ATOMIC:
				case SQLEXCEPTION:
				case MERGE:
				case MATCHED:
				case SQLSTATE:
				case MESSAGE_TEXT:
				case OVERRIDING:
				case PORTION:
				case DB2SQL:
				case DEBUG:
				case GENERAL:
				case MODE_:
				case REXX:
				case CACHE:
				case CYCLE:
				case INCREMENT:
				case RESTART:
				case DATACLAS:
				case MGMTCLAS:
				case REMOVE:
				case STORCLAS:
				case ACCESS:
				case ACTIVATE:
				case ALWAYS:
				case APPEND:
				case ARCHIVE:
				case BUSINESS:
				case CASCADE:
				case CHANGES:
				case CONTROL:
				case DEACTIVATE:
				case DEFERRED:
				case EACH:
				case ENFORCED:
				case EXTRA:
				case FOREIGN:
				case HIDDEN_:
				case HISTORY:
				case ID:
				case IDENTITY:
				case IMPLICITLY:
				case INITIALLY:
				case INLINE:
				case OPERATION:
				case ORGANIZE:
				case OVERLAPS:
				case PACKAGE_NAME:
				case PACKAGE_SCHEMA:
				case PACKAGE_VERSION:
				case PRIMARY:
				case RESET:
				case ROTATE:
				case START:
				case SYSIBM:
				case TRANSACTION:
				case XMLSCHEMA:
				case ELEMENT:
				case URL:
				case NAMESPACE:
				case LOCATION:
				case SYSXSR:
				case ALGORITHM:
				case FIXEDLENGTH:
				case HUFFMAN:
				case LOB:
				case LOG:
				case LOGGED:
				case MAXPARTITIONS:
				case MAXROWS:
				case MEMBER:
				case MOVE:
				case PAGE:
				case PAGENUM:
				case PENDING:
				case RELATIVE:
				case SEGSIZE:
				case TRACKMOD:
				case ADDRESS:
				case ATTRIBUTES:
				case AUTHENTICATION:
				case AUTHID:
				case CONTEXT:
				case JOBNAME:
				case OWNER:
				case PROFILE:
				case QUALIFIER:
				case SERVAUTH:
				case TRUSTED:
				case SECTION:
				case ACTIVE:
				case VERSION:
				case ALIAS:
				case WORK:
				case WORKFILE:
				case SYSDEFLT:
				case NULTERM:
				case STRUCTURE:
				case GENERIC:
				case TEMPORARY:
				case DEFER:
				case DEFINE:
				case EXCLUDE:
				case GENERATE:
				case KEYS:
				case XMLPATTERN:
				case SIZE:
				case EVERY:
				case ABSOLUTE:
				case ACCELERATOR:
				case EXCLUDING:
				case INCLUDING:
				case DEFAULTS:
				case MODIFIERS:
				case OPTION:
				case PRESERVE:
				case BOTH:
				case DESCRIBE:
				case LABELS:
				case NAMES:
				case OUTPUT:
				case EXCHANGE:
				case STABILIZED:
				case STMTCACHE:
				case STMTID:
				case STMTTOKEN:
				case STARTING:
				case CATALOG_NAME:
				case CONDITION_NUMBER:
				case CURSOR_NAME:
				case DB2_AUTHENTICATION_TYPE:
				case DB2_AUTHORIZATION_ID:
				case DB2_CONNECTION_STATE:
				case DB2_CONNECTION_STATUS:
				case DB2_ENCRYPTION_TYPE:
				case DB2_ERROR_CODE1:
				case DB2_ERROR_CODE2:
				case DB2_ERROR_CODE3:
				case DB2_ERROR_CODE4:
				case DB2_GET_DIAGNOSTICS_DIAGNOSTICS:
				case DB2_INTERNAL_ERROR_POINTER:
				case DB2_LAST_ROW:
				case DB2_LINE_NUMBER:
				case DB2_MESSAGE_ID:
				case DB2_MODULE_DETECTING_ERROR:
				case DB2_NUMBER_PARAMETER_MARKERS:
				case DB2_NUMBER_RESULT_SETS:
				case DB2_NUMBER_ROWS:
				case DB2_ORDINAL_TOKEN_:
				case DB2_PRODUCT_ID:
				case DB2_REASON_CODE:
				case DB2_RETURNED_SQLCODE:
				case DB2_RETURN_STATUS:
				case DB2_ROW_NUMBER:
				case DB2_SERVER_CLASS_NAME:
				case DB2_SQL_ATTR_CURSOR_HOLD:
				case DB2_SQL_ATTR_CURSOR_ROWSET:
				case DB2_SQL_ATTR_CURSOR_SCROLLABLE:
				case DB2_SQL_ATTR_CURSOR_SENSITIVITY:
				case DB2_SQL_ATTR_CURSOR_TYPE:
				case DB2_SQLERRD1:
				case DB2_SQLERRD2:
				case DB2_SQLERRD3:
				case DB2_SQLERRD4:
				case DB2_SQLERRD5:
				case DB2_SQLERRD6:
				case DB2_SQLERRD_SET:
				case DB2_SQL_NESTING_LEVEL:
				case DB2_TOKEN_COUNT:
				case DIAGNOSTICS:
				case MORE_:
				case NUMBER:
				case RETURNED_SQLSTATE:
				case ROW_COUNT:
				case SERVER_NAME:
				case STACKED:
				case CREATETAB:
				case CREATETS:
				case DBADM:
				case DBCTRL:
				case DBMAINT:
				case DISPLAYDB:
				case IMAGCOPY:
				case LOAD:
				case PACKADM:
				case RECOVERDB:
				case REORG:
				case REPAIR:
				case STARTDB:
				case STATS:
				case STOPDB:
				case BIND:
				case ALTERIN:
				case CREATEIN:
				case DROPIN:
				case USAGE:
				case ACCESSCTRL:
				case BINDADD:
				case BINDAGENT:
				case BSDS:
				case CREATEALIAS:
				case CREATEDBA:
				case CREATEDBC:
				case CREATE_SECURE_OBJECT:
				case CREATESG:
				case CREATETMTAB:
				case DATAACCESS:
				case DEBUGSESSION:
				case DISPLAY:
				case MONITOR1:
				case MONITOR2:
				case RECOVER:
				case SQLADM:
				case STOPALL:
				case STOSPACE:
				case SYSADM:
				case SYSCTRL:
				case SYSOPR:
				case TRACE:
				case UNLOAD:
				case WRITE:
				case ABS:
				case ABSVAL:
				case ACOS:
				case ADD_DAYS:
				case ADD_MONTHS:
				case ARRAY_DELETE:
				case ARRAY_FIRST:
				case ARRAY_LAST:
				case ARRAY_NEXT:
				case ARRAY_PRIOR:
				case ARRAY_TRIM:
				case ASCII:
				case ASCII_CHR:
				case ASCIISTR:
				case ASCII_STR:
				case ASIN:
				case ATAN:
				case ATAN2:
				case ATANH:
				case BIGINT:
				case BINARY:
				case BITAND:
				case BITANDNOT:
				case BITNOT:
				case BITOR:
				case BITXOR:
				case BLOB:
				case BTRIM:
				case CARDINALITY:
				case CCSID_ENCODING:
				case CEIL:
				case CEILING:
				case CHAR9:
				case CHARACTER_LENGTH:
				case CHAR_LENGTH:
				case CHR:
				case CLOB:
				case COALESCE:
				case COLLATION_KEY:
				case COMPARE_DECFLOAT:
				case COS:
				case COSH:
				case DATE:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFWEEK_ISO:
				case DAYOFYEAR:
				case DAYS_BETWEEN:
				case DBCLOB:
				case DEC:
				case DECFLOAT:
				case DECFLOAT_FORMAT:
				case DECFLOAT_SORTKEY:
				case DECIMAL:
				case DECODE:
				case DECRYPT_BINARY:
				case DECRYPT_BIT:
				case DECRYPT_CHAR:
				case DECRYPT_DATAKEY_BIGINT:
				case DECRYPT_DATAKEY_BIT:
				case DECRYPT_DATAKEY_CLOB:
				case DECRYPT_DATAKEY_DBCLOB:
				case DECRYPT_DATAKEY_DECIMAL:
				case DECRYPT_DATAKEY_INTEGER:
				case DECRYPT_DATAKEY_VARCHAR:
				case DECRYPT_DATAKEY_VARGRAPHIC:
				case DECRYPT_DB:
				case DEGREES:
				case DIFFERENCE:
				case DIGITS:
				case DOUBLE_PRECISION:
				case DSN_XMLVALIDATE:
				case EBCDIC_CHR:
				case EBCDIC_STR:
				case ENCRYPT_DATAKEY:
				case ENCRYPT_TDES:
				case EXP:
				case EXTRACT:
				case FLOAT:
				case FLOOR:
				case GENERATE_UNIQUE:
				case GENERATE_UNIQUE_BINARY:
				case GETHINT:
				case GETVARIABLE:
				case GRAPHIC:
				case GREATEST:
				case HASH:
				case HASH_CRC32:
				case HASH_MD5:
				case HASH_SHA1:
				case HASH_SHA256:
				case HEX:
				case IDENTITY_VAL_LOCAL:
				case IFNULL:
				case INSTR:
				case INT:
				case INTEGER:
				case JULIAN_DAY:
				case LAST_DAY:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LN:
				case LOCATE:
				case LOCATE_IN_STRING:
				case LOG10:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAX:
				case MAX_CARDINALITY:
				case MIDNIGHT_SECONDS:
				case MIN:
				case MINUTE:
				case MOD:
				case MONTHS_BETWEEN:
				case MQREAD:
				case MQREADCLOB:
				case MQRECEIVE:
				case MQRECEIVECLOB:
				case MQSEND:
				case MULTIPLY_ALT:
				case NEXT_DAY:
				case NEXT_MONTH:
				case NORMALIZE_DECFLOAT:
				case NORMALIZE_STRING:
				case NULLIF:
				case NVL:
				case OVERLAY:
				case PACK:
				case POSITION:
				case POSSTR:
				case POW:
				case POWER:
				case QUANTIZE:
				case QUARTER:
				case RADIANS:
				case RAISE_ERROR:
				case RAND:
				case RANDOM:
				case REAL:
				case REGEXP_COUNT:
				case REGEXP_INSTR:
				case REGEXP_LIKE:
				case REGEXP_REPLACE:
				case REGEXP_SUBSTR:
				case REPLACE:
				case RID:
				case ROUND:
				case ROUND_TIMESTAMP:
				case ROWID:
				case RPAD:
				case RTRIM:
				case SCORE:
				case SIGN:
				case SIN:
				case SINH:
				case SMALLINT:
				case SOAPHTTPC:
				case SOAPHTTPNC:
				case SOAPHTTPNV:
				case SOAPHTTPV:
				case SOUNDEX:
				case SPACE:
				case SQRT:
				case STRIP:
				case STRLEFT:
				case STRPOS:
				case STRRIGHT:
				case SUBSTR:
				case SUBSTRING:
				case TAN:
				case TANH:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIMESTAMP_FORMAT:
				case TIMESTAMP_ISO:
				case TIMESTAMP_TZ:
				case TO_CHAR:
				case TO_CLOB:
				case TO_DATE:
				case TO_NUMBER:
				case TOTALORDER:
				case TO_TIMESTAMP:
				case TRANSLATE:
				case TRIM:
				case TRIM_ARRAY:
				case TRUNC:
				case TRUNC_TIMESTAMP:
				case UCASE:
				case UNICODE:
				case UNICODE_STR:
				case UNISTR:
				case UPPER:
				case VARBINARY:
				case VARCHAR:
				case VARCHAR9:
				case VARCHAR_BIT_FORMAT:
				case VARCHAR_FORMAT:
				case VARGRAPHIC:
				case VERIFY_GROUP_FOR_USER:
				case VERIFY_ROLE_FOR_USER:
				case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
				case WEEK:
				case WEEK_ISO:
				case WRAP:
				case XMLATTRIBUTES:
				case XMLCOMMENT:
				case XMLCONCAT:
				case XMLDOCUMENT:
				case XMLELEMENT:
				case XMLFOREST:
				case XMLMODIFY:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLSERIALIZE:
				case XMLTEXT:
				case XMLXSROBJECTID:
				case XSLTRANSFORM:
				case CURRENT_ACCELERATOR:
				case CURRENT_APPLICATION_COMPATIBILITY:
				case CURRENT_APPLICATION_ENCODING_SCHEME:
				case CURRENT_CLIENT_ACCTNG:
				case CURRENT_CLIENT_APPLNAME:
				case CURRENT_CLIENT_CORR_TOKEN:
				case CURRENT_CLIENT_USERID:
				case CURRENT_CLIENT_WRKSTNNAME:
				case CURRENT_DATE:
				case CURRENT_DEBUG_MODE:
				case CURRENT_DECFLOAT_ROUNDING_MODE:
				case CURRENT_DEGREE:
				case CURRENT_EXPLAIN_MODE:
				case CURRENT_GET_ACCEL_ARCHIVE:
				case CURRENT_LOCALE_LC_CTYPE:
				case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
				case CURRENT_MEMBER:
				case CURRENT_OPTIMIZATION_HINT:
				case CURRENT_PACKAGE_PATH:
				case CURRENT_PACKAGESET:
				case CURRENT_PATH:
				case CURRENT_PRECISION:
				case CURRENT_QUERY_ACCELERATION:
				case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
				case CURRENT_REFRESH_AGE:
				case CURRENT_ROUTINE_VERSION:
				case CURRENT_RULES:
				case CURRENT_SCHEMA:
				case CURRENT_SERVER:
				case CURRENT_SQLID:
				case CURRENT_TEMPORAL_BUSINESS_TIME:
				case CURRENT_TEMPORAL_SYSTEM_TIME:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case CURRENT_TIME_ZONE:
				case ENCRYPTION_PASSWORD:
				case SESSION_TIME_ZONE:
				case SESSION_USER:
				case USER:
				case ADMIN_TASK_LIST:
				case ADMIN_TASK_OUTPUT:
				case ADMIN_TASK_STATUS:
				case BLOCKING_THREADS:
				case MQREADALL:
				case MQREADALLCLOB:
				case MQRECEIVEALL:
				case MQRECEIVEALLCLOB:
				case XMLTABLE:
				case SQLIDENTIFIER:
					{
					setState(4827);
					variableName();
					}
					break;
				case COLON:
					{
					setState(4828);
					hostVariable();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4838);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4831);
					match(COMMA);
					setState(4834);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case INSTEAD:
					case NEW:
					case NEW_TABLE:
					case OLD_TABLE:
					case REFERENCING:
					case BASED:
					case UPON:
					case ADD:
					case AFTER:
					case ALL:
					case ALLOCATE:
					case ALLOW:
					case ALTER:
					case ALTERAND:
					case ANY:
					case ARRAY:
					case ARRAY_EXISTS:
					case AS:
					case ASENSITIVE:
					case ASSOCIATE:
					case ASUTIME:
					case AT:
					case AUDIT:
					case AUX:
					case AUXILIARY:
					case BEFORE:
					case BEGIN:
					case BETWEEN:
					case BUFFERPOOL:
					case BUFFERPOOLS:
					case BY:
					case CALL:
					case CAPTURE:
					case CASCADED:
					case CASE:
					case CAST:
					case CCSID:
					case CHAR:
					case CHARACTER:
					case CHECK:
					case CLONE:
					case CLOSE:
					case CLUSTER:
					case COLLECTION:
					case COLLID:
					case COLUMN:
					case COMMENT:
					case COMMIT:
					case CONCAT:
					case CONDITION:
					case CONNECT:
					case CONNECTION:
					case CONSTRAINT:
					case CONTAINS:
					case CONTENT:
					case CONTINUE:
					case CREATE:
					case CUBE:
					case CURRENT:
					case CURRENT_LC_CTYPE:
					case CURRVAL:
					case CURSOR:
					case DATA:
					case DATABASE:
					case DAY:
					case DAYS:
					case DBINFO:
					case DECLARE:
					case DEFAULT:
					case DELETE:
					case DESCRIPTOR:
					case DETERMINISTIC:
					case DISABLE:
					case DISALLOW:
					case DISTINCT:
					case DO:
					case DOCUMENT:
					case DOUBLE:
					case DROP:
					case DSSIZE:
					case DYNAMIC:
					case EDITPROC:
					case ELSE:
					case ELSEIF:
					case ENCODING:
					case ENCRYPTION:
					case END:
					case END_EXEC:
					case ENDING:
					case ERASE:
					case ESCAPE:
					case EXCEPT:
					case EXCEPTION:
					case EXEC_SQL:
					case EXECUTE:
					case EXISTS:
					case EXIT:
					case EXPLAIN:
					case EXTERNAL:
					case FENCED:
					case FETCH:
					case FIELDPROC:
					case FINAL:
					case FIRST:
					case FOR:
					case FREE:
					case FROM:
					case FULL:
					case FUNCTION:
					case GENERATED:
					case GET:
					case GLOBAL:
					case GO:
					case GOTO:
					case GRANT:
					case GROUP:
					case HANDLER:
					case HAVING:
					case HOLD:
					case HOUR:
					case HOURS:
					case IF:
					case IMMEDIATE:
					case IN:
					case INCLUSIVE:
					case INDEX:
					case INDEXBP:
					case INHERIT:
					case INNER:
					case INOUT:
					case INSENSITIVE:
					case INSERT:
					case INTERSECT:
					case INTO:
					case IS:
					case ISOBID:
					case ITERATE:
					case JAR:
					case JOIN:
					case KEEP:
					case KEY:
					case LABEL:
					case LANGUAGE:
					case LAST:
					case LC_CTYPE:
					case LEAVE:
					case LEFT:
					case LIKE:
					case LIMIT:
					case LOCAL:
					case LOCALE:
					case LOCATOR:
					case LOCATORS:
					case LOCK:
					case LOCKMAX:
					case LOCKSIZE:
					case LONG:
					case LOOP:
					case MAINTAINED:
					case MATERIALIZED:
					case MICROSECOND:
					case MICROSECONDS:
					case MODIFIES:
					case MONTH:
					case MONTHS:
					case NEXT:
					case NEXTVAL:
					case NO:
					case NONE:
					case NOT:
					case NULL:
					case NULLS:
					case NUMPARTS:
					case OBID:
					case OF:
					case OFFSET:
					case OLD:
					case ON:
					case OPEN:
					case OPTIMIZATION:
					case OPTIMIZE:
					case OR:
					case ORDER:
					case ORGANIZATION:
					case OUT:
					case OUTER:
					case PACKAGE:
					case PADDED:
					case PARAMETER:
					case PART:
					case PARTITION:
					case PARTITIONED:
					case PARTITIONING:
					case PATH:
					case PERIOD:
					case PIECESIZE:
					case PLAN:
					case PRECISION:
					case PREPARE:
					case PREVVAL:
					case PRIOR:
					case PRIQTY:
					case PRIVILEGES:
					case PROCEDURE:
					case PROGRAM:
					case PSID:
					case PUBLIC:
					case QUERY:
					case QUERYNO:
					case READS:
					case REFERENCES:
					case REFRESH:
					case RELEASE:
					case RENAME:
					case REPEAT:
					case RESIGNAL:
					case RESTRICT:
					case RESULT:
					case RESULT_SET_LOCATOR:
					case RETURN:
					case RETURNS:
					case REVOKE:
					case RIGHT:
					case ROLE:
					case ROLLBACK:
					case ROLLUP:
					case ROUND_CEILING:
					case ROUND_DOWN:
					case ROUND_FLOOR:
					case ROUND_HALF_DOWN:
					case ROUND_HALF_EVEN:
					case ROUND_HALF_UP:
					case ROUND_UP:
					case ROW:
					case ROWSET:
					case RUN:
					case SAVEPOINT:
					case SCHEMA:
					case SCRATCHPAD:
					case SECOND:
					case SECONDS:
					case SECQTY:
					case SECURITY:
					case SELECT:
					case SENSITIVE:
					case SEQUENCE:
					case SET:
					case SIGNAL:
					case SIMPLE:
					case SOME:
					case SOURCE:
					case SPECIFIC:
					case STANDARD:
					case STATEMENT:
					case STATIC:
					case STAY:
					case STOGROUP:
					case STORES:
					case STYLE:
					case SUMMARY:
					case SYNONYM:
					case SYSDATE:
					case SYSTEM:
					case SYSTIMESTAMP:
					case TABLE:
					case TABLESPACE:
					case THEN:
					case TO:
					case TRIGGER:
					case TRUNCATE:
					case TYPE:
					case UNDO:
					case UNION:
					case UNIQUE:
					case UNTIL:
					case UPDATE:
					case USING:
					case VALIDPROC:
					case VALUE:
					case VALUES:
					case VARIABLE:
					case VARIANT:
					case VCAT:
					case VERSIONING:
					case VIEW:
					case VOLATILE:
					case VOLUMES:
					case WHEN:
					case WHENEVER:
					case WHERE:
					case WHILE:
					case WITH:
					case WLM:
					case XMLCAST:
					case XMLEXISTS:
					case XMLNAMESPACES:
					case YEAR:
					case YEARS:
					case ZONE:
					case AND:
					case ARRAY_AGG:
					case ASC:
					case AVG:
					case BIT:
					case CHANGE:
					case CODEUNITS16:
					case CODEUNITS32:
					case CORR:
					case CORRELATION:
					case COUNT:
					case COUNT_BIG:
					case COVAR:
					case COVARIANCE:
					case COVARIANCE_SAMP:
					case COVAR_POP:
					case COVAR_SAMP:
					case CS:
					case CUME_DIST:
					case DENSE_RANK:
					case DESC:
					case EBCDIC:
					case EXCLUSIVE:
					case FIRST_VALUE:
					case FOLLOWING:
					case GROUPING:
					case IGNORE:
					case INDICATOR:
					case INPUT:
					case ISNULL:
					case LAG:
					case LARGE:
					case LAST_VALUE:
					case LEAD:
					case LISTAGG:
					case LOCKED:
					case LOCKS:
					case MEDIAN:
					case MINUTES:
					case MIXED:
					case NOTNULL:
					case NTH_VALUE:
					case NTILE:
					case NUMERIC:
					case OBJECT:
					case OCTETS:
					case ONLY:
					case OVER:
					case PASSING:
					case PERCENTILE_CONT:
					case PERCENTILE_DISC:
					case PERCENT_RANK:
					case PRECEDING:
					case PREVIOUS:
					case RANGE:
					case RANK:
					case RATIO_TO_REPORT:
					case READ:
					case REF:
					case REGR_AVGX:
					case REGR_AVGY:
					case REGR_COUNT:
					case REGR_ICPT:
					case REGR_INTERCEPT:
					case REGR_R2:
					case REGR_SLOPE:
					case REGR_SXX:
					case REGR_SXY:
					case REGR_SYY:
					case RESPECT:
					case ROW_NUMBER:
					case ROWS:
					case RR:
					case RS:
					case SBCS:
					case SELECTIVITY:
					case SETS:
					case SHARE:
					case SKIP_:
					case STDDEV:
					case STDDEV_POP:
					case STDDEV_SAMP:
					case SUM:
					case TOKEN:
					case UNBOUNDED:
					case UNPACK:
					case UR:
					case USE:
					case VAR:
					case VARIANCE:
					case VARIANCE_SAMP:
					case VAR_POP:
					case VAR_SAMP:
					case VARYING:
					case WITHOUT:
					case XML:
					case XMLAGG:
					case COLUMNS:
					case SQLID:
					case ORDINALITY:
					case SYSTEM_TIME:
					case BUSINESS_TIME:
					case MULTIPLIER:
					case UNNEST:
					case CROSS:
					case CALLER:
					case CLIENT:
					case POSITIONING:
					case SCROLL:
					case ACTION:
					case ASSEMBLE:
					case C_:
					case CALLED:
					case COBOL:
					case DB2:
					case DEFINER:
					case DISPATCH:
					case ENVIRONMENT:
					case FAILURE:
					case FAILURES:
					case JAVA:
					case MAIN:
					case NAME:
					case OPTIONS:
					case PARALLEL:
					case PLI:
					case REGISTERS:
					case RESIDENT:
					case SECURED:
					case SPECIAL:
					case SQL:
					case STOP:
					case SUB:
					case YES:
					case APPLICATION:
					case CHANGED:
					case COMPATIBILITY:
					case COMPRESS:
					case COPY:
					case FREEPAGE:
					case GBPCACHE:
					case INCLUDE:
					case MAXVALUE:
					case MINVALUE:
					case PCTFREE:
					case REGENERATE:
					case MASK:
					case ENABLE:
					case PERMISSION:
					case ATOMIC:
					case SQLEXCEPTION:
					case MERGE:
					case MATCHED:
					case SQLSTATE:
					case MESSAGE_TEXT:
					case OVERRIDING:
					case PORTION:
					case DB2SQL:
					case DEBUG:
					case GENERAL:
					case MODE_:
					case REXX:
					case CACHE:
					case CYCLE:
					case INCREMENT:
					case RESTART:
					case DATACLAS:
					case MGMTCLAS:
					case REMOVE:
					case STORCLAS:
					case ACCESS:
					case ACTIVATE:
					case ALWAYS:
					case APPEND:
					case ARCHIVE:
					case BUSINESS:
					case CASCADE:
					case CHANGES:
					case CONTROL:
					case DEACTIVATE:
					case DEFERRED:
					case EACH:
					case ENFORCED:
					case EXTRA:
					case FOREIGN:
					case HIDDEN_:
					case HISTORY:
					case ID:
					case IDENTITY:
					case IMPLICITLY:
					case INITIALLY:
					case INLINE:
					case OPERATION:
					case ORGANIZE:
					case OVERLAPS:
					case PACKAGE_NAME:
					case PACKAGE_SCHEMA:
					case PACKAGE_VERSION:
					case PRIMARY:
					case RESET:
					case ROTATE:
					case START:
					case SYSIBM:
					case TRANSACTION:
					case XMLSCHEMA:
					case ELEMENT:
					case URL:
					case NAMESPACE:
					case LOCATION:
					case SYSXSR:
					case ALGORITHM:
					case FIXEDLENGTH:
					case HUFFMAN:
					case LOB:
					case LOG:
					case LOGGED:
					case MAXPARTITIONS:
					case MAXROWS:
					case MEMBER:
					case MOVE:
					case PAGE:
					case PAGENUM:
					case PENDING:
					case RELATIVE:
					case SEGSIZE:
					case TRACKMOD:
					case ADDRESS:
					case ATTRIBUTES:
					case AUTHENTICATION:
					case AUTHID:
					case CONTEXT:
					case JOBNAME:
					case OWNER:
					case PROFILE:
					case QUALIFIER:
					case SERVAUTH:
					case TRUSTED:
					case SECTION:
					case ACTIVE:
					case VERSION:
					case ALIAS:
					case WORK:
					case WORKFILE:
					case SYSDEFLT:
					case NULTERM:
					case STRUCTURE:
					case GENERIC:
					case TEMPORARY:
					case DEFER:
					case DEFINE:
					case EXCLUDE:
					case GENERATE:
					case KEYS:
					case XMLPATTERN:
					case SIZE:
					case EVERY:
					case ABSOLUTE:
					case ACCELERATOR:
					case EXCLUDING:
					case INCLUDING:
					case DEFAULTS:
					case MODIFIERS:
					case OPTION:
					case PRESERVE:
					case BOTH:
					case DESCRIBE:
					case LABELS:
					case NAMES:
					case OUTPUT:
					case EXCHANGE:
					case STABILIZED:
					case STMTCACHE:
					case STMTID:
					case STMTTOKEN:
					case STARTING:
					case CATALOG_NAME:
					case CONDITION_NUMBER:
					case CURSOR_NAME:
					case DB2_AUTHENTICATION_TYPE:
					case DB2_AUTHORIZATION_ID:
					case DB2_CONNECTION_STATE:
					case DB2_CONNECTION_STATUS:
					case DB2_ENCRYPTION_TYPE:
					case DB2_ERROR_CODE1:
					case DB2_ERROR_CODE2:
					case DB2_ERROR_CODE3:
					case DB2_ERROR_CODE4:
					case DB2_GET_DIAGNOSTICS_DIAGNOSTICS:
					case DB2_INTERNAL_ERROR_POINTER:
					case DB2_LAST_ROW:
					case DB2_LINE_NUMBER:
					case DB2_MESSAGE_ID:
					case DB2_MODULE_DETECTING_ERROR:
					case DB2_NUMBER_PARAMETER_MARKERS:
					case DB2_NUMBER_RESULT_SETS:
					case DB2_NUMBER_ROWS:
					case DB2_ORDINAL_TOKEN_:
					case DB2_PRODUCT_ID:
					case DB2_REASON_CODE:
					case DB2_RETURNED_SQLCODE:
					case DB2_RETURN_STATUS:
					case DB2_ROW_NUMBER:
					case DB2_SERVER_CLASS_NAME:
					case DB2_SQL_ATTR_CURSOR_HOLD:
					case DB2_SQL_ATTR_CURSOR_ROWSET:
					case DB2_SQL_ATTR_CURSOR_SCROLLABLE:
					case DB2_SQL_ATTR_CURSOR_SENSITIVITY:
					case DB2_SQL_ATTR_CURSOR_TYPE:
					case DB2_SQLERRD1:
					case DB2_SQLERRD2:
					case DB2_SQLERRD3:
					case DB2_SQLERRD4:
					case DB2_SQLERRD5:
					case DB2_SQLERRD6:
					case DB2_SQLERRD_SET:
					case DB2_SQL_NESTING_LEVEL:
					case DB2_TOKEN_COUNT:
					case DIAGNOSTICS:
					case MORE_:
					case NUMBER:
					case RETURNED_SQLSTATE:
					case ROW_COUNT:
					case SERVER_NAME:
					case STACKED:
					case CREATETAB:
					case CREATETS:
					case DBADM:
					case DBCTRL:
					case DBMAINT:
					case DISPLAYDB:
					case IMAGCOPY:
					case LOAD:
					case PACKADM:
					case RECOVERDB:
					case REORG:
					case REPAIR:
					case STARTDB:
					case STATS:
					case STOPDB:
					case BIND:
					case ALTERIN:
					case CREATEIN:
					case DROPIN:
					case USAGE:
					case ACCESSCTRL:
					case BINDADD:
					case BINDAGENT:
					case BSDS:
					case CREATEALIAS:
					case CREATEDBA:
					case CREATEDBC:
					case CREATE_SECURE_OBJECT:
					case CREATESG:
					case CREATETMTAB:
					case DATAACCESS:
					case DEBUGSESSION:
					case DISPLAY:
					case MONITOR1:
					case MONITOR2:
					case RECOVER:
					case SQLADM:
					case STOPALL:
					case STOSPACE:
					case SYSADM:
					case SYSCTRL:
					case SYSOPR:
					case TRACE:
					case UNLOAD:
					case WRITE:
					case ABS:
					case ABSVAL:
					case ACOS:
					case ADD_DAYS:
					case ADD_MONTHS:
					case ARRAY_DELETE:
					case ARRAY_FIRST:
					case ARRAY_LAST:
					case ARRAY_NEXT:
					case ARRAY_PRIOR:
					case ARRAY_TRIM:
					case ASCII:
					case ASCII_CHR:
					case ASCIISTR:
					case ASCII_STR:
					case ASIN:
					case ATAN:
					case ATAN2:
					case ATANH:
					case BIGINT:
					case BINARY:
					case BITAND:
					case BITANDNOT:
					case BITNOT:
					case BITOR:
					case BITXOR:
					case BLOB:
					case BTRIM:
					case CARDINALITY:
					case CCSID_ENCODING:
					case CEIL:
					case CEILING:
					case CHAR9:
					case CHARACTER_LENGTH:
					case CHAR_LENGTH:
					case CHR:
					case CLOB:
					case COALESCE:
					case COLLATION_KEY:
					case COMPARE_DECFLOAT:
					case COS:
					case COSH:
					case DATE:
					case DAYOFMONTH:
					case DAYOFWEEK:
					case DAYOFWEEK_ISO:
					case DAYOFYEAR:
					case DAYS_BETWEEN:
					case DBCLOB:
					case DEC:
					case DECFLOAT:
					case DECFLOAT_FORMAT:
					case DECFLOAT_SORTKEY:
					case DECIMAL:
					case DECODE:
					case DECRYPT_BINARY:
					case DECRYPT_BIT:
					case DECRYPT_CHAR:
					case DECRYPT_DATAKEY_BIGINT:
					case DECRYPT_DATAKEY_BIT:
					case DECRYPT_DATAKEY_CLOB:
					case DECRYPT_DATAKEY_DBCLOB:
					case DECRYPT_DATAKEY_DECIMAL:
					case DECRYPT_DATAKEY_INTEGER:
					case DECRYPT_DATAKEY_VARCHAR:
					case DECRYPT_DATAKEY_VARGRAPHIC:
					case DECRYPT_DB:
					case DEGREES:
					case DIFFERENCE:
					case DIGITS:
					case DOUBLE_PRECISION:
					case DSN_XMLVALIDATE:
					case EBCDIC_CHR:
					case EBCDIC_STR:
					case ENCRYPT_DATAKEY:
					case ENCRYPT_TDES:
					case EXP:
					case EXTRACT:
					case FLOAT:
					case FLOOR:
					case GENERATE_UNIQUE:
					case GENERATE_UNIQUE_BINARY:
					case GETHINT:
					case GETVARIABLE:
					case GRAPHIC:
					case GREATEST:
					case HASH:
					case HASH_CRC32:
					case HASH_MD5:
					case HASH_SHA1:
					case HASH_SHA256:
					case HEX:
					case IDENTITY_VAL_LOCAL:
					case IFNULL:
					case INSTR:
					case INT:
					case INTEGER:
					case JULIAN_DAY:
					case LAST_DAY:
					case LCASE:
					case LEAST:
					case LENGTH:
					case LN:
					case LOCATE:
					case LOCATE_IN_STRING:
					case LOG10:
					case LOWER:
					case LPAD:
					case LTRIM:
					case MAX:
					case MAX_CARDINALITY:
					case MIDNIGHT_SECONDS:
					case MIN:
					case MINUTE:
					case MOD:
					case MONTHS_BETWEEN:
					case MQREAD:
					case MQREADCLOB:
					case MQRECEIVE:
					case MQRECEIVECLOB:
					case MQSEND:
					case MULTIPLY_ALT:
					case NEXT_DAY:
					case NEXT_MONTH:
					case NORMALIZE_DECFLOAT:
					case NORMALIZE_STRING:
					case NULLIF:
					case NVL:
					case OVERLAY:
					case PACK:
					case POSITION:
					case POSSTR:
					case POW:
					case POWER:
					case QUANTIZE:
					case QUARTER:
					case RADIANS:
					case RAISE_ERROR:
					case RAND:
					case RANDOM:
					case REAL:
					case REGEXP_COUNT:
					case REGEXP_INSTR:
					case REGEXP_LIKE:
					case REGEXP_REPLACE:
					case REGEXP_SUBSTR:
					case REPLACE:
					case RID:
					case ROUND:
					case ROUND_TIMESTAMP:
					case ROWID:
					case RPAD:
					case RTRIM:
					case SCORE:
					case SIGN:
					case SIN:
					case SINH:
					case SMALLINT:
					case SOAPHTTPC:
					case SOAPHTTPNC:
					case SOAPHTTPNV:
					case SOAPHTTPV:
					case SOUNDEX:
					case SPACE:
					case SQRT:
					case STRIP:
					case STRLEFT:
					case STRPOS:
					case STRRIGHT:
					case SUBSTR:
					case SUBSTRING:
					case TAN:
					case TANH:
					case TIME:
					case TIMESTAMP:
					case TIMESTAMPADD:
					case TIMESTAMPDIFF:
					case TIMESTAMP_FORMAT:
					case TIMESTAMP_ISO:
					case TIMESTAMP_TZ:
					case TO_CHAR:
					case TO_CLOB:
					case TO_DATE:
					case TO_NUMBER:
					case TOTALORDER:
					case TO_TIMESTAMP:
					case TRANSLATE:
					case TRIM:
					case TRIM_ARRAY:
					case TRUNC:
					case TRUNC_TIMESTAMP:
					case UCASE:
					case UNICODE:
					case UNICODE_STR:
					case UNISTR:
					case UPPER:
					case VARBINARY:
					case VARCHAR:
					case VARCHAR9:
					case VARCHAR_BIT_FORMAT:
					case VARCHAR_FORMAT:
					case VARGRAPHIC:
					case VERIFY_GROUP_FOR_USER:
					case VERIFY_ROLE_FOR_USER:
					case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
					case WEEK:
					case WEEK_ISO:
					case WRAP:
					case XMLATTRIBUTES:
					case XMLCOMMENT:
					case XMLCONCAT:
					case XMLDOCUMENT:
					case XMLELEMENT:
					case XMLFOREST:
					case XMLMODIFY:
					case XMLPARSE:
					case XMLPI:
					case XMLQUERY:
					case XMLSERIALIZE:
					case XMLTEXT:
					case XMLXSROBJECTID:
					case XSLTRANSFORM:
					case CURRENT_ACCELERATOR:
					case CURRENT_APPLICATION_COMPATIBILITY:
					case CURRENT_APPLICATION_ENCODING_SCHEME:
					case CURRENT_CLIENT_ACCTNG:
					case CURRENT_CLIENT_APPLNAME:
					case CURRENT_CLIENT_CORR_TOKEN:
					case CURRENT_CLIENT_USERID:
					case CURRENT_CLIENT_WRKSTNNAME:
					case CURRENT_DATE:
					case CURRENT_DEBUG_MODE:
					case CURRENT_DECFLOAT_ROUNDING_MODE:
					case CURRENT_DEGREE:
					case CURRENT_EXPLAIN_MODE:
					case CURRENT_GET_ACCEL_ARCHIVE:
					case CURRENT_LOCALE_LC_CTYPE:
					case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
					case CURRENT_MEMBER:
					case CURRENT_OPTIMIZATION_HINT:
					case CURRENT_PACKAGE_PATH:
					case CURRENT_PACKAGESET:
					case CURRENT_PATH:
					case CURRENT_PRECISION:
					case CURRENT_QUERY_ACCELERATION:
					case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
					case CURRENT_REFRESH_AGE:
					case CURRENT_ROUTINE_VERSION:
					case CURRENT_RULES:
					case CURRENT_SCHEMA:
					case CURRENT_SERVER:
					case CURRENT_SQLID:
					case CURRENT_TEMPORAL_BUSINESS_TIME:
					case CURRENT_TEMPORAL_SYSTEM_TIME:
					case CURRENT_TIME:
					case CURRENT_TIMESTAMP:
					case CURRENT_TIME_ZONE:
					case ENCRYPTION_PASSWORD:
					case SESSION_TIME_ZONE:
					case SESSION_USER:
					case USER:
					case ADMIN_TASK_LIST:
					case ADMIN_TASK_OUTPUT:
					case ADMIN_TASK_STATUS:
					case BLOCKING_THREADS:
					case MQREADALL:
					case MQREADALLCLOB:
					case MQRECEIVEALL:
					case MQRECEIVEALLCLOB:
					case XMLTABLE:
					case SQLIDENTIFIER:
						{
						setState(4832);
						variableName();
						}
						break;
					case COLON:
						{
						setState(4833);
						hostVariable();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					setState(4840);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4841);
				match(RPAREN);
				setState(4842);
				match(EQ);
				setState(4843);
				match(LPAREN);
				setState(4870);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,505,_ctx) ) {
				case 1:
					{
					setState(4853);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,503,_ctx) ) {
					case 1:
						{
						{
						setState(4844);
						valuesList1();
						setState(4849);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(4845);
							match(COMMA);
							setState(4846);
							valuesList1();
							}
							}
							setState(4851);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						}
						break;
					case 2:
						{
						setState(4852);
						fullSelect();
						}
						break;
					}
					}
					break;
				case 2:
					{
					setState(4855);
					subSelect();
					}
					break;
				case 3:
					{
					{
					setState(4856);
					match(VALUES);
					setState(4857);
					valuesList1();
					}
					}
					break;
				case 4:
					{
					{
					setState(4858);
					match(VALUES);
					setState(4859);
					match(LPAREN);
					setState(4860);
					valuesList1();
					setState(4865);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(4861);
						match(COMMA);
						setState(4862);
						valuesList1();
						}
						}
						setState(4867);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(4868);
					match(RPAREN);
					}
					}
					break;
				}
				setState(4872);
				match(RPAREN);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AssignmentClauseContext extends ParserRuleContext {
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public List<TerminalNode> EQ() { return getTokens(DB2zSQLParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(DB2zSQLParser.EQ, i);
		}
		public List<ValuesList1Context> valuesList1() {
			return getRuleContexts(ValuesList1Context.class);
		}
		public ValuesList1Context valuesList1(int i) {
			return getRuleContext(ValuesList1Context.class,i);
		}
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public FullSelectContext fullSelect() {
			return getRuleContext(FullSelectContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public AssignmentClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignmentClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAssignmentClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAssignmentClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAssignmentClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AssignmentClauseContext assignmentClause() throws RecognitionException {
		AssignmentClauseContext _localctx = new AssignmentClauseContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_assignmentClause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4914);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,511,_ctx) ) {
			case 1:
				{
				{
				setState(4876);
				columnName();
				setState(4877);
				match(EQ);
				setState(4878);
				valuesList1();
				setState(4886);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,507,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4879);
						match(COMMA);
						setState(4880);
						columnName();
						setState(4881);
						match(EQ);
						setState(4882);
						valuesList1();
						}
						} 
					}
					setState(4888);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,507,_ctx);
				}
				}
				}
				break;
			case 2:
				{
				setState(4910);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,510,_ctx) ) {
				case 1:
					{
					setState(4889);
					match(LPAREN);
					setState(4890);
					columnName();
					setState(4895);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(4891);
						match(COMMA);
						setState(4892);
						columnName();
						}
						}
						setState(4897);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(4898);
					match(RPAREN);
					setState(4899);
					match(EQ);
					setState(4900);
					match(LPAREN);
					{
					setState(4901);
					valuesList1();
					setState(4906);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(4902);
						match(COMMA);
						setState(4903);
						valuesList1();
						}
						}
						setState(4908);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					}
					break;
				case 2:
					{
					setState(4909);
					fullSelect();
					}
					break;
				}
				setState(4912);
				match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateOperationContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(DB2zSQLParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public List<AssignmentClauseContext> assignmentClause() {
			return getRuleContexts(AssignmentClauseContext.class);
		}
		public AssignmentClauseContext assignmentClause(int i) {
			return getRuleContext(AssignmentClauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public UpdateOperationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateOperation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterUpdateOperation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitUpdateOperation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitUpdateOperation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateOperationContext updateOperation() throws RecognitionException {
		UpdateOperationContext _localctx = new UpdateOperationContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_updateOperation);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4916);
			match(UPDATE);
			setState(4917);
			match(SET);
			setState(4918);
			assignmentClause();
			setState(4923);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,512,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4919);
					match(COMMA);
					setState(4920);
					assignmentClause();
					}
					} 
				}
				setState(4925);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,512,_ctx);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeleteOperationContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(DB2zSQLParser.DELETE, 0); }
		public DeleteOperationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deleteOperation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDeleteOperation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDeleteOperation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDeleteOperation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeleteOperationContext deleteOperation() throws RecognitionException {
		DeleteOperationContext _localctx = new DeleteOperationContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_deleteOperation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4926);
			match(DELETE);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertOperationContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(DB2zSQLParser.INSERT, 0); }
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public TerminalNode VALUES() { return getToken(DB2zSQLParser.VALUES, 0); }
		public List<ValuesList1Context> valuesList1() {
			return getRuleContexts(ValuesList1Context.class);
		}
		public ValuesList1Context valuesList1(int i) {
			return getRuleContext(ValuesList1Context.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public InsertOperationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertOperation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterInsertOperation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitInsertOperation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitInsertOperation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertOperationContext insertOperation() throws RecognitionException {
		InsertOperationContext _localctx = new InsertOperationContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_insertOperation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4928);
			match(INSERT);
			setState(4929);
			match(LPAREN);
			setState(4930);
			columnName();
			setState(4935);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4931);
				match(COMMA);
				setState(4932);
				columnName();
				}
				}
				setState(4937);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4938);
			match(RPAREN);
			setState(4939);
			match(VALUES);
			setState(4952);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,515,_ctx) ) {
			case 1:
				{
				setState(4940);
				valuesList1();
				}
				break;
			case 2:
				{
				{
				setState(4941);
				match(LPAREN);
				setState(4942);
				valuesList1();
				setState(4947);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4943);
					match(COMMA);
					setState(4944);
					valuesList1();
					}
					}
					setState(4949);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4950);
				match(RPAREN);
				}
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignalStatementContext extends ParserRuleContext {
		public TerminalNode SIGNAL() { return getToken(DB2zSQLParser.SIGNAL, 0); }
		public TerminalNode SQLSTATE() { return getToken(DB2zSQLParser.SQLSTATE, 0); }
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public TerminalNode VALUE() { return getToken(DB2zSQLParser.VALUE, 0); }
		public SignalInformationContext signalInformation() {
			return getRuleContext(SignalInformationContext.class,0);
		}
		public SignalStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signalStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSignalStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSignalStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSignalStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignalStatementContext signalStatement() throws RecognitionException {
		SignalStatementContext _localctx = new SignalStatementContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_signalStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4954);
			match(SIGNAL);
			setState(4955);
			match(SQLSTATE);
			setState(4957);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VALUE) {
				{
				setState(4956);
				match(VALUE);
				}
			}

			setState(4959);
			match(NONNUMERICLITERAL);
			setState(4961);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LPAREN || _la==SET) {
				{
				setState(4960);
				signalInformation();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignalInformationContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public TerminalNode MESSAGE_TEXT() { return getToken(DB2zSQLParser.MESSAGE_TEXT, 0); }
		public TerminalNode EQ() { return getToken(DB2zSQLParser.EQ, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<OperatorContext> operator() {
			return getRuleContexts(OperatorContext.class);
		}
		public OperatorContext operator(int i) {
			return getRuleContext(OperatorContext.class,i);
		}
		public SignalInformationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signalInformation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSignalInformation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSignalInformation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSignalInformation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignalInformationContext signalInformation() throws RecognitionException {
		SignalInformationContext _localctx = new SignalInformationContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_signalInformation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4978);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				{
				{
				setState(4963);
				match(SET);
				setState(4964);
				match(MESSAGE_TEXT);
				setState(4965);
				match(EQ);
				setState(4966);
				expression();
				setState(4972);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << MINUS) | (1L << SPLAT) | (1L << SLASH) | (1L << CONCATOP))) != 0) || _la==CONCAT) {
					{
					{
					setState(4967);
					operator();
					setState(4968);
					expression();
					}
					}
					setState(4974);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case LPAREN:
				{
				{
				setState(4975);
				match(LPAREN);
				setState(4976);
				match(NONNUMERICLITERAL);
				setState(4977);
				match(RPAREN);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValuesList1Context extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(DB2zSQLParser.DEFAULT, 0); }
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<OperatorContext> operator() {
			return getRuleContexts(OperatorContext.class);
		}
		public OperatorContext operator(int i) {
			return getRuleContext(OperatorContext.class,i);
		}
		public ValuesList1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valuesList1; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterValuesList1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitValuesList1(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitValuesList1(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValuesList1Context valuesList1() throws RecognitionException {
		ValuesList1Context _localctx = new ValuesList1Context(_ctx, getState());
		enterRule(_localctx, 566, RULE_valuesList1);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4991);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,521,_ctx) ) {
			case 1:
				{
				{
				setState(4980);
				expression();
				setState(4986);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << MINUS) | (1L << SPLAT) | (1L << SLASH) | (1L << CONCATOP))) != 0) || _la==CONCAT) {
					{
					{
					setState(4981);
					operator();
					setState(4982);
					expression();
					}
					}
					setState(4988);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case 2:
				{
				setState(4989);
				match(DEFAULT);
				}
				break;
			case 3:
				{
				setState(4990);
				match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValuesList2Context extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(DB2zSQLParser.DEFAULT, 0); }
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public ValuesList2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valuesList2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterValuesList2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitValuesList2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitValuesList2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValuesList2Context valuesList2() throws RecognitionException {
		ValuesList2Context _localctx = new ValuesList2Context(_ctx, getState());
		enterRule(_localctx, 568, RULE_valuesList2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4997);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,522,_ctx) ) {
			case 1:
				{
				setState(4993);
				expression();
				}
				break;
			case 2:
				{
				setState(4994);
				hostVariable();
				}
				break;
			case 3:
				{
				setState(4995);
				match(DEFAULT);
				}
				break;
			case 4:
				{
				setState(4996);
				match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValuesList3Context extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public ValuesList3Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valuesList3; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterValuesList3(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitValuesList3(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitValuesList3(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValuesList3Context valuesList3() throws RecognitionException {
		ValuesList3Context _localctx = new ValuesList3Context(_ctx, getState());
		enterRule(_localctx, 570, RULE_valuesList3);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5001);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,523,_ctx) ) {
			case 1:
				{
				setState(4999);
				expression();
				}
				break;
			case 2:
				{
				setState(5000);
				match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValuesList4Context extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public ValuesList4Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valuesList4; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterValuesList4(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitValuesList4(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitValuesList4(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValuesList4Context valuesList4() throws RecognitionException {
		ValuesList4Context _localctx = new ValuesList4Context(_ctx, getState());
		enterRule(_localctx, 572, RULE_valuesList4);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5006);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,524,_ctx) ) {
			case 1:
				{
				setState(5003);
				expression();
				}
				break;
			case 2:
				{
				setState(5004);
				hostVariable();
				}
				break;
			case 3:
				{
				setState(5005);
				match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IncludeColumnsContext extends ParserRuleContext {
		public TerminalNode INCLUDE() { return getToken(DB2zSQLParser.INCLUDE, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public List<DataTypeContext> dataType() {
			return getRuleContexts(DataTypeContext.class);
		}
		public DataTypeContext dataType(int i) {
			return getRuleContext(DataTypeContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public IncludeColumnsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_includeColumns; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterIncludeColumns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitIncludeColumns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitIncludeColumns(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IncludeColumnsContext includeColumns() throws RecognitionException {
		IncludeColumnsContext _localctx = new IncludeColumnsContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_includeColumns);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5008);
			match(INCLUDE);
			setState(5009);
			match(LPAREN);
			setState(5010);
			columnName();
			setState(5011);
			dataType();
			setState(5018);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5012);
				match(COMMA);
				setState(5013);
				columnName();
				setState(5014);
				dataType();
				}
				}
				setState(5020);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5021);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultipleRowInsertContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(DB2zSQLParser.VALUES, 0); }
		public List<ValuesList2Context> valuesList2() {
			return getRuleContexts(ValuesList2Context.class);
		}
		public ValuesList2Context valuesList2(int i) {
			return getRuleContext(ValuesList2Context.class,i);
		}
		public TerminalNode ATOMIC() { return getToken(DB2zSQLParser.ATOMIC, 0); }
		public NotAtomicPhraseContext notAtomicPhrase() {
			return getRuleContext(NotAtomicPhraseContext.class,0);
		}
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode ROWS() { return getToken(DB2zSQLParser.ROWS, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public MultipleRowInsertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipleRowInsert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterMultipleRowInsert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitMultipleRowInsert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitMultipleRowInsert(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultipleRowInsertContext multipleRowInsert() throws RecognitionException {
		MultipleRowInsertContext _localctx = new MultipleRowInsertContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_multipleRowInsert);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5023);
			match(VALUES);
			setState(5036);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,527,_ctx) ) {
			case 1:
				{
				setState(5024);
				valuesList2();
				}
				break;
			case 2:
				{
				{
				setState(5025);
				match(LPAREN);
				setState(5026);
				valuesList2();
				setState(5031);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5027);
					match(COMMA);
					setState(5028);
					valuesList2();
					}
					}
					setState(5033);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5034);
				match(RPAREN);
				}
				}
				break;
			}
			setState(5044);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(5038);
				match(FOR);
				setState(5041);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case COLON:
					{
					setState(5039);
					hostVariable();
					}
					break;
				case INTEGERLITERAL:
					{
					setState(5040);
					match(INTEGERLITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5043);
				match(ROWS);
				}
			}

			setState(5048);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ATOMIC:
				{
				setState(5046);
				match(ATOMIC);
				}
				break;
			case NOT:
				{
				setState(5047);
				notAtomicPhrase();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RegenerateClauseContext extends ParserRuleContext {
		public TerminalNode REGENERATE() { return getToken(DB2zSQLParser.REGENERATE, 0); }
		public TerminalNode USING() { return getToken(DB2zSQLParser.USING, 0); }
		public TerminalNode APPLICATION() { return getToken(DB2zSQLParser.APPLICATION, 0); }
		public TerminalNode COMPATIBILITY() { return getToken(DB2zSQLParser.COMPATIBILITY, 0); }
		public ApplCompatValueContext applCompatValue() {
			return getRuleContext(ApplCompatValueContext.class,0);
		}
		public RegenerateClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regenerateClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRegenerateClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRegenerateClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRegenerateClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RegenerateClauseContext regenerateClause() throws RecognitionException {
		RegenerateClauseContext _localctx = new RegenerateClauseContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_regenerateClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5050);
			match(REGENERATE);
			setState(5055);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,531,_ctx) ) {
			case 1:
				{
				setState(5051);
				match(USING);
				setState(5052);
				match(APPLICATION);
				setState(5053);
				match(COMPATIBILITY);
				setState(5054);
				applCompatValue();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterIndexOptionsContext extends ParserRuleContext {
		public BufferpoolOptionContext bufferpoolOption() {
			return getRuleContext(BufferpoolOptionContext.class,0);
		}
		public CloseOptionContext closeOption() {
			return getRuleContext(CloseOptionContext.class,0);
		}
		public CopyOptionContext copyOption() {
			return getRuleContext(CopyOptionContext.class,0);
		}
		public DssizeOptionContext dssizeOption() {
			return getRuleContext(DssizeOptionContext.class,0);
		}
		public PiecesizeOptionContext piecesizeOption() {
			return getRuleContext(PiecesizeOptionContext.class,0);
		}
		public UsingSpecification1Context usingSpecification1() {
			return getRuleContext(UsingSpecification1Context.class,0);
		}
		public FreeSpecificationContext freeSpecification() {
			return getRuleContext(FreeSpecificationContext.class,0);
		}
		public GbpcacheSpecificationContext gbpcacheSpecification() {
			return getRuleContext(GbpcacheSpecificationContext.class,0);
		}
		public ClusterOptionContext clusterOption() {
			return getRuleContext(ClusterOptionContext.class,0);
		}
		public PaddedOptionContext paddedOption() {
			return getRuleContext(PaddedOptionContext.class,0);
		}
		public CompressOptionContext compressOption() {
			return getRuleContext(CompressOptionContext.class,0);
		}
		public TerminalNode ADD() { return getToken(DB2zSQLParser.ADD, 0); }
		public TerminalNode COLUMN() { return getToken(DB2zSQLParser.COLUMN, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode INCLUDE() { return getToken(DB2zSQLParser.INCLUDE, 0); }
		public TerminalNode ASC() { return getToken(DB2zSQLParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(DB2zSQLParser.DESC, 0); }
		public TerminalNode RANDOM() { return getToken(DB2zSQLParser.RANDOM, 0); }
		public AlterIndexOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterIndexOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterIndexOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterIndexOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterIndexOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterIndexOptionsContext alterIndexOptions() throws RecognitionException {
		AlterIndexOptionsContext _localctx = new AlterIndexOptionsContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_alterIndexOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5085);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,534,_ctx) ) {
			case 1:
				{
				setState(5057);
				bufferpoolOption();
				}
				break;
			case 2:
				{
				setState(5058);
				closeOption();
				}
				break;
			case 3:
				{
				setState(5059);
				copyOption();
				}
				break;
			case 4:
				{
				setState(5060);
				dssizeOption();
				}
				break;
			case 5:
				{
				setState(5061);
				piecesizeOption();
				}
				break;
			case 6:
				{
				setState(5062);
				usingSpecification1();
				}
				break;
			case 7:
				{
				setState(5063);
				freeSpecification();
				}
				break;
			case 8:
				{
				setState(5064);
				gbpcacheSpecification();
				}
				break;
			case 9:
				{
				setState(5065);
				clusterOption();
				}
				break;
			case 10:
				{
				setState(5066);
				paddedOption();
				}
				break;
			case 11:
				{
				setState(5067);
				compressOption();
				}
				break;
			case 12:
				{
				{
				setState(5068);
				match(ADD);
				setState(5083);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case COLUMN:
					{
					{
					setState(5069);
					match(COLUMN);
					setState(5070);
					match(LPAREN);
					setState(5071);
					columnName();
					setState(5073);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ASC || _la==DESC || _la==RANDOM) {
						{
						setState(5072);
						_la = _input.LA(1);
						if ( !(_la==ASC || _la==DESC || _la==RANDOM) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(5075);
					match(RPAREN);
					}
					}
					break;
				case INCLUDE:
					{
					{
					setState(5077);
					match(INCLUDE);
					setState(5078);
					match(COLUMN);
					setState(5079);
					match(LPAREN);
					setState(5080);
					columnName();
					setState(5081);
					match(RPAREN);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BufferpoolOptionContext extends ParserRuleContext {
		public TerminalNode BUFFERPOOL() { return getToken(DB2zSQLParser.BUFFERPOOL, 0); }
		public BpNameContext bpName() {
			return getRuleContext(BpNameContext.class,0);
		}
		public BufferpoolOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bufferpoolOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterBufferpoolOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitBufferpoolOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitBufferpoolOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BufferpoolOptionContext bufferpoolOption() throws RecognitionException {
		BufferpoolOptionContext _localctx = new BufferpoolOptionContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_bufferpoolOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5087);
			match(BUFFERPOOL);
			setState(5088);
			bpName();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CloseOptionContext extends ParserRuleContext {
		public TerminalNode CLOSE() { return getToken(DB2zSQLParser.CLOSE, 0); }
		public TerminalNode YES() { return getToken(DB2zSQLParser.YES, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public CloseOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_closeOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCloseOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCloseOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCloseOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CloseOptionContext closeOption() throws RecognitionException {
		CloseOptionContext _localctx = new CloseOptionContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_closeOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5090);
			match(CLOSE);
			setState(5091);
			_la = _input.LA(1);
			if ( !(_la==NO || _la==YES) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyOptionContext extends ParserRuleContext {
		public TerminalNode COPY() { return getToken(DB2zSQLParser.COPY, 0); }
		public TerminalNode YES() { return getToken(DB2zSQLParser.YES, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public CopyOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCopyOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCopyOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCopyOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyOptionContext copyOption() throws RecognitionException {
		CopyOptionContext _localctx = new CopyOptionContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_copyOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5093);
			match(COPY);
			setState(5094);
			_la = _input.LA(1);
			if ( !(_la==NO || _la==YES) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DssizeOptionContext extends ParserRuleContext {
		public TerminalNode DSSIZE() { return getToken(DB2zSQLParser.DSSIZE, 0); }
		public TerminalNode SQLIDENTIFIER() { return getToken(DB2zSQLParser.SQLIDENTIFIER, 0); }
		public DssizeOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dssizeOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDssizeOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDssizeOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDssizeOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DssizeOptionContext dssizeOption() throws RecognitionException {
		DssizeOptionContext _localctx = new DssizeOptionContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_dssizeOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5096);
			match(DSSIZE);
			setState(5097);
			match(SQLIDENTIFIER);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PiecesizeOptionContext extends ParserRuleContext {
		public TerminalNode PIECESIZE() { return getToken(DB2zSQLParser.PIECESIZE, 0); }
		public TerminalNode SQLIDENTIFIER() { return getToken(DB2zSQLParser.SQLIDENTIFIER, 0); }
		public PiecesizeOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_piecesizeOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPiecesizeOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPiecesizeOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPiecesizeOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PiecesizeOptionContext piecesizeOption() throws RecognitionException {
		PiecesizeOptionContext _localctx = new PiecesizeOptionContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_piecesizeOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5099);
			match(PIECESIZE);
			setState(5100);
			match(SQLIDENTIFIER);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ClusterOptionContext extends ParserRuleContext {
		public TerminalNode CLUSTER() { return getToken(DB2zSQLParser.CLUSTER, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public ClusterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_clusterOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterClusterOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitClusterOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitClusterOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ClusterOptionContext clusterOption() throws RecognitionException {
		ClusterOptionContext _localctx = new ClusterOptionContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_clusterOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5103);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(5102);
				match(NOT);
				}
			}

			setState(5105);
			match(CLUSTER);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PaddedOptionContext extends ParserRuleContext {
		public TerminalNode PADDED() { return getToken(DB2zSQLParser.PADDED, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public PaddedOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_paddedOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPaddedOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPaddedOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPaddedOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PaddedOptionContext paddedOption() throws RecognitionException {
		PaddedOptionContext _localctx = new PaddedOptionContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_paddedOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5108);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(5107);
				match(NOT);
				}
			}

			setState(5110);
			match(PADDED);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CompressOptionContext extends ParserRuleContext {
		public TerminalNode COMPRESS() { return getToken(DB2zSQLParser.COMPRESS, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode YES() { return getToken(DB2zSQLParser.YES, 0); }
		public TerminalNode FIXEDLENGTH() { return getToken(DB2zSQLParser.FIXEDLENGTH, 0); }
		public TerminalNode HUFFMAN() { return getToken(DB2zSQLParser.HUFFMAN, 0); }
		public CompressOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compressOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCompressOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCompressOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCompressOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CompressOptionContext compressOption() throws RecognitionException {
		CompressOptionContext _localctx = new CompressOptionContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_compressOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5112);
			match(COMPRESS);
			setState(5118);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case YES:
				{
				{
				setState(5113);
				match(YES);
				setState(5115);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FIXEDLENGTH || _la==HUFFMAN) {
					{
					setState(5114);
					_la = _input.LA(1);
					if ( !(_la==FIXEDLENGTH || _la==HUFFMAN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				}
				break;
			case NO:
				{
				setState(5117);
				match(NO);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefineOptionContext extends ParserRuleContext {
		public TerminalNode DEFINE() { return getToken(DB2zSQLParser.DEFINE, 0); }
		public TerminalNode YES() { return getToken(DB2zSQLParser.YES, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public DefineOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defineOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDefineOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDefineOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDefineOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefineOptionContext defineOption() throws RecognitionException {
		DefineOptionContext _localctx = new DefineOptionContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_defineOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5120);
			match(DEFINE);
			setState(5121);
			_la = _input.LA(1);
			if ( !(_la==NO || _la==YES) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LocksizeOptionContext extends ParserRuleContext {
		public TerminalNode LOCKSIZE() { return getToken(DB2zSQLParser.LOCKSIZE, 0); }
		public TerminalNode ANY() { return getToken(DB2zSQLParser.ANY, 0); }
		public TerminalNode TABLESPACE() { return getToken(DB2zSQLParser.TABLESPACE, 0); }
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public TerminalNode PAGE() { return getToken(DB2zSQLParser.PAGE, 0); }
		public TerminalNode ROW() { return getToken(DB2zSQLParser.ROW, 0); }
		public TerminalNode LOB() { return getToken(DB2zSQLParser.LOB, 0); }
		public LocksizeOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_locksizeOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterLocksizeOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitLocksizeOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitLocksizeOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LocksizeOptionContext locksizeOption() throws RecognitionException {
		LocksizeOptionContext _localctx = new LocksizeOptionContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_locksizeOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5123);
			match(LOCKSIZE);
			setState(5124);
			_la = _input.LA(1);
			if ( !(_la==ANY || ((((_la - 264)) & ~0x3f) == 0 && ((1L << (_la - 264)) & ((1L << (ROW - 264)) | (1L << (TABLE - 264)) | (1L << (TABLESPACE - 264)))) != 0) || _la==LOB || _la==PAGE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockmaxOptionContext extends ParserRuleContext {
		public TerminalNode LOCKMAX() { return getToken(DB2zSQLParser.LOCKMAX, 0); }
		public TerminalNode SYSTEM() { return getToken(DB2zSQLParser.SYSTEM, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public LockmaxOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockmaxOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterLockmaxOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitLockmaxOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitLockmaxOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockmaxOptionContext lockmaxOption() throws RecognitionException {
		LockmaxOptionContext _localctx = new LockmaxOptionContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_lockmaxOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5126);
			match(LOCKMAX);
			setState(5127);
			_la = _input.LA(1);
			if ( !(_la==INTEGERLITERAL || _la==SYSTEM) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EnableDisableOptionContext extends ParserRuleContext {
		public TerminalNode ENABLE() { return getToken(DB2zSQLParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(DB2zSQLParser.DISABLE, 0); }
		public EnableDisableOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enableDisableOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterEnableDisableOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitEnableDisableOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitEnableDisableOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EnableDisableOptionContext enableDisableOption() throws RecognitionException {
		EnableDisableOptionContext _localctx = new EnableDisableOptionContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_enableDisableOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5129);
			_la = _input.LA(1);
			if ( !(_la==DISABLE || _la==ENABLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoggedOptionContext extends ParserRuleContext {
		public TerminalNode LOGGED() { return getToken(DB2zSQLParser.LOGGED, 0); }
		public TerminalNode LOG() { return getToken(DB2zSQLParser.LOG, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode YES() { return getToken(DB2zSQLParser.YES, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public LoggedOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loggedOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterLoggedOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitLoggedOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitLoggedOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoggedOptionContext loggedOption() throws RecognitionException {
		LoggedOptionContext _localctx = new LoggedOptionContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_loggedOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5139);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,540,_ctx) ) {
			case 1:
				{
				{
				setState(5132);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(5131);
					match(NOT);
					}
				}

				setState(5134);
				match(LOGGED);
				}
				}
				break;
			case 2:
				{
				{
				setState(5135);
				match(LOG);
				setState(5136);
				match(NO);
				}
				}
				break;
			case 3:
				{
				{
				setState(5137);
				match(LOG);
				setState(5138);
				match(YES);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NotAtomicPhraseContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TerminalNode ATOMIC() { return getToken(DB2zSQLParser.ATOMIC, 0); }
		public TerminalNode CONTINUE() { return getToken(DB2zSQLParser.CONTINUE, 0); }
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public TerminalNode SQLEXCEPTION() { return getToken(DB2zSQLParser.SQLEXCEPTION, 0); }
		public NotAtomicPhraseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notAtomicPhrase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterNotAtomicPhrase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitNotAtomicPhrase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitNotAtomicPhrase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NotAtomicPhraseContext notAtomicPhrase() throws RecognitionException {
		NotAtomicPhraseContext _localctx = new NotAtomicPhraseContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_notAtomicPhrase);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5141);
			match(NOT);
			setState(5142);
			match(ATOMIC);
			setState(5143);
			match(CONTINUE);
			setState(5144);
			match(ON);
			setState(5145);
			match(SQLEXCEPTION);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterIndexPartitionOptionsContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public PartitionElementContext partitionElement() {
			return getRuleContext(PartitionElementContext.class,0);
		}
		public List<GbpcacheSpecificationContext> gbpcacheSpecification() {
			return getRuleContexts(GbpcacheSpecificationContext.class);
		}
		public GbpcacheSpecificationContext gbpcacheSpecification(int i) {
			return getRuleContext(GbpcacheSpecificationContext.class,i);
		}
		public List<DssizeOptionContext> dssizeOption() {
			return getRuleContexts(DssizeOptionContext.class);
		}
		public DssizeOptionContext dssizeOption(int i) {
			return getRuleContext(DssizeOptionContext.class,i);
		}
		public List<UsingSpecification1Context> usingSpecification1() {
			return getRuleContexts(UsingSpecification1Context.class);
		}
		public UsingSpecification1Context usingSpecification1(int i) {
			return getRuleContext(UsingSpecification1Context.class,i);
		}
		public List<FreeSpecificationContext> freeSpecification() {
			return getRuleContexts(FreeSpecificationContext.class);
		}
		public FreeSpecificationContext freeSpecification(int i) {
			return getRuleContext(FreeSpecificationContext.class,i);
		}
		public AlterIndexPartitionOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterIndexPartitionOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterIndexPartitionOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterIndexPartitionOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterIndexPartitionOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterIndexPartitionOptionsContext alterIndexPartitionOptions() throws RecognitionException {
		AlterIndexPartitionOptionsContext _localctx = new AlterIndexPartitionOptionsContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_alterIndexPartitionOptions);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5147);
			match(ALTER);
			setState(5148);
			partitionElement();
			setState(5163);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DSSIZE || _la==ERASE || _la==PRIQTY || _la==SECQTY || _la==USING || ((((_la - 469)) & ~0x3f) == 0 && ((1L << (_la - 469)) & ((1L << (FREEPAGE - 469)) | (1L << (GBPCACHE - 469)) | (1L << (PCTFREE - 469)))) != 0)) {
				{
				setState(5161);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ERASE:
				case PRIQTY:
				case SECQTY:
				case USING:
					{
					setState(5150); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(5149);
							usingSpecification1();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(5152); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,541,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				case FREEPAGE:
				case PCTFREE:
					{
					setState(5155); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(5154);
							freeSpecification();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(5157); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,542,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				case GBPCACHE:
					{
					setState(5159);
					gbpcacheSpecification();
					}
					break;
				case DSSIZE:
					{
					setState(5160);
					dssizeOption();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(5165);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UsingSpecification1Context extends ParserRuleContext {
		public TerminalNode USING() { return getToken(DB2zSQLParser.USING, 0); }
		public TerminalNode PRIQTY() { return getToken(DB2zSQLParser.PRIQTY, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode SECQTY() { return getToken(DB2zSQLParser.SECQTY, 0); }
		public TerminalNode ERASE() { return getToken(DB2zSQLParser.ERASE, 0); }
		public TerminalNode YES() { return getToken(DB2zSQLParser.YES, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode VCAT() { return getToken(DB2zSQLParser.VCAT, 0); }
		public CatalogNameContext catalogName() {
			return getRuleContext(CatalogNameContext.class,0);
		}
		public TerminalNode STOGROUP() { return getToken(DB2zSQLParser.STOGROUP, 0); }
		public StogroupNameContext stogroupName() {
			return getRuleContext(StogroupNameContext.class,0);
		}
		public UsingSpecification1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_usingSpecification1; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterUsingSpecification1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitUsingSpecification1(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitUsingSpecification1(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UsingSpecification1Context usingSpecification1() throws RecognitionException {
		UsingSpecification1Context _localctx = new UsingSpecification1Context(_ctx, getState());
		enterRule(_localctx, 612, RULE_usingSpecification1);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5179);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USING:
				{
				{
				setState(5166);
				match(USING);
				setState(5171);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case VCAT:
					{
					{
					setState(5167);
					match(VCAT);
					setState(5168);
					catalogName();
					}
					}
					break;
				case STOGROUP:
					{
					{
					setState(5169);
					match(STOGROUP);
					setState(5170);
					stogroupName();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case PRIQTY:
				{
				{
				setState(5173);
				match(PRIQTY);
				setState(5174);
				match(INTEGERLITERAL);
				}
				}
				break;
			case SECQTY:
				{
				{
				setState(5175);
				match(SECQTY);
				setState(5176);
				match(INTEGERLITERAL);
				}
				}
				break;
			case ERASE:
				{
				{
				setState(5177);
				match(ERASE);
				setState(5178);
				_la = _input.LA(1);
				if ( !(_la==NO || _la==YES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FreeSpecificationContext extends ParserRuleContext {
		public TerminalNode FREEPAGE() { return getToken(DB2zSQLParser.FREEPAGE, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode PCTFREE() { return getToken(DB2zSQLParser.PCTFREE, 0); }
		public FreeSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_freeSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFreeSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFreeSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFreeSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FreeSpecificationContext freeSpecification() throws RecognitionException {
		FreeSpecificationContext _localctx = new FreeSpecificationContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_freeSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5185);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FREEPAGE:
				{
				{
				setState(5181);
				match(FREEPAGE);
				setState(5182);
				match(INTEGERLITERAL);
				}
				}
				break;
			case PCTFREE:
				{
				{
				setState(5183);
				match(PCTFREE);
				setState(5184);
				match(INTEGERLITERAL);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GbpcacheSpecificationContext extends ParserRuleContext {
		public TerminalNode GBPCACHE() { return getToken(DB2zSQLParser.GBPCACHE, 0); }
		public TerminalNode CHANGED() { return getToken(DB2zSQLParser.CHANGED, 0); }
		public TerminalNode ALL() { return getToken(DB2zSQLParser.ALL, 0); }
		public TerminalNode SYSTEM() { return getToken(DB2zSQLParser.SYSTEM, 0); }
		public TerminalNode NONE() { return getToken(DB2zSQLParser.NONE, 0); }
		public GbpcacheSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_gbpcacheSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGbpcacheSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGbpcacheSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGbpcacheSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GbpcacheSpecificationContext gbpcacheSpecification() throws RecognitionException {
		GbpcacheSpecificationContext _localctx = new GbpcacheSpecificationContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_gbpcacheSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5187);
			match(GBPCACHE);
			setState(5188);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==NONE || _la==SYSTEM || _la==CHANGED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionElementContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(DB2zSQLParser.PARTITION, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode ENDING() { return getToken(DB2zSQLParser.ENDING, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<LiteralContext> literal() {
			return getRuleContexts(LiteralContext.class);
		}
		public LiteralContext literal(int i) {
			return getRuleContext(LiteralContext.class,i);
		}
		public List<TerminalNode> MAXVALUE() { return getTokens(DB2zSQLParser.MAXVALUE); }
		public TerminalNode MAXVALUE(int i) {
			return getToken(DB2zSQLParser.MAXVALUE, i);
		}
		public List<TerminalNode> MINVALUE() { return getTokens(DB2zSQLParser.MINVALUE); }
		public TerminalNode MINVALUE(int i) {
			return getToken(DB2zSQLParser.MINVALUE, i);
		}
		public TerminalNode AT() { return getToken(DB2zSQLParser.AT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public TerminalNode INCLUSIVE() { return getToken(DB2zSQLParser.INCLUSIVE, 0); }
		public PartitionElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPartitionElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPartitionElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPartitionElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionElementContext partitionElement() throws RecognitionException {
		PartitionElementContext _localctx = new PartitionElementContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_partitionElement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5190);
			match(PARTITION);
			setState(5191);
			match(INTEGERLITERAL);
			setState(5217);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENDING) {
				{
				setState(5192);
				match(ENDING);
				setState(5194);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AT) {
					{
					setState(5193);
					match(AT);
					}
				}

				setState(5196);
				match(LPAREN);
				setState(5200);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NONNUMERICLITERAL:
				case INTEGERLITERAL:
				case NUMERICLITERAL:
					{
					setState(5197);
					literal();
					}
					break;
				case MAXVALUE:
					{
					setState(5198);
					match(MAXVALUE);
					}
					break;
				case MINVALUE:
					{
					setState(5199);
					match(MINVALUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5210);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5202);
					match(COMMA);
					setState(5206);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NONNUMERICLITERAL:
					case INTEGERLITERAL:
					case NUMERICLITERAL:
						{
						setState(5203);
						literal();
						}
						break;
					case MAXVALUE:
						{
						setState(5204);
						match(MAXVALUE);
						}
						break;
					case MINVALUE:
						{
						setState(5205);
						match(MINVALUE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					setState(5212);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5213);
				match(RPAREN);
				setState(5215);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INCLUSIVE) {
					{
					setState(5214);
					match(INCLUSIVE);
					}
				}

				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ApplCompatValueContext extends ParserRuleContext {
		public FunctionLevelContext functionLevel() {
			return getRuleContext(FunctionLevelContext.class,0);
		}
		public ApplCompatValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_applCompatValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterApplCompatValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitApplCompatValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitApplCompatValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ApplCompatValueContext applCompatValue() throws RecognitionException {
		ApplCompatValueContext _localctx = new ApplCompatValueContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_applCompatValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5219);
			functionLevel();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionLevelContext extends ParserRuleContext {
		public TerminalNode SQLIDENTIFIER() { return getToken(DB2zSQLParser.SQLIDENTIFIER, 0); }
		public FunctionLevelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionLevel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFunctionLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFunctionLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFunctionLevel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionLevelContext functionLevel() throws RecognitionException {
		FunctionLevelContext _localctx = new FunctionLevelContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_functionLevel);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5221);
			match(SQLIDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionParameterTypeContext extends ParserRuleContext {
		public FunctionDataTypeContext functionDataType() {
			return getRuleContext(FunctionDataTypeContext.class,0);
		}
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode LOCATOR() { return getToken(DB2zSQLParser.LOCATOR, 0); }
		public FunctionParameterTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionParameterType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFunctionParameterType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFunctionParameterType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFunctionParameterType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionParameterTypeContext functionParameterType() throws RecognitionException {
		FunctionParameterTypeContext _localctx = new FunctionParameterTypeContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_functionParameterType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5223);
			functionDataType();
			setState(5226);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(5224);
				match(AS);
				setState(5225);
				match(LOCATOR);
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionDataTypeContext extends ParserRuleContext {
		public FunctionBuiltInTypeContext functionBuiltInType() {
			return getRuleContext(FunctionBuiltInTypeContext.class,0);
		}
		public DistinctTypeNameContext distinctTypeName() {
			return getRuleContext(DistinctTypeNameContext.class,0);
		}
		public FunctionDataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionDataType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFunctionDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFunctionDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFunctionDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionDataTypeContext functionDataType() throws RecognitionException {
		FunctionDataTypeContext _localctx = new FunctionDataTypeContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_functionDataType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5230);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,555,_ctx) ) {
			case 1:
				{
				setState(5228);
				functionBuiltInType();
				}
				break;
			case 2:
				{
				setState(5229);
				distinctTypeName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionBuiltInTypeContext extends ParserRuleContext {
		public TerminalNode SMALLINT() { return getToken(DB2zSQLParser.SMALLINT, 0); }
		public TerminalNode INTEGER() { return getToken(DB2zSQLParser.INTEGER, 0); }
		public TerminalNode INT() { return getToken(DB2zSQLParser.INT, 0); }
		public TerminalNode BIGINT() { return getToken(DB2zSQLParser.BIGINT, 0); }
		public TerminalNode REAL() { return getToken(DB2zSQLParser.REAL, 0); }
		public TerminalNode DATE() { return getToken(DB2zSQLParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(DB2zSQLParser.TIME, 0); }
		public TerminalNode ROWID() { return getToken(DB2zSQLParser.ROWID, 0); }
		public TerminalNode XML() { return getToken(DB2zSQLParser.XML, 0); }
		public TerminalNode DECFLOAT() { return getToken(DB2zSQLParser.DECFLOAT, 0); }
		public TerminalNode FLOAT() { return getToken(DB2zSQLParser.FLOAT, 0); }
		public TerminalNode DOUBLE() { return getToken(DB2zSQLParser.DOUBLE, 0); }
		public TerminalNode BINARY() { return getToken(DB2zSQLParser.BINARY, 0); }
		public TerminalNode TIMESTAMP() { return getToken(DB2zSQLParser.TIMESTAMP, 0); }
		public TerminalNode DECIMAL() { return getToken(DB2zSQLParser.DECIMAL, 0); }
		public TerminalNode DEC() { return getToken(DB2zSQLParser.DEC, 0); }
		public TerminalNode NUMERIC() { return getToken(DB2zSQLParser.NUMERIC, 0); }
		public TerminalNode GRAPHIC() { return getToken(DB2zSQLParser.GRAPHIC, 0); }
		public TerminalNode VARGRAPHIC() { return getToken(DB2zSQLParser.VARGRAPHIC, 0); }
		public TerminalNode DBCLOB() { return getToken(DB2zSQLParser.DBCLOB, 0); }
		public IntegerInParensContext integerInParens() {
			return getRuleContext(IntegerInParensContext.class,0);
		}
		public TerminalNode VARCHAR() { return getToken(DB2zSQLParser.VARCHAR, 0); }
		public TerminalNode CLOB() { return getToken(DB2zSQLParser.CLOB, 0); }
		public TerminalNode VARBINARY() { return getToken(DB2zSQLParser.VARBINARY, 0); }
		public TerminalNode BLOB() { return getToken(DB2zSQLParser.BLOB, 0); }
		public TerminalNode ZONE() { return getToken(DB2zSQLParser.ZONE, 0); }
		public TerminalNode PRECISION() { return getToken(DB2zSQLParser.PRECISION, 0); }
		public LengthContext length() {
			return getRuleContext(LengthContext.class,0);
		}
		public CcsidClause1Context ccsidClause1() {
			return getRuleContext(CcsidClause1Context.class,0);
		}
		public ForDataQualifierContext forDataQualifier() {
			return getRuleContext(ForDataQualifierContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode WITHOUT() { return getToken(DB2zSQLParser.WITHOUT, 0); }
		public TerminalNode LARGE() { return getToken(DB2zSQLParser.LARGE, 0); }
		public TerminalNode OBJECT() { return getToken(DB2zSQLParser.OBJECT, 0); }
		public TerminalNode CHARACTER() { return getToken(DB2zSQLParser.CHARACTER, 0); }
		public TerminalNode CHAR() { return getToken(DB2zSQLParser.CHAR, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode SQLIDENTIFIER() { return getToken(DB2zSQLParser.SQLIDENTIFIER, 0); }
		public TerminalNode VARYING() { return getToken(DB2zSQLParser.VARYING, 0); }
		public FunctionBuiltInTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionBuiltInType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFunctionBuiltInType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFunctionBuiltInType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFunctionBuiltInType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionBuiltInTypeContext functionBuiltInType() throws RecognitionException {
		FunctionBuiltInTypeContext _localctx = new FunctionBuiltInTypeContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_functionBuiltInType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5345);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,578,_ctx) ) {
			case 1:
				{
				setState(5232);
				match(SMALLINT);
				}
				break;
			case 2:
				{
				setState(5233);
				match(INTEGER);
				}
				break;
			case 3:
				{
				setState(5234);
				match(INT);
				}
				break;
			case 4:
				{
				setState(5235);
				match(BIGINT);
				}
				break;
			case 5:
				{
				{
				setState(5236);
				_la = _input.LA(1);
				if ( !(_la==NUMERIC || _la==DEC || _la==DECIMAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5240);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,556,_ctx) ) {
				case 1:
					{
					setState(5237);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(5238);
					match(LPAREN);
					setState(5239);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 6:
				{
				{
				setState(5242);
				match(DECFLOAT);
				setState(5246);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,557,_ctx) ) {
				case 1:
					{
					setState(5243);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(5244);
					match(LPAREN);
					setState(5245);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 7:
				{
				{
				setState(5248);
				match(FLOAT);
				setState(5252);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,558,_ctx) ) {
				case 1:
					{
					setState(5249);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(5250);
					match(LPAREN);
					setState(5251);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 8:
				{
				setState(5254);
				match(REAL);
				}
				break;
			case 9:
				{
				{
				setState(5255);
				match(DOUBLE);
				setState(5257);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRECISION) {
					{
					setState(5256);
					match(PRECISION);
					}
				}

				}
				}
				break;
			case 10:
				{
				{
				setState(5264);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHAR:
				case CHARACTER:
					{
					{
					setState(5259);
					_la = _input.LA(1);
					if ( !(_la==CHAR || _la==CHARACTER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5261);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==VARYING) {
						{
						setState(5260);
						match(VARYING);
						}
					}

					}
					}
					break;
				case VARCHAR:
					{
					setState(5263);
					match(VARCHAR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5269);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,562,_ctx) ) {
				case 1:
					{
					setState(5266);
					length();
					}
					break;
				case 2:
					{
					{
					setState(5267);
					match(LPAREN);
					setState(5268);
					match(RPAREN);
					}
					}
					break;
				}
				setState(5272);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CCSID) {
					{
					setState(5271);
					ccsidClause1();
					}
				}

				setState(5275);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5274);
					forDataQualifier();
					}
				}

				}
				}
				break;
			case 11:
				{
				{
				setState(5281);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHAR:
				case CHARACTER:
					{
					{
					setState(5277);
					_la = _input.LA(1);
					if ( !(_la==CHAR || _la==CHARACTER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5278);
					match(LARGE);
					setState(5279);
					match(OBJECT);
					}
					}
					break;
				case CLOB:
					{
					setState(5280);
					match(CLOB);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5286);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,566,_ctx) ) {
				case 1:
					{
					setState(5283);
					length();
					}
					break;
				case 2:
					{
					{
					setState(5284);
					match(LPAREN);
					setState(5285);
					match(RPAREN);
					}
					}
					break;
				}
				setState(5289);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CCSID) {
					{
					setState(5288);
					ccsidClause1();
					}
				}

				setState(5292);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5291);
					forDataQualifier();
					}
				}

				}
				}
				break;
			case 12:
				{
				{
				setState(5294);
				_la = _input.LA(1);
				if ( !(_la==DBCLOB || _la==GRAPHIC || _la==VARGRAPHIC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5298);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,569,_ctx) ) {
				case 1:
					{
					setState(5295);
					length();
					}
					break;
				case 2:
					{
					{
					setState(5296);
					match(LPAREN);
					setState(5297);
					match(RPAREN);
					}
					}
					break;
				}
				setState(5301);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CCSID) {
					{
					setState(5300);
					ccsidClause1();
					}
				}

				}
				}
				break;
			case 13:
				{
				{
				setState(5303);
				match(BINARY);
				setState(5307);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,571,_ctx) ) {
				case 1:
					{
					setState(5304);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(5305);
					match(LPAREN);
					setState(5306);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 14:
				{
				{
				setState(5314);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
					{
					{
					setState(5309);
					match(BINARY);
					setState(5311);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==VARYING) {
						{
						setState(5310);
						match(VARYING);
						}
					}

					}
					}
					break;
				case VARBINARY:
					{
					setState(5313);
					match(VARBINARY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5319);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,574,_ctx) ) {
				case 1:
					{
					setState(5316);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(5317);
					match(LPAREN);
					setState(5318);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 15:
				{
				{
				setState(5325);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
					{
					{
					setState(5321);
					match(BINARY);
					setState(5322);
					match(LARGE);
					setState(5323);
					match(OBJECT);
					}
					}
					break;
				case BLOB:
					{
					setState(5324);
					match(BLOB);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5332);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(5327);
					match(LPAREN);
					{
					setState(5328);
					match(INTEGERLITERAL);
					setState(5329);
					match(SQLIDENTIFIER);
					}
					setState(5331);
					match(RPAREN);
					}
				}

				}
				}
				break;
			case 16:
				{
				setState(5334);
				match(DATE);
				}
				break;
			case 17:
				{
				setState(5335);
				match(TIME);
				}
				break;
			case 18:
				{
				{
				setState(5336);
				match(TIMESTAMP);
				setState(5338);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(5337);
					integerInParens();
					}
				}

				{
				setState(5340);
				_la = _input.LA(1);
				if ( !(_la==WITH || _la==WITHOUT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5341);
				match(TIME);
				setState(5342);
				match(ZONE);
				}
				}
				}
				break;
			case 19:
				{
				setState(5343);
				match(ROWID);
				}
				break;
			case 20:
				{
				setState(5344);
				match(XML);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcedureBuiltinTypeContext extends ParserRuleContext {
		public TerminalNode SMALLINT() { return getToken(DB2zSQLParser.SMALLINT, 0); }
		public TerminalNode INTEGER() { return getToken(DB2zSQLParser.INTEGER, 0); }
		public TerminalNode INT() { return getToken(DB2zSQLParser.INT, 0); }
		public TerminalNode BIGINT() { return getToken(DB2zSQLParser.BIGINT, 0); }
		public TerminalNode REAL() { return getToken(DB2zSQLParser.REAL, 0); }
		public TerminalNode DATE() { return getToken(DB2zSQLParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(DB2zSQLParser.TIME, 0); }
		public TerminalNode ROWID() { return getToken(DB2zSQLParser.ROWID, 0); }
		public TerminalNode DECFLOAT() { return getToken(DB2zSQLParser.DECFLOAT, 0); }
		public TerminalNode FLOAT() { return getToken(DB2zSQLParser.FLOAT, 0); }
		public TerminalNode DOUBLE() { return getToken(DB2zSQLParser.DOUBLE, 0); }
		public TerminalNode BINARY() { return getToken(DB2zSQLParser.BINARY, 0); }
		public TerminalNode TIMESTAMP() { return getToken(DB2zSQLParser.TIMESTAMP, 0); }
		public TerminalNode DECIMAL() { return getToken(DB2zSQLParser.DECIMAL, 0); }
		public TerminalNode DEC() { return getToken(DB2zSQLParser.DEC, 0); }
		public TerminalNode NUMERIC() { return getToken(DB2zSQLParser.NUMERIC, 0); }
		public TerminalNode GRAPHIC() { return getToken(DB2zSQLParser.GRAPHIC, 0); }
		public TerminalNode VARGRAPHIC() { return getToken(DB2zSQLParser.VARGRAPHIC, 0); }
		public TerminalNode DBCLOB() { return getToken(DB2zSQLParser.DBCLOB, 0); }
		public IntegerInParensContext integerInParens() {
			return getRuleContext(IntegerInParensContext.class,0);
		}
		public TerminalNode VARCHAR() { return getToken(DB2zSQLParser.VARCHAR, 0); }
		public TerminalNode CLOB() { return getToken(DB2zSQLParser.CLOB, 0); }
		public TerminalNode VARBINARY() { return getToken(DB2zSQLParser.VARBINARY, 0); }
		public TerminalNode BLOB() { return getToken(DB2zSQLParser.BLOB, 0); }
		public TerminalNode PRECISION() { return getToken(DB2zSQLParser.PRECISION, 0); }
		public LengthContext length() {
			return getRuleContext(LengthContext.class,0);
		}
		public CcsidClause1Context ccsidClause1() {
			return getRuleContext(CcsidClause1Context.class,0);
		}
		public ForDataQualifierContext forDataQualifier() {
			return getRuleContext(ForDataQualifierContext.class,0);
		}
		public TerminalNode ZONE() { return getToken(DB2zSQLParser.ZONE, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode LARGE() { return getToken(DB2zSQLParser.LARGE, 0); }
		public TerminalNode OBJECT() { return getToken(DB2zSQLParser.OBJECT, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode WITHOUT() { return getToken(DB2zSQLParser.WITHOUT, 0); }
		public TerminalNode CHARACTER() { return getToken(DB2zSQLParser.CHARACTER, 0); }
		public TerminalNode CHAR() { return getToken(DB2zSQLParser.CHAR, 0); }
		public TerminalNode VARYING() { return getToken(DB2zSQLParser.VARYING, 0); }
		public ProcedureBuiltinTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureBuiltinType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterProcedureBuiltinType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitProcedureBuiltinType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitProcedureBuiltinType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProcedureBuiltinTypeContext procedureBuiltinType() throws RecognitionException {
		ProcedureBuiltinTypeContext _localctx = new ProcedureBuiltinTypeContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_procedureBuiltinType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5457);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,602,_ctx) ) {
			case 1:
				{
				setState(5347);
				match(SMALLINT);
				}
				break;
			case 2:
				{
				setState(5348);
				match(INTEGER);
				}
				break;
			case 3:
				{
				setState(5349);
				match(INT);
				}
				break;
			case 4:
				{
				setState(5350);
				match(BIGINT);
				}
				break;
			case 5:
				{
				{
				setState(5351);
				_la = _input.LA(1);
				if ( !(_la==NUMERIC || _la==DEC || _la==DECIMAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5355);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,579,_ctx) ) {
				case 1:
					{
					setState(5352);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(5353);
					match(LPAREN);
					setState(5354);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 6:
				{
				{
				setState(5357);
				match(DECFLOAT);
				setState(5361);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,580,_ctx) ) {
				case 1:
					{
					setState(5358);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(5359);
					match(LPAREN);
					setState(5360);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 7:
				{
				{
				setState(5363);
				match(FLOAT);
				setState(5367);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,581,_ctx) ) {
				case 1:
					{
					setState(5364);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(5365);
					match(LPAREN);
					setState(5366);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 8:
				{
				setState(5369);
				match(REAL);
				}
				break;
			case 9:
				{
				{
				setState(5370);
				match(DOUBLE);
				setState(5372);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRECISION) {
					{
					setState(5371);
					match(PRECISION);
					}
				}

				}
				}
				break;
			case 10:
				{
				{
				setState(5379);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHAR:
				case CHARACTER:
					{
					{
					setState(5374);
					_la = _input.LA(1);
					if ( !(_la==CHAR || _la==CHARACTER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5376);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==VARYING) {
						{
						setState(5375);
						match(VARYING);
						}
					}

					}
					}
					break;
				case VARCHAR:
					{
					setState(5378);
					match(VARCHAR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5384);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,585,_ctx) ) {
				case 1:
					{
					setState(5381);
					length();
					}
					break;
				case 2:
					{
					{
					setState(5382);
					match(LPAREN);
					setState(5383);
					match(RPAREN);
					}
					}
					break;
				}
				setState(5387);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CCSID) {
					{
					setState(5386);
					ccsidClause1();
					}
				}

				setState(5390);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5389);
					forDataQualifier();
					}
				}

				}
				}
				break;
			case 11:
				{
				{
				setState(5396);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHAR:
				case CHARACTER:
					{
					{
					setState(5392);
					_la = _input.LA(1);
					if ( !(_la==CHAR || _la==CHARACTER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5393);
					match(LARGE);
					setState(5394);
					match(OBJECT);
					}
					}
					break;
				case CLOB:
					{
					setState(5395);
					match(CLOB);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5401);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,589,_ctx) ) {
				case 1:
					{
					setState(5398);
					length();
					}
					break;
				case 2:
					{
					{
					setState(5399);
					match(LPAREN);
					setState(5400);
					match(RPAREN);
					}
					}
					break;
				}
				setState(5404);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CCSID) {
					{
					setState(5403);
					ccsidClause1();
					}
				}

				setState(5407);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5406);
					forDataQualifier();
					}
				}

				}
				}
				break;
			case 12:
				{
				{
				setState(5409);
				_la = _input.LA(1);
				if ( !(_la==DBCLOB || _la==GRAPHIC || _la==VARGRAPHIC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5413);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,592,_ctx) ) {
				case 1:
					{
					setState(5410);
					length();
					}
					break;
				case 2:
					{
					{
					setState(5411);
					match(LPAREN);
					setState(5412);
					match(RPAREN);
					}
					}
					break;
				}
				setState(5416);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CCSID) {
					{
					setState(5415);
					ccsidClause1();
					}
				}

				}
				}
				break;
			case 13:
				{
				{
				setState(5418);
				match(BINARY);
				setState(5422);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,594,_ctx) ) {
				case 1:
					{
					setState(5419);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(5420);
					match(LPAREN);
					setState(5421);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 14:
				{
				{
				setState(5429);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
					{
					{
					setState(5424);
					match(BINARY);
					setState(5426);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==VARYING) {
						{
						setState(5425);
						match(VARYING);
						}
					}

					}
					}
					break;
				case VARBINARY:
					{
					setState(5428);
					match(VARBINARY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5434);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,597,_ctx) ) {
				case 1:
					{
					setState(5431);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(5432);
					match(LPAREN);
					setState(5433);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 15:
				{
				{
				setState(5440);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
					{
					{
					setState(5436);
					match(BINARY);
					setState(5437);
					match(LARGE);
					setState(5438);
					match(OBJECT);
					}
					}
					break;
				case BLOB:
					{
					setState(5439);
					match(BLOB);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5443);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(5442);
					length();
					}
				}

				}
				}
				break;
			case 16:
				{
				setState(5445);
				match(DATE);
				}
				break;
			case 17:
				{
				setState(5446);
				match(TIME);
				}
				break;
			case 18:
				{
				{
				setState(5447);
				match(TIMESTAMP);
				setState(5449);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(5448);
					integerInParens();
					}
				}

				setState(5454);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH || _la==WITHOUT) {
					{
					setState(5451);
					_la = _input.LA(1);
					if ( !(_la==WITH || _la==WITHOUT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5452);
					match(TIME);
					setState(5453);
					match(ZONE);
					}
				}

				}
				}
				break;
			case 19:
				{
				setState(5456);
				match(ROWID);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTypeArrayBuiltinTypeContext extends ParserRuleContext {
		public TerminalNode SMALLINT() { return getToken(DB2zSQLParser.SMALLINT, 0); }
		public TerminalNode INTEGER() { return getToken(DB2zSQLParser.INTEGER, 0); }
		public TerminalNode INT() { return getToken(DB2zSQLParser.INT, 0); }
		public TerminalNode BIGINT() { return getToken(DB2zSQLParser.BIGINT, 0); }
		public TerminalNode REAL() { return getToken(DB2zSQLParser.REAL, 0); }
		public TerminalNode DATE() { return getToken(DB2zSQLParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(DB2zSQLParser.TIME, 0); }
		public TerminalNode DECFLOAT() { return getToken(DB2zSQLParser.DECFLOAT, 0); }
		public TerminalNode FLOAT() { return getToken(DB2zSQLParser.FLOAT, 0); }
		public TerminalNode DOUBLE() { return getToken(DB2zSQLParser.DOUBLE, 0); }
		public TerminalNode BINARY() { return getToken(DB2zSQLParser.BINARY, 0); }
		public TerminalNode TIMESTAMP() { return getToken(DB2zSQLParser.TIMESTAMP, 0); }
		public TerminalNode DECIMAL() { return getToken(DB2zSQLParser.DECIMAL, 0); }
		public TerminalNode DEC() { return getToken(DB2zSQLParser.DEC, 0); }
		public TerminalNode NUMERIC() { return getToken(DB2zSQLParser.NUMERIC, 0); }
		public TerminalNode GRAPHIC() { return getToken(DB2zSQLParser.GRAPHIC, 0); }
		public TerminalNode VARGRAPHIC() { return getToken(DB2zSQLParser.VARGRAPHIC, 0); }
		public TerminalNode DBCLOB() { return getToken(DB2zSQLParser.DBCLOB, 0); }
		public IntegerInParensContext integerInParens() {
			return getRuleContext(IntegerInParensContext.class,0);
		}
		public TerminalNode VARCHAR() { return getToken(DB2zSQLParser.VARCHAR, 0); }
		public TerminalNode CLOB() { return getToken(DB2zSQLParser.CLOB, 0); }
		public TerminalNode VARBINARY() { return getToken(DB2zSQLParser.VARBINARY, 0); }
		public TerminalNode BLOB() { return getToken(DB2zSQLParser.BLOB, 0); }
		public TerminalNode PRECISION() { return getToken(DB2zSQLParser.PRECISION, 0); }
		public LengthContext length() {
			return getRuleContext(LengthContext.class,0);
		}
		public CcsidClause1Context ccsidClause1() {
			return getRuleContext(CcsidClause1Context.class,0);
		}
		public ForDataQualifierContext forDataQualifier() {
			return getRuleContext(ForDataQualifierContext.class,0);
		}
		public TerminalNode ZONE() { return getToken(DB2zSQLParser.ZONE, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode LARGE() { return getToken(DB2zSQLParser.LARGE, 0); }
		public TerminalNode OBJECT() { return getToken(DB2zSQLParser.OBJECT, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode WITHOUT() { return getToken(DB2zSQLParser.WITHOUT, 0); }
		public TerminalNode CHARACTER() { return getToken(DB2zSQLParser.CHARACTER, 0); }
		public TerminalNode CHAR() { return getToken(DB2zSQLParser.CHAR, 0); }
		public TerminalNode VARYING() { return getToken(DB2zSQLParser.VARYING, 0); }
		public CreateTypeArrayBuiltinTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTypeArrayBuiltinType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateTypeArrayBuiltinType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateTypeArrayBuiltinType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateTypeArrayBuiltinType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTypeArrayBuiltinTypeContext createTypeArrayBuiltinType() throws RecognitionException {
		CreateTypeArrayBuiltinTypeContext _localctx = new CreateTypeArrayBuiltinTypeContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_createTypeArrayBuiltinType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5564);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,626,_ctx) ) {
			case 1:
				{
				setState(5459);
				match(SMALLINT);
				}
				break;
			case 2:
				{
				setState(5460);
				match(INTEGER);
				}
				break;
			case 3:
				{
				setState(5461);
				match(INT);
				}
				break;
			case 4:
				{
				setState(5462);
				match(BIGINT);
				}
				break;
			case 5:
				{
				{
				setState(5463);
				_la = _input.LA(1);
				if ( !(_la==NUMERIC || _la==DEC || _la==DECIMAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5467);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,603,_ctx) ) {
				case 1:
					{
					setState(5464);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(5465);
					match(LPAREN);
					setState(5466);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 6:
				{
				{
				setState(5469);
				match(DECFLOAT);
				setState(5473);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,604,_ctx) ) {
				case 1:
					{
					setState(5470);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(5471);
					match(LPAREN);
					setState(5472);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 7:
				{
				{
				setState(5475);
				match(FLOAT);
				setState(5479);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,605,_ctx) ) {
				case 1:
					{
					setState(5476);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(5477);
					match(LPAREN);
					setState(5478);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 8:
				{
				setState(5481);
				match(REAL);
				}
				break;
			case 9:
				{
				{
				setState(5482);
				match(DOUBLE);
				setState(5484);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRECISION) {
					{
					setState(5483);
					match(PRECISION);
					}
				}

				}
				}
				break;
			case 10:
				{
				{
				setState(5491);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHAR:
				case CHARACTER:
					{
					{
					setState(5486);
					_la = _input.LA(1);
					if ( !(_la==CHAR || _la==CHARACTER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5488);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==VARYING) {
						{
						setState(5487);
						match(VARYING);
						}
					}

					}
					}
					break;
				case VARCHAR:
					{
					setState(5490);
					match(VARCHAR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5494);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(5493);
					length();
					}
				}

				setState(5497);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CCSID) {
					{
					setState(5496);
					ccsidClause1();
					}
				}

				setState(5500);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5499);
					forDataQualifier();
					}
				}

				}
				}
				break;
			case 11:
				{
				{
				setState(5506);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHAR:
				case CHARACTER:
					{
					{
					setState(5502);
					_la = _input.LA(1);
					if ( !(_la==CHAR || _la==CHARACTER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5503);
					match(LARGE);
					setState(5504);
					match(OBJECT);
					}
					}
					break;
				case CLOB:
					{
					setState(5505);
					match(CLOB);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5509);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(5508);
					length();
					}
				}

				setState(5512);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CCSID) {
					{
					setState(5511);
					ccsidClause1();
					}
				}

				setState(5515);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5514);
					forDataQualifier();
					}
				}

				}
				}
				break;
			case 12:
				{
				{
				setState(5517);
				_la = _input.LA(1);
				if ( !(_la==DBCLOB || _la==GRAPHIC || _la==VARGRAPHIC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5521);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,616,_ctx) ) {
				case 1:
					{
					setState(5518);
					length();
					}
					break;
				case 2:
					{
					{
					setState(5519);
					match(LPAREN);
					setState(5520);
					match(RPAREN);
					}
					}
					break;
				}
				setState(5524);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CCSID) {
					{
					setState(5523);
					ccsidClause1();
					}
				}

				}
				}
				break;
			case 13:
				{
				{
				setState(5526);
				match(BINARY);
				setState(5530);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,618,_ctx) ) {
				case 1:
					{
					setState(5527);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(5528);
					match(LPAREN);
					setState(5529);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 14:
				{
				{
				setState(5537);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
					{
					{
					setState(5532);
					match(BINARY);
					setState(5534);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==VARYING) {
						{
						setState(5533);
						match(VARYING);
						}
					}

					}
					}
					break;
				case VARBINARY:
					{
					setState(5536);
					match(VARBINARY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5542);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,621,_ctx) ) {
				case 1:
					{
					setState(5539);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(5540);
					match(LPAREN);
					setState(5541);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 15:
				{
				{
				setState(5548);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
					{
					{
					setState(5544);
					match(BINARY);
					setState(5545);
					match(LARGE);
					setState(5546);
					match(OBJECT);
					}
					}
					break;
				case BLOB:
					{
					setState(5547);
					match(BLOB);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5551);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(5550);
					length();
					}
				}

				}
				}
				break;
			case 16:
				{
				setState(5553);
				match(DATE);
				}
				break;
			case 17:
				{
				setState(5554);
				match(TIME);
				}
				break;
			case 18:
				{
				{
				setState(5555);
				match(TIMESTAMP);
				setState(5557);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(5556);
					integerInParens();
					}
				}

				setState(5562);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH || _la==WITHOUT) {
					{
					setState(5559);
					_la = _input.LA(1);
					if ( !(_la==WITH || _la==WITHOUT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5560);
					match(TIME);
					setState(5561);
					match(ZONE);
					}
				}

				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTypeArrayBuiltinType2Context extends ParserRuleContext {
		public TerminalNode INTEGER() { return getToken(DB2zSQLParser.INTEGER, 0); }
		public TerminalNode INT() { return getToken(DB2zSQLParser.INT, 0); }
		public TerminalNode VARCHAR() { return getToken(DB2zSQLParser.VARCHAR, 0); }
		public LengthContext length() {
			return getRuleContext(LengthContext.class,0);
		}
		public CcsidClause1Context ccsidClause1() {
			return getRuleContext(CcsidClause1Context.class,0);
		}
		public ForDataQualifierContext forDataQualifier() {
			return getRuleContext(ForDataQualifierContext.class,0);
		}
		public TerminalNode CHARACTER() { return getToken(DB2zSQLParser.CHARACTER, 0); }
		public TerminalNode CHAR() { return getToken(DB2zSQLParser.CHAR, 0); }
		public TerminalNode VARYING() { return getToken(DB2zSQLParser.VARYING, 0); }
		public CreateTypeArrayBuiltinType2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTypeArrayBuiltinType2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateTypeArrayBuiltinType2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateTypeArrayBuiltinType2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateTypeArrayBuiltinType2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTypeArrayBuiltinType2Context createTypeArrayBuiltinType2() throws RecognitionException {
		CreateTypeArrayBuiltinType2Context _localctx = new CreateTypeArrayBuiltinType2Context(_ctx, getState());
		enterRule(_localctx, 634, RULE_createTypeArrayBuiltinType2);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5584);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTEGER:
				{
				setState(5566);
				match(INTEGER);
				}
				break;
			case INT:
				{
				setState(5567);
				match(INT);
				}
				break;
			case CHAR:
			case CHARACTER:
			case VARCHAR:
				{
				{
				setState(5573);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHAR:
				case CHARACTER:
					{
					{
					setState(5568);
					_la = _input.LA(1);
					if ( !(_la==CHAR || _la==CHARACTER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5570);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==VARYING) {
						{
						setState(5569);
						match(VARYING);
						}
					}

					}
					}
					break;
				case VARCHAR:
					{
					setState(5572);
					match(VARCHAR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5576);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(5575);
					length();
					}
				}

				setState(5579);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CCSID) {
					{
					setState(5578);
					ccsidClause1();
					}
				}

				setState(5582);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5581);
					forDataQualifier();
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateVariableBuiltInTypeContext extends ParserRuleContext {
		public TerminalNode SMALLINT() { return getToken(DB2zSQLParser.SMALLINT, 0); }
		public TerminalNode INTEGER() { return getToken(DB2zSQLParser.INTEGER, 0); }
		public TerminalNode INT() { return getToken(DB2zSQLParser.INT, 0); }
		public TerminalNode BIGINT() { return getToken(DB2zSQLParser.BIGINT, 0); }
		public TerminalNode REAL() { return getToken(DB2zSQLParser.REAL, 0); }
		public TerminalNode DATE() { return getToken(DB2zSQLParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(DB2zSQLParser.TIME, 0); }
		public TerminalNode DECFLOAT() { return getToken(DB2zSQLParser.DECFLOAT, 0); }
		public TerminalNode FLOAT() { return getToken(DB2zSQLParser.FLOAT, 0); }
		public TerminalNode DOUBLE() { return getToken(DB2zSQLParser.DOUBLE, 0); }
		public TerminalNode BINARY() { return getToken(DB2zSQLParser.BINARY, 0); }
		public TerminalNode TIMESTAMP() { return getToken(DB2zSQLParser.TIMESTAMP, 0); }
		public TerminalNode DECIMAL() { return getToken(DB2zSQLParser.DECIMAL, 0); }
		public TerminalNode DEC() { return getToken(DB2zSQLParser.DEC, 0); }
		public TerminalNode NUMERIC() { return getToken(DB2zSQLParser.NUMERIC, 0); }
		public TerminalNode GRAPHIC() { return getToken(DB2zSQLParser.GRAPHIC, 0); }
		public TerminalNode VARGRAPHIC() { return getToken(DB2zSQLParser.VARGRAPHIC, 0); }
		public TerminalNode DBCLOB() { return getToken(DB2zSQLParser.DBCLOB, 0); }
		public IntegerInParensContext integerInParens() {
			return getRuleContext(IntegerInParensContext.class,0);
		}
		public TerminalNode VARCHAR() { return getToken(DB2zSQLParser.VARCHAR, 0); }
		public TerminalNode CLOB() { return getToken(DB2zSQLParser.CLOB, 0); }
		public TerminalNode VARBINARY() { return getToken(DB2zSQLParser.VARBINARY, 0); }
		public TerminalNode BLOB() { return getToken(DB2zSQLParser.BLOB, 0); }
		public TerminalNode PRECISION() { return getToken(DB2zSQLParser.PRECISION, 0); }
		public LengthContext length() {
			return getRuleContext(LengthContext.class,0);
		}
		public ForDataQualifierContext forDataQualifier() {
			return getRuleContext(ForDataQualifierContext.class,0);
		}
		public TerminalNode ZONE() { return getToken(DB2zSQLParser.ZONE, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode LARGE() { return getToken(DB2zSQLParser.LARGE, 0); }
		public TerminalNode OBJECT() { return getToken(DB2zSQLParser.OBJECT, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode WITHOUT() { return getToken(DB2zSQLParser.WITHOUT, 0); }
		public TerminalNode CHARACTER() { return getToken(DB2zSQLParser.CHARACTER, 0); }
		public TerminalNode CHAR() { return getToken(DB2zSQLParser.CHAR, 0); }
		public TerminalNode VARYING() { return getToken(DB2zSQLParser.VARYING, 0); }
		public CreateVariableBuiltInTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createVariableBuiltInType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateVariableBuiltInType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateVariableBuiltInType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateVariableBuiltInType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateVariableBuiltInTypeContext createVariableBuiltInType() throws RecognitionException {
		CreateVariableBuiltInTypeContext _localctx = new CreateVariableBuiltInTypeContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_createVariableBuiltInType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5680);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,653,_ctx) ) {
			case 1:
				{
				setState(5586);
				match(SMALLINT);
				}
				break;
			case 2:
				{
				setState(5587);
				match(INTEGER);
				}
				break;
			case 3:
				{
				setState(5588);
				match(INT);
				}
				break;
			case 4:
				{
				setState(5589);
				match(BIGINT);
				}
				break;
			case 5:
				{
				{
				setState(5590);
				_la = _input.LA(1);
				if ( !(_la==NUMERIC || _la==DEC || _la==DECIMAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5594);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,633,_ctx) ) {
				case 1:
					{
					setState(5591);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(5592);
					match(LPAREN);
					setState(5593);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 6:
				{
				{
				setState(5596);
				match(DECFLOAT);
				setState(5600);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,634,_ctx) ) {
				case 1:
					{
					setState(5597);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(5598);
					match(LPAREN);
					setState(5599);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 7:
				{
				{
				setState(5602);
				match(FLOAT);
				setState(5606);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,635,_ctx) ) {
				case 1:
					{
					setState(5603);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(5604);
					match(LPAREN);
					setState(5605);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 8:
				{
				setState(5608);
				match(REAL);
				}
				break;
			case 9:
				{
				{
				setState(5609);
				match(DOUBLE);
				setState(5611);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRECISION) {
					{
					setState(5610);
					match(PRECISION);
					}
				}

				}
				}
				break;
			case 10:
				{
				{
				setState(5618);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHAR:
				case CHARACTER:
					{
					{
					setState(5613);
					_la = _input.LA(1);
					if ( !(_la==CHAR || _la==CHARACTER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5615);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==VARYING) {
						{
						setState(5614);
						match(VARYING);
						}
					}

					}
					}
					break;
				case VARCHAR:
					{
					setState(5617);
					match(VARCHAR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5621);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(5620);
					length();
					}
				}

				setState(5624);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5623);
					forDataQualifier();
					}
				}

				}
				}
				break;
			case 11:
				{
				{
				setState(5630);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHAR:
				case CHARACTER:
					{
					{
					setState(5626);
					_la = _input.LA(1);
					if ( !(_la==CHAR || _la==CHARACTER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5627);
					match(LARGE);
					setState(5628);
					match(OBJECT);
					}
					}
					break;
				case CLOB:
					{
					setState(5629);
					match(CLOB);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5633);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(5632);
					length();
					}
				}

				setState(5636);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5635);
					forDataQualifier();
					}
				}

				}
				}
				break;
			case 12:
				{
				{
				setState(5638);
				_la = _input.LA(1);
				if ( !(_la==DBCLOB || _la==GRAPHIC || _la==VARGRAPHIC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5640);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(5639);
					length();
					}
				}

				}
				}
				break;
			case 13:
				{
				{
				setState(5642);
				match(BINARY);
				setState(5646);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,645,_ctx) ) {
				case 1:
					{
					setState(5643);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(5644);
					match(LPAREN);
					setState(5645);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 14:
				{
				{
				setState(5653);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
					{
					{
					setState(5648);
					match(BINARY);
					setState(5650);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==VARYING) {
						{
						setState(5649);
						match(VARYING);
						}
					}

					}
					}
					break;
				case VARBINARY:
					{
					setState(5652);
					match(VARBINARY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5658);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,648,_ctx) ) {
				case 1:
					{
					setState(5655);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(5656);
					match(LPAREN);
					setState(5657);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 15:
				{
				{
				setState(5664);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
					{
					{
					setState(5660);
					match(BINARY);
					setState(5661);
					match(LARGE);
					setState(5662);
					match(OBJECT);
					}
					}
					break;
				case BLOB:
					{
					setState(5663);
					match(BLOB);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5667);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(5666);
					length();
					}
				}

				}
				}
				break;
			case 16:
				{
				setState(5669);
				match(DATE);
				}
				break;
			case 17:
				{
				setState(5670);
				match(TIME);
				}
				break;
			case 18:
				{
				{
				setState(5671);
				match(TIMESTAMP);
				setState(5673);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(5672);
					integerInParens();
					}
				}

				setState(5678);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH || _la==WITHOUT) {
					{
					setState(5675);
					_la = _input.LA(1);
					if ( !(_la==WITH || _la==WITHOUT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5676);
					match(TIME);
					setState(5677);
					match(ZONE);
					}
				}

				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SourceDataTypeContext extends ParserRuleContext {
		public ProcedureBuiltinTypeContext procedureBuiltinType() {
			return getRuleContext(ProcedureBuiltinTypeContext.class,0);
		}
		public SourceDataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sourceDataType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSourceDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSourceDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSourceDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SourceDataTypeContext sourceDataType() throws RecognitionException {
		SourceDataTypeContext _localctx = new SourceDataTypeContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_sourceDataType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5682);
			procedureBuiltinType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionOptionListContext extends ParserRuleContext {
		public ExternalNameOption2Context externalNameOption2() {
			return getRuleContext(ExternalNameOption2Context.class,0);
		}
		public LanguageOption4Context languageOption4() {
			return getRuleContext(LanguageOption4Context.class,0);
		}
		public ParameterStyleOption2Context parameterStyleOption2() {
			return getRuleContext(ParameterStyleOption2Context.class,0);
		}
		public DeterministicOptionContext deterministicOption() {
			return getRuleContext(DeterministicOptionContext.class,0);
		}
		public NullInputOption1Context nullInputOption1() {
			return getRuleContext(NullInputOption1Context.class,0);
		}
		public SqlDataOption3Context sqlDataOption3() {
			return getRuleContext(SqlDataOption3Context.class,0);
		}
		public ExternalActionOptionContext externalActionOption() {
			return getRuleContext(ExternalActionOptionContext.class,0);
		}
		public PackagePathOptionContext packagePathOption() {
			return getRuleContext(PackagePathOptionContext.class,0);
		}
		public ScratchpadOptionContext scratchpadOption() {
			return getRuleContext(ScratchpadOptionContext.class,0);
		}
		public FinalCallOptionContext finalCallOption() {
			return getRuleContext(FinalCallOptionContext.class,0);
		}
		public ParallelOption2Context parallelOption2() {
			return getRuleContext(ParallelOption2Context.class,0);
		}
		public DbinfoOptionContext dbinfoOption() {
			return getRuleContext(DbinfoOptionContext.class,0);
		}
		public CardinalityOptionContext cardinalityOption() {
			return getRuleContext(CardinalityOptionContext.class,0);
		}
		public CollectionIdOptionContext collectionIdOption() {
			return getRuleContext(CollectionIdOptionContext.class,0);
		}
		public WlmEnvironmentOption2Context wlmEnvironmentOption2() {
			return getRuleContext(WlmEnvironmentOption2Context.class,0);
		}
		public AsuTimeOptionContext asuTimeOption() {
			return getRuleContext(AsuTimeOptionContext.class,0);
		}
		public StayResidentOptionContext stayResidentOption() {
			return getRuleContext(StayResidentOptionContext.class,0);
		}
		public ProgramTypeOptionContext programTypeOption() {
			return getRuleContext(ProgramTypeOptionContext.class,0);
		}
		public SecurityOptionContext securityOption() {
			return getRuleContext(SecurityOptionContext.class,0);
		}
		public StopAfterFailureOptionContext stopAfterFailureOption() {
			return getRuleContext(StopAfterFailureOptionContext.class,0);
		}
		public RunOptionsOptionContext runOptionsOption() {
			return getRuleContext(RunOptionsOptionContext.class,0);
		}
		public SpecialRegistersOptionContext specialRegistersOption() {
			return getRuleContext(SpecialRegistersOptionContext.class,0);
		}
		public DispatchOptionContext dispatchOption() {
			return getRuleContext(DispatchOptionContext.class,0);
		}
		public SecuredOptionContext securedOption() {
			return getRuleContext(SecuredOptionContext.class,0);
		}
		public TerminalNode SPECIFIC() { return getToken(DB2zSQLParser.SPECIFIC, 0); }
		public TerminalNode PARAMETER() { return getToken(DB2zSQLParser.PARAMETER, 0); }
		public TerminalNode CCSID() { return getToken(DB2zSQLParser.CCSID, 0); }
		public FunctionOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFunctionOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFunctionOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFunctionOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionOptionListContext functionOptionList() throws RecognitionException {
		FunctionOptionListContext _localctx = new FunctionOptionListContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_functionOptionList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5711);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,654,_ctx) ) {
			case 1:
				{
				setState(5684);
				externalNameOption2();
				}
				break;
			case 2:
				{
				setState(5685);
				languageOption4();
				}
				break;
			case 3:
				{
				setState(5686);
				parameterStyleOption2();
				}
				break;
			case 4:
				{
				setState(5687);
				deterministicOption();
				}
				break;
			case 5:
				{
				setState(5688);
				nullInputOption1();
				}
				break;
			case 6:
				{
				setState(5689);
				sqlDataOption3();
				}
				break;
			case 7:
				{
				setState(5690);
				externalActionOption();
				}
				break;
			case 8:
				{
				setState(5691);
				packagePathOption();
				}
				break;
			case 9:
				{
				setState(5692);
				scratchpadOption();
				}
				break;
			case 10:
				{
				setState(5693);
				finalCallOption();
				}
				break;
			case 11:
				{
				setState(5694);
				parallelOption2();
				}
				break;
			case 12:
				{
				setState(5695);
				dbinfoOption();
				}
				break;
			case 13:
				{
				setState(5696);
				cardinalityOption();
				}
				break;
			case 14:
				{
				setState(5697);
				collectionIdOption();
				}
				break;
			case 15:
				{
				setState(5698);
				wlmEnvironmentOption2();
				}
				break;
			case 16:
				{
				setState(5699);
				asuTimeOption();
				}
				break;
			case 17:
				{
				setState(5700);
				stayResidentOption();
				}
				break;
			case 18:
				{
				setState(5701);
				programTypeOption();
				}
				break;
			case 19:
				{
				setState(5702);
				securityOption();
				}
				break;
			case 20:
				{
				setState(5703);
				stopAfterFailureOption();
				}
				break;
			case 21:
				{
				setState(5704);
				runOptionsOption();
				}
				break;
			case 22:
				{
				setState(5705);
				specialRegistersOption();
				}
				break;
			case 23:
				{
				setState(5706);
				dispatchOption();
				}
				break;
			case 24:
				{
				setState(5707);
				securedOption();
				}
				break;
			case 25:
				{
				setState(5708);
				match(SPECIFIC);
				}
				break;
			case 26:
				{
				{
				setState(5709);
				match(PARAMETER);
				setState(5710);
				match(CCSID);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcedureOptionListContext extends ParserRuleContext {
		public DynamicResultSetOptionContext dynamicResultSetOption() {
			return getRuleContext(DynamicResultSetOptionContext.class,0);
		}
		public ParameterOption1Context parameterOption1() {
			return getRuleContext(ParameterOption1Context.class,0);
		}
		public ExternalNameOption2Context externalNameOption2() {
			return getRuleContext(ExternalNameOption2Context.class,0);
		}
		public LanguageOption5Context languageOption5() {
			return getRuleContext(LanguageOption5Context.class,0);
		}
		public ParameterStyleOption3Context parameterStyleOption3() {
			return getRuleContext(ParameterStyleOption3Context.class,0);
		}
		public DeterministicOptionContext deterministicOption() {
			return getRuleContext(DeterministicOptionContext.class,0);
		}
		public PackagePathOptionContext packagePathOption() {
			return getRuleContext(PackagePathOptionContext.class,0);
		}
		public SqlDataOption3Context sqlDataOption3() {
			return getRuleContext(SqlDataOption3Context.class,0);
		}
		public DbinfoOptionContext dbinfoOption() {
			return getRuleContext(DbinfoOptionContext.class,0);
		}
		public CollectionIdOptionContext collectionIdOption() {
			return getRuleContext(CollectionIdOptionContext.class,0);
		}
		public WlmEnvironmentOption2Context wlmEnvironmentOption2() {
			return getRuleContext(WlmEnvironmentOption2Context.class,0);
		}
		public AsuTimeOptionContext asuTimeOption() {
			return getRuleContext(AsuTimeOptionContext.class,0);
		}
		public StayResidentOptionContext stayResidentOption() {
			return getRuleContext(StayResidentOptionContext.class,0);
		}
		public ProgramTypeOptionContext programTypeOption() {
			return getRuleContext(ProgramTypeOptionContext.class,0);
		}
		public SecurityOptionContext securityOption() {
			return getRuleContext(SecurityOptionContext.class,0);
		}
		public RunOptionsOptionContext runOptionsOption() {
			return getRuleContext(RunOptionsOptionContext.class,0);
		}
		public SpecialRegistersOptionContext specialRegistersOption() {
			return getRuleContext(SpecialRegistersOptionContext.class,0);
		}
		public StopAfterFailureOptionContext stopAfterFailureOption() {
			return getRuleContext(StopAfterFailureOptionContext.class,0);
		}
		public TerminalNode COMMIT() { return getToken(DB2zSQLParser.COMMIT, 0); }
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public TerminalNode RETURN() { return getToken(DB2zSQLParser.RETURN, 0); }
		public TerminalNode CALLED() { return getToken(DB2zSQLParser.CALLED, 0); }
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public TerminalNode INPUT() { return getToken(DB2zSQLParser.INPUT, 0); }
		public TerminalNode CALL() { return getToken(DB2zSQLParser.CALL, 0); }
		public TerminalNode DEBUG() { return getToken(DB2zSQLParser.DEBUG, 0); }
		public TerminalNode MODE_() { return getToken(DB2zSQLParser.MODE_, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode YES() { return getToken(DB2zSQLParser.YES, 0); }
		public TerminalNode DISALLOW() { return getToken(DB2zSQLParser.DISALLOW, 0); }
		public TerminalNode ALLOW() { return getToken(DB2zSQLParser.ALLOW, 0); }
		public TerminalNode DISABLE() { return getToken(DB2zSQLParser.DISABLE, 0); }
		public ProcedureOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterProcedureOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitProcedureOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitProcedureOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProcedureOptionListContext procedureOptionList() throws RecognitionException {
		ProcedureOptionListContext _localctx = new ProcedureOptionListContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_procedureOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5744);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,655,_ctx) ) {
			case 1:
				{
				setState(5713);
				dynamicResultSetOption();
				}
				break;
			case 2:
				{
				setState(5714);
				parameterOption1();
				}
				break;
			case 3:
				{
				setState(5715);
				externalNameOption2();
				}
				break;
			case 4:
				{
				setState(5716);
				languageOption5();
				}
				break;
			case 5:
				{
				setState(5717);
				parameterStyleOption3();
				}
				break;
			case 6:
				{
				setState(5718);
				deterministicOption();
				}
				break;
			case 7:
				{
				setState(5719);
				packagePathOption();
				}
				break;
			case 8:
				{
				setState(5720);
				sqlDataOption3();
				}
				break;
			case 9:
				{
				setState(5721);
				dbinfoOption();
				}
				break;
			case 10:
				{
				setState(5722);
				collectionIdOption();
				}
				break;
			case 11:
				{
				setState(5723);
				wlmEnvironmentOption2();
				}
				break;
			case 12:
				{
				setState(5724);
				asuTimeOption();
				}
				break;
			case 13:
				{
				setState(5725);
				stayResidentOption();
				}
				break;
			case 14:
				{
				setState(5726);
				programTypeOption();
				}
				break;
			case 15:
				{
				setState(5727);
				securityOption();
				}
				break;
			case 16:
				{
				setState(5728);
				runOptionsOption();
				}
				break;
			case 17:
				{
				{
				setState(5729);
				match(COMMIT);
				setState(5730);
				match(ON);
				setState(5731);
				match(RETURN);
				setState(5732);
				_la = _input.LA(1);
				if ( !(_la==NO || _la==YES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case 18:
				{
				setState(5733);
				specialRegistersOption();
				}
				break;
			case 19:
				{
				{
				setState(5734);
				match(CALLED);
				setState(5735);
				match(ON);
				setState(5736);
				match(NULL);
				setState(5737);
				match(INPUT);
				}
				}
				break;
			case 20:
				{
				{
				setState(5738);
				match(NULL);
				setState(5739);
				match(CALL);
				}
				}
				break;
			case 21:
				{
				setState(5740);
				stopAfterFailureOption();
				}
				break;
			case 22:
				{
				{
				setState(5741);
				_la = _input.LA(1);
				if ( !(((((_la - 41)) & ~0x3f) == 0 && ((1L << (_la - 41)) & ((1L << (ALLOW - 41)) | (1L << (DISABLE - 41)) | (1L << (DISALLOW - 41)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5742);
				match(DEBUG);
				setState(5743);
				match(MODE_);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateProcedureOptionListContext extends ParserRuleContext {
		public SpecificNameOption2Context specificNameOption2() {
			return getRuleContext(SpecificNameOption2Context.class,0);
		}
		public DynamicResultSetOptionContext dynamicResultSetOption() {
			return getRuleContext(DynamicResultSetOptionContext.class,0);
		}
		public ParameterOption1Context parameterOption1() {
			return getRuleContext(ParameterOption1Context.class,0);
		}
		public ExternalNameOption1Context externalNameOption1() {
			return getRuleContext(ExternalNameOption1Context.class,0);
		}
		public LanguageOption5Context languageOption5() {
			return getRuleContext(LanguageOption5Context.class,0);
		}
		public SqlDataOption3Context sqlDataOption3() {
			return getRuleContext(SqlDataOption3Context.class,0);
		}
		public ParameterStyleOption3Context parameterStyleOption3() {
			return getRuleContext(ParameterStyleOption3Context.class,0);
		}
		public DeterministicOptionContext deterministicOption() {
			return getRuleContext(DeterministicOptionContext.class,0);
		}
		public PackagePathOptionContext packagePathOption() {
			return getRuleContext(PackagePathOptionContext.class,0);
		}
		public FencedOptionContext fencedOption() {
			return getRuleContext(FencedOptionContext.class,0);
		}
		public DbinfoOptionContext dbinfoOption() {
			return getRuleContext(DbinfoOptionContext.class,0);
		}
		public CollectionIdOptionContext collectionIdOption() {
			return getRuleContext(CollectionIdOptionContext.class,0);
		}
		public WlmEnvironmentOption2Context wlmEnvironmentOption2() {
			return getRuleContext(WlmEnvironmentOption2Context.class,0);
		}
		public AsuTimeOptionContext asuTimeOption() {
			return getRuleContext(AsuTimeOptionContext.class,0);
		}
		public StayResidentOptionContext stayResidentOption() {
			return getRuleContext(StayResidentOptionContext.class,0);
		}
		public ProgramTypeOptionContext programTypeOption() {
			return getRuleContext(ProgramTypeOptionContext.class,0);
		}
		public SecurityOptionContext securityOption() {
			return getRuleContext(SecurityOptionContext.class,0);
		}
		public RunOptionsOptionContext runOptionsOption() {
			return getRuleContext(RunOptionsOptionContext.class,0);
		}
		public CommitOnReturnOptionContext commitOnReturnOption() {
			return getRuleContext(CommitOnReturnOptionContext.class,0);
		}
		public SpecialRegistersOptionContext specialRegistersOption() {
			return getRuleContext(SpecialRegistersOptionContext.class,0);
		}
		public NullInputOption2Context nullInputOption2() {
			return getRuleContext(NullInputOption2Context.class,0);
		}
		public StopAfterFailureOptionContext stopAfterFailureOption() {
			return getRuleContext(StopAfterFailureOptionContext.class,0);
		}
		public DebugOptionContext debugOption() {
			return getRuleContext(DebugOptionContext.class,0);
		}
		public CreateProcedureOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createProcedureOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateProcedureOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateProcedureOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateProcedureOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateProcedureOptionListContext createProcedureOptionList() throws RecognitionException {
		CreateProcedureOptionListContext _localctx = new CreateProcedureOptionListContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_createProcedureOptionList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5769);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,656,_ctx) ) {
			case 1:
				{
				setState(5746);
				specificNameOption2();
				}
				break;
			case 2:
				{
				setState(5747);
				dynamicResultSetOption();
				}
				break;
			case 3:
				{
				setState(5748);
				parameterOption1();
				}
				break;
			case 4:
				{
				setState(5749);
				externalNameOption1();
				}
				break;
			case 5:
				{
				setState(5750);
				languageOption5();
				}
				break;
			case 6:
				{
				setState(5751);
				sqlDataOption3();
				}
				break;
			case 7:
				{
				setState(5752);
				parameterStyleOption3();
				}
				break;
			case 8:
				{
				setState(5753);
				deterministicOption();
				}
				break;
			case 9:
				{
				setState(5754);
				packagePathOption();
				}
				break;
			case 10:
				{
				setState(5755);
				fencedOption();
				}
				break;
			case 11:
				{
				setState(5756);
				dbinfoOption();
				}
				break;
			case 12:
				{
				setState(5757);
				collectionIdOption();
				}
				break;
			case 13:
				{
				setState(5758);
				wlmEnvironmentOption2();
				}
				break;
			case 14:
				{
				setState(5759);
				asuTimeOption();
				}
				break;
			case 15:
				{
				setState(5760);
				stayResidentOption();
				}
				break;
			case 16:
				{
				setState(5761);
				programTypeOption();
				}
				break;
			case 17:
				{
				setState(5762);
				securityOption();
				}
				break;
			case 18:
				{
				setState(5763);
				runOptionsOption();
				}
				break;
			case 19:
				{
				setState(5764);
				commitOnReturnOption();
				}
				break;
			case 20:
				{
				setState(5765);
				specialRegistersOption();
				}
				break;
			case 21:
				{
				setState(5766);
				nullInputOption2();
				}
				break;
			case 22:
				{
				setState(5767);
				stopAfterFailureOption();
				}
				break;
			case 23:
				{
				setState(5768);
				debugOption();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcedureDataTypeContext extends ParserRuleContext {
		public ProcedureBuiltinTypeContext procedureBuiltinType() {
			return getRuleContext(ProcedureBuiltinTypeContext.class,0);
		}
		public DistinctTypeNameContext distinctTypeName() {
			return getRuleContext(DistinctTypeNameContext.class,0);
		}
		public ProcedureDataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureDataType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterProcedureDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitProcedureDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitProcedureDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProcedureDataTypeContext procedureDataType() throws RecognitionException {
		ProcedureDataTypeContext _localctx = new ProcedureDataTypeContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_procedureDataType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5773);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,657,_ctx) ) {
			case 1:
				{
				setState(5771);
				procedureBuiltinType();
				}
				break;
			case 2:
				{
				setState(5772);
				distinctTypeName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterSequenceOptionListContext extends ParserRuleContext {
		public RestartOptionContext restartOption() {
			return getRuleContext(RestartOptionContext.class,0);
		}
		public IncrementOptionContext incrementOption() {
			return getRuleContext(IncrementOptionContext.class,0);
		}
		public MinvalueOptionContext minvalueOption() {
			return getRuleContext(MinvalueOptionContext.class,0);
		}
		public MaxvalueOptionContext maxvalueOption() {
			return getRuleContext(MaxvalueOptionContext.class,0);
		}
		public CycleOptionContext cycleOption() {
			return getRuleContext(CycleOptionContext.class,0);
		}
		public CacheOptionContext cacheOption() {
			return getRuleContext(CacheOptionContext.class,0);
		}
		public OrderOptionContext orderOption() {
			return getRuleContext(OrderOptionContext.class,0);
		}
		public AlterSequenceOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterSequenceOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterSequenceOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterSequenceOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterSequenceOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterSequenceOptionListContext alterSequenceOptionList() throws RecognitionException {
		AlterSequenceOptionListContext _localctx = new AlterSequenceOptionListContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_alterSequenceOptionList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5782);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,658,_ctx) ) {
			case 1:
				{
				setState(5775);
				restartOption();
				}
				break;
			case 2:
				{
				setState(5776);
				incrementOption();
				}
				break;
			case 3:
				{
				setState(5777);
				minvalueOption();
				}
				break;
			case 4:
				{
				setState(5778);
				maxvalueOption();
				}
				break;
			case 5:
				{
				setState(5779);
				cycleOption();
				}
				break;
			case 6:
				{
				setState(5780);
				cacheOption();
				}
				break;
			case 7:
				{
				setState(5781);
				orderOption();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateSequenceOptionListContext extends ParserRuleContext {
		public AsTypeOptionContext asTypeOption() {
			return getRuleContext(AsTypeOptionContext.class,0);
		}
		public StartOptionContext startOption() {
			return getRuleContext(StartOptionContext.class,0);
		}
		public IncrementOptionContext incrementOption() {
			return getRuleContext(IncrementOptionContext.class,0);
		}
		public MinvalueOptionContext minvalueOption() {
			return getRuleContext(MinvalueOptionContext.class,0);
		}
		public MaxvalueOptionContext maxvalueOption() {
			return getRuleContext(MaxvalueOptionContext.class,0);
		}
		public CycleOptionContext cycleOption() {
			return getRuleContext(CycleOptionContext.class,0);
		}
		public CacheOptionContext cacheOption() {
			return getRuleContext(CacheOptionContext.class,0);
		}
		public OrderOptionContext orderOption() {
			return getRuleContext(OrderOptionContext.class,0);
		}
		public CreateSequenceOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createSequenceOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateSequenceOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateSequenceOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateSequenceOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateSequenceOptionListContext createSequenceOptionList() throws RecognitionException {
		CreateSequenceOptionListContext _localctx = new CreateSequenceOptionListContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_createSequenceOptionList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5792);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,659,_ctx) ) {
			case 1:
				{
				setState(5784);
				asTypeOption();
				}
				break;
			case 2:
				{
				setState(5785);
				startOption();
				}
				break;
			case 3:
				{
				setState(5786);
				incrementOption();
				}
				break;
			case 4:
				{
				setState(5787);
				minvalueOption();
				}
				break;
			case 5:
				{
				setState(5788);
				maxvalueOption();
				}
				break;
			case 6:
				{
				setState(5789);
				cycleOption();
				}
				break;
			case 7:
				{
				setState(5790);
				cacheOption();
				}
				break;
			case 8:
				{
				setState(5791);
				orderOption();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AsTypeOptionContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public SequenceDataTypeContext sequenceDataType() {
			return getRuleContext(SequenceDataTypeContext.class,0);
		}
		public AsTypeOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asTypeOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAsTypeOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAsTypeOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAsTypeOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AsTypeOptionContext asTypeOption() throws RecognitionException {
		AsTypeOptionContext _localctx = new AsTypeOptionContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_asTypeOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5794);
			match(AS);
			setState(5795);
			sequenceDataType();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StartOptionContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(DB2zSQLParser.START, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public StartOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterStartOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitStartOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitStartOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StartOptionContext startOption() throws RecognitionException {
		StartOptionContext _localctx = new StartOptionContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_startOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5797);
			match(START);
			setState(5798);
			match(WITH);
			setState(5799);
			match(INTEGERLITERAL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RestartOptionContext extends ParserRuleContext {
		public TerminalNode RESTART() { return getToken(DB2zSQLParser.RESTART, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public RestartOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_restartOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRestartOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRestartOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRestartOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RestartOptionContext restartOption() throws RecognitionException {
		RestartOptionContext _localctx = new RestartOptionContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_restartOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5801);
			match(RESTART);
			setState(5804);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5802);
				match(WITH);
				setState(5803);
				match(INTEGERLITERAL);
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IncrementOptionContext extends ParserRuleContext {
		public TerminalNode INCREMENT() { return getToken(DB2zSQLParser.INCREMENT, 0); }
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public IncrementOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_incrementOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterIncrementOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitIncrementOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitIncrementOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IncrementOptionContext incrementOption() throws RecognitionException {
		IncrementOptionContext _localctx = new IncrementOptionContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_incrementOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5806);
			match(INCREMENT);
			setState(5807);
			match(BY);
			setState(5808);
			match(INTEGERLITERAL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MinvalueOptionContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode MINVALUE() { return getToken(DB2zSQLParser.MINVALUE, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public MinvalueOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_minvalueOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterMinvalueOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitMinvalueOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitMinvalueOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MinvalueOptionContext minvalueOption() throws RecognitionException {
		MinvalueOptionContext _localctx = new MinvalueOptionContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_minvalueOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5814);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO:
				{
				{
				setState(5810);
				match(NO);
				setState(5811);
				match(MINVALUE);
				}
				}
				break;
			case MINVALUE:
				{
				{
				setState(5812);
				match(MINVALUE);
				setState(5813);
				match(INTEGERLITERAL);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MaxvalueOptionContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode MAXVALUE() { return getToken(DB2zSQLParser.MAXVALUE, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public MaxvalueOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_maxvalueOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterMaxvalueOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitMaxvalueOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitMaxvalueOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MaxvalueOptionContext maxvalueOption() throws RecognitionException {
		MaxvalueOptionContext _localctx = new MaxvalueOptionContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_maxvalueOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5820);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO:
				{
				{
				setState(5816);
				match(NO);
				setState(5817);
				match(MAXVALUE);
				}
				}
				break;
			case MAXVALUE:
				{
				{
				setState(5818);
				match(MAXVALUE);
				setState(5819);
				match(INTEGERLITERAL);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CycleOptionContext extends ParserRuleContext {
		public TerminalNode CYCLE() { return getToken(DB2zSQLParser.CYCLE, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public CycleOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cycleOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCycleOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCycleOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCycleOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CycleOptionContext cycleOption() throws RecognitionException {
		CycleOptionContext _localctx = new CycleOptionContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_cycleOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5823);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO) {
				{
				setState(5822);
				match(NO);
				}
			}

			setState(5825);
			match(CYCLE);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CacheOptionContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode CACHE() { return getToken(DB2zSQLParser.CACHE, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public CacheOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cacheOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCacheOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCacheOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCacheOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CacheOptionContext cacheOption() throws RecognitionException {
		CacheOptionContext _localctx = new CacheOptionContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_cacheOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5831);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO:
				{
				{
				setState(5827);
				match(NO);
				setState(5828);
				match(CACHE);
				}
				}
				break;
			case CACHE:
				{
				{
				setState(5829);
				match(CACHE);
				setState(5830);
				match(INTEGERLITERAL);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderOptionContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(DB2zSQLParser.ORDER, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public OrderOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterOrderOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitOrderOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitOrderOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderOptionContext orderOption() throws RecognitionException {
		OrderOptionContext _localctx = new OrderOptionContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_orderOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5834);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO) {
				{
				setState(5833);
				match(NO);
				}
			}

			setState(5836);
			match(ORDER);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyLabelOptionContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode KEY() { return getToken(DB2zSQLParser.KEY, 0); }
		public TerminalNode LABEL() { return getToken(DB2zSQLParser.LABEL, 0); }
		public KeyLabelNameContext keyLabelName() {
			return getRuleContext(KeyLabelNameContext.class,0);
		}
		public KeyLabelOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyLabelOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterKeyLabelOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitKeyLabelOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitKeyLabelOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyLabelOptionContext keyLabelOption() throws RecognitionException {
		KeyLabelOptionContext _localctx = new KeyLabelOptionContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_keyLabelOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5844);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO:
				{
				{
				setState(5838);
				match(NO);
				setState(5839);
				match(KEY);
				setState(5840);
				match(LABEL);
				}
				}
				break;
			case KEY:
				{
				{
				setState(5841);
				match(KEY);
				setState(5842);
				match(LABEL);
				setState(5843);
				keyLabelName();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataclasOptionContext extends ParserRuleContext {
		public TerminalNode DATACLAS() { return getToken(DB2zSQLParser.DATACLAS, 0); }
		public DcNameContext dcName() {
			return getRuleContext(DcNameContext.class,0);
		}
		public DataclasOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataclasOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDataclasOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDataclasOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDataclasOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataclasOptionContext dataclasOption() throws RecognitionException {
		DataclasOptionContext _localctx = new DataclasOptionContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_dataclasOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5846);
			match(DATACLAS);
			setState(5847);
			dcName();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MgmtclasOptionContext extends ParserRuleContext {
		public TerminalNode MGMTCLAS() { return getToken(DB2zSQLParser.MGMTCLAS, 0); }
		public McNameContext mcName() {
			return getRuleContext(McNameContext.class,0);
		}
		public MgmtclasOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mgmtclasOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterMgmtclasOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitMgmtclasOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitMgmtclasOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MgmtclasOptionContext mgmtclasOption() throws RecognitionException {
		MgmtclasOptionContext _localctx = new MgmtclasOptionContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_mgmtclasOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5849);
			match(MGMTCLAS);
			setState(5850);
			mcName();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StorclasOptionContext extends ParserRuleContext {
		public TerminalNode STORCLAS() { return getToken(DB2zSQLParser.STORCLAS, 0); }
		public ScNameContext scName() {
			return getRuleContext(ScNameContext.class,0);
		}
		public StorclasOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_storclasOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterStorclasOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitStorclasOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitStorclasOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StorclasOptionContext storclasOption() throws RecognitionException {
		StorclasOptionContext _localctx = new StorclasOptionContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_storclasOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5852);
			match(STORCLAS);
			setState(5853);
			scName();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterStogroupOptionListContext extends ParserRuleContext {
		public KeyLabelOptionContext keyLabelOption() {
			return getRuleContext(KeyLabelOptionContext.class,0);
		}
		public DataclasOptionContext dataclasOption() {
			return getRuleContext(DataclasOptionContext.class,0);
		}
		public MgmtclasOptionContext mgmtclasOption() {
			return getRuleContext(MgmtclasOptionContext.class,0);
		}
		public StorclasOptionContext storclasOption() {
			return getRuleContext(StorclasOptionContext.class,0);
		}
		public TerminalNode ADD() { return getToken(DB2zSQLParser.ADD, 0); }
		public TerminalNode VOLUMES() { return getToken(DB2zSQLParser.VOLUMES, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<VolumeIDContext> volumeID() {
			return getRuleContexts(VolumeIDContext.class);
		}
		public VolumeIDContext volumeID(int i) {
			return getRuleContext(VolumeIDContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> NONNUMERICLITERAL() { return getTokens(DB2zSQLParser.NONNUMERICLITERAL); }
		public TerminalNode NONNUMERICLITERAL(int i) {
			return getToken(DB2zSQLParser.NONNUMERICLITERAL, i);
		}
		public TerminalNode REMOVE() { return getToken(DB2zSQLParser.REMOVE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public AlterStogroupOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterStogroupOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterStogroupOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterStogroupOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterStogroupOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterStogroupOptionListContext alterStogroupOptionList() throws RecognitionException {
		AlterStogroupOptionListContext _localctx = new AlterStogroupOptionListContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_alterStogroupOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5909);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,671,_ctx) ) {
			case 1:
				{
				{
				setState(5855);
				match(ADD);
				setState(5856);
				match(VOLUMES);
				setState(5857);
				match(LPAREN);
				setState(5858);
				volumeID();
				setState(5863);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5859);
					match(COMMA);
					setState(5860);
					volumeID();
					}
					}
					setState(5865);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5866);
				match(RPAREN);
				}
				}
				break;
			case 2:
				{
				{
				setState(5868);
				match(ADD);
				setState(5869);
				match(VOLUMES);
				setState(5870);
				match(LPAREN);
				setState(5871);
				match(NONNUMERICLITERAL);
				setState(5876);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5872);
					match(COMMA);
					setState(5873);
					match(NONNUMERICLITERAL);
					}
					}
					setState(5878);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5879);
				match(RPAREN);
				}
				}
				break;
			case 3:
				{
				{
				setState(5880);
				match(REMOVE);
				setState(5881);
				match(VOLUMES);
				setState(5882);
				match(LPAREN);
				setState(5883);
				volumeID();
				setState(5888);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5884);
					match(COMMA);
					setState(5885);
					volumeID();
					}
					}
					setState(5890);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5891);
				match(RPAREN);
				}
				}
				break;
			case 4:
				{
				{
				setState(5893);
				match(REMOVE);
				setState(5894);
				match(VOLUMES);
				setState(5895);
				match(LPAREN);
				setState(5896);
				match(NONNUMERICLITERAL);
				setState(5901);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5897);
					match(COMMA);
					setState(5898);
					match(NONNUMERICLITERAL);
					}
					}
					setState(5903);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5904);
				match(RPAREN);
				}
				}
				break;
			case 5:
				{
				setState(5905);
				keyLabelOption();
				}
				break;
			case 6:
				{
				setState(5906);
				dataclasOption();
				}
				break;
			case 7:
				{
				setState(5907);
				mgmtclasOption();
				}
				break;
			case 8:
				{
				setState(5908);
				storclasOption();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableOptionListContext extends ParserRuleContext {
		public DataCaptureClauseContext dataCaptureClause() {
			return getRuleContext(DataCaptureClauseContext.class,0);
		}
		public CardinalityClauseContext cardinalityClause() {
			return getRuleContext(CardinalityClauseContext.class,0);
		}
		public AppendClauseContext appendClause() {
			return getRuleContext(AppendClauseContext.class,0);
		}
		public AuditClauseContext auditClause() {
			return getRuleContext(AuditClauseContext.class,0);
		}
		public ValidprocClauseContext validprocClause() {
			return getRuleContext(ValidprocClauseContext.class,0);
		}
		public TerminalNode ADD() { return getToken(DB2zSQLParser.ADD, 0); }
		public AlterTableColumnDefinitionContext alterTableColumnDefinition() {
			return getRuleContext(AlterTableColumnDefinitionContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public ColumnAlterationContext columnAlteration() {
			return getRuleContext(ColumnAlterationContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(DB2zSQLParser.RENAME, 0); }
		public TerminalNode COLUMN() { return getToken(DB2zSQLParser.COLUMN, 0); }
		public SourceColumnNameContext sourceColumnName() {
			return getRuleContext(SourceColumnNameContext.class,0);
		}
		public TerminalNode TO() { return getToken(DB2zSQLParser.TO, 0); }
		public TargetColumnNameContext targetColumnName() {
			return getRuleContext(TargetColumnNameContext.class,0);
		}
		public List<TerminalNode> DROP() { return getTokens(DB2zSQLParser.DROP); }
		public TerminalNode DROP(int i) {
			return getToken(DB2zSQLParser.DROP, i);
		}
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TerminalNode RESTRICT() { return getToken(DB2zSQLParser.RESTRICT, 0); }
		public PeriodDefinitionContext periodDefinition() {
			return getRuleContext(PeriodDefinitionContext.class,0);
		}
		public PartitioningClauseContext partitioningClause() {
			return getRuleContext(PartitioningClauseContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(DB2zSQLParser.PARTITION, 0); }
		public PartitionClauseContext partitionClause() {
			return getRuleContext(PartitionClauseContext.class,0);
		}
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode ROTATE() { return getToken(DB2zSQLParser.ROTATE, 0); }
		public TerminalNode LAST() { return getToken(DB2zSQLParser.LAST, 0); }
		public RotatePartitionClauseContext rotatePartitionClause() {
			return getRuleContext(RotatePartitionClauseContext.class,0);
		}
		public TerminalNode ORGANIZATION() { return getToken(DB2zSQLParser.ORGANIZATION, 0); }
		public AlterHashOrganizationContext alterHashOrganization() {
			return getRuleContext(AlterHashOrganizationContext.class,0);
		}
		public TerminalNode VERSIONING() { return getToken(DB2zSQLParser.VERSIONING, 0); }
		public TerminalNode USE() { return getToken(DB2zSQLParser.USE, 0); }
		public TerminalNode HISTORY() { return getToken(DB2zSQLParser.HISTORY, 0); }
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public HistoryTableNameContext historyTableName() {
			return getRuleContext(HistoryTableNameContext.class,0);
		}
		public MaterializedQueryDefinitionContext materializedQueryDefinition() {
			return getRuleContext(MaterializedQueryDefinitionContext.class,0);
		}
		public TerminalNode QUERY() { return getToken(DB2zSQLParser.QUERY, 0); }
		public MaterializedQueryAlterationContext materializedQueryAlteration() {
			return getRuleContext(MaterializedQueryAlterationContext.class,0);
		}
		public TerminalNode CLONE() { return getToken(DB2zSQLParser.CLONE, 0); }
		public CloneTableNameContext cloneTableName() {
			return getRuleContext(CloneTableNameContext.class,0);
		}
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public TerminalNode ROW() { return getToken(DB2zSQLParser.ROW, 0); }
		public TerminalNode ACCESS() { return getToken(DB2zSQLParser.ACCESS, 0); }
		public TerminalNode CONTROL() { return getToken(DB2zSQLParser.CONTROL, 0); }
		public TerminalNode ENABLE() { return getToken(DB2zSQLParser.ENABLE, 0); }
		public TerminalNode ARCHIVE() { return getToken(DB2zSQLParser.ARCHIVE, 0); }
		public ArchiveTableNameContext archiveTableName() {
			return getRuleContext(ArchiveTableNameContext.class,0);
		}
		public TerminalNode DISABLE() { return getToken(DB2zSQLParser.DISABLE, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode KEY() { return getToken(DB2zSQLParser.KEY, 0); }
		public TerminalNode LABEL() { return getToken(DB2zSQLParser.LABEL, 0); }
		public KeyLabelNameContext keyLabelName() {
			return getRuleContext(KeyLabelNameContext.class,0);
		}
		public TerminalNode FIRST() { return getToken(DB2zSQLParser.FIRST, 0); }
		public TerminalNode ACTIVATE() { return getToken(DB2zSQLParser.ACTIVATE, 0); }
		public TerminalNode DEACTIVATE() { return getToken(DB2zSQLParser.DEACTIVATE, 0); }
		public UniqueConstraintContext uniqueConstraint() {
			return getRuleContext(UniqueConstraintContext.class,0);
		}
		public ReferentialConstraintContext referentialConstraint() {
			return getRuleContext(ReferentialConstraintContext.class,0);
		}
		public CheckConstraintContext checkConstraint() {
			return getRuleContext(CheckConstraintContext.class,0);
		}
		public TerminalNode SYSTEM() { return getToken(DB2zSQLParser.SYSTEM, 0); }
		public ExtraRowOptionContext extraRowOption() {
			return getRuleContext(ExtraRowOptionContext.class,0);
		}
		public TerminalNode MATERIALIZED() { return getToken(DB2zSQLParser.MATERIALIZED, 0); }
		public TerminalNode PRIMARY() { return getToken(DB2zSQLParser.PRIMARY, 0); }
		public ConstraintNameContext constraintName() {
			return getRuleContext(ConstraintNameContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(DB2zSQLParser.UNIQUE, 0); }
		public TerminalNode CHECK() { return getToken(DB2zSQLParser.CHECK, 0); }
		public TerminalNode CONSTRAINT() { return getToken(DB2zSQLParser.CONSTRAINT, 0); }
		public TerminalNode FOREIGN() { return getToken(DB2zSQLParser.FOREIGN, 0); }
		public AlterTableOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTableOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterTableOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterTableOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterTableOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableOptionListContext alterTableOptionList() throws RecognitionException {
		AlterTableOptionListContext _localctx = new AlterTableOptionListContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_alterTableOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6046);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,684,_ctx) ) {
			case 1:
				{
				{
				setState(5911);
				match(ADD);
				setState(5913);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,672,_ctx) ) {
				case 1:
					{
					setState(5912);
					match(COLUMN);
					}
					break;
				}
				setState(5915);
				alterTableColumnDefinition();
				}
				}
				break;
			case 2:
				{
				{
				setState(5916);
				match(ALTER);
				setState(5918);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,673,_ctx) ) {
				case 1:
					{
					setState(5917);
					match(COLUMN);
					}
					break;
				}
				setState(5920);
				columnAlteration();
				}
				}
				break;
			case 3:
				{
				{
				setState(5921);
				match(RENAME);
				setState(5922);
				match(COLUMN);
				setState(5923);
				sourceColumnName();
				setState(5924);
				match(TO);
				setState(5925);
				targetColumnName();
				}
				}
				break;
			case 4:
				{
				{
				setState(5927);
				match(DROP);
				setState(5929);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,674,_ctx) ) {
				case 1:
					{
					setState(5928);
					match(COLUMN);
					}
					break;
				}
				setState(5931);
				columnName();
				setState(5932);
				match(RESTRICT);
				}
				}
				break;
			case 5:
				{
				{
				setState(5934);
				match(ADD);
				setState(5935);
				periodDefinition();
				}
				}
				break;
			case 6:
				{
				{
				setState(5936);
				match(ADD);
				setState(5940);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,675,_ctx) ) {
				case 1:
					{
					setState(5937);
					uniqueConstraint();
					}
					break;
				case 2:
					{
					setState(5938);
					referentialConstraint();
					}
					break;
				case 3:
					{
					setState(5939);
					checkConstraint();
					}
					break;
				}
				}
				}
				break;
			case 7:
				{
				{
				setState(5942);
				match(DROP);
				setState(5953);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PRIMARY:
					{
					{
					setState(5943);
					match(PRIMARY);
					setState(5944);
					match(KEY);
					}
					}
					break;
				case CHECK:
				case CONSTRAINT:
				case UNIQUE:
				case FOREIGN:
					{
					{
					setState(5950);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case UNIQUE:
						{
						setState(5945);
						match(UNIQUE);
						}
						break;
					case FOREIGN:
						{
						{
						setState(5946);
						match(FOREIGN);
						setState(5947);
						match(KEY);
						}
						}
						break;
					case CHECK:
						{
						setState(5948);
						match(CHECK);
						}
						break;
					case CONSTRAINT:
						{
						setState(5949);
						match(CONSTRAINT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5952);
					constraintName();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case 8:
				{
				{
				setState(5955);
				match(ADD);
				setState(5956);
				partitioningClause();
				}
				}
				break;
			case 9:
				{
				{
				setState(5957);
				match(ADD);
				setState(5958);
				match(PARTITION);
				setState(5959);
				partitionClause();
				}
				}
				break;
			case 10:
				{
				{
				setState(5960);
				match(ALTER);
				setState(5961);
				match(PARTITION);
				setState(5962);
				match(INTEGERLITERAL);
				setState(5963);
				partitionClause();
				}
				}
				break;
			case 11:
				{
				{
				setState(5964);
				match(ROTATE);
				setState(5965);
				match(PARTITION);
				setState(5966);
				_la = _input.LA(1);
				if ( !(_la==INTEGERLITERAL || _la==FIRST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5967);
				match(TO);
				setState(5968);
				match(LAST);
				setState(5969);
				rotatePartitionClause();
				}
				}
				break;
			case 12:
				{
				{
				setState(5970);
				match(DROP);
				setState(5971);
				match(ORGANIZATION);
				}
				}
				break;
			case 13:
				{
				{
				setState(5972);
				alterHashOrganization();
				}
				}
				break;
			case 14:
				{
				{
				setState(5973);
				match(ADD);
				setState(5975);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SYSTEM) {
					{
					setState(5974);
					match(SYSTEM);
					}
				}

				setState(5977);
				match(VERSIONING);
				setState(5978);
				match(USE);
				setState(5979);
				match(HISTORY);
				setState(5980);
				match(TABLE);
				setState(5981);
				historyTableName();
				setState(5983);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(5982);
					extraRowOption();
					}
				}

				}
				}
				break;
			case 15:
				{
				{
				setState(5985);
				match(DROP);
				setState(5987);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SYSTEM) {
					{
					setState(5986);
					match(SYSTEM);
					}
				}

				setState(5989);
				match(VERSIONING);
				}
				}
				break;
			case 16:
				{
				{
				setState(5990);
				match(ADD);
				setState(5994);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case MATERIALIZED:
					{
					{
					setState(5991);
					match(MATERIALIZED);
					setState(5992);
					match(QUERY);
					}
					}
					break;
				case QUERY:
					{
					setState(5993);
					match(QUERY);
					}
					break;
				case LPAREN:
					break;
				default:
					break;
				}
				setState(5996);
				materializedQueryDefinition();
				}
				}
				break;
			case 17:
				{
				{
				setState(5997);
				match(ALTER);
				setState(5999);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MATERIALIZED) {
					{
					setState(5998);
					match(MATERIALIZED);
					}
				}

				setState(6001);
				match(QUERY);
				setState(6002);
				materializedQueryAlteration();
				}
				}
				break;
			case 18:
				{
				{
				setState(6003);
				match(DROP);
				setState(6005);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MATERIALIZED) {
					{
					setState(6004);
					match(MATERIALIZED);
					}
				}

				setState(6007);
				match(QUERY);
				}
				}
				break;
			case 19:
				{
				setState(6008);
				dataCaptureClause();
				}
				break;
			case 20:
				{
				setState(6009);
				cardinalityClause();
				}
				break;
			case 21:
				{
				{
				setState(6010);
				match(ADD);
				setState(6011);
				match(CLONE);
				setState(6012);
				cloneTableName();
				}
				}
				break;
			case 22:
				{
				{
				setState(6013);
				match(DROP);
				setState(6014);
				match(CLONE);
				}
				}
				break;
			case 23:
				{
				{
				setState(6015);
				match(ADD);
				setState(6016);
				match(RESTRICT);
				setState(6017);
				match(ON);
				setState(6018);
				match(DROP);
				}
				}
				break;
			case 24:
				{
				{
				setState(6019);
				match(DROP);
				setState(6020);
				match(RESTRICT);
				setState(6021);
				match(ON);
				setState(6022);
				match(DROP);
				}
				}
				break;
			case 25:
				{
				{
				setState(6023);
				_la = _input.LA(1);
				if ( !(_la==ACTIVATE || _la==DEACTIVATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6024);
				match(ROW);
				setState(6025);
				match(ACCESS);
				setState(6026);
				match(CONTROL);
				}
				}
				break;
			case 26:
				{
				{
				setState(6027);
				_la = _input.LA(1);
				if ( !(_la==ACTIVATE || _la==DEACTIVATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6028);
				match(COLUMN);
				setState(6029);
				match(ACCESS);
				setState(6030);
				match(CONTROL);
				}
				}
				break;
			case 27:
				{
				setState(6031);
				appendClause();
				}
				break;
			case 28:
				{
				setState(6032);
				auditClause();
				}
				break;
			case 29:
				{
				setState(6033);
				validprocClause();
				}
				break;
			case 30:
				{
				{
				setState(6034);
				match(ENABLE);
				setState(6035);
				match(ARCHIVE);
				setState(6036);
				match(USE);
				setState(6037);
				archiveTableName();
				}
				}
				break;
			case 31:
				{
				{
				setState(6038);
				match(DISABLE);
				setState(6039);
				match(ARCHIVE);
				}
				}
				break;
			case 32:
				{
				{
				setState(6040);
				match(NO);
				setState(6041);
				match(KEY);
				setState(6042);
				match(LABEL);
				}
				}
				break;
			case 33:
				{
				{
				setState(6043);
				match(KEY);
				setState(6044);
				match(LABEL);
				setState(6045);
				keyLabelName();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTablespaceOptionListContext extends ParserRuleContext {
		public BufferpoolOptionContext bufferpoolOption() {
			return getRuleContext(BufferpoolOptionContext.class,0);
		}
		public CcsidClause2Context ccsidClause2() {
			return getRuleContext(CcsidClause2Context.class,0);
		}
		public CloseOptionContext closeOption() {
			return getRuleContext(CloseOptionContext.class,0);
		}
		public CompressOptionContext compressOption() {
			return getRuleContext(CompressOptionContext.class,0);
		}
		public DssizeOptionContext dssizeOption() {
			return getRuleContext(DssizeOptionContext.class,0);
		}
		public InsertAlgorithmOptionContext insertAlgorithmOption() {
			return getRuleContext(InsertAlgorithmOptionContext.class,0);
		}
		public LockmaxOptionContext lockmaxOption() {
			return getRuleContext(LockmaxOptionContext.class,0);
		}
		public LocksizeOptionContext locksizeOption() {
			return getRuleContext(LocksizeOptionContext.class,0);
		}
		public LoggedOptionContext loggedOption() {
			return getRuleContext(LoggedOptionContext.class,0);
		}
		public MaxrowsOptionContext maxrowsOption() {
			return getRuleContext(MaxrowsOptionContext.class,0);
		}
		public MaxpartitionsOptionContext maxpartitionsOption() {
			return getRuleContext(MaxpartitionsOptionContext.class,0);
		}
		public SegsizeOptionContext segsizeOption() {
			return getRuleContext(SegsizeOptionContext.class,0);
		}
		public TrackmodClauseContext trackmodClause() {
			return getRuleContext(TrackmodClauseContext.class,0);
		}
		public TerminalNode DROP() { return getToken(DB2zSQLParser.DROP, 0); }
		public TerminalNode PENDING() { return getToken(DB2zSQLParser.PENDING, 0); }
		public TerminalNode CHANGES() { return getToken(DB2zSQLParser.CHANGES, 0); }
		public TerminalNode MEMBER() { return getToken(DB2zSQLParser.MEMBER, 0); }
		public TerminalNode CLUSTER() { return getToken(DB2zSQLParser.CLUSTER, 0); }
		public UsingBlockContext usingBlock() {
			return getRuleContext(UsingBlockContext.class,0);
		}
		public FreeBlockContext freeBlock() {
			return getRuleContext(FreeBlockContext.class,0);
		}
		public GbpcacheBlockContext gbpcacheBlock() {
			return getRuleContext(GbpcacheBlockContext.class,0);
		}
		public TerminalNode PAGENUM() { return getToken(DB2zSQLParser.PAGENUM, 0); }
		public TerminalNode RELATIVE() { return getToken(DB2zSQLParser.RELATIVE, 0); }
		public TerminalNode YES() { return getToken(DB2zSQLParser.YES, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public AlterTablespaceOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTablespaceOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterTablespaceOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterTablespaceOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterTablespaceOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTablespaceOptionListContext alterTablespaceOptionList() throws RecognitionException {
		AlterTablespaceOptionListContext _localctx = new AlterTablespaceOptionListContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_alterTablespaceOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6072);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BUFFERPOOL:
				{
				setState(6048);
				bufferpoolOption();
				}
				break;
			case CCSID:
				{
				setState(6049);
				ccsidClause2();
				}
				break;
			case CLOSE:
				{
				setState(6050);
				closeOption();
				}
				break;
			case COMPRESS:
				{
				setState(6051);
				compressOption();
				}
				break;
			case DROP:
				{
				{
				setState(6052);
				match(DROP);
				setState(6053);
				match(PENDING);
				setState(6054);
				match(CHANGES);
				}
				}
				break;
			case DSSIZE:
				{
				setState(6055);
				dssizeOption();
				}
				break;
			case INSERT:
				{
				setState(6056);
				insertAlgorithmOption();
				}
				break;
			case LOCKMAX:
				{
				setState(6057);
				lockmaxOption();
				}
				break;
			case LOCKSIZE:
				{
				setState(6058);
				locksizeOption();
				}
				break;
			case NOT:
			case LOG:
			case LOGGED:
				{
				setState(6059);
				loggedOption();
				}
				break;
			case MAXROWS:
				{
				setState(6060);
				maxrowsOption();
				}
				break;
			case MAXPARTITIONS:
				{
				setState(6061);
				maxpartitionsOption();
				}
				break;
			case MEMBER:
				{
				{
				setState(6062);
				match(MEMBER);
				setState(6063);
				match(CLUSTER);
				setState(6064);
				_la = _input.LA(1);
				if ( !(_la==NO || _la==YES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case SEGSIZE:
				{
				setState(6065);
				segsizeOption();
				}
				break;
			case TRACKMOD:
				{
				setState(6066);
				trackmodClause();
				}
				break;
			case ERASE:
			case PRIQTY:
			case SECQTY:
			case USING:
				{
				{
				setState(6067);
				usingBlock();
				}
				}
				break;
			case FREEPAGE:
			case PCTFREE:
				{
				{
				setState(6068);
				freeBlock();
				}
				}
				break;
			case GBPCACHE:
				{
				{
				setState(6069);
				gbpcacheBlock();
				}
				}
				break;
			case PAGENUM:
				{
				{
				setState(6070);
				match(PAGENUM);
				setState(6071);
				match(RELATIVE);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTablespaceOptionListContext extends ParserRuleContext {
		public InDatabaseOptionContext inDatabaseOption() {
			return getRuleContext(InDatabaseOptionContext.class,0);
		}
		public BufferpoolOptionContext bufferpoolOption() {
			return getRuleContext(BufferpoolOptionContext.class,0);
		}
		public PartitionByGrowthSpecificationContext partitionByGrowthSpecification() {
			return getRuleContext(PartitionByGrowthSpecificationContext.class,0);
		}
		public PartitionByRangeSpecificationContext partitionByRangeSpecification() {
			return getRuleContext(PartitionByRangeSpecificationContext.class,0);
		}
		public SegsizeOptionContext segsizeOption() {
			return getRuleContext(SegsizeOptionContext.class,0);
		}
		public CcsidClause1Context ccsidClause1() {
			return getRuleContext(CcsidClause1Context.class,0);
		}
		public CloseOptionContext closeOption() {
			return getRuleContext(CloseOptionContext.class,0);
		}
		public CompressOptionContext compressOption() {
			return getRuleContext(CompressOptionContext.class,0);
		}
		public DefineOptionContext defineOption() {
			return getRuleContext(DefineOptionContext.class,0);
		}
		public FreeBlockContext freeBlock() {
			return getRuleContext(FreeBlockContext.class,0);
		}
		public GbpcacheBlockContext gbpcacheBlock() {
			return getRuleContext(GbpcacheBlockContext.class,0);
		}
		public InsertAlgorithmOptionContext insertAlgorithmOption() {
			return getRuleContext(InsertAlgorithmOptionContext.class,0);
		}
		public LockmaxOptionContext lockmaxOption() {
			return getRuleContext(LockmaxOptionContext.class,0);
		}
		public LocksizeOptionContext locksizeOption() {
			return getRuleContext(LocksizeOptionContext.class,0);
		}
		public LoggedOptionContext loggedOption() {
			return getRuleContext(LoggedOptionContext.class,0);
		}
		public MaxrowsOptionContext maxrowsOption() {
			return getRuleContext(MaxrowsOptionContext.class,0);
		}
		public MaxpartitionsOptionContext maxpartitionsOption() {
			return getRuleContext(MaxpartitionsOptionContext.class,0);
		}
		public MemberClauseContext memberClause() {
			return getRuleContext(MemberClauseContext.class,0);
		}
		public TrackmodClauseContext trackmodClause() {
			return getRuleContext(TrackmodClauseContext.class,0);
		}
		public UsingBlockContext usingBlock() {
			return getRuleContext(UsingBlockContext.class,0);
		}
		public CreateTablespaceOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTablespaceOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateTablespaceOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateTablespaceOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateTablespaceOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTablespaceOptionListContext createTablespaceOptionList() throws RecognitionException {
		CreateTablespaceOptionListContext _localctx = new CreateTablespaceOptionListContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_createTablespaceOptionList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6094);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,686,_ctx) ) {
			case 1:
				{
				setState(6074);
				inDatabaseOption();
				}
				break;
			case 2:
				{
				setState(6075);
				bufferpoolOption();
				}
				break;
			case 3:
				{
				setState(6076);
				partitionByGrowthSpecification();
				}
				break;
			case 4:
				{
				setState(6077);
				partitionByRangeSpecification();
				}
				break;
			case 5:
				{
				setState(6078);
				segsizeOption();
				}
				break;
			case 6:
				{
				setState(6079);
				ccsidClause1();
				}
				break;
			case 7:
				{
				setState(6080);
				closeOption();
				}
				break;
			case 8:
				{
				setState(6081);
				compressOption();
				}
				break;
			case 9:
				{
				setState(6082);
				defineOption();
				}
				break;
			case 10:
				{
				setState(6083);
				freeBlock();
				}
				break;
			case 11:
				{
				setState(6084);
				gbpcacheBlock();
				}
				break;
			case 12:
				{
				setState(6085);
				insertAlgorithmOption();
				}
				break;
			case 13:
				{
				setState(6086);
				lockmaxOption();
				}
				break;
			case 14:
				{
				setState(6087);
				locksizeOption();
				}
				break;
			case 15:
				{
				setState(6088);
				loggedOption();
				}
				break;
			case 16:
				{
				setState(6089);
				maxrowsOption();
				}
				break;
			case 17:
				{
				setState(6090);
				maxpartitionsOption();
				}
				break;
			case 18:
				{
				setState(6091);
				memberClause();
				}
				break;
			case 19:
				{
				setState(6092);
				trackmodClause();
				}
				break;
			case 20:
				{
				setState(6093);
				usingBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TrustedContextOptionListContext extends ParserRuleContext {
		public UserClauseContext userClause() {
			return getRuleContext(UserClauseContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode SYSTEM() { return getToken(DB2zSQLParser.SYSTEM, 0); }
		public TerminalNode AUTHID() { return getToken(DB2zSQLParser.AUTHID, 0); }
		public AuthorizationNameContext authorizationName() {
			return getRuleContext(AuthorizationNameContext.class,0);
		}
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode DEFAULT() { return getToken(DB2zSQLParser.DEFAULT, 0); }
		public List<TerminalNode> ROLE() { return getTokens(DB2zSQLParser.ROLE); }
		public TerminalNode ROLE(int i) {
			return getToken(DB2zSQLParser.ROLE, i);
		}
		public RoleNameContext roleName() {
			return getRuleContext(RoleNameContext.class,0);
		}
		public TerminalNode ENABLE() { return getToken(DB2zSQLParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(DB2zSQLParser.DISABLE, 0); }
		public TerminalNode SECURITY() { return getToken(DB2zSQLParser.SECURITY, 0); }
		public TerminalNode LABEL() { return getToken(DB2zSQLParser.LABEL, 0); }
		public SeclabelNameContext seclabelName() {
			return getRuleContext(SeclabelNameContext.class,0);
		}
		public TerminalNode ATTRIBUTES() { return getToken(DB2zSQLParser.ATTRIBUTES, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<AlterAttributesOptionsContext> alterAttributesOptions() {
			return getRuleContexts(AlterAttributesOptionsContext.class);
		}
		public AlterAttributesOptionsContext alterAttributesOptions(int i) {
			return getRuleContext(AlterAttributesOptionsContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode ADD() { return getToken(DB2zSQLParser.ADD, 0); }
		public List<AddAttributesOptionsContext> addAttributesOptions() {
			return getRuleContexts(AddAttributesOptionsContext.class);
		}
		public AddAttributesOptionsContext addAttributesOptions(int i) {
			return getRuleContext(AddAttributesOptionsContext.class,i);
		}
		public TerminalNode DROP() { return getToken(DB2zSQLParser.DROP, 0); }
		public List<DropAttributesOptionsContext> dropAttributesOptions() {
			return getRuleContexts(DropAttributesOptionsContext.class);
		}
		public DropAttributesOptionsContext dropAttributesOptions(int i) {
			return getRuleContext(DropAttributesOptionsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public TerminalNode WITHOUT() { return getToken(DB2zSQLParser.WITHOUT, 0); }
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode OBJECT() { return getToken(DB2zSQLParser.OBJECT, 0); }
		public TerminalNode OWNER() { return getToken(DB2zSQLParser.OWNER, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode AND() { return getToken(DB2zSQLParser.AND, 0); }
		public TerminalNode QUALIFIER() { return getToken(DB2zSQLParser.QUALIFIER, 0); }
		public TrustedContextOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trustedContextOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTrustedContextOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTrustedContextOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTrustedContextOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TrustedContextOptionListContext trustedContextOptionList() throws RecognitionException {
		TrustedContextOptionListContext _localctx = new TrustedContextOptionListContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_trustedContextOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6184);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,695,_ctx) ) {
			case 1:
				{
				{
				setState(6096);
				match(ALTER);
				setState(6097);
				match(SYSTEM);
				setState(6098);
				match(AUTHID);
				setState(6099);
				authorizationName();
				}
				}
				break;
			case 2:
				{
				{
				setState(6100);
				match(ALTER);
				setState(6101);
				match(NO);
				setState(6102);
				match(DEFAULT);
				setState(6103);
				match(ROLE);
				}
				}
				break;
			case 3:
				{
				{
				setState(6104);
				match(ALTER);
				setState(6105);
				match(DEFAULT);
				setState(6106);
				match(ROLE);
				setState(6107);
				roleName();
				setState(6120);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case WITHOUT:
					{
					{
					setState(6108);
					match(WITHOUT);
					setState(6109);
					match(ROLE);
					setState(6110);
					match(AS);
					setState(6111);
					match(OBJECT);
					setState(6112);
					match(OWNER);
					}
					}
					break;
				case WITH:
					{
					{
					setState(6113);
					match(WITH);
					setState(6114);
					match(ROLE);
					setState(6115);
					match(AS);
					setState(6116);
					match(OBJECT);
					setState(6117);
					match(OWNER);
					setState(6118);
					match(AND);
					setState(6119);
					match(QUALIFIER);
					}
					}
					break;
				case EOF:
				case SEMICOLON:
				case ADD:
				case ALTER:
				case DEFAULT:
				case DISABLE:
				case DROP:
				case END_EXEC:
				case NO:
				case ENABLE:
				case REPLACE:
					break;
				default:
					break;
				}
				}
				}
				break;
			case 4:
				{
				{
				setState(6123);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALTER) {
					{
					setState(6122);
					match(ALTER);
					}
				}

				setState(6125);
				match(ENABLE);
				}
				}
				break;
			case 5:
				{
				{
				setState(6127);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALTER) {
					{
					setState(6126);
					match(ALTER);
					}
				}

				setState(6129);
				match(DISABLE);
				}
				}
				break;
			case 6:
				{
				{
				setState(6131);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALTER) {
					{
					setState(6130);
					match(ALTER);
					}
				}

				setState(6133);
				match(NO);
				setState(6134);
				match(DEFAULT);
				setState(6135);
				match(SECURITY);
				setState(6136);
				match(LABEL);
				}
				}
				break;
			case 7:
				{
				{
				setState(6138);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALTER) {
					{
					setState(6137);
					match(ALTER);
					}
				}

				setState(6140);
				match(DEFAULT);
				setState(6141);
				match(SECURITY);
				setState(6142);
				match(LABEL);
				setState(6143);
				seclabelName();
				}
				}
				break;
			case 8:
				{
				{
				setState(6144);
				match(ALTER);
				setState(6145);
				match(ATTRIBUTES);
				setState(6146);
				match(LPAREN);
				setState(6147);
				alterAttributesOptions();
				setState(6152);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6148);
					match(COMMA);
					setState(6149);
					alterAttributesOptions();
					}
					}
					setState(6154);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6155);
				match(RPAREN);
				}
				}
				break;
			case 9:
				{
				{
				setState(6157);
				match(ADD);
				setState(6158);
				match(ATTRIBUTES);
				setState(6159);
				match(LPAREN);
				setState(6160);
				addAttributesOptions();
				setState(6165);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6161);
					match(COMMA);
					setState(6162);
					addAttributesOptions();
					}
					}
					setState(6167);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6168);
				match(RPAREN);
				}
				}
				break;
			case 10:
				{
				{
				setState(6170);
				match(DROP);
				setState(6171);
				match(ATTRIBUTES);
				setState(6172);
				match(LPAREN);
				setState(6173);
				dropAttributesOptions();
				setState(6178);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6174);
					match(COMMA);
					setState(6175);
					dropAttributesOptions();
					}
					}
					setState(6180);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6181);
				match(RPAREN);
				}
				}
				break;
			case 11:
				{
				setState(6183);
				userClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DatabaseOptionListContext extends ParserRuleContext {
		public BufferpoolOptionContext bufferpoolOption() {
			return getRuleContext(BufferpoolOptionContext.class,0);
		}
		public CcsidClause1Context ccsidClause1() {
			return getRuleContext(CcsidClause1Context.class,0);
		}
		public TerminalNode INDEXBP() { return getToken(DB2zSQLParser.INDEXBP, 0); }
		public BpNameContext bpName() {
			return getRuleContext(BpNameContext.class,0);
		}
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode WORKFILE() { return getToken(DB2zSQLParser.WORKFILE, 0); }
		public TerminalNode STOGROUP() { return getToken(DB2zSQLParser.STOGROUP, 0); }
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public MemberNameContext memberName() {
			return getRuleContext(MemberNameContext.class,0);
		}
		public TerminalNode SYSDEFLT() { return getToken(DB2zSQLParser.SYSDEFLT, 0); }
		public StogroupNameContext stogroupName() {
			return getRuleContext(StogroupNameContext.class,0);
		}
		public DatabaseOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_databaseOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDatabaseOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDatabaseOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDatabaseOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DatabaseOptionListContext databaseOptionList() throws RecognitionException {
		DatabaseOptionListContext _localctx = new DatabaseOptionListContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_databaseOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6201);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BUFFERPOOL:
				{
				setState(6186);
				bufferpoolOption();
				}
				break;
			case INDEXBP:
				{
				{
				setState(6187);
				match(INDEXBP);
				setState(6188);
				bpName();
				}
				}
				break;
			case AS:
				{
				{
				setState(6189);
				match(AS);
				setState(6190);
				match(WORKFILE);
				setState(6193);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(6191);
					match(FOR);
					setState(6192);
					memberName();
					}
				}

				}
				}
				break;
			case STOGROUP:
				{
				{
				setState(6195);
				match(STOGROUP);
				setState(6198);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,697,_ctx) ) {
				case 1:
					{
					setState(6196);
					match(SYSDEFLT);
					}
					break;
				case 2:
					{
					setState(6197);
					stogroupName();
					}
					break;
				}
				}
				}
				break;
			case CCSID:
				{
				setState(6200);
				ccsidClause1();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateIndexOptionListContext extends ParserRuleContext {
		public IncludeColumnPhraseContext includeColumnPhrase() {
			return getRuleContext(IncludeColumnPhraseContext.class,0);
		}
		public ClusterOptionContext clusterOption() {
			return getRuleContext(ClusterOptionContext.class,0);
		}
		public PaddedOptionContext paddedOption() {
			return getRuleContext(PaddedOptionContext.class,0);
		}
		public CompressOptionContext compressOption() {
			return getRuleContext(CompressOptionContext.class,0);
		}
		public List<UsingSpecification2Context> usingSpecification2() {
			return getRuleContexts(UsingSpecification2Context.class);
		}
		public UsingSpecification2Context usingSpecification2(int i) {
			return getRuleContext(UsingSpecification2Context.class,i);
		}
		public List<FreeSpecificationContext> freeSpecification() {
			return getRuleContexts(FreeSpecificationContext.class);
		}
		public FreeSpecificationContext freeSpecification(int i) {
			return getRuleContext(FreeSpecificationContext.class,i);
		}
		public List<GbpcacheSpecificationContext> gbpcacheSpecification() {
			return getRuleContexts(GbpcacheSpecificationContext.class);
		}
		public GbpcacheSpecificationContext gbpcacheSpecification(int i) {
			return getRuleContext(GbpcacheSpecificationContext.class,i);
		}
		public DefineOptionContext defineOption() {
			return getRuleContext(DefineOptionContext.class,0);
		}
		public BufferpoolOptionContext bufferpoolOption() {
			return getRuleContext(BufferpoolOptionContext.class,0);
		}
		public CloseOptionContext closeOption() {
			return getRuleContext(CloseOptionContext.class,0);
		}
		public List<DssizeOptionContext> dssizeOption() {
			return getRuleContexts(DssizeOptionContext.class);
		}
		public DssizeOptionContext dssizeOption(int i) {
			return getRuleContext(DssizeOptionContext.class,i);
		}
		public PiecesizeOptionContext piecesizeOption() {
			return getRuleContext(PiecesizeOptionContext.class,0);
		}
		public CopyOptionContext copyOption() {
			return getRuleContext(CopyOptionContext.class,0);
		}
		public XmlIndexSpecificationContext xmlIndexSpecification() {
			return getRuleContext(XmlIndexSpecificationContext.class,0);
		}
		public TerminalNode PARTITIONED() { return getToken(DB2zSQLParser.PARTITIONED, 0); }
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public TerminalNode KEYS() { return getToken(DB2zSQLParser.KEYS, 0); }
		public TerminalNode PARTITION() { return getToken(DB2zSQLParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<PartitionElementContext> partitionElement() {
			return getRuleContexts(PartitionElementContext.class);
		}
		public PartitionElementContext partitionElement(int i) {
			return getRuleContext(PartitionElementContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode DEFER() { return getToken(DB2zSQLParser.DEFER, 0); }
		public TerminalNode INCLUDE() { return getToken(DB2zSQLParser.INCLUDE, 0); }
		public TerminalNode EXCLUDE() { return getToken(DB2zSQLParser.EXCLUDE, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode YES() { return getToken(DB2zSQLParser.YES, 0); }
		public TerminalNode RANGE() { return getToken(DB2zSQLParser.RANGE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public CreateIndexOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createIndexOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateIndexOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateIndexOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateIndexOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateIndexOptionListContext createIndexOptionList() throws RecognitionException {
		CreateIndexOptionListContext _localctx = new CreateIndexOptionListContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_createIndexOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6257);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,705,_ctx) ) {
			case 1:
				{
				{
				setState(6203);
				xmlIndexSpecification();
				}
				}
				break;
			case 2:
				{
				setState(6204);
				includeColumnPhrase();
				}
				break;
			case 3:
				{
				setState(6205);
				clusterOption();
				}
				break;
			case 4:
				{
				{
				setState(6206);
				match(PARTITIONED);
				}
				}
				break;
			case 5:
				{
				setState(6207);
				paddedOption();
				}
				break;
			case 6:
				{
				setState(6208);
				compressOption();
				}
				break;
			case 7:
				{
				setState(6209);
				usingSpecification2();
				}
				break;
			case 8:
				{
				setState(6210);
				freeSpecification();
				}
				break;
			case 9:
				{
				setState(6211);
				gbpcacheSpecification();
				}
				break;
			case 10:
				{
				setState(6212);
				defineOption();
				}
				break;
			case 11:
				{
				{
				setState(6213);
				_la = _input.LA(1);
				if ( !(_la==INCLUDE || _la==EXCLUDE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6214);
				match(NULL);
				setState(6215);
				match(KEYS);
				}
				}
				break;
			case 12:
				{
				{
				setState(6216);
				match(PARTITION);
				setState(6217);
				match(BY);
				setState(6219);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RANGE) {
					{
					setState(6218);
					match(RANGE);
					}
				}

				setState(6221);
				match(LPAREN);
				setState(6222);
				partitionElement();
				setState(6229);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==DSSIZE || _la==USING || ((((_la - 469)) & ~0x3f) == 0 && ((1L << (_la - 469)) & ((1L << (FREEPAGE - 469)) | (1L << (GBPCACHE - 469)) | (1L << (PCTFREE - 469)))) != 0)) {
					{
					setState(6227);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case USING:
						{
						setState(6223);
						usingSpecification2();
						}
						break;
					case FREEPAGE:
					case PCTFREE:
						{
						setState(6224);
						freeSpecification();
						}
						break;
					case GBPCACHE:
						{
						setState(6225);
						gbpcacheSpecification();
						}
						break;
					case DSSIZE:
						{
						setState(6226);
						dssizeOption();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(6231);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6245);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6232);
					match(COMMA);
					setState(6233);
					partitionElement();
					setState(6240);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==DSSIZE || _la==USING || ((((_la - 469)) & ~0x3f) == 0 && ((1L << (_la - 469)) & ((1L << (FREEPAGE - 469)) | (1L << (GBPCACHE - 469)) | (1L << (PCTFREE - 469)))) != 0)) {
						{
						setState(6238);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case USING:
							{
							setState(6234);
							usingSpecification2();
							}
							break;
						case FREEPAGE:
						case PCTFREE:
							{
							setState(6235);
							freeSpecification();
							}
							break;
						case GBPCACHE:
							{
							setState(6236);
							gbpcacheSpecification();
							}
							break;
						case DSSIZE:
							{
							setState(6237);
							dssizeOption();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						setState(6242);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					}
					setState(6247);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6248);
				match(RPAREN);
				}
				}
				break;
			case 13:
				{
				setState(6250);
				bufferpoolOption();
				}
				break;
			case 14:
				{
				setState(6251);
				closeOption();
				}
				break;
			case 15:
				{
				{
				setState(6252);
				match(DEFER);
				setState(6253);
				_la = _input.LA(1);
				if ( !(_la==NO || _la==YES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case 16:
				{
				setState(6254);
				dssizeOption();
				}
				break;
			case 17:
				{
				setState(6255);
				piecesizeOption();
				}
				break;
			case 18:
				{
				setState(6256);
				copyOption();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateLobTablespaceOptionListContext extends ParserRuleContext {
		public InDatabaseOptionContext inDatabaseOption() {
			return getRuleContext(InDatabaseOptionContext.class,0);
		}
		public BufferpoolOptionContext bufferpoolOption() {
			return getRuleContext(BufferpoolOptionContext.class,0);
		}
		public CloseOptionContext closeOption() {
			return getRuleContext(CloseOptionContext.class,0);
		}
		public CompressOptionContext compressOption() {
			return getRuleContext(CompressOptionContext.class,0);
		}
		public DefineOptionContext defineOption() {
			return getRuleContext(DefineOptionContext.class,0);
		}
		public DssizeOptionContext dssizeOption() {
			return getRuleContext(DssizeOptionContext.class,0);
		}
		public GbpcacheSpecificationContext gbpcacheSpecification() {
			return getRuleContext(GbpcacheSpecificationContext.class,0);
		}
		public LockmaxOptionContext lockmaxOption() {
			return getRuleContext(LockmaxOptionContext.class,0);
		}
		public LocksizeOptionContext locksizeOption() {
			return getRuleContext(LocksizeOptionContext.class,0);
		}
		public LoggedOptionContext loggedOption() {
			return getRuleContext(LoggedOptionContext.class,0);
		}
		public UsingSpecification2Context usingSpecification2() {
			return getRuleContext(UsingSpecification2Context.class,0);
		}
		public CreateLobTablespaceOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createLobTablespaceOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateLobTablespaceOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateLobTablespaceOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateLobTablespaceOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateLobTablespaceOptionListContext createLobTablespaceOptionList() throws RecognitionException {
		CreateLobTablespaceOptionListContext _localctx = new CreateLobTablespaceOptionListContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_createLobTablespaceOptionList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6270);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IN:
				{
				setState(6259);
				inDatabaseOption();
				}
				break;
			case BUFFERPOOL:
				{
				setState(6260);
				bufferpoolOption();
				}
				break;
			case CLOSE:
				{
				setState(6261);
				closeOption();
				}
				break;
			case COMPRESS:
				{
				setState(6262);
				compressOption();
				}
				break;
			case DEFINE:
				{
				setState(6263);
				defineOption();
				}
				break;
			case DSSIZE:
				{
				setState(6264);
				dssizeOption();
				}
				break;
			case GBPCACHE:
				{
				setState(6265);
				gbpcacheSpecification();
				}
				break;
			case LOCKMAX:
				{
				setState(6266);
				lockmaxOption();
				}
				break;
			case LOCKSIZE:
				{
				setState(6267);
				locksizeOption();
				}
				break;
			case NOT:
			case LOG:
			case LOGGED:
				{
				setState(6268);
				loggedOption();
				}
				break;
			case USING:
				{
				setState(6269);
				usingSpecification2();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InDatabaseOptionContext extends ParserRuleContext {
		public TerminalNode IN() { return getToken(DB2zSQLParser.IN, 0); }
		public DatabaseNameContext databaseName() {
			return getRuleContext(DatabaseNameContext.class,0);
		}
		public InDatabaseOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inDatabaseOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterInDatabaseOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitInDatabaseOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitInDatabaseOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InDatabaseOptionContext inDatabaseOption() throws RecognitionException {
		InDatabaseOptionContext _localctx = new InDatabaseOptionContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_inDatabaseOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6272);
			match(IN);
			setState(6273);
			databaseName();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SegsizeOptionContext extends ParserRuleContext {
		public TerminalNode SEGSIZE() { return getToken(DB2zSQLParser.SEGSIZE, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public SegsizeOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_segsizeOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSegsizeOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSegsizeOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSegsizeOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SegsizeOptionContext segsizeOption() throws RecognitionException {
		SegsizeOptionContext _localctx = new SegsizeOptionContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_segsizeOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6275);
			match(SEGSIZE);
			setState(6276);
			match(INTEGERLITERAL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumpartsOptionContext extends ParserRuleContext {
		public TerminalNode NUMPARTS() { return getToken(DB2zSQLParser.NUMPARTS, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public NumpartsOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numpartsOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterNumpartsOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitNumpartsOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitNumpartsOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumpartsOptionContext numpartsOption() throws RecognitionException {
		NumpartsOptionContext _localctx = new NumpartsOptionContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_numpartsOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6278);
			match(NUMPARTS);
			setState(6279);
			match(INTEGERLITERAL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionByGrowthSpecificationContext extends ParserRuleContext {
		public DssizeOptionContext dssizeOption() {
			return getRuleContext(DssizeOptionContext.class,0);
		}
		public MaxpartitionsOptionContext maxpartitionsOption() {
			return getRuleContext(MaxpartitionsOptionContext.class,0);
		}
		public NumpartsOptionContext numpartsOption() {
			return getRuleContext(NumpartsOptionContext.class,0);
		}
		public PartitionByGrowthSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionByGrowthSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPartitionByGrowthSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPartitionByGrowthSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPartitionByGrowthSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionByGrowthSpecificationContext partitionByGrowthSpecification() throws RecognitionException {
		PartitionByGrowthSpecificationContext _localctx = new PartitionByGrowthSpecificationContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_partitionByGrowthSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6286);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAXPARTITIONS:
				{
				{
				setState(6281);
				maxpartitionsOption();
				setState(6283);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,707,_ctx) ) {
				case 1:
					{
					setState(6282);
					numpartsOption();
					}
					break;
				}
				}
				}
				break;
			case DSSIZE:
				{
				setState(6285);
				dssizeOption();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionByRangeSpecificationContext extends ParserRuleContext {
		public NumpartsOptionContext numpartsOption() {
			return getRuleContext(NumpartsOptionContext.class,0);
		}
		public List<PagenumClauseContext> pagenumClause() {
			return getRuleContexts(PagenumClauseContext.class);
		}
		public PagenumClauseContext pagenumClause(int i) {
			return getRuleContext(PagenumClauseContext.class,i);
		}
		public List<DssizeOptionContext> dssizeOption() {
			return getRuleContexts(DssizeOptionContext.class);
		}
		public DssizeOptionContext dssizeOption(int i) {
			return getRuleContext(DssizeOptionContext.class,i);
		}
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public List<PartitionByRangePartitionPhraseContext> partitionByRangePartitionPhrase() {
			return getRuleContexts(PartitionByRangePartitionPhraseContext.class);
		}
		public PartitionByRangePartitionPhraseContext partitionByRangePartitionPhrase(int i) {
			return getRuleContext(PartitionByRangePartitionPhraseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public PartitionByRangeSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionByRangeSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPartitionByRangeSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPartitionByRangeSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPartitionByRangeSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionByRangeSpecificationContext partitionByRangeSpecification() throws RecognitionException {
		PartitionByRangeSpecificationContext _localctx = new PartitionByRangeSpecificationContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_partitionByRangeSpecification);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6288);
			numpartsOption();
			setState(6308);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,712,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(6306);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case LPAREN:
						{
						{
						setState(6289);
						match(LPAREN);
						setState(6300);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==PART || _la==PARTITION) {
							{
							{
							setState(6290);
							partitionByRangePartitionPhrase();
							setState(6295);
							_errHandler.sync(this);
							_la = _input.LA(1);
							while (_la==COMMA) {
								{
								{
								setState(6291);
								match(COMMA);
								setState(6292);
								partitionByRangePartitionPhrase();
								}
								}
								setState(6297);
								_errHandler.sync(this);
								_la = _input.LA(1);
							}
							}
							}
							setState(6302);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						setState(6303);
						match(RPAREN);
						}
						}
						break;
					case PAGENUM:
						{
						setState(6304);
						pagenumClause();
						}
						break;
					case DSSIZE:
						{
						setState(6305);
						dssizeOption();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(6310);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,712,_ctx);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionByRangePartitionPhraseContext extends ParserRuleContext {
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode PARTITION() { return getToken(DB2zSQLParser.PARTITION, 0); }
		public TerminalNode PART() { return getToken(DB2zSQLParser.PART, 0); }
		public List<UsingBlockContext> usingBlock() {
			return getRuleContexts(UsingBlockContext.class);
		}
		public UsingBlockContext usingBlock(int i) {
			return getRuleContext(UsingBlockContext.class,i);
		}
		public List<FreeBlockContext> freeBlock() {
			return getRuleContexts(FreeBlockContext.class);
		}
		public FreeBlockContext freeBlock(int i) {
			return getRuleContext(FreeBlockContext.class,i);
		}
		public List<GbpcacheBlockContext> gbpcacheBlock() {
			return getRuleContexts(GbpcacheBlockContext.class);
		}
		public GbpcacheBlockContext gbpcacheBlock(int i) {
			return getRuleContext(GbpcacheBlockContext.class,i);
		}
		public List<CompressOptionContext> compressOption() {
			return getRuleContexts(CompressOptionContext.class);
		}
		public CompressOptionContext compressOption(int i) {
			return getRuleContext(CompressOptionContext.class,i);
		}
		public List<TrackmodClauseContext> trackmodClause() {
			return getRuleContexts(TrackmodClauseContext.class);
		}
		public TrackmodClauseContext trackmodClause(int i) {
			return getRuleContext(TrackmodClauseContext.class,i);
		}
		public List<DssizeOptionContext> dssizeOption() {
			return getRuleContexts(DssizeOptionContext.class);
		}
		public DssizeOptionContext dssizeOption(int i) {
			return getRuleContext(DssizeOptionContext.class,i);
		}
		public PartitionByRangePartitionPhraseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionByRangePartitionPhrase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPartitionByRangePartitionPhrase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPartitionByRangePartitionPhrase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPartitionByRangePartitionPhrase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionByRangePartitionPhraseContext partitionByRangePartitionPhrase() throws RecognitionException {
		PartitionByRangePartitionPhraseContext _localctx = new PartitionByRangePartitionPhraseContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_partitionByRangePartitionPhrase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6311);
			_la = _input.LA(1);
			if ( !(_la==PART || _la==PARTITION) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6312);
			match(INTEGERLITERAL);
			setState(6321);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DSSIZE || _la==ERASE || _la==PRIQTY || _la==SECQTY || _la==USING || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (COMPRESS - 467)) | (1L << (FREEPAGE - 467)) | (1L << (GBPCACHE - 467)) | (1L << (PCTFREE - 467)))) != 0) || _la==TRACKMOD) {
				{
				setState(6319);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ERASE:
				case PRIQTY:
				case SECQTY:
				case USING:
					{
					setState(6313);
					usingBlock();
					}
					break;
				case FREEPAGE:
				case PCTFREE:
					{
					setState(6314);
					freeBlock();
					}
					break;
				case GBPCACHE:
					{
					setState(6315);
					gbpcacheBlock();
					}
					break;
				case COMPRESS:
					{
					setState(6316);
					compressOption();
					}
					break;
				case TRACKMOD:
					{
					setState(6317);
					trackmodClause();
					}
					break;
				case DSSIZE:
					{
					setState(6318);
					dssizeOption();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(6323);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertAlgorithmOptionContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(DB2zSQLParser.INSERT, 0); }
		public TerminalNode ALGORITHM() { return getToken(DB2zSQLParser.ALGORITHM, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public InsertAlgorithmOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertAlgorithmOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterInsertAlgorithmOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitInsertAlgorithmOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitInsertAlgorithmOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertAlgorithmOptionContext insertAlgorithmOption() throws RecognitionException {
		InsertAlgorithmOptionContext _localctx = new InsertAlgorithmOptionContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_insertAlgorithmOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6324);
			match(INSERT);
			setState(6325);
			match(ALGORITHM);
			setState(6326);
			match(INTEGERLITERAL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MaxrowsOptionContext extends ParserRuleContext {
		public TerminalNode MAXROWS() { return getToken(DB2zSQLParser.MAXROWS, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public MaxrowsOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_maxrowsOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterMaxrowsOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitMaxrowsOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitMaxrowsOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MaxrowsOptionContext maxrowsOption() throws RecognitionException {
		MaxrowsOptionContext _localctx = new MaxrowsOptionContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_maxrowsOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6328);
			match(MAXROWS);
			setState(6329);
			match(INTEGERLITERAL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MaxpartitionsOptionContext extends ParserRuleContext {
		public TerminalNode MAXPARTITIONS() { return getToken(DB2zSQLParser.MAXPARTITIONS, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public MaxpartitionsOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_maxpartitionsOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterMaxpartitionsOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitMaxpartitionsOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitMaxpartitionsOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MaxpartitionsOptionContext maxpartitionsOption() throws RecognitionException {
		MaxpartitionsOptionContext _localctx = new MaxpartitionsOptionContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_maxpartitionsOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6331);
			match(MAXPARTITIONS);
			setState(6332);
			match(INTEGERLITERAL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UsingSpecification2Context extends ParserRuleContext {
		public TerminalNode USING() { return getToken(DB2zSQLParser.USING, 0); }
		public TerminalNode STOGROUP() { return getToken(DB2zSQLParser.STOGROUP, 0); }
		public StogroupNameContext stogroupName() {
			return getRuleContext(StogroupNameContext.class,0);
		}
		public TerminalNode VCAT() { return getToken(DB2zSQLParser.VCAT, 0); }
		public CatalogNameContext catalogName() {
			return getRuleContext(CatalogNameContext.class,0);
		}
		public List<TerminalNode> PRIQTY() { return getTokens(DB2zSQLParser.PRIQTY); }
		public TerminalNode PRIQTY(int i) {
			return getToken(DB2zSQLParser.PRIQTY, i);
		}
		public List<TerminalNode> INTEGERLITERAL() { return getTokens(DB2zSQLParser.INTEGERLITERAL); }
		public TerminalNode INTEGERLITERAL(int i) {
			return getToken(DB2zSQLParser.INTEGERLITERAL, i);
		}
		public List<TerminalNode> SECQTY() { return getTokens(DB2zSQLParser.SECQTY); }
		public TerminalNode SECQTY(int i) {
			return getToken(DB2zSQLParser.SECQTY, i);
		}
		public List<TerminalNode> ERASE() { return getTokens(DB2zSQLParser.ERASE); }
		public TerminalNode ERASE(int i) {
			return getToken(DB2zSQLParser.ERASE, i);
		}
		public List<TerminalNode> NO() { return getTokens(DB2zSQLParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(DB2zSQLParser.NO, i);
		}
		public List<TerminalNode> YES() { return getTokens(DB2zSQLParser.YES); }
		public TerminalNode YES(int i) {
			return getToken(DB2zSQLParser.YES, i);
		}
		public UsingSpecification2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_usingSpecification2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterUsingSpecification2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitUsingSpecification2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitUsingSpecification2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UsingSpecification2Context usingSpecification2() throws RecognitionException {
		UsingSpecification2Context _localctx = new UsingSpecification2Context(_ctx, getState());
		enterRule(_localctx, 712, RULE_usingSpecification2);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6334);
			match(USING);
			setState(6350);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STOGROUP:
				{
				{
				setState(6335);
				match(STOGROUP);
				setState(6336);
				stogroupName();
				setState(6345);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==ERASE || _la==PRIQTY || _la==SECQTY) {
					{
					setState(6343);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case PRIQTY:
						{
						{
						setState(6337);
						match(PRIQTY);
						setState(6338);
						match(INTEGERLITERAL);
						}
						}
						break;
					case SECQTY:
						{
						{
						setState(6339);
						match(SECQTY);
						setState(6340);
						match(INTEGERLITERAL);
						}
						}
						break;
					case ERASE:
						{
						{
						setState(6341);
						match(ERASE);
						setState(6342);
						_la = _input.LA(1);
						if ( !(_la==NO || _la==YES) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(6347);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case VCAT:
				{
				{
				setState(6348);
				match(VCAT);
				setState(6349);
				catalogName();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlIndexSpecificationContext extends ParserRuleContext {
		public TerminalNode GENERATE() { return getToken(DB2zSQLParser.GENERATE, 0); }
		public TerminalNode USING() { return getToken(DB2zSQLParser.USING, 0); }
		public TerminalNode XMLPATTERN() { return getToken(DB2zSQLParser.XMLPATTERN, 0); }
		public XmlPatternClauseContext xmlPatternClause() {
			return getRuleContext(XmlPatternClauseContext.class,0);
		}
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode SQL() { return getToken(DB2zSQLParser.SQL, 0); }
		public SqlDataTypeContext sqlDataType() {
			return getRuleContext(SqlDataTypeContext.class,0);
		}
		public TerminalNode KEY() { return getToken(DB2zSQLParser.KEY, 0); }
		public TerminalNode KEYS() { return getToken(DB2zSQLParser.KEYS, 0); }
		public XmlIndexSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlIndexSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterXmlIndexSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitXmlIndexSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitXmlIndexSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlIndexSpecificationContext xmlIndexSpecification() throws RecognitionException {
		XmlIndexSpecificationContext _localctx = new XmlIndexSpecificationContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_xmlIndexSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6352);
			match(GENERATE);
			setState(6353);
			_la = _input.LA(1);
			if ( !(_la==KEY || _la==KEYS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6354);
			match(USING);
			setState(6355);
			match(XMLPATTERN);
			setState(6356);
			xmlPatternClause();
			setState(6357);
			match(AS);
			setState(6358);
			match(SQL);
			setState(6359);
			sqlDataType();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlPatternClauseContext extends ParserRuleContext {
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public XmlPatternClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlPatternClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterXmlPatternClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitXmlPatternClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitXmlPatternClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlPatternClauseContext xmlPatternClause() throws RecognitionException {
		XmlPatternClauseContext _localctx = new XmlPatternClauseContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_xmlPatternClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6361);
			match(NONNUMERICLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterAttributesOptionsContext extends ParserRuleContext {
		public TerminalNode ADDRESS() { return getToken(DB2zSQLParser.ADDRESS, 0); }
		public AddressValueContext addressValue() {
			return getRuleContext(AddressValueContext.class,0);
		}
		public TerminalNode ENCRYPTION() { return getToken(DB2zSQLParser.ENCRYPTION, 0); }
		public EncryptionValueContext encryptionValue() {
			return getRuleContext(EncryptionValueContext.class,0);
		}
		public TerminalNode SERVAUTH() { return getToken(DB2zSQLParser.SERVAUTH, 0); }
		public ServauthValueContext servauthValue() {
			return getRuleContext(ServauthValueContext.class,0);
		}
		public TerminalNode JOBNAME() { return getToken(DB2zSQLParser.JOBNAME, 0); }
		public JobnameValueContext jobnameValue() {
			return getRuleContext(JobnameValueContext.class,0);
		}
		public AlterAttributesOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterAttributesOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterAttributesOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterAttributesOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterAttributesOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterAttributesOptionsContext alterAttributesOptions() throws RecognitionException {
		AlterAttributesOptionsContext _localctx = new AlterAttributesOptionsContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_alterAttributesOptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6371);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADDRESS:
				{
				{
				setState(6363);
				match(ADDRESS);
				setState(6364);
				addressValue();
				}
				}
				break;
			case ENCRYPTION:
				{
				{
				setState(6365);
				match(ENCRYPTION);
				setState(6366);
				encryptionValue();
				}
				}
				break;
			case SERVAUTH:
				{
				{
				setState(6367);
				match(SERVAUTH);
				setState(6368);
				servauthValue();
				}
				}
				break;
			case JOBNAME:
				{
				{
				setState(6369);
				match(JOBNAME);
				setState(6370);
				jobnameValue();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AddAttributesOptionsContext extends ParserRuleContext {
		public TerminalNode ADDRESS() { return getToken(DB2zSQLParser.ADDRESS, 0); }
		public AddressValueContext addressValue() {
			return getRuleContext(AddressValueContext.class,0);
		}
		public TerminalNode SERVAUTH() { return getToken(DB2zSQLParser.SERVAUTH, 0); }
		public ServauthValueContext servauthValue() {
			return getRuleContext(ServauthValueContext.class,0);
		}
		public TerminalNode JOBNAME() { return getToken(DB2zSQLParser.JOBNAME, 0); }
		public JobnameValueContext jobnameValue() {
			return getRuleContext(JobnameValueContext.class,0);
		}
		public AddAttributesOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_addAttributesOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAddAttributesOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAddAttributesOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAddAttributesOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AddAttributesOptionsContext addAttributesOptions() throws RecognitionException {
		AddAttributesOptionsContext _localctx = new AddAttributesOptionsContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_addAttributesOptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6379);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADDRESS:
				{
				{
				setState(6373);
				match(ADDRESS);
				setState(6374);
				addressValue();
				}
				}
				break;
			case SERVAUTH:
				{
				{
				setState(6375);
				match(SERVAUTH);
				setState(6376);
				servauthValue();
				}
				}
				break;
			case JOBNAME:
				{
				{
				setState(6377);
				match(JOBNAME);
				setState(6378);
				jobnameValue();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropAttributesOptionsContext extends ParserRuleContext {
		public TerminalNode ADDRESS() { return getToken(DB2zSQLParser.ADDRESS, 0); }
		public TerminalNode SERVAUTH() { return getToken(DB2zSQLParser.SERVAUTH, 0); }
		public TerminalNode JOBNAME() { return getToken(DB2zSQLParser.JOBNAME, 0); }
		public AddressValueContext addressValue() {
			return getRuleContext(AddressValueContext.class,0);
		}
		public ServauthValueContext servauthValue() {
			return getRuleContext(ServauthValueContext.class,0);
		}
		public JobnameValueContext jobnameValue() {
			return getRuleContext(JobnameValueContext.class,0);
		}
		public DropAttributesOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropAttributesOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDropAttributesOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDropAttributesOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDropAttributesOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropAttributesOptionsContext dropAttributesOptions() throws RecognitionException {
		DropAttributesOptionsContext _localctx = new DropAttributesOptionsContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_dropAttributesOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6393);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADDRESS:
				{
				{
				setState(6381);
				match(ADDRESS);
				setState(6383);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NONNUMERICLITERAL) {
					{
					setState(6382);
					addressValue();
					}
				}

				}
				}
				break;
			case SERVAUTH:
				{
				{
				setState(6385);
				match(SERVAUTH);
				setState(6387);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NONNUMERICLITERAL) {
					{
					setState(6386);
					servauthValue();
					}
				}

				}
				}
				break;
			case JOBNAME:
				{
				{
				setState(6389);
				match(JOBNAME);
				setState(6391);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NONNUMERICLITERAL) {
					{
					setState(6390);
					jobnameValue();
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IncludeColumnPhraseContext extends ParserRuleContext {
		public TerminalNode INCLUDE() { return getToken(DB2zSQLParser.INCLUDE, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public IncludeColumnPhraseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_includeColumnPhrase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterIncludeColumnPhrase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitIncludeColumnPhrase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitIncludeColumnPhrase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IncludeColumnPhraseContext includeColumnPhrase() throws RecognitionException {
		IncludeColumnPhraseContext _localctx = new IncludeColumnPhraseContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_includeColumnPhrase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6395);
			match(INCLUDE);
			setState(6396);
			match(LPAREN);
			setState(6397);
			columnName();
			setState(6402);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6398);
				match(COMMA);
				setState(6399);
				columnName();
				}
				}
				setState(6404);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6405);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserClauseContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(DB2zSQLParser.ADD, 0); }
		public TerminalNode USE() { return getToken(DB2zSQLParser.USE, 0); }
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public List<UserClauseAddOptionsContext> userClauseAddOptions() {
			return getRuleContexts(UserClauseAddOptionsContext.class);
		}
		public UserClauseAddOptionsContext userClauseAddOptions(int i) {
			return getRuleContext(UserClauseAddOptionsContext.class,i);
		}
		public TerminalNode REPLACE() { return getToken(DB2zSQLParser.REPLACE, 0); }
		public List<UserClauseReplaceOptionsContext> userClauseReplaceOptions() {
			return getRuleContexts(UserClauseReplaceOptionsContext.class);
		}
		public UserClauseReplaceOptionsContext userClauseReplaceOptions(int i) {
			return getRuleContext(UserClauseReplaceOptionsContext.class,i);
		}
		public TerminalNode DROP() { return getToken(DB2zSQLParser.DROP, 0); }
		public List<UserClauseDropOptionsContext> userClauseDropOptions() {
			return getRuleContexts(UserClauseDropOptionsContext.class);
		}
		public UserClauseDropOptionsContext userClauseDropOptions(int i) {
			return getRuleContext(UserClauseDropOptionsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public UserClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterUserClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitUserClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitUserClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserClauseContext userClause() throws RecognitionException {
		UserClauseContext _localctx = new UserClauseContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_userClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6440);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
				{
				{
				setState(6407);
				match(ADD);
				setState(6408);
				match(USE);
				setState(6409);
				match(FOR);
				setState(6410);
				userClauseAddOptions();
				setState(6415);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6411);
					match(COMMA);
					setState(6412);
					userClauseAddOptions();
					}
					}
					setState(6417);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case REPLACE:
				{
				{
				setState(6418);
				match(REPLACE);
				setState(6419);
				match(USE);
				setState(6420);
				match(FOR);
				setState(6421);
				userClauseReplaceOptions();
				setState(6426);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6422);
					match(COMMA);
					setState(6423);
					userClauseReplaceOptions();
					}
					}
					setState(6428);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case DROP:
				{
				{
				setState(6429);
				match(DROP);
				setState(6430);
				match(USE);
				setState(6431);
				match(FOR);
				setState(6432);
				userClauseDropOptions();
				setState(6437);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6433);
					match(COMMA);
					setState(6434);
					userClauseDropOptions();
					}
					}
					setState(6439);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserClauseAddOptionsContext extends ParserRuleContext {
		public AuthorizationNameContext authorizationName() {
			return getRuleContext(AuthorizationNameContext.class,0);
		}
		public TerminalNode EXTERNAL() { return getToken(DB2zSQLParser.EXTERNAL, 0); }
		public TerminalNode SECURITY() { return getToken(DB2zSQLParser.SECURITY, 0); }
		public TerminalNode PROFILE() { return getToken(DB2zSQLParser.PROFILE, 0); }
		public ProfileNameContext profileName() {
			return getRuleContext(ProfileNameContext.class,0);
		}
		public TerminalNode PUBLIC() { return getToken(DB2zSQLParser.PUBLIC, 0); }
		public TerminalNode AUTHENTICATION() { return getToken(DB2zSQLParser.AUTHENTICATION, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode WITHOUT() { return getToken(DB2zSQLParser.WITHOUT, 0); }
		public UseOptionsContext useOptions() {
			return getRuleContext(UseOptionsContext.class,0);
		}
		public UserClauseAddOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userClauseAddOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterUserClauseAddOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitUserClauseAddOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitUserClauseAddOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserClauseAddOptionsContext userClauseAddOptions() throws RecognitionException {
		UserClauseAddOptionsContext _localctx = new UserClauseAddOptionsContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_userClauseAddOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6456);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,731,_ctx) ) {
			case 1:
				{
				{
				setState(6442);
				authorizationName();
				setState(6444);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ROLE || _la==SECURITY || _la==WITH || _la==WITHOUT) {
					{
					setState(6443);
					useOptions();
					}
				}

				}
				}
				break;
			case 2:
				{
				{
				setState(6446);
				match(EXTERNAL);
				setState(6447);
				match(SECURITY);
				setState(6448);
				match(PROFILE);
				setState(6449);
				profileName();
				setState(6451);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ROLE || _la==SECURITY || _la==WITH || _la==WITHOUT) {
					{
					setState(6450);
					useOptions();
					}
				}

				}
				}
				break;
			case 3:
				{
				{
				setState(6453);
				match(PUBLIC);
				setState(6454);
				_la = _input.LA(1);
				if ( !(_la==WITH || _la==WITHOUT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6455);
				match(AUTHENTICATION);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserClauseReplaceOptionsContext extends ParserRuleContext {
		public UserClauseAddOptionsContext userClauseAddOptions() {
			return getRuleContext(UserClauseAddOptionsContext.class,0);
		}
		public UserClauseReplaceOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userClauseReplaceOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterUserClauseReplaceOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitUserClauseReplaceOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitUserClauseReplaceOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserClauseReplaceOptionsContext userClauseReplaceOptions() throws RecognitionException {
		UserClauseReplaceOptionsContext _localctx = new UserClauseReplaceOptionsContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_userClauseReplaceOptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6458);
			userClauseAddOptions();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserClauseDropOptionsContext extends ParserRuleContext {
		public AuthorizationNameContext authorizationName() {
			return getRuleContext(AuthorizationNameContext.class,0);
		}
		public TerminalNode EXTERNAL() { return getToken(DB2zSQLParser.EXTERNAL, 0); }
		public TerminalNode SECURITY() { return getToken(DB2zSQLParser.SECURITY, 0); }
		public TerminalNode PROFILE() { return getToken(DB2zSQLParser.PROFILE, 0); }
		public ProfileNameContext profileName() {
			return getRuleContext(ProfileNameContext.class,0);
		}
		public TerminalNode PUBLIC() { return getToken(DB2zSQLParser.PUBLIC, 0); }
		public UserClauseDropOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userClauseDropOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterUserClauseDropOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitUserClauseDropOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitUserClauseDropOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserClauseDropOptionsContext userClauseDropOptions() throws RecognitionException {
		UserClauseDropOptionsContext _localctx = new UserClauseDropOptionsContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_userClauseDropOptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6466);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,732,_ctx) ) {
			case 1:
				{
				{
				setState(6460);
				authorizationName();
				}
				}
				break;
			case 2:
				{
				{
				setState(6461);
				match(EXTERNAL);
				setState(6462);
				match(SECURITY);
				setState(6463);
				match(PROFILE);
				setState(6464);
				profileName();
				}
				}
				break;
			case 3:
				{
				{
				setState(6465);
				match(PUBLIC);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UseOptionsContext extends ParserRuleContext {
		public TerminalNode AUTHENTICATION() { return getToken(DB2zSQLParser.AUTHENTICATION, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode WITHOUT() { return getToken(DB2zSQLParser.WITHOUT, 0); }
		public TerminalNode ROLE() { return getToken(DB2zSQLParser.ROLE, 0); }
		public RoleNameContext roleName() {
			return getRuleContext(RoleNameContext.class,0);
		}
		public TerminalNode SECURITY() { return getToken(DB2zSQLParser.SECURITY, 0); }
		public TerminalNode LABEL() { return getToken(DB2zSQLParser.LABEL, 0); }
		public SeclabelNameContext seclabelName() {
			return getRuleContext(SeclabelNameContext.class,0);
		}
		public UseOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_useOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterUseOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitUseOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitUseOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UseOptionsContext useOptions() throws RecognitionException {
		UseOptionsContext _localctx = new UseOptionsContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_useOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6470);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ROLE) {
				{
				setState(6468);
				match(ROLE);
				setState(6469);
				roleName();
				}
			}

			setState(6475);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SECURITY) {
				{
				setState(6472);
				match(SECURITY);
				setState(6473);
				match(LABEL);
				setState(6474);
				seclabelName();
				}
			}

			setState(6477);
			_la = _input.LA(1);
			if ( !(_la==WITH || _la==WITHOUT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6478);
			match(AUTHENTICATION);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterPartitionClauseContext extends ParserRuleContext {
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode PART() { return getToken(DB2zSQLParser.PART, 0); }
		public List<CompressOptionContext> compressOption() {
			return getRuleContexts(CompressOptionContext.class);
		}
		public CompressOptionContext compressOption(int i) {
			return getRuleContext(CompressOptionContext.class,i);
		}
		public List<DssizeOptionContext> dssizeOption() {
			return getRuleContexts(DssizeOptionContext.class);
		}
		public DssizeOptionContext dssizeOption(int i) {
			return getRuleContext(DssizeOptionContext.class,i);
		}
		public List<TrackmodClauseContext> trackmodClause() {
			return getRuleContexts(TrackmodClauseContext.class);
		}
		public TrackmodClauseContext trackmodClause(int i) {
			return getRuleContext(TrackmodClauseContext.class,i);
		}
		public TerminalNode PARTITION() { return getToken(DB2zSQLParser.PARTITION, 0); }
		public List<UsingBlockContext> usingBlock() {
			return getRuleContexts(UsingBlockContext.class);
		}
		public UsingBlockContext usingBlock(int i) {
			return getRuleContext(UsingBlockContext.class,i);
		}
		public List<FreeBlockContext> freeBlock() {
			return getRuleContexts(FreeBlockContext.class);
		}
		public FreeBlockContext freeBlock(int i) {
			return getRuleContext(FreeBlockContext.class,i);
		}
		public List<GbpcacheBlockContext> gbpcacheBlock() {
			return getRuleContexts(GbpcacheBlockContext.class);
		}
		public GbpcacheBlockContext gbpcacheBlock(int i) {
			return getRuleContext(GbpcacheBlockContext.class,i);
		}
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public AlterPartitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterPartitionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterPartitionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterPartitionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterPartitionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterPartitionClauseContext alterPartitionClause() throws RecognitionException {
		AlterPartitionClauseContext _localctx = new AlterPartitionClauseContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_alterPartitionClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6485);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALTER:
			case PARTITION:
				{
				{
				setState(6481);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALTER) {
					{
					setState(6480);
					match(ALTER);
					}
				}

				setState(6483);
				match(PARTITION);
				}
				}
				break;
			case PART:
				{
				setState(6484);
				match(PART);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6487);
			match(INTEGERLITERAL);
			setState(6494); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(6494);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ERASE:
				case PRIQTY:
				case SECQTY:
				case USING:
					{
					{
					setState(6488);
					usingBlock();
					}
					}
					break;
				case FREEPAGE:
				case PCTFREE:
					{
					{
					setState(6489);
					freeBlock();
					}
					}
					break;
				case GBPCACHE:
					{
					{
					setState(6490);
					gbpcacheBlock();
					}
					}
					break;
				case COMPRESS:
					{
					setState(6491);
					compressOption();
					}
					break;
				case DSSIZE:
					{
					setState(6492);
					dssizeOption();
					}
					break;
				case TRACKMOD:
					{
					setState(6493);
					trackmodClause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(6496); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==DSSIZE || _la==ERASE || _la==PRIQTY || _la==SECQTY || _la==USING || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (COMPRESS - 467)) | (1L << (FREEPAGE - 467)) | (1L << (GBPCACHE - 467)) | (1L << (PCTFREE - 467)))) != 0) || _la==TRACKMOD );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UsingBlockContext extends ParserRuleContext {
		public List<UsingSpecification1Context> usingSpecification1() {
			return getRuleContexts(UsingSpecification1Context.class);
		}
		public UsingSpecification1Context usingSpecification1(int i) {
			return getRuleContext(UsingSpecification1Context.class,i);
		}
		public UsingBlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_usingBlock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterUsingBlock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitUsingBlock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitUsingBlock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UsingBlockContext usingBlock() throws RecognitionException {
		UsingBlockContext _localctx = new UsingBlockContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_usingBlock);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6499); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(6498);
					usingSpecification1();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6501); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,739,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FreeBlockContext extends ParserRuleContext {
		public List<TerminalNode> FREEPAGE() { return getTokens(DB2zSQLParser.FREEPAGE); }
		public TerminalNode FREEPAGE(int i) {
			return getToken(DB2zSQLParser.FREEPAGE, i);
		}
		public List<TerminalNode> INTEGERLITERAL() { return getTokens(DB2zSQLParser.INTEGERLITERAL); }
		public TerminalNode INTEGERLITERAL(int i) {
			return getToken(DB2zSQLParser.INTEGERLITERAL, i);
		}
		public List<TerminalNode> PCTFREE() { return getTokens(DB2zSQLParser.PCTFREE); }
		public TerminalNode PCTFREE(int i) {
			return getToken(DB2zSQLParser.PCTFREE, i);
		}
		public List<TerminalNode> FOR() { return getTokens(DB2zSQLParser.FOR); }
		public TerminalNode FOR(int i) {
			return getToken(DB2zSQLParser.FOR, i);
		}
		public List<TerminalNode> UPDATE() { return getTokens(DB2zSQLParser.UPDATE); }
		public TerminalNode UPDATE(int i) {
			return getToken(DB2zSQLParser.UPDATE, i);
		}
		public FreeBlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_freeBlock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFreeBlock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFreeBlock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFreeBlock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FreeBlockContext freeBlock() throws RecognitionException {
		FreeBlockContext _localctx = new FreeBlockContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_freeBlock);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6516); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(6516);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,742,_ctx) ) {
					case 1:
						{
						{
						setState(6503);
						match(FREEPAGE);
						setState(6504);
						match(INTEGERLITERAL);
						}
						}
						break;
					case 2:
						{
						{
						setState(6505);
						match(PCTFREE);
						setState(6506);
						match(INTEGERLITERAL);
						}
						}
						break;
					case 3:
						{
						{
						setState(6507);
						match(PCTFREE);
						setState(6514);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==INTEGERLITERAL || _la==FOR) {
							{
							setState(6509);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==INTEGERLITERAL) {
								{
								setState(6508);
								match(INTEGERLITERAL);
								}
							}

							setState(6511);
							match(FOR);
							setState(6512);
							match(UPDATE);
							setState(6513);
							match(INTEGERLITERAL);
							}
						}

						}
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6518); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,743,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MoveTableClauseContext extends ParserRuleContext {
		public TerminalNode MOVE() { return getToken(DB2zSQLParser.MOVE, 0); }
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode TO() { return getToken(DB2zSQLParser.TO, 0); }
		public TerminalNode TABLESPACE() { return getToken(DB2zSQLParser.TABLESPACE, 0); }
		public TablespaceNameContext tablespaceName() {
			return getRuleContext(TablespaceNameContext.class,0);
		}
		public DatabaseNameContext databaseName() {
			return getRuleContext(DatabaseNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public MoveTableClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_moveTableClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterMoveTableClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitMoveTableClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitMoveTableClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MoveTableClauseContext moveTableClause() throws RecognitionException {
		MoveTableClauseContext _localctx = new MoveTableClauseContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_moveTableClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6520);
			match(MOVE);
			setState(6521);
			match(TABLE);
			setState(6522);
			tableName();
			setState(6523);
			match(TO);
			setState(6524);
			match(TABLESPACE);
			setState(6528);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,744,_ctx) ) {
			case 1:
				{
				setState(6525);
				databaseName();
				setState(6526);
				match(DOT);
				}
				break;
			}
			setState(6530);
			tablespaceName();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GbpcacheBlockContext extends ParserRuleContext {
		public TerminalNode GBPCACHE() { return getToken(DB2zSQLParser.GBPCACHE, 0); }
		public TerminalNode CHANGED() { return getToken(DB2zSQLParser.CHANGED, 0); }
		public TerminalNode ALL() { return getToken(DB2zSQLParser.ALL, 0); }
		public TerminalNode SYSTEM() { return getToken(DB2zSQLParser.SYSTEM, 0); }
		public TerminalNode NONE() { return getToken(DB2zSQLParser.NONE, 0); }
		public GbpcacheBlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_gbpcacheBlock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGbpcacheBlock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGbpcacheBlock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGbpcacheBlock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GbpcacheBlockContext gbpcacheBlock() throws RecognitionException {
		GbpcacheBlockContext _localctx = new GbpcacheBlockContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_gbpcacheBlock);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6532);
			match(GBPCACHE);
			setState(6533);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==NONE || _la==SYSTEM || _la==CHANGED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AliasDesignatorContext extends ParserRuleContext {
		public TerminalNode ALIAS() { return getToken(DB2zSQLParser.ALIAS, 0); }
		public AliasNameContext aliasName() {
			return getRuleContext(AliasNameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public TerminalNode SEQUENCE() { return getToken(DB2zSQLParser.SEQUENCE, 0); }
		public TerminalNode PUBLIC() { return getToken(DB2zSQLParser.PUBLIC, 0); }
		public AliasDesignatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aliasDesignator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAliasDesignator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAliasDesignator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAliasDesignator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AliasDesignatorContext aliasDesignator() throws RecognitionException {
		AliasDesignatorContext _localctx = new AliasDesignatorContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_aliasDesignator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6536);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PUBLIC) {
				{
				setState(6535);
				match(PUBLIC);
				}
			}

			setState(6538);
			match(ALIAS);
			setState(6539);
			aliasName();
			setState(6540);
			match(FOR);
			setState(6541);
			_la = _input.LA(1);
			if ( !(_la==SEQUENCE || _la==TABLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultipleColumnListContext extends ParserRuleContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public List<TerminalNode> IS() { return getTokens(DB2zSQLParser.IS); }
		public TerminalNode IS(int i) {
			return getToken(DB2zSQLParser.IS, i);
		}
		public List<TerminalNode> NONNUMERICLITERAL() { return getTokens(DB2zSQLParser.NONNUMERICLITERAL); }
		public TerminalNode NONNUMERICLITERAL(int i) {
			return getToken(DB2zSQLParser.NONNUMERICLITERAL, i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public MultipleColumnListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipleColumnList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterMultipleColumnList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitMultipleColumnList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitMultipleColumnList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultipleColumnListContext multipleColumnList() throws RecognitionException {
		MultipleColumnListContext _localctx = new MultipleColumnListContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_multipleColumnList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6543);
			tableName();
			setState(6544);
			match(LPAREN);
			setState(6545);
			columnName();
			setState(6546);
			match(IS);
			setState(6547);
			match(NONNUMERICLITERAL);
			setState(6555);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6548);
				match(COMMA);
				setState(6549);
				columnName();
				setState(6550);
				match(IS);
				setState(6551);
				match(NONNUMERICLITERAL);
				}
				}
				setState(6557);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6558);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionDesignatorContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(DB2zSQLParser.FUNCTION, 0); }
		public FunctionNameContext functionName() {
			return getRuleContext(FunctionNameContext.class,0);
		}
		public TerminalNode SPECIFIC() { return getToken(DB2zSQLParser.SPECIFIC, 0); }
		public SpecificNameContext specificName() {
			return getRuleContext(SpecificNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<ParameterTypeContext> parameterType() {
			return getRuleContexts(ParameterTypeContext.class);
		}
		public ParameterTypeContext parameterType(int i) {
			return getRuleContext(ParameterTypeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public FunctionDesignatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionDesignator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFunctionDesignator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFunctionDesignator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFunctionDesignator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionDesignatorContext functionDesignator() throws RecognitionException {
		FunctionDesignatorContext _localctx = new FunctionDesignatorContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_functionDesignator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6579);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FUNCTION:
				{
				{
				setState(6560);
				match(FUNCTION);
				setState(6561);
				functionName();
				setState(6574);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(6562);
					match(LPAREN);
					setState(6571);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & ((1L << (INSTEAD - 30)) | (1L << (NEW - 30)) | (1L << (NEW_TABLE - 30)) | (1L << (OLD_TABLE - 30)) | (1L << (REFERENCING - 30)) | (1L << (BASED - 30)) | (1L << (UPON - 30)) | (1L << (ADD - 30)) | (1L << (AFTER - 30)) | (1L << (ALL - 30)) | (1L << (ALLOCATE - 30)) | (1L << (ALLOW - 30)) | (1L << (ALTER - 30)) | (1L << (ALTERAND - 30)) | (1L << (ANY - 30)) | (1L << (ARRAY - 30)) | (1L << (ARRAY_EXISTS - 30)) | (1L << (AS - 30)) | (1L << (ASENSITIVE - 30)) | (1L << (ASSOCIATE - 30)) | (1L << (ASUTIME - 30)) | (1L << (AT - 30)) | (1L << (AUDIT - 30)) | (1L << (AUX - 30)) | (1L << (AUXILIARY - 30)) | (1L << (BEFORE - 30)) | (1L << (BEGIN - 30)) | (1L << (BETWEEN - 30)) | (1L << (BUFFERPOOL - 30)) | (1L << (BUFFERPOOLS - 30)) | (1L << (BY - 30)) | (1L << (CALL - 30)) | (1L << (CAPTURE - 30)) | (1L << (CASCADED - 30)) | (1L << (CASE - 30)) | (1L << (CAST - 30)) | (1L << (CCSID - 30)) | (1L << (CHAR - 30)) | (1L << (CHARACTER - 30)) | (1L << (CHECK - 30)) | (1L << (CLONE - 30)) | (1L << (CLOSE - 30)) | (1L << (CLUSTER - 30)) | (1L << (COLLECTION - 30)) | (1L << (COLLID - 30)) | (1L << (COLUMN - 30)) | (1L << (COMMENT - 30)) | (1L << (COMMIT - 30)) | (1L << (CONCAT - 30)) | (1L << (CONDITION - 30)) | (1L << (CONNECT - 30)) | (1L << (CONNECTION - 30)) | (1L << (CONSTRAINT - 30)) | (1L << (CONTAINS - 30)) | (1L << (CONTENT - 30)) | (1L << (CONTINUE - 30)) | (1L << (CREATE - 30)) | (1L << (CUBE - 30)) | (1L << (CURRENT - 30)) | (1L << (CURRENT_LC_CTYPE - 30)) | (1L << (CURRVAL - 30)) | (1L << (CURSOR - 30)) | (1L << (DATA - 30)) | (1L << (DATABASE - 30)))) != 0) || ((((_la - 94)) & ~0x3f) == 0 && ((1L << (_la - 94)) & ((1L << (DAY - 94)) | (1L << (DAYS - 94)) | (1L << (DBINFO - 94)) | (1L << (DECLARE - 94)) | (1L << (DEFAULT - 94)) | (1L << (DELETE - 94)) | (1L << (DESCRIPTOR - 94)) | (1L << (DETERMINISTIC - 94)) | (1L << (DISABLE - 94)) | (1L << (DISALLOW - 94)) | (1L << (DISTINCT - 94)) | (1L << (DO - 94)) | (1L << (DOCUMENT - 94)) | (1L << (DOUBLE - 94)) | (1L << (DROP - 94)) | (1L << (DSSIZE - 94)) | (1L << (DYNAMIC - 94)) | (1L << (EDITPROC - 94)) | (1L << (ELSE - 94)) | (1L << (ELSEIF - 94)) | (1L << (ENCODING - 94)) | (1L << (ENCRYPTION - 94)) | (1L << (END - 94)) | (1L << (END_EXEC - 94)) | (1L << (ENDING - 94)) | (1L << (ERASE - 94)) | (1L << (ESCAPE - 94)) | (1L << (EXCEPT - 94)) | (1L << (EXCEPTION - 94)) | (1L << (EXEC_SQL - 94)) | (1L << (EXECUTE - 94)) | (1L << (EXISTS - 94)) | (1L << (EXIT - 94)) | (1L << (EXPLAIN - 94)) | (1L << (EXTERNAL - 94)) | (1L << (FENCED - 94)) | (1L << (FETCH - 94)) | (1L << (FIELDPROC - 94)) | (1L << (FINAL - 94)) | (1L << (FIRST - 94)) | (1L << (FOR - 94)) | (1L << (FREE - 94)) | (1L << (FROM - 94)) | (1L << (FULL - 94)) | (1L << (FUNCTION - 94)) | (1L << (GENERATED - 94)) | (1L << (GET - 94)) | (1L << (GLOBAL - 94)) | (1L << (GO - 94)) | (1L << (GOTO - 94)) | (1L << (GRANT - 94)) | (1L << (GROUP - 94)) | (1L << (HANDLER - 94)) | (1L << (HAVING - 94)) | (1L << (HOLD - 94)) | (1L << (HOUR - 94)) | (1L << (HOURS - 94)) | (1L << (IF - 94)) | (1L << (IMMEDIATE - 94)) | (1L << (IN - 94)) | (1L << (INCLUSIVE - 94)) | (1L << (INDEX - 94)) | (1L << (INDEXBP - 94)) | (1L << (INHERIT - 94)))) != 0) || ((((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & ((1L << (INNER - 158)) | (1L << (INOUT - 158)) | (1L << (INSENSITIVE - 158)) | (1L << (INSERT - 158)) | (1L << (INTERSECT - 158)) | (1L << (INTO - 158)) | (1L << (IS - 158)) | (1L << (ISOBID - 158)) | (1L << (ITERATE - 158)) | (1L << (JAR - 158)) | (1L << (JOIN - 158)) | (1L << (KEEP - 158)) | (1L << (KEY - 158)) | (1L << (LABEL - 158)) | (1L << (LANGUAGE - 158)) | (1L << (LAST - 158)) | (1L << (LC_CTYPE - 158)) | (1L << (LEAVE - 158)) | (1L << (LEFT - 158)) | (1L << (LIKE - 158)) | (1L << (LIMIT - 158)) | (1L << (LOCAL - 158)) | (1L << (LOCALE - 158)) | (1L << (LOCATOR - 158)) | (1L << (LOCATORS - 158)) | (1L << (LOCK - 158)) | (1L << (LOCKMAX - 158)) | (1L << (LOCKSIZE - 158)) | (1L << (LONG - 158)) | (1L << (LOOP - 158)) | (1L << (MAINTAINED - 158)) | (1L << (MATERIALIZED - 158)) | (1L << (MICROSECOND - 158)) | (1L << (MICROSECONDS - 158)) | (1L << (MODIFIES - 158)) | (1L << (MONTH - 158)) | (1L << (MONTHS - 158)) | (1L << (NEXT - 158)) | (1L << (NEXTVAL - 158)) | (1L << (NO - 158)) | (1L << (NONE - 158)) | (1L << (NOT - 158)) | (1L << (NULL - 158)) | (1L << (NULLS - 158)) | (1L << (NUMPARTS - 158)) | (1L << (OBID - 158)) | (1L << (OF - 158)) | (1L << (OFFSET - 158)) | (1L << (OLD - 158)) | (1L << (ON - 158)) | (1L << (OPEN - 158)) | (1L << (OPTIMIZATION - 158)) | (1L << (OPTIMIZE - 158)) | (1L << (OR - 158)) | (1L << (ORDER - 158)) | (1L << (ORGANIZATION - 158)) | (1L << (OUT - 158)) | (1L << (OUTER - 158)) | (1L << (PACKAGE - 158)) | (1L << (PADDED - 158)) | (1L << (PARAMETER - 158)) | (1L << (PART - 158)) | (1L << (PARTITION - 158)))) != 0) || ((((_la - 222)) & ~0x3f) == 0 && ((1L << (_la - 222)) & ((1L << (PARTITIONED - 222)) | (1L << (PARTITIONING - 222)) | (1L << (PATH - 222)) | (1L << (PERIOD - 222)) | (1L << (PIECESIZE - 222)) | (1L << (PLAN - 222)) | (1L << (PRECISION - 222)) | (1L << (PREPARE - 222)) | (1L << (PREVVAL - 222)) | (1L << (PRIOR - 222)) | (1L << (PRIQTY - 222)) | (1L << (PRIVILEGES - 222)) | (1L << (PROCEDURE - 222)) | (1L << (PROGRAM - 222)) | (1L << (PSID - 222)) | (1L << (PUBLIC - 222)) | (1L << (QUERY - 222)) | (1L << (QUERYNO - 222)) | (1L << (READS - 222)) | (1L << (REFERENCES - 222)) | (1L << (REFRESH - 222)) | (1L << (RELEASE - 222)) | (1L << (RENAME - 222)) | (1L << (REPEAT - 222)) | (1L << (RESIGNAL - 222)) | (1L << (RESTRICT - 222)) | (1L << (RESULT - 222)) | (1L << (RESULT_SET_LOCATOR - 222)) | (1L << (RETURN - 222)) | (1L << (RETURNS - 222)) | (1L << (REVOKE - 222)) | (1L << (RIGHT - 222)) | (1L << (ROLE - 222)) | (1L << (ROLLBACK - 222)) | (1L << (ROLLUP - 222)) | (1L << (ROUND_CEILING - 222)) | (1L << (ROUND_DOWN - 222)) | (1L << (ROUND_FLOOR - 222)) | (1L << (ROUND_HALF_DOWN - 222)) | (1L << (ROUND_HALF_EVEN - 222)) | (1L << (ROUND_HALF_UP - 222)) | (1L << (ROUND_UP - 222)) | (1L << (ROW - 222)) | (1L << (ROWSET - 222)) | (1L << (RUN - 222)) | (1L << (SAVEPOINT - 222)) | (1L << (SCHEMA - 222)) | (1L << (SCRATCHPAD - 222)) | (1L << (SECOND - 222)) | (1L << (SECONDS - 222)) | (1L << (SECQTY - 222)) | (1L << (SECURITY - 222)) | (1L << (SELECT - 222)) | (1L << (SENSITIVE - 222)) | (1L << (SEQUENCE - 222)) | (1L << (SET - 222)) | (1L << (SIGNAL - 222)) | (1L << (SIMPLE - 222)) | (1L << (SOME - 222)) | (1L << (SOURCE - 222)) | (1L << (SPECIFIC - 222)) | (1L << (STANDARD - 222)) | (1L << (STATEMENT - 222)) | (1L << (STATIC - 222)))) != 0) || ((((_la - 286)) & ~0x3f) == 0 && ((1L << (_la - 286)) & ((1L << (STAY - 286)) | (1L << (STOGROUP - 286)) | (1L << (STORES - 286)) | (1L << (STYLE - 286)) | (1L << (SUMMARY - 286)) | (1L << (SYNONYM - 286)) | (1L << (SYSDATE - 286)) | (1L << (SYSTEM - 286)) | (1L << (SYSTIMESTAMP - 286)) | (1L << (TABLE - 286)) | (1L << (TABLESPACE - 286)) | (1L << (THEN - 286)) | (1L << (TO - 286)) | (1L << (TRIGGER - 286)) | (1L << (TRUNCATE - 286)) | (1L << (TYPE - 286)) | (1L << (UNDO - 286)) | (1L << (UNION - 286)) | (1L << (UNIQUE - 286)) | (1L << (UNTIL - 286)) | (1L << (UPDATE - 286)) | (1L << (USING - 286)) | (1L << (VALIDPROC - 286)) | (1L << (VALUE - 286)) | (1L << (VALUES - 286)) | (1L << (VARIABLE - 286)) | (1L << (VARIANT - 286)) | (1L << (VCAT - 286)) | (1L << (VERSIONING - 286)) | (1L << (VIEW - 286)) | (1L << (VOLATILE - 286)) | (1L << (VOLUMES - 286)) | (1L << (WHEN - 286)) | (1L << (WHENEVER - 286)) | (1L << (WHERE - 286)) | (1L << (WHILE - 286)) | (1L << (WITH - 286)) | (1L << (WLM - 286)) | (1L << (XMLCAST - 286)) | (1L << (XMLEXISTS - 286)) | (1L << (XMLNAMESPACES - 286)) | (1L << (YEAR - 286)) | (1L << (YEARS - 286)) | (1L << (ZONE - 286)) | (1L << (AND - 286)) | (1L << (ARRAY_AGG - 286)) | (1L << (ASC - 286)) | (1L << (AVG - 286)) | (1L << (BIT - 286)) | (1L << (CHANGE - 286)) | (1L << (CODEUNITS16 - 286)) | (1L << (CODEUNITS32 - 286)) | (1L << (CORR - 286)) | (1L << (CORRELATION - 286)) | (1L << (COUNT - 286)) | (1L << (COUNT_BIG - 286)) | (1L << (COVAR - 286)) | (1L << (COVARIANCE - 286)) | (1L << (COVARIANCE_SAMP - 286)) | (1L << (COVAR_POP - 286)) | (1L << (COVAR_SAMP - 286)) | (1L << (CS - 286)) | (1L << (CUME_DIST - 286)) | (1L << (DENSE_RANK - 286)))) != 0) || ((((_la - 350)) & ~0x3f) == 0 && ((1L << (_la - 350)) & ((1L << (DESC - 350)) | (1L << (EBCDIC - 350)) | (1L << (EXCLUSIVE - 350)) | (1L << (FIRST_VALUE - 350)) | (1L << (FOLLOWING - 350)) | (1L << (GROUPING - 350)) | (1L << (IGNORE - 350)) | (1L << (INDICATOR - 350)) | (1L << (INPUT - 350)) | (1L << (ISNULL - 350)) | (1L << (LAG - 350)) | (1L << (LARGE - 350)) | (1L << (LAST_VALUE - 350)) | (1L << (LEAD - 350)) | (1L << (LISTAGG - 350)) | (1L << (LOCKED - 350)) | (1L << (LOCKS - 350)) | (1L << (MEDIAN - 350)) | (1L << (MINUTES - 350)) | (1L << (MIXED - 350)) | (1L << (NOTNULL - 350)) | (1L << (NTH_VALUE - 350)) | (1L << (NTILE - 350)) | (1L << (NUMERIC - 350)) | (1L << (OBJECT - 350)) | (1L << (OCTETS - 350)) | (1L << (ONLY - 350)) | (1L << (OVER - 350)) | (1L << (PASSING - 350)) | (1L << (PERCENTILE_CONT - 350)) | (1L << (PERCENTILE_DISC - 350)) | (1L << (PERCENT_RANK - 350)) | (1L << (PRECEDING - 350)) | (1L << (PREVIOUS - 350)) | (1L << (RANGE - 350)) | (1L << (RANK - 350)) | (1L << (RATIO_TO_REPORT - 350)) | (1L << (READ - 350)) | (1L << (REF - 350)) | (1L << (REGR_AVGX - 350)) | (1L << (REGR_AVGY - 350)) | (1L << (REGR_COUNT - 350)) | (1L << (REGR_ICPT - 350)) | (1L << (REGR_INTERCEPT - 350)) | (1L << (REGR_R2 - 350)) | (1L << (REGR_SLOPE - 350)) | (1L << (REGR_SXX - 350)) | (1L << (REGR_SXY - 350)) | (1L << (REGR_SYY - 350)) | (1L << (RESPECT - 350)) | (1L << (ROW_NUMBER - 350)) | (1L << (ROWS - 350)) | (1L << (RR - 350)) | (1L << (RS - 350)) | (1L << (SBCS - 350)) | (1L << (SELECTIVITY - 350)) | (1L << (SETS - 350)) | (1L << (SHARE - 350)) | (1L << (SKIP_ - 350)) | (1L << (STDDEV - 350)) | (1L << (STDDEV_POP - 350)) | (1L << (STDDEV_SAMP - 350)) | (1L << (SUM - 350)) | (1L << (TOKEN - 350)))) != 0) || ((((_la - 414)) & ~0x3f) == 0 && ((1L << (_la - 414)) & ((1L << (UNBOUNDED - 414)) | (1L << (UNPACK - 414)) | (1L << (UR - 414)) | (1L << (USE - 414)) | (1L << (VAR - 414)) | (1L << (VARIANCE - 414)) | (1L << (VARIANCE_SAMP - 414)) | (1L << (VAR_POP - 414)) | (1L << (VAR_SAMP - 414)) | (1L << (VARYING - 414)) | (1L << (WITHOUT - 414)) | (1L << (XML - 414)) | (1L << (XMLAGG - 414)) | (1L << (COLUMNS - 414)) | (1L << (SQLID - 414)) | (1L << (ORDINALITY - 414)) | (1L << (SYSTEM_TIME - 414)) | (1L << (BUSINESS_TIME - 414)) | (1L << (MULTIPLIER - 414)) | (1L << (UNNEST - 414)) | (1L << (CROSS - 414)) | (1L << (CALLER - 414)) | (1L << (CLIENT - 414)) | (1L << (POSITIONING - 414)) | (1L << (SCROLL - 414)) | (1L << (ACTION - 414)) | (1L << (ASSEMBLE - 414)) | (1L << (C_ - 414)) | (1L << (CALLED - 414)) | (1L << (COBOL - 414)) | (1L << (DB2 - 414)) | (1L << (DEFINER - 414)) | (1L << (DISPATCH - 414)) | (1L << (ENVIRONMENT - 414)) | (1L << (FAILURE - 414)) | (1L << (FAILURES - 414)) | (1L << (JAVA - 414)) | (1L << (MAIN - 414)) | (1L << (NAME - 414)) | (1L << (OPTIONS - 414)) | (1L << (PARALLEL - 414)) | (1L << (PLI - 414)) | (1L << (REGISTERS - 414)) | (1L << (RESIDENT - 414)) | (1L << (SECURED - 414)) | (1L << (SPECIAL - 414)) | (1L << (SQL - 414)) | (1L << (STOP - 414)) | (1L << (SUB - 414)) | (1L << (YES - 414)) | (1L << (APPLICATION - 414)) | (1L << (CHANGED - 414)) | (1L << (COMPATIBILITY - 414)) | (1L << (COMPRESS - 414)) | (1L << (COPY - 414)) | (1L << (FREEPAGE - 414)) | (1L << (GBPCACHE - 414)) | (1L << (INCLUDE - 414)) | (1L << (MAXVALUE - 414)) | (1L << (MINVALUE - 414)) | (1L << (PCTFREE - 414)) | (1L << (REGENERATE - 414)) | (1L << (MASK - 414)) | (1L << (ENABLE - 414)))) != 0) || ((((_la - 478)) & ~0x3f) == 0 && ((1L << (_la - 478)) & ((1L << (PERMISSION - 478)) | (1L << (ATOMIC - 478)) | (1L << (SQLEXCEPTION - 478)) | (1L << (MERGE - 478)) | (1L << (MATCHED - 478)) | (1L << (SQLSTATE - 478)) | (1L << (MESSAGE_TEXT - 478)) | (1L << (OVERRIDING - 478)) | (1L << (PORTION - 478)) | (1L << (DB2SQL - 478)) | (1L << (DEBUG - 478)) | (1L << (GENERAL - 478)) | (1L << (MODE_ - 478)) | (1L << (REXX - 478)) | (1L << (CACHE - 478)) | (1L << (CYCLE - 478)) | (1L << (INCREMENT - 478)) | (1L << (RESTART - 478)) | (1L << (DATACLAS - 478)) | (1L << (MGMTCLAS - 478)) | (1L << (REMOVE - 478)) | (1L << (STORCLAS - 478)) | (1L << (ACCESS - 478)) | (1L << (ACTIVATE - 478)) | (1L << (ALWAYS - 478)) | (1L << (APPEND - 478)) | (1L << (ARCHIVE - 478)) | (1L << (BUSINESS - 478)) | (1L << (CASCADE - 478)) | (1L << (CHANGES - 478)) | (1L << (CONTROL - 478)) | (1L << (DEACTIVATE - 478)) | (1L << (DEFERRED - 478)) | (1L << (EACH - 478)) | (1L << (ENFORCED - 478)) | (1L << (EXTRA - 478)) | (1L << (FOREIGN - 478)) | (1L << (HIDDEN_ - 478)) | (1L << (HISTORY - 478)) | (1L << (ID - 478)) | (1L << (IDENTITY - 478)) | (1L << (IMPLICITLY - 478)) | (1L << (INITIALLY - 478)) | (1L << (INLINE - 478)) | (1L << (OPERATION - 478)) | (1L << (ORGANIZE - 478)) | (1L << (OVERLAPS - 478)) | (1L << (PACKAGE_NAME - 478)) | (1L << (PACKAGE_SCHEMA - 478)) | (1L << (PACKAGE_VERSION - 478)) | (1L << (PRIMARY - 478)) | (1L << (RESET - 478)) | (1L << (ROTATE - 478)) | (1L << (START - 478)) | (1L << (SYSIBM - 478)) | (1L << (TRANSACTION - 478)) | (1L << (XMLSCHEMA - 478)) | (1L << (ELEMENT - 478)) | (1L << (URL - 478)) | (1L << (NAMESPACE - 478)) | (1L << (LOCATION - 478)) | (1L << (SYSXSR - 478)) | (1L << (ALGORITHM - 478)) | (1L << (FIXEDLENGTH - 478)))) != 0) || ((((_la - 542)) & ~0x3f) == 0 && ((1L << (_la - 542)) & ((1L << (HUFFMAN - 542)) | (1L << (LOB - 542)) | (1L << (LOG - 542)) | (1L << (LOGGED - 542)) | (1L << (MAXPARTITIONS - 542)) | (1L << (MAXROWS - 542)) | (1L << (MEMBER - 542)) | (1L << (MOVE - 542)) | (1L << (PAGE - 542)) | (1L << (PAGENUM - 542)) | (1L << (PENDING - 542)) | (1L << (RELATIVE - 542)) | (1L << (SEGSIZE - 542)) | (1L << (TRACKMOD - 542)) | (1L << (ADDRESS - 542)) | (1L << (ATTRIBUTES - 542)) | (1L << (AUTHENTICATION - 542)) | (1L << (AUTHID - 542)) | (1L << (CONTEXT - 542)) | (1L << (JOBNAME - 542)) | (1L << (OWNER - 542)) | (1L << (PROFILE - 542)) | (1L << (QUALIFIER - 542)) | (1L << (SERVAUTH - 542)) | (1L << (TRUSTED - 542)) | (1L << (SECTION - 542)) | (1L << (ACTIVE - 542)) | (1L << (VERSION - 542)) | (1L << (ALIAS - 542)) | (1L << (WORK - 542)) | (1L << (WORKFILE - 542)) | (1L << (SYSDEFLT - 542)) | (1L << (NULTERM - 542)) | (1L << (STRUCTURE - 542)) | (1L << (GENERIC - 542)) | (1L << (TEMPORARY - 542)) | (1L << (DEFER - 542)) | (1L << (DEFINE - 542)) | (1L << (EXCLUDE - 542)) | (1L << (GENERATE - 542)) | (1L << (KEYS - 542)) | (1L << (XMLPATTERN - 542)) | (1L << (SIZE - 542)) | (1L << (EVERY - 542)) | (1L << (ABSOLUTE - 542)) | (1L << (ACCELERATOR - 542)) | (1L << (EXCLUDING - 542)) | (1L << (INCLUDING - 542)) | (1L << (DEFAULTS - 542)) | (1L << (MODIFIERS - 542)) | (1L << (OPTION - 542)) | (1L << (PRESERVE - 542)) | (1L << (BOTH - 542)) | (1L << (DESCRIBE - 542)) | (1L << (LABELS - 542)) | (1L << (NAMES - 542)) | (1L << (OUTPUT - 542)) | (1L << (EXCHANGE - 542)) | (1L << (STABILIZED - 542)) | (1L << (STMTCACHE - 542)) | (1L << (STMTID - 542)) | (1L << (STMTTOKEN - 542)) | (1L << (STARTING - 542)) | (1L << (CATALOG_NAME - 542)))) != 0) || ((((_la - 606)) & ~0x3f) == 0 && ((1L << (_la - 606)) & ((1L << (CONDITION_NUMBER - 606)) | (1L << (CURSOR_NAME - 606)) | (1L << (DB2_AUTHENTICATION_TYPE - 606)) | (1L << (DB2_AUTHORIZATION_ID - 606)) | (1L << (DB2_CONNECTION_STATE - 606)) | (1L << (DB2_CONNECTION_STATUS - 606)) | (1L << (DB2_ENCRYPTION_TYPE - 606)) | (1L << (DB2_ERROR_CODE1 - 606)) | (1L << (DB2_ERROR_CODE2 - 606)) | (1L << (DB2_ERROR_CODE3 - 606)) | (1L << (DB2_ERROR_CODE4 - 606)) | (1L << (DB2_GET_DIAGNOSTICS_DIAGNOSTICS - 606)) | (1L << (DB2_INTERNAL_ERROR_POINTER - 606)) | (1L << (DB2_LAST_ROW - 606)) | (1L << (DB2_LINE_NUMBER - 606)) | (1L << (DB2_MESSAGE_ID - 606)) | (1L << (DB2_MODULE_DETECTING_ERROR - 606)) | (1L << (DB2_NUMBER_PARAMETER_MARKERS - 606)) | (1L << (DB2_NUMBER_RESULT_SETS - 606)) | (1L << (DB2_NUMBER_ROWS - 606)) | (1L << (DB2_ORDINAL_TOKEN_ - 606)) | (1L << (DB2_PRODUCT_ID - 606)) | (1L << (DB2_REASON_CODE - 606)) | (1L << (DB2_RETURNED_SQLCODE - 606)) | (1L << (DB2_RETURN_STATUS - 606)) | (1L << (DB2_ROW_NUMBER - 606)) | (1L << (DB2_SERVER_CLASS_NAME - 606)) | (1L << (DB2_SQL_ATTR_CURSOR_HOLD - 606)) | (1L << (DB2_SQL_ATTR_CURSOR_ROWSET - 606)) | (1L << (DB2_SQL_ATTR_CURSOR_SCROLLABLE - 606)) | (1L << (DB2_SQL_ATTR_CURSOR_SENSITIVITY - 606)) | (1L << (DB2_SQL_ATTR_CURSOR_TYPE - 606)) | (1L << (DB2_SQLERRD1 - 606)) | (1L << (DB2_SQLERRD2 - 606)) | (1L << (DB2_SQLERRD3 - 606)) | (1L << (DB2_SQLERRD4 - 606)) | (1L << (DB2_SQLERRD5 - 606)) | (1L << (DB2_SQLERRD6 - 606)) | (1L << (DB2_SQLERRD_SET - 606)) | (1L << (DB2_SQL_NESTING_LEVEL - 606)) | (1L << (DB2_TOKEN_COUNT - 606)) | (1L << (DIAGNOSTICS - 606)) | (1L << (MORE_ - 606)) | (1L << (NUMBER - 606)) | (1L << (RETURNED_SQLSTATE - 606)) | (1L << (ROW_COUNT - 606)) | (1L << (SERVER_NAME - 606)) | (1L << (STACKED - 606)) | (1L << (CREATETAB - 606)) | (1L << (CREATETS - 606)) | (1L << (DBADM - 606)) | (1L << (DBCTRL - 606)) | (1L << (DBMAINT - 606)) | (1L << (DISPLAYDB - 606)) | (1L << (IMAGCOPY - 606)) | (1L << (LOAD - 606)) | (1L << (PACKADM - 606)) | (1L << (RECOVERDB - 606)) | (1L << (REORG - 606)) | (1L << (REPAIR - 606)) | (1L << (STARTDB - 606)) | (1L << (STATS - 606)) | (1L << (STOPDB - 606)))) != 0) || ((((_la - 670)) & ~0x3f) == 0 && ((1L << (_la - 670)) & ((1L << (BIND - 670)) | (1L << (ALTERIN - 670)) | (1L << (CREATEIN - 670)) | (1L << (DROPIN - 670)) | (1L << (USAGE - 670)) | (1L << (ACCESSCTRL - 670)) | (1L << (BINDADD - 670)) | (1L << (BINDAGENT - 670)) | (1L << (BSDS - 670)) | (1L << (CREATEALIAS - 670)) | (1L << (CREATEDBA - 670)) | (1L << (CREATEDBC - 670)) | (1L << (CREATE_SECURE_OBJECT - 670)) | (1L << (CREATESG - 670)) | (1L << (CREATETMTAB - 670)) | (1L << (DATAACCESS - 670)) | (1L << (DEBUGSESSION - 670)) | (1L << (DISPLAY - 670)) | (1L << (MONITOR1 - 670)) | (1L << (MONITOR2 - 670)) | (1L << (RECOVER - 670)) | (1L << (SQLADM - 670)) | (1L << (STOPALL - 670)) | (1L << (STOSPACE - 670)) | (1L << (SYSADM - 670)) | (1L << (SYSCTRL - 670)) | (1L << (SYSOPR - 670)) | (1L << (TRACE - 670)) | (1L << (UNLOAD - 670)) | (1L << (WRITE - 670)) | (1L << (ABS - 670)) | (1L << (ABSVAL - 670)) | (1L << (ACOS - 670)) | (1L << (ADD_DAYS - 670)) | (1L << (ADD_MONTHS - 670)) | (1L << (ARRAY_DELETE - 670)) | (1L << (ARRAY_FIRST - 670)) | (1L << (ARRAY_LAST - 670)) | (1L << (ARRAY_NEXT - 670)) | (1L << (ARRAY_PRIOR - 670)) | (1L << (ARRAY_TRIM - 670)) | (1L << (ASCII - 670)) | (1L << (ASCII_CHR - 670)) | (1L << (ASCIISTR - 670)) | (1L << (ASCII_STR - 670)) | (1L << (ASIN - 670)) | (1L << (ATAN - 670)) | (1L << (ATAN2 - 670)) | (1L << (ATANH - 670)) | (1L << (BIGINT - 670)) | (1L << (BINARY - 670)) | (1L << (BITAND - 670)) | (1L << (BITANDNOT - 670)) | (1L << (BITNOT - 670)) | (1L << (BITOR - 670)) | (1L << (BITXOR - 670)) | (1L << (BLOB - 670)) | (1L << (BTRIM - 670)) | (1L << (CARDINALITY - 670)) | (1L << (CCSID_ENCODING - 670)) | (1L << (CEIL - 670)) | (1L << (CEILING - 670)) | (1L << (CHAR9 - 670)) | (1L << (CHARACTER_LENGTH - 670)))) != 0) || ((((_la - 734)) & ~0x3f) == 0 && ((1L << (_la - 734)) & ((1L << (CHAR_LENGTH - 734)) | (1L << (CHR - 734)) | (1L << (CLOB - 734)) | (1L << (COALESCE - 734)) | (1L << (COLLATION_KEY - 734)) | (1L << (COMPARE_DECFLOAT - 734)) | (1L << (COS - 734)) | (1L << (COSH - 734)) | (1L << (DATE - 734)) | (1L << (DAYOFMONTH - 734)) | (1L << (DAYOFWEEK - 734)) | (1L << (DAYOFWEEK_ISO - 734)) | (1L << (DAYOFYEAR - 734)) | (1L << (DAYS_BETWEEN - 734)) | (1L << (DBCLOB - 734)) | (1L << (DEC - 734)) | (1L << (DECFLOAT - 734)) | (1L << (DECFLOAT_FORMAT - 734)) | (1L << (DECFLOAT_SORTKEY - 734)) | (1L << (DECIMAL - 734)) | (1L << (DECODE - 734)) | (1L << (DECRYPT_BINARY - 734)) | (1L << (DECRYPT_BIT - 734)) | (1L << (DECRYPT_CHAR - 734)) | (1L << (DECRYPT_DATAKEY_BIGINT - 734)) | (1L << (DECRYPT_DATAKEY_BIT - 734)) | (1L << (DECRYPT_DATAKEY_CLOB - 734)) | (1L << (DECRYPT_DATAKEY_DBCLOB - 734)) | (1L << (DECRYPT_DATAKEY_DECIMAL - 734)) | (1L << (DECRYPT_DATAKEY_INTEGER - 734)) | (1L << (DECRYPT_DATAKEY_VARCHAR - 734)) | (1L << (DECRYPT_DATAKEY_VARGRAPHIC - 734)) | (1L << (DECRYPT_DB - 734)) | (1L << (DEGREES - 734)) | (1L << (DIFFERENCE - 734)) | (1L << (DIGITS - 734)) | (1L << (DOUBLE_PRECISION - 734)) | (1L << (DSN_XMLVALIDATE - 734)) | (1L << (EBCDIC_CHR - 734)) | (1L << (EBCDIC_STR - 734)) | (1L << (ENCRYPT_DATAKEY - 734)) | (1L << (ENCRYPT_TDES - 734)) | (1L << (EXP - 734)) | (1L << (EXTRACT - 734)) | (1L << (FLOAT - 734)) | (1L << (FLOOR - 734)) | (1L << (GENERATE_UNIQUE - 734)) | (1L << (GENERATE_UNIQUE_BINARY - 734)) | (1L << (GETHINT - 734)) | (1L << (GETVARIABLE - 734)) | (1L << (GRAPHIC - 734)) | (1L << (GREATEST - 734)) | (1L << (HASH - 734)) | (1L << (HASH_CRC32 - 734)) | (1L << (HASH_MD5 - 734)) | (1L << (HASH_SHA1 - 734)) | (1L << (HASH_SHA256 - 734)) | (1L << (HEX - 734)) | (1L << (IDENTITY_VAL_LOCAL - 734)) | (1L << (IFNULL - 734)) | (1L << (INSTR - 734)) | (1L << (INT - 734)) | (1L << (INTEGER - 734)) | (1L << (JULIAN_DAY - 734)))) != 0) || ((((_la - 798)) & ~0x3f) == 0 && ((1L << (_la - 798)) & ((1L << (LAST_DAY - 798)) | (1L << (LCASE - 798)) | (1L << (LEAST - 798)) | (1L << (LENGTH - 798)) | (1L << (LN - 798)) | (1L << (LOCATE - 798)) | (1L << (LOCATE_IN_STRING - 798)) | (1L << (LOG10 - 798)) | (1L << (LOWER - 798)) | (1L << (LPAD - 798)) | (1L << (LTRIM - 798)) | (1L << (MAX - 798)) | (1L << (MAX_CARDINALITY - 798)) | (1L << (MIDNIGHT_SECONDS - 798)) | (1L << (MIN - 798)) | (1L << (MINUTE - 798)) | (1L << (MOD - 798)) | (1L << (MONTHS_BETWEEN - 798)) | (1L << (MQREAD - 798)) | (1L << (MQREADCLOB - 798)) | (1L << (MQRECEIVE - 798)) | (1L << (MQRECEIVECLOB - 798)) | (1L << (MQSEND - 798)) | (1L << (MULTIPLY_ALT - 798)) | (1L << (NEXT_DAY - 798)) | (1L << (NEXT_MONTH - 798)) | (1L << (NORMALIZE_DECFLOAT - 798)) | (1L << (NORMALIZE_STRING - 798)) | (1L << (NULLIF - 798)) | (1L << (NVL - 798)) | (1L << (OVERLAY - 798)) | (1L << (PACK - 798)) | (1L << (POSITION - 798)) | (1L << (POSSTR - 798)) | (1L << (POW - 798)) | (1L << (POWER - 798)) | (1L << (QUANTIZE - 798)) | (1L << (QUARTER - 798)) | (1L << (RADIANS - 798)) | (1L << (RAISE_ERROR - 798)) | (1L << (RAND - 798)) | (1L << (RANDOM - 798)) | (1L << (REAL - 798)) | (1L << (REGEXP_COUNT - 798)) | (1L << (REGEXP_INSTR - 798)) | (1L << (REGEXP_LIKE - 798)) | (1L << (REGEXP_REPLACE - 798)) | (1L << (REGEXP_SUBSTR - 798)) | (1L << (REPLACE - 798)) | (1L << (RID - 798)) | (1L << (ROUND - 798)) | (1L << (ROUND_TIMESTAMP - 798)) | (1L << (ROWID - 798)) | (1L << (RPAD - 798)) | (1L << (RTRIM - 798)) | (1L << (SCORE - 798)) | (1L << (SIGN - 798)) | (1L << (SIN - 798)) | (1L << (SINH - 798)) | (1L << (SMALLINT - 798)) | (1L << (SOAPHTTPC - 798)) | (1L << (SOAPHTTPNC - 798)) | (1L << (SOAPHTTPNV - 798)) | (1L << (SOAPHTTPV - 798)))) != 0) || ((((_la - 862)) & ~0x3f) == 0 && ((1L << (_la - 862)) & ((1L << (SOUNDEX - 862)) | (1L << (SPACE - 862)) | (1L << (SQRT - 862)) | (1L << (STRIP - 862)) | (1L << (STRLEFT - 862)) | (1L << (STRPOS - 862)) | (1L << (STRRIGHT - 862)) | (1L << (SUBSTR - 862)) | (1L << (SUBSTRING - 862)) | (1L << (TAN - 862)) | (1L << (TANH - 862)) | (1L << (TIME - 862)) | (1L << (TIMESTAMP - 862)) | (1L << (TIMESTAMPADD - 862)) | (1L << (TIMESTAMPDIFF - 862)) | (1L << (TIMESTAMP_FORMAT - 862)) | (1L << (TIMESTAMP_ISO - 862)) | (1L << (TIMESTAMP_TZ - 862)) | (1L << (TO_CHAR - 862)) | (1L << (TO_CLOB - 862)) | (1L << (TO_DATE - 862)) | (1L << (TO_NUMBER - 862)) | (1L << (TOTALORDER - 862)) | (1L << (TO_TIMESTAMP - 862)) | (1L << (TRANSLATE - 862)) | (1L << (TRIM - 862)) | (1L << (TRIM_ARRAY - 862)) | (1L << (TRUNC - 862)) | (1L << (TRUNC_TIMESTAMP - 862)) | (1L << (UCASE - 862)) | (1L << (UNICODE - 862)) | (1L << (UNICODE_STR - 862)) | (1L << (UNISTR - 862)) | (1L << (UPPER - 862)) | (1L << (VARBINARY - 862)) | (1L << (VARCHAR - 862)) | (1L << (VARCHAR9 - 862)) | (1L << (VARCHAR_BIT_FORMAT - 862)) | (1L << (VARCHAR_FORMAT - 862)) | (1L << (VARGRAPHIC - 862)) | (1L << (VERIFY_GROUP_FOR_USER - 862)) | (1L << (VERIFY_ROLE_FOR_USER - 862)) | (1L << (VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER - 862)) | (1L << (WEEK - 862)) | (1L << (WEEK_ISO - 862)) | (1L << (WRAP - 862)) | (1L << (XMLATTRIBUTES - 862)) | (1L << (XMLCOMMENT - 862)) | (1L << (XMLCONCAT - 862)) | (1L << (XMLDOCUMENT - 862)) | (1L << (XMLELEMENT - 862)) | (1L << (XMLFOREST - 862)) | (1L << (XMLMODIFY - 862)) | (1L << (XMLPARSE - 862)) | (1L << (XMLPI - 862)) | (1L << (XMLQUERY - 862)) | (1L << (XMLSERIALIZE - 862)) | (1L << (XMLTEXT - 862)) | (1L << (XMLXSROBJECTID - 862)) | (1L << (XSLTRANSFORM - 862)) | (1L << (CURRENT_ACCELERATOR - 862)) | (1L << (CURRENT_APPLICATION_COMPATIBILITY - 862)) | (1L << (CURRENT_APPLICATION_ENCODING_SCHEME - 862)) | (1L << (CURRENT_CLIENT_ACCTNG - 862)))) != 0) || ((((_la - 926)) & ~0x3f) == 0 && ((1L << (_la - 926)) & ((1L << (CURRENT_CLIENT_APPLNAME - 926)) | (1L << (CURRENT_CLIENT_CORR_TOKEN - 926)) | (1L << (CURRENT_CLIENT_USERID - 926)) | (1L << (CURRENT_CLIENT_WRKSTNNAME - 926)) | (1L << (CURRENT_DATE - 926)) | (1L << (CURRENT_DEBUG_MODE - 926)) | (1L << (CURRENT_DECFLOAT_ROUNDING_MODE - 926)) | (1L << (CURRENT_DEGREE - 926)) | (1L << (CURRENT_EXPLAIN_MODE - 926)) | (1L << (CURRENT_GET_ACCEL_ARCHIVE - 926)) | (1L << (CURRENT_LOCALE_LC_CTYPE - 926)) | (1L << (CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION - 926)) | (1L << (CURRENT_MEMBER - 926)) | (1L << (CURRENT_OPTIMIZATION_HINT - 926)) | (1L << (CURRENT_PACKAGE_PATH - 926)) | (1L << (CURRENT_PACKAGESET - 926)) | (1L << (CURRENT_PATH - 926)) | (1L << (CURRENT_PRECISION - 926)) | (1L << (CURRENT_QUERY_ACCELERATION - 926)) | (1L << (CURRENT_QUERY_ACCELERATION_WAITFORDATA - 926)) | (1L << (CURRENT_REFRESH_AGE - 926)) | (1L << (CURRENT_ROUTINE_VERSION - 926)) | (1L << (CURRENT_RULES - 926)) | (1L << (CURRENT_SCHEMA - 926)) | (1L << (CURRENT_SERVER - 926)) | (1L << (CURRENT_SQLID - 926)) | (1L << (CURRENT_TEMPORAL_BUSINESS_TIME - 926)) | (1L << (CURRENT_TEMPORAL_SYSTEM_TIME - 926)) | (1L << (CURRENT_TIME - 926)) | (1L << (CURRENT_TIMESTAMP - 926)) | (1L << (CURRENT_TIME_ZONE - 926)) | (1L << (ENCRYPTION_PASSWORD - 926)) | (1L << (SESSION_TIME_ZONE - 926)) | (1L << (SESSION_USER - 926)) | (1L << (USER - 926)) | (1L << (ADMIN_TASK_LIST - 926)) | (1L << (ADMIN_TASK_OUTPUT - 926)) | (1L << (ADMIN_TASK_STATUS - 926)) | (1L << (BLOCKING_THREADS - 926)) | (1L << (MQREADALL - 926)) | (1L << (MQREADALLCLOB - 926)) | (1L << (MQRECEIVEALL - 926)) | (1L << (MQRECEIVEALLCLOB - 926)) | (1L << (XMLTABLE - 926)) | (1L << (SQLIDENTIFIER - 926)))) != 0)) {
						{
						setState(6563);
						parameterType();
						setState(6568);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(6564);
							match(COMMA);
							setState(6565);
							parameterType();
							}
							}
							setState(6570);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
					}

					setState(6573);
					match(RPAREN);
					}
				}

				}
				}
				break;
			case SPECIFIC:
				{
				{
				setState(6576);
				match(SPECIFIC);
				setState(6577);
				match(FUNCTION);
				setState(6578);
				specificName();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterTypeContext extends ParserRuleContext {
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode LOCATOR() { return getToken(DB2zSQLParser.LOCATOR, 0); }
		public ParameterTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterParameterType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitParameterType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitParameterType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParameterTypeContext parameterType() throws RecognitionException {
		ParameterTypeContext _localctx = new ParameterTypeContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_parameterType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6581);
			dataType();
			setState(6584);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(6582);
				match(AS);
				setState(6583);
				match(LOCATOR);
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableColumnDefinitionOptionList1Context extends ParserRuleContext {
		public ImplicitlyHiddenClauseContext implicitlyHiddenClause() {
			return getRuleContext(ImplicitlyHiddenClauseContext.class,0);
		}
		public AsSecurityLabelClauseContext asSecurityLabelClause() {
			return getRuleContext(AsSecurityLabelClauseContext.class,0);
		}
		public FieldprocClauseContext fieldprocClause() {
			return getRuleContext(FieldprocClauseContext.class,0);
		}
		public InlineLengthClauseContext inlineLengthClause() {
			return getRuleContext(InlineLengthClauseContext.class,0);
		}
		public DefaultClause1Context defaultClause1() {
			return getRuleContext(DefaultClause1Context.class,0);
		}
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public ColumnConstraintContext columnConstraint() {
			return getRuleContext(ColumnConstraintContext.class,0);
		}
		public GeneratedClauseContext generatedClause() {
			return getRuleContext(GeneratedClauseContext.class,0);
		}
		public AlterTableColumnDefinitionOptionList1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTableColumnDefinitionOptionList1; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterTableColumnDefinitionOptionList1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterTableColumnDefinitionOptionList1(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterTableColumnDefinitionOptionList1(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableColumnDefinitionOptionList1Context alterTableColumnDefinitionOptionList1() throws RecognitionException {
		AlterTableColumnDefinitionOptionList1Context _localctx = new AlterTableColumnDefinitionOptionList1Context(_ctx, getState());
		enterRule(_localctx, 754, RULE_alterTableColumnDefinitionOptionList1);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6595);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFAULT:
			case WITH:
				{
				{
				setState(6586);
				defaultClause1();
				}
				}
				break;
			case NOT:
				{
				{
				setState(6587);
				match(NOT);
				setState(6588);
				match(NULL);
				}
				}
				break;
			case CHECK:
			case CONSTRAINT:
			case REFERENCES:
				{
				{
				setState(6589);
				columnConstraint();
				}
				}
				break;
			case GENERATED:
				{
				{
				setState(6590);
				generatedClause();
				}
				}
				break;
			case IMPLICITLY:
				{
				setState(6591);
				implicitlyHiddenClause();
				}
				break;
			case AS:
				{
				setState(6592);
				asSecurityLabelClause();
				}
				break;
			case FIELDPROC:
				{
				setState(6593);
				fieldprocClause();
				}
				break;
			case INLINE:
				{
				setState(6594);
				inlineLengthClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableColumnDefinitionOptionList2Context extends ParserRuleContext {
		public ImplicitlyHiddenClauseContext implicitlyHiddenClause() {
			return getRuleContext(ImplicitlyHiddenClauseContext.class,0);
		}
		public AsSecurityLabelClauseContext asSecurityLabelClause() {
			return getRuleContext(AsSecurityLabelClauseContext.class,0);
		}
		public FieldprocClauseContext fieldprocClause() {
			return getRuleContext(FieldprocClauseContext.class,0);
		}
		public InlineLengthClauseContext inlineLengthClause() {
			return getRuleContext(InlineLengthClauseContext.class,0);
		}
		public DefaultClause2Context defaultClause2() {
			return getRuleContext(DefaultClause2Context.class,0);
		}
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public ColumnConstraintContext columnConstraint() {
			return getRuleContext(ColumnConstraintContext.class,0);
		}
		public GeneratedClauseContext generatedClause() {
			return getRuleContext(GeneratedClauseContext.class,0);
		}
		public AlterTableColumnDefinitionOptionList2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTableColumnDefinitionOptionList2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterTableColumnDefinitionOptionList2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterTableColumnDefinitionOptionList2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterTableColumnDefinitionOptionList2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableColumnDefinitionOptionList2Context alterTableColumnDefinitionOptionList2() throws RecognitionException {
		AlterTableColumnDefinitionOptionList2Context _localctx = new AlterTableColumnDefinitionOptionList2Context(_ctx, getState());
		enterRule(_localctx, 756, RULE_alterTableColumnDefinitionOptionList2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6606);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFAULT:
			case WITH:
				{
				{
				setState(6597);
				defaultClause2();
				}
				}
				break;
			case NOT:
				{
				{
				setState(6598);
				match(NOT);
				setState(6599);
				match(NULL);
				}
				}
				break;
			case CHECK:
			case CONSTRAINT:
			case REFERENCES:
				{
				{
				setState(6600);
				columnConstraint();
				}
				}
				break;
			case GENERATED:
				{
				{
				setState(6601);
				generatedClause();
				}
				}
				break;
			case IMPLICITLY:
				{
				setState(6602);
				implicitlyHiddenClause();
				}
				break;
			case AS:
				{
				setState(6603);
				asSecurityLabelClause();
				}
				break;
			case FIELDPROC:
				{
				setState(6604);
				fieldprocClause();
				}
				break;
			case INLINE:
				{
				setState(6605);
				inlineLengthClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnConstraintContext extends ParserRuleContext {
		public ReferencesClauseContext referencesClause() {
			return getRuleContext(ReferencesClauseContext.class,0);
		}
		public CheckConstraintContext checkConstraint() {
			return getRuleContext(CheckConstraintContext.class,0);
		}
		public ColumnConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnConstraintContext columnConstraint() throws RecognitionException {
		ColumnConstraintContext _localctx = new ColumnConstraintContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_columnConstraint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6610);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REFERENCES:
				{
				setState(6608);
				referencesClause();
				}
				break;
			case CHECK:
			case CONSTRAINT:
				{
				setState(6609);
				checkConstraint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GeneratedClauseContext extends ParserRuleContext {
		public TerminalNode GENERATED() { return getToken(DB2zSQLParser.GENERATED, 0); }
		public AsIdentityClauseContext asIdentityClause() {
			return getRuleContext(AsIdentityClauseContext.class,0);
		}
		public AsRowChangeTimestampClauseContext asRowChangeTimestampClause() {
			return getRuleContext(AsRowChangeTimestampClauseContext.class,0);
		}
		public AsRowTransactionStartIDClauseContext asRowTransactionStartIDClause() {
			return getRuleContext(AsRowTransactionStartIDClauseContext.class,0);
		}
		public AsRowTransactionTimestampClauseContext asRowTransactionTimestampClause() {
			return getRuleContext(AsRowTransactionTimestampClauseContext.class,0);
		}
		public AsGeneratedExpressionClauseContext asGeneratedExpressionClause() {
			return getRuleContext(AsGeneratedExpressionClauseContext.class,0);
		}
		public TerminalNode ALWAYS() { return getToken(DB2zSQLParser.ALWAYS, 0); }
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public TerminalNode DEFAULT() { return getToken(DB2zSQLParser.DEFAULT, 0); }
		public GeneratedClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generatedClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGeneratedClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGeneratedClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGeneratedClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GeneratedClauseContext generatedClause() throws RecognitionException {
		GeneratedClauseContext _localctx = new GeneratedClauseContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_generatedClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6631);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,759,_ctx) ) {
			case 1:
				{
				{
				setState(6612);
				match(GENERATED);
				setState(6616);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALWAYS:
					{
					setState(6613);
					match(ALWAYS);
					}
					break;
				case BY:
					{
					{
					setState(6614);
					match(BY);
					setState(6615);
					match(DEFAULT);
					}
					}
					break;
				case AS:
				case FOR:
					break;
				default:
					break;
				}
				setState(6620);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AS:
					{
					setState(6618);
					asIdentityClause();
					}
					break;
				case FOR:
					{
					setState(6619);
					asRowChangeTimestampClause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case 2:
				{
				{
				setState(6622);
				match(GENERATED);
				setState(6624);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALWAYS) {
					{
					setState(6623);
					match(ALWAYS);
					}
				}

				setState(6629);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,758,_ctx) ) {
				case 1:
					{
					setState(6626);
					asRowTransactionStartIDClause();
					}
					break;
				case 2:
					{
					setState(6627);
					asRowTransactionTimestampClause();
					}
					break;
				case 3:
					{
					setState(6628);
					asGeneratedExpressionClause();
					}
					break;
				}
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GeneratedClause2Context extends ParserRuleContext {
		public TerminalNode GENERATED() { return getToken(DB2zSQLParser.GENERATED, 0); }
		public TerminalNode ALWAYS() { return getToken(DB2zSQLParser.ALWAYS, 0); }
		public AsIdentityClauseContext asIdentityClause() {
			return getRuleContext(AsIdentityClauseContext.class,0);
		}
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public TerminalNode DEFAULT() { return getToken(DB2zSQLParser.DEFAULT, 0); }
		public GeneratedClause2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generatedClause2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGeneratedClause2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGeneratedClause2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGeneratedClause2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GeneratedClause2Context generatedClause2() throws RecognitionException {
		GeneratedClause2Context _localctx = new GeneratedClause2Context(_ctx, getState());
		enterRule(_localctx, 762, RULE_generatedClause2);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6633);
			match(GENERATED);
			setState(6637);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALWAYS:
				{
				setState(6634);
				match(ALWAYS);
				}
				break;
			case BY:
				{
				{
				setState(6635);
				match(BY);
				setState(6636);
				match(DEFAULT);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6640);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(6639);
				asIdentityClause();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AsIdentityClauseContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode IDENTITY() { return getToken(DB2zSQLParser.IDENTITY, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<AsIdentityClauseOptionListContext> asIdentityClauseOptionList() {
			return getRuleContexts(AsIdentityClauseOptionListContext.class);
		}
		public AsIdentityClauseOptionListContext asIdentityClauseOptionList(int i) {
			return getRuleContext(AsIdentityClauseOptionListContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public AsIdentityClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asIdentityClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAsIdentityClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAsIdentityClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAsIdentityClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AsIdentityClauseContext asIdentityClause() throws RecognitionException {
		AsIdentityClauseContext _localctx = new AsIdentityClauseContext(_ctx, getState());
		enterRule(_localctx, 764, RULE_asIdentityClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6642);
			match(AS);
			setState(6643);
			match(IDENTITY);
			setState(6657);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LPAREN) {
				{
				setState(6644);
				match(LPAREN);
				setState(6645);
				asIdentityClauseOptionList();
				setState(6652);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA || _la==NO || _la==ORDER || ((((_la - 472)) & ~0x3f) == 0 && ((1L << (_la - 472)) & ((1L << (MAXVALUE - 472)) | (1L << (MINVALUE - 472)) | (1L << (CACHE - 472)) | (1L << (CYCLE - 472)) | (1L << (INCREMENT - 472)) | (1L << (START - 472)))) != 0)) {
					{
					{
					setState(6647);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(6646);
						match(COMMA);
						}
					}

					setState(6649);
					asIdentityClauseOptionList();
					}
					}
					setState(6654);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6655);
				match(RPAREN);
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AsIdentityClauseOptionListContext extends ParserRuleContext {
		public StartOptionContext startOption() {
			return getRuleContext(StartOptionContext.class,0);
		}
		public IncrementOptionContext incrementOption() {
			return getRuleContext(IncrementOptionContext.class,0);
		}
		public MinvalueOptionContext minvalueOption() {
			return getRuleContext(MinvalueOptionContext.class,0);
		}
		public MaxvalueOptionContext maxvalueOption() {
			return getRuleContext(MaxvalueOptionContext.class,0);
		}
		public CycleOptionContext cycleOption() {
			return getRuleContext(CycleOptionContext.class,0);
		}
		public CacheOptionContext cacheOption() {
			return getRuleContext(CacheOptionContext.class,0);
		}
		public OrderOptionContext orderOption() {
			return getRuleContext(OrderOptionContext.class,0);
		}
		public AsIdentityClauseOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asIdentityClauseOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAsIdentityClauseOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAsIdentityClauseOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAsIdentityClauseOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AsIdentityClauseOptionListContext asIdentityClauseOptionList() throws RecognitionException {
		AsIdentityClauseOptionListContext _localctx = new AsIdentityClauseOptionListContext(_ctx, getState());
		enterRule(_localctx, 766, RULE_asIdentityClauseOptionList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6666);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,765,_ctx) ) {
			case 1:
				{
				setState(6659);
				startOption();
				}
				break;
			case 2:
				{
				setState(6660);
				incrementOption();
				}
				break;
			case 3:
				{
				setState(6661);
				minvalueOption();
				}
				break;
			case 4:
				{
				setState(6662);
				maxvalueOption();
				}
				break;
			case 5:
				{
				setState(6663);
				cycleOption();
				}
				break;
			case 6:
				{
				setState(6664);
				cacheOption();
				}
				break;
			case 7:
				{
				setState(6665);
				orderOption();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AsRowChangeTimestampClauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode EACH() { return getToken(DB2zSQLParser.EACH, 0); }
		public List<TerminalNode> ROW() { return getTokens(DB2zSQLParser.ROW); }
		public TerminalNode ROW(int i) {
			return getToken(DB2zSQLParser.ROW, i);
		}
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(DB2zSQLParser.UPDATE, 0); }
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode CHANGE() { return getToken(DB2zSQLParser.CHANGE, 0); }
		public TerminalNode TIMESTAMP() { return getToken(DB2zSQLParser.TIMESTAMP, 0); }
		public AsRowChangeTimestampClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asRowChangeTimestampClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAsRowChangeTimestampClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAsRowChangeTimestampClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAsRowChangeTimestampClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AsRowChangeTimestampClauseContext asRowChangeTimestampClause() throws RecognitionException {
		AsRowChangeTimestampClauseContext _localctx = new AsRowChangeTimestampClauseContext(_ctx, getState());
		enterRule(_localctx, 768, RULE_asRowChangeTimestampClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6668);
			match(FOR);
			setState(6669);
			match(EACH);
			setState(6670);
			match(ROW);
			setState(6671);
			match(ON);
			setState(6672);
			match(UPDATE);
			setState(6673);
			match(AS);
			setState(6674);
			match(ROW);
			setState(6675);
			match(CHANGE);
			setState(6676);
			match(TIMESTAMP);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AsRowTransactionStartIDClauseContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode TRANSACTION() { return getToken(DB2zSQLParser.TRANSACTION, 0); }
		public TerminalNode START() { return getToken(DB2zSQLParser.START, 0); }
		public TerminalNode ID() { return getToken(DB2zSQLParser.ID, 0); }
		public AsRowTransactionStartIDClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asRowTransactionStartIDClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAsRowTransactionStartIDClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAsRowTransactionStartIDClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAsRowTransactionStartIDClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AsRowTransactionStartIDClauseContext asRowTransactionStartIDClause() throws RecognitionException {
		AsRowTransactionStartIDClauseContext _localctx = new AsRowTransactionStartIDClauseContext(_ctx, getState());
		enterRule(_localctx, 770, RULE_asRowTransactionStartIDClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6678);
			match(AS);
			setState(6679);
			match(TRANSACTION);
			setState(6680);
			match(START);
			setState(6681);
			match(ID);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AsRowTransactionTimestampClauseContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode ROW() { return getToken(DB2zSQLParser.ROW, 0); }
		public TerminalNode BEGIN() { return getToken(DB2zSQLParser.BEGIN, 0); }
		public TerminalNode START() { return getToken(DB2zSQLParser.START, 0); }
		public TerminalNode END() { return getToken(DB2zSQLParser.END, 0); }
		public AsRowTransactionTimestampClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asRowTransactionTimestampClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAsRowTransactionTimestampClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAsRowTransactionTimestampClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAsRowTransactionTimestampClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AsRowTransactionTimestampClauseContext asRowTransactionTimestampClause() throws RecognitionException {
		AsRowTransactionTimestampClauseContext _localctx = new AsRowTransactionTimestampClauseContext(_ctx, getState());
		enterRule(_localctx, 772, RULE_asRowTransactionTimestampClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6683);
			match(AS);
			setState(6684);
			match(ROW);
			setState(6685);
			_la = _input.LA(1);
			if ( !(_la==BEGIN || _la==END || _la==START) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AsGeneratedExpressionClauseContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public NonDeterministicExpressionContext nonDeterministicExpression() {
			return getRuleContext(NonDeterministicExpressionContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public AsGeneratedExpressionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asGeneratedExpressionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAsGeneratedExpressionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAsGeneratedExpressionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAsGeneratedExpressionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AsGeneratedExpressionClauseContext asGeneratedExpressionClause() throws RecognitionException {
		AsGeneratedExpressionClauseContext _localctx = new AsGeneratedExpressionClauseContext(_ctx, getState());
		enterRule(_localctx, 774, RULE_asGeneratedExpressionClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6687);
			match(AS);
			setState(6688);
			match(LPAREN);
			setState(6689);
			nonDeterministicExpression();
			setState(6690);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NonDeterministicExpressionContext extends ParserRuleContext {
		public SpecialRegisterContext specialRegister() {
			return getRuleContext(SpecialRegisterContext.class,0);
		}
		public NonDeterministicExpressionSessionVariableContext nonDeterministicExpressionSessionVariable() {
			return getRuleContext(NonDeterministicExpressionSessionVariableContext.class,0);
		}
		public TerminalNode DATA() { return getToken(DB2zSQLParser.DATA, 0); }
		public TerminalNode CHANGE() { return getToken(DB2zSQLParser.CHANGE, 0); }
		public TerminalNode OPERATION() { return getToken(DB2zSQLParser.OPERATION, 0); }
		public NonDeterministicExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonDeterministicExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterNonDeterministicExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitNonDeterministicExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitNonDeterministicExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NonDeterministicExpressionContext nonDeterministicExpression() throws RecognitionException {
		NonDeterministicExpressionContext _localctx = new NonDeterministicExpressionContext(_ctx, getState());
		enterRule(_localctx, 776, RULE_nonDeterministicExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6697);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATA:
				{
				{
				setState(6692);
				match(DATA);
				setState(6693);
				match(CHANGE);
				setState(6694);
				match(OPERATION);
				}
				}
				break;
			case CURRENT_ACCELERATOR:
			case CURRENT_APPLICATION_COMPATIBILITY:
			case CURRENT_APPLICATION_ENCODING_SCHEME:
			case CURRENT_CLIENT_ACCTNG:
			case CURRENT_CLIENT_APPLNAME:
			case CURRENT_CLIENT_CORR_TOKEN:
			case CURRENT_CLIENT_USERID:
			case CURRENT_CLIENT_WRKSTNNAME:
			case CURRENT_DATE:
			case CURRENT_DEBUG_MODE:
			case CURRENT_DECFLOAT_ROUNDING_MODE:
			case CURRENT_DEGREE:
			case CURRENT_EXPLAIN_MODE:
			case CURRENT_GET_ACCEL_ARCHIVE:
			case CURRENT_LOCALE_LC_CTYPE:
			case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
			case CURRENT_MEMBER:
			case CURRENT_OPTIMIZATION_HINT:
			case CURRENT_PACKAGE_PATH:
			case CURRENT_PACKAGESET:
			case CURRENT_PATH:
			case CURRENT_PRECISION:
			case CURRENT_QUERY_ACCELERATION:
			case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
			case CURRENT_REFRESH_AGE:
			case CURRENT_ROUTINE_VERSION:
			case CURRENT_RULES:
			case CURRENT_SCHEMA:
			case CURRENT_SERVER:
			case CURRENT_SQLID:
			case CURRENT_TEMPORAL_BUSINESS_TIME:
			case CURRENT_TEMPORAL_SYSTEM_TIME:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_TIME_ZONE:
			case ENCRYPTION_PASSWORD:
			case SESSION_TIME_ZONE:
			case SESSION_USER:
			case USER:
				{
				setState(6695);
				specialRegister();
				}
				break;
			case SYSIBM:
				{
				setState(6696);
				nonDeterministicExpressionSessionVariable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NonDeterministicExpressionSessionVariableContext extends ParserRuleContext {
		public TerminalNode SYSIBM() { return getToken(DB2zSQLParser.SYSIBM, 0); }
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public TerminalNode PACKAGE_NAME() { return getToken(DB2zSQLParser.PACKAGE_NAME, 0); }
		public TerminalNode PACKAGE_SCHEMA() { return getToken(DB2zSQLParser.PACKAGE_SCHEMA, 0); }
		public TerminalNode PACKAGE_VERSION() { return getToken(DB2zSQLParser.PACKAGE_VERSION, 0); }
		public NonDeterministicExpressionSessionVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonDeterministicExpressionSessionVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterNonDeterministicExpressionSessionVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitNonDeterministicExpressionSessionVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitNonDeterministicExpressionSessionVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NonDeterministicExpressionSessionVariableContext nonDeterministicExpressionSessionVariable() throws RecognitionException {
		NonDeterministicExpressionSessionVariableContext _localctx = new NonDeterministicExpressionSessionVariableContext(_ctx, getState());
		enterRule(_localctx, 778, RULE_nonDeterministicExpressionSessionVariable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6708);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,767,_ctx) ) {
			case 1:
				{
				{
				setState(6699);
				match(SYSIBM);
				setState(6700);
				match(DOT);
				setState(6701);
				match(PACKAGE_NAME);
				}
				}
				break;
			case 2:
				{
				{
				setState(6702);
				match(SYSIBM);
				setState(6703);
				match(DOT);
				setState(6704);
				match(PACKAGE_SCHEMA);
				}
				}
				break;
			case 3:
				{
				{
				setState(6705);
				match(SYSIBM);
				setState(6706);
				match(DOT);
				setState(6707);
				match(PACKAGE_VERSION);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnAlterationContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public List<ColumnAlterationOptionListContext> columnAlterationOptionList() {
			return getRuleContexts(ColumnAlterationOptionListContext.class);
		}
		public ColumnAlterationOptionListContext columnAlterationOptionList(int i) {
			return getRuleContext(ColumnAlterationOptionListContext.class,i);
		}
		public ColumnAlterationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnAlteration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterColumnAlteration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitColumnAlteration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitColumnAlteration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnAlterationContext columnAlteration() throws RecognitionException {
		ColumnAlterationContext _localctx = new ColumnAlterationContext(_ctx, getState());
		enterRule(_localctx, 780, RULE_columnAlteration);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6710);
			columnName();
			setState(6712); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(6711);
					columnAlterationOptionList();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6714); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,768,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnAlterationOptionListContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public TerminalNode DATA() { return getToken(DB2zSQLParser.DATA, 0); }
		public TerminalNode TYPE() { return getToken(DB2zSQLParser.TYPE, 0); }
		public AlteredDataTypeContext alteredDataType() {
			return getRuleContext(AlteredDataTypeContext.class,0);
		}
		public DefaultClauseContext defaultClause() {
			return getRuleContext(DefaultClauseContext.class,0);
		}
		public TerminalNode INLINE() { return getToken(DB2zSQLParser.INLINE, 0); }
		public TerminalNode LENGTH() { return getToken(DB2zSQLParser.LENGTH, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode GENERATED() { return getToken(DB2zSQLParser.GENERATED, 0); }
		public IdentityAlterationContext identityAlteration() {
			return getRuleContext(IdentityAlterationContext.class,0);
		}
		public TerminalNode DROP() { return getToken(DB2zSQLParser.DROP, 0); }
		public TerminalNode DEFAULT() { return getToken(DB2zSQLParser.DEFAULT, 0); }
		public TerminalNode ALWAYS() { return getToken(DB2zSQLParser.ALWAYS, 0); }
		public AsRowTransactionTimestampClauseContext asRowTransactionTimestampClause() {
			return getRuleContext(AsRowTransactionTimestampClauseContext.class,0);
		}
		public AsRowTransactionStartIDClauseContext asRowTransactionStartIDClause() {
			return getRuleContext(AsRowTransactionStartIDClauseContext.class,0);
		}
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public ColumnAlterationOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnAlterationOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterColumnAlterationOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitColumnAlterationOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitColumnAlterationOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnAlterationOptionListContext columnAlterationOptionList() throws RecognitionException {
		ColumnAlterationOptionListContext _localctx = new ColumnAlterationOptionListContext(_ctx, getState());
		enterRule(_localctx, 782, RULE_columnAlterationOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6753);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,774,_ctx) ) {
			case 1:
				{
				{
				setState(6716);
				match(SET);
				setState(6717);
				match(DATA);
				setState(6718);
				match(TYPE);
				setState(6719);
				alteredDataType();
				setState(6723);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INLINE) {
					{
					setState(6720);
					match(INLINE);
					setState(6721);
					match(LENGTH);
					setState(6722);
					match(INTEGERLITERAL);
					}
				}

				}
				}
				break;
			case 2:
				{
				{
				setState(6725);
				match(SET);
				setState(6726);
				defaultClause();
				}
				}
				break;
			case 3:
				{
				{
				setState(6727);
				match(SET);
				setState(6728);
				match(INLINE);
				setState(6729);
				match(LENGTH);
				setState(6730);
				match(INTEGERLITERAL);
				}
				}
				break;
			case 4:
				{
				{
				setState(6731);
				match(SET);
				setState(6732);
				match(GENERATED);
				setState(6736);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALWAYS:
					{
					setState(6733);
					match(ALWAYS);
					}
					break;
				case BY:
					{
					{
					setState(6734);
					match(BY);
					setState(6735);
					match(DEFAULT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6739);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,771,_ctx) ) {
				case 1:
					{
					setState(6738);
					identityAlteration();
					}
					break;
				}
				}
				}
				break;
			case 5:
				{
				{
				setState(6741);
				identityAlteration();
				}
				}
				break;
			case 6:
				{
				{
				setState(6742);
				match(SET);
				setState(6743);
				match(GENERATED);
				setState(6745);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALWAYS) {
					{
					setState(6744);
					match(ALWAYS);
					}
				}

				setState(6749);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,773,_ctx) ) {
				case 1:
					{
					setState(6747);
					asRowTransactionTimestampClause();
					}
					break;
				case 2:
					{
					setState(6748);
					asRowTransactionStartIDClause();
					}
					break;
				}
				}
				}
				break;
			case 7:
				{
				{
				setState(6751);
				match(DROP);
				setState(6752);
				match(DEFAULT);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlteredDataTypeContext extends ParserRuleContext {
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public AlteredDataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alteredDataType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlteredDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlteredDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlteredDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlteredDataTypeContext alteredDataType() throws RecognitionException {
		AlteredDataTypeContext _localctx = new AlteredDataTypeContext(_ctx, getState());
		enterRule(_localctx, 784, RULE_alteredDataType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6755);
			dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeContext extends ParserRuleContext {
		public BuiltInTypeContext builtInType() {
			return getRuleContext(BuiltInTypeContext.class,0);
		}
		public DistinctTypeNameContext distinctTypeName() {
			return getRuleContext(DistinctTypeNameContext.class,0);
		}
		public DataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeContext dataType() throws RecognitionException {
		DataTypeContext _localctx = new DataTypeContext(_ctx, getState());
		enterRule(_localctx, 786, RULE_dataType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6759);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,775,_ctx) ) {
			case 1:
				{
				setState(6757);
				builtInType();
				}
				break;
			case 2:
				{
				setState(6758);
				distinctTypeName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BuiltInTypeContext extends ParserRuleContext {
		public TerminalNode SMALLINT() { return getToken(DB2zSQLParser.SMALLINT, 0); }
		public TerminalNode INTEGER() { return getToken(DB2zSQLParser.INTEGER, 0); }
		public TerminalNode INT() { return getToken(DB2zSQLParser.INT, 0); }
		public TerminalNode BIGINT() { return getToken(DB2zSQLParser.BIGINT, 0); }
		public TerminalNode REAL() { return getToken(DB2zSQLParser.REAL, 0); }
		public TerminalNode DATE() { return getToken(DB2zSQLParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(DB2zSQLParser.TIME, 0); }
		public TerminalNode ROWID() { return getToken(DB2zSQLParser.ROWID, 0); }
		public TerminalNode DECFLOAT() { return getToken(DB2zSQLParser.DECFLOAT, 0); }
		public TerminalNode FLOAT() { return getToken(DB2zSQLParser.FLOAT, 0); }
		public TerminalNode DOUBLE() { return getToken(DB2zSQLParser.DOUBLE, 0); }
		public TerminalNode BINARY() { return getToken(DB2zSQLParser.BINARY, 0); }
		public TerminalNode TIMESTAMP() { return getToken(DB2zSQLParser.TIMESTAMP, 0); }
		public TerminalNode XML() { return getToken(DB2zSQLParser.XML, 0); }
		public TerminalNode DECIMAL() { return getToken(DB2zSQLParser.DECIMAL, 0); }
		public TerminalNode DEC() { return getToken(DB2zSQLParser.DEC, 0); }
		public TerminalNode NUMERIC() { return getToken(DB2zSQLParser.NUMERIC, 0); }
		public TerminalNode GRAPHIC() { return getToken(DB2zSQLParser.GRAPHIC, 0); }
		public TerminalNode VARGRAPHIC() { return getToken(DB2zSQLParser.VARGRAPHIC, 0); }
		public TerminalNode DBCLOB() { return getToken(DB2zSQLParser.DBCLOB, 0); }
		public IntegerInParensContext integerInParens() {
			return getRuleContext(IntegerInParensContext.class,0);
		}
		public TerminalNode VARCHAR() { return getToken(DB2zSQLParser.VARCHAR, 0); }
		public TerminalNode CLOB() { return getToken(DB2zSQLParser.CLOB, 0); }
		public TerminalNode VARBINARY() { return getToken(DB2zSQLParser.VARBINARY, 0); }
		public TerminalNode BLOB() { return getToken(DB2zSQLParser.BLOB, 0); }
		public TerminalNode PRECISION() { return getToken(DB2zSQLParser.PRECISION, 0); }
		public LengthContext length() {
			return getRuleContext(LengthContext.class,0);
		}
		public ForDataQualifierContext forDataQualifier() {
			return getRuleContext(ForDataQualifierContext.class,0);
		}
		public CcsidClause2Context ccsidClause2() {
			return getRuleContext(CcsidClause2Context.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode ZONE() { return getToken(DB2zSQLParser.ZONE, 0); }
		public XmlTypeModifierContext xmlTypeModifier() {
			return getRuleContext(XmlTypeModifierContext.class,0);
		}
		public TerminalNode LARGE() { return getToken(DB2zSQLParser.LARGE, 0); }
		public TerminalNode OBJECT() { return getToken(DB2zSQLParser.OBJECT, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode SQLIDENTIFIER() { return getToken(DB2zSQLParser.SQLIDENTIFIER, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode WITHOUT() { return getToken(DB2zSQLParser.WITHOUT, 0); }
		public TerminalNode CHARACTER() { return getToken(DB2zSQLParser.CHARACTER, 0); }
		public TerminalNode CHAR() { return getToken(DB2zSQLParser.CHAR, 0); }
		public TerminalNode VARYING() { return getToken(DB2zSQLParser.VARYING, 0); }
		public BuiltInTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_builtInType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterBuiltInType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitBuiltInType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitBuiltInType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BuiltInTypeContext builtInType() throws RecognitionException {
		BuiltInTypeContext _localctx = new BuiltInTypeContext(_ctx, getState());
		enterRule(_localctx, 788, RULE_builtInType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6876);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,798,_ctx) ) {
			case 1:
				{
				setState(6761);
				match(SMALLINT);
				}
				break;
			case 2:
				{
				setState(6762);
				match(INTEGER);
				}
				break;
			case 3:
				{
				setState(6763);
				match(INT);
				}
				break;
			case 4:
				{
				setState(6764);
				match(BIGINT);
				}
				break;
			case 5:
				{
				{
				setState(6765);
				_la = _input.LA(1);
				if ( !(_la==NUMERIC || _la==DEC || _la==DECIMAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6769);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,776,_ctx) ) {
				case 1:
					{
					setState(6766);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(6767);
					match(LPAREN);
					setState(6768);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 6:
				{
				{
				setState(6771);
				match(DECFLOAT);
				setState(6775);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,777,_ctx) ) {
				case 1:
					{
					setState(6772);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(6773);
					match(LPAREN);
					setState(6774);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 7:
				{
				{
				setState(6777);
				match(FLOAT);
				setState(6781);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,778,_ctx) ) {
				case 1:
					{
					setState(6778);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(6779);
					match(LPAREN);
					setState(6780);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 8:
				{
				setState(6783);
				match(REAL);
				}
				break;
			case 9:
				{
				{
				setState(6784);
				match(DOUBLE);
				setState(6786);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,779,_ctx) ) {
				case 1:
					{
					setState(6785);
					match(PRECISION);
					}
					break;
				}
				}
				}
				break;
			case 10:
				{
				{
				setState(6793);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHAR:
				case CHARACTER:
					{
					{
					setState(6788);
					_la = _input.LA(1);
					if ( !(_la==CHAR || _la==CHARACTER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(6790);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,780,_ctx) ) {
					case 1:
						{
						setState(6789);
						match(VARYING);
						}
						break;
					}
					}
					}
					break;
				case VARCHAR:
					{
					setState(6792);
					match(VARCHAR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6798);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,782,_ctx) ) {
				case 1:
					{
					setState(6795);
					length();
					}
					break;
				case 2:
					{
					{
					setState(6796);
					match(LPAREN);
					setState(6797);
					match(RPAREN);
					}
					}
					break;
				}
				setState(6802);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,783,_ctx) ) {
				case 1:
					{
					setState(6800);
					forDataQualifier();
					}
					break;
				case 2:
					{
					setState(6801);
					ccsidClause2();
					}
					break;
				}
				}
				}
				break;
			case 11:
				{
				{
				setState(6808);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHAR:
				case CHARACTER:
					{
					{
					setState(6804);
					_la = _input.LA(1);
					if ( !(_la==CHAR || _la==CHARACTER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(6805);
					match(LARGE);
					setState(6806);
					match(OBJECT);
					}
					}
					break;
				case CLOB:
					{
					setState(6807);
					match(CLOB);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6813);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,785,_ctx) ) {
				case 1:
					{
					setState(6810);
					length();
					}
					break;
				case 2:
					{
					{
					setState(6811);
					match(LPAREN);
					setState(6812);
					match(RPAREN);
					}
					}
					break;
				}
				setState(6817);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,786,_ctx) ) {
				case 1:
					{
					setState(6815);
					forDataQualifier();
					}
					break;
				case 2:
					{
					setState(6816);
					ccsidClause2();
					}
					break;
				}
				}
				}
				break;
			case 12:
				{
				{
				setState(6819);
				_la = _input.LA(1);
				if ( !(_la==DBCLOB || _la==GRAPHIC || _la==VARGRAPHIC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6823);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,787,_ctx) ) {
				case 1:
					{
					setState(6820);
					length();
					}
					break;
				case 2:
					{
					{
					setState(6821);
					match(LPAREN);
					setState(6822);
					match(RPAREN);
					}
					}
					break;
				}
				setState(6826);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,788,_ctx) ) {
				case 1:
					{
					setState(6825);
					ccsidClause2();
					}
					break;
				}
				}
				}
				break;
			case 13:
				{
				{
				setState(6828);
				match(BINARY);
				setState(6832);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,789,_ctx) ) {
				case 1:
					{
					setState(6829);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(6830);
					match(LPAREN);
					setState(6831);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 14:
				{
				{
				setState(6839);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
					{
					{
					setState(6834);
					match(BINARY);
					setState(6836);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,790,_ctx) ) {
					case 1:
						{
						setState(6835);
						match(VARYING);
						}
						break;
					}
					}
					}
					break;
				case VARBINARY:
					{
					setState(6838);
					match(VARBINARY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6844);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,792,_ctx) ) {
				case 1:
					{
					setState(6841);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(6842);
					match(LPAREN);
					setState(6843);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 15:
				{
				{
				setState(6850);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
					{
					{
					setState(6846);
					match(BINARY);
					setState(6847);
					match(LARGE);
					setState(6848);
					match(OBJECT);
					}
					}
					break;
				case BLOB:
					{
					setState(6849);
					match(BLOB);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6855);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,794,_ctx) ) {
				case 1:
					{
					setState(6852);
					match(LPAREN);
					setState(6853);
					_la = _input.LA(1);
					if ( !(_la==INTEGERLITERAL || _la==SQLIDENTIFIER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(6854);
					match(RPAREN);
					}
					break;
				}
				}
				}
				break;
			case 16:
				{
				setState(6857);
				match(DATE);
				}
				break;
			case 17:
				{
				setState(6858);
				match(TIME);
				}
				break;
			case 18:
				{
				{
				setState(6859);
				match(TIMESTAMP);
				setState(6861);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,795,_ctx) ) {
				case 1:
					{
					setState(6860);
					integerInParens();
					}
					break;
				}
				setState(6866);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,796,_ctx) ) {
				case 1:
					{
					setState(6863);
					_la = _input.LA(1);
					if ( !(_la==WITH || _la==WITHOUT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(6864);
					match(TIME);
					setState(6865);
					match(ZONE);
					}
					break;
				}
				}
				}
				break;
			case 19:
				{
				setState(6868);
				match(ROWID);
				}
				break;
			case 20:
				{
				{
				setState(6869);
				match(XML);
				setState(6874);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,797,_ctx) ) {
				case 1:
					{
					setState(6870);
					match(LPAREN);
					setState(6871);
					xmlTypeModifier();
					setState(6872);
					match(RPAREN);
					}
					break;
				}
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SequenceDataTypeContext extends ParserRuleContext {
		public SequenceBuiltInTypeContext sequenceBuiltInType() {
			return getRuleContext(SequenceBuiltInTypeContext.class,0);
		}
		public DistinctTypeNameContext distinctTypeName() {
			return getRuleContext(DistinctTypeNameContext.class,0);
		}
		public SequenceDataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequenceDataType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSequenceDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSequenceDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSequenceDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SequenceDataTypeContext sequenceDataType() throws RecognitionException {
		SequenceDataTypeContext _localctx = new SequenceDataTypeContext(_ctx, getState());
		enterRule(_localctx, 790, RULE_sequenceDataType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6880);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,799,_ctx) ) {
			case 1:
				{
				setState(6878);
				sequenceBuiltInType();
				}
				break;
			case 2:
				{
				setState(6879);
				distinctTypeName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SequenceBuiltInTypeContext extends ParserRuleContext {
		public TerminalNode SMALLINT() { return getToken(DB2zSQLParser.SMALLINT, 0); }
		public TerminalNode INTEGER() { return getToken(DB2zSQLParser.INTEGER, 0); }
		public TerminalNode INT() { return getToken(DB2zSQLParser.INT, 0); }
		public TerminalNode BIGINT() { return getToken(DB2zSQLParser.BIGINT, 0); }
		public TerminalNode DECIMAL() { return getToken(DB2zSQLParser.DECIMAL, 0); }
		public TerminalNode DEC() { return getToken(DB2zSQLParser.DEC, 0); }
		public TerminalNode NUMERIC() { return getToken(DB2zSQLParser.NUMERIC, 0); }
		public IntegerInParensContext integerInParens() {
			return getRuleContext(IntegerInParensContext.class,0);
		}
		public SequenceBuiltInTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequenceBuiltInType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSequenceBuiltInType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSequenceBuiltInType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSequenceBuiltInType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SequenceBuiltInTypeContext sequenceBuiltInType() throws RecognitionException {
		SequenceBuiltInTypeContext _localctx = new SequenceBuiltInTypeContext(_ctx, getState());
		enterRule(_localctx, 792, RULE_sequenceBuiltInType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6890);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SMALLINT:
				{
				setState(6882);
				match(SMALLINT);
				}
				break;
			case INTEGER:
				{
				setState(6883);
				match(INTEGER);
				}
				break;
			case INT:
				{
				setState(6884);
				match(INT);
				}
				break;
			case BIGINT:
				{
				setState(6885);
				match(BIGINT);
				}
				break;
			case NUMERIC:
			case DEC:
			case DECIMAL:
				{
				{
				setState(6886);
				_la = _input.LA(1);
				if ( !(_la==NUMERIC || _la==DEC || _la==DECIMAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6888);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(6887);
					integerInParens();
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SqlDataTypeContext extends ParserRuleContext {
		public TerminalNode DATE() { return getToken(DB2zSQLParser.DATE, 0); }
		public TerminalNode VARCHAR() { return getToken(DB2zSQLParser.VARCHAR, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode DECFLOAT() { return getToken(DB2zSQLParser.DECFLOAT, 0); }
		public TerminalNode TIMESTAMP() { return getToken(DB2zSQLParser.TIMESTAMP, 0); }
		public SqlDataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlDataType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSqlDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSqlDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSqlDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SqlDataTypeContext sqlDataType() throws RecognitionException {
		SqlDataTypeContext _localctx = new SqlDataTypeContext(_ctx, getState());
		enterRule(_localctx, 794, RULE_sqlDataType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6909);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VARCHAR:
				{
				{
				setState(6892);
				match(VARCHAR);
				setState(6893);
				match(LPAREN);
				setState(6894);
				match(INTEGERLITERAL);
				setState(6895);
				match(RPAREN);
				}
				}
				break;
			case DECFLOAT:
				{
				{
				setState(6896);
				match(DECFLOAT);
				setState(6900);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(6897);
					match(LPAREN);
					setState(6898);
					match(INTEGERLITERAL);
					setState(6899);
					match(RPAREN);
					}
				}

				}
				}
				break;
			case DATE:
				{
				setState(6902);
				match(DATE);
				}
				break;
			case TIMESTAMP:
				{
				{
				setState(6903);
				match(TIMESTAMP);
				setState(6907);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(6904);
					match(LPAREN);
					setState(6905);
					match(INTEGERLITERAL);
					setState(6906);
					match(RPAREN);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlTypeModifierContext extends ParserRuleContext {
		public TerminalNode XMLSCHEMA() { return getToken(DB2zSQLParser.XMLSCHEMA, 0); }
		public List<XmlSchemaSpecificationContext> xmlSchemaSpecification() {
			return getRuleContexts(XmlSchemaSpecificationContext.class);
		}
		public XmlSchemaSpecificationContext xmlSchemaSpecification(int i) {
			return getRuleContext(XmlSchemaSpecificationContext.class,i);
		}
		public List<TerminalNode> ELEMENT() { return getTokens(DB2zSQLParser.ELEMENT); }
		public TerminalNode ELEMENT(int i) {
			return getToken(DB2zSQLParser.ELEMENT, i);
		}
		public List<XmlElementNameContext> xmlElementName() {
			return getRuleContexts(XmlElementNameContext.class);
		}
		public XmlElementNameContext xmlElementName(int i) {
			return getRuleContext(XmlElementNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public XmlTypeModifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlTypeModifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterXmlTypeModifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitXmlTypeModifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitXmlTypeModifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlTypeModifierContext xmlTypeModifier() throws RecognitionException {
		XmlTypeModifierContext _localctx = new XmlTypeModifierContext(_ctx, getState());
		enterRule(_localctx, 796, RULE_xmlTypeModifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6911);
			match(XMLSCHEMA);
			setState(6912);
			xmlSchemaSpecification();
			setState(6915);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELEMENT) {
				{
				setState(6913);
				match(ELEMENT);
				setState(6914);
				xmlElementName();
				}
			}

			setState(6925);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6917);
				match(COMMA);
				setState(6918);
				xmlSchemaSpecification();
				setState(6921);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELEMENT) {
					{
					setState(6919);
					match(ELEMENT);
					setState(6920);
					xmlElementName();
					}
				}

				}
				}
				setState(6927);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlSchemaSpecificationContext extends ParserRuleContext {
		public TerminalNode ID() { return getToken(DB2zSQLParser.ID, 0); }
		public RegisteredXmlSchemaNameContext registeredXmlSchemaName() {
			return getRuleContext(RegisteredXmlSchemaNameContext.class,0);
		}
		public TerminalNode LOCATION() { return getToken(DB2zSQLParser.LOCATION, 0); }
		public SchemaLocationContext schemaLocation() {
			return getRuleContext(SchemaLocationContext.class,0);
		}
		public TerminalNode URL() { return getToken(DB2zSQLParser.URL, 0); }
		public TargetNamespaceContext targetNamespace() {
			return getRuleContext(TargetNamespaceContext.class,0);
		}
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode NAMESPACE() { return getToken(DB2zSQLParser.NAMESPACE, 0); }
		public XmlSchemaSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlSchemaSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterXmlSchemaSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitXmlSchemaSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitXmlSchemaSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlSchemaSpecificationContext xmlSchemaSpecification() throws RecognitionException {
		XmlSchemaSpecificationContext _localctx = new XmlSchemaSpecificationContext(_ctx, getState());
		enterRule(_localctx, 798, RULE_xmlSchemaSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6940);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ID:
				{
				{
				setState(6928);
				match(ID);
				setState(6929);
				registeredXmlSchemaName();
				}
				}
				break;
			case NO:
			case URL:
				{
				{
				setState(6934);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case URL:
					{
					{
					setState(6930);
					match(URL);
					setState(6931);
					targetNamespace();
					}
					}
					break;
				case NO:
					{
					{
					setState(6932);
					match(NO);
					setState(6933);
					match(NAMESPACE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6938);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCATION) {
					{
					setState(6936);
					match(LOCATION);
					setState(6937);
					schemaLocation();
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlElementNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public XmlElementNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlElementName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterXmlElementName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitXmlElementName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitXmlElementName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlElementNameContext xmlElementName() throws RecognitionException {
		XmlElementNameContext _localctx = new XmlElementNameContext(_ctx, getState());
		enterRule(_localctx, 800, RULE_xmlElementName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6942);
			identifier();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RegisteredXmlSchemaNameContext extends ParserRuleContext {
		public TerminalNode SYSXSR() { return getToken(DB2zSQLParser.SYSXSR, 0); }
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public TerminalNode SQLIDENTIFIER() { return getToken(DB2zSQLParser.SQLIDENTIFIER, 0); }
		public RegisteredXmlSchemaNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_registeredXmlSchemaName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRegisteredXmlSchemaName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRegisteredXmlSchemaName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRegisteredXmlSchemaName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RegisteredXmlSchemaNameContext registeredXmlSchemaName() throws RecognitionException {
		RegisteredXmlSchemaNameContext _localctx = new RegisteredXmlSchemaNameContext(_ctx, getState());
		enterRule(_localctx, 802, RULE_registeredXmlSchemaName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6944);
			match(SYSXSR);
			setState(6945);
			match(DOT);
			setState(6946);
			match(SQLIDENTIFIER);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TargetNamespaceContext extends ParserRuleContext {
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public TargetNamespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_targetNamespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTargetNamespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTargetNamespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTargetNamespace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TargetNamespaceContext targetNamespace() throws RecognitionException {
		TargetNamespaceContext _localctx = new TargetNamespaceContext(_ctx, getState());
		enterRule(_localctx, 804, RULE_targetNamespace);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6948);
			match(NONNUMERICLITERAL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SchemaLocationContext extends ParserRuleContext {
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public SchemaLocationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaLocation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSchemaLocation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSchemaLocation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSchemaLocation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SchemaLocationContext schemaLocation() throws RecognitionException {
		SchemaLocationContext _localctx = new SchemaLocationContext(_ctx, getState());
		enterRule(_localctx, 806, RULE_schemaLocation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6950);
			match(NONNUMERICLITERAL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentityAlterationContext extends ParserRuleContext {
		public TerminalNode RESTART() { return getToken(DB2zSQLParser.RESTART, 0); }
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public IncrementOptionContext incrementOption() {
			return getRuleContext(IncrementOptionContext.class,0);
		}
		public MinvalueOptionContext minvalueOption() {
			return getRuleContext(MinvalueOptionContext.class,0);
		}
		public MaxvalueOptionContext maxvalueOption() {
			return getRuleContext(MaxvalueOptionContext.class,0);
		}
		public CycleOptionContext cycleOption() {
			return getRuleContext(CycleOptionContext.class,0);
		}
		public CacheOptionContext cacheOption() {
			return getRuleContext(CacheOptionContext.class,0);
		}
		public OrderOptionContext orderOption() {
			return getRuleContext(OrderOptionContext.class,0);
		}
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public IdentityAlterationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identityAlteration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterIdentityAlteration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitIdentityAlteration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitIdentityAlteration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentityAlterationContext identityAlteration() throws RecognitionException {
		IdentityAlterationContext _localctx = new IdentityAlterationContext(_ctx, getState());
		enterRule(_localctx, 808, RULE_identityAlteration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6969);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,812,_ctx) ) {
			case 1:
				{
				{
				setState(6952);
				match(RESTART);
				setState(6955);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(6953);
					match(WITH);
					setState(6954);
					match(INTEGERLITERAL);
					}
				}

				}
				}
				break;
			case 2:
				{
				{
				setState(6957);
				match(SET);
				setState(6958);
				incrementOption();
				}
				}
				break;
			case 3:
				{
				{
				setState(6959);
				match(SET);
				setState(6960);
				minvalueOption();
				}
				}
				break;
			case 4:
				{
				{
				setState(6961);
				match(SET);
				setState(6962);
				maxvalueOption();
				}
				}
				break;
			case 5:
				{
				{
				setState(6963);
				match(SET);
				setState(6964);
				cycleOption();
				}
				}
				break;
			case 6:
				{
				{
				setState(6965);
				match(SET);
				setState(6966);
				cacheOption();
				}
				}
				break;
			case 7:
				{
				{
				setState(6967);
				match(SET);
				setState(6968);
				orderOption();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UniqueConstraintContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode UNIQUE() { return getToken(DB2zSQLParser.UNIQUE, 0); }
		public TerminalNode CONSTRAINT() { return getToken(DB2zSQLParser.CONSTRAINT, 0); }
		public ConstraintNameContext constraintName() {
			return getRuleContext(ConstraintNameContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public TerminalNode BUSINESS_TIME() { return getToken(DB2zSQLParser.BUSINESS_TIME, 0); }
		public TerminalNode WITHOUT() { return getToken(DB2zSQLParser.WITHOUT, 0); }
		public TerminalNode OVERLAPS() { return getToken(DB2zSQLParser.OVERLAPS, 0); }
		public TerminalNode PRIMARY() { return getToken(DB2zSQLParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(DB2zSQLParser.KEY, 0); }
		public UniqueConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uniqueConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterUniqueConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitUniqueConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitUniqueConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UniqueConstraintContext uniqueConstraint() throws RecognitionException {
		UniqueConstraintContext _localctx = new UniqueConstraintContext(_ctx, getState());
		enterRule(_localctx, 810, RULE_uniqueConstraint);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6973);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(6971);
				match(CONSTRAINT);
				setState(6972);
				constraintName();
				}
			}

			setState(6978);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PRIMARY:
				{
				{
				setState(6975);
				match(PRIMARY);
				setState(6976);
				match(KEY);
				}
				}
				break;
			case UNIQUE:
				{
				setState(6977);
				match(UNIQUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6980);
			match(LPAREN);
			setState(6981);
			columnName();
			setState(6986);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,815,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6982);
					match(COMMA);
					setState(6983);
					columnName();
					}
					} 
				}
				setState(6988);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,815,_ctx);
			}
			setState(6993);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(6989);
				match(COMMA);
				setState(6990);
				match(BUSINESS_TIME);
				setState(6991);
				match(WITHOUT);
				setState(6992);
				match(OVERLAPS);
				}
			}

			setState(6995);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferentialConstraintContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public ReferencesClauseContext referencesClause() {
			return getRuleContext(ReferencesClauseContext.class,0);
		}
		public List<TerminalNode> PERIOD() { return getTokens(DB2zSQLParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(DB2zSQLParser.PERIOD, i);
		}
		public List<TerminalNode> BUSINESS_TIME() { return getTokens(DB2zSQLParser.BUSINESS_TIME); }
		public TerminalNode BUSINESS_TIME(int i) {
			return getToken(DB2zSQLParser.BUSINESS_TIME, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public TerminalNode CONSTRAINT() { return getToken(DB2zSQLParser.CONSTRAINT, 0); }
		public ConstraintNameContext constraintName() {
			return getRuleContext(ConstraintNameContext.class,0);
		}
		public TerminalNode FOREIGN() { return getToken(DB2zSQLParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(DB2zSQLParser.KEY, 0); }
		public ReferentialConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referentialConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterReferentialConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitReferentialConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitReferentialConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReferentialConstraintContext referentialConstraint() throws RecognitionException {
		ReferentialConstraintContext _localctx = new ReferentialConstraintContext(_ctx, getState());
		enterRule(_localctx, 812, RULE_referentialConstraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7007);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CONSTRAINT:
				{
				{
				setState(6997);
				match(CONSTRAINT);
				setState(6998);
				constraintName();
				setState(6999);
				match(FOREIGN);
				setState(7000);
				match(KEY);
				}
				}
				break;
			case FOREIGN:
				{
				{
				setState(7002);
				match(FOREIGN);
				setState(7003);
				match(KEY);
				setState(7005);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & ((1L << (INSTEAD - 30)) | (1L << (NEW - 30)) | (1L << (NEW_TABLE - 30)) | (1L << (OLD_TABLE - 30)) | (1L << (REFERENCING - 30)) | (1L << (BASED - 30)) | (1L << (UPON - 30)) | (1L << (ADD - 30)) | (1L << (AFTER - 30)) | (1L << (ALL - 30)) | (1L << (ALLOCATE - 30)) | (1L << (ALLOW - 30)) | (1L << (ALTER - 30)) | (1L << (ALTERAND - 30)) | (1L << (ANY - 30)) | (1L << (ARRAY - 30)) | (1L << (ARRAY_EXISTS - 30)) | (1L << (AS - 30)) | (1L << (ASENSITIVE - 30)) | (1L << (ASSOCIATE - 30)) | (1L << (ASUTIME - 30)) | (1L << (AT - 30)) | (1L << (AUDIT - 30)) | (1L << (AUX - 30)) | (1L << (AUXILIARY - 30)) | (1L << (BEFORE - 30)) | (1L << (BEGIN - 30)) | (1L << (BETWEEN - 30)) | (1L << (BUFFERPOOL - 30)) | (1L << (BUFFERPOOLS - 30)) | (1L << (BY - 30)) | (1L << (CALL - 30)) | (1L << (CAPTURE - 30)) | (1L << (CASCADED - 30)) | (1L << (CASE - 30)) | (1L << (CAST - 30)) | (1L << (CCSID - 30)) | (1L << (CHAR - 30)) | (1L << (CHARACTER - 30)) | (1L << (CHECK - 30)) | (1L << (CLONE - 30)) | (1L << (CLOSE - 30)) | (1L << (CLUSTER - 30)) | (1L << (COLLECTION - 30)) | (1L << (COLLID - 30)) | (1L << (COLUMN - 30)) | (1L << (COMMENT - 30)) | (1L << (COMMIT - 30)) | (1L << (CONCAT - 30)) | (1L << (CONDITION - 30)) | (1L << (CONNECT - 30)) | (1L << (CONNECTION - 30)) | (1L << (CONSTRAINT - 30)) | (1L << (CONTAINS - 30)) | (1L << (CONTENT - 30)) | (1L << (CONTINUE - 30)) | (1L << (CREATE - 30)) | (1L << (CUBE - 30)) | (1L << (CURRENT - 30)) | (1L << (CURRENT_LC_CTYPE - 30)) | (1L << (CURRVAL - 30)) | (1L << (CURSOR - 30)) | (1L << (DATA - 30)) | (1L << (DATABASE - 30)))) != 0) || ((((_la - 94)) & ~0x3f) == 0 && ((1L << (_la - 94)) & ((1L << (DAY - 94)) | (1L << (DAYS - 94)) | (1L << (DBINFO - 94)) | (1L << (DECLARE - 94)) | (1L << (DEFAULT - 94)) | (1L << (DELETE - 94)) | (1L << (DESCRIPTOR - 94)) | (1L << (DETERMINISTIC - 94)) | (1L << (DISABLE - 94)) | (1L << (DISALLOW - 94)) | (1L << (DISTINCT - 94)) | (1L << (DO - 94)) | (1L << (DOCUMENT - 94)) | (1L << (DOUBLE - 94)) | (1L << (DROP - 94)) | (1L << (DSSIZE - 94)) | (1L << (DYNAMIC - 94)) | (1L << (EDITPROC - 94)) | (1L << (ELSE - 94)) | (1L << (ELSEIF - 94)) | (1L << (ENCODING - 94)) | (1L << (ENCRYPTION - 94)) | (1L << (END - 94)) | (1L << (END_EXEC - 94)) | (1L << (ENDING - 94)) | (1L << (ERASE - 94)) | (1L << (ESCAPE - 94)) | (1L << (EXCEPT - 94)) | (1L << (EXCEPTION - 94)) | (1L << (EXEC_SQL - 94)) | (1L << (EXECUTE - 94)) | (1L << (EXISTS - 94)) | (1L << (EXIT - 94)) | (1L << (EXPLAIN - 94)) | (1L << (EXTERNAL - 94)) | (1L << (FENCED - 94)) | (1L << (FETCH - 94)) | (1L << (FIELDPROC - 94)) | (1L << (FINAL - 94)) | (1L << (FIRST - 94)) | (1L << (FOR - 94)) | (1L << (FREE - 94)) | (1L << (FROM - 94)) | (1L << (FULL - 94)) | (1L << (FUNCTION - 94)) | (1L << (GENERATED - 94)) | (1L << (GET - 94)) | (1L << (GLOBAL - 94)) | (1L << (GO - 94)) | (1L << (GOTO - 94)) | (1L << (GRANT - 94)) | (1L << (GROUP - 94)) | (1L << (HANDLER - 94)) | (1L << (HAVING - 94)) | (1L << (HOLD - 94)) | (1L << (HOUR - 94)) | (1L << (HOURS - 94)) | (1L << (IF - 94)) | (1L << (IMMEDIATE - 94)) | (1L << (IN - 94)) | (1L << (INCLUSIVE - 94)) | (1L << (INDEX - 94)) | (1L << (INDEXBP - 94)) | (1L << (INHERIT - 94)))) != 0) || ((((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & ((1L << (INNER - 158)) | (1L << (INOUT - 158)) | (1L << (INSENSITIVE - 158)) | (1L << (INSERT - 158)) | (1L << (INTERSECT - 158)) | (1L << (INTO - 158)) | (1L << (IS - 158)) | (1L << (ISOBID - 158)) | (1L << (ITERATE - 158)) | (1L << (JAR - 158)) | (1L << (JOIN - 158)) | (1L << (KEEP - 158)) | (1L << (KEY - 158)) | (1L << (LABEL - 158)) | (1L << (LANGUAGE - 158)) | (1L << (LAST - 158)) | (1L << (LC_CTYPE - 158)) | (1L << (LEAVE - 158)) | (1L << (LEFT - 158)) | (1L << (LIKE - 158)) | (1L << (LIMIT - 158)) | (1L << (LOCAL - 158)) | (1L << (LOCALE - 158)) | (1L << (LOCATOR - 158)) | (1L << (LOCATORS - 158)) | (1L << (LOCK - 158)) | (1L << (LOCKMAX - 158)) | (1L << (LOCKSIZE - 158)) | (1L << (LONG - 158)) | (1L << (LOOP - 158)) | (1L << (MAINTAINED - 158)) | (1L << (MATERIALIZED - 158)) | (1L << (MICROSECOND - 158)) | (1L << (MICROSECONDS - 158)) | (1L << (MODIFIES - 158)) | (1L << (MONTH - 158)) | (1L << (MONTHS - 158)) | (1L << (NEXT - 158)) | (1L << (NEXTVAL - 158)) | (1L << (NO - 158)) | (1L << (NONE - 158)) | (1L << (NOT - 158)) | (1L << (NULL - 158)) | (1L << (NULLS - 158)) | (1L << (NUMPARTS - 158)) | (1L << (OBID - 158)) | (1L << (OF - 158)) | (1L << (OFFSET - 158)) | (1L << (OLD - 158)) | (1L << (ON - 158)) | (1L << (OPEN - 158)) | (1L << (OPTIMIZATION - 158)) | (1L << (OPTIMIZE - 158)) | (1L << (OR - 158)) | (1L << (ORDER - 158)) | (1L << (ORGANIZATION - 158)) | (1L << (OUT - 158)) | (1L << (OUTER - 158)) | (1L << (PACKAGE - 158)) | (1L << (PADDED - 158)) | (1L << (PARAMETER - 158)) | (1L << (PART - 158)) | (1L << (PARTITION - 158)))) != 0) || ((((_la - 222)) & ~0x3f) == 0 && ((1L << (_la - 222)) & ((1L << (PARTITIONED - 222)) | (1L << (PARTITIONING - 222)) | (1L << (PATH - 222)) | (1L << (PERIOD - 222)) | (1L << (PIECESIZE - 222)) | (1L << (PLAN - 222)) | (1L << (PRECISION - 222)) | (1L << (PREPARE - 222)) | (1L << (PREVVAL - 222)) | (1L << (PRIOR - 222)) | (1L << (PRIQTY - 222)) | (1L << (PRIVILEGES - 222)) | (1L << (PROCEDURE - 222)) | (1L << (PROGRAM - 222)) | (1L << (PSID - 222)) | (1L << (PUBLIC - 222)) | (1L << (QUERY - 222)) | (1L << (QUERYNO - 222)) | (1L << (READS - 222)) | (1L << (REFERENCES - 222)) | (1L << (REFRESH - 222)) | (1L << (RELEASE - 222)) | (1L << (RENAME - 222)) | (1L << (REPEAT - 222)) | (1L << (RESIGNAL - 222)) | (1L << (RESTRICT - 222)) | (1L << (RESULT - 222)) | (1L << (RESULT_SET_LOCATOR - 222)) | (1L << (RETURN - 222)) | (1L << (RETURNS - 222)) | (1L << (REVOKE - 222)) | (1L << (RIGHT - 222)) | (1L << (ROLE - 222)) | (1L << (ROLLBACK - 222)) | (1L << (ROLLUP - 222)) | (1L << (ROUND_CEILING - 222)) | (1L << (ROUND_DOWN - 222)) | (1L << (ROUND_FLOOR - 222)) | (1L << (ROUND_HALF_DOWN - 222)) | (1L << (ROUND_HALF_EVEN - 222)) | (1L << (ROUND_HALF_UP - 222)) | (1L << (ROUND_UP - 222)) | (1L << (ROW - 222)) | (1L << (ROWSET - 222)) | (1L << (RUN - 222)) | (1L << (SAVEPOINT - 222)) | (1L << (SCHEMA - 222)) | (1L << (SCRATCHPAD - 222)) | (1L << (SECOND - 222)) | (1L << (SECONDS - 222)) | (1L << (SECQTY - 222)) | (1L << (SECURITY - 222)) | (1L << (SELECT - 222)) | (1L << (SENSITIVE - 222)) | (1L << (SEQUENCE - 222)) | (1L << (SET - 222)) | (1L << (SIGNAL - 222)) | (1L << (SIMPLE - 222)) | (1L << (SOME - 222)) | (1L << (SOURCE - 222)) | (1L << (SPECIFIC - 222)) | (1L << (STANDARD - 222)) | (1L << (STATEMENT - 222)) | (1L << (STATIC - 222)))) != 0) || ((((_la - 286)) & ~0x3f) == 0 && ((1L << (_la - 286)) & ((1L << (STAY - 286)) | (1L << (STOGROUP - 286)) | (1L << (STORES - 286)) | (1L << (STYLE - 286)) | (1L << (SUMMARY - 286)) | (1L << (SYNONYM - 286)) | (1L << (SYSDATE - 286)) | (1L << (SYSTEM - 286)) | (1L << (SYSTIMESTAMP - 286)) | (1L << (TABLE - 286)) | (1L << (TABLESPACE - 286)) | (1L << (THEN - 286)) | (1L << (TO - 286)) | (1L << (TRIGGER - 286)) | (1L << (TRUNCATE - 286)) | (1L << (TYPE - 286)) | (1L << (UNDO - 286)) | (1L << (UNION - 286)) | (1L << (UNIQUE - 286)) | (1L << (UNTIL - 286)) | (1L << (UPDATE - 286)) | (1L << (USING - 286)) | (1L << (VALIDPROC - 286)) | (1L << (VALUE - 286)) | (1L << (VALUES - 286)) | (1L << (VARIABLE - 286)) | (1L << (VARIANT - 286)) | (1L << (VCAT - 286)) | (1L << (VERSIONING - 286)) | (1L << (VIEW - 286)) | (1L << (VOLATILE - 286)) | (1L << (VOLUMES - 286)) | (1L << (WHEN - 286)) | (1L << (WHENEVER - 286)) | (1L << (WHERE - 286)) | (1L << (WHILE - 286)) | (1L << (WITH - 286)) | (1L << (WLM - 286)) | (1L << (XMLCAST - 286)) | (1L << (XMLEXISTS - 286)) | (1L << (XMLNAMESPACES - 286)) | (1L << (YEAR - 286)) | (1L << (YEARS - 286)) | (1L << (ZONE - 286)) | (1L << (AND - 286)) | (1L << (ARRAY_AGG - 286)) | (1L << (ASC - 286)) | (1L << (AVG - 286)) | (1L << (BIT - 286)) | (1L << (CHANGE - 286)) | (1L << (CODEUNITS16 - 286)) | (1L << (CODEUNITS32 - 286)) | (1L << (CORR - 286)) | (1L << (CORRELATION - 286)) | (1L << (COUNT - 286)) | (1L << (COUNT_BIG - 286)) | (1L << (COVAR - 286)) | (1L << (COVARIANCE - 286)) | (1L << (COVARIANCE_SAMP - 286)) | (1L << (COVAR_POP - 286)) | (1L << (COVAR_SAMP - 286)) | (1L << (CS - 286)) | (1L << (CUME_DIST - 286)) | (1L << (DENSE_RANK - 286)))) != 0) || ((((_la - 350)) & ~0x3f) == 0 && ((1L << (_la - 350)) & ((1L << (DESC - 350)) | (1L << (EBCDIC - 350)) | (1L << (EXCLUSIVE - 350)) | (1L << (FIRST_VALUE - 350)) | (1L << (FOLLOWING - 350)) | (1L << (GROUPING - 350)) | (1L << (IGNORE - 350)) | (1L << (INDICATOR - 350)) | (1L << (INPUT - 350)) | (1L << (ISNULL - 350)) | (1L << (LAG - 350)) | (1L << (LARGE - 350)) | (1L << (LAST_VALUE - 350)) | (1L << (LEAD - 350)) | (1L << (LISTAGG - 350)) | (1L << (LOCKED - 350)) | (1L << (LOCKS - 350)) | (1L << (MEDIAN - 350)) | (1L << (MINUTES - 350)) | (1L << (MIXED - 350)) | (1L << (NOTNULL - 350)) | (1L << (NTH_VALUE - 350)) | (1L << (NTILE - 350)) | (1L << (NUMERIC - 350)) | (1L << (OBJECT - 350)) | (1L << (OCTETS - 350)) | (1L << (ONLY - 350)) | (1L << (OVER - 350)) | (1L << (PASSING - 350)) | (1L << (PERCENTILE_CONT - 350)) | (1L << (PERCENTILE_DISC - 350)) | (1L << (PERCENT_RANK - 350)) | (1L << (PRECEDING - 350)) | (1L << (PREVIOUS - 350)) | (1L << (RANGE - 350)) | (1L << (RANK - 350)) | (1L << (RATIO_TO_REPORT - 350)) | (1L << (READ - 350)) | (1L << (REF - 350)) | (1L << (REGR_AVGX - 350)) | (1L << (REGR_AVGY - 350)) | (1L << (REGR_COUNT - 350)) | (1L << (REGR_ICPT - 350)) | (1L << (REGR_INTERCEPT - 350)) | (1L << (REGR_R2 - 350)) | (1L << (REGR_SLOPE - 350)) | (1L << (REGR_SXX - 350)) | (1L << (REGR_SXY - 350)) | (1L << (REGR_SYY - 350)) | (1L << (RESPECT - 350)) | (1L << (ROW_NUMBER - 350)) | (1L << (ROWS - 350)) | (1L << (RR - 350)) | (1L << (RS - 350)) | (1L << (SBCS - 350)) | (1L << (SELECTIVITY - 350)) | (1L << (SETS - 350)) | (1L << (SHARE - 350)) | (1L << (SKIP_ - 350)) | (1L << (STDDEV - 350)) | (1L << (STDDEV_POP - 350)) | (1L << (STDDEV_SAMP - 350)) | (1L << (SUM - 350)) | (1L << (TOKEN - 350)))) != 0) || ((((_la - 414)) & ~0x3f) == 0 && ((1L << (_la - 414)) & ((1L << (UNBOUNDED - 414)) | (1L << (UNPACK - 414)) | (1L << (UR - 414)) | (1L << (USE - 414)) | (1L << (VAR - 414)) | (1L << (VARIANCE - 414)) | (1L << (VARIANCE_SAMP - 414)) | (1L << (VAR_POP - 414)) | (1L << (VAR_SAMP - 414)) | (1L << (VARYING - 414)) | (1L << (WITHOUT - 414)) | (1L << (XML - 414)) | (1L << (XMLAGG - 414)) | (1L << (COLUMNS - 414)) | (1L << (SQLID - 414)) | (1L << (ORDINALITY - 414)) | (1L << (SYSTEM_TIME - 414)) | (1L << (BUSINESS_TIME - 414)) | (1L << (MULTIPLIER - 414)) | (1L << (UNNEST - 414)) | (1L << (CROSS - 414)) | (1L << (CALLER - 414)) | (1L << (CLIENT - 414)) | (1L << (POSITIONING - 414)) | (1L << (SCROLL - 414)) | (1L << (ACTION - 414)) | (1L << (ASSEMBLE - 414)) | (1L << (C_ - 414)) | (1L << (CALLED - 414)) | (1L << (COBOL - 414)) | (1L << (DB2 - 414)) | (1L << (DEFINER - 414)) | (1L << (DISPATCH - 414)) | (1L << (ENVIRONMENT - 414)) | (1L << (FAILURE - 414)) | (1L << (FAILURES - 414)) | (1L << (JAVA - 414)) | (1L << (MAIN - 414)) | (1L << (NAME - 414)) | (1L << (OPTIONS - 414)) | (1L << (PARALLEL - 414)) | (1L << (PLI - 414)) | (1L << (REGISTERS - 414)) | (1L << (RESIDENT - 414)) | (1L << (SECURED - 414)) | (1L << (SPECIAL - 414)) | (1L << (SQL - 414)) | (1L << (STOP - 414)) | (1L << (SUB - 414)) | (1L << (YES - 414)) | (1L << (APPLICATION - 414)) | (1L << (CHANGED - 414)) | (1L << (COMPATIBILITY - 414)) | (1L << (COMPRESS - 414)) | (1L << (COPY - 414)) | (1L << (FREEPAGE - 414)) | (1L << (GBPCACHE - 414)) | (1L << (INCLUDE - 414)) | (1L << (MAXVALUE - 414)) | (1L << (MINVALUE - 414)) | (1L << (PCTFREE - 414)) | (1L << (REGENERATE - 414)) | (1L << (MASK - 414)) | (1L << (ENABLE - 414)))) != 0) || ((((_la - 478)) & ~0x3f) == 0 && ((1L << (_la - 478)) & ((1L << (PERMISSION - 478)) | (1L << (ATOMIC - 478)) | (1L << (SQLEXCEPTION - 478)) | (1L << (MERGE - 478)) | (1L << (MATCHED - 478)) | (1L << (SQLSTATE - 478)) | (1L << (MESSAGE_TEXT - 478)) | (1L << (OVERRIDING - 478)) | (1L << (PORTION - 478)) | (1L << (DB2SQL - 478)) | (1L << (DEBUG - 478)) | (1L << (GENERAL - 478)) | (1L << (MODE_ - 478)) | (1L << (REXX - 478)) | (1L << (CACHE - 478)) | (1L << (CYCLE - 478)) | (1L << (INCREMENT - 478)) | (1L << (RESTART - 478)) | (1L << (DATACLAS - 478)) | (1L << (MGMTCLAS - 478)) | (1L << (REMOVE - 478)) | (1L << (STORCLAS - 478)) | (1L << (ACCESS - 478)) | (1L << (ACTIVATE - 478)) | (1L << (ALWAYS - 478)) | (1L << (APPEND - 478)) | (1L << (ARCHIVE - 478)) | (1L << (BUSINESS - 478)) | (1L << (CASCADE - 478)) | (1L << (CHANGES - 478)) | (1L << (CONTROL - 478)) | (1L << (DEACTIVATE - 478)) | (1L << (DEFERRED - 478)) | (1L << (EACH - 478)) | (1L << (ENFORCED - 478)) | (1L << (EXTRA - 478)) | (1L << (FOREIGN - 478)) | (1L << (HIDDEN_ - 478)) | (1L << (HISTORY - 478)) | (1L << (ID - 478)) | (1L << (IDENTITY - 478)) | (1L << (IMPLICITLY - 478)) | (1L << (INITIALLY - 478)) | (1L << (INLINE - 478)) | (1L << (OPERATION - 478)) | (1L << (ORGANIZE - 478)) | (1L << (OVERLAPS - 478)) | (1L << (PACKAGE_NAME - 478)) | (1L << (PACKAGE_SCHEMA - 478)) | (1L << (PACKAGE_VERSION - 478)) | (1L << (PRIMARY - 478)) | (1L << (RESET - 478)) | (1L << (ROTATE - 478)) | (1L << (START - 478)) | (1L << (SYSIBM - 478)) | (1L << (TRANSACTION - 478)) | (1L << (XMLSCHEMA - 478)) | (1L << (ELEMENT - 478)) | (1L << (URL - 478)) | (1L << (NAMESPACE - 478)) | (1L << (LOCATION - 478)) | (1L << (SYSXSR - 478)) | (1L << (ALGORITHM - 478)) | (1L << (FIXEDLENGTH - 478)))) != 0) || ((((_la - 542)) & ~0x3f) == 0 && ((1L << (_la - 542)) & ((1L << (HUFFMAN - 542)) | (1L << (LOB - 542)) | (1L << (LOG - 542)) | (1L << (LOGGED - 542)) | (1L << (MAXPARTITIONS - 542)) | (1L << (MAXROWS - 542)) | (1L << (MEMBER - 542)) | (1L << (MOVE - 542)) | (1L << (PAGE - 542)) | (1L << (PAGENUM - 542)) | (1L << (PENDING - 542)) | (1L << (RELATIVE - 542)) | (1L << (SEGSIZE - 542)) | (1L << (TRACKMOD - 542)) | (1L << (ADDRESS - 542)) | (1L << (ATTRIBUTES - 542)) | (1L << (AUTHENTICATION - 542)) | (1L << (AUTHID - 542)) | (1L << (CONTEXT - 542)) | (1L << (JOBNAME - 542)) | (1L << (OWNER - 542)) | (1L << (PROFILE - 542)) | (1L << (QUALIFIER - 542)) | (1L << (SERVAUTH - 542)) | (1L << (TRUSTED - 542)) | (1L << (SECTION - 542)) | (1L << (ACTIVE - 542)) | (1L << (VERSION - 542)) | (1L << (ALIAS - 542)) | (1L << (WORK - 542)) | (1L << (WORKFILE - 542)) | (1L << (SYSDEFLT - 542)) | (1L << (NULTERM - 542)) | (1L << (STRUCTURE - 542)) | (1L << (GENERIC - 542)) | (1L << (TEMPORARY - 542)) | (1L << (DEFER - 542)) | (1L << (DEFINE - 542)) | (1L << (EXCLUDE - 542)) | (1L << (GENERATE - 542)) | (1L << (KEYS - 542)) | (1L << (XMLPATTERN - 542)) | (1L << (SIZE - 542)) | (1L << (EVERY - 542)) | (1L << (ABSOLUTE - 542)) | (1L << (ACCELERATOR - 542)) | (1L << (EXCLUDING - 542)) | (1L << (INCLUDING - 542)) | (1L << (DEFAULTS - 542)) | (1L << (MODIFIERS - 542)) | (1L << (OPTION - 542)) | (1L << (PRESERVE - 542)) | (1L << (BOTH - 542)) | (1L << (DESCRIBE - 542)) | (1L << (LABELS - 542)) | (1L << (NAMES - 542)) | (1L << (OUTPUT - 542)) | (1L << (EXCHANGE - 542)) | (1L << (STABILIZED - 542)) | (1L << (STMTCACHE - 542)) | (1L << (STMTID - 542)) | (1L << (STMTTOKEN - 542)) | (1L << (STARTING - 542)) | (1L << (CATALOG_NAME - 542)))) != 0) || ((((_la - 606)) & ~0x3f) == 0 && ((1L << (_la - 606)) & ((1L << (CONDITION_NUMBER - 606)) | (1L << (CURSOR_NAME - 606)) | (1L << (DB2_AUTHENTICATION_TYPE - 606)) | (1L << (DB2_AUTHORIZATION_ID - 606)) | (1L << (DB2_CONNECTION_STATE - 606)) | (1L << (DB2_CONNECTION_STATUS - 606)) | (1L << (DB2_ENCRYPTION_TYPE - 606)) | (1L << (DB2_ERROR_CODE1 - 606)) | (1L << (DB2_ERROR_CODE2 - 606)) | (1L << (DB2_ERROR_CODE3 - 606)) | (1L << (DB2_ERROR_CODE4 - 606)) | (1L << (DB2_GET_DIAGNOSTICS_DIAGNOSTICS - 606)) | (1L << (DB2_INTERNAL_ERROR_POINTER - 606)) | (1L << (DB2_LAST_ROW - 606)) | (1L << (DB2_LINE_NUMBER - 606)) | (1L << (DB2_MESSAGE_ID - 606)) | (1L << (DB2_MODULE_DETECTING_ERROR - 606)) | (1L << (DB2_NUMBER_PARAMETER_MARKERS - 606)) | (1L << (DB2_NUMBER_RESULT_SETS - 606)) | (1L << (DB2_NUMBER_ROWS - 606)) | (1L << (DB2_ORDINAL_TOKEN_ - 606)) | (1L << (DB2_PRODUCT_ID - 606)) | (1L << (DB2_REASON_CODE - 606)) | (1L << (DB2_RETURNED_SQLCODE - 606)) | (1L << (DB2_RETURN_STATUS - 606)) | (1L << (DB2_ROW_NUMBER - 606)) | (1L << (DB2_SERVER_CLASS_NAME - 606)) | (1L << (DB2_SQL_ATTR_CURSOR_HOLD - 606)) | (1L << (DB2_SQL_ATTR_CURSOR_ROWSET - 606)) | (1L << (DB2_SQL_ATTR_CURSOR_SCROLLABLE - 606)) | (1L << (DB2_SQL_ATTR_CURSOR_SENSITIVITY - 606)) | (1L << (DB2_SQL_ATTR_CURSOR_TYPE - 606)) | (1L << (DB2_SQLERRD1 - 606)) | (1L << (DB2_SQLERRD2 - 606)) | (1L << (DB2_SQLERRD3 - 606)) | (1L << (DB2_SQLERRD4 - 606)) | (1L << (DB2_SQLERRD5 - 606)) | (1L << (DB2_SQLERRD6 - 606)) | (1L << (DB2_SQLERRD_SET - 606)) | (1L << (DB2_SQL_NESTING_LEVEL - 606)) | (1L << (DB2_TOKEN_COUNT - 606)) | (1L << (DIAGNOSTICS - 606)) | (1L << (MORE_ - 606)) | (1L << (NUMBER - 606)) | (1L << (RETURNED_SQLSTATE - 606)) | (1L << (ROW_COUNT - 606)) | (1L << (SERVER_NAME - 606)) | (1L << (STACKED - 606)) | (1L << (CREATETAB - 606)) | (1L << (CREATETS - 606)) | (1L << (DBADM - 606)) | (1L << (DBCTRL - 606)) | (1L << (DBMAINT - 606)) | (1L << (DISPLAYDB - 606)) | (1L << (IMAGCOPY - 606)) | (1L << (LOAD - 606)) | (1L << (PACKADM - 606)) | (1L << (RECOVERDB - 606)) | (1L << (REORG - 606)) | (1L << (REPAIR - 606)) | (1L << (STARTDB - 606)) | (1L << (STATS - 606)) | (1L << (STOPDB - 606)))) != 0) || ((((_la - 670)) & ~0x3f) == 0 && ((1L << (_la - 670)) & ((1L << (BIND - 670)) | (1L << (ALTERIN - 670)) | (1L << (CREATEIN - 670)) | (1L << (DROPIN - 670)) | (1L << (USAGE - 670)) | (1L << (ACCESSCTRL - 670)) | (1L << (BINDADD - 670)) | (1L << (BINDAGENT - 670)) | (1L << (BSDS - 670)) | (1L << (CREATEALIAS - 670)) | (1L << (CREATEDBA - 670)) | (1L << (CREATEDBC - 670)) | (1L << (CREATE_SECURE_OBJECT - 670)) | (1L << (CREATESG - 670)) | (1L << (CREATETMTAB - 670)) | (1L << (DATAACCESS - 670)) | (1L << (DEBUGSESSION - 670)) | (1L << (DISPLAY - 670)) | (1L << (MONITOR1 - 670)) | (1L << (MONITOR2 - 670)) | (1L << (RECOVER - 670)) | (1L << (SQLADM - 670)) | (1L << (STOPALL - 670)) | (1L << (STOSPACE - 670)) | (1L << (SYSADM - 670)) | (1L << (SYSCTRL - 670)) | (1L << (SYSOPR - 670)) | (1L << (TRACE - 670)) | (1L << (UNLOAD - 670)) | (1L << (WRITE - 670)) | (1L << (ABS - 670)) | (1L << (ABSVAL - 670)) | (1L << (ACOS - 670)) | (1L << (ADD_DAYS - 670)) | (1L << (ADD_MONTHS - 670)) | (1L << (ARRAY_DELETE - 670)) | (1L << (ARRAY_FIRST - 670)) | (1L << (ARRAY_LAST - 670)) | (1L << (ARRAY_NEXT - 670)) | (1L << (ARRAY_PRIOR - 670)) | (1L << (ARRAY_TRIM - 670)) | (1L << (ASCII - 670)) | (1L << (ASCII_CHR - 670)) | (1L << (ASCIISTR - 670)) | (1L << (ASCII_STR - 670)) | (1L << (ASIN - 670)) | (1L << (ATAN - 670)) | (1L << (ATAN2 - 670)) | (1L << (ATANH - 670)) | (1L << (BIGINT - 670)) | (1L << (BINARY - 670)) | (1L << (BITAND - 670)) | (1L << (BITANDNOT - 670)) | (1L << (BITNOT - 670)) | (1L << (BITOR - 670)) | (1L << (BITXOR - 670)) | (1L << (BLOB - 670)) | (1L << (BTRIM - 670)) | (1L << (CARDINALITY - 670)) | (1L << (CCSID_ENCODING - 670)) | (1L << (CEIL - 670)) | (1L << (CEILING - 670)) | (1L << (CHAR9 - 670)) | (1L << (CHARACTER_LENGTH - 670)))) != 0) || ((((_la - 734)) & ~0x3f) == 0 && ((1L << (_la - 734)) & ((1L << (CHAR_LENGTH - 734)) | (1L << (CHR - 734)) | (1L << (CLOB - 734)) | (1L << (COALESCE - 734)) | (1L << (COLLATION_KEY - 734)) | (1L << (COMPARE_DECFLOAT - 734)) | (1L << (COS - 734)) | (1L << (COSH - 734)) | (1L << (DATE - 734)) | (1L << (DAYOFMONTH - 734)) | (1L << (DAYOFWEEK - 734)) | (1L << (DAYOFWEEK_ISO - 734)) | (1L << (DAYOFYEAR - 734)) | (1L << (DAYS_BETWEEN - 734)) | (1L << (DBCLOB - 734)) | (1L << (DEC - 734)) | (1L << (DECFLOAT - 734)) | (1L << (DECFLOAT_FORMAT - 734)) | (1L << (DECFLOAT_SORTKEY - 734)) | (1L << (DECIMAL - 734)) | (1L << (DECODE - 734)) | (1L << (DECRYPT_BINARY - 734)) | (1L << (DECRYPT_BIT - 734)) | (1L << (DECRYPT_CHAR - 734)) | (1L << (DECRYPT_DATAKEY_BIGINT - 734)) | (1L << (DECRYPT_DATAKEY_BIT - 734)) | (1L << (DECRYPT_DATAKEY_CLOB - 734)) | (1L << (DECRYPT_DATAKEY_DBCLOB - 734)) | (1L << (DECRYPT_DATAKEY_DECIMAL - 734)) | (1L << (DECRYPT_DATAKEY_INTEGER - 734)) | (1L << (DECRYPT_DATAKEY_VARCHAR - 734)) | (1L << (DECRYPT_DATAKEY_VARGRAPHIC - 734)) | (1L << (DECRYPT_DB - 734)) | (1L << (DEGREES - 734)) | (1L << (DIFFERENCE - 734)) | (1L << (DIGITS - 734)) | (1L << (DOUBLE_PRECISION - 734)) | (1L << (DSN_XMLVALIDATE - 734)) | (1L << (EBCDIC_CHR - 734)) | (1L << (EBCDIC_STR - 734)) | (1L << (ENCRYPT_DATAKEY - 734)) | (1L << (ENCRYPT_TDES - 734)) | (1L << (EXP - 734)) | (1L << (EXTRACT - 734)) | (1L << (FLOAT - 734)) | (1L << (FLOOR - 734)) | (1L << (GENERATE_UNIQUE - 734)) | (1L << (GENERATE_UNIQUE_BINARY - 734)) | (1L << (GETHINT - 734)) | (1L << (GETVARIABLE - 734)) | (1L << (GRAPHIC - 734)) | (1L << (GREATEST - 734)) | (1L << (HASH - 734)) | (1L << (HASH_CRC32 - 734)) | (1L << (HASH_MD5 - 734)) | (1L << (HASH_SHA1 - 734)) | (1L << (HASH_SHA256 - 734)) | (1L << (HEX - 734)) | (1L << (IDENTITY_VAL_LOCAL - 734)) | (1L << (IFNULL - 734)) | (1L << (INSTR - 734)) | (1L << (INT - 734)) | (1L << (INTEGER - 734)) | (1L << (JULIAN_DAY - 734)))) != 0) || ((((_la - 798)) & ~0x3f) == 0 && ((1L << (_la - 798)) & ((1L << (LAST_DAY - 798)) | (1L << (LCASE - 798)) | (1L << (LEAST - 798)) | (1L << (LENGTH - 798)) | (1L << (LN - 798)) | (1L << (LOCATE - 798)) | (1L << (LOCATE_IN_STRING - 798)) | (1L << (LOG10 - 798)) | (1L << (LOWER - 798)) | (1L << (LPAD - 798)) | (1L << (LTRIM - 798)) | (1L << (MAX - 798)) | (1L << (MAX_CARDINALITY - 798)) | (1L << (MIDNIGHT_SECONDS - 798)) | (1L << (MIN - 798)) | (1L << (MINUTE - 798)) | (1L << (MOD - 798)) | (1L << (MONTHS_BETWEEN - 798)) | (1L << (MQREAD - 798)) | (1L << (MQREADCLOB - 798)) | (1L << (MQRECEIVE - 798)) | (1L << (MQRECEIVECLOB - 798)) | (1L << (MQSEND - 798)) | (1L << (MULTIPLY_ALT - 798)) | (1L << (NEXT_DAY - 798)) | (1L << (NEXT_MONTH - 798)) | (1L << (NORMALIZE_DECFLOAT - 798)) | (1L << (NORMALIZE_STRING - 798)) | (1L << (NULLIF - 798)) | (1L << (NVL - 798)) | (1L << (OVERLAY - 798)) | (1L << (PACK - 798)) | (1L << (POSITION - 798)) | (1L << (POSSTR - 798)) | (1L << (POW - 798)) | (1L << (POWER - 798)) | (1L << (QUANTIZE - 798)) | (1L << (QUARTER - 798)) | (1L << (RADIANS - 798)) | (1L << (RAISE_ERROR - 798)) | (1L << (RAND - 798)) | (1L << (RANDOM - 798)) | (1L << (REAL - 798)) | (1L << (REGEXP_COUNT - 798)) | (1L << (REGEXP_INSTR - 798)) | (1L << (REGEXP_LIKE - 798)) | (1L << (REGEXP_REPLACE - 798)) | (1L << (REGEXP_SUBSTR - 798)) | (1L << (REPLACE - 798)) | (1L << (RID - 798)) | (1L << (ROUND - 798)) | (1L << (ROUND_TIMESTAMP - 798)) | (1L << (ROWID - 798)) | (1L << (RPAD - 798)) | (1L << (RTRIM - 798)) | (1L << (SCORE - 798)) | (1L << (SIGN - 798)) | (1L << (SIN - 798)) | (1L << (SINH - 798)) | (1L << (SMALLINT - 798)) | (1L << (SOAPHTTPC - 798)) | (1L << (SOAPHTTPNC - 798)) | (1L << (SOAPHTTPNV - 798)) | (1L << (SOAPHTTPV - 798)))) != 0) || ((((_la - 862)) & ~0x3f) == 0 && ((1L << (_la - 862)) & ((1L << (SOUNDEX - 862)) | (1L << (SPACE - 862)) | (1L << (SQRT - 862)) | (1L << (STRIP - 862)) | (1L << (STRLEFT - 862)) | (1L << (STRPOS - 862)) | (1L << (STRRIGHT - 862)) | (1L << (SUBSTR - 862)) | (1L << (SUBSTRING - 862)) | (1L << (TAN - 862)) | (1L << (TANH - 862)) | (1L << (TIME - 862)) | (1L << (TIMESTAMP - 862)) | (1L << (TIMESTAMPADD - 862)) | (1L << (TIMESTAMPDIFF - 862)) | (1L << (TIMESTAMP_FORMAT - 862)) | (1L << (TIMESTAMP_ISO - 862)) | (1L << (TIMESTAMP_TZ - 862)) | (1L << (TO_CHAR - 862)) | (1L << (TO_CLOB - 862)) | (1L << (TO_DATE - 862)) | (1L << (TO_NUMBER - 862)) | (1L << (TOTALORDER - 862)) | (1L << (TO_TIMESTAMP - 862)) | (1L << (TRANSLATE - 862)) | (1L << (TRIM - 862)) | (1L << (TRIM_ARRAY - 862)) | (1L << (TRUNC - 862)) | (1L << (TRUNC_TIMESTAMP - 862)) | (1L << (UCASE - 862)) | (1L << (UNICODE - 862)) | (1L << (UNICODE_STR - 862)) | (1L << (UNISTR - 862)) | (1L << (UPPER - 862)) | (1L << (VARBINARY - 862)) | (1L << (VARCHAR - 862)) | (1L << (VARCHAR9 - 862)) | (1L << (VARCHAR_BIT_FORMAT - 862)) | (1L << (VARCHAR_FORMAT - 862)) | (1L << (VARGRAPHIC - 862)) | (1L << (VERIFY_GROUP_FOR_USER - 862)) | (1L << (VERIFY_ROLE_FOR_USER - 862)) | (1L << (VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER - 862)) | (1L << (WEEK - 862)) | (1L << (WEEK_ISO - 862)) | (1L << (WRAP - 862)) | (1L << (XMLATTRIBUTES - 862)) | (1L << (XMLCOMMENT - 862)) | (1L << (XMLCONCAT - 862)) | (1L << (XMLDOCUMENT - 862)) | (1L << (XMLELEMENT - 862)) | (1L << (XMLFOREST - 862)) | (1L << (XMLMODIFY - 862)) | (1L << (XMLPARSE - 862)) | (1L << (XMLPI - 862)) | (1L << (XMLQUERY - 862)) | (1L << (XMLSERIALIZE - 862)) | (1L << (XMLTEXT - 862)) | (1L << (XMLXSROBJECTID - 862)) | (1L << (XSLTRANSFORM - 862)) | (1L << (CURRENT_ACCELERATOR - 862)) | (1L << (CURRENT_APPLICATION_COMPATIBILITY - 862)) | (1L << (CURRENT_APPLICATION_ENCODING_SCHEME - 862)) | (1L << (CURRENT_CLIENT_ACCTNG - 862)))) != 0) || ((((_la - 926)) & ~0x3f) == 0 && ((1L << (_la - 926)) & ((1L << (CURRENT_CLIENT_APPLNAME - 926)) | (1L << (CURRENT_CLIENT_CORR_TOKEN - 926)) | (1L << (CURRENT_CLIENT_USERID - 926)) | (1L << (CURRENT_CLIENT_WRKSTNNAME - 926)) | (1L << (CURRENT_DATE - 926)) | (1L << (CURRENT_DEBUG_MODE - 926)) | (1L << (CURRENT_DECFLOAT_ROUNDING_MODE - 926)) | (1L << (CURRENT_DEGREE - 926)) | (1L << (CURRENT_EXPLAIN_MODE - 926)) | (1L << (CURRENT_GET_ACCEL_ARCHIVE - 926)) | (1L << (CURRENT_LOCALE_LC_CTYPE - 926)) | (1L << (CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION - 926)) | (1L << (CURRENT_MEMBER - 926)) | (1L << (CURRENT_OPTIMIZATION_HINT - 926)) | (1L << (CURRENT_PACKAGE_PATH - 926)) | (1L << (CURRENT_PACKAGESET - 926)) | (1L << (CURRENT_PATH - 926)) | (1L << (CURRENT_PRECISION - 926)) | (1L << (CURRENT_QUERY_ACCELERATION - 926)) | (1L << (CURRENT_QUERY_ACCELERATION_WAITFORDATA - 926)) | (1L << (CURRENT_REFRESH_AGE - 926)) | (1L << (CURRENT_ROUTINE_VERSION - 926)) | (1L << (CURRENT_RULES - 926)) | (1L << (CURRENT_SCHEMA - 926)) | (1L << (CURRENT_SERVER - 926)) | (1L << (CURRENT_SQLID - 926)) | (1L << (CURRENT_TEMPORAL_BUSINESS_TIME - 926)) | (1L << (CURRENT_TEMPORAL_SYSTEM_TIME - 926)) | (1L << (CURRENT_TIME - 926)) | (1L << (CURRENT_TIMESTAMP - 926)) | (1L << (CURRENT_TIME_ZONE - 926)) | (1L << (ENCRYPTION_PASSWORD - 926)) | (1L << (SESSION_TIME_ZONE - 926)) | (1L << (SESSION_USER - 926)) | (1L << (USER - 926)) | (1L << (ADMIN_TASK_LIST - 926)) | (1L << (ADMIN_TASK_OUTPUT - 926)) | (1L << (ADMIN_TASK_STATUS - 926)) | (1L << (BLOCKING_THREADS - 926)) | (1L << (MQREADALL - 926)) | (1L << (MQREADALLCLOB - 926)) | (1L << (MQRECEIVEALL - 926)) | (1L << (MQRECEIVEALLCLOB - 926)) | (1L << (XMLTABLE - 926)) | (1L << (SQLIDENTIFIER - 926)))) != 0)) {
					{
					setState(7004);
					constraintName();
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(7009);
			match(LPAREN);
			setState(7010);
			columnName();
			setState(7013);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(7011);
				match(PERIOD);
				setState(7012);
				match(BUSINESS_TIME);
				}
			}

			setState(7023);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7015);
				match(COMMA);
				setState(7016);
				columnName();
				setState(7019);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(7017);
					match(PERIOD);
					setState(7018);
					match(BUSINESS_TIME);
					}
				}

				}
				}
				setState(7025);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7026);
			match(RPAREN);
			setState(7027);
			referencesClause();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferencesClauseContext extends ParserRuleContext {
		public TerminalNode REFERENCES() { return getToken(DB2zSQLParser.REFERENCES, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public TerminalNode DELETE() { return getToken(DB2zSQLParser.DELETE, 0); }
		public TerminalNode ENFORCED() { return getToken(DB2zSQLParser.ENFORCED, 0); }
		public TerminalNode ENABLE() { return getToken(DB2zSQLParser.ENABLE, 0); }
		public TerminalNode QUERY() { return getToken(DB2zSQLParser.QUERY, 0); }
		public TerminalNode OPTIMIZATION() { return getToken(DB2zSQLParser.OPTIMIZATION, 0); }
		public TerminalNode RESTRICT() { return getToken(DB2zSQLParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(DB2zSQLParser.CASCADE, 0); }
		public List<TerminalNode> PERIOD() { return getTokens(DB2zSQLParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(DB2zSQLParser.PERIOD, i);
		}
		public List<TerminalNode> BUSINESS_TIME() { return getTokens(DB2zSQLParser.BUSINESS_TIME); }
		public TerminalNode BUSINESS_TIME(int i) {
			return getToken(DB2zSQLParser.BUSINESS_TIME, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(DB2zSQLParser.ACTION, 0); }
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public ReferencesClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referencesClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterReferencesClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitReferencesClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitReferencesClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReferencesClauseContext referencesClause() throws RecognitionException {
		ReferencesClauseContext _localctx = new ReferencesClauseContext(_ctx, getState());
		enterRule(_localctx, 814, RULE_referencesClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7029);
			match(REFERENCES);
			setState(7030);
			tableName();
			setState(7050);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LPAREN) {
				{
				setState(7031);
				match(LPAREN);
				setState(7032);
				columnName();
				setState(7035);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(7033);
					match(PERIOD);
					setState(7034);
					match(BUSINESS_TIME);
					}
				}

				setState(7045);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7037);
					match(COMMA);
					setState(7038);
					columnName();
					setState(7041);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==PERIOD) {
						{
						setState(7039);
						match(PERIOD);
						setState(7040);
						match(BUSINESS_TIME);
						}
					}

					}
					}
					setState(7047);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(7048);
				match(RPAREN);
				}
			}

			setState(7062);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(7052);
				match(ON);
				setState(7053);
				match(DELETE);
				setState(7060);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case RESTRICT:
					{
					setState(7054);
					match(RESTRICT);
					}
					break;
				case NO:
					{
					{
					setState(7055);
					match(NO);
					setState(7056);
					match(ACTION);
					}
					}
					break;
				case CASCADE:
					{
					setState(7057);
					match(CASCADE);
					}
					break;
				case SET:
					{
					{
					setState(7058);
					match(SET);
					setState(7059);
					match(NULL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(7068);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,829,_ctx) ) {
			case 1:
				{
				setState(7065);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(7064);
					match(NOT);
					}
				}

				setState(7067);
				match(ENFORCED);
				}
				break;
			}
			setState(7073);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,830,_ctx) ) {
			case 1:
				{
				setState(7070);
				match(ENABLE);
				setState(7071);
				match(QUERY);
				setState(7072);
				match(OPTIMIZATION);
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckConstraintContext extends ParserRuleContext {
		public TerminalNode CHECK() { return getToken(DB2zSQLParser.CHECK, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public CheckConditionContext checkCondition() {
			return getRuleContext(CheckConditionContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode CONSTRAINT() { return getToken(DB2zSQLParser.CONSTRAINT, 0); }
		public ConstraintNameContext constraintName() {
			return getRuleContext(ConstraintNameContext.class,0);
		}
		public CheckConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCheckConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCheckConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCheckConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckConstraintContext checkConstraint() throws RecognitionException {
		CheckConstraintContext _localctx = new CheckConstraintContext(_ctx, getState());
		enterRule(_localctx, 816, RULE_checkConstraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7077);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(7075);
				match(CONSTRAINT);
				setState(7076);
				constraintName();
				}
			}

			setState(7079);
			match(CHECK);
			setState(7080);
			match(LPAREN);
			setState(7081);
			checkCondition();
			setState(7082);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitioningClauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(DB2zSQLParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public List<PartitionExpressionContext> partitionExpression() {
			return getRuleContexts(PartitionExpressionContext.class);
		}
		public PartitionExpressionContext partitionExpression(int i) {
			return getRuleContext(PartitionExpressionContext.class,i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public List<PartitioningClauseElementContext> partitioningClauseElement() {
			return getRuleContexts(PartitioningClauseElementContext.class);
		}
		public PartitioningClauseElementContext partitioningClauseElement(int i) {
			return getRuleContext(PartitioningClauseElementContext.class,i);
		}
		public TerminalNode SIZE() { return getToken(DB2zSQLParser.SIZE, 0); }
		public TerminalNode RANGE() { return getToken(DB2zSQLParser.RANGE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public TerminalNode EVERY() { return getToken(DB2zSQLParser.EVERY, 0); }
		public TerminalNode SQLIDENTIFIER() { return getToken(DB2zSQLParser.SQLIDENTIFIER, 0); }
		public PartitioningClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitioningClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPartitioningClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPartitioningClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPartitioningClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitioningClauseContext partitioningClause() throws RecognitionException {
		PartitioningClauseContext _localctx = new PartitioningClauseContext(_ctx, getState());
		enterRule(_localctx, 818, RULE_partitioningClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7084);
			match(PARTITION);
			setState(7085);
			match(BY);
			setState(7115);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LPAREN:
			case RANGE:
				{
				{
				setState(7087);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RANGE) {
					{
					setState(7086);
					match(RANGE);
					}
				}

				setState(7089);
				match(LPAREN);
				setState(7090);
				partitionExpression();
				setState(7095);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7091);
					match(COMMA);
					setState(7092);
					partitionExpression();
					}
					}
					setState(7097);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(7098);
				match(RPAREN);
				setState(7099);
				match(LPAREN);
				setState(7100);
				partitioningClauseElement();
				setState(7105);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7101);
					match(COMMA);
					setState(7102);
					partitioningClauseElement();
					}
					}
					setState(7107);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(7108);
				match(RPAREN);
				}
				}
				break;
			case SIZE:
				{
				{
				setState(7110);
				match(SIZE);
				setState(7113);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EVERY) {
					{
					setState(7111);
					match(EVERY);
					setState(7112);
					match(SQLIDENTIFIER);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionExpressionContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TerminalNode ASC() { return getToken(DB2zSQLParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(DB2zSQLParser.DESC, 0); }
		public TerminalNode NULLS() { return getToken(DB2zSQLParser.NULLS, 0); }
		public TerminalNode LAST() { return getToken(DB2zSQLParser.LAST, 0); }
		public PartitionExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPartitionExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPartitionExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPartitionExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionExpressionContext partitionExpression() throws RecognitionException {
		PartitionExpressionContext _localctx = new PartitionExpressionContext(_ctx, getState());
		enterRule(_localctx, 820, RULE_partitionExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7117);
			columnName();
			setState(7120);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NULLS) {
				{
				setState(7118);
				match(NULLS);
				setState(7119);
				match(LAST);
				}
			}

			setState(7122);
			_la = _input.LA(1);
			if ( !(_la==ASC || _la==DESC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionLimitKeyContext extends ParserRuleContext {
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode MAXVALUE() { return getToken(DB2zSQLParser.MAXVALUE, 0); }
		public TerminalNode MINVALUE() { return getToken(DB2zSQLParser.MINVALUE, 0); }
		public PartitionLimitKeyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionLimitKey; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPartitionLimitKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPartitionLimitKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPartitionLimitKey(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionLimitKeyContext partitionLimitKey() throws RecognitionException {
		PartitionLimitKeyContext _localctx = new PartitionLimitKeyContext(_ctx, getState());
		enterRule(_localctx, 822, RULE_partitionLimitKey);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7124);
			_la = _input.LA(1);
			if ( !(_la==INTEGERLITERAL || _la==MAXVALUE || _la==MINVALUE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitioningPhraseContext extends ParserRuleContext {
		public TerminalNode ENDING() { return getToken(DB2zSQLParser.ENDING, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<PartitionLimitKeyContext> partitionLimitKey() {
			return getRuleContexts(PartitionLimitKeyContext.class);
		}
		public PartitionLimitKeyContext partitionLimitKey(int i) {
			return getRuleContext(PartitionLimitKeyContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode AT() { return getToken(DB2zSQLParser.AT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public List<PartitionHashSpaceContext> partitionHashSpace() {
			return getRuleContexts(PartitionHashSpaceContext.class);
		}
		public PartitionHashSpaceContext partitionHashSpace(int i) {
			return getRuleContext(PartitionHashSpaceContext.class,i);
		}
		public TerminalNode INCLUSIVE() { return getToken(DB2zSQLParser.INCLUSIVE, 0); }
		public PartitioningPhraseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitioningPhrase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPartitioningPhrase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPartitioningPhrase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPartitioningPhrase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitioningPhraseContext partitioningPhrase() throws RecognitionException {
		PartitioningPhraseContext _localctx = new PartitioningPhraseContext(_ctx, getState());
		enterRule(_localctx, 824, RULE_partitioningPhrase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7126);
			match(ENDING);
			setState(7128);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AT) {
				{
				setState(7127);
				match(AT);
				}
			}

			setState(7130);
			match(LPAREN);
			setState(7131);
			partitionLimitKey();
			setState(7136);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7132);
				match(COMMA);
				setState(7133);
				partitionLimitKey();
				}
				}
				setState(7138);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7139);
			match(RPAREN);
			setState(7141);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,840,_ctx) ) {
			case 1:
				{
				setState(7140);
				partitionHashSpace();
				}
				break;
			}
			setState(7144);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INCLUSIVE) {
				{
				setState(7143);
				match(INCLUSIVE);
				}
			}

			setState(7147);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HASH) {
				{
				setState(7146);
				partitionHashSpace();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionHashSpaceContext extends ParserRuleContext {
		public TerminalNode HASH() { return getToken(DB2zSQLParser.HASH, 0); }
		public TerminalNode SPACE() { return getToken(DB2zSQLParser.SPACE, 0); }
		public TerminalNode SQLIDENTIFIER() { return getToken(DB2zSQLParser.SQLIDENTIFIER, 0); }
		public PartitionHashSpaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionHashSpace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPartitionHashSpace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPartitionHashSpace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPartitionHashSpace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionHashSpaceContext partitionHashSpace() throws RecognitionException {
		PartitionHashSpaceContext _localctx = new PartitionHashSpaceContext(_ctx, getState());
		enterRule(_localctx, 826, RULE_partitionHashSpace);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7149);
			match(HASH);
			setState(7150);
			match(SPACE);
			setState(7151);
			match(SQLIDENTIFIER);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterHashOrganizationContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(DB2zSQLParser.ADD, 0); }
		public TerminalNode ORGANIZE() { return getToken(DB2zSQLParser.ORGANIZE, 0); }
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public List<TerminalNode> HASH() { return getTokens(DB2zSQLParser.HASH); }
		public TerminalNode HASH(int i) {
			return getToken(DB2zSQLParser.HASH, i);
		}
		public TerminalNode UNIQUE() { return getToken(DB2zSQLParser.UNIQUE, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode SPACE() { return getToken(DB2zSQLParser.SPACE, 0); }
		public TerminalNode SQLIDENTIFIER() { return getToken(DB2zSQLParser.SQLIDENTIFIER, 0); }
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode ORGANIZATION() { return getToken(DB2zSQLParser.ORGANIZATION, 0); }
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public AlterHashOrganizationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterHashOrganization; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterHashOrganization(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterHashOrganization(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterHashOrganization(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterHashOrganizationContext alterHashOrganization() throws RecognitionException {
		AlterHashOrganizationContext _localctx = new AlterHashOrganizationContext(_ctx, getState());
		enterRule(_localctx, 828, RULE_alterHashOrganization);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7178);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
				{
				{
				setState(7153);
				match(ADD);
				setState(7154);
				match(ORGANIZE);
				setState(7155);
				match(BY);
				setState(7156);
				match(HASH);
				setState(7157);
				match(UNIQUE);
				setState(7158);
				match(LPAREN);
				setState(7159);
				columnName();
				setState(7164);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7160);
					match(COMMA);
					setState(7161);
					columnName();
					}
					}
					setState(7166);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(7167);
				match(RPAREN);
				setState(7168);
				match(HASH);
				setState(7169);
				match(SPACE);
				setState(7170);
				match(SQLIDENTIFIER);
				}
				}
				break;
			case ALTER:
				{
				{
				setState(7172);
				match(ALTER);
				setState(7173);
				match(ORGANIZATION);
				setState(7174);
				match(SET);
				setState(7175);
				match(HASH);
				setState(7176);
				match(SPACE);
				setState(7177);
				match(SQLIDENTIFIER);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitioningClauseElementContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(DB2zSQLParser.PARTITION, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public PartitioningPhraseContext partitioningPhrase() {
			return getRuleContext(PartitioningPhraseContext.class,0);
		}
		public PartitioningClauseElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitioningClauseElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPartitioningClauseElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPartitioningClauseElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPartitioningClauseElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitioningClauseElementContext partitioningClauseElement() throws RecognitionException {
		PartitioningClauseElementContext _localctx = new PartitioningClauseElementContext(_ctx, getState());
		enterRule(_localctx, 830, RULE_partitioningClauseElement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7180);
			match(PARTITION);
			setState(7181);
			match(INTEGERLITERAL);
			setState(7182);
			partitioningPhrase();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionClauseContext extends ParserRuleContext {
		public PartitioningPhraseContext partitioningPhrase() {
			return getRuleContext(PartitioningPhraseContext.class,0);
		}
		public PartitionHashSpaceContext partitionHashSpace() {
			return getRuleContext(PartitionHashSpaceContext.class,0);
		}
		public PartitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPartitionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPartitionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPartitionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionClauseContext partitionClause() throws RecognitionException {
		PartitionClauseContext _localctx = new PartitionClauseContext(_ctx, getState());
		enterRule(_localctx, 832, RULE_partitionClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7186);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENDING:
				{
				setState(7184);
				partitioningPhrase();
				}
				break;
			case HASH:
				{
				setState(7185);
				partitionHashSpace();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RotatePartitionClauseContext extends ParserRuleContext {
		public PartitioningPhraseContext partitioningPhrase() {
			return getRuleContext(PartitioningPhraseContext.class,0);
		}
		public TerminalNode RESET() { return getToken(DB2zSQLParser.RESET, 0); }
		public RotatePartitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rotatePartitionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRotatePartitionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRotatePartitionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRotatePartitionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RotatePartitionClauseContext rotatePartitionClause() throws RecognitionException {
		RotatePartitionClauseContext _localctx = new RotatePartitionClauseContext(_ctx, getState());
		enterRule(_localctx, 834, RULE_rotatePartitionClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7188);
			partitioningPhrase();
			setState(7189);
			match(RESET);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExtraRowOptionContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public TerminalNode DELETE() { return getToken(DB2zSQLParser.DELETE, 0); }
		public TerminalNode ADD() { return getToken(DB2zSQLParser.ADD, 0); }
		public TerminalNode EXTRA() { return getToken(DB2zSQLParser.EXTRA, 0); }
		public TerminalNode ROW() { return getToken(DB2zSQLParser.ROW, 0); }
		public ExtraRowOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extraRowOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterExtraRowOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitExtraRowOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitExtraRowOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExtraRowOptionContext extraRowOption() throws RecognitionException {
		ExtraRowOptionContext _localctx = new ExtraRowOptionContext(_ctx, getState());
		enterRule(_localctx, 836, RULE_extraRowOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7191);
			match(ON);
			setState(7192);
			match(DELETE);
			setState(7193);
			match(ADD);
			setState(7194);
			match(EXTRA);
			setState(7195);
			match(ROW);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MaterializedQueryDefinitionContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public FullSelectContext fullSelect() {
			return getRuleContext(FullSelectContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public RefreshableTableOptionsContext refreshableTableOptions() {
			return getRuleContext(RefreshableTableOptionsContext.class,0);
		}
		public MaterializedQueryDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_materializedQueryDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterMaterializedQueryDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitMaterializedQueryDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitMaterializedQueryDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MaterializedQueryDefinitionContext materializedQueryDefinition() throws RecognitionException {
		MaterializedQueryDefinitionContext _localctx = new MaterializedQueryDefinitionContext(_ctx, getState());
		enterRule(_localctx, 838, RULE_materializedQueryDefinition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7197);
			match(LPAREN);
			setState(7198);
			fullSelect();
			setState(7199);
			match(RPAREN);
			setState(7200);
			refreshableTableOptions();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MaterializedQueryAlterationContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public List<RefreshableTableOptionsListContext> refreshableTableOptionsList() {
			return getRuleContexts(RefreshableTableOptionsListContext.class);
		}
		public RefreshableTableOptionsListContext refreshableTableOptionsList(int i) {
			return getRuleContext(RefreshableTableOptionsListContext.class,i);
		}
		public MaterializedQueryAlterationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_materializedQueryAlteration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterMaterializedQueryAlteration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitMaterializedQueryAlteration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitMaterializedQueryAlteration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MaterializedQueryAlterationContext materializedQueryAlteration() throws RecognitionException {
		MaterializedQueryAlterationContext _localctx = new MaterializedQueryAlterationContext(_ctx, getState());
		enterRule(_localctx, 840, RULE_materializedQueryAlteration);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7202);
			match(SET);
			setState(7204); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(7203);
					refreshableTableOptionsList();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(7206); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,846,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RefreshableTableOptionsContext extends ParserRuleContext {
		public DataInitiallyDeferredPhraseContext dataInitiallyDeferredPhrase() {
			return getRuleContext(DataInitiallyDeferredPhraseContext.class,0);
		}
		public RefreshDeferredPhraseContext refreshDeferredPhrase() {
			return getRuleContext(RefreshDeferredPhraseContext.class,0);
		}
		public List<RefreshableTableOptionsListContext> refreshableTableOptionsList() {
			return getRuleContexts(RefreshableTableOptionsListContext.class);
		}
		public RefreshableTableOptionsListContext refreshableTableOptionsList(int i) {
			return getRuleContext(RefreshableTableOptionsListContext.class,i);
		}
		public RefreshableTableOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_refreshableTableOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRefreshableTableOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRefreshableTableOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRefreshableTableOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RefreshableTableOptionsContext refreshableTableOptions() throws RecognitionException {
		RefreshableTableOptionsContext _localctx = new RefreshableTableOptionsContext(_ctx, getState());
		enterRule(_localctx, 842, RULE_refreshableTableOptions);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7208);
			dataInitiallyDeferredPhrase();
			setState(7209);
			refreshDeferredPhrase();
			setState(7213);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,847,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(7210);
					refreshableTableOptionsList();
					}
					} 
				}
				setState(7215);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,847,_ctx);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataInitiallyDeferredPhraseContext extends ParserRuleContext {
		public TerminalNode DATA() { return getToken(DB2zSQLParser.DATA, 0); }
		public TerminalNode INITIALLY() { return getToken(DB2zSQLParser.INITIALLY, 0); }
		public TerminalNode DEFERRED() { return getToken(DB2zSQLParser.DEFERRED, 0); }
		public DataInitiallyDeferredPhraseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataInitiallyDeferredPhrase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDataInitiallyDeferredPhrase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDataInitiallyDeferredPhrase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDataInitiallyDeferredPhrase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataInitiallyDeferredPhraseContext dataInitiallyDeferredPhrase() throws RecognitionException {
		DataInitiallyDeferredPhraseContext _localctx = new DataInitiallyDeferredPhraseContext(_ctx, getState());
		enterRule(_localctx, 844, RULE_dataInitiallyDeferredPhrase);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7216);
			match(DATA);
			setState(7217);
			match(INITIALLY);
			setState(7218);
			match(DEFERRED);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RefreshDeferredPhraseContext extends ParserRuleContext {
		public TerminalNode REFRESH() { return getToken(DB2zSQLParser.REFRESH, 0); }
		public TerminalNode DEFERRED() { return getToken(DB2zSQLParser.DEFERRED, 0); }
		public RefreshDeferredPhraseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_refreshDeferredPhrase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRefreshDeferredPhrase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRefreshDeferredPhrase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRefreshDeferredPhrase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RefreshDeferredPhraseContext refreshDeferredPhrase() throws RecognitionException {
		RefreshDeferredPhraseContext _localctx = new RefreshDeferredPhraseContext(_ctx, getState());
		enterRule(_localctx, 846, RULE_refreshDeferredPhrase);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7220);
			match(REFRESH);
			setState(7221);
			match(DEFERRED);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RefreshableTableOptionsListContext extends ParserRuleContext {
		public TerminalNode MAINTAINED() { return getToken(DB2zSQLParser.MAINTAINED, 0); }
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public EnableDisableOptionContext enableDisableOption() {
			return getRuleContext(EnableDisableOptionContext.class,0);
		}
		public TerminalNode QUERY() { return getToken(DB2zSQLParser.QUERY, 0); }
		public TerminalNode OPTIMIZATION() { return getToken(DB2zSQLParser.OPTIMIZATION, 0); }
		public TerminalNode SYSTEM() { return getToken(DB2zSQLParser.SYSTEM, 0); }
		public TerminalNode USER() { return getToken(DB2zSQLParser.USER, 0); }
		public RefreshableTableOptionsListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_refreshableTableOptionsList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRefreshableTableOptionsList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRefreshableTableOptionsList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRefreshableTableOptionsList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RefreshableTableOptionsListContext refreshableTableOptionsList() throws RecognitionException {
		RefreshableTableOptionsListContext _localctx = new RefreshableTableOptionsListContext(_ctx, getState());
		enterRule(_localctx, 848, RULE_refreshableTableOptionsList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7230);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAINTAINED:
				{
				{
				setState(7223);
				match(MAINTAINED);
				setState(7224);
				match(BY);
				setState(7225);
				_la = _input.LA(1);
				if ( !(_la==SYSTEM || _la==USER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case DISABLE:
			case ENABLE:
				{
				{
				setState(7226);
				enableDisableOption();
				setState(7227);
				match(QUERY);
				setState(7228);
				match(OPTIMIZATION);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MaterializedQueryTableAlterationContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public List<RefreshableTableOptionsListContext> refreshableTableOptionsList() {
			return getRuleContexts(RefreshableTableOptionsListContext.class);
		}
		public RefreshableTableOptionsListContext refreshableTableOptionsList(int i) {
			return getRuleContext(RefreshableTableOptionsListContext.class,i);
		}
		public MaterializedQueryTableAlterationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_materializedQueryTableAlteration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterMaterializedQueryTableAlteration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitMaterializedQueryTableAlteration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitMaterializedQueryTableAlteration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MaterializedQueryTableAlterationContext materializedQueryTableAlteration() throws RecognitionException {
		MaterializedQueryTableAlterationContext _localctx = new MaterializedQueryTableAlterationContext(_ctx, getState());
		enterRule(_localctx, 850, RULE_materializedQueryTableAlteration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7232);
			match(SET);
			setState(7234); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(7233);
				refreshableTableOptionsList();
				}
				}
				setState(7236); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==DISABLE || _la==MAINTAINED || _la==ENABLE );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PeriodDefinitionContext extends ParserRuleContext {
		public TerminalNode PERIOD() { return getToken(DB2zSQLParser.PERIOD, 0); }
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode SYSTEM_TIME() { return getToken(DB2zSQLParser.SYSTEM_TIME, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public BeginColumnNameContext beginColumnName() {
			return getRuleContext(BeginColumnNameContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(DB2zSQLParser.COMMA, 0); }
		public EndColumnNameContext endColumnName() {
			return getRuleContext(EndColumnNameContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode BUSINESS_TIME() { return getToken(DB2zSQLParser.BUSINESS_TIME, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(DB2zSQLParser.EXCLUSIVE, 0); }
		public TerminalNode INCLUSIVE() { return getToken(DB2zSQLParser.INCLUSIVE, 0); }
		public PeriodDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_periodDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPeriodDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPeriodDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPeriodDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PeriodDefinitionContext periodDefinition() throws RecognitionException {
		PeriodDefinitionContext _localctx = new PeriodDefinitionContext(_ctx, getState());
		enterRule(_localctx, 852, RULE_periodDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7238);
			match(PERIOD);
			setState(7240);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(7239);
				match(FOR);
				}
			}

			setState(7257);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SYSTEM_TIME:
				{
				{
				setState(7242);
				match(SYSTEM_TIME);
				setState(7243);
				match(LPAREN);
				setState(7244);
				beginColumnName();
				setState(7245);
				match(COMMA);
				setState(7246);
				endColumnName();
				setState(7247);
				match(RPAREN);
				}
				}
				break;
			case BUSINESS_TIME:
				{
				{
				setState(7249);
				match(BUSINESS_TIME);
				setState(7250);
				match(LPAREN);
				setState(7251);
				beginColumnName();
				setState(7252);
				match(COMMA);
				setState(7253);
				endColumnName();
				setState(7254);
				_la = _input.LA(1);
				if ( !(_la==INCLUSIVE || _la==EXCLUSIVE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7255);
				match(RPAREN);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableColumnDefinitionContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public BuiltInTypeContext builtInType() {
			return getRuleContext(BuiltInTypeContext.class,0);
		}
		public DistinctTypeNameContext distinctTypeName() {
			return getRuleContext(DistinctTypeNameContext.class,0);
		}
		public List<AlterTableColumnDefinitionOptionList1Context> alterTableColumnDefinitionOptionList1() {
			return getRuleContexts(AlterTableColumnDefinitionOptionList1Context.class);
		}
		public AlterTableColumnDefinitionOptionList1Context alterTableColumnDefinitionOptionList1(int i) {
			return getRuleContext(AlterTableColumnDefinitionOptionList1Context.class,i);
		}
		public List<AlterTableColumnDefinitionOptionList2Context> alterTableColumnDefinitionOptionList2() {
			return getRuleContexts(AlterTableColumnDefinitionOptionList2Context.class);
		}
		public AlterTableColumnDefinitionOptionList2Context alterTableColumnDefinitionOptionList2(int i) {
			return getRuleContext(AlterTableColumnDefinitionOptionList2Context.class,i);
		}
		public AlterTableColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTableColumnDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterTableColumnDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterTableColumnDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterTableColumnDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableColumnDefinitionContext alterTableColumnDefinition() throws RecognitionException {
		AlterTableColumnDefinitionContext _localctx = new AlterTableColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 854, RULE_alterTableColumnDefinition);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7275);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,854,_ctx) ) {
			case 1:
				{
				{
				setState(7259);
				columnName();
				setState(7260);
				builtInType();
				setState(7264);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,852,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(7261);
						alterTableColumnDefinitionOptionList1();
						}
						} 
					}
					setState(7266);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,852,_ctx);
				}
				}
				}
				break;
			case 2:
				{
				{
				setState(7267);
				columnName();
				setState(7268);
				distinctTypeName();
				setState(7272);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,853,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(7269);
						alterTableColumnDefinitionOptionList2();
						}
						} 
					}
					setState(7274);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,853,_ctx);
				}
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExternalProgramNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public ExternalProgramNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_externalProgramName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterExternalProgramName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitExternalProgramName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitExternalProgramName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExternalProgramNameContext externalProgramName() throws RecognitionException {
		ExternalProgramNameContext _localctx = new ExternalProgramNameContext(_ctx, getState());
		enterRule(_localctx, 856, RULE_externalProgramName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7279);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INSTEAD:
			case NEW:
			case NEW_TABLE:
			case OLD_TABLE:
			case REFERENCING:
			case BASED:
			case UPON:
			case ADD:
			case AFTER:
			case ALL:
			case ALLOCATE:
			case ALLOW:
			case ALTER:
			case ALTERAND:
			case ANY:
			case ARRAY:
			case ARRAY_EXISTS:
			case AS:
			case ASENSITIVE:
			case ASSOCIATE:
			case ASUTIME:
			case AT:
			case AUDIT:
			case AUX:
			case AUXILIARY:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BUFFERPOOL:
			case BUFFERPOOLS:
			case BY:
			case CALL:
			case CAPTURE:
			case CASCADED:
			case CASE:
			case CAST:
			case CCSID:
			case CHAR:
			case CHARACTER:
			case CHECK:
			case CLONE:
			case CLOSE:
			case CLUSTER:
			case COLLECTION:
			case COLLID:
			case COLUMN:
			case COMMENT:
			case COMMIT:
			case CONCAT:
			case CONDITION:
			case CONNECT:
			case CONNECTION:
			case CONSTRAINT:
			case CONTAINS:
			case CONTENT:
			case CONTINUE:
			case CREATE:
			case CUBE:
			case CURRENT:
			case CURRENT_LC_CTYPE:
			case CURRVAL:
			case CURSOR:
			case DATA:
			case DATABASE:
			case DAY:
			case DAYS:
			case DBINFO:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DISABLE:
			case DISALLOW:
			case DISTINCT:
			case DO:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSSIZE:
			case DYNAMIC:
			case EDITPROC:
			case ELSE:
			case ELSEIF:
			case ENCODING:
			case ENCRYPTION:
			case END:
			case END_EXEC:
			case ENDING:
			case ERASE:
			case ESCAPE:
			case EXCEPT:
			case EXCEPTION:
			case EXEC_SQL:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case FENCED:
			case FETCH:
			case FIELDPROC:
			case FINAL:
			case FIRST:
			case FOR:
			case FREE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANT:
			case GROUP:
			case HANDLER:
			case HAVING:
			case HOLD:
			case HOUR:
			case HOURS:
			case IF:
			case IMMEDIATE:
			case IN:
			case INCLUSIVE:
			case INDEX:
			case INDEXBP:
			case INHERIT:
			case INNER:
			case INOUT:
			case INSENSITIVE:
			case INSERT:
			case INTERSECT:
			case INTO:
			case IS:
			case ISOBID:
			case ITERATE:
			case JAR:
			case JOIN:
			case KEEP:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LAST:
			case LC_CTYPE:
			case LEAVE:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOCALE:
			case LOCATOR:
			case LOCATORS:
			case LOCK:
			case LOCKMAX:
			case LOCKSIZE:
			case LONG:
			case LOOP:
			case MAINTAINED:
			case MATERIALIZED:
			case MICROSECOND:
			case MICROSECONDS:
			case MODIFIES:
			case MONTH:
			case MONTHS:
			case NEXT:
			case NEXTVAL:
			case NO:
			case NONE:
			case NOT:
			case NULL:
			case NULLS:
			case NUMPARTS:
			case OBID:
			case OF:
			case OFFSET:
			case OLD:
			case ON:
			case OPEN:
			case OPTIMIZATION:
			case OPTIMIZE:
			case OR:
			case ORDER:
			case ORGANIZATION:
			case OUT:
			case OUTER:
			case PACKAGE:
			case PADDED:
			case PARAMETER:
			case PART:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONING:
			case PATH:
			case PERIOD:
			case PIECESIZE:
			case PLAN:
			case PRECISION:
			case PREPARE:
			case PREVVAL:
			case PRIOR:
			case PRIQTY:
			case PRIVILEGES:
			case PROCEDURE:
			case PROGRAM:
			case PSID:
			case PUBLIC:
			case QUERY:
			case QUERYNO:
			case READS:
			case REFERENCES:
			case REFRESH:
			case RELEASE:
			case RENAME:
			case REPEAT:
			case RESIGNAL:
			case RESTRICT:
			case RESULT:
			case RESULT_SET_LOCATOR:
			case RETURN:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUND_CEILING:
			case ROUND_DOWN:
			case ROUND_FLOOR:
			case ROUND_HALF_DOWN:
			case ROUND_HALF_EVEN:
			case ROUND_HALF_UP:
			case ROUND_UP:
			case ROW:
			case ROWSET:
			case RUN:
			case SAVEPOINT:
			case SCHEMA:
			case SCRATCHPAD:
			case SECOND:
			case SECONDS:
			case SECQTY:
			case SECURITY:
			case SELECT:
			case SENSITIVE:
			case SEQUENCE:
			case SET:
			case SIGNAL:
			case SIMPLE:
			case SOME:
			case SOURCE:
			case SPECIFIC:
			case STANDARD:
			case STATEMENT:
			case STATIC:
			case STAY:
			case STOGROUP:
			case STORES:
			case STYLE:
			case SUMMARY:
			case SYNONYM:
			case SYSDATE:
			case SYSTEM:
			case SYSTIMESTAMP:
			case TABLE:
			case TABLESPACE:
			case THEN:
			case TO:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNDO:
			case UNION:
			case UNIQUE:
			case UNTIL:
			case UPDATE:
			case USING:
			case VALIDPROC:
			case VALUE:
			case VALUES:
			case VARIABLE:
			case VARIANT:
			case VCAT:
			case VERSIONING:
			case VIEW:
			case VOLATILE:
			case VOLUMES:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WLM:
			case XMLCAST:
			case XMLEXISTS:
			case XMLNAMESPACES:
			case YEAR:
			case YEARS:
			case ZONE:
			case AND:
			case ARRAY_AGG:
			case ASC:
			case AVG:
			case BIT:
			case CHANGE:
			case CODEUNITS16:
			case CODEUNITS32:
			case CORR:
			case CORRELATION:
			case COUNT:
			case COUNT_BIG:
			case COVAR:
			case COVARIANCE:
			case COVARIANCE_SAMP:
			case COVAR_POP:
			case COVAR_SAMP:
			case CS:
			case CUME_DIST:
			case DENSE_RANK:
			case DESC:
			case EBCDIC:
			case EXCLUSIVE:
			case FIRST_VALUE:
			case FOLLOWING:
			case GROUPING:
			case IGNORE:
			case INDICATOR:
			case INPUT:
			case ISNULL:
			case LAG:
			case LARGE:
			case LAST_VALUE:
			case LEAD:
			case LISTAGG:
			case LOCKED:
			case LOCKS:
			case MEDIAN:
			case MINUTES:
			case MIXED:
			case NOTNULL:
			case NTH_VALUE:
			case NTILE:
			case NUMERIC:
			case OBJECT:
			case OCTETS:
			case ONLY:
			case OVER:
			case PASSING:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PERCENT_RANK:
			case PRECEDING:
			case PREVIOUS:
			case RANGE:
			case RANK:
			case RATIO_TO_REPORT:
			case READ:
			case REF:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_ICPT:
			case REGR_INTERCEPT:
			case REGR_R2:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case RESPECT:
			case ROW_NUMBER:
			case ROWS:
			case RR:
			case RS:
			case SBCS:
			case SELECTIVITY:
			case SETS:
			case SHARE:
			case SKIP_:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case TOKEN:
			case UNBOUNDED:
			case UNPACK:
			case UR:
			case USE:
			case VAR:
			case VARIANCE:
			case VARIANCE_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARYING:
			case WITHOUT:
			case XML:
			case XMLAGG:
			case COLUMNS:
			case SQLID:
			case ORDINALITY:
			case SYSTEM_TIME:
			case BUSINESS_TIME:
			case MULTIPLIER:
			case UNNEST:
			case CROSS:
			case CALLER:
			case CLIENT:
			case POSITIONING:
			case SCROLL:
			case ACTION:
			case ASSEMBLE:
			case C_:
			case CALLED:
			case COBOL:
			case DB2:
			case DEFINER:
			case DISPATCH:
			case ENVIRONMENT:
			case FAILURE:
			case FAILURES:
			case JAVA:
			case MAIN:
			case NAME:
			case OPTIONS:
			case PARALLEL:
			case PLI:
			case REGISTERS:
			case RESIDENT:
			case SECURED:
			case SPECIAL:
			case SQL:
			case STOP:
			case SUB:
			case YES:
			case APPLICATION:
			case CHANGED:
			case COMPATIBILITY:
			case COMPRESS:
			case COPY:
			case FREEPAGE:
			case GBPCACHE:
			case INCLUDE:
			case MAXVALUE:
			case MINVALUE:
			case PCTFREE:
			case REGENERATE:
			case MASK:
			case ENABLE:
			case PERMISSION:
			case ATOMIC:
			case SQLEXCEPTION:
			case MERGE:
			case MATCHED:
			case SQLSTATE:
			case MESSAGE_TEXT:
			case OVERRIDING:
			case PORTION:
			case DB2SQL:
			case DEBUG:
			case GENERAL:
			case MODE_:
			case REXX:
			case CACHE:
			case CYCLE:
			case INCREMENT:
			case RESTART:
			case DATACLAS:
			case MGMTCLAS:
			case REMOVE:
			case STORCLAS:
			case ACCESS:
			case ACTIVATE:
			case ALWAYS:
			case APPEND:
			case ARCHIVE:
			case BUSINESS:
			case CASCADE:
			case CHANGES:
			case CONTROL:
			case DEACTIVATE:
			case DEFERRED:
			case EACH:
			case ENFORCED:
			case EXTRA:
			case FOREIGN:
			case HIDDEN_:
			case HISTORY:
			case ID:
			case IDENTITY:
			case IMPLICITLY:
			case INITIALLY:
			case INLINE:
			case OPERATION:
			case ORGANIZE:
			case OVERLAPS:
			case PACKAGE_NAME:
			case PACKAGE_SCHEMA:
			case PACKAGE_VERSION:
			case PRIMARY:
			case RESET:
			case ROTATE:
			case START:
			case SYSIBM:
			case TRANSACTION:
			case XMLSCHEMA:
			case ELEMENT:
			case URL:
			case NAMESPACE:
			case LOCATION:
			case SYSXSR:
			case ALGORITHM:
			case FIXEDLENGTH:
			case HUFFMAN:
			case LOB:
			case LOG:
			case LOGGED:
			case MAXPARTITIONS:
			case MAXROWS:
			case MEMBER:
			case MOVE:
			case PAGE:
			case PAGENUM:
			case PENDING:
			case RELATIVE:
			case SEGSIZE:
			case TRACKMOD:
			case ADDRESS:
			case ATTRIBUTES:
			case AUTHENTICATION:
			case AUTHID:
			case CONTEXT:
			case JOBNAME:
			case OWNER:
			case PROFILE:
			case QUALIFIER:
			case SERVAUTH:
			case TRUSTED:
			case SECTION:
			case ACTIVE:
			case VERSION:
			case ALIAS:
			case WORK:
			case WORKFILE:
			case SYSDEFLT:
			case NULTERM:
			case STRUCTURE:
			case GENERIC:
			case TEMPORARY:
			case DEFER:
			case DEFINE:
			case EXCLUDE:
			case GENERATE:
			case KEYS:
			case XMLPATTERN:
			case SIZE:
			case EVERY:
			case ABSOLUTE:
			case ACCELERATOR:
			case EXCLUDING:
			case INCLUDING:
			case DEFAULTS:
			case MODIFIERS:
			case OPTION:
			case PRESERVE:
			case BOTH:
			case DESCRIBE:
			case LABELS:
			case NAMES:
			case OUTPUT:
			case EXCHANGE:
			case STABILIZED:
			case STMTCACHE:
			case STMTID:
			case STMTTOKEN:
			case STARTING:
			case CATALOG_NAME:
			case CONDITION_NUMBER:
			case CURSOR_NAME:
			case DB2_AUTHENTICATION_TYPE:
			case DB2_AUTHORIZATION_ID:
			case DB2_CONNECTION_STATE:
			case DB2_CONNECTION_STATUS:
			case DB2_ENCRYPTION_TYPE:
			case DB2_ERROR_CODE1:
			case DB2_ERROR_CODE2:
			case DB2_ERROR_CODE3:
			case DB2_ERROR_CODE4:
			case DB2_GET_DIAGNOSTICS_DIAGNOSTICS:
			case DB2_INTERNAL_ERROR_POINTER:
			case DB2_LAST_ROW:
			case DB2_LINE_NUMBER:
			case DB2_MESSAGE_ID:
			case DB2_MODULE_DETECTING_ERROR:
			case DB2_NUMBER_PARAMETER_MARKERS:
			case DB2_NUMBER_RESULT_SETS:
			case DB2_NUMBER_ROWS:
			case DB2_ORDINAL_TOKEN_:
			case DB2_PRODUCT_ID:
			case DB2_REASON_CODE:
			case DB2_RETURNED_SQLCODE:
			case DB2_RETURN_STATUS:
			case DB2_ROW_NUMBER:
			case DB2_SERVER_CLASS_NAME:
			case DB2_SQL_ATTR_CURSOR_HOLD:
			case DB2_SQL_ATTR_CURSOR_ROWSET:
			case DB2_SQL_ATTR_CURSOR_SCROLLABLE:
			case DB2_SQL_ATTR_CURSOR_SENSITIVITY:
			case DB2_SQL_ATTR_CURSOR_TYPE:
			case DB2_SQLERRD1:
			case DB2_SQLERRD2:
			case DB2_SQLERRD3:
			case DB2_SQLERRD4:
			case DB2_SQLERRD5:
			case DB2_SQLERRD6:
			case DB2_SQLERRD_SET:
			case DB2_SQL_NESTING_LEVEL:
			case DB2_TOKEN_COUNT:
			case DIAGNOSTICS:
			case MORE_:
			case NUMBER:
			case RETURNED_SQLSTATE:
			case ROW_COUNT:
			case SERVER_NAME:
			case STACKED:
			case CREATETAB:
			case CREATETS:
			case DBADM:
			case DBCTRL:
			case DBMAINT:
			case DISPLAYDB:
			case IMAGCOPY:
			case LOAD:
			case PACKADM:
			case RECOVERDB:
			case REORG:
			case REPAIR:
			case STARTDB:
			case STATS:
			case STOPDB:
			case BIND:
			case ALTERIN:
			case CREATEIN:
			case DROPIN:
			case USAGE:
			case ACCESSCTRL:
			case BINDADD:
			case BINDAGENT:
			case BSDS:
			case CREATEALIAS:
			case CREATEDBA:
			case CREATEDBC:
			case CREATE_SECURE_OBJECT:
			case CREATESG:
			case CREATETMTAB:
			case DATAACCESS:
			case DEBUGSESSION:
			case DISPLAY:
			case MONITOR1:
			case MONITOR2:
			case RECOVER:
			case SQLADM:
			case STOPALL:
			case STOSPACE:
			case SYSADM:
			case SYSCTRL:
			case SYSOPR:
			case TRACE:
			case UNLOAD:
			case WRITE:
			case ABS:
			case ABSVAL:
			case ACOS:
			case ADD_DAYS:
			case ADD_MONTHS:
			case ARRAY_DELETE:
			case ARRAY_FIRST:
			case ARRAY_LAST:
			case ARRAY_NEXT:
			case ARRAY_PRIOR:
			case ARRAY_TRIM:
			case ASCII:
			case ASCII_CHR:
			case ASCIISTR:
			case ASCII_STR:
			case ASIN:
			case ATAN:
			case ATAN2:
			case ATANH:
			case BIGINT:
			case BINARY:
			case BITAND:
			case BITANDNOT:
			case BITNOT:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BTRIM:
			case CARDINALITY:
			case CCSID_ENCODING:
			case CEIL:
			case CEILING:
			case CHAR9:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case CHR:
			case CLOB:
			case COALESCE:
			case COLLATION_KEY:
			case COMPARE_DECFLOAT:
			case COS:
			case COSH:
			case DATE:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFWEEK_ISO:
			case DAYOFYEAR:
			case DAYS_BETWEEN:
			case DBCLOB:
			case DEC:
			case DECFLOAT:
			case DECFLOAT_FORMAT:
			case DECFLOAT_SORTKEY:
			case DECIMAL:
			case DECODE:
			case DECRYPT_BINARY:
			case DECRYPT_BIT:
			case DECRYPT_CHAR:
			case DECRYPT_DATAKEY_BIGINT:
			case DECRYPT_DATAKEY_BIT:
			case DECRYPT_DATAKEY_CLOB:
			case DECRYPT_DATAKEY_DBCLOB:
			case DECRYPT_DATAKEY_DECIMAL:
			case DECRYPT_DATAKEY_INTEGER:
			case DECRYPT_DATAKEY_VARCHAR:
			case DECRYPT_DATAKEY_VARGRAPHIC:
			case DECRYPT_DB:
			case DEGREES:
			case DIFFERENCE:
			case DIGITS:
			case DOUBLE_PRECISION:
			case DSN_XMLVALIDATE:
			case EBCDIC_CHR:
			case EBCDIC_STR:
			case ENCRYPT_DATAKEY:
			case ENCRYPT_TDES:
			case EXP:
			case EXTRACT:
			case FLOAT:
			case FLOOR:
			case GENERATE_UNIQUE:
			case GENERATE_UNIQUE_BINARY:
			case GETHINT:
			case GETVARIABLE:
			case GRAPHIC:
			case GREATEST:
			case HASH:
			case HASH_CRC32:
			case HASH_MD5:
			case HASH_SHA1:
			case HASH_SHA256:
			case HEX:
			case IDENTITY_VAL_LOCAL:
			case IFNULL:
			case INSTR:
			case INT:
			case INTEGER:
			case JULIAN_DAY:
			case LAST_DAY:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LN:
			case LOCATE:
			case LOCATE_IN_STRING:
			case LOG10:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAX:
			case MAX_CARDINALITY:
			case MIDNIGHT_SECONDS:
			case MIN:
			case MINUTE:
			case MOD:
			case MONTHS_BETWEEN:
			case MQREAD:
			case MQREADCLOB:
			case MQRECEIVE:
			case MQRECEIVECLOB:
			case MQSEND:
			case MULTIPLY_ALT:
			case NEXT_DAY:
			case NEXT_MONTH:
			case NORMALIZE_DECFLOAT:
			case NORMALIZE_STRING:
			case NULLIF:
			case NVL:
			case OVERLAY:
			case PACK:
			case POSITION:
			case POSSTR:
			case POW:
			case POWER:
			case QUANTIZE:
			case QUARTER:
			case RADIANS:
			case RAISE_ERROR:
			case RAND:
			case RANDOM:
			case REAL:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REPLACE:
			case RID:
			case ROUND:
			case ROUND_TIMESTAMP:
			case ROWID:
			case RPAD:
			case RTRIM:
			case SCORE:
			case SIGN:
			case SIN:
			case SINH:
			case SMALLINT:
			case SOAPHTTPC:
			case SOAPHTTPNC:
			case SOAPHTTPNV:
			case SOAPHTTPV:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STRIP:
			case STRLEFT:
			case STRPOS:
			case STRRIGHT:
			case SUBSTR:
			case SUBSTRING:
			case TAN:
			case TANH:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIMESTAMP_FORMAT:
			case TIMESTAMP_ISO:
			case TIMESTAMP_TZ:
			case TO_CHAR:
			case TO_CLOB:
			case TO_DATE:
			case TO_NUMBER:
			case TOTALORDER:
			case TO_TIMESTAMP:
			case TRANSLATE:
			case TRIM:
			case TRIM_ARRAY:
			case TRUNC:
			case TRUNC_TIMESTAMP:
			case UCASE:
			case UNICODE:
			case UNICODE_STR:
			case UNISTR:
			case UPPER:
			case VARBINARY:
			case VARCHAR:
			case VARCHAR9:
			case VARCHAR_BIT_FORMAT:
			case VARCHAR_FORMAT:
			case VARGRAPHIC:
			case VERIFY_GROUP_FOR_USER:
			case VERIFY_ROLE_FOR_USER:
			case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
			case WEEK:
			case WEEK_ISO:
			case WRAP:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLCONCAT:
			case XMLDOCUMENT:
			case XMLELEMENT:
			case XMLFOREST:
			case XMLMODIFY:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLSERIALIZE:
			case XMLTEXT:
			case XMLXSROBJECTID:
			case XSLTRANSFORM:
			case CURRENT_ACCELERATOR:
			case CURRENT_APPLICATION_COMPATIBILITY:
			case CURRENT_APPLICATION_ENCODING_SCHEME:
			case CURRENT_CLIENT_ACCTNG:
			case CURRENT_CLIENT_APPLNAME:
			case CURRENT_CLIENT_CORR_TOKEN:
			case CURRENT_CLIENT_USERID:
			case CURRENT_CLIENT_WRKSTNNAME:
			case CURRENT_DATE:
			case CURRENT_DEBUG_MODE:
			case CURRENT_DECFLOAT_ROUNDING_MODE:
			case CURRENT_DEGREE:
			case CURRENT_EXPLAIN_MODE:
			case CURRENT_GET_ACCEL_ARCHIVE:
			case CURRENT_LOCALE_LC_CTYPE:
			case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
			case CURRENT_MEMBER:
			case CURRENT_OPTIMIZATION_HINT:
			case CURRENT_PACKAGE_PATH:
			case CURRENT_PACKAGESET:
			case CURRENT_PATH:
			case CURRENT_PRECISION:
			case CURRENT_QUERY_ACCELERATION:
			case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
			case CURRENT_REFRESH_AGE:
			case CURRENT_ROUTINE_VERSION:
			case CURRENT_RULES:
			case CURRENT_SCHEMA:
			case CURRENT_SERVER:
			case CURRENT_SQLID:
			case CURRENT_TEMPORAL_BUSINESS_TIME:
			case CURRENT_TEMPORAL_SYSTEM_TIME:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_TIME_ZONE:
			case ENCRYPTION_PASSWORD:
			case SESSION_TIME_ZONE:
			case SESSION_USER:
			case USER:
			case ADMIN_TASK_LIST:
			case ADMIN_TASK_OUTPUT:
			case ADMIN_TASK_STATUS:
			case BLOCKING_THREADS:
			case MQREADALL:
			case MQREADALLCLOB:
			case MQRECEIVEALL:
			case MQRECEIVEALLCLOB:
			case XMLTABLE:
			case SQLIDENTIFIER:
				{
				setState(7277);
				identifier();
				}
				break;
			case NONNUMERICLITERAL:
				{
				setState(7278);
				match(NONNUMERICLITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PackagePathContext extends ParserRuleContext {
		public CollectionIDContext collectionID() {
			return getRuleContext(CollectionIDContext.class,0);
		}
		public TerminalNode SESSION_USER() { return getToken(DB2zSQLParser.SESSION_USER, 0); }
		public TerminalNode USER() { return getToken(DB2zSQLParser.USER, 0); }
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public TerminalNode CURRENT() { return getToken(DB2zSQLParser.CURRENT, 0); }
		public TerminalNode PACKAGE() { return getToken(DB2zSQLParser.PACKAGE, 0); }
		public TerminalNode PATH() { return getToken(DB2zSQLParser.PATH, 0); }
		public PackagePathContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_packagePath; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPackagePath(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPackagePath(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPackagePath(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PackagePathContext packagePath() throws RecognitionException {
		PackagePathContext _localctx = new PackagePathContext(_ctx, getState());
		enterRule(_localctx, 858, RULE_packagePath);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7291);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,856,_ctx) ) {
			case 1:
				{
				setState(7281);
				collectionID();
				}
				break;
			case 2:
				{
				setState(7282);
				match(SESSION_USER);
				}
				break;
			case 3:
				{
				setState(7283);
				match(USER);
				}
				break;
			case 4:
				{
				{
				setState(7284);
				match(CURRENT);
				setState(7285);
				match(PACKAGE);
				setState(7286);
				match(PATH);
				}
				}
				break;
			case 5:
				{
				{
				setState(7287);
				match(CURRENT);
				setState(7288);
				match(PATH);
				}
				}
				break;
			case 6:
				{
				setState(7289);
				hostVariable();
				}
				break;
			case 7:
				{
				setState(7290);
				match(NONNUMERICLITERAL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollectionIDContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public CollectionIDContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collectionID; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCollectionID(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCollectionID(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCollectionID(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollectionIDContext collectionID() throws RecognitionException {
		CollectionIDContext _localctx = new CollectionIDContext(_ctx, getState());
		enterRule(_localctx, 860, RULE_collectionID);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7293);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RunTimeOptionsContext extends ParserRuleContext {
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public RunTimeOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_runTimeOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRunTimeOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRunTimeOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRunTimeOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RunTimeOptionsContext runTimeOptions() throws RecognitionException {
		RunTimeOptionsContext _localctx = new RunTimeOptionsContext(_ctx, getState());
		enterRule(_localctx, 862, RULE_runTimeOptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7295);
			match(NONNUMERICLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ComparisonOperatorContext extends ParserRuleContext {
		public TerminalNode EQ() { return getToken(DB2zSQLParser.EQ, 0); }
		public TerminalNode GT() { return getToken(DB2zSQLParser.GT, 0); }
		public TerminalNode LT() { return getToken(DB2zSQLParser.LT, 0); }
		public TerminalNode GE() { return getToken(DB2zSQLParser.GE, 0); }
		public TerminalNode LE() { return getToken(DB2zSQLParser.LE, 0); }
		public TerminalNode NE() { return getToken(DB2zSQLParser.NE, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparisonOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterComparisonOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitComparisonOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitComparisonOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ComparisonOperatorContext comparisonOperator() throws RecognitionException {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, getState());
		enterRule(_localctx, 864, RULE_comparisonOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7297);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQ) | (1L << GT) | (1L << LT) | (1L << GE) | (1L << LE) | (1L << NE))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OperatorContext extends ParserRuleContext {
		public TerminalNode SPLAT() { return getToken(DB2zSQLParser.SPLAT, 0); }
		public TerminalNode PLUS() { return getToken(DB2zSQLParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(DB2zSQLParser.MINUS, 0); }
		public TerminalNode SLASH() { return getToken(DB2zSQLParser.SLASH, 0); }
		public TerminalNode CONCAT() { return getToken(DB2zSQLParser.CONCAT, 0); }
		public TerminalNode CONCATOP() { return getToken(DB2zSQLParser.CONCATOP, 0); }
		public OperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OperatorContext operator() throws RecognitionException {
		OperatorContext _localctx = new OperatorContext(_ctx, getState());
		enterRule(_localctx, 866, RULE_operator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7299);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << MINUS) | (1L << SPLAT) | (1L << SLASH) | (1L << CONCATOP))) != 0) || _la==CONCAT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionContext extends ParserRuleContext {
		public FunctionInvocationContext functionInvocation() {
			return getRuleContext(FunctionInvocationContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public SpecialRegisterContext specialRegister() {
			return getRuleContext(SpecialRegisterContext.class,0);
		}
		public ScalarFullSelectContext scalarFullSelect() {
			return getRuleContext(ScalarFullSelectContext.class,0);
		}
		public TimeZoneSpecificExpressionContext timeZoneSpecificExpression() {
			return getRuleContext(TimeZoneSpecificExpressionContext.class,0);
		}
		public LabeledDurationContext labeledDuration() {
			return getRuleContext(LabeledDurationContext.class,0);
		}
		public CaseExpressionContext caseExpression() {
			return getRuleContext(CaseExpressionContext.class,0);
		}
		public CastSpecificationContext castSpecification() {
			return getRuleContext(CastSpecificationContext.class,0);
		}
		public XmlCastSpecificationContext xmlCastSpecification() {
			return getRuleContext(XmlCastSpecificationContext.class,0);
		}
		public ArrayElementSpecificationContext arrayElementSpecification() {
			return getRuleContext(ArrayElementSpecificationContext.class,0);
		}
		public ArrayConstructorContext arrayConstructor() {
			return getRuleContext(ArrayConstructorContext.class,0);
		}
		public OlapSpecificationContext olapSpecification() {
			return getRuleContext(OlapSpecificationContext.class,0);
		}
		public RowChangeExpressionContext rowChangeExpression() {
			return getRuleContext(RowChangeExpressionContext.class,0);
		}
		public SequenceReferenceContext sequenceReference() {
			return getRuleContext(SequenceReferenceContext.class,0);
		}
		public List<OperatorContext> operator() {
			return getRuleContexts(OperatorContext.class);
		}
		public OperatorContext operator(int i) {
			return getRuleContext(OperatorContext.class,i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		ExpressionContext _localctx = new ExpressionContext(_ctx, getState());
		enterRule(_localctx, 868, RULE_expression);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7351);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,859,_ctx) ) {
			case 1:
				{
				setState(7301);
				functionInvocation();
				}
				break;
			case 2:
				{
				setState(7302);
				match(LPAREN);
				setState(7303);
				expression();
				setState(7304);
				match(RPAREN);
				}
				break;
			case 3:
				{
				setState(7306);
				literal();
				}
				break;
			case 4:
				{
				setState(7307);
				columnName();
				}
				break;
			case 5:
				{
				setState(7308);
				hostVariable();
				}
				break;
			case 6:
				{
				setState(7309);
				specialRegister();
				}
				break;
			case 7:
				{
				setState(7310);
				scalarFullSelect();
				}
				break;
			case 8:
				{
				setState(7311);
				timeZoneSpecificExpression();
				}
				break;
			case 9:
				{
				setState(7312);
				labeledDuration();
				}
				break;
			case 10:
				{
				setState(7313);
				caseExpression();
				}
				break;
			case 11:
				{
				setState(7314);
				castSpecification();
				}
				break;
			case 12:
				{
				setState(7315);
				xmlCastSpecification();
				}
				break;
			case 13:
				{
				setState(7316);
				arrayElementSpecification();
				}
				break;
			case 14:
				{
				setState(7317);
				arrayConstructor();
				}
				break;
			case 15:
				{
				setState(7318);
				olapSpecification();
				}
				break;
			case 16:
				{
				setState(7319);
				rowChangeExpression();
				}
				break;
			case 17:
				{
				setState(7320);
				sequenceReference();
				}
				break;
			case 18:
				{
				{
				setState(7341);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,857,_ctx) ) {
				case 1:
					{
					setState(7321);
					functionInvocation();
					}
					break;
				case 2:
					{
					setState(7322);
					match(LPAREN);
					setState(7323);
					expression();
					setState(7324);
					match(RPAREN);
					}
					break;
				case 3:
					{
					setState(7326);
					literal();
					}
					break;
				case 4:
					{
					setState(7327);
					columnName();
					}
					break;
				case 5:
					{
					setState(7328);
					hostVariable();
					}
					break;
				case 6:
					{
					setState(7329);
					specialRegister();
					}
					break;
				case 7:
					{
					setState(7330);
					scalarFullSelect();
					}
					break;
				case 8:
					{
					setState(7331);
					timeZoneSpecificExpression();
					}
					break;
				case 9:
					{
					setState(7332);
					labeledDuration();
					}
					break;
				case 10:
					{
					setState(7333);
					caseExpression();
					}
					break;
				case 11:
					{
					setState(7334);
					castSpecification();
					}
					break;
				case 12:
					{
					setState(7335);
					xmlCastSpecification();
					}
					break;
				case 13:
					{
					setState(7336);
					arrayElementSpecification();
					}
					break;
				case 14:
					{
					setState(7337);
					arrayConstructor();
					}
					break;
				case 15:
					{
					setState(7338);
					olapSpecification();
					}
					break;
				case 16:
					{
					setState(7339);
					rowChangeExpression();
					}
					break;
				case 17:
					{
					setState(7340);
					sequenceReference();
					}
					break;
				}
				setState(7348);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,858,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(7343);
						operator();
						setState(7344);
						expression();
						}
						} 
					}
					setState(7350);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,858,_ctx);
				}
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyExpressionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public KeyExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterKeyExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitKeyExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitKeyExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyExpressionContext keyExpression() throws RecognitionException {
		KeyExpressionContext _localctx = new KeyExpressionContext(_ctx, getState());
		enterRule(_localctx, 870, RULE_keyExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7353);
			expression();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowChangeExpressionContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(DB2zSQLParser.ROW, 0); }
		public TerminalNode CHANGE() { return getToken(DB2zSQLParser.CHANGE, 0); }
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode TIMESTAMP() { return getToken(DB2zSQLParser.TIMESTAMP, 0); }
		public TerminalNode TOKEN() { return getToken(DB2zSQLParser.TOKEN, 0); }
		public RowChangeExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowChangeExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRowChangeExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRowChangeExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRowChangeExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowChangeExpressionContext rowChangeExpression() throws RecognitionException {
		RowChangeExpressionContext _localctx = new RowChangeExpressionContext(_ctx, getState());
		enterRule(_localctx, 872, RULE_rowChangeExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7355);
			match(ROW);
			setState(7356);
			match(CHANGE);
			setState(7357);
			_la = _input.LA(1);
			if ( !(_la==TOKEN || _la==TIMESTAMP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(7358);
			match(FOR);
			setState(7359);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SequenceReferenceContext extends ParserRuleContext {
		public TerminalNode VALUE() { return getToken(DB2zSQLParser.VALUE, 0); }
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode NEXT() { return getToken(DB2zSQLParser.NEXT, 0); }
		public TerminalNode PREVIOUS() { return getToken(DB2zSQLParser.PREVIOUS, 0); }
		public SequenceReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequenceReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSequenceReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSequenceReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSequenceReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SequenceReferenceContext sequenceReference() throws RecognitionException {
		SequenceReferenceContext _localctx = new SequenceReferenceContext(_ctx, getState());
		enterRule(_localctx, 874, RULE_sequenceReference);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7361);
			_la = _input.LA(1);
			if ( !(_la==NEXT || _la==PREVIOUS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(7362);
			match(VALUE);
			setState(7363);
			match(FOR);
			setState(7364);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionInvocationContext extends ParserRuleContext {
		public ScalarFunctionInvocationContext scalarFunctionInvocation() {
			return getRuleContext(ScalarFunctionInvocationContext.class,0);
		}
		public AggregateFunctionInvocationContext aggregateFunctionInvocation() {
			return getRuleContext(AggregateFunctionInvocationContext.class,0);
		}
		public RegressionFunctionInvocationContext regressionFunctionInvocation() {
			return getRuleContext(RegressionFunctionInvocationContext.class,0);
		}
		public ExternalFunctionInvocationContext externalFunctionInvocation() {
			return getRuleContext(ExternalFunctionInvocationContext.class,0);
		}
		public FunctionInvocationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionInvocation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFunctionInvocation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFunctionInvocation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFunctionInvocation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionInvocationContext functionInvocation() throws RecognitionException {
		FunctionInvocationContext _localctx = new FunctionInvocationContext(_ctx, getState());
		enterRule(_localctx, 876, RULE_functionInvocation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7370);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,860,_ctx) ) {
			case 1:
				{
				setState(7366);
				scalarFunctionInvocation();
				}
				break;
			case 2:
				{
				setState(7367);
				aggregateFunctionInvocation();
				}
				break;
			case 3:
				{
				setState(7368);
				regressionFunctionInvocation();
				}
				break;
			case 4:
				{
				setState(7369);
				externalFunctionInvocation();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScalarFunctionInvocationContext extends ParserRuleContext {
		public ScalarFunctionContext scalarFunction() {
			return getRuleContext(ScalarFunctionContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public ScalarFunctionInvocationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scalarFunctionInvocation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterScalarFunctionInvocation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitScalarFunctionInvocation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitScalarFunctionInvocation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ScalarFunctionInvocationContext scalarFunctionInvocation() throws RecognitionException {
		ScalarFunctionInvocationContext _localctx = new ScalarFunctionInvocationContext(_ctx, getState());
		enterRule(_localctx, 878, RULE_scalarFunctionInvocation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7375);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,861,_ctx) ) {
			case 1:
				{
				setState(7372);
				schemaName();
				setState(7373);
				match(DOT);
				}
				break;
			}
			setState(7377);
			scalarFunction();
			setState(7378);
			match(LPAREN);
			setState(7387);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAREN) | (1L << COLON) | (1L << NONNUMERICLITERAL) | (1L << INTEGERLITERAL) | (1L << NUMERICLITERAL) | (1L << INSTEAD) | (1L << NEW) | (1L << NEW_TABLE) | (1L << OLD_TABLE) | (1L << REFERENCING) | (1L << BASED) | (1L << UPON) | (1L << ADD) | (1L << AFTER) | (1L << ALL) | (1L << ALLOCATE) | (1L << ALLOW) | (1L << ALTER) | (1L << ALTERAND) | (1L << ANY) | (1L << ARRAY) | (1L << ARRAY_EXISTS) | (1L << AS) | (1L << ASENSITIVE) | (1L << ASSOCIATE) | (1L << ASUTIME) | (1L << AT) | (1L << AUDIT) | (1L << AUX) | (1L << AUXILIARY) | (1L << BEFORE) | (1L << BEGIN) | (1L << BETWEEN) | (1L << BUFFERPOOL) | (1L << BUFFERPOOLS) | (1L << BY) | (1L << CALL) | (1L << CAPTURE) | (1L << CASCADED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CASE - 64)) | (1L << (CAST - 64)) | (1L << (CCSID - 64)) | (1L << (CHAR - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHECK - 64)) | (1L << (CLONE - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECTION - 64)) | (1L << (COLLID - 64)) | (1L << (COLUMN - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (CONCAT - 64)) | (1L << (CONDITION - 64)) | (1L << (CONNECT - 64)) | (1L << (CONNECTION - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONTAINS - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CREATE - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT - 64)) | (1L << (CURRENT_LC_CTYPE - 64)) | (1L << (CURRVAL - 64)) | (1L << (CURSOR - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DAYS - 64)) | (1L << (DBINFO - 64)) | (1L << (DECLARE - 64)) | (1L << (DEFAULT - 64)) | (1L << (DELETE - 64)) | (1L << (DESCRIPTOR - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DISABLE - 64)) | (1L << (DISALLOW - 64)) | (1L << (DISTINCT - 64)) | (1L << (DO - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (DSSIZE - 64)) | (1L << (DYNAMIC - 64)) | (1L << (EDITPROC - 64)) | (1L << (ELSE - 64)) | (1L << (ELSEIF - 64)) | (1L << (ENCODING - 64)) | (1L << (ENCRYPTION - 64)) | (1L << (END - 64)) | (1L << (END_EXEC - 64)) | (1L << (ENDING - 64)) | (1L << (ERASE - 64)) | (1L << (ESCAPE - 64)) | (1L << (EXCEPT - 64)) | (1L << (EXCEPTION - 64)) | (1L << (EXEC_SQL - 64)) | (1L << (EXECUTE - 64)) | (1L << (EXISTS - 64)) | (1L << (EXIT - 64)) | (1L << (EXPLAIN - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (EXTERNAL - 128)) | (1L << (FENCED - 128)) | (1L << (FETCH - 128)) | (1L << (FIELDPROC - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FOR - 128)) | (1L << (FREE - 128)) | (1L << (FROM - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GENERATED - 128)) | (1L << (GET - 128)) | (1L << (GLOBAL - 128)) | (1L << (GO - 128)) | (1L << (GOTO - 128)) | (1L << (GRANT - 128)) | (1L << (GROUP - 128)) | (1L << (HANDLER - 128)) | (1L << (HAVING - 128)) | (1L << (HOLD - 128)) | (1L << (HOUR - 128)) | (1L << (HOURS - 128)) | (1L << (IF - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (IN - 128)) | (1L << (INCLUSIVE - 128)) | (1L << (INDEX - 128)) | (1L << (INDEXBP - 128)) | (1L << (INHERIT - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSENSITIVE - 128)) | (1L << (INSERT - 128)) | (1L << (INTERSECT - 128)) | (1L << (INTO - 128)) | (1L << (IS - 128)) | (1L << (ISOBID - 128)) | (1L << (ITERATE - 128)) | (1L << (JAR - 128)) | (1L << (JOIN - 128)) | (1L << (KEEP - 128)) | (1L << (KEY - 128)) | (1L << (LABEL - 128)) | (1L << (LANGUAGE - 128)) | (1L << (LAST - 128)) | (1L << (LC_CTYPE - 128)) | (1L << (LEAVE - 128)) | (1L << (LEFT - 128)) | (1L << (LIKE - 128)) | (1L << (LIMIT - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCALE - 128)) | (1L << (LOCATOR - 128)) | (1L << (LOCATORS - 128)) | (1L << (LOCK - 128)) | (1L << (LOCKMAX - 128)) | (1L << (LOCKSIZE - 128)) | (1L << (LONG - 128)) | (1L << (LOOP - 128)) | (1L << (MAINTAINED - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MICROSECOND - 128)) | (1L << (MICROSECONDS - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (MODIFIES - 193)) | (1L << (MONTH - 193)) | (1L << (MONTHS - 193)) | (1L << (NEXT - 193)) | (1L << (NEXTVAL - 193)) | (1L << (NO - 193)) | (1L << (NONE - 193)) | (1L << (NOT - 193)) | (1L << (NULL - 193)) | (1L << (NULLS - 193)) | (1L << (NUMPARTS - 193)) | (1L << (OBID - 193)) | (1L << (OF - 193)) | (1L << (OFFSET - 193)) | (1L << (OLD - 193)) | (1L << (ON - 193)) | (1L << (OPEN - 193)) | (1L << (OPTIMIZATION - 193)) | (1L << (OPTIMIZE - 193)) | (1L << (OR - 193)) | (1L << (ORDER - 193)) | (1L << (ORGANIZATION - 193)) | (1L << (OUT - 193)) | (1L << (OUTER - 193)) | (1L << (PACKAGE - 193)) | (1L << (PADDED - 193)) | (1L << (PARAMETER - 193)) | (1L << (PART - 193)) | (1L << (PARTITION - 193)) | (1L << (PARTITIONED - 193)) | (1L << (PARTITIONING - 193)) | (1L << (PATH - 193)) | (1L << (PERIOD - 193)) | (1L << (PIECESIZE - 193)) | (1L << (PLAN - 193)) | (1L << (PRECISION - 193)) | (1L << (PREPARE - 193)) | (1L << (PREVVAL - 193)) | (1L << (PRIOR - 193)) | (1L << (PRIQTY - 193)) | (1L << (PRIVILEGES - 193)) | (1L << (PROCEDURE - 193)) | (1L << (PROGRAM - 193)) | (1L << (PSID - 193)) | (1L << (PUBLIC - 193)) | (1L << (QUERY - 193)) | (1L << (QUERYNO - 193)) | (1L << (READS - 193)) | (1L << (REFERENCES - 193)) | (1L << (REFRESH - 193)) | (1L << (RELEASE - 193)) | (1L << (RENAME - 193)) | (1L << (REPEAT - 193)) | (1L << (RESIGNAL - 193)) | (1L << (RESTRICT - 193)) | (1L << (RESULT - 193)) | (1L << (RESULT_SET_LOCATOR - 193)) | (1L << (RETURN - 193)) | (1L << (RETURNS - 193)) | (1L << (REVOKE - 193)) | (1L << (RIGHT - 193)) | (1L << (ROLE - 193)) | (1L << (ROLLBACK - 193)) | (1L << (ROLLUP - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (ROUND_CEILING - 257)) | (1L << (ROUND_DOWN - 257)) | (1L << (ROUND_FLOOR - 257)) | (1L << (ROUND_HALF_DOWN - 257)) | (1L << (ROUND_HALF_EVEN - 257)) | (1L << (ROUND_HALF_UP - 257)) | (1L << (ROUND_UP - 257)) | (1L << (ROW - 257)) | (1L << (ROWSET - 257)) | (1L << (RUN - 257)) | (1L << (SAVEPOINT - 257)) | (1L << (SCHEMA - 257)) | (1L << (SCRATCHPAD - 257)) | (1L << (SECOND - 257)) | (1L << (SECONDS - 257)) | (1L << (SECQTY - 257)) | (1L << (SECURITY - 257)) | (1L << (SELECT - 257)) | (1L << (SENSITIVE - 257)) | (1L << (SEQUENCE - 257)) | (1L << (SET - 257)) | (1L << (SIGNAL - 257)) | (1L << (SIMPLE - 257)) | (1L << (SOME - 257)) | (1L << (SOURCE - 257)) | (1L << (SPECIFIC - 257)) | (1L << (STANDARD - 257)) | (1L << (STATEMENT - 257)) | (1L << (STATIC - 257)) | (1L << (STAY - 257)) | (1L << (STOGROUP - 257)) | (1L << (STORES - 257)) | (1L << (STYLE - 257)) | (1L << (SUMMARY - 257)) | (1L << (SYNONYM - 257)) | (1L << (SYSDATE - 257)) | (1L << (SYSTEM - 257)) | (1L << (SYSTIMESTAMP - 257)) | (1L << (TABLE - 257)) | (1L << (TABLESPACE - 257)) | (1L << (THEN - 257)) | (1L << (TO - 257)) | (1L << (TRIGGER - 257)) | (1L << (TRUNCATE - 257)) | (1L << (TYPE - 257)) | (1L << (UNDO - 257)) | (1L << (UNION - 257)) | (1L << (UNIQUE - 257)) | (1L << (UNTIL - 257)) | (1L << (UPDATE - 257)) | (1L << (USING - 257)) | (1L << (VALIDPROC - 257)) | (1L << (VALUE - 257)) | (1L << (VALUES - 257)) | (1L << (VARIABLE - 257)) | (1L << (VARIANT - 257)) | (1L << (VCAT - 257)) | (1L << (VERSIONING - 257)) | (1L << (VIEW - 257)) | (1L << (VOLATILE - 257)) | (1L << (VOLUMES - 257)) | (1L << (WHEN - 257)) | (1L << (WHENEVER - 257)) | (1L << (WHERE - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (WHILE - 321)) | (1L << (WITH - 321)) | (1L << (WLM - 321)) | (1L << (XMLCAST - 321)) | (1L << (XMLEXISTS - 321)) | (1L << (XMLNAMESPACES - 321)) | (1L << (YEAR - 321)) | (1L << (YEARS - 321)) | (1L << (ZONE - 321)) | (1L << (AND - 321)) | (1L << (ARRAY_AGG - 321)) | (1L << (ASC - 321)) | (1L << (AVG - 321)) | (1L << (BIT - 321)) | (1L << (CHANGE - 321)) | (1L << (CODEUNITS16 - 321)) | (1L << (CODEUNITS32 - 321)) | (1L << (CORR - 321)) | (1L << (CORRELATION - 321)) | (1L << (COUNT - 321)) | (1L << (COUNT_BIG - 321)) | (1L << (COVAR - 321)) | (1L << (COVARIANCE - 321)) | (1L << (COVARIANCE_SAMP - 321)) | (1L << (COVAR_POP - 321)) | (1L << (COVAR_SAMP - 321)) | (1L << (CS - 321)) | (1L << (CUME_DIST - 321)) | (1L << (DENSE_RANK - 321)) | (1L << (DESC - 321)) | (1L << (EBCDIC - 321)) | (1L << (EXCLUSIVE - 321)) | (1L << (FIRST_VALUE - 321)) | (1L << (FOLLOWING - 321)) | (1L << (GROUPING - 321)) | (1L << (IGNORE - 321)) | (1L << (INDICATOR - 321)) | (1L << (INPUT - 321)) | (1L << (ISNULL - 321)) | (1L << (LAG - 321)) | (1L << (LARGE - 321)) | (1L << (LAST_VALUE - 321)) | (1L << (LEAD - 321)) | (1L << (LISTAGG - 321)) | (1L << (LOCKED - 321)) | (1L << (LOCKS - 321)) | (1L << (MEDIAN - 321)) | (1L << (MINUTES - 321)) | (1L << (MIXED - 321)) | (1L << (NOTNULL - 321)) | (1L << (NTH_VALUE - 321)) | (1L << (NTILE - 321)) | (1L << (NUMERIC - 321)) | (1L << (OBJECT - 321)) | (1L << (OCTETS - 321)) | (1L << (ONLY - 321)) | (1L << (OVER - 321)) | (1L << (PASSING - 321)) | (1L << (PERCENTILE_CONT - 321)) | (1L << (PERCENTILE_DISC - 321)) | (1L << (PERCENT_RANK - 321)) | (1L << (PRECEDING - 321)) | (1L << (PREVIOUS - 321)) | (1L << (RANGE - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (RANK - 385)) | (1L << (RATIO_TO_REPORT - 385)) | (1L << (READ - 385)) | (1L << (REF - 385)) | (1L << (REGR_AVGX - 385)) | (1L << (REGR_AVGY - 385)) | (1L << (REGR_COUNT - 385)) | (1L << (REGR_ICPT - 385)) | (1L << (REGR_INTERCEPT - 385)) | (1L << (REGR_R2 - 385)) | (1L << (REGR_SLOPE - 385)) | (1L << (REGR_SXX - 385)) | (1L << (REGR_SXY - 385)) | (1L << (REGR_SYY - 385)) | (1L << (RESPECT - 385)) | (1L << (ROW_NUMBER - 385)) | (1L << (ROWS - 385)) | (1L << (RR - 385)) | (1L << (RS - 385)) | (1L << (SBCS - 385)) | (1L << (SELECTIVITY - 385)) | (1L << (SETS - 385)) | (1L << (SHARE - 385)) | (1L << (SKIP_ - 385)) | (1L << (STDDEV - 385)) | (1L << (STDDEV_POP - 385)) | (1L << (STDDEV_SAMP - 385)) | (1L << (SUM - 385)) | (1L << (TOKEN - 385)) | (1L << (UNBOUNDED - 385)) | (1L << (UNPACK - 385)) | (1L << (UR - 385)) | (1L << (USE - 385)) | (1L << (VAR - 385)) | (1L << (VARIANCE - 385)) | (1L << (VARIANCE_SAMP - 385)) | (1L << (VAR_POP - 385)) | (1L << (VAR_SAMP - 385)) | (1L << (VARYING - 385)) | (1L << (WITHOUT - 385)) | (1L << (XML - 385)) | (1L << (XMLAGG - 385)) | (1L << (COLUMNS - 385)) | (1L << (SQLID - 385)) | (1L << (ORDINALITY - 385)) | (1L << (SYSTEM_TIME - 385)) | (1L << (BUSINESS_TIME - 385)) | (1L << (MULTIPLIER - 385)) | (1L << (UNNEST - 385)) | (1L << (CROSS - 385)) | (1L << (CALLER - 385)) | (1L << (CLIENT - 385)) | (1L << (POSITIONING - 385)) | (1L << (SCROLL - 385)) | (1L << (ACTION - 385)) | (1L << (ASSEMBLE - 385)) | (1L << (C_ - 385)) | (1L << (CALLED - 385)) | (1L << (COBOL - 385)) | (1L << (DB2 - 385)) | (1L << (DEFINER - 385)) | (1L << (DISPATCH - 385)) | (1L << (ENVIRONMENT - 385)) | (1L << (FAILURE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (FAILURES - 449)) | (1L << (JAVA - 449)) | (1L << (MAIN - 449)) | (1L << (NAME - 449)) | (1L << (OPTIONS - 449)) | (1L << (PARALLEL - 449)) | (1L << (PLI - 449)) | (1L << (REGISTERS - 449)) | (1L << (RESIDENT - 449)) | (1L << (SECURED - 449)) | (1L << (SPECIAL - 449)) | (1L << (SQL - 449)) | (1L << (STOP - 449)) | (1L << (SUB - 449)) | (1L << (YES - 449)) | (1L << (APPLICATION - 449)) | (1L << (CHANGED - 449)) | (1L << (COMPATIBILITY - 449)) | (1L << (COMPRESS - 449)) | (1L << (COPY - 449)) | (1L << (FREEPAGE - 449)) | (1L << (GBPCACHE - 449)) | (1L << (INCLUDE - 449)) | (1L << (MAXVALUE - 449)) | (1L << (MINVALUE - 449)) | (1L << (PCTFREE - 449)) | (1L << (REGENERATE - 449)) | (1L << (MASK - 449)) | (1L << (ENABLE - 449)) | (1L << (PERMISSION - 449)) | (1L << (ATOMIC - 449)) | (1L << (SQLEXCEPTION - 449)) | (1L << (MERGE - 449)) | (1L << (MATCHED - 449)) | (1L << (SQLSTATE - 449)) | (1L << (MESSAGE_TEXT - 449)) | (1L << (OVERRIDING - 449)) | (1L << (PORTION - 449)) | (1L << (DB2SQL - 449)) | (1L << (DEBUG - 449)) | (1L << (GENERAL - 449)) | (1L << (MODE_ - 449)) | (1L << (REXX - 449)) | (1L << (CACHE - 449)) | (1L << (CYCLE - 449)) | (1L << (INCREMENT - 449)) | (1L << (RESTART - 449)) | (1L << (DATACLAS - 449)) | (1L << (MGMTCLAS - 449)) | (1L << (REMOVE - 449)) | (1L << (STORCLAS - 449)) | (1L << (ACCESS - 449)) | (1L << (ACTIVATE - 449)) | (1L << (ALWAYS - 449)) | (1L << (APPEND - 449)) | (1L << (ARCHIVE - 449)) | (1L << (BUSINESS - 449)) | (1L << (CASCADE - 449)) | (1L << (CHANGES - 449)) | (1L << (CONTROL - 449)) | (1L << (DEACTIVATE - 449)) | (1L << (DEFERRED - 449)) | (1L << (EACH - 449)) | (1L << (ENFORCED - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (EXTRA - 513)) | (1L << (FOREIGN - 513)) | (1L << (HIDDEN_ - 513)) | (1L << (HISTORY - 513)) | (1L << (ID - 513)) | (1L << (IDENTITY - 513)) | (1L << (IMPLICITLY - 513)) | (1L << (INITIALLY - 513)) | (1L << (INLINE - 513)) | (1L << (OPERATION - 513)) | (1L << (ORGANIZE - 513)) | (1L << (OVERLAPS - 513)) | (1L << (PACKAGE_NAME - 513)) | (1L << (PACKAGE_SCHEMA - 513)) | (1L << (PACKAGE_VERSION - 513)) | (1L << (PRIMARY - 513)) | (1L << (RESET - 513)) | (1L << (ROTATE - 513)) | (1L << (START - 513)) | (1L << (SYSIBM - 513)) | (1L << (TRANSACTION - 513)) | (1L << (XMLSCHEMA - 513)) | (1L << (ELEMENT - 513)) | (1L << (URL - 513)) | (1L << (NAMESPACE - 513)) | (1L << (LOCATION - 513)) | (1L << (SYSXSR - 513)) | (1L << (ALGORITHM - 513)) | (1L << (FIXEDLENGTH - 513)) | (1L << (HUFFMAN - 513)) | (1L << (LOB - 513)) | (1L << (LOG - 513)) | (1L << (LOGGED - 513)) | (1L << (MAXPARTITIONS - 513)) | (1L << (MAXROWS - 513)) | (1L << (MEMBER - 513)) | (1L << (MOVE - 513)) | (1L << (PAGE - 513)) | (1L << (PAGENUM - 513)) | (1L << (PENDING - 513)) | (1L << (RELATIVE - 513)) | (1L << (SEGSIZE - 513)) | (1L << (TRACKMOD - 513)) | (1L << (ADDRESS - 513)) | (1L << (ATTRIBUTES - 513)) | (1L << (AUTHENTICATION - 513)) | (1L << (AUTHID - 513)) | (1L << (CONTEXT - 513)) | (1L << (JOBNAME - 513)) | (1L << (OWNER - 513)) | (1L << (PROFILE - 513)) | (1L << (QUALIFIER - 513)) | (1L << (SERVAUTH - 513)) | (1L << (TRUSTED - 513)) | (1L << (SECTION - 513)) | (1L << (ACTIVE - 513)) | (1L << (VERSION - 513)) | (1L << (ALIAS - 513)) | (1L << (WORK - 513)) | (1L << (WORKFILE - 513)) | (1L << (SYSDEFLT - 513)) | (1L << (NULTERM - 513)) | (1L << (STRUCTURE - 513)) | (1L << (GENERIC - 513)))) != 0) || ((((_la - 577)) & ~0x3f) == 0 && ((1L << (_la - 577)) & ((1L << (TEMPORARY - 577)) | (1L << (DEFER - 577)) | (1L << (DEFINE - 577)) | (1L << (EXCLUDE - 577)) | (1L << (GENERATE - 577)) | (1L << (KEYS - 577)) | (1L << (XMLPATTERN - 577)) | (1L << (SIZE - 577)) | (1L << (EVERY - 577)) | (1L << (ABSOLUTE - 577)) | (1L << (ACCELERATOR - 577)) | (1L << (EXCLUDING - 577)) | (1L << (INCLUDING - 577)) | (1L << (DEFAULTS - 577)) | (1L << (MODIFIERS - 577)) | (1L << (OPTION - 577)) | (1L << (PRESERVE - 577)) | (1L << (BOTH - 577)) | (1L << (DESCRIBE - 577)) | (1L << (LABELS - 577)) | (1L << (NAMES - 577)) | (1L << (OUTPUT - 577)) | (1L << (EXCHANGE - 577)) | (1L << (STABILIZED - 577)) | (1L << (STMTCACHE - 577)) | (1L << (STMTID - 577)) | (1L << (STMTTOKEN - 577)) | (1L << (STARTING - 577)) | (1L << (CATALOG_NAME - 577)) | (1L << (CONDITION_NUMBER - 577)) | (1L << (CURSOR_NAME - 577)) | (1L << (DB2_AUTHENTICATION_TYPE - 577)) | (1L << (DB2_AUTHORIZATION_ID - 577)) | (1L << (DB2_CONNECTION_STATE - 577)) | (1L << (DB2_CONNECTION_STATUS - 577)) | (1L << (DB2_ENCRYPTION_TYPE - 577)) | (1L << (DB2_ERROR_CODE1 - 577)) | (1L << (DB2_ERROR_CODE2 - 577)) | (1L << (DB2_ERROR_CODE3 - 577)) | (1L << (DB2_ERROR_CODE4 - 577)) | (1L << (DB2_GET_DIAGNOSTICS_DIAGNOSTICS - 577)) | (1L << (DB2_INTERNAL_ERROR_POINTER - 577)) | (1L << (DB2_LAST_ROW - 577)) | (1L << (DB2_LINE_NUMBER - 577)) | (1L << (DB2_MESSAGE_ID - 577)) | (1L << (DB2_MODULE_DETECTING_ERROR - 577)) | (1L << (DB2_NUMBER_PARAMETER_MARKERS - 577)) | (1L << (DB2_NUMBER_RESULT_SETS - 577)) | (1L << (DB2_NUMBER_ROWS - 577)) | (1L << (DB2_ORDINAL_TOKEN_ - 577)) | (1L << (DB2_PRODUCT_ID - 577)) | (1L << (DB2_REASON_CODE - 577)) | (1L << (DB2_RETURNED_SQLCODE - 577)) | (1L << (DB2_RETURN_STATUS - 577)) | (1L << (DB2_ROW_NUMBER - 577)) | (1L << (DB2_SERVER_CLASS_NAME - 577)) | (1L << (DB2_SQL_ATTR_CURSOR_HOLD - 577)) | (1L << (DB2_SQL_ATTR_CURSOR_ROWSET - 577)) | (1L << (DB2_SQL_ATTR_CURSOR_SCROLLABLE - 577)) | (1L << (DB2_SQL_ATTR_CURSOR_SENSITIVITY - 577)) | (1L << (DB2_SQL_ATTR_CURSOR_TYPE - 577)) | (1L << (DB2_SQLERRD1 - 577)) | (1L << (DB2_SQLERRD2 - 577)))) != 0) || ((((_la - 641)) & ~0x3f) == 0 && ((1L << (_la - 641)) & ((1L << (DB2_SQLERRD3 - 641)) | (1L << (DB2_SQLERRD4 - 641)) | (1L << (DB2_SQLERRD5 - 641)) | (1L << (DB2_SQLERRD6 - 641)) | (1L << (DB2_SQLERRD_SET - 641)) | (1L << (DB2_SQL_NESTING_LEVEL - 641)) | (1L << (DB2_TOKEN_COUNT - 641)) | (1L << (DIAGNOSTICS - 641)) | (1L << (MORE_ - 641)) | (1L << (NUMBER - 641)) | (1L << (RETURNED_SQLSTATE - 641)) | (1L << (ROW_COUNT - 641)) | (1L << (SERVER_NAME - 641)) | (1L << (STACKED - 641)) | (1L << (CREATETAB - 641)) | (1L << (CREATETS - 641)) | (1L << (DBADM - 641)) | (1L << (DBCTRL - 641)) | (1L << (DBMAINT - 641)) | (1L << (DISPLAYDB - 641)) | (1L << (IMAGCOPY - 641)) | (1L << (LOAD - 641)) | (1L << (PACKADM - 641)) | (1L << (RECOVERDB - 641)) | (1L << (REORG - 641)) | (1L << (REPAIR - 641)) | (1L << (STARTDB - 641)) | (1L << (STATS - 641)) | (1L << (STOPDB - 641)) | (1L << (BIND - 641)) | (1L << (ALTERIN - 641)) | (1L << (CREATEIN - 641)) | (1L << (DROPIN - 641)) | (1L << (USAGE - 641)) | (1L << (ACCESSCTRL - 641)) | (1L << (BINDADD - 641)) | (1L << (BINDAGENT - 641)) | (1L << (BSDS - 641)) | (1L << (CREATEALIAS - 641)) | (1L << (CREATEDBA - 641)) | (1L << (CREATEDBC - 641)) | (1L << (CREATE_SECURE_OBJECT - 641)) | (1L << (CREATESG - 641)) | (1L << (CREATETMTAB - 641)) | (1L << (DATAACCESS - 641)) | (1L << (DEBUGSESSION - 641)) | (1L << (DISPLAY - 641)) | (1L << (MONITOR1 - 641)) | (1L << (MONITOR2 - 641)) | (1L << (RECOVER - 641)) | (1L << (SQLADM - 641)) | (1L << (STOPALL - 641)) | (1L << (STOSPACE - 641)) | (1L << (SYSADM - 641)) | (1L << (SYSCTRL - 641)) | (1L << (SYSOPR - 641)) | (1L << (TRACE - 641)) | (1L << (UNLOAD - 641)) | (1L << (WRITE - 641)) | (1L << (ABS - 641)) | (1L << (ABSVAL - 641)) | (1L << (ACOS - 641)) | (1L << (ADD_DAYS - 641)) | (1L << (ADD_MONTHS - 641)))) != 0) || ((((_la - 705)) & ~0x3f) == 0 && ((1L << (_la - 705)) & ((1L << (ARRAY_DELETE - 705)) | (1L << (ARRAY_FIRST - 705)) | (1L << (ARRAY_LAST - 705)) | (1L << (ARRAY_NEXT - 705)) | (1L << (ARRAY_PRIOR - 705)) | (1L << (ARRAY_TRIM - 705)) | (1L << (ASCII - 705)) | (1L << (ASCII_CHR - 705)) | (1L << (ASCIISTR - 705)) | (1L << (ASCII_STR - 705)) | (1L << (ASIN - 705)) | (1L << (ATAN - 705)) | (1L << (ATAN2 - 705)) | (1L << (ATANH - 705)) | (1L << (BIGINT - 705)) | (1L << (BINARY - 705)) | (1L << (BITAND - 705)) | (1L << (BITANDNOT - 705)) | (1L << (BITNOT - 705)) | (1L << (BITOR - 705)) | (1L << (BITXOR - 705)) | (1L << (BLOB - 705)) | (1L << (BTRIM - 705)) | (1L << (CARDINALITY - 705)) | (1L << (CCSID_ENCODING - 705)) | (1L << (CEIL - 705)) | (1L << (CEILING - 705)) | (1L << (CHAR9 - 705)) | (1L << (CHARACTER_LENGTH - 705)) | (1L << (CHAR_LENGTH - 705)) | (1L << (CHR - 705)) | (1L << (CLOB - 705)) | (1L << (COALESCE - 705)) | (1L << (COLLATION_KEY - 705)) | (1L << (COMPARE_DECFLOAT - 705)) | (1L << (COS - 705)) | (1L << (COSH - 705)) | (1L << (DATE - 705)) | (1L << (DAYOFMONTH - 705)) | (1L << (DAYOFWEEK - 705)) | (1L << (DAYOFWEEK_ISO - 705)) | (1L << (DAYOFYEAR - 705)) | (1L << (DAYS_BETWEEN - 705)) | (1L << (DBCLOB - 705)) | (1L << (DEC - 705)) | (1L << (DECFLOAT - 705)) | (1L << (DECFLOAT_FORMAT - 705)) | (1L << (DECFLOAT_SORTKEY - 705)) | (1L << (DECIMAL - 705)) | (1L << (DECODE - 705)) | (1L << (DECRYPT_BINARY - 705)) | (1L << (DECRYPT_BIT - 705)) | (1L << (DECRYPT_CHAR - 705)) | (1L << (DECRYPT_DATAKEY_BIGINT - 705)) | (1L << (DECRYPT_DATAKEY_BIT - 705)) | (1L << (DECRYPT_DATAKEY_CLOB - 705)) | (1L << (DECRYPT_DATAKEY_DBCLOB - 705)) | (1L << (DECRYPT_DATAKEY_DECIMAL - 705)) | (1L << (DECRYPT_DATAKEY_INTEGER - 705)) | (1L << (DECRYPT_DATAKEY_VARCHAR - 705)) | (1L << (DECRYPT_DATAKEY_VARGRAPHIC - 705)) | (1L << (DECRYPT_DB - 705)) | (1L << (DEGREES - 705)) | (1L << (DIFFERENCE - 705)))) != 0) || ((((_la - 769)) & ~0x3f) == 0 && ((1L << (_la - 769)) & ((1L << (DIGITS - 769)) | (1L << (DOUBLE_PRECISION - 769)) | (1L << (DSN_XMLVALIDATE - 769)) | (1L << (EBCDIC_CHR - 769)) | (1L << (EBCDIC_STR - 769)) | (1L << (ENCRYPT_DATAKEY - 769)) | (1L << (ENCRYPT_TDES - 769)) | (1L << (EXP - 769)) | (1L << (EXTRACT - 769)) | (1L << (FLOAT - 769)) | (1L << (FLOOR - 769)) | (1L << (GENERATE_UNIQUE - 769)) | (1L << (GENERATE_UNIQUE_BINARY - 769)) | (1L << (GETHINT - 769)) | (1L << (GETVARIABLE - 769)) | (1L << (GRAPHIC - 769)) | (1L << (GREATEST - 769)) | (1L << (HASH - 769)) | (1L << (HASH_CRC32 - 769)) | (1L << (HASH_MD5 - 769)) | (1L << (HASH_SHA1 - 769)) | (1L << (HASH_SHA256 - 769)) | (1L << (HEX - 769)) | (1L << (IDENTITY_VAL_LOCAL - 769)) | (1L << (IFNULL - 769)) | (1L << (INSTR - 769)) | (1L << (INT - 769)) | (1L << (INTEGER - 769)) | (1L << (JULIAN_DAY - 769)) | (1L << (LAST_DAY - 769)) | (1L << (LCASE - 769)) | (1L << (LEAST - 769)) | (1L << (LENGTH - 769)) | (1L << (LN - 769)) | (1L << (LOCATE - 769)) | (1L << (LOCATE_IN_STRING - 769)) | (1L << (LOG10 - 769)) | (1L << (LOWER - 769)) | (1L << (LPAD - 769)) | (1L << (LTRIM - 769)) | (1L << (MAX - 769)) | (1L << (MAX_CARDINALITY - 769)) | (1L << (MIDNIGHT_SECONDS - 769)) | (1L << (MIN - 769)) | (1L << (MINUTE - 769)) | (1L << (MOD - 769)) | (1L << (MONTHS_BETWEEN - 769)) | (1L << (MQREAD - 769)) | (1L << (MQREADCLOB - 769)) | (1L << (MQRECEIVE - 769)) | (1L << (MQRECEIVECLOB - 769)) | (1L << (MQSEND - 769)) | (1L << (MULTIPLY_ALT - 769)) | (1L << (NEXT_DAY - 769)) | (1L << (NEXT_MONTH - 769)) | (1L << (NORMALIZE_DECFLOAT - 769)) | (1L << (NORMALIZE_STRING - 769)) | (1L << (NULLIF - 769)) | (1L << (NVL - 769)) | (1L << (OVERLAY - 769)) | (1L << (PACK - 769)) | (1L << (POSITION - 769)) | (1L << (POSSTR - 769)) | (1L << (POW - 769)))) != 0) || ((((_la - 833)) & ~0x3f) == 0 && ((1L << (_la - 833)) & ((1L << (POWER - 833)) | (1L << (QUANTIZE - 833)) | (1L << (QUARTER - 833)) | (1L << (RADIANS - 833)) | (1L << (RAISE_ERROR - 833)) | (1L << (RAND - 833)) | (1L << (RANDOM - 833)) | (1L << (REAL - 833)) | (1L << (REGEXP_COUNT - 833)) | (1L << (REGEXP_INSTR - 833)) | (1L << (REGEXP_LIKE - 833)) | (1L << (REGEXP_REPLACE - 833)) | (1L << (REGEXP_SUBSTR - 833)) | (1L << (REPLACE - 833)) | (1L << (RID - 833)) | (1L << (ROUND - 833)) | (1L << (ROUND_TIMESTAMP - 833)) | (1L << (ROWID - 833)) | (1L << (RPAD - 833)) | (1L << (RTRIM - 833)) | (1L << (SCORE - 833)) | (1L << (SIGN - 833)) | (1L << (SIN - 833)) | (1L << (SINH - 833)) | (1L << (SMALLINT - 833)) | (1L << (SOAPHTTPC - 833)) | (1L << (SOAPHTTPNC - 833)) | (1L << (SOAPHTTPNV - 833)) | (1L << (SOAPHTTPV - 833)) | (1L << (SOUNDEX - 833)) | (1L << (SPACE - 833)) | (1L << (SQRT - 833)) | (1L << (STRIP - 833)) | (1L << (STRLEFT - 833)) | (1L << (STRPOS - 833)) | (1L << (STRRIGHT - 833)) | (1L << (SUBSTR - 833)) | (1L << (SUBSTRING - 833)) | (1L << (TAN - 833)) | (1L << (TANH - 833)) | (1L << (TIME - 833)) | (1L << (TIMESTAMP - 833)) | (1L << (TIMESTAMPADD - 833)) | (1L << (TIMESTAMPDIFF - 833)) | (1L << (TIMESTAMP_FORMAT - 833)) | (1L << (TIMESTAMP_ISO - 833)) | (1L << (TIMESTAMP_TZ - 833)) | (1L << (TO_CHAR - 833)) | (1L << (TO_CLOB - 833)) | (1L << (TO_DATE - 833)) | (1L << (TO_NUMBER - 833)) | (1L << (TOTALORDER - 833)) | (1L << (TO_TIMESTAMP - 833)) | (1L << (TRANSLATE - 833)) | (1L << (TRIM - 833)) | (1L << (TRIM_ARRAY - 833)) | (1L << (TRUNC - 833)) | (1L << (TRUNC_TIMESTAMP - 833)) | (1L << (UCASE - 833)) | (1L << (UNICODE - 833)) | (1L << (UNICODE_STR - 833)) | (1L << (UNISTR - 833)) | (1L << (UPPER - 833)) | (1L << (VARBINARY - 833)))) != 0) || ((((_la - 897)) & ~0x3f) == 0 && ((1L << (_la - 897)) & ((1L << (VARCHAR - 897)) | (1L << (VARCHAR9 - 897)) | (1L << (VARCHAR_BIT_FORMAT - 897)) | (1L << (VARCHAR_FORMAT - 897)) | (1L << (VARGRAPHIC - 897)) | (1L << (VERIFY_GROUP_FOR_USER - 897)) | (1L << (VERIFY_ROLE_FOR_USER - 897)) | (1L << (VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER - 897)) | (1L << (WEEK - 897)) | (1L << (WEEK_ISO - 897)) | (1L << (WRAP - 897)) | (1L << (XMLATTRIBUTES - 897)) | (1L << (XMLCOMMENT - 897)) | (1L << (XMLCONCAT - 897)) | (1L << (XMLDOCUMENT - 897)) | (1L << (XMLELEMENT - 897)) | (1L << (XMLFOREST - 897)) | (1L << (XMLMODIFY - 897)) | (1L << (XMLPARSE - 897)) | (1L << (XMLPI - 897)) | (1L << (XMLQUERY - 897)) | (1L << (XMLSERIALIZE - 897)) | (1L << (XMLTEXT - 897)) | (1L << (XMLXSROBJECTID - 897)) | (1L << (XSLTRANSFORM - 897)) | (1L << (CURRENT_ACCELERATOR - 897)) | (1L << (CURRENT_APPLICATION_COMPATIBILITY - 897)) | (1L << (CURRENT_APPLICATION_ENCODING_SCHEME - 897)) | (1L << (CURRENT_CLIENT_ACCTNG - 897)) | (1L << (CURRENT_CLIENT_APPLNAME - 897)) | (1L << (CURRENT_CLIENT_CORR_TOKEN - 897)) | (1L << (CURRENT_CLIENT_USERID - 897)) | (1L << (CURRENT_CLIENT_WRKSTNNAME - 897)) | (1L << (CURRENT_DATE - 897)) | (1L << (CURRENT_DEBUG_MODE - 897)) | (1L << (CURRENT_DECFLOAT_ROUNDING_MODE - 897)) | (1L << (CURRENT_DEGREE - 897)) | (1L << (CURRENT_EXPLAIN_MODE - 897)) | (1L << (CURRENT_GET_ACCEL_ARCHIVE - 897)) | (1L << (CURRENT_LOCALE_LC_CTYPE - 897)) | (1L << (CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION - 897)) | (1L << (CURRENT_MEMBER - 897)) | (1L << (CURRENT_OPTIMIZATION_HINT - 897)) | (1L << (CURRENT_PACKAGE_PATH - 897)) | (1L << (CURRENT_PACKAGESET - 897)) | (1L << (CURRENT_PATH - 897)) | (1L << (CURRENT_PRECISION - 897)) | (1L << (CURRENT_QUERY_ACCELERATION - 897)) | (1L << (CURRENT_QUERY_ACCELERATION_WAITFORDATA - 897)) | (1L << (CURRENT_REFRESH_AGE - 897)) | (1L << (CURRENT_ROUTINE_VERSION - 897)) | (1L << (CURRENT_RULES - 897)) | (1L << (CURRENT_SCHEMA - 897)) | (1L << (CURRENT_SERVER - 897)) | (1L << (CURRENT_SQLID - 897)) | (1L << (CURRENT_TEMPORAL_BUSINESS_TIME - 897)) | (1L << (CURRENT_TEMPORAL_SYSTEM_TIME - 897)) | (1L << (CURRENT_TIME - 897)) | (1L << (CURRENT_TIMESTAMP - 897)) | (1L << (CURRENT_TIME_ZONE - 897)) | (1L << (ENCRYPTION_PASSWORD - 897)) | (1L << (SESSION_TIME_ZONE - 897)) | (1L << (SESSION_USER - 897)) | (1L << (USER - 897)))) != 0) || ((((_la - 961)) & ~0x3f) == 0 && ((1L << (_la - 961)) & ((1L << (ADMIN_TASK_LIST - 961)) | (1L << (ADMIN_TASK_OUTPUT - 961)) | (1L << (ADMIN_TASK_STATUS - 961)) | (1L << (BLOCKING_THREADS - 961)) | (1L << (MQREADALL - 961)) | (1L << (MQREADALLCLOB - 961)) | (1L << (MQRECEIVEALL - 961)) | (1L << (MQRECEIVEALLCLOB - 961)) | (1L << (XMLTABLE - 961)) | (1L << (SQLIDENTIFIER - 961)))) != 0)) {
				{
				setState(7379);
				expression();
				setState(7384);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7380);
					match(COMMA);
					setState(7381);
					expression();
					}
					}
					setState(7386);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(7389);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggregateFunctionInvocationContext extends ParserRuleContext {
		public AggregateFunctionContext aggregateFunction() {
			return getRuleContext(AggregateFunctionContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode SPLAT() { return getToken(DB2zSQLParser.SPLAT, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public TerminalNode DISTINCT() { return getToken(DB2zSQLParser.DISTINCT, 0); }
		public AggregateFunctionInvocationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregateFunctionInvocation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAggregateFunctionInvocation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAggregateFunctionInvocation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAggregateFunctionInvocation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggregateFunctionInvocationContext aggregateFunctionInvocation() throws RecognitionException {
		AggregateFunctionInvocationContext _localctx = new AggregateFunctionInvocationContext(_ctx, getState());
		enterRule(_localctx, 880, RULE_aggregateFunctionInvocation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7394);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,864,_ctx) ) {
			case 1:
				{
				setState(7391);
				schemaName();
				setState(7392);
				match(DOT);
				}
				break;
			}
			setState(7396);
			aggregateFunction();
			setState(7397);
			match(LPAREN);
			setState(7399);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,865,_ctx) ) {
			case 1:
				{
				setState(7398);
				match(DISTINCT);
				}
				break;
			}
			setState(7403);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LPAREN:
			case COLON:
			case NONNUMERICLITERAL:
			case INTEGERLITERAL:
			case NUMERICLITERAL:
			case INSTEAD:
			case NEW:
			case NEW_TABLE:
			case OLD_TABLE:
			case REFERENCING:
			case BASED:
			case UPON:
			case ADD:
			case AFTER:
			case ALL:
			case ALLOCATE:
			case ALLOW:
			case ALTER:
			case ALTERAND:
			case ANY:
			case ARRAY:
			case ARRAY_EXISTS:
			case AS:
			case ASENSITIVE:
			case ASSOCIATE:
			case ASUTIME:
			case AT:
			case AUDIT:
			case AUX:
			case AUXILIARY:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BUFFERPOOL:
			case BUFFERPOOLS:
			case BY:
			case CALL:
			case CAPTURE:
			case CASCADED:
			case CASE:
			case CAST:
			case CCSID:
			case CHAR:
			case CHARACTER:
			case CHECK:
			case CLONE:
			case CLOSE:
			case CLUSTER:
			case COLLECTION:
			case COLLID:
			case COLUMN:
			case COMMENT:
			case COMMIT:
			case CONCAT:
			case CONDITION:
			case CONNECT:
			case CONNECTION:
			case CONSTRAINT:
			case CONTAINS:
			case CONTENT:
			case CONTINUE:
			case CREATE:
			case CUBE:
			case CURRENT:
			case CURRENT_LC_CTYPE:
			case CURRVAL:
			case CURSOR:
			case DATA:
			case DATABASE:
			case DAY:
			case DAYS:
			case DBINFO:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DISABLE:
			case DISALLOW:
			case DISTINCT:
			case DO:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSSIZE:
			case DYNAMIC:
			case EDITPROC:
			case ELSE:
			case ELSEIF:
			case ENCODING:
			case ENCRYPTION:
			case END:
			case END_EXEC:
			case ENDING:
			case ERASE:
			case ESCAPE:
			case EXCEPT:
			case EXCEPTION:
			case EXEC_SQL:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case FENCED:
			case FETCH:
			case FIELDPROC:
			case FINAL:
			case FIRST:
			case FOR:
			case FREE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANT:
			case GROUP:
			case HANDLER:
			case HAVING:
			case HOLD:
			case HOUR:
			case HOURS:
			case IF:
			case IMMEDIATE:
			case IN:
			case INCLUSIVE:
			case INDEX:
			case INDEXBP:
			case INHERIT:
			case INNER:
			case INOUT:
			case INSENSITIVE:
			case INSERT:
			case INTERSECT:
			case INTO:
			case IS:
			case ISOBID:
			case ITERATE:
			case JAR:
			case JOIN:
			case KEEP:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LAST:
			case LC_CTYPE:
			case LEAVE:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOCALE:
			case LOCATOR:
			case LOCATORS:
			case LOCK:
			case LOCKMAX:
			case LOCKSIZE:
			case LONG:
			case LOOP:
			case MAINTAINED:
			case MATERIALIZED:
			case MICROSECOND:
			case MICROSECONDS:
			case MODIFIES:
			case MONTH:
			case MONTHS:
			case NEXT:
			case NEXTVAL:
			case NO:
			case NONE:
			case NOT:
			case NULL:
			case NULLS:
			case NUMPARTS:
			case OBID:
			case OF:
			case OFFSET:
			case OLD:
			case ON:
			case OPEN:
			case OPTIMIZATION:
			case OPTIMIZE:
			case OR:
			case ORDER:
			case ORGANIZATION:
			case OUT:
			case OUTER:
			case PACKAGE:
			case PADDED:
			case PARAMETER:
			case PART:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONING:
			case PATH:
			case PERIOD:
			case PIECESIZE:
			case PLAN:
			case PRECISION:
			case PREPARE:
			case PREVVAL:
			case PRIOR:
			case PRIQTY:
			case PRIVILEGES:
			case PROCEDURE:
			case PROGRAM:
			case PSID:
			case PUBLIC:
			case QUERY:
			case QUERYNO:
			case READS:
			case REFERENCES:
			case REFRESH:
			case RELEASE:
			case RENAME:
			case REPEAT:
			case RESIGNAL:
			case RESTRICT:
			case RESULT:
			case RESULT_SET_LOCATOR:
			case RETURN:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUND_CEILING:
			case ROUND_DOWN:
			case ROUND_FLOOR:
			case ROUND_HALF_DOWN:
			case ROUND_HALF_EVEN:
			case ROUND_HALF_UP:
			case ROUND_UP:
			case ROW:
			case ROWSET:
			case RUN:
			case SAVEPOINT:
			case SCHEMA:
			case SCRATCHPAD:
			case SECOND:
			case SECONDS:
			case SECQTY:
			case SECURITY:
			case SELECT:
			case SENSITIVE:
			case SEQUENCE:
			case SET:
			case SIGNAL:
			case SIMPLE:
			case SOME:
			case SOURCE:
			case SPECIFIC:
			case STANDARD:
			case STATEMENT:
			case STATIC:
			case STAY:
			case STOGROUP:
			case STORES:
			case STYLE:
			case SUMMARY:
			case SYNONYM:
			case SYSDATE:
			case SYSTEM:
			case SYSTIMESTAMP:
			case TABLE:
			case TABLESPACE:
			case THEN:
			case TO:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNDO:
			case UNION:
			case UNIQUE:
			case UNTIL:
			case UPDATE:
			case USING:
			case VALIDPROC:
			case VALUE:
			case VALUES:
			case VARIABLE:
			case VARIANT:
			case VCAT:
			case VERSIONING:
			case VIEW:
			case VOLATILE:
			case VOLUMES:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WLM:
			case XMLCAST:
			case XMLEXISTS:
			case XMLNAMESPACES:
			case YEAR:
			case YEARS:
			case ZONE:
			case AND:
			case ARRAY_AGG:
			case ASC:
			case AVG:
			case BIT:
			case CHANGE:
			case CODEUNITS16:
			case CODEUNITS32:
			case CORR:
			case CORRELATION:
			case COUNT:
			case COUNT_BIG:
			case COVAR:
			case COVARIANCE:
			case COVARIANCE_SAMP:
			case COVAR_POP:
			case COVAR_SAMP:
			case CS:
			case CUME_DIST:
			case DENSE_RANK:
			case DESC:
			case EBCDIC:
			case EXCLUSIVE:
			case FIRST_VALUE:
			case FOLLOWING:
			case GROUPING:
			case IGNORE:
			case INDICATOR:
			case INPUT:
			case ISNULL:
			case LAG:
			case LARGE:
			case LAST_VALUE:
			case LEAD:
			case LISTAGG:
			case LOCKED:
			case LOCKS:
			case MEDIAN:
			case MINUTES:
			case MIXED:
			case NOTNULL:
			case NTH_VALUE:
			case NTILE:
			case NUMERIC:
			case OBJECT:
			case OCTETS:
			case ONLY:
			case OVER:
			case PASSING:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PERCENT_RANK:
			case PRECEDING:
			case PREVIOUS:
			case RANGE:
			case RANK:
			case RATIO_TO_REPORT:
			case READ:
			case REF:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_ICPT:
			case REGR_INTERCEPT:
			case REGR_R2:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case RESPECT:
			case ROW_NUMBER:
			case ROWS:
			case RR:
			case RS:
			case SBCS:
			case SELECTIVITY:
			case SETS:
			case SHARE:
			case SKIP_:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case TOKEN:
			case UNBOUNDED:
			case UNPACK:
			case UR:
			case USE:
			case VAR:
			case VARIANCE:
			case VARIANCE_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARYING:
			case WITHOUT:
			case XML:
			case XMLAGG:
			case COLUMNS:
			case SQLID:
			case ORDINALITY:
			case SYSTEM_TIME:
			case BUSINESS_TIME:
			case MULTIPLIER:
			case UNNEST:
			case CROSS:
			case CALLER:
			case CLIENT:
			case POSITIONING:
			case SCROLL:
			case ACTION:
			case ASSEMBLE:
			case C_:
			case CALLED:
			case COBOL:
			case DB2:
			case DEFINER:
			case DISPATCH:
			case ENVIRONMENT:
			case FAILURE:
			case FAILURES:
			case JAVA:
			case MAIN:
			case NAME:
			case OPTIONS:
			case PARALLEL:
			case PLI:
			case REGISTERS:
			case RESIDENT:
			case SECURED:
			case SPECIAL:
			case SQL:
			case STOP:
			case SUB:
			case YES:
			case APPLICATION:
			case CHANGED:
			case COMPATIBILITY:
			case COMPRESS:
			case COPY:
			case FREEPAGE:
			case GBPCACHE:
			case INCLUDE:
			case MAXVALUE:
			case MINVALUE:
			case PCTFREE:
			case REGENERATE:
			case MASK:
			case ENABLE:
			case PERMISSION:
			case ATOMIC:
			case SQLEXCEPTION:
			case MERGE:
			case MATCHED:
			case SQLSTATE:
			case MESSAGE_TEXT:
			case OVERRIDING:
			case PORTION:
			case DB2SQL:
			case DEBUG:
			case GENERAL:
			case MODE_:
			case REXX:
			case CACHE:
			case CYCLE:
			case INCREMENT:
			case RESTART:
			case DATACLAS:
			case MGMTCLAS:
			case REMOVE:
			case STORCLAS:
			case ACCESS:
			case ACTIVATE:
			case ALWAYS:
			case APPEND:
			case ARCHIVE:
			case BUSINESS:
			case CASCADE:
			case CHANGES:
			case CONTROL:
			case DEACTIVATE:
			case DEFERRED:
			case EACH:
			case ENFORCED:
			case EXTRA:
			case FOREIGN:
			case HIDDEN_:
			case HISTORY:
			case ID:
			case IDENTITY:
			case IMPLICITLY:
			case INITIALLY:
			case INLINE:
			case OPERATION:
			case ORGANIZE:
			case OVERLAPS:
			case PACKAGE_NAME:
			case PACKAGE_SCHEMA:
			case PACKAGE_VERSION:
			case PRIMARY:
			case RESET:
			case ROTATE:
			case START:
			case SYSIBM:
			case TRANSACTION:
			case XMLSCHEMA:
			case ELEMENT:
			case URL:
			case NAMESPACE:
			case LOCATION:
			case SYSXSR:
			case ALGORITHM:
			case FIXEDLENGTH:
			case HUFFMAN:
			case LOB:
			case LOG:
			case LOGGED:
			case MAXPARTITIONS:
			case MAXROWS:
			case MEMBER:
			case MOVE:
			case PAGE:
			case PAGENUM:
			case PENDING:
			case RELATIVE:
			case SEGSIZE:
			case TRACKMOD:
			case ADDRESS:
			case ATTRIBUTES:
			case AUTHENTICATION:
			case AUTHID:
			case CONTEXT:
			case JOBNAME:
			case OWNER:
			case PROFILE:
			case QUALIFIER:
			case SERVAUTH:
			case TRUSTED:
			case SECTION:
			case ACTIVE:
			case VERSION:
			case ALIAS:
			case WORK:
			case WORKFILE:
			case SYSDEFLT:
			case NULTERM:
			case STRUCTURE:
			case GENERIC:
			case TEMPORARY:
			case DEFER:
			case DEFINE:
			case EXCLUDE:
			case GENERATE:
			case KEYS:
			case XMLPATTERN:
			case SIZE:
			case EVERY:
			case ABSOLUTE:
			case ACCELERATOR:
			case EXCLUDING:
			case INCLUDING:
			case DEFAULTS:
			case MODIFIERS:
			case OPTION:
			case PRESERVE:
			case BOTH:
			case DESCRIBE:
			case LABELS:
			case NAMES:
			case OUTPUT:
			case EXCHANGE:
			case STABILIZED:
			case STMTCACHE:
			case STMTID:
			case STMTTOKEN:
			case STARTING:
			case CATALOG_NAME:
			case CONDITION_NUMBER:
			case CURSOR_NAME:
			case DB2_AUTHENTICATION_TYPE:
			case DB2_AUTHORIZATION_ID:
			case DB2_CONNECTION_STATE:
			case DB2_CONNECTION_STATUS:
			case DB2_ENCRYPTION_TYPE:
			case DB2_ERROR_CODE1:
			case DB2_ERROR_CODE2:
			case DB2_ERROR_CODE3:
			case DB2_ERROR_CODE4:
			case DB2_GET_DIAGNOSTICS_DIAGNOSTICS:
			case DB2_INTERNAL_ERROR_POINTER:
			case DB2_LAST_ROW:
			case DB2_LINE_NUMBER:
			case DB2_MESSAGE_ID:
			case DB2_MODULE_DETECTING_ERROR:
			case DB2_NUMBER_PARAMETER_MARKERS:
			case DB2_NUMBER_RESULT_SETS:
			case DB2_NUMBER_ROWS:
			case DB2_ORDINAL_TOKEN_:
			case DB2_PRODUCT_ID:
			case DB2_REASON_CODE:
			case DB2_RETURNED_SQLCODE:
			case DB2_RETURN_STATUS:
			case DB2_ROW_NUMBER:
			case DB2_SERVER_CLASS_NAME:
			case DB2_SQL_ATTR_CURSOR_HOLD:
			case DB2_SQL_ATTR_CURSOR_ROWSET:
			case DB2_SQL_ATTR_CURSOR_SCROLLABLE:
			case DB2_SQL_ATTR_CURSOR_SENSITIVITY:
			case DB2_SQL_ATTR_CURSOR_TYPE:
			case DB2_SQLERRD1:
			case DB2_SQLERRD2:
			case DB2_SQLERRD3:
			case DB2_SQLERRD4:
			case DB2_SQLERRD5:
			case DB2_SQLERRD6:
			case DB2_SQLERRD_SET:
			case DB2_SQL_NESTING_LEVEL:
			case DB2_TOKEN_COUNT:
			case DIAGNOSTICS:
			case MORE_:
			case NUMBER:
			case RETURNED_SQLSTATE:
			case ROW_COUNT:
			case SERVER_NAME:
			case STACKED:
			case CREATETAB:
			case CREATETS:
			case DBADM:
			case DBCTRL:
			case DBMAINT:
			case DISPLAYDB:
			case IMAGCOPY:
			case LOAD:
			case PACKADM:
			case RECOVERDB:
			case REORG:
			case REPAIR:
			case STARTDB:
			case STATS:
			case STOPDB:
			case BIND:
			case ALTERIN:
			case CREATEIN:
			case DROPIN:
			case USAGE:
			case ACCESSCTRL:
			case BINDADD:
			case BINDAGENT:
			case BSDS:
			case CREATEALIAS:
			case CREATEDBA:
			case CREATEDBC:
			case CREATE_SECURE_OBJECT:
			case CREATESG:
			case CREATETMTAB:
			case DATAACCESS:
			case DEBUGSESSION:
			case DISPLAY:
			case MONITOR1:
			case MONITOR2:
			case RECOVER:
			case SQLADM:
			case STOPALL:
			case STOSPACE:
			case SYSADM:
			case SYSCTRL:
			case SYSOPR:
			case TRACE:
			case UNLOAD:
			case WRITE:
			case ABS:
			case ABSVAL:
			case ACOS:
			case ADD_DAYS:
			case ADD_MONTHS:
			case ARRAY_DELETE:
			case ARRAY_FIRST:
			case ARRAY_LAST:
			case ARRAY_NEXT:
			case ARRAY_PRIOR:
			case ARRAY_TRIM:
			case ASCII:
			case ASCII_CHR:
			case ASCIISTR:
			case ASCII_STR:
			case ASIN:
			case ATAN:
			case ATAN2:
			case ATANH:
			case BIGINT:
			case BINARY:
			case BITAND:
			case BITANDNOT:
			case BITNOT:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BTRIM:
			case CARDINALITY:
			case CCSID_ENCODING:
			case CEIL:
			case CEILING:
			case CHAR9:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case CHR:
			case CLOB:
			case COALESCE:
			case COLLATION_KEY:
			case COMPARE_DECFLOAT:
			case COS:
			case COSH:
			case DATE:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFWEEK_ISO:
			case DAYOFYEAR:
			case DAYS_BETWEEN:
			case DBCLOB:
			case DEC:
			case DECFLOAT:
			case DECFLOAT_FORMAT:
			case DECFLOAT_SORTKEY:
			case DECIMAL:
			case DECODE:
			case DECRYPT_BINARY:
			case DECRYPT_BIT:
			case DECRYPT_CHAR:
			case DECRYPT_DATAKEY_BIGINT:
			case DECRYPT_DATAKEY_BIT:
			case DECRYPT_DATAKEY_CLOB:
			case DECRYPT_DATAKEY_DBCLOB:
			case DECRYPT_DATAKEY_DECIMAL:
			case DECRYPT_DATAKEY_INTEGER:
			case DECRYPT_DATAKEY_VARCHAR:
			case DECRYPT_DATAKEY_VARGRAPHIC:
			case DECRYPT_DB:
			case DEGREES:
			case DIFFERENCE:
			case DIGITS:
			case DOUBLE_PRECISION:
			case DSN_XMLVALIDATE:
			case EBCDIC_CHR:
			case EBCDIC_STR:
			case ENCRYPT_DATAKEY:
			case ENCRYPT_TDES:
			case EXP:
			case EXTRACT:
			case FLOAT:
			case FLOOR:
			case GENERATE_UNIQUE:
			case GENERATE_UNIQUE_BINARY:
			case GETHINT:
			case GETVARIABLE:
			case GRAPHIC:
			case GREATEST:
			case HASH:
			case HASH_CRC32:
			case HASH_MD5:
			case HASH_SHA1:
			case HASH_SHA256:
			case HEX:
			case IDENTITY_VAL_LOCAL:
			case IFNULL:
			case INSTR:
			case INT:
			case INTEGER:
			case JULIAN_DAY:
			case LAST_DAY:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LN:
			case LOCATE:
			case LOCATE_IN_STRING:
			case LOG10:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAX:
			case MAX_CARDINALITY:
			case MIDNIGHT_SECONDS:
			case MIN:
			case MINUTE:
			case MOD:
			case MONTHS_BETWEEN:
			case MQREAD:
			case MQREADCLOB:
			case MQRECEIVE:
			case MQRECEIVECLOB:
			case MQSEND:
			case MULTIPLY_ALT:
			case NEXT_DAY:
			case NEXT_MONTH:
			case NORMALIZE_DECFLOAT:
			case NORMALIZE_STRING:
			case NULLIF:
			case NVL:
			case OVERLAY:
			case PACK:
			case POSITION:
			case POSSTR:
			case POW:
			case POWER:
			case QUANTIZE:
			case QUARTER:
			case RADIANS:
			case RAISE_ERROR:
			case RAND:
			case RANDOM:
			case REAL:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REPLACE:
			case RID:
			case ROUND:
			case ROUND_TIMESTAMP:
			case ROWID:
			case RPAD:
			case RTRIM:
			case SCORE:
			case SIGN:
			case SIN:
			case SINH:
			case SMALLINT:
			case SOAPHTTPC:
			case SOAPHTTPNC:
			case SOAPHTTPNV:
			case SOAPHTTPV:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STRIP:
			case STRLEFT:
			case STRPOS:
			case STRRIGHT:
			case SUBSTR:
			case SUBSTRING:
			case TAN:
			case TANH:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIMESTAMP_FORMAT:
			case TIMESTAMP_ISO:
			case TIMESTAMP_TZ:
			case TO_CHAR:
			case TO_CLOB:
			case TO_DATE:
			case TO_NUMBER:
			case TOTALORDER:
			case TO_TIMESTAMP:
			case TRANSLATE:
			case TRIM:
			case TRIM_ARRAY:
			case TRUNC:
			case TRUNC_TIMESTAMP:
			case UCASE:
			case UNICODE:
			case UNICODE_STR:
			case UNISTR:
			case UPPER:
			case VARBINARY:
			case VARCHAR:
			case VARCHAR9:
			case VARCHAR_BIT_FORMAT:
			case VARCHAR_FORMAT:
			case VARGRAPHIC:
			case VERIFY_GROUP_FOR_USER:
			case VERIFY_ROLE_FOR_USER:
			case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
			case WEEK:
			case WEEK_ISO:
			case WRAP:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLCONCAT:
			case XMLDOCUMENT:
			case XMLELEMENT:
			case XMLFOREST:
			case XMLMODIFY:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLSERIALIZE:
			case XMLTEXT:
			case XMLXSROBJECTID:
			case XSLTRANSFORM:
			case CURRENT_ACCELERATOR:
			case CURRENT_APPLICATION_COMPATIBILITY:
			case CURRENT_APPLICATION_ENCODING_SCHEME:
			case CURRENT_CLIENT_ACCTNG:
			case CURRENT_CLIENT_APPLNAME:
			case CURRENT_CLIENT_CORR_TOKEN:
			case CURRENT_CLIENT_USERID:
			case CURRENT_CLIENT_WRKSTNNAME:
			case CURRENT_DATE:
			case CURRENT_DEBUG_MODE:
			case CURRENT_DECFLOAT_ROUNDING_MODE:
			case CURRENT_DEGREE:
			case CURRENT_EXPLAIN_MODE:
			case CURRENT_GET_ACCEL_ARCHIVE:
			case CURRENT_LOCALE_LC_CTYPE:
			case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
			case CURRENT_MEMBER:
			case CURRENT_OPTIMIZATION_HINT:
			case CURRENT_PACKAGE_PATH:
			case CURRENT_PACKAGESET:
			case CURRENT_PATH:
			case CURRENT_PRECISION:
			case CURRENT_QUERY_ACCELERATION:
			case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
			case CURRENT_REFRESH_AGE:
			case CURRENT_ROUTINE_VERSION:
			case CURRENT_RULES:
			case CURRENT_SCHEMA:
			case CURRENT_SERVER:
			case CURRENT_SQLID:
			case CURRENT_TEMPORAL_BUSINESS_TIME:
			case CURRENT_TEMPORAL_SYSTEM_TIME:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_TIME_ZONE:
			case ENCRYPTION_PASSWORD:
			case SESSION_TIME_ZONE:
			case SESSION_USER:
			case USER:
			case ADMIN_TASK_LIST:
			case ADMIN_TASK_OUTPUT:
			case ADMIN_TASK_STATUS:
			case BLOCKING_THREADS:
			case MQREADALL:
			case MQREADALLCLOB:
			case MQRECEIVEALL:
			case MQRECEIVEALLCLOB:
			case XMLTABLE:
			case SQLIDENTIFIER:
				{
				setState(7401);
				expression();
				}
				break;
			case SPLAT:
				{
				setState(7402);
				match(SPLAT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(7405);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RegressionFunctionInvocationContext extends ParserRuleContext {
		public RegressionFunctionContext regressionFunction() {
			return getRuleContext(RegressionFunctionContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(DB2zSQLParser.COMMA, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public RegressionFunctionInvocationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regressionFunctionInvocation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRegressionFunctionInvocation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRegressionFunctionInvocation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRegressionFunctionInvocation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RegressionFunctionInvocationContext regressionFunctionInvocation() throws RecognitionException {
		RegressionFunctionInvocationContext _localctx = new RegressionFunctionInvocationContext(_ctx, getState());
		enterRule(_localctx, 882, RULE_regressionFunctionInvocation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7410);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,867,_ctx) ) {
			case 1:
				{
				setState(7407);
				schemaName();
				setState(7408);
				match(DOT);
				}
				break;
			}
			setState(7412);
			regressionFunction();
			setState(7413);
			match(LPAREN);
			setState(7414);
			expression();
			setState(7415);
			match(COMMA);
			setState(7416);
			expression();
			setState(7417);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExternalFunctionInvocationContext extends ParserRuleContext {
		public TerminalNode SQLIDENTIFIER() { return getToken(DB2zSQLParser.SQLIDENTIFIER, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public ExternalFunctionInvocationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_externalFunctionInvocation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterExternalFunctionInvocation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitExternalFunctionInvocation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitExternalFunctionInvocation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExternalFunctionInvocationContext externalFunctionInvocation() throws RecognitionException {
		ExternalFunctionInvocationContext _localctx = new ExternalFunctionInvocationContext(_ctx, getState());
		enterRule(_localctx, 884, RULE_externalFunctionInvocation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7422);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,868,_ctx) ) {
			case 1:
				{
				setState(7419);
				schemaName();
				setState(7420);
				match(DOT);
				}
				break;
			}
			setState(7424);
			match(SQLIDENTIFIER);
			setState(7425);
			match(LPAREN);
			setState(7426);
			expression();
			setState(7431);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7427);
				match(COMMA);
				setState(7428);
				expression();
				}
				}
				setState(7433);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7434);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LabeledDurationContext extends ParserRuleContext {
		public TerminalNode YEAR() { return getToken(DB2zSQLParser.YEAR, 0); }
		public TerminalNode YEARS() { return getToken(DB2zSQLParser.YEARS, 0); }
		public TerminalNode MONTH() { return getToken(DB2zSQLParser.MONTH, 0); }
		public TerminalNode MONTHS() { return getToken(DB2zSQLParser.MONTHS, 0); }
		public TerminalNode DAY() { return getToken(DB2zSQLParser.DAY, 0); }
		public TerminalNode DAYS() { return getToken(DB2zSQLParser.DAYS, 0); }
		public TerminalNode HOUR() { return getToken(DB2zSQLParser.HOUR, 0); }
		public TerminalNode HOURS() { return getToken(DB2zSQLParser.HOURS, 0); }
		public TerminalNode MINUTE() { return getToken(DB2zSQLParser.MINUTE, 0); }
		public TerminalNode MINUTES() { return getToken(DB2zSQLParser.MINUTES, 0); }
		public TerminalNode SECOND() { return getToken(DB2zSQLParser.SECOND, 0); }
		public TerminalNode SECONDS() { return getToken(DB2zSQLParser.SECONDS, 0); }
		public TerminalNode MICROSECOND() { return getToken(DB2zSQLParser.MICROSECOND, 0); }
		public TerminalNode MICROSECONDS() { return getToken(DB2zSQLParser.MICROSECONDS, 0); }
		public FunctionInvocationContext functionInvocation() {
			return getRuleContext(FunctionInvocationContext.class,0);
		}
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public LabeledDurationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_labeledDuration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterLabeledDuration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitLabeledDuration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitLabeledDuration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LabeledDurationContext labeledDuration() throws RecognitionException {
		LabeledDurationContext _localctx = new LabeledDurationContext(_ctx, getState());
		enterRule(_localctx, 886, RULE_labeledDuration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7444);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,870,_ctx) ) {
			case 1:
				{
				setState(7436);
				functionInvocation();
				}
				break;
			case 2:
				{
				{
				setState(7437);
				match(LPAREN);
				setState(7438);
				expression();
				setState(7439);
				match(RPAREN);
				}
				}
				break;
			case 3:
				{
				setState(7441);
				match(INTEGERLITERAL);
				}
				break;
			case 4:
				{
				setState(7442);
				columnName();
				}
				break;
			case 5:
				{
				setState(7443);
				variable();
				}
				break;
			}
			setState(7446);
			_la = _input.LA(1);
			if ( !(((((_la - 94)) & ~0x3f) == 0 && ((1L << (_la - 94)) & ((1L << (DAY - 94)) | (1L << (DAYS - 94)) | (1L << (HOUR - 94)) | (1L << (HOURS - 94)))) != 0) || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & ((1L << (MICROSECOND - 190)) | (1L << (MICROSECONDS - 190)) | (1L << (MONTH - 190)) | (1L << (MONTHS - 190)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (SECOND - 270)) | (1L << (SECONDS - 270)) | (1L << (YEAR - 270)) | (1L << (YEARS - 270)))) != 0) || _la==MINUTES || _la==MINUTE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlCastSpecificationContext extends ParserRuleContext {
		public TerminalNode XMLCAST() { return getToken(DB2zSQLParser.XMLCAST, 0); }
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public ParameterMarkerContext parameterMarker() {
			return getRuleContext(ParameterMarkerContext.class,0);
		}
		public XmlCastSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlCastSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterXmlCastSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitXmlCastSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitXmlCastSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlCastSpecificationContext xmlCastSpecification() throws RecognitionException {
		XmlCastSpecificationContext _localctx = new XmlCastSpecificationContext(_ctx, getState());
		enterRule(_localctx, 888, RULE_xmlCastSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7448);
			match(XMLCAST);
			setState(7452);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,871,_ctx) ) {
			case 1:
				{
				setState(7449);
				expression();
				}
				break;
			case 2:
				{
				setState(7450);
				match(NULL);
				}
				break;
			case 3:
				{
				setState(7451);
				parameterMarker();
				}
				break;
			}
			setState(7454);
			match(AS);
			setState(7455);
			dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArrayElementSpecificationContext extends ParserRuleContext {
		public ArrayExpressionContext arrayExpression() {
			return getRuleContext(ArrayExpressionContext.class,0);
		}
		public TerminalNode OPENSQBRACKET() { return getToken(DB2zSQLParser.OPENSQBRACKET, 0); }
		public ArrayIndexContext arrayIndex() {
			return getRuleContext(ArrayIndexContext.class,0);
		}
		public TerminalNode CLOSESQBRACKET() { return getToken(DB2zSQLParser.CLOSESQBRACKET, 0); }
		public ArrayElementSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arrayElementSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterArrayElementSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitArrayElementSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitArrayElementSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArrayElementSpecificationContext arrayElementSpecification() throws RecognitionException {
		ArrayElementSpecificationContext _localctx = new ArrayElementSpecificationContext(_ctx, getState());
		enterRule(_localctx, 890, RULE_arrayElementSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7457);
			arrayExpression();
			setState(7458);
			match(OPENSQBRACKET);
			setState(7459);
			arrayIndex();
			setState(7460);
			match(CLOSESQBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArrayIndexContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<OperatorContext> operator() {
			return getRuleContexts(OperatorContext.class);
		}
		public OperatorContext operator(int i) {
			return getRuleContext(OperatorContext.class,i);
		}
		public ArrayIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arrayIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterArrayIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitArrayIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitArrayIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArrayIndexContext arrayIndex() throws RecognitionException {
		ArrayIndexContext _localctx = new ArrayIndexContext(_ctx, getState());
		enterRule(_localctx, 892, RULE_arrayIndex);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7462);
			expression();
			setState(7469);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAREN) | (1L << PLUS) | (1L << MINUS) | (1L << SPLAT) | (1L << SLASH) | (1L << CONCATOP) | (1L << COLON) | (1L << NONNUMERICLITERAL) | (1L << INTEGERLITERAL) | (1L << NUMERICLITERAL) | (1L << INSTEAD) | (1L << NEW) | (1L << NEW_TABLE) | (1L << OLD_TABLE) | (1L << REFERENCING) | (1L << BASED) | (1L << UPON) | (1L << ADD) | (1L << AFTER) | (1L << ALL) | (1L << ALLOCATE) | (1L << ALLOW) | (1L << ALTER) | (1L << ALTERAND) | (1L << ANY) | (1L << ARRAY) | (1L << ARRAY_EXISTS) | (1L << AS) | (1L << ASENSITIVE) | (1L << ASSOCIATE) | (1L << ASUTIME) | (1L << AT) | (1L << AUDIT) | (1L << AUX) | (1L << AUXILIARY) | (1L << BEFORE) | (1L << BEGIN) | (1L << BETWEEN) | (1L << BUFFERPOOL) | (1L << BUFFERPOOLS) | (1L << BY) | (1L << CALL) | (1L << CAPTURE) | (1L << CASCADED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CASE - 64)) | (1L << (CAST - 64)) | (1L << (CCSID - 64)) | (1L << (CHAR - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHECK - 64)) | (1L << (CLONE - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECTION - 64)) | (1L << (COLLID - 64)) | (1L << (COLUMN - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (CONCAT - 64)) | (1L << (CONDITION - 64)) | (1L << (CONNECT - 64)) | (1L << (CONNECTION - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONTAINS - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CREATE - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT - 64)) | (1L << (CURRENT_LC_CTYPE - 64)) | (1L << (CURRVAL - 64)) | (1L << (CURSOR - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DAYS - 64)) | (1L << (DBINFO - 64)) | (1L << (DECLARE - 64)) | (1L << (DEFAULT - 64)) | (1L << (DELETE - 64)) | (1L << (DESCRIPTOR - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DISABLE - 64)) | (1L << (DISALLOW - 64)) | (1L << (DISTINCT - 64)) | (1L << (DO - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (DSSIZE - 64)) | (1L << (DYNAMIC - 64)) | (1L << (EDITPROC - 64)) | (1L << (ELSE - 64)) | (1L << (ELSEIF - 64)) | (1L << (ENCODING - 64)) | (1L << (ENCRYPTION - 64)) | (1L << (END - 64)) | (1L << (END_EXEC - 64)) | (1L << (ENDING - 64)) | (1L << (ERASE - 64)) | (1L << (ESCAPE - 64)) | (1L << (EXCEPT - 64)) | (1L << (EXCEPTION - 64)) | (1L << (EXEC_SQL - 64)) | (1L << (EXECUTE - 64)) | (1L << (EXISTS - 64)) | (1L << (EXIT - 64)) | (1L << (EXPLAIN - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (EXTERNAL - 128)) | (1L << (FENCED - 128)) | (1L << (FETCH - 128)) | (1L << (FIELDPROC - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FOR - 128)) | (1L << (FREE - 128)) | (1L << (FROM - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GENERATED - 128)) | (1L << (GET - 128)) | (1L << (GLOBAL - 128)) | (1L << (GO - 128)) | (1L << (GOTO - 128)) | (1L << (GRANT - 128)) | (1L << (GROUP - 128)) | (1L << (HANDLER - 128)) | (1L << (HAVING - 128)) | (1L << (HOLD - 128)) | (1L << (HOUR - 128)) | (1L << (HOURS - 128)) | (1L << (IF - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (IN - 128)) | (1L << (INCLUSIVE - 128)) | (1L << (INDEX - 128)) | (1L << (INDEXBP - 128)) | (1L << (INHERIT - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSENSITIVE - 128)) | (1L << (INSERT - 128)) | (1L << (INTERSECT - 128)) | (1L << (INTO - 128)) | (1L << (IS - 128)) | (1L << (ISOBID - 128)) | (1L << (ITERATE - 128)) | (1L << (JAR - 128)) | (1L << (JOIN - 128)) | (1L << (KEEP - 128)) | (1L << (KEY - 128)) | (1L << (LABEL - 128)) | (1L << (LANGUAGE - 128)) | (1L << (LAST - 128)) | (1L << (LC_CTYPE - 128)) | (1L << (LEAVE - 128)) | (1L << (LEFT - 128)) | (1L << (LIKE - 128)) | (1L << (LIMIT - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCALE - 128)) | (1L << (LOCATOR - 128)) | (1L << (LOCATORS - 128)) | (1L << (LOCK - 128)) | (1L << (LOCKMAX - 128)) | (1L << (LOCKSIZE - 128)) | (1L << (LONG - 128)) | (1L << (LOOP - 128)) | (1L << (MAINTAINED - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MICROSECOND - 128)) | (1L << (MICROSECONDS - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (MODIFIES - 193)) | (1L << (MONTH - 193)) | (1L << (MONTHS - 193)) | (1L << (NEXT - 193)) | (1L << (NEXTVAL - 193)) | (1L << (NO - 193)) | (1L << (NONE - 193)) | (1L << (NOT - 193)) | (1L << (NULL - 193)) | (1L << (NULLS - 193)) | (1L << (NUMPARTS - 193)) | (1L << (OBID - 193)) | (1L << (OF - 193)) | (1L << (OFFSET - 193)) | (1L << (OLD - 193)) | (1L << (ON - 193)) | (1L << (OPEN - 193)) | (1L << (OPTIMIZATION - 193)) | (1L << (OPTIMIZE - 193)) | (1L << (OR - 193)) | (1L << (ORDER - 193)) | (1L << (ORGANIZATION - 193)) | (1L << (OUT - 193)) | (1L << (OUTER - 193)) | (1L << (PACKAGE - 193)) | (1L << (PADDED - 193)) | (1L << (PARAMETER - 193)) | (1L << (PART - 193)) | (1L << (PARTITION - 193)) | (1L << (PARTITIONED - 193)) | (1L << (PARTITIONING - 193)) | (1L << (PATH - 193)) | (1L << (PERIOD - 193)) | (1L << (PIECESIZE - 193)) | (1L << (PLAN - 193)) | (1L << (PRECISION - 193)) | (1L << (PREPARE - 193)) | (1L << (PREVVAL - 193)) | (1L << (PRIOR - 193)) | (1L << (PRIQTY - 193)) | (1L << (PRIVILEGES - 193)) | (1L << (PROCEDURE - 193)) | (1L << (PROGRAM - 193)) | (1L << (PSID - 193)) | (1L << (PUBLIC - 193)) | (1L << (QUERY - 193)) | (1L << (QUERYNO - 193)) | (1L << (READS - 193)) | (1L << (REFERENCES - 193)) | (1L << (REFRESH - 193)) | (1L << (RELEASE - 193)) | (1L << (RENAME - 193)) | (1L << (REPEAT - 193)) | (1L << (RESIGNAL - 193)) | (1L << (RESTRICT - 193)) | (1L << (RESULT - 193)) | (1L << (RESULT_SET_LOCATOR - 193)) | (1L << (RETURN - 193)) | (1L << (RETURNS - 193)) | (1L << (REVOKE - 193)) | (1L << (RIGHT - 193)) | (1L << (ROLE - 193)) | (1L << (ROLLBACK - 193)) | (1L << (ROLLUP - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (ROUND_CEILING - 257)) | (1L << (ROUND_DOWN - 257)) | (1L << (ROUND_FLOOR - 257)) | (1L << (ROUND_HALF_DOWN - 257)) | (1L << (ROUND_HALF_EVEN - 257)) | (1L << (ROUND_HALF_UP - 257)) | (1L << (ROUND_UP - 257)) | (1L << (ROW - 257)) | (1L << (ROWSET - 257)) | (1L << (RUN - 257)) | (1L << (SAVEPOINT - 257)) | (1L << (SCHEMA - 257)) | (1L << (SCRATCHPAD - 257)) | (1L << (SECOND - 257)) | (1L << (SECONDS - 257)) | (1L << (SECQTY - 257)) | (1L << (SECURITY - 257)) | (1L << (SELECT - 257)) | (1L << (SENSITIVE - 257)) | (1L << (SEQUENCE - 257)) | (1L << (SET - 257)) | (1L << (SIGNAL - 257)) | (1L << (SIMPLE - 257)) | (1L << (SOME - 257)) | (1L << (SOURCE - 257)) | (1L << (SPECIFIC - 257)) | (1L << (STANDARD - 257)) | (1L << (STATEMENT - 257)) | (1L << (STATIC - 257)) | (1L << (STAY - 257)) | (1L << (STOGROUP - 257)) | (1L << (STORES - 257)) | (1L << (STYLE - 257)) | (1L << (SUMMARY - 257)) | (1L << (SYNONYM - 257)) | (1L << (SYSDATE - 257)) | (1L << (SYSTEM - 257)) | (1L << (SYSTIMESTAMP - 257)) | (1L << (TABLE - 257)) | (1L << (TABLESPACE - 257)) | (1L << (THEN - 257)) | (1L << (TO - 257)) | (1L << (TRIGGER - 257)) | (1L << (TRUNCATE - 257)) | (1L << (TYPE - 257)) | (1L << (UNDO - 257)) | (1L << (UNION - 257)) | (1L << (UNIQUE - 257)) | (1L << (UNTIL - 257)) | (1L << (UPDATE - 257)) | (1L << (USING - 257)) | (1L << (VALIDPROC - 257)) | (1L << (VALUE - 257)) | (1L << (VALUES - 257)) | (1L << (VARIABLE - 257)) | (1L << (VARIANT - 257)) | (1L << (VCAT - 257)) | (1L << (VERSIONING - 257)) | (1L << (VIEW - 257)) | (1L << (VOLATILE - 257)) | (1L << (VOLUMES - 257)) | (1L << (WHEN - 257)) | (1L << (WHENEVER - 257)) | (1L << (WHERE - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (WHILE - 321)) | (1L << (WITH - 321)) | (1L << (WLM - 321)) | (1L << (XMLCAST - 321)) | (1L << (XMLEXISTS - 321)) | (1L << (XMLNAMESPACES - 321)) | (1L << (YEAR - 321)) | (1L << (YEARS - 321)) | (1L << (ZONE - 321)) | (1L << (AND - 321)) | (1L << (ARRAY_AGG - 321)) | (1L << (ASC - 321)) | (1L << (AVG - 321)) | (1L << (BIT - 321)) | (1L << (CHANGE - 321)) | (1L << (CODEUNITS16 - 321)) | (1L << (CODEUNITS32 - 321)) | (1L << (CORR - 321)) | (1L << (CORRELATION - 321)) | (1L << (COUNT - 321)) | (1L << (COUNT_BIG - 321)) | (1L << (COVAR - 321)) | (1L << (COVARIANCE - 321)) | (1L << (COVARIANCE_SAMP - 321)) | (1L << (COVAR_POP - 321)) | (1L << (COVAR_SAMP - 321)) | (1L << (CS - 321)) | (1L << (CUME_DIST - 321)) | (1L << (DENSE_RANK - 321)) | (1L << (DESC - 321)) | (1L << (EBCDIC - 321)) | (1L << (EXCLUSIVE - 321)) | (1L << (FIRST_VALUE - 321)) | (1L << (FOLLOWING - 321)) | (1L << (GROUPING - 321)) | (1L << (IGNORE - 321)) | (1L << (INDICATOR - 321)) | (1L << (INPUT - 321)) | (1L << (ISNULL - 321)) | (1L << (LAG - 321)) | (1L << (LARGE - 321)) | (1L << (LAST_VALUE - 321)) | (1L << (LEAD - 321)) | (1L << (LISTAGG - 321)) | (1L << (LOCKED - 321)) | (1L << (LOCKS - 321)) | (1L << (MEDIAN - 321)) | (1L << (MINUTES - 321)) | (1L << (MIXED - 321)) | (1L << (NOTNULL - 321)) | (1L << (NTH_VALUE - 321)) | (1L << (NTILE - 321)) | (1L << (NUMERIC - 321)) | (1L << (OBJECT - 321)) | (1L << (OCTETS - 321)) | (1L << (ONLY - 321)) | (1L << (OVER - 321)) | (1L << (PASSING - 321)) | (1L << (PERCENTILE_CONT - 321)) | (1L << (PERCENTILE_DISC - 321)) | (1L << (PERCENT_RANK - 321)) | (1L << (PRECEDING - 321)) | (1L << (PREVIOUS - 321)) | (1L << (RANGE - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (RANK - 385)) | (1L << (RATIO_TO_REPORT - 385)) | (1L << (READ - 385)) | (1L << (REF - 385)) | (1L << (REGR_AVGX - 385)) | (1L << (REGR_AVGY - 385)) | (1L << (REGR_COUNT - 385)) | (1L << (REGR_ICPT - 385)) | (1L << (REGR_INTERCEPT - 385)) | (1L << (REGR_R2 - 385)) | (1L << (REGR_SLOPE - 385)) | (1L << (REGR_SXX - 385)) | (1L << (REGR_SXY - 385)) | (1L << (REGR_SYY - 385)) | (1L << (RESPECT - 385)) | (1L << (ROW_NUMBER - 385)) | (1L << (ROWS - 385)) | (1L << (RR - 385)) | (1L << (RS - 385)) | (1L << (SBCS - 385)) | (1L << (SELECTIVITY - 385)) | (1L << (SETS - 385)) | (1L << (SHARE - 385)) | (1L << (SKIP_ - 385)) | (1L << (STDDEV - 385)) | (1L << (STDDEV_POP - 385)) | (1L << (STDDEV_SAMP - 385)) | (1L << (SUM - 385)) | (1L << (TOKEN - 385)) | (1L << (UNBOUNDED - 385)) | (1L << (UNPACK - 385)) | (1L << (UR - 385)) | (1L << (USE - 385)) | (1L << (VAR - 385)) | (1L << (VARIANCE - 385)) | (1L << (VARIANCE_SAMP - 385)) | (1L << (VAR_POP - 385)) | (1L << (VAR_SAMP - 385)) | (1L << (VARYING - 385)) | (1L << (WITHOUT - 385)) | (1L << (XML - 385)) | (1L << (XMLAGG - 385)) | (1L << (COLUMNS - 385)) | (1L << (SQLID - 385)) | (1L << (ORDINALITY - 385)) | (1L << (SYSTEM_TIME - 385)) | (1L << (BUSINESS_TIME - 385)) | (1L << (MULTIPLIER - 385)) | (1L << (UNNEST - 385)) | (1L << (CROSS - 385)) | (1L << (CALLER - 385)) | (1L << (CLIENT - 385)) | (1L << (POSITIONING - 385)) | (1L << (SCROLL - 385)) | (1L << (ACTION - 385)) | (1L << (ASSEMBLE - 385)) | (1L << (C_ - 385)) | (1L << (CALLED - 385)) | (1L << (COBOL - 385)) | (1L << (DB2 - 385)) | (1L << (DEFINER - 385)) | (1L << (DISPATCH - 385)) | (1L << (ENVIRONMENT - 385)) | (1L << (FAILURE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (FAILURES - 449)) | (1L << (JAVA - 449)) | (1L << (MAIN - 449)) | (1L << (NAME - 449)) | (1L << (OPTIONS - 449)) | (1L << (PARALLEL - 449)) | (1L << (PLI - 449)) | (1L << (REGISTERS - 449)) | (1L << (RESIDENT - 449)) | (1L << (SECURED - 449)) | (1L << (SPECIAL - 449)) | (1L << (SQL - 449)) | (1L << (STOP - 449)) | (1L << (SUB - 449)) | (1L << (YES - 449)) | (1L << (APPLICATION - 449)) | (1L << (CHANGED - 449)) | (1L << (COMPATIBILITY - 449)) | (1L << (COMPRESS - 449)) | (1L << (COPY - 449)) | (1L << (FREEPAGE - 449)) | (1L << (GBPCACHE - 449)) | (1L << (INCLUDE - 449)) | (1L << (MAXVALUE - 449)) | (1L << (MINVALUE - 449)) | (1L << (PCTFREE - 449)) | (1L << (REGENERATE - 449)) | (1L << (MASK - 449)) | (1L << (ENABLE - 449)) | (1L << (PERMISSION - 449)) | (1L << (ATOMIC - 449)) | (1L << (SQLEXCEPTION - 449)) | (1L << (MERGE - 449)) | (1L << (MATCHED - 449)) | (1L << (SQLSTATE - 449)) | (1L << (MESSAGE_TEXT - 449)) | (1L << (OVERRIDING - 449)) | (1L << (PORTION - 449)) | (1L << (DB2SQL - 449)) | (1L << (DEBUG - 449)) | (1L << (GENERAL - 449)) | (1L << (MODE_ - 449)) | (1L << (REXX - 449)) | (1L << (CACHE - 449)) | (1L << (CYCLE - 449)) | (1L << (INCREMENT - 449)) | (1L << (RESTART - 449)) | (1L << (DATACLAS - 449)) | (1L << (MGMTCLAS - 449)) | (1L << (REMOVE - 449)) | (1L << (STORCLAS - 449)) | (1L << (ACCESS - 449)) | (1L << (ACTIVATE - 449)) | (1L << (ALWAYS - 449)) | (1L << (APPEND - 449)) | (1L << (ARCHIVE - 449)) | (1L << (BUSINESS - 449)) | (1L << (CASCADE - 449)) | (1L << (CHANGES - 449)) | (1L << (CONTROL - 449)) | (1L << (DEACTIVATE - 449)) | (1L << (DEFERRED - 449)) | (1L << (EACH - 449)) | (1L << (ENFORCED - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (EXTRA - 513)) | (1L << (FOREIGN - 513)) | (1L << (HIDDEN_ - 513)) | (1L << (HISTORY - 513)) | (1L << (ID - 513)) | (1L << (IDENTITY - 513)) | (1L << (IMPLICITLY - 513)) | (1L << (INITIALLY - 513)) | (1L << (INLINE - 513)) | (1L << (OPERATION - 513)) | (1L << (ORGANIZE - 513)) | (1L << (OVERLAPS - 513)) | (1L << (PACKAGE_NAME - 513)) | (1L << (PACKAGE_SCHEMA - 513)) | (1L << (PACKAGE_VERSION - 513)) | (1L << (PRIMARY - 513)) | (1L << (RESET - 513)) | (1L << (ROTATE - 513)) | (1L << (START - 513)) | (1L << (SYSIBM - 513)) | (1L << (TRANSACTION - 513)) | (1L << (XMLSCHEMA - 513)) | (1L << (ELEMENT - 513)) | (1L << (URL - 513)) | (1L << (NAMESPACE - 513)) | (1L << (LOCATION - 513)) | (1L << (SYSXSR - 513)) | (1L << (ALGORITHM - 513)) | (1L << (FIXEDLENGTH - 513)) | (1L << (HUFFMAN - 513)) | (1L << (LOB - 513)) | (1L << (LOG - 513)) | (1L << (LOGGED - 513)) | (1L << (MAXPARTITIONS - 513)) | (1L << (MAXROWS - 513)) | (1L << (MEMBER - 513)) | (1L << (MOVE - 513)) | (1L << (PAGE - 513)) | (1L << (PAGENUM - 513)) | (1L << (PENDING - 513)) | (1L << (RELATIVE - 513)) | (1L << (SEGSIZE - 513)) | (1L << (TRACKMOD - 513)) | (1L << (ADDRESS - 513)) | (1L << (ATTRIBUTES - 513)) | (1L << (AUTHENTICATION - 513)) | (1L << (AUTHID - 513)) | (1L << (CONTEXT - 513)) | (1L << (JOBNAME - 513)) | (1L << (OWNER - 513)) | (1L << (PROFILE - 513)) | (1L << (QUALIFIER - 513)) | (1L << (SERVAUTH - 513)) | (1L << (TRUSTED - 513)) | (1L << (SECTION - 513)) | (1L << (ACTIVE - 513)) | (1L << (VERSION - 513)) | (1L << (ALIAS - 513)) | (1L << (WORK - 513)) | (1L << (WORKFILE - 513)) | (1L << (SYSDEFLT - 513)) | (1L << (NULTERM - 513)) | (1L << (STRUCTURE - 513)) | (1L << (GENERIC - 513)))) != 0) || ((((_la - 577)) & ~0x3f) == 0 && ((1L << (_la - 577)) & ((1L << (TEMPORARY - 577)) | (1L << (DEFER - 577)) | (1L << (DEFINE - 577)) | (1L << (EXCLUDE - 577)) | (1L << (GENERATE - 577)) | (1L << (KEYS - 577)) | (1L << (XMLPATTERN - 577)) | (1L << (SIZE - 577)) | (1L << (EVERY - 577)) | (1L << (ABSOLUTE - 577)) | (1L << (ACCELERATOR - 577)) | (1L << (EXCLUDING - 577)) | (1L << (INCLUDING - 577)) | (1L << (DEFAULTS - 577)) | (1L << (MODIFIERS - 577)) | (1L << (OPTION - 577)) | (1L << (PRESERVE - 577)) | (1L << (BOTH - 577)) | (1L << (DESCRIBE - 577)) | (1L << (LABELS - 577)) | (1L << (NAMES - 577)) | (1L << (OUTPUT - 577)) | (1L << (EXCHANGE - 577)) | (1L << (STABILIZED - 577)) | (1L << (STMTCACHE - 577)) | (1L << (STMTID - 577)) | (1L << (STMTTOKEN - 577)) | (1L << (STARTING - 577)) | (1L << (CATALOG_NAME - 577)) | (1L << (CONDITION_NUMBER - 577)) | (1L << (CURSOR_NAME - 577)) | (1L << (DB2_AUTHENTICATION_TYPE - 577)) | (1L << (DB2_AUTHORIZATION_ID - 577)) | (1L << (DB2_CONNECTION_STATE - 577)) | (1L << (DB2_CONNECTION_STATUS - 577)) | (1L << (DB2_ENCRYPTION_TYPE - 577)) | (1L << (DB2_ERROR_CODE1 - 577)) | (1L << (DB2_ERROR_CODE2 - 577)) | (1L << (DB2_ERROR_CODE3 - 577)) | (1L << (DB2_ERROR_CODE4 - 577)) | (1L << (DB2_GET_DIAGNOSTICS_DIAGNOSTICS - 577)) | (1L << (DB2_INTERNAL_ERROR_POINTER - 577)) | (1L << (DB2_LAST_ROW - 577)) | (1L << (DB2_LINE_NUMBER - 577)) | (1L << (DB2_MESSAGE_ID - 577)) | (1L << (DB2_MODULE_DETECTING_ERROR - 577)) | (1L << (DB2_NUMBER_PARAMETER_MARKERS - 577)) | (1L << (DB2_NUMBER_RESULT_SETS - 577)) | (1L << (DB2_NUMBER_ROWS - 577)) | (1L << (DB2_ORDINAL_TOKEN_ - 577)) | (1L << (DB2_PRODUCT_ID - 577)) | (1L << (DB2_REASON_CODE - 577)) | (1L << (DB2_RETURNED_SQLCODE - 577)) | (1L << (DB2_RETURN_STATUS - 577)) | (1L << (DB2_ROW_NUMBER - 577)) | (1L << (DB2_SERVER_CLASS_NAME - 577)) | (1L << (DB2_SQL_ATTR_CURSOR_HOLD - 577)) | (1L << (DB2_SQL_ATTR_CURSOR_ROWSET - 577)) | (1L << (DB2_SQL_ATTR_CURSOR_SCROLLABLE - 577)) | (1L << (DB2_SQL_ATTR_CURSOR_SENSITIVITY - 577)) | (1L << (DB2_SQL_ATTR_CURSOR_TYPE - 577)) | (1L << (DB2_SQLERRD1 - 577)) | (1L << (DB2_SQLERRD2 - 577)))) != 0) || ((((_la - 641)) & ~0x3f) == 0 && ((1L << (_la - 641)) & ((1L << (DB2_SQLERRD3 - 641)) | (1L << (DB2_SQLERRD4 - 641)) | (1L << (DB2_SQLERRD5 - 641)) | (1L << (DB2_SQLERRD6 - 641)) | (1L << (DB2_SQLERRD_SET - 641)) | (1L << (DB2_SQL_NESTING_LEVEL - 641)) | (1L << (DB2_TOKEN_COUNT - 641)) | (1L << (DIAGNOSTICS - 641)) | (1L << (MORE_ - 641)) | (1L << (NUMBER - 641)) | (1L << (RETURNED_SQLSTATE - 641)) | (1L << (ROW_COUNT - 641)) | (1L << (SERVER_NAME - 641)) | (1L << (STACKED - 641)) | (1L << (CREATETAB - 641)) | (1L << (CREATETS - 641)) | (1L << (DBADM - 641)) | (1L << (DBCTRL - 641)) | (1L << (DBMAINT - 641)) | (1L << (DISPLAYDB - 641)) | (1L << (IMAGCOPY - 641)) | (1L << (LOAD - 641)) | (1L << (PACKADM - 641)) | (1L << (RECOVERDB - 641)) | (1L << (REORG - 641)) | (1L << (REPAIR - 641)) | (1L << (STARTDB - 641)) | (1L << (STATS - 641)) | (1L << (STOPDB - 641)) | (1L << (BIND - 641)) | (1L << (ALTERIN - 641)) | (1L << (CREATEIN - 641)) | (1L << (DROPIN - 641)) | (1L << (USAGE - 641)) | (1L << (ACCESSCTRL - 641)) | (1L << (BINDADD - 641)) | (1L << (BINDAGENT - 641)) | (1L << (BSDS - 641)) | (1L << (CREATEALIAS - 641)) | (1L << (CREATEDBA - 641)) | (1L << (CREATEDBC - 641)) | (1L << (CREATE_SECURE_OBJECT - 641)) | (1L << (CREATESG - 641)) | (1L << (CREATETMTAB - 641)) | (1L << (DATAACCESS - 641)) | (1L << (DEBUGSESSION - 641)) | (1L << (DISPLAY - 641)) | (1L << (MONITOR1 - 641)) | (1L << (MONITOR2 - 641)) | (1L << (RECOVER - 641)) | (1L << (SQLADM - 641)) | (1L << (STOPALL - 641)) | (1L << (STOSPACE - 641)) | (1L << (SYSADM - 641)) | (1L << (SYSCTRL - 641)) | (1L << (SYSOPR - 641)) | (1L << (TRACE - 641)) | (1L << (UNLOAD - 641)) | (1L << (WRITE - 641)) | (1L << (ABS - 641)) | (1L << (ABSVAL - 641)) | (1L << (ACOS - 641)) | (1L << (ADD_DAYS - 641)) | (1L << (ADD_MONTHS - 641)))) != 0) || ((((_la - 705)) & ~0x3f) == 0 && ((1L << (_la - 705)) & ((1L << (ARRAY_DELETE - 705)) | (1L << (ARRAY_FIRST - 705)) | (1L << (ARRAY_LAST - 705)) | (1L << (ARRAY_NEXT - 705)) | (1L << (ARRAY_PRIOR - 705)) | (1L << (ARRAY_TRIM - 705)) | (1L << (ASCII - 705)) | (1L << (ASCII_CHR - 705)) | (1L << (ASCIISTR - 705)) | (1L << (ASCII_STR - 705)) | (1L << (ASIN - 705)) | (1L << (ATAN - 705)) | (1L << (ATAN2 - 705)) | (1L << (ATANH - 705)) | (1L << (BIGINT - 705)) | (1L << (BINARY - 705)) | (1L << (BITAND - 705)) | (1L << (BITANDNOT - 705)) | (1L << (BITNOT - 705)) | (1L << (BITOR - 705)) | (1L << (BITXOR - 705)) | (1L << (BLOB - 705)) | (1L << (BTRIM - 705)) | (1L << (CARDINALITY - 705)) | (1L << (CCSID_ENCODING - 705)) | (1L << (CEIL - 705)) | (1L << (CEILING - 705)) | (1L << (CHAR9 - 705)) | (1L << (CHARACTER_LENGTH - 705)) | (1L << (CHAR_LENGTH - 705)) | (1L << (CHR - 705)) | (1L << (CLOB - 705)) | (1L << (COALESCE - 705)) | (1L << (COLLATION_KEY - 705)) | (1L << (COMPARE_DECFLOAT - 705)) | (1L << (COS - 705)) | (1L << (COSH - 705)) | (1L << (DATE - 705)) | (1L << (DAYOFMONTH - 705)) | (1L << (DAYOFWEEK - 705)) | (1L << (DAYOFWEEK_ISO - 705)) | (1L << (DAYOFYEAR - 705)) | (1L << (DAYS_BETWEEN - 705)) | (1L << (DBCLOB - 705)) | (1L << (DEC - 705)) | (1L << (DECFLOAT - 705)) | (1L << (DECFLOAT_FORMAT - 705)) | (1L << (DECFLOAT_SORTKEY - 705)) | (1L << (DECIMAL - 705)) | (1L << (DECODE - 705)) | (1L << (DECRYPT_BINARY - 705)) | (1L << (DECRYPT_BIT - 705)) | (1L << (DECRYPT_CHAR - 705)) | (1L << (DECRYPT_DATAKEY_BIGINT - 705)) | (1L << (DECRYPT_DATAKEY_BIT - 705)) | (1L << (DECRYPT_DATAKEY_CLOB - 705)) | (1L << (DECRYPT_DATAKEY_DBCLOB - 705)) | (1L << (DECRYPT_DATAKEY_DECIMAL - 705)) | (1L << (DECRYPT_DATAKEY_INTEGER - 705)) | (1L << (DECRYPT_DATAKEY_VARCHAR - 705)) | (1L << (DECRYPT_DATAKEY_VARGRAPHIC - 705)) | (1L << (DECRYPT_DB - 705)) | (1L << (DEGREES - 705)) | (1L << (DIFFERENCE - 705)))) != 0) || ((((_la - 769)) & ~0x3f) == 0 && ((1L << (_la - 769)) & ((1L << (DIGITS - 769)) | (1L << (DOUBLE_PRECISION - 769)) | (1L << (DSN_XMLVALIDATE - 769)) | (1L << (EBCDIC_CHR - 769)) | (1L << (EBCDIC_STR - 769)) | (1L << (ENCRYPT_DATAKEY - 769)) | (1L << (ENCRYPT_TDES - 769)) | (1L << (EXP - 769)) | (1L << (EXTRACT - 769)) | (1L << (FLOAT - 769)) | (1L << (FLOOR - 769)) | (1L << (GENERATE_UNIQUE - 769)) | (1L << (GENERATE_UNIQUE_BINARY - 769)) | (1L << (GETHINT - 769)) | (1L << (GETVARIABLE - 769)) | (1L << (GRAPHIC - 769)) | (1L << (GREATEST - 769)) | (1L << (HASH - 769)) | (1L << (HASH_CRC32 - 769)) | (1L << (HASH_MD5 - 769)) | (1L << (HASH_SHA1 - 769)) | (1L << (HASH_SHA256 - 769)) | (1L << (HEX - 769)) | (1L << (IDENTITY_VAL_LOCAL - 769)) | (1L << (IFNULL - 769)) | (1L << (INSTR - 769)) | (1L << (INT - 769)) | (1L << (INTEGER - 769)) | (1L << (JULIAN_DAY - 769)) | (1L << (LAST_DAY - 769)) | (1L << (LCASE - 769)) | (1L << (LEAST - 769)) | (1L << (LENGTH - 769)) | (1L << (LN - 769)) | (1L << (LOCATE - 769)) | (1L << (LOCATE_IN_STRING - 769)) | (1L << (LOG10 - 769)) | (1L << (LOWER - 769)) | (1L << (LPAD - 769)) | (1L << (LTRIM - 769)) | (1L << (MAX - 769)) | (1L << (MAX_CARDINALITY - 769)) | (1L << (MIDNIGHT_SECONDS - 769)) | (1L << (MIN - 769)) | (1L << (MINUTE - 769)) | (1L << (MOD - 769)) | (1L << (MONTHS_BETWEEN - 769)) | (1L << (MQREAD - 769)) | (1L << (MQREADCLOB - 769)) | (1L << (MQRECEIVE - 769)) | (1L << (MQRECEIVECLOB - 769)) | (1L << (MQSEND - 769)) | (1L << (MULTIPLY_ALT - 769)) | (1L << (NEXT_DAY - 769)) | (1L << (NEXT_MONTH - 769)) | (1L << (NORMALIZE_DECFLOAT - 769)) | (1L << (NORMALIZE_STRING - 769)) | (1L << (NULLIF - 769)) | (1L << (NVL - 769)) | (1L << (OVERLAY - 769)) | (1L << (PACK - 769)) | (1L << (POSITION - 769)) | (1L << (POSSTR - 769)) | (1L << (POW - 769)))) != 0) || ((((_la - 833)) & ~0x3f) == 0 && ((1L << (_la - 833)) & ((1L << (POWER - 833)) | (1L << (QUANTIZE - 833)) | (1L << (QUARTER - 833)) | (1L << (RADIANS - 833)) | (1L << (RAISE_ERROR - 833)) | (1L << (RAND - 833)) | (1L << (RANDOM - 833)) | (1L << (REAL - 833)) | (1L << (REGEXP_COUNT - 833)) | (1L << (REGEXP_INSTR - 833)) | (1L << (REGEXP_LIKE - 833)) | (1L << (REGEXP_REPLACE - 833)) | (1L << (REGEXP_SUBSTR - 833)) | (1L << (REPLACE - 833)) | (1L << (RID - 833)) | (1L << (ROUND - 833)) | (1L << (ROUND_TIMESTAMP - 833)) | (1L << (ROWID - 833)) | (1L << (RPAD - 833)) | (1L << (RTRIM - 833)) | (1L << (SCORE - 833)) | (1L << (SIGN - 833)) | (1L << (SIN - 833)) | (1L << (SINH - 833)) | (1L << (SMALLINT - 833)) | (1L << (SOAPHTTPC - 833)) | (1L << (SOAPHTTPNC - 833)) | (1L << (SOAPHTTPNV - 833)) | (1L << (SOAPHTTPV - 833)) | (1L << (SOUNDEX - 833)) | (1L << (SPACE - 833)) | (1L << (SQRT - 833)) | (1L << (STRIP - 833)) | (1L << (STRLEFT - 833)) | (1L << (STRPOS - 833)) | (1L << (STRRIGHT - 833)) | (1L << (SUBSTR - 833)) | (1L << (SUBSTRING - 833)) | (1L << (TAN - 833)) | (1L << (TANH - 833)) | (1L << (TIME - 833)) | (1L << (TIMESTAMP - 833)) | (1L << (TIMESTAMPADD - 833)) | (1L << (TIMESTAMPDIFF - 833)) | (1L << (TIMESTAMP_FORMAT - 833)) | (1L << (TIMESTAMP_ISO - 833)) | (1L << (TIMESTAMP_TZ - 833)) | (1L << (TO_CHAR - 833)) | (1L << (TO_CLOB - 833)) | (1L << (TO_DATE - 833)) | (1L << (TO_NUMBER - 833)) | (1L << (TOTALORDER - 833)) | (1L << (TO_TIMESTAMP - 833)) | (1L << (TRANSLATE - 833)) | (1L << (TRIM - 833)) | (1L << (TRIM_ARRAY - 833)) | (1L << (TRUNC - 833)) | (1L << (TRUNC_TIMESTAMP - 833)) | (1L << (UCASE - 833)) | (1L << (UNICODE - 833)) | (1L << (UNICODE_STR - 833)) | (1L << (UNISTR - 833)) | (1L << (UPPER - 833)) | (1L << (VARBINARY - 833)))) != 0) || ((((_la - 897)) & ~0x3f) == 0 && ((1L << (_la - 897)) & ((1L << (VARCHAR - 897)) | (1L << (VARCHAR9 - 897)) | (1L << (VARCHAR_BIT_FORMAT - 897)) | (1L << (VARCHAR_FORMAT - 897)) | (1L << (VARGRAPHIC - 897)) | (1L << (VERIFY_GROUP_FOR_USER - 897)) | (1L << (VERIFY_ROLE_FOR_USER - 897)) | (1L << (VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER - 897)) | (1L << (WEEK - 897)) | (1L << (WEEK_ISO - 897)) | (1L << (WRAP - 897)) | (1L << (XMLATTRIBUTES - 897)) | (1L << (XMLCOMMENT - 897)) | (1L << (XMLCONCAT - 897)) | (1L << (XMLDOCUMENT - 897)) | (1L << (XMLELEMENT - 897)) | (1L << (XMLFOREST - 897)) | (1L << (XMLMODIFY - 897)) | (1L << (XMLPARSE - 897)) | (1L << (XMLPI - 897)) | (1L << (XMLQUERY - 897)) | (1L << (XMLSERIALIZE - 897)) | (1L << (XMLTEXT - 897)) | (1L << (XMLXSROBJECTID - 897)) | (1L << (XSLTRANSFORM - 897)) | (1L << (CURRENT_ACCELERATOR - 897)) | (1L << (CURRENT_APPLICATION_COMPATIBILITY - 897)) | (1L << (CURRENT_APPLICATION_ENCODING_SCHEME - 897)) | (1L << (CURRENT_CLIENT_ACCTNG - 897)) | (1L << (CURRENT_CLIENT_APPLNAME - 897)) | (1L << (CURRENT_CLIENT_CORR_TOKEN - 897)) | (1L << (CURRENT_CLIENT_USERID - 897)) | (1L << (CURRENT_CLIENT_WRKSTNNAME - 897)) | (1L << (CURRENT_DATE - 897)) | (1L << (CURRENT_DEBUG_MODE - 897)) | (1L << (CURRENT_DECFLOAT_ROUNDING_MODE - 897)) | (1L << (CURRENT_DEGREE - 897)) | (1L << (CURRENT_EXPLAIN_MODE - 897)) | (1L << (CURRENT_GET_ACCEL_ARCHIVE - 897)) | (1L << (CURRENT_LOCALE_LC_CTYPE - 897)) | (1L << (CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION - 897)) | (1L << (CURRENT_MEMBER - 897)) | (1L << (CURRENT_OPTIMIZATION_HINT - 897)) | (1L << (CURRENT_PACKAGE_PATH - 897)) | (1L << (CURRENT_PACKAGESET - 897)) | (1L << (CURRENT_PATH - 897)) | (1L << (CURRENT_PRECISION - 897)) | (1L << (CURRENT_QUERY_ACCELERATION - 897)) | (1L << (CURRENT_QUERY_ACCELERATION_WAITFORDATA - 897)) | (1L << (CURRENT_REFRESH_AGE - 897)) | (1L << (CURRENT_ROUTINE_VERSION - 897)) | (1L << (CURRENT_RULES - 897)) | (1L << (CURRENT_SCHEMA - 897)) | (1L << (CURRENT_SERVER - 897)) | (1L << (CURRENT_SQLID - 897)) | (1L << (CURRENT_TEMPORAL_BUSINESS_TIME - 897)) | (1L << (CURRENT_TEMPORAL_SYSTEM_TIME - 897)) | (1L << (CURRENT_TIME - 897)) | (1L << (CURRENT_TIMESTAMP - 897)) | (1L << (CURRENT_TIME_ZONE - 897)) | (1L << (ENCRYPTION_PASSWORD - 897)) | (1L << (SESSION_TIME_ZONE - 897)) | (1L << (SESSION_USER - 897)) | (1L << (USER - 897)))) != 0) || ((((_la - 961)) & ~0x3f) == 0 && ((1L << (_la - 961)) & ((1L << (ADMIN_TASK_LIST - 961)) | (1L << (ADMIN_TASK_OUTPUT - 961)) | (1L << (ADMIN_TASK_STATUS - 961)) | (1L << (BLOCKING_THREADS - 961)) | (1L << (MQREADALL - 961)) | (1L << (MQREADALLCLOB - 961)) | (1L << (MQRECEIVEALL - 961)) | (1L << (MQRECEIVEALLCLOB - 961)) | (1L << (XMLTABLE - 961)) | (1L << (SQLIDENTIFIER - 961)))) != 0)) {
				{
				{
				setState(7464);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,872,_ctx) ) {
				case 1:
					{
					setState(7463);
					operator();
					}
					break;
				}
				setState(7466);
				expression();
				}
				}
				setState(7471);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArrayConstructorContext extends ParserRuleContext {
		public TerminalNode ARRAY() { return getToken(DB2zSQLParser.ARRAY, 0); }
		public TerminalNode OPENSQBRACKET() { return getToken(DB2zSQLParser.OPENSQBRACKET, 0); }
		public TerminalNode CLOSESQBRACKET() { return getToken(DB2zSQLParser.CLOSESQBRACKET, 0); }
		public TerminalNode QUESTIONMARK() { return getToken(DB2zSQLParser.QUESTIONMARK, 0); }
		public FullSelectContext fullSelect() {
			return getRuleContext(FullSelectContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> NULL() { return getTokens(DB2zSQLParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(DB2zSQLParser.NULL, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public ArrayConstructorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arrayConstructor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterArrayConstructor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitArrayConstructor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitArrayConstructor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArrayConstructorContext arrayConstructor() throws RecognitionException {
		ArrayConstructorContext _localctx = new ArrayConstructorContext(_ctx, getState());
		enterRule(_localctx, 894, RULE_arrayConstructor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7472);
			match(ARRAY);
			setState(7473);
			match(OPENSQBRACKET);
			setState(7490);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,877,_ctx) ) {
			case 1:
				{
				setState(7474);
				match(QUESTIONMARK);
				}
				break;
			case 2:
				{
				setState(7475);
				fullSelect();
				}
				break;
			case 3:
				{
				{
				setState(7478);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,874,_ctx) ) {
				case 1:
					{
					setState(7476);
					expression();
					}
					break;
				case 2:
					{
					setState(7477);
					match(NULL);
					}
					break;
				}
				setState(7487);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7480);
					match(COMMA);
					setState(7483);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,875,_ctx) ) {
					case 1:
						{
						setState(7481);
						expression();
						}
						break;
					case 2:
						{
						setState(7482);
						match(NULL);
						}
						break;
					}
					}
					}
					setState(7489);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			}
			setState(7492);
			match(CLOSESQBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OlapSpecificationContext extends ParserRuleContext {
		public OrderedOlapSpecificationContext orderedOlapSpecification() {
			return getRuleContext(OrderedOlapSpecificationContext.class,0);
		}
		public NumberingSpecificationContext numberingSpecification() {
			return getRuleContext(NumberingSpecificationContext.class,0);
		}
		public AggregationSpecificationContext aggregationSpecification() {
			return getRuleContext(AggregationSpecificationContext.class,0);
		}
		public OlapSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_olapSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterOlapSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitOlapSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitOlapSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OlapSpecificationContext olapSpecification() throws RecognitionException {
		OlapSpecificationContext _localctx = new OlapSpecificationContext(_ctx, getState());
		enterRule(_localctx, 896, RULE_olapSpecification);
		try {
			setState(7497);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,878,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7494);
				orderedOlapSpecification();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7495);
				numberingSpecification();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7496);
				aggregationSpecification();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderedOlapSpecificationContext extends ParserRuleContext {
		public OlapSpecificationFunctionContext olapSpecificationFunction() {
			return getRuleContext(OlapSpecificationFunctionContext.class,0);
		}
		public TerminalNode OVER() { return getToken(DB2zSQLParser.OVER, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public WindowOrderClauseContext windowOrderClause() {
			return getRuleContext(WindowOrderClauseContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public WindowPartitionClauseContext windowPartitionClause() {
			return getRuleContext(WindowPartitionClauseContext.class,0);
		}
		public OrderedOlapSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderedOlapSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterOrderedOlapSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitOrderedOlapSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitOrderedOlapSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderedOlapSpecificationContext orderedOlapSpecification() throws RecognitionException {
		OrderedOlapSpecificationContext _localctx = new OrderedOlapSpecificationContext(_ctx, getState());
		enterRule(_localctx, 898, RULE_orderedOlapSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7499);
			olapSpecificationFunction();
			setState(7500);
			match(OVER);
			setState(7501);
			match(LPAREN);
			setState(7503);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(7502);
				windowPartitionClause();
				}
			}

			setState(7505);
			windowOrderClause();
			setState(7506);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OlapSpecificationFunctionContext extends ParserRuleContext {
		public LagFunctionContext lagFunction() {
			return getRuleContext(LagFunctionContext.class,0);
		}
		public LeadFunctionContext leadFunction() {
			return getRuleContext(LeadFunctionContext.class,0);
		}
		public TerminalNode CUME_DIST() { return getToken(DB2zSQLParser.CUME_DIST, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(DB2zSQLParser.PERCENT_RANK, 0); }
		public TerminalNode RANK() { return getToken(DB2zSQLParser.RANK, 0); }
		public TerminalNode DENSE_RANK() { return getToken(DB2zSQLParser.DENSE_RANK, 0); }
		public TerminalNode NTILE() { return getToken(DB2zSQLParser.NTILE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public OlapSpecificationFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_olapSpecificationFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterOlapSpecificationFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitOlapSpecificationFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitOlapSpecificationFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OlapSpecificationFunctionContext olapSpecificationFunction() throws RecognitionException {
		OlapSpecificationFunctionContext _localctx = new OlapSpecificationFunctionContext(_ctx, getState());
		enterRule(_localctx, 900, RULE_olapSpecificationFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7527);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CUME_DIST:
				{
				{
				setState(7508);
				match(CUME_DIST);
				setState(7509);
				match(LPAREN);
				setState(7510);
				match(RPAREN);
				}
				}
				break;
			case PERCENT_RANK:
				{
				{
				setState(7511);
				match(PERCENT_RANK);
				setState(7512);
				match(LPAREN);
				setState(7513);
				match(RPAREN);
				}
				}
				break;
			case RANK:
				{
				{
				setState(7514);
				match(RANK);
				setState(7515);
				match(LPAREN);
				setState(7516);
				match(RPAREN);
				}
				}
				break;
			case DENSE_RANK:
				{
				{
				setState(7517);
				match(DENSE_RANK);
				setState(7518);
				match(LPAREN);
				setState(7519);
				match(RPAREN);
				}
				}
				break;
			case NTILE:
				{
				{
				setState(7520);
				match(NTILE);
				setState(7521);
				match(LPAREN);
				setState(7522);
				expression();
				setState(7523);
				match(RPAREN);
				}
				}
				break;
			case LAG:
				{
				setState(7525);
				lagFunction();
				}
				break;
			case LEAD:
				{
				setState(7526);
				leadFunction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LagFunctionContext extends ParserRuleContext {
		public TerminalNode LAG() { return getToken(DB2zSQLParser.LAG, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode RESPECT() { return getToken(DB2zSQLParser.RESPECT, 0); }
		public TerminalNode NULLS() { return getToken(DB2zSQLParser.NULLS, 0); }
		public TerminalNode IGNORE() { return getToken(DB2zSQLParser.IGNORE, 0); }
		public LagFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lagFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterLagFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitLagFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitLagFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LagFunctionContext lagFunction() throws RecognitionException {
		LagFunctionContext _localctx = new LagFunctionContext(_ctx, getState());
		enterRule(_localctx, 902, RULE_lagFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7529);
			match(LAG);
			setState(7530);
			match(LPAREN);
			setState(7531);
			expression();
			{
			setState(7532);
			match(COMMA);
			setState(7533);
			match(INTEGERLITERAL);
			setState(7545);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(7534);
				match(COMMA);
				setState(7535);
				expression();
				setState(7543);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(7536);
					match(COMMA);
					setState(7541);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case RESPECT:
						{
						{
						setState(7537);
						match(RESPECT);
						setState(7538);
						match(NULLS);
						}
						}
						break;
					case IGNORE:
						{
						{
						setState(7539);
						match(IGNORE);
						setState(7540);
						match(NULLS);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
			}

			setState(7547);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LeadFunctionContext extends ParserRuleContext {
		public TerminalNode LEAD() { return getToken(DB2zSQLParser.LEAD, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public RespectNullsClauseContext respectNullsClause() {
			return getRuleContext(RespectNullsClauseContext.class,0);
		}
		public LeadFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_leadFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterLeadFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitLeadFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitLeadFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LeadFunctionContext leadFunction() throws RecognitionException {
		LeadFunctionContext _localctx = new LeadFunctionContext(_ctx, getState());
		enterRule(_localctx, 904, RULE_leadFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7549);
			match(LEAD);
			setState(7550);
			match(LPAREN);
			setState(7551);
			expression();
			{
			setState(7552);
			match(COMMA);
			setState(7553);
			match(INTEGERLITERAL);
			setState(7560);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(7554);
				match(COMMA);
				setState(7555);
				expression();
				setState(7558);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(7556);
					match(COMMA);
					setState(7557);
					respectNullsClause();
					}
				}

				}
			}

			setState(7562);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RespectNullsClauseContext extends ParserRuleContext {
		public TerminalNode RESPECT() { return getToken(DB2zSQLParser.RESPECT, 0); }
		public TerminalNode NULLS() { return getToken(DB2zSQLParser.NULLS, 0); }
		public TerminalNode IGNORE() { return getToken(DB2zSQLParser.IGNORE, 0); }
		public RespectNullsClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_respectNullsClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRespectNullsClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRespectNullsClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRespectNullsClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RespectNullsClauseContext respectNullsClause() throws RecognitionException {
		RespectNullsClauseContext _localctx = new RespectNullsClauseContext(_ctx, getState());
		enterRule(_localctx, 906, RULE_respectNullsClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7568);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RESPECT:
				{
				{
				setState(7564);
				match(RESPECT);
				setState(7565);
				match(NULLS);
				}
				}
				break;
			case IGNORE:
				{
				{
				setState(7566);
				match(IGNORE);
				setState(7567);
				match(NULLS);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowPartitionClauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(DB2zSQLParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public WindowPartitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowPartitionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterWindowPartitionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitWindowPartitionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitWindowPartitionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowPartitionClauseContext windowPartitionClause() throws RecognitionException {
		WindowPartitionClauseContext _localctx = new WindowPartitionClauseContext(_ctx, getState());
		enterRule(_localctx, 908, RULE_windowPartitionClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7570);
			match(PARTITION);
			setState(7571);
			match(BY);
			setState(7572);
			expression();
			setState(7577);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7573);
				match(COMMA);
				setState(7574);
				expression();
				}
				}
				setState(7579);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowOrderClauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(DB2zSQLParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<WindowOrderClauseQualifierContext> windowOrderClauseQualifier() {
			return getRuleContexts(WindowOrderClauseQualifierContext.class);
		}
		public WindowOrderClauseQualifierContext windowOrderClauseQualifier(int i) {
			return getRuleContext(WindowOrderClauseQualifierContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public WindowOrderClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowOrderClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterWindowOrderClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitWindowOrderClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitWindowOrderClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowOrderClauseContext windowOrderClause() throws RecognitionException {
		WindowOrderClauseContext _localctx = new WindowOrderClauseContext(_ctx, getState());
		enterRule(_localctx, 910, RULE_windowOrderClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7580);
			match(ORDER);
			setState(7581);
			match(BY);
			setState(7582);
			expression();
			setState(7584);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(7583);
				windowOrderClauseQualifier();
				}
			}

			setState(7593);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7586);
				match(COMMA);
				setState(7587);
				expression();
				setState(7589);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					setState(7588);
					windowOrderClauseQualifier();
					}
				}

				}
				}
				setState(7595);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowOrderClauseQualifierContext extends ParserRuleContext {
		public TerminalNode ASC() { return getToken(DB2zSQLParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(DB2zSQLParser.DESC, 0); }
		public TerminalNode NULLS() { return getToken(DB2zSQLParser.NULLS, 0); }
		public TerminalNode FIRST() { return getToken(DB2zSQLParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(DB2zSQLParser.LAST, 0); }
		public WindowOrderClauseQualifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowOrderClauseQualifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterWindowOrderClauseQualifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitWindowOrderClauseQualifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitWindowOrderClauseQualifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowOrderClauseQualifierContext windowOrderClauseQualifier() throws RecognitionException {
		WindowOrderClauseQualifierContext _localctx = new WindowOrderClauseQualifierContext(_ctx, getState());
		enterRule(_localctx, 912, RULE_windowOrderClauseQualifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7596);
			_la = _input.LA(1);
			if ( !(_la==ASC || _la==DESC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(7599);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NULLS) {
				{
				setState(7597);
				match(NULLS);
				setState(7598);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumberingSpecificationContext extends ParserRuleContext {
		public TerminalNode ROW_NUMBER() { return getToken(DB2zSQLParser.ROW_NUMBER, 0); }
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public TerminalNode OVER() { return getToken(DB2zSQLParser.OVER, 0); }
		public WindowPartitionClauseContext windowPartitionClause() {
			return getRuleContext(WindowPartitionClauseContext.class,0);
		}
		public WindowOrderClauseContext windowOrderClause() {
			return getRuleContext(WindowOrderClauseContext.class,0);
		}
		public NumberingSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numberingSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterNumberingSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitNumberingSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitNumberingSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumberingSpecificationContext numberingSpecification() throws RecognitionException {
		NumberingSpecificationContext _localctx = new NumberingSpecificationContext(_ctx, getState());
		enterRule(_localctx, 914, RULE_numberingSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7601);
			match(ROW_NUMBER);
			setState(7602);
			match(LPAREN);
			setState(7603);
			match(RPAREN);
			setState(7604);
			match(OVER);
			setState(7605);
			match(LPAREN);
			setState(7607);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(7606);
				windowPartitionClause();
				}
			}

			setState(7610);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(7609);
				windowOrderClause();
				}
			}

			setState(7612);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggregationSpecificationContext extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(DB2zSQLParser.OVER, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public AggregateFunctionInvocationContext aggregateFunctionInvocation() {
			return getRuleContext(AggregateFunctionInvocationContext.class,0);
		}
		public OlapColumnFunctionContext olapColumnFunction() {
			return getRuleContext(OlapColumnFunctionContext.class,0);
		}
		public WindowPartitionClauseContext windowPartitionClause() {
			return getRuleContext(WindowPartitionClauseContext.class,0);
		}
		public TerminalNode RANGE() { return getToken(DB2zSQLParser.RANGE, 0); }
		public TerminalNode BETWEEN() { return getToken(DB2zSQLParser.BETWEEN, 0); }
		public List<TerminalNode> UNBOUNDED() { return getTokens(DB2zSQLParser.UNBOUNDED); }
		public TerminalNode UNBOUNDED(int i) {
			return getToken(DB2zSQLParser.UNBOUNDED, i);
		}
		public TerminalNode PRECEDING() { return getToken(DB2zSQLParser.PRECEDING, 0); }
		public TerminalNode AND() { return getToken(DB2zSQLParser.AND, 0); }
		public TerminalNode FOLLOWING() { return getToken(DB2zSQLParser.FOLLOWING, 0); }
		public WindowOrderClauseContext windowOrderClause() {
			return getRuleContext(WindowOrderClauseContext.class,0);
		}
		public WindowAggregationGroupClauseContext windowAggregationGroupClause() {
			return getRuleContext(WindowAggregationGroupClauseContext.class,0);
		}
		public TerminalNode CURRENT() { return getToken(DB2zSQLParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(DB2zSQLParser.ROW, 0); }
		public AggregationSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregationSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAggregationSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAggregationSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAggregationSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggregationSpecificationContext aggregationSpecification() throws RecognitionException {
		AggregationSpecificationContext _localctx = new AggregationSpecificationContext(_ctx, getState());
		enterRule(_localctx, 916, RULE_aggregationSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7616);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,894,_ctx) ) {
			case 1:
				{
				setState(7614);
				aggregateFunctionInvocation();
				}
				break;
			case 2:
				{
				setState(7615);
				olapColumnFunction();
				}
				break;
			}
			setState(7618);
			match(OVER);
			setState(7619);
			match(LPAREN);
			setState(7621);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(7620);
				windowPartitionClause();
				}
			}

			setState(7641);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RANGE:
				{
				{
				setState(7623);
				match(RANGE);
				setState(7624);
				match(BETWEEN);
				setState(7625);
				match(UNBOUNDED);
				setState(7626);
				match(PRECEDING);
				setState(7627);
				match(AND);
				setState(7628);
				match(UNBOUNDED);
				setState(7629);
				match(FOLLOWING);
				}
				}
				break;
			case ORDER:
				{
				{
				setState(7630);
				windowOrderClause();
				setState(7639);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,896,_ctx) ) {
				case 1:
					{
					{
					setState(7631);
					match(RANGE);
					setState(7632);
					match(BETWEEN);
					setState(7633);
					match(UNBOUNDED);
					setState(7634);
					match(PRECEDING);
					setState(7635);
					match(AND);
					setState(7636);
					match(CURRENT);
					setState(7637);
					match(ROW);
					}
					}
					break;
				case 2:
					{
					setState(7638);
					windowAggregationGroupClause();
					}
					break;
				}
				}
				}
				break;
			case RPAREN:
				break;
			default:
				break;
			}
			setState(7643);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggregateFunctionContext extends ParserRuleContext {
		public TerminalNode ARRAY_AGG() { return getToken(DB2zSQLParser.ARRAY_AGG, 0); }
		public TerminalNode AVG() { return getToken(DB2zSQLParser.AVG, 0); }
		public TerminalNode CORR() { return getToken(DB2zSQLParser.CORR, 0); }
		public TerminalNode CORRELATION() { return getToken(DB2zSQLParser.CORRELATION, 0); }
		public TerminalNode COUNT() { return getToken(DB2zSQLParser.COUNT, 0); }
		public TerminalNode COUNT_BIG() { return getToken(DB2zSQLParser.COUNT_BIG, 0); }
		public TerminalNode COVAR_POP() { return getToken(DB2zSQLParser.COVAR_POP, 0); }
		public TerminalNode COVARIANCE() { return getToken(DB2zSQLParser.COVARIANCE, 0); }
		public TerminalNode COVAR() { return getToken(DB2zSQLParser.COVAR, 0); }
		public TerminalNode COVAR_SAMP() { return getToken(DB2zSQLParser.COVAR_SAMP, 0); }
		public TerminalNode COVARIANCE_SAMP() { return getToken(DB2zSQLParser.COVARIANCE_SAMP, 0); }
		public TerminalNode CUME_DIST() { return getToken(DB2zSQLParser.CUME_DIST, 0); }
		public TerminalNode GROUPING() { return getToken(DB2zSQLParser.GROUPING, 0); }
		public TerminalNode LISTAGG() { return getToken(DB2zSQLParser.LISTAGG, 0); }
		public TerminalNode MAX() { return getToken(DB2zSQLParser.MAX, 0); }
		public TerminalNode MEDIAN() { return getToken(DB2zSQLParser.MEDIAN, 0); }
		public TerminalNode MIN() { return getToken(DB2zSQLParser.MIN, 0); }
		public TerminalNode PERCENTILE_CONT() { return getToken(DB2zSQLParser.PERCENTILE_CONT, 0); }
		public TerminalNode PERCENTILE_DISC() { return getToken(DB2zSQLParser.PERCENTILE_DISC, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(DB2zSQLParser.PERCENT_RANK, 0); }
		public TerminalNode STDDEV_POP() { return getToken(DB2zSQLParser.STDDEV_POP, 0); }
		public TerminalNode STDDEV() { return getToken(DB2zSQLParser.STDDEV, 0); }
		public TerminalNode STDDEV_SAMP() { return getToken(DB2zSQLParser.STDDEV_SAMP, 0); }
		public TerminalNode SUM() { return getToken(DB2zSQLParser.SUM, 0); }
		public TerminalNode VAR_POP() { return getToken(DB2zSQLParser.VAR_POP, 0); }
		public TerminalNode VARIANCE() { return getToken(DB2zSQLParser.VARIANCE, 0); }
		public TerminalNode VAR() { return getToken(DB2zSQLParser.VAR, 0); }
		public TerminalNode VAR_SAMP() { return getToken(DB2zSQLParser.VAR_SAMP, 0); }
		public TerminalNode VARIANCE_SAMP() { return getToken(DB2zSQLParser.VARIANCE_SAMP, 0); }
		public TerminalNode XMLAGG() { return getToken(DB2zSQLParser.XMLAGG, 0); }
		public AggregateFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregateFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAggregateFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAggregateFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAggregateFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggregateFunctionContext aggregateFunction() throws RecognitionException {
		AggregateFunctionContext _localctx = new AggregateFunctionContext(_ctx, getState());
		enterRule(_localctx, 918, RULE_aggregateFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7645);
			_la = _input.LA(1);
			if ( !(((((_la - 331)) & ~0x3f) == 0 && ((1L << (_la - 331)) & ((1L << (ARRAY_AGG - 331)) | (1L << (AVG - 331)) | (1L << (CORR - 331)) | (1L << (CORRELATION - 331)) | (1L << (COUNT - 331)) | (1L << (COUNT_BIG - 331)) | (1L << (COVAR - 331)) | (1L << (COVARIANCE - 331)) | (1L << (COVARIANCE_SAMP - 331)) | (1L << (COVAR_POP - 331)) | (1L << (COVAR_SAMP - 331)) | (1L << (CUME_DIST - 331)) | (1L << (GROUPING - 331)) | (1L << (LISTAGG - 331)) | (1L << (MEDIAN - 331)) | (1L << (PERCENTILE_CONT - 331)) | (1L << (PERCENTILE_DISC - 331)) | (1L << (PERCENT_RANK - 331)))) != 0) || ((((_la - 409)) & ~0x3f) == 0 && ((1L << (_la - 409)) & ((1L << (STDDEV - 409)) | (1L << (STDDEV_POP - 409)) | (1L << (STDDEV_SAMP - 409)) | (1L << (SUM - 409)) | (1L << (VAR - 409)) | (1L << (VARIANCE - 409)) | (1L << (VARIANCE_SAMP - 409)) | (1L << (VAR_POP - 409)) | (1L << (VAR_SAMP - 409)) | (1L << (XMLAGG - 409)))) != 0) || _la==MAX || _la==MIN) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RegressionFunctionContext extends ParserRuleContext {
		public TerminalNode REGR_AVGX() { return getToken(DB2zSQLParser.REGR_AVGX, 0); }
		public TerminalNode REGR_AVGY() { return getToken(DB2zSQLParser.REGR_AVGY, 0); }
		public TerminalNode REGR_COUNT() { return getToken(DB2zSQLParser.REGR_COUNT, 0); }
		public TerminalNode REGR_INTERCEPT() { return getToken(DB2zSQLParser.REGR_INTERCEPT, 0); }
		public TerminalNode REGR_ICPT() { return getToken(DB2zSQLParser.REGR_ICPT, 0); }
		public TerminalNode REGR_R2() { return getToken(DB2zSQLParser.REGR_R2, 0); }
		public TerminalNode REGR_SLOPE() { return getToken(DB2zSQLParser.REGR_SLOPE, 0); }
		public TerminalNode REGR_SXX() { return getToken(DB2zSQLParser.REGR_SXX, 0); }
		public TerminalNode REGR_SXY() { return getToken(DB2zSQLParser.REGR_SXY, 0); }
		public TerminalNode REGR_SYY() { return getToken(DB2zSQLParser.REGR_SYY, 0); }
		public RegressionFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regressionFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRegressionFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRegressionFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRegressionFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RegressionFunctionContext regressionFunction() throws RecognitionException {
		RegressionFunctionContext _localctx = new RegressionFunctionContext(_ctx, getState());
		enterRule(_localctx, 920, RULE_regressionFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7647);
			_la = _input.LA(1);
			if ( !(((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (REGR_AVGX - 389)) | (1L << (REGR_AVGY - 389)) | (1L << (REGR_COUNT - 389)) | (1L << (REGR_ICPT - 389)) | (1L << (REGR_INTERCEPT - 389)) | (1L << (REGR_R2 - 389)) | (1L << (REGR_SLOPE - 389)) | (1L << (REGR_SXX - 389)) | (1L << (REGR_SXY - 389)) | (1L << (REGR_SYY - 389)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OlapColumnFunctionContext extends ParserRuleContext {
		public FirstValueFunctionContext firstValueFunction() {
			return getRuleContext(FirstValueFunctionContext.class,0);
		}
		public LastValueFunctionContext lastValueFunction() {
			return getRuleContext(LastValueFunctionContext.class,0);
		}
		public NthValueFunctionContext nthValueFunction() {
			return getRuleContext(NthValueFunctionContext.class,0);
		}
		public RatioToReportFunctionContext ratioToReportFunction() {
			return getRuleContext(RatioToReportFunctionContext.class,0);
		}
		public OlapColumnFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_olapColumnFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterOlapColumnFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitOlapColumnFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitOlapColumnFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OlapColumnFunctionContext olapColumnFunction() throws RecognitionException {
		OlapColumnFunctionContext _localctx = new OlapColumnFunctionContext(_ctx, getState());
		enterRule(_localctx, 922, RULE_olapColumnFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7653);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FIRST_VALUE:
				{
				setState(7649);
				firstValueFunction();
				}
				break;
			case LAST_VALUE:
				{
				setState(7650);
				lastValueFunction();
				}
				break;
			case NTH_VALUE:
				{
				setState(7651);
				nthValueFunction();
				}
				break;
			case RATIO_TO_REPORT:
				{
				setState(7652);
				ratioToReportFunction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FirstValueFunctionContext extends ParserRuleContext {
		public TerminalNode FIRST_VALUE() { return getToken(DB2zSQLParser.FIRST_VALUE, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode COMMA() { return getToken(DB2zSQLParser.COMMA, 0); }
		public RespectNullsClauseContext respectNullsClause() {
			return getRuleContext(RespectNullsClauseContext.class,0);
		}
		public FirstValueFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_firstValueFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFirstValueFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFirstValueFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFirstValueFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FirstValueFunctionContext firstValueFunction() throws RecognitionException {
		FirstValueFunctionContext _localctx = new FirstValueFunctionContext(_ctx, getState());
		enterRule(_localctx, 924, RULE_firstValueFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7655);
			match(FIRST_VALUE);
			setState(7656);
			match(LPAREN);
			setState(7657);
			expression();
			setState(7660);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(7658);
				match(COMMA);
				setState(7659);
				respectNullsClause();
				}
			}

			setState(7662);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LastValueFunctionContext extends ParserRuleContext {
		public TerminalNode LAST_VALUE() { return getToken(DB2zSQLParser.LAST_VALUE, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode COMMA() { return getToken(DB2zSQLParser.COMMA, 0); }
		public RespectNullsClauseContext respectNullsClause() {
			return getRuleContext(RespectNullsClauseContext.class,0);
		}
		public LastValueFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lastValueFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterLastValueFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitLastValueFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitLastValueFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LastValueFunctionContext lastValueFunction() throws RecognitionException {
		LastValueFunctionContext _localctx = new LastValueFunctionContext(_ctx, getState());
		enterRule(_localctx, 926, RULE_lastValueFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7664);
			match(LAST_VALUE);
			setState(7665);
			match(LPAREN);
			setState(7666);
			expression();
			setState(7669);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(7667);
				match(COMMA);
				setState(7668);
				respectNullsClause();
				}
			}

			setState(7671);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NthValueFunctionContext extends ParserRuleContext {
		public TerminalNode NTH_VALUE() { return getToken(DB2zSQLParser.NTH_VALUE, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(DB2zSQLParser.COMMA, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public NthValueFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nthValueFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterNthValueFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitNthValueFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitNthValueFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NthValueFunctionContext nthValueFunction() throws RecognitionException {
		NthValueFunctionContext _localctx = new NthValueFunctionContext(_ctx, getState());
		enterRule(_localctx, 928, RULE_nthValueFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7673);
			match(NTH_VALUE);
			setState(7674);
			match(LPAREN);
			setState(7675);
			expression();
			setState(7676);
			match(COMMA);
			setState(7677);
			match(INTEGERLITERAL);
			setState(7678);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RatioToReportFunctionContext extends ParserRuleContext {
		public TerminalNode RATIO_TO_REPORT() { return getToken(DB2zSQLParser.RATIO_TO_REPORT, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public RatioToReportFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ratioToReportFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRatioToReportFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRatioToReportFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRatioToReportFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RatioToReportFunctionContext ratioToReportFunction() throws RecognitionException {
		RatioToReportFunctionContext _localctx = new RatioToReportFunctionContext(_ctx, getState());
		enterRule(_localctx, 930, RULE_ratioToReportFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7680);
			match(RATIO_TO_REPORT);
			setState(7681);
			match(LPAREN);
			setState(7682);
			expression();
			setState(7683);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowAggregationGroupClauseContext extends ParserRuleContext {
		public TerminalNode ROWS() { return getToken(DB2zSQLParser.ROWS, 0); }
		public TerminalNode RANGE() { return getToken(DB2zSQLParser.RANGE, 0); }
		public GroupStartContext groupStart() {
			return getRuleContext(GroupStartContext.class,0);
		}
		public GroupBetweenContext groupBetween() {
			return getRuleContext(GroupBetweenContext.class,0);
		}
		public GroupEndContext groupEnd() {
			return getRuleContext(GroupEndContext.class,0);
		}
		public WindowAggregationGroupClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowAggregationGroupClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterWindowAggregationGroupClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitWindowAggregationGroupClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitWindowAggregationGroupClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowAggregationGroupClauseContext windowAggregationGroupClause() throws RecognitionException {
		WindowAggregationGroupClauseContext _localctx = new WindowAggregationGroupClauseContext(_ctx, getState());
		enterRule(_localctx, 932, RULE_windowAggregationGroupClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7685);
			_la = _input.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(7689);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,901,_ctx) ) {
			case 1:
				{
				setState(7686);
				groupStart();
				}
				break;
			case 2:
				{
				setState(7687);
				groupBetween();
				}
				break;
			case 3:
				{
				setState(7688);
				groupEnd();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupStartContext extends ParserRuleContext {
		public UnboundedPrecedingContext unboundedPreceding() {
			return getRuleContext(UnboundedPrecedingContext.class,0);
		}
		public BoundedPrecedingContext boundedPreceding() {
			return getRuleContext(BoundedPrecedingContext.class,0);
		}
		public CurrentRowContext currentRow() {
			return getRuleContext(CurrentRowContext.class,0);
		}
		public GroupStartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupStart; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGroupStart(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGroupStart(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGroupStart(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupStartContext groupStart() throws RecognitionException {
		GroupStartContext _localctx = new GroupStartContext(_ctx, getState());
		enterRule(_localctx, 934, RULE_groupStart);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7694);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNBOUNDED:
				{
				setState(7691);
				unboundedPreceding();
				}
				break;
			case INTEGERLITERAL:
				{
				setState(7692);
				boundedPreceding();
				}
				break;
			case CURRENT:
				{
				setState(7693);
				currentRow();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupBetweenContext extends ParserRuleContext {
		public TerminalNode BETWEEN() { return getToken(DB2zSQLParser.BETWEEN, 0); }
		public GroupBound1Context groupBound1() {
			return getRuleContext(GroupBound1Context.class,0);
		}
		public TerminalNode AND() { return getToken(DB2zSQLParser.AND, 0); }
		public GroupBound2Context groupBound2() {
			return getRuleContext(GroupBound2Context.class,0);
		}
		public GroupBetweenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupBetween; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGroupBetween(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGroupBetween(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGroupBetween(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupBetweenContext groupBetween() throws RecognitionException {
		GroupBetweenContext _localctx = new GroupBetweenContext(_ctx, getState());
		enterRule(_localctx, 936, RULE_groupBetween);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7696);
			match(BETWEEN);
			setState(7697);
			groupBound1();
			setState(7698);
			match(AND);
			setState(7699);
			groupBound2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupEndContext extends ParserRuleContext {
		public UnboundedFollowingContext unboundedFollowing() {
			return getRuleContext(UnboundedFollowingContext.class,0);
		}
		public BoundedFollowingContext boundedFollowing() {
			return getRuleContext(BoundedFollowingContext.class,0);
		}
		public GroupEndContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupEnd; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGroupEnd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGroupEnd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGroupEnd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupEndContext groupEnd() throws RecognitionException {
		GroupEndContext _localctx = new GroupEndContext(_ctx, getState());
		enterRule(_localctx, 938, RULE_groupEnd);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7703);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNBOUNDED:
				{
				setState(7701);
				unboundedFollowing();
				}
				break;
			case INTEGERLITERAL:
				{
				setState(7702);
				boundedFollowing();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupBound1Context extends ParserRuleContext {
		public UnboundedPrecedingContext unboundedPreceding() {
			return getRuleContext(UnboundedPrecedingContext.class,0);
		}
		public BoundedPrecedingContext boundedPreceding() {
			return getRuleContext(BoundedPrecedingContext.class,0);
		}
		public BoundedFollowingContext boundedFollowing() {
			return getRuleContext(BoundedFollowingContext.class,0);
		}
		public CurrentRowContext currentRow() {
			return getRuleContext(CurrentRowContext.class,0);
		}
		public GroupBound1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupBound1; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGroupBound1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGroupBound1(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGroupBound1(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupBound1Context groupBound1() throws RecognitionException {
		GroupBound1Context _localctx = new GroupBound1Context(_ctx, getState());
		enterRule(_localctx, 940, RULE_groupBound1);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7709);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,904,_ctx) ) {
			case 1:
				{
				setState(7705);
				unboundedPreceding();
				}
				break;
			case 2:
				{
				setState(7706);
				boundedPreceding();
				}
				break;
			case 3:
				{
				setState(7707);
				boundedFollowing();
				}
				break;
			case 4:
				{
				setState(7708);
				currentRow();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupBound2Context extends ParserRuleContext {
		public UnboundedFollowingContext unboundedFollowing() {
			return getRuleContext(UnboundedFollowingContext.class,0);
		}
		public BoundedPrecedingContext boundedPreceding() {
			return getRuleContext(BoundedPrecedingContext.class,0);
		}
		public BoundedFollowingContext boundedFollowing() {
			return getRuleContext(BoundedFollowingContext.class,0);
		}
		public CurrentRowContext currentRow() {
			return getRuleContext(CurrentRowContext.class,0);
		}
		public GroupBound2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupBound2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGroupBound2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGroupBound2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGroupBound2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupBound2Context groupBound2() throws RecognitionException {
		GroupBound2Context _localctx = new GroupBound2Context(_ctx, getState());
		enterRule(_localctx, 942, RULE_groupBound2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7715);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,905,_ctx) ) {
			case 1:
				{
				setState(7711);
				unboundedFollowing();
				}
				break;
			case 2:
				{
				setState(7712);
				boundedPreceding();
				}
				break;
			case 3:
				{
				setState(7713);
				boundedFollowing();
				}
				break;
			case 4:
				{
				setState(7714);
				currentRow();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnboundedPrecedingContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(DB2zSQLParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(DB2zSQLParser.PRECEDING, 0); }
		public UnboundedPrecedingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unboundedPreceding; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterUnboundedPreceding(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitUnboundedPreceding(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitUnboundedPreceding(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnboundedPrecedingContext unboundedPreceding() throws RecognitionException {
		UnboundedPrecedingContext _localctx = new UnboundedPrecedingContext(_ctx, getState());
		enterRule(_localctx, 944, RULE_unboundedPreceding);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7717);
			match(UNBOUNDED);
			setState(7718);
			match(PRECEDING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnboundedFollowingContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(DB2zSQLParser.UNBOUNDED, 0); }
		public TerminalNode FOLLOWING() { return getToken(DB2zSQLParser.FOLLOWING, 0); }
		public UnboundedFollowingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unboundedFollowing; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterUnboundedFollowing(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitUnboundedFollowing(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitUnboundedFollowing(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnboundedFollowingContext unboundedFollowing() throws RecognitionException {
		UnboundedFollowingContext _localctx = new UnboundedFollowingContext(_ctx, getState());
		enterRule(_localctx, 946, RULE_unboundedFollowing);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7720);
			match(UNBOUNDED);
			setState(7721);
			match(FOLLOWING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BoundedPrecedingContext extends ParserRuleContext {
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode PRECEDING() { return getToken(DB2zSQLParser.PRECEDING, 0); }
		public BoundedPrecedingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boundedPreceding; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterBoundedPreceding(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitBoundedPreceding(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitBoundedPreceding(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BoundedPrecedingContext boundedPreceding() throws RecognitionException {
		BoundedPrecedingContext _localctx = new BoundedPrecedingContext(_ctx, getState());
		enterRule(_localctx, 948, RULE_boundedPreceding);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7723);
			match(INTEGERLITERAL);
			setState(7724);
			match(PRECEDING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BoundedFollowingContext extends ParserRuleContext {
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode FOLLOWING() { return getToken(DB2zSQLParser.FOLLOWING, 0); }
		public BoundedFollowingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boundedFollowing; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterBoundedFollowing(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitBoundedFollowing(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitBoundedFollowing(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BoundedFollowingContext boundedFollowing() throws RecognitionException {
		BoundedFollowingContext _localctx = new BoundedFollowingContext(_ctx, getState());
		enterRule(_localctx, 950, RULE_boundedFollowing);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7726);
			match(INTEGERLITERAL);
			setState(7727);
			match(FOLLOWING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CurrentRowContext extends ParserRuleContext {
		public TerminalNode CURRENT() { return getToken(DB2zSQLParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(DB2zSQLParser.ROW, 0); }
		public CurrentRowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_currentRow; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCurrentRow(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCurrentRow(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCurrentRow(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CurrentRowContext currentRow() throws RecognitionException {
		CurrentRowContext _localctx = new CurrentRowContext(_ctx, getState());
		enterRule(_localctx, 952, RULE_currentRow);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7729);
			match(CURRENT);
			setState(7730);
			match(ROW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScalarFunctionContext extends ParserRuleContext {
		public TerminalNode ABS() { return getToken(DB2zSQLParser.ABS, 0); }
		public TerminalNode ABSVAL() { return getToken(DB2zSQLParser.ABSVAL, 0); }
		public TerminalNode ACOS() { return getToken(DB2zSQLParser.ACOS, 0); }
		public TerminalNode ADD_DAYS() { return getToken(DB2zSQLParser.ADD_DAYS, 0); }
		public TerminalNode ADD_MONTHS() { return getToken(DB2zSQLParser.ADD_MONTHS, 0); }
		public TerminalNode ARRAY_DELETE() { return getToken(DB2zSQLParser.ARRAY_DELETE, 0); }
		public TerminalNode ARRAY_FIRST() { return getToken(DB2zSQLParser.ARRAY_FIRST, 0); }
		public TerminalNode ARRAY_LAST() { return getToken(DB2zSQLParser.ARRAY_LAST, 0); }
		public TerminalNode ARRAY_NEXT() { return getToken(DB2zSQLParser.ARRAY_NEXT, 0); }
		public TerminalNode ARRAY_PRIOR() { return getToken(DB2zSQLParser.ARRAY_PRIOR, 0); }
		public TerminalNode ARRAY_TRIM() { return getToken(DB2zSQLParser.ARRAY_TRIM, 0); }
		public TerminalNode ASCII() { return getToken(DB2zSQLParser.ASCII, 0); }
		public TerminalNode ASCII_CHR() { return getToken(DB2zSQLParser.ASCII_CHR, 0); }
		public TerminalNode ASCIISTR() { return getToken(DB2zSQLParser.ASCIISTR, 0); }
		public TerminalNode ASCII_STR() { return getToken(DB2zSQLParser.ASCII_STR, 0); }
		public TerminalNode ASIN() { return getToken(DB2zSQLParser.ASIN, 0); }
		public TerminalNode ATAN() { return getToken(DB2zSQLParser.ATAN, 0); }
		public TerminalNode ATAN2() { return getToken(DB2zSQLParser.ATAN2, 0); }
		public TerminalNode ATANH() { return getToken(DB2zSQLParser.ATANH, 0); }
		public TerminalNode BIGINT() { return getToken(DB2zSQLParser.BIGINT, 0); }
		public TerminalNode BINARY() { return getToken(DB2zSQLParser.BINARY, 0); }
		public TerminalNode BITAND() { return getToken(DB2zSQLParser.BITAND, 0); }
		public TerminalNode BITANDNOT() { return getToken(DB2zSQLParser.BITANDNOT, 0); }
		public TerminalNode BITNOT() { return getToken(DB2zSQLParser.BITNOT, 0); }
		public TerminalNode BITOR() { return getToken(DB2zSQLParser.BITOR, 0); }
		public TerminalNode BITXOR() { return getToken(DB2zSQLParser.BITXOR, 0); }
		public TerminalNode BLOB() { return getToken(DB2zSQLParser.BLOB, 0); }
		public TerminalNode BTRIM() { return getToken(DB2zSQLParser.BTRIM, 0); }
		public TerminalNode CARDINALITY() { return getToken(DB2zSQLParser.CARDINALITY, 0); }
		public TerminalNode CCSID_ENCODING() { return getToken(DB2zSQLParser.CCSID_ENCODING, 0); }
		public TerminalNode CEIL() { return getToken(DB2zSQLParser.CEIL, 0); }
		public TerminalNode CEILING() { return getToken(DB2zSQLParser.CEILING, 0); }
		public TerminalNode CHAR() { return getToken(DB2zSQLParser.CHAR, 0); }
		public TerminalNode CHAR9() { return getToken(DB2zSQLParser.CHAR9, 0); }
		public TerminalNode CHARACTER_LENGTH() { return getToken(DB2zSQLParser.CHARACTER_LENGTH, 0); }
		public TerminalNode CHAR_LENGTH() { return getToken(DB2zSQLParser.CHAR_LENGTH, 0); }
		public TerminalNode CHR() { return getToken(DB2zSQLParser.CHR, 0); }
		public TerminalNode CLOB() { return getToken(DB2zSQLParser.CLOB, 0); }
		public TerminalNode COALESCE() { return getToken(DB2zSQLParser.COALESCE, 0); }
		public TerminalNode COLLATION_KEY() { return getToken(DB2zSQLParser.COLLATION_KEY, 0); }
		public TerminalNode COMPARE_DECFLOAT() { return getToken(DB2zSQLParser.COMPARE_DECFLOAT, 0); }
		public TerminalNode CONCAT() { return getToken(DB2zSQLParser.CONCAT, 0); }
		public TerminalNode CONTAINS() { return getToken(DB2zSQLParser.CONTAINS, 0); }
		public TerminalNode COS() { return getToken(DB2zSQLParser.COS, 0); }
		public TerminalNode COSH() { return getToken(DB2zSQLParser.COSH, 0); }
		public TerminalNode DATE() { return getToken(DB2zSQLParser.DATE, 0); }
		public TerminalNode DAY() { return getToken(DB2zSQLParser.DAY, 0); }
		public TerminalNode DAYOFMONTH() { return getToken(DB2zSQLParser.DAYOFMONTH, 0); }
		public TerminalNode DAYOFWEEK() { return getToken(DB2zSQLParser.DAYOFWEEK, 0); }
		public TerminalNode DAYOFWEEK_ISO() { return getToken(DB2zSQLParser.DAYOFWEEK_ISO, 0); }
		public TerminalNode DAYOFYEAR() { return getToken(DB2zSQLParser.DAYOFYEAR, 0); }
		public TerminalNode DAYS() { return getToken(DB2zSQLParser.DAYS, 0); }
		public TerminalNode DAYS_BETWEEN() { return getToken(DB2zSQLParser.DAYS_BETWEEN, 0); }
		public TerminalNode DBCLOB() { return getToken(DB2zSQLParser.DBCLOB, 0); }
		public TerminalNode DEC() { return getToken(DB2zSQLParser.DEC, 0); }
		public TerminalNode DECFLOAT() { return getToken(DB2zSQLParser.DECFLOAT, 0); }
		public TerminalNode DECFLOAT_FORMAT() { return getToken(DB2zSQLParser.DECFLOAT_FORMAT, 0); }
		public TerminalNode DECFLOAT_SORTKEY() { return getToken(DB2zSQLParser.DECFLOAT_SORTKEY, 0); }
		public TerminalNode DECIMAL() { return getToken(DB2zSQLParser.DECIMAL, 0); }
		public TerminalNode DECODE() { return getToken(DB2zSQLParser.DECODE, 0); }
		public TerminalNode DECRYPT_BINARY() { return getToken(DB2zSQLParser.DECRYPT_BINARY, 0); }
		public TerminalNode DECRYPT_BIT() { return getToken(DB2zSQLParser.DECRYPT_BIT, 0); }
		public TerminalNode DECRYPT_CHAR() { return getToken(DB2zSQLParser.DECRYPT_CHAR, 0); }
		public TerminalNode DECRYPT_DATAKEY_BIGINT() { return getToken(DB2zSQLParser.DECRYPT_DATAKEY_BIGINT, 0); }
		public TerminalNode DECRYPT_DATAKEY_BIT() { return getToken(DB2zSQLParser.DECRYPT_DATAKEY_BIT, 0); }
		public TerminalNode DECRYPT_DATAKEY_CLOB() { return getToken(DB2zSQLParser.DECRYPT_DATAKEY_CLOB, 0); }
		public TerminalNode DECRYPT_DATAKEY_DBCLOB() { return getToken(DB2zSQLParser.DECRYPT_DATAKEY_DBCLOB, 0); }
		public TerminalNode DECRYPT_DATAKEY_DECIMAL() { return getToken(DB2zSQLParser.DECRYPT_DATAKEY_DECIMAL, 0); }
		public TerminalNode DECRYPT_DATAKEY_INTEGER() { return getToken(DB2zSQLParser.DECRYPT_DATAKEY_INTEGER, 0); }
		public TerminalNode DECRYPT_DATAKEY_VARCHAR() { return getToken(DB2zSQLParser.DECRYPT_DATAKEY_VARCHAR, 0); }
		public TerminalNode DECRYPT_DATAKEY_VARGRAPHIC() { return getToken(DB2zSQLParser.DECRYPT_DATAKEY_VARGRAPHIC, 0); }
		public TerminalNode DECRYPT_DB() { return getToken(DB2zSQLParser.DECRYPT_DB, 0); }
		public TerminalNode DEGREES() { return getToken(DB2zSQLParser.DEGREES, 0); }
		public TerminalNode DIFFERENCE() { return getToken(DB2zSQLParser.DIFFERENCE, 0); }
		public TerminalNode DIGITS() { return getToken(DB2zSQLParser.DIGITS, 0); }
		public TerminalNode DOUBLE() { return getToken(DB2zSQLParser.DOUBLE, 0); }
		public TerminalNode DOUBLE_PRECISION() { return getToken(DB2zSQLParser.DOUBLE_PRECISION, 0); }
		public TerminalNode DSN_XMLVALIDATE() { return getToken(DB2zSQLParser.DSN_XMLVALIDATE, 0); }
		public TerminalNode EBCDIC_CHR() { return getToken(DB2zSQLParser.EBCDIC_CHR, 0); }
		public TerminalNode EBCDIC_STR() { return getToken(DB2zSQLParser.EBCDIC_STR, 0); }
		public TerminalNode ENCRYPT_DATAKEY() { return getToken(DB2zSQLParser.ENCRYPT_DATAKEY, 0); }
		public TerminalNode ENCRYPT_TDES() { return getToken(DB2zSQLParser.ENCRYPT_TDES, 0); }
		public TerminalNode EXP() { return getToken(DB2zSQLParser.EXP, 0); }
		public TerminalNode EXTRACT() { return getToken(DB2zSQLParser.EXTRACT, 0); }
		public TerminalNode FLOAT() { return getToken(DB2zSQLParser.FLOAT, 0); }
		public TerminalNode FLOOR() { return getToken(DB2zSQLParser.FLOOR, 0); }
		public TerminalNode GENERATE_UNIQUE() { return getToken(DB2zSQLParser.GENERATE_UNIQUE, 0); }
		public TerminalNode GENERATE_UNIQUE_BINARY() { return getToken(DB2zSQLParser.GENERATE_UNIQUE_BINARY, 0); }
		public TerminalNode GETHINT() { return getToken(DB2zSQLParser.GETHINT, 0); }
		public TerminalNode GETVARIABLE() { return getToken(DB2zSQLParser.GETVARIABLE, 0); }
		public TerminalNode GRAPHIC() { return getToken(DB2zSQLParser.GRAPHIC, 0); }
		public TerminalNode GREATEST() { return getToken(DB2zSQLParser.GREATEST, 0); }
		public TerminalNode HASH() { return getToken(DB2zSQLParser.HASH, 0); }
		public TerminalNode HASH_CRC32() { return getToken(DB2zSQLParser.HASH_CRC32, 0); }
		public TerminalNode HASH_MD5() { return getToken(DB2zSQLParser.HASH_MD5, 0); }
		public TerminalNode HASH_SHA1() { return getToken(DB2zSQLParser.HASH_SHA1, 0); }
		public TerminalNode HASH_SHA256() { return getToken(DB2zSQLParser.HASH_SHA256, 0); }
		public TerminalNode HEX() { return getToken(DB2zSQLParser.HEX, 0); }
		public TerminalNode HOUR() { return getToken(DB2zSQLParser.HOUR, 0); }
		public TerminalNode IDENTITY_VAL_LOCAL() { return getToken(DB2zSQLParser.IDENTITY_VAL_LOCAL, 0); }
		public TerminalNode IFNULL() { return getToken(DB2zSQLParser.IFNULL, 0); }
		public TerminalNode INSERT() { return getToken(DB2zSQLParser.INSERT, 0); }
		public TerminalNode INSTR() { return getToken(DB2zSQLParser.INSTR, 0); }
		public TerminalNode INT() { return getToken(DB2zSQLParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(DB2zSQLParser.INTEGER, 0); }
		public TerminalNode JULIAN_DAY() { return getToken(DB2zSQLParser.JULIAN_DAY, 0); }
		public TerminalNode LAST_DAY() { return getToken(DB2zSQLParser.LAST_DAY, 0); }
		public TerminalNode LCASE() { return getToken(DB2zSQLParser.LCASE, 0); }
		public TerminalNode LEAST() { return getToken(DB2zSQLParser.LEAST, 0); }
		public TerminalNode LEFT() { return getToken(DB2zSQLParser.LEFT, 0); }
		public TerminalNode LENGTH() { return getToken(DB2zSQLParser.LENGTH, 0); }
		public TerminalNode LN() { return getToken(DB2zSQLParser.LN, 0); }
		public TerminalNode LOCATE() { return getToken(DB2zSQLParser.LOCATE, 0); }
		public TerminalNode LOCATE_IN_STRING() { return getToken(DB2zSQLParser.LOCATE_IN_STRING, 0); }
		public TerminalNode LOG10() { return getToken(DB2zSQLParser.LOG10, 0); }
		public TerminalNode LOWER() { return getToken(DB2zSQLParser.LOWER, 0); }
		public TerminalNode LPAD() { return getToken(DB2zSQLParser.LPAD, 0); }
		public TerminalNode LTRIM() { return getToken(DB2zSQLParser.LTRIM, 0); }
		public TerminalNode MAX_CARDINALITY() { return getToken(DB2zSQLParser.MAX_CARDINALITY, 0); }
		public TerminalNode MICROSECOND() { return getToken(DB2zSQLParser.MICROSECOND, 0); }
		public TerminalNode MIDNIGHT_SECONDS() { return getToken(DB2zSQLParser.MIDNIGHT_SECONDS, 0); }
		public TerminalNode MINUTE() { return getToken(DB2zSQLParser.MINUTE, 0); }
		public TerminalNode MOD() { return getToken(DB2zSQLParser.MOD, 0); }
		public TerminalNode MONTH() { return getToken(DB2zSQLParser.MONTH, 0); }
		public TerminalNode MONTHS_BETWEEN() { return getToken(DB2zSQLParser.MONTHS_BETWEEN, 0); }
		public TerminalNode MQREAD() { return getToken(DB2zSQLParser.MQREAD, 0); }
		public TerminalNode MQREADCLOB() { return getToken(DB2zSQLParser.MQREADCLOB, 0); }
		public TerminalNode MQRECEIVE() { return getToken(DB2zSQLParser.MQRECEIVE, 0); }
		public TerminalNode MQRECEIVECLOB() { return getToken(DB2zSQLParser.MQRECEIVECLOB, 0); }
		public TerminalNode MQSEND() { return getToken(DB2zSQLParser.MQSEND, 0); }
		public TerminalNode MULTIPLY_ALT() { return getToken(DB2zSQLParser.MULTIPLY_ALT, 0); }
		public TerminalNode NEXT_DAY() { return getToken(DB2zSQLParser.NEXT_DAY, 0); }
		public TerminalNode NEXT_MONTH() { return getToken(DB2zSQLParser.NEXT_MONTH, 0); }
		public TerminalNode NORMALIZE_DECFLOAT() { return getToken(DB2zSQLParser.NORMALIZE_DECFLOAT, 0); }
		public TerminalNode NORMALIZE_STRING() { return getToken(DB2zSQLParser.NORMALIZE_STRING, 0); }
		public TerminalNode NULLIF() { return getToken(DB2zSQLParser.NULLIF, 0); }
		public TerminalNode NVL() { return getToken(DB2zSQLParser.NVL, 0); }
		public TerminalNode OVERLAY() { return getToken(DB2zSQLParser.OVERLAY, 0); }
		public TerminalNode PACK() { return getToken(DB2zSQLParser.PACK, 0); }
		public TerminalNode POSITION() { return getToken(DB2zSQLParser.POSITION, 0); }
		public TerminalNode POSSTR() { return getToken(DB2zSQLParser.POSSTR, 0); }
		public TerminalNode POW() { return getToken(DB2zSQLParser.POW, 0); }
		public TerminalNode POWER() { return getToken(DB2zSQLParser.POWER, 0); }
		public TerminalNode QUANTIZE() { return getToken(DB2zSQLParser.QUANTIZE, 0); }
		public TerminalNode QUARTER() { return getToken(DB2zSQLParser.QUARTER, 0); }
		public TerminalNode RADIANS() { return getToken(DB2zSQLParser.RADIANS, 0); }
		public TerminalNode RAISE_ERROR() { return getToken(DB2zSQLParser.RAISE_ERROR, 0); }
		public TerminalNode RAND() { return getToken(DB2zSQLParser.RAND, 0); }
		public TerminalNode RANDOM() { return getToken(DB2zSQLParser.RANDOM, 0); }
		public TerminalNode REAL() { return getToken(DB2zSQLParser.REAL, 0); }
		public TerminalNode REGEXP_COUNT() { return getToken(DB2zSQLParser.REGEXP_COUNT, 0); }
		public TerminalNode REGEXP_INSTR() { return getToken(DB2zSQLParser.REGEXP_INSTR, 0); }
		public TerminalNode REGEXP_LIKE() { return getToken(DB2zSQLParser.REGEXP_LIKE, 0); }
		public TerminalNode REGEXP_REPLACE() { return getToken(DB2zSQLParser.REGEXP_REPLACE, 0); }
		public TerminalNode REGEXP_SUBSTR() { return getToken(DB2zSQLParser.REGEXP_SUBSTR, 0); }
		public TerminalNode REPEAT() { return getToken(DB2zSQLParser.REPEAT, 0); }
		public TerminalNode REPLACE() { return getToken(DB2zSQLParser.REPLACE, 0); }
		public TerminalNode RID() { return getToken(DB2zSQLParser.RID, 0); }
		public TerminalNode RIGHT() { return getToken(DB2zSQLParser.RIGHT, 0); }
		public TerminalNode ROUND() { return getToken(DB2zSQLParser.ROUND, 0); }
		public TerminalNode ROUND_TIMESTAMP() { return getToken(DB2zSQLParser.ROUND_TIMESTAMP, 0); }
		public TerminalNode ROWID() { return getToken(DB2zSQLParser.ROWID, 0); }
		public TerminalNode RPAD() { return getToken(DB2zSQLParser.RPAD, 0); }
		public TerminalNode RTRIM() { return getToken(DB2zSQLParser.RTRIM, 0); }
		public TerminalNode SCORE() { return getToken(DB2zSQLParser.SCORE, 0); }
		public TerminalNode SECOND() { return getToken(DB2zSQLParser.SECOND, 0); }
		public TerminalNode SIGN() { return getToken(DB2zSQLParser.SIGN, 0); }
		public TerminalNode SIN() { return getToken(DB2zSQLParser.SIN, 0); }
		public TerminalNode SINH() { return getToken(DB2zSQLParser.SINH, 0); }
		public TerminalNode SMALLINT() { return getToken(DB2zSQLParser.SMALLINT, 0); }
		public TerminalNode SOAPHTTPC() { return getToken(DB2zSQLParser.SOAPHTTPC, 0); }
		public TerminalNode SOAPHTTPNC() { return getToken(DB2zSQLParser.SOAPHTTPNC, 0); }
		public TerminalNode SOAPHTTPNV() { return getToken(DB2zSQLParser.SOAPHTTPNV, 0); }
		public TerminalNode SOAPHTTPV() { return getToken(DB2zSQLParser.SOAPHTTPV, 0); }
		public TerminalNode SOUNDEX() { return getToken(DB2zSQLParser.SOUNDEX, 0); }
		public TerminalNode SPACE() { return getToken(DB2zSQLParser.SPACE, 0); }
		public TerminalNode SQRT() { return getToken(DB2zSQLParser.SQRT, 0); }
		public TerminalNode STRIP() { return getToken(DB2zSQLParser.STRIP, 0); }
		public TerminalNode STRLEFT() { return getToken(DB2zSQLParser.STRLEFT, 0); }
		public TerminalNode STRPOS() { return getToken(DB2zSQLParser.STRPOS, 0); }
		public TerminalNode STRRIGHT() { return getToken(DB2zSQLParser.STRRIGHT, 0); }
		public TerminalNode SUBSTR() { return getToken(DB2zSQLParser.SUBSTR, 0); }
		public TerminalNode SUBSTRING() { return getToken(DB2zSQLParser.SUBSTRING, 0); }
		public TerminalNode TAN() { return getToken(DB2zSQLParser.TAN, 0); }
		public TerminalNode TANH() { return getToken(DB2zSQLParser.TANH, 0); }
		public TerminalNode TIME() { return getToken(DB2zSQLParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(DB2zSQLParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMPADD() { return getToken(DB2zSQLParser.TIMESTAMPADD, 0); }
		public TerminalNode TIMESTAMPDIFF() { return getToken(DB2zSQLParser.TIMESTAMPDIFF, 0); }
		public TerminalNode TIMESTAMP_FORMAT() { return getToken(DB2zSQLParser.TIMESTAMP_FORMAT, 0); }
		public TerminalNode TIMESTAMP_ISO() { return getToken(DB2zSQLParser.TIMESTAMP_ISO, 0); }
		public TerminalNode TIMESTAMP_TZ() { return getToken(DB2zSQLParser.TIMESTAMP_TZ, 0); }
		public TerminalNode TO_CHAR() { return getToken(DB2zSQLParser.TO_CHAR, 0); }
		public TerminalNode TO_CLOB() { return getToken(DB2zSQLParser.TO_CLOB, 0); }
		public TerminalNode TO_DATE() { return getToken(DB2zSQLParser.TO_DATE, 0); }
		public TerminalNode TO_NUMBER() { return getToken(DB2zSQLParser.TO_NUMBER, 0); }
		public TerminalNode TOTALORDER() { return getToken(DB2zSQLParser.TOTALORDER, 0); }
		public TerminalNode TO_TIMESTAMP() { return getToken(DB2zSQLParser.TO_TIMESTAMP, 0); }
		public TerminalNode TRANSLATE() { return getToken(DB2zSQLParser.TRANSLATE, 0); }
		public TerminalNode TRIM() { return getToken(DB2zSQLParser.TRIM, 0); }
		public TerminalNode TRIM_ARRAY() { return getToken(DB2zSQLParser.TRIM_ARRAY, 0); }
		public TerminalNode TRUNC() { return getToken(DB2zSQLParser.TRUNC, 0); }
		public TerminalNode TRUNCATE() { return getToken(DB2zSQLParser.TRUNCATE, 0); }
		public TerminalNode TRUNC_TIMESTAMP() { return getToken(DB2zSQLParser.TRUNC_TIMESTAMP, 0); }
		public TerminalNode UCASE() { return getToken(DB2zSQLParser.UCASE, 0); }
		public TerminalNode UNICODE() { return getToken(DB2zSQLParser.UNICODE, 0); }
		public TerminalNode UNICODE_STR() { return getToken(DB2zSQLParser.UNICODE_STR, 0); }
		public TerminalNode UNISTR() { return getToken(DB2zSQLParser.UNISTR, 0); }
		public TerminalNode UPPER() { return getToken(DB2zSQLParser.UPPER, 0); }
		public TerminalNode VALUE() { return getToken(DB2zSQLParser.VALUE, 0); }
		public TerminalNode VARBINARY() { return getToken(DB2zSQLParser.VARBINARY, 0); }
		public TerminalNode VARCHAR() { return getToken(DB2zSQLParser.VARCHAR, 0); }
		public TerminalNode VARCHAR9() { return getToken(DB2zSQLParser.VARCHAR9, 0); }
		public TerminalNode VARCHAR_BIT_FORMAT() { return getToken(DB2zSQLParser.VARCHAR_BIT_FORMAT, 0); }
		public TerminalNode VARCHAR_FORMAT() { return getToken(DB2zSQLParser.VARCHAR_FORMAT, 0); }
		public TerminalNode VARGRAPHIC() { return getToken(DB2zSQLParser.VARGRAPHIC, 0); }
		public TerminalNode VERIFY_GROUP_FOR_USER() { return getToken(DB2zSQLParser.VERIFY_GROUP_FOR_USER, 0); }
		public TerminalNode VERIFY_ROLE_FOR_USER() { return getToken(DB2zSQLParser.VERIFY_ROLE_FOR_USER, 0); }
		public TerminalNode VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER() { return getToken(DB2zSQLParser.VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER, 0); }
		public TerminalNode WEEK() { return getToken(DB2zSQLParser.WEEK, 0); }
		public TerminalNode WEEK_ISO() { return getToken(DB2zSQLParser.WEEK_ISO, 0); }
		public TerminalNode WRAP() { return getToken(DB2zSQLParser.WRAP, 0); }
		public TerminalNode XMLATTRIBUTES() { return getToken(DB2zSQLParser.XMLATTRIBUTES, 0); }
		public TerminalNode XMLCOMMENT() { return getToken(DB2zSQLParser.XMLCOMMENT, 0); }
		public TerminalNode XMLCONCAT() { return getToken(DB2zSQLParser.XMLCONCAT, 0); }
		public TerminalNode XMLDOCUMENT() { return getToken(DB2zSQLParser.XMLDOCUMENT, 0); }
		public TerminalNode XMLELEMENT() { return getToken(DB2zSQLParser.XMLELEMENT, 0); }
		public TerminalNode XMLFOREST() { return getToken(DB2zSQLParser.XMLFOREST, 0); }
		public TerminalNode XMLMODIFY() { return getToken(DB2zSQLParser.XMLMODIFY, 0); }
		public TerminalNode XMLNAMESPACES() { return getToken(DB2zSQLParser.XMLNAMESPACES, 0); }
		public TerminalNode XMLPARSE() { return getToken(DB2zSQLParser.XMLPARSE, 0); }
		public TerminalNode XMLPI() { return getToken(DB2zSQLParser.XMLPI, 0); }
		public TerminalNode XMLQUERY() { return getToken(DB2zSQLParser.XMLQUERY, 0); }
		public TerminalNode XMLSERIALIZE() { return getToken(DB2zSQLParser.XMLSERIALIZE, 0); }
		public TerminalNode XMLTEXT() { return getToken(DB2zSQLParser.XMLTEXT, 0); }
		public TerminalNode XMLXSROBJECTID() { return getToken(DB2zSQLParser.XMLXSROBJECTID, 0); }
		public TerminalNode XSLTRANSFORM() { return getToken(DB2zSQLParser.XSLTRANSFORM, 0); }
		public TerminalNode YEAR() { return getToken(DB2zSQLParser.YEAR, 0); }
		public ScalarFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scalarFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterScalarFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitScalarFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitScalarFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ScalarFunctionContext scalarFunction() throws RecognitionException {
		ScalarFunctionContext _localctx = new ScalarFunctionContext(_ctx, getState());
		enterRule(_localctx, 954, RULE_scalarFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7732);
			_la = _input.LA(1);
			if ( !(((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR - 67)) | (1L << (CONCAT - 67)) | (1L << (CONTAINS - 67)) | (1L << (DAY - 67)) | (1L << (DAYS - 67)) | (1L << (DOUBLE - 67)))) != 0) || ((((_la - 149)) & ~0x3f) == 0 && ((1L << (_la - 149)) & ((1L << (HOUR - 149)) | (1L << (INSERT - 149)) | (1L << (LEFT - 149)) | (1L << (MICROSECOND - 149)) | (1L << (MONTH - 149)))) != 0) || ((((_la - 245)) & ~0x3f) == 0 && ((1L << (_la - 245)) & ((1L << (REPEAT - 245)) | (1L << (RIGHT - 245)) | (1L << (SECOND - 245)) | (1L << (TRUNCATE - 245)))) != 0) || ((((_la - 309)) & ~0x3f) == 0 && ((1L << (_la - 309)) & ((1L << (VALUE - 309)) | (1L << (XMLNAMESPACES - 309)) | (1L << (YEAR - 309)))) != 0) || ((((_la - 700)) & ~0x3f) == 0 && ((1L << (_la - 700)) & ((1L << (ABS - 700)) | (1L << (ABSVAL - 700)) | (1L << (ACOS - 700)) | (1L << (ADD_DAYS - 700)) | (1L << (ADD_MONTHS - 700)) | (1L << (ARRAY_DELETE - 700)) | (1L << (ARRAY_FIRST - 700)) | (1L << (ARRAY_LAST - 700)) | (1L << (ARRAY_NEXT - 700)) | (1L << (ARRAY_PRIOR - 700)) | (1L << (ARRAY_TRIM - 700)) | (1L << (ASCII - 700)) | (1L << (ASCII_CHR - 700)) | (1L << (ASCIISTR - 700)) | (1L << (ASCII_STR - 700)) | (1L << (ASIN - 700)) | (1L << (ATAN - 700)) | (1L << (ATAN2 - 700)) | (1L << (ATANH - 700)) | (1L << (BIGINT - 700)) | (1L << (BINARY - 700)) | (1L << (BITAND - 700)) | (1L << (BITANDNOT - 700)) | (1L << (BITNOT - 700)) | (1L << (BITOR - 700)) | (1L << (BITXOR - 700)) | (1L << (BLOB - 700)) | (1L << (BTRIM - 700)) | (1L << (CARDINALITY - 700)) | (1L << (CCSID_ENCODING - 700)) | (1L << (CEIL - 700)) | (1L << (CEILING - 700)) | (1L << (CHAR9 - 700)) | (1L << (CHARACTER_LENGTH - 700)) | (1L << (CHAR_LENGTH - 700)) | (1L << (CHR - 700)) | (1L << (CLOB - 700)) | (1L << (COALESCE - 700)) | (1L << (COLLATION_KEY - 700)) | (1L << (COMPARE_DECFLOAT - 700)) | (1L << (COS - 700)) | (1L << (COSH - 700)) | (1L << (DATE - 700)) | (1L << (DAYOFMONTH - 700)) | (1L << (DAYOFWEEK - 700)) | (1L << (DAYOFWEEK_ISO - 700)) | (1L << (DAYOFYEAR - 700)) | (1L << (DAYS_BETWEEN - 700)) | (1L << (DBCLOB - 700)) | (1L << (DEC - 700)) | (1L << (DECFLOAT - 700)) | (1L << (DECFLOAT_FORMAT - 700)) | (1L << (DECFLOAT_SORTKEY - 700)) | (1L << (DECIMAL - 700)) | (1L << (DECODE - 700)) | (1L << (DECRYPT_BINARY - 700)) | (1L << (DECRYPT_BIT - 700)) | (1L << (DECRYPT_CHAR - 700)) | (1L << (DECRYPT_DATAKEY_BIGINT - 700)) | (1L << (DECRYPT_DATAKEY_BIT - 700)) | (1L << (DECRYPT_DATAKEY_CLOB - 700)) | (1L << (DECRYPT_DATAKEY_DBCLOB - 700)) | (1L << (DECRYPT_DATAKEY_DECIMAL - 700)) | (1L << (DECRYPT_DATAKEY_INTEGER - 700)))) != 0) || ((((_la - 764)) & ~0x3f) == 0 && ((1L << (_la - 764)) & ((1L << (DECRYPT_DATAKEY_VARCHAR - 764)) | (1L << (DECRYPT_DATAKEY_VARGRAPHIC - 764)) | (1L << (DECRYPT_DB - 764)) | (1L << (DEGREES - 764)) | (1L << (DIFFERENCE - 764)) | (1L << (DIGITS - 764)) | (1L << (DOUBLE_PRECISION - 764)) | (1L << (DSN_XMLVALIDATE - 764)) | (1L << (EBCDIC_CHR - 764)) | (1L << (EBCDIC_STR - 764)) | (1L << (ENCRYPT_DATAKEY - 764)) | (1L << (ENCRYPT_TDES - 764)) | (1L << (EXP - 764)) | (1L << (EXTRACT - 764)) | (1L << (FLOAT - 764)) | (1L << (FLOOR - 764)) | (1L << (GENERATE_UNIQUE - 764)) | (1L << (GENERATE_UNIQUE_BINARY - 764)) | (1L << (GETHINT - 764)) | (1L << (GETVARIABLE - 764)) | (1L << (GRAPHIC - 764)) | (1L << (GREATEST - 764)) | (1L << (HASH - 764)) | (1L << (HASH_CRC32 - 764)) | (1L << (HASH_MD5 - 764)) | (1L << (HASH_SHA1 - 764)) | (1L << (HASH_SHA256 - 764)) | (1L << (HEX - 764)) | (1L << (IDENTITY_VAL_LOCAL - 764)) | (1L << (IFNULL - 764)) | (1L << (INSTR - 764)) | (1L << (INT - 764)) | (1L << (INTEGER - 764)) | (1L << (JULIAN_DAY - 764)) | (1L << (LAST_DAY - 764)) | (1L << (LCASE - 764)) | (1L << (LEAST - 764)) | (1L << (LENGTH - 764)) | (1L << (LN - 764)) | (1L << (LOCATE - 764)) | (1L << (LOCATE_IN_STRING - 764)) | (1L << (LOG10 - 764)) | (1L << (LOWER - 764)) | (1L << (LPAD - 764)) | (1L << (LTRIM - 764)) | (1L << (MAX_CARDINALITY - 764)) | (1L << (MIDNIGHT_SECONDS - 764)) | (1L << (MINUTE - 764)) | (1L << (MOD - 764)) | (1L << (MONTHS_BETWEEN - 764)) | (1L << (MQREAD - 764)) | (1L << (MQREADCLOB - 764)) | (1L << (MQRECEIVE - 764)) | (1L << (MQRECEIVECLOB - 764)) | (1L << (MQSEND - 764)) | (1L << (MULTIPLY_ALT - 764)) | (1L << (NEXT_DAY - 764)) | (1L << (NEXT_MONTH - 764)) | (1L << (NORMALIZE_DECFLOAT - 764)) | (1L << (NORMALIZE_STRING - 764)) | (1L << (NULLIF - 764)) | (1L << (NVL - 764)))) != 0) || ((((_la - 828)) & ~0x3f) == 0 && ((1L << (_la - 828)) & ((1L << (OVERLAY - 828)) | (1L << (PACK - 828)) | (1L << (POSITION - 828)) | (1L << (POSSTR - 828)) | (1L << (POW - 828)) | (1L << (POWER - 828)) | (1L << (QUANTIZE - 828)) | (1L << (QUARTER - 828)) | (1L << (RADIANS - 828)) | (1L << (RAISE_ERROR - 828)) | (1L << (RAND - 828)) | (1L << (RANDOM - 828)) | (1L << (REAL - 828)) | (1L << (REGEXP_COUNT - 828)) | (1L << (REGEXP_INSTR - 828)) | (1L << (REGEXP_LIKE - 828)) | (1L << (REGEXP_REPLACE - 828)) | (1L << (REGEXP_SUBSTR - 828)) | (1L << (REPLACE - 828)) | (1L << (RID - 828)) | (1L << (ROUND - 828)) | (1L << (ROUND_TIMESTAMP - 828)) | (1L << (ROWID - 828)) | (1L << (RPAD - 828)) | (1L << (RTRIM - 828)) | (1L << (SCORE - 828)) | (1L << (SIGN - 828)) | (1L << (SIN - 828)) | (1L << (SINH - 828)) | (1L << (SMALLINT - 828)) | (1L << (SOAPHTTPC - 828)) | (1L << (SOAPHTTPNC - 828)) | (1L << (SOAPHTTPNV - 828)) | (1L << (SOAPHTTPV - 828)) | (1L << (SOUNDEX - 828)) | (1L << (SPACE - 828)) | (1L << (SQRT - 828)) | (1L << (STRIP - 828)) | (1L << (STRLEFT - 828)) | (1L << (STRPOS - 828)) | (1L << (STRRIGHT - 828)) | (1L << (SUBSTR - 828)) | (1L << (SUBSTRING - 828)) | (1L << (TAN - 828)) | (1L << (TANH - 828)) | (1L << (TIME - 828)) | (1L << (TIMESTAMP - 828)) | (1L << (TIMESTAMPADD - 828)) | (1L << (TIMESTAMPDIFF - 828)) | (1L << (TIMESTAMP_FORMAT - 828)) | (1L << (TIMESTAMP_ISO - 828)) | (1L << (TIMESTAMP_TZ - 828)) | (1L << (TO_CHAR - 828)) | (1L << (TO_CLOB - 828)) | (1L << (TO_DATE - 828)) | (1L << (TO_NUMBER - 828)) | (1L << (TOTALORDER - 828)) | (1L << (TO_TIMESTAMP - 828)) | (1L << (TRANSLATE - 828)) | (1L << (TRIM - 828)) | (1L << (TRIM_ARRAY - 828)) | (1L << (TRUNC - 828)) | (1L << (TRUNC_TIMESTAMP - 828)) | (1L << (UCASE - 828)))) != 0) || ((((_la - 892)) & ~0x3f) == 0 && ((1L << (_la - 892)) & ((1L << (UNICODE - 892)) | (1L << (UNICODE_STR - 892)) | (1L << (UNISTR - 892)) | (1L << (UPPER - 892)) | (1L << (VARBINARY - 892)) | (1L << (VARCHAR - 892)) | (1L << (VARCHAR9 - 892)) | (1L << (VARCHAR_BIT_FORMAT - 892)) | (1L << (VARCHAR_FORMAT - 892)) | (1L << (VARGRAPHIC - 892)) | (1L << (VERIFY_GROUP_FOR_USER - 892)) | (1L << (VERIFY_ROLE_FOR_USER - 892)) | (1L << (VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER - 892)) | (1L << (WEEK - 892)) | (1L << (WEEK_ISO - 892)) | (1L << (WRAP - 892)) | (1L << (XMLATTRIBUTES - 892)) | (1L << (XMLCOMMENT - 892)) | (1L << (XMLCONCAT - 892)) | (1L << (XMLDOCUMENT - 892)) | (1L << (XMLELEMENT - 892)) | (1L << (XMLFOREST - 892)) | (1L << (XMLMODIFY - 892)) | (1L << (XMLPARSE - 892)) | (1L << (XMLPI - 892)) | (1L << (XMLQUERY - 892)) | (1L << (XMLSERIALIZE - 892)) | (1L << (XMLTEXT - 892)) | (1L << (XMLXSROBJECTID - 892)) | (1L << (XSLTRANSFORM - 892)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableFunctionContext extends ParserRuleContext {
		public TerminalNode ADMIN_TASK_LIST() { return getToken(DB2zSQLParser.ADMIN_TASK_LIST, 0); }
		public TerminalNode ADMIN_TASK_OUTPUT() { return getToken(DB2zSQLParser.ADMIN_TASK_OUTPUT, 0); }
		public TerminalNode ADMIN_TASK_STATUS() { return getToken(DB2zSQLParser.ADMIN_TASK_STATUS, 0); }
		public TerminalNode BLOCKING_THREADS() { return getToken(DB2zSQLParser.BLOCKING_THREADS, 0); }
		public TerminalNode MQREADALL() { return getToken(DB2zSQLParser.MQREADALL, 0); }
		public TerminalNode MQREADALLCLOB() { return getToken(DB2zSQLParser.MQREADALLCLOB, 0); }
		public TerminalNode MQRECEIVEALL() { return getToken(DB2zSQLParser.MQRECEIVEALL, 0); }
		public TerminalNode MQRECEIVEALLCLOB() { return getToken(DB2zSQLParser.MQRECEIVEALLCLOB, 0); }
		public TerminalNode XMLTABLE() { return getToken(DB2zSQLParser.XMLTABLE, 0); }
		public TableFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTableFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTableFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTableFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableFunctionContext tableFunction() throws RecognitionException {
		TableFunctionContext _localctx = new TableFunctionContext(_ctx, getState());
		enterRule(_localctx, 956, RULE_tableFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7734);
			_la = _input.LA(1);
			if ( !(((((_la - 961)) & ~0x3f) == 0 && ((1L << (_la - 961)) & ((1L << (ADMIN_TASK_LIST - 961)) | (1L << (ADMIN_TASK_OUTPUT - 961)) | (1L << (ADMIN_TASK_STATUS - 961)) | (1L << (BLOCKING_THREADS - 961)) | (1L << (MQREADALL - 961)) | (1L << (MQREADALLCLOB - 961)) | (1L << (MQRECEIVEALL - 961)) | (1L << (MQRECEIVEALLCLOB - 961)) | (1L << (XMLTABLE - 961)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SpecialRegisterContext extends ParserRuleContext {
		public TerminalNode CURRENT_ACCELERATOR() { return getToken(DB2zSQLParser.CURRENT_ACCELERATOR, 0); }
		public TerminalNode CURRENT_APPLICATION_COMPATIBILITY() { return getToken(DB2zSQLParser.CURRENT_APPLICATION_COMPATIBILITY, 0); }
		public TerminalNode CURRENT_APPLICATION_ENCODING_SCHEME() { return getToken(DB2zSQLParser.CURRENT_APPLICATION_ENCODING_SCHEME, 0); }
		public TerminalNode CURRENT_CLIENT_ACCTNG() { return getToken(DB2zSQLParser.CURRENT_CLIENT_ACCTNG, 0); }
		public TerminalNode CURRENT_CLIENT_APPLNAME() { return getToken(DB2zSQLParser.CURRENT_CLIENT_APPLNAME, 0); }
		public TerminalNode CURRENT_CLIENT_CORR_TOKEN() { return getToken(DB2zSQLParser.CURRENT_CLIENT_CORR_TOKEN, 0); }
		public TerminalNode CURRENT_CLIENT_USERID() { return getToken(DB2zSQLParser.CURRENT_CLIENT_USERID, 0); }
		public TerminalNode CURRENT_CLIENT_WRKSTNNAME() { return getToken(DB2zSQLParser.CURRENT_CLIENT_WRKSTNNAME, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(DB2zSQLParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_DEBUG_MODE() { return getToken(DB2zSQLParser.CURRENT_DEBUG_MODE, 0); }
		public TerminalNode CURRENT_DECFLOAT_ROUNDING_MODE() { return getToken(DB2zSQLParser.CURRENT_DECFLOAT_ROUNDING_MODE, 0); }
		public TerminalNode CURRENT_DEGREE() { return getToken(DB2zSQLParser.CURRENT_DEGREE, 0); }
		public TerminalNode CURRENT_EXPLAIN_MODE() { return getToken(DB2zSQLParser.CURRENT_EXPLAIN_MODE, 0); }
		public TerminalNode CURRENT_GET_ACCEL_ARCHIVE() { return getToken(DB2zSQLParser.CURRENT_GET_ACCEL_ARCHIVE, 0); }
		public TerminalNode CURRENT_LOCALE_LC_CTYPE() { return getToken(DB2zSQLParser.CURRENT_LOCALE_LC_CTYPE, 0); }
		public TerminalNode CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION() { return getToken(DB2zSQLParser.CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION, 0); }
		public TerminalNode CURRENT_MEMBER() { return getToken(DB2zSQLParser.CURRENT_MEMBER, 0); }
		public TerminalNode CURRENT_OPTIMIZATION_HINT() { return getToken(DB2zSQLParser.CURRENT_OPTIMIZATION_HINT, 0); }
		public TerminalNode CURRENT_PACKAGE_PATH() { return getToken(DB2zSQLParser.CURRENT_PACKAGE_PATH, 0); }
		public TerminalNode CURRENT_PACKAGESET() { return getToken(DB2zSQLParser.CURRENT_PACKAGESET, 0); }
		public TerminalNode CURRENT_PATH() { return getToken(DB2zSQLParser.CURRENT_PATH, 0); }
		public TerminalNode CURRENT_PRECISION() { return getToken(DB2zSQLParser.CURRENT_PRECISION, 0); }
		public TerminalNode CURRENT_QUERY_ACCELERATION() { return getToken(DB2zSQLParser.CURRENT_QUERY_ACCELERATION, 0); }
		public TerminalNode CURRENT_QUERY_ACCELERATION_WAITFORDATA() { return getToken(DB2zSQLParser.CURRENT_QUERY_ACCELERATION_WAITFORDATA, 0); }
		public TerminalNode CURRENT_REFRESH_AGE() { return getToken(DB2zSQLParser.CURRENT_REFRESH_AGE, 0); }
		public TerminalNode CURRENT_ROUTINE_VERSION() { return getToken(DB2zSQLParser.CURRENT_ROUTINE_VERSION, 0); }
		public TerminalNode CURRENT_RULES() { return getToken(DB2zSQLParser.CURRENT_RULES, 0); }
		public TerminalNode CURRENT_SCHEMA() { return getToken(DB2zSQLParser.CURRENT_SCHEMA, 0); }
		public TerminalNode CURRENT_SERVER() { return getToken(DB2zSQLParser.CURRENT_SERVER, 0); }
		public TerminalNode CURRENT_SQLID() { return getToken(DB2zSQLParser.CURRENT_SQLID, 0); }
		public TerminalNode CURRENT_TEMPORAL_BUSINESS_TIME() { return getToken(DB2zSQLParser.CURRENT_TEMPORAL_BUSINESS_TIME, 0); }
		public TerminalNode CURRENT_TEMPORAL_SYSTEM_TIME() { return getToken(DB2zSQLParser.CURRENT_TEMPORAL_SYSTEM_TIME, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(DB2zSQLParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(DB2zSQLParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_TIME_ZONE() { return getToken(DB2zSQLParser.CURRENT_TIME_ZONE, 0); }
		public TerminalNode ENCRYPTION_PASSWORD() { return getToken(DB2zSQLParser.ENCRYPTION_PASSWORD, 0); }
		public TerminalNode SESSION_TIME_ZONE() { return getToken(DB2zSQLParser.SESSION_TIME_ZONE, 0); }
		public TerminalNode SESSION_USER() { return getToken(DB2zSQLParser.SESSION_USER, 0); }
		public TerminalNode USER() { return getToken(DB2zSQLParser.USER, 0); }
		public SpecialRegisterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_specialRegister; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSpecialRegister(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSpecialRegister(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSpecialRegister(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SpecialRegisterContext specialRegister() throws RecognitionException {
		SpecialRegisterContext _localctx = new SpecialRegisterContext(_ctx, getState());
		enterRule(_localctx, 958, RULE_specialRegister);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7736);
			_la = _input.LA(1);
			if ( !(((((_la - 922)) & ~0x3f) == 0 && ((1L << (_la - 922)) & ((1L << (CURRENT_ACCELERATOR - 922)) | (1L << (CURRENT_APPLICATION_COMPATIBILITY - 922)) | (1L << (CURRENT_APPLICATION_ENCODING_SCHEME - 922)) | (1L << (CURRENT_CLIENT_ACCTNG - 922)) | (1L << (CURRENT_CLIENT_APPLNAME - 922)) | (1L << (CURRENT_CLIENT_CORR_TOKEN - 922)) | (1L << (CURRENT_CLIENT_USERID - 922)) | (1L << (CURRENT_CLIENT_WRKSTNNAME - 922)) | (1L << (CURRENT_DATE - 922)) | (1L << (CURRENT_DEBUG_MODE - 922)) | (1L << (CURRENT_DECFLOAT_ROUNDING_MODE - 922)) | (1L << (CURRENT_DEGREE - 922)) | (1L << (CURRENT_EXPLAIN_MODE - 922)) | (1L << (CURRENT_GET_ACCEL_ARCHIVE - 922)) | (1L << (CURRENT_LOCALE_LC_CTYPE - 922)) | (1L << (CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION - 922)) | (1L << (CURRENT_MEMBER - 922)) | (1L << (CURRENT_OPTIMIZATION_HINT - 922)) | (1L << (CURRENT_PACKAGE_PATH - 922)) | (1L << (CURRENT_PACKAGESET - 922)) | (1L << (CURRENT_PATH - 922)) | (1L << (CURRENT_PRECISION - 922)) | (1L << (CURRENT_QUERY_ACCELERATION - 922)) | (1L << (CURRENT_QUERY_ACCELERATION_WAITFORDATA - 922)) | (1L << (CURRENT_REFRESH_AGE - 922)) | (1L << (CURRENT_ROUTINE_VERSION - 922)) | (1L << (CURRENT_RULES - 922)) | (1L << (CURRENT_SCHEMA - 922)) | (1L << (CURRENT_SERVER - 922)) | (1L << (CURRENT_SQLID - 922)) | (1L << (CURRENT_TEMPORAL_BUSINESS_TIME - 922)) | (1L << (CURRENT_TEMPORAL_SYSTEM_TIME - 922)) | (1L << (CURRENT_TIME - 922)) | (1L << (CURRENT_TIMESTAMP - 922)) | (1L << (CURRENT_TIME_ZONE - 922)) | (1L << (ENCRYPTION_PASSWORD - 922)) | (1L << (SESSION_TIME_ZONE - 922)) | (1L << (SESSION_USER - 922)) | (1L << (USER - 922)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmltableFunctionSpecificationContext extends ParserRuleContext {
		public TerminalNode XMLTABLE() { return getToken(DB2zSQLParser.XMLTABLE, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public RowXqueryExpressionConstantContext rowXqueryExpressionConstant() {
			return getRuleContext(RowXqueryExpressionConstantContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public XmlnamespacesDeclarationContext xmlnamespacesDeclaration() {
			return getRuleContext(XmlnamespacesDeclarationContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public TerminalNode PASSING() { return getToken(DB2zSQLParser.PASSING, 0); }
		public List<RowXqueryArgumentContext> rowXqueryArgument() {
			return getRuleContexts(RowXqueryArgumentContext.class);
		}
		public RowXqueryArgumentContext rowXqueryArgument(int i) {
			return getRuleContext(RowXqueryArgumentContext.class,i);
		}
		public TerminalNode COLUMNS() { return getToken(DB2zSQLParser.COLUMNS, 0); }
		public List<XmlTableRegularColumnDefinitionContext> xmlTableRegularColumnDefinition() {
			return getRuleContexts(XmlTableRegularColumnDefinitionContext.class);
		}
		public XmlTableRegularColumnDefinitionContext xmlTableRegularColumnDefinition(int i) {
			return getRuleContext(XmlTableRegularColumnDefinitionContext.class,i);
		}
		public List<XmlTableOrdinalityColumnDefinitionContext> xmlTableOrdinalityColumnDefinition() {
			return getRuleContexts(XmlTableOrdinalityColumnDefinitionContext.class);
		}
		public XmlTableOrdinalityColumnDefinitionContext xmlTableOrdinalityColumnDefinition(int i) {
			return getRuleContext(XmlTableOrdinalityColumnDefinitionContext.class,i);
		}
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public TerminalNode REF() { return getToken(DB2zSQLParser.REF, 0); }
		public XmltableFunctionSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmltableFunctionSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterXmltableFunctionSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitXmltableFunctionSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitXmltableFunctionSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmltableFunctionSpecificationContext xmltableFunctionSpecification() throws RecognitionException {
		XmltableFunctionSpecificationContext _localctx = new XmltableFunctionSpecificationContext(_ctx, getState());
		enterRule(_localctx, 960, RULE_xmltableFunctionSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7738);
			match(XMLTABLE);
			setState(7739);
			match(LPAREN);
			setState(7743);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==XMLNAMESPACES) {
				{
				setState(7740);
				xmlnamespacesDeclaration();
				setState(7741);
				match(COMMA);
				}
			}

			setState(7745);
			rowXqueryExpressionConstant();
			setState(7755);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PASSING) {
				{
				setState(7746);
				match(PASSING);
				setState(7749);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,907,_ctx) ) {
				case 1:
					{
					setState(7747);
					match(BY);
					setState(7748);
					match(REF);
					}
					break;
				}
				setState(7751);
				rowXqueryArgument();
				{
				setState(7752);
				match(COMMA);
				setState(7753);
				rowXqueryArgument();
				}
				}
			}

			setState(7772);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMNS) {
				{
				setState(7757);
				match(COLUMNS);
				setState(7760);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,909,_ctx) ) {
				case 1:
					{
					setState(7758);
					xmlTableRegularColumnDefinition();
					}
					break;
				case 2:
					{
					setState(7759);
					xmlTableOrdinalityColumnDefinition();
					}
					break;
				}
				setState(7769);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7762);
					match(COMMA);
					setState(7765);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,910,_ctx) ) {
					case 1:
						{
						setState(7763);
						xmlTableRegularColumnDefinition();
						}
						break;
					case 2:
						{
						setState(7764);
						xmlTableOrdinalityColumnDefinition();
						}
						break;
					}
					}
					}
					setState(7771);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(7774);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowXqueryExpressionConstantContext extends ParserRuleContext {
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public RowXqueryExpressionConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowXqueryExpressionConstant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRowXqueryExpressionConstant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRowXqueryExpressionConstant(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRowXqueryExpressionConstant(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowXqueryExpressionConstantContext rowXqueryExpressionConstant() throws RecognitionException {
		RowXqueryExpressionConstantContext _localctx = new RowXqueryExpressionConstantContext(_ctx, getState());
		enterRule(_localctx, 962, RULE_rowXqueryExpressionConstant);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7776);
			match(NONNUMERICLITERAL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowXqueryArgumentContext extends ParserRuleContext {
		public XqueryContextItemExpressionContext xqueryContextItemExpression() {
			return getRuleContext(XqueryContextItemExpressionContext.class,0);
		}
		public XqueryVariableExpressionContext xqueryVariableExpression() {
			return getRuleContext(XqueryVariableExpressionContext.class,0);
		}
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public RowXqueryArgumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowXqueryArgument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRowXqueryArgument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRowXqueryArgument(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRowXqueryArgument(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowXqueryArgumentContext rowXqueryArgument() throws RecognitionException {
		RowXqueryArgumentContext _localctx = new RowXqueryArgumentContext(_ctx, getState());
		enterRule(_localctx, 964, RULE_rowXqueryArgument);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7783);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,913,_ctx) ) {
			case 1:
				{
				setState(7778);
				xqueryContextItemExpression();
				}
				break;
			case 2:
				{
				{
				setState(7779);
				xqueryVariableExpression();
				setState(7780);
				match(AS);
				setState(7781);
				identifier();
				}
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XqueryContextItemExpressionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public XqueryContextItemExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xqueryContextItemExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterXqueryContextItemExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitXqueryContextItemExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitXqueryContextItemExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XqueryContextItemExpressionContext xqueryContextItemExpression() throws RecognitionException {
		XqueryContextItemExpressionContext _localctx = new XqueryContextItemExpressionContext(_ctx, getState());
		enterRule(_localctx, 966, RULE_xqueryContextItemExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7785);
			expression();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XqueryVariableExpressionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public XqueryVariableExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xqueryVariableExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterXqueryVariableExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitXqueryVariableExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitXqueryVariableExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XqueryVariableExpressionContext xqueryVariableExpression() throws RecognitionException {
		XqueryVariableExpressionContext _localctx = new XqueryVariableExpressionContext(_ctx, getState());
		enterRule(_localctx, 968, RULE_xqueryVariableExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7787);
			expression();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlTableRegularColumnDefinitionContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public DefaultClauseContext defaultClause() {
			return getRuleContext(DefaultClauseContext.class,0);
		}
		public TerminalNode PATH() { return getToken(DB2zSQLParser.PATH, 0); }
		public ColumnXqueryExpressionConstantContext columnXqueryExpressionConstant() {
			return getRuleContext(ColumnXqueryExpressionConstantContext.class,0);
		}
		public XmlTableRegularColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlTableRegularColumnDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterXmlTableRegularColumnDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitXmlTableRegularColumnDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitXmlTableRegularColumnDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlTableRegularColumnDefinitionContext xmlTableRegularColumnDefinition() throws RecognitionException {
		XmlTableRegularColumnDefinitionContext _localctx = new XmlTableRegularColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 970, RULE_xmlTableRegularColumnDefinition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7789);
			columnName();
			setState(7790);
			dataType();
			setState(7794);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFAULT:
			case WITH:
				{
				setState(7791);
				defaultClause();
				}
				break;
			case PATH:
				{
				{
				setState(7792);
				match(PATH);
				setState(7793);
				columnXqueryExpressionConstant();
				}
				}
				break;
			case RPAREN:
			case COMMA:
				break;
			default:
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaultClauseContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(DB2zSQLParser.DEFAULT, 0); }
		public DefaultClauseAllowablesContext defaultClauseAllowables() {
			return getRuleContext(DefaultClauseAllowablesContext.class,0);
		}
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public DistinctTypeCastFunctionNameContext distinctTypeCastFunctionName() {
			return getRuleContext(DistinctTypeCastFunctionNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public DefaultClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDefaultClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDefaultClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDefaultClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefaultClauseContext defaultClause() throws RecognitionException {
		DefaultClauseContext _localctx = new DefaultClauseContext(_ctx, getState());
		enterRule(_localctx, 972, RULE_defaultClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7797);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(7796);
				match(WITH);
				}
			}

			setState(7799);
			match(DEFAULT);
			setState(7806);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,916,_ctx) ) {
			case 1:
				{
				setState(7800);
				defaultClauseAllowables();
				}
				break;
			case 2:
				{
				{
				setState(7801);
				distinctTypeCastFunctionName();
				setState(7802);
				match(LPAREN);
				setState(7803);
				defaultClauseAllowables();
				setState(7804);
				match(RPAREN);
				}
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaultClause1Context extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(DB2zSQLParser.DEFAULT, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public DefaultClauseAllowablesContext defaultClauseAllowables() {
			return getRuleContext(DefaultClauseAllowablesContext.class,0);
		}
		public DefaultClause1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultClause1; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDefaultClause1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDefaultClause1(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDefaultClause1(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefaultClause1Context defaultClause1() throws RecognitionException {
		DefaultClause1Context _localctx = new DefaultClause1Context(_ctx, getState());
		enterRule(_localctx, 974, RULE_defaultClause1);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7809);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(7808);
				match(WITH);
				}
			}

			setState(7811);
			match(DEFAULT);
			setState(7813);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NONNUMERICLITERAL) | (1L << INTEGERLITERAL) | (1L << NUMERICLITERAL))) != 0) || _la==NULL || ((((_la - 951)) & ~0x3f) == 0 && ((1L << (_la - 951)) & ((1L << (CURRENT_SQLID - 951)) | (1L << (SESSION_USER - 951)) | (1L << (USER - 951)))) != 0)) {
				{
				setState(7812);
				defaultClauseAllowables();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaultClause2Context extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(DB2zSQLParser.DEFAULT, 0); }
		public DefaultClauseAllowablesContext defaultClauseAllowables() {
			return getRuleContext(DefaultClauseAllowablesContext.class,0);
		}
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public DistinctTypeCastFunctionNameContext distinctTypeCastFunctionName() {
			return getRuleContext(DistinctTypeCastFunctionNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public DefaultClause2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultClause2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDefaultClause2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDefaultClause2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDefaultClause2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefaultClause2Context defaultClause2() throws RecognitionException {
		DefaultClause2Context _localctx = new DefaultClause2Context(_ctx, getState());
		enterRule(_localctx, 976, RULE_defaultClause2);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7816);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(7815);
				match(WITH);
				}
			}

			setState(7818);
			match(DEFAULT);
			setState(7825);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,920,_ctx) ) {
			case 1:
				{
				setState(7819);
				defaultClauseAllowables();
				}
				break;
			case 2:
				{
				{
				setState(7820);
				distinctTypeCastFunctionName();
				setState(7821);
				match(LPAREN);
				setState(7822);
				defaultClauseAllowables();
				setState(7823);
				match(RPAREN);
				}
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaultClauseAllowablesContext extends ParserRuleContext {
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public TerminalNode SESSION_USER() { return getToken(DB2zSQLParser.SESSION_USER, 0); }
		public TerminalNode USER() { return getToken(DB2zSQLParser.USER, 0); }
		public TerminalNode CURRENT_SQLID() { return getToken(DB2zSQLParser.CURRENT_SQLID, 0); }
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public DefaultClauseAllowablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultClauseAllowables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDefaultClauseAllowables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDefaultClauseAllowables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDefaultClauseAllowables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefaultClauseAllowablesContext defaultClauseAllowables() throws RecognitionException {
		DefaultClauseAllowablesContext _localctx = new DefaultClauseAllowablesContext(_ctx, getState());
		enterRule(_localctx, 978, RULE_defaultClauseAllowables);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7832);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NONNUMERICLITERAL:
			case INTEGERLITERAL:
			case NUMERICLITERAL:
				{
				setState(7827);
				literal();
				}
				break;
			case SESSION_USER:
				{
				setState(7828);
				match(SESSION_USER);
				}
				break;
			case USER:
				{
				setState(7829);
				match(USER);
				}
				break;
			case CURRENT_SQLID:
				{
				setState(7830);
				match(CURRENT_SQLID);
				}
				break;
			case NULL:
				{
				setState(7831);
				match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DistinctTypeCastFunctionNameContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public DistinctTypeCastFunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_distinctTypeCastFunctionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDistinctTypeCastFunctionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDistinctTypeCastFunctionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDistinctTypeCastFunctionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DistinctTypeCastFunctionNameContext distinctTypeCastFunctionName() throws RecognitionException {
		DistinctTypeCastFunctionNameContext _localctx = new DistinctTypeCastFunctionNameContext(_ctx, getState());
		enterRule(_localctx, 980, RULE_distinctTypeCastFunctionName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7834);
			identifier();
			setState(7835);
			match(DOT);
			setState(7836);
			identifier();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnXqueryExpressionConstantContext extends ParserRuleContext {
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public ColumnXqueryExpressionConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnXqueryExpressionConstant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterColumnXqueryExpressionConstant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitColumnXqueryExpressionConstant(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitColumnXqueryExpressionConstant(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnXqueryExpressionConstantContext columnXqueryExpressionConstant() throws RecognitionException {
		ColumnXqueryExpressionConstantContext _localctx = new ColumnXqueryExpressionConstantContext(_ctx, getState());
		enterRule(_localctx, 982, RULE_columnXqueryExpressionConstant);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7838);
			match(NONNUMERICLITERAL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlTableOrdinalityColumnDefinitionContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode ORDINALITY() { return getToken(DB2zSQLParser.ORDINALITY, 0); }
		public XmlTableOrdinalityColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlTableOrdinalityColumnDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterXmlTableOrdinalityColumnDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitXmlTableOrdinalityColumnDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitXmlTableOrdinalityColumnDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlTableOrdinalityColumnDefinitionContext xmlTableOrdinalityColumnDefinition() throws RecognitionException {
		XmlTableOrdinalityColumnDefinitionContext _localctx = new XmlTableOrdinalityColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 984, RULE_xmlTableOrdinalityColumnDefinition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7840);
			columnName();
			setState(7841);
			match(FOR);
			setState(7842);
			match(ORDINALITY);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlnamespacesDeclarationContext extends ParserRuleContext {
		public List<XmlnamespacesFunctionSpecificationContext> xmlnamespacesFunctionSpecification() {
			return getRuleContexts(XmlnamespacesFunctionSpecificationContext.class);
		}
		public XmlnamespacesFunctionSpecificationContext xmlnamespacesFunctionSpecification(int i) {
			return getRuleContext(XmlnamespacesFunctionSpecificationContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public XmlnamespacesDeclarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlnamespacesDeclaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterXmlnamespacesDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitXmlnamespacesDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitXmlnamespacesDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlnamespacesDeclarationContext xmlnamespacesDeclaration() throws RecognitionException {
		XmlnamespacesDeclarationContext _localctx = new XmlnamespacesDeclarationContext(_ctx, getState());
		enterRule(_localctx, 986, RULE_xmlnamespacesDeclaration);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7844);
			xmlnamespacesFunctionSpecification();
			setState(7849);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,922,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(7845);
					match(COMMA);
					setState(7846);
					xmlnamespacesFunctionSpecification();
					}
					} 
				}
				setState(7851);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,922,_ctx);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlnamespacesFunctionSpecificationContext extends ParserRuleContext {
		public TerminalNode XMLNAMESPACES() { return getToken(DB2zSQLParser.XMLNAMESPACES, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<XmlnamespacesFunctionArgumentsContext> xmlnamespacesFunctionArguments() {
			return getRuleContexts(XmlnamespacesFunctionArgumentsContext.class);
		}
		public XmlnamespacesFunctionArgumentsContext xmlnamespacesFunctionArguments(int i) {
			return getRuleContext(XmlnamespacesFunctionArgumentsContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public XmlnamespacesFunctionSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlnamespacesFunctionSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterXmlnamespacesFunctionSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitXmlnamespacesFunctionSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitXmlnamespacesFunctionSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlnamespacesFunctionSpecificationContext xmlnamespacesFunctionSpecification() throws RecognitionException {
		XmlnamespacesFunctionSpecificationContext _localctx = new XmlnamespacesFunctionSpecificationContext(_ctx, getState());
		enterRule(_localctx, 988, RULE_xmlnamespacesFunctionSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7852);
			match(XMLNAMESPACES);
			setState(7853);
			match(LPAREN);
			setState(7854);
			xmlnamespacesFunctionArguments();
			setState(7859);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7855);
				match(COMMA);
				setState(7856);
				xmlnamespacesFunctionArguments();
				}
				}
				setState(7861);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7862);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlnamespacesFunctionArgumentsContext extends ParserRuleContext {
		public NamespaceUriContext namespaceUri() {
			return getRuleContext(NamespaceUriContext.class,0);
		}
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public NamespacePrefixContext namespacePrefix() {
			return getRuleContext(NamespacePrefixContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(DB2zSQLParser.DEFAULT, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public XmlnamespacesFunctionArgumentsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlnamespacesFunctionArguments; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterXmlnamespacesFunctionArguments(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitXmlnamespacesFunctionArguments(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitXmlnamespacesFunctionArguments(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlnamespacesFunctionArgumentsContext xmlnamespacesFunctionArguments() throws RecognitionException {
		XmlnamespacesFunctionArgumentsContext _localctx = new XmlnamespacesFunctionArgumentsContext(_ctx, getState());
		enterRule(_localctx, 990, RULE_xmlnamespacesFunctionArguments);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7872);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NONNUMERICLITERAL:
				{
				{
				setState(7864);
				namespaceUri();
				setState(7865);
				match(AS);
				setState(7866);
				namespacePrefix();
				}
				}
				break;
			case DEFAULT:
				{
				{
				setState(7868);
				match(DEFAULT);
				setState(7869);
				namespaceUri();
				}
				}
				break;
			case NO:
				{
				{
				setState(7870);
				match(NO);
				setState(7871);
				match(DEFAULT);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NamespaceUriContext extends ParserRuleContext {
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public NamespaceUriContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_namespaceUri; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterNamespaceUri(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitNamespaceUri(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitNamespaceUri(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NamespaceUriContext namespaceUri() throws RecognitionException {
		NamespaceUriContext _localctx = new NamespaceUriContext(_ctx, getState());
		enterRule(_localctx, 992, RULE_namespaceUri);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7874);
			match(NONNUMERICLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NamespacePrefixContext extends ParserRuleContext {
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public NamespacePrefixContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_namespacePrefix; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterNamespacePrefix(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitNamespacePrefix(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitNamespacePrefix(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NamespacePrefixContext namespacePrefix() throws RecognitionException {
		NamespacePrefixContext _localctx = new NamespacePrefixContext(_ctx, getState());
		enterRule(_localctx, 994, RULE_namespacePrefix);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7876);
			match(NONNUMERICLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TimeZoneSpecificExpressionContext extends ParserRuleContext {
		public List<TimeZoneExpressionSubsetContext> timeZoneExpressionSubset() {
			return getRuleContexts(TimeZoneExpressionSubsetContext.class);
		}
		public TimeZoneExpressionSubsetContext timeZoneExpressionSubset(int i) {
			return getRuleContext(TimeZoneExpressionSubsetContext.class,i);
		}
		public TerminalNode AT() { return getToken(DB2zSQLParser.AT, 0); }
		public TerminalNode LOCAL() { return getToken(DB2zSQLParser.LOCAL, 0); }
		public TerminalNode TIME() { return getToken(DB2zSQLParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(DB2zSQLParser.ZONE, 0); }
		public TimeZoneSpecificExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timeZoneSpecificExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTimeZoneSpecificExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTimeZoneSpecificExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTimeZoneSpecificExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TimeZoneSpecificExpressionContext timeZoneSpecificExpression() throws RecognitionException {
		TimeZoneSpecificExpressionContext _localctx = new TimeZoneSpecificExpressionContext(_ctx, getState());
		enterRule(_localctx, 996, RULE_timeZoneSpecificExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7878);
			timeZoneExpressionSubset();
			setState(7885);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,925,_ctx) ) {
			case 1:
				{
				{
				setState(7879);
				match(AT);
				setState(7880);
				match(LOCAL);
				}
				}
				break;
			case 2:
				{
				{
				setState(7881);
				match(AT);
				setState(7882);
				match(TIME);
				setState(7883);
				match(ZONE);
				setState(7884);
				timeZoneExpressionSubset();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TimeZoneExpressionSubsetContext extends ParserRuleContext {
		public FunctionInvocationContext functionInvocation() {
			return getRuleContext(FunctionInvocationContext.class,0);
		}
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public SpecialRegisterContext specialRegister() {
			return getRuleContext(SpecialRegisterContext.class,0);
		}
		public ScalarFullSelectContext scalarFullSelect() {
			return getRuleContext(ScalarFullSelectContext.class,0);
		}
		public CaseExpressionContext caseExpression() {
			return getRuleContext(CaseExpressionContext.class,0);
		}
		public CastSpecificationContext castSpecification() {
			return getRuleContext(CastSpecificationContext.class,0);
		}
		public TimeZoneExpressionSubsetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timeZoneExpressionSubset; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTimeZoneExpressionSubset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTimeZoneExpressionSubset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTimeZoneExpressionSubset(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TimeZoneExpressionSubsetContext timeZoneExpressionSubset() throws RecognitionException {
		TimeZoneExpressionSubsetContext _localctx = new TimeZoneExpressionSubsetContext(_ctx, getState());
		enterRule(_localctx, 998, RULE_timeZoneExpressionSubset);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7895);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,926,_ctx) ) {
			case 1:
				{
				setState(7887);
				functionInvocation();
				}
				break;
			case 2:
				{
				setState(7888);
				literal();
				}
				break;
			case 3:
				{
				setState(7889);
				columnName();
				}
				break;
			case 4:
				{
				setState(7890);
				hostVariable();
				}
				break;
			case 5:
				{
				setState(7891);
				specialRegister();
				}
				break;
			case 6:
				{
				setState(7892);
				scalarFullSelect();
				}
				break;
			case 7:
				{
				setState(7893);
				caseExpression();
				}
				break;
			case 8:
				{
				setState(7894);
				castSpecification();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseExpressionContext extends ParserRuleContext {
		public TerminalNode CASE() { return getToken(DB2zSQLParser.CASE, 0); }
		public TerminalNode END() { return getToken(DB2zSQLParser.END, 0); }
		public List<SearchedWhenClauseContext> searchedWhenClause() {
			return getRuleContexts(SearchedWhenClauseContext.class);
		}
		public SearchedWhenClauseContext searchedWhenClause(int i) {
			return getRuleContext(SearchedWhenClauseContext.class,i);
		}
		public List<SimpleWhenClauseContext> simpleWhenClause() {
			return getRuleContexts(SimpleWhenClauseContext.class);
		}
		public SimpleWhenClauseContext simpleWhenClause(int i) {
			return getRuleContext(SimpleWhenClauseContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(DB2zSQLParser.ELSE, 0); }
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public ResultExpressionContext resultExpression() {
			return getRuleContext(ResultExpressionContext.class,0);
		}
		public CaseExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCaseExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCaseExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCaseExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseExpressionContext caseExpression() throws RecognitionException {
		CaseExpressionContext _localctx = new CaseExpressionContext(_ctx, getState());
		enterRule(_localctx, 1000, RULE_caseExpression);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7897);
			match(CASE);
			setState(7900); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(7900);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,927,_ctx) ) {
					case 1:
						{
						setState(7898);
						searchedWhenClause();
						}
						break;
					case 2:
						{
						setState(7899);
						simpleWhenClause();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(7902); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,928,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(7908);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,929,_ctx) ) {
			case 1:
				{
				{
				setState(7904);
				match(ELSE);
				setState(7905);
				match(NULL);
				}
				}
				break;
			case 2:
				{
				{
				setState(7906);
				match(ELSE);
				setState(7907);
				resultExpression();
				}
				}
				break;
			}
			setState(7910);
			match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResultExpressionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ResultExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resultExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterResultExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitResultExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitResultExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResultExpressionContext resultExpression() throws RecognitionException {
		ResultExpressionContext _localctx = new ResultExpressionContext(_ctx, getState());
		enterRule(_localctx, 1002, RULE_resultExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7912);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SearchedWhenClauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(DB2zSQLParser.WHEN, 0); }
		public SearchConditionContext searchCondition() {
			return getRuleContext(SearchConditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(DB2zSQLParser.THEN, 0); }
		public ResultExpressionContext resultExpression() {
			return getRuleContext(ResultExpressionContext.class,0);
		}
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public SearchedWhenClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searchedWhenClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSearchedWhenClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSearchedWhenClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSearchedWhenClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SearchedWhenClauseContext searchedWhenClause() throws RecognitionException {
		SearchedWhenClauseContext _localctx = new SearchedWhenClauseContext(_ctx, getState());
		enterRule(_localctx, 1004, RULE_searchedWhenClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7914);
			match(WHEN);
			setState(7915);
			searchCondition();
			setState(7916);
			match(THEN);
			setState(7919);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,930,_ctx) ) {
			case 1:
				{
				setState(7917);
				resultExpression();
				}
				break;
			case 2:
				{
				setState(7918);
				match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleWhenClauseContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode WHEN() { return getToken(DB2zSQLParser.WHEN, 0); }
		public TerminalNode THEN() { return getToken(DB2zSQLParser.THEN, 0); }
		public ResultExpressionContext resultExpression() {
			return getRuleContext(ResultExpressionContext.class,0);
		}
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public SimpleWhenClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleWhenClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSimpleWhenClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSimpleWhenClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSimpleWhenClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleWhenClauseContext simpleWhenClause() throws RecognitionException {
		SimpleWhenClauseContext _localctx = new SimpleWhenClauseContext(_ctx, getState());
		enterRule(_localctx, 1006, RULE_simpleWhenClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7921);
			expression();
			setState(7922);
			match(WHEN);
			setState(7923);
			expression();
			setState(7924);
			match(THEN);
			setState(7927);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,931,_ctx) ) {
			case 1:
				{
				setState(7925);
				resultExpression();
				}
				break;
			case 2:
				{
				setState(7926);
				match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SearchConditionContext extends ParserRuleContext {
		public List<TerminalNode> NOT() { return getTokens(DB2zSQLParser.NOT); }
		public TerminalNode NOT(int i) {
			return getToken(DB2zSQLParser.NOT, i);
		}
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public List<SearchConditionContext> searchCondition() {
			return getRuleContexts(SearchConditionContext.class);
		}
		public SearchConditionContext searchCondition(int i) {
			return getRuleContext(SearchConditionContext.class,i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public List<TerminalNode> AND() { return getTokens(DB2zSQLParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(DB2zSQLParser.AND, i);
		}
		public List<TerminalNode> OR() { return getTokens(DB2zSQLParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(DB2zSQLParser.OR, i);
		}
		public TerminalNode SELECTIVITY() { return getToken(DB2zSQLParser.SELECTIVITY, 0); }
		public TerminalNode NUMERICLITERAL() { return getToken(DB2zSQLParser.NUMERICLITERAL, 0); }
		public SearchConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searchCondition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSearchCondition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSearchCondition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSearchCondition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SearchConditionContext searchCondition() throws RecognitionException {
		SearchConditionContext _localctx = new SearchConditionContext(_ctx, getState());
		enterRule(_localctx, 1008, RULE_searchCondition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7930);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,932,_ctx) ) {
			case 1:
				{
				setState(7929);
				match(NOT);
				}
				break;
			}
			setState(7941);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,934,_ctx) ) {
			case 1:
				{
				{
				setState(7932);
				predicate();
				setState(7935);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SELECTIVITY) {
					{
					setState(7933);
					match(SELECTIVITY);
					setState(7934);
					match(NUMERICLITERAL);
					}
				}

				}
				}
				break;
			case 2:
				{
				{
				setState(7937);
				match(LPAREN);
				setState(7938);
				searchCondition();
				setState(7939);
				match(RPAREN);
				}
				}
				break;
			}
			setState(7956);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR || _la==AND) {
				{
				{
				setState(7943);
				_la = _input.LA(1);
				if ( !(_la==OR || _la==AND) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7945);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,935,_ctx) ) {
				case 1:
					{
					setState(7944);
					match(NOT);
					}
					break;
				}
				setState(7952);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,936,_ctx) ) {
				case 1:
					{
					setState(7947);
					predicate();
					}
					break;
				case 2:
					{
					{
					setState(7948);
					match(LPAREN);
					setState(7949);
					searchCondition();
					setState(7950);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				setState(7958);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckConditionContext extends ParserRuleContext {
		public SearchConditionContext searchCondition() {
			return getRuleContext(SearchConditionContext.class,0);
		}
		public CheckConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkCondition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCheckCondition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCheckCondition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCheckCondition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckConditionContext checkCondition() throws RecognitionException {
		CheckConditionContext _localctx = new CheckConditionContext(_ctx, getState());
		enterRule(_localctx, 1010, RULE_checkCondition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7959);
			searchCondition();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PredicateContext extends ParserRuleContext {
		public BasicPredicateContext basicPredicate() {
			return getRuleContext(BasicPredicateContext.class,0);
		}
		public QuantifiedPredicateContext quantifiedPredicate() {
			return getRuleContext(QuantifiedPredicateContext.class,0);
		}
		public ArrayExistsPredicateContext arrayExistsPredicate() {
			return getRuleContext(ArrayExistsPredicateContext.class,0);
		}
		public BetweenPredicateContext betweenPredicate() {
			return getRuleContext(BetweenPredicateContext.class,0);
		}
		public DistinctPredicateContext distinctPredicate() {
			return getRuleContext(DistinctPredicateContext.class,0);
		}
		public ExistsPredicateContext existsPredicate() {
			return getRuleContext(ExistsPredicateContext.class,0);
		}
		public InPredicateContext inPredicate() {
			return getRuleContext(InPredicateContext.class,0);
		}
		public LikePredicateContext likePredicate() {
			return getRuleContext(LikePredicateContext.class,0);
		}
		public NullPredicateContext nullPredicate() {
			return getRuleContext(NullPredicateContext.class,0);
		}
		public XmlExistsPredicateContext xmlExistsPredicate() {
			return getRuleContext(XmlExistsPredicateContext.class,0);
		}
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PredicateContext predicate() throws RecognitionException {
		PredicateContext _localctx = new PredicateContext(_ctx, getState());
		enterRule(_localctx, 1012, RULE_predicate);
		try {
			setState(7971);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,938,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7961);
				basicPredicate();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7962);
				quantifiedPredicate();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7963);
				arrayExistsPredicate();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7964);
				betweenPredicate();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7965);
				distinctPredicate();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7966);
				existsPredicate();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7967);
				inPredicate();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7968);
				likePredicate();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(7969);
				nullPredicate();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(7970);
				xmlExistsPredicate();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BasicPredicateContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public List<RowValueExpressionContext> rowValueExpression() {
			return getRuleContexts(RowValueExpressionContext.class);
		}
		public RowValueExpressionContext rowValueExpression(int i) {
			return getRuleContext(RowValueExpressionContext.class,i);
		}
		public BasicPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_basicPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterBasicPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitBasicPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitBasicPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BasicPredicateContext basicPredicate() throws RecognitionException {
		BasicPredicateContext _localctx = new BasicPredicateContext(_ctx, getState());
		enterRule(_localctx, 1014, RULE_basicPredicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7981);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,939,_ctx) ) {
			case 1:
				{
				{
				setState(7973);
				expression();
				setState(7974);
				comparisonOperator();
				setState(7975);
				expression();
				}
				}
				break;
			case 2:
				{
				{
				setState(7977);
				rowValueExpression();
				setState(7978);
				comparisonOperator();
				setState(7979);
				rowValueExpression();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowValueExpressionContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public RowValueExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowValueExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRowValueExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRowValueExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRowValueExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowValueExpressionContext rowValueExpression() throws RecognitionException {
		RowValueExpressionContext _localctx = new RowValueExpressionContext(_ctx, getState());
		enterRule(_localctx, 1016, RULE_rowValueExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7983);
			match(LPAREN);
			setState(7984);
			expression();
			setState(7989);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7985);
				match(COMMA);
				setState(7986);
				expression();
				}
				}
				setState(7991);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7992);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QuantifiedPredicateContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public FullSelectContext fullSelect() {
			return getRuleContext(FullSelectContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public RowValueExpressionContext rowValueExpression() {
			return getRuleContext(RowValueExpressionContext.class,0);
		}
		public TerminalNode EQ() { return getToken(DB2zSQLParser.EQ, 0); }
		public TerminalNode NE() { return getToken(DB2zSQLParser.NE, 0); }
		public TerminalNode ALL() { return getToken(DB2zSQLParser.ALL, 0); }
		public TerminalNode SOME() { return getToken(DB2zSQLParser.SOME, 0); }
		public TerminalNode ANY() { return getToken(DB2zSQLParser.ANY, 0); }
		public QuantifiedPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_quantifiedPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterQuantifiedPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitQuantifiedPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitQuantifiedPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QuantifiedPredicateContext quantifiedPredicate() throws RecognitionException {
		QuantifiedPredicateContext _localctx = new QuantifiedPredicateContext(_ctx, getState());
		enterRule(_localctx, 1018, RULE_quantifiedPredicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8015);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,941,_ctx) ) {
			case 1:
				{
				{
				setState(7994);
				expression();
				setState(7995);
				comparisonOperator();
				setState(7996);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7997);
				match(LPAREN);
				setState(7998);
				fullSelect();
				setState(7999);
				match(RPAREN);
				}
				}
				break;
			case 2:
				{
				{
				setState(8001);
				rowValueExpression();
				setState(8002);
				match(EQ);
				setState(8003);
				_la = _input.LA(1);
				if ( !(_la==ANY || _la==SOME) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8004);
				match(LPAREN);
				setState(8005);
				fullSelect();
				setState(8006);
				match(RPAREN);
				}
				}
				break;
			case 3:
				{
				{
				setState(8008);
				rowValueExpression();
				setState(8009);
				match(NE);
				setState(8010);
				match(ALL);
				setState(8011);
				match(LPAREN);
				setState(8012);
				fullSelect();
				setState(8013);
				match(RPAREN);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArrayExistsPredicateContext extends ParserRuleContext {
		public TerminalNode ARRAY_EXISTS() { return getToken(DB2zSQLParser.ARRAY_EXISTS, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public ArrayExpressionContext arrayExpression() {
			return getRuleContext(ArrayExpressionContext.class,0);
		}
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public ArrayExistsPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arrayExistsPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterArrayExistsPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitArrayExistsPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitArrayExistsPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArrayExistsPredicateContext arrayExistsPredicate() throws RecognitionException {
		ArrayExistsPredicateContext _localctx = new ArrayExistsPredicateContext(_ctx, getState());
		enterRule(_localctx, 1020, RULE_arrayExistsPredicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8017);
			match(ARRAY_EXISTS);
			setState(8018);
			match(LPAREN);
			setState(8019);
			arrayExpression();
			setState(8020);
			match(INTEGERLITERAL);
			setState(8021);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BetweenPredicateContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode BETWEEN() { return getToken(DB2zSQLParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(DB2zSQLParser.AND, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public BetweenPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_betweenPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterBetweenPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitBetweenPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitBetweenPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BetweenPredicateContext betweenPredicate() throws RecognitionException {
		BetweenPredicateContext _localctx = new BetweenPredicateContext(_ctx, getState());
		enterRule(_localctx, 1022, RULE_betweenPredicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8023);
			expression();
			setState(8025);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(8024);
				match(NOT);
				}
			}

			setState(8027);
			match(BETWEEN);
			setState(8028);
			expression();
			setState(8029);
			match(AND);
			setState(8030);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DistinctPredicateContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode IS() { return getToken(DB2zSQLParser.IS, 0); }
		public TerminalNode DISTINCT() { return getToken(DB2zSQLParser.DISTINCT, 0); }
		public TerminalNode FROM() { return getToken(DB2zSQLParser.FROM, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public DistinctPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_distinctPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDistinctPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDistinctPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDistinctPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DistinctPredicateContext distinctPredicate() throws RecognitionException {
		DistinctPredicateContext _localctx = new DistinctPredicateContext(_ctx, getState());
		enterRule(_localctx, 1024, RULE_distinctPredicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8032);
			expression();
			setState(8033);
			match(IS);
			setState(8035);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(8034);
				match(NOT);
				}
			}

			setState(8037);
			match(DISTINCT);
			setState(8038);
			match(FROM);
			setState(8039);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExistsPredicateContext extends ParserRuleContext {
		public TerminalNode EXISTS() { return getToken(DB2zSQLParser.EXISTS, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public FullSelectContext fullSelect() {
			return getRuleContext(FullSelectContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public ExistsPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_existsPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterExistsPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitExistsPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitExistsPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExistsPredicateContext existsPredicate() throws RecognitionException {
		ExistsPredicateContext _localctx = new ExistsPredicateContext(_ctx, getState());
		enterRule(_localctx, 1026, RULE_existsPredicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8041);
			match(EXISTS);
			setState(8042);
			match(LPAREN);
			setState(8043);
			fullSelect();
			setState(8044);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InPredicateContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode IN() { return getToken(DB2zSQLParser.IN, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public FullSelectContext fullSelect() {
			return getRuleContext(FullSelectContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public InPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterInPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitInPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitInPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InPredicateContext inPredicate() throws RecognitionException {
		InPredicateContext _localctx = new InPredicateContext(_ctx, getState());
		enterRule(_localctx, 1028, RULE_inPredicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8046);
			expression();
			setState(8048);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(8047);
				match(NOT);
				}
			}

			setState(8050);
			match(IN);
			setState(8066);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,946,_ctx) ) {
			case 1:
				{
				{
				setState(8051);
				match(LPAREN);
				setState(8052);
				fullSelect();
				setState(8053);
				match(RPAREN);
				}
				}
				break;
			case 2:
				{
				{
				setState(8055);
				match(LPAREN);
				setState(8056);
				expression();
				setState(8061);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(8057);
					match(COMMA);
					setState(8058);
					expression();
					}
					}
					setState(8063);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(8064);
				match(RPAREN);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LikePredicateContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode LIKE() { return getToken(DB2zSQLParser.LIKE, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TerminalNode ESCAPE() { return getToken(DB2zSQLParser.ESCAPE, 0); }
		public LikePredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_likePredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterLikePredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitLikePredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitLikePredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LikePredicateContext likePredicate() throws RecognitionException {
		LikePredicateContext _localctx = new LikePredicateContext(_ctx, getState());
		enterRule(_localctx, 1030, RULE_likePredicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8068);
			expression();
			setState(8070);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(8069);
				match(NOT);
				}
			}

			setState(8072);
			match(LIKE);
			setState(8073);
			expression();
			setState(8076);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ESCAPE) {
				{
				setState(8074);
				match(ESCAPE);
				setState(8075);
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NullPredicateContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ISNULL() { return getToken(DB2zSQLParser.ISNULL, 0); }
		public TerminalNode NOTNULL() { return getToken(DB2zSQLParser.NOTNULL, 0); }
		public TerminalNode IS() { return getToken(DB2zSQLParser.IS, 0); }
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public NullPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterNullPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitNullPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitNullPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NullPredicateContext nullPredicate() throws RecognitionException {
		NullPredicateContext _localctx = new NullPredicateContext(_ctx, getState());
		enterRule(_localctx, 1032, RULE_nullPredicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8078);
			expression();
			setState(8086);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IS:
				{
				{
				setState(8079);
				match(IS);
				setState(8081);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(8080);
					match(NOT);
					}
				}

				setState(8083);
				match(NULL);
				}
				}
				break;
			case ISNULL:
				{
				setState(8084);
				match(ISNULL);
				}
				break;
			case NOTNULL:
				{
				setState(8085);
				match(NOTNULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlExistsPredicateContext extends ParserRuleContext {
		public TerminalNode XMLEXISTS() { return getToken(DB2zSQLParser.XMLEXISTS, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode PASSING() { return getToken(DB2zSQLParser.PASSING, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public TerminalNode REF() { return getToken(DB2zSQLParser.REF, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public XmlExistsPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlExistsPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterXmlExistsPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitXmlExistsPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitXmlExistsPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlExistsPredicateContext xmlExistsPredicate() throws RecognitionException {
		XmlExistsPredicateContext _localctx = new XmlExistsPredicateContext(_ctx, getState());
		enterRule(_localctx, 1034, RULE_xmlExistsPredicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8088);
			match(XMLEXISTS);
			setState(8089);
			match(LPAREN);
			setState(8090);
			match(NONNUMERICLITERAL);
			setState(8104);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PASSING) {
				{
				setState(8091);
				match(PASSING);
				setState(8094);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,951,_ctx) ) {
				case 1:
					{
					setState(8092);
					match(BY);
					setState(8093);
					match(REF);
					}
					break;
				}
				setState(8096);
				expression();
				setState(8101);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(8097);
					match(COMMA);
					setState(8098);
					expression();
					}
					}
					setState(8103);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(8106);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArrayExpressionContext extends ParserRuleContext {
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public CastSpecificationContext castSpecification() {
			return getRuleContext(CastSpecificationContext.class,0);
		}
		public ArrayExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arrayExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterArrayExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitArrayExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitArrayExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArrayExpressionContext arrayExpression() throws RecognitionException {
		ArrayExpressionContext _localctx = new ArrayExpressionContext(_ctx, getState());
		enterRule(_localctx, 1036, RULE_arrayExpression);
		try {
			setState(8110);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,954,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8108);
				variable();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8109);
				castSpecification();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CastSpecificationContext extends ParserRuleContext {
		public TerminalNode CAST() { return getToken(DB2zSQLParser.CAST, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public CastDataTypeContext castDataType() {
			return getRuleContext(CastDataTypeContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public ParameterMarkerContext parameterMarker() {
			return getRuleContext(ParameterMarkerContext.class,0);
		}
		public CastSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_castSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCastSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCastSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCastSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CastSpecificationContext castSpecification() throws RecognitionException {
		CastSpecificationContext _localctx = new CastSpecificationContext(_ctx, getState());
		enterRule(_localctx, 1038, RULE_castSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8112);
			match(CAST);
			setState(8113);
			match(LPAREN);
			setState(8117);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,955,_ctx) ) {
			case 1:
				{
				setState(8114);
				expression();
				}
				break;
			case 2:
				{
				setState(8115);
				match(NULL);
				}
				break;
			case 3:
				{
				setState(8116);
				parameterMarker();
				}
				break;
			}
			setState(8119);
			match(AS);
			setState(8120);
			castDataType();
			setState(8121);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterMarkerContext extends ParserRuleContext {
		public TerminalNode QUESTIONMARK() { return getToken(DB2zSQLParser.QUESTIONMARK, 0); }
		public ParameterMarkerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterMarker; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterParameterMarker(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitParameterMarker(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitParameterMarker(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParameterMarkerContext parameterMarker() throws RecognitionException {
		ParameterMarkerContext _localctx = new ParameterMarkerContext(_ctx, getState());
		enterRule(_localctx, 1040, RULE_parameterMarker);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8123);
			match(QUESTIONMARK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CastDataTypeContext extends ParserRuleContext {
		public CastBuiltInTypeContext castBuiltInType() {
			return getRuleContext(CastBuiltInTypeContext.class,0);
		}
		public DistinctTypeNameContext distinctTypeName() {
			return getRuleContext(DistinctTypeNameContext.class,0);
		}
		public ArrayTypeContext arrayType() {
			return getRuleContext(ArrayTypeContext.class,0);
		}
		public CastDataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_castDataType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCastDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCastDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCastDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CastDataTypeContext castDataType() throws RecognitionException {
		CastDataTypeContext _localctx = new CastDataTypeContext(_ctx, getState());
		enterRule(_localctx, 1042, RULE_castDataType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8128);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,956,_ctx) ) {
			case 1:
				{
				setState(8125);
				castBuiltInType();
				}
				break;
			case 2:
				{
				setState(8126);
				distinctTypeName();
				}
				break;
			case 3:
				{
				setState(8127);
				arrayType();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CastBuiltInTypeContext extends ParserRuleContext {
		public TerminalNode SMALLINT() { return getToken(DB2zSQLParser.SMALLINT, 0); }
		public TerminalNode INTEGER() { return getToken(DB2zSQLParser.INTEGER, 0); }
		public TerminalNode INT() { return getToken(DB2zSQLParser.INT, 0); }
		public TerminalNode BIGINT() { return getToken(DB2zSQLParser.BIGINT, 0); }
		public TerminalNode REAL() { return getToken(DB2zSQLParser.REAL, 0); }
		public TerminalNode DATE() { return getToken(DB2zSQLParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(DB2zSQLParser.TIME, 0); }
		public TerminalNode ROWID() { return getToken(DB2zSQLParser.ROWID, 0); }
		public TerminalNode XML() { return getToken(DB2zSQLParser.XML, 0); }
		public TerminalNode DECFLOAT() { return getToken(DB2zSQLParser.DECFLOAT, 0); }
		public TerminalNode FLOAT() { return getToken(DB2zSQLParser.FLOAT, 0); }
		public TerminalNode DOUBLE() { return getToken(DB2zSQLParser.DOUBLE, 0); }
		public TerminalNode BINARY() { return getToken(DB2zSQLParser.BINARY, 0); }
		public TerminalNode TIMESTAMP() { return getToken(DB2zSQLParser.TIMESTAMP, 0); }
		public TerminalNode DECIMAL() { return getToken(DB2zSQLParser.DECIMAL, 0); }
		public TerminalNode DEC() { return getToken(DB2zSQLParser.DEC, 0); }
		public TerminalNode NUMERIC() { return getToken(DB2zSQLParser.NUMERIC, 0); }
		public TerminalNode GRAPHIC() { return getToken(DB2zSQLParser.GRAPHIC, 0); }
		public TerminalNode VARGRAPHIC() { return getToken(DB2zSQLParser.VARGRAPHIC, 0); }
		public TerminalNode DBCLOB() { return getToken(DB2zSQLParser.DBCLOB, 0); }
		public IntegerInParensContext integerInParens() {
			return getRuleContext(IntegerInParensContext.class,0);
		}
		public TerminalNode VARCHAR() { return getToken(DB2zSQLParser.VARCHAR, 0); }
		public TerminalNode CLOB() { return getToken(DB2zSQLParser.CLOB, 0); }
		public TerminalNode VARBINARY() { return getToken(DB2zSQLParser.VARBINARY, 0); }
		public TerminalNode BLOB() { return getToken(DB2zSQLParser.BLOB, 0); }
		public TerminalNode PRECISION() { return getToken(DB2zSQLParser.PRECISION, 0); }
		public LengthContext length() {
			return getRuleContext(LengthContext.class,0);
		}
		public CcsidQualifierContext ccsidQualifier() {
			return getRuleContext(CcsidQualifierContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode ZONE() { return getToken(DB2zSQLParser.ZONE, 0); }
		public TerminalNode LARGE() { return getToken(DB2zSQLParser.LARGE, 0); }
		public TerminalNode OBJECT() { return getToken(DB2zSQLParser.OBJECT, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode WITHOUT() { return getToken(DB2zSQLParser.WITHOUT, 0); }
		public TerminalNode CHARACTER() { return getToken(DB2zSQLParser.CHARACTER, 0); }
		public TerminalNode CHAR() { return getToken(DB2zSQLParser.CHAR, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode SQLIDENTIFIER() { return getToken(DB2zSQLParser.SQLIDENTIFIER, 0); }
		public TerminalNode VARYING() { return getToken(DB2zSQLParser.VARYING, 0); }
		public CastBuiltInTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_castBuiltInType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCastBuiltInType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCastBuiltInType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCastBuiltInType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CastBuiltInTypeContext castBuiltInType() throws RecognitionException {
		CastBuiltInTypeContext _localctx = new CastBuiltInTypeContext(_ctx, getState());
		enterRule(_localctx, 1044, RULE_castBuiltInType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8239);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,978,_ctx) ) {
			case 1:
				{
				setState(8130);
				match(SMALLINT);
				}
				break;
			case 2:
				{
				setState(8131);
				match(INTEGER);
				}
				break;
			case 3:
				{
				setState(8132);
				match(INT);
				}
				break;
			case 4:
				{
				setState(8133);
				match(BIGINT);
				}
				break;
			case 5:
				{
				{
				setState(8134);
				_la = _input.LA(1);
				if ( !(_la==NUMERIC || _la==DEC || _la==DECIMAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8138);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,957,_ctx) ) {
				case 1:
					{
					setState(8135);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(8136);
					match(LPAREN);
					setState(8137);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 6:
				{
				{
				setState(8140);
				match(DECFLOAT);
				setState(8144);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,958,_ctx) ) {
				case 1:
					{
					setState(8141);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(8142);
					match(LPAREN);
					setState(8143);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 7:
				{
				{
				setState(8146);
				match(FLOAT);
				setState(8150);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,959,_ctx) ) {
				case 1:
					{
					setState(8147);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(8148);
					match(LPAREN);
					setState(8149);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 8:
				{
				setState(8152);
				match(REAL);
				}
				break;
			case 9:
				{
				{
				setState(8153);
				match(DOUBLE);
				setState(8155);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRECISION) {
					{
					setState(8154);
					match(PRECISION);
					}
				}

				}
				}
				break;
			case 10:
				{
				{
				setState(8162);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHAR:
				case CHARACTER:
					{
					{
					setState(8157);
					_la = _input.LA(1);
					if ( !(_la==CHAR || _la==CHARACTER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(8159);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==VARYING) {
						{
						setState(8158);
						match(VARYING);
						}
					}

					}
					}
					break;
				case VARCHAR:
					{
					setState(8161);
					match(VARCHAR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8167);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,963,_ctx) ) {
				case 1:
					{
					setState(8164);
					length();
					}
					break;
				case 2:
					{
					{
					setState(8165);
					match(LPAREN);
					setState(8166);
					match(RPAREN);
					}
					}
					break;
				}
				setState(8170);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CCSID) {
					{
					setState(8169);
					ccsidQualifier();
					}
				}

				}
				}
				break;
			case 11:
				{
				{
				setState(8176);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHAR:
				case CHARACTER:
					{
					{
					setState(8172);
					_la = _input.LA(1);
					if ( !(_la==CHAR || _la==CHARACTER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(8173);
					match(LARGE);
					setState(8174);
					match(OBJECT);
					}
					}
					break;
				case CLOB:
					{
					setState(8175);
					match(CLOB);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8181);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,966,_ctx) ) {
				case 1:
					{
					setState(8178);
					length();
					}
					break;
				case 2:
					{
					{
					setState(8179);
					match(LPAREN);
					setState(8180);
					match(RPAREN);
					}
					}
					break;
				}
				setState(8184);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CCSID) {
					{
					setState(8183);
					ccsidQualifier();
					}
				}

				}
				}
				break;
			case 12:
				{
				{
				setState(8186);
				_la = _input.LA(1);
				if ( !(_la==DBCLOB || _la==GRAPHIC || _la==VARGRAPHIC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8190);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,968,_ctx) ) {
				case 1:
					{
					setState(8187);
					length();
					}
					break;
				case 2:
					{
					{
					setState(8188);
					match(LPAREN);
					setState(8189);
					match(RPAREN);
					}
					}
					break;
				}
				setState(8193);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CCSID) {
					{
					setState(8192);
					ccsidQualifier();
					}
				}

				}
				}
				break;
			case 13:
				{
				{
				setState(8195);
				match(BINARY);
				setState(8199);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,970,_ctx) ) {
				case 1:
					{
					setState(8196);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(8197);
					match(LPAREN);
					setState(8198);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 14:
				{
				{
				setState(8206);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
					{
					{
					setState(8201);
					match(BINARY);
					setState(8203);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==VARYING) {
						{
						setState(8202);
						match(VARYING);
						}
					}

					}
					}
					break;
				case VARBINARY:
					{
					setState(8205);
					match(VARBINARY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8211);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,973,_ctx) ) {
				case 1:
					{
					setState(8208);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(8209);
					match(LPAREN);
					setState(8210);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 15:
				{
				{
				setState(8217);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
					{
					{
					setState(8213);
					match(BINARY);
					setState(8214);
					match(LARGE);
					setState(8215);
					match(OBJECT);
					}
					}
					break;
				case BLOB:
					{
					setState(8216);
					match(BLOB);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8224);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(8219);
					match(LPAREN);
					{
					setState(8220);
					match(INTEGERLITERAL);
					setState(8221);
					match(SQLIDENTIFIER);
					}
					setState(8223);
					match(RPAREN);
					}
				}

				}
				}
				break;
			case 16:
				{
				setState(8226);
				match(DATE);
				}
				break;
			case 17:
				{
				setState(8227);
				match(TIME);
				}
				break;
			case 18:
				{
				{
				setState(8228);
				match(TIMESTAMP);
				setState(8230);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(8229);
					integerInParens();
					}
				}

				setState(8235);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH || _la==WITHOUT) {
					{
					setState(8232);
					_la = _input.LA(1);
					if ( !(_la==WITH || _la==WITHOUT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(8233);
					match(TIME);
					setState(8234);
					match(ZONE);
					}
				}

				}
				}
				break;
			case 19:
				{
				setState(8237);
				match(ROWID);
				}
				break;
			case 20:
				{
				setState(8238);
				match(XML);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntegerInParensContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<TerminalNode> INTEGERLITERAL() { return getTokens(DB2zSQLParser.INTEGERLITERAL); }
		public TerminalNode INTEGERLITERAL(int i) {
			return getToken(DB2zSQLParser.INTEGERLITERAL, i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode COMMA() { return getToken(DB2zSQLParser.COMMA, 0); }
		public IntegerInParensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_integerInParens; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterIntegerInParens(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitIntegerInParens(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitIntegerInParens(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntegerInParensContext integerInParens() throws RecognitionException {
		IntegerInParensContext _localctx = new IntegerInParensContext(_ctx, getState());
		enterRule(_localctx, 1046, RULE_integerInParens);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8241);
			match(LPAREN);
			setState(8242);
			match(INTEGERLITERAL);
			setState(8245);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(8243);
				match(COMMA);
				setState(8244);
				match(INTEGERLITERAL);
				}
			}

			setState(8247);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode SQLIDENTIFIER() { return getToken(DB2zSQLParser.SQLIDENTIFIER, 0); }
		public TerminalNode CODEUNITS16() { return getToken(DB2zSQLParser.CODEUNITS16, 0); }
		public TerminalNode CODEUNITS32() { return getToken(DB2zSQLParser.CODEUNITS32, 0); }
		public TerminalNode OCTETS() { return getToken(DB2zSQLParser.OCTETS, 0); }
		public LengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_length; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterLength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitLength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LengthContext length() throws RecognitionException {
		LengthContext _localctx = new LengthContext(_ctx, getState());
		enterRule(_localctx, 1048, RULE_length);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8249);
			match(LPAREN);
			setState(8250);
			_la = _input.LA(1);
			if ( !(_la==INTEGERLITERAL || _la==SQLIDENTIFIER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(8252);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (CODEUNITS16 - 336)) | (1L << (CODEUNITS32 - 336)) | (1L << (OCTETS - 336)))) != 0)) {
				{
				setState(8251);
				_la = _input.LA(1);
				if ( !(((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (CODEUNITS16 - 336)) | (1L << (CODEUNITS32 - 336)) | (1L << (OCTETS - 336)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(8254);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CcsidQualifierContext extends ParserRuleContext {
		public TerminalNode CCSID() { return getToken(DB2zSQLParser.CCSID, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode ASCII() { return getToken(DB2zSQLParser.ASCII, 0); }
		public TerminalNode EBCDIC() { return getToken(DB2zSQLParser.EBCDIC, 0); }
		public TerminalNode UNICODE() { return getToken(DB2zSQLParser.UNICODE, 0); }
		public ForDataQualifierContext forDataQualifier() {
			return getRuleContext(ForDataQualifierContext.class,0);
		}
		public CcsidQualifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ccsidQualifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCcsidQualifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCcsidQualifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCcsidQualifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CcsidQualifierContext ccsidQualifier() throws RecognitionException {
		CcsidQualifierContext _localctx = new CcsidQualifierContext(_ctx, getState());
		enterRule(_localctx, 1050, RULE_ccsidQualifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8256);
			match(CCSID);
			setState(8262);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EBCDIC:
			case ASCII:
			case UNICODE:
				{
				{
				setState(8257);
				_la = _input.LA(1);
				if ( !(_la==EBCDIC || _la==ASCII || _la==UNICODE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8259);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(8258);
					forDataQualifier();
					}
				}

				}
				}
				break;
			case INTEGERLITERAL:
				{
				setState(8261);
				match(INTEGERLITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ForDataQualifierContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode DATA() { return getToken(DB2zSQLParser.DATA, 0); }
		public TerminalNode SBCS() { return getToken(DB2zSQLParser.SBCS, 0); }
		public TerminalNode MIXED() { return getToken(DB2zSQLParser.MIXED, 0); }
		public TerminalNode BIT() { return getToken(DB2zSQLParser.BIT, 0); }
		public ForDataQualifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forDataQualifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterForDataQualifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitForDataQualifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitForDataQualifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ForDataQualifierContext forDataQualifier() throws RecognitionException {
		ForDataQualifierContext _localctx = new ForDataQualifierContext(_ctx, getState());
		enterRule(_localctx, 1052, RULE_forDataQualifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8264);
			match(FOR);
			setState(8265);
			_la = _input.LA(1);
			if ( !(_la==BIT || _la==MIXED || _la==SBCS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(8266);
			match(DATA);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DistinctTypeNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public DistinctTypeNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_distinctTypeName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDistinctTypeName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDistinctTypeName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDistinctTypeName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DistinctTypeNameContext distinctTypeName() throws RecognitionException {
		DistinctTypeNameContext _localctx = new DistinctTypeNameContext(_ctx, getState());
		enterRule(_localctx, 1054, RULE_distinctTypeName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8271);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,983,_ctx) ) {
			case 1:
				{
				setState(8268);
				schemaName();
				setState(8269);
				match(DOT);
				}
				break;
			}
			setState(8273);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArrayTypeContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ArrayTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arrayType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterArrayType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitArrayType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitArrayType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArrayTypeContext arrayType() throws RecognitionException {
		ArrayTypeContext _localctx = new ArrayTypeContext(_ctx, getState());
		enterRule(_localctx, 1056, RULE_arrayType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8275);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LiteralContext extends ParserRuleContext {
		public TerminalNode NUMERICLITERAL() { return getToken(DB2zSQLParser.NUMERICLITERAL, 0); }
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LiteralContext literal() throws RecognitionException {
		LiteralContext _localctx = new LiteralContext(_ctx, getState());
		enterRule(_localctx, 1058, RULE_literal);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8277);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NONNUMERICLITERAL) | (1L << INTEGERLITERAL) | (1L << NUMERICLITERAL))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CcsidValueContext extends ParserRuleContext {
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public CcsidValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ccsidValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCcsidValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCcsidValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCcsidValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CcsidValueContext ccsidValue() throws RecognitionException {
		CcsidValueContext _localctx = new CcsidValueContext(_ctx, getState());
		enterRule(_localctx, 1060, RULE_ccsidValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8279);
			match(INTEGERLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public CorrelationNameContext correlationName() {
			return getRuleContext(CorrelationNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public ColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnNameContext columnName() throws RecognitionException {
		ColumnNameContext _localctx = new ColumnNameContext(_ctx, getState());
		enterRule(_localctx, 1062, RULE_columnName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8284);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,984,_ctx) ) {
			case 1:
				{
				setState(8281);
				correlationName();
				setState(8282);
				match(DOT);
				}
				break;
			}
			setState(8286);
			identifier();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SourceColumnNameContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public SourceColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sourceColumnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSourceColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSourceColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSourceColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SourceColumnNameContext sourceColumnName() throws RecognitionException {
		SourceColumnNameContext _localctx = new SourceColumnNameContext(_ctx, getState());
		enterRule(_localctx, 1064, RULE_sourceColumnName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8288);
			columnName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TargetColumnNameContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TargetColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_targetColumnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTargetColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTargetColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTargetColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TargetColumnNameContext targetColumnName() throws RecognitionException {
		TargetColumnNameContext _localctx = new TargetColumnNameContext(_ctx, getState());
		enterRule(_localctx, 1066, RULE_targetColumnName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8290);
			columnName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NewColumnNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public NewColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_newColumnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterNewColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitNewColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitNewColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NewColumnNameContext newColumnName() throws RecognitionException {
		NewColumnNameContext _localctx = new NewColumnNameContext(_ctx, getState());
		enterRule(_localctx, 1068, RULE_newColumnName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8292);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BeginColumnNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public BeginColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_beginColumnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterBeginColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitBeginColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitBeginColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BeginColumnNameContext beginColumnName() throws RecognitionException {
		BeginColumnNameContext _localctx = new BeginColumnNameContext(_ctx, getState());
		enterRule(_localctx, 1070, RULE_beginColumnName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8294);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EndColumnNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public EndColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_endColumnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterEndColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitEndColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitEndColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EndColumnNameContext endColumnName() throws RecognitionException {
		EndColumnNameContext _localctx = new EndColumnNameContext(_ctx, getState());
		enterRule(_localctx, 1072, RULE_endColumnName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8296);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CorrelationNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public CorrelationNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_correlationName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCorrelationName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCorrelationName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCorrelationName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CorrelationNameContext correlationName() throws RecognitionException {
		CorrelationNameContext _localctx = new CorrelationNameContext(_ctx, getState());
		enterRule(_localctx, 1074, RULE_correlationName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8298);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LocationNameContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> NUMERICLITERAL() { return getTokens(DB2zSQLParser.NUMERICLITERAL); }
		public TerminalNode NUMERICLITERAL(int i) {
			return getToken(DB2zSQLParser.NUMERICLITERAL, i);
		}
		public List<TerminalNode> INTEGERLITERAL() { return getTokens(DB2zSQLParser.INTEGERLITERAL); }
		public TerminalNode INTEGERLITERAL(int i) {
			return getToken(DB2zSQLParser.INTEGERLITERAL, i);
		}
		public List<TerminalNode> DOT() { return getTokens(DB2zSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(DB2zSQLParser.DOT, i);
		}
		public LocationNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_locationName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterLocationName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitLocationName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitLocationName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LocationNameContext locationName() throws RecognitionException {
		LocationNameContext _localctx = new LocationNameContext(_ctx, getState());
		enterRule(_localctx, 1076, RULE_locationName);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8303);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INSTEAD:
			case NEW:
			case NEW_TABLE:
			case OLD_TABLE:
			case REFERENCING:
			case BASED:
			case UPON:
			case ADD:
			case AFTER:
			case ALL:
			case ALLOCATE:
			case ALLOW:
			case ALTER:
			case ALTERAND:
			case ANY:
			case ARRAY:
			case ARRAY_EXISTS:
			case AS:
			case ASENSITIVE:
			case ASSOCIATE:
			case ASUTIME:
			case AT:
			case AUDIT:
			case AUX:
			case AUXILIARY:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BUFFERPOOL:
			case BUFFERPOOLS:
			case BY:
			case CALL:
			case CAPTURE:
			case CASCADED:
			case CASE:
			case CAST:
			case CCSID:
			case CHAR:
			case CHARACTER:
			case CHECK:
			case CLONE:
			case CLOSE:
			case CLUSTER:
			case COLLECTION:
			case COLLID:
			case COLUMN:
			case COMMENT:
			case COMMIT:
			case CONCAT:
			case CONDITION:
			case CONNECT:
			case CONNECTION:
			case CONSTRAINT:
			case CONTAINS:
			case CONTENT:
			case CONTINUE:
			case CREATE:
			case CUBE:
			case CURRENT:
			case CURRENT_LC_CTYPE:
			case CURRVAL:
			case CURSOR:
			case DATA:
			case DATABASE:
			case DAY:
			case DAYS:
			case DBINFO:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DISABLE:
			case DISALLOW:
			case DISTINCT:
			case DO:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSSIZE:
			case DYNAMIC:
			case EDITPROC:
			case ELSE:
			case ELSEIF:
			case ENCODING:
			case ENCRYPTION:
			case END:
			case END_EXEC:
			case ENDING:
			case ERASE:
			case ESCAPE:
			case EXCEPT:
			case EXCEPTION:
			case EXEC_SQL:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case FENCED:
			case FETCH:
			case FIELDPROC:
			case FINAL:
			case FIRST:
			case FOR:
			case FREE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANT:
			case GROUP:
			case HANDLER:
			case HAVING:
			case HOLD:
			case HOUR:
			case HOURS:
			case IF:
			case IMMEDIATE:
			case IN:
			case INCLUSIVE:
			case INDEX:
			case INDEXBP:
			case INHERIT:
			case INNER:
			case INOUT:
			case INSENSITIVE:
			case INSERT:
			case INTERSECT:
			case INTO:
			case IS:
			case ISOBID:
			case ITERATE:
			case JAR:
			case JOIN:
			case KEEP:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LAST:
			case LC_CTYPE:
			case LEAVE:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOCALE:
			case LOCATOR:
			case LOCATORS:
			case LOCK:
			case LOCKMAX:
			case LOCKSIZE:
			case LONG:
			case LOOP:
			case MAINTAINED:
			case MATERIALIZED:
			case MICROSECOND:
			case MICROSECONDS:
			case MODIFIES:
			case MONTH:
			case MONTHS:
			case NEXT:
			case NEXTVAL:
			case NO:
			case NONE:
			case NOT:
			case NULL:
			case NULLS:
			case NUMPARTS:
			case OBID:
			case OF:
			case OFFSET:
			case OLD:
			case ON:
			case OPEN:
			case OPTIMIZATION:
			case OPTIMIZE:
			case OR:
			case ORDER:
			case ORGANIZATION:
			case OUT:
			case OUTER:
			case PACKAGE:
			case PADDED:
			case PARAMETER:
			case PART:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONING:
			case PATH:
			case PERIOD:
			case PIECESIZE:
			case PLAN:
			case PRECISION:
			case PREPARE:
			case PREVVAL:
			case PRIOR:
			case PRIQTY:
			case PRIVILEGES:
			case PROCEDURE:
			case PROGRAM:
			case PSID:
			case PUBLIC:
			case QUERY:
			case QUERYNO:
			case READS:
			case REFERENCES:
			case REFRESH:
			case RELEASE:
			case RENAME:
			case REPEAT:
			case RESIGNAL:
			case RESTRICT:
			case RESULT:
			case RESULT_SET_LOCATOR:
			case RETURN:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUND_CEILING:
			case ROUND_DOWN:
			case ROUND_FLOOR:
			case ROUND_HALF_DOWN:
			case ROUND_HALF_EVEN:
			case ROUND_HALF_UP:
			case ROUND_UP:
			case ROW:
			case ROWSET:
			case RUN:
			case SAVEPOINT:
			case SCHEMA:
			case SCRATCHPAD:
			case SECOND:
			case SECONDS:
			case SECQTY:
			case SECURITY:
			case SELECT:
			case SENSITIVE:
			case SEQUENCE:
			case SET:
			case SIGNAL:
			case SIMPLE:
			case SOME:
			case SOURCE:
			case SPECIFIC:
			case STANDARD:
			case STATEMENT:
			case STATIC:
			case STAY:
			case STOGROUP:
			case STORES:
			case STYLE:
			case SUMMARY:
			case SYNONYM:
			case SYSDATE:
			case SYSTEM:
			case SYSTIMESTAMP:
			case TABLE:
			case TABLESPACE:
			case THEN:
			case TO:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNDO:
			case UNION:
			case UNIQUE:
			case UNTIL:
			case UPDATE:
			case USING:
			case VALIDPROC:
			case VALUE:
			case VALUES:
			case VARIABLE:
			case VARIANT:
			case VCAT:
			case VERSIONING:
			case VIEW:
			case VOLATILE:
			case VOLUMES:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WLM:
			case XMLCAST:
			case XMLEXISTS:
			case XMLNAMESPACES:
			case YEAR:
			case YEARS:
			case ZONE:
			case AND:
			case ARRAY_AGG:
			case ASC:
			case AVG:
			case BIT:
			case CHANGE:
			case CODEUNITS16:
			case CODEUNITS32:
			case CORR:
			case CORRELATION:
			case COUNT:
			case COUNT_BIG:
			case COVAR:
			case COVARIANCE:
			case COVARIANCE_SAMP:
			case COVAR_POP:
			case COVAR_SAMP:
			case CS:
			case CUME_DIST:
			case DENSE_RANK:
			case DESC:
			case EBCDIC:
			case EXCLUSIVE:
			case FIRST_VALUE:
			case FOLLOWING:
			case GROUPING:
			case IGNORE:
			case INDICATOR:
			case INPUT:
			case ISNULL:
			case LAG:
			case LARGE:
			case LAST_VALUE:
			case LEAD:
			case LISTAGG:
			case LOCKED:
			case LOCKS:
			case MEDIAN:
			case MINUTES:
			case MIXED:
			case NOTNULL:
			case NTH_VALUE:
			case NTILE:
			case NUMERIC:
			case OBJECT:
			case OCTETS:
			case ONLY:
			case OVER:
			case PASSING:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PERCENT_RANK:
			case PRECEDING:
			case PREVIOUS:
			case RANGE:
			case RANK:
			case RATIO_TO_REPORT:
			case READ:
			case REF:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_ICPT:
			case REGR_INTERCEPT:
			case REGR_R2:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case RESPECT:
			case ROW_NUMBER:
			case ROWS:
			case RR:
			case RS:
			case SBCS:
			case SELECTIVITY:
			case SETS:
			case SHARE:
			case SKIP_:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case TOKEN:
			case UNBOUNDED:
			case UNPACK:
			case UR:
			case USE:
			case VAR:
			case VARIANCE:
			case VARIANCE_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARYING:
			case WITHOUT:
			case XML:
			case XMLAGG:
			case COLUMNS:
			case SQLID:
			case ORDINALITY:
			case SYSTEM_TIME:
			case BUSINESS_TIME:
			case MULTIPLIER:
			case UNNEST:
			case CROSS:
			case CALLER:
			case CLIENT:
			case POSITIONING:
			case SCROLL:
			case ACTION:
			case ASSEMBLE:
			case C_:
			case CALLED:
			case COBOL:
			case DB2:
			case DEFINER:
			case DISPATCH:
			case ENVIRONMENT:
			case FAILURE:
			case FAILURES:
			case JAVA:
			case MAIN:
			case NAME:
			case OPTIONS:
			case PARALLEL:
			case PLI:
			case REGISTERS:
			case RESIDENT:
			case SECURED:
			case SPECIAL:
			case SQL:
			case STOP:
			case SUB:
			case YES:
			case APPLICATION:
			case CHANGED:
			case COMPATIBILITY:
			case COMPRESS:
			case COPY:
			case FREEPAGE:
			case GBPCACHE:
			case INCLUDE:
			case MAXVALUE:
			case MINVALUE:
			case PCTFREE:
			case REGENERATE:
			case MASK:
			case ENABLE:
			case PERMISSION:
			case ATOMIC:
			case SQLEXCEPTION:
			case MERGE:
			case MATCHED:
			case SQLSTATE:
			case MESSAGE_TEXT:
			case OVERRIDING:
			case PORTION:
			case DB2SQL:
			case DEBUG:
			case GENERAL:
			case MODE_:
			case REXX:
			case CACHE:
			case CYCLE:
			case INCREMENT:
			case RESTART:
			case DATACLAS:
			case MGMTCLAS:
			case REMOVE:
			case STORCLAS:
			case ACCESS:
			case ACTIVATE:
			case ALWAYS:
			case APPEND:
			case ARCHIVE:
			case BUSINESS:
			case CASCADE:
			case CHANGES:
			case CONTROL:
			case DEACTIVATE:
			case DEFERRED:
			case EACH:
			case ENFORCED:
			case EXTRA:
			case FOREIGN:
			case HIDDEN_:
			case HISTORY:
			case ID:
			case IDENTITY:
			case IMPLICITLY:
			case INITIALLY:
			case INLINE:
			case OPERATION:
			case ORGANIZE:
			case OVERLAPS:
			case PACKAGE_NAME:
			case PACKAGE_SCHEMA:
			case PACKAGE_VERSION:
			case PRIMARY:
			case RESET:
			case ROTATE:
			case START:
			case SYSIBM:
			case TRANSACTION:
			case XMLSCHEMA:
			case ELEMENT:
			case URL:
			case NAMESPACE:
			case LOCATION:
			case SYSXSR:
			case ALGORITHM:
			case FIXEDLENGTH:
			case HUFFMAN:
			case LOB:
			case LOG:
			case LOGGED:
			case MAXPARTITIONS:
			case MAXROWS:
			case MEMBER:
			case MOVE:
			case PAGE:
			case PAGENUM:
			case PENDING:
			case RELATIVE:
			case SEGSIZE:
			case TRACKMOD:
			case ADDRESS:
			case ATTRIBUTES:
			case AUTHENTICATION:
			case AUTHID:
			case CONTEXT:
			case JOBNAME:
			case OWNER:
			case PROFILE:
			case QUALIFIER:
			case SERVAUTH:
			case TRUSTED:
			case SECTION:
			case ACTIVE:
			case VERSION:
			case ALIAS:
			case WORK:
			case WORKFILE:
			case SYSDEFLT:
			case NULTERM:
			case STRUCTURE:
			case GENERIC:
			case TEMPORARY:
			case DEFER:
			case DEFINE:
			case EXCLUDE:
			case GENERATE:
			case KEYS:
			case XMLPATTERN:
			case SIZE:
			case EVERY:
			case ABSOLUTE:
			case ACCELERATOR:
			case EXCLUDING:
			case INCLUDING:
			case DEFAULTS:
			case MODIFIERS:
			case OPTION:
			case PRESERVE:
			case BOTH:
			case DESCRIBE:
			case LABELS:
			case NAMES:
			case OUTPUT:
			case EXCHANGE:
			case STABILIZED:
			case STMTCACHE:
			case STMTID:
			case STMTTOKEN:
			case STARTING:
			case CATALOG_NAME:
			case CONDITION_NUMBER:
			case CURSOR_NAME:
			case DB2_AUTHENTICATION_TYPE:
			case DB2_AUTHORIZATION_ID:
			case DB2_CONNECTION_STATE:
			case DB2_CONNECTION_STATUS:
			case DB2_ENCRYPTION_TYPE:
			case DB2_ERROR_CODE1:
			case DB2_ERROR_CODE2:
			case DB2_ERROR_CODE3:
			case DB2_ERROR_CODE4:
			case DB2_GET_DIAGNOSTICS_DIAGNOSTICS:
			case DB2_INTERNAL_ERROR_POINTER:
			case DB2_LAST_ROW:
			case DB2_LINE_NUMBER:
			case DB2_MESSAGE_ID:
			case DB2_MODULE_DETECTING_ERROR:
			case DB2_NUMBER_PARAMETER_MARKERS:
			case DB2_NUMBER_RESULT_SETS:
			case DB2_NUMBER_ROWS:
			case DB2_ORDINAL_TOKEN_:
			case DB2_PRODUCT_ID:
			case DB2_REASON_CODE:
			case DB2_RETURNED_SQLCODE:
			case DB2_RETURN_STATUS:
			case DB2_ROW_NUMBER:
			case DB2_SERVER_CLASS_NAME:
			case DB2_SQL_ATTR_CURSOR_HOLD:
			case DB2_SQL_ATTR_CURSOR_ROWSET:
			case DB2_SQL_ATTR_CURSOR_SCROLLABLE:
			case DB2_SQL_ATTR_CURSOR_SENSITIVITY:
			case DB2_SQL_ATTR_CURSOR_TYPE:
			case DB2_SQLERRD1:
			case DB2_SQLERRD2:
			case DB2_SQLERRD3:
			case DB2_SQLERRD4:
			case DB2_SQLERRD5:
			case DB2_SQLERRD6:
			case DB2_SQLERRD_SET:
			case DB2_SQL_NESTING_LEVEL:
			case DB2_TOKEN_COUNT:
			case DIAGNOSTICS:
			case MORE_:
			case NUMBER:
			case RETURNED_SQLSTATE:
			case ROW_COUNT:
			case SERVER_NAME:
			case STACKED:
			case CREATETAB:
			case CREATETS:
			case DBADM:
			case DBCTRL:
			case DBMAINT:
			case DISPLAYDB:
			case IMAGCOPY:
			case LOAD:
			case PACKADM:
			case RECOVERDB:
			case REORG:
			case REPAIR:
			case STARTDB:
			case STATS:
			case STOPDB:
			case BIND:
			case ALTERIN:
			case CREATEIN:
			case DROPIN:
			case USAGE:
			case ACCESSCTRL:
			case BINDADD:
			case BINDAGENT:
			case BSDS:
			case CREATEALIAS:
			case CREATEDBA:
			case CREATEDBC:
			case CREATE_SECURE_OBJECT:
			case CREATESG:
			case CREATETMTAB:
			case DATAACCESS:
			case DEBUGSESSION:
			case DISPLAY:
			case MONITOR1:
			case MONITOR2:
			case RECOVER:
			case SQLADM:
			case STOPALL:
			case STOSPACE:
			case SYSADM:
			case SYSCTRL:
			case SYSOPR:
			case TRACE:
			case UNLOAD:
			case WRITE:
			case ABS:
			case ABSVAL:
			case ACOS:
			case ADD_DAYS:
			case ADD_MONTHS:
			case ARRAY_DELETE:
			case ARRAY_FIRST:
			case ARRAY_LAST:
			case ARRAY_NEXT:
			case ARRAY_PRIOR:
			case ARRAY_TRIM:
			case ASCII:
			case ASCII_CHR:
			case ASCIISTR:
			case ASCII_STR:
			case ASIN:
			case ATAN:
			case ATAN2:
			case ATANH:
			case BIGINT:
			case BINARY:
			case BITAND:
			case BITANDNOT:
			case BITNOT:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BTRIM:
			case CARDINALITY:
			case CCSID_ENCODING:
			case CEIL:
			case CEILING:
			case CHAR9:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case CHR:
			case CLOB:
			case COALESCE:
			case COLLATION_KEY:
			case COMPARE_DECFLOAT:
			case COS:
			case COSH:
			case DATE:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFWEEK_ISO:
			case DAYOFYEAR:
			case DAYS_BETWEEN:
			case DBCLOB:
			case DEC:
			case DECFLOAT:
			case DECFLOAT_FORMAT:
			case DECFLOAT_SORTKEY:
			case DECIMAL:
			case DECODE:
			case DECRYPT_BINARY:
			case DECRYPT_BIT:
			case DECRYPT_CHAR:
			case DECRYPT_DATAKEY_BIGINT:
			case DECRYPT_DATAKEY_BIT:
			case DECRYPT_DATAKEY_CLOB:
			case DECRYPT_DATAKEY_DBCLOB:
			case DECRYPT_DATAKEY_DECIMAL:
			case DECRYPT_DATAKEY_INTEGER:
			case DECRYPT_DATAKEY_VARCHAR:
			case DECRYPT_DATAKEY_VARGRAPHIC:
			case DECRYPT_DB:
			case DEGREES:
			case DIFFERENCE:
			case DIGITS:
			case DOUBLE_PRECISION:
			case DSN_XMLVALIDATE:
			case EBCDIC_CHR:
			case EBCDIC_STR:
			case ENCRYPT_DATAKEY:
			case ENCRYPT_TDES:
			case EXP:
			case EXTRACT:
			case FLOAT:
			case FLOOR:
			case GENERATE_UNIQUE:
			case GENERATE_UNIQUE_BINARY:
			case GETHINT:
			case GETVARIABLE:
			case GRAPHIC:
			case GREATEST:
			case HASH:
			case HASH_CRC32:
			case HASH_MD5:
			case HASH_SHA1:
			case HASH_SHA256:
			case HEX:
			case IDENTITY_VAL_LOCAL:
			case IFNULL:
			case INSTR:
			case INT:
			case INTEGER:
			case JULIAN_DAY:
			case LAST_DAY:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LN:
			case LOCATE:
			case LOCATE_IN_STRING:
			case LOG10:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAX:
			case MAX_CARDINALITY:
			case MIDNIGHT_SECONDS:
			case MIN:
			case MINUTE:
			case MOD:
			case MONTHS_BETWEEN:
			case MQREAD:
			case MQREADCLOB:
			case MQRECEIVE:
			case MQRECEIVECLOB:
			case MQSEND:
			case MULTIPLY_ALT:
			case NEXT_DAY:
			case NEXT_MONTH:
			case NORMALIZE_DECFLOAT:
			case NORMALIZE_STRING:
			case NULLIF:
			case NVL:
			case OVERLAY:
			case PACK:
			case POSITION:
			case POSSTR:
			case POW:
			case POWER:
			case QUANTIZE:
			case QUARTER:
			case RADIANS:
			case RAISE_ERROR:
			case RAND:
			case RANDOM:
			case REAL:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REPLACE:
			case RID:
			case ROUND:
			case ROUND_TIMESTAMP:
			case ROWID:
			case RPAD:
			case RTRIM:
			case SCORE:
			case SIGN:
			case SIN:
			case SINH:
			case SMALLINT:
			case SOAPHTTPC:
			case SOAPHTTPNC:
			case SOAPHTTPNV:
			case SOAPHTTPV:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STRIP:
			case STRLEFT:
			case STRPOS:
			case STRRIGHT:
			case SUBSTR:
			case SUBSTRING:
			case TAN:
			case TANH:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIMESTAMP_FORMAT:
			case TIMESTAMP_ISO:
			case TIMESTAMP_TZ:
			case TO_CHAR:
			case TO_CLOB:
			case TO_DATE:
			case TO_NUMBER:
			case TOTALORDER:
			case TO_TIMESTAMP:
			case TRANSLATE:
			case TRIM:
			case TRIM_ARRAY:
			case TRUNC:
			case TRUNC_TIMESTAMP:
			case UCASE:
			case UNICODE:
			case UNICODE_STR:
			case UNISTR:
			case UPPER:
			case VARBINARY:
			case VARCHAR:
			case VARCHAR9:
			case VARCHAR_BIT_FORMAT:
			case VARCHAR_FORMAT:
			case VARGRAPHIC:
			case VERIFY_GROUP_FOR_USER:
			case VERIFY_ROLE_FOR_USER:
			case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
			case WEEK:
			case WEEK_ISO:
			case WRAP:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLCONCAT:
			case XMLDOCUMENT:
			case XMLELEMENT:
			case XMLFOREST:
			case XMLMODIFY:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLSERIALIZE:
			case XMLTEXT:
			case XMLXSROBJECTID:
			case XSLTRANSFORM:
			case CURRENT_ACCELERATOR:
			case CURRENT_APPLICATION_COMPATIBILITY:
			case CURRENT_APPLICATION_ENCODING_SCHEME:
			case CURRENT_CLIENT_ACCTNG:
			case CURRENT_CLIENT_APPLNAME:
			case CURRENT_CLIENT_CORR_TOKEN:
			case CURRENT_CLIENT_USERID:
			case CURRENT_CLIENT_WRKSTNNAME:
			case CURRENT_DATE:
			case CURRENT_DEBUG_MODE:
			case CURRENT_DECFLOAT_ROUNDING_MODE:
			case CURRENT_DEGREE:
			case CURRENT_EXPLAIN_MODE:
			case CURRENT_GET_ACCEL_ARCHIVE:
			case CURRENT_LOCALE_LC_CTYPE:
			case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
			case CURRENT_MEMBER:
			case CURRENT_OPTIMIZATION_HINT:
			case CURRENT_PACKAGE_PATH:
			case CURRENT_PACKAGESET:
			case CURRENT_PATH:
			case CURRENT_PRECISION:
			case CURRENT_QUERY_ACCELERATION:
			case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
			case CURRENT_REFRESH_AGE:
			case CURRENT_ROUTINE_VERSION:
			case CURRENT_RULES:
			case CURRENT_SCHEMA:
			case CURRENT_SERVER:
			case CURRENT_SQLID:
			case CURRENT_TEMPORAL_BUSINESS_TIME:
			case CURRENT_TEMPORAL_SYSTEM_TIME:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_TIME_ZONE:
			case ENCRYPTION_PASSWORD:
			case SESSION_TIME_ZONE:
			case SESSION_USER:
			case USER:
			case ADMIN_TASK_LIST:
			case ADMIN_TASK_OUTPUT:
			case ADMIN_TASK_STATUS:
			case BLOCKING_THREADS:
			case MQREADALL:
			case MQREADALLCLOB:
			case MQRECEIVEALL:
			case MQRECEIVEALLCLOB:
			case XMLTABLE:
			case SQLIDENTIFIER:
				{
				setState(8300);
				identifier();
				}
				break;
			case NUMERICLITERAL:
				{
				setState(8301);
				match(NUMERICLITERAL);
				}
				break;
			case INTEGERLITERAL:
				{
				setState(8302);
				match(INTEGERLITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(8315);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,988,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8306);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DOT) {
						{
						setState(8305);
						match(DOT);
						}
					}

					setState(8311);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case INSTEAD:
					case NEW:
					case NEW_TABLE:
					case OLD_TABLE:
					case REFERENCING:
					case BASED:
					case UPON:
					case ADD:
					case AFTER:
					case ALL:
					case ALLOCATE:
					case ALLOW:
					case ALTER:
					case ALTERAND:
					case ANY:
					case ARRAY:
					case ARRAY_EXISTS:
					case AS:
					case ASENSITIVE:
					case ASSOCIATE:
					case ASUTIME:
					case AT:
					case AUDIT:
					case AUX:
					case AUXILIARY:
					case BEFORE:
					case BEGIN:
					case BETWEEN:
					case BUFFERPOOL:
					case BUFFERPOOLS:
					case BY:
					case CALL:
					case CAPTURE:
					case CASCADED:
					case CASE:
					case CAST:
					case CCSID:
					case CHAR:
					case CHARACTER:
					case CHECK:
					case CLONE:
					case CLOSE:
					case CLUSTER:
					case COLLECTION:
					case COLLID:
					case COLUMN:
					case COMMENT:
					case COMMIT:
					case CONCAT:
					case CONDITION:
					case CONNECT:
					case CONNECTION:
					case CONSTRAINT:
					case CONTAINS:
					case CONTENT:
					case CONTINUE:
					case CREATE:
					case CUBE:
					case CURRENT:
					case CURRENT_LC_CTYPE:
					case CURRVAL:
					case CURSOR:
					case DATA:
					case DATABASE:
					case DAY:
					case DAYS:
					case DBINFO:
					case DECLARE:
					case DEFAULT:
					case DELETE:
					case DESCRIPTOR:
					case DETERMINISTIC:
					case DISABLE:
					case DISALLOW:
					case DISTINCT:
					case DO:
					case DOCUMENT:
					case DOUBLE:
					case DROP:
					case DSSIZE:
					case DYNAMIC:
					case EDITPROC:
					case ELSE:
					case ELSEIF:
					case ENCODING:
					case ENCRYPTION:
					case END:
					case END_EXEC:
					case ENDING:
					case ERASE:
					case ESCAPE:
					case EXCEPT:
					case EXCEPTION:
					case EXEC_SQL:
					case EXECUTE:
					case EXISTS:
					case EXIT:
					case EXPLAIN:
					case EXTERNAL:
					case FENCED:
					case FETCH:
					case FIELDPROC:
					case FINAL:
					case FIRST:
					case FOR:
					case FREE:
					case FROM:
					case FULL:
					case FUNCTION:
					case GENERATED:
					case GET:
					case GLOBAL:
					case GO:
					case GOTO:
					case GRANT:
					case GROUP:
					case HANDLER:
					case HAVING:
					case HOLD:
					case HOUR:
					case HOURS:
					case IF:
					case IMMEDIATE:
					case IN:
					case INCLUSIVE:
					case INDEX:
					case INDEXBP:
					case INHERIT:
					case INNER:
					case INOUT:
					case INSENSITIVE:
					case INSERT:
					case INTERSECT:
					case INTO:
					case IS:
					case ISOBID:
					case ITERATE:
					case JAR:
					case JOIN:
					case KEEP:
					case KEY:
					case LABEL:
					case LANGUAGE:
					case LAST:
					case LC_CTYPE:
					case LEAVE:
					case LEFT:
					case LIKE:
					case LIMIT:
					case LOCAL:
					case LOCALE:
					case LOCATOR:
					case LOCATORS:
					case LOCK:
					case LOCKMAX:
					case LOCKSIZE:
					case LONG:
					case LOOP:
					case MAINTAINED:
					case MATERIALIZED:
					case MICROSECOND:
					case MICROSECONDS:
					case MODIFIES:
					case MONTH:
					case MONTHS:
					case NEXT:
					case NEXTVAL:
					case NO:
					case NONE:
					case NOT:
					case NULL:
					case NULLS:
					case NUMPARTS:
					case OBID:
					case OF:
					case OFFSET:
					case OLD:
					case ON:
					case OPEN:
					case OPTIMIZATION:
					case OPTIMIZE:
					case OR:
					case ORDER:
					case ORGANIZATION:
					case OUT:
					case OUTER:
					case PACKAGE:
					case PADDED:
					case PARAMETER:
					case PART:
					case PARTITION:
					case PARTITIONED:
					case PARTITIONING:
					case PATH:
					case PERIOD:
					case PIECESIZE:
					case PLAN:
					case PRECISION:
					case PREPARE:
					case PREVVAL:
					case PRIOR:
					case PRIQTY:
					case PRIVILEGES:
					case PROCEDURE:
					case PROGRAM:
					case PSID:
					case PUBLIC:
					case QUERY:
					case QUERYNO:
					case READS:
					case REFERENCES:
					case REFRESH:
					case RELEASE:
					case RENAME:
					case REPEAT:
					case RESIGNAL:
					case RESTRICT:
					case RESULT:
					case RESULT_SET_LOCATOR:
					case RETURN:
					case RETURNS:
					case REVOKE:
					case RIGHT:
					case ROLE:
					case ROLLBACK:
					case ROLLUP:
					case ROUND_CEILING:
					case ROUND_DOWN:
					case ROUND_FLOOR:
					case ROUND_HALF_DOWN:
					case ROUND_HALF_EVEN:
					case ROUND_HALF_UP:
					case ROUND_UP:
					case ROW:
					case ROWSET:
					case RUN:
					case SAVEPOINT:
					case SCHEMA:
					case SCRATCHPAD:
					case SECOND:
					case SECONDS:
					case SECQTY:
					case SECURITY:
					case SELECT:
					case SENSITIVE:
					case SEQUENCE:
					case SET:
					case SIGNAL:
					case SIMPLE:
					case SOME:
					case SOURCE:
					case SPECIFIC:
					case STANDARD:
					case STATEMENT:
					case STATIC:
					case STAY:
					case STOGROUP:
					case STORES:
					case STYLE:
					case SUMMARY:
					case SYNONYM:
					case SYSDATE:
					case SYSTEM:
					case SYSTIMESTAMP:
					case TABLE:
					case TABLESPACE:
					case THEN:
					case TO:
					case TRIGGER:
					case TRUNCATE:
					case TYPE:
					case UNDO:
					case UNION:
					case UNIQUE:
					case UNTIL:
					case UPDATE:
					case USING:
					case VALIDPROC:
					case VALUE:
					case VALUES:
					case VARIABLE:
					case VARIANT:
					case VCAT:
					case VERSIONING:
					case VIEW:
					case VOLATILE:
					case VOLUMES:
					case WHEN:
					case WHENEVER:
					case WHERE:
					case WHILE:
					case WITH:
					case WLM:
					case XMLCAST:
					case XMLEXISTS:
					case XMLNAMESPACES:
					case YEAR:
					case YEARS:
					case ZONE:
					case AND:
					case ARRAY_AGG:
					case ASC:
					case AVG:
					case BIT:
					case CHANGE:
					case CODEUNITS16:
					case CODEUNITS32:
					case CORR:
					case CORRELATION:
					case COUNT:
					case COUNT_BIG:
					case COVAR:
					case COVARIANCE:
					case COVARIANCE_SAMP:
					case COVAR_POP:
					case COVAR_SAMP:
					case CS:
					case CUME_DIST:
					case DENSE_RANK:
					case DESC:
					case EBCDIC:
					case EXCLUSIVE:
					case FIRST_VALUE:
					case FOLLOWING:
					case GROUPING:
					case IGNORE:
					case INDICATOR:
					case INPUT:
					case ISNULL:
					case LAG:
					case LARGE:
					case LAST_VALUE:
					case LEAD:
					case LISTAGG:
					case LOCKED:
					case LOCKS:
					case MEDIAN:
					case MINUTES:
					case MIXED:
					case NOTNULL:
					case NTH_VALUE:
					case NTILE:
					case NUMERIC:
					case OBJECT:
					case OCTETS:
					case ONLY:
					case OVER:
					case PASSING:
					case PERCENTILE_CONT:
					case PERCENTILE_DISC:
					case PERCENT_RANK:
					case PRECEDING:
					case PREVIOUS:
					case RANGE:
					case RANK:
					case RATIO_TO_REPORT:
					case READ:
					case REF:
					case REGR_AVGX:
					case REGR_AVGY:
					case REGR_COUNT:
					case REGR_ICPT:
					case REGR_INTERCEPT:
					case REGR_R2:
					case REGR_SLOPE:
					case REGR_SXX:
					case REGR_SXY:
					case REGR_SYY:
					case RESPECT:
					case ROW_NUMBER:
					case ROWS:
					case RR:
					case RS:
					case SBCS:
					case SELECTIVITY:
					case SETS:
					case SHARE:
					case SKIP_:
					case STDDEV:
					case STDDEV_POP:
					case STDDEV_SAMP:
					case SUM:
					case TOKEN:
					case UNBOUNDED:
					case UNPACK:
					case UR:
					case USE:
					case VAR:
					case VARIANCE:
					case VARIANCE_SAMP:
					case VAR_POP:
					case VAR_SAMP:
					case VARYING:
					case WITHOUT:
					case XML:
					case XMLAGG:
					case COLUMNS:
					case SQLID:
					case ORDINALITY:
					case SYSTEM_TIME:
					case BUSINESS_TIME:
					case MULTIPLIER:
					case UNNEST:
					case CROSS:
					case CALLER:
					case CLIENT:
					case POSITIONING:
					case SCROLL:
					case ACTION:
					case ASSEMBLE:
					case C_:
					case CALLED:
					case COBOL:
					case DB2:
					case DEFINER:
					case DISPATCH:
					case ENVIRONMENT:
					case FAILURE:
					case FAILURES:
					case JAVA:
					case MAIN:
					case NAME:
					case OPTIONS:
					case PARALLEL:
					case PLI:
					case REGISTERS:
					case RESIDENT:
					case SECURED:
					case SPECIAL:
					case SQL:
					case STOP:
					case SUB:
					case YES:
					case APPLICATION:
					case CHANGED:
					case COMPATIBILITY:
					case COMPRESS:
					case COPY:
					case FREEPAGE:
					case GBPCACHE:
					case INCLUDE:
					case MAXVALUE:
					case MINVALUE:
					case PCTFREE:
					case REGENERATE:
					case MASK:
					case ENABLE:
					case PERMISSION:
					case ATOMIC:
					case SQLEXCEPTION:
					case MERGE:
					case MATCHED:
					case SQLSTATE:
					case MESSAGE_TEXT:
					case OVERRIDING:
					case PORTION:
					case DB2SQL:
					case DEBUG:
					case GENERAL:
					case MODE_:
					case REXX:
					case CACHE:
					case CYCLE:
					case INCREMENT:
					case RESTART:
					case DATACLAS:
					case MGMTCLAS:
					case REMOVE:
					case STORCLAS:
					case ACCESS:
					case ACTIVATE:
					case ALWAYS:
					case APPEND:
					case ARCHIVE:
					case BUSINESS:
					case CASCADE:
					case CHANGES:
					case CONTROL:
					case DEACTIVATE:
					case DEFERRED:
					case EACH:
					case ENFORCED:
					case EXTRA:
					case FOREIGN:
					case HIDDEN_:
					case HISTORY:
					case ID:
					case IDENTITY:
					case IMPLICITLY:
					case INITIALLY:
					case INLINE:
					case OPERATION:
					case ORGANIZE:
					case OVERLAPS:
					case PACKAGE_NAME:
					case PACKAGE_SCHEMA:
					case PACKAGE_VERSION:
					case PRIMARY:
					case RESET:
					case ROTATE:
					case START:
					case SYSIBM:
					case TRANSACTION:
					case XMLSCHEMA:
					case ELEMENT:
					case URL:
					case NAMESPACE:
					case LOCATION:
					case SYSXSR:
					case ALGORITHM:
					case FIXEDLENGTH:
					case HUFFMAN:
					case LOB:
					case LOG:
					case LOGGED:
					case MAXPARTITIONS:
					case MAXROWS:
					case MEMBER:
					case MOVE:
					case PAGE:
					case PAGENUM:
					case PENDING:
					case RELATIVE:
					case SEGSIZE:
					case TRACKMOD:
					case ADDRESS:
					case ATTRIBUTES:
					case AUTHENTICATION:
					case AUTHID:
					case CONTEXT:
					case JOBNAME:
					case OWNER:
					case PROFILE:
					case QUALIFIER:
					case SERVAUTH:
					case TRUSTED:
					case SECTION:
					case ACTIVE:
					case VERSION:
					case ALIAS:
					case WORK:
					case WORKFILE:
					case SYSDEFLT:
					case NULTERM:
					case STRUCTURE:
					case GENERIC:
					case TEMPORARY:
					case DEFER:
					case DEFINE:
					case EXCLUDE:
					case GENERATE:
					case KEYS:
					case XMLPATTERN:
					case SIZE:
					case EVERY:
					case ABSOLUTE:
					case ACCELERATOR:
					case EXCLUDING:
					case INCLUDING:
					case DEFAULTS:
					case MODIFIERS:
					case OPTION:
					case PRESERVE:
					case BOTH:
					case DESCRIBE:
					case LABELS:
					case NAMES:
					case OUTPUT:
					case EXCHANGE:
					case STABILIZED:
					case STMTCACHE:
					case STMTID:
					case STMTTOKEN:
					case STARTING:
					case CATALOG_NAME:
					case CONDITION_NUMBER:
					case CURSOR_NAME:
					case DB2_AUTHENTICATION_TYPE:
					case DB2_AUTHORIZATION_ID:
					case DB2_CONNECTION_STATE:
					case DB2_CONNECTION_STATUS:
					case DB2_ENCRYPTION_TYPE:
					case DB2_ERROR_CODE1:
					case DB2_ERROR_CODE2:
					case DB2_ERROR_CODE3:
					case DB2_ERROR_CODE4:
					case DB2_GET_DIAGNOSTICS_DIAGNOSTICS:
					case DB2_INTERNAL_ERROR_POINTER:
					case DB2_LAST_ROW:
					case DB2_LINE_NUMBER:
					case DB2_MESSAGE_ID:
					case DB2_MODULE_DETECTING_ERROR:
					case DB2_NUMBER_PARAMETER_MARKERS:
					case DB2_NUMBER_RESULT_SETS:
					case DB2_NUMBER_ROWS:
					case DB2_ORDINAL_TOKEN_:
					case DB2_PRODUCT_ID:
					case DB2_REASON_CODE:
					case DB2_RETURNED_SQLCODE:
					case DB2_RETURN_STATUS:
					case DB2_ROW_NUMBER:
					case DB2_SERVER_CLASS_NAME:
					case DB2_SQL_ATTR_CURSOR_HOLD:
					case DB2_SQL_ATTR_CURSOR_ROWSET:
					case DB2_SQL_ATTR_CURSOR_SCROLLABLE:
					case DB2_SQL_ATTR_CURSOR_SENSITIVITY:
					case DB2_SQL_ATTR_CURSOR_TYPE:
					case DB2_SQLERRD1:
					case DB2_SQLERRD2:
					case DB2_SQLERRD3:
					case DB2_SQLERRD4:
					case DB2_SQLERRD5:
					case DB2_SQLERRD6:
					case DB2_SQLERRD_SET:
					case DB2_SQL_NESTING_LEVEL:
					case DB2_TOKEN_COUNT:
					case DIAGNOSTICS:
					case MORE_:
					case NUMBER:
					case RETURNED_SQLSTATE:
					case ROW_COUNT:
					case SERVER_NAME:
					case STACKED:
					case CREATETAB:
					case CREATETS:
					case DBADM:
					case DBCTRL:
					case DBMAINT:
					case DISPLAYDB:
					case IMAGCOPY:
					case LOAD:
					case PACKADM:
					case RECOVERDB:
					case REORG:
					case REPAIR:
					case STARTDB:
					case STATS:
					case STOPDB:
					case BIND:
					case ALTERIN:
					case CREATEIN:
					case DROPIN:
					case USAGE:
					case ACCESSCTRL:
					case BINDADD:
					case BINDAGENT:
					case BSDS:
					case CREATEALIAS:
					case CREATEDBA:
					case CREATEDBC:
					case CREATE_SECURE_OBJECT:
					case CREATESG:
					case CREATETMTAB:
					case DATAACCESS:
					case DEBUGSESSION:
					case DISPLAY:
					case MONITOR1:
					case MONITOR2:
					case RECOVER:
					case SQLADM:
					case STOPALL:
					case STOSPACE:
					case SYSADM:
					case SYSCTRL:
					case SYSOPR:
					case TRACE:
					case UNLOAD:
					case WRITE:
					case ABS:
					case ABSVAL:
					case ACOS:
					case ADD_DAYS:
					case ADD_MONTHS:
					case ARRAY_DELETE:
					case ARRAY_FIRST:
					case ARRAY_LAST:
					case ARRAY_NEXT:
					case ARRAY_PRIOR:
					case ARRAY_TRIM:
					case ASCII:
					case ASCII_CHR:
					case ASCIISTR:
					case ASCII_STR:
					case ASIN:
					case ATAN:
					case ATAN2:
					case ATANH:
					case BIGINT:
					case BINARY:
					case BITAND:
					case BITANDNOT:
					case BITNOT:
					case BITOR:
					case BITXOR:
					case BLOB:
					case BTRIM:
					case CARDINALITY:
					case CCSID_ENCODING:
					case CEIL:
					case CEILING:
					case CHAR9:
					case CHARACTER_LENGTH:
					case CHAR_LENGTH:
					case CHR:
					case CLOB:
					case COALESCE:
					case COLLATION_KEY:
					case COMPARE_DECFLOAT:
					case COS:
					case COSH:
					case DATE:
					case DAYOFMONTH:
					case DAYOFWEEK:
					case DAYOFWEEK_ISO:
					case DAYOFYEAR:
					case DAYS_BETWEEN:
					case DBCLOB:
					case DEC:
					case DECFLOAT:
					case DECFLOAT_FORMAT:
					case DECFLOAT_SORTKEY:
					case DECIMAL:
					case DECODE:
					case DECRYPT_BINARY:
					case DECRYPT_BIT:
					case DECRYPT_CHAR:
					case DECRYPT_DATAKEY_BIGINT:
					case DECRYPT_DATAKEY_BIT:
					case DECRYPT_DATAKEY_CLOB:
					case DECRYPT_DATAKEY_DBCLOB:
					case DECRYPT_DATAKEY_DECIMAL:
					case DECRYPT_DATAKEY_INTEGER:
					case DECRYPT_DATAKEY_VARCHAR:
					case DECRYPT_DATAKEY_VARGRAPHIC:
					case DECRYPT_DB:
					case DEGREES:
					case DIFFERENCE:
					case DIGITS:
					case DOUBLE_PRECISION:
					case DSN_XMLVALIDATE:
					case EBCDIC_CHR:
					case EBCDIC_STR:
					case ENCRYPT_DATAKEY:
					case ENCRYPT_TDES:
					case EXP:
					case EXTRACT:
					case FLOAT:
					case FLOOR:
					case GENERATE_UNIQUE:
					case GENERATE_UNIQUE_BINARY:
					case GETHINT:
					case GETVARIABLE:
					case GRAPHIC:
					case GREATEST:
					case HASH:
					case HASH_CRC32:
					case HASH_MD5:
					case HASH_SHA1:
					case HASH_SHA256:
					case HEX:
					case IDENTITY_VAL_LOCAL:
					case IFNULL:
					case INSTR:
					case INT:
					case INTEGER:
					case JULIAN_DAY:
					case LAST_DAY:
					case LCASE:
					case LEAST:
					case LENGTH:
					case LN:
					case LOCATE:
					case LOCATE_IN_STRING:
					case LOG10:
					case LOWER:
					case LPAD:
					case LTRIM:
					case MAX:
					case MAX_CARDINALITY:
					case MIDNIGHT_SECONDS:
					case MIN:
					case MINUTE:
					case MOD:
					case MONTHS_BETWEEN:
					case MQREAD:
					case MQREADCLOB:
					case MQRECEIVE:
					case MQRECEIVECLOB:
					case MQSEND:
					case MULTIPLY_ALT:
					case NEXT_DAY:
					case NEXT_MONTH:
					case NORMALIZE_DECFLOAT:
					case NORMALIZE_STRING:
					case NULLIF:
					case NVL:
					case OVERLAY:
					case PACK:
					case POSITION:
					case POSSTR:
					case POW:
					case POWER:
					case QUANTIZE:
					case QUARTER:
					case RADIANS:
					case RAISE_ERROR:
					case RAND:
					case RANDOM:
					case REAL:
					case REGEXP_COUNT:
					case REGEXP_INSTR:
					case REGEXP_LIKE:
					case REGEXP_REPLACE:
					case REGEXP_SUBSTR:
					case REPLACE:
					case RID:
					case ROUND:
					case ROUND_TIMESTAMP:
					case ROWID:
					case RPAD:
					case RTRIM:
					case SCORE:
					case SIGN:
					case SIN:
					case SINH:
					case SMALLINT:
					case SOAPHTTPC:
					case SOAPHTTPNC:
					case SOAPHTTPNV:
					case SOAPHTTPV:
					case SOUNDEX:
					case SPACE:
					case SQRT:
					case STRIP:
					case STRLEFT:
					case STRPOS:
					case STRRIGHT:
					case SUBSTR:
					case SUBSTRING:
					case TAN:
					case TANH:
					case TIME:
					case TIMESTAMP:
					case TIMESTAMPADD:
					case TIMESTAMPDIFF:
					case TIMESTAMP_FORMAT:
					case TIMESTAMP_ISO:
					case TIMESTAMP_TZ:
					case TO_CHAR:
					case TO_CLOB:
					case TO_DATE:
					case TO_NUMBER:
					case TOTALORDER:
					case TO_TIMESTAMP:
					case TRANSLATE:
					case TRIM:
					case TRIM_ARRAY:
					case TRUNC:
					case TRUNC_TIMESTAMP:
					case UCASE:
					case UNICODE:
					case UNICODE_STR:
					case UNISTR:
					case UPPER:
					case VARBINARY:
					case VARCHAR:
					case VARCHAR9:
					case VARCHAR_BIT_FORMAT:
					case VARCHAR_FORMAT:
					case VARGRAPHIC:
					case VERIFY_GROUP_FOR_USER:
					case VERIFY_ROLE_FOR_USER:
					case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
					case WEEK:
					case WEEK_ISO:
					case WRAP:
					case XMLATTRIBUTES:
					case XMLCOMMENT:
					case XMLCONCAT:
					case XMLDOCUMENT:
					case XMLELEMENT:
					case XMLFOREST:
					case XMLMODIFY:
					case XMLPARSE:
					case XMLPI:
					case XMLQUERY:
					case XMLSERIALIZE:
					case XMLTEXT:
					case XMLXSROBJECTID:
					case XSLTRANSFORM:
					case CURRENT_ACCELERATOR:
					case CURRENT_APPLICATION_COMPATIBILITY:
					case CURRENT_APPLICATION_ENCODING_SCHEME:
					case CURRENT_CLIENT_ACCTNG:
					case CURRENT_CLIENT_APPLNAME:
					case CURRENT_CLIENT_CORR_TOKEN:
					case CURRENT_CLIENT_USERID:
					case CURRENT_CLIENT_WRKSTNNAME:
					case CURRENT_DATE:
					case CURRENT_DEBUG_MODE:
					case CURRENT_DECFLOAT_ROUNDING_MODE:
					case CURRENT_DEGREE:
					case CURRENT_EXPLAIN_MODE:
					case CURRENT_GET_ACCEL_ARCHIVE:
					case CURRENT_LOCALE_LC_CTYPE:
					case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
					case CURRENT_MEMBER:
					case CURRENT_OPTIMIZATION_HINT:
					case CURRENT_PACKAGE_PATH:
					case CURRENT_PACKAGESET:
					case CURRENT_PATH:
					case CURRENT_PRECISION:
					case CURRENT_QUERY_ACCELERATION:
					case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
					case CURRENT_REFRESH_AGE:
					case CURRENT_ROUTINE_VERSION:
					case CURRENT_RULES:
					case CURRENT_SCHEMA:
					case CURRENT_SERVER:
					case CURRENT_SQLID:
					case CURRENT_TEMPORAL_BUSINESS_TIME:
					case CURRENT_TEMPORAL_SYSTEM_TIME:
					case CURRENT_TIME:
					case CURRENT_TIMESTAMP:
					case CURRENT_TIME_ZONE:
					case ENCRYPTION_PASSWORD:
					case SESSION_TIME_ZONE:
					case SESSION_USER:
					case USER:
					case ADMIN_TASK_LIST:
					case ADMIN_TASK_OUTPUT:
					case ADMIN_TASK_STATUS:
					case BLOCKING_THREADS:
					case MQREADALL:
					case MQREADALLCLOB:
					case MQRECEIVEALL:
					case MQRECEIVEALLCLOB:
					case XMLTABLE:
					case SQLIDENTIFIER:
						{
						setState(8308);
						identifier();
						}
						break;
					case NUMERICLITERAL:
						{
						setState(8309);
						match(NUMERICLITERAL);
						}
						break;
					case INTEGERLITERAL:
						{
						setState(8310);
						match(INTEGERLITERAL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					} 
				}
				setState(8317);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,988,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SchemaNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSchemaName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSchemaName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSchemaName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SchemaNameContext schemaName() throws RecognitionException {
		SchemaNameContext _localctx = new SchemaNameContext(_ctx, getState());
		enterRule(_localctx, 1078, RULE_schemaName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8318);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public LocationNameContext locationName() {
			return getRuleContext(LocationNameContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(DB2zSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(DB2zSQLParser.DOT, i);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableNameContext tableName() throws RecognitionException {
		TableNameContext _localctx = new TableNameContext(_ctx, getState());
		enterRule(_localctx, 1080, RULE_tableName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8328);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,989,_ctx) ) {
			case 1:
				{
				{
				setState(8320);
				locationName();
				setState(8321);
				match(DOT);
				setState(8322);
				schemaName();
				setState(8323);
				match(DOT);
				}
				}
				break;
			case 2:
				{
				{
				setState(8325);
				schemaName();
				setState(8326);
				match(DOT);
				}
				}
				break;
			}
			setState(8330);
			identifier();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public LocationNameContext locationName() {
			return getRuleContext(LocationNameContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(DB2zSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(DB2zSQLParser.DOT, i);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public AlterTableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableNameContext alterTableName() throws RecognitionException {
		AlterTableNameContext _localctx = new AlterTableNameContext(_ctx, getState());
		enterRule(_localctx, 1082, RULE_alterTableName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8340);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,990,_ctx) ) {
			case 1:
				{
				{
				setState(8332);
				locationName();
				setState(8333);
				match(DOT);
				setState(8334);
				schemaName();
				setState(8335);
				match(DOT);
				}
				}
				break;
			case 2:
				{
				{
				setState(8337);
				schemaName();
				setState(8338);
				match(DOT);
				}
				}
				break;
			}
			setState(8342);
			identifier();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AuxTableNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public LocationNameContext locationName() {
			return getRuleContext(LocationNameContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(DB2zSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(DB2zSQLParser.DOT, i);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public AuxTableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_auxTableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAuxTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAuxTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAuxTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AuxTableNameContext auxTableName() throws RecognitionException {
		AuxTableNameContext _localctx = new AuxTableNameContext(_ctx, getState());
		enterRule(_localctx, 1084, RULE_auxTableName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8352);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,991,_ctx) ) {
			case 1:
				{
				{
				setState(8344);
				locationName();
				setState(8345);
				match(DOT);
				setState(8346);
				schemaName();
				setState(8347);
				match(DOT);
				}
				}
				break;
			case 2:
				{
				{
				setState(8349);
				schemaName();
				setState(8350);
				match(DOT);
				}
				}
				break;
			}
			setState(8354);
			identifier();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HistoryTableNameContext extends ParserRuleContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public HistoryTableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_historyTableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterHistoryTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitHistoryTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitHistoryTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HistoryTableNameContext historyTableName() throws RecognitionException {
		HistoryTableNameContext _localctx = new HistoryTableNameContext(_ctx, getState());
		enterRule(_localctx, 1086, RULE_historyTableName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8356);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CloneTableNameContext extends ParserRuleContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public CloneTableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cloneTableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCloneTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCloneTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCloneTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CloneTableNameContext cloneTableName() throws RecognitionException {
		CloneTableNameContext _localctx = new CloneTableNameContext(_ctx, getState());
		enterRule(_localctx, 1088, RULE_cloneTableName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8358);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArchiveTableNameContext extends ParserRuleContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public ArchiveTableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_archiveTableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterArchiveTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitArchiveTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitArchiveTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArchiveTableNameContext archiveTableName() throws RecognitionException {
		ArchiveTableNameContext _localctx = new ArchiveTableNameContext(_ctx, getState());
		enterRule(_localctx, 1090, RULE_archiveTableName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8360);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ViewNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public CorrelationNameContext correlationName() {
			return getRuleContext(CorrelationNameContext.class,0);
		}
		public LocationNameContext locationName() {
			return getRuleContext(LocationNameContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(DB2zSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(DB2zSQLParser.DOT, i);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public ViewNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterViewName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitViewName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitViewName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ViewNameContext viewName() throws RecognitionException {
		ViewNameContext _localctx = new ViewNameContext(_ctx, getState());
		enterRule(_localctx, 1092, RULE_viewName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8370);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,992,_ctx) ) {
			case 1:
				{
				{
				setState(8362);
				locationName();
				setState(8363);
				match(DOT);
				setState(8364);
				schemaName();
				setState(8365);
				match(DOT);
				}
				}
				break;
			case 2:
				{
				{
				setState(8367);
				schemaName();
				setState(8368);
				match(DOT);
				}
				}
				break;
			}
			setState(8372);
			identifier();
			setState(8374);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,993,_ctx) ) {
			case 1:
				{
				setState(8373);
				correlationName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProgramNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ProgramNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_programName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterProgramName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitProgramName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitProgramName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProgramNameContext programName() throws RecognitionException {
		ProgramNameContext _localctx = new ProgramNameContext(_ctx, getState());
		enterRule(_localctx, 1094, RULE_programName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8376);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PackageNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public PackageNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_packageName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPackageName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPackageName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPackageName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PackageNameContext packageName() throws RecognitionException {
		PackageNameContext _localctx = new PackageNameContext(_ctx, getState());
		enterRule(_localctx, 1096, RULE_packageName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8378);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PlanNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public PlanNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_planName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPlanName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPlanName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPlanName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PlanNameContext planName() throws RecognitionException {
		PlanNameContext _localctx = new PlanNameContext(_ctx, getState());
		enterRule(_localctx, 1098, RULE_planName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8380);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypeNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public TypeNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTypeName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTypeName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTypeName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypeNameContext typeName() throws RecognitionException {
		TypeNameContext _localctx = new TypeNameContext(_ctx, getState());
		enterRule(_localctx, 1100, RULE_typeName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8385);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,994,_ctx) ) {
			case 1:
				{
				setState(8382);
				schemaName();
				setState(8383);
				match(DOT);
				}
				break;
			}
			setState(8387);
			identifier();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public VariableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterVariableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitVariableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitVariableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableNameContext variableName() throws RecognitionException {
		VariableNameContext _localctx = new VariableNameContext(_ctx, getState());
		enterRule(_localctx, 1102, RULE_variableName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8392);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,995,_ctx) ) {
			case 1:
				{
				setState(8389);
				schemaName();
				setState(8390);
				match(DOT);
				}
				break;
			}
			setState(8394);
			identifier();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArrayTypeNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public ArrayTypeNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arrayTypeName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterArrayTypeName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitArrayTypeName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitArrayTypeName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArrayTypeNameContext arrayTypeName() throws RecognitionException {
		ArrayTypeNameContext _localctx = new ArrayTypeNameContext(_ctx, getState());
		enterRule(_localctx, 1104, RULE_arrayTypeName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8399);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,996,_ctx) ) {
			case 1:
				{
				setState(8396);
				schemaName();
				setState(8397);
				match(DOT);
				}
				break;
			}
			setState(8401);
			identifier();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JarNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public JarNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jarName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterJarName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitJarName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitJarName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JarNameContext jarName() throws RecognitionException {
		JarNameContext _localctx = new JarNameContext(_ctx, getState());
		enterRule(_localctx, 1106, RULE_jarName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8406);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,997,_ctx) ) {
			case 1:
				{
				setState(8403);
				schemaName();
				setState(8404);
				match(DOT);
				}
				break;
			}
			setState(8408);
			identifier();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AliasNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public AliasNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aliasName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAliasName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAliasName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAliasName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AliasNameContext aliasName() throws RecognitionException {
		AliasNameContext _localctx = new AliasNameContext(_ctx, getState());
		enterRule(_localctx, 1108, RULE_aliasName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8410);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ConstraintNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterConstraintName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitConstraintName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitConstraintName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintNameContext constraintName() throws RecognitionException {
		ConstraintNameContext _localctx = new ConstraintNameContext(_ctx, getState());
		enterRule(_localctx, 1110, RULE_constraintName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8412);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoutineVersionIDContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> NUMERICLITERAL() { return getTokens(DB2zSQLParser.NUMERICLITERAL); }
		public TerminalNode NUMERICLITERAL(int i) {
			return getToken(DB2zSQLParser.NUMERICLITERAL, i);
		}
		public List<TerminalNode> INTEGERLITERAL() { return getTokens(DB2zSQLParser.INTEGERLITERAL); }
		public TerminalNode INTEGERLITERAL(int i) {
			return getToken(DB2zSQLParser.INTEGERLITERAL, i);
		}
		public List<TerminalNode> DOT() { return getTokens(DB2zSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(DB2zSQLParser.DOT, i);
		}
		public RoutineVersionIDContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routineVersionID; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRoutineVersionID(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRoutineVersionID(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRoutineVersionID(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoutineVersionIDContext routineVersionID() throws RecognitionException {
		RoutineVersionIDContext _localctx = new RoutineVersionIDContext(_ctx, getState());
		enterRule(_localctx, 1112, RULE_routineVersionID);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8417);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INSTEAD:
			case NEW:
			case NEW_TABLE:
			case OLD_TABLE:
			case REFERENCING:
			case BASED:
			case UPON:
			case ADD:
			case AFTER:
			case ALL:
			case ALLOCATE:
			case ALLOW:
			case ALTER:
			case ALTERAND:
			case ANY:
			case ARRAY:
			case ARRAY_EXISTS:
			case AS:
			case ASENSITIVE:
			case ASSOCIATE:
			case ASUTIME:
			case AT:
			case AUDIT:
			case AUX:
			case AUXILIARY:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BUFFERPOOL:
			case BUFFERPOOLS:
			case BY:
			case CALL:
			case CAPTURE:
			case CASCADED:
			case CASE:
			case CAST:
			case CCSID:
			case CHAR:
			case CHARACTER:
			case CHECK:
			case CLONE:
			case CLOSE:
			case CLUSTER:
			case COLLECTION:
			case COLLID:
			case COLUMN:
			case COMMENT:
			case COMMIT:
			case CONCAT:
			case CONDITION:
			case CONNECT:
			case CONNECTION:
			case CONSTRAINT:
			case CONTAINS:
			case CONTENT:
			case CONTINUE:
			case CREATE:
			case CUBE:
			case CURRENT:
			case CURRENT_LC_CTYPE:
			case CURRVAL:
			case CURSOR:
			case DATA:
			case DATABASE:
			case DAY:
			case DAYS:
			case DBINFO:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DISABLE:
			case DISALLOW:
			case DISTINCT:
			case DO:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSSIZE:
			case DYNAMIC:
			case EDITPROC:
			case ELSE:
			case ELSEIF:
			case ENCODING:
			case ENCRYPTION:
			case END:
			case END_EXEC:
			case ENDING:
			case ERASE:
			case ESCAPE:
			case EXCEPT:
			case EXCEPTION:
			case EXEC_SQL:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case FENCED:
			case FETCH:
			case FIELDPROC:
			case FINAL:
			case FIRST:
			case FOR:
			case FREE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANT:
			case GROUP:
			case HANDLER:
			case HAVING:
			case HOLD:
			case HOUR:
			case HOURS:
			case IF:
			case IMMEDIATE:
			case IN:
			case INCLUSIVE:
			case INDEX:
			case INDEXBP:
			case INHERIT:
			case INNER:
			case INOUT:
			case INSENSITIVE:
			case INSERT:
			case INTERSECT:
			case INTO:
			case IS:
			case ISOBID:
			case ITERATE:
			case JAR:
			case JOIN:
			case KEEP:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LAST:
			case LC_CTYPE:
			case LEAVE:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOCALE:
			case LOCATOR:
			case LOCATORS:
			case LOCK:
			case LOCKMAX:
			case LOCKSIZE:
			case LONG:
			case LOOP:
			case MAINTAINED:
			case MATERIALIZED:
			case MICROSECOND:
			case MICROSECONDS:
			case MODIFIES:
			case MONTH:
			case MONTHS:
			case NEXT:
			case NEXTVAL:
			case NO:
			case NONE:
			case NOT:
			case NULL:
			case NULLS:
			case NUMPARTS:
			case OBID:
			case OF:
			case OFFSET:
			case OLD:
			case ON:
			case OPEN:
			case OPTIMIZATION:
			case OPTIMIZE:
			case OR:
			case ORDER:
			case ORGANIZATION:
			case OUT:
			case OUTER:
			case PACKAGE:
			case PADDED:
			case PARAMETER:
			case PART:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONING:
			case PATH:
			case PERIOD:
			case PIECESIZE:
			case PLAN:
			case PRECISION:
			case PREPARE:
			case PREVVAL:
			case PRIOR:
			case PRIQTY:
			case PRIVILEGES:
			case PROCEDURE:
			case PROGRAM:
			case PSID:
			case PUBLIC:
			case QUERY:
			case QUERYNO:
			case READS:
			case REFERENCES:
			case REFRESH:
			case RELEASE:
			case RENAME:
			case REPEAT:
			case RESIGNAL:
			case RESTRICT:
			case RESULT:
			case RESULT_SET_LOCATOR:
			case RETURN:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUND_CEILING:
			case ROUND_DOWN:
			case ROUND_FLOOR:
			case ROUND_HALF_DOWN:
			case ROUND_HALF_EVEN:
			case ROUND_HALF_UP:
			case ROUND_UP:
			case ROW:
			case ROWSET:
			case RUN:
			case SAVEPOINT:
			case SCHEMA:
			case SCRATCHPAD:
			case SECOND:
			case SECONDS:
			case SECQTY:
			case SECURITY:
			case SELECT:
			case SENSITIVE:
			case SEQUENCE:
			case SET:
			case SIGNAL:
			case SIMPLE:
			case SOME:
			case SOURCE:
			case SPECIFIC:
			case STANDARD:
			case STATEMENT:
			case STATIC:
			case STAY:
			case STOGROUP:
			case STORES:
			case STYLE:
			case SUMMARY:
			case SYNONYM:
			case SYSDATE:
			case SYSTEM:
			case SYSTIMESTAMP:
			case TABLE:
			case TABLESPACE:
			case THEN:
			case TO:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNDO:
			case UNION:
			case UNIQUE:
			case UNTIL:
			case UPDATE:
			case USING:
			case VALIDPROC:
			case VALUE:
			case VALUES:
			case VARIABLE:
			case VARIANT:
			case VCAT:
			case VERSIONING:
			case VIEW:
			case VOLATILE:
			case VOLUMES:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WLM:
			case XMLCAST:
			case XMLEXISTS:
			case XMLNAMESPACES:
			case YEAR:
			case YEARS:
			case ZONE:
			case AND:
			case ARRAY_AGG:
			case ASC:
			case AVG:
			case BIT:
			case CHANGE:
			case CODEUNITS16:
			case CODEUNITS32:
			case CORR:
			case CORRELATION:
			case COUNT:
			case COUNT_BIG:
			case COVAR:
			case COVARIANCE:
			case COVARIANCE_SAMP:
			case COVAR_POP:
			case COVAR_SAMP:
			case CS:
			case CUME_DIST:
			case DENSE_RANK:
			case DESC:
			case EBCDIC:
			case EXCLUSIVE:
			case FIRST_VALUE:
			case FOLLOWING:
			case GROUPING:
			case IGNORE:
			case INDICATOR:
			case INPUT:
			case ISNULL:
			case LAG:
			case LARGE:
			case LAST_VALUE:
			case LEAD:
			case LISTAGG:
			case LOCKED:
			case LOCKS:
			case MEDIAN:
			case MINUTES:
			case MIXED:
			case NOTNULL:
			case NTH_VALUE:
			case NTILE:
			case NUMERIC:
			case OBJECT:
			case OCTETS:
			case ONLY:
			case OVER:
			case PASSING:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PERCENT_RANK:
			case PRECEDING:
			case PREVIOUS:
			case RANGE:
			case RANK:
			case RATIO_TO_REPORT:
			case READ:
			case REF:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_ICPT:
			case REGR_INTERCEPT:
			case REGR_R2:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case RESPECT:
			case ROW_NUMBER:
			case ROWS:
			case RR:
			case RS:
			case SBCS:
			case SELECTIVITY:
			case SETS:
			case SHARE:
			case SKIP_:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case TOKEN:
			case UNBOUNDED:
			case UNPACK:
			case UR:
			case USE:
			case VAR:
			case VARIANCE:
			case VARIANCE_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARYING:
			case WITHOUT:
			case XML:
			case XMLAGG:
			case COLUMNS:
			case SQLID:
			case ORDINALITY:
			case SYSTEM_TIME:
			case BUSINESS_TIME:
			case MULTIPLIER:
			case UNNEST:
			case CROSS:
			case CALLER:
			case CLIENT:
			case POSITIONING:
			case SCROLL:
			case ACTION:
			case ASSEMBLE:
			case C_:
			case CALLED:
			case COBOL:
			case DB2:
			case DEFINER:
			case DISPATCH:
			case ENVIRONMENT:
			case FAILURE:
			case FAILURES:
			case JAVA:
			case MAIN:
			case NAME:
			case OPTIONS:
			case PARALLEL:
			case PLI:
			case REGISTERS:
			case RESIDENT:
			case SECURED:
			case SPECIAL:
			case SQL:
			case STOP:
			case SUB:
			case YES:
			case APPLICATION:
			case CHANGED:
			case COMPATIBILITY:
			case COMPRESS:
			case COPY:
			case FREEPAGE:
			case GBPCACHE:
			case INCLUDE:
			case MAXVALUE:
			case MINVALUE:
			case PCTFREE:
			case REGENERATE:
			case MASK:
			case ENABLE:
			case PERMISSION:
			case ATOMIC:
			case SQLEXCEPTION:
			case MERGE:
			case MATCHED:
			case SQLSTATE:
			case MESSAGE_TEXT:
			case OVERRIDING:
			case PORTION:
			case DB2SQL:
			case DEBUG:
			case GENERAL:
			case MODE_:
			case REXX:
			case CACHE:
			case CYCLE:
			case INCREMENT:
			case RESTART:
			case DATACLAS:
			case MGMTCLAS:
			case REMOVE:
			case STORCLAS:
			case ACCESS:
			case ACTIVATE:
			case ALWAYS:
			case APPEND:
			case ARCHIVE:
			case BUSINESS:
			case CASCADE:
			case CHANGES:
			case CONTROL:
			case DEACTIVATE:
			case DEFERRED:
			case EACH:
			case ENFORCED:
			case EXTRA:
			case FOREIGN:
			case HIDDEN_:
			case HISTORY:
			case ID:
			case IDENTITY:
			case IMPLICITLY:
			case INITIALLY:
			case INLINE:
			case OPERATION:
			case ORGANIZE:
			case OVERLAPS:
			case PACKAGE_NAME:
			case PACKAGE_SCHEMA:
			case PACKAGE_VERSION:
			case PRIMARY:
			case RESET:
			case ROTATE:
			case START:
			case SYSIBM:
			case TRANSACTION:
			case XMLSCHEMA:
			case ELEMENT:
			case URL:
			case NAMESPACE:
			case LOCATION:
			case SYSXSR:
			case ALGORITHM:
			case FIXEDLENGTH:
			case HUFFMAN:
			case LOB:
			case LOG:
			case LOGGED:
			case MAXPARTITIONS:
			case MAXROWS:
			case MEMBER:
			case MOVE:
			case PAGE:
			case PAGENUM:
			case PENDING:
			case RELATIVE:
			case SEGSIZE:
			case TRACKMOD:
			case ADDRESS:
			case ATTRIBUTES:
			case AUTHENTICATION:
			case AUTHID:
			case CONTEXT:
			case JOBNAME:
			case OWNER:
			case PROFILE:
			case QUALIFIER:
			case SERVAUTH:
			case TRUSTED:
			case SECTION:
			case ACTIVE:
			case VERSION:
			case ALIAS:
			case WORK:
			case WORKFILE:
			case SYSDEFLT:
			case NULTERM:
			case STRUCTURE:
			case GENERIC:
			case TEMPORARY:
			case DEFER:
			case DEFINE:
			case EXCLUDE:
			case GENERATE:
			case KEYS:
			case XMLPATTERN:
			case SIZE:
			case EVERY:
			case ABSOLUTE:
			case ACCELERATOR:
			case EXCLUDING:
			case INCLUDING:
			case DEFAULTS:
			case MODIFIERS:
			case OPTION:
			case PRESERVE:
			case BOTH:
			case DESCRIBE:
			case LABELS:
			case NAMES:
			case OUTPUT:
			case EXCHANGE:
			case STABILIZED:
			case STMTCACHE:
			case STMTID:
			case STMTTOKEN:
			case STARTING:
			case CATALOG_NAME:
			case CONDITION_NUMBER:
			case CURSOR_NAME:
			case DB2_AUTHENTICATION_TYPE:
			case DB2_AUTHORIZATION_ID:
			case DB2_CONNECTION_STATE:
			case DB2_CONNECTION_STATUS:
			case DB2_ENCRYPTION_TYPE:
			case DB2_ERROR_CODE1:
			case DB2_ERROR_CODE2:
			case DB2_ERROR_CODE3:
			case DB2_ERROR_CODE4:
			case DB2_GET_DIAGNOSTICS_DIAGNOSTICS:
			case DB2_INTERNAL_ERROR_POINTER:
			case DB2_LAST_ROW:
			case DB2_LINE_NUMBER:
			case DB2_MESSAGE_ID:
			case DB2_MODULE_DETECTING_ERROR:
			case DB2_NUMBER_PARAMETER_MARKERS:
			case DB2_NUMBER_RESULT_SETS:
			case DB2_NUMBER_ROWS:
			case DB2_ORDINAL_TOKEN_:
			case DB2_PRODUCT_ID:
			case DB2_REASON_CODE:
			case DB2_RETURNED_SQLCODE:
			case DB2_RETURN_STATUS:
			case DB2_ROW_NUMBER:
			case DB2_SERVER_CLASS_NAME:
			case DB2_SQL_ATTR_CURSOR_HOLD:
			case DB2_SQL_ATTR_CURSOR_ROWSET:
			case DB2_SQL_ATTR_CURSOR_SCROLLABLE:
			case DB2_SQL_ATTR_CURSOR_SENSITIVITY:
			case DB2_SQL_ATTR_CURSOR_TYPE:
			case DB2_SQLERRD1:
			case DB2_SQLERRD2:
			case DB2_SQLERRD3:
			case DB2_SQLERRD4:
			case DB2_SQLERRD5:
			case DB2_SQLERRD6:
			case DB2_SQLERRD_SET:
			case DB2_SQL_NESTING_LEVEL:
			case DB2_TOKEN_COUNT:
			case DIAGNOSTICS:
			case MORE_:
			case NUMBER:
			case RETURNED_SQLSTATE:
			case ROW_COUNT:
			case SERVER_NAME:
			case STACKED:
			case CREATETAB:
			case CREATETS:
			case DBADM:
			case DBCTRL:
			case DBMAINT:
			case DISPLAYDB:
			case IMAGCOPY:
			case LOAD:
			case PACKADM:
			case RECOVERDB:
			case REORG:
			case REPAIR:
			case STARTDB:
			case STATS:
			case STOPDB:
			case BIND:
			case ALTERIN:
			case CREATEIN:
			case DROPIN:
			case USAGE:
			case ACCESSCTRL:
			case BINDADD:
			case BINDAGENT:
			case BSDS:
			case CREATEALIAS:
			case CREATEDBA:
			case CREATEDBC:
			case CREATE_SECURE_OBJECT:
			case CREATESG:
			case CREATETMTAB:
			case DATAACCESS:
			case DEBUGSESSION:
			case DISPLAY:
			case MONITOR1:
			case MONITOR2:
			case RECOVER:
			case SQLADM:
			case STOPALL:
			case STOSPACE:
			case SYSADM:
			case SYSCTRL:
			case SYSOPR:
			case TRACE:
			case UNLOAD:
			case WRITE:
			case ABS:
			case ABSVAL:
			case ACOS:
			case ADD_DAYS:
			case ADD_MONTHS:
			case ARRAY_DELETE:
			case ARRAY_FIRST:
			case ARRAY_LAST:
			case ARRAY_NEXT:
			case ARRAY_PRIOR:
			case ARRAY_TRIM:
			case ASCII:
			case ASCII_CHR:
			case ASCIISTR:
			case ASCII_STR:
			case ASIN:
			case ATAN:
			case ATAN2:
			case ATANH:
			case BIGINT:
			case BINARY:
			case BITAND:
			case BITANDNOT:
			case BITNOT:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BTRIM:
			case CARDINALITY:
			case CCSID_ENCODING:
			case CEIL:
			case CEILING:
			case CHAR9:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case CHR:
			case CLOB:
			case COALESCE:
			case COLLATION_KEY:
			case COMPARE_DECFLOAT:
			case COS:
			case COSH:
			case DATE:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFWEEK_ISO:
			case DAYOFYEAR:
			case DAYS_BETWEEN:
			case DBCLOB:
			case DEC:
			case DECFLOAT:
			case DECFLOAT_FORMAT:
			case DECFLOAT_SORTKEY:
			case DECIMAL:
			case DECODE:
			case DECRYPT_BINARY:
			case DECRYPT_BIT:
			case DECRYPT_CHAR:
			case DECRYPT_DATAKEY_BIGINT:
			case DECRYPT_DATAKEY_BIT:
			case DECRYPT_DATAKEY_CLOB:
			case DECRYPT_DATAKEY_DBCLOB:
			case DECRYPT_DATAKEY_DECIMAL:
			case DECRYPT_DATAKEY_INTEGER:
			case DECRYPT_DATAKEY_VARCHAR:
			case DECRYPT_DATAKEY_VARGRAPHIC:
			case DECRYPT_DB:
			case DEGREES:
			case DIFFERENCE:
			case DIGITS:
			case DOUBLE_PRECISION:
			case DSN_XMLVALIDATE:
			case EBCDIC_CHR:
			case EBCDIC_STR:
			case ENCRYPT_DATAKEY:
			case ENCRYPT_TDES:
			case EXP:
			case EXTRACT:
			case FLOAT:
			case FLOOR:
			case GENERATE_UNIQUE:
			case GENERATE_UNIQUE_BINARY:
			case GETHINT:
			case GETVARIABLE:
			case GRAPHIC:
			case GREATEST:
			case HASH:
			case HASH_CRC32:
			case HASH_MD5:
			case HASH_SHA1:
			case HASH_SHA256:
			case HEX:
			case IDENTITY_VAL_LOCAL:
			case IFNULL:
			case INSTR:
			case INT:
			case INTEGER:
			case JULIAN_DAY:
			case LAST_DAY:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LN:
			case LOCATE:
			case LOCATE_IN_STRING:
			case LOG10:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAX:
			case MAX_CARDINALITY:
			case MIDNIGHT_SECONDS:
			case MIN:
			case MINUTE:
			case MOD:
			case MONTHS_BETWEEN:
			case MQREAD:
			case MQREADCLOB:
			case MQRECEIVE:
			case MQRECEIVECLOB:
			case MQSEND:
			case MULTIPLY_ALT:
			case NEXT_DAY:
			case NEXT_MONTH:
			case NORMALIZE_DECFLOAT:
			case NORMALIZE_STRING:
			case NULLIF:
			case NVL:
			case OVERLAY:
			case PACK:
			case POSITION:
			case POSSTR:
			case POW:
			case POWER:
			case QUANTIZE:
			case QUARTER:
			case RADIANS:
			case RAISE_ERROR:
			case RAND:
			case RANDOM:
			case REAL:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REPLACE:
			case RID:
			case ROUND:
			case ROUND_TIMESTAMP:
			case ROWID:
			case RPAD:
			case RTRIM:
			case SCORE:
			case SIGN:
			case SIN:
			case SINH:
			case SMALLINT:
			case SOAPHTTPC:
			case SOAPHTTPNC:
			case SOAPHTTPNV:
			case SOAPHTTPV:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STRIP:
			case STRLEFT:
			case STRPOS:
			case STRRIGHT:
			case SUBSTR:
			case SUBSTRING:
			case TAN:
			case TANH:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIMESTAMP_FORMAT:
			case TIMESTAMP_ISO:
			case TIMESTAMP_TZ:
			case TO_CHAR:
			case TO_CLOB:
			case TO_DATE:
			case TO_NUMBER:
			case TOTALORDER:
			case TO_TIMESTAMP:
			case TRANSLATE:
			case TRIM:
			case TRIM_ARRAY:
			case TRUNC:
			case TRUNC_TIMESTAMP:
			case UCASE:
			case UNICODE:
			case UNICODE_STR:
			case UNISTR:
			case UPPER:
			case VARBINARY:
			case VARCHAR:
			case VARCHAR9:
			case VARCHAR_BIT_FORMAT:
			case VARCHAR_FORMAT:
			case VARGRAPHIC:
			case VERIFY_GROUP_FOR_USER:
			case VERIFY_ROLE_FOR_USER:
			case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
			case WEEK:
			case WEEK_ISO:
			case WRAP:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLCONCAT:
			case XMLDOCUMENT:
			case XMLELEMENT:
			case XMLFOREST:
			case XMLMODIFY:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLSERIALIZE:
			case XMLTEXT:
			case XMLXSROBJECTID:
			case XSLTRANSFORM:
			case CURRENT_ACCELERATOR:
			case CURRENT_APPLICATION_COMPATIBILITY:
			case CURRENT_APPLICATION_ENCODING_SCHEME:
			case CURRENT_CLIENT_ACCTNG:
			case CURRENT_CLIENT_APPLNAME:
			case CURRENT_CLIENT_CORR_TOKEN:
			case CURRENT_CLIENT_USERID:
			case CURRENT_CLIENT_WRKSTNNAME:
			case CURRENT_DATE:
			case CURRENT_DEBUG_MODE:
			case CURRENT_DECFLOAT_ROUNDING_MODE:
			case CURRENT_DEGREE:
			case CURRENT_EXPLAIN_MODE:
			case CURRENT_GET_ACCEL_ARCHIVE:
			case CURRENT_LOCALE_LC_CTYPE:
			case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
			case CURRENT_MEMBER:
			case CURRENT_OPTIMIZATION_HINT:
			case CURRENT_PACKAGE_PATH:
			case CURRENT_PACKAGESET:
			case CURRENT_PATH:
			case CURRENT_PRECISION:
			case CURRENT_QUERY_ACCELERATION:
			case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
			case CURRENT_REFRESH_AGE:
			case CURRENT_ROUTINE_VERSION:
			case CURRENT_RULES:
			case CURRENT_SCHEMA:
			case CURRENT_SERVER:
			case CURRENT_SQLID:
			case CURRENT_TEMPORAL_BUSINESS_TIME:
			case CURRENT_TEMPORAL_SYSTEM_TIME:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_TIME_ZONE:
			case ENCRYPTION_PASSWORD:
			case SESSION_TIME_ZONE:
			case SESSION_USER:
			case USER:
			case ADMIN_TASK_LIST:
			case ADMIN_TASK_OUTPUT:
			case ADMIN_TASK_STATUS:
			case BLOCKING_THREADS:
			case MQREADALL:
			case MQREADALLCLOB:
			case MQRECEIVEALL:
			case MQRECEIVEALLCLOB:
			case XMLTABLE:
			case SQLIDENTIFIER:
				{
				setState(8414);
				identifier();
				}
				break;
			case NUMERICLITERAL:
				{
				setState(8415);
				match(NUMERICLITERAL);
				}
				break;
			case INTEGERLITERAL:
				{
				setState(8416);
				match(INTEGERLITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(8429);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1001,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8420);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DOT) {
						{
						setState(8419);
						match(DOT);
						}
					}

					setState(8425);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case INSTEAD:
					case NEW:
					case NEW_TABLE:
					case OLD_TABLE:
					case REFERENCING:
					case BASED:
					case UPON:
					case ADD:
					case AFTER:
					case ALL:
					case ALLOCATE:
					case ALLOW:
					case ALTER:
					case ALTERAND:
					case ANY:
					case ARRAY:
					case ARRAY_EXISTS:
					case AS:
					case ASENSITIVE:
					case ASSOCIATE:
					case ASUTIME:
					case AT:
					case AUDIT:
					case AUX:
					case AUXILIARY:
					case BEFORE:
					case BEGIN:
					case BETWEEN:
					case BUFFERPOOL:
					case BUFFERPOOLS:
					case BY:
					case CALL:
					case CAPTURE:
					case CASCADED:
					case CASE:
					case CAST:
					case CCSID:
					case CHAR:
					case CHARACTER:
					case CHECK:
					case CLONE:
					case CLOSE:
					case CLUSTER:
					case COLLECTION:
					case COLLID:
					case COLUMN:
					case COMMENT:
					case COMMIT:
					case CONCAT:
					case CONDITION:
					case CONNECT:
					case CONNECTION:
					case CONSTRAINT:
					case CONTAINS:
					case CONTENT:
					case CONTINUE:
					case CREATE:
					case CUBE:
					case CURRENT:
					case CURRENT_LC_CTYPE:
					case CURRVAL:
					case CURSOR:
					case DATA:
					case DATABASE:
					case DAY:
					case DAYS:
					case DBINFO:
					case DECLARE:
					case DEFAULT:
					case DELETE:
					case DESCRIPTOR:
					case DETERMINISTIC:
					case DISABLE:
					case DISALLOW:
					case DISTINCT:
					case DO:
					case DOCUMENT:
					case DOUBLE:
					case DROP:
					case DSSIZE:
					case DYNAMIC:
					case EDITPROC:
					case ELSE:
					case ELSEIF:
					case ENCODING:
					case ENCRYPTION:
					case END:
					case END_EXEC:
					case ENDING:
					case ERASE:
					case ESCAPE:
					case EXCEPT:
					case EXCEPTION:
					case EXEC_SQL:
					case EXECUTE:
					case EXISTS:
					case EXIT:
					case EXPLAIN:
					case EXTERNAL:
					case FENCED:
					case FETCH:
					case FIELDPROC:
					case FINAL:
					case FIRST:
					case FOR:
					case FREE:
					case FROM:
					case FULL:
					case FUNCTION:
					case GENERATED:
					case GET:
					case GLOBAL:
					case GO:
					case GOTO:
					case GRANT:
					case GROUP:
					case HANDLER:
					case HAVING:
					case HOLD:
					case HOUR:
					case HOURS:
					case IF:
					case IMMEDIATE:
					case IN:
					case INCLUSIVE:
					case INDEX:
					case INDEXBP:
					case INHERIT:
					case INNER:
					case INOUT:
					case INSENSITIVE:
					case INSERT:
					case INTERSECT:
					case INTO:
					case IS:
					case ISOBID:
					case ITERATE:
					case JAR:
					case JOIN:
					case KEEP:
					case KEY:
					case LABEL:
					case LANGUAGE:
					case LAST:
					case LC_CTYPE:
					case LEAVE:
					case LEFT:
					case LIKE:
					case LIMIT:
					case LOCAL:
					case LOCALE:
					case LOCATOR:
					case LOCATORS:
					case LOCK:
					case LOCKMAX:
					case LOCKSIZE:
					case LONG:
					case LOOP:
					case MAINTAINED:
					case MATERIALIZED:
					case MICROSECOND:
					case MICROSECONDS:
					case MODIFIES:
					case MONTH:
					case MONTHS:
					case NEXT:
					case NEXTVAL:
					case NO:
					case NONE:
					case NOT:
					case NULL:
					case NULLS:
					case NUMPARTS:
					case OBID:
					case OF:
					case OFFSET:
					case OLD:
					case ON:
					case OPEN:
					case OPTIMIZATION:
					case OPTIMIZE:
					case OR:
					case ORDER:
					case ORGANIZATION:
					case OUT:
					case OUTER:
					case PACKAGE:
					case PADDED:
					case PARAMETER:
					case PART:
					case PARTITION:
					case PARTITIONED:
					case PARTITIONING:
					case PATH:
					case PERIOD:
					case PIECESIZE:
					case PLAN:
					case PRECISION:
					case PREPARE:
					case PREVVAL:
					case PRIOR:
					case PRIQTY:
					case PRIVILEGES:
					case PROCEDURE:
					case PROGRAM:
					case PSID:
					case PUBLIC:
					case QUERY:
					case QUERYNO:
					case READS:
					case REFERENCES:
					case REFRESH:
					case RELEASE:
					case RENAME:
					case REPEAT:
					case RESIGNAL:
					case RESTRICT:
					case RESULT:
					case RESULT_SET_LOCATOR:
					case RETURN:
					case RETURNS:
					case REVOKE:
					case RIGHT:
					case ROLE:
					case ROLLBACK:
					case ROLLUP:
					case ROUND_CEILING:
					case ROUND_DOWN:
					case ROUND_FLOOR:
					case ROUND_HALF_DOWN:
					case ROUND_HALF_EVEN:
					case ROUND_HALF_UP:
					case ROUND_UP:
					case ROW:
					case ROWSET:
					case RUN:
					case SAVEPOINT:
					case SCHEMA:
					case SCRATCHPAD:
					case SECOND:
					case SECONDS:
					case SECQTY:
					case SECURITY:
					case SELECT:
					case SENSITIVE:
					case SEQUENCE:
					case SET:
					case SIGNAL:
					case SIMPLE:
					case SOME:
					case SOURCE:
					case SPECIFIC:
					case STANDARD:
					case STATEMENT:
					case STATIC:
					case STAY:
					case STOGROUP:
					case STORES:
					case STYLE:
					case SUMMARY:
					case SYNONYM:
					case SYSDATE:
					case SYSTEM:
					case SYSTIMESTAMP:
					case TABLE:
					case TABLESPACE:
					case THEN:
					case TO:
					case TRIGGER:
					case TRUNCATE:
					case TYPE:
					case UNDO:
					case UNION:
					case UNIQUE:
					case UNTIL:
					case UPDATE:
					case USING:
					case VALIDPROC:
					case VALUE:
					case VALUES:
					case VARIABLE:
					case VARIANT:
					case VCAT:
					case VERSIONING:
					case VIEW:
					case VOLATILE:
					case VOLUMES:
					case WHEN:
					case WHENEVER:
					case WHERE:
					case WHILE:
					case WITH:
					case WLM:
					case XMLCAST:
					case XMLEXISTS:
					case XMLNAMESPACES:
					case YEAR:
					case YEARS:
					case ZONE:
					case AND:
					case ARRAY_AGG:
					case ASC:
					case AVG:
					case BIT:
					case CHANGE:
					case CODEUNITS16:
					case CODEUNITS32:
					case CORR:
					case CORRELATION:
					case COUNT:
					case COUNT_BIG:
					case COVAR:
					case COVARIANCE:
					case COVARIANCE_SAMP:
					case COVAR_POP:
					case COVAR_SAMP:
					case CS:
					case CUME_DIST:
					case DENSE_RANK:
					case DESC:
					case EBCDIC:
					case EXCLUSIVE:
					case FIRST_VALUE:
					case FOLLOWING:
					case GROUPING:
					case IGNORE:
					case INDICATOR:
					case INPUT:
					case ISNULL:
					case LAG:
					case LARGE:
					case LAST_VALUE:
					case LEAD:
					case LISTAGG:
					case LOCKED:
					case LOCKS:
					case MEDIAN:
					case MINUTES:
					case MIXED:
					case NOTNULL:
					case NTH_VALUE:
					case NTILE:
					case NUMERIC:
					case OBJECT:
					case OCTETS:
					case ONLY:
					case OVER:
					case PASSING:
					case PERCENTILE_CONT:
					case PERCENTILE_DISC:
					case PERCENT_RANK:
					case PRECEDING:
					case PREVIOUS:
					case RANGE:
					case RANK:
					case RATIO_TO_REPORT:
					case READ:
					case REF:
					case REGR_AVGX:
					case REGR_AVGY:
					case REGR_COUNT:
					case REGR_ICPT:
					case REGR_INTERCEPT:
					case REGR_R2:
					case REGR_SLOPE:
					case REGR_SXX:
					case REGR_SXY:
					case REGR_SYY:
					case RESPECT:
					case ROW_NUMBER:
					case ROWS:
					case RR:
					case RS:
					case SBCS:
					case SELECTIVITY:
					case SETS:
					case SHARE:
					case SKIP_:
					case STDDEV:
					case STDDEV_POP:
					case STDDEV_SAMP:
					case SUM:
					case TOKEN:
					case UNBOUNDED:
					case UNPACK:
					case UR:
					case USE:
					case VAR:
					case VARIANCE:
					case VARIANCE_SAMP:
					case VAR_POP:
					case VAR_SAMP:
					case VARYING:
					case WITHOUT:
					case XML:
					case XMLAGG:
					case COLUMNS:
					case SQLID:
					case ORDINALITY:
					case SYSTEM_TIME:
					case BUSINESS_TIME:
					case MULTIPLIER:
					case UNNEST:
					case CROSS:
					case CALLER:
					case CLIENT:
					case POSITIONING:
					case SCROLL:
					case ACTION:
					case ASSEMBLE:
					case C_:
					case CALLED:
					case COBOL:
					case DB2:
					case DEFINER:
					case DISPATCH:
					case ENVIRONMENT:
					case FAILURE:
					case FAILURES:
					case JAVA:
					case MAIN:
					case NAME:
					case OPTIONS:
					case PARALLEL:
					case PLI:
					case REGISTERS:
					case RESIDENT:
					case SECURED:
					case SPECIAL:
					case SQL:
					case STOP:
					case SUB:
					case YES:
					case APPLICATION:
					case CHANGED:
					case COMPATIBILITY:
					case COMPRESS:
					case COPY:
					case FREEPAGE:
					case GBPCACHE:
					case INCLUDE:
					case MAXVALUE:
					case MINVALUE:
					case PCTFREE:
					case REGENERATE:
					case MASK:
					case ENABLE:
					case PERMISSION:
					case ATOMIC:
					case SQLEXCEPTION:
					case MERGE:
					case MATCHED:
					case SQLSTATE:
					case MESSAGE_TEXT:
					case OVERRIDING:
					case PORTION:
					case DB2SQL:
					case DEBUG:
					case GENERAL:
					case MODE_:
					case REXX:
					case CACHE:
					case CYCLE:
					case INCREMENT:
					case RESTART:
					case DATACLAS:
					case MGMTCLAS:
					case REMOVE:
					case STORCLAS:
					case ACCESS:
					case ACTIVATE:
					case ALWAYS:
					case APPEND:
					case ARCHIVE:
					case BUSINESS:
					case CASCADE:
					case CHANGES:
					case CONTROL:
					case DEACTIVATE:
					case DEFERRED:
					case EACH:
					case ENFORCED:
					case EXTRA:
					case FOREIGN:
					case HIDDEN_:
					case HISTORY:
					case ID:
					case IDENTITY:
					case IMPLICITLY:
					case INITIALLY:
					case INLINE:
					case OPERATION:
					case ORGANIZE:
					case OVERLAPS:
					case PACKAGE_NAME:
					case PACKAGE_SCHEMA:
					case PACKAGE_VERSION:
					case PRIMARY:
					case RESET:
					case ROTATE:
					case START:
					case SYSIBM:
					case TRANSACTION:
					case XMLSCHEMA:
					case ELEMENT:
					case URL:
					case NAMESPACE:
					case LOCATION:
					case SYSXSR:
					case ALGORITHM:
					case FIXEDLENGTH:
					case HUFFMAN:
					case LOB:
					case LOG:
					case LOGGED:
					case MAXPARTITIONS:
					case MAXROWS:
					case MEMBER:
					case MOVE:
					case PAGE:
					case PAGENUM:
					case PENDING:
					case RELATIVE:
					case SEGSIZE:
					case TRACKMOD:
					case ADDRESS:
					case ATTRIBUTES:
					case AUTHENTICATION:
					case AUTHID:
					case CONTEXT:
					case JOBNAME:
					case OWNER:
					case PROFILE:
					case QUALIFIER:
					case SERVAUTH:
					case TRUSTED:
					case SECTION:
					case ACTIVE:
					case VERSION:
					case ALIAS:
					case WORK:
					case WORKFILE:
					case SYSDEFLT:
					case NULTERM:
					case STRUCTURE:
					case GENERIC:
					case TEMPORARY:
					case DEFER:
					case DEFINE:
					case EXCLUDE:
					case GENERATE:
					case KEYS:
					case XMLPATTERN:
					case SIZE:
					case EVERY:
					case ABSOLUTE:
					case ACCELERATOR:
					case EXCLUDING:
					case INCLUDING:
					case DEFAULTS:
					case MODIFIERS:
					case OPTION:
					case PRESERVE:
					case BOTH:
					case DESCRIBE:
					case LABELS:
					case NAMES:
					case OUTPUT:
					case EXCHANGE:
					case STABILIZED:
					case STMTCACHE:
					case STMTID:
					case STMTTOKEN:
					case STARTING:
					case CATALOG_NAME:
					case CONDITION_NUMBER:
					case CURSOR_NAME:
					case DB2_AUTHENTICATION_TYPE:
					case DB2_AUTHORIZATION_ID:
					case DB2_CONNECTION_STATE:
					case DB2_CONNECTION_STATUS:
					case DB2_ENCRYPTION_TYPE:
					case DB2_ERROR_CODE1:
					case DB2_ERROR_CODE2:
					case DB2_ERROR_CODE3:
					case DB2_ERROR_CODE4:
					case DB2_GET_DIAGNOSTICS_DIAGNOSTICS:
					case DB2_INTERNAL_ERROR_POINTER:
					case DB2_LAST_ROW:
					case DB2_LINE_NUMBER:
					case DB2_MESSAGE_ID:
					case DB2_MODULE_DETECTING_ERROR:
					case DB2_NUMBER_PARAMETER_MARKERS:
					case DB2_NUMBER_RESULT_SETS:
					case DB2_NUMBER_ROWS:
					case DB2_ORDINAL_TOKEN_:
					case DB2_PRODUCT_ID:
					case DB2_REASON_CODE:
					case DB2_RETURNED_SQLCODE:
					case DB2_RETURN_STATUS:
					case DB2_ROW_NUMBER:
					case DB2_SERVER_CLASS_NAME:
					case DB2_SQL_ATTR_CURSOR_HOLD:
					case DB2_SQL_ATTR_CURSOR_ROWSET:
					case DB2_SQL_ATTR_CURSOR_SCROLLABLE:
					case DB2_SQL_ATTR_CURSOR_SENSITIVITY:
					case DB2_SQL_ATTR_CURSOR_TYPE:
					case DB2_SQLERRD1:
					case DB2_SQLERRD2:
					case DB2_SQLERRD3:
					case DB2_SQLERRD4:
					case DB2_SQLERRD5:
					case DB2_SQLERRD6:
					case DB2_SQLERRD_SET:
					case DB2_SQL_NESTING_LEVEL:
					case DB2_TOKEN_COUNT:
					case DIAGNOSTICS:
					case MORE_:
					case NUMBER:
					case RETURNED_SQLSTATE:
					case ROW_COUNT:
					case SERVER_NAME:
					case STACKED:
					case CREATETAB:
					case CREATETS:
					case DBADM:
					case DBCTRL:
					case DBMAINT:
					case DISPLAYDB:
					case IMAGCOPY:
					case LOAD:
					case PACKADM:
					case RECOVERDB:
					case REORG:
					case REPAIR:
					case STARTDB:
					case STATS:
					case STOPDB:
					case BIND:
					case ALTERIN:
					case CREATEIN:
					case DROPIN:
					case USAGE:
					case ACCESSCTRL:
					case BINDADD:
					case BINDAGENT:
					case BSDS:
					case CREATEALIAS:
					case CREATEDBA:
					case CREATEDBC:
					case CREATE_SECURE_OBJECT:
					case CREATESG:
					case CREATETMTAB:
					case DATAACCESS:
					case DEBUGSESSION:
					case DISPLAY:
					case MONITOR1:
					case MONITOR2:
					case RECOVER:
					case SQLADM:
					case STOPALL:
					case STOSPACE:
					case SYSADM:
					case SYSCTRL:
					case SYSOPR:
					case TRACE:
					case UNLOAD:
					case WRITE:
					case ABS:
					case ABSVAL:
					case ACOS:
					case ADD_DAYS:
					case ADD_MONTHS:
					case ARRAY_DELETE:
					case ARRAY_FIRST:
					case ARRAY_LAST:
					case ARRAY_NEXT:
					case ARRAY_PRIOR:
					case ARRAY_TRIM:
					case ASCII:
					case ASCII_CHR:
					case ASCIISTR:
					case ASCII_STR:
					case ASIN:
					case ATAN:
					case ATAN2:
					case ATANH:
					case BIGINT:
					case BINARY:
					case BITAND:
					case BITANDNOT:
					case BITNOT:
					case BITOR:
					case BITXOR:
					case BLOB:
					case BTRIM:
					case CARDINALITY:
					case CCSID_ENCODING:
					case CEIL:
					case CEILING:
					case CHAR9:
					case CHARACTER_LENGTH:
					case CHAR_LENGTH:
					case CHR:
					case CLOB:
					case COALESCE:
					case COLLATION_KEY:
					case COMPARE_DECFLOAT:
					case COS:
					case COSH:
					case DATE:
					case DAYOFMONTH:
					case DAYOFWEEK:
					case DAYOFWEEK_ISO:
					case DAYOFYEAR:
					case DAYS_BETWEEN:
					case DBCLOB:
					case DEC:
					case DECFLOAT:
					case DECFLOAT_FORMAT:
					case DECFLOAT_SORTKEY:
					case DECIMAL:
					case DECODE:
					case DECRYPT_BINARY:
					case DECRYPT_BIT:
					case DECRYPT_CHAR:
					case DECRYPT_DATAKEY_BIGINT:
					case DECRYPT_DATAKEY_BIT:
					case DECRYPT_DATAKEY_CLOB:
					case DECRYPT_DATAKEY_DBCLOB:
					case DECRYPT_DATAKEY_DECIMAL:
					case DECRYPT_DATAKEY_INTEGER:
					case DECRYPT_DATAKEY_VARCHAR:
					case DECRYPT_DATAKEY_VARGRAPHIC:
					case DECRYPT_DB:
					case DEGREES:
					case DIFFERENCE:
					case DIGITS:
					case DOUBLE_PRECISION:
					case DSN_XMLVALIDATE:
					case EBCDIC_CHR:
					case EBCDIC_STR:
					case ENCRYPT_DATAKEY:
					case ENCRYPT_TDES:
					case EXP:
					case EXTRACT:
					case FLOAT:
					case FLOOR:
					case GENERATE_UNIQUE:
					case GENERATE_UNIQUE_BINARY:
					case GETHINT:
					case GETVARIABLE:
					case GRAPHIC:
					case GREATEST:
					case HASH:
					case HASH_CRC32:
					case HASH_MD5:
					case HASH_SHA1:
					case HASH_SHA256:
					case HEX:
					case IDENTITY_VAL_LOCAL:
					case IFNULL:
					case INSTR:
					case INT:
					case INTEGER:
					case JULIAN_DAY:
					case LAST_DAY:
					case LCASE:
					case LEAST:
					case LENGTH:
					case LN:
					case LOCATE:
					case LOCATE_IN_STRING:
					case LOG10:
					case LOWER:
					case LPAD:
					case LTRIM:
					case MAX:
					case MAX_CARDINALITY:
					case MIDNIGHT_SECONDS:
					case MIN:
					case MINUTE:
					case MOD:
					case MONTHS_BETWEEN:
					case MQREAD:
					case MQREADCLOB:
					case MQRECEIVE:
					case MQRECEIVECLOB:
					case MQSEND:
					case MULTIPLY_ALT:
					case NEXT_DAY:
					case NEXT_MONTH:
					case NORMALIZE_DECFLOAT:
					case NORMALIZE_STRING:
					case NULLIF:
					case NVL:
					case OVERLAY:
					case PACK:
					case POSITION:
					case POSSTR:
					case POW:
					case POWER:
					case QUANTIZE:
					case QUARTER:
					case RADIANS:
					case RAISE_ERROR:
					case RAND:
					case RANDOM:
					case REAL:
					case REGEXP_COUNT:
					case REGEXP_INSTR:
					case REGEXP_LIKE:
					case REGEXP_REPLACE:
					case REGEXP_SUBSTR:
					case REPLACE:
					case RID:
					case ROUND:
					case ROUND_TIMESTAMP:
					case ROWID:
					case RPAD:
					case RTRIM:
					case SCORE:
					case SIGN:
					case SIN:
					case SINH:
					case SMALLINT:
					case SOAPHTTPC:
					case SOAPHTTPNC:
					case SOAPHTTPNV:
					case SOAPHTTPV:
					case SOUNDEX:
					case SPACE:
					case SQRT:
					case STRIP:
					case STRLEFT:
					case STRPOS:
					case STRRIGHT:
					case SUBSTR:
					case SUBSTRING:
					case TAN:
					case TANH:
					case TIME:
					case TIMESTAMP:
					case TIMESTAMPADD:
					case TIMESTAMPDIFF:
					case TIMESTAMP_FORMAT:
					case TIMESTAMP_ISO:
					case TIMESTAMP_TZ:
					case TO_CHAR:
					case TO_CLOB:
					case TO_DATE:
					case TO_NUMBER:
					case TOTALORDER:
					case TO_TIMESTAMP:
					case TRANSLATE:
					case TRIM:
					case TRIM_ARRAY:
					case TRUNC:
					case TRUNC_TIMESTAMP:
					case UCASE:
					case UNICODE:
					case UNICODE_STR:
					case UNISTR:
					case UPPER:
					case VARBINARY:
					case VARCHAR:
					case VARCHAR9:
					case VARCHAR_BIT_FORMAT:
					case VARCHAR_FORMAT:
					case VARGRAPHIC:
					case VERIFY_GROUP_FOR_USER:
					case VERIFY_ROLE_FOR_USER:
					case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
					case WEEK:
					case WEEK_ISO:
					case WRAP:
					case XMLATTRIBUTES:
					case XMLCOMMENT:
					case XMLCONCAT:
					case XMLDOCUMENT:
					case XMLELEMENT:
					case XMLFOREST:
					case XMLMODIFY:
					case XMLPARSE:
					case XMLPI:
					case XMLQUERY:
					case XMLSERIALIZE:
					case XMLTEXT:
					case XMLXSROBJECTID:
					case XSLTRANSFORM:
					case CURRENT_ACCELERATOR:
					case CURRENT_APPLICATION_COMPATIBILITY:
					case CURRENT_APPLICATION_ENCODING_SCHEME:
					case CURRENT_CLIENT_ACCTNG:
					case CURRENT_CLIENT_APPLNAME:
					case CURRENT_CLIENT_CORR_TOKEN:
					case CURRENT_CLIENT_USERID:
					case CURRENT_CLIENT_WRKSTNNAME:
					case CURRENT_DATE:
					case CURRENT_DEBUG_MODE:
					case CURRENT_DECFLOAT_ROUNDING_MODE:
					case CURRENT_DEGREE:
					case CURRENT_EXPLAIN_MODE:
					case CURRENT_GET_ACCEL_ARCHIVE:
					case CURRENT_LOCALE_LC_CTYPE:
					case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
					case CURRENT_MEMBER:
					case CURRENT_OPTIMIZATION_HINT:
					case CURRENT_PACKAGE_PATH:
					case CURRENT_PACKAGESET:
					case CURRENT_PATH:
					case CURRENT_PRECISION:
					case CURRENT_QUERY_ACCELERATION:
					case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
					case CURRENT_REFRESH_AGE:
					case CURRENT_ROUTINE_VERSION:
					case CURRENT_RULES:
					case CURRENT_SCHEMA:
					case CURRENT_SERVER:
					case CURRENT_SQLID:
					case CURRENT_TEMPORAL_BUSINESS_TIME:
					case CURRENT_TEMPORAL_SYSTEM_TIME:
					case CURRENT_TIME:
					case CURRENT_TIMESTAMP:
					case CURRENT_TIME_ZONE:
					case ENCRYPTION_PASSWORD:
					case SESSION_TIME_ZONE:
					case SESSION_USER:
					case USER:
					case ADMIN_TASK_LIST:
					case ADMIN_TASK_OUTPUT:
					case ADMIN_TASK_STATUS:
					case BLOCKING_THREADS:
					case MQREADALL:
					case MQREADALLCLOB:
					case MQRECEIVEALL:
					case MQRECEIVEALLCLOB:
					case XMLTABLE:
					case SQLIDENTIFIER:
						{
						setState(8422);
						identifier();
						}
						break;
					case NUMERICLITERAL:
						{
						setState(8423);
						match(NUMERICLITERAL);
						}
						break;
					case INTEGERLITERAL:
						{
						setState(8424);
						match(INTEGERLITERAL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					} 
				}
				setState(8431);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1001,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VersionIDContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> NUMERICLITERAL() { return getTokens(DB2zSQLParser.NUMERICLITERAL); }
		public TerminalNode NUMERICLITERAL(int i) {
			return getToken(DB2zSQLParser.NUMERICLITERAL, i);
		}
		public List<TerminalNode> INTEGERLITERAL() { return getTokens(DB2zSQLParser.INTEGERLITERAL); }
		public TerminalNode INTEGERLITERAL(int i) {
			return getToken(DB2zSQLParser.INTEGERLITERAL, i);
		}
		public List<TerminalNode> DOT() { return getTokens(DB2zSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(DB2zSQLParser.DOT, i);
		}
		public VersionIDContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_versionID; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterVersionID(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitVersionID(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitVersionID(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VersionIDContext versionID() throws RecognitionException {
		VersionIDContext _localctx = new VersionIDContext(_ctx, getState());
		enterRule(_localctx, 1114, RULE_versionID);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8435);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INSTEAD:
			case NEW:
			case NEW_TABLE:
			case OLD_TABLE:
			case REFERENCING:
			case BASED:
			case UPON:
			case ADD:
			case AFTER:
			case ALL:
			case ALLOCATE:
			case ALLOW:
			case ALTER:
			case ALTERAND:
			case ANY:
			case ARRAY:
			case ARRAY_EXISTS:
			case AS:
			case ASENSITIVE:
			case ASSOCIATE:
			case ASUTIME:
			case AT:
			case AUDIT:
			case AUX:
			case AUXILIARY:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BUFFERPOOL:
			case BUFFERPOOLS:
			case BY:
			case CALL:
			case CAPTURE:
			case CASCADED:
			case CASE:
			case CAST:
			case CCSID:
			case CHAR:
			case CHARACTER:
			case CHECK:
			case CLONE:
			case CLOSE:
			case CLUSTER:
			case COLLECTION:
			case COLLID:
			case COLUMN:
			case COMMENT:
			case COMMIT:
			case CONCAT:
			case CONDITION:
			case CONNECT:
			case CONNECTION:
			case CONSTRAINT:
			case CONTAINS:
			case CONTENT:
			case CONTINUE:
			case CREATE:
			case CUBE:
			case CURRENT:
			case CURRENT_LC_CTYPE:
			case CURRVAL:
			case CURSOR:
			case DATA:
			case DATABASE:
			case DAY:
			case DAYS:
			case DBINFO:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DISABLE:
			case DISALLOW:
			case DISTINCT:
			case DO:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSSIZE:
			case DYNAMIC:
			case EDITPROC:
			case ELSE:
			case ELSEIF:
			case ENCODING:
			case ENCRYPTION:
			case END:
			case END_EXEC:
			case ENDING:
			case ERASE:
			case ESCAPE:
			case EXCEPT:
			case EXCEPTION:
			case EXEC_SQL:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case FENCED:
			case FETCH:
			case FIELDPROC:
			case FINAL:
			case FIRST:
			case FOR:
			case FREE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANT:
			case GROUP:
			case HANDLER:
			case HAVING:
			case HOLD:
			case HOUR:
			case HOURS:
			case IF:
			case IMMEDIATE:
			case IN:
			case INCLUSIVE:
			case INDEX:
			case INDEXBP:
			case INHERIT:
			case INNER:
			case INOUT:
			case INSENSITIVE:
			case INSERT:
			case INTERSECT:
			case INTO:
			case IS:
			case ISOBID:
			case ITERATE:
			case JAR:
			case JOIN:
			case KEEP:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LAST:
			case LC_CTYPE:
			case LEAVE:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOCALE:
			case LOCATOR:
			case LOCATORS:
			case LOCK:
			case LOCKMAX:
			case LOCKSIZE:
			case LONG:
			case LOOP:
			case MAINTAINED:
			case MATERIALIZED:
			case MICROSECOND:
			case MICROSECONDS:
			case MODIFIES:
			case MONTH:
			case MONTHS:
			case NEXT:
			case NEXTVAL:
			case NO:
			case NONE:
			case NOT:
			case NULL:
			case NULLS:
			case NUMPARTS:
			case OBID:
			case OF:
			case OFFSET:
			case OLD:
			case ON:
			case OPEN:
			case OPTIMIZATION:
			case OPTIMIZE:
			case OR:
			case ORDER:
			case ORGANIZATION:
			case OUT:
			case OUTER:
			case PACKAGE:
			case PADDED:
			case PARAMETER:
			case PART:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONING:
			case PATH:
			case PERIOD:
			case PIECESIZE:
			case PLAN:
			case PRECISION:
			case PREPARE:
			case PREVVAL:
			case PRIOR:
			case PRIQTY:
			case PRIVILEGES:
			case PROCEDURE:
			case PROGRAM:
			case PSID:
			case PUBLIC:
			case QUERY:
			case QUERYNO:
			case READS:
			case REFERENCES:
			case REFRESH:
			case RELEASE:
			case RENAME:
			case REPEAT:
			case RESIGNAL:
			case RESTRICT:
			case RESULT:
			case RESULT_SET_LOCATOR:
			case RETURN:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUND_CEILING:
			case ROUND_DOWN:
			case ROUND_FLOOR:
			case ROUND_HALF_DOWN:
			case ROUND_HALF_EVEN:
			case ROUND_HALF_UP:
			case ROUND_UP:
			case ROW:
			case ROWSET:
			case RUN:
			case SAVEPOINT:
			case SCHEMA:
			case SCRATCHPAD:
			case SECOND:
			case SECONDS:
			case SECQTY:
			case SECURITY:
			case SELECT:
			case SENSITIVE:
			case SEQUENCE:
			case SET:
			case SIGNAL:
			case SIMPLE:
			case SOME:
			case SOURCE:
			case SPECIFIC:
			case STANDARD:
			case STATEMENT:
			case STATIC:
			case STAY:
			case STOGROUP:
			case STORES:
			case STYLE:
			case SUMMARY:
			case SYNONYM:
			case SYSDATE:
			case SYSTEM:
			case SYSTIMESTAMP:
			case TABLE:
			case TABLESPACE:
			case THEN:
			case TO:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNDO:
			case UNION:
			case UNIQUE:
			case UNTIL:
			case UPDATE:
			case USING:
			case VALIDPROC:
			case VALUE:
			case VALUES:
			case VARIABLE:
			case VARIANT:
			case VCAT:
			case VERSIONING:
			case VIEW:
			case VOLATILE:
			case VOLUMES:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WLM:
			case XMLCAST:
			case XMLEXISTS:
			case XMLNAMESPACES:
			case YEAR:
			case YEARS:
			case ZONE:
			case AND:
			case ARRAY_AGG:
			case ASC:
			case AVG:
			case BIT:
			case CHANGE:
			case CODEUNITS16:
			case CODEUNITS32:
			case CORR:
			case CORRELATION:
			case COUNT:
			case COUNT_BIG:
			case COVAR:
			case COVARIANCE:
			case COVARIANCE_SAMP:
			case COVAR_POP:
			case COVAR_SAMP:
			case CS:
			case CUME_DIST:
			case DENSE_RANK:
			case DESC:
			case EBCDIC:
			case EXCLUSIVE:
			case FIRST_VALUE:
			case FOLLOWING:
			case GROUPING:
			case IGNORE:
			case INDICATOR:
			case INPUT:
			case ISNULL:
			case LAG:
			case LARGE:
			case LAST_VALUE:
			case LEAD:
			case LISTAGG:
			case LOCKED:
			case LOCKS:
			case MEDIAN:
			case MINUTES:
			case MIXED:
			case NOTNULL:
			case NTH_VALUE:
			case NTILE:
			case NUMERIC:
			case OBJECT:
			case OCTETS:
			case ONLY:
			case OVER:
			case PASSING:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PERCENT_RANK:
			case PRECEDING:
			case PREVIOUS:
			case RANGE:
			case RANK:
			case RATIO_TO_REPORT:
			case READ:
			case REF:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_ICPT:
			case REGR_INTERCEPT:
			case REGR_R2:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case RESPECT:
			case ROW_NUMBER:
			case ROWS:
			case RR:
			case RS:
			case SBCS:
			case SELECTIVITY:
			case SETS:
			case SHARE:
			case SKIP_:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case TOKEN:
			case UNBOUNDED:
			case UNPACK:
			case UR:
			case USE:
			case VAR:
			case VARIANCE:
			case VARIANCE_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARYING:
			case WITHOUT:
			case XML:
			case XMLAGG:
			case COLUMNS:
			case SQLID:
			case ORDINALITY:
			case SYSTEM_TIME:
			case BUSINESS_TIME:
			case MULTIPLIER:
			case UNNEST:
			case CROSS:
			case CALLER:
			case CLIENT:
			case POSITIONING:
			case SCROLL:
			case ACTION:
			case ASSEMBLE:
			case C_:
			case CALLED:
			case COBOL:
			case DB2:
			case DEFINER:
			case DISPATCH:
			case ENVIRONMENT:
			case FAILURE:
			case FAILURES:
			case JAVA:
			case MAIN:
			case NAME:
			case OPTIONS:
			case PARALLEL:
			case PLI:
			case REGISTERS:
			case RESIDENT:
			case SECURED:
			case SPECIAL:
			case SQL:
			case STOP:
			case SUB:
			case YES:
			case APPLICATION:
			case CHANGED:
			case COMPATIBILITY:
			case COMPRESS:
			case COPY:
			case FREEPAGE:
			case GBPCACHE:
			case INCLUDE:
			case MAXVALUE:
			case MINVALUE:
			case PCTFREE:
			case REGENERATE:
			case MASK:
			case ENABLE:
			case PERMISSION:
			case ATOMIC:
			case SQLEXCEPTION:
			case MERGE:
			case MATCHED:
			case SQLSTATE:
			case MESSAGE_TEXT:
			case OVERRIDING:
			case PORTION:
			case DB2SQL:
			case DEBUG:
			case GENERAL:
			case MODE_:
			case REXX:
			case CACHE:
			case CYCLE:
			case INCREMENT:
			case RESTART:
			case DATACLAS:
			case MGMTCLAS:
			case REMOVE:
			case STORCLAS:
			case ACCESS:
			case ACTIVATE:
			case ALWAYS:
			case APPEND:
			case ARCHIVE:
			case BUSINESS:
			case CASCADE:
			case CHANGES:
			case CONTROL:
			case DEACTIVATE:
			case DEFERRED:
			case EACH:
			case ENFORCED:
			case EXTRA:
			case FOREIGN:
			case HIDDEN_:
			case HISTORY:
			case ID:
			case IDENTITY:
			case IMPLICITLY:
			case INITIALLY:
			case INLINE:
			case OPERATION:
			case ORGANIZE:
			case OVERLAPS:
			case PACKAGE_NAME:
			case PACKAGE_SCHEMA:
			case PACKAGE_VERSION:
			case PRIMARY:
			case RESET:
			case ROTATE:
			case START:
			case SYSIBM:
			case TRANSACTION:
			case XMLSCHEMA:
			case ELEMENT:
			case URL:
			case NAMESPACE:
			case LOCATION:
			case SYSXSR:
			case ALGORITHM:
			case FIXEDLENGTH:
			case HUFFMAN:
			case LOB:
			case LOG:
			case LOGGED:
			case MAXPARTITIONS:
			case MAXROWS:
			case MEMBER:
			case MOVE:
			case PAGE:
			case PAGENUM:
			case PENDING:
			case RELATIVE:
			case SEGSIZE:
			case TRACKMOD:
			case ADDRESS:
			case ATTRIBUTES:
			case AUTHENTICATION:
			case AUTHID:
			case CONTEXT:
			case JOBNAME:
			case OWNER:
			case PROFILE:
			case QUALIFIER:
			case SERVAUTH:
			case TRUSTED:
			case SECTION:
			case ACTIVE:
			case VERSION:
			case ALIAS:
			case WORK:
			case WORKFILE:
			case SYSDEFLT:
			case NULTERM:
			case STRUCTURE:
			case GENERIC:
			case TEMPORARY:
			case DEFER:
			case DEFINE:
			case EXCLUDE:
			case GENERATE:
			case KEYS:
			case XMLPATTERN:
			case SIZE:
			case EVERY:
			case ABSOLUTE:
			case ACCELERATOR:
			case EXCLUDING:
			case INCLUDING:
			case DEFAULTS:
			case MODIFIERS:
			case OPTION:
			case PRESERVE:
			case BOTH:
			case DESCRIBE:
			case LABELS:
			case NAMES:
			case OUTPUT:
			case EXCHANGE:
			case STABILIZED:
			case STMTCACHE:
			case STMTID:
			case STMTTOKEN:
			case STARTING:
			case CATALOG_NAME:
			case CONDITION_NUMBER:
			case CURSOR_NAME:
			case DB2_AUTHENTICATION_TYPE:
			case DB2_AUTHORIZATION_ID:
			case DB2_CONNECTION_STATE:
			case DB2_CONNECTION_STATUS:
			case DB2_ENCRYPTION_TYPE:
			case DB2_ERROR_CODE1:
			case DB2_ERROR_CODE2:
			case DB2_ERROR_CODE3:
			case DB2_ERROR_CODE4:
			case DB2_GET_DIAGNOSTICS_DIAGNOSTICS:
			case DB2_INTERNAL_ERROR_POINTER:
			case DB2_LAST_ROW:
			case DB2_LINE_NUMBER:
			case DB2_MESSAGE_ID:
			case DB2_MODULE_DETECTING_ERROR:
			case DB2_NUMBER_PARAMETER_MARKERS:
			case DB2_NUMBER_RESULT_SETS:
			case DB2_NUMBER_ROWS:
			case DB2_ORDINAL_TOKEN_:
			case DB2_PRODUCT_ID:
			case DB2_REASON_CODE:
			case DB2_RETURNED_SQLCODE:
			case DB2_RETURN_STATUS:
			case DB2_ROW_NUMBER:
			case DB2_SERVER_CLASS_NAME:
			case DB2_SQL_ATTR_CURSOR_HOLD:
			case DB2_SQL_ATTR_CURSOR_ROWSET:
			case DB2_SQL_ATTR_CURSOR_SCROLLABLE:
			case DB2_SQL_ATTR_CURSOR_SENSITIVITY:
			case DB2_SQL_ATTR_CURSOR_TYPE:
			case DB2_SQLERRD1:
			case DB2_SQLERRD2:
			case DB2_SQLERRD3:
			case DB2_SQLERRD4:
			case DB2_SQLERRD5:
			case DB2_SQLERRD6:
			case DB2_SQLERRD_SET:
			case DB2_SQL_NESTING_LEVEL:
			case DB2_TOKEN_COUNT:
			case DIAGNOSTICS:
			case MORE_:
			case NUMBER:
			case RETURNED_SQLSTATE:
			case ROW_COUNT:
			case SERVER_NAME:
			case STACKED:
			case CREATETAB:
			case CREATETS:
			case DBADM:
			case DBCTRL:
			case DBMAINT:
			case DISPLAYDB:
			case IMAGCOPY:
			case LOAD:
			case PACKADM:
			case RECOVERDB:
			case REORG:
			case REPAIR:
			case STARTDB:
			case STATS:
			case STOPDB:
			case BIND:
			case ALTERIN:
			case CREATEIN:
			case DROPIN:
			case USAGE:
			case ACCESSCTRL:
			case BINDADD:
			case BINDAGENT:
			case BSDS:
			case CREATEALIAS:
			case CREATEDBA:
			case CREATEDBC:
			case CREATE_SECURE_OBJECT:
			case CREATESG:
			case CREATETMTAB:
			case DATAACCESS:
			case DEBUGSESSION:
			case DISPLAY:
			case MONITOR1:
			case MONITOR2:
			case RECOVER:
			case SQLADM:
			case STOPALL:
			case STOSPACE:
			case SYSADM:
			case SYSCTRL:
			case SYSOPR:
			case TRACE:
			case UNLOAD:
			case WRITE:
			case ABS:
			case ABSVAL:
			case ACOS:
			case ADD_DAYS:
			case ADD_MONTHS:
			case ARRAY_DELETE:
			case ARRAY_FIRST:
			case ARRAY_LAST:
			case ARRAY_NEXT:
			case ARRAY_PRIOR:
			case ARRAY_TRIM:
			case ASCII:
			case ASCII_CHR:
			case ASCIISTR:
			case ASCII_STR:
			case ASIN:
			case ATAN:
			case ATAN2:
			case ATANH:
			case BIGINT:
			case BINARY:
			case BITAND:
			case BITANDNOT:
			case BITNOT:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BTRIM:
			case CARDINALITY:
			case CCSID_ENCODING:
			case CEIL:
			case CEILING:
			case CHAR9:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case CHR:
			case CLOB:
			case COALESCE:
			case COLLATION_KEY:
			case COMPARE_DECFLOAT:
			case COS:
			case COSH:
			case DATE:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFWEEK_ISO:
			case DAYOFYEAR:
			case DAYS_BETWEEN:
			case DBCLOB:
			case DEC:
			case DECFLOAT:
			case DECFLOAT_FORMAT:
			case DECFLOAT_SORTKEY:
			case DECIMAL:
			case DECODE:
			case DECRYPT_BINARY:
			case DECRYPT_BIT:
			case DECRYPT_CHAR:
			case DECRYPT_DATAKEY_BIGINT:
			case DECRYPT_DATAKEY_BIT:
			case DECRYPT_DATAKEY_CLOB:
			case DECRYPT_DATAKEY_DBCLOB:
			case DECRYPT_DATAKEY_DECIMAL:
			case DECRYPT_DATAKEY_INTEGER:
			case DECRYPT_DATAKEY_VARCHAR:
			case DECRYPT_DATAKEY_VARGRAPHIC:
			case DECRYPT_DB:
			case DEGREES:
			case DIFFERENCE:
			case DIGITS:
			case DOUBLE_PRECISION:
			case DSN_XMLVALIDATE:
			case EBCDIC_CHR:
			case EBCDIC_STR:
			case ENCRYPT_DATAKEY:
			case ENCRYPT_TDES:
			case EXP:
			case EXTRACT:
			case FLOAT:
			case FLOOR:
			case GENERATE_UNIQUE:
			case GENERATE_UNIQUE_BINARY:
			case GETHINT:
			case GETVARIABLE:
			case GRAPHIC:
			case GREATEST:
			case HASH:
			case HASH_CRC32:
			case HASH_MD5:
			case HASH_SHA1:
			case HASH_SHA256:
			case HEX:
			case IDENTITY_VAL_LOCAL:
			case IFNULL:
			case INSTR:
			case INT:
			case INTEGER:
			case JULIAN_DAY:
			case LAST_DAY:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LN:
			case LOCATE:
			case LOCATE_IN_STRING:
			case LOG10:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAX:
			case MAX_CARDINALITY:
			case MIDNIGHT_SECONDS:
			case MIN:
			case MINUTE:
			case MOD:
			case MONTHS_BETWEEN:
			case MQREAD:
			case MQREADCLOB:
			case MQRECEIVE:
			case MQRECEIVECLOB:
			case MQSEND:
			case MULTIPLY_ALT:
			case NEXT_DAY:
			case NEXT_MONTH:
			case NORMALIZE_DECFLOAT:
			case NORMALIZE_STRING:
			case NULLIF:
			case NVL:
			case OVERLAY:
			case PACK:
			case POSITION:
			case POSSTR:
			case POW:
			case POWER:
			case QUANTIZE:
			case QUARTER:
			case RADIANS:
			case RAISE_ERROR:
			case RAND:
			case RANDOM:
			case REAL:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REPLACE:
			case RID:
			case ROUND:
			case ROUND_TIMESTAMP:
			case ROWID:
			case RPAD:
			case RTRIM:
			case SCORE:
			case SIGN:
			case SIN:
			case SINH:
			case SMALLINT:
			case SOAPHTTPC:
			case SOAPHTTPNC:
			case SOAPHTTPNV:
			case SOAPHTTPV:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STRIP:
			case STRLEFT:
			case STRPOS:
			case STRRIGHT:
			case SUBSTR:
			case SUBSTRING:
			case TAN:
			case TANH:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIMESTAMP_FORMAT:
			case TIMESTAMP_ISO:
			case TIMESTAMP_TZ:
			case TO_CHAR:
			case TO_CLOB:
			case TO_DATE:
			case TO_NUMBER:
			case TOTALORDER:
			case TO_TIMESTAMP:
			case TRANSLATE:
			case TRIM:
			case TRIM_ARRAY:
			case TRUNC:
			case TRUNC_TIMESTAMP:
			case UCASE:
			case UNICODE:
			case UNICODE_STR:
			case UNISTR:
			case UPPER:
			case VARBINARY:
			case VARCHAR:
			case VARCHAR9:
			case VARCHAR_BIT_FORMAT:
			case VARCHAR_FORMAT:
			case VARGRAPHIC:
			case VERIFY_GROUP_FOR_USER:
			case VERIFY_ROLE_FOR_USER:
			case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
			case WEEK:
			case WEEK_ISO:
			case WRAP:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLCONCAT:
			case XMLDOCUMENT:
			case XMLELEMENT:
			case XMLFOREST:
			case XMLMODIFY:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLSERIALIZE:
			case XMLTEXT:
			case XMLXSROBJECTID:
			case XSLTRANSFORM:
			case CURRENT_ACCELERATOR:
			case CURRENT_APPLICATION_COMPATIBILITY:
			case CURRENT_APPLICATION_ENCODING_SCHEME:
			case CURRENT_CLIENT_ACCTNG:
			case CURRENT_CLIENT_APPLNAME:
			case CURRENT_CLIENT_CORR_TOKEN:
			case CURRENT_CLIENT_USERID:
			case CURRENT_CLIENT_WRKSTNNAME:
			case CURRENT_DATE:
			case CURRENT_DEBUG_MODE:
			case CURRENT_DECFLOAT_ROUNDING_MODE:
			case CURRENT_DEGREE:
			case CURRENT_EXPLAIN_MODE:
			case CURRENT_GET_ACCEL_ARCHIVE:
			case CURRENT_LOCALE_LC_CTYPE:
			case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
			case CURRENT_MEMBER:
			case CURRENT_OPTIMIZATION_HINT:
			case CURRENT_PACKAGE_PATH:
			case CURRENT_PACKAGESET:
			case CURRENT_PATH:
			case CURRENT_PRECISION:
			case CURRENT_QUERY_ACCELERATION:
			case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
			case CURRENT_REFRESH_AGE:
			case CURRENT_ROUTINE_VERSION:
			case CURRENT_RULES:
			case CURRENT_SCHEMA:
			case CURRENT_SERVER:
			case CURRENT_SQLID:
			case CURRENT_TEMPORAL_BUSINESS_TIME:
			case CURRENT_TEMPORAL_SYSTEM_TIME:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_TIME_ZONE:
			case ENCRYPTION_PASSWORD:
			case SESSION_TIME_ZONE:
			case SESSION_USER:
			case USER:
			case ADMIN_TASK_LIST:
			case ADMIN_TASK_OUTPUT:
			case ADMIN_TASK_STATUS:
			case BLOCKING_THREADS:
			case MQREADALL:
			case MQREADALLCLOB:
			case MQRECEIVEALL:
			case MQRECEIVEALLCLOB:
			case XMLTABLE:
			case SQLIDENTIFIER:
				{
				setState(8432);
				identifier();
				}
				break;
			case NUMERICLITERAL:
				{
				setState(8433);
				match(NUMERICLITERAL);
				}
				break;
			case INTEGERLITERAL:
				{
				setState(8434);
				match(INTEGERLITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(8447);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1005,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8438);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DOT) {
						{
						setState(8437);
						match(DOT);
						}
					}

					setState(8443);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case INSTEAD:
					case NEW:
					case NEW_TABLE:
					case OLD_TABLE:
					case REFERENCING:
					case BASED:
					case UPON:
					case ADD:
					case AFTER:
					case ALL:
					case ALLOCATE:
					case ALLOW:
					case ALTER:
					case ALTERAND:
					case ANY:
					case ARRAY:
					case ARRAY_EXISTS:
					case AS:
					case ASENSITIVE:
					case ASSOCIATE:
					case ASUTIME:
					case AT:
					case AUDIT:
					case AUX:
					case AUXILIARY:
					case BEFORE:
					case BEGIN:
					case BETWEEN:
					case BUFFERPOOL:
					case BUFFERPOOLS:
					case BY:
					case CALL:
					case CAPTURE:
					case CASCADED:
					case CASE:
					case CAST:
					case CCSID:
					case CHAR:
					case CHARACTER:
					case CHECK:
					case CLONE:
					case CLOSE:
					case CLUSTER:
					case COLLECTION:
					case COLLID:
					case COLUMN:
					case COMMENT:
					case COMMIT:
					case CONCAT:
					case CONDITION:
					case CONNECT:
					case CONNECTION:
					case CONSTRAINT:
					case CONTAINS:
					case CONTENT:
					case CONTINUE:
					case CREATE:
					case CUBE:
					case CURRENT:
					case CURRENT_LC_CTYPE:
					case CURRVAL:
					case CURSOR:
					case DATA:
					case DATABASE:
					case DAY:
					case DAYS:
					case DBINFO:
					case DECLARE:
					case DEFAULT:
					case DELETE:
					case DESCRIPTOR:
					case DETERMINISTIC:
					case DISABLE:
					case DISALLOW:
					case DISTINCT:
					case DO:
					case DOCUMENT:
					case DOUBLE:
					case DROP:
					case DSSIZE:
					case DYNAMIC:
					case EDITPROC:
					case ELSE:
					case ELSEIF:
					case ENCODING:
					case ENCRYPTION:
					case END:
					case END_EXEC:
					case ENDING:
					case ERASE:
					case ESCAPE:
					case EXCEPT:
					case EXCEPTION:
					case EXEC_SQL:
					case EXECUTE:
					case EXISTS:
					case EXIT:
					case EXPLAIN:
					case EXTERNAL:
					case FENCED:
					case FETCH:
					case FIELDPROC:
					case FINAL:
					case FIRST:
					case FOR:
					case FREE:
					case FROM:
					case FULL:
					case FUNCTION:
					case GENERATED:
					case GET:
					case GLOBAL:
					case GO:
					case GOTO:
					case GRANT:
					case GROUP:
					case HANDLER:
					case HAVING:
					case HOLD:
					case HOUR:
					case HOURS:
					case IF:
					case IMMEDIATE:
					case IN:
					case INCLUSIVE:
					case INDEX:
					case INDEXBP:
					case INHERIT:
					case INNER:
					case INOUT:
					case INSENSITIVE:
					case INSERT:
					case INTERSECT:
					case INTO:
					case IS:
					case ISOBID:
					case ITERATE:
					case JAR:
					case JOIN:
					case KEEP:
					case KEY:
					case LABEL:
					case LANGUAGE:
					case LAST:
					case LC_CTYPE:
					case LEAVE:
					case LEFT:
					case LIKE:
					case LIMIT:
					case LOCAL:
					case LOCALE:
					case LOCATOR:
					case LOCATORS:
					case LOCK:
					case LOCKMAX:
					case LOCKSIZE:
					case LONG:
					case LOOP:
					case MAINTAINED:
					case MATERIALIZED:
					case MICROSECOND:
					case MICROSECONDS:
					case MODIFIES:
					case MONTH:
					case MONTHS:
					case NEXT:
					case NEXTVAL:
					case NO:
					case NONE:
					case NOT:
					case NULL:
					case NULLS:
					case NUMPARTS:
					case OBID:
					case OF:
					case OFFSET:
					case OLD:
					case ON:
					case OPEN:
					case OPTIMIZATION:
					case OPTIMIZE:
					case OR:
					case ORDER:
					case ORGANIZATION:
					case OUT:
					case OUTER:
					case PACKAGE:
					case PADDED:
					case PARAMETER:
					case PART:
					case PARTITION:
					case PARTITIONED:
					case PARTITIONING:
					case PATH:
					case PERIOD:
					case PIECESIZE:
					case PLAN:
					case PRECISION:
					case PREPARE:
					case PREVVAL:
					case PRIOR:
					case PRIQTY:
					case PRIVILEGES:
					case PROCEDURE:
					case PROGRAM:
					case PSID:
					case PUBLIC:
					case QUERY:
					case QUERYNO:
					case READS:
					case REFERENCES:
					case REFRESH:
					case RELEASE:
					case RENAME:
					case REPEAT:
					case RESIGNAL:
					case RESTRICT:
					case RESULT:
					case RESULT_SET_LOCATOR:
					case RETURN:
					case RETURNS:
					case REVOKE:
					case RIGHT:
					case ROLE:
					case ROLLBACK:
					case ROLLUP:
					case ROUND_CEILING:
					case ROUND_DOWN:
					case ROUND_FLOOR:
					case ROUND_HALF_DOWN:
					case ROUND_HALF_EVEN:
					case ROUND_HALF_UP:
					case ROUND_UP:
					case ROW:
					case ROWSET:
					case RUN:
					case SAVEPOINT:
					case SCHEMA:
					case SCRATCHPAD:
					case SECOND:
					case SECONDS:
					case SECQTY:
					case SECURITY:
					case SELECT:
					case SENSITIVE:
					case SEQUENCE:
					case SET:
					case SIGNAL:
					case SIMPLE:
					case SOME:
					case SOURCE:
					case SPECIFIC:
					case STANDARD:
					case STATEMENT:
					case STATIC:
					case STAY:
					case STOGROUP:
					case STORES:
					case STYLE:
					case SUMMARY:
					case SYNONYM:
					case SYSDATE:
					case SYSTEM:
					case SYSTIMESTAMP:
					case TABLE:
					case TABLESPACE:
					case THEN:
					case TO:
					case TRIGGER:
					case TRUNCATE:
					case TYPE:
					case UNDO:
					case UNION:
					case UNIQUE:
					case UNTIL:
					case UPDATE:
					case USING:
					case VALIDPROC:
					case VALUE:
					case VALUES:
					case VARIABLE:
					case VARIANT:
					case VCAT:
					case VERSIONING:
					case VIEW:
					case VOLATILE:
					case VOLUMES:
					case WHEN:
					case WHENEVER:
					case WHERE:
					case WHILE:
					case WITH:
					case WLM:
					case XMLCAST:
					case XMLEXISTS:
					case XMLNAMESPACES:
					case YEAR:
					case YEARS:
					case ZONE:
					case AND:
					case ARRAY_AGG:
					case ASC:
					case AVG:
					case BIT:
					case CHANGE:
					case CODEUNITS16:
					case CODEUNITS32:
					case CORR:
					case CORRELATION:
					case COUNT:
					case COUNT_BIG:
					case COVAR:
					case COVARIANCE:
					case COVARIANCE_SAMP:
					case COVAR_POP:
					case COVAR_SAMP:
					case CS:
					case CUME_DIST:
					case DENSE_RANK:
					case DESC:
					case EBCDIC:
					case EXCLUSIVE:
					case FIRST_VALUE:
					case FOLLOWING:
					case GROUPING:
					case IGNORE:
					case INDICATOR:
					case INPUT:
					case ISNULL:
					case LAG:
					case LARGE:
					case LAST_VALUE:
					case LEAD:
					case LISTAGG:
					case LOCKED:
					case LOCKS:
					case MEDIAN:
					case MINUTES:
					case MIXED:
					case NOTNULL:
					case NTH_VALUE:
					case NTILE:
					case NUMERIC:
					case OBJECT:
					case OCTETS:
					case ONLY:
					case OVER:
					case PASSING:
					case PERCENTILE_CONT:
					case PERCENTILE_DISC:
					case PERCENT_RANK:
					case PRECEDING:
					case PREVIOUS:
					case RANGE:
					case RANK:
					case RATIO_TO_REPORT:
					case READ:
					case REF:
					case REGR_AVGX:
					case REGR_AVGY:
					case REGR_COUNT:
					case REGR_ICPT:
					case REGR_INTERCEPT:
					case REGR_R2:
					case REGR_SLOPE:
					case REGR_SXX:
					case REGR_SXY:
					case REGR_SYY:
					case RESPECT:
					case ROW_NUMBER:
					case ROWS:
					case RR:
					case RS:
					case SBCS:
					case SELECTIVITY:
					case SETS:
					case SHARE:
					case SKIP_:
					case STDDEV:
					case STDDEV_POP:
					case STDDEV_SAMP:
					case SUM:
					case TOKEN:
					case UNBOUNDED:
					case UNPACK:
					case UR:
					case USE:
					case VAR:
					case VARIANCE:
					case VARIANCE_SAMP:
					case VAR_POP:
					case VAR_SAMP:
					case VARYING:
					case WITHOUT:
					case XML:
					case XMLAGG:
					case COLUMNS:
					case SQLID:
					case ORDINALITY:
					case SYSTEM_TIME:
					case BUSINESS_TIME:
					case MULTIPLIER:
					case UNNEST:
					case CROSS:
					case CALLER:
					case CLIENT:
					case POSITIONING:
					case SCROLL:
					case ACTION:
					case ASSEMBLE:
					case C_:
					case CALLED:
					case COBOL:
					case DB2:
					case DEFINER:
					case DISPATCH:
					case ENVIRONMENT:
					case FAILURE:
					case FAILURES:
					case JAVA:
					case MAIN:
					case NAME:
					case OPTIONS:
					case PARALLEL:
					case PLI:
					case REGISTERS:
					case RESIDENT:
					case SECURED:
					case SPECIAL:
					case SQL:
					case STOP:
					case SUB:
					case YES:
					case APPLICATION:
					case CHANGED:
					case COMPATIBILITY:
					case COMPRESS:
					case COPY:
					case FREEPAGE:
					case GBPCACHE:
					case INCLUDE:
					case MAXVALUE:
					case MINVALUE:
					case PCTFREE:
					case REGENERATE:
					case MASK:
					case ENABLE:
					case PERMISSION:
					case ATOMIC:
					case SQLEXCEPTION:
					case MERGE:
					case MATCHED:
					case SQLSTATE:
					case MESSAGE_TEXT:
					case OVERRIDING:
					case PORTION:
					case DB2SQL:
					case DEBUG:
					case GENERAL:
					case MODE_:
					case REXX:
					case CACHE:
					case CYCLE:
					case INCREMENT:
					case RESTART:
					case DATACLAS:
					case MGMTCLAS:
					case REMOVE:
					case STORCLAS:
					case ACCESS:
					case ACTIVATE:
					case ALWAYS:
					case APPEND:
					case ARCHIVE:
					case BUSINESS:
					case CASCADE:
					case CHANGES:
					case CONTROL:
					case DEACTIVATE:
					case DEFERRED:
					case EACH:
					case ENFORCED:
					case EXTRA:
					case FOREIGN:
					case HIDDEN_:
					case HISTORY:
					case ID:
					case IDENTITY:
					case IMPLICITLY:
					case INITIALLY:
					case INLINE:
					case OPERATION:
					case ORGANIZE:
					case OVERLAPS:
					case PACKAGE_NAME:
					case PACKAGE_SCHEMA:
					case PACKAGE_VERSION:
					case PRIMARY:
					case RESET:
					case ROTATE:
					case START:
					case SYSIBM:
					case TRANSACTION:
					case XMLSCHEMA:
					case ELEMENT:
					case URL:
					case NAMESPACE:
					case LOCATION:
					case SYSXSR:
					case ALGORITHM:
					case FIXEDLENGTH:
					case HUFFMAN:
					case LOB:
					case LOG:
					case LOGGED:
					case MAXPARTITIONS:
					case MAXROWS:
					case MEMBER:
					case MOVE:
					case PAGE:
					case PAGENUM:
					case PENDING:
					case RELATIVE:
					case SEGSIZE:
					case TRACKMOD:
					case ADDRESS:
					case ATTRIBUTES:
					case AUTHENTICATION:
					case AUTHID:
					case CONTEXT:
					case JOBNAME:
					case OWNER:
					case PROFILE:
					case QUALIFIER:
					case SERVAUTH:
					case TRUSTED:
					case SECTION:
					case ACTIVE:
					case VERSION:
					case ALIAS:
					case WORK:
					case WORKFILE:
					case SYSDEFLT:
					case NULTERM:
					case STRUCTURE:
					case GENERIC:
					case TEMPORARY:
					case DEFER:
					case DEFINE:
					case EXCLUDE:
					case GENERATE:
					case KEYS:
					case XMLPATTERN:
					case SIZE:
					case EVERY:
					case ABSOLUTE:
					case ACCELERATOR:
					case EXCLUDING:
					case INCLUDING:
					case DEFAULTS:
					case MODIFIERS:
					case OPTION:
					case PRESERVE:
					case BOTH:
					case DESCRIBE:
					case LABELS:
					case NAMES:
					case OUTPUT:
					case EXCHANGE:
					case STABILIZED:
					case STMTCACHE:
					case STMTID:
					case STMTTOKEN:
					case STARTING:
					case CATALOG_NAME:
					case CONDITION_NUMBER:
					case CURSOR_NAME:
					case DB2_AUTHENTICATION_TYPE:
					case DB2_AUTHORIZATION_ID:
					case DB2_CONNECTION_STATE:
					case DB2_CONNECTION_STATUS:
					case DB2_ENCRYPTION_TYPE:
					case DB2_ERROR_CODE1:
					case DB2_ERROR_CODE2:
					case DB2_ERROR_CODE3:
					case DB2_ERROR_CODE4:
					case DB2_GET_DIAGNOSTICS_DIAGNOSTICS:
					case DB2_INTERNAL_ERROR_POINTER:
					case DB2_LAST_ROW:
					case DB2_LINE_NUMBER:
					case DB2_MESSAGE_ID:
					case DB2_MODULE_DETECTING_ERROR:
					case DB2_NUMBER_PARAMETER_MARKERS:
					case DB2_NUMBER_RESULT_SETS:
					case DB2_NUMBER_ROWS:
					case DB2_ORDINAL_TOKEN_:
					case DB2_PRODUCT_ID:
					case DB2_REASON_CODE:
					case DB2_RETURNED_SQLCODE:
					case DB2_RETURN_STATUS:
					case DB2_ROW_NUMBER:
					case DB2_SERVER_CLASS_NAME:
					case DB2_SQL_ATTR_CURSOR_HOLD:
					case DB2_SQL_ATTR_CURSOR_ROWSET:
					case DB2_SQL_ATTR_CURSOR_SCROLLABLE:
					case DB2_SQL_ATTR_CURSOR_SENSITIVITY:
					case DB2_SQL_ATTR_CURSOR_TYPE:
					case DB2_SQLERRD1:
					case DB2_SQLERRD2:
					case DB2_SQLERRD3:
					case DB2_SQLERRD4:
					case DB2_SQLERRD5:
					case DB2_SQLERRD6:
					case DB2_SQLERRD_SET:
					case DB2_SQL_NESTING_LEVEL:
					case DB2_TOKEN_COUNT:
					case DIAGNOSTICS:
					case MORE_:
					case NUMBER:
					case RETURNED_SQLSTATE:
					case ROW_COUNT:
					case SERVER_NAME:
					case STACKED:
					case CREATETAB:
					case CREATETS:
					case DBADM:
					case DBCTRL:
					case DBMAINT:
					case DISPLAYDB:
					case IMAGCOPY:
					case LOAD:
					case PACKADM:
					case RECOVERDB:
					case REORG:
					case REPAIR:
					case STARTDB:
					case STATS:
					case STOPDB:
					case BIND:
					case ALTERIN:
					case CREATEIN:
					case DROPIN:
					case USAGE:
					case ACCESSCTRL:
					case BINDADD:
					case BINDAGENT:
					case BSDS:
					case CREATEALIAS:
					case CREATEDBA:
					case CREATEDBC:
					case CREATE_SECURE_OBJECT:
					case CREATESG:
					case CREATETMTAB:
					case DATAACCESS:
					case DEBUGSESSION:
					case DISPLAY:
					case MONITOR1:
					case MONITOR2:
					case RECOVER:
					case SQLADM:
					case STOPALL:
					case STOSPACE:
					case SYSADM:
					case SYSCTRL:
					case SYSOPR:
					case TRACE:
					case UNLOAD:
					case WRITE:
					case ABS:
					case ABSVAL:
					case ACOS:
					case ADD_DAYS:
					case ADD_MONTHS:
					case ARRAY_DELETE:
					case ARRAY_FIRST:
					case ARRAY_LAST:
					case ARRAY_NEXT:
					case ARRAY_PRIOR:
					case ARRAY_TRIM:
					case ASCII:
					case ASCII_CHR:
					case ASCIISTR:
					case ASCII_STR:
					case ASIN:
					case ATAN:
					case ATAN2:
					case ATANH:
					case BIGINT:
					case BINARY:
					case BITAND:
					case BITANDNOT:
					case BITNOT:
					case BITOR:
					case BITXOR:
					case BLOB:
					case BTRIM:
					case CARDINALITY:
					case CCSID_ENCODING:
					case CEIL:
					case CEILING:
					case CHAR9:
					case CHARACTER_LENGTH:
					case CHAR_LENGTH:
					case CHR:
					case CLOB:
					case COALESCE:
					case COLLATION_KEY:
					case COMPARE_DECFLOAT:
					case COS:
					case COSH:
					case DATE:
					case DAYOFMONTH:
					case DAYOFWEEK:
					case DAYOFWEEK_ISO:
					case DAYOFYEAR:
					case DAYS_BETWEEN:
					case DBCLOB:
					case DEC:
					case DECFLOAT:
					case DECFLOAT_FORMAT:
					case DECFLOAT_SORTKEY:
					case DECIMAL:
					case DECODE:
					case DECRYPT_BINARY:
					case DECRYPT_BIT:
					case DECRYPT_CHAR:
					case DECRYPT_DATAKEY_BIGINT:
					case DECRYPT_DATAKEY_BIT:
					case DECRYPT_DATAKEY_CLOB:
					case DECRYPT_DATAKEY_DBCLOB:
					case DECRYPT_DATAKEY_DECIMAL:
					case DECRYPT_DATAKEY_INTEGER:
					case DECRYPT_DATAKEY_VARCHAR:
					case DECRYPT_DATAKEY_VARGRAPHIC:
					case DECRYPT_DB:
					case DEGREES:
					case DIFFERENCE:
					case DIGITS:
					case DOUBLE_PRECISION:
					case DSN_XMLVALIDATE:
					case EBCDIC_CHR:
					case EBCDIC_STR:
					case ENCRYPT_DATAKEY:
					case ENCRYPT_TDES:
					case EXP:
					case EXTRACT:
					case FLOAT:
					case FLOOR:
					case GENERATE_UNIQUE:
					case GENERATE_UNIQUE_BINARY:
					case GETHINT:
					case GETVARIABLE:
					case GRAPHIC:
					case GREATEST:
					case HASH:
					case HASH_CRC32:
					case HASH_MD5:
					case HASH_SHA1:
					case HASH_SHA256:
					case HEX:
					case IDENTITY_VAL_LOCAL:
					case IFNULL:
					case INSTR:
					case INT:
					case INTEGER:
					case JULIAN_DAY:
					case LAST_DAY:
					case LCASE:
					case LEAST:
					case LENGTH:
					case LN:
					case LOCATE:
					case LOCATE_IN_STRING:
					case LOG10:
					case LOWER:
					case LPAD:
					case LTRIM:
					case MAX:
					case MAX_CARDINALITY:
					case MIDNIGHT_SECONDS:
					case MIN:
					case MINUTE:
					case MOD:
					case MONTHS_BETWEEN:
					case MQREAD:
					case MQREADCLOB:
					case MQRECEIVE:
					case MQRECEIVECLOB:
					case MQSEND:
					case MULTIPLY_ALT:
					case NEXT_DAY:
					case NEXT_MONTH:
					case NORMALIZE_DECFLOAT:
					case NORMALIZE_STRING:
					case NULLIF:
					case NVL:
					case OVERLAY:
					case PACK:
					case POSITION:
					case POSSTR:
					case POW:
					case POWER:
					case QUANTIZE:
					case QUARTER:
					case RADIANS:
					case RAISE_ERROR:
					case RAND:
					case RANDOM:
					case REAL:
					case REGEXP_COUNT:
					case REGEXP_INSTR:
					case REGEXP_LIKE:
					case REGEXP_REPLACE:
					case REGEXP_SUBSTR:
					case REPLACE:
					case RID:
					case ROUND:
					case ROUND_TIMESTAMP:
					case ROWID:
					case RPAD:
					case RTRIM:
					case SCORE:
					case SIGN:
					case SIN:
					case SINH:
					case SMALLINT:
					case SOAPHTTPC:
					case SOAPHTTPNC:
					case SOAPHTTPNV:
					case SOAPHTTPV:
					case SOUNDEX:
					case SPACE:
					case SQRT:
					case STRIP:
					case STRLEFT:
					case STRPOS:
					case STRRIGHT:
					case SUBSTR:
					case SUBSTRING:
					case TAN:
					case TANH:
					case TIME:
					case TIMESTAMP:
					case TIMESTAMPADD:
					case TIMESTAMPDIFF:
					case TIMESTAMP_FORMAT:
					case TIMESTAMP_ISO:
					case TIMESTAMP_TZ:
					case TO_CHAR:
					case TO_CLOB:
					case TO_DATE:
					case TO_NUMBER:
					case TOTALORDER:
					case TO_TIMESTAMP:
					case TRANSLATE:
					case TRIM:
					case TRIM_ARRAY:
					case TRUNC:
					case TRUNC_TIMESTAMP:
					case UCASE:
					case UNICODE:
					case UNICODE_STR:
					case UNISTR:
					case UPPER:
					case VARBINARY:
					case VARCHAR:
					case VARCHAR9:
					case VARCHAR_BIT_FORMAT:
					case VARCHAR_FORMAT:
					case VARGRAPHIC:
					case VERIFY_GROUP_FOR_USER:
					case VERIFY_ROLE_FOR_USER:
					case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
					case WEEK:
					case WEEK_ISO:
					case WRAP:
					case XMLATTRIBUTES:
					case XMLCOMMENT:
					case XMLCONCAT:
					case XMLDOCUMENT:
					case XMLELEMENT:
					case XMLFOREST:
					case XMLMODIFY:
					case XMLPARSE:
					case XMLPI:
					case XMLQUERY:
					case XMLSERIALIZE:
					case XMLTEXT:
					case XMLXSROBJECTID:
					case XSLTRANSFORM:
					case CURRENT_ACCELERATOR:
					case CURRENT_APPLICATION_COMPATIBILITY:
					case CURRENT_APPLICATION_ENCODING_SCHEME:
					case CURRENT_CLIENT_ACCTNG:
					case CURRENT_CLIENT_APPLNAME:
					case CURRENT_CLIENT_CORR_TOKEN:
					case CURRENT_CLIENT_USERID:
					case CURRENT_CLIENT_WRKSTNNAME:
					case CURRENT_DATE:
					case CURRENT_DEBUG_MODE:
					case CURRENT_DECFLOAT_ROUNDING_MODE:
					case CURRENT_DEGREE:
					case CURRENT_EXPLAIN_MODE:
					case CURRENT_GET_ACCEL_ARCHIVE:
					case CURRENT_LOCALE_LC_CTYPE:
					case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
					case CURRENT_MEMBER:
					case CURRENT_OPTIMIZATION_HINT:
					case CURRENT_PACKAGE_PATH:
					case CURRENT_PACKAGESET:
					case CURRENT_PATH:
					case CURRENT_PRECISION:
					case CURRENT_QUERY_ACCELERATION:
					case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
					case CURRENT_REFRESH_AGE:
					case CURRENT_ROUTINE_VERSION:
					case CURRENT_RULES:
					case CURRENT_SCHEMA:
					case CURRENT_SERVER:
					case CURRENT_SQLID:
					case CURRENT_TEMPORAL_BUSINESS_TIME:
					case CURRENT_TEMPORAL_SYSTEM_TIME:
					case CURRENT_TIME:
					case CURRENT_TIMESTAMP:
					case CURRENT_TIME_ZONE:
					case ENCRYPTION_PASSWORD:
					case SESSION_TIME_ZONE:
					case SESSION_USER:
					case USER:
					case ADMIN_TASK_LIST:
					case ADMIN_TASK_OUTPUT:
					case ADMIN_TASK_STATUS:
					case BLOCKING_THREADS:
					case MQREADALL:
					case MQREADALLCLOB:
					case MQRECEIVEALL:
					case MQRECEIVEALLCLOB:
					case XMLTABLE:
					case SQLIDENTIFIER:
						{
						setState(8440);
						identifier();
						}
						break;
					case NUMERICLITERAL:
						{
						setState(8441);
						match(NUMERICLITERAL);
						}
						break;
					case INTEGERLITERAL:
						{
						setState(8442);
						match(INTEGERLITERAL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					} 
				}
				setState(8449);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1005,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public IndexNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterIndexName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitIndexName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitIndexName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexNameContext indexName() throws RecognitionException {
		IndexNameContext _localctx = new IndexNameContext(_ctx, getState());
		enterRule(_localctx, 1116, RULE_indexName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8453);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1006,_ctx) ) {
			case 1:
				{
				setState(8450);
				schemaName();
				setState(8451);
				match(DOT);
				}
				break;
			}
			setState(8455);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MaskNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public MaskNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_maskName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterMaskName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitMaskName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitMaskName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MaskNameContext maskName() throws RecognitionException {
		MaskNameContext _localctx = new MaskNameContext(_ctx, getState());
		enterRule(_localctx, 1118, RULE_maskName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8460);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1007,_ctx) ) {
			case 1:
				{
				setState(8457);
				schemaName();
				setState(8458);
				match(DOT);
				}
				break;
			}
			setState(8462);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PermissionNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public PermissionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_permissionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPermissionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPermissionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPermissionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PermissionNameContext permissionName() throws RecognitionException {
		PermissionNameContext _localctx = new PermissionNameContext(_ctx, getState());
		enterRule(_localctx, 1120, RULE_permissionName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8467);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1008,_ctx) ) {
			case 1:
				{
				setState(8464);
				schemaName();
				setState(8465);
				match(DOT);
				}
				break;
			}
			setState(8469);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcedureNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public LocationNameContext locationName() {
			return getRuleContext(LocationNameContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(DB2zSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(DB2zSQLParser.DOT, i);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public ProcedureNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterProcedureName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitProcedureName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitProcedureName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProcedureNameContext procedureName() throws RecognitionException {
		ProcedureNameContext _localctx = new ProcedureNameContext(_ctx, getState());
		enterRule(_localctx, 1122, RULE_procedureName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8479);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1009,_ctx) ) {
			case 1:
				{
				{
				setState(8471);
				locationName();
				setState(8472);
				match(DOT);
				setState(8473);
				schemaName();
				setState(8474);
				match(DOT);
				}
				}
				break;
			case 2:
				{
				{
				setState(8476);
				schemaName();
				setState(8477);
				match(DOT);
				}
				}
				break;
			}
			setState(8481);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SequenceNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public SequenceNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequenceName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSequenceName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSequenceName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSequenceName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SequenceNameContext sequenceName() throws RecognitionException {
		SequenceNameContext _localctx = new SequenceNameContext(_ctx, getState());
		enterRule(_localctx, 1124, RULE_sequenceName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8486);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1010,_ctx) ) {
			case 1:
				{
				setState(8483);
				schemaName();
				setState(8484);
				match(DOT);
				}
				break;
			}
			setState(8488);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MemberNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public MemberNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_memberName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterMemberName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitMemberName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitMemberName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MemberNameContext memberName() throws RecognitionException {
		MemberNameContext _localctx = new MemberNameContext(_ctx, getState());
		enterRule(_localctx, 1126, RULE_memberName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8490);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DatabaseNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public DatabaseNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_databaseName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDatabaseName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDatabaseName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDatabaseName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DatabaseNameContext databaseName() throws RecognitionException {
		DatabaseNameContext _localctx = new DatabaseNameContext(_ctx, getState());
		enterRule(_localctx, 1128, RULE_databaseName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8492);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablespaceNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TablespaceNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablespaceName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTablespaceName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTablespaceName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTablespaceName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablespaceNameContext tablespaceName() throws RecognitionException {
		TablespaceNameContext _localctx = new TablespaceNameContext(_ctx, getState());
		enterRule(_localctx, 1130, RULE_tablespaceName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8494);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AcceleratorNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public AcceleratorNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_acceleratorName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAcceleratorName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAcceleratorName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAcceleratorName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AcceleratorNameContext acceleratorName() throws RecognitionException {
		AcceleratorNameContext _localctx = new AcceleratorNameContext(_ctx, getState());
		enterRule(_localctx, 1132, RULE_acceleratorName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8496);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CatalogNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public CatalogNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_catalogName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCatalogName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCatalogName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCatalogName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CatalogNameContext catalogName() throws RecognitionException {
		CatalogNameContext _localctx = new CatalogNameContext(_ctx, getState());
		enterRule(_localctx, 1134, RULE_catalogName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8498);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TriggerNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTriggerName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTriggerName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTriggerName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerNameContext triggerName() throws RecognitionException {
		TriggerNameContext _localctx = new TriggerNameContext(_ctx, getState());
		enterRule(_localctx, 1136, RULE_triggerName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8500);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ContextNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ContextNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_contextName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterContextName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitContextName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitContextName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ContextNameContext contextName() throws RecognitionException {
		ContextNameContext _localctx = new ContextNameContext(_ctx, getState());
		enterRule(_localctx, 1138, RULE_contextName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8502);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AuthorizationNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public AuthorizationNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_authorizationName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAuthorizationName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAuthorizationName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAuthorizationName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AuthorizationNameContext authorizationName() throws RecognitionException {
		AuthorizationNameContext _localctx = new AuthorizationNameContext(_ctx, getState());
		enterRule(_localctx, 1140, RULE_authorizationName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8504);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProfileNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ProfileNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_profileName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterProfileName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitProfileName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitProfileName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProfileNameContext profileName() throws RecognitionException {
		ProfileNameContext _localctx = new ProfileNameContext(_ctx, getState());
		enterRule(_localctx, 1142, RULE_profileName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8506);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public RoleNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRoleName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRoleName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRoleName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleNameContext roleName() throws RecognitionException {
		RoleNameContext _localctx = new RoleNameContext(_ctx, getState());
		enterRule(_localctx, 1144, RULE_roleName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8508);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SeclabelNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SeclabelNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seclabelName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSeclabelName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSeclabelName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSeclabelName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SeclabelNameContext seclabelName() throws RecognitionException {
		SeclabelNameContext _localctx = new SeclabelNameContext(_ctx, getState());
		enterRule(_localctx, 1146, RULE_seclabelName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8510);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ParameterNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterParameterName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitParameterName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitParameterName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParameterNameContext parameterName() throws RecognitionException {
		ParameterNameContext _localctx = new ParameterNameContext(_ctx, getState());
		enterRule(_localctx, 1148, RULE_parameterName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8512);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AddressValueContext extends ParserRuleContext {
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public AddressValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_addressValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAddressValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAddressValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAddressValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AddressValueContext addressValue() throws RecognitionException {
		AddressValueContext _localctx = new AddressValueContext(_ctx, getState());
		enterRule(_localctx, 1150, RULE_addressValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8514);
			match(NONNUMERICLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JobnameValueContext extends ParserRuleContext {
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public JobnameValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jobnameValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterJobnameValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitJobnameValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitJobnameValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JobnameValueContext jobnameValue() throws RecognitionException {
		JobnameValueContext _localctx = new JobnameValueContext(_ctx, getState());
		enterRule(_localctx, 1152, RULE_jobnameValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8516);
			match(NONNUMERICLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ServauthValueContext extends ParserRuleContext {
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public ServauthValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_servauthValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterServauthValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitServauthValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitServauthValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ServauthValueContext servauthValue() throws RecognitionException {
		ServauthValueContext _localctx = new ServauthValueContext(_ctx, getState());
		enterRule(_localctx, 1154, RULE_servauthValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8518);
			match(NONNUMERICLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EncryptionValueContext extends ParserRuleContext {
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public EncryptionValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_encryptionValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterEncryptionValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitEncryptionValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitEncryptionValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EncryptionValueContext encryptionValue() throws RecognitionException {
		EncryptionValueContext _localctx = new EncryptionValueContext(_ctx, getState());
		enterRule(_localctx, 1156, RULE_encryptionValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8520);
			match(NONNUMERICLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BpNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public BpNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bpName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterBpName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitBpName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitBpName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BpNameContext bpName() throws RecognitionException {
		BpNameContext _localctx = new BpNameContext(_ctx, getState());
		enterRule(_localctx, 1158, RULE_bpName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8522);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StogroupNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public StogroupNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stogroupName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterStogroupName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitStogroupName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitStogroupName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StogroupNameContext stogroupName() throws RecognitionException {
		StogroupNameContext _localctx = new StogroupNameContext(_ctx, getState());
		enterRule(_localctx, 1160, RULE_stogroupName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8524);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DcNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public DcNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dcName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDcName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDcName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDcName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DcNameContext dcName() throws RecognitionException {
		DcNameContext _localctx = new DcNameContext(_ctx, getState());
		enterRule(_localctx, 1162, RULE_dcName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8526);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class McNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public McNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mcName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterMcName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitMcName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitMcName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final McNameContext mcName() throws RecognitionException {
		McNameContext _localctx = new McNameContext(_ctx, getState());
		enterRule(_localctx, 1164, RULE_mcName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8528);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ScNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterScName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitScName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitScName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ScNameContext scName() throws RecognitionException {
		ScNameContext _localctx = new ScNameContext(_ctx, getState());
		enterRule(_localctx, 1166, RULE_scName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8530);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VolumeIDContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public VolumeIDContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_volumeID; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterVolumeID(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitVolumeID(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitVolumeID(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VolumeIDContext volumeID() throws RecognitionException {
		VolumeIDContext _localctx = new VolumeIDContext(_ctx, getState());
		enterRule(_localctx, 1168, RULE_volumeID);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8532);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyLabelNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public KeyLabelNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyLabelName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterKeyLabelName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitKeyLabelName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitKeyLabelName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyLabelNameContext keyLabelName() throws RecognitionException {
		KeyLabelNameContext _localctx = new KeyLabelNameContext(_ctx, getState());
		enterRule(_localctx, 1170, RULE_keyLabelName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8536);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INSTEAD:
			case NEW:
			case NEW_TABLE:
			case OLD_TABLE:
			case REFERENCING:
			case BASED:
			case UPON:
			case ADD:
			case AFTER:
			case ALL:
			case ALLOCATE:
			case ALLOW:
			case ALTER:
			case ALTERAND:
			case ANY:
			case ARRAY:
			case ARRAY_EXISTS:
			case AS:
			case ASENSITIVE:
			case ASSOCIATE:
			case ASUTIME:
			case AT:
			case AUDIT:
			case AUX:
			case AUXILIARY:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BUFFERPOOL:
			case BUFFERPOOLS:
			case BY:
			case CALL:
			case CAPTURE:
			case CASCADED:
			case CASE:
			case CAST:
			case CCSID:
			case CHAR:
			case CHARACTER:
			case CHECK:
			case CLONE:
			case CLOSE:
			case CLUSTER:
			case COLLECTION:
			case COLLID:
			case COLUMN:
			case COMMENT:
			case COMMIT:
			case CONCAT:
			case CONDITION:
			case CONNECT:
			case CONNECTION:
			case CONSTRAINT:
			case CONTAINS:
			case CONTENT:
			case CONTINUE:
			case CREATE:
			case CUBE:
			case CURRENT:
			case CURRENT_LC_CTYPE:
			case CURRVAL:
			case CURSOR:
			case DATA:
			case DATABASE:
			case DAY:
			case DAYS:
			case DBINFO:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DISABLE:
			case DISALLOW:
			case DISTINCT:
			case DO:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSSIZE:
			case DYNAMIC:
			case EDITPROC:
			case ELSE:
			case ELSEIF:
			case ENCODING:
			case ENCRYPTION:
			case END:
			case END_EXEC:
			case ENDING:
			case ERASE:
			case ESCAPE:
			case EXCEPT:
			case EXCEPTION:
			case EXEC_SQL:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case FENCED:
			case FETCH:
			case FIELDPROC:
			case FINAL:
			case FIRST:
			case FOR:
			case FREE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANT:
			case GROUP:
			case HANDLER:
			case HAVING:
			case HOLD:
			case HOUR:
			case HOURS:
			case IF:
			case IMMEDIATE:
			case IN:
			case INCLUSIVE:
			case INDEX:
			case INDEXBP:
			case INHERIT:
			case INNER:
			case INOUT:
			case INSENSITIVE:
			case INSERT:
			case INTERSECT:
			case INTO:
			case IS:
			case ISOBID:
			case ITERATE:
			case JAR:
			case JOIN:
			case KEEP:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LAST:
			case LC_CTYPE:
			case LEAVE:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOCALE:
			case LOCATOR:
			case LOCATORS:
			case LOCK:
			case LOCKMAX:
			case LOCKSIZE:
			case LONG:
			case LOOP:
			case MAINTAINED:
			case MATERIALIZED:
			case MICROSECOND:
			case MICROSECONDS:
			case MODIFIES:
			case MONTH:
			case MONTHS:
			case NEXT:
			case NEXTVAL:
			case NO:
			case NONE:
			case NOT:
			case NULL:
			case NULLS:
			case NUMPARTS:
			case OBID:
			case OF:
			case OFFSET:
			case OLD:
			case ON:
			case OPEN:
			case OPTIMIZATION:
			case OPTIMIZE:
			case OR:
			case ORDER:
			case ORGANIZATION:
			case OUT:
			case OUTER:
			case PACKAGE:
			case PADDED:
			case PARAMETER:
			case PART:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONING:
			case PATH:
			case PERIOD:
			case PIECESIZE:
			case PLAN:
			case PRECISION:
			case PREPARE:
			case PREVVAL:
			case PRIOR:
			case PRIQTY:
			case PRIVILEGES:
			case PROCEDURE:
			case PROGRAM:
			case PSID:
			case PUBLIC:
			case QUERY:
			case QUERYNO:
			case READS:
			case REFERENCES:
			case REFRESH:
			case RELEASE:
			case RENAME:
			case REPEAT:
			case RESIGNAL:
			case RESTRICT:
			case RESULT:
			case RESULT_SET_LOCATOR:
			case RETURN:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUND_CEILING:
			case ROUND_DOWN:
			case ROUND_FLOOR:
			case ROUND_HALF_DOWN:
			case ROUND_HALF_EVEN:
			case ROUND_HALF_UP:
			case ROUND_UP:
			case ROW:
			case ROWSET:
			case RUN:
			case SAVEPOINT:
			case SCHEMA:
			case SCRATCHPAD:
			case SECOND:
			case SECONDS:
			case SECQTY:
			case SECURITY:
			case SELECT:
			case SENSITIVE:
			case SEQUENCE:
			case SET:
			case SIGNAL:
			case SIMPLE:
			case SOME:
			case SOURCE:
			case SPECIFIC:
			case STANDARD:
			case STATEMENT:
			case STATIC:
			case STAY:
			case STOGROUP:
			case STORES:
			case STYLE:
			case SUMMARY:
			case SYNONYM:
			case SYSDATE:
			case SYSTEM:
			case SYSTIMESTAMP:
			case TABLE:
			case TABLESPACE:
			case THEN:
			case TO:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNDO:
			case UNION:
			case UNIQUE:
			case UNTIL:
			case UPDATE:
			case USING:
			case VALIDPROC:
			case VALUE:
			case VALUES:
			case VARIABLE:
			case VARIANT:
			case VCAT:
			case VERSIONING:
			case VIEW:
			case VOLATILE:
			case VOLUMES:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WLM:
			case XMLCAST:
			case XMLEXISTS:
			case XMLNAMESPACES:
			case YEAR:
			case YEARS:
			case ZONE:
			case AND:
			case ARRAY_AGG:
			case ASC:
			case AVG:
			case BIT:
			case CHANGE:
			case CODEUNITS16:
			case CODEUNITS32:
			case CORR:
			case CORRELATION:
			case COUNT:
			case COUNT_BIG:
			case COVAR:
			case COVARIANCE:
			case COVARIANCE_SAMP:
			case COVAR_POP:
			case COVAR_SAMP:
			case CS:
			case CUME_DIST:
			case DENSE_RANK:
			case DESC:
			case EBCDIC:
			case EXCLUSIVE:
			case FIRST_VALUE:
			case FOLLOWING:
			case GROUPING:
			case IGNORE:
			case INDICATOR:
			case INPUT:
			case ISNULL:
			case LAG:
			case LARGE:
			case LAST_VALUE:
			case LEAD:
			case LISTAGG:
			case LOCKED:
			case LOCKS:
			case MEDIAN:
			case MINUTES:
			case MIXED:
			case NOTNULL:
			case NTH_VALUE:
			case NTILE:
			case NUMERIC:
			case OBJECT:
			case OCTETS:
			case ONLY:
			case OVER:
			case PASSING:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PERCENT_RANK:
			case PRECEDING:
			case PREVIOUS:
			case RANGE:
			case RANK:
			case RATIO_TO_REPORT:
			case READ:
			case REF:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_ICPT:
			case REGR_INTERCEPT:
			case REGR_R2:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case RESPECT:
			case ROW_NUMBER:
			case ROWS:
			case RR:
			case RS:
			case SBCS:
			case SELECTIVITY:
			case SETS:
			case SHARE:
			case SKIP_:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case TOKEN:
			case UNBOUNDED:
			case UNPACK:
			case UR:
			case USE:
			case VAR:
			case VARIANCE:
			case VARIANCE_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARYING:
			case WITHOUT:
			case XML:
			case XMLAGG:
			case COLUMNS:
			case SQLID:
			case ORDINALITY:
			case SYSTEM_TIME:
			case BUSINESS_TIME:
			case MULTIPLIER:
			case UNNEST:
			case CROSS:
			case CALLER:
			case CLIENT:
			case POSITIONING:
			case SCROLL:
			case ACTION:
			case ASSEMBLE:
			case C_:
			case CALLED:
			case COBOL:
			case DB2:
			case DEFINER:
			case DISPATCH:
			case ENVIRONMENT:
			case FAILURE:
			case FAILURES:
			case JAVA:
			case MAIN:
			case NAME:
			case OPTIONS:
			case PARALLEL:
			case PLI:
			case REGISTERS:
			case RESIDENT:
			case SECURED:
			case SPECIAL:
			case SQL:
			case STOP:
			case SUB:
			case YES:
			case APPLICATION:
			case CHANGED:
			case COMPATIBILITY:
			case COMPRESS:
			case COPY:
			case FREEPAGE:
			case GBPCACHE:
			case INCLUDE:
			case MAXVALUE:
			case MINVALUE:
			case PCTFREE:
			case REGENERATE:
			case MASK:
			case ENABLE:
			case PERMISSION:
			case ATOMIC:
			case SQLEXCEPTION:
			case MERGE:
			case MATCHED:
			case SQLSTATE:
			case MESSAGE_TEXT:
			case OVERRIDING:
			case PORTION:
			case DB2SQL:
			case DEBUG:
			case GENERAL:
			case MODE_:
			case REXX:
			case CACHE:
			case CYCLE:
			case INCREMENT:
			case RESTART:
			case DATACLAS:
			case MGMTCLAS:
			case REMOVE:
			case STORCLAS:
			case ACCESS:
			case ACTIVATE:
			case ALWAYS:
			case APPEND:
			case ARCHIVE:
			case BUSINESS:
			case CASCADE:
			case CHANGES:
			case CONTROL:
			case DEACTIVATE:
			case DEFERRED:
			case EACH:
			case ENFORCED:
			case EXTRA:
			case FOREIGN:
			case HIDDEN_:
			case HISTORY:
			case ID:
			case IDENTITY:
			case IMPLICITLY:
			case INITIALLY:
			case INLINE:
			case OPERATION:
			case ORGANIZE:
			case OVERLAPS:
			case PACKAGE_NAME:
			case PACKAGE_SCHEMA:
			case PACKAGE_VERSION:
			case PRIMARY:
			case RESET:
			case ROTATE:
			case START:
			case SYSIBM:
			case TRANSACTION:
			case XMLSCHEMA:
			case ELEMENT:
			case URL:
			case NAMESPACE:
			case LOCATION:
			case SYSXSR:
			case ALGORITHM:
			case FIXEDLENGTH:
			case HUFFMAN:
			case LOB:
			case LOG:
			case LOGGED:
			case MAXPARTITIONS:
			case MAXROWS:
			case MEMBER:
			case MOVE:
			case PAGE:
			case PAGENUM:
			case PENDING:
			case RELATIVE:
			case SEGSIZE:
			case TRACKMOD:
			case ADDRESS:
			case ATTRIBUTES:
			case AUTHENTICATION:
			case AUTHID:
			case CONTEXT:
			case JOBNAME:
			case OWNER:
			case PROFILE:
			case QUALIFIER:
			case SERVAUTH:
			case TRUSTED:
			case SECTION:
			case ACTIVE:
			case VERSION:
			case ALIAS:
			case WORK:
			case WORKFILE:
			case SYSDEFLT:
			case NULTERM:
			case STRUCTURE:
			case GENERIC:
			case TEMPORARY:
			case DEFER:
			case DEFINE:
			case EXCLUDE:
			case GENERATE:
			case KEYS:
			case XMLPATTERN:
			case SIZE:
			case EVERY:
			case ABSOLUTE:
			case ACCELERATOR:
			case EXCLUDING:
			case INCLUDING:
			case DEFAULTS:
			case MODIFIERS:
			case OPTION:
			case PRESERVE:
			case BOTH:
			case DESCRIBE:
			case LABELS:
			case NAMES:
			case OUTPUT:
			case EXCHANGE:
			case STABILIZED:
			case STMTCACHE:
			case STMTID:
			case STMTTOKEN:
			case STARTING:
			case CATALOG_NAME:
			case CONDITION_NUMBER:
			case CURSOR_NAME:
			case DB2_AUTHENTICATION_TYPE:
			case DB2_AUTHORIZATION_ID:
			case DB2_CONNECTION_STATE:
			case DB2_CONNECTION_STATUS:
			case DB2_ENCRYPTION_TYPE:
			case DB2_ERROR_CODE1:
			case DB2_ERROR_CODE2:
			case DB2_ERROR_CODE3:
			case DB2_ERROR_CODE4:
			case DB2_GET_DIAGNOSTICS_DIAGNOSTICS:
			case DB2_INTERNAL_ERROR_POINTER:
			case DB2_LAST_ROW:
			case DB2_LINE_NUMBER:
			case DB2_MESSAGE_ID:
			case DB2_MODULE_DETECTING_ERROR:
			case DB2_NUMBER_PARAMETER_MARKERS:
			case DB2_NUMBER_RESULT_SETS:
			case DB2_NUMBER_ROWS:
			case DB2_ORDINAL_TOKEN_:
			case DB2_PRODUCT_ID:
			case DB2_REASON_CODE:
			case DB2_RETURNED_SQLCODE:
			case DB2_RETURN_STATUS:
			case DB2_ROW_NUMBER:
			case DB2_SERVER_CLASS_NAME:
			case DB2_SQL_ATTR_CURSOR_HOLD:
			case DB2_SQL_ATTR_CURSOR_ROWSET:
			case DB2_SQL_ATTR_CURSOR_SCROLLABLE:
			case DB2_SQL_ATTR_CURSOR_SENSITIVITY:
			case DB2_SQL_ATTR_CURSOR_TYPE:
			case DB2_SQLERRD1:
			case DB2_SQLERRD2:
			case DB2_SQLERRD3:
			case DB2_SQLERRD4:
			case DB2_SQLERRD5:
			case DB2_SQLERRD6:
			case DB2_SQLERRD_SET:
			case DB2_SQL_NESTING_LEVEL:
			case DB2_TOKEN_COUNT:
			case DIAGNOSTICS:
			case MORE_:
			case NUMBER:
			case RETURNED_SQLSTATE:
			case ROW_COUNT:
			case SERVER_NAME:
			case STACKED:
			case CREATETAB:
			case CREATETS:
			case DBADM:
			case DBCTRL:
			case DBMAINT:
			case DISPLAYDB:
			case IMAGCOPY:
			case LOAD:
			case PACKADM:
			case RECOVERDB:
			case REORG:
			case REPAIR:
			case STARTDB:
			case STATS:
			case STOPDB:
			case BIND:
			case ALTERIN:
			case CREATEIN:
			case DROPIN:
			case USAGE:
			case ACCESSCTRL:
			case BINDADD:
			case BINDAGENT:
			case BSDS:
			case CREATEALIAS:
			case CREATEDBA:
			case CREATEDBC:
			case CREATE_SECURE_OBJECT:
			case CREATESG:
			case CREATETMTAB:
			case DATAACCESS:
			case DEBUGSESSION:
			case DISPLAY:
			case MONITOR1:
			case MONITOR2:
			case RECOVER:
			case SQLADM:
			case STOPALL:
			case STOSPACE:
			case SYSADM:
			case SYSCTRL:
			case SYSOPR:
			case TRACE:
			case UNLOAD:
			case WRITE:
			case ABS:
			case ABSVAL:
			case ACOS:
			case ADD_DAYS:
			case ADD_MONTHS:
			case ARRAY_DELETE:
			case ARRAY_FIRST:
			case ARRAY_LAST:
			case ARRAY_NEXT:
			case ARRAY_PRIOR:
			case ARRAY_TRIM:
			case ASCII:
			case ASCII_CHR:
			case ASCIISTR:
			case ASCII_STR:
			case ASIN:
			case ATAN:
			case ATAN2:
			case ATANH:
			case BIGINT:
			case BINARY:
			case BITAND:
			case BITANDNOT:
			case BITNOT:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BTRIM:
			case CARDINALITY:
			case CCSID_ENCODING:
			case CEIL:
			case CEILING:
			case CHAR9:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case CHR:
			case CLOB:
			case COALESCE:
			case COLLATION_KEY:
			case COMPARE_DECFLOAT:
			case COS:
			case COSH:
			case DATE:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFWEEK_ISO:
			case DAYOFYEAR:
			case DAYS_BETWEEN:
			case DBCLOB:
			case DEC:
			case DECFLOAT:
			case DECFLOAT_FORMAT:
			case DECFLOAT_SORTKEY:
			case DECIMAL:
			case DECODE:
			case DECRYPT_BINARY:
			case DECRYPT_BIT:
			case DECRYPT_CHAR:
			case DECRYPT_DATAKEY_BIGINT:
			case DECRYPT_DATAKEY_BIT:
			case DECRYPT_DATAKEY_CLOB:
			case DECRYPT_DATAKEY_DBCLOB:
			case DECRYPT_DATAKEY_DECIMAL:
			case DECRYPT_DATAKEY_INTEGER:
			case DECRYPT_DATAKEY_VARCHAR:
			case DECRYPT_DATAKEY_VARGRAPHIC:
			case DECRYPT_DB:
			case DEGREES:
			case DIFFERENCE:
			case DIGITS:
			case DOUBLE_PRECISION:
			case DSN_XMLVALIDATE:
			case EBCDIC_CHR:
			case EBCDIC_STR:
			case ENCRYPT_DATAKEY:
			case ENCRYPT_TDES:
			case EXP:
			case EXTRACT:
			case FLOAT:
			case FLOOR:
			case GENERATE_UNIQUE:
			case GENERATE_UNIQUE_BINARY:
			case GETHINT:
			case GETVARIABLE:
			case GRAPHIC:
			case GREATEST:
			case HASH:
			case HASH_CRC32:
			case HASH_MD5:
			case HASH_SHA1:
			case HASH_SHA256:
			case HEX:
			case IDENTITY_VAL_LOCAL:
			case IFNULL:
			case INSTR:
			case INT:
			case INTEGER:
			case JULIAN_DAY:
			case LAST_DAY:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LN:
			case LOCATE:
			case LOCATE_IN_STRING:
			case LOG10:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAX:
			case MAX_CARDINALITY:
			case MIDNIGHT_SECONDS:
			case MIN:
			case MINUTE:
			case MOD:
			case MONTHS_BETWEEN:
			case MQREAD:
			case MQREADCLOB:
			case MQRECEIVE:
			case MQRECEIVECLOB:
			case MQSEND:
			case MULTIPLY_ALT:
			case NEXT_DAY:
			case NEXT_MONTH:
			case NORMALIZE_DECFLOAT:
			case NORMALIZE_STRING:
			case NULLIF:
			case NVL:
			case OVERLAY:
			case PACK:
			case POSITION:
			case POSSTR:
			case POW:
			case POWER:
			case QUANTIZE:
			case QUARTER:
			case RADIANS:
			case RAISE_ERROR:
			case RAND:
			case RANDOM:
			case REAL:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REPLACE:
			case RID:
			case ROUND:
			case ROUND_TIMESTAMP:
			case ROWID:
			case RPAD:
			case RTRIM:
			case SCORE:
			case SIGN:
			case SIN:
			case SINH:
			case SMALLINT:
			case SOAPHTTPC:
			case SOAPHTTPNC:
			case SOAPHTTPNV:
			case SOAPHTTPV:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STRIP:
			case STRLEFT:
			case STRPOS:
			case STRRIGHT:
			case SUBSTR:
			case SUBSTRING:
			case TAN:
			case TANH:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIMESTAMP_FORMAT:
			case TIMESTAMP_ISO:
			case TIMESTAMP_TZ:
			case TO_CHAR:
			case TO_CLOB:
			case TO_DATE:
			case TO_NUMBER:
			case TOTALORDER:
			case TO_TIMESTAMP:
			case TRANSLATE:
			case TRIM:
			case TRIM_ARRAY:
			case TRUNC:
			case TRUNC_TIMESTAMP:
			case UCASE:
			case UNICODE:
			case UNICODE_STR:
			case UNISTR:
			case UPPER:
			case VARBINARY:
			case VARCHAR:
			case VARCHAR9:
			case VARCHAR_BIT_FORMAT:
			case VARCHAR_FORMAT:
			case VARGRAPHIC:
			case VERIFY_GROUP_FOR_USER:
			case VERIFY_ROLE_FOR_USER:
			case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
			case WEEK:
			case WEEK_ISO:
			case WRAP:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLCONCAT:
			case XMLDOCUMENT:
			case XMLELEMENT:
			case XMLFOREST:
			case XMLMODIFY:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLSERIALIZE:
			case XMLTEXT:
			case XMLXSROBJECTID:
			case XSLTRANSFORM:
			case CURRENT_ACCELERATOR:
			case CURRENT_APPLICATION_COMPATIBILITY:
			case CURRENT_APPLICATION_ENCODING_SCHEME:
			case CURRENT_CLIENT_ACCTNG:
			case CURRENT_CLIENT_APPLNAME:
			case CURRENT_CLIENT_CORR_TOKEN:
			case CURRENT_CLIENT_USERID:
			case CURRENT_CLIENT_WRKSTNNAME:
			case CURRENT_DATE:
			case CURRENT_DEBUG_MODE:
			case CURRENT_DECFLOAT_ROUNDING_MODE:
			case CURRENT_DEGREE:
			case CURRENT_EXPLAIN_MODE:
			case CURRENT_GET_ACCEL_ARCHIVE:
			case CURRENT_LOCALE_LC_CTYPE:
			case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
			case CURRENT_MEMBER:
			case CURRENT_OPTIMIZATION_HINT:
			case CURRENT_PACKAGE_PATH:
			case CURRENT_PACKAGESET:
			case CURRENT_PATH:
			case CURRENT_PRECISION:
			case CURRENT_QUERY_ACCELERATION:
			case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
			case CURRENT_REFRESH_AGE:
			case CURRENT_ROUTINE_VERSION:
			case CURRENT_RULES:
			case CURRENT_SCHEMA:
			case CURRENT_SERVER:
			case CURRENT_SQLID:
			case CURRENT_TEMPORAL_BUSINESS_TIME:
			case CURRENT_TEMPORAL_SYSTEM_TIME:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_TIME_ZONE:
			case ENCRYPTION_PASSWORD:
			case SESSION_TIME_ZONE:
			case SESSION_USER:
			case USER:
			case ADMIN_TASK_LIST:
			case ADMIN_TASK_OUTPUT:
			case ADMIN_TASK_STATUS:
			case BLOCKING_THREADS:
			case MQREADALL:
			case MQREADALLCLOB:
			case MQRECEIVEALL:
			case MQRECEIVEALLCLOB:
			case XMLTABLE:
			case SQLIDENTIFIER:
				{
				setState(8534);
				identifier();
				}
				break;
			case NONNUMERICLITERAL:
				{
				setState(8535);
				match(NONNUMERICLITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public FunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFunctionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFunctionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFunctionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionNameContext functionName() throws RecognitionException {
		FunctionNameContext _localctx = new FunctionNameContext(_ctx, getState());
		enterRule(_localctx, 1172, RULE_functionName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8541);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1012,_ctx) ) {
			case 1:
				{
				setState(8538);
				schemaName();
				setState(8539);
				match(DOT);
				}
				break;
			}
			setState(8543);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SpecificNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public SpecificNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_specificName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSpecificName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSpecificName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSpecificName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SpecificNameContext specificName() throws RecognitionException {
		SpecificNameContext _localctx = new SpecificNameContext(_ctx, getState());
		enterRule(_localctx, 1174, RULE_specificName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8548);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1013,_ctx) ) {
			case 1:
				{
				setState(8545);
				schemaName();
				setState(8546);
				match(DOT);
				}
				break;
			}
			setState(8550);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HostVariableContext extends ParserRuleContext {
		public List<TerminalNode> COLON() { return getTokens(DB2zSQLParser.COLON); }
		public TerminalNode COLON(int i) {
			return getToken(DB2zSQLParser.COLON, i);
		}
		public List<HostIdentifierContext> hostIdentifier() {
			return getRuleContexts(HostIdentifierContext.class);
		}
		public HostIdentifierContext hostIdentifier(int i) {
			return getRuleContext(HostIdentifierContext.class,i);
		}
		public List<HostStructureContext> hostStructure() {
			return getRuleContexts(HostStructureContext.class);
		}
		public HostStructureContext hostStructure(int i) {
			return getRuleContext(HostStructureContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(DB2zSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(DB2zSQLParser.DOT, i);
		}
		public TerminalNode INDICATOR() { return getToken(DB2zSQLParser.INDICATOR, 0); }
		public HostVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hostVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterHostVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitHostVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitHostVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HostVariableContext hostVariable() throws RecognitionException {
		HostVariableContext _localctx = new HostVariableContext(_ctx, getState());
		enterRule(_localctx, 1176, RULE_hostVariable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8552);
			match(COLON);
			setState(8556);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1014,_ctx) ) {
			case 1:
				{
				setState(8553);
				hostStructure();
				setState(8554);
				match(DOT);
				}
				break;
			}
			setState(8558);
			hostIdentifier();
			setState(8569);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1017,_ctx) ) {
			case 1:
				{
				setState(8560);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDICATOR) {
					{
					setState(8559);
					match(INDICATOR);
					}
				}

				setState(8562);
				match(COLON);
				setState(8566);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1016,_ctx) ) {
				case 1:
					{
					setState(8563);
					hostStructure();
					setState(8564);
					match(DOT);
					}
					break;
				}
				setState(8568);
				hostIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HostIdentifierContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public HostIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hostIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterHostIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitHostIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitHostIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HostIdentifierContext hostIdentifier() throws RecognitionException {
		HostIdentifierContext _localctx = new HostIdentifierContext(_ctx, getState());
		enterRule(_localctx, 1178, RULE_hostIdentifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8571);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HostStructureContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public HostStructureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hostStructure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterHostStructure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitHostStructure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitHostStructure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HostStructureContext hostStructure() throws RecognitionException {
		HostStructureContext _localctx = new HostStructureContext(_ctx, getState());
		enterRule(_localctx, 1180, RULE_hostStructure);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8573);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SynonymContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SynonymContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_synonym; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSynonym(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSynonym(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSynonym(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SynonymContext synonym() throws RecognitionException {
		SynonymContext _localctx = new SynonymContext(_ctx, getState());
		enterRule(_localctx, 1182, RULE_synonym);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8575);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public VariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableContext variable() throws RecognitionException {
		VariableContext _localctx = new VariableContext(_ctx, getState());
		enterRule(_localctx, 1184, RULE_variable);
		try {
			setState(8584);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INSTEAD:
			case NEW:
			case NEW_TABLE:
			case OLD_TABLE:
			case REFERENCING:
			case BASED:
			case UPON:
			case ADD:
			case AFTER:
			case ALL:
			case ALLOCATE:
			case ALLOW:
			case ALTER:
			case ALTERAND:
			case ANY:
			case ARRAY:
			case ARRAY_EXISTS:
			case AS:
			case ASENSITIVE:
			case ASSOCIATE:
			case ASUTIME:
			case AT:
			case AUDIT:
			case AUX:
			case AUXILIARY:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BUFFERPOOL:
			case BUFFERPOOLS:
			case BY:
			case CALL:
			case CAPTURE:
			case CASCADED:
			case CASE:
			case CAST:
			case CCSID:
			case CHAR:
			case CHARACTER:
			case CHECK:
			case CLONE:
			case CLOSE:
			case CLUSTER:
			case COLLECTION:
			case COLLID:
			case COLUMN:
			case COMMENT:
			case COMMIT:
			case CONCAT:
			case CONDITION:
			case CONNECT:
			case CONNECTION:
			case CONSTRAINT:
			case CONTAINS:
			case CONTENT:
			case CONTINUE:
			case CREATE:
			case CUBE:
			case CURRENT:
			case CURRENT_LC_CTYPE:
			case CURRVAL:
			case CURSOR:
			case DATA:
			case DATABASE:
			case DAY:
			case DAYS:
			case DBINFO:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DISABLE:
			case DISALLOW:
			case DISTINCT:
			case DO:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSSIZE:
			case DYNAMIC:
			case EDITPROC:
			case ELSE:
			case ELSEIF:
			case ENCODING:
			case ENCRYPTION:
			case END:
			case END_EXEC:
			case ENDING:
			case ERASE:
			case ESCAPE:
			case EXCEPT:
			case EXCEPTION:
			case EXEC_SQL:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case FENCED:
			case FETCH:
			case FIELDPROC:
			case FINAL:
			case FIRST:
			case FOR:
			case FREE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANT:
			case GROUP:
			case HANDLER:
			case HAVING:
			case HOLD:
			case HOUR:
			case HOURS:
			case IF:
			case IMMEDIATE:
			case IN:
			case INCLUSIVE:
			case INDEX:
			case INDEXBP:
			case INHERIT:
			case INNER:
			case INOUT:
			case INSENSITIVE:
			case INSERT:
			case INTERSECT:
			case INTO:
			case IS:
			case ISOBID:
			case ITERATE:
			case JAR:
			case JOIN:
			case KEEP:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LAST:
			case LC_CTYPE:
			case LEAVE:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOCALE:
			case LOCATOR:
			case LOCATORS:
			case LOCK:
			case LOCKMAX:
			case LOCKSIZE:
			case LONG:
			case LOOP:
			case MAINTAINED:
			case MATERIALIZED:
			case MICROSECOND:
			case MICROSECONDS:
			case MODIFIES:
			case MONTH:
			case MONTHS:
			case NEXT:
			case NEXTVAL:
			case NO:
			case NONE:
			case NOT:
			case NULL:
			case NULLS:
			case NUMPARTS:
			case OBID:
			case OF:
			case OFFSET:
			case OLD:
			case ON:
			case OPEN:
			case OPTIMIZATION:
			case OPTIMIZE:
			case OR:
			case ORDER:
			case ORGANIZATION:
			case OUT:
			case OUTER:
			case PACKAGE:
			case PADDED:
			case PARAMETER:
			case PART:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONING:
			case PATH:
			case PERIOD:
			case PIECESIZE:
			case PLAN:
			case PRECISION:
			case PREPARE:
			case PREVVAL:
			case PRIOR:
			case PRIQTY:
			case PRIVILEGES:
			case PROCEDURE:
			case PROGRAM:
			case PSID:
			case PUBLIC:
			case QUERY:
			case QUERYNO:
			case READS:
			case REFERENCES:
			case REFRESH:
			case RELEASE:
			case RENAME:
			case REPEAT:
			case RESIGNAL:
			case RESTRICT:
			case RESULT:
			case RESULT_SET_LOCATOR:
			case RETURN:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUND_CEILING:
			case ROUND_DOWN:
			case ROUND_FLOOR:
			case ROUND_HALF_DOWN:
			case ROUND_HALF_EVEN:
			case ROUND_HALF_UP:
			case ROUND_UP:
			case ROW:
			case ROWSET:
			case RUN:
			case SAVEPOINT:
			case SCHEMA:
			case SCRATCHPAD:
			case SECOND:
			case SECONDS:
			case SECQTY:
			case SECURITY:
			case SELECT:
			case SENSITIVE:
			case SEQUENCE:
			case SET:
			case SIGNAL:
			case SIMPLE:
			case SOME:
			case SOURCE:
			case SPECIFIC:
			case STANDARD:
			case STATEMENT:
			case STATIC:
			case STAY:
			case STOGROUP:
			case STORES:
			case STYLE:
			case SUMMARY:
			case SYNONYM:
			case SYSDATE:
			case SYSTEM:
			case SYSTIMESTAMP:
			case TABLE:
			case TABLESPACE:
			case THEN:
			case TO:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNDO:
			case UNION:
			case UNIQUE:
			case UNTIL:
			case UPDATE:
			case USING:
			case VALIDPROC:
			case VALUE:
			case VALUES:
			case VARIABLE:
			case VARIANT:
			case VCAT:
			case VERSIONING:
			case VIEW:
			case VOLATILE:
			case VOLUMES:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WLM:
			case XMLCAST:
			case XMLEXISTS:
			case XMLNAMESPACES:
			case YEAR:
			case YEARS:
			case ZONE:
			case AND:
			case ARRAY_AGG:
			case ASC:
			case AVG:
			case BIT:
			case CHANGE:
			case CODEUNITS16:
			case CODEUNITS32:
			case CORR:
			case CORRELATION:
			case COUNT:
			case COUNT_BIG:
			case COVAR:
			case COVARIANCE:
			case COVARIANCE_SAMP:
			case COVAR_POP:
			case COVAR_SAMP:
			case CS:
			case CUME_DIST:
			case DENSE_RANK:
			case DESC:
			case EBCDIC:
			case EXCLUSIVE:
			case FIRST_VALUE:
			case FOLLOWING:
			case GROUPING:
			case IGNORE:
			case INDICATOR:
			case INPUT:
			case ISNULL:
			case LAG:
			case LARGE:
			case LAST_VALUE:
			case LEAD:
			case LISTAGG:
			case LOCKED:
			case LOCKS:
			case MEDIAN:
			case MINUTES:
			case MIXED:
			case NOTNULL:
			case NTH_VALUE:
			case NTILE:
			case NUMERIC:
			case OBJECT:
			case OCTETS:
			case ONLY:
			case OVER:
			case PASSING:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PERCENT_RANK:
			case PRECEDING:
			case PREVIOUS:
			case RANGE:
			case RANK:
			case RATIO_TO_REPORT:
			case READ:
			case REF:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_ICPT:
			case REGR_INTERCEPT:
			case REGR_R2:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case RESPECT:
			case ROW_NUMBER:
			case ROWS:
			case RR:
			case RS:
			case SBCS:
			case SELECTIVITY:
			case SETS:
			case SHARE:
			case SKIP_:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case TOKEN:
			case UNBOUNDED:
			case UNPACK:
			case UR:
			case USE:
			case VAR:
			case VARIANCE:
			case VARIANCE_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARYING:
			case WITHOUT:
			case XML:
			case XMLAGG:
			case COLUMNS:
			case SQLID:
			case ORDINALITY:
			case SYSTEM_TIME:
			case BUSINESS_TIME:
			case MULTIPLIER:
			case UNNEST:
			case CROSS:
			case CALLER:
			case CLIENT:
			case POSITIONING:
			case SCROLL:
			case ACTION:
			case ASSEMBLE:
			case C_:
			case CALLED:
			case COBOL:
			case DB2:
			case DEFINER:
			case DISPATCH:
			case ENVIRONMENT:
			case FAILURE:
			case FAILURES:
			case JAVA:
			case MAIN:
			case NAME:
			case OPTIONS:
			case PARALLEL:
			case PLI:
			case REGISTERS:
			case RESIDENT:
			case SECURED:
			case SPECIAL:
			case SQL:
			case STOP:
			case SUB:
			case YES:
			case APPLICATION:
			case CHANGED:
			case COMPATIBILITY:
			case COMPRESS:
			case COPY:
			case FREEPAGE:
			case GBPCACHE:
			case INCLUDE:
			case MAXVALUE:
			case MINVALUE:
			case PCTFREE:
			case REGENERATE:
			case MASK:
			case ENABLE:
			case PERMISSION:
			case ATOMIC:
			case SQLEXCEPTION:
			case MERGE:
			case MATCHED:
			case SQLSTATE:
			case MESSAGE_TEXT:
			case OVERRIDING:
			case PORTION:
			case DB2SQL:
			case DEBUG:
			case GENERAL:
			case MODE_:
			case REXX:
			case CACHE:
			case CYCLE:
			case INCREMENT:
			case RESTART:
			case DATACLAS:
			case MGMTCLAS:
			case REMOVE:
			case STORCLAS:
			case ACCESS:
			case ACTIVATE:
			case ALWAYS:
			case APPEND:
			case ARCHIVE:
			case BUSINESS:
			case CASCADE:
			case CHANGES:
			case CONTROL:
			case DEACTIVATE:
			case DEFERRED:
			case EACH:
			case ENFORCED:
			case EXTRA:
			case FOREIGN:
			case HIDDEN_:
			case HISTORY:
			case ID:
			case IDENTITY:
			case IMPLICITLY:
			case INITIALLY:
			case INLINE:
			case OPERATION:
			case ORGANIZE:
			case OVERLAPS:
			case PACKAGE_NAME:
			case PACKAGE_SCHEMA:
			case PACKAGE_VERSION:
			case PRIMARY:
			case RESET:
			case ROTATE:
			case START:
			case SYSIBM:
			case TRANSACTION:
			case XMLSCHEMA:
			case ELEMENT:
			case URL:
			case NAMESPACE:
			case LOCATION:
			case SYSXSR:
			case ALGORITHM:
			case FIXEDLENGTH:
			case HUFFMAN:
			case LOB:
			case LOG:
			case LOGGED:
			case MAXPARTITIONS:
			case MAXROWS:
			case MEMBER:
			case MOVE:
			case PAGE:
			case PAGENUM:
			case PENDING:
			case RELATIVE:
			case SEGSIZE:
			case TRACKMOD:
			case ADDRESS:
			case ATTRIBUTES:
			case AUTHENTICATION:
			case AUTHID:
			case CONTEXT:
			case JOBNAME:
			case OWNER:
			case PROFILE:
			case QUALIFIER:
			case SERVAUTH:
			case TRUSTED:
			case SECTION:
			case ACTIVE:
			case VERSION:
			case ALIAS:
			case WORK:
			case WORKFILE:
			case SYSDEFLT:
			case NULTERM:
			case STRUCTURE:
			case GENERIC:
			case TEMPORARY:
			case DEFER:
			case DEFINE:
			case EXCLUDE:
			case GENERATE:
			case KEYS:
			case XMLPATTERN:
			case SIZE:
			case EVERY:
			case ABSOLUTE:
			case ACCELERATOR:
			case EXCLUDING:
			case INCLUDING:
			case DEFAULTS:
			case MODIFIERS:
			case OPTION:
			case PRESERVE:
			case BOTH:
			case DESCRIBE:
			case LABELS:
			case NAMES:
			case OUTPUT:
			case EXCHANGE:
			case STABILIZED:
			case STMTCACHE:
			case STMTID:
			case STMTTOKEN:
			case STARTING:
			case CATALOG_NAME:
			case CONDITION_NUMBER:
			case CURSOR_NAME:
			case DB2_AUTHENTICATION_TYPE:
			case DB2_AUTHORIZATION_ID:
			case DB2_CONNECTION_STATE:
			case DB2_CONNECTION_STATUS:
			case DB2_ENCRYPTION_TYPE:
			case DB2_ERROR_CODE1:
			case DB2_ERROR_CODE2:
			case DB2_ERROR_CODE3:
			case DB2_ERROR_CODE4:
			case DB2_GET_DIAGNOSTICS_DIAGNOSTICS:
			case DB2_INTERNAL_ERROR_POINTER:
			case DB2_LAST_ROW:
			case DB2_LINE_NUMBER:
			case DB2_MESSAGE_ID:
			case DB2_MODULE_DETECTING_ERROR:
			case DB2_NUMBER_PARAMETER_MARKERS:
			case DB2_NUMBER_RESULT_SETS:
			case DB2_NUMBER_ROWS:
			case DB2_ORDINAL_TOKEN_:
			case DB2_PRODUCT_ID:
			case DB2_REASON_CODE:
			case DB2_RETURNED_SQLCODE:
			case DB2_RETURN_STATUS:
			case DB2_ROW_NUMBER:
			case DB2_SERVER_CLASS_NAME:
			case DB2_SQL_ATTR_CURSOR_HOLD:
			case DB2_SQL_ATTR_CURSOR_ROWSET:
			case DB2_SQL_ATTR_CURSOR_SCROLLABLE:
			case DB2_SQL_ATTR_CURSOR_SENSITIVITY:
			case DB2_SQL_ATTR_CURSOR_TYPE:
			case DB2_SQLERRD1:
			case DB2_SQLERRD2:
			case DB2_SQLERRD3:
			case DB2_SQLERRD4:
			case DB2_SQLERRD5:
			case DB2_SQLERRD6:
			case DB2_SQLERRD_SET:
			case DB2_SQL_NESTING_LEVEL:
			case DB2_TOKEN_COUNT:
			case DIAGNOSTICS:
			case MORE_:
			case NUMBER:
			case RETURNED_SQLSTATE:
			case ROW_COUNT:
			case SERVER_NAME:
			case STACKED:
			case CREATETAB:
			case CREATETS:
			case DBADM:
			case DBCTRL:
			case DBMAINT:
			case DISPLAYDB:
			case IMAGCOPY:
			case LOAD:
			case PACKADM:
			case RECOVERDB:
			case REORG:
			case REPAIR:
			case STARTDB:
			case STATS:
			case STOPDB:
			case BIND:
			case ALTERIN:
			case CREATEIN:
			case DROPIN:
			case USAGE:
			case ACCESSCTRL:
			case BINDADD:
			case BINDAGENT:
			case BSDS:
			case CREATEALIAS:
			case CREATEDBA:
			case CREATEDBC:
			case CREATE_SECURE_OBJECT:
			case CREATESG:
			case CREATETMTAB:
			case DATAACCESS:
			case DEBUGSESSION:
			case DISPLAY:
			case MONITOR1:
			case MONITOR2:
			case RECOVER:
			case SQLADM:
			case STOPALL:
			case STOSPACE:
			case SYSADM:
			case SYSCTRL:
			case SYSOPR:
			case TRACE:
			case UNLOAD:
			case WRITE:
			case ABS:
			case ABSVAL:
			case ACOS:
			case ADD_DAYS:
			case ADD_MONTHS:
			case ARRAY_DELETE:
			case ARRAY_FIRST:
			case ARRAY_LAST:
			case ARRAY_NEXT:
			case ARRAY_PRIOR:
			case ARRAY_TRIM:
			case ASCII:
			case ASCII_CHR:
			case ASCIISTR:
			case ASCII_STR:
			case ASIN:
			case ATAN:
			case ATAN2:
			case ATANH:
			case BIGINT:
			case BINARY:
			case BITAND:
			case BITANDNOT:
			case BITNOT:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BTRIM:
			case CARDINALITY:
			case CCSID_ENCODING:
			case CEIL:
			case CEILING:
			case CHAR9:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case CHR:
			case CLOB:
			case COALESCE:
			case COLLATION_KEY:
			case COMPARE_DECFLOAT:
			case COS:
			case COSH:
			case DATE:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFWEEK_ISO:
			case DAYOFYEAR:
			case DAYS_BETWEEN:
			case DBCLOB:
			case DEC:
			case DECFLOAT:
			case DECFLOAT_FORMAT:
			case DECFLOAT_SORTKEY:
			case DECIMAL:
			case DECODE:
			case DECRYPT_BINARY:
			case DECRYPT_BIT:
			case DECRYPT_CHAR:
			case DECRYPT_DATAKEY_BIGINT:
			case DECRYPT_DATAKEY_BIT:
			case DECRYPT_DATAKEY_CLOB:
			case DECRYPT_DATAKEY_DBCLOB:
			case DECRYPT_DATAKEY_DECIMAL:
			case DECRYPT_DATAKEY_INTEGER:
			case DECRYPT_DATAKEY_VARCHAR:
			case DECRYPT_DATAKEY_VARGRAPHIC:
			case DECRYPT_DB:
			case DEGREES:
			case DIFFERENCE:
			case DIGITS:
			case DOUBLE_PRECISION:
			case DSN_XMLVALIDATE:
			case EBCDIC_CHR:
			case EBCDIC_STR:
			case ENCRYPT_DATAKEY:
			case ENCRYPT_TDES:
			case EXP:
			case EXTRACT:
			case FLOAT:
			case FLOOR:
			case GENERATE_UNIQUE:
			case GENERATE_UNIQUE_BINARY:
			case GETHINT:
			case GETVARIABLE:
			case GRAPHIC:
			case GREATEST:
			case HASH:
			case HASH_CRC32:
			case HASH_MD5:
			case HASH_SHA1:
			case HASH_SHA256:
			case HEX:
			case IDENTITY_VAL_LOCAL:
			case IFNULL:
			case INSTR:
			case INT:
			case INTEGER:
			case JULIAN_DAY:
			case LAST_DAY:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LN:
			case LOCATE:
			case LOCATE_IN_STRING:
			case LOG10:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAX:
			case MAX_CARDINALITY:
			case MIDNIGHT_SECONDS:
			case MIN:
			case MINUTE:
			case MOD:
			case MONTHS_BETWEEN:
			case MQREAD:
			case MQREADCLOB:
			case MQRECEIVE:
			case MQRECEIVECLOB:
			case MQSEND:
			case MULTIPLY_ALT:
			case NEXT_DAY:
			case NEXT_MONTH:
			case NORMALIZE_DECFLOAT:
			case NORMALIZE_STRING:
			case NULLIF:
			case NVL:
			case OVERLAY:
			case PACK:
			case POSITION:
			case POSSTR:
			case POW:
			case POWER:
			case QUANTIZE:
			case QUARTER:
			case RADIANS:
			case RAISE_ERROR:
			case RAND:
			case RANDOM:
			case REAL:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REPLACE:
			case RID:
			case ROUND:
			case ROUND_TIMESTAMP:
			case ROWID:
			case RPAD:
			case RTRIM:
			case SCORE:
			case SIGN:
			case SIN:
			case SINH:
			case SMALLINT:
			case SOAPHTTPC:
			case SOAPHTTPNC:
			case SOAPHTTPNV:
			case SOAPHTTPV:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STRIP:
			case STRLEFT:
			case STRPOS:
			case STRRIGHT:
			case SUBSTR:
			case SUBSTRING:
			case TAN:
			case TANH:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIMESTAMP_FORMAT:
			case TIMESTAMP_ISO:
			case TIMESTAMP_TZ:
			case TO_CHAR:
			case TO_CLOB:
			case TO_DATE:
			case TO_NUMBER:
			case TOTALORDER:
			case TO_TIMESTAMP:
			case TRANSLATE:
			case TRIM:
			case TRIM_ARRAY:
			case TRUNC:
			case TRUNC_TIMESTAMP:
			case UCASE:
			case UNICODE:
			case UNICODE_STR:
			case UNISTR:
			case UPPER:
			case VARBINARY:
			case VARCHAR:
			case VARCHAR9:
			case VARCHAR_BIT_FORMAT:
			case VARCHAR_FORMAT:
			case VARGRAPHIC:
			case VERIFY_GROUP_FOR_USER:
			case VERIFY_ROLE_FOR_USER:
			case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
			case WEEK:
			case WEEK_ISO:
			case WRAP:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLCONCAT:
			case XMLDOCUMENT:
			case XMLELEMENT:
			case XMLFOREST:
			case XMLMODIFY:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLSERIALIZE:
			case XMLTEXT:
			case XMLXSROBJECTID:
			case XSLTRANSFORM:
			case CURRENT_ACCELERATOR:
			case CURRENT_APPLICATION_COMPATIBILITY:
			case CURRENT_APPLICATION_ENCODING_SCHEME:
			case CURRENT_CLIENT_ACCTNG:
			case CURRENT_CLIENT_APPLNAME:
			case CURRENT_CLIENT_CORR_TOKEN:
			case CURRENT_CLIENT_USERID:
			case CURRENT_CLIENT_WRKSTNNAME:
			case CURRENT_DATE:
			case CURRENT_DEBUG_MODE:
			case CURRENT_DECFLOAT_ROUNDING_MODE:
			case CURRENT_DEGREE:
			case CURRENT_EXPLAIN_MODE:
			case CURRENT_GET_ACCEL_ARCHIVE:
			case CURRENT_LOCALE_LC_CTYPE:
			case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
			case CURRENT_MEMBER:
			case CURRENT_OPTIMIZATION_HINT:
			case CURRENT_PACKAGE_PATH:
			case CURRENT_PACKAGESET:
			case CURRENT_PATH:
			case CURRENT_PRECISION:
			case CURRENT_QUERY_ACCELERATION:
			case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
			case CURRENT_REFRESH_AGE:
			case CURRENT_ROUTINE_VERSION:
			case CURRENT_RULES:
			case CURRENT_SCHEMA:
			case CURRENT_SERVER:
			case CURRENT_SQLID:
			case CURRENT_TEMPORAL_BUSINESS_TIME:
			case CURRENT_TEMPORAL_SYSTEM_TIME:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_TIME_ZONE:
			case ENCRYPTION_PASSWORD:
			case SESSION_TIME_ZONE:
			case SESSION_USER:
			case USER:
			case ADMIN_TASK_LIST:
			case ADMIN_TASK_OUTPUT:
			case ADMIN_TASK_STATUS:
			case BLOCKING_THREADS:
			case MQREADALL:
			case MQREADALLCLOB:
			case MQRECEIVEALL:
			case MQRECEIVEALLCLOB:
			case XMLTABLE:
			case SQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(8580);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1018,_ctx) ) {
				case 1:
					{
					setState(8577);
					schemaName();
					setState(8578);
					match(DOT);
					}
					break;
				}
				setState(8582);
				identifier();
				}
				}
				break;
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(8583);
				hostVariable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntoClauseContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(DB2zSQLParser.INTO, 0); }
		public List<VariableContext> variable() {
			return getRuleContexts(VariableContext.class);
		}
		public VariableContext variable(int i) {
			return getRuleContext(VariableContext.class,i);
		}
		public ArrayElementSpecificationContext arrayElementSpecification() {
			return getRuleContext(ArrayElementSpecificationContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public IntoClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intoClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterIntoClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitIntoClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitIntoClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntoClauseContext intoClause() throws RecognitionException {
		IntoClauseContext _localctx = new IntoClauseContext(_ctx, getState());
		enterRule(_localctx, 1186, RULE_intoClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8586);
			match(INTO);
			setState(8589);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1020,_ctx) ) {
			case 1:
				{
				setState(8587);
				variable();
				}
				break;
			case 2:
				{
				setState(8588);
				arrayElementSpecification();
				}
				break;
			}
			setState(8595);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8591);
				match(COMMA);
				setState(8592);
				variable();
				}
				}
				setState(8597);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CorrelationClauseContext extends ParserRuleContext {
		public CorrelationNameContext correlationName() {
			return getRuleContext(CorrelationNameContext.class,0);
		}
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<NewColumnNameContext> newColumnName() {
			return getRuleContexts(NewColumnNameContext.class);
		}
		public NewColumnNameContext newColumnName(int i) {
			return getRuleContext(NewColumnNameContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public CorrelationClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_correlationClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCorrelationClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCorrelationClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCorrelationClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CorrelationClauseContext correlationClause() throws RecognitionException {
		CorrelationClauseContext _localctx = new CorrelationClauseContext(_ctx, getState());
		enterRule(_localctx, 1188, RULE_correlationClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8599);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1022,_ctx) ) {
			case 1:
				{
				setState(8598);
				match(AS);
				}
				break;
			}
			setState(8601);
			correlationName();
			setState(8613);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LPAREN) {
				{
				setState(8602);
				match(LPAREN);
				setState(8603);
				newColumnName();
				setState(8608);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(8604);
					match(COMMA);
					setState(8605);
					newColumnName();
					}
					}
					setState(8610);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(8611);
				match(RPAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromClauseContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(DB2zSQLParser.FROM, 0); }
		public List<CollectionDerivedTableContext> collectionDerivedTable() {
			return getRuleContexts(CollectionDerivedTableContext.class);
		}
		public CollectionDerivedTableContext collectionDerivedTable(int i) {
			return getRuleContext(CollectionDerivedTableContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public List<TableReferenceContext> tableReference() {
			return getRuleContexts(TableReferenceContext.class);
		}
		public TableReferenceContext tableReference(int i) {
			return getRuleContext(TableReferenceContext.class,i);
		}
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFromClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFromClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFromClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromClauseContext fromClause() throws RecognitionException {
		FromClauseContext _localctx = new FromClauseContext(_ctx, getState());
		enterRule(_localctx, 1190, RULE_fromClause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8615);
			match(FROM);
			setState(8630);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1027,_ctx) ) {
			case 1:
				{
				{
				setState(8619);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1025,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(8616);
						match(LPAREN);
						}
						} 
					}
					setState(8621);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1025,_ctx);
				}
				setState(8622);
				tableReference();
				setState(8626);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1026,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(8623);
						match(RPAREN);
						}
						} 
					}
					setState(8628);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1026,_ctx);
				}
				}
				}
				break;
			case 2:
				{
				setState(8629);
				collectionDerivedTable();
				}
				break;
			}
			setState(8651);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8632);
				match(COMMA);
				setState(8647);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1030,_ctx) ) {
				case 1:
					{
					{
					setState(8636);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1028,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(8633);
							match(LPAREN);
							}
							} 
						}
						setState(8638);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,1028,_ctx);
					}
					setState(8639);
					tableReference();
					setState(8643);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1029,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(8640);
							match(RPAREN);
							}
							} 
						}
						setState(8645);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,1029,_ctx);
					}
					}
					}
					break;
				case 2:
					{
					setState(8646);
					collectionDerivedTable();
					}
					break;
				}
				}
				}
				setState(8653);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableReferenceContext extends ParserRuleContext {
		public SingleTableReferenceContext singleTableReference() {
			return getRuleContext(SingleTableReferenceContext.class,0);
		}
		public NestedTableExpressionContext nestedTableExpression() {
			return getRuleContext(NestedTableExpressionContext.class,0);
		}
		public DataChangeTableReferenceContext dataChangeTableReference() {
			return getRuleContext(DataChangeTableReferenceContext.class,0);
		}
		public TableFunctionReferenceContext tableFunctionReference() {
			return getRuleContext(TableFunctionReferenceContext.class,0);
		}
		public TableLocatorReferenceContext tableLocatorReference() {
			return getRuleContext(TableLocatorReferenceContext.class,0);
		}
		public XmltableExpressionContext xmltableExpression() {
			return getRuleContext(XmltableExpressionContext.class,0);
		}
		public CollectionDerivedTableContext collectionDerivedTable() {
			return getRuleContext(CollectionDerivedTableContext.class,0);
		}
		public List<TerminalNode> JOIN() { return getTokens(DB2zSQLParser.JOIN); }
		public TerminalNode JOIN(int i) {
			return getToken(DB2zSQLParser.JOIN, i);
		}
		public List<TableReferenceContext> tableReference() {
			return getRuleContexts(TableReferenceContext.class);
		}
		public TableReferenceContext tableReference(int i) {
			return getRuleContext(TableReferenceContext.class,i);
		}
		public List<TerminalNode> ON() { return getTokens(DB2zSQLParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(DB2zSQLParser.ON, i);
		}
		public List<JoinConditionContext> joinCondition() {
			return getRuleContexts(JoinConditionContext.class);
		}
		public JoinConditionContext joinCondition(int i) {
			return getRuleContext(JoinConditionContext.class,i);
		}
		public TerminalNode CROSS() { return getToken(DB2zSQLParser.CROSS, 0); }
		public List<TerminalNode> INNER() { return getTokens(DB2zSQLParser.INNER); }
		public TerminalNode INNER(int i) {
			return getToken(DB2zSQLParser.INNER, i);
		}
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public List<TerminalNode> LEFT() { return getTokens(DB2zSQLParser.LEFT); }
		public TerminalNode LEFT(int i) {
			return getToken(DB2zSQLParser.LEFT, i);
		}
		public List<TerminalNode> RIGHT() { return getTokens(DB2zSQLParser.RIGHT); }
		public TerminalNode RIGHT(int i) {
			return getToken(DB2zSQLParser.RIGHT, i);
		}
		public List<TerminalNode> FULL() { return getTokens(DB2zSQLParser.FULL); }
		public TerminalNode FULL(int i) {
			return getToken(DB2zSQLParser.FULL, i);
		}
		public List<TerminalNode> OUTER() { return getTokens(DB2zSQLParser.OUTER); }
		public TerminalNode OUTER(int i) {
			return getToken(DB2zSQLParser.OUTER, i);
		}
		public TableReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTableReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTableReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTableReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableReferenceContext tableReference() throws RecognitionException {
		TableReferenceContext _localctx = new TableReferenceContext(_ctx, getState());
		enterRule(_localctx, 1192, RULE_tableReference);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8788);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1052,_ctx) ) {
			case 1:
				{
				setState(8654);
				singleTableReference();
				}
				break;
			case 2:
				{
				setState(8655);
				nestedTableExpression();
				}
				break;
			case 3:
				{
				setState(8656);
				dataChangeTableReference();
				}
				break;
			case 4:
				{
				setState(8657);
				tableFunctionReference();
				}
				break;
			case 5:
				{
				setState(8658);
				tableLocatorReference();
				}
				break;
			case 6:
				{
				setState(8659);
				xmltableExpression();
				}
				break;
			case 7:
				{
				setState(8660);
				collectionDerivedTable();
				}
				break;
			case 8:
				{
				{
				setState(8709);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1039,_ctx) ) {
				case 1:
					{
					setState(8661);
					singleTableReference();
					}
					break;
				case 2:
					{
					setState(8662);
					nestedTableExpression();
					}
					break;
				case 3:
					{
					setState(8663);
					tableFunctionReference();
					}
					break;
				case 4:
					{
					setState(8664);
					tableLocatorReference();
					}
					break;
				case 5:
					{
					setState(8665);
					xmltableExpression();
					}
					break;
				case 6:
					{
					setState(8666);
					collectionDerivedTable();
					}
					break;
				case 7:
					{
					{
					setState(8668); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(8667);
							match(LPAREN);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(8670); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,1032,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					setState(8672);
					tableReference();
					setState(8674); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(8673);
						match(RPAREN);
						}
						}
						setState(8676); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==RPAREN );
					}
					}
					break;
				case 8:
					{
					{
					setState(8695);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1036,_ctx) ) {
					case 1:
						{
						setState(8678);
						singleTableReference();
						}
						break;
					case 2:
						{
						setState(8679);
						nestedTableExpression();
						}
						break;
					case 3:
						{
						setState(8680);
						tableFunctionReference();
						}
						break;
					case 4:
						{
						setState(8681);
						tableLocatorReference();
						}
						break;
					case 5:
						{
						setState(8682);
						xmltableExpression();
						}
						break;
					case 6:
						{
						{
						setState(8684); 
						_errHandler.sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								setState(8683);
								match(LPAREN);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							setState(8686); 
							_errHandler.sync(this);
							_alt = getInterpreter().adaptivePredict(_input,1034,_ctx);
						} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
						setState(8688);
						tableReference();
						setState(8690); 
						_errHandler.sync(this);
						_la = _input.LA(1);
						do {
							{
							{
							setState(8689);
							match(RPAREN);
							}
							}
							setState(8692); 
							_errHandler.sync(this);
							_la = _input.LA(1);
						} while ( _la==RPAREN );
						}
						}
						break;
					case 7:
						{
						setState(8694);
						collectionDerivedTable();
						}
						break;
					}
					setState(8702);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case INNER:
						{
						setState(8697);
						match(INNER);
						}
						break;
					case FULL:
					case LEFT:
					case RIGHT:
						{
						{
						setState(8698);
						_la = _input.LA(1);
						if ( !(_la==FULL || _la==LEFT || _la==RIGHT) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(8700);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==OUTER) {
							{
							setState(8699);
							match(OUTER);
							}
						}

						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(8704);
					match(JOIN);
					setState(8705);
					tableReference();
					setState(8706);
					match(ON);
					setState(8707);
					joinCondition();
					}
					}
					break;
				}
				setState(8716);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case INNER:
					{
					setState(8711);
					match(INNER);
					}
					break;
				case FULL:
				case LEFT:
				case RIGHT:
					{
					{
					setState(8712);
					_la = _input.LA(1);
					if ( !(_la==FULL || _la==LEFT || _la==RIGHT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(8714);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OUTER) {
						{
						setState(8713);
						match(OUTER);
						}
					}

					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8718);
				match(JOIN);
				setState(8719);
				tableReference();
				setState(8720);
				match(ON);
				setState(8721);
				joinCondition();
				}
				}
				break;
			case 9:
				{
				{
				setState(8771);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1049,_ctx) ) {
				case 1:
					{
					setState(8723);
					singleTableReference();
					}
					break;
				case 2:
					{
					setState(8724);
					nestedTableExpression();
					}
					break;
				case 3:
					{
					setState(8725);
					tableFunctionReference();
					}
					break;
				case 4:
					{
					setState(8726);
					tableLocatorReference();
					}
					break;
				case 5:
					{
					setState(8727);
					xmltableExpression();
					}
					break;
				case 6:
					{
					setState(8728);
					collectionDerivedTable();
					}
					break;
				case 7:
					{
					{
					setState(8730); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(8729);
							match(LPAREN);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(8732); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,1042,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					setState(8734);
					tableReference();
					setState(8736); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(8735);
						match(RPAREN);
						}
						}
						setState(8738); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==RPAREN );
					}
					}
					break;
				case 8:
					{
					{
					setState(8757);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1046,_ctx) ) {
					case 1:
						{
						setState(8740);
						singleTableReference();
						}
						break;
					case 2:
						{
						setState(8741);
						nestedTableExpression();
						}
						break;
					case 3:
						{
						setState(8742);
						tableFunctionReference();
						}
						break;
					case 4:
						{
						setState(8743);
						tableLocatorReference();
						}
						break;
					case 5:
						{
						setState(8744);
						xmltableExpression();
						}
						break;
					case 6:
						{
						{
						setState(8746); 
						_errHandler.sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								setState(8745);
								match(LPAREN);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							setState(8748); 
							_errHandler.sync(this);
							_alt = getInterpreter().adaptivePredict(_input,1044,_ctx);
						} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
						setState(8750);
						tableReference();
						setState(8752); 
						_errHandler.sync(this);
						_la = _input.LA(1);
						do {
							{
							{
							setState(8751);
							match(RPAREN);
							}
							}
							setState(8754); 
							_errHandler.sync(this);
							_la = _input.LA(1);
						} while ( _la==RPAREN );
						}
						}
						break;
					case 7:
						{
						setState(8756);
						collectionDerivedTable();
						}
						break;
					}
					setState(8764);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case INNER:
						{
						setState(8759);
						match(INNER);
						}
						break;
					case FULL:
					case LEFT:
					case RIGHT:
						{
						{
						setState(8760);
						_la = _input.LA(1);
						if ( !(_la==FULL || _la==LEFT || _la==RIGHT) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(8762);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==OUTER) {
							{
							setState(8761);
							match(OUTER);
							}
						}

						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(8766);
					match(JOIN);
					setState(8767);
					tableReference();
					setState(8768);
					match(ON);
					setState(8769);
					joinCondition();
					}
					}
					break;
				}
				setState(8773);
				match(CROSS);
				setState(8774);
				match(JOIN);
				setState(8775);
				tableReference();
				}
				}
				break;
			case 10:
				{
				{
				setState(8778); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(8777);
						match(LPAREN);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(8780); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1050,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(8782);
				tableReference();
				setState(8784); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(8783);
						match(RPAREN);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(8786); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1051,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SingleTableReferenceContext extends ParserRuleContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public CorrelationNameContext correlationName() {
			return getRuleContext(CorrelationNameContext.class,0);
		}
		public List<PeriodSpecificationContext> periodSpecification() {
			return getRuleContexts(PeriodSpecificationContext.class);
		}
		public PeriodSpecificationContext periodSpecification(int i) {
			return getRuleContext(PeriodSpecificationContext.class,i);
		}
		public CorrelationClauseContext correlationClause() {
			return getRuleContext(CorrelationClauseContext.class,0);
		}
		public SingleTableReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleTableReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSingleTableReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSingleTableReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSingleTableReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SingleTableReferenceContext singleTableReference() throws RecognitionException {
		SingleTableReferenceContext _localctx = new SingleTableReferenceContext(_ctx, getState());
		enterRule(_localctx, 1194, RULE_singleTableReference);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8790);
			tableName();
			setState(8792);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1053,_ctx) ) {
			case 1:
				{
				setState(8791);
				match(AS);
				}
				break;
			}
			setState(8795);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1054,_ctx) ) {
			case 1:
				{
				setState(8794);
				correlationName();
				}
				break;
			}
			setState(8800);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1055,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8797);
					periodSpecification();
					}
					} 
				}
				setState(8802);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1055,_ctx);
			}
			setState(8804);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1056,_ctx) ) {
			case 1:
				{
				setState(8803);
				correlationClause();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PeriodSpecificationContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode SYSTEM_TIME() { return getToken(DB2zSQLParser.SYSTEM_TIME, 0); }
		public TerminalNode BUSINESS_TIME() { return getToken(DB2zSQLParser.BUSINESS_TIME, 0); }
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode OF() { return getToken(DB2zSQLParser.OF, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode FROM() { return getToken(DB2zSQLParser.FROM, 0); }
		public TerminalNode TO() { return getToken(DB2zSQLParser.TO, 0); }
		public TerminalNode BETWEEN() { return getToken(DB2zSQLParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(DB2zSQLParser.AND, 0); }
		public PeriodSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_periodSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPeriodSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPeriodSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPeriodSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PeriodSpecificationContext periodSpecification() throws RecognitionException {
		PeriodSpecificationContext _localctx = new PeriodSpecificationContext(_ctx, getState());
		enterRule(_localctx, 1196, RULE_periodSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8806);
			match(FOR);
			setState(8807);
			_la = _input.LA(1);
			if ( !(_la==SYSTEM_TIME || _la==BUSINESS_TIME) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(8821);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AS:
				{
				{
				setState(8808);
				match(AS);
				setState(8809);
				match(OF);
				setState(8810);
				expression();
				}
				}
				break;
			case FROM:
				{
				{
				setState(8811);
				match(FROM);
				setState(8812);
				expression();
				setState(8813);
				match(TO);
				setState(8814);
				expression();
				}
				}
				break;
			case BETWEEN:
				{
				{
				setState(8816);
				match(BETWEEN);
				setState(8817);
				expression();
				setState(8818);
				match(AND);
				setState(8819);
				expression();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PeriodClauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode PORTION() { return getToken(DB2zSQLParser.PORTION, 0); }
		public TerminalNode OF() { return getToken(DB2zSQLParser.OF, 0); }
		public TerminalNode BUSINESS_TIME() { return getToken(DB2zSQLParser.BUSINESS_TIME, 0); }
		public TerminalNode FROM() { return getToken(DB2zSQLParser.FROM, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode TO() { return getToken(DB2zSQLParser.TO, 0); }
		public TerminalNode BETWEEN() { return getToken(DB2zSQLParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(DB2zSQLParser.AND, 0); }
		public PeriodClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_periodClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPeriodClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPeriodClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPeriodClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PeriodClauseContext periodClause() throws RecognitionException {
		PeriodClauseContext _localctx = new PeriodClauseContext(_ctx, getState());
		enterRule(_localctx, 1198, RULE_periodClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8823);
			match(FOR);
			setState(8824);
			match(PORTION);
			setState(8825);
			match(OF);
			setState(8826);
			match(BUSINESS_TIME);
			setState(8837);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FROM:
				{
				{
				setState(8827);
				match(FROM);
				setState(8828);
				expression();
				setState(8829);
				match(TO);
				setState(8830);
				expression();
				}
				}
				break;
			case BETWEEN:
				{
				{
				setState(8832);
				match(BETWEEN);
				setState(8833);
				expression();
				setState(8834);
				match(AND);
				setState(8835);
				expression();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NestedTableExpressionContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public FullSelectContext fullSelect() {
			return getRuleContext(FullSelectContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public CorrelationClauseContext correlationClause() {
			return getRuleContext(CorrelationClauseContext.class,0);
		}
		public NestedTableExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nestedTableExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterNestedTableExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitNestedTableExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitNestedTableExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NestedTableExpressionContext nestedTableExpression() throws RecognitionException {
		NestedTableExpressionContext _localctx = new NestedTableExpressionContext(_ctx, getState());
		enterRule(_localctx, 1200, RULE_nestedTableExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8840);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLE) {
				{
				setState(8839);
				match(TABLE);
				}
			}

			setState(8842);
			match(LPAREN);
			setState(8843);
			fullSelect();
			setState(8844);
			match(RPAREN);
			setState(8846);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1060,_ctx) ) {
			case 1:
				{
				setState(8845);
				correlationClause();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataChangeTableReferenceContext extends ParserRuleContext {
		public TerminalNode FINAL() { return getToken(DB2zSQLParser.FINAL, 0); }
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public InsertStatementContext insertStatement() {
			return getRuleContext(InsertStatementContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public SearchedUpdateContext searchedUpdate() {
			return getRuleContext(SearchedUpdateContext.class,0);
		}
		public TerminalNode OLD() { return getToken(DB2zSQLParser.OLD, 0); }
		public SearchedDeleteContext searchedDelete() {
			return getRuleContext(SearchedDeleteContext.class,0);
		}
		public MergeStatementContext mergeStatement() {
			return getRuleContext(MergeStatementContext.class,0);
		}
		public CorrelationClauseContext correlationClause() {
			return getRuleContext(CorrelationClauseContext.class,0);
		}
		public DataChangeTableReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataChangeTableReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDataChangeTableReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDataChangeTableReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDataChangeTableReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataChangeTableReferenceContext dataChangeTableReference() throws RecognitionException {
		DataChangeTableReferenceContext _localctx = new DataChangeTableReferenceContext(_ctx, getState());
		enterRule(_localctx, 1202, RULE_dataChangeTableReference);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8865);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1062,_ctx) ) {
			case 1:
				{
				{
				setState(8848);
				match(FINAL);
				setState(8849);
				match(TABLE);
				setState(8850);
				match(LPAREN);
				setState(8851);
				insertStatement();
				setState(8852);
				match(RPAREN);
				setState(8854);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1061,_ctx) ) {
				case 1:
					{
					setState(8853);
					correlationClause();
					}
					break;
				}
				}
				}
				break;
			case 2:
				{
				{
				setState(8856);
				_la = _input.LA(1);
				if ( !(_la==FINAL || _la==OLD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8857);
				match(TABLE);
				setState(8858);
				searchedUpdate();
				}
				}
				break;
			case 3:
				{
				{
				setState(8859);
				match(OLD);
				setState(8860);
				match(TABLE);
				setState(8861);
				searchedDelete();
				}
				}
				break;
			case 4:
				{
				{
				setState(8862);
				match(FINAL);
				setState(8863);
				match(TABLE);
				setState(8864);
				mergeStatement();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableFunctionReferenceContext extends ParserRuleContext {
		public List<TerminalNode> TABLE() { return getTokens(DB2zSQLParser.TABLE); }
		public TerminalNode TABLE(int i) {
			return getToken(DB2zSQLParser.TABLE, i);
		}
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public ScalarFunctionContext scalarFunction() {
			return getRuleContext(ScalarFunctionContext.class,0);
		}
		public AggregateFunctionContext aggregateFunction() {
			return getRuleContext(AggregateFunctionContext.class,0);
		}
		public RegressionFunctionContext regressionFunction() {
			return getRuleContext(RegressionFunctionContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public TableUdfCardinalityClauseContext tableUdfCardinalityClause() {
			return getRuleContext(TableUdfCardinalityClauseContext.class,0);
		}
		public CorrelationClauseContext correlationClause() {
			return getRuleContext(CorrelationClauseContext.class,0);
		}
		public TypedCorrelationClauseContext typedCorrelationClause() {
			return getRuleContext(TypedCorrelationClauseContext.class,0);
		}
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TableFunctionReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableFunctionReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTableFunctionReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTableFunctionReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTableFunctionReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableFunctionReferenceContext tableFunctionReference() throws RecognitionException {
		TableFunctionReferenceContext _localctx = new TableFunctionReferenceContext(_ctx, getState());
		enterRule(_localctx, 1204, RULE_tableFunctionReference);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8867);
			match(TABLE);
			setState(8868);
			match(LPAREN);
			setState(8873);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1063,_ctx) ) {
			case 1:
				{
				setState(8869);
				scalarFunction();
				}
				break;
			case 2:
				{
				setState(8870);
				aggregateFunction();
				}
				break;
			case 3:
				{
				setState(8871);
				regressionFunction();
				}
				break;
			case 4:
				{
				setState(8872);
				identifier();
				}
				break;
			}
			setState(8875);
			match(LPAREN);
			setState(8879);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1064,_ctx) ) {
			case 1:
				{
				setState(8876);
				expression();
				}
				break;
			case 2:
				{
				{
				setState(8877);
				match(TABLE);
				setState(8878);
				tableName();
				}
				}
				break;
			}
			setState(8889);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8881);
				match(COMMA);
				setState(8885);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1065,_ctx) ) {
				case 1:
					{
					setState(8882);
					expression();
					}
					break;
				case 2:
					{
					{
					setState(8883);
					match(TABLE);
					setState(8884);
					tableName();
					}
					}
					break;
				}
				}
				}
				setState(8891);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(8892);
			match(RPAREN);
			setState(8894);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CARDINALITY) {
				{
				setState(8893);
				tableUdfCardinalityClause();
				}
			}

			setState(8896);
			match(RPAREN);
			setState(8899);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1068,_ctx) ) {
			case 1:
				{
				setState(8897);
				correlationClause();
				}
				break;
			case 2:
				{
				setState(8898);
				typedCorrelationClause();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableUdfCardinalityClauseContext extends ParserRuleContext {
		public TerminalNode CARDINALITY() { return getToken(DB2zSQLParser.CARDINALITY, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode NUMERICLITERAL() { return getToken(DB2zSQLParser.NUMERICLITERAL, 0); }
		public TerminalNode MULTIPLIER() { return getToken(DB2zSQLParser.MULTIPLIER, 0); }
		public TableUdfCardinalityClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableUdfCardinalityClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTableUdfCardinalityClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTableUdfCardinalityClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTableUdfCardinalityClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableUdfCardinalityClauseContext tableUdfCardinalityClause() throws RecognitionException {
		TableUdfCardinalityClauseContext _localctx = new TableUdfCardinalityClauseContext(_ctx, getState());
		enterRule(_localctx, 1206, RULE_tableUdfCardinalityClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8901);
			match(CARDINALITY);
			setState(8903);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MULTIPLIER) {
				{
				setState(8902);
				match(MULTIPLIER);
				}
			}

			setState(8905);
			_la = _input.LA(1);
			if ( !(_la==INTEGERLITERAL || _la==NUMERICLITERAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypedCorrelationClauseContext extends ParserRuleContext {
		public CorrelationNameContext correlationName() {
			return getRuleContext(CorrelationNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public List<DataTypeContext> dataType() {
			return getRuleContexts(DataTypeContext.class);
		}
		public DataTypeContext dataType(int i) {
			return getRuleContext(DataTypeContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public TypedCorrelationClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typedCorrelationClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTypedCorrelationClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTypedCorrelationClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTypedCorrelationClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypedCorrelationClauseContext typedCorrelationClause() throws RecognitionException {
		TypedCorrelationClauseContext _localctx = new TypedCorrelationClauseContext(_ctx, getState());
		enterRule(_localctx, 1208, RULE_typedCorrelationClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8908);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1070,_ctx) ) {
			case 1:
				{
				setState(8907);
				match(AS);
				}
				break;
			}
			setState(8910);
			correlationName();
			setState(8911);
			match(LPAREN);
			setState(8912);
			columnName();
			setState(8913);
			dataType();
			setState(8920);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8914);
				match(COMMA);
				setState(8915);
				columnName();
				setState(8916);
				dataType();
				}
				}
				setState(8922);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(8923);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableLocatorReferenceContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(DB2zSQLParser.LIKE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public CorrelationNameContext correlationName() {
			return getRuleContext(CorrelationNameContext.class,0);
		}
		public TableLocatorReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableLocatorReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTableLocatorReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTableLocatorReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTableLocatorReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableLocatorReferenceContext tableLocatorReference() throws RecognitionException {
		TableLocatorReferenceContext _localctx = new TableLocatorReferenceContext(_ctx, getState());
		enterRule(_localctx, 1210, RULE_tableLocatorReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8925);
			match(TABLE);
			setState(8926);
			match(LPAREN);
			setState(8927);
			identifier();
			setState(8928);
			match(LIKE);
			setState(8929);
			tableName();
			setState(8930);
			match(RPAREN);
			setState(8932);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1072,_ctx) ) {
			case 1:
				{
				setState(8931);
				correlationName();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmltableExpressionContext extends ParserRuleContext {
		public XmltableFunctionSpecificationContext xmltableFunctionSpecification() {
			return getRuleContext(XmltableFunctionSpecificationContext.class,0);
		}
		public CorrelationClauseContext correlationClause() {
			return getRuleContext(CorrelationClauseContext.class,0);
		}
		public XmltableExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmltableExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterXmltableExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitXmltableExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitXmltableExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmltableExpressionContext xmltableExpression() throws RecognitionException {
		XmltableExpressionContext _localctx = new XmltableExpressionContext(_ctx, getState());
		enterRule(_localctx, 1212, RULE_xmltableExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8934);
			xmltableFunctionSpecification();
			setState(8936);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1073,_ctx) ) {
			case 1:
				{
				setState(8935);
				correlationClause();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollectionDerivedTableContext extends ParserRuleContext {
		public TerminalNode UNNEST() { return getToken(DB2zSQLParser.UNNEST, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<OrdinaryArrayExpressionContext> ordinaryArrayExpression() {
			return getRuleContexts(OrdinaryArrayExpressionContext.class);
		}
		public OrdinaryArrayExpressionContext ordinaryArrayExpression(int i) {
			return getRuleContext(OrdinaryArrayExpressionContext.class,i);
		}
		public List<AssociativeArrayExpressionContext> associativeArrayExpression() {
			return getRuleContexts(AssociativeArrayExpressionContext.class);
		}
		public AssociativeArrayExpressionContext associativeArrayExpression(int i) {
			return getRuleContext(AssociativeArrayExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode ORDINALITY() { return getToken(DB2zSQLParser.ORDINALITY, 0); }
		public CorrelationClauseContext correlationClause() {
			return getRuleContext(CorrelationClauseContext.class,0);
		}
		public CollectionDerivedTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collectionDerivedTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCollectionDerivedTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCollectionDerivedTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCollectionDerivedTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollectionDerivedTableContext collectionDerivedTable() throws RecognitionException {
		CollectionDerivedTableContext _localctx = new CollectionDerivedTableContext(_ctx, getState());
		enterRule(_localctx, 1214, RULE_collectionDerivedTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8938);
			match(UNNEST);
			setState(8939);
			match(LPAREN);
			setState(8942);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1074,_ctx) ) {
			case 1:
				{
				setState(8940);
				ordinaryArrayExpression();
				}
				break;
			case 2:
				{
				setState(8941);
				associativeArrayExpression();
				}
				break;
			}
			setState(8951);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8944);
				match(COMMA);
				setState(8947);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1075,_ctx) ) {
				case 1:
					{
					setState(8945);
					ordinaryArrayExpression();
					}
					break;
				case 2:
					{
					setState(8946);
					associativeArrayExpression();
					}
					break;
				}
				}
				}
				setState(8953);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(8954);
			match(RPAREN);
			setState(8957);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1077,_ctx) ) {
			case 1:
				{
				setState(8955);
				match(WITH);
				setState(8956);
				match(ORDINALITY);
				}
				break;
			}
			setState(8960);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1078,_ctx) ) {
			case 1:
				{
				setState(8959);
				correlationClause();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinConditionContext extends ParserRuleContext {
		public SearchConditionContext searchCondition() {
			return getRuleContext(SearchConditionContext.class,0);
		}
		public List<FullJoinExpressionContext> fullJoinExpression() {
			return getRuleContexts(FullJoinExpressionContext.class);
		}
		public FullJoinExpressionContext fullJoinExpression(int i) {
			return getRuleContext(FullJoinExpressionContext.class,i);
		}
		public TerminalNode EQ() { return getToken(DB2zSQLParser.EQ, 0); }
		public JoinConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinCondition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterJoinCondition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitJoinCondition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitJoinCondition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinConditionContext joinCondition() throws RecognitionException {
		JoinConditionContext _localctx = new JoinConditionContext(_ctx, getState());
		enterRule(_localctx, 1216, RULE_joinCondition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8967);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1079,_ctx) ) {
			case 1:
				{
				setState(8962);
				searchCondition();
				}
				break;
			case 2:
				{
				{
				setState(8963);
				fullJoinExpression();
				setState(8964);
				match(EQ);
				setState(8965);
				fullJoinExpression();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FullJoinExpressionContext extends ParserRuleContext {
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public List<CastFunctionContext> castFunction() {
			return getRuleContexts(CastFunctionContext.class);
		}
		public CastFunctionContext castFunction(int i) {
			return getRuleContext(CastFunctionContext.class,i);
		}
		public TerminalNode COALESCE() { return getToken(DB2zSQLParser.COALESCE, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public FullJoinExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullJoinExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFullJoinExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFullJoinExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFullJoinExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FullJoinExpressionContext fullJoinExpression() throws RecognitionException {
		FullJoinExpressionContext _localctx = new FullJoinExpressionContext(_ctx, getState());
		enterRule(_localctx, 1218, RULE_fullJoinExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8989);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1083,_ctx) ) {
			case 1:
				{
				setState(8969);
				columnName();
				}
				break;
			case 2:
				{
				setState(8970);
				castFunction();
				}
				break;
			case 3:
				{
				{
				setState(8971);
				match(COALESCE);
				setState(8972);
				match(LPAREN);
				setState(8975);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1080,_ctx) ) {
				case 1:
					{
					setState(8973);
					columnName();
					}
					break;
				case 2:
					{
					setState(8974);
					castFunction();
					}
					break;
				}
				setState(8984);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(8977);
					match(COMMA);
					setState(8980);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1081,_ctx) ) {
					case 1:
						{
						setState(8978);
						columnName();
						}
						break;
					case 2:
						{
						setState(8979);
						castFunction();
						}
						break;
					}
					}
					}
					setState(8986);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(8987);
				match(RPAREN);
				}
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CastFunctionContext extends ParserRuleContext {
		public CastSpecificationContext castSpecification() {
			return getRuleContext(CastSpecificationContext.class,0);
		}
		public CastFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_castFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCastFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCastFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCastFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CastFunctionContext castFunction() throws RecognitionException {
		CastFunctionContext _localctx = new CastFunctionContext(_ctx, getState());
		enterRule(_localctx, 1220, RULE_castFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8991);
			castSpecification();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrdinaryArrayExpressionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public OrdinaryArrayExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ordinaryArrayExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterOrdinaryArrayExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitOrdinaryArrayExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitOrdinaryArrayExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrdinaryArrayExpressionContext ordinaryArrayExpression() throws RecognitionException {
		OrdinaryArrayExpressionContext _localctx = new OrdinaryArrayExpressionContext(_ctx, getState());
		enterRule(_localctx, 1222, RULE_ordinaryArrayExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8993);
			expression();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AssociativeArrayExpressionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public AssociativeArrayExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_associativeArrayExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAssociativeArrayExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAssociativeArrayExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAssociativeArrayExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AssociativeArrayExpressionContext associativeArrayExpression() throws RecognitionException {
		AssociativeArrayExpressionContext _localctx = new AssociativeArrayExpressionContext(_ctx, getState());
		enterRule(_localctx, 1224, RULE_associativeArrayExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8995);
			expression();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ComparisonContext extends ParserRuleContext {
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public ComparisonContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparison; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterComparison(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitComparison(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitComparison(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ComparisonContext comparison() throws RecognitionException {
		ComparisonContext _localctx = new ComparisonContext(_ctx, getState());
		enterRule(_localctx, 1226, RULE_comparison);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8997);
			columnName();
			setState(8998);
			comparisonOperator();
			setState(9001);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INSTEAD:
			case NEW:
			case NEW_TABLE:
			case OLD_TABLE:
			case REFERENCING:
			case BASED:
			case UPON:
			case ADD:
			case AFTER:
			case ALL:
			case ALLOCATE:
			case ALLOW:
			case ALTER:
			case ALTERAND:
			case ANY:
			case ARRAY:
			case ARRAY_EXISTS:
			case AS:
			case ASENSITIVE:
			case ASSOCIATE:
			case ASUTIME:
			case AT:
			case AUDIT:
			case AUX:
			case AUXILIARY:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BUFFERPOOL:
			case BUFFERPOOLS:
			case BY:
			case CALL:
			case CAPTURE:
			case CASCADED:
			case CASE:
			case CAST:
			case CCSID:
			case CHAR:
			case CHARACTER:
			case CHECK:
			case CLONE:
			case CLOSE:
			case CLUSTER:
			case COLLECTION:
			case COLLID:
			case COLUMN:
			case COMMENT:
			case COMMIT:
			case CONCAT:
			case CONDITION:
			case CONNECT:
			case CONNECTION:
			case CONSTRAINT:
			case CONTAINS:
			case CONTENT:
			case CONTINUE:
			case CREATE:
			case CUBE:
			case CURRENT:
			case CURRENT_LC_CTYPE:
			case CURRVAL:
			case CURSOR:
			case DATA:
			case DATABASE:
			case DAY:
			case DAYS:
			case DBINFO:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DISABLE:
			case DISALLOW:
			case DISTINCT:
			case DO:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSSIZE:
			case DYNAMIC:
			case EDITPROC:
			case ELSE:
			case ELSEIF:
			case ENCODING:
			case ENCRYPTION:
			case END:
			case END_EXEC:
			case ENDING:
			case ERASE:
			case ESCAPE:
			case EXCEPT:
			case EXCEPTION:
			case EXEC_SQL:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case FENCED:
			case FETCH:
			case FIELDPROC:
			case FINAL:
			case FIRST:
			case FOR:
			case FREE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANT:
			case GROUP:
			case HANDLER:
			case HAVING:
			case HOLD:
			case HOUR:
			case HOURS:
			case IF:
			case IMMEDIATE:
			case IN:
			case INCLUSIVE:
			case INDEX:
			case INDEXBP:
			case INHERIT:
			case INNER:
			case INOUT:
			case INSENSITIVE:
			case INSERT:
			case INTERSECT:
			case INTO:
			case IS:
			case ISOBID:
			case ITERATE:
			case JAR:
			case JOIN:
			case KEEP:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LAST:
			case LC_CTYPE:
			case LEAVE:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOCALE:
			case LOCATOR:
			case LOCATORS:
			case LOCK:
			case LOCKMAX:
			case LOCKSIZE:
			case LONG:
			case LOOP:
			case MAINTAINED:
			case MATERIALIZED:
			case MICROSECOND:
			case MICROSECONDS:
			case MODIFIES:
			case MONTH:
			case MONTHS:
			case NEXT:
			case NEXTVAL:
			case NO:
			case NONE:
			case NOT:
			case NULL:
			case NULLS:
			case NUMPARTS:
			case OBID:
			case OF:
			case OFFSET:
			case OLD:
			case ON:
			case OPEN:
			case OPTIMIZATION:
			case OPTIMIZE:
			case OR:
			case ORDER:
			case ORGANIZATION:
			case OUT:
			case OUTER:
			case PACKAGE:
			case PADDED:
			case PARAMETER:
			case PART:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONING:
			case PATH:
			case PERIOD:
			case PIECESIZE:
			case PLAN:
			case PRECISION:
			case PREPARE:
			case PREVVAL:
			case PRIOR:
			case PRIQTY:
			case PRIVILEGES:
			case PROCEDURE:
			case PROGRAM:
			case PSID:
			case PUBLIC:
			case QUERY:
			case QUERYNO:
			case READS:
			case REFERENCES:
			case REFRESH:
			case RELEASE:
			case RENAME:
			case REPEAT:
			case RESIGNAL:
			case RESTRICT:
			case RESULT:
			case RESULT_SET_LOCATOR:
			case RETURN:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUND_CEILING:
			case ROUND_DOWN:
			case ROUND_FLOOR:
			case ROUND_HALF_DOWN:
			case ROUND_HALF_EVEN:
			case ROUND_HALF_UP:
			case ROUND_UP:
			case ROW:
			case ROWSET:
			case RUN:
			case SAVEPOINT:
			case SCHEMA:
			case SCRATCHPAD:
			case SECOND:
			case SECONDS:
			case SECQTY:
			case SECURITY:
			case SELECT:
			case SENSITIVE:
			case SEQUENCE:
			case SET:
			case SIGNAL:
			case SIMPLE:
			case SOME:
			case SOURCE:
			case SPECIFIC:
			case STANDARD:
			case STATEMENT:
			case STATIC:
			case STAY:
			case STOGROUP:
			case STORES:
			case STYLE:
			case SUMMARY:
			case SYNONYM:
			case SYSDATE:
			case SYSTEM:
			case SYSTIMESTAMP:
			case TABLE:
			case TABLESPACE:
			case THEN:
			case TO:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNDO:
			case UNION:
			case UNIQUE:
			case UNTIL:
			case UPDATE:
			case USING:
			case VALIDPROC:
			case VALUE:
			case VALUES:
			case VARIABLE:
			case VARIANT:
			case VCAT:
			case VERSIONING:
			case VIEW:
			case VOLATILE:
			case VOLUMES:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WLM:
			case XMLCAST:
			case XMLEXISTS:
			case XMLNAMESPACES:
			case YEAR:
			case YEARS:
			case ZONE:
			case AND:
			case ARRAY_AGG:
			case ASC:
			case AVG:
			case BIT:
			case CHANGE:
			case CODEUNITS16:
			case CODEUNITS32:
			case CORR:
			case CORRELATION:
			case COUNT:
			case COUNT_BIG:
			case COVAR:
			case COVARIANCE:
			case COVARIANCE_SAMP:
			case COVAR_POP:
			case COVAR_SAMP:
			case CS:
			case CUME_DIST:
			case DENSE_RANK:
			case DESC:
			case EBCDIC:
			case EXCLUSIVE:
			case FIRST_VALUE:
			case FOLLOWING:
			case GROUPING:
			case IGNORE:
			case INDICATOR:
			case INPUT:
			case ISNULL:
			case LAG:
			case LARGE:
			case LAST_VALUE:
			case LEAD:
			case LISTAGG:
			case LOCKED:
			case LOCKS:
			case MEDIAN:
			case MINUTES:
			case MIXED:
			case NOTNULL:
			case NTH_VALUE:
			case NTILE:
			case NUMERIC:
			case OBJECT:
			case OCTETS:
			case ONLY:
			case OVER:
			case PASSING:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PERCENT_RANK:
			case PRECEDING:
			case PREVIOUS:
			case RANGE:
			case RANK:
			case RATIO_TO_REPORT:
			case READ:
			case REF:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_ICPT:
			case REGR_INTERCEPT:
			case REGR_R2:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case RESPECT:
			case ROW_NUMBER:
			case ROWS:
			case RR:
			case RS:
			case SBCS:
			case SELECTIVITY:
			case SETS:
			case SHARE:
			case SKIP_:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case TOKEN:
			case UNBOUNDED:
			case UNPACK:
			case UR:
			case USE:
			case VAR:
			case VARIANCE:
			case VARIANCE_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARYING:
			case WITHOUT:
			case XML:
			case XMLAGG:
			case COLUMNS:
			case SQLID:
			case ORDINALITY:
			case SYSTEM_TIME:
			case BUSINESS_TIME:
			case MULTIPLIER:
			case UNNEST:
			case CROSS:
			case CALLER:
			case CLIENT:
			case POSITIONING:
			case SCROLL:
			case ACTION:
			case ASSEMBLE:
			case C_:
			case CALLED:
			case COBOL:
			case DB2:
			case DEFINER:
			case DISPATCH:
			case ENVIRONMENT:
			case FAILURE:
			case FAILURES:
			case JAVA:
			case MAIN:
			case NAME:
			case OPTIONS:
			case PARALLEL:
			case PLI:
			case REGISTERS:
			case RESIDENT:
			case SECURED:
			case SPECIAL:
			case SQL:
			case STOP:
			case SUB:
			case YES:
			case APPLICATION:
			case CHANGED:
			case COMPATIBILITY:
			case COMPRESS:
			case COPY:
			case FREEPAGE:
			case GBPCACHE:
			case INCLUDE:
			case MAXVALUE:
			case MINVALUE:
			case PCTFREE:
			case REGENERATE:
			case MASK:
			case ENABLE:
			case PERMISSION:
			case ATOMIC:
			case SQLEXCEPTION:
			case MERGE:
			case MATCHED:
			case SQLSTATE:
			case MESSAGE_TEXT:
			case OVERRIDING:
			case PORTION:
			case DB2SQL:
			case DEBUG:
			case GENERAL:
			case MODE_:
			case REXX:
			case CACHE:
			case CYCLE:
			case INCREMENT:
			case RESTART:
			case DATACLAS:
			case MGMTCLAS:
			case REMOVE:
			case STORCLAS:
			case ACCESS:
			case ACTIVATE:
			case ALWAYS:
			case APPEND:
			case ARCHIVE:
			case BUSINESS:
			case CASCADE:
			case CHANGES:
			case CONTROL:
			case DEACTIVATE:
			case DEFERRED:
			case EACH:
			case ENFORCED:
			case EXTRA:
			case FOREIGN:
			case HIDDEN_:
			case HISTORY:
			case ID:
			case IDENTITY:
			case IMPLICITLY:
			case INITIALLY:
			case INLINE:
			case OPERATION:
			case ORGANIZE:
			case OVERLAPS:
			case PACKAGE_NAME:
			case PACKAGE_SCHEMA:
			case PACKAGE_VERSION:
			case PRIMARY:
			case RESET:
			case ROTATE:
			case START:
			case SYSIBM:
			case TRANSACTION:
			case XMLSCHEMA:
			case ELEMENT:
			case URL:
			case NAMESPACE:
			case LOCATION:
			case SYSXSR:
			case ALGORITHM:
			case FIXEDLENGTH:
			case HUFFMAN:
			case LOB:
			case LOG:
			case LOGGED:
			case MAXPARTITIONS:
			case MAXROWS:
			case MEMBER:
			case MOVE:
			case PAGE:
			case PAGENUM:
			case PENDING:
			case RELATIVE:
			case SEGSIZE:
			case TRACKMOD:
			case ADDRESS:
			case ATTRIBUTES:
			case AUTHENTICATION:
			case AUTHID:
			case CONTEXT:
			case JOBNAME:
			case OWNER:
			case PROFILE:
			case QUALIFIER:
			case SERVAUTH:
			case TRUSTED:
			case SECTION:
			case ACTIVE:
			case VERSION:
			case ALIAS:
			case WORK:
			case WORKFILE:
			case SYSDEFLT:
			case NULTERM:
			case STRUCTURE:
			case GENERIC:
			case TEMPORARY:
			case DEFER:
			case DEFINE:
			case EXCLUDE:
			case GENERATE:
			case KEYS:
			case XMLPATTERN:
			case SIZE:
			case EVERY:
			case ABSOLUTE:
			case ACCELERATOR:
			case EXCLUDING:
			case INCLUDING:
			case DEFAULTS:
			case MODIFIERS:
			case OPTION:
			case PRESERVE:
			case BOTH:
			case DESCRIBE:
			case LABELS:
			case NAMES:
			case OUTPUT:
			case EXCHANGE:
			case STABILIZED:
			case STMTCACHE:
			case STMTID:
			case STMTTOKEN:
			case STARTING:
			case CATALOG_NAME:
			case CONDITION_NUMBER:
			case CURSOR_NAME:
			case DB2_AUTHENTICATION_TYPE:
			case DB2_AUTHORIZATION_ID:
			case DB2_CONNECTION_STATE:
			case DB2_CONNECTION_STATUS:
			case DB2_ENCRYPTION_TYPE:
			case DB2_ERROR_CODE1:
			case DB2_ERROR_CODE2:
			case DB2_ERROR_CODE3:
			case DB2_ERROR_CODE4:
			case DB2_GET_DIAGNOSTICS_DIAGNOSTICS:
			case DB2_INTERNAL_ERROR_POINTER:
			case DB2_LAST_ROW:
			case DB2_LINE_NUMBER:
			case DB2_MESSAGE_ID:
			case DB2_MODULE_DETECTING_ERROR:
			case DB2_NUMBER_PARAMETER_MARKERS:
			case DB2_NUMBER_RESULT_SETS:
			case DB2_NUMBER_ROWS:
			case DB2_ORDINAL_TOKEN_:
			case DB2_PRODUCT_ID:
			case DB2_REASON_CODE:
			case DB2_RETURNED_SQLCODE:
			case DB2_RETURN_STATUS:
			case DB2_ROW_NUMBER:
			case DB2_SERVER_CLASS_NAME:
			case DB2_SQL_ATTR_CURSOR_HOLD:
			case DB2_SQL_ATTR_CURSOR_ROWSET:
			case DB2_SQL_ATTR_CURSOR_SCROLLABLE:
			case DB2_SQL_ATTR_CURSOR_SENSITIVITY:
			case DB2_SQL_ATTR_CURSOR_TYPE:
			case DB2_SQLERRD1:
			case DB2_SQLERRD2:
			case DB2_SQLERRD3:
			case DB2_SQLERRD4:
			case DB2_SQLERRD5:
			case DB2_SQLERRD6:
			case DB2_SQLERRD_SET:
			case DB2_SQL_NESTING_LEVEL:
			case DB2_TOKEN_COUNT:
			case DIAGNOSTICS:
			case MORE_:
			case NUMBER:
			case RETURNED_SQLSTATE:
			case ROW_COUNT:
			case SERVER_NAME:
			case STACKED:
			case CREATETAB:
			case CREATETS:
			case DBADM:
			case DBCTRL:
			case DBMAINT:
			case DISPLAYDB:
			case IMAGCOPY:
			case LOAD:
			case PACKADM:
			case RECOVERDB:
			case REORG:
			case REPAIR:
			case STARTDB:
			case STATS:
			case STOPDB:
			case BIND:
			case ALTERIN:
			case CREATEIN:
			case DROPIN:
			case USAGE:
			case ACCESSCTRL:
			case BINDADD:
			case BINDAGENT:
			case BSDS:
			case CREATEALIAS:
			case CREATEDBA:
			case CREATEDBC:
			case CREATE_SECURE_OBJECT:
			case CREATESG:
			case CREATETMTAB:
			case DATAACCESS:
			case DEBUGSESSION:
			case DISPLAY:
			case MONITOR1:
			case MONITOR2:
			case RECOVER:
			case SQLADM:
			case STOPALL:
			case STOSPACE:
			case SYSADM:
			case SYSCTRL:
			case SYSOPR:
			case TRACE:
			case UNLOAD:
			case WRITE:
			case ABS:
			case ABSVAL:
			case ACOS:
			case ADD_DAYS:
			case ADD_MONTHS:
			case ARRAY_DELETE:
			case ARRAY_FIRST:
			case ARRAY_LAST:
			case ARRAY_NEXT:
			case ARRAY_PRIOR:
			case ARRAY_TRIM:
			case ASCII:
			case ASCII_CHR:
			case ASCIISTR:
			case ASCII_STR:
			case ASIN:
			case ATAN:
			case ATAN2:
			case ATANH:
			case BIGINT:
			case BINARY:
			case BITAND:
			case BITANDNOT:
			case BITNOT:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BTRIM:
			case CARDINALITY:
			case CCSID_ENCODING:
			case CEIL:
			case CEILING:
			case CHAR9:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case CHR:
			case CLOB:
			case COALESCE:
			case COLLATION_KEY:
			case COMPARE_DECFLOAT:
			case COS:
			case COSH:
			case DATE:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFWEEK_ISO:
			case DAYOFYEAR:
			case DAYS_BETWEEN:
			case DBCLOB:
			case DEC:
			case DECFLOAT:
			case DECFLOAT_FORMAT:
			case DECFLOAT_SORTKEY:
			case DECIMAL:
			case DECODE:
			case DECRYPT_BINARY:
			case DECRYPT_BIT:
			case DECRYPT_CHAR:
			case DECRYPT_DATAKEY_BIGINT:
			case DECRYPT_DATAKEY_BIT:
			case DECRYPT_DATAKEY_CLOB:
			case DECRYPT_DATAKEY_DBCLOB:
			case DECRYPT_DATAKEY_DECIMAL:
			case DECRYPT_DATAKEY_INTEGER:
			case DECRYPT_DATAKEY_VARCHAR:
			case DECRYPT_DATAKEY_VARGRAPHIC:
			case DECRYPT_DB:
			case DEGREES:
			case DIFFERENCE:
			case DIGITS:
			case DOUBLE_PRECISION:
			case DSN_XMLVALIDATE:
			case EBCDIC_CHR:
			case EBCDIC_STR:
			case ENCRYPT_DATAKEY:
			case ENCRYPT_TDES:
			case EXP:
			case EXTRACT:
			case FLOAT:
			case FLOOR:
			case GENERATE_UNIQUE:
			case GENERATE_UNIQUE_BINARY:
			case GETHINT:
			case GETVARIABLE:
			case GRAPHIC:
			case GREATEST:
			case HASH:
			case HASH_CRC32:
			case HASH_MD5:
			case HASH_SHA1:
			case HASH_SHA256:
			case HEX:
			case IDENTITY_VAL_LOCAL:
			case IFNULL:
			case INSTR:
			case INT:
			case INTEGER:
			case JULIAN_DAY:
			case LAST_DAY:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LN:
			case LOCATE:
			case LOCATE_IN_STRING:
			case LOG10:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAX:
			case MAX_CARDINALITY:
			case MIDNIGHT_SECONDS:
			case MIN:
			case MINUTE:
			case MOD:
			case MONTHS_BETWEEN:
			case MQREAD:
			case MQREADCLOB:
			case MQRECEIVE:
			case MQRECEIVECLOB:
			case MQSEND:
			case MULTIPLY_ALT:
			case NEXT_DAY:
			case NEXT_MONTH:
			case NORMALIZE_DECFLOAT:
			case NORMALIZE_STRING:
			case NULLIF:
			case NVL:
			case OVERLAY:
			case PACK:
			case POSITION:
			case POSSTR:
			case POW:
			case POWER:
			case QUANTIZE:
			case QUARTER:
			case RADIANS:
			case RAISE_ERROR:
			case RAND:
			case RANDOM:
			case REAL:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REPLACE:
			case RID:
			case ROUND:
			case ROUND_TIMESTAMP:
			case ROWID:
			case RPAD:
			case RTRIM:
			case SCORE:
			case SIGN:
			case SIN:
			case SINH:
			case SMALLINT:
			case SOAPHTTPC:
			case SOAPHTTPNC:
			case SOAPHTTPNV:
			case SOAPHTTPV:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STRIP:
			case STRLEFT:
			case STRPOS:
			case STRRIGHT:
			case SUBSTR:
			case SUBSTRING:
			case TAN:
			case TANH:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIMESTAMP_FORMAT:
			case TIMESTAMP_ISO:
			case TIMESTAMP_TZ:
			case TO_CHAR:
			case TO_CLOB:
			case TO_DATE:
			case TO_NUMBER:
			case TOTALORDER:
			case TO_TIMESTAMP:
			case TRANSLATE:
			case TRIM:
			case TRIM_ARRAY:
			case TRUNC:
			case TRUNC_TIMESTAMP:
			case UCASE:
			case UNICODE:
			case UNICODE_STR:
			case UNISTR:
			case UPPER:
			case VARBINARY:
			case VARCHAR:
			case VARCHAR9:
			case VARCHAR_BIT_FORMAT:
			case VARCHAR_FORMAT:
			case VARGRAPHIC:
			case VERIFY_GROUP_FOR_USER:
			case VERIFY_ROLE_FOR_USER:
			case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
			case WEEK:
			case WEEK_ISO:
			case WRAP:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLCONCAT:
			case XMLDOCUMENT:
			case XMLELEMENT:
			case XMLFOREST:
			case XMLMODIFY:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLSERIALIZE:
			case XMLTEXT:
			case XMLXSROBJECTID:
			case XSLTRANSFORM:
			case CURRENT_ACCELERATOR:
			case CURRENT_APPLICATION_COMPATIBILITY:
			case CURRENT_APPLICATION_ENCODING_SCHEME:
			case CURRENT_CLIENT_ACCTNG:
			case CURRENT_CLIENT_APPLNAME:
			case CURRENT_CLIENT_CORR_TOKEN:
			case CURRENT_CLIENT_USERID:
			case CURRENT_CLIENT_WRKSTNNAME:
			case CURRENT_DATE:
			case CURRENT_DEBUG_MODE:
			case CURRENT_DECFLOAT_ROUNDING_MODE:
			case CURRENT_DEGREE:
			case CURRENT_EXPLAIN_MODE:
			case CURRENT_GET_ACCEL_ARCHIVE:
			case CURRENT_LOCALE_LC_CTYPE:
			case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
			case CURRENT_MEMBER:
			case CURRENT_OPTIMIZATION_HINT:
			case CURRENT_PACKAGE_PATH:
			case CURRENT_PACKAGESET:
			case CURRENT_PATH:
			case CURRENT_PRECISION:
			case CURRENT_QUERY_ACCELERATION:
			case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
			case CURRENT_REFRESH_AGE:
			case CURRENT_ROUTINE_VERSION:
			case CURRENT_RULES:
			case CURRENT_SCHEMA:
			case CURRENT_SERVER:
			case CURRENT_SQLID:
			case CURRENT_TEMPORAL_BUSINESS_TIME:
			case CURRENT_TEMPORAL_SYSTEM_TIME:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_TIME_ZONE:
			case ENCRYPTION_PASSWORD:
			case SESSION_TIME_ZONE:
			case SESSION_USER:
			case USER:
			case ADMIN_TASK_LIST:
			case ADMIN_TASK_OUTPUT:
			case ADMIN_TASK_STATUS:
			case BLOCKING_THREADS:
			case MQREADALL:
			case MQREADALLCLOB:
			case MQRECEIVEALL:
			case MQRECEIVEALLCLOB:
			case XMLTABLE:
			case SQLIDENTIFIER:
				{
				setState(8999);
				columnName();
				}
				break;
			case NONNUMERICLITERAL:
			case INTEGERLITERAL:
			case NUMERICLITERAL:
				{
				setState(9000);
				literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhereClauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(DB2zSQLParser.WHERE, 0); }
		public SearchConditionContext searchCondition() {
			return getRuleContext(SearchConditionContext.class,0);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whereClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterWhereClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitWhereClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitWhereClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhereClauseContext whereClause() throws RecognitionException {
		WhereClauseContext _localctx = new WhereClauseContext(_ctx, getState());
		enterRule(_localctx, 1228, RULE_whereClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9003);
			match(WHERE);
			setState(9004);
			searchCondition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByClauseContext extends ParserRuleContext {
		public TerminalNode GROUP() { return getToken(DB2zSQLParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public GroupingExpressionContext groupingExpression() {
			return getRuleContext(GroupingExpressionContext.class,0);
		}
		public GroupingSetsContext groupingSets() {
			return getRuleContext(GroupingSetsContext.class,0);
		}
		public SuperGroupsContext superGroups() {
			return getRuleContext(SuperGroupsContext.class,0);
		}
		public GroupByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGroupByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGroupByClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGroupByClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByClauseContext groupByClause() throws RecognitionException {
		GroupByClauseContext _localctx = new GroupByClauseContext(_ctx, getState());
		enterRule(_localctx, 1230, RULE_groupByClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9006);
			match(GROUP);
			setState(9007);
			match(BY);
			setState(9011);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1085,_ctx) ) {
			case 1:
				{
				setState(9008);
				groupingExpression();
				}
				break;
			case 2:
				{
				setState(9009);
				groupingSets();
				}
				break;
			case 3:
				{
				setState(9010);
				superGroups();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HavingClauseContext extends ParserRuleContext {
		public TerminalNode HAVING() { return getToken(DB2zSQLParser.HAVING, 0); }
		public SearchConditionContext searchCondition() {
			return getRuleContext(SearchConditionContext.class,0);
		}
		public HavingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_havingClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterHavingClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitHavingClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitHavingClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HavingClauseContext havingClause() throws RecognitionException {
		HavingClauseContext _localctx = new HavingClauseContext(_ctx, getState());
		enterRule(_localctx, 1232, RULE_havingClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9013);
			match(HAVING);
			setState(9014);
			searchCondition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupingExpressionContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public GroupingExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupingExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGroupingExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGroupingExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGroupingExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupingExpressionContext groupingExpression() throws RecognitionException {
		GroupingExpressionContext _localctx = new GroupingExpressionContext(_ctx, getState());
		enterRule(_localctx, 1234, RULE_groupingExpression);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(9016);
			expression();
			setState(9021);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1086,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(9017);
					match(COMMA);
					setState(9018);
					expression();
					}
					} 
				}
				setState(9023);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1086,_ctx);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupingSetsContext extends ParserRuleContext {
		public TerminalNode GROUPING() { return getToken(DB2zSQLParser.GROUPING, 0); }
		public TerminalNode SETS() { return getToken(DB2zSQLParser.SETS, 0); }
		public GroupingSetsGroupContext groupingSetsGroup() {
			return getRuleContext(GroupingSetsGroupContext.class,0);
		}
		public GroupingSetsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupingSets; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGroupingSets(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGroupingSets(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGroupingSets(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupingSetsContext groupingSets() throws RecognitionException {
		GroupingSetsContext _localctx = new GroupingSetsContext(_ctx, getState());
		enterRule(_localctx, 1236, RULE_groupingSets);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9024);
			match(GROUPING);
			setState(9025);
			match(SETS);
			setState(9026);
			groupingSetsGroup();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupingSetsGroupContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<GroupingSetsGroupContext> groupingSetsGroup() {
			return getRuleContexts(GroupingSetsGroupContext.class);
		}
		public GroupingSetsGroupContext groupingSetsGroup(int i) {
			return getRuleContext(GroupingSetsGroupContext.class,i);
		}
		public List<GroupingExpressionContext> groupingExpression() {
			return getRuleContexts(GroupingExpressionContext.class);
		}
		public GroupingExpressionContext groupingExpression(int i) {
			return getRuleContext(GroupingExpressionContext.class,i);
		}
		public List<SuperGroupsContext> superGroups() {
			return getRuleContexts(SuperGroupsContext.class);
		}
		public SuperGroupsContext superGroups(int i) {
			return getRuleContext(SuperGroupsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public GroupingSetsGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupingSetsGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGroupingSetsGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGroupingSetsGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGroupingSetsGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupingSetsGroupContext groupingSetsGroup() throws RecognitionException {
		GroupingSetsGroupContext _localctx = new GroupingSetsGroupContext(_ctx, getState());
		enterRule(_localctx, 1238, RULE_groupingSetsGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9028);
			match(LPAREN);
			setState(9032);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1087,_ctx) ) {
			case 1:
				{
				setState(9029);
				groupingSetsGroup();
				}
				break;
			case 2:
				{
				setState(9030);
				groupingExpression();
				}
				break;
			case 3:
				{
				setState(9031);
				superGroups();
				}
				break;
			}
			setState(9042);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9034);
				match(COMMA);
				setState(9038);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1088,_ctx) ) {
				case 1:
					{
					setState(9035);
					groupingSetsGroup();
					}
					break;
				case 2:
					{
					setState(9036);
					groupingExpression();
					}
					break;
				case 3:
					{
					setState(9037);
					superGroups();
					}
					break;
				}
				}
				}
				setState(9044);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(9045);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SuperGroupsContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public GroupingExpressionContext groupingExpression() {
			return getRuleContext(GroupingExpressionContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode ROLLUP() { return getToken(DB2zSQLParser.ROLLUP, 0); }
		public TerminalNode CUBE() { return getToken(DB2zSQLParser.CUBE, 0); }
		public SuperGroupsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_superGroups; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSuperGroups(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSuperGroups(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSuperGroups(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SuperGroupsContext superGroups() throws RecognitionException {
		SuperGroupsContext _localctx = new SuperGroupsContext(_ctx, getState());
		enterRule(_localctx, 1240, RULE_superGroups);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9054);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CUBE:
			case ROLLUP:
				{
				{
				setState(9047);
				_la = _input.LA(1);
				if ( !(_la==CUBE || _la==ROLLUP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9048);
				match(LPAREN);
				setState(9049);
				groupingExpression();
				setState(9050);
				match(RPAREN);
				}
				}
				break;
			case LPAREN:
				{
				{
				setState(9052);
				match(LPAREN);
				setState(9053);
				match(RPAREN);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectColumnsContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public TerminalNode SPLAT() { return getToken(DB2zSQLParser.SPLAT, 0); }
		public UnpackedRowContext unpackedRow() {
			return getRuleContext(UnpackedRowContext.class,0);
		}
		public List<OperatorContext> operator() {
			return getRuleContexts(OperatorContext.class);
		}
		public OperatorContext operator(int i) {
			return getRuleContext(OperatorContext.class,i);
		}
		public NewColumnNameContext newColumnName() {
			return getRuleContext(NewColumnNameContext.class,0);
		}
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public SelectColumnsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectColumns; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSelectColumns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSelectColumns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSelectColumns(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectColumnsContext selectColumns() throws RecognitionException {
		SelectColumnsContext _localctx = new SelectColumnsContext(_ctx, getState());
		enterRule(_localctx, 1242, RULE_selectColumns);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9076);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1094,_ctx) ) {
			case 1:
				{
				{
				setState(9056);
				expression();
				setState(9062);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1091,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(9057);
						operator();
						setState(9058);
						expression();
						}
						} 
					}
					setState(9064);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1091,_ctx);
				}
				setState(9069);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1093,_ctx) ) {
				case 1:
					{
					setState(9066);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1092,_ctx) ) {
					case 1:
						{
						setState(9065);
						match(AS);
						}
						break;
					}
					setState(9068);
					newColumnName();
					}
					break;
				}
				}
				}
				break;
			case 2:
				{
				{
				setState(9071);
				tableName();
				setState(9072);
				match(DOT);
				setState(9073);
				match(SPLAT);
				}
				}
				break;
			case 3:
				{
				{
				setState(9075);
				unpackedRow();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnpackedRowContext extends ParserRuleContext {
		public TerminalNode UNPACK() { return getToken(DB2zSQLParser.UNPACK, 0); }
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public TerminalNode SPLAT() { return getToken(DB2zSQLParser.SPLAT, 0); }
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public List<DataTypeContext> dataType() {
			return getRuleContexts(DataTypeContext.class);
		}
		public DataTypeContext dataType(int i) {
			return getRuleContext(DataTypeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public UnpackedRowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpackedRow; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterUnpackedRow(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitUnpackedRow(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitUnpackedRow(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnpackedRowContext unpackedRow() throws RecognitionException {
		UnpackedRowContext _localctx = new UnpackedRowContext(_ctx, getState());
		enterRule(_localctx, 1244, RULE_unpackedRow);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9078);
			match(UNPACK);
			setState(9079);
			match(LPAREN);
			setState(9080);
			expression();
			setState(9081);
			match(RPAREN);
			setState(9082);
			match(DOT);
			setState(9083);
			match(SPLAT);
			setState(9084);
			match(AS);
			setState(9085);
			match(LPAREN);
			setState(9086);
			columnName();
			setState(9087);
			dataType();
			setState(9094);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9088);
				match(COMMA);
				setState(9089);
				columnName();
				setState(9090);
				dataType();
				}
				}
				setState(9096);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(9097);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectClauseContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(DB2zSQLParser.SELECT, 0); }
		public TerminalNode SPLAT() { return getToken(DB2zSQLParser.SPLAT, 0); }
		public TerminalNode ALL() { return getToken(DB2zSQLParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(DB2zSQLParser.DISTINCT, 0); }
		public List<SelectColumnsContext> selectColumns() {
			return getRuleContexts(SelectColumnsContext.class);
		}
		public SelectColumnsContext selectColumns(int i) {
			return getRuleContext(SelectColumnsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public SelectClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSelectClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSelectClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSelectClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectClauseContext selectClause() throws RecognitionException {
		SelectClauseContext _localctx = new SelectClauseContext(_ctx, getState());
		enterRule(_localctx, 1246, RULE_selectClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9099);
			match(SELECT);
			setState(9101);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1096,_ctx) ) {
			case 1:
				{
				setState(9100);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(9112);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SPLAT:
				{
				setState(9103);
				match(SPLAT);
				}
				break;
			case LPAREN:
			case COLON:
			case NONNUMERICLITERAL:
			case INTEGERLITERAL:
			case NUMERICLITERAL:
			case INSTEAD:
			case NEW:
			case NEW_TABLE:
			case OLD_TABLE:
			case REFERENCING:
			case BASED:
			case UPON:
			case ADD:
			case AFTER:
			case ALL:
			case ALLOCATE:
			case ALLOW:
			case ALTER:
			case ALTERAND:
			case ANY:
			case ARRAY:
			case ARRAY_EXISTS:
			case AS:
			case ASENSITIVE:
			case ASSOCIATE:
			case ASUTIME:
			case AT:
			case AUDIT:
			case AUX:
			case AUXILIARY:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BUFFERPOOL:
			case BUFFERPOOLS:
			case BY:
			case CALL:
			case CAPTURE:
			case CASCADED:
			case CASE:
			case CAST:
			case CCSID:
			case CHAR:
			case CHARACTER:
			case CHECK:
			case CLONE:
			case CLOSE:
			case CLUSTER:
			case COLLECTION:
			case COLLID:
			case COLUMN:
			case COMMENT:
			case COMMIT:
			case CONCAT:
			case CONDITION:
			case CONNECT:
			case CONNECTION:
			case CONSTRAINT:
			case CONTAINS:
			case CONTENT:
			case CONTINUE:
			case CREATE:
			case CUBE:
			case CURRENT:
			case CURRENT_LC_CTYPE:
			case CURRVAL:
			case CURSOR:
			case DATA:
			case DATABASE:
			case DAY:
			case DAYS:
			case DBINFO:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DISABLE:
			case DISALLOW:
			case DISTINCT:
			case DO:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSSIZE:
			case DYNAMIC:
			case EDITPROC:
			case ELSE:
			case ELSEIF:
			case ENCODING:
			case ENCRYPTION:
			case END:
			case END_EXEC:
			case ENDING:
			case ERASE:
			case ESCAPE:
			case EXCEPT:
			case EXCEPTION:
			case EXEC_SQL:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case FENCED:
			case FETCH:
			case FIELDPROC:
			case FINAL:
			case FIRST:
			case FOR:
			case FREE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANT:
			case GROUP:
			case HANDLER:
			case HAVING:
			case HOLD:
			case HOUR:
			case HOURS:
			case IF:
			case IMMEDIATE:
			case IN:
			case INCLUSIVE:
			case INDEX:
			case INDEXBP:
			case INHERIT:
			case INNER:
			case INOUT:
			case INSENSITIVE:
			case INSERT:
			case INTERSECT:
			case INTO:
			case IS:
			case ISOBID:
			case ITERATE:
			case JAR:
			case JOIN:
			case KEEP:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LAST:
			case LC_CTYPE:
			case LEAVE:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOCALE:
			case LOCATOR:
			case LOCATORS:
			case LOCK:
			case LOCKMAX:
			case LOCKSIZE:
			case LONG:
			case LOOP:
			case MAINTAINED:
			case MATERIALIZED:
			case MICROSECOND:
			case MICROSECONDS:
			case MODIFIES:
			case MONTH:
			case MONTHS:
			case NEXT:
			case NEXTVAL:
			case NO:
			case NONE:
			case NOT:
			case NULL:
			case NULLS:
			case NUMPARTS:
			case OBID:
			case OF:
			case OFFSET:
			case OLD:
			case ON:
			case OPEN:
			case OPTIMIZATION:
			case OPTIMIZE:
			case OR:
			case ORDER:
			case ORGANIZATION:
			case OUT:
			case OUTER:
			case PACKAGE:
			case PADDED:
			case PARAMETER:
			case PART:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONING:
			case PATH:
			case PERIOD:
			case PIECESIZE:
			case PLAN:
			case PRECISION:
			case PREPARE:
			case PREVVAL:
			case PRIOR:
			case PRIQTY:
			case PRIVILEGES:
			case PROCEDURE:
			case PROGRAM:
			case PSID:
			case PUBLIC:
			case QUERY:
			case QUERYNO:
			case READS:
			case REFERENCES:
			case REFRESH:
			case RELEASE:
			case RENAME:
			case REPEAT:
			case RESIGNAL:
			case RESTRICT:
			case RESULT:
			case RESULT_SET_LOCATOR:
			case RETURN:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUND_CEILING:
			case ROUND_DOWN:
			case ROUND_FLOOR:
			case ROUND_HALF_DOWN:
			case ROUND_HALF_EVEN:
			case ROUND_HALF_UP:
			case ROUND_UP:
			case ROW:
			case ROWSET:
			case RUN:
			case SAVEPOINT:
			case SCHEMA:
			case SCRATCHPAD:
			case SECOND:
			case SECONDS:
			case SECQTY:
			case SECURITY:
			case SELECT:
			case SENSITIVE:
			case SEQUENCE:
			case SET:
			case SIGNAL:
			case SIMPLE:
			case SOME:
			case SOURCE:
			case SPECIFIC:
			case STANDARD:
			case STATEMENT:
			case STATIC:
			case STAY:
			case STOGROUP:
			case STORES:
			case STYLE:
			case SUMMARY:
			case SYNONYM:
			case SYSDATE:
			case SYSTEM:
			case SYSTIMESTAMP:
			case TABLE:
			case TABLESPACE:
			case THEN:
			case TO:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNDO:
			case UNION:
			case UNIQUE:
			case UNTIL:
			case UPDATE:
			case USING:
			case VALIDPROC:
			case VALUE:
			case VALUES:
			case VARIABLE:
			case VARIANT:
			case VCAT:
			case VERSIONING:
			case VIEW:
			case VOLATILE:
			case VOLUMES:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WLM:
			case XMLCAST:
			case XMLEXISTS:
			case XMLNAMESPACES:
			case YEAR:
			case YEARS:
			case ZONE:
			case AND:
			case ARRAY_AGG:
			case ASC:
			case AVG:
			case BIT:
			case CHANGE:
			case CODEUNITS16:
			case CODEUNITS32:
			case CORR:
			case CORRELATION:
			case COUNT:
			case COUNT_BIG:
			case COVAR:
			case COVARIANCE:
			case COVARIANCE_SAMP:
			case COVAR_POP:
			case COVAR_SAMP:
			case CS:
			case CUME_DIST:
			case DENSE_RANK:
			case DESC:
			case EBCDIC:
			case EXCLUSIVE:
			case FIRST_VALUE:
			case FOLLOWING:
			case GROUPING:
			case IGNORE:
			case INDICATOR:
			case INPUT:
			case ISNULL:
			case LAG:
			case LARGE:
			case LAST_VALUE:
			case LEAD:
			case LISTAGG:
			case LOCKED:
			case LOCKS:
			case MEDIAN:
			case MINUTES:
			case MIXED:
			case NOTNULL:
			case NTH_VALUE:
			case NTILE:
			case NUMERIC:
			case OBJECT:
			case OCTETS:
			case ONLY:
			case OVER:
			case PASSING:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PERCENT_RANK:
			case PRECEDING:
			case PREVIOUS:
			case RANGE:
			case RANK:
			case RATIO_TO_REPORT:
			case READ:
			case REF:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_ICPT:
			case REGR_INTERCEPT:
			case REGR_R2:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case RESPECT:
			case ROW_NUMBER:
			case ROWS:
			case RR:
			case RS:
			case SBCS:
			case SELECTIVITY:
			case SETS:
			case SHARE:
			case SKIP_:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case TOKEN:
			case UNBOUNDED:
			case UNPACK:
			case UR:
			case USE:
			case VAR:
			case VARIANCE:
			case VARIANCE_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARYING:
			case WITHOUT:
			case XML:
			case XMLAGG:
			case COLUMNS:
			case SQLID:
			case ORDINALITY:
			case SYSTEM_TIME:
			case BUSINESS_TIME:
			case MULTIPLIER:
			case UNNEST:
			case CROSS:
			case CALLER:
			case CLIENT:
			case POSITIONING:
			case SCROLL:
			case ACTION:
			case ASSEMBLE:
			case C_:
			case CALLED:
			case COBOL:
			case DB2:
			case DEFINER:
			case DISPATCH:
			case ENVIRONMENT:
			case FAILURE:
			case FAILURES:
			case JAVA:
			case MAIN:
			case NAME:
			case OPTIONS:
			case PARALLEL:
			case PLI:
			case REGISTERS:
			case RESIDENT:
			case SECURED:
			case SPECIAL:
			case SQL:
			case STOP:
			case SUB:
			case YES:
			case APPLICATION:
			case CHANGED:
			case COMPATIBILITY:
			case COMPRESS:
			case COPY:
			case FREEPAGE:
			case GBPCACHE:
			case INCLUDE:
			case MAXVALUE:
			case MINVALUE:
			case PCTFREE:
			case REGENERATE:
			case MASK:
			case ENABLE:
			case PERMISSION:
			case ATOMIC:
			case SQLEXCEPTION:
			case MERGE:
			case MATCHED:
			case SQLSTATE:
			case MESSAGE_TEXT:
			case OVERRIDING:
			case PORTION:
			case DB2SQL:
			case DEBUG:
			case GENERAL:
			case MODE_:
			case REXX:
			case CACHE:
			case CYCLE:
			case INCREMENT:
			case RESTART:
			case DATACLAS:
			case MGMTCLAS:
			case REMOVE:
			case STORCLAS:
			case ACCESS:
			case ACTIVATE:
			case ALWAYS:
			case APPEND:
			case ARCHIVE:
			case BUSINESS:
			case CASCADE:
			case CHANGES:
			case CONTROL:
			case DEACTIVATE:
			case DEFERRED:
			case EACH:
			case ENFORCED:
			case EXTRA:
			case FOREIGN:
			case HIDDEN_:
			case HISTORY:
			case ID:
			case IDENTITY:
			case IMPLICITLY:
			case INITIALLY:
			case INLINE:
			case OPERATION:
			case ORGANIZE:
			case OVERLAPS:
			case PACKAGE_NAME:
			case PACKAGE_SCHEMA:
			case PACKAGE_VERSION:
			case PRIMARY:
			case RESET:
			case ROTATE:
			case START:
			case SYSIBM:
			case TRANSACTION:
			case XMLSCHEMA:
			case ELEMENT:
			case URL:
			case NAMESPACE:
			case LOCATION:
			case SYSXSR:
			case ALGORITHM:
			case FIXEDLENGTH:
			case HUFFMAN:
			case LOB:
			case LOG:
			case LOGGED:
			case MAXPARTITIONS:
			case MAXROWS:
			case MEMBER:
			case MOVE:
			case PAGE:
			case PAGENUM:
			case PENDING:
			case RELATIVE:
			case SEGSIZE:
			case TRACKMOD:
			case ADDRESS:
			case ATTRIBUTES:
			case AUTHENTICATION:
			case AUTHID:
			case CONTEXT:
			case JOBNAME:
			case OWNER:
			case PROFILE:
			case QUALIFIER:
			case SERVAUTH:
			case TRUSTED:
			case SECTION:
			case ACTIVE:
			case VERSION:
			case ALIAS:
			case WORK:
			case WORKFILE:
			case SYSDEFLT:
			case NULTERM:
			case STRUCTURE:
			case GENERIC:
			case TEMPORARY:
			case DEFER:
			case DEFINE:
			case EXCLUDE:
			case GENERATE:
			case KEYS:
			case XMLPATTERN:
			case SIZE:
			case EVERY:
			case ABSOLUTE:
			case ACCELERATOR:
			case EXCLUDING:
			case INCLUDING:
			case DEFAULTS:
			case MODIFIERS:
			case OPTION:
			case PRESERVE:
			case BOTH:
			case DESCRIBE:
			case LABELS:
			case NAMES:
			case OUTPUT:
			case EXCHANGE:
			case STABILIZED:
			case STMTCACHE:
			case STMTID:
			case STMTTOKEN:
			case STARTING:
			case CATALOG_NAME:
			case CONDITION_NUMBER:
			case CURSOR_NAME:
			case DB2_AUTHENTICATION_TYPE:
			case DB2_AUTHORIZATION_ID:
			case DB2_CONNECTION_STATE:
			case DB2_CONNECTION_STATUS:
			case DB2_ENCRYPTION_TYPE:
			case DB2_ERROR_CODE1:
			case DB2_ERROR_CODE2:
			case DB2_ERROR_CODE3:
			case DB2_ERROR_CODE4:
			case DB2_GET_DIAGNOSTICS_DIAGNOSTICS:
			case DB2_INTERNAL_ERROR_POINTER:
			case DB2_LAST_ROW:
			case DB2_LINE_NUMBER:
			case DB2_MESSAGE_ID:
			case DB2_MODULE_DETECTING_ERROR:
			case DB2_NUMBER_PARAMETER_MARKERS:
			case DB2_NUMBER_RESULT_SETS:
			case DB2_NUMBER_ROWS:
			case DB2_ORDINAL_TOKEN_:
			case DB2_PRODUCT_ID:
			case DB2_REASON_CODE:
			case DB2_RETURNED_SQLCODE:
			case DB2_RETURN_STATUS:
			case DB2_ROW_NUMBER:
			case DB2_SERVER_CLASS_NAME:
			case DB2_SQL_ATTR_CURSOR_HOLD:
			case DB2_SQL_ATTR_CURSOR_ROWSET:
			case DB2_SQL_ATTR_CURSOR_SCROLLABLE:
			case DB2_SQL_ATTR_CURSOR_SENSITIVITY:
			case DB2_SQL_ATTR_CURSOR_TYPE:
			case DB2_SQLERRD1:
			case DB2_SQLERRD2:
			case DB2_SQLERRD3:
			case DB2_SQLERRD4:
			case DB2_SQLERRD5:
			case DB2_SQLERRD6:
			case DB2_SQLERRD_SET:
			case DB2_SQL_NESTING_LEVEL:
			case DB2_TOKEN_COUNT:
			case DIAGNOSTICS:
			case MORE_:
			case NUMBER:
			case RETURNED_SQLSTATE:
			case ROW_COUNT:
			case SERVER_NAME:
			case STACKED:
			case CREATETAB:
			case CREATETS:
			case DBADM:
			case DBCTRL:
			case DBMAINT:
			case DISPLAYDB:
			case IMAGCOPY:
			case LOAD:
			case PACKADM:
			case RECOVERDB:
			case REORG:
			case REPAIR:
			case STARTDB:
			case STATS:
			case STOPDB:
			case BIND:
			case ALTERIN:
			case CREATEIN:
			case DROPIN:
			case USAGE:
			case ACCESSCTRL:
			case BINDADD:
			case BINDAGENT:
			case BSDS:
			case CREATEALIAS:
			case CREATEDBA:
			case CREATEDBC:
			case CREATE_SECURE_OBJECT:
			case CREATESG:
			case CREATETMTAB:
			case DATAACCESS:
			case DEBUGSESSION:
			case DISPLAY:
			case MONITOR1:
			case MONITOR2:
			case RECOVER:
			case SQLADM:
			case STOPALL:
			case STOSPACE:
			case SYSADM:
			case SYSCTRL:
			case SYSOPR:
			case TRACE:
			case UNLOAD:
			case WRITE:
			case ABS:
			case ABSVAL:
			case ACOS:
			case ADD_DAYS:
			case ADD_MONTHS:
			case ARRAY_DELETE:
			case ARRAY_FIRST:
			case ARRAY_LAST:
			case ARRAY_NEXT:
			case ARRAY_PRIOR:
			case ARRAY_TRIM:
			case ASCII:
			case ASCII_CHR:
			case ASCIISTR:
			case ASCII_STR:
			case ASIN:
			case ATAN:
			case ATAN2:
			case ATANH:
			case BIGINT:
			case BINARY:
			case BITAND:
			case BITANDNOT:
			case BITNOT:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BTRIM:
			case CARDINALITY:
			case CCSID_ENCODING:
			case CEIL:
			case CEILING:
			case CHAR9:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case CHR:
			case CLOB:
			case COALESCE:
			case COLLATION_KEY:
			case COMPARE_DECFLOAT:
			case COS:
			case COSH:
			case DATE:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFWEEK_ISO:
			case DAYOFYEAR:
			case DAYS_BETWEEN:
			case DBCLOB:
			case DEC:
			case DECFLOAT:
			case DECFLOAT_FORMAT:
			case DECFLOAT_SORTKEY:
			case DECIMAL:
			case DECODE:
			case DECRYPT_BINARY:
			case DECRYPT_BIT:
			case DECRYPT_CHAR:
			case DECRYPT_DATAKEY_BIGINT:
			case DECRYPT_DATAKEY_BIT:
			case DECRYPT_DATAKEY_CLOB:
			case DECRYPT_DATAKEY_DBCLOB:
			case DECRYPT_DATAKEY_DECIMAL:
			case DECRYPT_DATAKEY_INTEGER:
			case DECRYPT_DATAKEY_VARCHAR:
			case DECRYPT_DATAKEY_VARGRAPHIC:
			case DECRYPT_DB:
			case DEGREES:
			case DIFFERENCE:
			case DIGITS:
			case DOUBLE_PRECISION:
			case DSN_XMLVALIDATE:
			case EBCDIC_CHR:
			case EBCDIC_STR:
			case ENCRYPT_DATAKEY:
			case ENCRYPT_TDES:
			case EXP:
			case EXTRACT:
			case FLOAT:
			case FLOOR:
			case GENERATE_UNIQUE:
			case GENERATE_UNIQUE_BINARY:
			case GETHINT:
			case GETVARIABLE:
			case GRAPHIC:
			case GREATEST:
			case HASH:
			case HASH_CRC32:
			case HASH_MD5:
			case HASH_SHA1:
			case HASH_SHA256:
			case HEX:
			case IDENTITY_VAL_LOCAL:
			case IFNULL:
			case INSTR:
			case INT:
			case INTEGER:
			case JULIAN_DAY:
			case LAST_DAY:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LN:
			case LOCATE:
			case LOCATE_IN_STRING:
			case LOG10:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAX:
			case MAX_CARDINALITY:
			case MIDNIGHT_SECONDS:
			case MIN:
			case MINUTE:
			case MOD:
			case MONTHS_BETWEEN:
			case MQREAD:
			case MQREADCLOB:
			case MQRECEIVE:
			case MQRECEIVECLOB:
			case MQSEND:
			case MULTIPLY_ALT:
			case NEXT_DAY:
			case NEXT_MONTH:
			case NORMALIZE_DECFLOAT:
			case NORMALIZE_STRING:
			case NULLIF:
			case NVL:
			case OVERLAY:
			case PACK:
			case POSITION:
			case POSSTR:
			case POW:
			case POWER:
			case QUANTIZE:
			case QUARTER:
			case RADIANS:
			case RAISE_ERROR:
			case RAND:
			case RANDOM:
			case REAL:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REPLACE:
			case RID:
			case ROUND:
			case ROUND_TIMESTAMP:
			case ROWID:
			case RPAD:
			case RTRIM:
			case SCORE:
			case SIGN:
			case SIN:
			case SINH:
			case SMALLINT:
			case SOAPHTTPC:
			case SOAPHTTPNC:
			case SOAPHTTPNV:
			case SOAPHTTPV:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STRIP:
			case STRLEFT:
			case STRPOS:
			case STRRIGHT:
			case SUBSTR:
			case SUBSTRING:
			case TAN:
			case TANH:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIMESTAMP_FORMAT:
			case TIMESTAMP_ISO:
			case TIMESTAMP_TZ:
			case TO_CHAR:
			case TO_CLOB:
			case TO_DATE:
			case TO_NUMBER:
			case TOTALORDER:
			case TO_TIMESTAMP:
			case TRANSLATE:
			case TRIM:
			case TRIM_ARRAY:
			case TRUNC:
			case TRUNC_TIMESTAMP:
			case UCASE:
			case UNICODE:
			case UNICODE_STR:
			case UNISTR:
			case UPPER:
			case VARBINARY:
			case VARCHAR:
			case VARCHAR9:
			case VARCHAR_BIT_FORMAT:
			case VARCHAR_FORMAT:
			case VARGRAPHIC:
			case VERIFY_GROUP_FOR_USER:
			case VERIFY_ROLE_FOR_USER:
			case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
			case WEEK:
			case WEEK_ISO:
			case WRAP:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLCONCAT:
			case XMLDOCUMENT:
			case XMLELEMENT:
			case XMLFOREST:
			case XMLMODIFY:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLSERIALIZE:
			case XMLTEXT:
			case XMLXSROBJECTID:
			case XSLTRANSFORM:
			case CURRENT_ACCELERATOR:
			case CURRENT_APPLICATION_COMPATIBILITY:
			case CURRENT_APPLICATION_ENCODING_SCHEME:
			case CURRENT_CLIENT_ACCTNG:
			case CURRENT_CLIENT_APPLNAME:
			case CURRENT_CLIENT_CORR_TOKEN:
			case CURRENT_CLIENT_USERID:
			case CURRENT_CLIENT_WRKSTNNAME:
			case CURRENT_DATE:
			case CURRENT_DEBUG_MODE:
			case CURRENT_DECFLOAT_ROUNDING_MODE:
			case CURRENT_DEGREE:
			case CURRENT_EXPLAIN_MODE:
			case CURRENT_GET_ACCEL_ARCHIVE:
			case CURRENT_LOCALE_LC_CTYPE:
			case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
			case CURRENT_MEMBER:
			case CURRENT_OPTIMIZATION_HINT:
			case CURRENT_PACKAGE_PATH:
			case CURRENT_PACKAGESET:
			case CURRENT_PATH:
			case CURRENT_PRECISION:
			case CURRENT_QUERY_ACCELERATION:
			case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
			case CURRENT_REFRESH_AGE:
			case CURRENT_ROUTINE_VERSION:
			case CURRENT_RULES:
			case CURRENT_SCHEMA:
			case CURRENT_SERVER:
			case CURRENT_SQLID:
			case CURRENT_TEMPORAL_BUSINESS_TIME:
			case CURRENT_TEMPORAL_SYSTEM_TIME:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_TIME_ZONE:
			case ENCRYPTION_PASSWORD:
			case SESSION_TIME_ZONE:
			case SESSION_USER:
			case USER:
			case ADMIN_TASK_LIST:
			case ADMIN_TASK_OUTPUT:
			case ADMIN_TASK_STATUS:
			case BLOCKING_THREADS:
			case MQREADALL:
			case MQREADALLCLOB:
			case MQRECEIVEALL:
			case MQRECEIVEALLCLOB:
			case XMLTABLE:
			case SQLIDENTIFIER:
				{
				{
				setState(9104);
				selectColumns();
				setState(9109);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(9105);
					match(COMMA);
					setState(9106);
					selectColumns();
					}
					}
					setState(9111);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubSelectContext extends ParserRuleContext {
		public SelectClauseContext selectClause() {
			return getRuleContext(SelectClauseContext.class,0);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public GroupByClauseContext groupByClause() {
			return getRuleContext(GroupByClauseContext.class,0);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public OffsetClauseContext offsetClause() {
			return getRuleContext(OffsetClauseContext.class,0);
		}
		public FetchClauseContext fetchClause() {
			return getRuleContext(FetchClauseContext.class,0);
		}
		public SubSelectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subSelect; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSubSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSubSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSubSelect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubSelectContext subSelect() throws RecognitionException {
		SubSelectContext _localctx = new SubSelectContext(_ctx, getState());
		enterRule(_localctx, 1248, RULE_subSelect);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9114);
			selectClause();
			setState(9115);
			fromClause();
			setState(9117);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(9116);
				whereClause();
				}
			}

			setState(9120);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GROUP) {
				{
				setState(9119);
				groupByClause();
				}
			}

			setState(9123);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HAVING) {
				{
				setState(9122);
				havingClause();
				}
			}

			setState(9126);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1102,_ctx) ) {
			case 1:
				{
				setState(9125);
				orderByClause();
				}
				break;
			}
			setState(9129);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1103,_ctx) ) {
			case 1:
				{
				setState(9128);
				offsetClause();
				}
				break;
			}
			setState(9132);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1104,_ctx) ) {
			case 1:
				{
				setState(9131);
				fetchClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectIntoStatementContext extends ParserRuleContext {
		public SelectClauseContext selectClause() {
			return getRuleContext(SelectClauseContext.class,0);
		}
		public IntoClauseContext intoClause() {
			return getRuleContext(IntoClauseContext.class,0);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public List<CommonTableExpressionContext> commonTableExpression() {
			return getRuleContexts(CommonTableExpressionContext.class);
		}
		public CommonTableExpressionContext commonTableExpression(int i) {
			return getRuleContext(CommonTableExpressionContext.class,i);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public GroupByClauseContext groupByClause() {
			return getRuleContext(GroupByClauseContext.class,0);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public OffsetClauseContext offsetClause() {
			return getRuleContext(OffsetClauseContext.class,0);
		}
		public FetchClauseContext fetchClause() {
			return getRuleContext(FetchClauseContext.class,0);
		}
		public IsolationClauseContext isolationClause() {
			return getRuleContext(IsolationClauseContext.class,0);
		}
		public SkipLockedDataClauseContext skipLockedDataClause() {
			return getRuleContext(SkipLockedDataClauseContext.class,0);
		}
		public QuerynoClauseContext querynoClause() {
			return getRuleContext(QuerynoClauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public SelectIntoStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectIntoStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSelectIntoStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSelectIntoStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSelectIntoStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectIntoStatementContext selectIntoStatement() throws RecognitionException {
		SelectIntoStatementContext _localctx = new SelectIntoStatementContext(_ctx, getState());
		enterRule(_localctx, 1250, RULE_selectIntoStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9143);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(9134);
				match(WITH);
				setState(9135);
				commonTableExpression();
				setState(9140);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(9136);
					match(COMMA);
					setState(9137);
					commonTableExpression();
					}
					}
					setState(9142);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(9145);
			selectClause();
			setState(9146);
			intoClause();
			setState(9147);
			fromClause();
			setState(9149);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(9148);
				whereClause();
				}
			}

			setState(9152);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GROUP) {
				{
				setState(9151);
				groupByClause();
				}
			}

			setState(9155);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HAVING) {
				{
				setState(9154);
				havingClause();
				}
			}

			setState(9158);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(9157);
				orderByClause();
				}
			}

			setState(9161);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OFFSET) {
				{
				setState(9160);
				offsetClause();
				}
			}

			setState(9164);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FETCH) {
				{
				setState(9163);
				fetchClause();
				}
			}

			setState(9168);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				{
				setState(9166);
				isolationClause();
				}
				break;
			case SKIP_:
				{
				setState(9167);
				skipLockedDataClause();
				}
				break;
			case EOF:
			case SEMICOLON:
			case END_EXEC:
			case QUERYNO:
				break;
			default:
				break;
			}
			setState(9171);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==QUERYNO) {
				{
				setState(9170);
				querynoClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectStatementContext extends ParserRuleContext {
		public FullSelectContext fullSelect() {
			return getRuleContext(FullSelectContext.class,0);
		}
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public List<CommonTableExpressionContext> commonTableExpression() {
			return getRuleContexts(CommonTableExpressionContext.class);
		}
		public CommonTableExpressionContext commonTableExpression(int i) {
			return getRuleContext(CommonTableExpressionContext.class,i);
		}
		public List<UpdateClauseContext> updateClause() {
			return getRuleContexts(UpdateClauseContext.class);
		}
		public UpdateClauseContext updateClause(int i) {
			return getRuleContext(UpdateClauseContext.class,i);
		}
		public List<ReadOnlyClauseContext> readOnlyClause() {
			return getRuleContexts(ReadOnlyClauseContext.class);
		}
		public ReadOnlyClauseContext readOnlyClause(int i) {
			return getRuleContext(ReadOnlyClauseContext.class,i);
		}
		public List<OptimizeClauseContext> optimizeClause() {
			return getRuleContexts(OptimizeClauseContext.class);
		}
		public OptimizeClauseContext optimizeClause(int i) {
			return getRuleContext(OptimizeClauseContext.class,i);
		}
		public List<IsolationClauseContext> isolationClause() {
			return getRuleContexts(IsolationClauseContext.class);
		}
		public IsolationClauseContext isolationClause(int i) {
			return getRuleContext(IsolationClauseContext.class,i);
		}
		public List<SkipLockedDataClauseContext> skipLockedDataClause() {
			return getRuleContexts(SkipLockedDataClauseContext.class);
		}
		public SkipLockedDataClauseContext skipLockedDataClause(int i) {
			return getRuleContext(SkipLockedDataClauseContext.class,i);
		}
		public List<QuerynoClauseContext> querynoClause() {
			return getRuleContexts(QuerynoClauseContext.class);
		}
		public QuerynoClauseContext querynoClause(int i) {
			return getRuleContext(QuerynoClauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public SelectStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSelectStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSelectStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSelectStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectStatementContext selectStatement() throws RecognitionException {
		SelectStatementContext _localctx = new SelectStatementContext(_ctx, getState());
		enterRule(_localctx, 1252, RULE_selectStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9182);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(9173);
				match(WITH);
				setState(9174);
				commonTableExpression();
				setState(9179);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(9175);
					match(COMMA);
					setState(9176);
					commonTableExpression();
					}
					}
					setState(9181);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(9184);
			fullSelect();
			setState(9193);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FOR || _la==OPTIMIZE || _la==QUERYNO || _la==WITH || _la==SKIP_) {
				{
				setState(9191);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1117,_ctx) ) {
				case 1:
					{
					setState(9185);
					updateClause();
					}
					break;
				case 2:
					{
					setState(9186);
					readOnlyClause();
					}
					break;
				case 3:
					{
					setState(9187);
					optimizeClause();
					}
					break;
				case 4:
					{
					setState(9188);
					isolationClause();
					}
					break;
				case 5:
					{
					setState(9189);
					skipLockedDataClause();
					}
					break;
				case 6:
					{
					setState(9190);
					querynoClause();
					}
					break;
				}
				}
				setState(9195);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommonTableExpressionContext extends ParserRuleContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public FullSelectContext fullSelect() {
			return getRuleContext(FullSelectContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public CommonTableExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commonTableExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCommonTableExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCommonTableExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCommonTableExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommonTableExpressionContext commonTableExpression() throws RecognitionException {
		CommonTableExpressionContext _localctx = new CommonTableExpressionContext(_ctx, getState());
		enterRule(_localctx, 1254, RULE_commonTableExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9196);
			tableName();
			setState(9197);
			match(LPAREN);
			setState(9198);
			columnName();
			setState(9203);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9199);
				match(COMMA);
				setState(9200);
				columnName();
				}
				}
				setState(9205);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(9206);
			match(RPAREN);
			setState(9207);
			match(AS);
			setState(9208);
			match(LPAREN);
			setState(9209);
			fullSelect();
			setState(9210);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateClauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(DB2zSQLParser.UPDATE, 0); }
		public TerminalNode OF() { return getToken(DB2zSQLParser.OF, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public UpdateClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterUpdateClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitUpdateClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitUpdateClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateClauseContext updateClause() throws RecognitionException {
		UpdateClauseContext _localctx = new UpdateClauseContext(_ctx, getState());
		enterRule(_localctx, 1256, RULE_updateClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(9212);
			match(FOR);
			setState(9213);
			match(UPDATE);
			setState(9223);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OF) {
				{
				setState(9214);
				match(OF);
				setState(9215);
				columnName();
				setState(9220);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(9216);
					match(COMMA);
					setState(9217);
					columnName();
					}
					}
					setState(9222);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReadOnlyClauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode READ() { return getToken(DB2zSQLParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(DB2zSQLParser.ONLY, 0); }
		public ReadOnlyClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_readOnlyClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterReadOnlyClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitReadOnlyClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitReadOnlyClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReadOnlyClauseContext readOnlyClause() throws RecognitionException {
		ReadOnlyClauseContext _localctx = new ReadOnlyClauseContext(_ctx, getState());
		enterRule(_localctx, 1258, RULE_readOnlyClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(9225);
			match(FOR);
			setState(9226);
			match(READ);
			setState(9227);
			match(ONLY);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptimizeClauseContext extends ParserRuleContext {
		public TerminalNode OPTIMIZE() { return getToken(DB2zSQLParser.OPTIMIZE, 0); }
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode ROW() { return getToken(DB2zSQLParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(DB2zSQLParser.ROWS, 0); }
		public OptimizeClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optimizeClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterOptimizeClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitOptimizeClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitOptimizeClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptimizeClauseContext optimizeClause() throws RecognitionException {
		OptimizeClauseContext _localctx = new OptimizeClauseContext(_ctx, getState());
		enterRule(_localctx, 1260, RULE_optimizeClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9229);
			match(OPTIMIZE);
			setState(9230);
			match(FOR);
			setState(9231);
			match(INTEGERLITERAL);
			setState(9232);
			_la = _input.LA(1);
			if ( !(_la==ROW || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IsolationClauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode CS() { return getToken(DB2zSQLParser.CS, 0); }
		public TerminalNode UR() { return getToken(DB2zSQLParser.UR, 0); }
		public TerminalNode RR() { return getToken(DB2zSQLParser.RR, 0); }
		public TerminalNode RS() { return getToken(DB2zSQLParser.RS, 0); }
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public IsolationClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_isolationClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterIsolationClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitIsolationClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitIsolationClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IsolationClauseContext isolationClause() throws RecognitionException {
		IsolationClauseContext _localctx = new IsolationClauseContext(_ctx, getState());
		enterRule(_localctx, 1262, RULE_isolationClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9234);
			match(WITH);
			setState(9245);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RR:
				{
				{
				setState(9235);
				match(RR);
				setState(9237);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USE) {
					{
					setState(9236);
					lockClause();
					}
				}

				}
				}
				break;
			case RS:
				{
				{
				setState(9239);
				match(RS);
				setState(9241);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USE) {
					{
					setState(9240);
					lockClause();
					}
				}

				}
				}
				break;
			case CS:
				{
				setState(9243);
				match(CS);
				}
				break;
			case UR:
				{
				setState(9244);
				match(UR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockClauseContext extends ParserRuleContext {
		public TerminalNode USE() { return getToken(DB2zSQLParser.USE, 0); }
		public TerminalNode AND() { return getToken(DB2zSQLParser.AND, 0); }
		public TerminalNode KEEP() { return getToken(DB2zSQLParser.KEEP, 0); }
		public TerminalNode LOCKS() { return getToken(DB2zSQLParser.LOCKS, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(DB2zSQLParser.EXCLUSIVE, 0); }
		public TerminalNode UPDATE() { return getToken(DB2zSQLParser.UPDATE, 0); }
		public TerminalNode SHARE() { return getToken(DB2zSQLParser.SHARE, 0); }
		public LockClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterLockClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitLockClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitLockClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockClauseContext lockClause() throws RecognitionException {
		LockClauseContext _localctx = new LockClauseContext(_ctx, getState());
		enterRule(_localctx, 1264, RULE_lockClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(9247);
			match(USE);
			setState(9248);
			match(AND);
			setState(9249);
			match(KEEP);
			setState(9250);
			_la = _input.LA(1);
			if ( !(_la==UPDATE || _la==EXCLUSIVE || _la==SHARE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(9251);
			match(LOCKS);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SkipLockedDataClauseContext extends ParserRuleContext {
		public TerminalNode SKIP_() { return getToken(DB2zSQLParser.SKIP_, 0); }
		public TerminalNode LOCKED() { return getToken(DB2zSQLParser.LOCKED, 0); }
		public TerminalNode DATA() { return getToken(DB2zSQLParser.DATA, 0); }
		public SkipLockedDataClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_skipLockedDataClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSkipLockedDataClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSkipLockedDataClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSkipLockedDataClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SkipLockedDataClauseContext skipLockedDataClause() throws RecognitionException {
		SkipLockedDataClauseContext _localctx = new SkipLockedDataClauseContext(_ctx, getState());
		enterRule(_localctx, 1266, RULE_skipLockedDataClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(9253);
			match(SKIP_);
			setState(9254);
			match(LOCKED);
			setState(9255);
			match(DATA);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QuerynoClauseContext extends ParserRuleContext {
		public TerminalNode QUERYNO() { return getToken(DB2zSQLParser.QUERYNO, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public QuerynoClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_querynoClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterQuerynoClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitQuerynoClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitQuerynoClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QuerynoClauseContext querynoClause() throws RecognitionException {
		QuerynoClauseContext _localctx = new QuerynoClauseContext(_ctx, getState());
		enterRule(_localctx, 1268, RULE_querynoClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(9257);
			match(QUERYNO);
			setState(9258);
			match(INTEGERLITERAL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScalarFullSelectContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public FullSelectContext fullSelect() {
			return getRuleContext(FullSelectContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public ScalarFullSelectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scalarFullSelect; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterScalarFullSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitScalarFullSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitScalarFullSelect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ScalarFullSelectContext scalarFullSelect() throws RecognitionException {
		ScalarFullSelectContext _localctx = new ScalarFullSelectContext(_ctx, getState());
		enterRule(_localctx, 1270, RULE_scalarFullSelect);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9260);
			match(LPAREN);
			setState(9261);
			fullSelect();
			setState(9262);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FullSelectContext extends ParserRuleContext {
		public List<SubSelectContext> subSelect() {
			return getRuleContexts(SubSelectContext.class);
		}
		public SubSelectContext subSelect(int i) {
			return getRuleContext(SubSelectContext.class,i);
		}
		public ValuesClauseContext valuesClause() {
			return getRuleContext(ValuesClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public OffsetClauseContext offsetClause() {
			return getRuleContext(OffsetClauseContext.class,0);
		}
		public FetchClauseContext fetchClause() {
			return getRuleContext(FetchClauseContext.class,0);
		}
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public List<FullSelectContext> fullSelect() {
			return getRuleContexts(FullSelectContext.class);
		}
		public FullSelectContext fullSelect(int i) {
			return getRuleContext(FullSelectContext.class,i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public List<TerminalNode> UNION() { return getTokens(DB2zSQLParser.UNION); }
		public TerminalNode UNION(int i) {
			return getToken(DB2zSQLParser.UNION, i);
		}
		public List<TerminalNode> EXCEPT() { return getTokens(DB2zSQLParser.EXCEPT); }
		public TerminalNode EXCEPT(int i) {
			return getToken(DB2zSQLParser.EXCEPT, i);
		}
		public List<TerminalNode> INTERSECT() { return getTokens(DB2zSQLParser.INTERSECT); }
		public TerminalNode INTERSECT(int i) {
			return getToken(DB2zSQLParser.INTERSECT, i);
		}
		public List<TerminalNode> DISTINCT() { return getTokens(DB2zSQLParser.DISTINCT); }
		public TerminalNode DISTINCT(int i) {
			return getToken(DB2zSQLParser.DISTINCT, i);
		}
		public List<TerminalNode> ALL() { return getTokens(DB2zSQLParser.ALL); }
		public TerminalNode ALL(int i) {
			return getToken(DB2zSQLParser.ALL, i);
		}
		public FullSelectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullSelect; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFullSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFullSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFullSelect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FullSelectContext fullSelect() throws RecognitionException {
		FullSelectContext _localctx = new FullSelectContext(_ctx, getState());
		enterRule(_localctx, 1272, RULE_fullSelect);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9270);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LPAREN:
				{
				{
				setState(9264);
				match(LPAREN);
				setState(9265);
				fullSelect();
				setState(9266);
				match(RPAREN);
				}
				}
				break;
			case SELECT:
				{
				setState(9268);
				subSelect();
				}
				break;
			case VALUES:
				{
				setState(9269);
				valuesClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(9285);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==EXCEPT || _la==INTERSECT || _la==UNION) {
				{
				{
				setState(9272);
				_la = _input.LA(1);
				if ( !(_la==EXCEPT || _la==INTERSECT || _la==UNION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9274);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					setState(9273);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(9281);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SELECT:
					{
					setState(9276);
					subSelect();
					}
					break;
				case LPAREN:
					{
					{
					setState(9277);
					match(LPAREN);
					setState(9278);
					fullSelect();
					setState(9279);
					match(RPAREN);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				setState(9287);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(9289);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(9288);
				orderByClause();
				}
			}

			setState(9292);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OFFSET) {
				{
				setState(9291);
				offsetClause();
				}
			}

			setState(9295);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FETCH) {
				{
				setState(9294);
				fetchClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValuesClauseContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(DB2zSQLParser.VALUES, 0); }
		public List<SequenceReferenceContext> sequenceReference() {
			return getRuleContexts(SequenceReferenceContext.class);
		}
		public SequenceReferenceContext sequenceReference(int i) {
			return getRuleContext(SequenceReferenceContext.class,i);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public ValuesClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valuesClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterValuesClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitValuesClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitValuesClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValuesClauseContext valuesClause() throws RecognitionException {
		ValuesClauseContext _localctx = new ValuesClauseContext(_ctx, getState());
		enterRule(_localctx, 1274, RULE_valuesClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9297);
			match(VALUES);
			setState(9310);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NEXT:
			case PREVIOUS:
				{
				setState(9298);
				sequenceReference();
				}
				break;
			case LPAREN:
				{
				{
				setState(9299);
				match(LPAREN);
				setState(9300);
				sequenceReference();
				setState(9305);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(9301);
					match(COMMA);
					setState(9302);
					sequenceReference();
					}
					}
					setState(9307);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(9308);
				match(RPAREN);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderByClauseContext extends ParserRuleContext {
		public List<TerminalNode> ORDER() { return getTokens(DB2zSQLParser.ORDER); }
		public TerminalNode ORDER(int i) {
			return getToken(DB2zSQLParser.ORDER, i);
		}
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public List<SortKeyContext> sortKey() {
			return getRuleContexts(SortKeyContext.class);
		}
		public SortKeyContext sortKey(int i) {
			return getRuleContext(SortKeyContext.class,i);
		}
		public TerminalNode INPUT() { return getToken(DB2zSQLParser.INPUT, 0); }
		public TerminalNode SEQUENCE() { return getToken(DB2zSQLParser.SEQUENCE, 0); }
		public TerminalNode OF() { return getToken(DB2zSQLParser.OF, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public List<TerminalNode> ASC() { return getTokens(DB2zSQLParser.ASC); }
		public TerminalNode ASC(int i) {
			return getToken(DB2zSQLParser.ASC, i);
		}
		public List<TerminalNode> DESC() { return getTokens(DB2zSQLParser.DESC); }
		public TerminalNode DESC(int i) {
			return getToken(DB2zSQLParser.DESC, i);
		}
		public OrderByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterOrderByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitOrderByClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitOrderByClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderByClauseContext orderByClause() throws RecognitionException {
		OrderByClauseContext _localctx = new OrderByClauseContext(_ctx, getState());
		enterRule(_localctx, 1276, RULE_orderByClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9312);
			match(ORDER);
			setState(9313);
			match(BY);
			setState(9333);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1137,_ctx) ) {
			case 1:
				{
				{
				setState(9314);
				sortKey();
				setState(9316);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					setState(9315);
					_la = _input.LA(1);
					if ( !(_la==ASC || _la==DESC) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(9325);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(9318);
					match(COMMA);
					setState(9319);
					sortKey();
					setState(9321);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ASC || _la==DESC) {
						{
						setState(9320);
						_la = _input.LA(1);
						if ( !(_la==ASC || _la==DESC) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					}
					}
					setState(9327);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case 2:
				{
				{
				setState(9328);
				match(INPUT);
				setState(9329);
				match(SEQUENCE);
				}
				}
				break;
			case 3:
				{
				{
				setState(9330);
				match(ORDER);
				setState(9331);
				match(OF);
				setState(9332);
				tableName();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SortKeyContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public SortKeyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sortKey; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSortKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSortKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSortKey(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SortKeyContext sortKey() throws RecognitionException {
		SortKeyContext _localctx = new SortKeyContext(_ctx, getState());
		enterRule(_localctx, 1278, RULE_sortKey);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9338);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1138,_ctx) ) {
			case 1:
				{
				setState(9335);
				columnName();
				}
				break;
			case 2:
				{
				setState(9336);
				match(INTEGERLITERAL);
				}
				break;
			case 3:
				{
				setState(9337);
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OffsetClauseContext extends ParserRuleContext {
		public TerminalNode OFFSET() { return getToken(DB2zSQLParser.OFFSET, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode ROW() { return getToken(DB2zSQLParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(DB2zSQLParser.ROWS, 0); }
		public OffsetClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_offsetClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterOffsetClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitOffsetClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitOffsetClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OffsetClauseContext offsetClause() throws RecognitionException {
		OffsetClauseContext _localctx = new OffsetClauseContext(_ctx, getState());
		enterRule(_localctx, 1280, RULE_offsetClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9340);
			match(OFFSET);
			setState(9341);
			match(INTEGERLITERAL);
			setState(9342);
			_la = _input.LA(1);
			if ( !(_la==ROW || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FetchClauseContext extends ParserRuleContext {
		public TerminalNode FETCH() { return getToken(DB2zSQLParser.FETCH, 0); }
		public TerminalNode ONLY() { return getToken(DB2zSQLParser.ONLY, 0); }
		public TerminalNode FIRST() { return getToken(DB2zSQLParser.FIRST, 0); }
		public TerminalNode NEXT() { return getToken(DB2zSQLParser.NEXT, 0); }
		public TerminalNode ROW() { return getToken(DB2zSQLParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(DB2zSQLParser.ROWS, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public FetchClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetchClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFetchClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFetchClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFetchClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FetchClauseContext fetchClause() throws RecognitionException {
		FetchClauseContext _localctx = new FetchClauseContext(_ctx, getState());
		enterRule(_localctx, 1282, RULE_fetchClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9344);
			match(FETCH);
			setState(9345);
			_la = _input.LA(1);
			if ( !(_la==FIRST || _la==NEXT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(9347);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTEGERLITERAL) {
				{
				setState(9346);
				match(INTEGERLITERAL);
				}
			}

			setState(9349);
			_la = _input.LA(1);
			if ( !(_la==ROW || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(9350);
			match(ONLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierContext extends ParserRuleContext {
		public TerminalNode SQLIDENTIFIER() { return getToken(DB2zSQLParser.SQLIDENTIFIER, 0); }
		public SqlKeywordContext sqlKeyword() {
			return getRuleContext(SqlKeywordContext.class,0);
		}
		public SpecialRegisterContext specialRegister() {
			return getRuleContext(SpecialRegisterContext.class,0);
		}
		public ScalarFunctionContext scalarFunction() {
			return getRuleContext(ScalarFunctionContext.class,0);
		}
		public AggregateFunctionContext aggregateFunction() {
			return getRuleContext(AggregateFunctionContext.class,0);
		}
		public RegressionFunctionContext regressionFunction() {
			return getRuleContext(RegressionFunctionContext.class,0);
		}
		public TableFunctionContext tableFunction() {
			return getRuleContext(TableFunctionContext.class,0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierContext identifier() throws RecognitionException {
		IdentifierContext _localctx = new IdentifierContext(_ctx, getState());
		enterRule(_localctx, 1284, RULE_identifier);
		try {
			setState(9359);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1140,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9352);
				match(SQLIDENTIFIER);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9353);
				sqlKeyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9354);
				specialRegister();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9355);
				scalarFunction();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9356);
				aggregateFunction();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9357);
				regressionFunction();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(9358);
				tableFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SqlKeywordContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(DB2zSQLParser.ADD, 0); }
		public TerminalNode AFTER() { return getToken(DB2zSQLParser.AFTER, 0); }
		public TerminalNode ALL() { return getToken(DB2zSQLParser.ALL, 0); }
		public TerminalNode ALLOCATE() { return getToken(DB2zSQLParser.ALLOCATE, 0); }
		public TerminalNode ALLOW() { return getToken(DB2zSQLParser.ALLOW, 0); }
		public TerminalNode ALTERAND() { return getToken(DB2zSQLParser.ALTERAND, 0); }
		public TerminalNode ANY() { return getToken(DB2zSQLParser.ANY, 0); }
		public TerminalNode ARRAY() { return getToken(DB2zSQLParser.ARRAY, 0); }
		public TerminalNode ARRAY_EXISTS() { return getToken(DB2zSQLParser.ARRAY_EXISTS, 0); }
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode ASENSITIVE() { return getToken(DB2zSQLParser.ASENSITIVE, 0); }
		public TerminalNode ASSOCIATE() { return getToken(DB2zSQLParser.ASSOCIATE, 0); }
		public TerminalNode ASUTIME() { return getToken(DB2zSQLParser.ASUTIME, 0); }
		public TerminalNode AT() { return getToken(DB2zSQLParser.AT, 0); }
		public TerminalNode AUDIT() { return getToken(DB2zSQLParser.AUDIT, 0); }
		public TerminalNode AUX() { return getToken(DB2zSQLParser.AUX, 0); }
		public TerminalNode AUXILIARY() { return getToken(DB2zSQLParser.AUXILIARY, 0); }
		public TerminalNode BEFORE() { return getToken(DB2zSQLParser.BEFORE, 0); }
		public TerminalNode BEGIN() { return getToken(DB2zSQLParser.BEGIN, 0); }
		public TerminalNode BETWEEN() { return getToken(DB2zSQLParser.BETWEEN, 0); }
		public TerminalNode BUFFERPOOL() { return getToken(DB2zSQLParser.BUFFERPOOL, 0); }
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public TerminalNode CALL() { return getToken(DB2zSQLParser.CALL, 0); }
		public TerminalNode CAPTURE() { return getToken(DB2zSQLParser.CAPTURE, 0); }
		public TerminalNode CASCADED() { return getToken(DB2zSQLParser.CASCADED, 0); }
		public TerminalNode CASE() { return getToken(DB2zSQLParser.CASE, 0); }
		public TerminalNode CAST() { return getToken(DB2zSQLParser.CAST, 0); }
		public TerminalNode CCSID() { return getToken(DB2zSQLParser.CCSID, 0); }
		public TerminalNode CHAR() { return getToken(DB2zSQLParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(DB2zSQLParser.CHARACTER, 0); }
		public TerminalNode CHECK() { return getToken(DB2zSQLParser.CHECK, 0); }
		public TerminalNode CLONE() { return getToken(DB2zSQLParser.CLONE, 0); }
		public TerminalNode CLOSE() { return getToken(DB2zSQLParser.CLOSE, 0); }
		public TerminalNode CLUSTER() { return getToken(DB2zSQLParser.CLUSTER, 0); }
		public TerminalNode COLLECTION() { return getToken(DB2zSQLParser.COLLECTION, 0); }
		public TerminalNode COLLID() { return getToken(DB2zSQLParser.COLLID, 0); }
		public TerminalNode COLUMN() { return getToken(DB2zSQLParser.COLUMN, 0); }
		public TerminalNode COMMENT() { return getToken(DB2zSQLParser.COMMENT, 0); }
		public TerminalNode COMMIT() { return getToken(DB2zSQLParser.COMMIT, 0); }
		public TerminalNode CONCAT() { return getToken(DB2zSQLParser.CONCAT, 0); }
		public TerminalNode CONDITION() { return getToken(DB2zSQLParser.CONDITION, 0); }
		public TerminalNode CONNECT() { return getToken(DB2zSQLParser.CONNECT, 0); }
		public TerminalNode CONNECTION() { return getToken(DB2zSQLParser.CONNECTION, 0); }
		public TerminalNode CONSTRAINT() { return getToken(DB2zSQLParser.CONSTRAINT, 0); }
		public TerminalNode CONTAINS() { return getToken(DB2zSQLParser.CONTAINS, 0); }
		public TerminalNode CONTENT() { return getToken(DB2zSQLParser.CONTENT, 0); }
		public TerminalNode CONTINUE() { return getToken(DB2zSQLParser.CONTINUE, 0); }
		public TerminalNode CREATE() { return getToken(DB2zSQLParser.CREATE, 0); }
		public TerminalNode CUBE() { return getToken(DB2zSQLParser.CUBE, 0); }
		public TerminalNode CURRENT() { return getToken(DB2zSQLParser.CURRENT, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(DB2zSQLParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_LC_CTYPE() { return getToken(DB2zSQLParser.CURRENT_LC_CTYPE, 0); }
		public TerminalNode CURRENT_PATH() { return getToken(DB2zSQLParser.CURRENT_PATH, 0); }
		public TerminalNode CURRENT_SCHEMA() { return getToken(DB2zSQLParser.CURRENT_SCHEMA, 0); }
		public TerminalNode CURRENT_SERVER() { return getToken(DB2zSQLParser.CURRENT_SERVER, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(DB2zSQLParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(DB2zSQLParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_TIME_ZONE() { return getToken(DB2zSQLParser.CURRENT_TIME_ZONE, 0); }
		public TerminalNode CURRVAL() { return getToken(DB2zSQLParser.CURRVAL, 0); }
		public TerminalNode CURSOR() { return getToken(DB2zSQLParser.CURSOR, 0); }
		public TerminalNode DATA() { return getToken(DB2zSQLParser.DATA, 0); }
		public TerminalNode DATABASE() { return getToken(DB2zSQLParser.DATABASE, 0); }
		public TerminalNode DAY() { return getToken(DB2zSQLParser.DAY, 0); }
		public TerminalNode DAYS() { return getToken(DB2zSQLParser.DAYS, 0); }
		public TerminalNode DBINFO() { return getToken(DB2zSQLParser.DBINFO, 0); }
		public TerminalNode DECLARE() { return getToken(DB2zSQLParser.DECLARE, 0); }
		public TerminalNode DEFAULT() { return getToken(DB2zSQLParser.DEFAULT, 0); }
		public TerminalNode DELETE() { return getToken(DB2zSQLParser.DELETE, 0); }
		public TerminalNode DESCRIPTOR() { return getToken(DB2zSQLParser.DESCRIPTOR, 0); }
		public TerminalNode DETERMINISTIC() { return getToken(DB2zSQLParser.DETERMINISTIC, 0); }
		public TerminalNode DISABLE() { return getToken(DB2zSQLParser.DISABLE, 0); }
		public TerminalNode DISALLOW() { return getToken(DB2zSQLParser.DISALLOW, 0); }
		public TerminalNode DISTINCT() { return getToken(DB2zSQLParser.DISTINCT, 0); }
		public TerminalNode DO() { return getToken(DB2zSQLParser.DO, 0); }
		public TerminalNode DOCUMENT() { return getToken(DB2zSQLParser.DOCUMENT, 0); }
		public TerminalNode DOUBLE() { return getToken(DB2zSQLParser.DOUBLE, 0); }
		public TerminalNode DROP() { return getToken(DB2zSQLParser.DROP, 0); }
		public TerminalNode DSSIZE() { return getToken(DB2zSQLParser.DSSIZE, 0); }
		public TerminalNode DYNAMIC() { return getToken(DB2zSQLParser.DYNAMIC, 0); }
		public TerminalNode EDITPROC() { return getToken(DB2zSQLParser.EDITPROC, 0); }
		public TerminalNode ELSE() { return getToken(DB2zSQLParser.ELSE, 0); }
		public TerminalNode ELSEIF() { return getToken(DB2zSQLParser.ELSEIF, 0); }
		public TerminalNode ENCODING() { return getToken(DB2zSQLParser.ENCODING, 0); }
		public TerminalNode ENCRYPTION() { return getToken(DB2zSQLParser.ENCRYPTION, 0); }
		public TerminalNode END() { return getToken(DB2zSQLParser.END, 0); }
		public TerminalNode END_EXEC() { return getToken(DB2zSQLParser.END_EXEC, 0); }
		public TerminalNode ENDING() { return getToken(DB2zSQLParser.ENDING, 0); }
		public TerminalNode ERASE() { return getToken(DB2zSQLParser.ERASE, 0); }
		public TerminalNode ESCAPE() { return getToken(DB2zSQLParser.ESCAPE, 0); }
		public TerminalNode EXCEPT() { return getToken(DB2zSQLParser.EXCEPT, 0); }
		public TerminalNode EXCEPTION() { return getToken(DB2zSQLParser.EXCEPTION, 0); }
		public TerminalNode EXEC_SQL() { return getToken(DB2zSQLParser.EXEC_SQL, 0); }
		public TerminalNode EXECUTE() { return getToken(DB2zSQLParser.EXECUTE, 0); }
		public TerminalNode EXISTS() { return getToken(DB2zSQLParser.EXISTS, 0); }
		public TerminalNode EXIT() { return getToken(DB2zSQLParser.EXIT, 0); }
		public TerminalNode EXPLAIN() { return getToken(DB2zSQLParser.EXPLAIN, 0); }
		public TerminalNode EXTERNAL() { return getToken(DB2zSQLParser.EXTERNAL, 0); }
		public TerminalNode FENCED() { return getToken(DB2zSQLParser.FENCED, 0); }
		public TerminalNode FETCH() { return getToken(DB2zSQLParser.FETCH, 0); }
		public TerminalNode FIELDPROC() { return getToken(DB2zSQLParser.FIELDPROC, 0); }
		public TerminalNode FINAL() { return getToken(DB2zSQLParser.FINAL, 0); }
		public TerminalNode FIRST() { return getToken(DB2zSQLParser.FIRST, 0); }
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode FREE() { return getToken(DB2zSQLParser.FREE, 0); }
		public TerminalNode FROM() { return getToken(DB2zSQLParser.FROM, 0); }
		public TerminalNode FULL() { return getToken(DB2zSQLParser.FULL, 0); }
		public TerminalNode FUNCTION() { return getToken(DB2zSQLParser.FUNCTION, 0); }
		public TerminalNode GENERATED() { return getToken(DB2zSQLParser.GENERATED, 0); }
		public TerminalNode GET() { return getToken(DB2zSQLParser.GET, 0); }
		public TerminalNode GLOBAL() { return getToken(DB2zSQLParser.GLOBAL, 0); }
		public TerminalNode GO() { return getToken(DB2zSQLParser.GO, 0); }
		public TerminalNode GOTO() { return getToken(DB2zSQLParser.GOTO, 0); }
		public TerminalNode GRANT() { return getToken(DB2zSQLParser.GRANT, 0); }
		public TerminalNode GROUP() { return getToken(DB2zSQLParser.GROUP, 0); }
		public TerminalNode HANDLER() { return getToken(DB2zSQLParser.HANDLER, 0); }
		public TerminalNode HAVING() { return getToken(DB2zSQLParser.HAVING, 0); }
		public TerminalNode HOLD() { return getToken(DB2zSQLParser.HOLD, 0); }
		public TerminalNode HOUR() { return getToken(DB2zSQLParser.HOUR, 0); }
		public TerminalNode HOURS() { return getToken(DB2zSQLParser.HOURS, 0); }
		public TerminalNode IF() { return getToken(DB2zSQLParser.IF, 0); }
		public TerminalNode IMMEDIATE() { return getToken(DB2zSQLParser.IMMEDIATE, 0); }
		public TerminalNode IN() { return getToken(DB2zSQLParser.IN, 0); }
		public TerminalNode INCLUSIVE() { return getToken(DB2zSQLParser.INCLUSIVE, 0); }
		public TerminalNode INDEX() { return getToken(DB2zSQLParser.INDEX, 0); }
		public TerminalNode INHERIT() { return getToken(DB2zSQLParser.INHERIT, 0); }
		public TerminalNode INNER() { return getToken(DB2zSQLParser.INNER, 0); }
		public TerminalNode INOUT() { return getToken(DB2zSQLParser.INOUT, 0); }
		public TerminalNode INSENSITIVE() { return getToken(DB2zSQLParser.INSENSITIVE, 0); }
		public TerminalNode INSERT() { return getToken(DB2zSQLParser.INSERT, 0); }
		public TerminalNode INTERSECT() { return getToken(DB2zSQLParser.INTERSECT, 0); }
		public TerminalNode INTO() { return getToken(DB2zSQLParser.INTO, 0); }
		public TerminalNode IS() { return getToken(DB2zSQLParser.IS, 0); }
		public TerminalNode ISOBID() { return getToken(DB2zSQLParser.ISOBID, 0); }
		public TerminalNode ITERATE() { return getToken(DB2zSQLParser.ITERATE, 0); }
		public TerminalNode JAR() { return getToken(DB2zSQLParser.JAR, 0); }
		public TerminalNode JOIN() { return getToken(DB2zSQLParser.JOIN, 0); }
		public TerminalNode KEEP() { return getToken(DB2zSQLParser.KEEP, 0); }
		public TerminalNode KEY() { return getToken(DB2zSQLParser.KEY, 0); }
		public TerminalNode LABEL() { return getToken(DB2zSQLParser.LABEL, 0); }
		public TerminalNode LANGUAGE() { return getToken(DB2zSQLParser.LANGUAGE, 0); }
		public TerminalNode LAST() { return getToken(DB2zSQLParser.LAST, 0); }
		public TerminalNode LC_CTYPE() { return getToken(DB2zSQLParser.LC_CTYPE, 0); }
		public TerminalNode LEAVE() { return getToken(DB2zSQLParser.LEAVE, 0); }
		public TerminalNode LEFT() { return getToken(DB2zSQLParser.LEFT, 0); }
		public TerminalNode LIKE() { return getToken(DB2zSQLParser.LIKE, 0); }
		public TerminalNode LIMIT() { return getToken(DB2zSQLParser.LIMIT, 0); }
		public TerminalNode LOCAL() { return getToken(DB2zSQLParser.LOCAL, 0); }
		public TerminalNode LOCALE() { return getToken(DB2zSQLParser.LOCALE, 0); }
		public TerminalNode LOCATOR() { return getToken(DB2zSQLParser.LOCATOR, 0); }
		public TerminalNode LOCATORS() { return getToken(DB2zSQLParser.LOCATORS, 0); }
		public TerminalNode LOCK() { return getToken(DB2zSQLParser.LOCK, 0); }
		public TerminalNode LOCKMAX() { return getToken(DB2zSQLParser.LOCKMAX, 0); }
		public TerminalNode LOCKSIZE() { return getToken(DB2zSQLParser.LOCKSIZE, 0); }
		public TerminalNode LONG() { return getToken(DB2zSQLParser.LONG, 0); }
		public TerminalNode LOOP() { return getToken(DB2zSQLParser.LOOP, 0); }
		public TerminalNode MAINTAINED() { return getToken(DB2zSQLParser.MAINTAINED, 0); }
		public TerminalNode MATERIALIZED() { return getToken(DB2zSQLParser.MATERIALIZED, 0); }
		public TerminalNode MICROSECOND() { return getToken(DB2zSQLParser.MICROSECOND, 0); }
		public TerminalNode MICROSECONDS() { return getToken(DB2zSQLParser.MICROSECONDS, 0); }
		public TerminalNode MINUTE() { return getToken(DB2zSQLParser.MINUTE, 0); }
		public TerminalNode MINUTES() { return getToken(DB2zSQLParser.MINUTES, 0); }
		public TerminalNode MODIFIES() { return getToken(DB2zSQLParser.MODIFIES, 0); }
		public TerminalNode MONTH() { return getToken(DB2zSQLParser.MONTH, 0); }
		public TerminalNode MONTHS() { return getToken(DB2zSQLParser.MONTHS, 0); }
		public TerminalNode NEXT() { return getToken(DB2zSQLParser.NEXT, 0); }
		public TerminalNode NEXTVAL() { return getToken(DB2zSQLParser.NEXTVAL, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode NONE() { return getToken(DB2zSQLParser.NONE, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public TerminalNode NULLS() { return getToken(DB2zSQLParser.NULLS, 0); }
		public TerminalNode NUMPARTS() { return getToken(DB2zSQLParser.NUMPARTS, 0); }
		public TerminalNode OBID() { return getToken(DB2zSQLParser.OBID, 0); }
		public TerminalNode OF() { return getToken(DB2zSQLParser.OF, 0); }
		public TerminalNode OFFSET() { return getToken(DB2zSQLParser.OFFSET, 0); }
		public TerminalNode OLD() { return getToken(DB2zSQLParser.OLD, 0); }
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public TerminalNode OPEN() { return getToken(DB2zSQLParser.OPEN, 0); }
		public TerminalNode OPTIMIZATION() { return getToken(DB2zSQLParser.OPTIMIZATION, 0); }
		public TerminalNode OPTIMIZE() { return getToken(DB2zSQLParser.OPTIMIZE, 0); }
		public TerminalNode OR() { return getToken(DB2zSQLParser.OR, 0); }
		public TerminalNode ORDER() { return getToken(DB2zSQLParser.ORDER, 0); }
		public TerminalNode ORGANIZATION() { return getToken(DB2zSQLParser.ORGANIZATION, 0); }
		public TerminalNode OUT() { return getToken(DB2zSQLParser.OUT, 0); }
		public TerminalNode OUTER() { return getToken(DB2zSQLParser.OUTER, 0); }
		public TerminalNode PACKAGE() { return getToken(DB2zSQLParser.PACKAGE, 0); }
		public TerminalNode PADDED() { return getToken(DB2zSQLParser.PADDED, 0); }
		public TerminalNode PARAMETER() { return getToken(DB2zSQLParser.PARAMETER, 0); }
		public TerminalNode PART() { return getToken(DB2zSQLParser.PART, 0); }
		public TerminalNode PARTITION() { return getToken(DB2zSQLParser.PARTITION, 0); }
		public TerminalNode PARTITIONED() { return getToken(DB2zSQLParser.PARTITIONED, 0); }
		public TerminalNode PARTITIONING() { return getToken(DB2zSQLParser.PARTITIONING, 0); }
		public TerminalNode PATH() { return getToken(DB2zSQLParser.PATH, 0); }
		public TerminalNode PERIOD() { return getToken(DB2zSQLParser.PERIOD, 0); }
		public TerminalNode PIECESIZE() { return getToken(DB2zSQLParser.PIECESIZE, 0); }
		public TerminalNode PLAN() { return getToken(DB2zSQLParser.PLAN, 0); }
		public TerminalNode PRECISION() { return getToken(DB2zSQLParser.PRECISION, 0); }
		public TerminalNode PREPARE() { return getToken(DB2zSQLParser.PREPARE, 0); }
		public TerminalNode PREVVAL() { return getToken(DB2zSQLParser.PREVVAL, 0); }
		public TerminalNode PRIOR() { return getToken(DB2zSQLParser.PRIOR, 0); }
		public TerminalNode PRIQTY() { return getToken(DB2zSQLParser.PRIQTY, 0); }
		public TerminalNode PRIVILEGES() { return getToken(DB2zSQLParser.PRIVILEGES, 0); }
		public TerminalNode PROCEDURE() { return getToken(DB2zSQLParser.PROCEDURE, 0); }
		public TerminalNode PROGRAM() { return getToken(DB2zSQLParser.PROGRAM, 0); }
		public TerminalNode PSID() { return getToken(DB2zSQLParser.PSID, 0); }
		public TerminalNode PUBLIC() { return getToken(DB2zSQLParser.PUBLIC, 0); }
		public TerminalNode QUERY() { return getToken(DB2zSQLParser.QUERY, 0); }
		public TerminalNode QUERYNO() { return getToken(DB2zSQLParser.QUERYNO, 0); }
		public TerminalNode READS() { return getToken(DB2zSQLParser.READS, 0); }
		public TerminalNode REFERENCES() { return getToken(DB2zSQLParser.REFERENCES, 0); }
		public TerminalNode REFRESH() { return getToken(DB2zSQLParser.REFRESH, 0); }
		public TerminalNode RELEASE() { return getToken(DB2zSQLParser.RELEASE, 0); }
		public TerminalNode RENAME() { return getToken(DB2zSQLParser.RENAME, 0); }
		public TerminalNode REPEAT() { return getToken(DB2zSQLParser.REPEAT, 0); }
		public TerminalNode RESIGNAL() { return getToken(DB2zSQLParser.RESIGNAL, 0); }
		public TerminalNode RESTRICT() { return getToken(DB2zSQLParser.RESTRICT, 0); }
		public TerminalNode RESULT() { return getToken(DB2zSQLParser.RESULT, 0); }
		public TerminalNode RESULT_SET_LOCATOR() { return getToken(DB2zSQLParser.RESULT_SET_LOCATOR, 0); }
		public TerminalNode RETURN() { return getToken(DB2zSQLParser.RETURN, 0); }
		public TerminalNode RETURNS() { return getToken(DB2zSQLParser.RETURNS, 0); }
		public TerminalNode REVOKE() { return getToken(DB2zSQLParser.REVOKE, 0); }
		public TerminalNode RIGHT() { return getToken(DB2zSQLParser.RIGHT, 0); }
		public TerminalNode ROLE() { return getToken(DB2zSQLParser.ROLE, 0); }
		public TerminalNode ROLLBACK() { return getToken(DB2zSQLParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(DB2zSQLParser.ROLLUP, 0); }
		public TerminalNode ROUND_CEILING() { return getToken(DB2zSQLParser.ROUND_CEILING, 0); }
		public TerminalNode ROUND_DOWN() { return getToken(DB2zSQLParser.ROUND_DOWN, 0); }
		public TerminalNode ROUND_FLOOR() { return getToken(DB2zSQLParser.ROUND_FLOOR, 0); }
		public TerminalNode ROUND_HALF_DOWN() { return getToken(DB2zSQLParser.ROUND_HALF_DOWN, 0); }
		public TerminalNode ROUND_HALF_EVEN() { return getToken(DB2zSQLParser.ROUND_HALF_EVEN, 0); }
		public TerminalNode ROUND_HALF_UP() { return getToken(DB2zSQLParser.ROUND_HALF_UP, 0); }
		public TerminalNode ROUND_UP() { return getToken(DB2zSQLParser.ROUND_UP, 0); }
		public TerminalNode ROW() { return getToken(DB2zSQLParser.ROW, 0); }
		public TerminalNode ROWSET() { return getToken(DB2zSQLParser.ROWSET, 0); }
		public TerminalNode RUN() { return getToken(DB2zSQLParser.RUN, 0); }
		public TerminalNode SAVEPOINT() { return getToken(DB2zSQLParser.SAVEPOINT, 0); }
		public TerminalNode SCHEMA() { return getToken(DB2zSQLParser.SCHEMA, 0); }
		public TerminalNode SCRATCHPAD() { return getToken(DB2zSQLParser.SCRATCHPAD, 0); }
		public TerminalNode SECOND() { return getToken(DB2zSQLParser.SECOND, 0); }
		public TerminalNode SECONDS() { return getToken(DB2zSQLParser.SECONDS, 0); }
		public TerminalNode SECQTY() { return getToken(DB2zSQLParser.SECQTY, 0); }
		public TerminalNode SECURITY() { return getToken(DB2zSQLParser.SECURITY, 0); }
		public TerminalNode SELECT() { return getToken(DB2zSQLParser.SELECT, 0); }
		public TerminalNode SENSITIVE() { return getToken(DB2zSQLParser.SENSITIVE, 0); }
		public TerminalNode SEQUENCE() { return getToken(DB2zSQLParser.SEQUENCE, 0); }
		public TerminalNode SESSION_USER() { return getToken(DB2zSQLParser.SESSION_USER, 0); }
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public TerminalNode SIGNAL() { return getToken(DB2zSQLParser.SIGNAL, 0); }
		public TerminalNode SIMPLE() { return getToken(DB2zSQLParser.SIMPLE, 0); }
		public TerminalNode SOME() { return getToken(DB2zSQLParser.SOME, 0); }
		public TerminalNode SOURCE() { return getToken(DB2zSQLParser.SOURCE, 0); }
		public TerminalNode SPECIFIC() { return getToken(DB2zSQLParser.SPECIFIC, 0); }
		public TerminalNode STANDARD() { return getToken(DB2zSQLParser.STANDARD, 0); }
		public TerminalNode STATEMENT() { return getToken(DB2zSQLParser.STATEMENT, 0); }
		public TerminalNode STATIC() { return getToken(DB2zSQLParser.STATIC, 0); }
		public TerminalNode STAY() { return getToken(DB2zSQLParser.STAY, 0); }
		public TerminalNode STOGROUP() { return getToken(DB2zSQLParser.STOGROUP, 0); }
		public TerminalNode STORES() { return getToken(DB2zSQLParser.STORES, 0); }
		public TerminalNode STYLE() { return getToken(DB2zSQLParser.STYLE, 0); }
		public TerminalNode SUMMARY() { return getToken(DB2zSQLParser.SUMMARY, 0); }
		public TerminalNode SYNONYM() { return getToken(DB2zSQLParser.SYNONYM, 0); }
		public TerminalNode SYSDATE() { return getToken(DB2zSQLParser.SYSDATE, 0); }
		public TerminalNode SYSTEM() { return getToken(DB2zSQLParser.SYSTEM, 0); }
		public TerminalNode SYSTIMESTAMP() { return getToken(DB2zSQLParser.SYSTIMESTAMP, 0); }
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public TerminalNode TABLESPACE() { return getToken(DB2zSQLParser.TABLESPACE, 0); }
		public TerminalNode THEN() { return getToken(DB2zSQLParser.THEN, 0); }
		public TerminalNode TO() { return getToken(DB2zSQLParser.TO, 0); }
		public TerminalNode TRIGGER() { return getToken(DB2zSQLParser.TRIGGER, 0); }
		public TerminalNode TRUNCATE() { return getToken(DB2zSQLParser.TRUNCATE, 0); }
		public TerminalNode TYPE() { return getToken(DB2zSQLParser.TYPE, 0); }
		public TerminalNode UNDO() { return getToken(DB2zSQLParser.UNDO, 0); }
		public TerminalNode UNION() { return getToken(DB2zSQLParser.UNION, 0); }
		public TerminalNode UNIQUE() { return getToken(DB2zSQLParser.UNIQUE, 0); }
		public TerminalNode UNTIL() { return getToken(DB2zSQLParser.UNTIL, 0); }
		public TerminalNode UPDATE() { return getToken(DB2zSQLParser.UPDATE, 0); }
		public TerminalNode USER() { return getToken(DB2zSQLParser.USER, 0); }
		public TerminalNode USING() { return getToken(DB2zSQLParser.USING, 0); }
		public TerminalNode VALIDPROC() { return getToken(DB2zSQLParser.VALIDPROC, 0); }
		public TerminalNode VALUE() { return getToken(DB2zSQLParser.VALUE, 0); }
		public TerminalNode VALUES() { return getToken(DB2zSQLParser.VALUES, 0); }
		public TerminalNode VARIABLE() { return getToken(DB2zSQLParser.VARIABLE, 0); }
		public TerminalNode VARIANT() { return getToken(DB2zSQLParser.VARIANT, 0); }
		public TerminalNode VCAT() { return getToken(DB2zSQLParser.VCAT, 0); }
		public TerminalNode VERSIONING() { return getToken(DB2zSQLParser.VERSIONING, 0); }
		public TerminalNode VIEW() { return getToken(DB2zSQLParser.VIEW, 0); }
		public TerminalNode VOLATILE() { return getToken(DB2zSQLParser.VOLATILE, 0); }
		public TerminalNode VOLUMES() { return getToken(DB2zSQLParser.VOLUMES, 0); }
		public TerminalNode WHEN() { return getToken(DB2zSQLParser.WHEN, 0); }
		public TerminalNode WHENEVER() { return getToken(DB2zSQLParser.WHENEVER, 0); }
		public TerminalNode WHERE() { return getToken(DB2zSQLParser.WHERE, 0); }
		public TerminalNode WHILE() { return getToken(DB2zSQLParser.WHILE, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode WLM() { return getToken(DB2zSQLParser.WLM, 0); }
		public TerminalNode XMLCAST() { return getToken(DB2zSQLParser.XMLCAST, 0); }
		public TerminalNode XMLEXISTS() { return getToken(DB2zSQLParser.XMLEXISTS, 0); }
		public TerminalNode XMLNAMESPACES() { return getToken(DB2zSQLParser.XMLNAMESPACES, 0); }
		public TerminalNode YEAR() { return getToken(DB2zSQLParser.YEAR, 0); }
		public TerminalNode YEARS() { return getToken(DB2zSQLParser.YEARS, 0); }
		public TerminalNode ZONE() { return getToken(DB2zSQLParser.ZONE, 0); }
		public TerminalNode AND() { return getToken(DB2zSQLParser.AND, 0); }
		public TerminalNode ARRAY_AGG() { return getToken(DB2zSQLParser.ARRAY_AGG, 0); }
		public TerminalNode ASC() { return getToken(DB2zSQLParser.ASC, 0); }
		public TerminalNode AVG() { return getToken(DB2zSQLParser.AVG, 0); }
		public TerminalNode BIT() { return getToken(DB2zSQLParser.BIT, 0); }
		public TerminalNode CHANGE() { return getToken(DB2zSQLParser.CHANGE, 0); }
		public TerminalNode CODEUNITS16() { return getToken(DB2zSQLParser.CODEUNITS16, 0); }
		public TerminalNode CODEUNITS32() { return getToken(DB2zSQLParser.CODEUNITS32, 0); }
		public TerminalNode CORR() { return getToken(DB2zSQLParser.CORR, 0); }
		public TerminalNode CORRELATION() { return getToken(DB2zSQLParser.CORRELATION, 0); }
		public TerminalNode COVAR() { return getToken(DB2zSQLParser.COVAR, 0); }
		public TerminalNode COVARIANCE() { return getToken(DB2zSQLParser.COVARIANCE, 0); }
		public TerminalNode COVARIANCE_SAMP() { return getToken(DB2zSQLParser.COVARIANCE_SAMP, 0); }
		public TerminalNode COVAR_POP() { return getToken(DB2zSQLParser.COVAR_POP, 0); }
		public TerminalNode COVAR_SAMP() { return getToken(DB2zSQLParser.COVAR_SAMP, 0); }
		public TerminalNode CS() { return getToken(DB2zSQLParser.CS, 0); }
		public TerminalNode CUME_DIST() { return getToken(DB2zSQLParser.CUME_DIST, 0); }
		public TerminalNode DENSE_RANK() { return getToken(DB2zSQLParser.DENSE_RANK, 0); }
		public TerminalNode DESC() { return getToken(DB2zSQLParser.DESC, 0); }
		public TerminalNode EBCDIC() { return getToken(DB2zSQLParser.EBCDIC, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(DB2zSQLParser.EXCLUSIVE, 0); }
		public TerminalNode FIRST_VALUE() { return getToken(DB2zSQLParser.FIRST_VALUE, 0); }
		public TerminalNode FOLLOWING() { return getToken(DB2zSQLParser.FOLLOWING, 0); }
		public TerminalNode GROUPING() { return getToken(DB2zSQLParser.GROUPING, 0); }
		public TerminalNode IGNORE() { return getToken(DB2zSQLParser.IGNORE, 0); }
		public TerminalNode INDICATOR() { return getToken(DB2zSQLParser.INDICATOR, 0); }
		public TerminalNode INPUT() { return getToken(DB2zSQLParser.INPUT, 0); }
		public TerminalNode ISNULL() { return getToken(DB2zSQLParser.ISNULL, 0); }
		public TerminalNode LAG() { return getToken(DB2zSQLParser.LAG, 0); }
		public TerminalNode LARGE() { return getToken(DB2zSQLParser.LARGE, 0); }
		public TerminalNode LAST_VALUE() { return getToken(DB2zSQLParser.LAST_VALUE, 0); }
		public TerminalNode LEAD() { return getToken(DB2zSQLParser.LEAD, 0); }
		public TerminalNode LISTAGG() { return getToken(DB2zSQLParser.LISTAGG, 0); }
		public TerminalNode LOCKED() { return getToken(DB2zSQLParser.LOCKED, 0); }
		public TerminalNode LOCKS() { return getToken(DB2zSQLParser.LOCKS, 0); }
		public TerminalNode MEDIAN() { return getToken(DB2zSQLParser.MEDIAN, 0); }
		public TerminalNode MIXED() { return getToken(DB2zSQLParser.MIXED, 0); }
		public TerminalNode NOTNULL() { return getToken(DB2zSQLParser.NOTNULL, 0); }
		public TerminalNode NTH_VALUE() { return getToken(DB2zSQLParser.NTH_VALUE, 0); }
		public TerminalNode NTILE() { return getToken(DB2zSQLParser.NTILE, 0); }
		public TerminalNode NUMERIC() { return getToken(DB2zSQLParser.NUMERIC, 0); }
		public TerminalNode OBJECT() { return getToken(DB2zSQLParser.OBJECT, 0); }
		public TerminalNode OCTETS() { return getToken(DB2zSQLParser.OCTETS, 0); }
		public TerminalNode ONLY() { return getToken(DB2zSQLParser.ONLY, 0); }
		public TerminalNode OVER() { return getToken(DB2zSQLParser.OVER, 0); }
		public TerminalNode PASSING() { return getToken(DB2zSQLParser.PASSING, 0); }
		public TerminalNode PERCENTILE_CONT() { return getToken(DB2zSQLParser.PERCENTILE_CONT, 0); }
		public TerminalNode PERCENTILE_DISC() { return getToken(DB2zSQLParser.PERCENTILE_DISC, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(DB2zSQLParser.PERCENT_RANK, 0); }
		public TerminalNode PRECEDING() { return getToken(DB2zSQLParser.PRECEDING, 0); }
		public TerminalNode PREVIOUS() { return getToken(DB2zSQLParser.PREVIOUS, 0); }
		public TerminalNode RANGE() { return getToken(DB2zSQLParser.RANGE, 0); }
		public TerminalNode RANK() { return getToken(DB2zSQLParser.RANK, 0); }
		public TerminalNode RATIO_TO_REPORT() { return getToken(DB2zSQLParser.RATIO_TO_REPORT, 0); }
		public TerminalNode READ() { return getToken(DB2zSQLParser.READ, 0); }
		public TerminalNode REF() { return getToken(DB2zSQLParser.REF, 0); }
		public TerminalNode REGR_AVGX() { return getToken(DB2zSQLParser.REGR_AVGX, 0); }
		public TerminalNode REGR_AVGY() { return getToken(DB2zSQLParser.REGR_AVGY, 0); }
		public TerminalNode REGR_COUNT() { return getToken(DB2zSQLParser.REGR_COUNT, 0); }
		public TerminalNode REGR_ICPT() { return getToken(DB2zSQLParser.REGR_ICPT, 0); }
		public TerminalNode REGR_INTERCEPT() { return getToken(DB2zSQLParser.REGR_INTERCEPT, 0); }
		public TerminalNode REGR_R2() { return getToken(DB2zSQLParser.REGR_R2, 0); }
		public TerminalNode REGR_SLOPE() { return getToken(DB2zSQLParser.REGR_SLOPE, 0); }
		public TerminalNode REGR_SXX() { return getToken(DB2zSQLParser.REGR_SXX, 0); }
		public TerminalNode REGR_SXY() { return getToken(DB2zSQLParser.REGR_SXY, 0); }
		public TerminalNode REGR_SYY() { return getToken(DB2zSQLParser.REGR_SYY, 0); }
		public TerminalNode RESPECT() { return getToken(DB2zSQLParser.RESPECT, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(DB2zSQLParser.ROW_NUMBER, 0); }
		public TerminalNode ROWS() { return getToken(DB2zSQLParser.ROWS, 0); }
		public TerminalNode RR() { return getToken(DB2zSQLParser.RR, 0); }
		public TerminalNode RS() { return getToken(DB2zSQLParser.RS, 0); }
		public TerminalNode SBCS() { return getToken(DB2zSQLParser.SBCS, 0); }
		public TerminalNode SELECTIVITY() { return getToken(DB2zSQLParser.SELECTIVITY, 0); }
		public TerminalNode SETS() { return getToken(DB2zSQLParser.SETS, 0); }
		public TerminalNode SHARE() { return getToken(DB2zSQLParser.SHARE, 0); }
		public TerminalNode SKIP_() { return getToken(DB2zSQLParser.SKIP_, 0); }
		public TerminalNode STDDEV() { return getToken(DB2zSQLParser.STDDEV, 0); }
		public TerminalNode STDDEV_POP() { return getToken(DB2zSQLParser.STDDEV_POP, 0); }
		public TerminalNode STDDEV_SAMP() { return getToken(DB2zSQLParser.STDDEV_SAMP, 0); }
		public TerminalNode SUM() { return getToken(DB2zSQLParser.SUM, 0); }
		public TerminalNode TOKEN() { return getToken(DB2zSQLParser.TOKEN, 0); }
		public TerminalNode UNBOUNDED() { return getToken(DB2zSQLParser.UNBOUNDED, 0); }
		public TerminalNode UNPACK() { return getToken(DB2zSQLParser.UNPACK, 0); }
		public TerminalNode UR() { return getToken(DB2zSQLParser.UR, 0); }
		public TerminalNode USE() { return getToken(DB2zSQLParser.USE, 0); }
		public TerminalNode VAR() { return getToken(DB2zSQLParser.VAR, 0); }
		public TerminalNode VARIANCE() { return getToken(DB2zSQLParser.VARIANCE, 0); }
		public TerminalNode VARIANCE_SAMP() { return getToken(DB2zSQLParser.VARIANCE_SAMP, 0); }
		public TerminalNode VAR_POP() { return getToken(DB2zSQLParser.VAR_POP, 0); }
		public TerminalNode VAR_SAMP() { return getToken(DB2zSQLParser.VAR_SAMP, 0); }
		public TerminalNode VARYING() { return getToken(DB2zSQLParser.VARYING, 0); }
		public TerminalNode WITHOUT() { return getToken(DB2zSQLParser.WITHOUT, 0); }
		public TerminalNode XML() { return getToken(DB2zSQLParser.XML, 0); }
		public TerminalNode XMLAGG() { return getToken(DB2zSQLParser.XMLAGG, 0); }
		public TerminalNode COLUMNS() { return getToken(DB2zSQLParser.COLUMNS, 0); }
		public TerminalNode SQLID() { return getToken(DB2zSQLParser.SQLID, 0); }
		public TerminalNode ORDINALITY() { return getToken(DB2zSQLParser.ORDINALITY, 0); }
		public TerminalNode SYSTEM_TIME() { return getToken(DB2zSQLParser.SYSTEM_TIME, 0); }
		public TerminalNode BUSINESS_TIME() { return getToken(DB2zSQLParser.BUSINESS_TIME, 0); }
		public TerminalNode MULTIPLIER() { return getToken(DB2zSQLParser.MULTIPLIER, 0); }
		public TerminalNode UNNEST() { return getToken(DB2zSQLParser.UNNEST, 0); }
		public TerminalNode CROSS() { return getToken(DB2zSQLParser.CROSS, 0); }
		public TerminalNode CALLER() { return getToken(DB2zSQLParser.CALLER, 0); }
		public TerminalNode CLIENT() { return getToken(DB2zSQLParser.CLIENT, 0); }
		public TerminalNode POSITIONING() { return getToken(DB2zSQLParser.POSITIONING, 0); }
		public TerminalNode SCROLL() { return getToken(DB2zSQLParser.SCROLL, 0); }
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode INDEXBP() { return getToken(DB2zSQLParser.INDEXBP, 0); }
		public TerminalNode ACTION() { return getToken(DB2zSQLParser.ACTION, 0); }
		public TerminalNode ASSEMBLE() { return getToken(DB2zSQLParser.ASSEMBLE, 0); }
		public TerminalNode C_() { return getToken(DB2zSQLParser.C_, 0); }
		public TerminalNode CALLED() { return getToken(DB2zSQLParser.CALLED, 0); }
		public TerminalNode COBOL() { return getToken(DB2zSQLParser.COBOL, 0); }
		public TerminalNode DB2() { return getToken(DB2zSQLParser.DB2, 0); }
		public TerminalNode DEFINER() { return getToken(DB2zSQLParser.DEFINER, 0); }
		public TerminalNode DISPATCH() { return getToken(DB2zSQLParser.DISPATCH, 0); }
		public TerminalNode ENVIRONMENT() { return getToken(DB2zSQLParser.ENVIRONMENT, 0); }
		public TerminalNode FAILURE() { return getToken(DB2zSQLParser.FAILURE, 0); }
		public TerminalNode FAILURES() { return getToken(DB2zSQLParser.FAILURES, 0); }
		public TerminalNode JAVA() { return getToken(DB2zSQLParser.JAVA, 0); }
		public TerminalNode MAIN() { return getToken(DB2zSQLParser.MAIN, 0); }
		public TerminalNode NAME() { return getToken(DB2zSQLParser.NAME, 0); }
		public TerminalNode OPTIONS() { return getToken(DB2zSQLParser.OPTIONS, 0); }
		public TerminalNode PARALLEL() { return getToken(DB2zSQLParser.PARALLEL, 0); }
		public TerminalNode PLI() { return getToken(DB2zSQLParser.PLI, 0); }
		public TerminalNode REGISTERS() { return getToken(DB2zSQLParser.REGISTERS, 0); }
		public TerminalNode RESIDENT() { return getToken(DB2zSQLParser.RESIDENT, 0); }
		public TerminalNode SECURED() { return getToken(DB2zSQLParser.SECURED, 0); }
		public TerminalNode SPECIAL() { return getToken(DB2zSQLParser.SPECIAL, 0); }
		public TerminalNode SQL() { return getToken(DB2zSQLParser.SQL, 0); }
		public TerminalNode STOP() { return getToken(DB2zSQLParser.STOP, 0); }
		public TerminalNode SUB() { return getToken(DB2zSQLParser.SUB, 0); }
		public TerminalNode YES() { return getToken(DB2zSQLParser.YES, 0); }
		public TerminalNode APPLICATION() { return getToken(DB2zSQLParser.APPLICATION, 0); }
		public TerminalNode CHANGED() { return getToken(DB2zSQLParser.CHANGED, 0); }
		public TerminalNode COMPATIBILITY() { return getToken(DB2zSQLParser.COMPATIBILITY, 0); }
		public TerminalNode COMPRESS() { return getToken(DB2zSQLParser.COMPRESS, 0); }
		public TerminalNode COPY() { return getToken(DB2zSQLParser.COPY, 0); }
		public TerminalNode FREEPAGE() { return getToken(DB2zSQLParser.FREEPAGE, 0); }
		public TerminalNode GBPCACHE() { return getToken(DB2zSQLParser.GBPCACHE, 0); }
		public TerminalNode INCLUDE() { return getToken(DB2zSQLParser.INCLUDE, 0); }
		public TerminalNode MAXVALUE() { return getToken(DB2zSQLParser.MAXVALUE, 0); }
		public TerminalNode MINVALUE() { return getToken(DB2zSQLParser.MINVALUE, 0); }
		public TerminalNode PCTFREE() { return getToken(DB2zSQLParser.PCTFREE, 0); }
		public TerminalNode REGENERATE() { return getToken(DB2zSQLParser.REGENERATE, 0); }
		public TerminalNode MASK() { return getToken(DB2zSQLParser.MASK, 0); }
		public TerminalNode ENABLE() { return getToken(DB2zSQLParser.ENABLE, 0); }
		public TerminalNode PERMISSION() { return getToken(DB2zSQLParser.PERMISSION, 0); }
		public TerminalNode ATOMIC() { return getToken(DB2zSQLParser.ATOMIC, 0); }
		public TerminalNode SQLEXCEPTION() { return getToken(DB2zSQLParser.SQLEXCEPTION, 0); }
		public TerminalNode MERGE() { return getToken(DB2zSQLParser.MERGE, 0); }
		public TerminalNode MATCHED() { return getToken(DB2zSQLParser.MATCHED, 0); }
		public TerminalNode SQLSTATE() { return getToken(DB2zSQLParser.SQLSTATE, 0); }
		public TerminalNode MESSAGE_TEXT() { return getToken(DB2zSQLParser.MESSAGE_TEXT, 0); }
		public TerminalNode OVERRIDING() { return getToken(DB2zSQLParser.OVERRIDING, 0); }
		public TerminalNode PORTION() { return getToken(DB2zSQLParser.PORTION, 0); }
		public TerminalNode DB2SQL() { return getToken(DB2zSQLParser.DB2SQL, 0); }
		public TerminalNode DEBUG() { return getToken(DB2zSQLParser.DEBUG, 0); }
		public TerminalNode GENERAL() { return getToken(DB2zSQLParser.GENERAL, 0); }
		public TerminalNode MODE_() { return getToken(DB2zSQLParser.MODE_, 0); }
		public TerminalNode REXX() { return getToken(DB2zSQLParser.REXX, 0); }
		public TerminalNode CACHE() { return getToken(DB2zSQLParser.CACHE, 0); }
		public TerminalNode CYCLE() { return getToken(DB2zSQLParser.CYCLE, 0); }
		public TerminalNode INCREMENT() { return getToken(DB2zSQLParser.INCREMENT, 0); }
		public TerminalNode RESTART() { return getToken(DB2zSQLParser.RESTART, 0); }
		public TerminalNode DATACLAS() { return getToken(DB2zSQLParser.DATACLAS, 0); }
		public TerminalNode MGMTCLAS() { return getToken(DB2zSQLParser.MGMTCLAS, 0); }
		public TerminalNode REMOVE() { return getToken(DB2zSQLParser.REMOVE, 0); }
		public TerminalNode STORCLAS() { return getToken(DB2zSQLParser.STORCLAS, 0); }
		public TerminalNode ACCESS() { return getToken(DB2zSQLParser.ACCESS, 0); }
		public TerminalNode ACTIVATE() { return getToken(DB2zSQLParser.ACTIVATE, 0); }
		public TerminalNode ALWAYS() { return getToken(DB2zSQLParser.ALWAYS, 0); }
		public TerminalNode APPEND() { return getToken(DB2zSQLParser.APPEND, 0); }
		public TerminalNode ARCHIVE() { return getToken(DB2zSQLParser.ARCHIVE, 0); }
		public TerminalNode BUSINESS() { return getToken(DB2zSQLParser.BUSINESS, 0); }
		public TerminalNode CASCADE() { return getToken(DB2zSQLParser.CASCADE, 0); }
		public TerminalNode CHANGES() { return getToken(DB2zSQLParser.CHANGES, 0); }
		public TerminalNode CONTROL() { return getToken(DB2zSQLParser.CONTROL, 0); }
		public TerminalNode DEACTIVATE() { return getToken(DB2zSQLParser.DEACTIVATE, 0); }
		public TerminalNode DEFERRED() { return getToken(DB2zSQLParser.DEFERRED, 0); }
		public TerminalNode EACH() { return getToken(DB2zSQLParser.EACH, 0); }
		public TerminalNode ENFORCED() { return getToken(DB2zSQLParser.ENFORCED, 0); }
		public TerminalNode EXTRA() { return getToken(DB2zSQLParser.EXTRA, 0); }
		public TerminalNode FOREIGN() { return getToken(DB2zSQLParser.FOREIGN, 0); }
		public TerminalNode HIDDEN_() { return getToken(DB2zSQLParser.HIDDEN_, 0); }
		public TerminalNode HISTORY() { return getToken(DB2zSQLParser.HISTORY, 0); }
		public TerminalNode ID() { return getToken(DB2zSQLParser.ID, 0); }
		public TerminalNode IDENTITY() { return getToken(DB2zSQLParser.IDENTITY, 0); }
		public TerminalNode IMPLICITLY() { return getToken(DB2zSQLParser.IMPLICITLY, 0); }
		public TerminalNode INITIALLY() { return getToken(DB2zSQLParser.INITIALLY, 0); }
		public TerminalNode INLINE() { return getToken(DB2zSQLParser.INLINE, 0); }
		public TerminalNode OPERATION() { return getToken(DB2zSQLParser.OPERATION, 0); }
		public TerminalNode ORGANIZE() { return getToken(DB2zSQLParser.ORGANIZE, 0); }
		public TerminalNode OVERLAPS() { return getToken(DB2zSQLParser.OVERLAPS, 0); }
		public TerminalNode PACKAGE_NAME() { return getToken(DB2zSQLParser.PACKAGE_NAME, 0); }
		public TerminalNode PACKAGE_SCHEMA() { return getToken(DB2zSQLParser.PACKAGE_SCHEMA, 0); }
		public TerminalNode PACKAGE_VERSION() { return getToken(DB2zSQLParser.PACKAGE_VERSION, 0); }
		public TerminalNode PRIMARY() { return getToken(DB2zSQLParser.PRIMARY, 0); }
		public TerminalNode RESET() { return getToken(DB2zSQLParser.RESET, 0); }
		public TerminalNode ROTATE() { return getToken(DB2zSQLParser.ROTATE, 0); }
		public TerminalNode START() { return getToken(DB2zSQLParser.START, 0); }
		public TerminalNode SYSIBM() { return getToken(DB2zSQLParser.SYSIBM, 0); }
		public TerminalNode TRANSACTION() { return getToken(DB2zSQLParser.TRANSACTION, 0); }
		public TerminalNode XMLSCHEMA() { return getToken(DB2zSQLParser.XMLSCHEMA, 0); }
		public TerminalNode ELEMENT() { return getToken(DB2zSQLParser.ELEMENT, 0); }
		public TerminalNode URL() { return getToken(DB2zSQLParser.URL, 0); }
		public TerminalNode NAMESPACE() { return getToken(DB2zSQLParser.NAMESPACE, 0); }
		public TerminalNode LOCATION() { return getToken(DB2zSQLParser.LOCATION, 0); }
		public TerminalNode SYSXSR() { return getToken(DB2zSQLParser.SYSXSR, 0); }
		public TerminalNode ALGORITHM() { return getToken(DB2zSQLParser.ALGORITHM, 0); }
		public TerminalNode FIXEDLENGTH() { return getToken(DB2zSQLParser.FIXEDLENGTH, 0); }
		public TerminalNode HUFFMAN() { return getToken(DB2zSQLParser.HUFFMAN, 0); }
		public TerminalNode LOB() { return getToken(DB2zSQLParser.LOB, 0); }
		public TerminalNode LOG() { return getToken(DB2zSQLParser.LOG, 0); }
		public TerminalNode LOGGED() { return getToken(DB2zSQLParser.LOGGED, 0); }
		public TerminalNode MAXPARTITIONS() { return getToken(DB2zSQLParser.MAXPARTITIONS, 0); }
		public TerminalNode MAXROWS() { return getToken(DB2zSQLParser.MAXROWS, 0); }
		public TerminalNode MEMBER() { return getToken(DB2zSQLParser.MEMBER, 0); }
		public TerminalNode MOVE() { return getToken(DB2zSQLParser.MOVE, 0); }
		public TerminalNode PAGE() { return getToken(DB2zSQLParser.PAGE, 0); }
		public TerminalNode PAGENUM() { return getToken(DB2zSQLParser.PAGENUM, 0); }
		public TerminalNode PENDING() { return getToken(DB2zSQLParser.PENDING, 0); }
		public TerminalNode RELATIVE() { return getToken(DB2zSQLParser.RELATIVE, 0); }
		public TerminalNode SEGSIZE() { return getToken(DB2zSQLParser.SEGSIZE, 0); }
		public TerminalNode TRACKMOD() { return getToken(DB2zSQLParser.TRACKMOD, 0); }
		public TerminalNode ADDRESS() { return getToken(DB2zSQLParser.ADDRESS, 0); }
		public TerminalNode ATTRIBUTES() { return getToken(DB2zSQLParser.ATTRIBUTES, 0); }
		public TerminalNode AUTHENTICATION() { return getToken(DB2zSQLParser.AUTHENTICATION, 0); }
		public TerminalNode AUTHID() { return getToken(DB2zSQLParser.AUTHID, 0); }
		public TerminalNode CONTEXT() { return getToken(DB2zSQLParser.CONTEXT, 0); }
		public TerminalNode JOBNAME() { return getToken(DB2zSQLParser.JOBNAME, 0); }
		public TerminalNode OWNER() { return getToken(DB2zSQLParser.OWNER, 0); }
		public TerminalNode PROFILE() { return getToken(DB2zSQLParser.PROFILE, 0); }
		public TerminalNode QUALIFIER() { return getToken(DB2zSQLParser.QUALIFIER, 0); }
		public TerminalNode SERVAUTH() { return getToken(DB2zSQLParser.SERVAUTH, 0); }
		public TerminalNode TRUSTED() { return getToken(DB2zSQLParser.TRUSTED, 0); }
		public TerminalNode SECTION() { return getToken(DB2zSQLParser.SECTION, 0); }
		public TerminalNode ACTIVE() { return getToken(DB2zSQLParser.ACTIVE, 0); }
		public TerminalNode VERSION() { return getToken(DB2zSQLParser.VERSION, 0); }
		public TerminalNode ALIAS() { return getToken(DB2zSQLParser.ALIAS, 0); }
		public TerminalNode WORK() { return getToken(DB2zSQLParser.WORK, 0); }
		public TerminalNode WORKFILE() { return getToken(DB2zSQLParser.WORKFILE, 0); }
		public TerminalNode SYSDEFLT() { return getToken(DB2zSQLParser.SYSDEFLT, 0); }
		public TerminalNode NULTERM() { return getToken(DB2zSQLParser.NULTERM, 0); }
		public TerminalNode STRUCTURE() { return getToken(DB2zSQLParser.STRUCTURE, 0); }
		public TerminalNode GENERIC() { return getToken(DB2zSQLParser.GENERIC, 0); }
		public TerminalNode TEMPORARY() { return getToken(DB2zSQLParser.TEMPORARY, 0); }
		public TerminalNode DEFER() { return getToken(DB2zSQLParser.DEFER, 0); }
		public TerminalNode DEFINE() { return getToken(DB2zSQLParser.DEFINE, 0); }
		public TerminalNode EXCLUDE() { return getToken(DB2zSQLParser.EXCLUDE, 0); }
		public TerminalNode GENERATE() { return getToken(DB2zSQLParser.GENERATE, 0); }
		public TerminalNode KEYS() { return getToken(DB2zSQLParser.KEYS, 0); }
		public TerminalNode XMLPATTERN() { return getToken(DB2zSQLParser.XMLPATTERN, 0); }
		public TerminalNode SIZE() { return getToken(DB2zSQLParser.SIZE, 0); }
		public TerminalNode EVERY() { return getToken(DB2zSQLParser.EVERY, 0); }
		public TerminalNode ABSOLUTE() { return getToken(DB2zSQLParser.ABSOLUTE, 0); }
		public TerminalNode ACCELERATOR() { return getToken(DB2zSQLParser.ACCELERATOR, 0); }
		public TerminalNode EXCLUDING() { return getToken(DB2zSQLParser.EXCLUDING, 0); }
		public TerminalNode INCLUDING() { return getToken(DB2zSQLParser.INCLUDING, 0); }
		public TerminalNode DEFAULTS() { return getToken(DB2zSQLParser.DEFAULTS, 0); }
		public TerminalNode MODIFIERS() { return getToken(DB2zSQLParser.MODIFIERS, 0); }
		public TerminalNode INSTEAD() { return getToken(DB2zSQLParser.INSTEAD, 0); }
		public TerminalNode NEW() { return getToken(DB2zSQLParser.NEW, 0); }
		public TerminalNode NEW_TABLE() { return getToken(DB2zSQLParser.NEW_TABLE, 0); }
		public TerminalNode OLD_TABLE() { return getToken(DB2zSQLParser.OLD_TABLE, 0); }
		public TerminalNode REFERENCING() { return getToken(DB2zSQLParser.REFERENCING, 0); }
		public TerminalNode BASED() { return getToken(DB2zSQLParser.BASED, 0); }
		public TerminalNode UPON() { return getToken(DB2zSQLParser.UPON, 0); }
		public TerminalNode OPTION() { return getToken(DB2zSQLParser.OPTION, 0); }
		public TerminalNode PRESERVE() { return getToken(DB2zSQLParser.PRESERVE, 0); }
		public TerminalNode BOTH() { return getToken(DB2zSQLParser.BOTH, 0); }
		public TerminalNode DESCRIBE() { return getToken(DB2zSQLParser.DESCRIBE, 0); }
		public TerminalNode LABELS() { return getToken(DB2zSQLParser.LABELS, 0); }
		public TerminalNode NAMES() { return getToken(DB2zSQLParser.NAMES, 0); }
		public TerminalNode OUTPUT() { return getToken(DB2zSQLParser.OUTPUT, 0); }
		public TerminalNode EXCHANGE() { return getToken(DB2zSQLParser.EXCHANGE, 0); }
		public TerminalNode STABILIZED() { return getToken(DB2zSQLParser.STABILIZED, 0); }
		public TerminalNode STMTCACHE() { return getToken(DB2zSQLParser.STMTCACHE, 0); }
		public TerminalNode STMTID() { return getToken(DB2zSQLParser.STMTID, 0); }
		public TerminalNode STMTTOKEN() { return getToken(DB2zSQLParser.STMTTOKEN, 0); }
		public TerminalNode STARTING() { return getToken(DB2zSQLParser.STARTING, 0); }
		public TerminalNode CATALOG_NAME() { return getToken(DB2zSQLParser.CATALOG_NAME, 0); }
		public TerminalNode CONDITION_NUMBER() { return getToken(DB2zSQLParser.CONDITION_NUMBER, 0); }
		public TerminalNode CURSOR_NAME() { return getToken(DB2zSQLParser.CURSOR_NAME, 0); }
		public TerminalNode DB2_AUTHENTICATION_TYPE() { return getToken(DB2zSQLParser.DB2_AUTHENTICATION_TYPE, 0); }
		public TerminalNode DB2_AUTHORIZATION_ID() { return getToken(DB2zSQLParser.DB2_AUTHORIZATION_ID, 0); }
		public TerminalNode DB2_CONNECTION_STATE() { return getToken(DB2zSQLParser.DB2_CONNECTION_STATE, 0); }
		public TerminalNode DB2_CONNECTION_STATUS() { return getToken(DB2zSQLParser.DB2_CONNECTION_STATUS, 0); }
		public TerminalNode DB2_ENCRYPTION_TYPE() { return getToken(DB2zSQLParser.DB2_ENCRYPTION_TYPE, 0); }
		public TerminalNode DB2_ERROR_CODE1() { return getToken(DB2zSQLParser.DB2_ERROR_CODE1, 0); }
		public TerminalNode DB2_ERROR_CODE2() { return getToken(DB2zSQLParser.DB2_ERROR_CODE2, 0); }
		public TerminalNode DB2_ERROR_CODE3() { return getToken(DB2zSQLParser.DB2_ERROR_CODE3, 0); }
		public TerminalNode DB2_ERROR_CODE4() { return getToken(DB2zSQLParser.DB2_ERROR_CODE4, 0); }
		public TerminalNode DB2_GET_DIAGNOSTICS_DIAGNOSTICS() { return getToken(DB2zSQLParser.DB2_GET_DIAGNOSTICS_DIAGNOSTICS, 0); }
		public TerminalNode DB2_INTERNAL_ERROR_POINTER() { return getToken(DB2zSQLParser.DB2_INTERNAL_ERROR_POINTER, 0); }
		public TerminalNode DB2_LAST_ROW() { return getToken(DB2zSQLParser.DB2_LAST_ROW, 0); }
		public TerminalNode DB2_LINE_NUMBER() { return getToken(DB2zSQLParser.DB2_LINE_NUMBER, 0); }
		public TerminalNode DB2_MESSAGE_ID() { return getToken(DB2zSQLParser.DB2_MESSAGE_ID, 0); }
		public TerminalNode DB2_MODULE_DETECTING_ERROR() { return getToken(DB2zSQLParser.DB2_MODULE_DETECTING_ERROR, 0); }
		public TerminalNode DB2_NUMBER_PARAMETER_MARKERS() { return getToken(DB2zSQLParser.DB2_NUMBER_PARAMETER_MARKERS, 0); }
		public TerminalNode DB2_NUMBER_RESULT_SETS() { return getToken(DB2zSQLParser.DB2_NUMBER_RESULT_SETS, 0); }
		public TerminalNode DB2_NUMBER_ROWS() { return getToken(DB2zSQLParser.DB2_NUMBER_ROWS, 0); }
		public TerminalNode DB2_ORDINAL_TOKEN_() { return getToken(DB2zSQLParser.DB2_ORDINAL_TOKEN_, 0); }
		public TerminalNode DB2_PRODUCT_ID() { return getToken(DB2zSQLParser.DB2_PRODUCT_ID, 0); }
		public TerminalNode DB2_REASON_CODE() { return getToken(DB2zSQLParser.DB2_REASON_CODE, 0); }
		public TerminalNode DB2_RETURNED_SQLCODE() { return getToken(DB2zSQLParser.DB2_RETURNED_SQLCODE, 0); }
		public TerminalNode DB2_RETURN_STATUS() { return getToken(DB2zSQLParser.DB2_RETURN_STATUS, 0); }
		public TerminalNode DB2_ROW_NUMBER() { return getToken(DB2zSQLParser.DB2_ROW_NUMBER, 0); }
		public TerminalNode DB2_SERVER_CLASS_NAME() { return getToken(DB2zSQLParser.DB2_SERVER_CLASS_NAME, 0); }
		public TerminalNode DB2_SQL_ATTR_CURSOR_HOLD() { return getToken(DB2zSQLParser.DB2_SQL_ATTR_CURSOR_HOLD, 0); }
		public TerminalNode DB2_SQL_ATTR_CURSOR_ROWSET() { return getToken(DB2zSQLParser.DB2_SQL_ATTR_CURSOR_ROWSET, 0); }
		public TerminalNode DB2_SQL_ATTR_CURSOR_SCROLLABLE() { return getToken(DB2zSQLParser.DB2_SQL_ATTR_CURSOR_SCROLLABLE, 0); }
		public TerminalNode DB2_SQL_ATTR_CURSOR_SENSITIVITY() { return getToken(DB2zSQLParser.DB2_SQL_ATTR_CURSOR_SENSITIVITY, 0); }
		public TerminalNode DB2_SQL_ATTR_CURSOR_TYPE() { return getToken(DB2zSQLParser.DB2_SQL_ATTR_CURSOR_TYPE, 0); }
		public TerminalNode DB2_SQLERRD1() { return getToken(DB2zSQLParser.DB2_SQLERRD1, 0); }
		public TerminalNode DB2_SQLERRD2() { return getToken(DB2zSQLParser.DB2_SQLERRD2, 0); }
		public TerminalNode DB2_SQLERRD3() { return getToken(DB2zSQLParser.DB2_SQLERRD3, 0); }
		public TerminalNode DB2_SQLERRD4() { return getToken(DB2zSQLParser.DB2_SQLERRD4, 0); }
		public TerminalNode DB2_SQLERRD5() { return getToken(DB2zSQLParser.DB2_SQLERRD5, 0); }
		public TerminalNode DB2_SQLERRD6() { return getToken(DB2zSQLParser.DB2_SQLERRD6, 0); }
		public TerminalNode DB2_SQLERRD_SET() { return getToken(DB2zSQLParser.DB2_SQLERRD_SET, 0); }
		public TerminalNode DB2_SQL_NESTING_LEVEL() { return getToken(DB2zSQLParser.DB2_SQL_NESTING_LEVEL, 0); }
		public TerminalNode DB2_TOKEN_COUNT() { return getToken(DB2zSQLParser.DB2_TOKEN_COUNT, 0); }
		public TerminalNode DIAGNOSTICS() { return getToken(DB2zSQLParser.DIAGNOSTICS, 0); }
		public TerminalNode MORE_() { return getToken(DB2zSQLParser.MORE_, 0); }
		public TerminalNode NUMBER() { return getToken(DB2zSQLParser.NUMBER, 0); }
		public TerminalNode RETURNED_SQLSTATE() { return getToken(DB2zSQLParser.RETURNED_SQLSTATE, 0); }
		public TerminalNode ROW_COUNT() { return getToken(DB2zSQLParser.ROW_COUNT, 0); }
		public TerminalNode SERVER_NAME() { return getToken(DB2zSQLParser.SERVER_NAME, 0); }
		public TerminalNode STACKED() { return getToken(DB2zSQLParser.STACKED, 0); }
		public TerminalNode CREATETAB() { return getToken(DB2zSQLParser.CREATETAB, 0); }
		public TerminalNode CREATETS() { return getToken(DB2zSQLParser.CREATETS, 0); }
		public TerminalNode DBADM() { return getToken(DB2zSQLParser.DBADM, 0); }
		public TerminalNode DBCTRL() { return getToken(DB2zSQLParser.DBCTRL, 0); }
		public TerminalNode DBMAINT() { return getToken(DB2zSQLParser.DBMAINT, 0); }
		public TerminalNode DISPLAYDB() { return getToken(DB2zSQLParser.DISPLAYDB, 0); }
		public TerminalNode IMAGCOPY() { return getToken(DB2zSQLParser.IMAGCOPY, 0); }
		public TerminalNode LOAD() { return getToken(DB2zSQLParser.LOAD, 0); }
		public TerminalNode PACKADM() { return getToken(DB2zSQLParser.PACKADM, 0); }
		public TerminalNode RECOVERDB() { return getToken(DB2zSQLParser.RECOVERDB, 0); }
		public TerminalNode REORG() { return getToken(DB2zSQLParser.REORG, 0); }
		public TerminalNode REPAIR() { return getToken(DB2zSQLParser.REPAIR, 0); }
		public TerminalNode STARTDB() { return getToken(DB2zSQLParser.STARTDB, 0); }
		public TerminalNode STATS() { return getToken(DB2zSQLParser.STATS, 0); }
		public TerminalNode STOPDB() { return getToken(DB2zSQLParser.STOPDB, 0); }
		public TerminalNode BIND() { return getToken(DB2zSQLParser.BIND, 0); }
		public TerminalNode ALTERIN() { return getToken(DB2zSQLParser.ALTERIN, 0); }
		public TerminalNode CREATEIN() { return getToken(DB2zSQLParser.CREATEIN, 0); }
		public TerminalNode DROPIN() { return getToken(DB2zSQLParser.DROPIN, 0); }
		public TerminalNode USAGE() { return getToken(DB2zSQLParser.USAGE, 0); }
		public TerminalNode ACCESSCTRL() { return getToken(DB2zSQLParser.ACCESSCTRL, 0); }
		public TerminalNode BINDADD() { return getToken(DB2zSQLParser.BINDADD, 0); }
		public TerminalNode BINDAGENT() { return getToken(DB2zSQLParser.BINDAGENT, 0); }
		public TerminalNode BSDS() { return getToken(DB2zSQLParser.BSDS, 0); }
		public TerminalNode CREATEALIAS() { return getToken(DB2zSQLParser.CREATEALIAS, 0); }
		public TerminalNode CREATEDBA() { return getToken(DB2zSQLParser.CREATEDBA, 0); }
		public TerminalNode CREATEDBC() { return getToken(DB2zSQLParser.CREATEDBC, 0); }
		public TerminalNode CREATE_SECURE_OBJECT() { return getToken(DB2zSQLParser.CREATE_SECURE_OBJECT, 0); }
		public TerminalNode CREATESG() { return getToken(DB2zSQLParser.CREATESG, 0); }
		public TerminalNode CREATETMTAB() { return getToken(DB2zSQLParser.CREATETMTAB, 0); }
		public TerminalNode DATAACCESS() { return getToken(DB2zSQLParser.DATAACCESS, 0); }
		public TerminalNode DEBUGSESSION() { return getToken(DB2zSQLParser.DEBUGSESSION, 0); }
		public TerminalNode DISPLAY() { return getToken(DB2zSQLParser.DISPLAY, 0); }
		public TerminalNode MONITOR1() { return getToken(DB2zSQLParser.MONITOR1, 0); }
		public TerminalNode MONITOR2() { return getToken(DB2zSQLParser.MONITOR2, 0); }
		public TerminalNode RECOVER() { return getToken(DB2zSQLParser.RECOVER, 0); }
		public TerminalNode SQLADM() { return getToken(DB2zSQLParser.SQLADM, 0); }
		public TerminalNode STOPALL() { return getToken(DB2zSQLParser.STOPALL, 0); }
		public TerminalNode STOSPACE() { return getToken(DB2zSQLParser.STOSPACE, 0); }
		public TerminalNode SYSADM() { return getToken(DB2zSQLParser.SYSADM, 0); }
		public TerminalNode SYSCTRL() { return getToken(DB2zSQLParser.SYSCTRL, 0); }
		public TerminalNode SYSOPR() { return getToken(DB2zSQLParser.SYSOPR, 0); }
		public TerminalNode TRACE() { return getToken(DB2zSQLParser.TRACE, 0); }
		public TerminalNode UNLOAD() { return getToken(DB2zSQLParser.UNLOAD, 0); }
		public TerminalNode WRITE() { return getToken(DB2zSQLParser.WRITE, 0); }
		public TerminalNode BUFFERPOOLS() { return getToken(DB2zSQLParser.BUFFERPOOLS, 0); }
		public SqlKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSqlKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSqlKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSqlKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SqlKeywordContext sqlKeyword() throws RecognitionException {
		SqlKeywordContext _localctx = new SqlKeywordContext(_ctx, getState());
		enterRule(_localctx, 1286, RULE_sqlKeyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9361);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INSTEAD) | (1L << NEW) | (1L << NEW_TABLE) | (1L << OLD_TABLE) | (1L << REFERENCING) | (1L << BASED) | (1L << UPON) | (1L << ADD) | (1L << AFTER) | (1L << ALL) | (1L << ALLOCATE) | (1L << ALLOW) | (1L << ALTER) | (1L << ALTERAND) | (1L << ANY) | (1L << ARRAY) | (1L << ARRAY_EXISTS) | (1L << AS) | (1L << ASENSITIVE) | (1L << ASSOCIATE) | (1L << ASUTIME) | (1L << AT) | (1L << AUDIT) | (1L << AUX) | (1L << AUXILIARY) | (1L << BEFORE) | (1L << BEGIN) | (1L << BETWEEN) | (1L << BUFFERPOOL) | (1L << BUFFERPOOLS) | (1L << BY) | (1L << CALL) | (1L << CAPTURE) | (1L << CASCADED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CASE - 64)) | (1L << (CAST - 64)) | (1L << (CCSID - 64)) | (1L << (CHAR - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHECK - 64)) | (1L << (CLONE - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECTION - 64)) | (1L << (COLLID - 64)) | (1L << (COLUMN - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (CONCAT - 64)) | (1L << (CONDITION - 64)) | (1L << (CONNECT - 64)) | (1L << (CONNECTION - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONTAINS - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CREATE - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT - 64)) | (1L << (CURRENT_LC_CTYPE - 64)) | (1L << (CURRVAL - 64)) | (1L << (CURSOR - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DAYS - 64)) | (1L << (DBINFO - 64)) | (1L << (DECLARE - 64)) | (1L << (DEFAULT - 64)) | (1L << (DELETE - 64)) | (1L << (DESCRIPTOR - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DISABLE - 64)) | (1L << (DISALLOW - 64)) | (1L << (DISTINCT - 64)) | (1L << (DO - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (DSSIZE - 64)) | (1L << (DYNAMIC - 64)) | (1L << (EDITPROC - 64)) | (1L << (ELSE - 64)) | (1L << (ELSEIF - 64)) | (1L << (ENCODING - 64)) | (1L << (ENCRYPTION - 64)) | (1L << (END - 64)) | (1L << (END_EXEC - 64)) | (1L << (ENDING - 64)) | (1L << (ERASE - 64)) | (1L << (ESCAPE - 64)) | (1L << (EXCEPT - 64)) | (1L << (EXCEPTION - 64)) | (1L << (EXEC_SQL - 64)) | (1L << (EXECUTE - 64)) | (1L << (EXISTS - 64)) | (1L << (EXIT - 64)) | (1L << (EXPLAIN - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (EXTERNAL - 128)) | (1L << (FENCED - 128)) | (1L << (FETCH - 128)) | (1L << (FIELDPROC - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FOR - 128)) | (1L << (FREE - 128)) | (1L << (FROM - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GENERATED - 128)) | (1L << (GET - 128)) | (1L << (GLOBAL - 128)) | (1L << (GO - 128)) | (1L << (GOTO - 128)) | (1L << (GRANT - 128)) | (1L << (GROUP - 128)) | (1L << (HANDLER - 128)) | (1L << (HAVING - 128)) | (1L << (HOLD - 128)) | (1L << (HOUR - 128)) | (1L << (HOURS - 128)) | (1L << (IF - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (IN - 128)) | (1L << (INCLUSIVE - 128)) | (1L << (INDEX - 128)) | (1L << (INDEXBP - 128)) | (1L << (INHERIT - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSENSITIVE - 128)) | (1L << (INSERT - 128)) | (1L << (INTERSECT - 128)) | (1L << (INTO - 128)) | (1L << (IS - 128)) | (1L << (ISOBID - 128)) | (1L << (ITERATE - 128)) | (1L << (JAR - 128)) | (1L << (JOIN - 128)) | (1L << (KEEP - 128)) | (1L << (KEY - 128)) | (1L << (LABEL - 128)) | (1L << (LANGUAGE - 128)) | (1L << (LAST - 128)) | (1L << (LC_CTYPE - 128)) | (1L << (LEAVE - 128)) | (1L << (LEFT - 128)) | (1L << (LIKE - 128)) | (1L << (LIMIT - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCALE - 128)) | (1L << (LOCATOR - 128)) | (1L << (LOCATORS - 128)) | (1L << (LOCK - 128)) | (1L << (LOCKMAX - 128)) | (1L << (LOCKSIZE - 128)) | (1L << (LONG - 128)) | (1L << (LOOP - 128)) | (1L << (MAINTAINED - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MICROSECOND - 128)) | (1L << (MICROSECONDS - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (MODIFIES - 193)) | (1L << (MONTH - 193)) | (1L << (MONTHS - 193)) | (1L << (NEXT - 193)) | (1L << (NEXTVAL - 193)) | (1L << (NO - 193)) | (1L << (NONE - 193)) | (1L << (NOT - 193)) | (1L << (NULL - 193)) | (1L << (NULLS - 193)) | (1L << (NUMPARTS - 193)) | (1L << (OBID - 193)) | (1L << (OF - 193)) | (1L << (OFFSET - 193)) | (1L << (OLD - 193)) | (1L << (ON - 193)) | (1L << (OPEN - 193)) | (1L << (OPTIMIZATION - 193)) | (1L << (OPTIMIZE - 193)) | (1L << (OR - 193)) | (1L << (ORDER - 193)) | (1L << (ORGANIZATION - 193)) | (1L << (OUT - 193)) | (1L << (OUTER - 193)) | (1L << (PACKAGE - 193)) | (1L << (PADDED - 193)) | (1L << (PARAMETER - 193)) | (1L << (PART - 193)) | (1L << (PARTITION - 193)) | (1L << (PARTITIONED - 193)) | (1L << (PARTITIONING - 193)) | (1L << (PATH - 193)) | (1L << (PERIOD - 193)) | (1L << (PIECESIZE - 193)) | (1L << (PLAN - 193)) | (1L << (PRECISION - 193)) | (1L << (PREPARE - 193)) | (1L << (PREVVAL - 193)) | (1L << (PRIOR - 193)) | (1L << (PRIQTY - 193)) | (1L << (PRIVILEGES - 193)) | (1L << (PROCEDURE - 193)) | (1L << (PROGRAM - 193)) | (1L << (PSID - 193)) | (1L << (PUBLIC - 193)) | (1L << (QUERY - 193)) | (1L << (QUERYNO - 193)) | (1L << (READS - 193)) | (1L << (REFERENCES - 193)) | (1L << (REFRESH - 193)) | (1L << (RELEASE - 193)) | (1L << (RENAME - 193)) | (1L << (REPEAT - 193)) | (1L << (RESIGNAL - 193)) | (1L << (RESTRICT - 193)) | (1L << (RESULT - 193)) | (1L << (RESULT_SET_LOCATOR - 193)) | (1L << (RETURN - 193)) | (1L << (RETURNS - 193)) | (1L << (REVOKE - 193)) | (1L << (RIGHT - 193)) | (1L << (ROLE - 193)) | (1L << (ROLLBACK - 193)) | (1L << (ROLLUP - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (ROUND_CEILING - 257)) | (1L << (ROUND_DOWN - 257)) | (1L << (ROUND_FLOOR - 257)) | (1L << (ROUND_HALF_DOWN - 257)) | (1L << (ROUND_HALF_EVEN - 257)) | (1L << (ROUND_HALF_UP - 257)) | (1L << (ROUND_UP - 257)) | (1L << (ROW - 257)) | (1L << (ROWSET - 257)) | (1L << (RUN - 257)) | (1L << (SAVEPOINT - 257)) | (1L << (SCHEMA - 257)) | (1L << (SCRATCHPAD - 257)) | (1L << (SECOND - 257)) | (1L << (SECONDS - 257)) | (1L << (SECQTY - 257)) | (1L << (SECURITY - 257)) | (1L << (SELECT - 257)) | (1L << (SENSITIVE - 257)) | (1L << (SEQUENCE - 257)) | (1L << (SET - 257)) | (1L << (SIGNAL - 257)) | (1L << (SIMPLE - 257)) | (1L << (SOME - 257)) | (1L << (SOURCE - 257)) | (1L << (SPECIFIC - 257)) | (1L << (STANDARD - 257)) | (1L << (STATEMENT - 257)) | (1L << (STATIC - 257)) | (1L << (STAY - 257)) | (1L << (STOGROUP - 257)) | (1L << (STORES - 257)) | (1L << (STYLE - 257)) | (1L << (SUMMARY - 257)) | (1L << (SYNONYM - 257)) | (1L << (SYSDATE - 257)) | (1L << (SYSTEM - 257)) | (1L << (SYSTIMESTAMP - 257)) | (1L << (TABLE - 257)) | (1L << (TABLESPACE - 257)) | (1L << (THEN - 257)) | (1L << (TO - 257)) | (1L << (TRIGGER - 257)) | (1L << (TRUNCATE - 257)) | (1L << (TYPE - 257)) | (1L << (UNDO - 257)) | (1L << (UNION - 257)) | (1L << (UNIQUE - 257)) | (1L << (UNTIL - 257)) | (1L << (UPDATE - 257)) | (1L << (USING - 257)) | (1L << (VALIDPROC - 257)) | (1L << (VALUE - 257)) | (1L << (VALUES - 257)) | (1L << (VARIABLE - 257)) | (1L << (VARIANT - 257)) | (1L << (VCAT - 257)) | (1L << (VERSIONING - 257)) | (1L << (VIEW - 257)) | (1L << (VOLATILE - 257)) | (1L << (VOLUMES - 257)) | (1L << (WHEN - 257)) | (1L << (WHENEVER - 257)) | (1L << (WHERE - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (WHILE - 321)) | (1L << (WITH - 321)) | (1L << (WLM - 321)) | (1L << (XMLCAST - 321)) | (1L << (XMLEXISTS - 321)) | (1L << (XMLNAMESPACES - 321)) | (1L << (YEAR - 321)) | (1L << (YEARS - 321)) | (1L << (ZONE - 321)) | (1L << (AND - 321)) | (1L << (ARRAY_AGG - 321)) | (1L << (ASC - 321)) | (1L << (AVG - 321)) | (1L << (BIT - 321)) | (1L << (CHANGE - 321)) | (1L << (CODEUNITS16 - 321)) | (1L << (CODEUNITS32 - 321)) | (1L << (CORR - 321)) | (1L << (CORRELATION - 321)) | (1L << (COVAR - 321)) | (1L << (COVARIANCE - 321)) | (1L << (COVARIANCE_SAMP - 321)) | (1L << (COVAR_POP - 321)) | (1L << (COVAR_SAMP - 321)) | (1L << (CS - 321)) | (1L << (CUME_DIST - 321)) | (1L << (DENSE_RANK - 321)) | (1L << (DESC - 321)) | (1L << (EBCDIC - 321)) | (1L << (EXCLUSIVE - 321)) | (1L << (FIRST_VALUE - 321)) | (1L << (FOLLOWING - 321)) | (1L << (GROUPING - 321)) | (1L << (IGNORE - 321)) | (1L << (INDICATOR - 321)) | (1L << (INPUT - 321)) | (1L << (ISNULL - 321)) | (1L << (LAG - 321)) | (1L << (LARGE - 321)) | (1L << (LAST_VALUE - 321)) | (1L << (LEAD - 321)) | (1L << (LISTAGG - 321)) | (1L << (LOCKED - 321)) | (1L << (LOCKS - 321)) | (1L << (MEDIAN - 321)) | (1L << (MINUTES - 321)) | (1L << (MIXED - 321)) | (1L << (NOTNULL - 321)) | (1L << (NTH_VALUE - 321)) | (1L << (NTILE - 321)) | (1L << (NUMERIC - 321)) | (1L << (OBJECT - 321)) | (1L << (OCTETS - 321)) | (1L << (ONLY - 321)) | (1L << (OVER - 321)) | (1L << (PASSING - 321)) | (1L << (PERCENTILE_CONT - 321)) | (1L << (PERCENTILE_DISC - 321)) | (1L << (PERCENT_RANK - 321)) | (1L << (PRECEDING - 321)) | (1L << (PREVIOUS - 321)) | (1L << (RANGE - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (RANK - 385)) | (1L << (RATIO_TO_REPORT - 385)) | (1L << (READ - 385)) | (1L << (REF - 385)) | (1L << (REGR_AVGX - 385)) | (1L << (REGR_AVGY - 385)) | (1L << (REGR_COUNT - 385)) | (1L << (REGR_ICPT - 385)) | (1L << (REGR_INTERCEPT - 385)) | (1L << (REGR_R2 - 385)) | (1L << (REGR_SLOPE - 385)) | (1L << (REGR_SXX - 385)) | (1L << (REGR_SXY - 385)) | (1L << (REGR_SYY - 385)) | (1L << (RESPECT - 385)) | (1L << (ROW_NUMBER - 385)) | (1L << (ROWS - 385)) | (1L << (RR - 385)) | (1L << (RS - 385)) | (1L << (SBCS - 385)) | (1L << (SELECTIVITY - 385)) | (1L << (SETS - 385)) | (1L << (SHARE - 385)) | (1L << (SKIP_ - 385)) | (1L << (STDDEV - 385)) | (1L << (STDDEV_POP - 385)) | (1L << (STDDEV_SAMP - 385)) | (1L << (SUM - 385)) | (1L << (TOKEN - 385)) | (1L << (UNBOUNDED - 385)) | (1L << (UNPACK - 385)) | (1L << (UR - 385)) | (1L << (USE - 385)) | (1L << (VAR - 385)) | (1L << (VARIANCE - 385)) | (1L << (VARIANCE_SAMP - 385)) | (1L << (VAR_POP - 385)) | (1L << (VAR_SAMP - 385)) | (1L << (VARYING - 385)) | (1L << (WITHOUT - 385)) | (1L << (XML - 385)) | (1L << (XMLAGG - 385)) | (1L << (COLUMNS - 385)) | (1L << (SQLID - 385)) | (1L << (ORDINALITY - 385)) | (1L << (SYSTEM_TIME - 385)) | (1L << (BUSINESS_TIME - 385)) | (1L << (MULTIPLIER - 385)) | (1L << (UNNEST - 385)) | (1L << (CROSS - 385)) | (1L << (CALLER - 385)) | (1L << (CLIENT - 385)) | (1L << (POSITIONING - 385)) | (1L << (SCROLL - 385)) | (1L << (ACTION - 385)) | (1L << (ASSEMBLE - 385)) | (1L << (C_ - 385)) | (1L << (CALLED - 385)) | (1L << (COBOL - 385)) | (1L << (DB2 - 385)) | (1L << (DEFINER - 385)) | (1L << (DISPATCH - 385)) | (1L << (ENVIRONMENT - 385)) | (1L << (FAILURE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (FAILURES - 449)) | (1L << (JAVA - 449)) | (1L << (MAIN - 449)) | (1L << (NAME - 449)) | (1L << (OPTIONS - 449)) | (1L << (PARALLEL - 449)) | (1L << (PLI - 449)) | (1L << (REGISTERS - 449)) | (1L << (RESIDENT - 449)) | (1L << (SECURED - 449)) | (1L << (SPECIAL - 449)) | (1L << (SQL - 449)) | (1L << (STOP - 449)) | (1L << (SUB - 449)) | (1L << (YES - 449)) | (1L << (APPLICATION - 449)) | (1L << (CHANGED - 449)) | (1L << (COMPATIBILITY - 449)) | (1L << (COMPRESS - 449)) | (1L << (COPY - 449)) | (1L << (FREEPAGE - 449)) | (1L << (GBPCACHE - 449)) | (1L << (INCLUDE - 449)) | (1L << (MAXVALUE - 449)) | (1L << (MINVALUE - 449)) | (1L << (PCTFREE - 449)) | (1L << (REGENERATE - 449)) | (1L << (MASK - 449)) | (1L << (ENABLE - 449)) | (1L << (PERMISSION - 449)) | (1L << (ATOMIC - 449)) | (1L << (SQLEXCEPTION - 449)) | (1L << (MERGE - 449)) | (1L << (MATCHED - 449)) | (1L << (SQLSTATE - 449)) | (1L << (MESSAGE_TEXT - 449)) | (1L << (OVERRIDING - 449)) | (1L << (PORTION - 449)) | (1L << (DB2SQL - 449)) | (1L << (DEBUG - 449)) | (1L << (GENERAL - 449)) | (1L << (MODE_ - 449)) | (1L << (REXX - 449)) | (1L << (CACHE - 449)) | (1L << (CYCLE - 449)) | (1L << (INCREMENT - 449)) | (1L << (RESTART - 449)) | (1L << (DATACLAS - 449)) | (1L << (MGMTCLAS - 449)) | (1L << (REMOVE - 449)) | (1L << (STORCLAS - 449)) | (1L << (ACCESS - 449)) | (1L << (ACTIVATE - 449)) | (1L << (ALWAYS - 449)) | (1L << (APPEND - 449)) | (1L << (ARCHIVE - 449)) | (1L << (BUSINESS - 449)) | (1L << (CASCADE - 449)) | (1L << (CHANGES - 449)) | (1L << (CONTROL - 449)) | (1L << (DEACTIVATE - 449)) | (1L << (DEFERRED - 449)) | (1L << (EACH - 449)) | (1L << (ENFORCED - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (EXTRA - 513)) | (1L << (FOREIGN - 513)) | (1L << (HIDDEN_ - 513)) | (1L << (HISTORY - 513)) | (1L << (ID - 513)) | (1L << (IDENTITY - 513)) | (1L << (IMPLICITLY - 513)) | (1L << (INITIALLY - 513)) | (1L << (INLINE - 513)) | (1L << (OPERATION - 513)) | (1L << (ORGANIZE - 513)) | (1L << (OVERLAPS - 513)) | (1L << (PACKAGE_NAME - 513)) | (1L << (PACKAGE_SCHEMA - 513)) | (1L << (PACKAGE_VERSION - 513)) | (1L << (PRIMARY - 513)) | (1L << (RESET - 513)) | (1L << (ROTATE - 513)) | (1L << (START - 513)) | (1L << (SYSIBM - 513)) | (1L << (TRANSACTION - 513)) | (1L << (XMLSCHEMA - 513)) | (1L << (ELEMENT - 513)) | (1L << (URL - 513)) | (1L << (NAMESPACE - 513)) | (1L << (LOCATION - 513)) | (1L << (SYSXSR - 513)) | (1L << (ALGORITHM - 513)) | (1L << (FIXEDLENGTH - 513)) | (1L << (HUFFMAN - 513)) | (1L << (LOB - 513)) | (1L << (LOG - 513)) | (1L << (LOGGED - 513)) | (1L << (MAXPARTITIONS - 513)) | (1L << (MAXROWS - 513)) | (1L << (MEMBER - 513)) | (1L << (MOVE - 513)) | (1L << (PAGE - 513)) | (1L << (PAGENUM - 513)) | (1L << (PENDING - 513)) | (1L << (RELATIVE - 513)) | (1L << (SEGSIZE - 513)) | (1L << (TRACKMOD - 513)) | (1L << (ADDRESS - 513)) | (1L << (ATTRIBUTES - 513)) | (1L << (AUTHENTICATION - 513)) | (1L << (AUTHID - 513)) | (1L << (CONTEXT - 513)) | (1L << (JOBNAME - 513)) | (1L << (OWNER - 513)) | (1L << (PROFILE - 513)) | (1L << (QUALIFIER - 513)) | (1L << (SERVAUTH - 513)) | (1L << (TRUSTED - 513)) | (1L << (SECTION - 513)) | (1L << (ACTIVE - 513)) | (1L << (VERSION - 513)) | (1L << (ALIAS - 513)) | (1L << (WORK - 513)) | (1L << (WORKFILE - 513)) | (1L << (SYSDEFLT - 513)) | (1L << (NULTERM - 513)) | (1L << (STRUCTURE - 513)) | (1L << (GENERIC - 513)))) != 0) || ((((_la - 577)) & ~0x3f) == 0 && ((1L << (_la - 577)) & ((1L << (TEMPORARY - 577)) | (1L << (DEFER - 577)) | (1L << (DEFINE - 577)) | (1L << (EXCLUDE - 577)) | (1L << (GENERATE - 577)) | (1L << (KEYS - 577)) | (1L << (XMLPATTERN - 577)) | (1L << (SIZE - 577)) | (1L << (EVERY - 577)) | (1L << (ABSOLUTE - 577)) | (1L << (ACCELERATOR - 577)) | (1L << (EXCLUDING - 577)) | (1L << (INCLUDING - 577)) | (1L << (DEFAULTS - 577)) | (1L << (MODIFIERS - 577)) | (1L << (OPTION - 577)) | (1L << (PRESERVE - 577)) | (1L << (BOTH - 577)) | (1L << (DESCRIBE - 577)) | (1L << (LABELS - 577)) | (1L << (NAMES - 577)) | (1L << (OUTPUT - 577)) | (1L << (EXCHANGE - 577)) | (1L << (STABILIZED - 577)) | (1L << (STMTCACHE - 577)) | (1L << (STMTID - 577)) | (1L << (STMTTOKEN - 577)) | (1L << (STARTING - 577)) | (1L << (CATALOG_NAME - 577)) | (1L << (CONDITION_NUMBER - 577)) | (1L << (CURSOR_NAME - 577)) | (1L << (DB2_AUTHENTICATION_TYPE - 577)) | (1L << (DB2_AUTHORIZATION_ID - 577)) | (1L << (DB2_CONNECTION_STATE - 577)) | (1L << (DB2_CONNECTION_STATUS - 577)) | (1L << (DB2_ENCRYPTION_TYPE - 577)) | (1L << (DB2_ERROR_CODE1 - 577)) | (1L << (DB2_ERROR_CODE2 - 577)) | (1L << (DB2_ERROR_CODE3 - 577)) | (1L << (DB2_ERROR_CODE4 - 577)) | (1L << (DB2_GET_DIAGNOSTICS_DIAGNOSTICS - 577)) | (1L << (DB2_INTERNAL_ERROR_POINTER - 577)) | (1L << (DB2_LAST_ROW - 577)) | (1L << (DB2_LINE_NUMBER - 577)) | (1L << (DB2_MESSAGE_ID - 577)) | (1L << (DB2_MODULE_DETECTING_ERROR - 577)) | (1L << (DB2_NUMBER_PARAMETER_MARKERS - 577)) | (1L << (DB2_NUMBER_RESULT_SETS - 577)) | (1L << (DB2_NUMBER_ROWS - 577)) | (1L << (DB2_ORDINAL_TOKEN_ - 577)) | (1L << (DB2_PRODUCT_ID - 577)) | (1L << (DB2_REASON_CODE - 577)) | (1L << (DB2_RETURNED_SQLCODE - 577)) | (1L << (DB2_RETURN_STATUS - 577)) | (1L << (DB2_ROW_NUMBER - 577)) | (1L << (DB2_SERVER_CLASS_NAME - 577)) | (1L << (DB2_SQL_ATTR_CURSOR_HOLD - 577)) | (1L << (DB2_SQL_ATTR_CURSOR_ROWSET - 577)) | (1L << (DB2_SQL_ATTR_CURSOR_SCROLLABLE - 577)) | (1L << (DB2_SQL_ATTR_CURSOR_SENSITIVITY - 577)) | (1L << (DB2_SQL_ATTR_CURSOR_TYPE - 577)) | (1L << (DB2_SQLERRD1 - 577)) | (1L << (DB2_SQLERRD2 - 577)))) != 0) || ((((_la - 641)) & ~0x3f) == 0 && ((1L << (_la - 641)) & ((1L << (DB2_SQLERRD3 - 641)) | (1L << (DB2_SQLERRD4 - 641)) | (1L << (DB2_SQLERRD5 - 641)) | (1L << (DB2_SQLERRD6 - 641)) | (1L << (DB2_SQLERRD_SET - 641)) | (1L << (DB2_SQL_NESTING_LEVEL - 641)) | (1L << (DB2_TOKEN_COUNT - 641)) | (1L << (DIAGNOSTICS - 641)) | (1L << (MORE_ - 641)) | (1L << (NUMBER - 641)) | (1L << (RETURNED_SQLSTATE - 641)) | (1L << (ROW_COUNT - 641)) | (1L << (SERVER_NAME - 641)) | (1L << (STACKED - 641)) | (1L << (CREATETAB - 641)) | (1L << (CREATETS - 641)) | (1L << (DBADM - 641)) | (1L << (DBCTRL - 641)) | (1L << (DBMAINT - 641)) | (1L << (DISPLAYDB - 641)) | (1L << (IMAGCOPY - 641)) | (1L << (LOAD - 641)) | (1L << (PACKADM - 641)) | (1L << (RECOVERDB - 641)) | (1L << (REORG - 641)) | (1L << (REPAIR - 641)) | (1L << (STARTDB - 641)) | (1L << (STATS - 641)) | (1L << (STOPDB - 641)) | (1L << (BIND - 641)) | (1L << (ALTERIN - 641)) | (1L << (CREATEIN - 641)) | (1L << (DROPIN - 641)) | (1L << (USAGE - 641)) | (1L << (ACCESSCTRL - 641)) | (1L << (BINDADD - 641)) | (1L << (BINDAGENT - 641)) | (1L << (BSDS - 641)) | (1L << (CREATEALIAS - 641)) | (1L << (CREATEDBA - 641)) | (1L << (CREATEDBC - 641)) | (1L << (CREATE_SECURE_OBJECT - 641)) | (1L << (CREATESG - 641)) | (1L << (CREATETMTAB - 641)) | (1L << (DATAACCESS - 641)) | (1L << (DEBUGSESSION - 641)) | (1L << (DISPLAY - 641)) | (1L << (MONITOR1 - 641)) | (1L << (MONITOR2 - 641)) | (1L << (RECOVER - 641)) | (1L << (SQLADM - 641)) | (1L << (STOPALL - 641)) | (1L << (STOSPACE - 641)) | (1L << (SYSADM - 641)) | (1L << (SYSCTRL - 641)) | (1L << (SYSOPR - 641)) | (1L << (TRACE - 641)) | (1L << (UNLOAD - 641)) | (1L << (WRITE - 641)))) != 0) || _la==MINUTE || ((((_la - 930)) & ~0x3f) == 0 && ((1L << (_la - 930)) & ((1L << (CURRENT_DATE - 930)) | (1L << (CURRENT_PATH - 930)) | (1L << (CURRENT_SCHEMA - 930)) | (1L << (CURRENT_SERVER - 930)) | (1L << (CURRENT_TIME - 930)) | (1L << (CURRENT_TIMESTAMP - 930)) | (1L << (CURRENT_TIME_ZONE - 930)) | (1L << (SESSION_USER - 930)) | (1L << (USER - 930)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	private static final int _serializedATNSegments = 4;
	private static final String _serializedATNSegment0 =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u03cc\u2496\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
		"\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d"+
		"\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142"+
		"\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145\4\u0146\t\u0146"+
		"\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b"+
		"\t\u014b\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f"+
		"\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153\4\u0154"+
		"\t\u0154\4\u0155\t\u0155\4\u0156\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158"+
		"\4\u0159\t\u0159\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d"+
		"\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\4\u0161\t\u0161"+
		"\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164\t\u0164\4\u0165\t\u0165\4\u0166"+
		"\t\u0166\4\u0167\t\u0167\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a"+
		"\4\u016b\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e\4\u016f"+
		"\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172\t\u0172\4\u0173\t\u0173"+
		"\4\u0174\t\u0174\4\u0175\t\u0175\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178"+
		"\t\u0178\4\u0179\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c"+
		"\4\u017d\t\u017d\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180\t\u0180\4\u0181"+
		"\t\u0181\4\u0182\t\u0182\4\u0183\t\u0183\4\u0184\t\u0184\4\u0185\t\u0185"+
		"\4\u0186\t\u0186\4\u0187\t\u0187\4\u0188\t\u0188\4\u0189\t\u0189\4\u018a"+
		"\t\u018a\4\u018b\t\u018b\4\u018c\t\u018c\4\u018d\t\u018d\4\u018e\t\u018e"+
		"\4\u018f\t\u018f\4\u0190\t\u0190\4\u0191\t\u0191\4\u0192\t\u0192\4\u0193"+
		"\t\u0193\4\u0194\t\u0194\4\u0195\t\u0195\4\u0196\t\u0196\4\u0197\t\u0197"+
		"\4\u0198\t\u0198\4\u0199\t\u0199\4\u019a\t\u019a\4\u019b\t\u019b\4\u019c"+
		"\t\u019c\4\u019d\t\u019d\4\u019e\t\u019e\4\u019f\t\u019f\4\u01a0\t\u01a0"+
		"\4\u01a1\t\u01a1\4\u01a2\t\u01a2\4\u01a3\t\u01a3\4\u01a4\t\u01a4\4\u01a5"+
		"\t\u01a5\4\u01a6\t\u01a6\4\u01a7\t\u01a7\4\u01a8\t\u01a8\4\u01a9\t\u01a9"+
		"\4\u01aa\t\u01aa\4\u01ab\t\u01ab\4\u01ac\t\u01ac\4\u01ad\t\u01ad\4\u01ae"+
		"\t\u01ae\4\u01af\t\u01af\4\u01b0\t\u01b0\4\u01b1\t\u01b1\4\u01b2\t\u01b2"+
		"\4\u01b3\t\u01b3\4\u01b4\t\u01b4\4\u01b5\t\u01b5\4\u01b6\t\u01b6\4\u01b7"+
		"\t\u01b7\4\u01b8\t\u01b8\4\u01b9\t\u01b9\4\u01ba\t\u01ba\4\u01bb\t\u01bb"+
		"\4\u01bc\t\u01bc\4\u01bd\t\u01bd\4\u01be\t\u01be\4\u01bf\t\u01bf\4\u01c0"+
		"\t\u01c0\4\u01c1\t\u01c1\4\u01c2\t\u01c2\4\u01c3\t\u01c3\4\u01c4\t\u01c4"+
		"\4\u01c5\t\u01c5\4\u01c6\t\u01c6\4\u01c7\t\u01c7\4\u01c8\t\u01c8\4\u01c9"+
		"\t\u01c9\4\u01ca\t\u01ca\4\u01cb\t\u01cb\4\u01cc\t\u01cc\4\u01cd\t\u01cd"+
		"\4\u01ce\t\u01ce\4\u01cf\t\u01cf\4\u01d0\t\u01d0\4\u01d1\t\u01d1\4\u01d2"+
		"\t\u01d2\4\u01d3\t\u01d3\4\u01d4\t\u01d4\4\u01d5\t\u01d5\4\u01d6\t\u01d6"+
		"\4\u01d7\t\u01d7\4\u01d8\t\u01d8\4\u01d9\t\u01d9\4\u01da\t\u01da\4\u01db"+
		"\t\u01db\4\u01dc\t\u01dc\4\u01dd\t\u01dd\4\u01de\t\u01de\4\u01df\t\u01df"+
		"\4\u01e0\t\u01e0\4\u01e1\t\u01e1\4\u01e2\t\u01e2\4\u01e3\t\u01e3\4\u01e4"+
		"\t\u01e4\4\u01e5\t\u01e5\4\u01e6\t\u01e6\4\u01e7\t\u01e7\4\u01e8\t\u01e8"+
		"\4\u01e9\t\u01e9\4\u01ea\t\u01ea\4\u01eb\t\u01eb\4\u01ec\t\u01ec\4\u01ed"+
		"\t\u01ed\4\u01ee\t\u01ee\4\u01ef\t\u01ef\4\u01f0\t\u01f0\4\u01f1\t\u01f1"+
		"\4\u01f2\t\u01f2\4\u01f3\t\u01f3\4\u01f4\t\u01f4\4\u01f5\t\u01f5\4\u01f6"+
		"\t\u01f6\4\u01f7\t\u01f7\4\u01f8\t\u01f8\4\u01f9\t\u01f9\4\u01fa\t\u01fa"+
		"\4\u01fb\t\u01fb\4\u01fc\t\u01fc\4\u01fd\t\u01fd\4\u01fe\t\u01fe\4\u01ff"+
		"\t\u01ff\4\u0200\t\u0200\4\u0201\t\u0201\4\u0202\t\u0202\4\u0203\t\u0203"+
		"\4\u0204\t\u0204\4\u0205\t\u0205\4\u0206\t\u0206\4\u0207\t\u0207\4\u0208"+
		"\t\u0208\4\u0209\t\u0209\4\u020a\t\u020a\4\u020b\t\u020b\4\u020c\t\u020c"+
		"\4\u020d\t\u020d\4\u020e\t\u020e\4\u020f\t\u020f\4\u0210\t\u0210\4\u0211"+
		"\t\u0211\4\u0212\t\u0212\4\u0213\t\u0213\4\u0214\t\u0214\4\u0215\t\u0215"+
		"\4\u0216\t\u0216\4\u0217\t\u0217\4\u0218\t\u0218\4\u0219\t\u0219\4\u021a"+
		"\t\u021a\4\u021b\t\u021b\4\u021c\t\u021c\4\u021d\t\u021d\4\u021e\t\u021e"+
		"\4\u021f\t\u021f\4\u0220\t\u0220\4\u0221\t\u0221\4\u0222\t\u0222\4\u0223"+
		"\t\u0223\4\u0224\t\u0224\4\u0225\t\u0225\4\u0226\t\u0226\4\u0227\t\u0227"+
		"\4\u0228\t\u0228\4\u0229\t\u0229\4\u022a\t\u022a\4\u022b\t\u022b\4\u022c"+
		"\t\u022c\4\u022d\t\u022d\4\u022e\t\u022e\4\u022f\t\u022f\4\u0230\t\u0230"+
		"\4\u0231\t\u0231\4\u0232\t\u0232\4\u0233\t\u0233\4\u0234\t\u0234\4\u0235"+
		"\t\u0235\4\u0236\t\u0236\4\u0237\t\u0237\4\u0238\t\u0238\4\u0239\t\u0239"+
		"\4\u023a\t\u023a\4\u023b\t\u023b\4\u023c\t\u023c\4\u023d\t\u023d\4\u023e"+
		"\t\u023e\4\u023f\t\u023f\4\u0240\t\u0240\4\u0241\t\u0241\4\u0242\t\u0242"+
		"\4\u0243\t\u0243\4\u0244\t\u0244\4\u0245\t\u0245\4\u0246\t\u0246\4\u0247"+
		"\t\u0247\4\u0248\t\u0248\4\u0249\t\u0249\4\u024a\t\u024a\4\u024b\t\u024b"+
		"\4\u024c\t\u024c\4\u024d\t\u024d\4\u024e\t\u024e\4\u024f\t\u024f\4\u0250"+
		"\t\u0250\4\u0251\t\u0251\4\u0252\t\u0252\4\u0253\t\u0253\4\u0254\t\u0254"+
		"\4\u0255\t\u0255\4\u0256\t\u0256\4\u0257\t\u0257\4\u0258\t\u0258\4\u0259"+
		"\t\u0259\4\u025a\t\u025a\4\u025b\t\u025b\4\u025c\t\u025c\4\u025d\t\u025d"+
		"\4\u025e\t\u025e\4\u025f\t\u025f\4\u0260\t\u0260\4\u0261\t\u0261\4\u0262"+
		"\t\u0262\4\u0263\t\u0263\4\u0264\t\u0264\4\u0265\t\u0265\4\u0266\t\u0266"+
		"\4\u0267\t\u0267\4\u0268\t\u0268\4\u0269\t\u0269\4\u026a\t\u026a\4\u026b"+
		"\t\u026b\4\u026c\t\u026c\4\u026d\t\u026d\4\u026e\t\u026e\4\u026f\t\u026f"+
		"\4\u0270\t\u0270\4\u0271\t\u0271\4\u0272\t\u0272\4\u0273\t\u0273\4\u0274"+
		"\t\u0274\4\u0275\t\u0275\4\u0276\t\u0276\4\u0277\t\u0277\4\u0278\t\u0278"+
		"\4\u0279\t\u0279\4\u027a\t\u027a\4\u027b\t\u027b\4\u027c\t\u027c\4\u027d"+
		"\t\u027d\4\u027e\t\u027e\4\u027f\t\u027f\4\u0280\t\u0280\4\u0281\t\u0281"+
		"\4\u0282\t\u0282\4\u0283\t\u0283\4\u0284\t\u0284\4\u0285\t\u0285\3\2\7"+
		"\2\u050c\n\2\f\2\16\2\u050f\13\2\3\2\5\2\u0512\n\2\3\3\5\3\u0515\n\3\3"+
		"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3"+
		"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3"+
		"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3"+
		"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\5\3\u055c"+
		"\n\3\3\3\3\3\3\3\5\3\u0561\n\3\3\3\5\3\u0564\n\3\3\4\3\4\3\4\3\4\5\4\u056a"+
		"\n\4\3\5\3\5\3\6\3\6\3\7\3\7\3\b\3\b\3\b\3\b\5\b\u0576\n\b\3\t\3\t\3\t"+
		"\3\t\3\t\3\t\3\t\3\t\5\t\u0580\n\t\5\t\u0582\n\t\3\n\3\n\3\n\3\n\3\n\3"+
		"\n\5\n\u058a\n\n\3\13\3\13\3\13\3\13\3\13\3\13\5\13\u0592\n\13\3\f\3\f"+
		"\3\f\3\f\3\f\3\f\3\f\3\f\3\r\3\r\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3"+
		"\16\3\16\3\16\6\16\u05a8\n\16\r\16\16\16\u05a9\3\17\3\17\3\17\3\17\3\17"+
		"\3\17\3\17\7\17\u05b3\n\17\f\17\16\17\u05b6\13\17\3\17\3\17\5\17\u05ba"+
		"\n\17\3\17\3\17\3\17\5\17\u05bf\n\17\3\17\5\17\u05c2\n\17\3\17\6\17\u05c5"+
		"\n\17\r\17\16\17\u05c6\3\20\3\20\3\20\3\20\5\20\u05cd\n\20\3\20\7\20\u05d0"+
		"\n\20\f\20\16\20\u05d3\13\20\3\20\3\20\3\20\7\20\u05d8\n\20\f\20\16\20"+
		"\u05db\13\20\5\20\u05dd\n\20\3\21\3\21\3\21\3\21\3\21\3\21\5\21\u05e5"+
		"\n\21\3\22\3\22\3\22\3\22\3\22\3\22\5\22\u05ed\n\22\3\23\3\23\3\23\3\23"+
		"\6\23\u05f3\n\23\r\23\16\23\u05f4\3\24\3\24\3\24\3\24\6\24\u05fb\n\24"+
		"\r\24\16\24\u05fc\3\25\3\25\3\25\3\25\6\25\u0603\n\25\r\25\16\25\u0604"+
		"\3\26\3\26\3\26\3\26\6\26\u060b\n\26\r\26\16\26\u060c\3\27\3\27\3\27\3"+
		"\27\3\27\5\27\u0614\n\27\3\27\3\27\7\27\u0618\n\27\f\27\16\27\u061b\13"+
		"\27\3\27\5\27\u061e\n\27\3\27\5\27\u0621\n\27\3\30\3\30\3\30\3\30\3\30"+
		"\3\30\3\30\5\30\u062a\n\30\3\30\3\30\3\31\3\31\3\31\3\31\3\31\6\31\u0633"+
		"\n\31\r\31\16\31\u0634\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\5\32\u063f"+
		"\n\32\3\33\3\33\3\33\5\33\u0644\n\33\3\33\3\33\3\33\3\33\3\33\7\33\u064b"+
		"\n\33\f\33\16\33\u064e\13\33\3\33\3\33\3\33\3\33\3\33\5\33\u0655\n\33"+
		"\3\34\3\34\3\34\3\34\3\35\3\35\3\35\5\35\u065e\n\35\3\35\3\35\3\35\3\35"+
		"\3\35\5\35\u0665\n\35\3\35\3\35\3\35\3\35\3\35\5\35\u066c\n\35\7\35\u066e"+
		"\n\35\f\35\16\35\u0671\13\35\3\35\3\35\3\35\5\35\u0676\n\35\3\35\3\35"+
		"\3\36\3\36\3\36\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37"+
		"\3\37\3\37\5\37\u068a\n\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37"+
		"\3\37\3\37\3\37\5\37\u0698\n\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37"+
		"\3\37\3\37\3\37\3\37\5\37\u06a6\n\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37"+
		"\3\37\3\37\3\37\3\37\5\37\u06b3\n\37\3\37\3\37\3\37\3\37\5\37\u06b9\n"+
		"\37\3 \3 \5 \u06bd\n \3!\3!\3!\3!\5!\u06c3\n!\3!\5!\u06c6\n!\3!\3!\5!"+
		"\u06ca\n!\3\"\3\"\5\"\u06ce\n\"\3\"\3\"\3\"\5\"\u06d3\n\"\3#\3#\3#\3#"+
		"\3#\3#\5#\u06db\n#\3#\3#\3#\3#\5#\u06e1\n#\3#\3#\3#\3#\3#\3$\3$\3$\3$"+
		"\7$\u06ec\n$\f$\16$\u06ef\13$\3%\3%\3%\3%\5%\u06f5\n%\3&\3&\3&\3&\3&\3"+
		"&\3&\7&\u06fe\n&\f&\16&\u0701\13&\5&\u0703\n&\3&\3&\6&\u0707\n&\r&\16"+
		"&\u0708\3\'\3\'\3\'\3\'\3\'\3\'\3\'\7\'\u0712\n\'\f\'\16\'\u0715\13\'"+
		"\5\'\u0717\n\'\3\'\3\'\6\'\u071b\n\'\r\'\16\'\u071c\3(\3(\3(\3(\3(\3("+
		"\3(\7(\u0726\n(\f(\16(\u0729\13(\5(\u072b\n(\3(\3(\6(\u072f\n(\r(\16("+
		"\u0730\3)\3)\3)\3)\3)\3)\3)\7)\u073a\n)\f)\16)\u073d\13)\5)\u073f\n)\3"+
		")\3)\6)\u0743\n)\r)\16)\u0744\3*\3*\3*\3*\3*\3*\3*\3*\3*\7*\u0750\n*\f"+
		"*\16*\u0753\13*\3*\3*\3*\3*\5*\u0759\n*\3*\5*\u075c\n*\3+\3+\3+\3+\3+"+
		"\5+\u0763\n+\5+\u0765\n+\3+\3+\3+\3+\3+\3+\3+\5+\u076e\n+\3+\5+\u0771"+
		"\n+\3+\3+\3+\5+\u0776\n+\3+\5+\u0779\n+\7+\u077b\n+\f+\16+\u077e\13+\3"+
		"+\3+\3+\3+\5+\u0784\n+\3+\3+\3+\5+\u0789\n+\3+\7+\u078c\n+\f+\16+\u078f"+
		"\13+\3,\3,\3,\3,\3,\7,\u0796\n,\f,\16,\u0799\13,\3-\3-\3-\3-\3-\3-\5-"+
		"\u07a1\n-\3-\5-\u07a4\n-\3-\3-\3-\3-\3-\3-\5-\u07ac\n-\3.\3.\3.\3.\3."+
		"\3.\5.\u07b4\n.\3.\5.\u07b7\n.\3.\3.\3.\3.\3.\3.\3.\3.\3.\5.\u07c2\n."+
		"\3/\3/\3/\5/\u07c7\n/\3/\3/\3/\3/\3/\3/\7/\u07cf\n/\f/\16/\u07d2\13/\3"+
		"/\3/\5/\u07d6\n/\3/\6/\u07d9\n/\r/\16/\u07da\3\60\3\60\3\60\3\60\3\61"+
		"\3\61\3\61\3\61\6\61\u07e5\n\61\r\61\16\61\u07e6\3\62\3\62\3\62\3\62\3"+
		"\62\3\62\3\62\3\62\5\62\u07f1\n\62\3\62\3\62\3\62\3\62\5\62\u07f7\n\62"+
		"\7\62\u07f9\n\62\f\62\16\62\u07fc\13\62\3\62\5\62\u07ff\n\62\3\62\3\62"+
		"\3\62\5\62\u0804\n\62\3\62\5\62\u0807\n\62\3\62\5\62\u080a\n\62\3\62\5"+
		"\62\u080d\n\62\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u0818"+
		"\n\63\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u0820\n\63\7\63\u0822\n\63\f"+
		"\63\16\63\u0825\13\63\3\63\3\63\3\63\3\63\3\63\5\63\u082c\n\63\3\63\3"+
		"\63\5\63\u0830\n\63\3\63\5\63\u0833\n\63\3\63\5\63\u0836\n\63\3\63\5\63"+
		"\u0839\n\63\3\63\5\63\u083c\n\63\3\63\5\63\u083f\n\63\3\63\5\63\u0842"+
		"\n\63\3\63\5\63\u0845\n\63\3\63\5\63\u0848\n\63\3\63\5\63\u084b\n\63\3"+
		"\63\5\63\u084e\n\63\3\63\5\63\u0851\n\63\3\63\5\63\u0854\n\63\3\63\5\63"+
		"\u0857\n\63\3\63\5\63\u085a\n\63\3\63\5\63\u085d\n\63\3\63\5\63\u0860"+
		"\n\63\3\63\5\63\u0863\n\63\3\63\5\63\u0866\n\63\3\63\5\63\u0869\n\63\3"+
		"\63\5\63\u086c\n\63\3\63\5\63\u086f\n\63\3\64\3\64\3\64\3\64\7\64\u0875"+
		"\n\64\f\64\16\64\u0878\13\64\3\65\3\65\3\65\3\65\3\65\3\66\3\66\3\66\3"+
		"\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\6\66\u088f"+
		"\n\66\r\66\16\66\u0890\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\5"+
		"\67\u089c\n\67\3\67\3\67\38\38\38\38\38\38\38\38\58\u08a8\n8\39\39\39"+
		"\39\39\59\u08af\n9\39\39\39\39\39\59\u08b6\n9\59\u08b8\n9\3:\3:\3:\3:"+
		"\3:\3:\3:\7:\u08c1\n:\f:\16:\u08c4\13:\3:\3:\3:\3:\3:\3:\7:\u08cc\n:\f"+
		":\16:\u08cf\13:\5:\u08d1\n:\3:\3:\5:\u08d5\n:\3;\3;\3;\3;\3;\3;\3;\3;"+
		"\5;\u08df\n;\3;\5;\u08e2\n;\3;\3;\3;\3;\7;\u08e8\n;\f;\16;\u08eb\13;\3"+
		";\3;\3;\5;\u08f0\n;\3<\3<\3<\3<\3<\3<\3<\3<\3<\7<\u08fb\n<\f<\16<\u08fe"+
		"\13<\3<\3<\3<\3<\5<\u0904\n<\3<\3<\3<\7<\u0909\n<\f<\16<\u090c\13<\3="+
		"\3=\3=\3=\3=\3=\3=\5=\u0915\n=\3=\3=\3=\3=\5=\u091b\n=\7=\u091d\n=\f="+
		"\16=\u0920\13=\3=\3=\3>\3>\3>\3>\7>\u0928\n>\f>\16>\u092b\13>\3>\3>\3"+
		"?\3?\3?\3?\7?\u0933\n?\f?\16?\u0936\13?\3?\3?\3?\3?\3?\3?\3?\5?\u093f"+
		"\n?\3@\3@\5@\u0943\n@\3A\3A\3A\3A\3A\5A\u094a\nA\3B\3B\3B\3B\5B\u0950"+
		"\nB\3B\3B\3B\3C\3C\3C\3C\3C\3C\3D\3D\5D\u095d\nD\3D\3D\3D\3D\5D\u0963"+
		"\nD\3E\3E\3E\3E\5E\u0969\nE\3E\3E\3E\3F\3F\3F\3F\3F\3F\5F\u0974\nF\3G"+
		"\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\5G\u098a\nG"+
		"\3H\3H\3H\3H\3I\3I\3I\3I\3I\3I\3I\3I\3J\3J\3J\3J\3J\5J\u099d\nJ\3J\3J"+
		"\3J\5J\u09a2\nJ\7J\u09a4\nJ\fJ\16J\u09a7\13J\3J\3J\3J\3J\5J\u09ad\nJ\3"+
		"K\3K\3K\3K\5K\u09b3\nK\3L\3L\3L\3L\3L\5L\u09ba\nL\3M\3M\5M\u09be\nM\3"+
		"M\3M\5M\u09c2\nM\3M\5M\u09c5\nM\3M\5M\u09c8\nM\3M\3M\3M\5M\u09cd\nM\3"+
		"N\3N\3N\3N\3N\7N\u09d4\nN\fN\16N\u09d7\13N\3O\3O\5O\u09db\nO\3O\3O\3O"+
		"\3O\5O\u09e1\nO\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\5P\u09ef\nP\3Q\3Q"+
		"\3Q\3Q\3Q\7Q\u09f6\nQ\fQ\16Q\u09f9\13Q\3R\3R\3R\3S\3S\3S\3S\3S\3S\3S\7"+
		"S\u0a05\nS\fS\16S\u0a08\13S\3S\3S\5S\u0a0c\nS\3S\5S\u0a0f\nS\3S\3S\3S"+
		"\5S\u0a14\nS\3S\3S\3S\3S\3S\3S\7S\u0a1c\nS\fS\16S\u0a1f\13S\3S\3S\5S\u0a23"+
		"\nS\3S\3S\3S\3S\7S\u0a29\nS\fS\16S\u0a2c\13S\5S\u0a2e\nS\3S\3S\5S\u0a32"+
		"\nS\3S\5S\u0a35\nS\3S\5S\u0a38\nS\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\5T"+
		"\u0a45\nT\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\7T\u0a54\nT\fT\16T\u0a57"+
		"\13T\3T\3T\5T\u0a5b\nT\3U\3U\3U\3U\3U\5U\u0a62\nU\3U\3U\3U\3U\3V\3V\3"+
		"V\3V\5V\u0a6c\nV\3V\5V\u0a6f\nV\3V\3V\7V\u0a73\nV\fV\16V\u0a76\13V\3V"+
		"\3V\7V\u0a7a\nV\fV\16V\u0a7d\13V\3V\5V\u0a80\nV\3V\3V\3V\3V\3V\3V\3V\5"+
		"V\u0a89\nV\6V\u0a8b\nV\rV\16V\u0a8c\3V\3V\5V\u0a91\nV\3V\5V\u0a94\nV\3"+
		"V\5V\u0a97\nV\3W\3W\3W\3W\3W\3W\7W\u0a9f\nW\fW\16W\u0aa2\13W\3W\3W\3W"+
		"\5W\u0aa7\nW\3X\3X\3X\3Y\3Y\5Y\u0aae\nY\3Z\3Z\3Z\3Z\3Z\3Z\7Z\u0ab6\nZ"+
		"\fZ\16Z\u0ab9\13Z\3Z\3Z\5Z\u0abd\nZ\3[\3[\3[\3[\3[\3[\3[\7[\u0ac6\n[\f"+
		"[\16[\u0ac9\13[\3[\5[\u0acc\n[\3[\3[\3[\3[\7[\u0ad2\n[\f[\16[\u0ad5\13"+
		"[\3[\5[\u0ad8\n[\3\\\3\\\3\\\3\\\7\\\u0ade\n\\\f\\\16\\\u0ae1\13\\\3\\"+
		"\3\\\3\\\3\\\3\\\7\\\u0ae8\n\\\f\\\16\\\u0aeb\13\\\3\\\3\\\3\\\3\\\7\\"+
		"\u0af1\n\\\f\\\16\\\u0af4\13\\\3\\\5\\\u0af7\n\\\3]\3]\3]\3]\3]\3]\3]"+
		"\7]\u0b00\n]\f]\16]\u0b03\13]\3]\3]\3]\3]\3]\3]\3]\7]\u0b0c\n]\f]\16]"+
		"\u0b0f\13]\3]\3]\3]\3]\7]\u0b15\n]\f]\16]\u0b18\13]\3]\5]\u0b1b\n]\5]"+
		"\u0b1d\n]\3]\3]\3]\3]\7]\u0b23\n]\f]\16]\u0b26\13]\3]\5]\u0b29\n]\3^\3"+
		"^\3^\3^\3^\7^\u0b30\n^\f^\16^\u0b33\13^\5^\u0b35\n^\3^\3^\3^\3^\3^\7^"+
		"\u0b3c\n^\f^\16^\u0b3f\13^\3^\3^\3^\3^\7^\u0b45\n^\f^\16^\u0b48\13^\3"+
		"^\5^\u0b4b\n^\3_\3_\3_\3_\7_\u0b51\n_\f_\16_\u0b54\13_\3_\3_\3_\3_\3_"+
		"\7_\u0b5b\n_\f_\16_\u0b5e\13_\3_\3_\3_\3_\7_\u0b64\n_\f_\16_\u0b67\13"+
		"_\3_\5_\u0b6a\n_\3`\3`\3`\3`\7`\u0b70\n`\f`\16`\u0b73\13`\3`\3`\3`\3`"+
		"\3`\3`\7`\u0b7b\n`\f`\16`\u0b7e\13`\5`\u0b80\n`\3`\3`\3`\3`\7`\u0b86\n"+
		"`\f`\16`\u0b89\13`\3`\5`\u0b8c\n`\3a\3a\3a\3a\7a\u0b92\na\fa\16a\u0b95"+
		"\13a\3a\3a\3a\3a\3a\7a\u0b9c\na\fa\16a\u0b9f\13a\3a\3a\3a\3a\7a\u0ba5"+
		"\na\fa\16a\u0ba8\13a\3a\5a\u0bab\na\3b\3b\3b\3b\7b\u0bb1\nb\fb\16b\u0bb4"+
		"\13b\3b\3b\5b\u0bb8\nb\3b\3b\3b\3b\7b\u0bbe\nb\fb\16b\u0bc1\13b\3b\5b"+
		"\u0bc4\nb\3c\3c\3c\3c\7c\u0bca\nc\fc\16c\u0bcd\13c\3c\3c\5c\u0bd1\nc\3"+
		"c\3c\3c\3c\3c\7c\u0bd8\nc\fc\16c\u0bdb\13c\3c\5c\u0bde\nc\3d\3d\3d\3d"+
		"\5d\u0be4\nd\3d\3d\3d\3d\7d\u0bea\nd\fd\16d\u0bed\13d\3d\3d\3d\3d\7d\u0bf3"+
		"\nd\fd\16d\u0bf6\13d\5d\u0bf8\nd\3d\3d\3d\3d\7d\u0bfe\nd\fd\16d\u0c01"+
		"\13d\3d\5d\u0c04\nd\3e\3e\3e\3e\7e\u0c0a\ne\fe\16e\u0c0d\13e\3e\3e\3e"+
		"\3e\3e\7e\u0c14\ne\fe\16e\u0c17\13e\3e\3e\3e\3e\7e\u0c1d\ne\fe\16e\u0c20"+
		"\13e\3e\5e\u0c23\ne\3f\3f\3f\3f\3f\3f\3f\3f\7f\u0c2d\nf\ff\16f\u0c30\13"+
		"f\3f\5f\u0c33\nf\3g\3g\3g\3g\7g\u0c39\ng\fg\16g\u0c3c\13g\3g\3g\3g\3g"+
		"\3g\3g\7g\u0c44\ng\fg\16g\u0c47\13g\3g\3g\3g\3g\5g\u0c4d\ng\3g\3g\3g\3"+
		"g\3g\5g\u0c54\ng\3g\7g\u0c57\ng\fg\16g\u0c5a\13g\5g\u0c5c\ng\3h\3h\5h"+
		"\u0c60\nh\3h\3h\5h\u0c64\nh\3i\3i\5i\u0c68\ni\3i\3i\3i\3i\3i\3i\3i\3i"+
		"\3i\7i\u0c73\ni\fi\16i\u0c76\13i\3i\3i\5i\u0c7a\ni\3i\3i\3i\3i\3i\3i\3"+
		"i\3i\7i\u0c84\ni\fi\16i\u0c87\13i\3i\3i\5i\u0c8b\ni\5i\u0c8d\ni\3j\3j"+
		"\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\5j\u0c9e\nj\3j\3j\5j\u0ca2\nj"+
		"\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\5j\u0cb1\nj\3k\3k\3l\3l\3m\3m"+
		"\3n\3n\3o\3o\3o\3o\5o\u0cbf\no\3p\3p\3p\3p\3p\7p\u0cc6\np\fp\16p\u0cc9"+
		"\13p\3p\3p\5p\u0ccd\np\3q\3q\3q\3q\5q\u0cd3\nq\3r\3r\3r\3r\3s\3s\3t\3"+
		"t\3t\7t\u0cde\nt\ft\16t\u0ce1\13t\3t\3t\3t\3t\3t\3t\3t\3t\5t\u0ceb\nt"+
		"\3u\3u\3u\3u\3v\3v\3w\3w\3w\5w\u0cf6\nw\3w\3w\3w\7w\u0cfb\nw\fw\16w\u0cfe"+
		"\13w\3x\3x\3x\3x\5x\u0d04\nx\3y\3y\3z\3z\3{\3{\3{\3{\3{\3{\7{\u0d10\n"+
		"{\f{\16{\u0d13\13{\3|\3|\3|\3|\5|\u0d19\n|\5|\u0d1b\n|\3}\3}\3}\3}\5}"+
		"\u0d21\n}\3~\3~\3~\3~\3~\3~\5~\u0d29\n~\3~\3~\3~\5~\u0d2e\n~\3~\3~\3~"+
		"\5~\u0d33\n~\5~\u0d35\n~\3\177\3\177\3\177\3\177\3\177\3\177\3\177\3\177"+
		"\3\177\3\177\3\177\3\177\3\177\3\177\3\177\3\177\5\177\u0d47\n\177\5\177"+
		"\u0d49\n\177\3\u0080\3\u0080\3\u0080\3\u0080\7\u0080\u0d4f\n\u0080\f\u0080"+
		"\16\u0080\u0d52\13\u0080\3\u0080\5\u0080\u0d55\n\u0080\3\u0080\3\u0080"+
		"\3\u0080\5\u0080\u0d5a\n\u0080\3\u0081\3\u0081\5\u0081\u0d5e\n\u0081\3"+
		"\u0082\5\u0082\u0d61\n\u0082\3\u0082\3\u0082\3\u0082\5\u0082\u0d66\n\u0082"+
		"\3\u0082\3\u0082\3\u0082\5\u0082\u0d6b\n\u0082\3\u0083\3\u0083\3\u0083"+
		"\5\u0083\u0d70\n\u0083\3\u0083\3\u0083\3\u0084\3\u0084\3\u0084\3\u0084"+
		"\7\u0084\u0d78\n\u0084\f\u0084\16\u0084\u0d7b\13\u0084\3\u0084\3\u0084"+
		"\3\u0084\5\u0084\u0d80\n\u0084\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085"+
		"\5\u0085\u0d87\n\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085"+
		"\5\u0085\u0d8f\n\u0085\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086\5\u0086"+
		"\u0d96\n\u0086\3\u0086\3\u0086\3\u0086\5\u0086\u0d9b\n\u0086\5\u0086\u0d9d"+
		"\n\u0086\3\u0087\3\u0087\3\u0087\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088"+
		"\3\u0088\5\u0088\u0da8\n\u0088\3\u0088\3\u0088\5\u0088\u0dac\n\u0088\3"+
		"\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\5\u0089\u0db4\n\u0089\3"+
		"\u0089\3\u0089\5\u0089\u0db8\n\u0089\3\u008a\3\u008a\5\u008a\u0dbc\n\u008a"+
		"\3\u008b\3\u008b\5\u008b\u0dc0\n\u008b\3\u008c\3\u008c\5\u008c\u0dc4\n"+
		"\u008c\3\u008d\3\u008d\3\u008d\3\u008d\7\u008d\u0dca\n\u008d\f\u008d\16"+
		"\u008d\u0dcd\13\u008d\3\u008d\3\u008d\3\u008d\5\u008d\u0dd2\n\u008d\3"+
		"\u008d\3\u008d\3\u008d\5\u008d\u0dd7\n\u008d\3\u008d\5\u008d\u0dda\n\u008d"+
		"\3\u008e\5\u008e\u0ddd\n\u008e\3\u008e\3\u008e\3\u008e\3\u008e\5\u008e"+
		"\u0de3\n\u008e\3\u008f\3\u008f\3\u008f\3\u0090\3\u0090\3\u0090\3\u0090"+
		"\3\u0090\3\u0090\7\u0090\u0dee\n\u0090\f\u0090\16\u0090\u0df1\13\u0090"+
		"\3\u0090\3\u0090\5\u0090\u0df5\n\u0090\3\u0090\5\u0090\u0df8\n\u0090\3"+
		"\u0090\3\u0090\3\u0090\3\u0090\5\u0090\u0dfe\n\u0090\5\u0090\u0e00\n\u0090"+
		"\3\u0091\3\u0091\3\u0091\3\u0092\3\u0092\3\u0092\3\u0093\3\u0093\3\u0093"+
		"\3\u0094\3\u0094\3\u0094\3\u0095\3\u0095\3\u0095\5\u0095\u0e11\n\u0095"+
		"\3\u0096\3\u0096\3\u0096\5\u0096\u0e16\n\u0096\3\u0097\3\u0097\3\u0097"+
		"\5\u0097\u0e1b\n\u0097\3\u0098\3\u0098\3\u0098\3\u0099\3\u0099\3\u0099"+
		"\3\u009a\3\u009a\3\u009a\3\u009b\3\u009b\3\u009b\3\u009b\5\u009b\u0e2a"+
		"\n\u009b\3\u009b\3\u009b\3\u009c\3\u009c\3\u009c\3\u009d\3\u009d\3\u009d"+
		"\3\u009d\3\u009e\3\u009e\3\u009e\5\u009e\u0e38\n\u009e\3\u009f\3\u009f"+
		"\3\u009f\5\u009f\u0e3d\n\u009f\3\u00a0\3\u00a0\3\u00a0\3\u00a1\3\u00a1"+
		"\3\u00a1\3\u00a1\5\u00a1\u0e46\n\u00a1\3\u00a1\5\u00a1\u0e49\n\u00a1\3"+
		"\u00a2\3\u00a2\3\u00a2\3\u00a3\3\u00a3\3\u00a3\5\u00a3\u0e51\n\u00a3\3"+
		"\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\5\u00a4"+
		"\u0e5b\n\u00a4\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5"+
		"\5\u00a5\u0e64\n\u00a5\5\u00a5\u0e66\n\u00a5\3\u00a6\3\u00a6\5\u00a6\u0e6a"+
		"\n\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7"+
		"\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7"+
		"\3\u00a7\3\u00a7\3\u00a7\3\u00a7\5\u00a7\u0e81\n\u00a7\5\u00a7\u0e83\n"+
		"\u00a7\3\u00a8\3\u00a8\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9"+
		"\3\u00a9\3\u00a9\5\u00a9\u0e8f\n\u00a9\3\u00aa\3\u00aa\3\u00aa\3\u00aa"+
		"\3\u00aa\7\u00aa\u0e96\n\u00aa\f\u00aa\16\u00aa\u0e99\13\u00aa\3\u00aa"+
		"\3\u00aa\3\u00aa\7\u00aa\u0e9e\n\u00aa\f\u00aa\16\u00aa\u0ea1\13\u00aa"+
		"\5\u00aa\u0ea3\n\u00aa\3\u00aa\3\u00aa\3\u00ab\3\u00ab\3\u00ab\3\u00ab"+
		"\3\u00ab\3\u00ab\7\u00ab\u0ead\n\u00ab\f\u00ab\16\u00ab\u0eb0\13\u00ab"+
		"\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\5\u00ac\u0eb8\n\u00ac"+
		"\3\u00ad\3\u00ad\3\u00ad\3\u00ae\3\u00ae\7\u00ae\u0ebf\n\u00ae\f\u00ae"+
		"\16\u00ae\u0ec2\13\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\7\u00ae"+
		"\u0ec9\n\u00ae\f\u00ae\16\u00ae\u0ecc\13\u00ae\3\u00ae\3\u00ae\3\u00ae"+
		"\5\u00ae\u0ed1\n\u00ae\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af"+
		"\3\u00af\5\u00af\u0eda\n\u00af\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0"+
		"\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\5\u00b0"+
		"\u0ee9\n\u00b0\3\u00b0\5\u00b0\u0eec\n\u00b0\3\u00b0\6\u00b0\u0eef\n\u00b0"+
		"\r\u00b0\16\u00b0\u0ef0\5\u00b0\u0ef3\n\u00b0\3\u00b0\3\u00b0\3\u00b0"+
		"\3\u00b0\5\u00b0\u0ef9\n\u00b0\3\u00b0\3\u00b0\3\u00b1\3\u00b1\3\u00b1"+
		"\3\u00b1\3\u00b1\3\u00b1\5\u00b1\u0f03\n\u00b1\3\u00b2\3\u00b2\3\u00b2"+
		"\3\u00b2\3\u00b2\3\u00b2\3\u00b2\7\u00b2\u0f0c\n\u00b2\f\u00b2\16\u00b2"+
		"\u0f0f\13\u00b2\5\u00b2\u0f11\n\u00b2\5\u00b2\u0f13\n\u00b2\3\u00b3\3"+
		"\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\5\u00b3\u0f1b\n\u00b3\3\u00b4\3"+
		"\u00b4\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u0f22\n\u00b4\3\u00b4\3\u00b4\3"+
		"\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\6\u00b5\u0f2c\n\u00b5\r"+
		"\u00b5\16\u00b5\u0f2d\3\u00b5\3\u00b5\5\u00b5\u0f32\n\u00b5\3\u00b6\3"+
		"\u00b6\3\u00b6\5\u00b6\u0f37\n\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3"+
		"\u00b6\3\u00b6\3\u00b6\5\u00b6\u0f40\n\u00b6\3\u00b7\3\u00b7\3\u00b7\5"+
		"\u00b7\u0f45\n\u00b7\3\u00b8\3\u00b8\5\u00b8\u0f49\n\u00b8\3\u00b8\3\u00b8"+
		"\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\5\u00b8\u0f52\n\u00b8\3\u00b9"+
		"\3\u00b9\5\u00b9\u0f56\n\u00b9\3\u00b9\3\u00b9\5\u00b9\u0f5a\n\u00b9\3"+
		"\u00b9\5\u00b9\u0f5d\n\u00b9\3\u00b9\5\u00b9\u0f60\n\u00b9\3\u00b9\5\u00b9"+
		"\u0f63\n\u00b9\3\u00b9\5\u00b9\u0f66\n\u00b9\3\u00b9\5\u00b9\u0f69\n\u00b9"+
		"\3\u00b9\5\u00b9\u0f6c\n\u00b9\3\u00b9\5\u00b9\u0f6f\n\u00b9\3\u00ba\3"+
		"\u00ba\3\u00ba\3\u00ba\3\u00ba\5\u00ba\u0f76\n\u00ba\3\u00bb\3\u00bb\3"+
		"\u00bb\5\u00bb\u0f7b\n\u00bb\3\u00bc\3\u00bc\3\u00bc\3\u00bd\3\u00bd\3"+
		"\u00bd\3\u00be\3\u00be\3\u00be\3\u00be\3\u00bf\3\u00bf\3\u00bf\3\u00bf"+
		"\3\u00bf\3\u00c0\3\u00c0\3\u00c0\3\u00c1\3\u00c1\3\u00c1\3\u00c2\5\u00c2"+
		"\u0f93\n\u00c2\3\u00c2\3\u00c2\5\u00c2\u0f97\n\u00c2\3\u00c3\3\u00c3\3"+
		"\u00c3\3\u00c4\3\u00c4\3\u00c4\3\u00c5\3\u00c5\3\u00c5\3\u00c6\3\u00c6"+
		"\3\u00c6\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\7\u00c7\u0fab"+
		"\n\u00c7\f\u00c7\16\u00c7\u0fae\13\u00c7\3\u00c7\3\u00c7\3\u00c8\3\u00c8"+
		"\3\u00c8\3\u00c8\3\u00c9\3\u00c9\3\u00c9\3\u00ca\3\u00ca\3\u00ca\3\u00ca"+
		"\3\u00cb\3\u00cb\3\u00cb\3\u00cb\6\u00cb\u0fc1\n\u00cb\r\u00cb\16\u00cb"+
		"\u0fc2\3\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u0fc9\n\u00cc\3\u00cd\3"+
		"\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\5\u00cd\u0fd1\n\u00cd\3\u00ce\3"+
		"\u00ce\5\u00ce\u0fd5\n\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\5\u00ce\u0fdb"+
		"\n\u00ce\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00d0\3\u00d0\3\u00d0"+
		"\3\u00d0\7\u00d0\u0fe6\n\u00d0\f\u00d0\16\u00d0\u0fe9\13\u00d0\5\u00d0"+
		"\u0feb\n\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0"+
		"\3\u00d0\3\u00d0\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1"+
		"\3\u00d1\3\u00d2\3\u00d2\3\u00d2\3\u00d2\7\u00d2\u1002\n\u00d2\f\u00d2"+
		"\16\u00d2\u1005\13\u00d2\3\u00d2\3\u00d2\5\u00d2\u1009\n\u00d2\3\u00d2"+
		"\3\u00d2\3\u00d2\3\u00d3\3\u00d3\5\u00d3\u1010\n\u00d3\3\u00d3\3\u00d3"+
		"\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\5\u00d3\u101b"+
		"\n\u00d3\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4"+
		"\7\u00d4\u1025\n\u00d4\f\u00d4\16\u00d4\u1028\13\u00d4\3\u00d4\3\u00d4"+
		"\3\u00d4\3\u00d4\5\u00d4\u102e\n\u00d4\3\u00d5\3\u00d5\3\u00d5\3\u00d5"+
		"\5\u00d5\u1034\n\u00d5\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6"+
		"\7\u00d6\u103c\n\u00d6\f\u00d6\16\u00d6\u103f\13\u00d6\3\u00d7\5\u00d7"+
		"\u1042\n\u00d7\3\u00d7\3\u00d7\3\u00d7\5\u00d7\u1047\n\u00d7\3\u00d7\3"+
		"\u00d7\3\u00d7\3\u00d7\3\u00d7\5\u00d7\u104e\n\u00d7\5\u00d7\u1050\n\u00d7"+
		"\3\u00d8\3\u00d8\3\u00d8\3\u00d9\5\u00d9\u1056\n\u00d9\3\u00d9\5\u00d9"+
		"\u1059\n\u00d9\3\u00d9\3\u00d9\3\u00d9\5\u00d9\u105e\n\u00d9\3\u00da\3"+
		"\u00da\3\u00da\3\u00da\5\u00da\u1064\n\u00da\3\u00da\3\u00da\3\u00da\3"+
		"\u00da\3\u00da\3\u00da\5\u00da\u106c\n\u00da\5\u00da\u106e\n\u00da\3\u00da"+
		"\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da"+
		"\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da"+
		"\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\5\u00da"+
		"\u108b\n\u00da\3\u00db\3\u00db\3\u00db\3\u00db\5\u00db\u1091\n\u00db\5"+
		"\u00db\u1093\n\u00db\3\u00dc\3\u00dc\3\u00dc\3\u00dc\5\u00dc\u1099\n\u00dc"+
		"\3\u00dd\5\u00dd\u109c\n\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00de"+
		"\3\u00de\3\u00de\3\u00df\3\u00df\3\u00df\3\u00e0\3\u00e0\3\u00e0\3\u00e1"+
		"\3\u00e1\3\u00e1\3\u00e2\3\u00e2\3\u00e2\3\u00e3\3\u00e3\3\u00e3\3\u00e3"+
		"\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5"+
		"\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\5\u00e5\u10c5"+
		"\n\u00e5\3\u00e5\3\u00e5\3\u00e5\5\u00e5\u10ca\n\u00e5\3\u00e6\5\u00e6"+
		"\u10cd\n\u00e6\3\u00e6\3\u00e6\5\u00e6\u10d1\n\u00e6\3\u00e6\5\u00e6\u10d4"+
		"\n\u00e6\3\u00e7\3\u00e7\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8"+
		"\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\5\u00e8\u10e3\n\u00e8\3\u00e9"+
		"\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\5\u00e9\u10eb\n\u00e9\3\u00ea"+
		"\3\u00ea\3\u00ea\3\u00ea\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\5\u00eb"+
		"\u10f6\n\u00eb\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec"+
		"\5\u00ec\u10ff\n\u00ec\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed"+
		"\3\u00ed\3\u00ed\3\u00ed\3\u00ed\5\u00ed\u110b\n\u00ed\3\u00ee\5\u00ee"+
		"\u110e\n\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ef\3\u00ef\3\u00ef\3\u00ef"+
		"\3\u00ef\3\u00ef\5\u00ef\u1119\n\u00ef\3\u00f0\3\u00f0\3\u00f0\3\u00f0"+
		"\5\u00f0\u111f\n\u00f0\3\u00f1\5\u00f1\u1122\n\u00f1\3\u00f1\3\u00f1\3"+
		"\u00f1\3\u00f2\3\u00f2\3\u00f2\3\u00f3\3\u00f3\3\u00f3\3\u00f4\5\u00f4"+
		"\u112e\n\u00f4\3\u00f4\3\u00f4\3\u00f5\3\u00f5\3\u00f5\3\u00f6\3\u00f6"+
		"\3\u00f6\3\u00f6\5\u00f6\u1139\n\u00f6\3\u00f7\3\u00f7\3\u00f7\3\u00f7"+
		"\3\u00f7\3\u00f7\3\u00f7\5\u00f7\u1142\n\u00f7\3\u00f8\3\u00f8\3\u00f8"+
		"\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\5\u00f8\u114d\n\u00f8"+
		"\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\5\u00f9\u1154\n\u00f9\3\u00fa"+
		"\3\u00fa\3\u00fa\3\u00fa\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fc\3\u00fc"+
		"\3\u00fc\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd"+
		"\3\u00fd\3\u00fd\3\u00fd\3\u00fd\5\u00fd\u116d\n\u00fd\3\u00fe\3\u00fe"+
		"\3\u00fe\3\u00fe\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u0100\3\u0100"+
		"\3\u0100\3\u0100\3\u0101\3\u0101\3\u0101\3\u0102\5\u0102\u1180\n\u0102"+
		"\3\u0102\3\u0102\3\u0103\3\u0103\5\u0103\u1186\n\u0103\3\u0104\3\u0104"+
		"\3\u0104\3\u0105\3\u0105\3\u0105\3\u0105\6\u0105\u118f\n\u0105\r\u0105"+
		"\16\u0105\u1190\3\u0106\3\u0106\3\u0106\3\u0107\3\u0107\3\u0107\3\u0107"+
		"\3\u0107\3\u0107\3\u0107\5\u0107\u119d\n\u0107\3\u0107\3\u0107\3\u0107"+
		"\3\u0107\3\u0107\5\u0107\u11a4\n\u0107\7\u0107\u11a6\n\u0107\f\u0107\16"+
		"\u0107\u11a9\13\u0107\3\u0107\3\u0107\3\u0107\3\u0107\5\u0107\u11af\n"+
		"\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107"+
		"\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107"+
		"\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107"+
		"\3\u0107\5\u0107\u11cc\n\u0107\3\u0108\3\u0108\3\u0108\3\u0108\5\u0108"+
		"\u11d2\n\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108"+
		"\3\u0108\7\u0108\u11dc\n\u0108\f\u0108\16\u0108\u11df\13\u0108\3\u0108"+
		"\3\u0108\3\u0108\5\u0108\u11e4\n\u0108\5\u0108\u11e6\n\u0108\3\u0109\3"+
		"\u0109\3\u0109\5\u0109\u11eb\n\u0109\3\u0109\3\u0109\3\u0109\3\u0109\5"+
		"\u0109\u11f1\n\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3"+
		"\u0109\3\u0109\5\u0109\u11fb\n\u0109\3\u010a\3\u010a\3\u010a\3\u010a\3"+
		"\u010a\3\u010b\3\u010b\3\u010b\5\u010b\u1205\n\u010b\3\u010b\3\u010b\3"+
		"\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010d\3\u010d\3\u010d\3\u010d"+
		"\5\u010d\u1212\n\u010d\3\u010d\5\u010d\u1215\n\u010d\3\u010d\5\u010d\u1218"+
		"\n\u010d\3\u010d\5\u010d\u121b\n\u010d\3\u010d\3\u010d\5\u010d\u121f\n"+
		"\u010d\3\u010d\3\u010d\3\u010d\3\u010d\5\u010d\u1225\n\u010d\3\u010d\3"+
		"\u010d\7\u010d\u1229\n\u010d\f\u010d\16\u010d\u122c\13\u010d\3\u010d\5"+
		"\u010d\u122f\n\u010d\3\u010e\3\u010e\3\u010e\3\u010e\5\u010e\u1235\n\u010e"+
		"\3\u010e\5\u010e\u1238\n\u010e\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e"+
		"\3\u010e\3\u010e\3\u010e\5\u010e\u1242\n\u010e\3\u010e\3\u010e\5\u010e"+
		"\u1246\n\u010e\3\u010f\3\u010f\3\u010f\5\u010f\u124b\n\u010f\3\u010f\5"+
		"\u010f\u124e\n\u010f\3\u010f\5\u010f\u1251\n\u010f\3\u010f\5\u010f\u1254"+
		"\n\u010f\3\u010f\3\u010f\3\u010f\3\u010f\5\u010f\u125a\n\u010f\3\u010f"+
		"\3\u010f\7\u010f\u125e\n\u010f\f\u010f\16\u010f\u1261\13\u010f\3\u010f"+
		"\5\u010f\u1264\n\u010f\3\u0110\3\u0110\3\u0110\5\u0110\u1269\n\u0110\3"+
		"\u0110\5\u0110\u126c\n\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3"+
		"\u0110\3\u0110\3\u0110\3\u0110\3\u0110\5\u0110\u1278\n\u0110\3\u0110\3"+
		"\u0110\5\u0110\u127c\n\u0110\3\u0111\3\u0111\3\u0111\3\u0111\5\u0111\u1282"+
		"\n\u0111\3\u0111\3\u0111\5\u0111\u1286\n\u0111\3\u0111\3\u0111\3\u0111"+
		"\3\u0111\3\u0111\7\u0111\u128d\n\u0111\f\u0111\16\u0111\u1290\13\u0111"+
		"\3\u0111\3\u0111\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\7\u0112\u1299"+
		"\n\u0112\f\u0112\16\u0112\u129c\13\u0112\3\u0112\3\u0112\5\u0112\u12a0"+
		"\n\u0112\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\7\u0113\u12a7\n\u0113"+
		"\f\u0113\16\u0113\u12aa\13\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113"+
		"\5\u0113\u12b1\n\u0113\3\u0113\3\u0113\5\u0113\u12b5\n\u0113\3\u0114\5"+
		"\u0114\u12b8\n\u0114\3\u0114\3\u0114\3\u0114\5\u0114\u12bd\n\u0114\3\u0115"+
		"\3\u0115\3\u0115\5\u0115\u12c2\n\u0115\3\u0116\3\u0116\3\u0116\3\u0116"+
		"\5\u0116\u12c8\n\u0116\3\u0116\3\u0116\5\u0116\u12cc\n\u0116\3\u0116\3"+
		"\u0116\3\u0116\3\u0116\3\u0116\5\u0116\u12d3\n\u0116\3\u0116\3\u0116\3"+
		"\u0116\7\u0116\u12d8\n\u0116\f\u0116\16\u0116\u12db\13\u0116\3\u0116\3"+
		"\u0116\3\u0116\5\u0116\u12e0\n\u0116\3\u0116\3\u0116\3\u0116\5\u0116\u12e5"+
		"\n\u0116\7\u0116\u12e7\n\u0116\f\u0116\16\u0116\u12ea\13\u0116\3\u0116"+
		"\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\7\u0116\u12f2\n\u0116\f\u0116"+
		"\16\u0116\u12f5\13\u0116\3\u0116\5\u0116\u12f8\n\u0116\3\u0116\3\u0116"+
		"\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\7\u0116\u1302\n\u0116"+
		"\f\u0116\16\u0116\u1305\13\u0116\3\u0116\3\u0116\5\u0116\u1309\n\u0116"+
		"\3\u0116\3\u0116\5\u0116\u130d\n\u0116\3\u0117\3\u0117\3\u0117\3\u0117"+
		"\3\u0117\3\u0117\3\u0117\3\u0117\7\u0117\u1317\n\u0117\f\u0117\16\u0117"+
		"\u131a\13\u0117\3\u0117\3\u0117\3\u0117\3\u0117\7\u0117\u1320\n\u0117"+
		"\f\u0117\16\u0117\u1323\13\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117"+
		"\3\u0117\7\u0117\u132b\n\u0117\f\u0117\16\u0117\u132e\13\u0117\3\u0117"+
		"\5\u0117\u1331\n\u0117\3\u0117\3\u0117\5\u0117\u1335\n\u0117\3\u0118\3"+
		"\u0118\3\u0118\3\u0118\3\u0118\7\u0118\u133c\n\u0118\f\u0118\16\u0118"+
		"\u133f\13\u0118\3\u0119\3\u0119\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a"+
		"\7\u011a\u1348\n\u011a\f\u011a\16\u011a\u134b\13\u011a\3\u011a\3\u011a"+
		"\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\7\u011a\u1354\n\u011a\f\u011a"+
		"\16\u011a\u1357\13\u011a\3\u011a\3\u011a\5\u011a\u135b\n\u011a\3\u011b"+
		"\3\u011b\3\u011b\5\u011b\u1360\n\u011b\3\u011b\3\u011b\5\u011b\u1364\n"+
		"\u011b\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\7\u011c"+
		"\u136d\n\u011c\f\u011c\16\u011c\u1370\13\u011c\3\u011c\3\u011c\3\u011c"+
		"\5\u011c\u1375\n\u011c\3\u011d\3\u011d\3\u011d\3\u011d\7\u011d\u137b\n"+
		"\u011d\f\u011d\16\u011d\u137e\13\u011d\3\u011d\3\u011d\5\u011d\u1382\n"+
		"\u011d\3\u011e\3\u011e\3\u011e\3\u011e\5\u011e\u1388\n\u011e\3\u011f\3"+
		"\u011f\5\u011f\u138c\n\u011f\3\u0120\3\u0120\3\u0120\5\u0120\u1391\n\u0120"+
		"\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\7\u0121"+
		"\u139b\n\u0121\f\u0121\16\u0121\u139e\13\u0121\3\u0121\3\u0121\3\u0122"+
		"\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\7\u0122\u13a8\n\u0122\f\u0122"+
		"\16\u0122\u13ab\13\u0122\3\u0122\3\u0122\5\u0122\u13af\n\u0122\3\u0122"+
		"\3\u0122\3\u0122\5\u0122\u13b4\n\u0122\3\u0122\5\u0122\u13b7\n\u0122\3"+
		"\u0122\3\u0122\5\u0122\u13bb\n\u0122\3\u0123\3\u0123\3\u0123\3\u0123\3"+
		"\u0123\5\u0123\u13c2\n\u0123\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124\3"+
		"\u0124\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124"+
		"\3\u0124\3\u0124\5\u0124\u13d4\n\u0124\3\u0124\3\u0124\3\u0124\3\u0124"+
		"\3\u0124\3\u0124\3\u0124\3\u0124\5\u0124\u13de\n\u0124\5\u0124\u13e0\n"+
		"\u0124\3\u0125\3\u0125\3\u0125\3\u0126\3\u0126\3\u0126\3\u0127\3\u0127"+
		"\3\u0127\3\u0128\3\u0128\3\u0128\3\u0129\3\u0129\3\u0129\3\u012a\5\u012a"+
		"\u13f2\n\u012a\3\u012a\3\u012a\3\u012b\5\u012b\u13f7\n\u012b\3\u012b\3"+
		"\u012b\3\u012c\3\u012c\3\u012c\5\u012c\u13fe\n\u012c\3\u012c\5\u012c\u1401"+
		"\n\u012c\3\u012d\3\u012d\3\u012d\3\u012e\3\u012e\3\u012e\3\u012f\3\u012f"+
		"\3\u012f\3\u0130\3\u0130\3\u0131\5\u0131\u140f\n\u0131\3\u0131\3\u0131"+
		"\3\u0131\3\u0131\3\u0131\5\u0131\u1416\n\u0131\3\u0132\3\u0132\3\u0132"+
		"\3\u0132\3\u0132\3\u0132\3\u0133\3\u0133\3\u0133\6\u0133\u1421\n\u0133"+
		"\r\u0133\16\u0133\u1422\3\u0133\6\u0133\u1426\n\u0133\r\u0133\16\u0133"+
		"\u1427\3\u0133\3\u0133\7\u0133\u142c\n\u0133\f\u0133\16\u0133\u142f\13"+
		"\u0133\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\5\u0134\u1436\n\u0134\3"+
		"\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\5\u0134\u143e\n\u0134\3"+
		"\u0135\3\u0135\3\u0135\3\u0135\5\u0135\u1444\n\u0135\3\u0136\3\u0136\3"+
		"\u0136\3\u0137\3\u0137\3\u0137\3\u0137\5\u0137\u144d\n\u0137\3\u0137\3"+
		"\u0137\3\u0137\3\u0137\5\u0137\u1453\n\u0137\3\u0137\3\u0137\3\u0137\3"+
		"\u0137\5\u0137\u1459\n\u0137\7\u0137\u145b\n\u0137\f\u0137\16\u0137\u145e"+
		"\13\u0137\3\u0137\3\u0137\5\u0137\u1462\n\u0137\5\u0137\u1464\n\u0137"+
		"\3\u0138\3\u0138\3\u0139\3\u0139\3\u013a\3\u013a\3\u013a\5\u013a\u146d"+
		"\n\u013a\3\u013b\3\u013b\5\u013b\u1471\n\u013b\3\u013c\3\u013c\3\u013c"+
		"\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\5\u013c\u147b\n\u013c\3\u013c"+
		"\3\u013c\3\u013c\3\u013c\5\u013c\u1481\n\u013c\3\u013c\3\u013c\3\u013c"+
		"\3\u013c\5\u013c\u1487\n\u013c\3\u013c\3\u013c\3\u013c\5\u013c\u148c\n"+
		"\u013c\3\u013c\3\u013c\5\u013c\u1490\n\u013c\3\u013c\5\u013c\u1493\n\u013c"+
		"\3\u013c\3\u013c\3\u013c\5\u013c\u1498\n\u013c\3\u013c\5\u013c\u149b\n"+
		"\u013c\3\u013c\5\u013c\u149e\n\u013c\3\u013c\3\u013c\3\u013c\3\u013c\5"+
		"\u013c\u14a4\n\u013c\3\u013c\3\u013c\3\u013c\5\u013c\u14a9\n\u013c\3\u013c"+
		"\5\u013c\u14ac\n\u013c\3\u013c\5\u013c\u14af\n\u013c\3\u013c\3\u013c\3"+
		"\u013c\3\u013c\5\u013c\u14b5\n\u013c\3\u013c\5\u013c\u14b8\n\u013c\3\u013c"+
		"\3\u013c\3\u013c\3\u013c\5\u013c\u14be\n\u013c\3\u013c\3\u013c\5\u013c"+
		"\u14c2\n\u013c\3\u013c\5\u013c\u14c5\n\u013c\3\u013c\3\u013c\3\u013c\5"+
		"\u013c\u14ca\n\u013c\3\u013c\3\u013c\3\u013c\3\u013c\5\u013c\u14d0\n\u013c"+
		"\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\5\u013c\u14d7\n\u013c\3\u013c"+
		"\3\u013c\3\u013c\3\u013c\5\u013c\u14dd\n\u013c\3\u013c\3\u013c\3\u013c"+
		"\3\u013c\3\u013c\5\u013c\u14e4\n\u013c\3\u013d\3\u013d\3\u013d\3\u013d"+
		"\3\u013d\3\u013d\3\u013d\3\u013d\5\u013d\u14ee\n\u013d\3\u013d\3\u013d"+
		"\3\u013d\3\u013d\5\u013d\u14f4\n\u013d\3\u013d\3\u013d\3\u013d\3\u013d"+
		"\5\u013d\u14fa\n\u013d\3\u013d\3\u013d\3\u013d\5\u013d\u14ff\n\u013d\3"+
		"\u013d\3\u013d\5\u013d\u1503\n\u013d\3\u013d\5\u013d\u1506\n\u013d\3\u013d"+
		"\3\u013d\3\u013d\5\u013d\u150b\n\u013d\3\u013d\5\u013d\u150e\n\u013d\3"+
		"\u013d\5\u013d\u1511\n\u013d\3\u013d\3\u013d\3\u013d\3\u013d\5\u013d\u1517"+
		"\n\u013d\3\u013d\3\u013d\3\u013d\5\u013d\u151c\n\u013d\3\u013d\5\u013d"+
		"\u151f\n\u013d\3\u013d\5\u013d\u1522\n\u013d\3\u013d\3\u013d\3\u013d\3"+
		"\u013d\5\u013d\u1528\n\u013d\3\u013d\5\u013d\u152b\n\u013d\3\u013d\3\u013d"+
		"\3\u013d\3\u013d\5\u013d\u1531\n\u013d\3\u013d\3\u013d\5\u013d\u1535\n"+
		"\u013d\3\u013d\5\u013d\u1538\n\u013d\3\u013d\3\u013d\3\u013d\5\u013d\u153d"+
		"\n\u013d\3\u013d\3\u013d\3\u013d\3\u013d\5\u013d\u1543\n\u013d\3\u013d"+
		"\5\u013d\u1546\n\u013d\3\u013d\3\u013d\3\u013d\3\u013d\5\u013d\u154c\n"+
		"\u013d\3\u013d\3\u013d\3\u013d\5\u013d\u1551\n\u013d\3\u013d\5\u013d\u1554"+
		"\n\u013d\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e"+
		"\5\u013e\u155e\n\u013e\3\u013e\3\u013e\3\u013e\3\u013e\5\u013e\u1564\n"+
		"\u013e\3\u013e\3\u013e\3\u013e\3\u013e\5\u013e\u156a\n\u013e\3\u013e\3"+
		"\u013e\3\u013e\5\u013e\u156f\n\u013e\3\u013e\3\u013e\5\u013e\u1573\n\u013e"+
		"\3\u013e\5\u013e\u1576\n\u013e\3\u013e\5\u013e\u1579\n\u013e\3\u013e\5"+
		"\u013e\u157c\n\u013e\3\u013e\5\u013e\u157f\n\u013e\3\u013e\3\u013e\3\u013e"+
		"\3\u013e\5\u013e\u1585\n\u013e\3\u013e\5\u013e\u1588\n\u013e\3\u013e\5"+
		"\u013e\u158b\n\u013e\3\u013e\5\u013e\u158e\n\u013e\3\u013e\3\u013e\3\u013e"+
		"\3\u013e\5\u013e\u1594\n\u013e\3\u013e\5\u013e\u1597\n\u013e\3\u013e\3"+
		"\u013e\3\u013e\3\u013e\5\u013e\u159d\n\u013e\3\u013e\3\u013e\5\u013e\u15a1"+
		"\n\u013e\3\u013e\5\u013e\u15a4\n\u013e\3\u013e\3\u013e\3\u013e\5\u013e"+
		"\u15a9\n\u013e\3\u013e\3\u013e\3\u013e\3\u013e\5\u013e\u15af\n\u013e\3"+
		"\u013e\5\u013e\u15b2\n\u013e\3\u013e\3\u013e\3\u013e\3\u013e\5\u013e\u15b8"+
		"\n\u013e\3\u013e\3\u013e\3\u013e\5\u013e\u15bd\n\u013e\5\u013e\u15bf\n"+
		"\u013e\3\u013f\3\u013f\3\u013f\3\u013f\5\u013f\u15c5\n\u013f\3\u013f\5"+
		"\u013f\u15c8\n\u013f\3\u013f\5\u013f\u15cb\n\u013f\3\u013f\5\u013f\u15ce"+
		"\n\u013f\3\u013f\5\u013f\u15d1\n\u013f\5\u013f\u15d3\n\u013f\3\u0140\3"+
		"\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\5\u0140\u15dd\n"+
		"\u0140\3\u0140\3\u0140\3\u0140\3\u0140\5\u0140\u15e3\n\u0140\3\u0140\3"+
		"\u0140\3\u0140\3\u0140\5\u0140\u15e9\n\u0140\3\u0140\3\u0140\3\u0140\5"+
		"\u0140\u15ee\n\u0140\3\u0140\3\u0140\5\u0140\u15f2\n\u0140\3\u0140\5\u0140"+
		"\u15f5\n\u0140\3\u0140\5\u0140\u15f8\n\u0140\3\u0140\5\u0140\u15fb\n\u0140"+
		"\3\u0140\3\u0140\3\u0140\3\u0140\5\u0140\u1601\n\u0140\3\u0140\5\u0140"+
		"\u1604\n\u0140\3\u0140\5\u0140\u1607\n\u0140\3\u0140\3\u0140\5\u0140\u160b"+
		"\n\u0140\3\u0140\3\u0140\3\u0140\3\u0140\5\u0140\u1611\n\u0140\3\u0140"+
		"\3\u0140\5\u0140\u1615\n\u0140\3\u0140\5\u0140\u1618\n\u0140\3\u0140\3"+
		"\u0140\3\u0140\5\u0140\u161d\n\u0140\3\u0140\3\u0140\3\u0140\3\u0140\5"+
		"\u0140\u1623\n\u0140\3\u0140\5\u0140\u1626\n\u0140\3\u0140\3\u0140\3\u0140"+
		"\3\u0140\5\u0140\u162c\n\u0140\3\u0140\3\u0140\3\u0140\5\u0140\u1631\n"+
		"\u0140\5\u0140\u1633\n\u0140\3\u0141\3\u0141\3\u0142\3\u0142\3\u0142\3"+
		"\u0142\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142"+
		"\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142"+
		"\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142\5\u0142\u1652\n\u0142"+
		"\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143"+
		"\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143"+
		"\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143"+
		"\3\u0143\3\u0143\3\u0143\3\u0143\5\u0143\u1673\n\u0143\3\u0144\3\u0144"+
		"\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144"+
		"\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144"+
		"\3\u0144\3\u0144\3\u0144\5\u0144\u168c\n\u0144\3\u0145\3\u0145\5\u0145"+
		"\u1690\n\u0145\3\u0146\3\u0146\3\u0146\3\u0146\3\u0146\3\u0146\3\u0146"+
		"\5\u0146\u1699\n\u0146\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147"+
		"\3\u0147\3\u0147\5\u0147\u16a3\n\u0147\3\u0148\3\u0148\3\u0148\3\u0149"+
		"\3\u0149\3\u0149\3\u0149\3\u014a\3\u014a\3\u014a\5\u014a\u16af\n\u014a"+
		"\3\u014b\3\u014b\3\u014b\3\u014b\3\u014c\3\u014c\3\u014c\3\u014c\5\u014c"+
		"\u16b9\n\u014c\3\u014d\3\u014d\3\u014d\3\u014d\5\u014d\u16bf\n\u014d\3"+
		"\u014e\5\u014e\u16c2\n\u014e\3\u014e\3\u014e\3\u014f\3\u014f\3\u014f\3"+
		"\u014f\5\u014f\u16ca\n\u014f\3\u0150\5\u0150\u16cd\n\u0150\3\u0150\3\u0150"+
		"\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151\5\u0151\u16d7\n\u0151"+
		"\3\u0152\3\u0152\3\u0152\3\u0153\3\u0153\3\u0153\3\u0154\3\u0154\3\u0154"+
		"\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\7\u0155\u16e8\n\u0155"+
		"\f\u0155\16\u0155\u16eb\13\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155"+
		"\3\u0155\3\u0155\3\u0155\7\u0155\u16f5\n\u0155\f\u0155\16\u0155\u16f8"+
		"\13\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\7\u0155"+
		"\u1701\n\u0155\f\u0155\16\u0155\u1704\13\u0155\3\u0155\3\u0155\3\u0155"+
		"\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\7\u0155\u170e\n\u0155\f\u0155"+
		"\16\u0155\u1711\13\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\5\u0155"+
		"\u1718\n\u0155\3\u0156\3\u0156\5\u0156\u171c\n\u0156\3\u0156\3\u0156\3"+
		"\u0156\5\u0156\u1721\n\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3"+
		"\u0156\3\u0156\3\u0156\3\u0156\5\u0156\u172c\n\u0156\3\u0156\3\u0156\3"+
		"\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\5\u0156\u1737\n"+
		"\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156"+
		"\5\u0156\u1741\n\u0156\3\u0156\5\u0156\u1744\n\u0156\3\u0156\3\u0156\3"+
		"\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156"+
		"\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156"+
		"\5\u0156\u175a\n\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156"+
		"\5\u0156\u1762\n\u0156\3\u0156\3\u0156\5\u0156\u1766\n\u0156\3\u0156\3"+
		"\u0156\3\u0156\3\u0156\3\u0156\5\u0156\u176d\n\u0156\3\u0156\3\u0156\3"+
		"\u0156\5\u0156\u1772\n\u0156\3\u0156\3\u0156\3\u0156\3\u0156\5\u0156\u1778"+
		"\n\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156"+
		"\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156"+
		"\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156"+
		"\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156"+
		"\3\u0156\3\u0156\3\u0156\3\u0156\5\u0156\u17a1\n\u0156\3\u0157\3\u0157"+
		"\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157"+
		"\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157"+
		"\3\u0157\3\u0157\3\u0157\3\u0157\5\u0157\u17bb\n\u0157\3\u0158\3\u0158"+
		"\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158"+
		"\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158"+
		"\5\u0158\u17d1\n\u0158\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159"+
		"\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159"+
		"\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159"+
		"\5\u0159\u17eb\n\u0159\3\u0159\5\u0159\u17ee\n\u0159\3\u0159\3\u0159\5"+
		"\u0159\u17f2\n\u0159\3\u0159\3\u0159\5\u0159\u17f6\n\u0159\3\u0159\3\u0159"+
		"\3\u0159\3\u0159\3\u0159\5\u0159\u17fd\n\u0159\3\u0159\3\u0159\3\u0159"+
		"\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\7\u0159\u1809"+
		"\n\u0159\f\u0159\16\u0159\u180c\13\u0159\3\u0159\3\u0159\3\u0159\3\u0159"+
		"\3\u0159\3\u0159\3\u0159\3\u0159\7\u0159\u1816\n\u0159\f\u0159\16\u0159"+
		"\u1819\13\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159"+
		"\3\u0159\7\u0159\u1823\n\u0159\f\u0159\16\u0159\u1826\13\u0159\3\u0159"+
		"\3\u0159\3\u0159\5\u0159\u182b\n\u0159\3\u015a\3\u015a\3\u015a\3\u015a"+
		"\3\u015a\3\u015a\3\u015a\5\u015a\u1834\n\u015a\3\u015a\3\u015a\3\u015a"+
		"\5\u015a\u1839\n\u015a\3\u015a\5\u015a\u183c\n\u015a\3\u015b\3\u015b\3"+
		"\u015b\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b"+
		"\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b\5\u015b\u184e\n\u015b\3\u015b"+
		"\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b\7\u015b\u1856\n\u015b\f\u015b"+
		"\16\u015b\u1859\13\u015b\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b"+
		"\7\u015b\u1861\n\u015b\f\u015b\16\u015b\u1864\13\u015b\7\u015b\u1866\n"+
		"\u015b\f\u015b\16\u015b\u1869\13\u015b\3\u015b\3\u015b\3\u015b\3\u015b"+
		"\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b\5\u015b\u1874\n\u015b\3\u015c"+
		"\3\u015c\3\u015c\3\u015c\3\u015c\3\u015c\3\u015c\3\u015c\3\u015c\3\u015c"+
		"\3\u015c\5\u015c\u1881\n\u015c\3\u015d\3\u015d\3\u015d\3\u015e\3\u015e"+
		"\3\u015e\3\u015f\3\u015f\3\u015f\3\u0160\3\u0160\5\u0160\u188e\n\u0160"+
		"\3\u0160\5\u0160\u1891\n\u0160\3\u0161\3\u0161\3\u0161\3\u0161\3\u0161"+
		"\7\u0161\u1898\n\u0161\f\u0161\16\u0161\u189b\13\u0161\7\u0161\u189d\n"+
		"\u0161\f\u0161\16\u0161\u18a0\13\u0161\3\u0161\3\u0161\3\u0161\7\u0161"+
		"\u18a5\n\u0161\f\u0161\16\u0161\u18a8\13\u0161\3\u0162\3\u0162\3\u0162"+
		"\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\7\u0162\u18b2\n\u0162\f\u0162"+
		"\16\u0162\u18b5\13\u0162\3\u0163\3\u0163\3\u0163\3\u0163\3\u0164\3\u0164"+
		"\3\u0164\3\u0165\3\u0165\3\u0165\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166"+
		"\3\u0166\3\u0166\3\u0166\3\u0166\7\u0166\u18ca\n\u0166\f\u0166\16\u0166"+
		"\u18cd\13\u0166\3\u0166\3\u0166\5\u0166\u18d1\n\u0166\3\u0167\3\u0167"+
		"\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0168\3\u0168"+
		"\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\5\u0169"+
		"\u18e6\n\u0169\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a\5\u016a"+
		"\u18ee\n\u016a\3\u016b\3\u016b\5\u016b\u18f2\n\u016b\3\u016b\3\u016b\5"+
		"\u016b\u18f6\n\u016b\3\u016b\3\u016b\5\u016b\u18fa\n\u016b\5\u016b\u18fc"+
		"\n\u016b\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\7\u016c\u1903\n\u016c"+
		"\f\u016c\16\u016c\u1906\13\u016c\3\u016c\3\u016c\3\u016d\3\u016d\3\u016d"+
		"\3\u016d\3\u016d\3\u016d\7\u016d\u1910\n\u016d\f\u016d\16\u016d\u1913"+
		"\13\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\7\u016d\u191b"+
		"\n\u016d\f\u016d\16\u016d\u191e\13\u016d\3\u016d\3\u016d\3\u016d\3\u016d"+
		"\3\u016d\3\u016d\7\u016d\u1926\n\u016d\f\u016d\16\u016d\u1929\13\u016d"+
		"\5\u016d\u192b\n\u016d\3\u016e\3\u016e\5\u016e\u192f\n\u016e\3\u016e\3"+
		"\u016e\3\u016e\3\u016e\3\u016e\5\u016e\u1936\n\u016e\3\u016e\3\u016e\3"+
		"\u016e\5\u016e\u193b\n\u016e\3\u016f\3\u016f\3\u0170\3\u0170\3\u0170\3"+
		"\u0170\3\u0170\3\u0170\5\u0170\u1945\n\u0170\3\u0171\3\u0171\5\u0171\u1949"+
		"\n\u0171\3\u0171\3\u0171\3\u0171\5\u0171\u194e\n\u0171\3\u0171\3\u0171"+
		"\3\u0171\3\u0172\5\u0172\u1954\n\u0172\3\u0172\3\u0172\5\u0172\u1958\n"+
		"\u0172\3\u0172\3\u0172\3\u0172\3\u0172\3\u0172\3\u0172\3\u0172\6\u0172"+
		"\u1961\n\u0172\r\u0172\16\u0172\u1962\3\u0173\6\u0173\u1966\n\u0173\r"+
		"\u0173\16\u0173\u1967\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174"+
		"\5\u0174\u1970\n\u0174\3\u0174\3\u0174\3\u0174\5\u0174\u1975\n\u0174\6"+
		"\u0174\u1977\n\u0174\r\u0174\16\u0174\u1978\3\u0175\3\u0175\3\u0175\3"+
		"\u0175\3\u0175\3\u0175\3\u0175\3\u0175\5\u0175\u1983\n\u0175\3\u0175\3"+
		"\u0175\3\u0176\3\u0176\3\u0176\3\u0177\5\u0177\u198b\n\u0177\3\u0177\3"+
		"\u0177\3\u0177\3\u0177\3\u0177\3\u0178\3\u0178\3\u0178\3\u0178\3\u0178"+
		"\3\u0178\3\u0178\3\u0178\3\u0178\3\u0178\7\u0178\u199c\n\u0178\f\u0178"+
		"\16\u0178\u199f\13\u0178\3\u0178\3\u0178\3\u0179\3\u0179\3\u0179\3\u0179"+
		"\3\u0179\3\u0179\7\u0179\u19a9\n\u0179\f\u0179\16\u0179\u19ac\13\u0179"+
		"\5\u0179\u19ae\n\u0179\3\u0179\5\u0179\u19b1\n\u0179\3\u0179\3\u0179\3"+
		"\u0179\5\u0179\u19b6\n\u0179\3\u017a\3\u017a\3\u017a\5\u017a\u19bb\n\u017a"+
		"\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b"+
		"\5\u017b\u19c6\n\u017b\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c"+
		"\3\u017c\3\u017c\3\u017c\5\u017c\u19d1\n\u017c\3\u017d\3\u017d\5\u017d"+
		"\u19d5\n\u017d\3\u017e\3\u017e\3\u017e\3\u017e\5\u017e\u19db\n\u017e\3"+
		"\u017e\3\u017e\5\u017e\u19df\n\u017e\3\u017e\3\u017e\5\u017e\u19e3\n\u017e"+
		"\3\u017e\3\u017e\3\u017e\5\u017e\u19e8\n\u017e\5\u017e\u19ea\n\u017e\3"+
		"\u017f\3\u017f\3\u017f\3\u017f\5\u017f\u19f0\n\u017f\3\u017f\5\u017f\u19f3"+
		"\n\u017f\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\5\u0180\u19fa\n\u0180"+
		"\3\u0180\7\u0180\u19fd\n\u0180\f\u0180\16\u0180\u1a00\13\u0180\3\u0180"+
		"\3\u0180\5\u0180\u1a04\n\u0180\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181"+
		"\3\u0181\3\u0181\5\u0181\u1a0d\n\u0181\3\u0182\3\u0182\3\u0182\3\u0182"+
		"\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0183\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\3\u0184\3\u0184\3\u0184\3\u0184\3\u0185\3\u0185\3\u0185"+
		"\3\u0185\3\u0185\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\5\u0186\u1a2c"+
		"\n\u0186\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187"+
		"\3\u0187\5\u0187\u1a37\n\u0187\3\u0188\3\u0188\6\u0188\u1a3b\n\u0188\r"+
		"\u0188\16\u0188\u1a3c\3\u0189\3\u0189\3\u0189\3\u0189\3\u0189\3\u0189"+
		"\3\u0189\5\u0189\u1a46\n\u0189\3\u0189\3\u0189\3\u0189\3\u0189\3\u0189"+
		"\3\u0189\3\u0189\3\u0189\3\u0189\3\u0189\3\u0189\5\u0189\u1a53\n\u0189"+
		"\3\u0189\5\u0189\u1a56\n\u0189\3\u0189\3\u0189\3\u0189\3\u0189\5\u0189"+
		"\u1a5c\n\u0189\3\u0189\3\u0189\5\u0189\u1a60\n\u0189\3\u0189\3\u0189\5"+
		"\u0189\u1a64\n\u0189\3\u018a\3\u018a\3\u018b\3\u018b\5\u018b\u1a6a\n\u018b"+
		"\3\u018c\3\u018c\3\u018c\3\u018c\3\u018c\3\u018c\3\u018c\3\u018c\5\u018c"+
		"\u1a74\n\u018c\3\u018c\3\u018c\3\u018c\3\u018c\5\u018c\u1a7a\n\u018c\3"+
		"\u018c\3\u018c\3\u018c\3\u018c\5\u018c\u1a80\n\u018c\3\u018c\3\u018c\3"+
		"\u018c\5\u018c\u1a85\n\u018c\3\u018c\3\u018c\5\u018c\u1a89\n\u018c\3\u018c"+
		"\5\u018c\u1a8c\n\u018c\3\u018c\3\u018c\3\u018c\5\u018c\u1a91\n\u018c\3"+
		"\u018c\3\u018c\5\u018c\u1a95\n\u018c\3\u018c\3\u018c\3\u018c\3\u018c\5"+
		"\u018c\u1a9b\n\u018c\3\u018c\3\u018c\3\u018c\5\u018c\u1aa0\n\u018c\3\u018c"+
		"\3\u018c\5\u018c\u1aa4\n\u018c\3\u018c\3\u018c\3\u018c\3\u018c\5\u018c"+
		"\u1aaa\n\u018c\3\u018c\5\u018c\u1aad\n\u018c\3\u018c\3\u018c\3\u018c\3"+
		"\u018c\5\u018c\u1ab3\n\u018c\3\u018c\3\u018c\5\u018c\u1ab7\n\u018c\3\u018c"+
		"\5\u018c\u1aba\n\u018c\3\u018c\3\u018c\3\u018c\5\u018c\u1abf\n\u018c\3"+
		"\u018c\3\u018c\3\u018c\3\u018c\5\u018c\u1ac5\n\u018c\3\u018c\3\u018c\3"+
		"\u018c\5\u018c\u1aca\n\u018c\3\u018c\3\u018c\3\u018c\3\u018c\5\u018c\u1ad0"+
		"\n\u018c\3\u018c\3\u018c\3\u018c\5\u018c\u1ad5\n\u018c\3\u018c\3\u018c"+
		"\3\u018c\3\u018c\3\u018c\3\u018c\5\u018c\u1add\n\u018c\5\u018c\u1adf\n"+
		"\u018c\3\u018d\3\u018d\5\u018d\u1ae3\n\u018d\3\u018e\3\u018e\3\u018e\3"+
		"\u018e\3\u018e\3\u018e\5\u018e\u1aeb\n\u018e\5\u018e\u1aed\n\u018e\3\u018f"+
		"\3\u018f\3\u018f\3\u018f\3\u018f\3\u018f\3\u018f\3\u018f\5\u018f\u1af7"+
		"\n\u018f\3\u018f\3\u018f\3\u018f\3\u018f\3\u018f\5\u018f\u1afe\n\u018f"+
		"\5\u018f\u1b00\n\u018f\3\u0190\3\u0190\3\u0190\3\u0190\5\u0190\u1b06\n"+
		"\u0190\3\u0190\3\u0190\3\u0190\3\u0190\5\u0190\u1b0c\n\u0190\7\u0190\u1b0e"+
		"\n\u0190\f\u0190\16\u0190\u1b11\13\u0190\3\u0191\3\u0191\3\u0191\3\u0191"+
		"\3\u0191\3\u0191\5\u0191\u1b19\n\u0191\3\u0191\3\u0191\5\u0191\u1b1d\n"+
		"\u0191\5\u0191\u1b1f\n\u0191\3\u0192\3\u0192\3\u0193\3\u0193\3\u0193\3"+
		"\u0193\3\u0194\3\u0194\3\u0195\3\u0195\3\u0196\3\u0196\3\u0196\5\u0196"+
		"\u1b2e\n\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\5\u0196\u1b3c\n\u0196\3\u0197"+
		"\3\u0197\5\u0197\u1b40\n\u0197\3\u0197\3\u0197\3\u0197\5\u0197\u1b45\n"+
		"\u0197\3\u0197\3\u0197\3\u0197\3\u0197\7\u0197\u1b4b\n\u0197\f\u0197\16"+
		"\u0197\u1b4e\13\u0197\3\u0197\3\u0197\3\u0197\3\u0197\5\u0197\u1b54\n"+
		"\u0197\3\u0197\3\u0197\3\u0198\3\u0198\3\u0198\3\u0198\3\u0198\3\u0198"+
		"\3\u0198\3\u0198\5\u0198\u1b60\n\u0198\5\u0198\u1b62\n\u0198\3\u0198\3"+
		"\u0198\3\u0198\3\u0198\5\u0198\u1b68\n\u0198\3\u0198\3\u0198\3\u0198\3"+
		"\u0198\5\u0198\u1b6e\n\u0198\7\u0198\u1b70\n\u0198\f\u0198\16\u0198\u1b73"+
		"\13\u0198\3\u0198\3\u0198\3\u0198\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199"+
		"\3\u0199\5\u0199\u1b7e\n\u0199\3\u0199\3\u0199\3\u0199\3\u0199\5\u0199"+
		"\u1b84\n\u0199\7\u0199\u1b86\n\u0199\f\u0199\16\u0199\u1b89\13\u0199\3"+
		"\u0199\3\u0199\5\u0199\u1b8d\n\u0199\3\u0199\3\u0199\3\u0199\3\u0199\3"+
		"\u0199\3\u0199\3\u0199\3\u0199\5\u0199\u1b97\n\u0199\5\u0199\u1b99\n\u0199"+
		"\3\u0199\5\u0199\u1b9c\n\u0199\3\u0199\5\u0199\u1b9f\n\u0199\3\u0199\3"+
		"\u0199\3\u0199\5\u0199\u1ba4\n\u0199\3\u019a\3\u019a\5\u019a\u1ba8\n\u019a"+
		"\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a\3\u019b\3\u019b\3\u019b\5\u019b"+
		"\u1bb2\n\u019b\3\u019b\3\u019b\3\u019b\3\u019b\7\u019b\u1bb8\n\u019b\f"+
		"\u019b\16\u019b\u1bbb\13\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b"+
		"\7\u019b\u1bc2\n\u019b\f\u019b\16\u019b\u1bc5\13\u019b\3\u019b\3\u019b"+
		"\3\u019b\3\u019b\3\u019b\5\u019b\u1bcc\n\u019b\5\u019b\u1bce\n\u019b\3"+
		"\u019c\3\u019c\3\u019c\5\u019c\u1bd3\n\u019c\3\u019c\3\u019c\3\u019d\3"+
		"\u019d\3\u019e\3\u019e\5\u019e\u1bdb\n\u019e\3\u019e\3\u019e\3\u019e\3"+
		"\u019e\7\u019e\u1be1\n\u019e\f\u019e\16\u019e\u1be4\13\u019e\3\u019e\3"+
		"\u019e\5\u019e\u1be8\n\u019e\3\u019e\5\u019e\u1beb\n\u019e\3\u019e\5\u019e"+
		"\u1bee\n\u019e\3\u019f\3\u019f\3\u019f\3\u019f\3\u01a0\3\u01a0\3\u01a0"+
		"\3\u01a0\3\u01a0\3\u01a0\3\u01a0\3\u01a0\3\u01a0\7\u01a0\u1bfd\n\u01a0"+
		"\f\u01a0\16\u01a0\u1c00\13\u01a0\3\u01a0\3\u01a0\3\u01a0\3\u01a0\3\u01a0"+
		"\3\u01a0\3\u01a0\3\u01a0\3\u01a0\3\u01a0\3\u01a0\5\u01a0\u1c0d\n\u01a0"+
		"\3\u01a1\3\u01a1\3\u01a1\3\u01a1\3\u01a2\3\u01a2\5\u01a2\u1c15\n\u01a2"+
		"\3\u01a3\3\u01a3\3\u01a3\3\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a4"+
		"\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a6\3\u01a6\6\u01a6\u1c27"+
		"\n\u01a6\r\u01a6\16\u01a6\u1c28\3\u01a7\3\u01a7\3\u01a7\7\u01a7\u1c2e"+
		"\n\u01a7\f\u01a7\16\u01a7\u1c31\13\u01a7\3\u01a8\3\u01a8\3\u01a8\3\u01a8"+
		"\3\u01a9\3\u01a9\3\u01a9\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa"+
		"\3\u01aa\5\u01aa\u1c41\n\u01aa\3\u01ab\3\u01ab\6\u01ab\u1c45\n\u01ab\r"+
		"\u01ab\16\u01ab\u1c46\3\u01ac\3\u01ac\5\u01ac\u1c4b\n\u01ac\3\u01ac\3"+
		"\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac"+
		"\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\5\u01ac\u1c5c\n\u01ac\3\u01ad"+
		"\3\u01ad\3\u01ad\7\u01ad\u1c61\n\u01ad\f\u01ad\16\u01ad\u1c64\13\u01ad"+
		"\3\u01ad\3\u01ad\3\u01ad\7\u01ad\u1c69\n\u01ad\f\u01ad\16\u01ad\u1c6c"+
		"\13\u01ad\5\u01ad\u1c6e\n\u01ad\3\u01ae\3\u01ae\5\u01ae\u1c72\n\u01ae"+
		"\3\u01af\3\u01af\3\u01af\3\u01af\3\u01af\3\u01af\3\u01af\3\u01af\3\u01af"+
		"\3\u01af\5\u01af\u1c7e\n\u01af\3\u01b0\3\u01b0\3\u01b1\3\u01b1\3\u01b2"+
		"\3\u01b2\3\u01b3\3\u01b3\3\u01b4\3\u01b4\3\u01b4\3\u01b4\3\u01b4\3\u01b4"+
		"\3\u01b4\3\u01b4\3\u01b4\3\u01b4\3\u01b4\3\u01b4\3\u01b4\3\u01b4\3\u01b4"+
		"\3\u01b4\3\u01b4\3\u01b4\3\u01b4\3\u01b4\3\u01b4\3\u01b4\3\u01b4\3\u01b4"+
		"\3\u01b4\3\u01b4\3\u01b4\3\u01b4\3\u01b4\3\u01b4\3\u01b4\3\u01b4\3\u01b4"+
		"\3\u01b4\3\u01b4\3\u01b4\3\u01b4\3\u01b4\3\u01b4\3\u01b4\5\u01b4\u1cb0"+
		"\n\u01b4\3\u01b4\3\u01b4\3\u01b4\7\u01b4\u1cb5\n\u01b4\f\u01b4\16\u01b4"+
		"\u1cb8\13\u01b4\5\u01b4\u1cba\n\u01b4\3\u01b5\3\u01b5\3\u01b6\3\u01b6"+
		"\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b7\3\u01b7\3\u01b7\3\u01b7\3\u01b7"+
		"\3\u01b8\3\u01b8\3\u01b8\3\u01b8\5\u01b8\u1ccd\n\u01b8\3\u01b9\3\u01b9"+
		"\3\u01b9\5\u01b9\u1cd2\n\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9"+
		"\7\u01b9\u1cd9\n\u01b9\f\u01b9\16\u01b9\u1cdc\13\u01b9\5\u01b9\u1cde\n"+
		"\u01b9\3\u01b9\3\u01b9\3\u01ba\3\u01ba\3\u01ba\5\u01ba\u1ce5\n\u01ba\3"+
		"\u01ba\3\u01ba\3\u01ba\5\u01ba\u1cea\n\u01ba\3\u01ba\3\u01ba\5\u01ba\u1cee"+
		"\n\u01ba\3\u01ba\3\u01ba\3\u01bb\3\u01bb\3\u01bb\5\u01bb\u1cf5\n\u01bb"+
		"\3\u01bb\3\u01bb\3\u01bb\3\u01bb\3\u01bb\3\u01bb\3\u01bb\3\u01bc\3\u01bc"+
		"\3\u01bc\5\u01bc\u1d01\n\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc"+
		"\7\u01bc\u1d08\n\u01bc\f\u01bc\16\u01bc\u1d0b\13\u01bc\3\u01bc\3\u01bc"+
		"\3\u01bd\3\u01bd\3\u01bd\3\u01bd\3\u01bd\3\u01bd\3\u01bd\3\u01bd\5\u01bd"+
		"\u1d17\n\u01bd\3\u01bd\3\u01bd\3\u01be\3\u01be\3\u01be\3\u01be\5\u01be"+
		"\u1d1f\n\u01be\3\u01be\3\u01be\3\u01be\3\u01bf\3\u01bf\3\u01bf\3\u01bf"+
		"\3\u01bf\3\u01c0\3\u01c0\5\u01c0\u1d2b\n\u01c0\3\u01c0\7\u01c0\u1d2e\n"+
		"\u01c0\f\u01c0\16\u01c0\u1d31\13\u01c0\3\u01c1\3\u01c1\3\u01c1\3\u01c1"+
		"\3\u01c1\3\u01c1\5\u01c1\u1d39\n\u01c1\3\u01c1\3\u01c1\3\u01c1\5\u01c1"+
		"\u1d3e\n\u01c1\7\u01c1\u1d40\n\u01c1\f\u01c1\16\u01c1\u1d43\13\u01c1\5"+
		"\u01c1\u1d45\n\u01c1\3\u01c1\3\u01c1\3\u01c2\3\u01c2\3\u01c2\5\u01c2\u1d4c"+
		"\n\u01c2\3\u01c3\3\u01c3\3\u01c3\3\u01c3\5\u01c3\u1d52\n\u01c3\3\u01c3"+
		"\3\u01c3\3\u01c3\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4"+
		"\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4"+
		"\3\u01c4\3\u01c4\3\u01c4\5\u01c4\u1d6a\n\u01c4\3\u01c5\3\u01c5\3\u01c5"+
		"\3\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5"+
		"\5\u01c5\u1d78\n\u01c5\5\u01c5\u1d7a\n\u01c5\5\u01c5\u1d7c\n\u01c5\3\u01c5"+
		"\3\u01c5\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6"+
		"\3\u01c6\5\u01c6\u1d89\n\u01c6\5\u01c6\u1d8b\n\u01c6\3\u01c6\3\u01c6\3"+
		"\u01c7\3\u01c7\3\u01c7\3\u01c7\5\u01c7\u1d93\n\u01c7\3\u01c8\3\u01c8\3"+
		"\u01c8\3\u01c8\3\u01c8\7\u01c8\u1d9a\n\u01c8\f\u01c8\16\u01c8\u1d9d\13"+
		"\u01c8\3\u01c9\3\u01c9\3\u01c9\3\u01c9\5\u01c9\u1da3\n\u01c9\3\u01c9\3"+
		"\u01c9\3\u01c9\5\u01c9\u1da8\n\u01c9\7\u01c9\u1daa\n\u01c9\f\u01c9\16"+
		"\u01c9\u1dad\13\u01c9\3\u01ca\3\u01ca\3\u01ca\5\u01ca\u1db2\n\u01ca\3"+
		"\u01cb\3\u01cb\3\u01cb\3\u01cb\3\u01cb\3\u01cb\5\u01cb\u1dba\n\u01cb\3"+
		"\u01cb\5\u01cb\u1dbd\n\u01cb\3\u01cb\3\u01cb\3\u01cc\3\u01cc\5\u01cc\u1dc3"+
		"\n\u01cc\3\u01cc\3\u01cc\3\u01cc\5\u01cc\u1dc8\n\u01cc\3\u01cc\3\u01cc"+
		"\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc"+
		"\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc\5\u01cc\u1dda\n\u01cc\5\u01cc"+
		"\u1ddc\n\u01cc\3\u01cc\3\u01cc\3\u01cd\3\u01cd\3\u01ce\3\u01ce\3\u01cf"+
		"\3\u01cf\3\u01cf\3\u01cf\5\u01cf\u1de8\n\u01cf\3\u01d0\3\u01d0\3\u01d0"+
		"\3\u01d0\3\u01d0\5\u01d0\u1def\n\u01d0\3\u01d0\3\u01d0\3\u01d1\3\u01d1"+
		"\3\u01d1\3\u01d1\3\u01d1\5\u01d1\u1df8\n\u01d1\3\u01d1\3\u01d1\3\u01d2"+
		"\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d3\3\u01d3\3\u01d3"+
		"\3\u01d3\3\u01d3\3\u01d4\3\u01d4\3\u01d4\3\u01d4\5\u01d4\u1e0c\n\u01d4"+
		"\3\u01d5\3\u01d5\3\u01d5\5\u01d5\u1e11\n\u01d5\3\u01d6\3\u01d6\3\u01d6"+
		"\3\u01d6\3\u01d6\3\u01d7\3\u01d7\5\u01d7\u1e1a\n\u01d7\3\u01d8\3\u01d8"+
		"\3\u01d8\3\u01d8\5\u01d8\u1e20\n\u01d8\3\u01d9\3\u01d9\3\u01d9\3\u01d9"+
		"\5\u01d9\u1e26\n\u01d9\3\u01da\3\u01da\3\u01da\3\u01db\3\u01db\3\u01db"+
		"\3\u01dc\3\u01dc\3\u01dc\3\u01dd\3\u01dd\3\u01dd\3\u01de\3\u01de\3\u01de"+
		"\3\u01df\3\u01df\3\u01e0\3\u01e0\3\u01e1\3\u01e1\3\u01e2\3\u01e2\3\u01e2"+
		"\3\u01e2\3\u01e2\5\u01e2\u1e42\n\u01e2\3\u01e2\3\u01e2\3\u01e2\3\u01e2"+
		"\5\u01e2\u1e48\n\u01e2\3\u01e2\3\u01e2\3\u01e2\3\u01e2\5\u01e2\u1e4e\n"+
		"\u01e2\3\u01e2\3\u01e2\3\u01e2\5\u01e2\u1e53\n\u01e2\3\u01e2\3\u01e2\3"+
		"\u01e2\5\u01e2\u1e58\n\u01e2\7\u01e2\u1e5a\n\u01e2\f\u01e2\16\u01e2\u1e5d"+
		"\13\u01e2\5\u01e2\u1e5f\n\u01e2\3\u01e2\3\u01e2\3\u01e3\3\u01e3\3\u01e4"+
		"\3\u01e4\3\u01e4\3\u01e4\3\u01e4\5\u01e4\u1e6a\n\u01e4\3\u01e5\3\u01e5"+
		"\3\u01e6\3\u01e6\3\u01e7\3\u01e7\3\u01e7\3\u01e7\3\u01e7\5\u01e7\u1e75"+
		"\n\u01e7\3\u01e8\5\u01e8\u1e78\n\u01e8\3\u01e8\3\u01e8\3\u01e8\3\u01e8"+
		"\3\u01e8\3\u01e8\3\u01e8\5\u01e8\u1e81\n\u01e8\3\u01e9\5\u01e9\u1e84\n"+
		"\u01e9\3\u01e9\3\u01e9\5\u01e9\u1e88\n\u01e9\3\u01ea\5\u01ea\u1e8b\n\u01ea"+
		"\3\u01ea\3\u01ea\3\u01ea\3\u01ea\3\u01ea\3\u01ea\3\u01ea\5\u01ea\u1e94"+
		"\n\u01ea\3\u01eb\3\u01eb\3\u01eb\3\u01eb\3\u01eb\5\u01eb\u1e9b\n\u01eb"+
		"\3\u01ec\3\u01ec\3\u01ec\3\u01ec\3\u01ed\3\u01ed\3\u01ee\3\u01ee\3\u01ee"+
		"\3\u01ee\3\u01ef\3\u01ef\3\u01ef\7\u01ef\u1eaa\n\u01ef\f\u01ef\16\u01ef"+
		"\u1ead\13\u01ef\3\u01f0\3\u01f0\3\u01f0\3\u01f0\3\u01f0\7\u01f0\u1eb4"+
		"\n\u01f0\f\u01f0\16\u01f0\u1eb7\13\u01f0\3\u01f0\3\u01f0\3\u01f1\3\u01f1"+
		"\3\u01f1\3\u01f1\3\u01f1\3\u01f1\3\u01f1\3\u01f1\5\u01f1\u1ec3\n\u01f1"+
		"\3\u01f2\3\u01f2\3\u01f3\3\u01f3\3\u01f4\3\u01f4\3\u01f4\3\u01f4\3\u01f4"+
		"\3\u01f4\3\u01f4\5\u01f4\u1ed0\n\u01f4\3\u01f5\3\u01f5\3\u01f5\3\u01f5"+
		"\3\u01f5\3\u01f5\3\u01f5\3\u01f5\5\u01f5\u1eda\n\u01f5\3\u01f6\3\u01f6"+
		"\3\u01f6\6\u01f6\u1edf\n\u01f6\r\u01f6\16\u01f6\u1ee0\3\u01f6\3\u01f6"+
		"\3\u01f6\3\u01f6\5\u01f6\u1ee7\n\u01f6\3\u01f6\3\u01f6\3\u01f7\3\u01f7"+
		"\3\u01f8\3\u01f8\3\u01f8\3\u01f8\3\u01f8\5\u01f8\u1ef2\n\u01f8\3\u01f9"+
		"\3\u01f9\3\u01f9\3\u01f9\3\u01f9\3\u01f9\5\u01f9\u1efa\n\u01f9\3\u01fa"+
		"\5\u01fa\u1efd\n\u01fa\3\u01fa\3\u01fa\3\u01fa\5\u01fa\u1f02\n\u01fa\3"+
		"\u01fa\3\u01fa\3\u01fa\3\u01fa\5\u01fa\u1f08\n\u01fa\3\u01fa\3\u01fa\5"+
		"\u01fa\u1f0c\n\u01fa\3\u01fa\3\u01fa\3\u01fa\3\u01fa\3\u01fa\5\u01fa\u1f13"+
		"\n\u01fa\7\u01fa\u1f15\n\u01fa\f\u01fa\16\u01fa\u1f18\13\u01fa\3\u01fb"+
		"\3\u01fb\3\u01fc\3\u01fc\3\u01fc\3\u01fc\3\u01fc\3\u01fc\3\u01fc\3\u01fc"+
		"\3\u01fc\3\u01fc\5\u01fc\u1f26\n\u01fc\3\u01fd\3\u01fd\3\u01fd\3\u01fd"+
		"\3\u01fd\3\u01fd\3\u01fd\3\u01fd\5\u01fd\u1f30\n\u01fd\3\u01fe\3\u01fe"+
		"\3\u01fe\3\u01fe\7\u01fe\u1f36\n\u01fe\f\u01fe\16\u01fe\u1f39\13\u01fe"+
		"\3\u01fe\3\u01fe\3\u01ff\3\u01ff\3\u01ff\3\u01ff\3\u01ff\3\u01ff\3\u01ff"+
		"\3\u01ff\3\u01ff\3\u01ff\3\u01ff\3\u01ff\3\u01ff\3\u01ff\3\u01ff\3\u01ff"+
		"\3\u01ff\3\u01ff\3\u01ff\3\u01ff\3\u01ff\5\u01ff\u1f52\n\u01ff\3\u0200"+
		"\3\u0200\3\u0200\3\u0200\3\u0200\3\u0200\3\u0201\3\u0201\5\u0201\u1f5c"+
		"\n\u0201\3\u0201\3\u0201\3\u0201\3\u0201\3\u0201\3\u0202\3\u0202\3\u0202"+
		"\5\u0202\u1f66\n\u0202\3\u0202\3\u0202\3\u0202\3\u0202\3\u0203\3\u0203"+
		"\3\u0203\3\u0203\3\u0203\3\u0204\3\u0204\5\u0204\u1f73\n\u0204\3\u0204"+
		"\3\u0204\3\u0204\3\u0204\3\u0204\3\u0204\3\u0204\3\u0204\3\u0204\7\u0204"+
		"\u1f7e\n\u0204\f\u0204\16\u0204\u1f81\13\u0204\3\u0204\3\u0204\5\u0204"+
		"\u1f85\n\u0204\3\u0205\3\u0205\5\u0205\u1f89\n\u0205\3\u0205\3\u0205\3"+
		"\u0205\3\u0205\5\u0205\u1f8f\n\u0205\3\u0206\3\u0206\3\u0206\5\u0206\u1f94"+
		"\n\u0206\3\u0206\3\u0206\3\u0206\5\u0206\u1f99\n\u0206\3\u0207\3\u0207"+
		"\3\u0207\3\u0207\3\u0207\3\u0207\5\u0207\u1fa1\n\u0207\3\u0207\3\u0207"+
		"\3\u0207\7\u0207\u1fa6\n\u0207\f\u0207\16\u0207\u1fa9\13\u0207\5\u0207"+
		"\u1fab\n\u0207\3\u0207\3\u0207\3\u0208\3\u0208\5\u0208\u1fb1\n\u0208\3"+
		"\u0209\3\u0209\3\u0209\3\u0209\3\u0209\5\u0209\u1fb8\n\u0209\3\u0209\3"+
		"\u0209\3\u0209\3\u0209\3\u020a\3\u020a\3\u020b\3\u020b\3\u020b\5\u020b"+
		"\u1fc3\n\u020b\3\u020c\3\u020c\3\u020c\3\u020c\3\u020c\3\u020c\3\u020c"+
		"\3\u020c\5\u020c\u1fcd\n\u020c\3\u020c\3\u020c\3\u020c\3\u020c\5\u020c"+
		"\u1fd3\n\u020c\3\u020c\3\u020c\3\u020c\3\u020c\5\u020c\u1fd9\n\u020c\3"+
		"\u020c\3\u020c\3\u020c\5\u020c\u1fde\n\u020c\3\u020c\3\u020c\5\u020c\u1fe2"+
		"\n\u020c\3\u020c\5\u020c\u1fe5\n\u020c\3\u020c\3\u020c\3\u020c\5\u020c"+
		"\u1fea\n\u020c\3\u020c\5\u020c\u1fed\n\u020c\3\u020c\3\u020c\3\u020c\3"+
		"\u020c\5\u020c\u1ff3\n\u020c\3\u020c\3\u020c\3\u020c\5\u020c\u1ff8\n\u020c"+
		"\3\u020c\5\u020c\u1ffb\n\u020c\3\u020c\3\u020c\3\u020c\3\u020c\5\u020c"+
		"\u2001\n\u020c\3\u020c\5\u020c\u2004\n\u020c\3\u020c\3\u020c\3\u020c\3"+
		"\u020c\5\u020c\u200a\n\u020c\3\u020c\3\u020c\5\u020c\u200e\n\u020c\3\u020c"+
		"\5\u020c\u2011\n\u020c\3\u020c\3\u020c\3\u020c\5\u020c\u2016\n\u020c\3"+
		"\u020c\3\u020c\3\u020c\3\u020c\5\u020c\u201c\n\u020c\3\u020c\3\u020c\3"+
		"\u020c\3\u020c\3\u020c\5\u020c\u2023\n\u020c\3\u020c\3\u020c\3\u020c\3"+
		"\u020c\5\u020c\u2029\n\u020c\3\u020c\3\u020c\3\u020c\5\u020c\u202e\n\u020c"+
		"\3\u020c\3\u020c\5\u020c\u2032\n\u020c\3\u020d\3\u020d\3\u020d\3\u020d"+
		"\5\u020d\u2038\n\u020d\3\u020d\3\u020d\3\u020e\3\u020e\3\u020e\5\u020e"+
		"\u203f\n\u020e\3\u020e\3\u020e\3\u020f\3\u020f\3\u020f\5\u020f\u2046\n"+
		"\u020f\3\u020f\5\u020f\u2049\n\u020f\3\u0210\3\u0210\3\u0210\3\u0210\3"+
		"\u0211\3\u0211\3\u0211\5\u0211\u2052\n\u0211\3\u0211\3\u0211\3\u0212\3"+
		"\u0212\3\u0213\3\u0213\3\u0214\3\u0214\3\u0215\3\u0215\3\u0215\5\u0215"+
		"\u205f\n\u0215\3\u0215\3\u0215\3\u0216\3\u0216\3\u0217\3\u0217\3\u0218"+
		"\3\u0218\3\u0219\3\u0219\3\u021a\3\u021a\3\u021b\3\u021b\3\u021c\3\u021c"+
		"\3\u021c\5\u021c\u2072\n\u021c\3\u021c\5\u021c\u2075\n\u021c\3\u021c\3"+
		"\u021c\3\u021c\5\u021c\u207a\n\u021c\7\u021c\u207c\n\u021c\f\u021c\16"+
		"\u021c\u207f\13\u021c\3\u021d\3\u021d\3\u021e\3\u021e\3\u021e\3\u021e"+
		"\3\u021e\3\u021e\3\u021e\3\u021e\5\u021e\u208b\n\u021e\3\u021e\3\u021e"+
		"\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f\5\u021f"+
		"\u2097\n\u021f\3\u021f\3\u021f\3\u0220\3\u0220\3\u0220\3\u0220\3\u0220"+
		"\3\u0220\3\u0220\3\u0220\5\u0220\u20a3\n\u0220\3\u0220\3\u0220\3\u0221"+
		"\3\u0221\3\u0222\3\u0222\3\u0223\3\u0223\3\u0224\3\u0224\3\u0224\3\u0224"+
		"\3\u0224\3\u0224\3\u0224\3\u0224\5\u0224\u20b5\n\u0224\3\u0224\3\u0224"+
		"\5\u0224\u20b9\n\u0224\3\u0225\3\u0225\3\u0226\3\u0226\3\u0227\3\u0227"+
		"\3\u0228\3\u0228\3\u0228\5\u0228\u20c4\n\u0228\3\u0228\3\u0228\3\u0229"+
		"\3\u0229\3\u0229\5\u0229\u20cb\n\u0229\3\u0229\3\u0229\3\u022a\3\u022a"+
		"\3\u022a\5\u022a\u20d2\n\u022a\3\u022a\3\u022a\3\u022b\3\u022b\3\u022b"+
		"\5\u022b\u20d9\n\u022b\3\u022b\3\u022b\3\u022c\3\u022c\3\u022d\3\u022d"+
		"\3\u022e\3\u022e\3\u022e\5\u022e\u20e4\n\u022e\3\u022e\5\u022e\u20e7\n"+
		"\u022e\3\u022e\3\u022e\3\u022e\5\u022e\u20ec\n\u022e\7\u022e\u20ee\n\u022e"+
		"\f\u022e\16\u022e\u20f1\13\u022e\3\u022f\3\u022f\3\u022f\5\u022f\u20f6"+
		"\n\u022f\3\u022f\5\u022f\u20f9\n\u022f\3\u022f\3\u022f\3\u022f\5\u022f"+
		"\u20fe\n\u022f\7\u022f\u2100\n\u022f\f\u022f\16\u022f\u2103\13\u022f\3"+
		"\u0230\3\u0230\3\u0230\5\u0230\u2108\n\u0230\3\u0230\3\u0230\3\u0231\3"+
		"\u0231\3\u0231\5\u0231\u210f\n\u0231\3\u0231\3\u0231\3\u0232\3\u0232\3"+
		"\u0232\5\u0232\u2116\n\u0232\3\u0232\3\u0232\3\u0233\3\u0233\3\u0233\3"+
		"\u0233\3\u0233\3\u0233\3\u0233\3\u0233\5\u0233\u2122\n\u0233\3\u0233\3"+
		"\u0233\3\u0234\3\u0234\3\u0234\5\u0234\u2129\n\u0234\3\u0234\3\u0234\3"+
		"\u0235\3\u0235\3\u0236\3\u0236\3\u0237\3\u0237\3\u0238\3\u0238\3\u0239"+
		"\3\u0239\3\u023a\3\u023a\3\u023b\3\u023b\3\u023c\3\u023c\3\u023d\3\u023d"+
		"\3\u023e\3\u023e\3\u023f\3\u023f\3\u0240\3\u0240\3\u0241\3\u0241\3\u0242"+
		"\3\u0242\3\u0243\3\u0243\3\u0244\3\u0244\3\u0245\3\u0245\3\u0246\3\u0246"+
		"\3\u0247\3\u0247\3\u0248\3\u0248\3\u0249\3\u0249\3\u024a\3\u024a\3\u024b"+
		"\3\u024b\5\u024b\u215b\n\u024b\3\u024c\3\u024c\3\u024c\5\u024c\u2160\n"+
		"\u024c\3\u024c\3\u024c\3\u024d\3\u024d\3\u024d\5\u024d\u2167\n\u024d\3"+
		"\u024d\3\u024d\3\u024e\3\u024e\3\u024e\3\u024e\5\u024e\u216f\n\u024e\3"+
		"\u024e\3\u024e\5\u024e\u2173\n\u024e\3\u024e\3\u024e\3\u024e\3\u024e\5"+
		"\u024e\u2179\n\u024e\3\u024e\5\u024e\u217c\n\u024e\3\u024f\3\u024f\3\u0250"+
		"\3\u0250\3\u0251\3\u0251\3\u0252\3\u0252\3\u0252\5\u0252\u2187\n\u0252"+
		"\3\u0252\3\u0252\5\u0252\u218b\n\u0252\3\u0253\3\u0253\3\u0253\5\u0253"+
		"\u2190\n\u0253\3\u0253\3\u0253\7\u0253\u2194\n\u0253\f\u0253\16\u0253"+
		"\u2197\13\u0253\3\u0254\5\u0254\u219a\n\u0254\3\u0254\3\u0254\3\u0254"+
		"\3\u0254\3\u0254\7\u0254\u21a1\n\u0254\f\u0254\16\u0254\u21a4\13\u0254"+
		"\3\u0254\3\u0254\5\u0254\u21a8\n\u0254\3\u0255\3\u0255\7\u0255\u21ac\n"+
		"\u0255\f\u0255\16\u0255\u21af\13\u0255\3\u0255\3\u0255\7\u0255\u21b3\n"+
		"\u0255\f\u0255\16\u0255\u21b6\13\u0255\3\u0255\5\u0255\u21b9\n\u0255\3"+
		"\u0255\3\u0255\7\u0255\u21bd\n\u0255\f\u0255\16\u0255\u21c0\13\u0255\3"+
		"\u0255\3\u0255\7\u0255\u21c4\n\u0255\f\u0255\16\u0255\u21c7\13\u0255\3"+
		"\u0255\5\u0255\u21ca\n\u0255\7\u0255\u21cc\n\u0255\f\u0255\16\u0255\u21cf"+
		"\13\u0255\3\u0256\3\u0256\3\u0256\3\u0256\3\u0256\3\u0256\3\u0256\3\u0256"+
		"\3\u0256\3\u0256\3\u0256\3\u0256\3\u0256\3\u0256\6\u0256\u21df\n\u0256"+
		"\r\u0256\16\u0256\u21e0\3\u0256\3\u0256\6\u0256\u21e5\n\u0256\r\u0256"+
		"\16\u0256\u21e6\3\u0256\3\u0256\3\u0256\3\u0256\3\u0256\3\u0256\6\u0256"+
		"\u21ef\n\u0256\r\u0256\16\u0256\u21f0\3\u0256\3\u0256\6\u0256\u21f5\n"+
		"\u0256\r\u0256\16\u0256\u21f6\3\u0256\5\u0256\u21fa\n\u0256\3\u0256\3"+
		"\u0256\3\u0256\5\u0256\u21ff\n\u0256\5\u0256\u2201\n\u0256\3\u0256\3\u0256"+
		"\3\u0256\3\u0256\3\u0256\5\u0256\u2208\n\u0256\3\u0256\3\u0256\3\u0256"+
		"\5\u0256\u220d\n\u0256\5\u0256\u220f\n\u0256\3\u0256\3\u0256\3\u0256\3"+
		"\u0256\3\u0256\3\u0256\3\u0256\3\u0256\3\u0256\3\u0256\3\u0256\3\u0256"+
		"\6\u0256\u221d\n\u0256\r\u0256\16\u0256\u221e\3\u0256\3\u0256\6\u0256"+
		"\u2223\n\u0256\r\u0256\16\u0256\u2224\3\u0256\3\u0256\3\u0256\3\u0256"+
		"\3\u0256\3\u0256\6\u0256\u222d\n\u0256\r\u0256\16\u0256\u222e\3\u0256"+
		"\3\u0256\6\u0256\u2233\n\u0256\r\u0256\16\u0256\u2234\3\u0256\5\u0256"+
		"\u2238\n\u0256\3\u0256\3\u0256\3\u0256\5\u0256\u223d\n\u0256\5\u0256\u223f"+
		"\n\u0256\3\u0256\3\u0256\3\u0256\3\u0256\3\u0256\5\u0256\u2246\n\u0256"+
		"\3\u0256\3\u0256\3\u0256\3\u0256\3\u0256\6\u0256\u224d\n\u0256\r\u0256"+
		"\16\u0256\u224e\3\u0256\3\u0256\6\u0256\u2253\n\u0256\r\u0256\16\u0256"+
		"\u2254\5\u0256\u2257\n\u0256\3\u0257\3\u0257\5\u0257\u225b\n\u0257\3\u0257"+
		"\5\u0257\u225e\n\u0257\3\u0257\7\u0257\u2261\n\u0257\f\u0257\16\u0257"+
		"\u2264\13\u0257\3\u0257\5\u0257\u2267\n\u0257\3\u0258\3\u0258\3\u0258"+
		"\3\u0258\3\u0258\3\u0258\3\u0258\3\u0258\3\u0258\3\u0258\3\u0258\3\u0258"+
		"\3\u0258\3\u0258\3\u0258\5\u0258\u2278\n\u0258\3\u0259\3\u0259\3\u0259"+
		"\3\u0259\3\u0259\3\u0259\3\u0259\3\u0259\3\u0259\3\u0259\3\u0259\3\u0259"+
		"\3\u0259\3\u0259\5\u0259\u2288\n\u0259\3\u025a\5\u025a\u228b\n\u025a\3"+
		"\u025a\3\u025a\3\u025a\3\u025a\5\u025a\u2291\n\u025a\3\u025b\3\u025b\3"+
		"\u025b\3\u025b\3\u025b\3\u025b\5\u025b\u2299\n\u025b\3\u025b\3\u025b\3"+
		"\u025b\3\u025b\3\u025b\3\u025b\3\u025b\3\u025b\3\u025b\5\u025b\u22a4\n"+
		"\u025b\3\u025c\3\u025c\3\u025c\3\u025c\3\u025c\3\u025c\5\u025c\u22ac\n"+
		"\u025c\3\u025c\3\u025c\3\u025c\3\u025c\5\u025c\u22b2\n\u025c\3\u025c\3"+
		"\u025c\3\u025c\3\u025c\5\u025c\u22b8\n\u025c\7\u025c\u22ba\n\u025c\f\u025c"+
		"\16\u025c\u22bd\13\u025c\3\u025c\3\u025c\5\u025c\u22c1\n\u025c\3\u025c"+
		"\3\u025c\3\u025c\5\u025c\u22c6\n\u025c\3\u025d\3\u025d\5\u025d\u22ca\n"+
		"\u025d\3\u025d\3\u025d\3\u025e\5\u025e\u22cf\n\u025e\3\u025e\3\u025e\3"+
		"\u025e\3\u025e\3\u025e\3\u025e\3\u025e\3\u025e\7\u025e\u22d9\n\u025e\f"+
		"\u025e\16\u025e\u22dc\13\u025e\3\u025e\3\u025e\3\u025f\3\u025f\3\u025f"+
		"\3\u025f\3\u025f\3\u025f\3\u025f\5\u025f\u22e7\n\u025f\3\u0260\3\u0260"+
		"\5\u0260\u22eb\n\u0260\3\u0261\3\u0261\3\u0261\3\u0261\5\u0261\u22f1\n"+
		"\u0261\3\u0261\3\u0261\3\u0261\5\u0261\u22f6\n\u0261\7\u0261\u22f8\n\u0261"+
		"\f\u0261\16\u0261\u22fb\13\u0261\3\u0261\3\u0261\3\u0261\5\u0261\u2300"+
		"\n\u0261\3\u0261\5\u0261\u2303\n\u0261\3\u0262\3\u0262\3\u0262\3\u0262"+
		"\3\u0262\5\u0262\u230a\n\u0262\3\u0263\3\u0263\3\u0263\3\u0263\3\u0263"+
		"\3\u0263\5\u0263\u2312\n\u0263\3\u0263\3\u0263\3\u0263\5\u0263\u2317\n"+
		"\u0263\7\u0263\u2319\n\u0263\f\u0263\16\u0263\u231c\13\u0263\3\u0263\3"+
		"\u0263\5\u0263\u2320\n\u0263\3\u0264\3\u0264\3\u0265\3\u0265\3\u0266\3"+
		"\u0266\3\u0267\3\u0267\3\u0267\3\u0267\5\u0267\u232c\n\u0267\3\u0268\3"+
		"\u0268\3\u0268\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\5\u0269\u2336\n"+
		"\u0269\3\u026a\3\u026a\3\u026a\3\u026b\3\u026b\3\u026b\7\u026b\u233e\n"+
		"\u026b\f\u026b\16\u026b\u2341\13\u026b\3\u026c\3\u026c\3\u026c\3\u026c"+
		"\3\u026d\3\u026d\3\u026d\3\u026d\5\u026d\u234b\n\u026d\3\u026d\3\u026d"+
		"\3\u026d\3\u026d\5\u026d\u2351\n\u026d\7\u026d\u2353\n\u026d\f\u026d\16"+
		"\u026d\u2356\13\u026d\3\u026d\3\u026d\3\u026e\3\u026e\3\u026e\3\u026e"+
		"\3\u026e\3\u026e\3\u026e\5\u026e\u2361\n\u026e\3\u026f\3\u026f\3\u026f"+
		"\3\u026f\7\u026f\u2367\n\u026f\f\u026f\16\u026f\u236a\13\u026f\3\u026f"+
		"\5\u026f\u236d\n\u026f\3\u026f\5\u026f\u2370\n\u026f\3\u026f\3\u026f\3"+
		"\u026f\3\u026f\3\u026f\5\u026f\u2377\n\u026f\3\u0270\3\u0270\3\u0270\3"+
		"\u0270\3\u0270\3\u0270\3\u0270\3\u0270\3\u0270\3\u0270\3\u0270\3\u0270"+
		"\3\u0270\3\u0270\7\u0270\u2387\n\u0270\f\u0270\16\u0270\u238a\13\u0270"+
		"\3\u0270\3\u0270\3\u0271\3\u0271\5\u0271\u2390\n\u0271\3\u0271\3\u0271"+
		"\3\u0271\3\u0271\7\u0271\u2396\n\u0271\f\u0271\16\u0271\u2399\13\u0271"+
		"\5\u0271\u239b\n\u0271\3\u0272\3\u0272\3\u0272\5\u0272\u23a0\n\u0272\3"+
		"\u0272\5\u0272\u23a3\n\u0272\3\u0272\5\u0272\u23a6\n\u0272\3\u0272\5\u0272"+
		"\u23a9\n\u0272\3\u0272\5\u0272\u23ac\n\u0272\3\u0272\5\u0272\u23af\n\u0272"+
		"\3\u0273\3\u0273\3\u0273\3\u0273\7\u0273\u23b5\n\u0273\f\u0273\16\u0273"+
		"\u23b8\13\u0273\5\u0273\u23ba\n\u0273\3\u0273\3\u0273\3\u0273\3\u0273"+
		"\5\u0273\u23c0\n\u0273\3\u0273\5\u0273\u23c3\n\u0273\3\u0273\5\u0273\u23c6"+
		"\n\u0273\3\u0273\5\u0273\u23c9\n\u0273\3\u0273\5\u0273\u23cc\n\u0273\3"+
		"\u0273\5\u0273\u23cf\n\u0273\3\u0273\3\u0273\5\u0273\u23d3\n\u0273\3\u0273"+
		"\5\u0273\u23d6\n\u0273\3\u0274\3\u0274\3\u0274\3\u0274\7\u0274\u23dc\n"+
		"\u0274\f\u0274\16\u0274\u23df\13\u0274\5\u0274\u23e1\n\u0274\3\u0274\3"+
		"\u0274\3\u0274\3\u0274\3\u0274\3\u0274\3\u0274\7\u0274\u23ea\n\u0274\f"+
		"\u0274\16\u0274\u23ed\13\u0274\3\u0275\3\u0275\3\u0275\3\u0275\3\u0275"+
		"\7\u0275\u23f4\n\u0275\f\u0275\16\u0275\u23f7\13\u0275\3\u0275\3\u0275"+
		"\3\u0275\3\u0275\3\u0275\3\u0275\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276"+
		"\3\u0276\7\u0276\u2405\n\u0276\f\u0276\16\u0276\u2408\13\u0276\5\u0276"+
		"\u240a\n\u0276\3\u0277\3\u0277\3\u0277\3\u0277\3\u0278\3\u0278\3\u0278"+
		"\3\u0278\3\u0278\3\u0279\3\u0279\3\u0279\5\u0279\u2418\n\u0279\3\u0279"+
		"\3\u0279\5\u0279\u241c\n\u0279\3\u0279\3\u0279\5\u0279\u2420\n\u0279\3"+
		"\u027a\3\u027a\3\u027a\3\u027a\3\u027a\3\u027a\3\u027b\3\u027b\3\u027b"+
		"\3\u027b\3\u027c\3\u027c\3\u027c\3\u027d\3\u027d\3\u027d\3\u027d\3\u027e"+
		"\3\u027e\3\u027e\3\u027e\3\u027e\3\u027e\5\u027e\u2439\n\u027e\3\u027e"+
		"\3\u027e\5\u027e\u243d\n\u027e\3\u027e\3\u027e\3\u027e\3\u027e\3\u027e"+
		"\5\u027e\u2444\n\u027e\7\u027e\u2446\n\u027e\f\u027e\16\u027e\u2449\13"+
		"\u027e\3\u027e\5\u027e\u244c\n\u027e\3\u027e\5\u027e\u244f\n\u027e\3\u027e"+
		"\5\u027e\u2452\n\u027e\3\u027f\3\u027f\3\u027f\3\u027f\3\u027f\3\u027f"+
		"\7\u027f\u245a\n\u027f\f\u027f\16\u027f\u245d\13\u027f\3\u027f\3\u027f"+
		"\5\u027f\u2461\n\u027f\3\u0280\3\u0280\3\u0280\3\u0280\5\u0280\u2467\n"+
		"\u0280\3\u0280\3\u0280\3\u0280\5\u0280\u246c\n\u0280\7\u0280\u246e\n\u0280"+
		"\f\u0280\16\u0280\u2471\13\u0280\3\u0280\3\u0280\3\u0280\3\u0280\3\u0280"+
		"\5\u0280\u2478\n\u0280\3\u0281\3\u0281\3\u0281\5\u0281\u247d\n\u0281\3"+
		"\u0282\3\u0282\3\u0282\3\u0282\3\u0283\3\u0283\3\u0283\5\u0283\u2486\n"+
		"\u0283\3\u0283\3\u0283\3\u0283\3\u0284\3\u0284\3\u0284\3\u0284\3\u0284"+
		"\3\u0284\3\u0284\5\u0284\u2492\n\u0284\3\u0285\3\u0285\3\u0285\2\2\u0286"+
		"\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFH"+
		"JLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c"+
		"\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4"+
		"\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc"+
		"\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4"+
		"\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec"+
		"\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104"+
		"\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c"+
		"\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134"+
		"\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c"+
		"\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164"+
		"\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c"+
		"\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192\u0194"+
		"\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac"+
		"\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4"+
		"\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc"+
		"\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4"+
		"\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208\u020a\u020c"+
		"\u020e\u0210\u0212\u0214\u0216\u0218\u021a\u021c\u021e\u0220\u0222\u0224"+
		"\u0226\u0228\u022a\u022c\u022e\u0230\u0232\u0234\u0236\u0238\u023a\u023c"+
		"\u023e\u0240\u0242\u0244\u0246\u0248\u024a\u024c\u024e\u0250\u0252\u0254"+
		"\u0256\u0258\u025a\u025c\u025e\u0260\u0262\u0264\u0266\u0268\u026a\u026c"+
		"\u026e\u0270\u0272\u0274\u0276\u0278\u027a\u027c\u027e\u0280\u0282\u0284"+
		"\u0286\u0288\u028a\u028c\u028e\u0290\u0292\u0294\u0296\u0298\u029a\u029c"+
		"\u029e\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0\u02b2\u02b4"+
		"\u02b6\u02b8\u02ba\u02bc\u02be\u02c0\u02c2\u02c4\u02c6\u02c8\u02ca\u02cc"+
		"\u02ce\u02d0\u02d2\u02d4\u02d6\u02d8\u02da\u02dc\u02de\u02e0\u02e2\u02e4"+
		"\u02e6\u02e8\u02ea\u02ec\u02ee\u02f0\u02f2\u02f4\u02f6\u02f8\u02fa\u02fc"+
		"\u02fe\u0300\u0302\u0304\u0306\u0308\u030a\u030c\u030e\u0310\u0312\u0314"+
		"\u0316\u0318\u031a\u031c\u031e\u0320\u0322\u0324\u0326\u0328\u032a\u032c"+
		"\u032e\u0330\u0332\u0334\u0336\u0338\u033a\u033c\u033e\u0340\u0342\u0344"+
		"\u0346\u0348\u034a\u034c\u034e\u0350\u0352\u0354\u0356\u0358\u035a\u035c"+
		"\u035e\u0360\u0362\u0364\u0366\u0368\u036a\u036c\u036e\u0370\u0372\u0374"+
		"\u0376\u0378\u037a\u037c\u037e\u0380\u0382\u0384\u0386\u0388\u038a\u038c"+
		"\u038e\u0390\u0392\u0394\u0396\u0398\u039a\u039c\u039e\u03a0\u03a2\u03a4"+
		"\u03a6\u03a8\u03aa\u03ac\u03ae\u03b0\u03b2\u03b4\u03b6\u03b8\u03ba\u03bc"+
		"\u03be\u03c0\u03c2\u03c4\u03c6\u03c8\u03ca\u03cc\u03ce\u03d0\u03d2\u03d4"+
		"\u03d6\u03d8\u03da\u03dc\u03de\u03e0\u03e2\u03e4\u03e6\u03e8\u03ea\u03ec"+
		"\u03ee\u03f0\u03f2\u03f4\u03f6\u03f8\u03fa\u03fc\u03fe\u0400\u0402\u0404"+
		"\u0406\u0408\u040a\u040c\u040e\u0410\u0412\u0414\u0416\u0418\u041a\u041c"+
		"\u041e\u0420\u0422\u0424\u0426\u0428\u042a\u042c\u042e\u0430\u0432\u0434"+
		"\u0436\u0438\u043a\u043c\u043e\u0440\u0442\u0444\u0446\u0448\u044a\u044c"+
		"\u044e\u0450\u0452\u0454\u0456\u0458\u045a\u045c\u045e\u0460\u0462\u0464"+
		"\u0466\u0468\u046a\u046c\u046e\u0470\u0472\u0474\u0476\u0478\u047a\u047c"+
		"\u047e\u0480\u0482\u0484\u0486\u0488\u048a\u048c\u048e\u0490\u0492\u0494"+
		"\u0496\u0498\u049a\u049c\u049e\u04a0\u04a2\u04a4\u04a6\u04a8\u04aa\u04ac"+
		"\u04ae\u04b0\u04b2\u04b4\u04b6\u04b8\u04ba\u04bc\u04be\u04c0\u04c2\u04c4"+
		"\u04c6\u04c8\u04ca\u04cc\u04ce\u04d0\u04d2\u04d4\u04d6\u04d8\u04da\u04dc"+
		"\u04de\u04e0\u04e2\u04e4\u04e6\u04e8\u04ea\u04ec\u04ee\u04f0\u04f2\u04f4"+
		"\u04f6\u04f8\u04fa\u04fc\u04fe\u0500\u0502\u0504\u0506\u0508\2_\3\2\u00b7"+
		"\u00b8\3\2\678\5\2\u014e\u014e\u0160\u0160\u0349\u0349\4\2\u0144\u0144"+
		"\u01aa\u01aa\4\2pp\u011f\u011f\4\2\u00a2\u00a2\u0115\u0115\4\2ZZ\u0290"+
		"\u0290\3\2\u00de\u00df\4\2\u0162\u0162\u0199\u0199\4\2XX\u0299\u0299\4"+
		"\2\u009b\u009b\u00d2\u00d2\4\2^^jj\4\2,,\u02a4\u02a4\3\2\u02a1\u02a3\4"+
		"\2~~\u02a0\u02a0\6\2~~\u010c\u010c\u01d6\u01d6\u02a0\u02a0\5\2nn\u0291"+
		"\u0298\u029a\u029f\b\2\u026d\u026d\u0271\u0273\u0279\u0279\u027c\u0280"+
		"\u028b\u028c\u028e\u028e\16\2\u01e6\u01e6\u025f\u0261\u0267\u026a\u026c"+
		"\u026c\u026e\u0270\u0275\u0275\u0277\u0278\u027a\u027a\u0281\u0287\u0289"+
		"\u0289\u028d\u028d\u028f\u028f\5\2\u0262\u0266\u0276\u0276\u027b\u027b"+
		"\4\2QQSS\4\2\u022b\u022b\u024c\u024c\4\2\u00a5\u00a5\u0135\u0135\4\2)"+
		")\u00e5\u00e5\4\2\u0116\u0116\u0129\u0129\5\2..\u0254\u0254\u0256\u0257"+
		"\4\2ee\u0253\u0253\4\2AA\u00b5\u00b5\4\2hh\u01df\u01df\5\2))\u00c9\u00c9"+
		"\u01fd\u01fd\4\2\u00c9\u00c9\u01fd\u01fd\5\2\u0161\u0161\u02c9\u02c9\u037e"+
		"\u037e\4\2\u00c8\u00c8\u01d1\u01d1\3\2\u024e\u024f\5\2\u009b\u009b\u00a1"+
		"\u00a1\u00d9\u00d9\4\2\u0117\u0117\u0198\u0198\5\2\u01ba\u01bb\u01bd\u01bd"+
		"\u01c9\u01c9\6\2\u01ba\u01bb\u01bd\u01bd\u01c4\u01c4\u01c9\u01c9\7\2\u01ba"+
		"\u01bb\u01bd\u01bd\u01c4\u01c4\u01c9\u01c9\u01ce\u01ce\7\2\u01ba\u01bb"+
		"\u01bd\u01bd\u01c4\u01c4\u01c9\u01c9\u01ed\u01ed\4\2\u01c4\u01c4\u01ce"+
		"\u01ce\4\2++hi\4\2++ii\4\2\u01c5\u01c5\u01d0\u01d0\4\2\u01be\u01bf\u03c2"+
		"\u03c2\4\2dd\u009f\u009f\3\2\u0240\u0241\3\2\u021f\u0220\7\2..\u010a\u010a"+
		"\u0129\u012a\u0221\u0221\u0228\u0228\4\2\31\31\u0127\u0127\6\2))\u00c9"+
		"\u00c9\u0127\u0127\u01d3\u01d3\5\2\u0177\u0177\u02ef\u02ef\u02f3\u02f3"+
		"\3\2EF\5\2\u02ee\u02ee\u0312\u0312\u0387\u0387\4\2\31\31\u0087\u0087\4"+
		"\2\u01f7\u01f7\u01ff\u01ff\4\2\u01d9\u01d9\u0246\u0246\4\2\u00ac\u00ac"+
		"\u0248\u0248\5\2::vv\u0215\u0215\4\2\31\31\u03cc\u03cc\4\2\u014e\u014e"+
		"\u0160\u0160\4\2\31\31\u01da\u01db\4\2\u0127\u0127\u03c2\u03c2\4\2\u009c"+
		"\u009c\u0162\u0162\3\2\b\r\4\2\16\22PP\4\2\u019f\u019f\u036c\u036c\4\2"+
		"\u00c6\u00c6\u0181\u0181\n\2`a\u0097\u0098\u00c0\u00c1\u00c4\u00c5\u0110"+
		"\u0111\u0149\u014a\u0172\u0172\u032f\u032f\4\2\u0087\u0087\u00af\u00af"+
		"\17\2\u014d\u014d\u014f\u014f\u0154\u015c\u015e\u015e\u0165\u0165\u016e"+
		"\u016e\u0171\u0171\u017d\u017f\u019b\u019e\u01a4\u01a8\u01ac\u01ac\u032b"+
		"\u032b\u032e\u032e\3\2\u0187\u0190\4\2\u0182\u0182\u0193\u0193\25\2EE"+
		"PPUU`amm\u0097\u0097\u00a3\u00a3\u00b2\u00b2\u00c0\u00c0\u00c4\u00c4\u00f7"+
		"\u00f7\u00ff\u00ff\u0110\u0110\u012e\u012e\u0137\u0137\u0148\u0149\u02be"+
		"\u032a\u032c\u032d\u032f\u039b\3\2\u03c3\u03cb\3\2\u039c\u03c2\4\2\u00d6"+
		"\u00d6\u014c\u014c\5\2))..\u011a\u011a\4\2..\u011a\u011a\4\2\u0152\u0153"+
		"\u0179\u0179\5\2\u0150\u0150\u0173\u0173\u0196\u0196\3\2\30\32\5\2\u008b"+
		"\u008b\u00b2\u00b2\u00ff\u00ff\3\2\u01b0\u01b1\4\2\u0086\u0086\u00d1\u00d1"+
		"\3\2\31\32\4\2YY\u0102\u0102\4\2))jj\4\2\u010a\u010a\u0193\u0193\5\2\u0134"+
		"\u0134\u0162\u0162\u0199\u0199\5\2{{\u00a4\u00a4\u0131\u0131\4\2\u0087"+
		"\u0087\u00c6\u00c6\f\2 \u00c1\u00c3\u0155\u0158\u0274\u0276\u02bd\u032f"+
		"\u032f\u03a4\u03a4\u03b0\u03b0\u03b7\u03b8\u03bc\u03be\u03c1\u03c2\2\u29eb"+
		"\2\u0511\3\2\2\2\4\u0514\3\2\2\2\6\u0569\3\2\2\2\b\u056b\3\2\2\2\n\u056d"+
		"\3\2\2\2\f\u056f\3\2\2\2\16\u0575\3\2\2\2\20\u0581\3\2\2\2\22\u0589\3"+
		"\2\2\2\24\u0591\3\2\2\2\26\u0593\3\2\2\2\30\u059b\3\2\2\2\32\u059d\3\2"+
		"\2\2\34\u05ab\3\2\2\2\36\u05c8\3\2\2\2 \u05de\3\2\2\2\"\u05e6\3\2\2\2"+
		"$\u05ee\3\2\2\2&\u05f6\3\2\2\2(\u05fe\3\2\2\2*\u0606\3\2\2\2,\u060e\3"+
		"\2\2\2.\u0622\3\2\2\2\60\u062d\3\2\2\2\62\u0636\3\2\2\2\64\u0640\3\2\2"+
		"\2\66\u0656\3\2\2\28\u065a\3\2\2\2:\u0679\3\2\2\2<\u067c\3\2\2\2>\u06ba"+
		"\3\2\2\2@\u06be\3\2\2\2B\u06cb\3\2\2\2D\u06d4\3\2\2\2F\u06e7\3\2\2\2H"+
		"\u06f4\3\2\2\2J\u06f6\3\2\2\2L\u070a\3\2\2\2N\u071e\3\2\2\2P\u0732\3\2"+
		"\2\2R\u0746\3\2\2\2T\u075d\3\2\2\2V\u0790\3\2\2\2X\u079a\3\2\2\2Z\u07ad"+
		"\3\2\2\2\\\u07c3\3\2\2\2^\u07dc\3\2\2\2`\u07e0\3\2\2\2b\u07e8\3\2\2\2"+
		"d\u080e\3\2\2\2f\u0870\3\2\2\2h\u0879\3\2\2\2j\u087e\3\2\2\2l\u0892\3"+
		"\2\2\2n\u089f\3\2\2\2p\u08a9\3\2\2\2r\u08b9\3\2\2\2t\u08d6\3\2\2\2v\u08f1"+
		"\3\2\2\2x\u090d\3\2\2\2z\u0923\3\2\2\2|\u092e\3\2\2\2~\u0942\3\2\2\2\u0080"+
		"\u0949\3\2\2\2\u0082\u094b\3\2\2\2\u0084\u0954\3\2\2\2\u0086\u095a\3";
	private static final String _serializedATNSegment1 =
		"\2\2\2\u0088\u0964\3\2\2\2\u008a\u096d\3\2\2\2\u008c\u0975\3\2\2\2\u008e"+
		"\u098b\3\2\2\2\u0090\u098f\3\2\2\2\u0092\u0997\3\2\2\2\u0094\u09ae\3\2"+
		"\2\2\u0096\u09b4\3\2\2\2\u0098\u09bb\3\2\2\2\u009a\u09ce\3\2\2\2\u009c"+
		"\u09d8\3\2\2\2\u009e\u09ee\3\2\2\2\u00a0\u09f0\3\2\2\2\u00a2\u09fa\3\2"+
		"\2\2\u00a4\u09fd\3\2\2\2\u00a6\u0a39\3\2\2\2\u00a8\u0a5c\3\2\2\2\u00aa"+
		"\u0a67\3\2\2\2\u00ac\u0a98\3\2\2\2\u00ae\u0aa8\3\2\2\2\u00b0\u0aad\3\2"+
		"\2\2\u00b2\u0aaf\3\2\2\2\u00b4\u0abe\3\2\2\2\u00b6\u0ad9\3\2\2\2\u00b8"+
		"\u0af8\3\2\2\2\u00ba\u0b2a\3\2\2\2\u00bc\u0b4c\3\2\2\2\u00be\u0b6b\3\2"+
		"\2\2\u00c0\u0b8d\3\2\2\2\u00c2\u0bac\3\2\2\2\u00c4\u0bc5\3\2\2\2\u00c6"+
		"\u0bdf\3\2\2\2\u00c8\u0c05\3\2\2\2\u00ca\u0c24\3\2\2\2\u00cc\u0c5b\3\2"+
		"\2\2\u00ce\u0c63\3\2\2\2\u00d0\u0c8c\3\2\2\2\u00d2\u0cb0\3\2\2\2\u00d4"+
		"\u0cb2\3\2\2\2\u00d6\u0cb4\3\2\2\2\u00d8\u0cb6\3\2\2\2\u00da\u0cb8\3\2"+
		"\2\2\u00dc\u0cba\3\2\2\2\u00de\u0cc0\3\2\2\2\u00e0\u0cd2\3\2\2\2\u00e2"+
		"\u0cd4\3\2\2\2\u00e4\u0cd8\3\2\2\2\u00e6\u0cea\3\2\2\2\u00e8\u0cec\3\2"+
		"\2\2\u00ea\u0cf0\3\2\2\2\u00ec\u0cf2\3\2\2\2\u00ee\u0cff\3\2\2\2\u00f0"+
		"\u0d05\3\2\2\2\u00f2\u0d07\3\2\2\2\u00f4\u0d09\3\2\2\2\u00f6\u0d1a\3\2"+
		"\2\2\u00f8\u0d20\3\2\2\2\u00fa\u0d34\3\2\2\2\u00fc\u0d48\3\2\2\2\u00fe"+
		"\u0d59\3\2\2\2\u0100\u0d5d\3\2\2\2\u0102\u0d6a\3\2\2\2\u0104\u0d6c\3\2"+
		"\2\2\u0106\u0d7f\3\2\2\2\u0108\u0d81\3\2\2\2\u010a\u0d90\3\2\2\2\u010c"+
		"\u0d9e\3\2\2\2\u010e\u0da1\3\2\2\2\u0110\u0dad\3\2\2\2\u0112\u0dbb\3\2"+
		"\2\2\u0114\u0dbf\3\2\2\2\u0116\u0dc3\3\2\2\2\u0118\u0dd1\3\2\2\2\u011a"+
		"\u0ddc\3\2\2\2\u011c\u0de4\3\2\2\2\u011e\u0dff\3\2\2\2\u0120\u0e01\3\2"+
		"\2\2\u0122\u0e04\3\2\2\2\u0124\u0e07\3\2\2\2\u0126\u0e0a\3\2\2\2\u0128"+
		"\u0e0d\3\2\2\2\u012a\u0e12\3\2\2\2\u012c\u0e17\3\2\2\2\u012e\u0e1c\3\2"+
		"\2\2\u0130\u0e1f\3\2\2\2\u0132\u0e22\3\2\2\2\u0134\u0e25\3\2\2\2\u0136"+
		"\u0e2d\3\2\2\2\u0138\u0e30\3\2\2\2\u013a\u0e34\3\2\2\2\u013c\u0e39\3\2"+
		"\2\2\u013e\u0e3e\3\2\2\2\u0140\u0e41\3\2\2\2\u0142\u0e4a\3\2\2\2\u0144"+
		"\u0e4d\3\2\2\2\u0146\u0e52\3\2\2\2\u0148\u0e65\3\2\2\2\u014a\u0e67\3\2"+
		"\2\2\u014c\u0e82\3\2\2\2\u014e\u0e84\3\2\2\2\u0150\u0e8e\3\2\2\2\u0152"+
		"\u0e90\3\2\2\2\u0154\u0ea6\3\2\2\2\u0156\u0eb7\3\2\2\2\u0158\u0eb9\3\2"+
		"\2\2\u015a\u0ed0\3\2\2\2\u015c\u0ed9\3\2\2\2\u015e\u0edb\3\2\2\2\u0160"+
		"\u0f02\3\2\2\2\u0162\u0f12\3\2\2\2\u0164\u0f1a\3\2\2\2\u0166\u0f21\3\2"+
		"\2\2\u0168\u0f31\3\2\2\2\u016a\u0f3f\3\2\2\2\u016c\u0f44\3\2\2\2\u016e"+
		"\u0f51\3\2\2\2\u0170\u0f53\3\2\2\2\u0172\u0f70\3\2\2\2\u0174\u0f77\3\2"+
		"\2\2\u0176\u0f7c\3\2\2\2\u0178\u0f7f\3\2\2\2\u017a\u0f82\3\2\2\2\u017c"+
		"\u0f86\3\2\2\2\u017e\u0f8b\3\2\2\2\u0180\u0f8e\3\2\2\2\u0182\u0f92\3\2"+
		"\2\2\u0184\u0f98\3\2\2\2\u0186\u0f9b\3\2\2\2\u0188\u0f9e\3\2\2\2\u018a"+
		"\u0fa1\3\2\2\2\u018c\u0fa4\3\2\2\2\u018e\u0fb1\3\2\2\2\u0190\u0fb5\3\2"+
		"\2\2\u0192\u0fb8\3\2\2\2\u0194\u0fc0\3\2\2\2\u0196\u0fc4\3\2\2\2\u0198"+
		"\u0fca\3\2\2\2\u019a\u0fda\3\2\2\2\u019c\u0fdc\3\2\2\2\u019e\u0fe1\3\2"+
		"\2\2\u01a0\u0ff5\3\2\2\2\u01a2\u1008\3\2\2\2\u01a4\u100f\3\2\2\2\u01a6"+
		"\u101c\3\2\2\2\u01a8\u102f\3\2\2\2\u01aa\u1035\3\2\2\2\u01ac\u1041\3\2"+
		"\2\2\u01ae\u1051\3\2\2\2\u01b0\u1055\3\2\2\2\u01b2\u108a\3\2\2\2\u01b4"+
		"\u108c\3\2\2\2\u01b6\u1094\3\2\2\2\u01b8\u109b\3\2\2\2\u01ba\u10a1\3\2"+
		"\2\2\u01bc\u10a4\3\2\2\2\u01be\u10a7\3\2\2\2\u01c0\u10aa\3\2\2\2\u01c2"+
		"\u10ad\3\2\2\2\u01c4\u10b0\3\2\2\2\u01c6\u10b4\3\2\2\2\u01c8\u10b8\3\2"+
		"\2\2\u01ca\u10d3\3\2\2\2\u01cc\u10d5\3\2\2\2\u01ce\u10e2\3\2\2\2\u01d0"+
		"\u10ea\3\2\2\2\u01d2\u10ec\3\2\2\2\u01d4\u10f5\3\2\2\2\u01d6\u10fe\3\2"+
		"\2\2\u01d8\u110a\3\2\2\2\u01da\u110d\3\2\2\2\u01dc\u1118\3\2\2\2\u01de"+
		"\u111e\3\2\2\2\u01e0\u1121\3\2\2\2\u01e2\u1126\3\2\2\2\u01e4\u1129\3\2"+
		"\2\2\u01e6\u112d\3\2\2\2\u01e8\u1131\3\2\2\2\u01ea\u1138\3\2\2\2\u01ec"+
		"\u113a\3\2\2\2\u01ee\u1143\3\2\2\2\u01f0\u114e\3\2\2\2\u01f2\u1155\3\2"+
		"\2\2\u01f4\u1159\3\2\2\2\u01f6\u115d\3\2\2\2\u01f8\u116c\3\2\2\2\u01fa"+
		"\u116e\3\2\2\2\u01fc\u1172\3\2\2\2\u01fe\u1177\3\2\2\2\u0200\u117b\3\2"+
		"\2\2\u0202\u117f\3\2\2\2\u0204\u1183\3\2\2\2\u0206\u1187\3\2\2\2\u0208"+
		"\u118a\3\2\2\2\u020a\u1192\3\2\2\2\u020c\u11cb\3\2\2\2\u020e\u11e5\3\2"+
		"\2\2\u0210\u11fa\3\2\2\2\u0212\u11fc\3\2\2\2\u0214\u1201\3\2\2\2\u0216"+
		"\u1208\3\2\2\2\u0218\u120d\3\2\2\2\u021a\u1230\3\2\2\2\u021c\u1247\3\2"+
		"\2\2\u021e\u1265\3\2\2\2\u0220\u127d\3\2\2\2\u0222\u129f\3\2\2\2\u0224"+
		"\u12b4\3\2\2\2\u0226\u12b7\3\2\2\2\u0228\u12c1\3\2\2\2\u022a\u130c\3\2"+
		"\2\2\u022c\u1334\3\2\2\2\u022e\u1336\3\2\2\2\u0230\u1340\3\2\2\2\u0232"+
		"\u1342\3\2\2\2\u0234\u135c\3\2\2\2\u0236\u1374\3\2\2\2\u0238\u1381\3\2"+
		"\2\2\u023a\u1387\3\2\2\2\u023c\u138b\3\2\2\2\u023e\u1390\3\2\2\2\u0240"+
		"\u1392\3\2\2\2\u0242\u13a1\3\2\2\2\u0244\u13bc\3\2\2\2\u0246\u13df\3\2"+
		"\2\2\u0248\u13e1\3\2\2\2\u024a\u13e4\3\2\2\2\u024c\u13e7\3\2\2\2\u024e"+
		"\u13ea\3\2\2\2\u0250\u13ed\3\2\2\2\u0252\u13f1\3\2\2\2\u0254\u13f6\3\2"+
		"\2\2\u0256\u13fa\3\2\2\2\u0258\u1402\3\2\2\2\u025a\u1405\3\2\2\2\u025c"+
		"\u1408\3\2\2\2\u025e\u140b\3\2\2\2\u0260\u1415\3\2\2\2\u0262\u1417\3\2"+
		"\2\2\u0264\u141d\3\2\2\2\u0266\u143d\3\2\2\2\u0268\u1443\3\2\2\2\u026a"+
		"\u1445\3\2\2\2\u026c\u1448\3\2\2\2\u026e\u1465\3\2\2\2\u0270\u1467\3\2"+
		"\2\2\u0272\u1469\3\2\2\2\u0274\u1470\3\2\2\2\u0276\u14e3\3\2\2\2\u0278"+
		"\u1553\3\2\2\2\u027a\u15be\3\2\2\2\u027c\u15d2\3\2\2\2\u027e\u1632\3\2"+
		"\2\2\u0280\u1634\3\2\2\2\u0282\u1651\3\2\2\2\u0284\u1672\3\2\2\2\u0286"+
		"\u168b\3\2\2\2\u0288\u168f\3\2\2\2\u028a\u1698\3\2\2\2\u028c\u16a2\3\2"+
		"\2\2\u028e\u16a4\3\2\2\2\u0290\u16a7\3\2\2\2\u0292\u16ab\3\2\2\2\u0294"+
		"\u16b0\3\2\2\2\u0296\u16b8\3\2\2\2\u0298\u16be\3\2\2\2\u029a\u16c1\3\2"+
		"\2\2\u029c\u16c9\3\2\2\2\u029e\u16cc\3\2\2\2\u02a0\u16d6\3\2\2\2\u02a2"+
		"\u16d8\3\2\2\2\u02a4\u16db\3\2\2\2\u02a6\u16de\3\2\2\2\u02a8\u1717\3\2"+
		"\2\2\u02aa\u17a0\3\2\2\2\u02ac\u17ba\3\2\2\2\u02ae\u17d0\3\2\2\2\u02b0"+
		"\u182a\3\2\2\2\u02b2\u183b\3\2\2\2\u02b4\u1873\3\2\2\2\u02b6\u1880\3\2"+
		"\2\2\u02b8\u1882\3\2\2\2\u02ba\u1885\3\2\2\2\u02bc\u1888\3\2\2\2\u02be"+
		"\u1890\3\2\2\2\u02c0\u1892\3\2\2\2\u02c2\u18a9\3\2\2\2\u02c4\u18b6\3\2"+
		"\2\2\u02c6\u18ba\3\2\2\2\u02c8\u18bd\3\2\2\2\u02ca\u18c0\3\2\2\2\u02cc"+
		"\u18d2\3\2\2\2\u02ce\u18db\3\2\2\2\u02d0\u18e5\3\2\2\2\u02d2\u18ed\3\2"+
		"\2\2\u02d4\u18fb\3\2\2\2\u02d6\u18fd\3\2\2\2\u02d8\u192a\3\2\2\2\u02da"+
		"\u193a\3\2\2\2\u02dc\u193c\3\2\2\2\u02de\u1944\3\2\2\2\u02e0\u1948\3\2"+
		"\2\2\u02e2\u1957\3\2\2\2\u02e4\u1965\3\2\2\2\u02e6\u1976\3\2\2\2\u02e8"+
		"\u197a\3\2\2\2\u02ea\u1986\3\2\2\2\u02ec\u198a\3\2\2\2\u02ee\u1991\3\2"+
		"\2\2\u02f0\u19b5\3\2\2\2\u02f2\u19b7\3\2\2\2\u02f4\u19c5\3\2\2\2\u02f6"+
		"\u19d0\3\2\2\2\u02f8\u19d4\3\2\2\2\u02fa\u19e9\3\2\2\2\u02fc\u19eb\3\2"+
		"\2\2\u02fe\u19f4\3\2\2\2\u0300\u1a0c\3\2\2\2\u0302\u1a0e\3\2\2\2\u0304"+
		"\u1a18\3\2\2\2\u0306\u1a1d\3\2\2\2\u0308\u1a21\3\2\2\2\u030a\u1a2b\3\2"+
		"\2\2\u030c\u1a36\3\2\2\2\u030e\u1a38\3\2\2\2\u0310\u1a63\3\2\2\2\u0312"+
		"\u1a65\3\2\2\2\u0314\u1a69\3\2\2\2\u0316\u1ade\3\2\2\2\u0318\u1ae2\3\2"+
		"\2\2\u031a\u1aec\3\2\2\2\u031c\u1aff\3\2\2\2\u031e\u1b01\3\2\2\2\u0320"+
		"\u1b1e\3\2\2\2\u0322\u1b20\3\2\2\2\u0324\u1b22\3\2\2\2\u0326\u1b26\3\2"+
		"\2\2\u0328\u1b28\3\2\2\2\u032a\u1b3b\3\2\2\2\u032c\u1b3f\3\2\2\2\u032e"+
		"\u1b61\3\2\2\2\u0330\u1b77\3\2\2\2\u0332\u1ba7\3\2\2\2\u0334\u1bae\3\2"+
		"\2\2\u0336\u1bcf\3\2\2\2\u0338\u1bd6\3\2\2\2\u033a\u1bd8\3\2\2\2\u033c"+
		"\u1bef\3\2\2\2\u033e\u1c0c\3\2\2\2\u0340\u1c0e\3\2\2\2\u0342\u1c14\3\2"+
		"\2\2\u0344\u1c16\3\2\2\2\u0346\u1c19\3\2\2\2\u0348\u1c1f\3\2\2\2\u034a"+
		"\u1c24\3\2\2\2\u034c\u1c2a\3\2\2\2\u034e\u1c32\3\2\2\2\u0350\u1c36\3\2"+
		"\2\2\u0352\u1c40\3\2\2\2\u0354\u1c42\3\2\2\2\u0356\u1c48\3\2\2\2\u0358"+
		"\u1c6d\3\2\2\2\u035a\u1c71\3\2\2\2\u035c\u1c7d\3\2\2\2\u035e\u1c7f\3\2"+
		"\2\2\u0360\u1c81\3\2\2\2\u0362\u1c83\3\2\2\2\u0364\u1c85\3\2\2\2\u0366"+
		"\u1cb9\3\2\2\2\u0368\u1cbb\3\2\2\2\u036a\u1cbd\3\2\2\2\u036c\u1cc3\3\2"+
		"\2\2\u036e\u1ccc\3\2\2\2\u0370\u1cd1\3\2\2\2\u0372\u1ce4\3\2\2\2\u0374"+
		"\u1cf4\3\2\2\2\u0376\u1d00\3\2\2\2\u0378\u1d16\3\2\2\2\u037a\u1d1a\3\2"+
		"\2\2\u037c\u1d23\3\2\2\2\u037e\u1d28\3\2\2\2\u0380\u1d32\3\2\2\2\u0382"+
		"\u1d4b\3\2\2\2\u0384\u1d4d\3\2\2\2\u0386\u1d69\3\2\2\2\u0388\u1d6b\3\2"+
		"\2\2\u038a\u1d7f\3\2\2\2\u038c\u1d92\3\2\2\2\u038e\u1d94\3\2\2\2\u0390"+
		"\u1d9e\3\2\2\2\u0392\u1dae\3\2\2\2\u0394\u1db3\3\2\2\2\u0396\u1dc2\3\2"+
		"\2\2\u0398\u1ddf\3\2\2\2\u039a\u1de1\3\2\2\2\u039c\u1de7\3\2\2\2\u039e"+
		"\u1de9\3\2\2\2\u03a0\u1df2\3\2\2\2\u03a2\u1dfb\3\2\2\2\u03a4\u1e02\3\2"+
		"\2\2\u03a6\u1e07\3\2\2\2\u03a8\u1e10\3\2\2\2\u03aa\u1e12\3\2\2\2\u03ac"+
		"\u1e19\3\2\2\2\u03ae\u1e1f\3\2\2\2\u03b0\u1e25\3\2\2\2\u03b2\u1e27\3\2"+
		"\2\2\u03b4\u1e2a\3\2\2\2\u03b6\u1e2d\3\2\2\2\u03b8\u1e30\3\2\2\2\u03ba"+
		"\u1e33\3\2\2\2\u03bc\u1e36\3\2\2\2\u03be\u1e38\3\2\2\2\u03c0\u1e3a\3\2"+
		"\2\2\u03c2\u1e3c\3\2\2\2\u03c4\u1e62\3\2\2\2\u03c6\u1e69\3\2\2\2\u03c8"+
		"\u1e6b\3\2\2\2\u03ca\u1e6d\3\2\2\2\u03cc\u1e6f\3\2\2\2\u03ce\u1e77\3\2"+
		"\2\2\u03d0\u1e83\3\2\2\2\u03d2\u1e8a\3\2\2\2\u03d4\u1e9a\3\2\2\2\u03d6"+
		"\u1e9c\3\2\2\2\u03d8\u1ea0\3\2\2\2\u03da\u1ea2\3\2\2\2\u03dc\u1ea6\3\2"+
		"\2\2\u03de\u1eae\3\2\2\2\u03e0\u1ec2\3\2\2\2\u03e2\u1ec4\3\2\2\2\u03e4"+
		"\u1ec6\3\2\2\2\u03e6\u1ec8\3\2\2\2\u03e8\u1ed9\3\2\2\2\u03ea\u1edb\3\2"+
		"\2\2\u03ec\u1eea\3\2\2\2\u03ee\u1eec\3\2\2\2\u03f0\u1ef3\3\2\2\2\u03f2"+
		"\u1efc\3\2\2\2\u03f4\u1f19\3\2\2\2\u03f6\u1f25\3\2\2\2\u03f8\u1f2f\3\2"+
		"\2\2\u03fa\u1f31\3\2\2\2\u03fc\u1f51\3\2\2\2\u03fe\u1f53\3\2\2\2\u0400"+
		"\u1f59\3\2\2\2\u0402\u1f62\3\2\2\2\u0404\u1f6b\3\2\2\2\u0406\u1f70\3\2"+
		"\2\2\u0408\u1f86\3\2\2\2\u040a\u1f90\3\2\2\2\u040c\u1f9a\3\2\2\2\u040e"+
		"\u1fb0\3\2\2\2\u0410\u1fb2\3\2\2\2\u0412\u1fbd\3\2\2\2\u0414\u1fc2\3\2"+
		"\2\2\u0416\u2031\3\2\2\2\u0418\u2033\3\2\2\2\u041a\u203b\3\2\2\2\u041c"+
		"\u2042\3\2\2\2\u041e\u204a\3\2\2\2\u0420\u2051\3\2\2\2\u0422\u2055\3\2"+
		"\2\2\u0424\u2057\3\2\2\2\u0426\u2059\3\2\2\2\u0428\u205e\3\2\2\2\u042a"+
		"\u2062\3\2\2\2\u042c\u2064\3\2\2\2\u042e\u2066\3\2\2\2\u0430\u2068\3\2"+
		"\2\2\u0432\u206a\3\2\2\2\u0434\u206c\3\2\2\2\u0436\u2071\3\2\2\2\u0438"+
		"\u2080\3\2\2\2\u043a\u208a\3\2\2\2\u043c\u2096\3\2\2\2\u043e\u20a2\3\2"+
		"\2\2\u0440\u20a6\3\2\2\2\u0442\u20a8\3\2\2\2\u0444\u20aa\3\2\2\2\u0446"+
		"\u20b4\3\2\2\2\u0448\u20ba\3\2\2\2\u044a\u20bc\3\2\2\2\u044c\u20be\3\2"+
		"\2\2\u044e\u20c3\3\2\2\2\u0450\u20ca\3\2\2\2\u0452\u20d1\3\2\2\2\u0454"+
		"\u20d8\3\2\2\2\u0456\u20dc\3\2\2\2\u0458\u20de\3\2\2\2\u045a\u20e3\3\2"+
		"\2\2\u045c\u20f5\3\2\2\2\u045e\u2107\3\2\2\2\u0460\u210e\3\2\2\2\u0462"+
		"\u2115\3\2\2\2\u0464\u2121\3\2\2\2\u0466\u2128\3\2\2\2\u0468\u212c\3\2"+
		"\2\2\u046a\u212e\3\2\2\2\u046c\u2130\3\2\2\2\u046e\u2132\3\2\2\2\u0470"+
		"\u2134\3\2\2\2\u0472\u2136\3\2\2\2\u0474\u2138\3\2\2\2\u0476\u213a\3\2"+
		"\2\2\u0478\u213c\3\2\2\2\u047a\u213e\3\2\2\2\u047c\u2140\3\2\2\2\u047e"+
		"\u2142\3\2\2\2\u0480\u2144\3\2\2\2\u0482\u2146\3\2\2\2\u0484\u2148\3\2"+
		"\2\2\u0486\u214a\3\2\2\2\u0488\u214c\3\2\2\2\u048a\u214e\3\2\2\2\u048c"+
		"\u2150\3\2\2\2\u048e\u2152\3\2\2\2\u0490\u2154\3\2\2\2\u0492\u2156\3\2"+
		"\2\2\u0494\u215a\3\2\2\2\u0496\u215f\3\2\2\2\u0498\u2166\3\2\2\2\u049a"+
		"\u216a\3\2\2\2\u049c\u217d\3\2\2\2\u049e\u217f\3\2\2\2\u04a0\u2181\3\2"+
		"\2\2\u04a2\u218a\3\2\2\2\u04a4\u218c\3\2\2\2\u04a6\u2199\3\2\2\2\u04a8"+
		"\u21a9\3\2\2\2\u04aa\u2256\3\2\2\2\u04ac\u2258\3\2\2\2\u04ae\u2268\3\2"+
		"\2\2\u04b0\u2279\3\2\2\2\u04b2\u228a\3\2\2\2\u04b4\u22a3\3\2\2\2\u04b6"+
		"\u22a5\3\2\2\2\u04b8\u22c7\3\2\2\2\u04ba\u22ce\3\2\2\2\u04bc\u22df\3\2"+
		"\2\2\u04be\u22e8\3\2\2\2\u04c0\u22ec\3\2\2\2\u04c2\u2309\3\2\2\2\u04c4"+
		"\u231f\3\2\2\2\u04c6\u2321\3\2\2\2\u04c8\u2323\3\2\2\2\u04ca\u2325\3\2"+
		"\2\2\u04cc\u2327\3\2\2\2\u04ce\u232d\3\2\2\2\u04d0\u2330\3\2\2\2\u04d2"+
		"\u2337\3\2\2\2\u04d4\u233a\3\2\2\2\u04d6\u2342\3\2\2\2\u04d8\u2346\3\2"+
		"\2\2\u04da\u2360\3\2\2\2\u04dc\u2376\3\2\2\2\u04de\u2378\3\2\2\2\u04e0"+
		"\u238d\3\2\2\2\u04e2\u239c\3\2\2\2\u04e4\u23b9\3\2\2\2\u04e6\u23e0\3\2"+
		"\2\2\u04e8\u23ee\3\2\2\2\u04ea\u23fe\3\2\2\2\u04ec\u240b\3\2\2\2\u04ee"+
		"\u240f\3\2\2\2\u04f0\u2414\3\2\2\2\u04f2\u2421\3\2\2\2\u04f4\u2427\3\2"+
		"\2\2\u04f6\u242b\3\2\2\2\u04f8\u242e\3\2\2\2\u04fa\u2438\3\2\2\2\u04fc"+
		"\u2453\3\2\2\2\u04fe\u2462\3\2\2\2\u0500\u247c\3\2\2\2\u0502\u247e\3\2"+
		"\2\2\u0504\u2482\3\2\2\2\u0506\u2491\3\2\2\2\u0508\u2493\3\2\2\2\u050a"+
		"\u050c\5\4\3\2\u050b\u050a\3\2\2\2\u050c\u050f\3\2\2\2\u050d\u050b\3\2"+
		"\2\2\u050d\u050e\3\2\2\2\u050e\u0512\3\2\2\2\u050f\u050d\3\2\2\2\u0510"+
		"\u0512\7\2\2\3\u0511\u050d\3\2\2\2\u0511\u0510\3\2\2\2\u0512\3\3\2\2\2"+
		"\u0513\u0515\7}\2\2\u0514\u0513\3\2\2\2\u0514\u0515\3\2\2\2\u0515\u055b"+
		"\3\2\2\2\u0516\u055c\5\6\4\2\u0517\u055c\5\26\f\2\u0518\u055c\5\32\16"+
		"\2\u0519\u055c\5\34\17\2\u051a\u055c\5\36\20\2\u051b\u055c\5 \21\2\u051c"+
		"\u055c\5\"\22\2\u051d\u055c\5$\23\2\u051e\u055c\5&\24\2\u051f\u055c\5"+
		"(\25\2\u0520\u055c\5*\26\2\u0521\u055c\5,\27\2\u0522\u055c\5.\30\2\u0523"+
		"\u055c\5\60\31\2\u0524\u055c\5\62\32\2\u0525\u055c\5\64\33\2\u0526\u055c"+
		"\5\66\34\2\u0527\u055c\58\35\2\u0528\u055c\5:\36\2\u0529\u055c\5> \2\u052a"+
		"\u055c\5<\37\2\u052b\u055c\5@!\2\u052c\u055c\5B\"\2\u052d\u055c\5D#\2"+
		"\u052e\u055c\5F$\2\u052f\u055c\5H%\2\u0530\u055c\5R*\2\u0531\u055c\5T"+
		"+\2\u0532\u055c\5V,\2\u0533\u055c\5X-\2\u0534\u055c\5Z.\2\u0535\u055c"+
		"\5\\/\2\u0536\u055c\5^\60\2\u0537\u055c\5`\61\2\u0538\u055c\5b\62\2\u0539"+
		"\u055c\5d\63\2\u053a\u055c\5f\64\2\u053b\u055c\5h\65\2\u053c\u055c\5j"+
		"\66\2\u053d\u055c\5l\67\2\u053e\u055c\5n8\2\u053f\u055c\5p9\2\u0540\u055c"+
		"\5r:\2\u0541\u055c\5t;\2\u0542\u055c\5v<\2\u0543\u055c\5x=\2\u0544\u055c"+
		"\5|?\2\u0545\u055c\5z>\2\u0546\u055c\5~@\2\u0547\u055c\5\u0080A\2\u0548"+
		"\u055c\5\u008cG\2\u0549\u055c\5\u008eH\2\u054a\u055c\5\u0090I\2\u054b"+
		"\u055c\5\u0092J\2\u054c\u055c\5\u0094K\2\u054d\u055c\5\u0096L\2\u054e"+
		"\u055c\5\u0098M\2\u054f\u055c\5\u009aN\2\u0550\u055c\5\u009cO\2\u0551"+
		"\u055c\5\u009eP\2\u0552\u055c\5\u00a0Q\2\u0553\u055c\5\u00a2R\2\u0554"+
		"\u055c\5\u00a4S\2\u0555\u055c\5\u00a6T\2\u0556\u055c\5\u00a8U\2\u0557"+
		"\u055c\5\u00aaV\2\u0558\u055c\5\u00acW\2\u0559\u055c\5\u00aeX\2\u055a"+
		"\u055c\5\u00b0Y\2\u055b\u0516\3\2\2\2\u055b\u0517\3\2\2\2\u055b\u0518"+
		"\3\2\2\2\u055b\u0519\3\2\2\2\u055b\u051a\3\2\2\2\u055b\u051b\3\2\2\2\u055b"+
		"\u051c\3\2\2\2\u055b\u051d\3\2\2\2\u055b\u051e\3\2\2\2\u055b\u051f\3\2"+
		"\2\2\u055b\u0520\3\2\2\2\u055b\u0521\3\2\2\2\u055b\u0522\3\2\2\2\u055b"+
		"\u0523\3\2\2\2\u055b\u0524\3\2\2\2\u055b\u0525\3\2\2\2\u055b\u0526\3\2"+
		"\2\2\u055b\u0527\3\2\2\2\u055b\u0528\3\2\2\2\u055b\u0529\3\2\2\2\u055b"+
		"\u052a\3\2\2\2\u055b\u052b\3\2\2\2\u055b\u052c\3\2\2\2\u055b\u052d\3\2"+
		"\2\2\u055b\u052e\3\2\2\2\u055b\u052f\3\2\2\2\u055b\u0530\3\2\2\2\u055b"+
		"\u0531\3\2\2\2\u055b\u0532\3\2\2\2\u055b\u0533\3\2\2\2\u055b\u0534\3\2"+
		"\2\2\u055b\u0535\3\2\2\2\u055b\u0536\3\2\2\2\u055b\u0537\3\2\2\2\u055b"+
		"\u0538\3\2\2\2\u055b\u0539\3\2\2\2\u055b\u053a\3\2\2\2\u055b\u053b\3\2"+
		"\2\2\u055b\u053c\3\2\2\2\u055b\u053d\3\2\2\2\u055b\u053e\3\2\2\2\u055b"+
		"\u053f\3\2\2\2\u055b\u0540\3\2\2\2\u055b\u0541\3\2\2\2\u055b\u0542\3\2"+
		"\2\2\u055b\u0543\3\2\2\2\u055b\u0544\3\2\2\2\u055b\u0545\3\2\2\2\u055b"+
		"\u0546\3\2\2\2\u055b\u0547\3\2\2\2\u055b\u0548\3\2\2\2\u055b\u0549\3\2"+
		"\2\2\u055b\u054a\3\2\2\2\u055b\u054b\3\2\2\2\u055b\u054c\3\2\2\2\u055b"+
		"\u054d\3\2\2\2\u055b\u054e\3\2\2\2\u055b\u054f\3\2\2\2\u055b\u0550\3\2"+
		"\2\2\u055b\u0551\3\2\2\2\u055b\u0552\3\2\2\2\u055b\u0553\3\2\2\2\u055b"+
		"\u0554\3\2\2\2\u055b\u0555\3\2\2\2\u055b\u0556\3\2\2\2\u055b\u0557\3\2"+
		"\2\2\u055b\u0558\3\2\2\2\u055b\u0559\3\2\2\2\u055b\u055a\3\2\2\2\u055c"+
		"\u0563\3\2\2\2\u055d\u0564\7\25\2\2\u055e\u0560\7w\2\2\u055f\u0561\7\23"+
		"\2\2\u0560\u055f\3\2\2\2\u0560\u0561\3\2\2\2\u0561\u0564\3\2\2\2\u0562"+
		"\u0564\7\2\2\3\u0563\u055d\3\2\2\2\u0563\u055e\3\2\2\2\u0563\u0562\3\2"+
		"\2\2\u0564\5\3\2\2\2\u0565\u056a\5\u04e2\u0272\2\u0566\u056a\5\u04fa\u027e"+
		"\2\u0567\u056a\5\u04e6\u0274\2\u0568\u056a\5\u04e4\u0273\2\u0569\u0565"+
		"\3\2\2\2\u0569\u0566\3\2\2\2\u0569\u0567\3\2\2\2\u0569\u0568\3\2\2\2\u056a"+
		"\7\3\2\2\2\u056b\u056c\5\u0506\u0284\2\u056c\t\3\2\2\2\u056d\u056e\5\u0506"+
		"\u0284\2\u056e\13\3\2\2\2\u056f\u0570\5\u049a\u024e\2\u0570\r\3\2\2\2"+
		"\u0571\u0572\7\u01aa\2\2\u0572\u0576\7\u0096\2\2\u0573\u0574\7\u0144\2"+
		"\2\u0574\u0576\7\u0096\2\2\u0575\u0571\3\2\2\2\u0575\u0573\3\2\2\2\u0576"+
		"\17\3\2\2\2\u0577\u0578\7\u01aa\2\2\u0578\u0582\7\u00fc\2\2\u0579\u057a"+
		"\7\u0144\2\2\u057a\u057f\7\u00fc\2\2\u057b\u057c\7\u012c\2\2\u057c\u0580"+
		"\7\u01b5\2\2\u057d\u057e\7\u012c\2\2\u057e\u0580\7\u01b6\2\2\u057f\u057b"+
		"\3\2\2\2\u057f\u057d\3\2\2\2\u057f\u0580\3\2\2\2\u0580\u0582\3\2\2\2\u0581"+
		"\u0577\3\2\2\2\u0581\u0579\3\2\2\2\u0582\21\3\2\2\2\u0583\u0584\7\u01aa"+
		"\2\2\u0584\u0585\7\u010b\2\2\u0585\u058a\7\u01b7\2\2\u0586\u0587\7\u0144"+
		"\2\2\u0587\u0588\7\u010b\2\2\u0588\u058a\7\u01b7\2\2\u0589\u0583\3\2\2"+
		"\2\u0589\u0586\3\2\2\2\u058a\23\3\2\2\2\u058b\u058c\7\u00ca\2\2\u058c"+
		"\u0592\7\u00cb\2\2\u058d\u058e\7\u00ca\2\2\u058e\u058f\7\u00cb\2\2\u058f"+
		"\u0590\7\u0144\2\2\u0590\u0592\7d\2\2\u0591\u058b\3\2\2\2\u0591\u058d"+
		"\3\2\2\2\u0592\25\3\2\2\2\u0593\u0594\7*\2\2\u0594\u0595\5\b\5\2\u0595"+
		"\u0596\7]\2\2\u0596\u0597\7\u0088\2\2\u0597\u0598\7\u00fa\2\2\u0598\u0599"+
		"\7\u0117\2\2\u0599\u059a\5\30\r\2\u059a\27\3\2\2\2\u059b\u059c\5\u049a"+
		"\u024e\2\u059c\31\3\2\2\2\u059d\u059e\7,\2\2\u059e\u059f\7_\2\2\u059f"+
		"\u05a7\5\u046a\u0236\2\u05a0\u05a8\5\u0248\u0125\2\u05a1\u05a2\7\u009e"+
		"\2\2\u05a2\u05a8\5\u0488\u0245\2\u05a3\u05a4\7\u0121\2\2\u05a4\u05a8\5"+
		"\u048a\u0246\2\u05a5\u05a6\7D\2\2\u05a6\u05a8\5\u0426\u0214\2\u05a7\u05a0"+
		"\3\2\2\2\u05a7\u05a1\3\2\2\2\u05a7\u05a3\3\2\2\2\u05a7\u05a5\3\2\2\2\u05a8"+
		"\u05a9\3\2\2\2\u05a9\u05a7\3\2\2\2\u05a9\u05aa\3\2\2\2\u05aa\33\3\2\2"+
		"\2\u05ab\u05be\7,\2\2\u05ac\u05ad\7\u008c\2\2\u05ad\u05b9\5\u0496\u024c"+
		"\2\u05ae\u05af\7\3\2\2\u05af\u05b4\5\u0272\u013a\2\u05b0\u05b1\7\26\2"+
		"\2\u05b1\u05b3\5\u0272\u013a\2\u05b2\u05b0\3\2\2\2\u05b3\u05b6\3\2\2\2"+
		"\u05b4\u05b2\3\2\2\2\u05b4\u05b5\3\2\2\2\u05b5\u05b7\3\2\2\2\u05b6\u05b4"+
		"\3\2\2\2\u05b7\u05b8\7\4\2\2\u05b8\u05ba\3\2\2\2\u05b9\u05ae\3\2\2\2\u05b9"+
		"\u05ba\3\2\2\2\u05ba\u05bf\3\2\2\2\u05bb\u05bc\7\u011c\2\2\u05bc\u05bd"+
		"\7\u008c\2\2\u05bd\u05bf\5\u0498\u024d\2\u05be\u05ac\3\2\2\2\u05be\u05bb"+
		"\3\2\2\2\u05bf\u05c1\3\2\2\2\u05c0\u05c2\7\u00f9\2\2\u05c1\u05c0\3\2\2"+
		"\2\u05c1\u05c2\3\2\2\2\u05c2\u05c4\3\2\2\2\u05c3\u05c5\5\u0282\u0142\2"+
		"\u05c4\u05c3\3\2\2\2\u05c5\u05c6\3\2\2\2\u05c6\u05c4\3\2\2\2\u05c6\u05c7"+
		"\3\2\2\2\u05c7\35\3\2\2\2\u05c8\u05c9\7,\2\2\u05c9\u05ca\7\u009d\2\2\u05ca"+
		"\u05cc\5\u045e\u0230\2\u05cb\u05cd\5\u0244\u0123\2\u05cc\u05cb\3\2\2\2"+
		"\u05cc\u05cd\3\2\2\2\u05cd\u05d1\3\2\2\2\u05ce\u05d0\5\u0246\u0124\2\u05cf"+
		"\u05ce\3\2\2\2\u05d0\u05d3\3\2\2\2\u05d1\u05cf\3\2\2\2\u05d1\u05d2\3\2"+
		"\2\2\u05d2\u05dc\3\2\2\2\u05d3\u05d1\3\2\2\2\u05d4\u05d9\5\u0264\u0133"+
		"\2\u05d5\u05d6\7\26\2\2\u05d6\u05d8\5\u0264\u0133\2\u05d7\u05d5\3\2\2"+
		"\2\u05d8\u05db\3\2\2\2\u05d9\u05d7\3\2\2\2\u05d9\u05da\3\2\2\2\u05da\u05dd"+
		"\3\2\2\2\u05db\u05d9\3\2\2\2\u05dc\u05d4\3\2\2\2\u05dc\u05dd\3\2\2\2\u05dd"+
		"\37\3\2\2\2\u05de\u05df\7,\2\2\u05df\u05e0\7\u01de\2\2\u05e0\u05e4\5\u0460"+
		"\u0231\2\u05e1\u05e5\7\u01df\2\2\u05e2\u05e5\7h\2\2\u05e3\u05e5\5\u0244"+
		"\u0123\2\u05e4\u05e1\3\2\2\2\u05e4\u05e2\3\2\2\2\u05e4\u05e3\3\2\2\2\u05e5"+
		"!\3\2\2\2\u05e6\u05e7\7,\2\2\u05e7\u05e8\7\u01e0\2\2\u05e8\u05ec\5\u0462"+
		"\u0232\2\u05e9\u05ed\7\u01df\2\2\u05ea\u05ed\7h\2\2\u05eb\u05ed\5\u0244"+
		"\u0123\2\u05ec\u05e9\3\2\2\2\u05ec\u05ea\3\2\2\2\u05ec\u05eb\3\2\2\2\u05ed"+
		"#\3\2\2\2\u05ee\u05ef\7,\2\2\u05ef\u05f0\7\u00ec\2\2\u05f0\u05f2\5\u0464"+
		"\u0233\2\u05f1\u05f3\5\u0284\u0143\2\u05f2\u05f1\3\2\2\2\u05f3\u05f4\3"+
		"\2\2\2\u05f4\u05f2\3\2\2\2\u05f4\u05f5\3\2\2\2\u05f5%\3\2\2\2\u05f6\u05f7"+
		"\7,\2\2\u05f7\u05f8\7\u0116\2\2\u05f8\u05fa\5\u0466\u0234\2\u05f9\u05fb"+
		"\5\u028a\u0146\2\u05fa\u05f9\3\2\2\2\u05fb\u05fc\3\2\2\2\u05fc\u05fa\3"+
		"\2\2\2\u05fc\u05fd\3\2\2\2\u05fd\'\3\2\2\2\u05fe\u05ff\7,\2\2\u05ff\u0600"+
		"\7\u0121\2\2\u0600\u0602\5\u048a\u0246\2\u0601\u0603\5\u02a8\u0155\2\u0602"+
		"\u0601\3\2\2\2\u0603\u0604\3\2\2\2\u0604\u0602\3\2\2\2\u0604\u0605\3\2"+
		"\2\2\u0605)\3\2\2\2\u0606\u0607\7,\2\2\u0607\u0608\7\u0129\2\2\u0608\u060a"+
		"\5\u043c\u021f\2\u0609\u060b\5\u02aa\u0156\2\u060a\u0609\3\2\2\2\u060b"+
		"\u060c\3\2\2\2\u060c\u060a\3\2\2\2\u060c\u060d\3\2\2\2\u060d+\3\2\2\2"+
		"\u060e\u060f\7,\2\2\u060f\u0613\7\u012a\2\2\u0610\u0611\5\u046a\u0236"+
		"\2\u0611\u0612\7\23\2\2\u0612\u0614\3\2\2\2\u0613\u0610\3\2\2\2\u0613"+
		"\u0614\3\2\2\2\u0614\u0615\3\2\2\2\u0615\u0619\5\u046c\u0237\2\u0616\u0618"+
		"\5\u02ac\u0157\2\u0617\u0616\3\2\2\2\u0618\u061b\3\2\2\2\u0619\u0617\3"+
		"\2\2\2\u0619\u061a\3\2\2\2\u061a\u061d\3\2\2\2\u061b\u0619\3\2\2\2\u061c"+
		"\u061e\5\u02e2\u0172\2\u061d\u061c\3\2\2\2\u061d\u061e\3\2\2\2\u061e\u0620"+
		"\3\2\2\2\u061f\u0621\5\u02e8\u0175\2\u0620\u061f\3\2\2\2\u0620\u0621\3"+
		"\2\2\2\u0621-\3\2\2\2\u0622\u0623\7,\2\2\u0623\u0624\7\u012d\2\2\u0624"+
		"\u0625\5\u0438\u021d\2\u0625\u0626\7\23\2\2\u0626\u0627\3\2\2\2\u0627"+
		"\u0629\5\u0472\u023a\2\u0628\u062a\7\u00ca\2\2\u0629\u0628\3\2\2\2\u0629"+
		"\u062a\3\2\2\2\u062a\u062b\3\2\2\2\u062b\u062c\7\u01cc\2\2\u062c/\3\2"+
		"\2\2\u062d\u062e\7,\2\2\u062e\u062f\7\u0238\2\2\u062f\u0630\7\u0232\2"+
		"\2\u0630\u0632\5\u0474\u023b\2\u0631\u0633\5\u02b0\u0159\2\u0632\u0631"+
		"\3\2\2\2\u0633\u0634\3\2\2\2\u0634\u0632\3\2\2\2\u0634\u0635\3\2\2\2\u0635"+
		"\61\3\2\2\2\u0636\u0637\7,\2\2\u0637\u0638\7\u013d\2\2\u0638\u0639\5\u0446"+
		"\u0224\2\u0639\u063e\7\u01dd\2\2\u063a\u063b\7\u0135\2\2\u063b\u063c\7"+
		"\u01d2\2\2\u063c\u063d\7\u01d4\2\2\u063d\u063f\5\u026e\u0138\2\u063e\u063a"+
		"\3\2\2\2\u063e\u063f\3\2\2\2\u063f\63\3\2\2\2\u0640\u0643\7\63\2\2\u0641"+
		"\u0642\7\u00fa\2\2\u0642\u0644\7\u0117\2\2\u0643\u0641\3\2\2\2\u0643\u0644"+
		"\3\2\2\2\u0644\u0645\3\2\2\2\u0645\u0646\t\2\2\2\u0646\u0647\7\3\2\2\u0647"+
		"\u064c\5\30\r\2\u0648\u0649\7\26\2\2\u0649\u064b\5\30\r\2\u064a\u0648"+
		"\3\2\2\2\u064b\u064e\3\2\2\2\u064c\u064a\3\2\2\2\u064c\u064d\3\2\2\2\u064d"+
		"\u064f\3\2\2\2\u064e\u064c\3\2\2\2\u064f\u0650\7\4\2\2\u0650\u0651\7\u0144"+
		"\2\2\u0651\u0654\7\u00ec\2\2\u0652\u0655\5\u0464\u0233\2\u0653\u0655\5"+
		"\u049a\u024e\2\u0654\u0652\3\2\2\2\u0654\u0653\3\2\2\2\u0655\65\3\2\2"+
		"\2\u0656\u0657\7:\2\2\u0657\u0658\7c\2\2\u0658\u0659\7\u0239\2\2\u0659"+
		"\67\3\2\2\2\u065a\u065d\7?\2\2\u065b\u065e\5\u0464\u0233\2\u065c\u065e"+
		"\5\u049a\u024e\2\u065d\u065b\3\2\2\2\u065d\u065c\3\2\2\2\u065e\u065f\3"+
		"\2\2\2\u065f\u0675\7\3\2\2\u0660\u0665\5\u0366\u01b4\2\u0661\u0665\7\u00cb"+
		"\2\2\u0662\u0663\7\u0129\2\2\u0663\u0665\5\u043a\u021e\2\u0664\u0660\3"+
		"\2\2\2\u0664\u0661\3\2\2\2\u0664\u0662\3\2\2\2\u0665\u066f\3\2\2\2\u0666"+
		"\u066b\7\26\2\2\u0667\u066c\5\u0366\u01b4\2\u0668\u066c\7\u00cb\2\2\u0669"+
		"\u066a\7\u0129\2\2\u066a\u066c\5\u043a\u021e\2\u066b\u0667\3\2\2\2\u066b"+
		"\u0668\3\2\2\2\u066b\u0669\3\2\2\2\u066c\u066e\3\2\2\2\u066d\u0666\3\2"+
		"\2\2\u066e\u0671\3\2\2\2\u066f\u066d\3\2\2\2\u066f\u0670\3\2\2\2\u0670"+
		"\u0676\3\2\2\2\u0671\u066f\3\2\2\2\u0672\u0673\7\u0135\2\2\u0673\u0674"+
		"\7f\2\2\u0674\u0676\5\u049a\u024e\2\u0675\u0664\3\2\2\2\u0675\u0672\3"+
		"\2\2\2\u0676\u0677\3\2\2\2\u0677\u0678\7\4\2\2\u06789\3\2\2\2\u0679\u067a"+
		"\7I\2\2\u067a\u067b\5\b\5\2\u067b;\3\2\2\2\u067c\u067d\7N\2\2\u067d\u06b8"+
		"\7\u00d2\2\2\u067e\u06b3\5\u02ec\u0177\2\u067f\u0680\7M\2\2\u0680\u0681"+
		"\5\u043a\u021e\2\u0681\u0682\7\23\2\2\u0682\u0683\5\u0428\u0215\2\u0683"+
		"\u06b3\3\2\2\2\u0684\u0689\5\u02f0\u0179\2\u0685\u0686\7\u023a\2\2\u0686"+
		"\u068a\7\u023b\2\2\u0687\u0688\7\u023b\2\2\u0688\u068a\5\u045a\u022e\2"+
		"\u0689\u0685\3\2\2\2\u0689\u0687\3\2\2\2\u0689\u068a\3\2\2\2\u068a\u06b3"+
		"\3\2\2\2\u068b\u068c\7\u009d\2\2\u068c\u06b3\5\u045e\u0230\2\u068d\u068e"+
		"\7\u00db\2\2\u068e\u06b3\5\u0140\u00a1\2\u068f\u0690\7\u00e5\2\2\u0690"+
		"\u06b3\5\u044c\u0227\2\u0691\u0692\7\u00ec\2\2\u0692\u0697\5\u0464\u0233"+
		"\2\u0693\u0694\7\u023a\2\2\u0694\u0698\7\u023b\2\2\u0695\u0696\7\u023b"+
		"\2\2\u0696\u0698\5\u045a\u022e\2\u0697\u0693\3\2\2\2\u0697\u0695\3\2\2"+
		"\2\u0697\u0698\3\2\2\2\u0698\u06b3\3\2\2\2\u0699\u069a\7\u0100\2\2\u069a"+
		"\u06b3\5\u047a\u023e\2\u069b\u069c\7\u0116\2\2\u069c\u06b3\5\u0466\u0234"+
		"\2\u069d\u069e\7\u0129\2\2\u069e\u06b3\5\u043a\u021e\2\u069f\u06a0\7\u012d"+
		"\2\2\u06a0\u06a5\5\u0472\u023a\2\u06a1\u06a2\7\u023a\2\2\u06a2\u06a6\7"+
		"\u023b\2\2\u06a3\u06a4\7\u023b\2\2\u06a4\u06a6\5\u045a\u022e\2\u06a5\u06a1"+
		"\3\2\2\2\u06a5\u06a3\3\2\2\2\u06a5\u06a6\3\2\2\2\u06a6\u06b3\3\2\2\2\u06a7"+
		"\u06a8\7\u0238\2\2\u06a8\u06a9\7\u0232\2\2\u06a9\u06b3\5\u0474\u023b\2"+
		"\u06aa\u06ab\7\u012f\2\2\u06ab\u06b3\5\u044e\u0228\2\u06ac\u06ad\7\u01de"+
		"\2\2\u06ad\u06b3\5\u0460\u0231\2\u06ae\u06af\7\u01e0\2\2\u06af\u06b3\5"+
		"\u0462\u0232\2\u06b0\u06b1\7\u0139\2\2\u06b1\u06b3\5\u0450\u0229\2\u06b2"+
		"\u067e\3\2\2\2\u06b2\u067f\3\2\2\2\u06b2\u0684\3\2\2\2\u06b2\u068b\3\2"+
		"\2\2\u06b2\u068d\3\2\2\2\u06b2\u068f\3\2\2\2\u06b2\u0691\3\2\2\2\u06b2"+
		"\u0699\3\2\2\2\u06b2\u069b\3\2\2\2\u06b2\u069d\3\2\2\2\u06b2\u069f\3\2"+
		"\2\2\u06b2\u06a7\3\2\2\2\u06b2\u06aa\3\2\2\2\u06b2\u06ac\3\2\2\2\u06b2"+
		"\u06ae\3\2\2\2\u06b2\u06b0\3\2\2\2\u06b3\u06b4\3\2\2\2\u06b4\u06b5\7\u00a6"+
		"\2\2\u06b5\u06b6\7\30\2\2\u06b6\u06b9\3\2\2\2\u06b7\u06b9\5\u02ee\u0178"+
		"\2\u06b8\u06b2\3\2\2\2\u06b8\u06b7\3\2\2\2\u06b9=\3\2\2\2\u06ba\u06bc"+
		"\7O\2\2\u06bb\u06bd\7\u023d\2\2\u06bc\u06bb\3\2\2\2\u06bc\u06bd\3\2\2"+
		"\2\u06bd?\3\2\2\2\u06be\u06c9\7R\2\2\u06bf\u06c2\7\u012c\2\2\u06c0\u06c3"+
		"\5\u0436\u021c\2\u06c1\u06c3\5\u049a\u024e\2\u06c2\u06c0\3\2\2\2\u06c2"+
		"\u06c1\3\2\2\2\u06c3\u06c5\3\2\2\2\u06c4\u06c6\5\u0216\u010c\2\u06c5\u06c4"+
		"\3\2\2\2\u06c5\u06c6\3\2\2\2\u06c6\u06ca\3\2\2\2\u06c7\u06ca\7\u0213\2"+
		"\2\u06c8\u06ca\5\u0216\u010c\2\u06c9\u06bf\3\2\2\2\u06c9\u06c7\3\2\2\2"+
		"\u06c9\u06c8\3\2\2\2\u06c9\u06ca\3\2\2\2\u06caA\3\2\2\2\u06cb\u06cd\7"+
		"X\2\2\u06cc\u06ce\7\u00ef\2\2\u06cd\u06cc\3\2\2\2\u06cd\u06ce\3\2\2\2"+
		"\u06ce\u06cf\3\2\2\2\u06cf\u06d2\7\u023c\2\2\u06d0\u06d3\5\u0212\u010a"+
		"\2\u06d1\u06d3\5\u0214\u010b\2\u06d2\u06d0\3\2\2\2\u06d2\u06d1\3\2\2\2"+
		"\u06d3C\3\2\2\2\u06d4\u06d5\7X\2\2\u06d5\u06d6\t\3\2\2\u06d6\u06d7\7\u0129"+
		"\2\2\u06d7\u06d8\5\u043e\u0220\2\u06d8\u06da\7\u009b\2\2\u06d9\u06db\5"+
		"\u046a\u0236\2\u06da\u06d9\3\2\2\2\u06da\u06db\3\2\2\2\u06db\u06dc\3\2"+
		"\2\2\u06dc\u06dd\5\u046c\u0237\2\u06dd\u06de\7\u0122\2\2\u06de\u06e0\5"+
		"\u043a\u021e\2\u06df\u06e1\5\u0184\u00c3\2\u06e0\u06df\3\2\2\2\u06e0\u06e1"+
		"\3\2\2\2\u06e1\u06e2\3\2\2\2\u06e2\u06e3\7M\2\2\u06e3\u06e4\5\u0428\u0215"+
		"\2\u06e4\u06e5\7\u00de\2\2\u06e5\u06e6\7\31\2\2\u06e6E\3\2\2\2\u06e7\u06e8"+
		"\7X\2\2\u06e8\u06e9\7_\2\2\u06e9\u06ed\5\u046a\u0236\2\u06ea\u06ec\5\u02b2"+
		"\u015a\2\u06eb\u06ea\3\2\2\2\u06ec\u06ef\3\2\2\2\u06ed\u06eb\3\2\2\2\u06ed"+
		"\u06ee\3\2\2\2\u06eeG\3\2\2\2\u06ef\u06ed\3\2\2\2\u06f0\u06f5\5J&\2\u06f1"+
		"\u06f5\5L\'\2\u06f2\u06f5\5N(\2\u06f3\u06f5\5P)\2\u06f4\u06f0\3\2\2\2"+
		"\u06f4\u06f1\3\2\2\2\u06f4\u06f2\3\2\2\2\u06f4\u06f3\3\2\2\2\u06f5I\3"+
		"\2\2\2\u06f6\u06f7\7X\2\2\u06f7\u06f8\7\u008c\2\2\u06f8\u06f9\5\u0496"+
		"\u024c\2\u06f9\u0702\7\3\2\2\u06fa\u06ff\5\u01ac\u00d7\2\u06fb\u06fc\7"+
		"\26\2\2\u06fc\u06fe\5\u01ac\u00d7\2\u06fd\u06fb\3\2\2\2\u06fe\u0701\3"+
		"\2\2\2\u06ff\u06fd\3\2\2\2\u06ff\u0700\3\2\2\2\u0700\u0703\3\2\2\2\u0701"+
		"\u06ff\3\2\2\2\u0702\u06fa\3\2\2\2\u0702\u0703\3\2\2\2\u0703\u0704\3\2"+
		"\2\2\u0704\u0706\7\4\2\2\u0705\u0707\5\u01b2\u00da\2\u0706\u0705\3\2\2"+
		"\2\u0707\u0708\3\2\2\2\u0708\u0706\3\2\2\2\u0708\u0709\3\2\2\2\u0709K"+
		"\3\2\2\2\u070a\u070b\7X\2\2\u070b\u070c\7\u008c\2\2\u070c\u070d\5\u0496"+
		"\u024c\2\u070d\u0716\7\3\2\2\u070e\u0713\5\u01ac\u00d7\2\u070f\u0710\7"+
		"\26\2\2\u0710\u0712\5\u01ac\u00d7\2\u0711\u070f\3\2\2\2\u0712\u0715\3"+
		"\2\2\2\u0713\u0711\3\2\2\2\u0713\u0714\3\2\2\2\u0714\u0717\3\2\2\2\u0715"+
		"\u0713\3\2\2\2\u0716\u070e\3\2\2\2\u0716\u0717\3\2\2\2\u0717\u0718\3\2"+
		"\2\2\u0718\u071a\7\4\2\2\u0719\u071b\5\u020c\u0107\2\u071a\u0719\3\2\2"+
		"\2\u071b\u071c\3\2\2\2\u071c\u071a\3\2\2\2\u071c\u071d\3\2\2\2\u071dM"+
		"\3\2\2\2\u071e\u071f\7X\2\2\u071f\u0720\7\u008c\2\2\u0720\u0721\5\u0496"+
		"\u024c\2\u0721\u072a\7\3\2\2\u0722\u0727\5\u01ac\u00d7\2\u0723\u0724\7"+
		"\26\2\2\u0724\u0726\5\u01ac\u00d7\2\u0725\u0723\3\2\2\2\u0726\u0729\3"+
		"\2\2\2\u0727\u0725\3\2\2\2\u0727\u0728\3\2\2\2\u0728\u072b\3\2\2\2\u0729"+
		"\u0727\3\2\2\2\u072a\u0722\3\2\2\2\u072a\u072b\3\2\2\2\u072b\u072c\3\2"+
		"\2\2\u072c\u072e\7\4\2\2\u072d\u072f\5\u020e\u0108\2\u072e\u072d\3\2\2"+
		"\2\u072f\u0730\3\2\2\2\u0730\u072e\3\2\2\2\u0730\u0731\3\2\2\2\u0731O"+
		"\3\2\2\2\u0732\u0733\7X\2\2\u0733\u0734\7\u008c\2\2\u0734\u0735\5\u0496"+
		"\u024c\2\u0735\u073e\7\3\2\2\u0736\u073b\5\u01ae\u00d8\2\u0737\u0738\7"+
		"\26\2\2\u0738\u073a\5\u01ae\u00d8\2\u0739\u0737\3\2\2\2\u073a\u073d\3"+
		"\2\2\2\u073b\u0739\3\2\2\2\u073b\u073c\3\2\2\2\u073c\u073f\3\2\2\2\u073d"+
		"\u073b\3\2\2\2\u073e\u0736\3\2\2\2\u073e\u073f\3\2\2\2\u073f\u0740\3\2"+
		"\2\2\u0740\u0742\7\4\2\2\u0741\u0743\5\u0210\u0109\2\u0742\u0741\3\2\2"+
		"\2\u0743\u0744\3\2\2\2\u0744\u0742\3\2\2\2\u0744\u0745\3\2\2\2\u0745Q"+
		"\3\2\2\2\u0746\u0747\7X\2\2\u0747\u0748\7\u008f\2\2\u0748\u0749\7\u0243"+
		"\2\2\u0749\u074a\7\u0129\2\2\u074a\u0758\5\u043a\u021e\2\u074b\u074c\7"+
		"\3\2\2\u074c\u0751\5\u01a8\u00d5\2\u074d\u074e\7\26\2\2\u074e\u0750\5"+
		"\u01a8\u00d5\2\u074f\u074d\3\2\2\2\u0750\u0753\3\2\2\2\u0751\u074f\3\2"+
		"\2\2\u0751\u0752\3\2\2\2\u0752\u0754\3\2\2\2\u0753\u0751\3\2\2\2\u0754"+
		"\u0755\7\4\2\2\u0755\u0759\3\2\2\2\u0756\u0757\7\u00b3\2\2\u0757\u0759"+
		"\5\u043a\u021e\2\u0758\u074b\3\2\2\2\u0758\u0756\3\2\2\2\u0759\u075b\3"+
		"\2\2\2\u075a\u075c\5\u017e\u00c0\2\u075b\u075a\3\2\2\2\u075b\u075c\3\2"+
		"\2\2\u075cS\3\2\2\2\u075d\u0764\7X\2\2\u075e\u0762\7\u0132\2\2\u075f\u0760"+
		"\7\u0142\2\2\u0760\u0761\7\u00ca\2\2\u0761\u0763\7\u00cb\2\2\u0762\u075f"+
		"\3\2\2\2\u0762\u0763\3\2\2\2\u0763\u0765\3\2\2\2\u0764\u075e\3\2\2\2\u0764"+
		"\u0765\3\2\2\2\u0765\u0766\3\2\2\2\u0766\u0767\7\u009d\2\2\u0767\u0768"+
		"\5\u045e\u0230\2\u0768\u0788\7\u00d2\2\2\u0769\u076a\5\u043a\u021e\2\u076a"+
		"\u076d\7\3\2\2\u076b\u076e\5\u0428\u0215\2\u076c\u076e\5\u0368\u01b5\2"+
		"\u076d\u076b\3\2\2\2\u076d\u076c\3\2\2\2\u076e\u0770\3\2\2\2\u076f\u0771"+
		"\t\4\2\2\u0770\u076f\3\2\2\2\u0770\u0771\3\2\2\2\u0771\u077c\3\2\2\2\u0772"+
		"\u0775\7\26\2\2\u0773\u0776\5\u0428\u0215\2\u0774\u0776\5\u0368\u01b5"+
		"\2\u0775\u0773\3\2\2\2\u0775\u0774\3\2\2\2\u0776\u0778\3\2\2\2\u0777\u0779"+
		"\t\4\2\2\u0778\u0777\3\2\2\2\u0778\u0779\3\2\2\2\u0779\u077b\3\2\2\2\u077a"+
		"\u0772\3\2\2\2\u077b\u077e\3\2\2\2\u077c\u077a\3\2\2\2\u077c\u077d\3\2"+
		"\2\2\u077d\u0783\3\2\2\2\u077e\u077c\3\2\2\2\u077f\u0780\7\26\2\2\u0780"+
		"\u0781\7\u01b1\2\2\u0781\u0782\t\5\2\2\u0782\u0784\7\u020e\2\2\u0783\u077f"+
		"\3\2\2\2\u0783\u0784\3\2\2\2\u0784\u0785\3\2\2\2\u0785\u0786\7\4\2\2\u0786"+
		"\u0789\3\2\2\2\u0787\u0789\5\u043e\u0220\2\u0788\u0769\3\2\2\2\u0788\u0787"+
		"\3\2\2\2\u0789\u078d\3\2\2\2\u078a\u078c\5\u02b4\u015b\2\u078b\u078a\3"+
		"\2\2\2\u078c\u078f\3\2\2\2\u078d\u078b\3\2\2\2\u078d\u078e\3\2\2\2\u078e"+
		"U\3\2\2\2\u078f\u078d\3\2\2\2\u0790\u0791\7X\2\2\u0791\u0792\7\u0221\2"+
		"\2\u0792\u0793\7\u012a\2\2\u0793\u0797\5\u046c\u0237\2\u0794\u0796\5\u02b6"+
		"\u015c\2\u0795\u0794\3\2\2\2\u0796\u0799\3\2\2\2\u0797\u0795\3\2\2\2\u0797"+
		"\u0798\3\2\2\2\u0798W\3\2\2\2\u0799\u0797\3\2\2\2\u079a\u079b\7X\2\2\u079b"+
		"\u079c\7\u01de\2\2\u079c\u079d\5\u0460\u0231\2\u079d\u079e\7\u00d2\2\2"+
		"\u079e\u07a3\5\u043a\u021e\2\u079f\u07a1\7\61\2\2\u07a0\u079f\3\2\2\2"+
		"\u07a0\u07a1\3\2\2\2\u07a1\u07a2\3\2\2\2\u07a2\u07a4\5\u0434\u021b\2\u07a3"+
		"\u07a0\3\2\2\2\u07a3\u07a4\3\2\2\2\u07a4\u07a5\3\2\2\2\u07a5\u07a6\7\u0088"+
		"\2\2\u07a6\u07a7\7M\2\2\u07a7\u07a8\5\u0428\u0215\2\u07a8\u07a9\7\u00fc"+
		"\2\2\u07a9\u07ab\5\u03ea\u01f6\2\u07aa\u07ac\5\u025e\u0130\2\u07ab\u07aa"+
		"\3\2\2\2\u07ab\u07ac\3\2\2\2\u07acY\3\2\2\2\u07ad\u07ae\7X\2\2\u07ae\u07af"+
		"\7\u01e0\2\2\u07af\u07b0\5\u0462\u0232\2\u07b0\u07b1\7\u00d2\2\2\u07b1"+
		"\u07b6\5\u043a\u021e\2\u07b2\u07b4\7\61\2\2\u07b3\u07b2\3\2\2\2\u07b3"+
		"\u07b4\3\2\2\2\u07b4\u07b5\3\2\2\2\u07b5\u07b7\5\u0434\u021b\2\u07b6\u07b3"+
		"\3\2\2\2\u07b6\u07b7\3\2\2\2\u07b7\u07b8\3\2\2\2\u07b8\u07b9\7\u0088\2"+
		"\2\u07b9\u07ba\7\u0193\2\2\u07ba\u07bb\7\u0142\2\2\u07bb\u07bc\5\u03f2"+
		"\u01fa\2\u07bc\u07bd\7\u0202\2\2\u07bd\u07be\7\u0088\2\2\u07be\u07bf\7"+
		")\2\2\u07bf\u07c1\7\u01f6\2\2\u07c0\u07c2\5\u025e\u0130\2\u07c1\u07c0"+
		"\3\2\2\2\u07c1\u07c2\3\2\2\2\u07c2[\3\2\2\2\u07c3\u07c6\7X\2\2\u07c4\u07c5"+
		"\7\u00d6\2\2\u07c5\u07c7\7\u0350\2\2\u07c6\u07c4\3\2\2\2\u07c6\u07c7\3"+
		"\2\2\2\u07c7\u07c8\3\2\2\2\u07c8\u07c9\7\u00ec\2\2\u07c9\u07d5\5\u0464"+
		"\u0233\2\u07ca\u07cb\7\3\2\2\u07cb\u07d0\5\u01b0\u00d9\2\u07cc\u07cd\7"+
		"\26\2\2\u07cd\u07cf\5\u01b0\u00d9\2\u07ce\u07cc\3\2\2\2\u07cf\u07d2\3"+
		"\2\2\2\u07d0\u07ce\3\2\2\2\u07d0\u07d1\3\2\2\2\u07d1\u07d3\3\2\2\2\u07d2"+
		"\u07d0\3\2\2\2\u07d3\u07d4\7\4\2\2\u07d4\u07d6\3\2\2\2\u07d5\u07ca\3\2"+
		"\2\2\u07d5\u07d6\3\2\2\2\u07d6\u07d8\3\2\2\2\u07d7\u07d9\5\u0286\u0144"+
		"\2\u07d8\u07d7\3\2\2\2\u07d9\u07da\3\2\2\2\u07da\u07d8\3\2\2\2\u07da\u07db"+
		"\3\2\2\2\u07db]\3\2\2\2\u07dc\u07dd\7X\2\2\u07dd\u07de\7\u0100\2\2\u07de"+
		"\u07df\5\u047a\u023e\2\u07df_\3\2\2\2\u07e0\u07e1\7X\2\2\u07e1\u07e2\7"+
		"\u0116\2\2\u07e2\u07e4\5\u0466\u0234\2\u07e3\u07e5\5\u028c\u0147\2\u07e4"+
		"\u07e3\3\2\2\2\u07e5\u07e6\3\2\2\2\u07e6\u07e4\3\2\2\2\u07e6\u07e7\3\2"+
		"\2\2\u07e7a\3\2\2\2\u07e8\u07e9\7X\2\2\u07e9\u07ea\7\u0121\2\2\u07ea\u07fe"+
		"\5\u048a\u0246\2\u07eb\u07ec\7\u013f\2\2\u07ec\u07f0\7\3\2\2\u07ed\u07f1"+
		"\5\u0492\u024a\2\u07ee\u07f1\7\30\2\2\u07ef\u07f1\7\20\2\2\u07f0\u07ed"+
		"\3\2\2\2\u07f0\u07ee\3\2\2\2\u07f0\u07ef\3\2\2\2\u07f1\u07fa\3\2\2\2\u07f2"+
		"\u07f6\7\26\2\2\u07f3\u07f7\5\u0492\u024a\2\u07f4\u07f7\7\30\2\2\u07f5"+
		"\u07f7\7\20\2\2\u07f6\u07f3\3\2\2\2\u07f6\u07f4\3\2\2\2\u07f6\u07f5\3"+
		"\2\2\2\u07f7\u07f9\3\2\2\2\u07f8\u07f2\3\2\2\2\u07f9\u07fc\3\2\2\2\u07fa"+
		"\u07f8\3\2\2\2\u07fa\u07fb\3\2\2\2\u07fb\u07fd\3\2\2\2\u07fc\u07fa\3\2"+
		"\2\2\u07fd\u07ff\7\4\2\2\u07fe\u07eb\3\2\2\2\u07fe\u07ff\3\2\2\2\u07ff"+
		"\u0800\3\2\2\2\u0800\u0801\7\u013b\2\2\u0801\u0803\5\u0470\u0239\2\u0802"+
		"\u0804\5\u02a2\u0152\2\u0803\u0802\3\2\2\2\u0803\u0804\3\2\2\2\u0804\u0806"+
		"\3\2\2\2\u0805\u0807\5\u02a4\u0153\2\u0806\u0805\3\2\2\2\u0806\u0807\3"+
		"\2\2\2\u0807\u0809\3\2\2\2\u0808\u080a\5\u02a6\u0154\2\u0809\u0808\3\2"+
		"\2\2\u0809\u080a\3\2\2\2\u080a\u080c\3\2\2\2\u080b\u080d\5\u02a0\u0151"+
		"\2\u080c\u080b\3\2\2\2\u080c\u080d\3\2\2\2\u080dc\3\2\2\2\u080e\u080f"+
		"\7X\2\2\u080f\u0810\7\u0129\2\2\u0810\u0832\5\u043a\u021e\2\u0811\u0817"+
		"\7\3\2\2\u0812\u0818\5\u0170\u00b9\2\u0813\u0818\5\u0356\u01ac\2\u0814"+
		"\u0818\5\u032c\u0197\2\u0815\u0818\5\u032e\u0198\2\u0816\u0818\5\u0332"+
		"\u019a\2\u0817\u0812\3\2\2\2\u0817\u0813\3\2\2\2\u0817\u0814\3\2\2\2\u0817"+
		"\u0815\3\2\2\2\u0817\u0816\3\2\2\2\u0818\u0823\3\2\2\2\u0819\u081f\7\26"+
		"\2\2\u081a\u0820\5\u0170\u00b9\2\u081b\u0820\5\u0356\u01ac\2\u081c\u0820"+
		"\5\u032c\u0197\2\u081d\u0820\5\u032e\u0198\2\u081e\u0820\5\u0332\u019a"+
		"\2\u081f\u081a\3\2\2\2\u081f\u081b\3\2\2\2\u081f\u081c\3\2\2\2\u081f\u081d"+
		"\3\2\2\2\u081f\u081e\3\2\2\2\u0820\u0822\3\2\2\2\u0821\u0819\3\2\2\2\u0822"+
		"\u0825\3\2\2\2\u0823\u0821\3\2\2\2\u0823\u0824\3\2\2\2\u0824\u0826\3\2"+
		"\2\2\u0825\u0823\3\2\2\2\u0826\u0827\7\4\2\2\u0827\u0833\3\2\2\2\u0828"+
		"\u0829\7\u00b3\2\2\u0829\u082b\5\u043a\u021e\2\u082a\u082c\5\u0194\u00cb"+
		"\2\u082b\u082a\3\2\2\2\u082b\u082c\3\2\2\2\u082c\u0833\3\2\2\2\u082d\u082f"+
		"\5\u019e\u00d0\2\u082e\u0830\5\u0194\u00cb\2\u082f\u082e\3\2\2\2\u082f"+
		"\u0830\3\2\2\2\u0830\u0833\3\2\2\2\u0831\u0833\5\u01a2\u00d2\2\u0832\u0811"+
		"\3\2\2\2\u0832\u0828\3\2\2\2\u0832\u082d\3\2\2\2\u0832\u0831\3\2\2\2\u0833"+
		"\u0835\3\2\2\2\u0834\u0836\5\u016e\u00b8\2\u0835\u0834\3\2\2\2\u0835\u0836"+
		"\3\2\2\2\u0836\u0838\3\2\2\2\u0837\u0839\5\u0334\u019b\2\u0838\u0837\3"+
		"\2\2\2\u0838\u0839\3\2\2\2\u0839\u083b\3\2\2\2\u083a\u083c\5\u01a6\u00d4"+
		"\2\u083b\u083a\3\2\2\2\u083b\u083c\3\2\2\2\u083c\u083e\3\2\2\2\u083d\u083f"+
		"\5\u0172\u00ba\2\u083e\u083d\3\2\2\2\u083e\u083f\3\2\2\2\u083f\u0841\3"+
		"\2\2\2\u0840\u0842\5\u0174\u00bb\2\u0841\u0840\3\2\2\2\u0841\u0842\3\2"+
		"\2\2\u0842\u0844\3\2\2\2\u0843\u0845\5\u0176\u00bc\2\u0844\u0843\3\2\2"+
		"\2\u0844\u0845\3\2\2\2\u0845\u0847\3\2\2\2\u0846\u0848\5\u0178\u00bd\2"+
		"\u0847\u0846\3\2\2\2\u0847\u0848\3\2\2\2\u0848\u084a\3\2\2\2\u0849\u084b"+
		"\5\u017a\u00be\2\u084a\u0849\3\2\2\2\u084a\u084b\3\2\2\2\u084b\u084d\3"+
		"\2\2\2\u084c\u084e\5\u017c\u00bf\2\u084d\u084c\3\2\2\2\u084d\u084e\3\2"+
		"\2\2\u084e\u0850\3\2\2\2\u084f\u0851\5\u017e\u00c0\2\u0850\u084f\3\2\2"+
		"\2\u0850\u0851\3\2\2\2\u0851\u0853\3\2\2\2\u0852\u0854\5\u0182\u00c2\2"+
		"\u0853\u0852\3\2\2\2\u0853\u0854\3\2\2\2\u0854\u0856\3\2\2\2\u0855\u0857"+
		"\5\u0260\u0131\2\u0856\u0855\3\2\2\2\u0856\u0857\3\2\2\2\u0857\u0859\3"+
		"\2\2\2\u0858\u085a\5\u0256\u012c\2\u0859\u0858\3\2\2\2\u0859\u085a\3\2"+
		"\2\2\u085a\u085c\3\2\2\2\u085b\u085d\5\u0184\u00c3\2\u085c\u085b\3\2\2"+
		"\2\u085c\u085d\3\2\2\2\u085d\u085f\3\2\2\2\u085e\u0860\5\u024e\u0128\2"+
		"\u085f\u085e\3\2\2\2\u085f\u0860\3\2\2\2\u0860\u0862\3\2\2\2\u0861\u0863"+
		"\5\u0248\u0125\2\u0862\u0861\3\2\2\2\u0862\u0863\3\2\2\2\u0863\u0865\3"+
		"\2\2\2\u0864\u0866\5\u0186\u00c4\2\u0865\u0864\3\2\2\2\u0865\u0866\3\2"+
		"\2\2\u0866\u0868\3\2\2\2\u0867\u0869\5\u0188\u00c5\2\u0868\u0867\3\2\2"+
		"\2\u0868\u0869\3\2\2\2\u0869\u086b\3\2\2\2\u086a\u086c\5\u018a\u00c6\2"+
		"\u086b\u086a\3\2\2\2\u086b\u086c\3\2\2\2\u086c\u086e\3\2\2\2\u086d\u086f"+
		"\5\u02a0\u0151\2\u086e\u086d\3\2\2\2\u086e\u086f\3\2\2\2\u086fe\3\2\2"+
		"\2\u0870\u0871\7X\2\2\u0871\u0872\7\u012a\2\2\u0872\u0876\5\u046c\u0237"+
		"\2\u0873\u0875\5\u02ae\u0158\2\u0874\u0873\3\2\2\2\u0875\u0878\3\2\2\2"+
		"\u0876\u0874\3\2\2\2\u0876\u0877\3\2\2\2\u0877g\3\2\2\2\u0878\u0876\3"+
		"\2\2\2\u0879\u087a\7X\2\2\u087a\u087b\7\u012d\2\2\u087b\u087c\5\u0472"+
		"\u023a\2\u087c\u087d\5\u015e\u00b0\2\u087di\3\2\2\2\u087e\u087f\7X\2\2"+
		"\u087f\u0880\7\u0238\2\2\u0880\u0881\7\u0232\2\2\u0881\u0882\5\u0474\u023b"+
		"\2\u0882\u0883\7%\2\2\u0883\u0884\7&\2\2\u0884\u0885\7S\2\2\u0885\u0886"+
		"\7\u0135\2\2\u0886\u0887\7\u0127\2\2\u0887\u0888\7\u0231\2\2\u0888\u088e"+
		"\5\u0476\u023c\2\u0889\u088f\5\u014c\u00a7\2\u088a\u088f\5\u014e\u00a8"+
		"\2\u088b\u088f\5\u0150\u00a9\2\u088c\u088f\5\u0152\u00aa\2\u088d\u088f"+
		"\5\u0154\u00ab\2\u088e\u0889\3\2\2\2\u088e\u088a\3\2\2\2\u088e\u088b\3"+
		"\2\2\2\u088e\u088c\3\2\2\2\u088e\u088d\3\2\2\2\u088f\u0890\3\2\2\2\u0890"+
		"\u088e\3\2\2\2\u0890\u0891\3\2\2\2\u0891k\3\2\2\2\u0892\u0893\7X\2\2\u0893"+
		"\u0894\7\u012f\2\2\u0894\u0895\5\u0452\u022a\2\u0895\u0896\7\61\2\2\u0896"+
		"\u0897\5\u027a\u013e\2\u0897\u0898\7/\2\2\u0898\u089b\7\5\2\2\u0899\u089c"+
		"\7\31\2\2\u089a\u089c\5\u027c\u013f\2\u089b\u0899\3\2\2\2\u089b\u089a"+
		"\3\2\2\2\u089c\u089d\3\2\2\2\u089d\u089e\7\6\2\2\u089em\3\2\2\2\u089f"+
		"\u08a0\7X\2\2\u08a0\u08a1\7\u012f\2\2\u08a1\u08a2\5\u0420\u0211\2\u08a2"+
		"\u08a3\7\61\2\2\u08a3\u08a7\5\u0280\u0141\2\u08a4\u08a5\7\u020b\2\2\u08a5"+
		"\u08a6\7\u0323\2\2\u08a6\u08a8\7\31\2\2\u08a7\u08a4\3\2\2\2\u08a7\u08a8"+
		"\3\2\2\2\u08a8o\3\2\2\2\u08a9\u08aa\7X\2\2\u08aa\u08ab\7\u0139\2\2\u08ab"+
		"\u08ae\5\u0450\u0229\2\u08ac\u08af\5\u027e\u0140\2\u08ad\u08af\5\u0452"+
		"\u022a\2\u08ae\u08ac\3\2\2\2\u08ae\u08ad\3\2\2\2\u08af\u08b7\3\2\2\2\u08b0"+
		"\u08b5\7d\2\2\u08b1\u08b6\7\u00cb\2\2\u08b2\u08b6\7\31\2\2\u08b3\u08b6"+
		"\7\30\2\2\u08b4\u08b6\5\u03c0\u01e1\2\u08b5\u08b1\3\2\2\2\u08b5\u08b2"+
		"\3\2\2\2\u08b5\u08b3\3\2\2\2\u08b5\u08b4\3\2\2\2\u08b6\u08b8\3\2\2\2\u08b7"+
		"\u08b0\3\2\2\2\u08b7\u08b8\3\2\2\2\u08b8q\3\2\2\2\u08b9\u08ba\7X\2\2\u08ba"+
		"\u08bb\7\u013d\2\2\u08bb\u08bc\5\u0446\u0224\2\u08bc\u08bd\7\3\2\2\u08bd"+
		"\u08c2\5\u0428\u0215\2\u08be\u08bf\7\26\2\2\u08bf\u08c1\5\u0428\u0215"+
		"\2\u08c0\u08be\3\2\2\2\u08c1\u08c4\3\2\2\2\u08c2\u08c0\3\2\2\2\u08c2\u08c3"+
		"\3\2\2\2\u08c3\u08c5\3\2\2\2\u08c4\u08c2\3\2\2\2\u08c5\u08c6\7\4\2\2\u08c6"+
		"\u08d0\7\61\2\2\u08c7\u08c8\7\u0144\2\2\u08c8\u08cd\5\u04e8\u0275\2\u08c9"+
		"\u08ca\7\26\2\2\u08ca\u08cc\5\u04e8\u0275\2\u08cb\u08c9\3\2\2\2\u08cc"+
		"\u08cf\3\2\2\2\u08cd\u08cb\3\2\2\2\u08cd\u08ce\3\2\2\2\u08ce\u08d1\3\2"+
		"\2\2\u08cf\u08cd\3\2\2\2\u08d0\u08c7\3\2\2\2\u08d0\u08d1\3\2\2\2\u08d1"+
		"\u08d2\3\2\2\2\u08d2\u08d4\5\u04fa\u027e\2\u08d3\u08d5\5\u014a\u00a6\2"+
		"\u08d4\u08d3\3\2\2\2\u08d4\u08d5\3\2\2\2\u08d5s\3\2\2\2\u08d6\u08d7\7"+
		"c\2\2\u08d7\u08e1\5\b\5\2\u08d8\u08d9\7\u00c8\2\2\u08d9\u08e2\7\u01b8"+
		"\2\2\u08da\u08df\7\62\2\2\u08db\u08df\7\u00a2\2\2\u08dc\u08dd\7\u0115"+
		"\2\2\u08dd\u08df\t\6\2\2\u08de\u08da\3\2\2\2\u08de\u08db\3\2\2\2\u08de"+
		"\u08dc\3\2\2\2\u08df\u08e0\3\2\2\2\u08e0\u08e2\7\u01b8\2\2\u08e1\u08d8"+
		"\3\2\2\2\u08e1\u08de\3\2\2\2\u08e1\u08e2\3\2\2\2\u08e2\u08e3\3\2\2\2\u08e3"+
		"\u08e9\7]\2\2\u08e4\u08e8\5\16\b\2\u08e5\u08e8\5\20\t\2\u08e6\u08e8\5"+
		"\22\n\2\u08e7\u08e4\3\2\2\2\u08e7\u08e5\3\2\2\2\u08e7\u08e6\3\2\2\2\u08e8"+
		"\u08eb\3\2\2\2\u08e9\u08e7\3\2\2\2\u08e9\u08ea\3\2\2\2\u08ea\u08ec\3\2"+
		"\2\2\u08eb\u08e9\3\2\2\2\u08ec\u08ef\7\u0088\2\2\u08ed\u08f0\5\u04e6\u0274"+
		"\2\u08ee\u08f0\5\n\6\2\u08ef\u08ed\3\2\2\2\u08ef\u08ee\3\2\2\2\u08f0u"+
		"\3\2\2\2\u08f1\u08f2\7c\2\2\u08f2\u08f3\7\u008f\2\2\u08f3\u08f4\7\u0243"+
		"\2\2\u08f4\u08f5\7\u0129\2\2\u08f5\u0903\5\u043a\u021e\2\u08f6\u08f7\7"+
		"\3\2\2\u08f7\u08fc\5\u01aa\u00d6\2\u08f8\u08f9\7\26\2\2\u08f9\u08fb\5"+
		"\u01aa\u00d6\2\u08fa\u08f8\3\2\2\2\u08fb\u08fe\3\2\2\2\u08fc\u08fa\3\2"+
		"\2\2\u08fc\u08fd\3\2\2\2\u08fd\u08ff\3\2\2\2\u08fe\u08fc\3\2\2\2\u08ff"+
		"\u0900\7\4\2\2\u0900\u0904\3\2\2\2\u0901\u0904\5\u0144\u00a3\2\u0902\u0904"+
		"\5\u01a0\u00d1\2\u0903\u08f6\3\2\2\2\u0903\u0901\3\2\2\2\u0903\u0902\3"+
		"\2\2\2\u0904\u090a\3\2\2\2\u0905\u0909\5\u017e\u00c0\2\u0906\u0909\5\u0146"+
		"\u00a4\2\u0907\u0909\5\u0148\u00a5\2\u0908\u0905\3\2\2\2\u0908\u0906\3"+
		"\2\2\2\u0908\u0907\3\2\2\2\u0909\u090c\3\2\2\2\u090a\u0908\3\2\2\2\u090a"+
		"\u090b\3\2\2\2\u090bw\3\2\2\2\u090c\u090a\3\2\2\2\u090d\u090e\7c\2\2\u090e"+
		"\u090f\5\u043a\u021e\2\u090f\u0910\7\u0129\2\2\u0910\u0911\7\3\2\2\u0911"+
		"\u0912\5\u0428\u0215\2\u0912\u0914\5\u0314\u018b\2\u0913\u0915\5\24\13"+
		"\2\u0914\u0913\3\2\2\2\u0914\u0915\3\2\2\2\u0915\u091e\3\2\2\2\u0916\u0917"+
		"\7\26\2\2\u0917\u0918\5\u0428\u0215\2\u0918\u091a\5\u0314\u018b\2\u0919"+
		"\u091b\5\24\13\2\u091a\u0919\3\2\2\2\u091a\u091b\3\2\2\2\u091b\u091d\3"+
		"\2\2\2\u091c\u0916\3\2\2\2\u091d\u0920\3\2\2\2\u091e\u091c\3\2\2\2\u091e"+
		"\u091f\3\2\2\2\u091f\u0921\3\2\2\2\u0920\u091e\3\2\2\2\u0921\u0922\7\4"+
		"\2\2\u0922y\3\2\2\2\u0923\u0924\7c\2\2\u0924\u0929\5\n\6\2\u0925\u0926"+
		"\7\26\2\2\u0926\u0928\5\n\6\2\u0927\u0925\3\2\2\2\u0928\u092b\3\2\2\2"+
		"\u0929\u0927\3\2\2\2\u0929\u092a\3\2\2\2\u092a\u092c\3\2\2\2\u092b\u0929"+
		"\3\2\2\2\u092c\u092d\7\u011e\2\2\u092d{\3\2\2\2\u092e\u092f\7c\2\2\u092f"+
		"\u0934\5\u049a\u024e\2\u0930\u0931\7\26\2\2\u0931\u0933\5\u049a\u024e"+
		"\2\u0932\u0930\3\2\2\2\u0933\u0936\3\2\2\2\u0934\u0932\3\2\2\2\u0934\u0935"+
		"\3\2\2\2\u0935\u0937\3\2\2\2\u0936\u0934\3\2\2\2\u0937\u093e\7\u0139\2"+
		"\2\u0938\u0939\5\u017e\u00c0\2\u0939\u093a\5\u041e\u0210\2\u093a\u093f"+
		"\3\2\2\2\u093b\u093f\5\u017e\u00c0\2\u093c\u093f\5\u041e\u0210\2\u093d"+
		"\u093f\5\u0180\u00c1\2\u093e\u0938\3\2\2\2\u093e\u093b\3\2\2\2\u093e\u093c"+
		"\3\2\2\2\u093e\u093d\3\2\2\2\u093e\u093f\3\2\2\2\u093f}\3\2\2\2\u0940"+
		"\u0943\5\u0218\u010d\2\u0941\u0943\5\u021a\u010e\2\u0942\u0940\3\2\2\2"+
		"\u0942\u0941\3\2\2\2\u0943\177\3\2\2\2\u0944\u094a\5\u0082B\2\u0945\u094a"+
		"\5\u0084C\2\u0946\u094a\5\u0086D\2\u0947\u094a\5\u0088E\2\u0948\u094a"+
		"\5\u008aF\2\u0949\u0944\3\2\2\2\u0949\u0945\3\2\2\2\u0949\u0946\3\2\2"+
		"\2\u0949\u0947\3\2\2\2\u0949\u0948\3\2\2\2\u094a\u0081\3\2\2\2\u094b\u094c"+
		"\7\u0255\2\2\u094c\u094f\7]\2\2\u094d\u0950\5\b\5\2\u094e\u0950\5\u049a"+
		"\u024e\2\u094f\u094d\3\2\2\2\u094f\u094e\3\2\2\2\u0950\u0951\3\2\2\2\u0951"+
		"\u0952\7\u00a5\2\2\u0952\u0953\5\f\7\2\u0953\u0083\3\2\2\2\u0954\u0955"+
		"\7\u0255\2\2\u0955\u0956\7\u0168\2\2\u0956\u0957\5\n\6\2\u0957\u0958\7"+
		"\u00a5\2\2\u0958\u0959\5\f\7\2\u0959\u0085\3\2\2\2\u095a\u095c\7\u0255"+
		"\2\2\u095b\u095d\7\u0258\2\2\u095c\u095b\3\2\2\2\u095c\u095d\3\2\2\2\u095d"+
		"\u095e\3\2\2\2\u095e\u095f\5\n\6\2\u095f\u0960\7\u00a5\2\2\u0960\u0962"+
		"\5\f\7\2\u0961\u0963\5\u0142\u00a2\2\u0962\u0961\3\2\2\2\u0962\u0963\3"+
		"\2\2\2\u0963\u0087\3\2\2\2\u0964\u0965\7\u0255\2\2\u0965\u0968\7\u00ec"+
		"\2\2\u0966\u0969\5\u0464\u0233\2\u0967\u0969\5\u049a\u024e\2\u0968\u0966"+
		"\3\2\2\2\u0968\u0967\3\2\2\2\u0969\u096a\3\2\2\2\u096a\u096b\7\u00a5\2"+
		"\2\u096b\u096c\5\f\7\2\u096c\u0089\3\2\2\2\u096d\u096e\7\u0255\2\2\u096e"+
		"\u096f\7\u0129\2\2\u096f\u0970\5\u049a\u024e\2\u0970\u0971\7\u00a5\2\2"+
		"\u0971\u0973\5\f\7\2\u0972\u0974\5\u0142\u00a2\2\u0973\u0972\3\2\2\2\u0973"+
		"\u0974\3\2\2\2\u0974\u008b\3\2\2\2\u0975\u0989\7n\2\2\u0976\u098a\5\u011a"+
		"\u008e\2\u0977\u098a\5\u011c\u008f\2\u0978\u098a\5\u011e\u0090\2\u0979"+
		"\u098a\5\u0120\u0091\2\u097a\u098a\5\u0122\u0092\2\u097b\u098a\5\u0124"+
		"\u0093\2\u097c\u098a\5\u0126\u0094\2\u097d\u098a\5\u0128\u0095\2\u097e"+
		"\u098a\5\u012a\u0096\2\u097f\u098a\5\u012c\u0097\2\u0980\u098a\5\u012e"+
		"\u0098\2\u0981\u098a\5\u0130\u0099\2\u0982\u098a\5\u0132\u009a\2\u0983"+
		"\u098a\5\u0134\u009b\2\u0984\u098a\5\u0136\u009c\2\u0985\u098a\5\u0138"+
		"\u009d\2\u0986\u098a\5\u013a\u009e\2\u0987\u098a\5\u013c\u009f\2\u0988"+
		"\u098a\5\u013e\u00a0\2\u0989\u0976\3\2\2\2\u0989\u0977\3\2\2\2\u0989\u0978"+
		"\3\2\2\2\u0989\u0979\3\2\2\2\u0989\u097a\3\2\2\2\u0989\u097b\3\2\2\2\u0989"+
		"\u097c\3\2\2\2\u0989\u097d\3\2\2\2\u0989\u097e\3\2\2\2\u0989\u097f\3\2"+
		"\2\2\u0989\u0980\3\2\2\2\u0989\u0981\3\2\2\2\u0989\u0982\3\2\2\2\u0989"+
		"\u0983\3\2\2\2\u0989\u0984\3\2\2\2\u0989\u0985\3\2\2\2\u0989\u0986\3\2"+
		"\2\2\u0989\u0987\3\2\2\2\u0989\u0988\3\2\2\2\u098a\u008d\3\2\2\2\u098b"+
		"\u098c\7v\2\2\u098c\u098d\7c\2\2\u098d\u098e\7\u0239\2\2\u098e\u008f\3"+
		"\2\2\2\u098f\u0990\7\u0259\2\2\u0990\u0991\7^\2\2\u0991\u0992\7;\2\2\u0992"+
		"\u0993\7\u0129\2\2\u0993\u0994\5\u043a\u021e\2\u0994\u0995\7\u014c\2\2"+
		"\u0995\u0996\5\u043a\u021e\2\u0996\u0091\3\2\2\2\u0997\u0998\7~\2\2\u0998"+
		"\u09ac\5\n\6\2\u0999\u099c\7\u0135\2\2\u099a\u099d\5\u04a2\u0252\2\u099b"+
		"\u099d\5\u037c\u01bf\2\u099c\u099a\3\2\2\2\u099c\u099b\3\2\2\2\u099d\u09a5"+
		"\3\2\2\2\u099e\u09a1\7\26\2\2\u099f\u09a2\5\u04a2\u0252\2\u09a0\u09a2"+
		"\5\u037c\u01bf\2\u09a1\u099f\3\2\2\2\u09a1\u09a0\3\2\2\2\u09a2\u09a4\3"+
		"\2\2\2\u09a3\u099e\3\2\2\2\u09a4\u09a7\3\2\2\2\u09a5\u09a3\3\2\2\2\u09a5"+
		"\u09a6\3\2\2\2\u09a6\u09ad\3\2\2\2\u09a7\u09a5\3\2\2\2\u09a8\u09a9\7\u0135"+
		"\2\2\u09a9\u09aa\7f\2\2\u09aa\u09ad\5\f\7\2\u09ab\u09ad\5\u0118\u008d"+
		"\2\u09ac\u0999\3\2\2\2\u09ac\u09a8\3\2\2\2\u09ac\u09ab\3\2\2\2\u09ad\u0093"+
		"\3\2\2\2\u09ae\u09af\7~\2\2\u09af\u09b2\7\u009a\2\2\u09b0\u09b3\5\u04a2"+
		"\u0252\2\u09b1\u09b3\7\30\2\2\u09b2\u09b0\3\2\2\2\u09b2\u09b1\3\2\2\2"+
		"\u09b3\u0095\3\2\2\2\u09b4\u09b9\7\u0081\2\2\u09b5\u09ba\5\u0108\u0085"+
		"\2\u09b6\u09ba\5\u010a\u0086\2\u09b7\u09ba\5\u010c\u0087\2\u09b8\u09ba"+
		"\5\u010e\u0088\2\u09b9\u09b5\3\2\2\2\u09b9\u09b6\3\2\2\2\u09b9\u09b7\3"+
		"\2\2\2\u09b9\u09b8\3\2\2\2\u09ba\u0097\3\2\2\2\u09bb\u09bd\7\u0084\2\2"+
		"\u09bc\u09be\t\7\2\2\u09bd\u09bc\3\2\2\2\u09bd\u09be\3\2\2\2\u09be\u09c1"+
		"\3\2\2\2\u09bf\u09c0\7\u0144\2\2\u09c0\u09c2\7W\2\2\u09c1\u09bf\3\2\2"+
		"\2\u09c1\u09c2\3\2\2\2\u09c2\u09c4\3\2\2\2\u09c3\u09c5\5\u00f8}\2\u09c4"+
		"\u09c3\3\2\2\2\u09c4\u09c5\3\2\2\2\u09c5\u09c7\3\2\2\2\u09c6\u09c8\7\u008a"+
		"\2\2\u09c7\u09c6\3\2\2\2\u09c7\u09c8\3\2\2\2\u09c8\u09c9\3\2\2\2\u09c9"+
		"\u09cc\5\b\5\2\u09ca\u09cd\5\u00fe\u0080\2\u09cb\u09cd\5\u0102\u0082\2"+
		"\u09cc\u09ca\3\2\2\2\u09cc\u09cb\3\2\2\2\u09cc\u09cd\3\2\2\2\u09cd\u0099"+
		"\3\2\2\2\u09ce\u09cf\7\u0089\2\2\u09cf\u09d0\7\u00b7\2\2\u09d0\u09d5\5"+
		"\u049a\u024e\2\u09d1\u09d2\7\26\2\2\u09d2\u09d4\5\u049a\u024e\2\u09d3"+
		"\u09d1\3\2\2\2\u09d4\u09d7\3\2\2\2\u09d5\u09d3\3\2\2\2\u09d5\u09d6\3\2"+
		"\2\2\u09d6\u009b\3\2\2\2\u09d7\u09d5\3\2\2\2\u09d8\u09da\7\u008e\2\2\u09d9"+
		"\u09db\t\b\2\2\u09da\u09d9\3\2\2\2\u09da\u09db\3\2\2\2\u09db\u09dc\3\2"+
		"\2\2\u09dc\u09e0\7\u028a\2\2\u09dd\u09e1\5\u00e6t\2\u09de\u09e1\5\u00ec"+
		"w\2\u09df\u09e1\5\u00f4{\2\u09e0\u09dd\3\2\2\2\u09e0\u09de\3\2\2\2\u09e0"+
		"\u09df\3\2\2\2\u09e1\u009d\3\2\2\2\u09e2\u09ef\5\u00b4[\2\u09e3\u09ef"+
		"\5\u00b6\\\2\u09e4\u09ef\5\u00b8]\2\u09e5\u09ef\5\u00ba^\2\u09e6\u09ef"+
		"\5\u00bc_\2\u09e7\u09ef\5\u00be`\2\u09e8\u09ef\5\u00c0a\2\u09e9\u09ef"+
		"\5\u00c2b\2\u09ea\u09ef\5\u00c4c\2\u09eb\u09ef\5\u00c6d\2\u09ec\u09ef"+
		"\5\u00c8e\2\u09ed\u09ef\5\u00caf\2\u09ee\u09e2\3\2\2\2\u09ee\u09e3\3\2"+
		"\2\2\u09ee\u09e4\3\2\2\2\u09ee\u09e5\3\2\2\2\u09ee\u09e6\3\2\2\2\u09ee"+
		"\u09e7\3\2\2\2\u09ee\u09e8\3\2\2\2\u09ee\u09e9\3\2\2\2\u09ee\u09ea\3\2"+
		"\2\2\u09ee\u09eb\3\2\2\2\u09ee\u09ec\3\2\2\2\u09ee\u09ed\3\2\2\2\u09ef"+
		"\u009f\3\2\2\2\u09f0\u09f1\7\u0096\2\2\u09f1\u09f2\7\u00b7\2\2\u09f2\u09f7"+
		"\5\u049a\u024e\2\u09f3\u09f4\7\26\2\2\u09f4\u09f6\5\u049a\u024e\2\u09f5"+
		"\u09f3\3\2\2\2\u09f6\u09f9\3\2\2\2\u09f7\u09f5\3\2\2\2\u09f7\u09f8\3\2"+
		"\2\2\u09f8\u00a1\3\2\2\2\u09f9\u09f7\3\2\2\2\u09fa\u09fb\7\u01d9\2\2\u09fb"+
		"\u09fc\5\u0468\u0235\2\u09fc\u00a3\3\2\2\2\u09fd\u09fe\7\u00a3\2\2\u09fe"+
		"\u09ff\7\u00a5\2\2\u09ff\u0a0b\5\u043a\u021e\2\u0a00\u0a01\7\3\2\2\u0a01"+
		"\u0a06\5\u0428\u0215\2\u0a02\u0a03\7\26\2\2\u0a03\u0a05\5\u0428\u0215"+
		"\2\u0a04\u0a02\3\2\2\2\u0a05\u0a08\3\2\2\2\u0a06\u0a04\3\2\2\2\u0a06\u0a07"+
		"\3\2\2\2\u0a07\u0a09\3\2\2\2\u0a08\u0a06\3\2\2\2\u0a09\u0a0a\7\4\2\2\u0a0a"+
		"\u0a0c\3\2\2\2\u0a0b\u0a00\3\2\2\2\u0a0b\u0a0c\3\2\2\2\u0a0c\u0a0e\3\2"+
		"\2\2\u0a0d\u0a0f\5\u0240\u0121\2\u0a0e\u0a0d\3\2\2\2\u0a0e\u0a0f\3\2\2"+
		"\2\u0a0f\u0a13\3\2\2\2\u0a10\u0a11\7\u01e7\2\2\u0a11\u0a12\7\u03c2\2\2"+
		"\u0a12\u0a14\7\u0137\2\2\u0a13\u0a10\3\2\2\2\u0a13\u0a14\3\2\2\2\u0a14"+
		"\u0a37\3\2\2\2\u0a15\u0a22\7\u0138\2\2\u0a16\u0a23\5\u0238\u011d\2\u0a17"+
		"\u0a18\7\3\2\2\u0a18\u0a1d\5\u0238\u011d\2\u0a19\u0a1a\7\26\2\2\u0a1a"+
		"\u0a1c\5\u0238\u011d\2\u0a1b\u0a19\3\2\2\2\u0a1c\u0a1f\3\2\2\2\u0a1d\u0a1b"+
		"\3\2\2\2\u0a1d\u0a1e\3\2\2\2\u0a1e\u0a20\3\2\2\2\u0a1f\u0a1d\3\2\2\2\u0a20"+
		"\u0a21\7\4\2\2\u0a21\u0a23\3\2\2\2\u0a22\u0a16\3\2\2\2\u0a22\u0a17\3\2"+
		"\2\2\u0a23\u0a38\3\2\2\2\u0a24\u0a25\7\u0144\2\2\u0a25\u0a2a\5\u04e8\u0275"+
		"\2\u0a26\u0a27\7\26\2\2\u0a27\u0a29\5\u04e8\u0275\2\u0a28\u0a26\3\2\2"+
		"\2\u0a29\u0a2c\3\2\2\2\u0a2a\u0a28\3\2\2\2\u0a2a\u0a2b\3\2\2\2\u0a2b\u0a2e"+
		"\3\2\2\2\u0a2c\u0a2a\3\2\2\2\u0a2d\u0a24\3\2\2\2\u0a2d\u0a2e\3\2\2\2\u0a2e"+
		"\u0a2f\3\2\2\2\u0a2f\u0a31\5\u04fa\u027e\2\u0a30\u0a32\5\u04f0\u0279\2"+
		"\u0a31\u0a30\3\2\2\2\u0a31\u0a32\3\2\2\2\u0a32\u0a34\3\2\2\2\u0a33\u0a35"+
		"\5\u04f6\u027c\2\u0a34\u0a33\3\2\2\2\u0a34\u0a35\3\2\2\2\u0a35\u0a38\3"+
		"\2\2\2\u0a36\u0a38\5\u0242\u0122\2\u0a37\u0a15\3\2\2\2\u0a37\u0a2d\3\2"+
		"\2\2\u0a37\u0a36\3\2\2\2\u0a38\u00a5\3\2\2\2\u0a39\u0a3a\7\u00ad\2\2\u0a3a"+
		"\u0a5a\7\u00d2\2\2\u0a3b\u0a3c\7\u0129\2\2\u0a3c\u0a45\5\u043a\u021e\2"+
		"\u0a3d\u0a3e\7\u023c\2\2\u0a3e\u0a45\5\u0456\u022c\2\u0a3f\u0a40\7M\2"+
		"\2\u0a40\u0a41\5\u043a\u021e\2\u0a41\u0a42\7\23\2\2\u0a42\u0a43\5\u0428"+
		"\u0215\2\u0a43\u0a45\3\2\2\2\u0a44\u0a3b\3\2\2\2\u0a44\u0a3d\3\2\2\2\u0a44"+
		"\u0a3f\3\2\2\2\u0a45\u0a46\3\2\2\2\u0a46\u0a47\7\u00a6\2\2\u0a47\u0a48"+
		"\7\30\2\2\u0a48\u0a5b\3\2\2\2\u0a49\u0a4a\5\u043a\u021e\2\u0a4a\u0a4b"+
		"\7\3\2\2\u0a4b\u0a4c\5\u0428\u0215\2\u0a4c\u0a4d\7\u00a6\2\2\u0a4d\u0a55"+
		"\7\30\2\2\u0a4e\u0a4f\7\26\2\2\u0a4f\u0a50\5\u0428\u0215\2\u0a50\u0a51"+
		"\7\u00a6\2\2\u0a51\u0a52\7\30\2\2\u0a52\u0a54\3\2\2\2\u0a53\u0a4e\3\2"+
		"\2\2\u0a54\u0a57\3\2\2\2\u0a55\u0a53\3\2\2\2\u0a55\u0a56\3\2\2\2\u0a56"+
		"\u0a58\3\2\2\2\u0a57\u0a55\3\2\2\2\u0a58\u0a59\7\4\2\2\u0a59\u0a5b\3\2"+
		"\2\2\u0a5a\u0a44\3\2\2\2\u0a5a\u0a49\3\2\2\2\u0a5b\u00a7\3\2\2\2\u0a5c"+
		"\u0a5d\7\u00b9\2\2\u0a5d\u0a5e\7\u0129\2\2\u0a5e\u0a61\5\u043a\u021e\2"+
		"\u0a5f\u0a60\t\t\2\2\u0a60\u0a62\7\31\2\2\u0a61\u0a5f\3\2\2\2\u0a61\u0a62"+
		"\3\2\2\2\u0a62\u0a63\3\2\2\2\u0a63\u0a64\7\u009b\2\2\u0a64\u0a65\t\n\2"+
		"\2\u0a65\u0a66\7\u01ec\2\2\u0a66\u00a9\3\2\2\2\u0a67\u0a68\7\u01e3\2\2"+
		"\u0a68\u0a69\7\u00a5\2\2\u0a69\u0a6b\5\u043a\u021e\2\u0a6a\u0a6c\5\u04a6"+
		"\u0254\2\u0a6b\u0a6a\3\2\2\2\u0a6b\u0a6c\3\2\2\2\u0a6c\u0a6e\3\2\2\2\u0a6d"+
		"\u0a6f\5\u0240\u0121\2\u0a6e\u0a6d\3\2\2\2\u0a6e\u0a6f\3\2\2\2\u0a6f\u0a70"+
		"\3\2\2\2\u0a70\u0a7f\7\u0135\2\2\u0a71\u0a73\7\3\2\2\u0a72\u0a71\3\2\2"+
		"\2\u0a73\u0a76\3\2\2\2\u0a74\u0a72\3\2\2\2\u0a74\u0a75\3\2\2\2\u0a75\u0a77"+
		"\3\2\2\2\u0a76\u0a74\3\2\2\2\u0a77\u0a7b\5\u04aa\u0256\2\u0a78\u0a7a\7"+
		"\4\2\2\u0a79\u0a78\3\2\2\2\u0a7a\u0a7d\3\2\2\2\u0a7b\u0a79\3\2\2\2\u0a7b"+
		"\u0a7c\3\2\2\2\u0a7c\u0a80\3\2\2\2\u0a7d\u0a7b\3\2\2\2\u0a7e\u0a80\5\u0220"+
		"\u0111\2\u0a7f\u0a74\3\2\2\2\u0a7f\u0a7e\3\2\2\2\u0a80\u0a81\3\2\2\2\u0a81"+
		"\u0a82\7\u00d2\2\2\u0a82\u0a8a\5\u03f2\u01fa\2\u0a83\u0a84\7\u0140\2\2"+
		"\u0a84\u0a85\5\u0226\u0114\2\u0a85\u0a88\7\u012b\2\2\u0a86\u0a89\5\u0228"+
		"\u0115\2\u0a87\u0a89\5\u0234\u011b\2\u0a88\u0a86\3\2\2\2\u0a88\u0a87\3"+
		"\2\2\2\u0a89\u0a8b\3\2\2\2\u0a8a\u0a83\3\2\2\2\u0a8b\u0a8c\3\2\2\2\u0a8c"+
		"\u0a8a\3\2\2\2\u0a8c\u0a8d\3\2\2\2\u0a8d\u0a90\3\2\2\2\u0a8e\u0a8f\7r"+
		"\2\2\u0a8f\u0a91\7\u0166\2\2\u0a90\u0a8e\3\2\2\2\u0a90\u0a91\3\2\2\2\u0a91"+
		"\u0a93\3\2\2\2\u0a92\u0a94\5\u0262\u0132\2\u0a93\u0a92\3\2\2\2\u0a93\u0a94"+
		"\3\2\2\2\u0a94\u0a96\3\2\2\2\u0a95\u0a97\5\u04f6\u027c\2\u0a96\u0a95\3"+
		"\2\2\2\u0a96\u0a97\3\2\2\2\u0a97\u00ab\3\2\2\2\u0a98\u0a99\7\u00d3\2\2"+
		"\u0a99\u0aa6\5\b\5\2\u0a9a\u0a9b\7\u0135\2\2\u0a9b\u0aa0\5\u04a2\u0252"+
		"\2\u0a9c\u0a9d\7\26\2\2\u0a9d\u0a9f\5\u04a2\u0252\2\u0a9e\u0a9c\3\2\2"+
		"\2\u0a9f\u0aa2\3\2\2\2\u0aa0\u0a9e\3\2\2\2\u0aa0\u0aa1\3\2\2\2\u0aa1\u0aa7"+
		"\3\2\2\2\u0aa2\u0aa0\3\2\2\2\u0aa3\u0aa4\7\u0135\2\2\u0aa4\u0aa5\7f\2"+
		"\2\u0aa5\u0aa7\5\f\7\2\u0aa6\u0a9a\3\2\2\2\u0aa6\u0aa3\3\2\2\2\u0aa6\u0aa7"+
		"\3\2\2\2\u0aa7\u00ad\3\2\2\2\u0aa8\u0aa9\7\u0117\2\2\u0aa9\u0aaa\5\u022a"+
		"\u0116\2\u0aaa\u00af\3\2\2\2\u0aab\u0aae\5\u021c\u010f\2\u0aac\u0aae\5"+
		"\u021e\u0110\2\u0aad\u0aab\3\2\2\2\u0aad\u0aac\3\2\2\2\u0aae\u00b1\3\2"+
		"\2\2\u0aaf\u0abc\7\u0138\2\2\u0ab0\u0abd\5\u0366\u01b4\2\u0ab1\u0ab2\7"+
		"\3\2\2\u0ab2\u0ab7\5\u0366\u01b4\2\u0ab3\u0ab4\7\26\2\2\u0ab4\u0ab6\5"+
		"\u0366\u01b4\2\u0ab5\u0ab3\3\2\2\2\u0ab6\u0ab9\3\2\2\2\u0ab7\u0ab5\3\2"+
		"\2\2\u0ab7\u0ab8\3\2\2\2\u0ab8\u0aba\3\2\2\2\u0ab9\u0ab7\3\2\2\2\u0aba"+
		"\u0abb\7\4\2\2\u0abb\u0abd\3\2\2\2\u0abc\u0ab0\3\2\2\2\u0abc\u0ab1\3\2"+
		"\2\2\u0abd\u00b3\3\2\2\2\u0abe\u0abf\7\u0092\2\2\u0abf\u0ac0\t\13\2\2"+
		"\u0ac0\u0ac1\t\f\2\2\u0ac1\u0acb\7K\2\2\u0ac2\u0ac7\5\u035e\u01b0\2\u0ac3"+
		"\u0ac4\7\26\2\2\u0ac4\u0ac6\5\u035e\u01b0\2\u0ac5\u0ac3\3\2\2\2\u0ac6"+
		"\u0ac9\3\2\2\2\u0ac7\u0ac5\3\2\2\2\u0ac7\u0ac8\3\2\2\2\u0ac8\u0acc\3\2"+
		"\2\2\u0ac9\u0ac7\3\2\2\2\u0aca\u0acc\7\20\2\2\u0acb\u0ac2\3\2\2\2\u0acb"+
		"\u0aca\3\2\2\2\u0acc\u0acd\3\2\2\2\u0acd\u0ace\7\u012c\2\2\u0ace\u0ad3"+
		"\5\u00e0q\2\u0acf\u0ad0\7\26\2\2\u0ad0\u0ad2\5\u00e0q\2\u0ad1\u0acf\3"+
		"\2\2\2\u0ad2\u0ad5\3\2\2\2\u0ad3\u0ad1\3\2\2\2\u0ad3\u0ad4\3\2\2\2\u0ad4"+
		"\u0ad7\3\2\2\2\u0ad5\u0ad3\3\2\2\2\u0ad6\u0ad8\5\u00e2r\2\u0ad7\u0ad6"+
		"\3\2\2\2\u0ad7\u0ad8\3\2\2\2\u0ad8\u00b5\3\2\2\2\u0ad9\u0ada\7\u0092\2"+
		"\2\u0ada\u0adf\5\u00e4s\2\u0adb\u0adc\7\26\2\2\u0adc\u0ade\5\u00e4s\2"+
		"\u0add\u0adb\3\2\2\2\u0ade\u0ae1\3\2\2\2\u0adf\u0add\3\2\2\2\u0adf\u0ae0"+
		"\3\2\2\2\u0ae0\u0ae2\3\2\2\2\u0ae1\u0adf\3\2\2\2\u0ae2\u0ae3\7\u00d2\2"+
		"\2\u0ae3\u0ae4\7_\2\2\u0ae4\u0ae9\5\u046a\u0236\2\u0ae5\u0ae6\7\26\2\2"+
		"\u0ae6\u0ae8\5\u046a\u0236\2\u0ae7\u0ae5\3\2\2\2\u0ae8\u0aeb\3\2\2\2\u0ae9"+
		"\u0ae7\3\2\2\2\u0ae9\u0aea\3\2\2\2\u0aea\u0aec\3\2\2\2\u0aeb\u0ae9\3\2"+
		"\2\2\u0aec\u0aed\7\u012c\2\2\u0aed\u0af2\5\u00e0q\2\u0aee\u0aef\7\26\2"+
		"\2\u0aef\u0af1\5\u00e0q\2\u0af0\u0aee\3\2\2\2\u0af1\u0af4\3\2\2\2\u0af2"+
		"\u0af0\3\2\2\2\u0af2\u0af3\3\2\2\2\u0af3\u0af6\3\2\2\2\u0af4\u0af2\3\2"+
		"\2\2\u0af5\u0af7\5\u00e2r\2\u0af6\u0af5\3\2\2\2\u0af6\u0af7\3\2\2\2\u0af7"+
		"\u00b7\3\2\2\2\u0af8\u0af9\7\u0092\2\2\u0af9\u0afa\7~\2\2\u0afa\u0b1c"+
		"\7\u00d2\2\2\u0afb\u0afc\7\u008c\2\2\u0afc\u0b01\5\u00dep\2\u0afd\u0afe"+
		"\7\26\2\2\u0afe\u0b00\5\u00dep\2\u0aff\u0afd\3\2\2\2\u0b00\u0b03\3\2\2"+
		"\2\u0b01\u0aff\3\2\2\2\u0b01\u0b02\3\2\2\2\u0b02\u0b1d\3\2\2\2\u0b03\u0b01"+
		"\3\2\2\2\u0b04\u0b05\7\u008c\2\2\u0b05\u0b1d\7\20\2\2\u0b06\u0b07\7\u011c"+
		"\2\2\u0b07\u0b08\7\u008c\2\2\u0b08\u0b0d\5\u0498\u024d\2\u0b09\u0b0a\7"+
		"\26\2\2\u0b0a\u0b0c\5\u0498\u024d\2\u0b0b\u0b09\3\2\2\2\u0b0c\u0b0f\3"+
		"\2\2\2\u0b0d\u0b0b\3\2\2\2\u0b0d\u0b0e\3\2\2\2\u0b0e\u0b1d\3\2\2\2\u0b0f"+
		"\u0b0d\3\2\2\2\u0b10\u0b1a\7\u00ec\2\2\u0b11\u0b16\5\u0464\u0233\2\u0b12"+
		"\u0b13\7\26\2\2\u0b13\u0b15\5\u0464\u0233\2\u0b14\u0b12\3\2\2\2\u0b15"+
		"\u0b18\3\2\2\2\u0b16\u0b14\3\2\2\2\u0b16\u0b17\3\2\2\2\u0b17\u0b1b\3\2"+
		"\2\2\u0b18\u0b16\3\2\2\2\u0b19\u0b1b\7\20\2\2\u0b1a\u0b11\3\2\2\2\u0b1a"+
		"\u0b19\3\2\2\2\u0b1b\u0b1d\3\2\2\2\u0b1c\u0afb\3\2\2\2\u0b1c\u0b04\3\2"+
		"\2\2\u0b1c\u0b06\3\2\2\2\u0b1c\u0b10\3\2\2\2\u0b1d\u0b1e\3\2\2\2\u0b1e"+
		"\u0b1f\7\u012c\2\2\u0b1f\u0b24\5\u00e0q\2\u0b20\u0b21\7\26\2\2\u0b21\u0b23"+
		"\5\u00e0q\2\u0b22\u0b20\3\2\2\2\u0b23\u0b26\3\2\2\2\u0b24\u0b22\3\2\2"+
		"\2\u0b24\u0b25\3\2\2\2\u0b25\u0b28\3\2\2\2\u0b26\u0b24\3\2\2\2\u0b27\u0b29"+
		"\5\u00e2r\2\u0b28\u0b27\3\2\2\2\u0b28\u0b29\3\2\2\2\u0b29\u00b9\3\2\2"+
		"\2\u0b2a\u0b34\7\u0092\2\2\u0b2b\u0b35\7)\2\2\u0b2c\u0b31\5\u00dan\2\u0b2d"+
		"\u0b2e\7\26\2\2\u0b2e\u0b30\5\u00dan\2\u0b2f\u0b2d\3\2\2\2\u0b30\u0b33"+
		"\3\2\2\2\u0b31\u0b2f\3\2\2\2\u0b31\u0b32\3\2\2\2\u0b32\u0b35\3\2\2\2\u0b33"+
		"\u0b31\3\2\2\2\u0b34\u0b2b\3\2\2\2\u0b34\u0b2c\3\2\2\2\u0b35\u0b36\3\2"+
		"\2\2\u0b36\u0b37\7\u00d2\2\2\u0b37\u0b38\7\u00db\2\2\u0b38\u0b3d\5\u00dc"+
		"o\2\u0b39\u0b3a\7\26\2\2\u0b3a\u0b3c\5\u00dco\2\u0b3b\u0b39\3\2\2\2\u0b3c"+
		"\u0b3f\3\2\2\2\u0b3d\u0b3b\3\2\2\2\u0b3d\u0b3e\3\2\2\2\u0b3e\u0b40\3\2"+
		"\2\2\u0b3f\u0b3d\3\2\2\2\u0b40\u0b41\7\u012c\2\2\u0b41\u0b46\5\u00e0q"+
		"\2\u0b42\u0b43\7\26\2\2\u0b43\u0b45\5\u00e0q\2\u0b44\u0b42\3\2\2\2\u0b45"+
		"\u0b48\3\2\2\2\u0b46\u0b44\3\2\2\2\u0b46\u0b47\3\2\2\2\u0b47\u0b4a\3\2"+
		"\2\2\u0b48\u0b46\3\2\2\2\u0b49\u0b4b\5\u00e2r\2\u0b4a\u0b49\3\2\2\2\u0b4a"+
		"\u0b4b\3\2\2\2\u0b4b\u00bb\3\2\2\2\u0b4c\u0b4d\7\u0092\2\2\u0b4d\u0b52"+
		"\5\u00d8m\2\u0b4e\u0b4f\7\26\2\2\u0b4f\u0b51\5\u00d8m\2\u0b50\u0b4e\3"+
		"\2\2\2\u0b51\u0b54\3\2\2\2\u0b52\u0b50\3\2\2\2\u0b52\u0b53\3\2\2\2\u0b53"+
		"\u0b55\3\2\2\2\u0b54\u0b52\3\2\2\2\u0b55\u0b56\7\u00d2\2\2\u0b56\u0b57"+
		"\7\u00e5\2\2\u0b57\u0b5c\5\u044c\u0227\2\u0b58\u0b59\7\26\2\2\u0b59\u0b5b"+
		"\5\u044c\u0227\2\u0b5a\u0b58\3\2\2\2\u0b5b\u0b5e\3\2\2\2\u0b5c\u0b5a\3"+
		"\2\2\2\u0b5c\u0b5d\3\2\2\2\u0b5d\u0b5f\3\2\2\2\u0b5e\u0b5c\3\2\2\2\u0b5f"+
		"\u0b60\7\u012c\2\2\u0b60\u0b65\5\u00e0q\2\u0b61\u0b62\7\26\2\2\u0b62\u0b64"+
		"\5\u00e0q\2\u0b63\u0b61\3\2\2\2\u0b64\u0b67\3\2\2\2\u0b65\u0b63\3\2\2"+
		"\2\u0b65\u0b66\3\2\2\2\u0b66\u0b69\3\2\2\2\u0b67\u0b65\3\2\2\2\u0b68\u0b6a"+
		"\5\u00e2r\2\u0b69\u0b68\3\2\2\2\u0b69\u0b6a\3\2\2\2\u0b6a\u00bd\3\2\2"+
		"\2\u0b6b\u0b6c\7\u0092\2\2\u0b6c\u0b71\5\u00d6l\2\u0b6d\u0b6e\7\26\2\2"+
		"\u0b6e\u0b70\5\u00d6l\2\u0b6f\u0b6d\3\2\2\2\u0b70\u0b73\3\2\2\2\u0b71"+
		"\u0b6f\3\2\2\2\u0b71\u0b72\3\2\2\2\u0b72\u0b74\3\2\2\2\u0b73\u0b71\3\2"+
		"\2\2\u0b74\u0b75\7\u00d2\2\2\u0b75\u0b7f\7\u010e\2\2\u0b76\u0b80\7\20"+
		"\2\2\u0b77\u0b7c\5\u0438\u021d\2\u0b78\u0b79\7\26\2\2\u0b79\u0b7b\5\u0438"+
		"\u021d\2\u0b7a\u0b78\3\2\2\2\u0b7b\u0b7e\3\2\2\2\u0b7c\u0b7a\3\2\2\2\u0b7c"+
		"\u0b7d\3\2\2\2\u0b7d\u0b80\3\2\2\2\u0b7e\u0b7c\3\2\2\2\u0b7f\u0b76\3\2"+
		"\2\2\u0b7f\u0b77\3\2\2\2\u0b80\u0b81\3\2\2\2\u0b81\u0b82\7\u012c\2\2\u0b82"+
		"\u0b87\5\u00e0q\2\u0b83\u0b84\7\26\2\2\u0b84\u0b86\5\u00e0q\2\u0b85\u0b83"+
		"\3\2\2\2\u0b86\u0b89\3\2\2\2\u0b87\u0b85\3\2\2\2\u0b87\u0b88\3\2\2\2\u0b88"+
		"\u0b8b\3\2\2\2\u0b89\u0b87\3\2\2\2\u0b8a\u0b8c\5\u00e2r\2\u0b8b\u0b8a"+
		"\3\2\2\2\u0b8b\u0b8c\3\2\2\2\u0b8c\u00bf\3\2\2\2\u0b8d\u0b8e\7\u0092\2"+
		"\2\u0b8e\u0b93\5\u00d4k\2\u0b8f\u0b90\7\26\2\2\u0b90\u0b92\5\u00d4k\2"+
		"\u0b91\u0b8f\3\2\2\2\u0b92\u0b95\3\2\2\2\u0b93\u0b91\3\2\2\2\u0b93\u0b94"+
		"\3\2\2\2\u0b94\u0b96\3\2\2\2\u0b95\u0b93\3\2\2\2\u0b96\u0b97\7\u00d2\2"+
		"\2\u0b97\u0b98\7\u0116\2\2\u0b98\u0b9d\5\u0466\u0234\2\u0b99\u0b9a\7\26"+
		"\2\2\u0b9a\u0b9c\5\u0466\u0234\2\u0b9b\u0b99\3\2\2\2\u0b9c\u0b9f\3\2\2"+
		"\2\u0b9d\u0b9b\3\2\2\2\u0b9d\u0b9e\3\2\2\2\u0b9e\u0ba0\3\2\2\2\u0b9f\u0b9d"+
		"\3\2\2\2\u0ba0\u0ba1\7\u012c\2\2\u0ba1\u0ba6\5\u00e0q\2\u0ba2\u0ba3\7"+
		"\26\2\2\u0ba3\u0ba5\5\u00e0q\2\u0ba4\u0ba2\3\2\2\2\u0ba5\u0ba8\3\2\2\2"+
		"\u0ba6\u0ba4\3\2\2\2\u0ba6\u0ba7\3\2\2\2\u0ba7\u0baa\3\2\2\2\u0ba8\u0ba6"+
		"\3\2\2\2\u0ba9\u0bab\5\u00e2r\2\u0baa\u0ba9\3\2\2\2\u0baa\u0bab\3\2\2"+
		"\2\u0bab\u00c1\3\2\2\2\u0bac\u0bad\7\u0092\2\2\u0bad\u0bb2\5\u00d2j\2"+
		"\u0bae\u0baf\7\26\2\2\u0baf\u0bb1\5\u00d2j\2\u0bb0\u0bae\3\2\2\2\u0bb1"+
		"\u0bb4\3\2\2\2\u0bb2\u0bb0\3\2\2\2\u0bb2\u0bb3\3\2\2\2\u0bb3\u0bb7\3\2"+
		"\2\2\u0bb4\u0bb2\3\2\2\2\u0bb5\u0bb6\7\u00d2\2\2\u0bb6\u0bb8\7\u0127\2"+
		"\2\u0bb7\u0bb5\3\2\2\2\u0bb7\u0bb8\3\2\2\2\u0bb8\u0bb9\3\2\2\2\u0bb9\u0bba"+
		"\7\u012c\2\2\u0bba\u0bbf\5\u00e0q\2\u0bbb\u0bbc\7\26\2\2\u0bbc\u0bbe\5"+
		"\u00e0q\2\u0bbd\u0bbb\3\2\2\2\u0bbe\u0bc1\3\2\2\2\u0bbf\u0bbd\3\2\2\2"+
		"\u0bbf\u0bc0\3\2\2\2\u0bc0\u0bc3\3\2\2\2\u0bc1\u0bbf\3\2\2\2\u0bc2\u0bc4"+
		"\5\u00e2r\2\u0bc3\u0bc2\3\2\2\2\u0bc3\u0bc4\3\2\2\2\u0bc4\u00c3\3\2\2"+
		"\2\u0bc5\u0bc6\7\u0092\2\2\u0bc6\u0bcb\5\u00d0i\2\u0bc7\u0bc8\7\26\2\2"+
		"\u0bc8\u0bca\5\u00d0i\2\u0bc9\u0bc7\3\2\2\2\u0bca\u0bcd\3\2\2\2\u0bcb"+
		"\u0bc9\3\2\2\2\u0bcb\u0bcc\3\2\2\2\u0bcc\u0bce\3\2\2\2\u0bcd\u0bcb\3\2"+
		"\2\2\u0bce\u0bd0\7\u00d2\2\2\u0bcf\u0bd1\7\u0129\2\2\u0bd0\u0bcf\3\2\2"+
		"\2\u0bd0\u0bd1\3\2\2\2\u0bd1\u0bd2\3\2\2\2\u0bd2\u0bd3\5\u043a\u021e\2"+
		"\u0bd3\u0bd4\7\u012c\2\2\u0bd4\u0bd9\5\u00e0q\2\u0bd5\u0bd6\7\26\2\2\u0bd6"+
		"\u0bd8\5\u00e0q\2\u0bd7\u0bd5\3\2\2\2\u0bd8\u0bdb\3\2\2\2\u0bd9\u0bd7"+
		"\3\2\2\2\u0bd9\u0bda\3\2\2\2\u0bda\u0bdd\3\2\2\2\u0bdb\u0bd9\3\2\2\2\u0bdc"+
		"\u0bde\5\u00e2r\2\u0bdd\u0bdc\3\2\2\2\u0bdd\u0bde\3\2\2\2\u0bde\u00c5"+
		"\3\2\2\2\u0bdf\u0be0\7\u0092\2\2\u0be0\u0be1\7\u02a4\2\2\u0be1\u0bf7\7"+
		"\u00d2\2\2\u0be2\u0be4\t\r\2\2\u0be3\u0be2\3\2\2\2\u0be3\u0be4\3\2\2\2"+
		"\u0be4\u0be5\3\2\2\2\u0be5\u0be6\7\u012f\2\2\u0be6\u0beb\5\u044e\u0228"+
		"\2\u0be7\u0be8\7\26\2\2\u0be8\u0bea\5\u044e\u0228\2\u0be9\u0be7\3\2\2"+
		"\2\u0bea\u0bed\3\2\2\2\u0beb\u0be9\3\2\2\2\u0beb\u0bec\3\2\2\2\u0bec\u0bf8"+
		"\3\2\2\2\u0bed\u0beb\3\2\2\2\u0bee\u0bef\7\u00a9\2\2\u0bef\u0bf4\5\u0454"+
		"\u022b\2\u0bf0\u0bf1\7\26\2\2\u0bf1\u0bf3\5\u0454\u022b\2\u0bf2\u0bf0"+
		"\3\2\2\2\u0bf3\u0bf6\3\2\2\2\u0bf4\u0bf2\3\2\2\2\u0bf4\u0bf5\3\2\2\2\u0bf5"+
		"\u0bf8\3\2\2\2\u0bf6\u0bf4\3\2\2\2\u0bf7\u0be3\3\2\2\2\u0bf7\u0bee\3\2"+
		"\2\2\u0bf8\u0bf9\3\2\2\2\u0bf9\u0bfa\7\u012c\2\2\u0bfa\u0bff\5\u00e0q"+
		"\2\u0bfb\u0bfc\7\26\2\2\u0bfc\u0bfe\5\u00e0q\2\u0bfd\u0bfb\3\2\2\2\u0bfe"+
		"\u0c01\3\2\2\2\u0bff\u0bfd\3\2\2\2\u0bff\u0c00\3\2\2\2\u0c00\u0c03\3\2"+
		"\2\2\u0c01\u0bff\3\2\2\2\u0c02\u0c04\5\u00e2r\2\u0c03\u0c02\3\2\2\2\u0c03"+
		"\u0c04\3\2\2\2\u0c04\u00c7\3\2\2\2\u0c05\u0c06\7\u0092\2\2\u0c06\u0c0b"+
		"\5\u00ceh\2\u0c07\u0c08\7\26\2\2\u0c08\u0c0a\5\u00ceh\2\u0c09\u0c07\3"+
		"\2\2\2\u0c0a\u0c0d\3\2\2\2\u0c0b\u0c09\3\2\2\2\u0c0b\u0c0c\3\2\2\2\u0c0c"+
		"\u0c0e\3\2\2\2\u0c0d\u0c0b\3\2\2\2\u0c0e\u0c0f\7\u00d2\2\2\u0c0f\u0c10"+
		"\7\u0139\2\2\u0c10\u0c15\5\u0450\u0229\2\u0c11\u0c12\7\26\2\2\u0c12\u0c14"+
		"\5\u0450\u0229\2\u0c13\u0c11\3\2\2\2\u0c14\u0c17\3\2\2\2\u0c15\u0c13\3"+
		"\2\2\2\u0c15\u0c16\3\2\2\2\u0c16\u0c18\3\2\2\2\u0c17\u0c15\3\2\2\2\u0c18"+
		"\u0c19\7\u012c\2\2\u0c19\u0c1e\5\u00e0q\2\u0c1a\u0c1b\7\26\2\2\u0c1b\u0c1d"+
		"\5\u00e0q\2\u0c1c\u0c1a\3\2\2\2\u0c1d\u0c20\3\2\2\2\u0c1e\u0c1c\3\2\2"+
		"\2\u0c1e\u0c1f\3\2\2\2\u0c1f\u0c22\3\2\2\2\u0c20\u0c1e\3\2\2\2\u0c21\u0c23"+
		"\5\u00e2r\2\u0c22\u0c21\3\2\2\2\u0c22\u0c23\3\2\2\2\u0c23\u00c9\3\2\2"+
		"\2\u0c24\u0c25\7\u0092\2\2\u0c25\u0c26\7\u01a3\2\2\u0c26\u0c27\7\u00cf"+
		"\2\2\u0c27\u0c28\5\u00ccg\2\u0c28\u0c29\7\u012c\2\2\u0c29\u0c2e\5\u00e0"+
		"q\2\u0c2a\u0c2b\7\26\2\2\u0c2b\u0c2d\5\u00e0q\2\u0c2c\u0c2a\3\2\2\2\u0c2d"+
		"\u0c30\3\2\2\2\u0c2e\u0c2c\3\2\2\2\u0c2e\u0c2f\3\2\2\2\u0c2f\u0c32\3\2"+
		"\2\2\u0c30\u0c2e\3\2\2\2\u0c31\u0c33\5\u00e2r\2\u0c32\u0c31\3\2\2\2\u0c32"+
		"\u0c33\3\2\2\2\u0c33\u00cb\3\2\2\2\u0c34\u0c35\7<\2\2\u0c35\u0c3a\5\u0488"+
		"\u0245\2\u0c36\u0c37\7\26\2\2\u0c37\u0c39\5\u0488\u0245\2\u0c38\u0c36"+
		"\3\2\2\2\u0c39\u0c3c\3\2\2\2\u0c3a\u0c38\3\2\2\2\u0c3a\u0c3b\3\2\2\2\u0c3b"+
		"\u0c5c\3\2\2\2\u0c3c\u0c3a\3\2\2\2\u0c3d\u0c3e\7)\2\2\u0c3e\u0c5c\7=\2"+
		"\2\u0c3f\u0c40\7\u0121\2\2\u0c40\u0c45\5\u048a\u0246\2\u0c41\u0c42\7\26"+
		"\2\2\u0c42\u0c44\5\u048a\u0246\2\u0c43\u0c41\3\2\2\2\u0c44\u0c47\3\2\2"+
		"\2\u0c45\u0c43\3\2\2\2\u0c45\u0c46\3\2\2\2\u0c46\u0c5c\3\2\2\2\u0c47\u0c45"+
		"\3\2\2\2\u0c48\u0c4c\7\u012a\2\2\u0c49\u0c4a\5\u046a\u0236\2\u0c4a\u0c4b"+
		"\7\23\2\2\u0c4b\u0c4d\3\2\2\2\u0c4c\u0c49\3\2\2\2\u0c4c\u0c4d\3\2\2\2"+
		"\u0c4d\u0c4e\3\2\2\2\u0c4e\u0c58\5\u046c\u0237\2\u0c4f\u0c53\7\26\2\2"+
		"\u0c50\u0c51\5\u046a\u0236\2\u0c51\u0c52\7\23\2\2\u0c52\u0c54\3\2\2\2"+
		"\u0c53\u0c50\3\2\2\2\u0c53\u0c54\3\2\2\2\u0c54\u0c55\3\2\2\2\u0c55\u0c57"+
		"\5\u046c\u0237\2\u0c56\u0c4f\3\2\2\2\u0c57\u0c5a\3\2\2\2\u0c58\u0c56\3"+
		"\2\2\2\u0c58\u0c59\3\2\2\2\u0c59\u0c5c\3\2\2\2\u0c5a\u0c58\3\2\2\2\u0c5b"+
		"\u0c34\3\2\2\2\u0c5b\u0c3d\3\2\2\2\u0c5b\u0c3f\3\2\2\2\u0c5b\u0c48\3\2"+
		"\2\2\u0c5c\u00cd\3\2\2\2\u0c5d\u0c5f\7)\2\2\u0c5e\u0c60\7\u00eb\2\2\u0c5f"+
		"\u0c5e\3\2\2\2\u0c5f\u0c60\3\2\2\2\u0c60\u0c64\3\2\2\2\u0c61\u0c64\7\u0185"+
		"\2\2\u0c62\u0c64\7\u02bd\2\2\u0c63\u0c5d\3\2\2\2\u0c63\u0c61\3\2\2\2\u0c63"+
		"\u0c62\3\2\2\2\u0c64\u00cf\3\2\2\2\u0c65\u0c67\7)\2\2\u0c66\u0c68\7\u00eb"+
		"\2\2\u0c67\u0c66\3\2\2\2\u0c67\u0c68\3\2\2\2\u0c68\u0c8d\3\2\2\2\u0c69"+
		"\u0c8d\7,\2\2\u0c6a\u0c8d\7e\2\2\u0c6b\u0c8d\7\u009d\2\2\u0c6c\u0c8d\7"+
		"\u00a3\2\2\u0c6d\u0c79\7\u00f3\2\2\u0c6e\u0c6f\7\3\2\2\u0c6f\u0c74\5\u0428"+
		"\u0215\2\u0c70\u0c71\7\26\2\2\u0c71\u0c73\5\u0428\u0215\2\u0c72\u0c70"+
		"\3\2\2\2\u0c73\u0c76\3\2\2\2\u0c74\u0c72\3\2\2\2\u0c74\u0c75\3\2\2\2\u0c75"+
		"\u0c77\3\2\2\2\u0c76\u0c74\3\2\2\2\u0c77\u0c78\7\4\2\2\u0c78\u0c7a\3\2"+
		"\2\2\u0c79\u0c6e\3\2\2\2\u0c79\u0c7a\3\2\2\2\u0c7a\u0c8d\3\2\2\2\u0c7b"+
		"\u0c8d\7\u0114\2\2\u0c7c\u0c8d\7\u012d\2\2\u0c7d\u0c8d\7\u02bc\2\2\u0c7e"+
		"\u0c8a\7\u0134\2\2\u0c7f\u0c80\7\3\2\2\u0c80\u0c85\5\u0428\u0215\2\u0c81"+
		"\u0c82\7\26\2\2\u0c82\u0c84\5\u0428\u0215\2\u0c83\u0c81\3\2\2\2\u0c84"+
		"\u0c87\3\2\2\2\u0c85\u0c83\3\2\2\2\u0c85\u0c86\3\2\2\2\u0c86\u0c88\3\2"+
		"\2\2\u0c87\u0c85\3\2\2\2\u0c88\u0c89\7\4\2\2\u0c89\u0c8b\3\2\2\2\u0c8a"+
		"\u0c7f\3\2\2\2\u0c8a\u0c8b\3\2\2\2\u0c8b\u0c8d\3\2\2\2\u0c8c\u0c65\3\2"+
		"\2\2\u0c8c\u0c69\3\2\2\2\u0c8c\u0c6a\3\2\2\2\u0c8c\u0c6b\3\2\2\2\u0c8c"+
		"\u0c6c\3\2\2\2\u0c8c\u0c6d\3\2\2\2\u0c8c\u0c7b\3\2\2\2\u0c8c\u0c7c\3\2"+
		"\2\2\u0c8c\u0c7d\3\2\2\2\u0c8c\u0c7e\3\2\2\2\u0c8d\u00d1\3\2\2\2\u0c8e"+
		"\u0cb1\7\u02a5\2\2\u0c8f\u0cb1\7\u01fa\2\2\u0c90\u0cb1\7\u02a6\2\2\u0c91"+
		"\u0cb1\7\u02a7\2\2\u0c92\u0cb1\7\u02a8\2\2\u0c93\u0cb1\7\u02a9\2\2\u0c94"+
		"\u0cb1\7\u02aa\2\2\u0c95\u0cb1\7\u02ab\2\2\u0c96\u0cb1\7\u02ad\2\2\u0c97"+
		"\u0cb1\7\u02ae\2\2\u0c98\u0cb1\7\u02ac\2\2\u0c99\u0cb1\7\u02af\2\2\u0c9a"+
		"\u0c9d\7\u0293\2\2\u0c9b\u0c9c\t\5\2\2\u0c9c\u0c9e\7\u02a5\2\2\u0c9d\u0c9b"+
		"\3\2\2\2\u0c9d\u0c9e\3\2\2\2\u0c9e\u0ca1\3\2\2\2\u0c9f\u0ca0\t\5\2\2\u0ca0"+
		"\u0ca2\7\u02af\2\2\u0ca1\u0c9f\3\2\2\2\u0ca1\u0ca2\3\2\2\2\u0ca2\u0cb1"+
		"\3\2\2\2\u0ca3\u0cb1\7\u02b0\2\2\u0ca4\u0cb1\7\u02b1\2\2\u0ca5\u0cb1\7"+
		"\u0081\2\2\u0ca6\u0cb1\7\u02b2\2\2\u0ca7\u0cb1\7\u02b3\2\2\u0ca8\u0cb1"+
		"\7\u02b4\2\2\u0ca9\u0cb1\7\u02b5\2\2\u0caa\u0cb1\7\u02b6\2\2\u0cab\u0cb1"+
		"\7\u02b7\2\2\u0cac\u0cb1\7\u02b8\2\2\u0cad\u0cb1\7\u02b9\2\2\u0cae\u0cb1"+
		"\7\u02ba\2\2\u0caf\u0cb1\7\u02bb\2\2\u0cb0\u0c8e\3\2\2\2\u0cb0\u0c8f\3"+
		"\2\2\2\u0cb0\u0c90\3\2\2\2\u0cb0\u0c91\3\2\2\2\u0cb0\u0c92\3\2\2\2\u0cb0"+
		"\u0c93\3\2\2\2\u0cb0\u0c94\3\2\2\2\u0cb0\u0c95\3\2\2\2\u0cb0\u0c96\3\2"+
		"\2\2\u0cb0\u0c97\3\2\2\2\u0cb0\u0c98\3\2\2\2\u0cb0\u0c99\3\2\2\2\u0cb0"+
		"\u0c9a\3\2\2\2\u0cb0\u0ca3\3\2\2\2\u0cb0\u0ca4\3\2\2\2\u0cb0\u0ca5\3\2"+
		"\2\2\u0cb0\u0ca6\3\2\2\2\u0cb0\u0ca7\3\2\2\2\u0cb0\u0ca8\3\2\2\2\u0cb0"+
		"\u0ca9\3\2\2\2\u0cb0\u0caa\3\2\2\2\u0cb0\u0cab\3\2\2\2\u0cb0\u0cac\3\2"+
		"\2\2\u0cb0\u0cad\3\2\2\2\u0cb0\u0cae\3\2\2\2\u0cb0\u0caf\3\2\2\2\u0cb1"+
		"\u00d3\3\2\2\2\u0cb2\u0cb3\t\16\2\2\u0cb3\u00d5\3\2\2\2\u0cb4\u0cb5\t"+
		"\17\2\2\u0cb5\u00d7\3\2\2\2\u0cb6\u0cb7\t\20\2\2\u0cb7\u00d9\3\2\2\2\u0cb8"+
		"\u0cb9\t\21\2\2\u0cb9\u00db\3\2\2\2\u0cba\u0cbb\5\u035e\u01b0\2\u0cbb"+
		"\u0cbe\7\23\2\2\u0cbc\u0cbf\5\u044a\u0226\2\u0cbd\u0cbf\7\20\2\2\u0cbe"+
		"\u0cbc\3\2\2\2\u0cbe\u0cbd\3\2\2\2\u0cbf\u00dd\3\2\2\2\u0cc0\u0ccc\5\u0496"+
		"\u024c\2\u0cc1\u0cc2\7\3\2\2\u0cc2\u0cc7\5\u0272\u013a\2\u0cc3\u0cc4\7"+
		"\26\2\2\u0cc4\u0cc6\5\u0272\u013a\2\u0cc5\u0cc3\3\2\2\2\u0cc6\u0cc9\3"+
		"\2\2\2\u0cc7\u0cc5\3\2\2\2\u0cc7\u0cc8\3\2\2\2\u0cc8\u0cca\3\2\2\2\u0cc9"+
		"\u0cc7\3\2\2\2\u0cca\u0ccb\7\4\2\2\u0ccb\u0ccd\3\2\2\2\u0ccc\u0cc1\3\2"+
		"\2\2\u0ccc\u0ccd\3\2\2\2\u0ccd\u00df\3\2\2\2\u0cce\u0cd3\5\u0476\u023c"+
		"\2\u0ccf\u0cd0\7\u0100\2\2\u0cd0\u0cd3\5\u047a\u023e\2\u0cd1\u0cd3\7\u00ef"+
		"\2\2\u0cd2\u0cce\3\2\2\2\u0cd2\u0ccf\3\2\2\2\u0cd2\u0cd1\3\2\2\2\u0cd3"+
		"\u00e1\3\2\2\2\u0cd4\u0cd5\7\u0144\2\2\u0cd5\u0cd6\7\u0092\2\2\u0cd6\u0cd7"+
		"\7\u0252\2\2\u0cd7\u00e3\3\2\2\2\u0cd8\u0cd9\t\22\2\2\u0cd9\u00e5\3\2"+
		"\2\2\u0cda\u0cdf\5\u00e8u\2\u0cdb\u0cdc\7\26\2\2\u0cdc\u0cde\5\u00e8u"+
		"\2\u0cdd\u0cdb\3\2\2\2\u0cde\u0ce1\3\2\2\2\u0cdf\u0cdd\3\2\2\2\u0cdf\u0ce0"+
		"\3\2\2\2\u0ce0\u0ceb\3\2\2\2\u0ce1\u0cdf\3\2\2\2\u0ce2\u0ce3\5\u04a2\u0252"+
		"\2\u0ce3\u0ce4\7\b\2\2\u0ce4\u0ce5\7\u026b\2\2\u0ce5\u0ceb\3\2\2\2\u0ce6"+
		"\u0ce7\5\u04a2\u0252\2\u0ce7\u0ce8\7\b\2\2\u0ce8\u0ce9\7\u0288\2\2\u0ce9"+
		"\u0ceb\3\2\2\2\u0cea\u0cda\3\2\2\2\u0cea\u0ce2\3\2\2\2\u0cea\u0ce6\3\2"+
		"\2\2\u0ceb\u00e7\3\2\2\2\u0cec\u0ced\5\u04a2\u0252\2\u0ced\u0cee\7\b\2"+
		"\2\u0cee\u0cef\5\u00eav\2\u0cef\u00e9\3\2\2\2\u0cf0\u0cf1\t\23\2\2\u0cf1"+
		"\u00eb\3\2\2\2\u0cf2\u0cf5\7Q\2\2\u0cf3\u0cf6\5\u04a2\u0252\2\u0cf4\u0cf6"+
		"\7\31\2\2\u0cf5\u0cf3\3\2\2\2\u0cf5\u0cf4\3\2\2\2\u0cf6\u0cf7\3\2\2\2"+
		"\u0cf7\u0cfc\5\u00eex\2\u0cf8\u0cf9\7\26\2\2\u0cf9\u0cfb\5\u00eex\2\u0cfa"+
		"\u0cf8\3\2\2\2\u0cfb\u0cfe\3\2\2\2\u0cfc\u0cfa\3\2\2\2\u0cfc\u0cfd\3\2"+
		"\2\2\u0cfd\u00ed\3\2\2\2\u0cfe\u0cfc\3\2\2\2\u0cff\u0d00\5\u04a2\u0252"+
		"\2\u0d00\u0d03\7\b\2\2\u0d01\u0d04\5\u00f0y\2\u0d02\u0d04\5\u00f2z\2\u0d03"+
		"\u0d01\3\2\2\2\u0d03\u0d02\3\2\2\2\u0d04\u00ef\3\2\2\2\u0d05\u0d06\t\24"+
		"\2\2\u0d06\u00f1\3\2\2\2\u0d07\u0d08\t\25\2\2\u0d08\u00f3\3\2\2\2\u0d09"+
		"\u0d0a\5\u04a2\u0252\2\u0d0a\u0d0b\7\b\2\2\u0d0b\u0d0c\7)\2\2\u0d0c\u0d11"+
		"\5\u00f6|\2\u0d0d\u0d0e\7\26\2\2\u0d0e\u0d10\5\u00f6|\2\u0d0f\u0d0d\3"+
		"\2\2\2\u0d10\u0d13\3\2\2\2\u0d11\u0d0f\3\2\2\2\u0d11\u0d12\3\2\2\2\u0d12"+
		"\u00f5\3\2\2\2\u0d13\u0d11\3\2\2\2\u0d14\u0d1b\7\u011e\2\2\u0d15\u0d18"+
		"\t\26\2\2\u0d16\u0d19\5\u04a2\u0252\2\u0d17\u0d19\7\31\2\2\u0d18\u0d16"+
		"\3\2\2\2\u0d18\u0d17\3\2\2\2\u0d18\u0d19\3\2\2\2\u0d19\u0d1b\3\2\2\2\u0d1a"+
		"\u0d14\3\2\2\2\u0d1a\u0d15\3\2\2\2\u0d1b\u00f7\3\2\2\2\u0d1c\u0d21\79"+
		"\2\2\u0d1d\u0d21\7(\2\2\u0d1e\u0d21\5\u00fa~\2\u0d1f\u0d21\5\u00fc\177"+
		"\2\u0d20\u0d1c\3\2\2\2\u0d20\u0d1d\3\2\2\2\u0d20\u0d1e\3\2\2\2\u0d20\u0d1f"+
		"\3\2\2\2\u0d21\u00f9\3\2\2\2\u0d22\u0d35\7\u00c6\2\2\u0d23\u0d35\7\u00e9"+
		"\2\2\u0d24\u0d35\7\u0087\2\2\u0d25\u0d35\7\u00af\2\2\u0d26\u0d28\7Z\2"+
		"\2\u0d27\u0d29\7W\2\2\u0d28\u0d27\3\2\2\2\u0d28\u0d29\3\2\2\2\u0d29\u0d35"+
		"\3\2\2\2\u0d2a\u0d2d\7\u024c\2\2\u0d2b\u0d2e\5\u049a\u024e\2\u0d2c\u0d2e"+
		"\7\31\2\2\u0d2d\u0d2b\3\2\2\2\u0d2d\u0d2c\3\2\2\2\u0d2e\u0d35\3\2\2\2"+
		"\u0d2f\u0d32\7\u022b\2\2\u0d30\u0d33\5\u049a\u024e\2\u0d31\u0d33\7\31"+
		"\2\2\u0d32\u0d30\3\2\2\2\u0d32\u0d31\3\2\2\2\u0d33\u0d35\3\2\2\2\u0d34"+
		"\u0d22\3\2\2\2\u0d34\u0d23\3\2\2\2\u0d34\u0d24\3\2\2\2\u0d34\u0d25\3\2"+
		"\2\2\u0d34\u0d26\3\2\2\2\u0d34\u0d2a\3\2\2\2\u0d34\u0d2f\3\2\2\2\u0d35"+
		"\u00fb\3\2\2\2\u0d36\u0d37\7\u00c6\2\2\u0d37\u0d49\7\u010b\2\2\u0d38\u0d39"+
		"\7\u00e9\2\2\u0d39\u0d49\7\u010b\2\2\u0d3a\u0d3b\7\u0087\2\2\u0d3b\u0d49"+
		"\7\u010b\2\2\u0d3c\u0d3d\7\u00af\2\2\u0d3d\u0d49\7\u010b\2\2\u0d3e\u0d3f"+
		"\7Z\2\2\u0d3f\u0d49\7\u010b\2\2\u0d40\u0d41\7\u010b\2\2\u0d41\u0d42\7"+
		"\u025e\2\2\u0d42\u0d43\7\65\2\2\u0d43\u0d46\t\27\2\2\u0d44\u0d47\5\u049a"+
		"\u024e\2\u0d45\u0d47\7\31\2\2\u0d46\u0d44\3\2\2\2\u0d46\u0d45\3\2\2\2"+
		"\u0d47\u0d49\3\2\2\2\u0d48\u0d36\3\2\2\2\u0d48\u0d38\3\2\2\2\u0d48\u0d3a"+
		"\3\2\2\2\u0d48\u0d3c\3\2\2\2\u0d48\u0d3e\3\2\2\2\u0d48\u0d40\3\2\2\2\u0d49"+
		"\u00fd\3\2\2\2\u0d4a\u0d54\7\u00a5\2\2\u0d4b\u0d50\5\u0100\u0081\2\u0d4c"+
		"\u0d4d\7\26\2\2\u0d4d\u0d4f\5\u0100\u0081\2\u0d4e\u0d4c\3\2\2\2\u0d4f"+
		"\u0d52\3\2\2\2\u0d50\u0d4e\3\2\2\2\u0d50\u0d51\3\2\2\2\u0d51\u0d55\3\2"+
		"\2\2\u0d52\u0d50\3\2\2\2\u0d53\u0d55\5\u037c\u01bf\2\u0d54\u0d4b\3\2\2"+
		"\2\u0d54\u0d53\3\2\2\2\u0d55\u0d5a\3\2\2\2\u0d56\u0d57\t\30\2\2\u0d57"+
		"\u0d58\7f\2\2\u0d58\u0d5a\5\f\7\2\u0d59\u0d4a\3\2\2\2\u0d59\u0d56\3\2"+
		"\2\2\u0d5a\u00ff\3\2\2\2\u0d5b\u0d5e\5\u04a2\u0252\2\u0d5c\u0d5e\5\u049a"+
		"\u024e\2\u0d5d\u0d5b\3\2\2\2\u0d5d\u0d5c\3\2\2\2\u0d5e\u0101\3\2\2\2\u0d5f"+
		"\u0d61\5\u0104\u0083\2\u0d60\u0d5f\3\2\2\2\u0d60\u0d61\3\2\2\2\u0d61\u0d62"+
		"\3\2\2\2\u0d62\u0d6b\5\u0106\u0084\2\u0d63\u0d65\5\u0104\u0083\2\u0d64"+
		"\u0d66\5\u0106\u0084\2\u0d65\u0d64\3\2\2\2\u0d65\u0d66\3\2\2\2\u0d66\u0d6b"+
		"\3\2\2\2\u0d67\u0d68\5\u0104\u0083\2\u0d68\u0d69\5\u0106\u0084\2\u0d69"+
		"\u0d6b\3\2\2\2\u0d6a\u0d60\3\2\2\2\u0d6a\u0d63\3\2\2\2\u0d6a\u0d67\3\2"+
		"\2\2\u0d6b\u0103\3\2\2\2\u0d6c\u0d6f\7\u0088\2\2\u0d6d\u0d70\5\u049a\u024e"+
		"\2\u0d6e\u0d70\7\31\2\2\u0d6f\u0d6d\3\2\2\2\u0d6f\u0d6e\3\2\2\2\u0d70"+
		"\u0d71\3\2\2\2\u0d71\u0d72\7\u0193\2\2\u0d72\u0105\3\2\2\2\u0d73\u0d74"+
		"\7\u00a5\2\2\u0d74\u0d79\5\u049a\u024e\2\u0d75\u0d76\7\26\2\2\u0d76\u0d78"+
		"\5\u049a\u024e\2\u0d77\u0d75\3\2\2\2\u0d78\u0d7b\3\2\2\2\u0d79\u0d77\3"+
		"\2\2\2\u0d79\u0d7a\3\2\2\2\u0d7a\u0d80\3\2\2\2\u0d7b\u0d79\3\2\2\2\u0d7c"+
		"\u0d7d\t\30\2\2\u0d7d\u0d7e\7f\2\2\u0d7e\u0d80\5\f\7\2\u0d7f\u0d73\3\2"+
		"\2\2\u0d7f\u0d7c\3\2\2\2\u0d80\u0107\3\2\2\2\u0d81\u0d86\t\31\2\2\u0d82"+
		"\u0d83\7\u0117\2\2\u0d83\u0d84\7\u00f1\2\2\u0d84\u0d85\7\b\2\2\u0d85\u0d87"+
		"\7\31\2\2\u0d86\u0d82\3\2\2\2\u0d86\u0d87\3\2\2\2\u0d87\u0d88\3\2\2\2"+
		"\u0d88\u0d8e\7\u0088\2\2\u0d89\u0d8f\5\6\4\2\u0d8a\u0d8f\5\u00a4S\2\u0d8b"+
		"\u0d8f\5\u00aaV\2\u0d8c\u0d8f\5\u0218\u010d\2\u0d8d\u0d8f\5\u021c\u010f"+
		"\2\u0d8e\u0d89\3\2\2\2\u0d8e\u0d8a\3\2\2\2\u0d8e\u0d8b\3\2\2\2\u0d8e\u0d8c"+
		"\3\2\2\2\u0d8e\u0d8d\3\2\2\2\u0d8f\u0109\3\2\2\2\u0d90\u0d9c\7\u025b\2"+
		"\2\u0d91\u0d9d\7)\2\2\u0d92\u0d95\7\u025c\2\2\u0d93\u0d96\5\u049a\u024e"+
		"\2\u0d94\u0d96\7\31\2\2\u0d95\u0d93\3\2\2\2\u0d95\u0d94\3\2\2\2\u0d96"+
		"\u0d9d\3\2\2\2\u0d97\u0d9a\7\u025d\2\2\u0d98\u0d9b\5\u049a\u024e\2\u0d99"+
		"\u0d9b\7\30\2\2\u0d9a\u0d98\3\2\2\2\u0d9a\u0d99\3\2\2\2\u0d9b\u0d9d\3"+
		"\2\2\2\u0d9c\u0d91\3\2\2\2\u0d9c\u0d92\3\2\2\2\u0d9c\u0d97\3\2\2\2\u0d9d"+
		"\u010b\3\2\2\2\u0d9e\u0d9f\7\u00db\2\2\u0d9f\u0da0\5\u0110\u0089\2\u0da0"+
		"\u010d\3\2\2\2\u0da1\u0da2\7\u025a\2\2\u0da2\u0da3\7p\2\2\u0da3\u0da4"+
		"\7\u00f0\2\2\u0da4\u0da7\7\u025c\2\2\u0da5\u0da8\5\u049a\u024e\2\u0da6"+
		"\u0da8\7\31\2\2\u0da7\u0da5\3\2\2\2\u0da7\u0da6\3\2\2\2\u0da8\u0dab\3"+
		"\2\2\2\u0da9\u0daa\7\u01d6\2\2\u0daa\u0dac\7\30\2\2\u0dab\u0da9\3\2\2"+
		"\2\u0dab\u0dac\3\2\2\2\u0dac\u010f\3\2\2\2\u0dad\u0dae\7K\2\2\u0dae\u0daf"+
		"\5\u0112\u008a\2\u0daf\u0db0\7\u00db\2\2\u0db0\u0db3\5\u0114\u008b\2\u0db1"+
		"\u0db2\7\u023b\2\2\u0db2\u0db4\5\u0116\u008c\2\u0db3\u0db1\3\2\2\2\u0db3"+
		"\u0db4\3\2\2\2\u0db4\u0db7\3\2\2\2\u0db5\u0db6\7\u01d6\2\2\u0db6\u0db8"+
		"\7\30\2\2\u0db7\u0db5\3\2\2\2\u0db7\u0db8\3\2\2\2\u0db8\u0111\3\2\2\2"+
		"\u0db9\u0dbc\5\u049a\u024e\2\u0dba\u0dbc\7\30\2\2\u0dbb\u0db9\3\2\2\2"+
		"\u0dbb\u0dba\3\2\2\2\u0dbc\u0113\3\2\2\2\u0dbd\u0dc0\5\u049a\u024e\2\u0dbe"+
		"\u0dc0\7\30\2\2\u0dbf\u0dbd\3\2\2\2\u0dbf\u0dbe\3\2\2\2\u0dc0\u0115\3"+
		"\2\2\2\u0dc1\u0dc4\5\u049a\u024e\2\u0dc2\u0dc4\7\30\2\2\u0dc3\u0dc1\3"+
		"\2\2\2\u0dc3\u0dc2\3\2\2\2\u0dc4\u0117\3\2\2\2\u0dc5\u0dc6\7\u0135\2\2"+
		"\u0dc6\u0dcb\5\u049a\u024e\2\u0dc7\u0dc8\7\26\2\2\u0dc8\u0dca\5\u049a"+
		"\u024e\2\u0dc9\u0dc7\3\2\2\2\u0dca\u0dcd\3\2\2\2\u0dcb\u0dc9\3\2\2\2\u0dcb"+
		"\u0dcc\3\2\2\2\u0dcc\u0dd2\3\2\2\2\u0dcd\u0dcb\3\2\2\2\u0dce\u0dcf\7\u0135"+
		"\2\2\u0dcf\u0dd0\7f\2\2\u0dd0\u0dd2\5\f\7\2\u0dd1\u0dc5\3\2\2\2\u0dd1"+
		"\u0dce\3\2\2\2\u0dd2\u0dd9\3\2\2\2\u0dd3\u0dd6\7\u0088\2\2\u0dd4\u0dd7"+
		"\7\31\2\2\u0dd5\u0dd7\5\u049a\u024e\2\u0dd6\u0dd4\3\2\2\2\u0dd6\u0dd5"+
		"\3\2\2\2\u0dd7\u0dd8\3\2\2\2\u0dd8\u0dda\7\u0193\2\2\u0dd9\u0dd3\3\2\2"+
		"\2\u0dd9\u0dda\3\2\2\2\u0dda\u0119\3\2\2\2\u0ddb\u0ddd\7\u00ef\2\2\u0ddc"+
		"\u0ddb\3\2\2\2\u0ddc\u0ddd\3\2\2\2\u0ddd\u0dde\3\2\2\2\u0dde\u0ddf\7\u023c"+
		"\2\2\u0ddf\u0de2\5\u0456\u022c\2\u0de0\u0de1\7\u0088\2\2\u0de1\u0de3\t"+
		"\32\2\2\u0de2\u0de0\3\2\2\2\u0de2\u0de3\3\2\2\2\u0de3\u011b\3\2\2\2\u0de4"+
		"\u0de5\7_\2\2\u0de5\u0de6\5\u046a\u0236\2\u0de6\u011d\3\2\2\2\u0de7\u0de8"+
		"\7\u008c\2\2\u0de8\u0df4\5\u0496\u024c\2\u0de9\u0dea\7\3\2\2\u0dea\u0def"+
		"\5\u0272\u013a\2\u0deb\u0dec\7\26\2\2\u0dec\u0dee\5\u0272\u013a\2\u0ded"+
		"\u0deb\3\2\2\2\u0dee\u0df1\3\2\2\2\u0def\u0ded\3\2\2\2\u0def\u0df0\3\2"+
		"\2\2\u0df0\u0df2\3\2\2\2\u0df1\u0def\3\2\2\2\u0df2\u0df3\7\4\2\2\u0df3"+
		"\u0df5\3\2\2\2\u0df4\u0de9\3\2\2\2\u0df4\u0df5\3\2\2\2\u0df5\u0df7\3\2"+
		"\2\2\u0df6\u0df8\7\u00f9\2\2\u0df7\u0df6\3\2\2\2\u0df7\u0df8\3\2\2\2\u0df8"+
		"\u0e00\3\2\2\2\u0df9\u0dfa\7\u011c\2\2\u0dfa\u0dfb\7\u008c\2\2\u0dfb\u0dfd"+
		"\5\u0498\u024d\2\u0dfc\u0dfe\7\u00f9\2\2\u0dfd\u0dfc\3\2\2\2\u0dfd\u0dfe"+
		"\3\2\2\2\u0dfe\u0e00\3\2\2\2\u0dff\u0de7\3\2\2\2\u0dff\u0df9\3\2\2\2\u0e00"+
		"\u011f\3\2\2\2\u0e01\u0e02\7\u009d\2\2\u0e02\u0e03\5\u045e\u0230\2\u0e03"+
		"\u0121\3\2\2\2\u0e04\u0e05\7\u01de\2\2\u0e05\u0e06\5\u0460\u0231\2\u0e06"+
		"\u0123\3\2\2\2\u0e07\u0e08\7\u00db\2\2\u0e08\u0e09\5\u0140\u00a1\2\u0e09"+
		"\u0125\3\2\2\2\u0e0a\u0e0b\7\u01e0\2\2\u0e0b\u0e0c\5\u0462\u0232\2\u0e0c"+
		"\u0127\3\2\2\2\u0e0d\u0e0e\7\u00ec\2\2\u0e0e\u0e10\5\u0464\u0233\2\u0e0f"+
		"\u0e11\7\u00f9\2\2\u0e10\u0e0f\3\2\2\2\u0e10\u0e11\3\2\2\2\u0e11\u0129"+
		"\3\2\2\2\u0e12\u0e13\7\u0100\2\2\u0e13\u0e15\5\u047a\u023e\2\u0e14\u0e16"+
		"\7\u00f9\2\2\u0e15\u0e14\3\2\2\2\u0e15\u0e16\3\2\2\2\u0e16\u012b\3\2\2"+
		"\2\u0e17\u0e18\7\u0116\2\2\u0e18\u0e1a\5\u0466\u0234\2\u0e19\u0e1b\7\u00f9"+
		"\2\2\u0e1a\u0e19\3\2\2\2\u0e1a\u0e1b\3\2\2\2\u0e1b\u012d\3\2\2\2\u0e1c"+
		"\u0e1d\7\u0121\2\2\u0e1d\u0e1e\5\u048a\u0246\2\u0e1e\u012f\3\2\2\2\u0e1f"+
		"\u0e20\7\u0125\2\2\u0e20\u0e21\5\u04a0\u0251\2\u0e21\u0131\3\2\2\2\u0e22"+
		"\u0e23\7\u0129\2\2\u0e23\u0e24\5\u043a\u021e\2\u0e24\u0133\3\2\2\2\u0e25"+
		"\u0e29\7\u012a\2\2\u0e26\u0e27\5\u046a\u0236\2\u0e27\u0e28\7\23\2\2\u0e28"+
		"\u0e2a\3\2\2\2\u0e29\u0e26\3\2\2\2\u0e29\u0e2a\3\2\2\2\u0e2a\u0e2b\3\2"+
		"\2\2\u0e2b\u0e2c\5\u046c\u0237\2\u0e2c\u0135\3\2\2\2\u0e2d\u0e2e\7\u012d"+
		"\2\2\u0e2e\u0e2f\5\u0472\u023a\2\u0e2f\u0137\3\2\2\2\u0e30\u0e31\7\u0238"+
		"\2\2\u0e31\u0e32\7\u0232\2\2\u0e32\u0e33\5\u0474\u023b\2\u0e33\u0139\3"+
		"\2\2\2\u0e34\u0e35\7\u012f\2\2\u0e35\u0e37\5\u044e\u0228\2\u0e36\u0e38"+
		"\7\u00f9\2\2\u0e37\u0e36\3\2\2\2\u0e37\u0e38\3\2\2\2\u0e38\u013b\3\2\2"+
		"\2\u0e39\u0e3a\7\u0139\2\2\u0e3a\u0e3c\5\u0450\u0229\2\u0e3b\u0e3d\7\u00f9"+
		"\2\2\u0e3c\u0e3b\3\2\2\2\u0e3c\u0e3d\3\2\2\2\u0e3d\u013d\3\2\2\2\u0e3e"+
		"\u0e3f\7\u013d\2\2\u0e3f\u0e40\5\u0446\u0224\2\u0e40\u013f\3\2\2\2\u0e41"+
		"\u0e42\5\u035e\u01b0\2\u0e42\u0e43\7\23\2\2\u0e43\u0e48\5\u044a\u0226"+
		"\2\u0e44\u0e46\7\u023b\2\2\u0e45\u0e44\3\2\2\2\u0e45\u0e46\3\2\2\2\u0e46"+
		"\u0e47\3\2\2\2\u0e47\u0e49\5\u045c\u022f\2\u0e48\u0e45\3\2\2\2\u0e48\u0e49"+
		"\3\2\2\2\u0e49\u0141\3\2\2\2\u0e4a\u0e4b\7\u0135\2\2\u0e4b\u0e4c\t\33"+
		"\2\2\u0e4c\u0143\3\2\2\2\u0e4d\u0e4e\7\u00b3\2\2\u0e4e\u0e50\5\u043a\u021e"+
		"\2\u0e4f\u0e51\5\u0194\u00cb\2\u0e50\u0e4f\3\2\2\2\u0e50\u0e51\3\2\2\2"+
		"\u0e51\u0145\3\2\2\2\u0e52\u0e53\7\u00d2\2\2\u0e53\u0e5a\7O\2\2\u0e54"+
		"\u0e55\7e\2\2\u0e55\u0e5b\7\u0193\2\2\u0e56\u0e57\7\u0253\2\2\u0e57\u0e5b"+
		"\7\u0193\2\2\u0e58\u0e59\7n\2\2\u0e59\u0e5b\7\u0129\2\2\u0e5a\u0e54\3"+
		"\2\2\2\u0e5a\u0e56\3\2\2\2\u0e5a\u0e58\3\2\2\2\u0e5b\u0147\3\2\2\2\u0e5c"+
		"\u0e66\7\u0223\2\2\u0e5d\u0e5e\7\u00ca\2\2\u0e5e\u0e63\7\u0223\2\2\u0e5f"+
		"\u0e60\7\u00d2\2\2\u0e60\u0e61\7\u0101\2\2\u0e61\u0e62\t\34\2\2\u0e62"+
		"\u0e64\7\u0193\2\2\u0e63\u0e5f\3\2\2\2\u0e63\u0e64\3\2\2\2\u0e64\u0e66"+
		"\3\2\2\2\u0e65\u0e5c\3\2\2\2\u0e65\u0e5d\3\2\2\2\u0e66\u0149\3\2\2\2\u0e67"+
		"\u0e69\7\u0144\2\2\u0e68\u0e6a\t\35\2\2\u0e69\u0e68\3\2\2\2\u0e69\u0e6a"+
		"\3\2\2\2\u0e6a\u0e6b\3\2\2\2\u0e6b\u0e6c\7G\2\2\u0e6c\u0e6d\7\u0252\2"+
		"\2\u0e6d\u014b\3\2\2\2\u0e6e\u0e6f\7\u00c8\2\2\u0e6f\u0e70\7d\2\2\u0e70"+
		"\u0e83\7\u0100\2\2\u0e71\u0e72\7d\2\2\u0e72\u0e73\7\u0100\2\2\u0e73\u0e80"+
		"\5\u047a\u023e\2\u0e74\u0e75\7\u01aa\2\2\u0e75\u0e76\7\u0100\2\2\u0e76"+
		"\u0e77\7\61\2\2\u0e77\u0e78\7\u0178\2\2\u0e78\u0e81\7\u0234\2\2\u0e79"+
		"\u0e7a\7\u0144\2\2\u0e7a\u0e7b\7\u0100\2\2\u0e7b\u0e7c\7\61\2\2\u0e7c"+
		"\u0e7d\7\u0178\2\2\u0e7d\u0e7e\7\u0234\2\2\u0e7e\u0e7f\7\u014c\2\2\u0e7f"+
		"\u0e81\7\u0236\2\2\u0e80\u0e74\3\2\2\2\u0e80\u0e79\3\2\2\2\u0e80\u0e81"+
		"\3\2\2\2\u0e81\u0e83\3\2\2\2\u0e82\u0e6e\3\2\2\2\u0e82\u0e71\3\2\2\2\u0e83"+
		"\u014d\3\2\2\2\u0e84\u0e85\t\36\2\2\u0e85\u014f\3\2\2\2\u0e86\u0e87\7"+
		"\u00c8\2\2\u0e87\u0e88\7d\2\2\u0e88\u0e89\7\u0113\2\2\u0e89\u0e8f\7\u00ad"+
		"\2\2\u0e8a\u0e8b\7d\2\2\u0e8b\u0e8c\7\u0113\2\2\u0e8c\u0e8d\7\u00ad\2"+
		"\2\u0e8d\u0e8f\5\u047c\u023f\2\u0e8e\u0e86\3\2\2\2\u0e8e\u0e8a\3\2\2\2"+
		"\u0e8f\u0151\3\2\2\2\u0e90\u0e91\7\u022f\2\2\u0e91\u0ea2\7\3\2\2\u0e92"+
		"\u0e97\5\u0156\u00ac\2\u0e93\u0e94\7\26\2\2\u0e94\u0e96\5\u0156\u00ac"+
		"\2\u0e95\u0e93\3\2\2\2\u0e96\u0e99\3\2\2\2\u0e97\u0e95\3\2\2\2\u0e97\u0e98"+
		"\3\2\2\2\u0e98\u0ea3\3\2\2\2\u0e99\u0e97\3\2\2\2\u0e9a\u0e9f\5\u0158\u00ad"+
		"\2\u0e9b\u0e9c\7\26\2\2\u0e9c\u0e9e\5\u0158\u00ad\2\u0e9d\u0e9b\3\2\2"+
		"\2\u0e9e\u0ea1\3\2\2\2\u0e9f\u0e9d\3\2\2\2\u0e9f\u0ea0\3\2\2\2\u0ea0\u0ea3"+
		"\3\2\2\2\u0ea1\u0e9f\3\2\2\2\u0ea2\u0e92\3\2\2\2\u0ea2\u0e9a\3\2\2\2\u0ea3"+
		"\u0ea4\3\2\2\2\u0ea4\u0ea5\7\4\2\2\u0ea5\u0153\3\2\2\2\u0ea6\u0ea7\7\u0144"+
		"\2\2\u0ea7\u0ea8\7\u01a3\2\2\u0ea8\u0ea9\7\u0088\2\2\u0ea9\u0eae\5\u015a"+
		"\u00ae\2\u0eaa\u0eab\7\26\2\2\u0eab\u0ead\5\u015a\u00ae\2\u0eac\u0eaa"+
		"\3\2\2\2\u0ead\u0eb0\3\2\2\2\u0eae\u0eac\3\2\2\2\u0eae\u0eaf\3\2\2\2\u0eaf"+
		"\u0155\3\2\2\2\u0eb0\u0eae\3\2\2\2\u0eb1\u0eb2\7\u022e\2\2\u0eb2\u0eb8"+
		"\5\u0480\u0241\2\u0eb3\u0eb4\7u\2\2\u0eb4\u0eb8\5\u0486\u0244\2\u0eb5"+
		"\u0eb6\7\u0237\2\2\u0eb6\u0eb8\5\u0484\u0243\2\u0eb7\u0eb1\3\2\2\2\u0eb7"+
		"\u0eb3\3\2\2\2\u0eb7\u0eb5\3\2\2\2\u0eb8\u0157\3\2\2\2\u0eb9\u0eba\7\u0233"+
		"\2\2\u0eba\u0ebb\5\u0482\u0242\2\u0ebb\u0159\3\2\2\2\u0ebc\u0ec0\5\u0476"+
		"\u023c\2\u0ebd\u0ebf\5\u015c\u00af\2\u0ebe\u0ebd\3\2\2\2\u0ebf\u0ec2\3"+
		"\2\2\2\u0ec0\u0ebe\3\2\2\2\u0ec0\u0ec1\3\2\2\2\u0ec1\u0ed1\3\2\2\2\u0ec2"+
		"\u0ec0\3\2\2\2\u0ec3\u0ec4\7\u0082\2\2\u0ec4\u0ec5";
	private static final String _serializedATNSegment2 =
		"\7\u0113\2\2\u0ec5\u0ec6\7\u0235\2\2\u0ec6\u0eca\5\u0478\u023d\2\u0ec7"+
		"\u0ec9\5\u015c\u00af\2\u0ec8\u0ec7\3\2\2\2\u0ec9\u0ecc\3\2\2\2\u0eca\u0ec8"+
		"\3\2\2\2\u0eca\u0ecb\3\2\2\2\u0ecb\u0ed1\3\2\2\2\u0ecc\u0eca\3\2\2\2\u0ecd"+
		"\u0ece\7\u00ef\2\2\u0ece\u0ecf\t\5\2\2\u0ecf\u0ed1\7\u0230\2\2\u0ed0\u0ebc"+
		"\3\2\2\2\u0ed0\u0ec3\3\2\2\2\u0ed0\u0ecd\3\2\2\2\u0ed1\u015b\3\2\2\2\u0ed2"+
		"\u0ed3\7\u0100\2\2\u0ed3\u0eda\5\u047a\u023e\2\u0ed4\u0ed5\7\u0113\2\2"+
		"\u0ed5\u0ed6\7\u00ad\2\2\u0ed6\u0eda\5\u047c\u023f\2\u0ed7\u0ed8\t\5\2"+
		"\2\u0ed8\u0eda\7\u0230\2\2\u0ed9\u0ed2\3\2\2\2\u0ed9\u0ed4\3\2\2\2\u0ed9"+
		"\u0ed7\3\2\2\2\u0eda\u015d\3\2\2\2\u0edb\u0edc\5\u0160\u00b1\2\u0edc\u0edd"+
		"\5\u0162\u00b2\2\u0edd\u0ede\7\u00d2\2\2\u0ede\u0ef2\5\u043a\u021e\2\u0edf"+
		"\u0eee\7$\2\2\u0ee0\u0ee9\7\u00d1\2\2\u0ee1\u0ee9\7!\2\2\u0ee2\u0ee9\7"+
		"#\2\2\u0ee3\u0ee9\7\"\2\2\u0ee4\u0ee5\7\u00d1\2\2\u0ee5\u0ee9\7\u0129"+
		"\2\2\u0ee6\u0ee7\7!\2\2\u0ee7\u0ee9\7\u0129\2\2\u0ee8\u0ee0\3\2\2\2\u0ee8"+
		"\u0ee1\3\2\2\2\u0ee8\u0ee2\3\2\2\2\u0ee8\u0ee3\3\2\2\2\u0ee8\u0ee4\3\2"+
		"\2\2\u0ee8\u0ee6\3\2\2\2\u0ee9\u0eeb\3\2\2\2\u0eea\u0eec\7\61\2\2\u0eeb"+
		"\u0eea\3\2\2\2\u0eeb\u0eec\3\2\2\2\u0eec\u0eed\3\2\2\2\u0eed\u0eef\5\u0434"+
		"\u021b\2\u0eee\u0ee8\3\2\2\2\u0eef\u0ef0\3\2\2\2\u0ef0\u0eee\3\2\2\2\u0ef0"+
		"\u0ef1\3\2\2\2\u0ef1\u0ef3\3\2\2\2\u0ef2\u0edf\3\2\2\2\u0ef2\u0ef3\3\2"+
		"\2\2\u0ef3\u0ef4\3\2\2\2\u0ef4\u0ef5\5\u0164\u00b3\2\u0ef5\u0ef6\7\u01ec"+
		"\2\2\u0ef6\u0ef8\7\u01e9\2\2\u0ef7\u0ef9\5\u016c\u00b7\2\u0ef8\u0ef7\3"+
		"\2\2\2\u0ef8\u0ef9\3\2\2\2\u0ef9\u0efa\3\2\2\2\u0efa\u0efb\5\u0166\u00b4"+
		"\2\u0efb\u015f\3\2\2\2\u0efc\u0efd\7\u00c8\2\2\u0efd\u0efe\7\u01fc\2\2"+
		"\u0efe\u0f03\79\2\2\u0eff\u0f03\7(\2\2\u0f00\u0f01\7 \2\2\u0f01\u0f03"+
		"\7\u00cf\2\2\u0f02\u0efc\3\2\2\2\u0f02\u0eff\3\2\2\2\u0f02\u0f00\3\2\2"+
		"\2\u0f03\u0161\3\2\2\2\u0f04\u0f13\7\u00a3\2\2\u0f05\u0f13\7e\2\2\u0f06"+
		"\u0f10\7\u0134\2\2\u0f07\u0f08\7\u00cf\2\2\u0f08\u0f0d\5\u0428\u0215\2"+
		"\u0f09\u0f0a\7\26\2\2\u0f0a\u0f0c\5\u0428\u0215\2\u0f0b\u0f09\3\2\2\2"+
		"\u0f0c\u0f0f\3\2\2\2\u0f0d\u0f0b\3\2\2\2\u0f0d\u0f0e\3\2\2\2\u0f0e\u0f11"+
		"\3\2\2\2\u0f0f\u0f0d\3\2\2\2\u0f10\u0f07\3\2\2\2\u0f10\u0f11\3\2\2\2\u0f11"+
		"\u0f13\3\2\2\2\u0f12\u0f04\3\2\2\2\u0f12\u0f05\3\2\2\2\u0f12\u0f06\3\2"+
		"\2\2\u0f13\u0163\3\2\2\2\u0f14\u0f15\7\u0088\2\2\u0f15\u0f16\7\u0201\2"+
		"\2\u0f16\u0f1b\7\u011e\2\2\u0f17\u0f18\7\u0088\2\2\u0f18\u0f19\7\u0201"+
		"\2\2\u0f19\u0f1b\7\u010a\2\2\u0f1a\u0f14\3\2\2\2\u0f1a\u0f17\3\2\2\2\u0f1b"+
		"\u0165\3\2\2\2\u0f1c\u0f1d\7\u0140\2\2\u0f1d\u0f1e\7\3\2\2\u0f1e\u0f1f"+
		"\5\u03f2\u01fa\2\u0f1f\u0f20\7\4\2\2\u0f20\u0f22\3\2\2\2\u0f21\u0f1c\3"+
		"\2\2\2\u0f21\u0f22\3\2\2\2\u0f22\u0f23\3\2\2\2\u0f23\u0f24\5\u0168\u00b5"+
		"\2\u0f24\u0167\3\2\2\2\u0f25\u0f32\5\u016a\u00b6\2\u0f26\u0f27\7:\2\2"+
		"\u0f27\u0f2b\7\u01e1\2\2\u0f28\u0f29\5\u016a\u00b6\2\u0f29\u0f2a\7\25"+
		"\2\2\u0f2a\u0f2c\3\2\2\2\u0f2b\u0f28\3\2\2\2\u0f2c\u0f2d\3\2\2\2\u0f2d"+
		"\u0f2b\3\2\2\2\u0f2d\u0f2e\3\2\2\2\u0f2e\u0f2f\3\2\2\2\u0f2f\u0f30\7v"+
		"\2\2\u0f30\u0f32\3\2\2\2\u0f31\u0f25\3\2\2\2\u0f31\u0f26\3\2\2\2\u0f32"+
		"\u0169\3\2\2\2\u0f33\u0f40\58\35\2\u0f34\u0f40\5\u0218\u010d\2\u0f35\u0f37"+
		"\5\u04e8\u0275\2\u0f36\u0f35\3\2\2\2\u0f36\u0f37\3\2\2\2\u0f37\u0f38\3"+
		"\2\2\2\u0f38\u0f40\5\u04fa\u027e\2\u0f39\u0f40\5\u00a4S\2\u0f3a\u0f40"+
		"\5\u00aaV\2\u0f3b\u0f40\5\u00aeX\2\u0f3c\u0f40\5\u0234\u011b\2\u0f3d\u0f40"+
		"\5\u021c\u010f\2\u0f3e\u0f40\5\u00b2Z\2\u0f3f\u0f33\3\2\2\2\u0f3f\u0f34"+
		"\3\2\2\2\u0f3f\u0f36\3\2\2\2\u0f3f\u0f39\3\2\2\2\u0f3f\u0f3a\3\2\2\2\u0f3f"+
		"\u0f3b\3\2\2\2\u0f3f\u0f3c\3\2\2\2\u0f3f\u0f3d\3\2\2\2\u0f3f\u0f3e\3\2"+
		"\2\2\u0f40\u016b\3\2\2\2\u0f41\u0f42\7\u00ca\2\2\u0f42\u0f45\7\u01cc\2"+
		"\2\u0f43\u0f45\7\u01cc\2\2\u0f44\u0f41\3\2\2\2\u0f44\u0f43\3\2\2\2\u0f45"+
		"\u016d\3\2\2\2\u0f46\u0f48\7\u009b\2\2\u0f47\u0f49\5\u046a\u0236\2\u0f48"+
		"\u0f47\3\2\2\2\u0f48\u0f49\3\2\2\2\u0f49\u0f4a\3\2\2\2\u0f4a\u0f52\5\u046c"+
		"\u0237\2\u0f4b\u0f4c\7\u009b\2\2\u0f4c\u0f4d\7_\2\2\u0f4d\u0f52\5\u046a"+
		"\u0236\2\u0f4e\u0f4f\7\u009b\2\2\u0f4f\u0f50\7\u024d\2\2\u0f50\u0f52\5"+
		"\u046e\u0238\2\u0f51\u0f46\3\2\2\2\u0f51\u0f4b\3\2\2\2\u0f51\u0f4e\3\2"+
		"\2\2\u0f52\u016f\3\2\2\2\u0f53\u0f55\5\u0428\u0215\2\u0f54\u0f56\5\u0314"+
		"\u018b\2\u0f55\u0f54\3\2\2\2\u0f55\u0f56\3\2\2\2\u0f56\u0f59\3\2\2\2\u0f57"+
		"\u0f58\7\u00ca\2\2\u0f58\u0f5a\7\u00cb\2\2\u0f59\u0f57\3\2\2\2\u0f59\u0f5a"+
		"\3\2\2\2\u0f5a\u0f5c\3\2\2\2\u0f5b\u0f5d\5\u02fa\u017e\2\u0f5c\u0f5b\3"+
		"\2\2\2\u0f5c\u0f5d\3\2\2\2\u0f5d\u0f5f\3\2\2\2\u0f5e\u0f60\5\u01a4\u00d3"+
		"\2\u0f5f\u0f5e\3\2\2\2\u0f5f\u0f60\3\2\2\2\u0f60\u0f62\3\2\2\2\u0f61\u0f63"+
		"\5\u03ce\u01e8\2\u0f62\u0f61\3\2\2\2\u0f62\u0f63\3\2\2\2\u0f63\u0f65\3"+
		"\2\2\2\u0f64\u0f66\5\u018c\u00c7\2\u0f65\u0f64\3\2\2\2\u0f65\u0f66\3\2"+
		"\2\2\u0f66\u0f68\3\2\2\2\u0f67\u0f69\5\u018e\u00c8\2\u0f68\u0f67\3\2\2"+
		"\2\u0f68\u0f69\3\2\2\2\u0f69\u0f6b\3\2\2\2\u0f6a\u0f6c\5\u0190\u00c9\2"+
		"\u0f6b\u0f6a\3\2\2\2\u0f6b\u0f6c\3\2\2\2\u0f6c\u0f6e\3\2\2\2\u0f6d\u0f6f"+
		"\5\u0192\u00ca\2\u0f6e\u0f6d\3\2\2\2\u0f6e\u0f6f\3\2\2\2\u0f6f\u0171\3"+
		"\2\2\2\u0f70\u0f71\7q\2\2\u0f71\u0f75\5\u0448\u0225\2\u0f72\u0f73\t\5"+
		"\2\2\u0f73\u0f74\7\u010a\2\2\u0f74\u0f76\7\u022f\2\2\u0f75\u0f72\3\2\2"+
		"\2\u0f75\u0f76\3\2\2\2\u0f76\u0173\3\2\2\2\u0f77\u0f7a\7\u0136\2\2\u0f78"+
		"\u0f7b\5\u0448\u0225\2\u0f79\u0f7b\7\u00cb\2\2\u0f7a\u0f78\3\2\2\2\u0f7a"+
		"\u0f79\3\2\2\2\u0f7b\u0175\3\2\2\2\u0f7c\u0f7d\7\66\2\2\u0f7d\u0f7e\t"+
		"\37\2\2\u0f7e\u0177\3\2\2\2\u0f7f\u0f80\7\u00ce\2\2\u0f80\u0f81\7\31\2"+
		"\2\u0f81\u0179\3\2\2\2\u0f82\u0f83\7^\2\2\u0f83\u0f84\7@\2\2\u0f84\u0f85"+
		"\t \2\2\u0f85\u017b\3\2\2\2\u0f86\u0f87\7\u0144\2\2\u0f87\u0f88\7\u00f9"+
		"\2\2\u0f88\u0f89\7\u00d2\2\2\u0f89\u0f8a\7n\2\2\u0f8a\u017d\3\2\2\2\u0f8b"+
		"\u0f8c\7D\2\2\u0f8c\u0f8d\t!\2\2\u0f8d\u017f\3\2\2\2\u0f8e\u0f8f\7D\2"+
		"\2\u0f8f\u0f90\7\31\2\2\u0f90\u0181\3\2\2\2\u0f91\u0f93\7\u00ca\2\2\u0f92"+
		"\u0f91\3\2\2\2\u0f92\u0f93\3\2\2\2\u0f93\u0f94\3\2\2\2\u0f94\u0f96\7\u013e"+
		"\2\2\u0f95\u0f97\7\u02da\2\2\u0f96\u0f95\3\2\2\2\u0f96\u0f97\3\2\2\2\u0f97"+
		"\u0183\3\2\2\2\u0f98\u0f99\7\u01f9\2\2\u0f99\u0f9a\t\"\2\2\u0f9a\u0185"+
		"\3\2\2\2\u0f9b\u0f9c\7\u0226\2\2\u0f9c\u0f9d\7J\2\2\u0f9d\u0187\3\2\2"+
		"\2\u0f9e\u0f9f\7\u022d\2\2\u0f9f\u0fa0\t\"\2\2\u0fa0\u0189\3\2\2\2\u0fa1"+
		"\u0fa2\7\u0229\2\2\u0fa2\u0fa3\t\27\2\2\u0fa3\u018b\3\2\2\2\u0fa4\u0fa5"+
		"\7\u0085\2\2\u0fa5\u0fa6\5\u0448\u0225\2\u0fa6\u0fa7\7\3\2\2\u0fa7\u0fac"+
		"\5\u0424\u0213\2\u0fa8\u0fa9\7\26\2\2\u0fa9\u0fab\5\u0424\u0213\2\u0faa"+
		"\u0fa8\3\2\2\2\u0fab\u0fae\3\2\2\2\u0fac\u0faa\3\2\2\2\u0fac\u0fad\3\2"+
		"\2\2\u0fad\u0faf\3\2\2\2\u0fae\u0fac\3\2\2\2\u0faf\u0fb0\7\4\2\2\u0fb0"+
		"\u018d\3\2\2\2\u0fb1\u0fb2\7\61\2\2\u0fb2\u0fb3\7\u0113\2\2\u0fb3\u0fb4"+
		"\7\u00ad\2\2\u0fb4\u018f\3\2\2\2\u0fb5\u0fb6\7\u0209\2\2\u0fb6\u0fb7\7"+
		"\u0205\2\2\u0fb7\u0191\3\2\2\2\u0fb8\u0fb9\7\u020b\2\2\u0fb9\u0fba\7\u0323"+
		"\2\2\u0fba\u0fbb\7\31\2\2\u0fbb\u0193\3\2\2\2\u0fbc\u0fc1\5\u0196\u00cc"+
		"\2\u0fbd\u0fc1\5\u0198\u00cd\2\u0fbe\u0fc1\5\u019a\u00ce\2\u0fbf\u0fc1"+
		"\5\u019c\u00cf\2\u0fc0\u0fbc\3\2\2\2\u0fc0\u0fbd\3\2\2\2\u0fc0\u0fbe\3"+
		"\2\2\2\u0fc0\u0fbf\3\2\2\2\u0fc1\u0fc2\3\2\2\2\u0fc2\u0fc0\3\2\2\2\u0fc2"+
		"\u0fc3\3\2\2\2\u0fc3\u0195\3\2\2\2\u0fc4\u0fc5\t#\2\2\u0fc5\u0fc8\7\u0208"+
		"\2\2\u0fc6\u0fc7\7M\2\2\u0fc7\u0fc9\7\u022f\2\2\u0fc8\u0fc6\3\2\2\2\u0fc8"+
		"\u0fc9\3\2\2\2\u0fc9\u0197\3\2\2\2\u0fca\u0fcb\t#\2\2\u0fcb\u0fcc\7\u010a"+
		"\2\2\u0fcc\u0fcd\7\u0151\2\2\u0fcd\u0fd0\7\u036c\2\2\u0fce\u0fcf\7M\2"+
		"\2\u0fcf\u0fd1\7\u022f\2\2\u0fd0\u0fce\3\2\2\2\u0fd0\u0fd1\3\2\2\2\u0fd1"+
		"\u0199\3\2\2\2\u0fd2\u0fd4\t#\2\2\u0fd3\u0fd5\7M\2\2\u0fd4\u0fd3\3\2\2"+
		"\2\u0fd4\u0fd5\3\2\2\2\u0fd5\u0fd6\3\2\2\2\u0fd6\u0fdb\7\u0250\2\2\u0fd7"+
		"\u0fd8\7\u0135\2\2\u0fd8\u0fd9\7\u012f\2\2\u0fd9\u0fdb\7\u0250\2\2\u0fda"+
		"\u0fd2\3\2\2\2\u0fda\u0fd7\3\2\2\2\u0fdb\u019b\3\2\2\2\u0fdc\u0fdd\7\u024e"+
		"\2\2\u0fdd\u0fde\7\u01ab\2\2\u0fde\u0fdf\7\u012f\2\2\u0fdf\u0fe0\7\u0251"+
		"\2\2\u0fe0\u019d\3\2\2\2\u0fe1\u0fea\7\3\2\2\u0fe2\u0fe7\5\u0428\u0215"+
		"\2\u0fe3\u0fe4\7\26\2\2\u0fe4\u0fe6\5\u0428\u0215\2\u0fe5\u0fe3\3\2\2"+
		"\2\u0fe6\u0fe9\3\2\2\2\u0fe7\u0fe5\3\2\2\2\u0fe7\u0fe8\3\2\2\2\u0fe8\u0feb"+
		"\3\2\2\2\u0fe9\u0fe7\3\2\2\2\u0fea\u0fe2\3\2\2\2\u0fea\u0feb\3\2\2\2\u0feb"+
		"\u0fec\3\2\2\2\u0fec\u0fed\7\4\2\2\u0fed\u0fee\7\61\2\2\u0fee\u0fef\7"+
		"\3\2\2\u0fef\u0ff0\5\u04fa\u027e\2\u0ff0\u0ff1\7\4\2\2\u0ff1\u0ff2\7\u0144"+
		"\2\2\u0ff2\u0ff3\7\u00c8\2\2\u0ff3\u0ff4\7^\2\2\u0ff4\u019f\3\2\2\2\u0ff5"+
		"\u0ff6\7\61\2\2\u0ff6\u0ff7\7\3\2\2\u0ff7\u0ff8\5\u04fa\u027e\2\u0ff8"+
		"\u0ff9\7\4\2\2\u0ff9\u0ffa\7\u0144\2\2\u0ffa\u0ffb\7\u00c8\2\2\u0ffb\u0ffc"+
		"\7^\2\2\u0ffc\u01a1\3\2\2\2\u0ffd\u0ffe\7\3\2\2\u0ffe\u1003\5\u0428\u0215"+
		"\2\u0fff\u1000\7\26\2\2\u1000\u1002\5\u0428\u0215\2\u1001\u0fff\3\2\2"+
		"\2\u1002\u1005\3\2\2\2\u1003\u1001\3\2\2\2\u1003\u1004\3\2\2\2\u1004\u1006"+
		"\3\2\2\2\u1005\u1003\3\2\2\2\u1006\u1007\7\4\2\2\u1007\u1009\3\2\2\2\u1008"+
		"\u0ffd\3\2\2\2\u1008\u1009\3\2\2\2\u1009\u100a\3\2\2\2\u100a\u100b\7\61"+
		"\2\2\u100b\u100c\5\u0348\u01a5\2\u100c\u01a3\3\2\2\2\u100d\u100e\7T\2"+
		"\2\u100e\u1010\5\u0458\u022d\2\u100f\u100d\3\2\2\2\u100f\u1010\3\2\2\2"+
		"\u1010\u101a\3\2\2\2\u1011\u1012\7\u0212\2\2\u1012\u101b\7\u00ac\2\2\u1013"+
		"\u101b\7\u0132\2\2\u1014\u101b\5\u0330\u0199\2\u1015\u1016\7G\2\2\u1016"+
		"\u1017\7\3\2\2\u1017\u1018\5\u03f4\u01fb\2\u1018\u1019\7\4\2\2\u1019\u101b"+
		"\3\2\2\2\u101a\u1011\3\2\2\2\u101a\u1013\3\2\2\2\u101a\u1014\3\2\2\2\u101a"+
		"\u1015\3\2\2\2\u101b\u01a5\3\2\2\2\u101c\u101d\7\u020d\2\2\u101d\u101e"+
		"\7>\2\2\u101e\u101f\7\u0314\2\2\u101f\u1020\7\u0132\2\2\u1020\u1021\7"+
		"\3\2\2\u1021\u1026\5\u0428\u0215\2\u1022\u1023\7\26\2\2\u1023\u1025\5"+
		"\u0428\u0215\2\u1024\u1022\3\2\2\2\u1025\u1028\3\2\2\2\u1026\u1024\3\2"+
		"\2\2\u1026\u1027\3\2\2\2\u1027\u1029\3\2\2\2\u1028\u1026\3\2\2\2\u1029"+
		"\u102d\7\4\2\2\u102a\u102b\7\u0314\2\2\u102b\u102c\7\u0361\2\2\u102c\u102e"+
		"\7\u03cc\2\2\u102d\u102a\3\2\2\2\u102d\u102e\3\2\2\2\u102e\u01a7\3\2\2"+
		"\2\u102f\u1030\5\u0428\u0215\2\u1030\u1033\5\u0314\u018b\2\u1031\u1032"+
		"\7\u00ca\2\2\u1032\u1034\7\u00cb\2\2\u1033\u1031\3\2\2\2\u1033\u1034\3"+
		"\2\2\2\u1034\u01a9\3\2\2\2\u1035\u1036\5\u0428\u0215\2\u1036\u103d\5\u0314"+
		"\u018b\2\u1037\u103c\5\u03d0\u01e9\2\u1038\u103c\5\u02fc\u017f\2\u1039"+
		"\u103a\7\u00ca\2\2\u103a\u103c\7\u00cb\2\2\u103b\u1037\3\2\2\2\u103b\u1038"+
		"\3\2\2\2\u103b\u1039\3\2\2\2\u103c\u103f\3\2\2\2\u103d\u103b\3\2\2\2\u103d"+
		"\u103e\3\2\2\2\u103e\u01ab\3\2\2\2\u103f\u103d\3\2\2\2\u1040\u1042\5\u047e"+
		"\u0240\2\u1041\u1040\3\2\2\2\u1041\u1042\3\2\2\2\u1042\u104f\3\2\2\2\u1043"+
		"\u1046\5\u0274\u013b\2\u1044\u1045\7\61\2\2\u1045\u1047\7\u00b7\2\2\u1046"+
		"\u1044\3\2\2\2\u1046\u1047\3\2\2\2\u1047\u1050\3\2\2\2\u1048\u1049\7\u0129"+
		"\2\2\u1049\u104a\7\u00b3\2\2\u104a\u104d\5\u043a\u021e\2\u104b\u104c\7"+
		"\61\2\2\u104c\u104e\7\u00b7\2\2\u104d\u104b\3\2\2\2\u104d\u104e\3\2\2"+
		"\2\u104e\u1050\3\2\2\2\u104f\u1043\3\2\2\2\u104f\u1048\3\2\2\2\u1050\u01ad"+
		"\3\2\2\2\u1051\u1052\5\u047e\u0240\2\u1052\u1053\5\u0274\u013b\2\u1053"+
		"\u01af\3\2\2\2\u1054\u1056\t$\2\2\u1055\u1054\3\2\2\2\u1055\u1056\3\2"+
		"\2\2\u1056\u1058\3\2\2\2\u1057\u1059\5\u047e\u0240\2\u1058\u1057\3\2\2"+
		"\2\u1058\u1059\3\2\2\2\u1059\u105a\3\2\2\2\u105a\u105d\5\u0288\u0145\2"+
		"\u105b\u105c\7\61\2\2\u105c\u105e\7\u00b7\2\2\u105d\u105b\3\2\2\2\u105d"+
		"\u105e\3\2\2\2\u105e\u01b1\3\2\2\2\u105f\u106d\7\u00fd\2\2\u1060\u1063"+
		"\5\u0314\u018b\2\u1061\u1062\7\61\2\2\u1062\u1064\7\u00b7\2\2\u1063\u1061"+
		"\3\2\2\2\u1063\u1064\3\2\2\2\u1064\u106e\3\2\2\2\u1065\u1066\5\u0314\u018b"+
		"\2\u1066\u1067\7C\2\2\u1067\u1068\7\u008a\2\2\u1068\u106b\5\u0314\u018b"+
		"\2\u1069\u106a\7\61\2\2\u106a\u106c\7\u00b7\2\2\u106b\u1069\3\2\2\2\u106b"+
		"\u106c\3\2\2\2\u106c\u106e\3\2\2\2\u106d\u1060\3\2\2\2\u106d\u1065\3\2"+
		"\2\2\u106e\u108b\3\2\2\2\u106f\u108b\5\u01b4\u00db\2\u1070\u108b\5\u01be"+
		"\u00e0\2\u1071\u108b\5\u01c6\u00e4\2\u1072\u108b\5\u01ca\u00e6\2\u1073"+
		"\u108b\5\u01cc\u00e7\2\u1074\u108b\5\u01ce\u00e8\2\u1075\u108b\5\u01d8"+
		"\u00ed\2\u1076\u108b\5\u01da\u00ee\2\u1077\u108b\5\u01dc\u00ef\2\u1078"+
		"\u108b\5\u01de\u00f0\2\u1079\u108b\5\u01e0\u00f1\2\u107a\u108b\5\u01e4"+
		"\u00f3\2\u107b\u108b\5\u01e6\u00f4\2\u107c\u108b\5\u01e8\u00f5\2\u107d"+
		"\u108b\5\u01ea\u00f6\2\u107e\u108b\5\u01ec\u00f7\2\u107f\u108b\5\u01f0"+
		"\u00f9\2\u1080\u108b\5\u01f2\u00fa\2\u1081\u108b\5\u01f4\u00fb\2\u1082"+
		"\u108b\5\u01f6\u00fc\2\u1083\u108b\5\u01f8\u00fd\2\u1084\u108b\5\u01fa"+
		"\u00fe\2\u1085\u108b\5\u01fe\u0100\2\u1086\u108b\5\u0200\u0101\2\u1087"+
		"\u108b\5\u0202\u0102\2\u1088\u108b\5\u0204\u0103\2\u1089\u108b\5\u0208"+
		"\u0105\2\u108a\u105f\3\2\2\2\u108a\u106f\3\2\2\2\u108a\u1070\3\2\2\2\u108a"+
		"\u1071\3\2\2\2\u108a\u1072\3\2\2\2\u108a\u1073\3\2\2\2\u108a\u1074\3\2"+
		"\2\2\u108a\u1075\3\2\2\2\u108a\u1076\3\2\2\2\u108a\u1077\3\2\2\2\u108a"+
		"\u1078\3\2\2\2\u108a\u1079\3\2\2\2\u108a\u107a\3\2\2\2\u108a\u107b\3\2"+
		"\2\2\u108a\u107c\3\2\2\2\u108a\u107d\3\2\2\2\u108a\u107e\3\2\2\2\u108a"+
		"\u107f\3\2\2\2\u108a\u1080\3\2\2\2\u108a\u1081\3\2\2\2\u108a\u1082\3\2"+
		"\2\2\u108a\u1083\3\2\2\2\u108a\u1084\3\2\2\2\u108a\u1085\3\2\2\2\u108a"+
		"\u1086\3\2\2\2\u108a\u1087\3\2\2\2\u108a\u1088\3\2\2\2\u108a\u1089\3\2"+
		"\2\2\u108b\u01b3\3\2\2\2\u108c\u1092\7\u0082\2\2\u108d\u1090\7\u01c6\2"+
		"\2\u108e\u1091\5\u035a\u01ae\2\u108f\u1091\5\u0506\u0284\2\u1090\u108e"+
		"\3\2\2\2\u1090\u108f\3\2\2\2\u1091\u1093\3\2\2\2\u1092\u108d\3\2\2\2\u1092"+
		"\u1093\3\2\2\2\u1093\u01b5\3\2\2\2\u1094\u1095\7\u0082\2\2\u1095\u1098"+
		"\7\u01c6\2\2\u1096\u1099\5\u035a\u01ae\2\u1097\u1099\5\u0506\u0284\2\u1098"+
		"\u1096\3\2\2\2\u1098\u1097\3\2\2\2\u1099\u01b7\3\2\2\2\u109a\u109c\7p"+
		"\2\2\u109b\u109a\3\2\2\2\u109b\u109c\3\2\2\2\u109c\u109d\3\2\2\2\u109d"+
		"\u109e\7\u00fa\2\2\u109e\u109f\t%\2\2\u109f\u10a0\7\31\2\2\u10a0\u01b9"+
		"\3\2\2\2\u10a1\u10a2\7\u00ae\2\2\u10a2\u10a3\7\u01ce\2\2\u10a3\u01bb\3"+
		"\2\2\2\u10a4\u10a5\7\u00ae\2\2\u10a5\u10a6\t&\2\2\u10a6\u01bd\3\2\2\2"+
		"\u10a7\u10a8\7\u00ae\2\2\u10a8\u10a9\t\'\2\2\u10a9\u01bf\3\2\2\2\u10aa"+
		"\u10ab\7\u00ae\2\2\u10ab\u10ac\t(\2\2\u10ac\u01c1\3\2\2\2\u10ad\u10ae"+
		"\7\u00ae\2\2\u10ae\u10af\t)\2\2\u10af\u01c3\3\2\2\2\u10b0\u10b1\7\u00dd"+
		"\2\2\u10b1\u10b2\7\u0123\2\2\u10b2\u10b3\7\u01ce\2\2\u10b3\u01c5\3\2\2"+
		"\2\u10b4\u10b5\7\u00dd\2\2\u10b5\u10b6\7\u0123\2\2\u10b6\u10b7\t*\2\2"+
		"\u10b7\u01c7\3\2\2\2\u10b8\u10b9\7\u00dd\2\2\u10b9\u10c9\7\u0123\2\2\u10ba"+
		"\u10ca\7\u01ce\2\2\u10bb\u10ca\7\u01e9\2\2\u10bc\u10bd\7\u011d\2\2\u10bd"+
		"\u10ca\7?\2\2\u10be\u10ca\7\u01eb\2\2\u10bf\u10c0\7\u0119\2\2\u10c0\u10ca"+
		"\7?\2\2\u10c1\u10c5\7\u01eb\2\2\u10c2\u10c3\7\u0119\2\2\u10c3\u10c5\7"+
		"?\2\2\u10c4\u10c1\3\2\2\2\u10c4\u10c2\3\2\2\2\u10c5\u10c6\3\2\2\2\u10c6"+
		"\u10c7\7\u0144\2\2\u10c7\u10ca\7\u00cc\2\2\u10c8\u10ca\7\u01c4\2\2\u10c9"+
		"\u10ba\3\2\2\2\u10c9\u10bb\3\2\2\2\u10c9\u10bc\3\2\2\2\u10c9\u10be\3\2"+
		"\2\2\u10c9\u10bf\3\2\2\2\u10c9\u10c4\3\2\2\2\u10c9\u10c8\3\2\2\2\u10ca"+
		"\u01c9\3\2\2\2\u10cb\u10cd\7\u00ca\2\2\u10cc\u10cb\3\2\2\2\u10cc\u10cd"+
		"\3\2\2\2\u10cd\u10ce\3\2\2\2\u10ce\u10d4\7g\2\2\u10cf\u10d1\7\u00ca\2"+
		"\2\u10d0\u10cf\3\2\2\2\u10d0\u10d1\3\2\2\2\u10d1\u10d2\3\2\2\2\u10d2\u10d4"+
		"\7\u013a\2\2\u10d3\u10cc\3\2\2\2\u10d3\u10d0\3\2\2\2\u10d4\u01cb\3\2\2"+
		"\2\u10d5\u10d6\7\u0083\2\2\u10d6\u01cd\3\2\2\2\u10d7\u10d8\7\u00fd\2\2"+
		"\u10d8\u10d9\7\u00cb\2\2\u10d9\u10da\7\u00d2\2\2\u10da\u10db\7\u00cb\2"+
		"\2\u10db\u10e3\7\u0168\2\2\u10dc\u10dd\7\u01bc\2\2\u10dd\u10de\7\u00d2"+
		"\2\2\u10de\u10df\7\u00cb\2\2\u10df\u10e3\7\u0168\2\2\u10e0\u10e1\7\u00cb"+
		"\2\2\u10e1\u10e3\7?\2\2\u10e2\u10d7\3\2\2\2\u10e2\u10dc\3\2\2\2\u10e2"+
		"\u10e0\3\2\2\2\u10e3\u01cf\3\2\2\2\u10e4\u10e5\7\u01bc\2\2\u10e5\u10e6"+
		"\7\u00d2\2\2\u10e6\u10e7\7\u00cb\2\2\u10e7\u10eb\7\u0168\2\2\u10e8\u10e9"+
		"\7\u00cb\2\2\u10e9\u10eb\7?\2\2\u10ea\u10e4\3\2\2\2\u10ea\u10e8\3\2\2"+
		"\2\u10eb\u01d1\3\2\2\2\u10ec\u10ed\t+\2\2\u10ed\u10ee\7\u01ea\2\2\u10ee"+
		"\u10ef\7\u01ec\2\2\u10ef\u01d3\3\2\2\2\u10f0\u10f1\7\u00f2\2\2\u10f1\u10f2"+
		"\7\u01ce\2\2\u10f2\u10f6\7^\2\2\u10f3\u10f4\7U\2\2\u10f4\u10f6\7\u01ce"+
		"\2\2\u10f5\u10f0\3\2\2\2\u10f5\u10f3\3\2\2\2\u10f6\u01d5\3\2\2\2\u10f7"+
		"\u10f8\7\u00f2\2\2\u10f8\u10f9\7\u01ce\2\2\u10f9\u10ff\7^\2\2\u10fa\u10fb"+
		"\7U\2\2\u10fb\u10ff\7\u01ce\2\2\u10fc\u10fd\7\u00c8\2\2\u10fd\u10ff\7"+
		"\u01ce\2\2\u10fe\u10f7\3\2\2\2\u10fe\u10fa\3\2\2\2\u10fe\u10fc\3\2\2\2"+
		"\u10ff\u01d7\3\2\2\2\u1100\u1101\7\u00c3\2\2\u1101\u1102\7\u01ce\2\2\u1102"+
		"\u110b\7^\2\2\u1103\u1104\7\u00f2\2\2\u1104\u1105\7\u01ce\2\2\u1105\u110b"+
		"\7^\2\2\u1106\u1107\7U\2\2\u1107\u110b\7\u01ce\2\2\u1108\u1109\7\u00c8"+
		"\2\2\u1109\u110b\7\u01ce\2\2\u110a\u1100\3\2\2\2\u110a\u1103\3\2\2\2\u110a"+
		"\u1106\3\2\2\2\u110a\u1108\3\2\2\2\u110b\u01d9\3\2\2\2\u110c\u110e\7\u00c8"+
		"\2\2\u110d\u110c\3\2\2\2\u110d\u110e\3\2\2\2\u110e\u110f\3\2\2\2\u110f"+
		"\u1110\7\u0082\2\2\u1110\u1111\7\u01b9\2\2\u1111\u01db\3\2\2\2\u1112\u1113"+
		"\7\u00db\2\2\u1113\u1114\7\u00e2\2\2\u1114\u1119\5\u035c\u01af\2\u1115"+
		"\u1116\7\u00c8\2\2\u1116\u1117\7\u00db\2\2\u1117\u1119\7\u00e2\2\2\u1118"+
		"\u1112\3\2\2\2\u1118\u1115\3\2\2\2\u1119\u01dd\3\2\2\2\u111a\u111b\7\u00c8"+
		"\2\2\u111b\u111f\7\u010f\2\2\u111c\u111d\7\u010f\2\2\u111d\u111f\7\31"+
		"\2\2\u111e\u111a\3\2\2\2\u111e\u111c\3\2\2\2\u111f\u01df\3\2\2\2\u1120"+
		"\u1122\7\u00c8\2\2\u1121\u1120\3\2\2\2\u1121\u1122\3\2\2\2\u1122\u1123"+
		"\3\2\2\2\u1123\u1124\7\u0086\2\2\u1124\u1125\7?\2\2\u1125\u01e1\3\2\2"+
		"\2\u1126\u1127\7i\2\2\u1127\u1128\7\u01c8\2\2\u1128\u01e3\3\2\2\2\u1129"+
		"\u112a\t,\2\2\u112a\u112b\7\u01c8\2\2\u112b\u01e5\3\2\2\2\u112c\u112e"+
		"\7\u00c8\2\2\u112d\u112c\3\2\2\2\u112d\u112e\3\2\2\2\u112e\u112f\3\2\2"+
		"\2\u112f\u1130\7b\2\2\u1130\u01e7\3\2\2\2\u1131\u1132\7\u02da\2\2\u1132"+
		"\u1133\7\31\2\2\u1133\u01e9\3\2\2\2\u1134\u1135\7\u00c8\2\2\u1135\u1139"+
		"\7L\2\2\u1136\u1137\7L\2\2\u1137\u1139\5\u035e\u01b0\2\u1138\u1134\3\2"+
		"\2\2\u1138\u1136\3\2\2\2\u1139\u01eb\3\2\2\2\u113a\u113b\7\u0145\2\2\u113b"+
		"\u1141\7\u01c1\2\2\u113c\u1142\5\u0506\u0284\2\u113d\u113e\7\3\2\2\u113e"+
		"\u113f\5\u0506\u0284\2\u113f\u1140\7\4\2\2\u1140\u1142\3\2\2\2\u1141\u113c"+
		"\3\2\2\2\u1141\u113d\3\2\2\2\u1142\u01ed\3\2\2\2\u1143\u1144\7\u0145\2"+
		"\2\u1144\u114c\7\u01c1\2\2\u1145\u114d\5\u0506\u0284\2\u1146\u1147\7\3"+
		"\2\2\u1147\u1148\5\u0506\u0284\2\u1148\u1149\7\26\2\2\u1149\u114a\7\20"+
		"\2\2\u114a\u114b\7\4\2\2\u114b\u114d\3\2\2\2\u114c\u1145\3\2\2\2\u114c"+
		"\u1146\3\2\2\2\u114d\u01ef\3\2\2\2\u114e\u1153\7\64\2\2\u114f\u1150\7"+
		"\u00c8\2\2\u1150\u1154\7\u00b4\2\2\u1151\u1152\7\u00b4\2\2\u1152\u1154"+
		"\7\31\2\2\u1153\u114f\3\2\2\2\u1153\u1151\3\2\2\2\u1154\u01f1\3\2\2\2"+
		"\u1155\u1156\7\u0120\2\2\u1156\u1157\7\u01cb\2\2\u1157\u1158\t\"\2\2\u1158"+
		"\u01f3\3\2\2\2\u1159\u115a\7\u00ed\2\2\u115a\u115b\7\u012f\2\2\u115b\u115c"+
		"\t-\2\2\u115c\u01f5\3\2\2\2\u115d\u115e\7\u0113\2\2\u115e\u115f\t.\2\2"+
		"\u115f\u01f7\3\2\2\2\u1160\u1161\7\u01cf\2\2\u1161\u1162\7(\2\2\u1162"+
		"\u1163\7\u0127\2\2\u1163\u1164\7d\2\2\u1164\u116d\7\u01c3\2\2\u1165\u1166"+
		"\7\u01cf\2\2\u1166\u1167\7(\2\2\u1167\u1168\7\31\2\2\u1168\u116d\7\u01c3"+
		"\2\2\u1169\u116a\7W\2\2\u116a\u116b\7(\2\2\u116b\u116d\7\u01c2\2\2\u116c"+
		"\u1160\3\2\2\2\u116c\u1165\3\2\2\2\u116c\u1169\3\2\2\2\u116d\u01f9\3\2"+
		"\2\2\u116e\u116f\7\u010c\2\2\u116f\u1170\7\u01c7\2\2\u1170\u1171\5\u0360"+
		"\u01b1\2\u1171\u01fb\3\2\2\2\u1172\u1173\7O\2\2\u1173\u1174\7\u00d2\2"+
		"\2\u1174\u1175\7\u00fc\2\2\u1175\u1176\t\"\2\2\u1176\u01fd\3\2\2\2\u1177"+
		"\u1178\t/\2\2\u1178\u1179\7\u01cd\2\2\u1179\u117a\7\u01ca\2\2\u117a\u01ff"+
		"\3\2\2\2\u117b\u117c\7\u011f\2\2\u117c\u117d\7\u01c0\2\2\u117d\u0201\3"+
		"\2\2\2\u117e\u1180\7\u00ca\2\2\u117f\u117e\3\2\2\2\u117f\u1180\3\2\2\2"+
		"\u1180\u1181\3\2\2\2\u1181\u1182\7\u01cc\2\2\u1182\u0203\3\2\2\2\u1183"+
		"\u1185\7\u011c\2\2\u1184\u1186\5\u0498\u024d\2\u1185\u1184\3\2\2\2\u1185"+
		"\u1186\3\2\2\2\u1186\u0205\3\2\2\2\u1187\u1188\7\u011c\2\2\u1188\u1189"+
		"\5\u0498\u024d\2\u1189\u0207\3\2\2\2\u118a\u118e\7\u00dd\2\2\u118b\u118f"+
		"\5\u017e\u00c0\2\u118c\u118d\7\u0383\2\2\u118d\u118f\t\60\2\2\u118e\u118b"+
		"\3\2\2\2\u118e\u118c\3\2\2\2\u118f\u1190\3\2\2\2\u1190\u118e\3\2\2\2\u1190"+
		"\u1191\3\2\2\2\u1191\u0209\3\2\2\2\u1192\u1193\7\u00dd\2\2\u1193\u1194"+
		"\5\u017e\u00c0\2\u1194\u020b\3\2\2\2\u1195\u11ae\7\u00fd\2\2\u1196\u1197"+
		"\7\u0129\2\2\u1197\u1198\7\3\2\2\u1198\u1199\5\u0428\u0215\2\u1199\u119c"+
		"\5\u0274\u013b\2\u119a\u119b\7\61\2\2\u119b\u119d\7\u00b7\2\2\u119c\u119a"+
		"\3\2\2\2\u119c\u119d\3\2\2\2\u119d\u11a7\3\2\2\2\u119e\u119f\7\26\2\2"+
		"\u119f\u11a0\5\u0428\u0215\2\u11a0\u11a3\5\u0274\u013b\2\u11a1\u11a2\7"+
		"\61\2\2\u11a2\u11a4\7\u00b7\2\2\u11a3\u11a1\3\2\2\2\u11a3\u11a4\3\2\2"+
		"\2\u11a4\u11a6\3\2\2\2\u11a5\u119e\3\2\2\2\u11a6\u11a9\3\2\2\2\u11a7\u11a5"+
		"\3\2\2\2\u11a7\u11a8\3\2\2\2\u11a8\u11aa\3\2\2\2\u11a9\u11a7\3\2\2\2\u11aa"+
		"\u11ab\7\4\2\2\u11ab\u11af\3\2\2\2\u11ac\u11ad\7\u0242\2\2\u11ad\u11af"+
		"\7\u0129\2\2\u11ae\u1196\3\2\2\2\u11ae\u11ac\3\2\2\2\u11af\u11cc\3\2\2"+
		"\2\u11b0\u11cc\5\u01b4\u00db\2\u11b1\u11cc\5\u01bc\u00df\2\u11b2\u11cc"+
		"\5\u01c4\u00e3\2\u11b3\u11cc\5\u01ca\u00e6\2\u11b4\u11cc\5\u01cc\u00e7"+
		"\2\u11b5\u11cc\5\u01ce\u00e8\2\u11b6\u11cc\5\u01d6\u00ec\2\u11b7\u11cc"+
		"\5\u01da\u00ee\2\u11b8\u11cc\5\u01dc\u00ef\2\u11b9\u11cc\5\u01de\u00f0"+
		"\2\u11ba\u11cc\5\u01e0\u00f1\2\u11bb\u11cc\5\u01e2\u00f2\2\u11bc\u11cc"+
		"\5\u01e6\u00f4\2\u11bd\u11cc\5\u01e8\u00f5\2\u11be\u11cc\5\u01ea\u00f6"+
		"\2\u11bf\u11cc\5\u01ec\u00f7\2\u11c0\u11cc\5\u01f0\u00f9\2\u11c1\u11cc"+
		"\5\u01f2\u00fa\2\u11c2\u11cc\5\u01f4\u00fb\2\u11c3\u11cc\5\u01f6\u00fc"+
		"\2\u11c4\u11cc\5\u01f8\u00fd\2\u11c5\u11cc\5\u01fa\u00fe\2\u11c6\u11cc"+
		"\5\u01fe\u0100\2\u11c7\u11cc\5\u0200\u0101\2\u11c8\u11cc\5\u0202\u0102"+
		"\2\u11c9\u11cc\5\u0204\u0103\2\u11ca\u11cc\5\u0208\u0105\2\u11cb\u1195"+
		"\3\2\2\2\u11cb\u11b0\3\2\2\2\u11cb\u11b1\3\2\2\2\u11cb\u11b2\3\2\2\2\u11cb"+
		"\u11b3\3\2\2\2\u11cb\u11b4\3\2\2\2\u11cb\u11b5\3\2\2\2\u11cb\u11b6\3\2"+
		"\2\2\u11cb\u11b7\3\2\2\2\u11cb\u11b8\3\2\2\2\u11cb\u11b9\3\2\2\2\u11cb"+
		"\u11ba\3\2\2\2\u11cb\u11bb\3\2\2\2\u11cb\u11bc\3\2\2\2\u11cb\u11bd\3\2"+
		"\2\2\u11cb\u11be\3\2\2\2\u11cb\u11bf\3\2\2\2\u11cb\u11c0\3\2\2\2\u11cb"+
		"\u11c1\3\2\2\2\u11cb\u11c2\3\2\2\2\u11cb\u11c3\3\2\2\2\u11cb\u11c4\3\2"+
		"\2\2\u11cb\u11c5\3\2\2\2\u11cb\u11c6\3\2\2\2\u11cb\u11c7\3\2\2\2\u11cb"+
		"\u11c8\3\2\2\2\u11cb\u11c9\3\2\2\2\u11cb\u11ca\3\2\2\2\u11cc\u020d\3\2"+
		"\2\2\u11cd\u11ce\7\u00fd\2\2\u11ce\u11d1\5\u0274\u013b\2\u11cf\u11d0\7"+
		"\61\2\2\u11d0\u11d2\7\u00b7\2\2\u11d1\u11cf\3\2\2\2\u11d1\u11d2\3\2\2"+
		"\2\u11d2\u11e6\3\2\2\2\u11d3\u11e6\5\u0206\u0104\2\u11d4\u11e6\5\u020a"+
		"\u0106\2\u11d5\u11e3\7\u011b\2\2\u11d6\u11d7\5\u0496\u024c\2\u11d7\u11d8"+
		"\7\3\2\2\u11d8\u11dd\5\u02f2\u017a\2\u11d9\u11da\7\26\2\2\u11da\u11dc"+
		"\5\u02f2\u017a\2\u11db\u11d9\3\2\2\2\u11dc\u11df\3\2\2\2\u11dd\u11db\3"+
		"\2\2\2\u11dd\u11de\3\2\2\2\u11de\u11e0\3\2\2\2\u11df\u11dd\3\2\2\2\u11e0"+
		"\u11e1\7\4\2\2\u11e1\u11e4\3\2\2\2\u11e2\u11e4\5\u0206\u0104\2\u11e3\u11d6"+
		"\3\2\2\2\u11e3\u11e2\3\2\2\2\u11e4\u11e6\3\2\2\2\u11e5\u11cd\3\2\2\2\u11e5"+
		"\u11d3\3\2\2\2\u11e5\u11d4\3\2\2\2\u11e5\u11d5\3\2\2\2\u11e6\u020f\3\2"+
		"\2\2\u11e7\u11e8\7\u00fd\2\2\u11e8\u11ea\5\u0274\u013b\2\u11e9\u11eb\5"+
		"\u01ba\u00de\2\u11ea\u11e9\3\2\2\2\u11ea\u11eb\3\2\2\2\u11eb\u11fb\3\2"+
		"\2\2\u11ec\u11f0\7\u00fc\2\2\u11ed\u11f1\5\u0366\u01b4\2\u11ee\u11f1\7"+
		"\u00cb\2\2\u11ef\u11f1\5\u04fa\u027e\2\u11f0\u11ed\3\2\2\2\u11f0\u11ee"+
		"\3\2\2\2\u11f0\u11ef\3\2\2\2\u11f1\u11fb\3\2\2\2\u11f2\u11fb\5\u01ca\u00e6"+
		"\2\u11f3\u11fb\5\u01ce\u00e8\2\u11f4\u11fb\5\u01d4\u00eb\2\u11f5\u11fb"+
		"\5\u01da\u00ee\2\u11f6\u11fb\5\u0200\u0101\2\u11f7\u11fb\5\u0202\u0102"+
		"\2\u11f8\u11fb\5\u0204\u0103\2\u11f9\u11fb\5\u020a\u0106\2\u11fa\u11e7"+
		"\3\2\2\2\u11fa\u11ec\3\2\2\2\u11fa\u11f2\3\2\2\2\u11fa\u11f3\3\2\2\2\u11fa"+
		"\u11f4\3\2\2\2\u11fa\u11f5\3\2\2\2\u11fa\u11f6\3\2\2\2\u11fa\u11f7\3\2"+
		"\2\2\u11fa\u11f8\3\2\2\2\u11fa\u11f9\3\2\2\2\u11fb\u0211\3\2\2\2\u11fc"+
		"\u11fd\5\u0456\u022c\2\u11fd\u11fe\7\u0088\2\2\u11fe\u11ff\7\u0116\2\2"+
		"\u11ff\u1200\5\u0466\u0234\2\u1200\u0213\3\2\2\2\u1201\u1202\5\u0456\u022c"+
		"\2\u1202\u1204\7\u0088\2\2\u1203\u1205\7\u0129\2\2\u1204\u1203\3\2\2\2"+
		"\u1204\u1205\3\2\2\2\u1205\u1206\3\2\2\2\u1206\u1207\5\u043a\u021e\2\u1207"+
		"\u0215\3\2\2\2\u1208\u1209\7\u03c2\2\2\u1209\u120a\5\u049a\u024e\2\u120a"+
		"\u120b\7\u0135\2\2\u120b\u120c\5\u049a\u024e\2\u120c\u0217\3\2\2\2\u120d"+
		"\u120e\7e\2\2\u120e\u120f\7\u008a\2\2\u120f\u1211\5\u043a\u021e\2\u1210"+
		"\u1212\5\u04b0\u0259\2\u1211\u1210\3\2\2\2\u1211\u1212\3\2\2\2\u1212\u1214"+
		"\3\2\2\2\u1213\u1215\7\61\2\2\u1214\u1213\3\2\2\2\u1214\u1215\3\2\2\2"+
		"\u1215\u1217\3\2\2\2\u1216\u1218\5\u0434\u021b\2\u1217\u1216\3\2\2\2\u1217"+
		"\u1218\3\2\2\2\u1218\u121a\3\2\2\2\u1219\u121b\5\u0240\u0121\2\u121a\u1219"+
		"\3\2\2\2\u121a\u121b\3\2\2\2\u121b\u121e\3\2\2\2\u121c\u121d\7\u0117\2"+
		"\2\u121d\u121f\5\u022c\u0117\2\u121e\u121c\3\2\2\2\u121e\u121f\3\2\2\2"+
		"\u121f\u1220\3\2\2\2\u1220\u1221\7\u0142\2\2\u1221\u1222\5\u03f2\u01fa"+
		"\2\u1222\u1224\3\2\2\2\u1223\u1225\5\u0504\u0283\2\u1224\u1223\3\2\2\2"+
		"\u1224\u1225\3\2\2\2\u1225\u122a\3\2\2\2\u1226\u1229\5\u04f0\u0279\2\u1227"+
		"\u1229\5\u04f4\u027b\2\u1228\u1226\3\2\2\2\u1228\u1227\3\2\2\2\u1229\u122c"+
		"\3\2\2\2\u122a\u1228\3\2\2\2\u122a\u122b\3\2\2\2\u122b\u122e\3\2\2\2\u122c"+
		"\u122a\3\2\2\2\u122d\u122f\5\u04f6\u027c\2\u122e\u122d\3\2\2\2\u122e\u122f"+
		"\3\2\2\2\u122f\u0219\3\2\2\2\u1230\u1231\7e\2\2\u1231\u1232\7\u008a\2"+
		"\2\u1232\u1234\5\u043a\u021e\2\u1233\u1235\7\61\2\2\u1234\u1233\3\2\2"+
		"\2\u1234\u1235\3\2\2\2\u1235\u1237\3\2\2\2\u1236\u1238\5\u0434\u021b\2"+
		"\u1237\u1236\3\2\2\2\u1237\u1238\3\2\2\2\u1238\u1239\3\2\2\2\u1239\u123a"+
		"\7\u0142\2\2\u123a\u123b\7Z\2\2\u123b\u123c\7\u00cf\2\2\u123c\u1245\5"+
		"\b\5\2\u123d\u123e\7\u0088\2\2\u123e\u1241\7\u010a\2\2\u123f\u1242\5\u049a"+
		"\u024e\2\u1240\u1242\7\31\2\2\u1241\u123f\3\2\2\2\u1241\u1240\3\2\2\2"+
		"\u1242\u1243\3\2\2\2\u1243\u1244\7\u00cf\2\2\u1244\u1246\7\u010b\2\2\u1245"+
		"\u123d\3\2\2\2\u1245\u1246\3\2\2\2\u1246\u021b\3\2\2\2\u1247\u1248\7\u0134"+
		"\2\2\u1248\u124a\5\u043a\u021e\2\u1249\u124b\5\u04b0\u0259\2\u124a\u1249"+
		"\3\2\2\2\u124a\u124b\3\2\2\2\u124b\u124d\3\2\2\2\u124c\u124e\7\61\2\2"+
		"\u124d\u124c\3\2\2\2\u124d\u124e\3\2\2\2\u124e\u1250\3\2\2\2\u124f\u1251"+
		"\5\u0434\u021b\2\u1250\u124f\3\2\2\2\u1250\u1251\3\2\2\2\u1251\u1253\3"+
		"\2\2\2\u1252\u1254\5\u0240\u0121\2\u1253\u1252\3\2\2\2\u1253\u1254\3\2"+
		"\2\2\u1254\u1255\3\2\2\2\u1255\u1256\7\u0117\2\2\u1256\u1259\5\u022c\u0117"+
		"\2\u1257\u1258\7\u0142\2\2\u1258\u125a\5\u03f2\u01fa\2\u1259\u1257\3\2"+
		"\2\2\u1259\u125a\3\2\2\2\u125a\u125f\3\2\2\2\u125b\u125e\5\u04f0\u0279"+
		"\2\u125c\u125e\5\u04f4\u027b\2\u125d\u125b\3\2\2\2\u125d\u125c\3\2\2\2"+
		"\u125e\u1261\3\2\2\2\u125f\u125d\3\2\2\2\u125f\u1260\3\2\2\2\u1260\u1263"+
		"\3\2\2\2\u1261\u125f\3\2\2\2\u1262\u1264\5\u04f6\u027c\2\u1263\u1262\3"+
		"\2\2\2\u1263\u1264\3\2\2\2\u1264\u021d\3\2\2\2\u1265\u1266\7\u0134\2\2"+
		"\u1266\u1268\5\u043a\u021e\2\u1267\u1269\7\61\2\2\u1268\u1267\3\2\2\2"+
		"\u1268\u1269\3\2\2\2\u1269\u126b\3\2\2\2\u126a\u126c\5\u0434\u021b\2\u126b"+
		"\u126a\3\2\2\2\u126b\u126c\3\2\2\2\u126c\u126d\3\2\2\2\u126d\u126e\7\u0117"+
		"\2\2\u126e\u126f\5\u022c\u0117\2\u126f\u1270\7\u0142\2\2\u1270\u1271\7"+
		"Z\2\2\u1271\u1272\7\u00cf\2\2\u1272\u127b\5\b\5\2\u1273\u1274\7\u0088"+
		"\2\2\u1274\u1277\7\u010a\2\2\u1275\u1278\5\u049a\u024e\2\u1276\u1278\7"+
		"\31\2\2\u1277\u1275\3\2\2\2\u1277\u1276\3\2\2\2\u1278\u1279\3\2\2\2\u1279"+
		"\u127a\7\u00cf\2\2\u127a\u127c\7\u010b\2\2\u127b\u1273\3\2\2\2\u127b\u127c"+
		"\3\2\2\2\u127c\u021f\3\2\2\2\u127d\u127e\7\3\2\2\u127e\u1281\7\u0138\2"+
		"\2\u127f\u1282\5\u0222\u0112\2\u1280\u1282\5\u0224\u0113\2\u1281\u127f"+
		"\3\2\2\2\u1281\u1280\3\2\2\2\u1282\u1283\3\2\2\2\u1283\u1285\7\4\2\2\u1284"+
		"\u1286\7\61\2\2\u1285\u1284\3\2\2\2\u1285\u1286\3\2\2\2\u1286\u1287\3"+
		"\2\2\2\u1287\u1288\5\u0434\u021b\2\u1288\u1289\7\3\2\2\u1289\u128e\5\u0428"+
		"\u0215\2\u128a\u128b\7\26\2\2\u128b\u128d\5\u0428\u0215\2\u128c\u128a"+
		"\3\2\2\2\u128d\u1290\3\2\2\2\u128e\u128c\3\2\2\2\u128e\u128f\3\2\2\2\u128f"+
		"\u1291\3\2\2\2\u1290\u128e\3\2\2\2\u1291\u1292\7\4\2\2\u1292\u0221\3\2"+
		"\2\2\u1293\u12a0\5\u023c\u011f\2\u1294\u1295\7\3\2\2\u1295\u129a\5\u023c"+
		"\u011f\2\u1296\u1297\7\26\2\2\u1297\u1299\5\u023c\u011f\2\u1298\u1296"+
		"\3\2\2\2\u1299\u129c\3\2\2\2\u129a\u1298\3\2\2\2\u129a\u129b\3\2\2\2\u129b"+
		"\u129d\3\2\2\2\u129c\u129a\3\2\2\2\u129d\u129e\7\4\2\2\u129e\u12a0\3\2"+
		"\2\2\u129f\u1293\3\2\2\2\u129f\u1294\3\2\2\2\u12a0\u0223\3\2\2\2\u12a1"+
		"\u12b5\5\u023e\u0120\2\u12a2\u12a3\7\3\2\2\u12a3\u12a8\5\u023e\u0120\2"+
		"\u12a4\u12a5\7\26\2\2\u12a5\u12a7\5\u023e\u0120\2\u12a6\u12a4\3\2\2\2"+
		"\u12a7\u12aa\3\2\2\2\u12a8\u12a6\3\2\2\2\u12a8\u12a9\3\2\2\2\u12a9\u12ab"+
		"\3\2\2\2\u12aa\u12a8\3\2\2\2\u12ab\u12ac\7\4\2\2\u12ac\u12ad\3\2\2\2\u12ad"+
		"\u12b0\7\u0088\2\2\u12ae\u12b1\5\u049a\u024e\2\u12af\u12b1\7\31\2\2\u12b0"+
		"\u12ae\3\2\2\2\u12b0\u12af\3\2\2\2\u12b1\u12b2\3\2\2\2\u12b2\u12b3\7\u0193"+
		"\2\2\u12b3\u12b5\3\2\2\2\u12b4\u12a1\3\2\2\2\u12b4\u12a2\3\2\2\2\u12b5"+
		"\u0225\3\2\2\2\u12b6\u12b8\7\u00ca\2\2\u12b7\u12b6\3\2\2\2\u12b7\u12b8"+
		"\3\2\2\2\u12b8\u12b9\3\2\2\2\u12b9\u12bc\7\u01e4\2\2\u12ba\u12bb\7\u014c"+
		"\2\2\u12bb\u12bd\5\u03f2\u01fa\2\u12bc\u12ba\3\2\2\2\u12bc\u12bd\3\2\2"+
		"\2\u12bd\u0227\3\2\2\2\u12be\u12c2\5\u022e\u0118\2\u12bf\u12c2\5\u0230"+
		"\u0119\2\u12c0\u12c2\5\u0232\u011a\2\u12c1\u12be\3\2\2\2\u12c1\u12bf\3"+
		"\2\2\2\u12c1\u12c0\3\2\2\2\u12c2\u0229\3\2\2\2\u12c3\u12c4\5\u037c\u01bf"+
		"\2\u12c4\u12c7\7\b\2\2\u12c5\u12c8\5\u0366\u01b4\2\u12c6\u12c8\7\u00cb"+
		"\2\2\u12c7\u12c5\3\2\2\2\u12c7\u12c6\3\2\2\2\u12c8\u130d\3\2\2\2\u12c9"+
		"\u12cc\5\u0450\u0229\2\u12ca\u12cc\5\u049a\u024e\2\u12cb\u12c9\3\2\2\2"+
		"\u12cb\u12ca\3\2\2\2\u12cc\u12cd\3\2\2\2\u12cd\u12ce\7\b\2\2\u12ce\u12d9"+
		"\5\u0238\u011d\2\u12cf\u12d2\7\26\2\2\u12d0\u12d3\5\u0450\u0229\2\u12d1"+
		"\u12d3\5\u049a\u024e\2\u12d2\u12d0\3\2\2\2\u12d2\u12d1\3\2\2\2\u12d3\u12d4"+
		"\3\2\2\2\u12d4\u12d5\7\b\2\2\u12d5\u12d6\5\u0238\u011d\2\u12d6\u12d8\3"+
		"\2\2\2\u12d7\u12cf\3\2\2\2\u12d8\u12db\3\2\2\2\u12d9\u12d7\3\2\2\2\u12d9"+
		"\u12da\3\2\2\2\u12da\u130d\3\2\2\2\u12db\u12d9\3\2\2\2\u12dc\u12df\7\3"+
		"\2\2\u12dd\u12e0\5\u0450\u0229\2\u12de\u12e0\5\u049a\u024e\2\u12df\u12dd"+
		"\3\2\2\2\u12df\u12de\3\2\2\2\u12e0\u12e8\3\2\2\2\u12e1\u12e4\7\26\2\2"+
		"\u12e2\u12e5\5\u0450\u0229\2\u12e3\u12e5\5\u049a\u024e\2\u12e4\u12e2\3"+
		"\2\2\2\u12e4\u12e3\3\2\2\2\u12e5\u12e7\3\2\2\2\u12e6\u12e1\3\2\2\2\u12e7"+
		"\u12ea\3\2\2\2\u12e8\u12e6\3\2\2\2\u12e8\u12e9\3\2\2\2\u12e9\u12eb\3\2"+
		"\2\2\u12ea\u12e8\3\2\2\2\u12eb\u12ec\7\4\2\2\u12ec\u12ed\7\b\2\2\u12ed"+
		"\u1308\7\3\2\2\u12ee\u12f3\5\u0238\u011d\2\u12ef\u12f0\7\26\2\2\u12f0"+
		"\u12f2\5\u0238\u011d\2\u12f1\u12ef\3\2\2\2\u12f2\u12f5\3\2\2\2\u12f3\u12f1"+
		"\3\2\2\2\u12f3\u12f4\3\2\2\2\u12f4\u12f8\3\2\2\2\u12f5\u12f3\3\2\2\2\u12f6"+
		"\u12f8\5\u04fa\u027e\2\u12f7\u12ee\3\2\2\2\u12f7\u12f6\3\2\2\2\u12f8\u1309"+
		"\3\2\2\2\u12f9\u1309\5\u04e2\u0272\2\u12fa\u12fb\7\u0138\2\2\u12fb\u1309"+
		"\5\u0238\u011d\2\u12fc\u12fd\7\u0138\2\2\u12fd\u12fe\7\3\2\2\u12fe\u1303"+
		"\5\u0238\u011d\2\u12ff\u1300\7\26\2\2\u1300\u1302\5\u0238\u011d\2\u1301"+
		"\u12ff\3\2\2\2\u1302\u1305\3\2\2\2\u1303\u1301\3\2\2\2\u1303\u1304\3\2"+
		"\2\2\u1304\u1306\3\2\2\2\u1305\u1303\3\2\2\2\u1306\u1307\7\4\2\2\u1307"+
		"\u1309\3\2\2\2\u1308\u12f7\3\2\2\2\u1308\u12f9\3\2\2\2\u1308\u12fa\3\2"+
		"\2\2\u1308\u12fc\3\2\2\2\u1309\u130a\3\2\2\2\u130a\u130b\7\4\2\2\u130b"+
		"\u130d\3\2\2\2\u130c\u12c3\3\2\2\2\u130c\u12cb\3\2\2\2\u130c\u12dc\3\2"+
		"\2\2\u130d\u022b\3\2\2\2\u130e\u130f\5\u0428\u0215\2\u130f\u1310\7\b\2"+
		"\2\u1310\u1318\5\u0238\u011d\2\u1311\u1312\7\26\2\2\u1312\u1313\5\u0428"+
		"\u0215\2\u1313\u1314\7\b\2\2\u1314\u1315\5\u0238\u011d\2\u1315\u1317\3"+
		"\2\2\2\u1316\u1311\3\2\2\2\u1317\u131a\3\2\2\2\u1318\u1316\3\2\2\2\u1318"+
		"\u1319\3\2\2\2\u1319\u1335\3\2\2\2\u131a\u1318\3\2\2\2\u131b\u131c\7\3"+
		"\2\2\u131c\u1321\5\u0428\u0215\2\u131d\u131e\7\26\2\2\u131e\u1320\5\u0428"+
		"\u0215\2\u131f\u131d\3\2\2\2\u1320\u1323\3\2\2\2\u1321\u131f\3\2\2\2\u1321"+
		"\u1322\3\2\2\2\u1322\u1324\3\2\2\2\u1323\u1321\3\2\2\2\u1324\u1325\7\4"+
		"\2\2\u1325\u1326\7\b\2\2\u1326\u1327\7\3\2\2\u1327\u132c\5\u0238\u011d"+
		"\2\u1328\u1329\7\26\2\2\u1329\u132b\5\u0238\u011d\2\u132a\u1328\3\2\2"+
		"\2\u132b\u132e\3\2\2\2\u132c\u132a\3\2\2\2\u132c\u132d\3\2\2\2\u132d\u1331"+
		"\3\2\2\2\u132e\u132c\3\2\2\2\u132f\u1331\5\u04fa\u027e\2\u1330\u131b\3"+
		"\2\2\2\u1330\u132f\3\2\2\2\u1331\u1332\3\2\2\2\u1332\u1333\7\4\2\2\u1333"+
		"\u1335\3\2\2\2\u1334\u130e\3\2\2\2\u1334\u1330\3\2\2\2\u1335\u022d\3\2"+
		"\2\2\u1336\u1337\7\u0134\2\2\u1337\u1338\7\u0117\2\2\u1338\u133d\5\u022c"+
		"\u0117\2\u1339\u133a\7\26\2\2\u133a\u133c\5\u022c\u0117\2\u133b\u1339"+
		"\3\2\2\2\u133c\u133f\3\2\2\2\u133d\u133b\3\2\2\2\u133d\u133e\3\2\2\2\u133e"+
		"\u022f\3\2\2\2\u133f\u133d\3\2\2\2\u1340\u1341\7e\2\2\u1341\u0231\3\2"+
		"\2\2\u1342\u1343\7\u00a3\2\2\u1343\u1344\7\3\2\2\u1344\u1349\5\u0428\u0215"+
		"\2\u1345\u1346\7\26\2\2\u1346\u1348\5\u0428\u0215\2\u1347\u1345\3\2\2"+
		"\2\u1348\u134b\3\2\2\2\u1349\u1347\3\2\2\2\u1349\u134a\3\2\2\2\u134a\u134c"+
		"\3\2\2\2\u134b\u1349\3\2\2\2\u134c\u134d\7\4\2\2\u134d\u135a\7\u0138\2"+
		"\2\u134e\u135b\5\u0238\u011d\2\u134f\u1350\7\3\2\2\u1350\u1355\5\u0238"+
		"\u011d\2\u1351\u1352\7\26\2\2\u1352\u1354\5\u0238\u011d\2\u1353\u1351"+
		"\3\2\2\2\u1354\u1357\3\2\2\2\u1355\u1353\3\2\2\2\u1355\u1356\3\2\2\2\u1356"+
		"\u1358\3\2\2\2\u1357\u1355\3\2\2\2\u1358\u1359\7\4\2\2\u1359\u135b\3\2"+
		"\2\2\u135a\u134e\3\2\2\2\u135a\u134f\3\2\2\2\u135b\u0233\3\2\2\2\u135c"+
		"\u135d\7\u0118\2\2\u135d\u135f\7\u01e5\2\2\u135e\u1360\7\u0137\2\2\u135f"+
		"\u135e\3\2\2\2\u135f\u1360\3\2\2\2\u1360\u1361\3\2\2\2\u1361\u1363\7\30"+
		"\2\2\u1362\u1364\5\u0236\u011c\2\u1363\u1362\3\2\2\2\u1363\u1364\3\2\2"+
		"\2\u1364\u0235\3\2\2\2\u1365\u1366\7\u0117\2\2\u1366\u1367\7\u01e6\2\2"+
		"\u1367\u1368\7\b\2\2\u1368\u136e\5\u0366\u01b4\2\u1369\u136a\5\u0364\u01b3"+
		"\2\u136a\u136b\5\u0366\u01b4\2\u136b\u136d\3\2\2\2\u136c\u1369\3\2\2\2"+
		"\u136d\u1370\3\2\2\2\u136e\u136c\3\2\2\2\u136e\u136f\3\2\2\2\u136f\u1375"+
		"\3\2\2\2\u1370\u136e\3\2\2\2\u1371\u1372\7\3\2\2\u1372\u1373\7\30\2\2"+
		"\u1373\u1375\7\4\2\2\u1374\u1365\3\2\2\2\u1374\u1371\3\2\2\2\u1375\u0237"+
		"\3\2\2\2\u1376\u137c\5\u0366\u01b4\2\u1377\u1378\5\u0364\u01b3\2\u1378"+
		"\u1379\5\u0366\u01b4\2\u1379\u137b\3\2\2\2\u137a\u1377\3\2\2\2\u137b\u137e"+
		"\3\2\2\2\u137c\u137a\3\2\2\2\u137c\u137d\3\2\2\2\u137d\u1382\3\2\2\2\u137e"+
		"\u137c\3\2\2\2\u137f\u1382\7d\2\2\u1380\u1382\7\u00cb\2\2\u1381\u1376"+
		"\3\2\2\2\u1381\u137f\3\2\2\2\u1381\u1380\3\2\2\2\u1382\u0239\3\2\2\2\u1383"+
		"\u1388\5\u0366\u01b4\2\u1384\u1388\5\u049a\u024e\2\u1385\u1388\7d\2\2"+
		"\u1386\u1388\7\u00cb\2\2\u1387\u1383\3\2\2\2\u1387\u1384\3\2\2\2\u1387"+
		"\u1385\3\2\2\2\u1387\u1386\3\2\2\2\u1388\u023b\3\2\2\2\u1389\u138c\5\u0366"+
		"\u01b4\2\u138a\u138c\7\u00cb\2\2\u138b\u1389\3\2\2\2\u138b\u138a\3\2\2"+
		"\2\u138c\u023d\3\2\2\2\u138d\u1391\5\u0366\u01b4\2\u138e\u1391\5\u049a"+
		"\u024e\2\u138f\u1391\7\u00cb\2\2\u1390\u138d\3\2\2\2\u1390\u138e\3\2\2"+
		"\2\u1390\u138f\3\2\2\2\u1391\u023f\3\2\2\2\u1392\u1393\7\u01d9\2\2\u1393"+
		"\u1394\7\3\2\2\u1394\u1395\5\u0428\u0215\2\u1395\u139c\5\u0314\u018b\2"+
		"\u1396\u1397\7\26\2\2\u1397\u1398\5\u0428\u0215\2\u1398\u1399\5\u0314"+
		"\u018b\2\u1399\u139b\3\2\2\2\u139a\u1396\3\2\2\2\u139b\u139e\3\2\2\2\u139c"+
		"\u139a\3\2\2\2\u139c\u139d\3\2\2\2\u139d\u139f\3\2\2\2\u139e\u139c\3\2"+
		"\2\2\u139f\u13a0\7\4\2\2\u13a0\u0241\3\2\2\2\u13a1\u13ae\7\u0138\2\2\u13a2"+
		"\u13af\5\u023a\u011e\2\u13a3\u13a4\7\3\2\2\u13a4\u13a9\5\u023a\u011e\2"+
		"\u13a5\u13a6\7\26\2\2\u13a6\u13a8\5\u023a\u011e\2\u13a7\u13a5\3\2\2\2"+
		"\u13a8\u13ab\3\2\2\2\u13a9\u13a7\3\2\2\2\u13a9\u13aa\3\2\2\2\u13aa\u13ac"+
		"\3\2\2\2\u13ab\u13a9\3\2\2\2\u13ac\u13ad\7\4\2\2\u13ad\u13af\3\2\2\2\u13ae"+
		"\u13a2\3\2\2\2\u13ae\u13a3\3\2\2\2\u13af\u13b6\3\2\2\2\u13b0\u13b3\7\u0088"+
		"\2\2\u13b1\u13b4\5\u049a\u024e\2\u13b2\u13b4\7\31\2\2\u13b3\u13b1\3\2"+
		"\2\2\u13b3\u13b2\3\2\2\2\u13b4\u13b5\3\2\2\2\u13b5\u13b7\7\u0193\2\2\u13b6"+
		"\u13b0\3\2\2\2\u13b6\u13b7\3\2\2\2\u13b7\u13ba\3\2\2\2\u13b8\u13bb\7\u01e1"+
		"\2\2\u13b9\u13bb\5\u0262\u0132\2\u13ba\u13b8\3\2\2\2\u13ba\u13b9\3\2\2"+
		"\2\u13bb\u0243\3\2\2\2\u13bc\u13c1\7\u01dd\2\2\u13bd\u13be\7\u0135\2\2"+
		"\u13be\u13bf\7\u01d2\2\2\u13bf\u13c0\7\u01d4\2\2\u13c0\u13c2\5\u026e\u0138"+
		"\2\u13c1\u13bd\3\2\2\2\u13c1\u13c2\3\2\2\2\u13c2\u0245\3\2\2\2\u13c3\u13e0"+
		"\5\u0248\u0125\2\u13c4\u13e0\5\u024a\u0126\2\u13c5\u13e0\5\u024c\u0127"+
		"\2\u13c6\u13e0\5\u024e\u0128\2\u13c7\u13e0\5\u0250\u0129\2\u13c8\u13e0"+
		"\5\u0266\u0134\2\u13c9\u13e0\5\u0268\u0135\2\u13ca\u13e0\5\u026a\u0136"+
		"\2\u13cb\u13e0\5\u0252\u012a\2\u13cc\u13e0\5\u0254\u012b\2\u13cd\u13e0"+
		"\5\u0256\u012c\2\u13ce\u13dd\7\'\2\2\u13cf\u13d0\7M\2\2\u13d0\u13d1\7"+
		"\3\2\2\u13d1\u13d3\5\u0428\u0215\2\u13d2\u13d4\t\4\2\2\u13d3\u13d2\3\2"+
		"\2\2\u13d3\u13d4\3\2\2\2\u13d4\u13d5\3\2\2\2\u13d5\u13d6\7\4\2\2\u13d6"+
		"\u13de\3\2\2\2\u13d7\u13d8\7\u01d9\2\2\u13d8\u13d9\7M\2\2\u13d9\u13da"+
		"\7\3\2\2\u13da\u13db\5\u0428\u0215\2\u13db\u13dc\7\4\2\2\u13dc\u13de\3"+
		"\2\2\2\u13dd\u13cf\3\2\2\2\u13dd\u13d7\3\2\2\2\u13de\u13e0\3\2\2\2\u13df"+
		"\u13c3\3\2\2\2\u13df\u13c4\3\2\2\2\u13df\u13c5\3\2\2\2\u13df\u13c6\3\2"+
		"\2\2\u13df\u13c7\3\2\2\2\u13df\u13c8\3\2\2\2\u13df\u13c9\3\2\2\2\u13df"+
		"\u13ca\3\2\2\2\u13df\u13cb\3\2\2\2\u13df\u13cc\3\2\2\2\u13df\u13cd\3\2"+
		"\2\2\u13df\u13ce\3\2\2\2\u13e0\u0247\3\2\2\2\u13e1\u13e2\7<\2\2\u13e2"+
		"\u13e3\5\u0488\u0245\2\u13e3\u0249\3\2\2\2\u13e4\u13e5\7I\2\2\u13e5\u13e6"+
		"\t\"\2\2\u13e6\u024b\3\2\2\2\u13e7\u13e8\7\u01d6\2\2\u13e8\u13e9\t\"\2"+
		"\2\u13e9\u024d\3\2\2\2\u13ea\u13eb\7o\2\2\u13eb\u13ec\7\u03cc\2\2\u13ec"+
		"\u024f\3\2\2\2\u13ed\u13ee\7\u00e4\2\2\u13ee\u13ef\7\u03cc\2\2\u13ef\u0251"+
		"\3\2\2\2\u13f0\u13f2\7\u00ca\2\2\u13f1\u13f0\3\2\2\2\u13f1\u13f2\3\2\2"+
		"\2\u13f2\u13f3\3\2\2\2\u13f3\u13f4\7J\2\2\u13f4\u0253\3\2\2\2\u13f5\u13f7"+
		"\7\u00ca\2\2\u13f6\u13f5\3\2\2\2\u13f6\u13f7\3\2\2\2\u13f7\u13f8\3\2\2"+
		"\2\u13f8\u13f9\7\u00dc\2\2\u13f9\u0255\3\2\2\2\u13fa\u1400\7\u01d5\2\2"+
		"\u13fb\u13fd\7\u01d1\2\2\u13fc\u13fe\t\61\2\2\u13fd\u13fc\3\2\2\2\u13fd"+
		"\u13fe\3\2\2\2\u13fe\u1401\3\2\2\2\u13ff\u1401\7\u00c8\2\2\u1400\u13fb"+
		"\3\2\2\2\u1400\u13ff\3\2\2\2\u1401\u0257\3\2\2\2\u1402\u1403\7\u0245\2"+
		"\2\u1403\u1404\t\"\2\2\u1404\u0259\3\2\2\2\u1405\u1406\7\u00bb\2\2\u1406"+
		"\u1407\t\62\2\2\u1407\u025b\3\2\2\2\u1408\u1409\7\u00ba\2\2\u1409\u140a"+
		"\t\63\2\2\u140a\u025d\3\2\2\2\u140b\u140c\t\36\2\2\u140c\u025f\3\2\2\2"+
		"\u140d\u140f\7\u00ca\2\2\u140e\u140d\3\2\2\2\u140e\u140f\3\2\2\2\u140f"+
		"\u1410\3\2\2\2\u1410\u1416\7\u0223\2\2\u1411\u1412\7\u0222\2\2\u1412\u1416"+
		"\7\u00c8\2\2\u1413\u1414\7\u0222\2\2\u1414\u1416\7\u01d1\2\2\u1415\u140e"+
		"\3\2\2\2\u1415\u1411\3\2\2\2\u1415\u1413\3\2\2\2\u1416\u0261\3\2\2\2\u1417"+
		"\u1418\7\u00ca\2\2\u1418\u1419\7\u01e1\2\2\u1419\u141a\7W\2\2\u141a\u141b"+
		"\7\u00d2\2\2\u141b\u141c\7\u01e2\2\2\u141c\u0263\3\2\2\2\u141d\u141e\7"+
		",\2\2\u141e\u142d\5\u026c\u0137\2\u141f\u1421\5\u0266\u0134\2\u1420\u141f"+
		"\3\2\2\2\u1421\u1422\3\2\2\2\u1422\u1420\3\2\2\2\u1422\u1423\3\2\2\2\u1423"+
		"\u142c\3\2\2\2\u1424\u1426\5\u0268\u0135\2\u1425\u1424\3\2\2\2\u1426\u1427"+
		"\3\2\2\2\u1427\u1425\3\2\2\2\u1427\u1428\3\2\2\2\u1428\u142c\3\2\2\2\u1429"+
		"\u142c\5\u026a\u0136\2\u142a\u142c\5\u024e\u0128\2\u142b\u1420\3\2\2\2"+
		"\u142b\u1425\3\2\2\2\u142b\u1429\3\2\2\2\u142b\u142a\3\2\2\2\u142c\u142f"+
		"\3\2\2\2\u142d\u142b\3\2\2\2\u142d\u142e\3\2\2\2\u142e\u0265\3\2\2\2\u142f"+
		"\u142d\3\2\2\2\u1430\u1435\7\u0135\2\2\u1431\u1432\7\u013b\2\2\u1432\u1436"+
		"\5\u0470\u0239\2\u1433\u1434\7\u0121\2\2\u1434\u1436\5\u048a\u0246\2\u1435"+
		"\u1431\3\2\2\2\u1435\u1433\3\2\2\2\u1436\u143e\3\2\2\2\u1437\u1438\7\u00ea"+
		"\2\2\u1438\u143e\7\31\2\2\u1439\u143a\7\u0112\2\2\u143a\u143e\7\31\2\2"+
		"\u143b\u143c\7y\2\2\u143c\u143e\t\"\2\2\u143d\u1430\3\2\2\2\u143d\u1437"+
		"\3\2\2\2\u143d\u1439\3\2\2\2\u143d\u143b\3\2\2\2\u143e\u0267\3\2\2\2\u143f"+
		"\u1440\7\u01d7\2\2\u1440\u1444\7\31\2\2\u1441\u1442\7\u01dc\2\2\u1442"+
		"\u1444\7\31\2\2\u1443\u143f\3\2\2\2\u1443\u1441\3\2\2\2\u1444\u0269\3"+
		"\2\2\2\u1445\u1446\7\u01d8\2\2\u1446\u1447\t\64\2\2\u1447\u026b\3\2\2"+
		"\2\u1448\u1449\7\u00df\2\2\u1449\u1463\7\31\2\2\u144a\u144c\7x\2\2\u144b"+
		"\u144d\7\65\2\2\u144c\u144b\3\2\2\2\u144c\u144d\3\2\2\2\u144d\u144e\3"+
		"\2\2\2\u144e\u1452\7\3\2\2\u144f\u1453\5\u0424\u0213\2\u1450\u1453\7\u01da"+
		"\2\2\u1451\u1453\7\u01db\2\2\u1452\u144f\3\2\2\2\u1452\u1450\3\2\2\2\u1452"+
		"\u1451\3\2\2\2\u1453\u145c\3\2\2\2\u1454\u1458\7\26\2\2\u1455\u1459\5"+
		"\u0424\u0213\2\u1456\u1459\7\u01da\2\2\u1457\u1459\7\u01db\2\2\u1458\u1455"+
		"\3\2\2\2\u1458\u1456\3\2\2\2\u1458\u1457\3\2\2\2\u1459\u145b\3\2\2\2\u145a"+
		"\u1454\3\2\2\2\u145b\u145e\3\2\2\2\u145c\u145a\3\2\2\2\u145c\u145d\3\2"+
		"\2\2\u145d\u145f\3\2\2\2\u145e\u145c\3\2\2\2\u145f\u1461\7\4\2\2\u1460"+
		"\u1462\7\u009c\2\2\u1461\u1460\3\2\2\2\u1461\u1462\3\2\2\2\u1462\u1464"+
		"\3\2\2\2\u1463\u144a\3\2\2\2\u1463\u1464\3\2\2\2\u1464\u026d\3\2\2\2\u1465"+
		"\u1466\5\u0270\u0139\2\u1466\u026f\3\2\2\2\u1467\u1468\7\u03cc\2\2\u1468"+
		"\u0271\3\2\2\2\u1469\u146c\5\u0274\u013b\2\u146a\u146b\7\61\2\2\u146b"+
		"\u146d\7\u00b7\2\2\u146c\u146a\3\2\2\2\u146c\u146d\3\2\2\2\u146d\u0273"+
		"\3\2\2\2\u146e\u1471\5\u0276\u013c\2\u146f\u1471\5\u0420\u0211\2\u1470"+
		"\u146e\3\2\2\2\u1470\u146f\3\2\2\2\u1471\u0275\3\2\2\2\u1472\u14e4\7\u035b"+
		"\2\2\u1473\u14e4\7\u031e\2\2\u1474\u14e4\7\u031d\2\2\u1475\u14e4\7\u02d1"+
		"\2\2\u1476\u147a\t\65\2\2\u1477\u147b\5\u0418\u020d\2\u1478\u1479\7\3"+
		"\2\2\u1479\u147b\7\4\2\2\u147a\u1477\3\2\2\2\u147a\u1478\3\2\2\2\u147b"+
		"\u14e4\3\2\2\2\u147c\u1480\7\u02f0\2\2\u147d\u1481\5\u0418\u020d\2\u147e"+
		"\u147f\7\3\2\2\u147f\u1481\7\4\2\2\u1480\u147d\3\2\2\2\u1480\u147e\3\2"+
		"\2\2\u1481\u14e4\3\2\2\2\u1482\u1486\7\u030c\2\2\u1483\u1487\5\u0418\u020d"+
		"\2\u1484\u1485\7\3\2\2\u1485\u1487\7\4\2\2\u1486\u1483\3\2\2\2\u1486\u1484"+
		"\3\2\2\2\u1487\u14e4\3\2\2\2\u1488\u14e4\7\u034a\2\2\u1489\u148b\7m\2"+
		"\2\u148a\u148c\7\u00e6\2\2\u148b\u148a\3\2\2\2\u148b\u148c\3\2\2\2\u148c"+
		"\u14e4\3\2\2\2\u148d\u148f\t\66\2\2\u148e\u1490\7\u01a9\2\2\u148f\u148e"+
		"\3\2\2\2\u148f\u1490\3\2\2\2\u1490\u1493\3\2\2\2\u1491\u1493\7\u0383\2"+
		"\2\u1492\u148d\3\2\2\2\u1492\u1491\3\2\2\2\u1493\u1497\3\2\2\2\u1494\u1498"+
		"\5\u041a\u020e\2\u1495\u1496\7\3\2\2\u1496\u1498\7\4\2\2\u1497\u1494\3"+
		"\2\2\2\u1497\u1495\3\2\2\2\u1497\u1498\3\2\2\2\u1498\u149a\3\2\2\2\u1499"+
		"\u149b\5\u017e\u00c0\2\u149a\u1499\3\2\2\2\u149a\u149b\3\2\2\2\u149b\u149d"+
		"\3\2\2\2\u149c\u149e\5\u041e\u0210\2\u149d\u149c\3\2\2\2\u149d\u149e\3"+
		"\2\2\2\u149e\u14e4\3\2\2\2\u149f\u14a0\t\66\2\2\u14a0\u14a1\7\u016b\2"+
		"\2\u14a1\u14a4\7\u0178\2\2\u14a2\u14a4\7\u02e2\2\2\u14a3\u149f\3\2\2\2"+
		"\u14a3\u14a2\3\2\2\2\u14a4\u14a8\3\2\2\2\u14a5\u14a9\5\u041a\u020e\2\u14a6"+
		"\u14a7\7\3\2\2\u14a7\u14a9\7\4\2\2\u14a8\u14a5\3\2\2\2\u14a8\u14a6\3\2"+
		"\2\2\u14a8\u14a9\3\2\2\2\u14a9\u14ab\3\2\2\2\u14aa\u14ac\5\u017e\u00c0"+
		"\2\u14ab\u14aa\3\2\2\2\u14ab\u14ac\3\2\2\2\u14ac\u14ae\3\2\2\2\u14ad\u14af"+
		"\5\u041e\u0210\2\u14ae\u14ad\3\2\2\2\u14ae\u14af\3\2\2\2\u14af\u14e4\3"+
		"\2\2\2\u14b0\u14b4\t\67\2\2\u14b1\u14b5\5\u041a\u020e\2\u14b2\u14b3\7"+
		"\3\2\2\u14b3\u14b5\7\4\2\2\u14b4\u14b1\3\2\2\2\u14b4\u14b2\3\2\2\2\u14b4"+
		"\u14b5\3\2\2\2\u14b5\u14b7\3\2\2\2\u14b6\u14b8\5\u017e\u00c0\2\u14b7\u14b6"+
		"\3\2\2\2\u14b7\u14b8\3\2\2\2\u14b8\u14e4\3\2\2\2\u14b9\u14bd\7\u02d2\2"+
		"\2\u14ba\u14be\5\u0418\u020d\2\u14bb\u14bc\7\3\2\2\u14bc\u14be\7\4\2\2"+
		"\u14bd\u14ba\3\2\2\2\u14bd\u14bb\3\2\2\2\u14bd\u14be\3\2\2\2\u14be\u14e4"+
		"\3\2\2\2\u14bf\u14c1\7\u02d2\2\2\u14c0\u14c2\7\u01a9\2\2\u14c1\u14c0\3"+
		"\2\2\2\u14c1\u14c2\3\2\2\2\u14c2\u14c5\3\2\2\2\u14c3\u14c5\7\u0382\2\2"+
		"\u14c4\u14bf\3\2\2\2\u14c4\u14c3\3\2\2\2\u14c5\u14c9\3\2\2\2\u14c6\u14ca"+
		"\5\u0418\u020d\2\u14c7\u14c8\7\3\2\2\u14c8\u14ca\7\4\2\2\u14c9\u14c6\3"+
		"\2\2\2\u14c9\u14c7\3\2\2\2\u14c9\u14ca\3\2\2\2\u14ca\u14e4\3\2\2\2\u14cb"+
		"\u14cc\7\u02d2\2\2\u14cc\u14cd\7\u016b\2\2\u14cd\u14d0\7\u0178\2\2\u14ce"+
		"\u14d0\7\u02d8\2\2\u14cf\u14cb\3\2\2\2\u14cf\u14ce\3\2\2\2\u14d0\u14d6"+
		"\3\2\2\2\u14d1\u14d2\7\3\2\2\u14d2\u14d3\7\31\2\2\u14d3\u14d4\7\u03cc"+
		"\2\2\u14d4\u14d5\3\2\2\2\u14d5\u14d7\7\4\2\2\u14d6\u14d1\3\2\2\2\u14d6"+
		"\u14d7\3\2\2\2\u14d7\u14e4\3\2\2\2\u14d8\u14e4\7\u02e8\2\2\u14d9\u14e4"+
		"\7\u036b\2\2\u14da\u14dc\7\u036c\2\2\u14db\u14dd\5\u0418\u020d\2\u14dc"+
		"\u14db\3\2\2\2\u14dc\u14dd\3\2\2\2\u14dd\u14de\3\2\2\2\u14de\u14df\t\5"+
		"\2\2\u14df\u14e0\7\u036b\2\2\u14e0\u14e4\7\u014b\2\2\u14e1\u14e4\7\u0354"+
		"\2\2\u14e2\u14e4\7\u01ab\2\2\u14e3\u1472\3\2\2\2\u14e3\u1473\3\2\2\2\u14e3"+
		"\u1474\3\2\2\2\u14e3\u1475\3\2\2\2\u14e3\u1476\3\2\2\2\u14e3\u147c\3\2"+
		"\2\2\u14e3\u1482\3\2\2\2\u14e3\u1488\3\2\2\2\u14e3\u1489\3\2\2\2\u14e3"+
		"\u1492\3\2\2\2\u14e3\u14a3\3\2\2\2\u14e3\u14b0\3\2\2\2\u14e3\u14b9\3\2"+
		"\2\2\u14e3\u14c4\3\2\2\2\u14e3\u14cf\3\2\2\2\u14e3\u14d8\3\2\2\2\u14e3"+
		"\u14d9\3\2\2\2\u14e3\u14da\3\2\2\2\u14e3\u14e1\3\2\2\2\u14e3\u14e2\3\2"+
		"\2\2\u14e4\u0277\3\2\2\2\u14e5\u1554\7\u035b\2\2\u14e6\u1554\7\u031e\2"+
		"\2\u14e7\u1554\7\u031d\2\2\u14e8\u1554\7\u02d1\2\2\u14e9\u14ed\t\65\2"+
		"\2\u14ea\u14ee\5\u0418\u020d\2\u14eb\u14ec\7\3\2\2\u14ec\u14ee\7\4\2\2"+
		"\u14ed\u14ea\3\2\2\2\u14ed\u14eb\3\2\2\2\u14ee\u1554\3\2\2\2\u14ef\u14f3"+
		"\7\u02f0\2\2\u14f0\u14f4\5\u0418\u020d\2\u14f1\u14f2\7\3\2\2\u14f2\u14f4"+
		"\7\4\2\2\u14f3\u14f0\3\2\2\2\u14f3\u14f1\3\2\2\2\u14f4\u1554\3\2\2\2\u14f5"+
		"\u14f9\7\u030c\2\2\u14f6\u14fa\5\u0418\u020d\2\u14f7\u14f8\7\3\2\2\u14f8"+
		"\u14fa\7\4\2\2\u14f9\u14f6\3\2\2\2\u14f9\u14f7\3\2\2\2\u14fa\u1554\3\2"+
		"\2\2\u14fb\u1554\7\u034a\2\2\u14fc\u14fe\7m\2\2\u14fd\u14ff\7\u00e6\2"+
		"\2\u14fe\u14fd\3\2\2\2\u14fe\u14ff\3\2\2\2\u14ff\u1554\3\2\2\2\u1500\u1502"+
		"\t\66\2\2\u1501\u1503\7\u01a9\2\2\u1502\u1501\3\2\2\2\u1502\u1503\3\2"+
		"\2\2\u1503\u1506\3\2\2\2\u1504\u1506\7\u0383\2\2\u1505\u1500\3\2\2\2\u1505"+
		"\u1504\3\2\2\2\u1506\u150a\3\2\2\2\u1507\u150b\5\u041a\u020e\2\u1508\u1509"+
		"\7\3\2\2\u1509\u150b\7\4\2\2\u150a\u1507\3\2\2\2\u150a\u1508\3\2\2\2\u150a"+
		"\u150b\3\2\2\2\u150b\u150d\3\2\2\2\u150c\u150e\5\u017e\u00c0\2\u150d\u150c"+
		"\3\2\2\2\u150d\u150e\3\2\2\2\u150e\u1510\3\2\2\2\u150f\u1511\5\u041e\u0210"+
		"\2\u1510\u150f\3\2\2\2\u1510\u1511\3\2\2\2\u1511\u1554\3\2\2\2\u1512\u1513"+
		"\t\66\2\2\u1513\u1514\7\u016b\2\2\u1514\u1517\7\u0178\2\2\u1515\u1517"+
		"\7\u02e2\2\2\u1516\u1512\3\2\2\2\u1516\u1515\3\2\2\2\u1517\u151b\3\2\2"+
		"\2\u1518\u151c\5\u041a\u020e\2\u1519\u151a\7\3\2\2\u151a\u151c\7\4\2\2"+
		"\u151b\u1518\3\2\2\2\u151b\u1519\3\2\2\2\u151b\u151c\3\2\2\2\u151c\u151e"+
		"\3\2\2\2\u151d\u151f\5\u017e\u00c0\2\u151e\u151d\3\2\2\2\u151e\u151f\3"+
		"\2\2\2\u151f\u1521\3\2\2\2\u1520\u1522\5\u041e\u0210\2\u1521\u1520\3\2"+
		"\2\2\u1521\u1522\3\2\2\2\u1522\u1554\3\2\2\2\u1523\u1527\t\67\2\2\u1524"+
		"\u1528\5\u041a\u020e\2\u1525\u1526\7\3\2\2\u1526\u1528\7\4\2\2\u1527\u1524"+
		"\3\2\2\2\u1527\u1525\3\2\2\2\u1527\u1528\3\2\2\2\u1528\u152a\3\2\2\2\u1529"+
		"\u152b\5\u017e\u00c0\2\u152a\u1529\3\2\2\2\u152a\u152b\3\2\2\2\u152b\u1554"+
		"\3\2\2\2\u152c\u1530\7\u02d2\2\2\u152d\u1531\5\u0418\u020d\2\u152e\u152f"+
		"\7\3\2\2\u152f\u1531\7\4\2\2\u1530\u152d\3\2\2\2\u1530\u152e\3\2\2\2\u1530"+
		"\u1531\3\2\2\2\u1531\u1554\3\2\2\2\u1532\u1534\7\u02d2\2\2\u1533\u1535"+
		"\7\u01a9\2\2\u1534\u1533\3\2\2\2\u1534\u1535\3\2\2\2\u1535\u1538\3\2\2"+
		"\2\u1536\u1538\7\u0382\2\2\u1537\u1532\3\2\2\2\u1537\u1536\3\2\2\2\u1538"+
		"\u153c\3\2\2\2\u1539\u153d\5\u0418\u020d\2\u153a\u153b\7\3\2\2\u153b\u153d"+
		"\7\4\2\2\u153c\u1539\3\2\2\2\u153c\u153a\3\2\2\2\u153c\u153d\3\2\2\2\u153d"+
		"\u1554\3\2\2\2\u153e\u153f\7\u02d2\2\2\u153f\u1540\7\u016b\2\2\u1540\u1543"+
		"\7\u0178\2\2\u1541\u1543\7\u02d8\2\2\u1542\u153e\3\2\2\2\u1542\u1541\3"+
		"\2\2\2\u1543\u1545\3\2\2\2\u1544\u1546\5\u041a\u020e\2\u1545\u1544\3\2"+
		"\2\2\u1545\u1546\3\2\2\2\u1546\u1554\3\2\2\2\u1547\u1554\7\u02e8\2\2\u1548"+
		"\u1554\7\u036b\2\2\u1549\u154b\7\u036c\2\2\u154a\u154c\5\u0418\u020d\2"+
		"\u154b\u154a\3\2\2\2\u154b\u154c\3\2\2\2\u154c\u1550\3\2\2\2\u154d\u154e"+
		"\t\5\2\2\u154e\u154f\7\u036b\2\2\u154f\u1551\7\u014b\2\2\u1550\u154d\3"+
		"\2\2\2\u1550\u1551\3\2\2\2\u1551\u1554\3\2\2\2\u1552\u1554\7\u0354\2\2"+
		"\u1553\u14e5\3\2\2\2\u1553\u14e6\3\2\2\2\u1553\u14e7\3\2\2\2\u1553\u14e8"+
		"\3\2\2\2\u1553\u14e9\3\2\2\2\u1553\u14ef\3\2\2\2\u1553\u14f5\3\2\2\2\u1553"+
		"\u14fb\3\2\2\2\u1553\u14fc\3\2\2\2\u1553\u1505\3\2\2\2\u1553\u1516\3\2"+
		"\2\2\u1553\u1523\3\2\2\2\u1553\u152c\3\2\2\2\u1553\u1537\3\2\2\2\u1553"+
		"\u1542\3\2\2\2\u1553\u1547\3\2\2\2\u1553\u1548\3\2\2\2\u1553\u1549\3\2"+
		"\2\2\u1553\u1552\3\2\2\2\u1554\u0279\3\2\2\2\u1555\u15bf\7\u035b\2\2\u1556"+
		"\u15bf\7\u031e\2\2\u1557\u15bf\7\u031d\2\2\u1558\u15bf\7\u02d1\2\2\u1559"+
		"\u155d\t\65\2\2\u155a\u155e\5\u0418\u020d\2\u155b\u155c\7\3\2\2\u155c"+
		"\u155e\7\4\2\2\u155d\u155a\3\2\2\2\u155d\u155b\3\2\2\2\u155e\u15bf\3\2"+
		"\2\2\u155f\u1563\7\u02f0\2\2\u1560\u1564\5\u0418\u020d\2\u1561\u1562\7"+
		"\3\2\2\u1562\u1564\7\4\2\2\u1563\u1560\3\2\2\2\u1563\u1561\3\2\2\2\u1564"+
		"\u15bf\3\2\2\2\u1565\u1569\7\u030c\2\2\u1566\u156a\5\u0418\u020d\2\u1567"+
		"\u1568\7\3\2\2\u1568\u156a\7\4\2\2\u1569\u1566\3\2\2\2\u1569\u1567\3\2"+
		"\2\2\u156a\u15bf\3\2\2\2\u156b\u15bf\7\u034a\2\2\u156c\u156e\7m\2\2\u156d"+
		"\u156f\7\u00e6\2\2\u156e\u156d\3\2\2\2\u156e\u156f\3\2\2\2\u156f\u15bf"+
		"\3\2\2\2\u1570\u1572\t\66\2\2\u1571\u1573\7\u01a9\2\2\u1572\u1571\3\2"+
		"\2\2\u1572\u1573\3\2\2\2\u1573\u1576\3\2\2\2\u1574\u1576\7\u0383\2\2\u1575"+
		"\u1570\3\2\2\2\u1575\u1574\3\2\2\2\u1576\u1578\3\2\2\2\u1577\u1579\5\u041a"+
		"\u020e\2\u1578\u1577\3\2\2\2\u1578\u1579\3\2\2\2\u1579\u157b\3\2\2\2\u157a"+
		"\u157c\5\u017e\u00c0\2\u157b\u157a\3\2\2\2\u157b\u157c\3\2\2\2\u157c\u157e"+
		"\3\2\2\2\u157d\u157f\5\u041e\u0210\2\u157e\u157d\3\2\2\2\u157e\u157f\3"+
		"\2\2\2\u157f\u15bf\3\2\2\2\u1580\u1581\t\66\2\2\u1581\u1582\7\u016b\2"+
		"\2\u1582\u1585\7\u0178\2\2\u1583\u1585\7\u02e2\2\2\u1584\u1580\3\2\2\2"+
		"\u1584\u1583\3\2\2\2\u1585\u1587\3\2\2\2\u1586\u1588\5\u041a\u020e\2\u1587"+
		"\u1586\3\2\2\2\u1587\u1588\3\2\2\2\u1588\u158a\3\2\2\2\u1589\u158b\5\u017e"+
		"\u00c0\2\u158a\u1589\3\2\2\2\u158a\u158b\3\2\2\2\u158b\u158d\3\2\2\2\u158c"+
		"\u158e\5\u041e\u0210\2\u158d\u158c\3\2\2\2\u158d\u158e\3\2\2\2\u158e\u15bf"+
		"\3\2\2\2\u158f\u1593\t\67\2\2\u1590\u1594\5\u041a\u020e\2\u1591\u1592"+
		"\7\3\2\2\u1592\u1594\7\4\2\2\u1593\u1590\3\2\2\2\u1593\u1591\3\2\2\2\u1593"+
		"\u1594\3\2\2\2\u1594\u1596\3\2\2\2\u1595\u1597\5\u017e\u00c0\2\u1596\u1595"+
		"\3\2\2\2\u1596\u1597\3\2\2\2\u1597\u15bf\3\2\2\2\u1598\u159c\7\u02d2\2"+
		"\2\u1599\u159d\5\u0418\u020d\2\u159a\u159b\7\3\2\2\u159b\u159d\7\4\2\2"+
		"\u159c\u1599\3\2\2\2\u159c\u159a\3\2\2\2\u159c\u159d\3\2\2\2\u159d\u15bf"+
		"\3\2\2\2\u159e\u15a0\7\u02d2\2\2\u159f\u15a1\7\u01a9\2\2\u15a0\u159f\3"+
		"\2\2\2\u15a0\u15a1\3\2\2\2\u15a1\u15a4\3\2\2\2\u15a2\u15a4\7\u0382\2\2"+
		"\u15a3\u159e\3\2\2\2\u15a3\u15a2\3\2\2\2\u15a4\u15a8\3\2\2\2\u15a5\u15a9"+
		"\5\u0418\u020d\2\u15a6\u15a7\7\3\2\2\u15a7\u15a9\7\4\2\2\u15a8\u15a5\3"+
		"\2\2\2\u15a8\u15a6\3\2\2\2\u15a8\u15a9\3\2\2\2\u15a9\u15bf\3\2\2\2\u15aa"+
		"\u15ab\7\u02d2\2\2\u15ab\u15ac\7\u016b\2\2\u15ac\u15af\7\u0178\2\2\u15ad"+
		"\u15af\7\u02d8\2\2\u15ae\u15aa\3\2\2\2\u15ae\u15ad\3\2\2\2\u15af\u15b1"+
		"\3\2\2\2\u15b0\u15b2\5\u041a\u020e\2\u15b1\u15b0\3\2\2\2\u15b1\u15b2\3"+
		"\2\2\2\u15b2\u15bf\3\2\2\2\u15b3\u15bf\7\u02e8\2\2\u15b4\u15bf\7\u036b"+
		"\2\2\u15b5\u15b7\7\u036c\2\2\u15b6\u15b8\5\u0418\u020d\2\u15b7\u15b6\3"+
		"\2\2\2\u15b7\u15b8\3\2\2\2\u15b8\u15bc\3\2\2\2\u15b9\u15ba\t\5\2\2\u15ba"+
		"\u15bb\7\u036b\2\2\u15bb\u15bd\7\u014b\2\2\u15bc\u15b9\3\2\2\2\u15bc\u15bd"+
		"\3\2\2\2\u15bd\u15bf\3\2\2\2\u15be\u1555\3\2\2\2\u15be\u1556\3\2\2\2\u15be"+
		"\u1557\3\2\2\2\u15be\u1558\3\2\2\2\u15be\u1559\3\2\2\2\u15be\u155f\3\2"+
		"\2\2\u15be\u1565\3\2\2\2\u15be\u156b\3\2\2\2\u15be\u156c\3\2\2\2\u15be"+
		"\u1575\3\2\2\2\u15be\u1584\3\2\2\2\u15be\u158f\3\2\2\2\u15be\u1598\3\2"+
		"\2\2\u15be\u15a3\3\2\2\2\u15be\u15ae\3\2\2\2\u15be\u15b3\3\2\2\2\u15be"+
		"\u15b4\3\2\2\2\u15be\u15b5\3\2\2\2\u15bf\u027b\3\2\2\2\u15c0\u15d3\7\u031e"+
		"\2\2\u15c1\u15d3\7\u031d\2\2\u15c2\u15c4\t\66\2\2\u15c3\u15c5\7\u01a9"+
		"\2\2\u15c4\u15c3\3\2\2\2\u15c4\u15c5\3\2\2\2\u15c5\u15c8\3\2\2\2\u15c6"+
		"\u15c8\7\u0383\2\2\u15c7\u15c2\3\2\2\2\u15c7\u15c6\3\2\2\2\u15c8\u15ca"+
		"\3\2\2\2\u15c9\u15cb\5\u041a\u020e\2\u15ca\u15c9\3\2\2\2\u15ca\u15cb\3"+
		"\2\2\2\u15cb\u15cd\3\2\2\2\u15cc\u15ce\5\u017e\u00c0\2\u15cd\u15cc\3\2"+
		"\2\2\u15cd\u15ce\3\2\2\2\u15ce\u15d0\3\2\2\2\u15cf\u15d1\5\u041e\u0210"+
		"\2\u15d0\u15cf\3\2\2\2\u15d0\u15d1\3\2\2\2\u15d1\u15d3\3\2\2\2\u15d2\u15c0"+
		"\3\2\2\2\u15d2\u15c1\3\2\2\2\u15d2\u15c7\3\2\2\2\u15d3\u027d\3\2\2\2\u15d4"+
		"\u1633\7\u035b\2\2\u15d5\u1633\7\u031e\2\2\u15d6\u1633\7\u031d\2\2\u15d7"+
		"\u1633\7\u02d1\2\2\u15d8\u15dc\t\65\2\2\u15d9\u15dd\5\u0418\u020d\2\u15da"+
		"\u15db\7\3\2\2\u15db\u15dd\7\4\2\2\u15dc\u15d9\3\2\2\2\u15dc\u15da\3\2"+
		"\2\2\u15dd\u1633\3\2\2\2\u15de\u15e2\7\u02f0\2\2\u15df\u15e3\5\u0418\u020d"+
		"\2\u15e0\u15e1\7\3\2\2\u15e1\u15e3\7\4\2\2\u15e2\u15df\3\2\2\2\u15e2\u15e0"+
		"\3\2\2\2\u15e3\u1633\3\2\2\2\u15e4\u15e8\7\u030c\2\2\u15e5\u15e9\5\u0418"+
		"\u020d\2\u15e6\u15e7\7\3\2\2\u15e7\u15e9\7\4\2\2\u15e8\u15e5\3\2\2\2\u15e8"+
		"\u15e6\3\2\2\2\u15e9\u1633\3\2\2\2\u15ea\u1633\7\u034a\2\2\u15eb\u15ed"+
		"\7m\2\2\u15ec\u15ee\7\u00e6\2\2\u15ed\u15ec\3\2\2\2\u15ed\u15ee\3\2\2"+
		"\2\u15ee\u1633\3\2\2\2\u15ef\u15f1\t\66\2\2\u15f0\u15f2\7\u01a9\2\2\u15f1"+
		"\u15f0\3\2\2\2\u15f1\u15f2\3\2\2\2\u15f2\u15f5\3\2\2\2\u15f3\u15f5\7\u0383"+
		"\2\2\u15f4\u15ef\3\2\2\2\u15f4\u15f3\3\2\2\2\u15f5\u15f7\3\2\2\2\u15f6"+
		"\u15f8\5\u041a\u020e\2\u15f7\u15f6\3\2\2\2\u15f7\u15f8\3\2\2\2\u15f8\u15fa"+
		"\3\2\2\2\u15f9\u15fb\5\u041e\u0210\2\u15fa\u15f9\3\2\2\2\u15fa\u15fb\3"+
		"\2\2\2\u15fb\u1633\3\2\2\2\u15fc\u15fd\t\66\2\2\u15fd\u15fe\7\u016b\2"+
		"\2\u15fe\u1601\7\u0178\2\2\u15ff\u1601\7\u02e2\2\2\u1600\u15fc\3\2\2\2"+
		"\u1600\u15ff\3\2\2\2\u1601\u1603\3\2\2\2\u1602\u1604\5\u041a\u020e\2\u1603"+
		"\u1602\3\2\2\2\u1603\u1604\3\2\2\2\u1604\u1606\3\2\2\2\u1605\u1607\5\u041e"+
		"\u0210\2\u1606\u1605\3\2\2\2\u1606\u1607\3\2\2\2\u1607\u1633\3\2\2\2\u1608"+
		"\u160a\t\67\2\2\u1609\u160b\5\u041a\u020e\2\u160a\u1609\3\2\2\2\u160a"+
		"\u160b\3\2\2\2\u160b\u1633\3\2\2\2\u160c\u1610\7\u02d2\2\2\u160d\u1611"+
		"\5\u0418\u020d\2\u160e\u160f\7\3\2\2\u160f\u1611\7\4\2\2\u1610\u160d\3"+
		"\2\2\2\u1610\u160e\3\2\2\2\u1610\u1611\3\2\2\2\u1611\u1633\3\2\2\2\u1612"+
		"\u1614\7\u02d2\2\2\u1613\u1615\7\u01a9\2\2\u1614\u1613\3\2\2\2\u1614\u1615"+
		"\3\2\2\2\u1615\u1618\3\2\2\2\u1616\u1618\7\u0382\2\2\u1617\u1612\3\2\2"+
		"\2\u1617\u1616\3\2\2\2\u1618\u161c\3\2\2\2\u1619\u161d\5\u0418\u020d\2"+
		"\u161a\u161b\7\3\2\2\u161b\u161d\7\4\2\2\u161c\u1619\3\2\2\2\u161c\u161a"+
		"\3\2\2\2\u161c\u161d\3\2\2\2\u161d\u1633\3\2\2\2\u161e\u161f\7\u02d2\2"+
		"\2\u161f\u1620\7\u016b\2\2\u1620\u1623\7\u0178\2\2\u1621\u1623\7\u02d8"+
		"\2\2\u1622\u161e\3\2\2\2\u1622\u1621\3\2\2\2\u1623\u1625\3\2\2\2\u1624"+
		"\u1626\5\u041a\u020e\2\u1625\u1624\3\2\2\2\u1625\u1626\3\2\2\2\u1626\u1633"+
		"\3\2\2\2\u1627\u1633\7\u02e8\2\2\u1628\u1633\7\u036b\2\2\u1629\u162b\7"+
		"\u036c\2\2\u162a\u162c\5\u0418\u020d\2\u162b\u162a\3\2\2\2\u162b\u162c"+
		"\3\2\2\2\u162c\u1630\3\2\2\2\u162d\u162e\t\5\2\2\u162e\u162f\7\u036b\2"+
		"\2\u162f\u1631\7\u014b\2\2\u1630\u162d\3\2\2\2\u1630\u1631\3\2\2\2\u1631"+
		"\u1633\3\2\2\2\u1632\u15d4\3\2\2\2\u1632\u15d5\3\2\2\2\u1632\u15d6\3\2"+
		"\2\2\u1632\u15d7\3\2\2\2\u1632\u15d8\3\2\2\2\u1632\u15de\3\2\2\2\u1632"+
		"\u15e4\3\2\2\2\u1632\u15ea\3\2\2\2\u1632\u15eb\3\2\2\2\u1632\u15f4\3\2"+
		"\2\2\u1632\u1600\3\2\2\2\u1632\u1608\3\2\2\2\u1632\u160c\3\2\2\2\u1632"+
		"\u1617\3\2\2\2\u1632\u1622\3\2\2\2\u1632\u1627\3\2\2\2\u1632\u1628\3\2"+
		"\2\2\u1632\u1629\3\2\2\2\u1633\u027f\3\2\2\2\u1634\u1635\5\u0278\u013d"+
		"\2\u1635\u0281\3\2\2\2\u1636\u1652\5\u01b6\u00dc\2\u1637\u1652\5\u01c0"+
		"\u00e1\2\u1638\u1652\5\u01c6\u00e4\2\u1639\u1652\5\u01ca\u00e6\2\u163a"+
		"\u1652\5\u01ce\u00e8\2\u163b\u1652\5\u01d8\u00ed\2\u163c\u1652\5\u01da"+
		"\u00ee\2\u163d\u1652\5\u01dc\u00ef\2\u163e\u1652\5\u01de\u00f0\2\u163f"+
		"\u1652\5\u01e0\u00f1\2\u1640\u1652\5\u01e4\u00f3\2\u1641\u1652\5\u01e6"+
		"\u00f4\2\u1642\u1652\5\u01e8\u00f5\2\u1643\u1652\5\u01ea\u00f6\2\u1644"+
		"\u1652\5\u01ee\u00f8\2\u1645\u1652\5\u01f0\u00f9\2\u1646\u1652\5\u01f2"+
		"\u00fa\2\u1647\u1652\5\u01f4\u00fb\2\u1648\u1652\5\u01f6\u00fc\2\u1649"+
		"\u1652\5\u01f8\u00fd\2\u164a\u1652\5\u01fa\u00fe\2\u164b\u1652\5\u01fe"+
		"\u0100\2\u164c\u1652\5\u0200\u0101\2\u164d\u1652\5\u0202\u0102\2\u164e"+
		"\u1652\7\u011c\2\2\u164f\u1650\7\u00dd\2\2\u1650\u1652\7D\2\2\u1651\u1636"+
		"\3\2\2\2\u1651\u1637\3\2\2\2\u1651\u1638\3\2\2\2\u1651\u1639\3\2\2\2\u1651"+
		"\u163a\3\2\2\2\u1651\u163b\3\2\2\2\u1651\u163c\3\2\2\2\u1651\u163d\3\2"+
		"\2\2\u1651\u163e\3\2\2\2\u1651\u163f\3\2\2\2\u1651\u1640\3\2\2\2\u1651"+
		"\u1641\3\2\2\2\u1651\u1642\3\2\2\2\u1651\u1643\3\2\2\2\u1651\u1644\3\2"+
		"\2\2\u1651\u1645\3\2\2\2\u1651\u1646\3\2\2\2\u1651\u1647\3\2\2\2\u1651"+
		"\u1648\3\2\2\2\u1651\u1649\3\2\2\2\u1651\u164a\3\2\2\2\u1651\u164b\3\2"+
		"\2\2\u1651\u164c\3\2\2\2\u1651\u164d\3\2\2\2\u1651\u164e\3\2\2\2\u1651"+
		"\u164f\3\2\2\2\u1652\u0283\3\2\2\2\u1653\u1673\5\u01b8\u00dd\2\u1654\u1673"+
		"\5\u0208\u0105\2\u1655\u1673\5\u01b6\u00dc\2\u1656\u1673\5\u01c2\u00e2"+
		"\2\u1657\u1673\5\u01c8\u00e5\2\u1658\u1673\5\u01ca\u00e6\2\u1659\u1673"+
		"\5\u01dc\u00ef\2\u165a\u1673\5\u01d8\u00ed\2\u165b\u1673\5\u01e6\u00f4"+
		"\2\u165c\u1673\5\u01ea\u00f6\2\u165d\u1673\5\u01ee\u00f8\2\u165e\u1673"+
		"\5\u01f0\u00f9\2\u165f\u1673\5\u01f2\u00fa\2\u1660\u1673\5\u01f4\u00fb"+
		"\2\u1661\u1673\5\u01f6\u00fc\2\u1662\u1673\5\u01fa\u00fe\2\u1663\u1664"+
		"\7O\2\2\u1664\u1665\7\u00d2\2\2\u1665\u1666\7\u00fc\2\2\u1666\u1673\t"+
		"\"\2\2\u1667\u1673\5\u01fe\u0100\2\u1668\u1669\7\u01bc\2\2\u1669\u166a"+
		"\7\u00d2\2\2\u166a\u166b\7\u00cb\2\2\u166b\u1673\7\u0168\2\2\u166c\u166d"+
		"\7\u00cb\2\2\u166d\u1673\7?\2\2\u166e\u1673\5\u01f8\u00fd\2\u166f\u1670"+
		"\t+\2\2\u1670\u1671\7\u01ea\2\2\u1671\u1673\7\u01ec\2\2\u1672\u1653\3"+
		"\2\2\2\u1672\u1654\3\2\2\2\u1672\u1655\3\2\2\2\u1672\u1656\3\2\2\2\u1672"+
		"\u1657\3\2\2\2\u1672\u1658\3\2\2\2\u1672\u1659\3\2\2\2\u1672\u165a\3\2"+
		"\2\2\u1672\u165b\3\2\2\2\u1672\u165c\3\2\2\2\u1672\u165d\3\2\2\2\u1672"+
		"\u165e\3\2\2\2\u1672\u165f\3\2\2\2\u1672\u1660\3\2\2\2\u1672\u1661\3\2"+
		"\2\2\u1672\u1662\3\2\2\2\u1672\u1663\3\2\2\2\u1672\u1667\3\2\2\2\u1672"+
		"\u1668\3\2\2\2\u1672\u166c\3\2\2\2\u1672\u166e\3\2\2\2\u1672\u166f\3\2"+
		"\2\2\u1673\u0285\3\2\2\2\u1674\u168c\5\u0206\u0104\2\u1675\u168c\5\u01b8"+
		"\u00dd\2\u1676\u168c\5\u0208\u0105\2\u1677\u168c\5\u01b4\u00db\2\u1678"+
		"\u168c\5\u01c2\u00e2\2\u1679\u168c\5\u01d8\u00ed\2\u167a\u168c\5\u01c8"+
		"\u00e5\2\u167b\u168c\5\u01ca\u00e6\2\u167c\u168c\5\u01dc\u00ef\2\u167d"+
		"\u168c\5\u01cc\u00e7\2\u167e\u168c\5\u01e6\u00f4\2\u167f\u168c\5\u01ea"+
		"\u00f6\2\u1680\u168c\5\u01ee\u00f8\2\u1681\u168c\5\u01f0\u00f9\2\u1682"+
		"\u168c\5\u01f2\u00fa\2\u1683\u168c\5\u01f4\u00fb\2\u1684\u168c\5\u01f6"+
		"\u00fc\2\u1685\u168c\5\u01fa\u00fe\2\u1686\u168c\5\u01fc\u00ff\2\u1687"+
		"\u168c\5\u01fe\u0100\2\u1688\u168c\5\u01d0\u00e9\2\u1689\u168c\5\u01f8"+
		"\u00fd\2\u168a\u168c\5\u01d2\u00ea\2\u168b\u1674\3\2\2\2\u168b\u1675\3"+
		"\2\2\2\u168b\u1676\3\2\2\2\u168b\u1677\3\2\2\2\u168b\u1678\3\2\2\2\u168b"+
		"\u1679\3\2\2\2\u168b\u167a\3\2\2\2\u168b\u167b\3\2\2\2\u168b\u167c\3\2"+
		"\2\2\u168b\u167d\3\2\2\2\u168b\u167e\3\2\2\2\u168b\u167f\3\2\2\2\u168b"+
		"\u1680\3\2\2\2\u168b\u1681\3\2\2\2\u168b\u1682\3\2\2\2\u168b\u1683\3\2"+
		"\2\2\u168b\u1684\3\2\2\2\u168b\u1685\3\2\2\2\u168b\u1686\3\2\2\2\u168b"+
		"\u1687\3\2\2\2\u168b\u1688\3\2\2\2\u168b\u1689\3\2\2\2\u168b\u168a\3\2"+
		"\2\2\u168c\u0287\3\2\2\2\u168d\u1690\5\u0278\u013d\2\u168e\u1690\5\u0420"+
		"\u0211\2\u168f\u168d\3\2\2\2\u168f\u168e\3\2\2\2\u1690\u0289\3\2\2\2\u1691"+
		"\u1699\5\u0292\u014a\2\u1692\u1699\5\u0294\u014b\2\u1693\u1699\5\u0296"+
		"\u014c\2\u1694\u1699\5\u0298\u014d\2\u1695\u1699\5\u029a\u014e\2\u1696"+
		"\u1699\5\u029c\u014f\2\u1697\u1699\5\u029e\u0150\2\u1698\u1691\3\2\2\2"+
		"\u1698\u1692\3\2\2\2\u1698\u1693\3\2\2\2\u1698\u1694\3\2\2\2\u1698\u1695"+
		"\3\2\2\2\u1698\u1696\3\2\2\2\u1698\u1697\3\2\2\2\u1699\u028b\3\2\2\2\u169a"+
		"\u16a3\5\u028e\u0148\2\u169b\u16a3\5\u0290\u0149\2\u169c\u16a3\5\u0294"+
		"\u014b\2\u169d\u16a3\5\u0296\u014c\2\u169e\u16a3\5\u0298\u014d\2\u169f"+
		"\u16a3\5\u029a\u014e\2\u16a0\u16a3\5\u029c\u014f\2\u16a1\u16a3\5\u029e"+
		"\u0150\2\u16a2\u169a\3\2\2\2\u16a2\u169b\3\2\2\2\u16a2\u169c\3\2\2\2\u16a2"+
		"\u169d\3\2\2\2\u16a2\u169e\3\2\2\2\u16a2\u169f\3\2\2\2\u16a2\u16a0\3\2"+
		"\2\2\u16a2\u16a1\3\2\2\2\u16a3\u028d\3\2\2\2\u16a4\u16a5\7\61\2\2\u16a5"+
		"\u16a6\5\u0318\u018d\2\u16a6\u028f\3\2\2\2\u16a7\u16a8\7\u0215\2\2\u16a8"+
		"\u16a9\7\u0144\2\2\u16a9\u16aa\7\31\2\2\u16aa\u0291\3\2\2\2\u16ab\u16ae"+
		"\7\u01f1\2\2\u16ac\u16ad\7\u0144\2\2\u16ad\u16af\7\31\2\2\u16ae\u16ac"+
		"\3\2\2\2\u16ae\u16af\3\2\2\2\u16af\u0293\3\2\2\2\u16b0\u16b1\7\u01f0\2"+
		"\2\u16b1\u16b2\7>\2\2\u16b2\u16b3\7\31\2\2\u16b3\u0295\3\2\2\2\u16b4\u16b5"+
		"\7\u00c8\2\2\u16b5\u16b9\7\u01db\2\2\u16b6\u16b7\7\u01db\2\2\u16b7\u16b9"+
		"\7\31\2\2\u16b8\u16b4\3\2\2\2\u16b8\u16b6\3\2\2\2\u16b9\u0297\3\2\2\2"+
		"\u16ba\u16bb\7\u00c8\2\2\u16bb\u16bf\7\u01da\2\2\u16bc\u16bd\7\u01da\2"+
		"\2\u16bd\u16bf\7\31\2\2\u16be\u16ba\3\2\2\2\u16be\u16bc\3\2\2\2\u16bf"+
		"\u0299\3\2\2\2\u16c0\u16c2\7\u00c8\2\2\u16c1\u16c0\3\2\2\2\u16c1\u16c2"+
		"\3\2\2\2\u16c2\u16c3\3\2\2\2\u16c3\u16c4\7\u01ef\2\2\u16c4\u029b\3\2\2"+
		"\2\u16c5\u16c6\7\u00c8\2\2\u16c6\u16ca\7\u01ee\2\2\u16c7\u16c8\7\u01ee"+
		"\2\2\u16c8\u16ca\7\31\2\2\u16c9\u16c5\3\2\2\2\u16c9\u16c7\3\2\2\2\u16ca"+
		"\u029d\3\2\2\2\u16cb\u16cd\7\u00c8\2\2\u16cc\u16cb\3\2\2\2\u16cc\u16cd"+
		"\3\2\2\2\u16cd\u16ce\3\2\2\2\u16ce\u16cf\7\u00d7\2\2\u16cf\u029f\3\2\2"+
		"\2\u16d0\u16d1\7\u00c8\2\2\u16d1\u16d2\7\u00ac\2\2\u16d2\u16d7\7\u00ad"+
		"\2\2\u16d3\u16d4\7\u00ac\2\2\u16d4\u16d5\7\u00ad\2\2\u16d5\u16d7\5\u0494"+
		"\u024b\2\u16d6\u16d0\3\2\2\2\u16d6\u16d3\3\2\2\2\u16d7\u02a1\3\2\2\2\u16d8"+
		"\u16d9\7\u01f2\2\2\u16d9\u16da\5\u048c\u0247\2\u16da\u02a3\3\2\2\2\u16db"+
		"\u16dc\7\u01f3\2\2\u16dc\u16dd\5\u048e\u0248\2\u16dd\u02a5\3\2\2\2\u16de"+
		"\u16df\7\u01f5\2\2\u16df\u16e0\5\u0490\u0249\2\u16e0\u02a7\3\2\2\2\u16e1"+
		"\u16e2\7\'\2\2\u16e2\u16e3\7\u013f\2\2\u16e3\u16e4\7\3\2\2\u16e4\u16e9"+
		"\5\u0492\u024a\2\u16e5\u16e6\7\26\2\2\u16e6\u16e8\5\u0492\u024a\2\u16e7"+
		"\u16e5\3\2\2\2\u16e8\u16eb\3\2\2\2\u16e9\u16e7\3\2\2\2\u16e9\u16ea\3\2"+
		"\2\2\u16ea\u16ec\3\2\2\2\u16eb\u16e9\3\2\2\2\u16ec\u16ed\7\4\2\2\u16ed"+
		"\u1718\3\2\2\2\u16ee\u16ef\7\'\2\2\u16ef\u16f0\7\u013f\2\2\u16f0\u16f1"+
		"\7\3\2\2\u16f1\u16f6\7\30\2\2\u16f2\u16f3\7\26\2\2\u16f3\u16f5\7\30\2"+
		"\2\u16f4\u16f2\3\2\2\2\u16f5\u16f8\3\2\2\2\u16f6\u16f4\3\2\2\2\u16f6\u16f7"+
		"\3\2\2\2\u16f7\u16f9\3\2\2\2\u16f8\u16f6\3\2\2\2\u16f9\u1718\7\4\2\2\u16fa"+
		"\u16fb\7\u01f4\2\2\u16fb\u16fc\7\u013f\2\2\u16fc\u16fd\7\3\2\2\u16fd\u1702"+
		"\5\u0492\u024a\2\u16fe\u16ff\7\26\2\2\u16ff\u1701\5\u0492\u024a\2\u1700"+
		"\u16fe\3\2\2\2\u1701\u1704\3\2\2\2\u1702\u1700\3\2\2\2\u1702\u1703\3\2"+
		"\2\2\u1703\u1705\3\2\2\2\u1704\u1702\3\2\2\2\u1705\u1706\7\4\2\2\u1706"+
		"\u1718\3\2\2\2\u1707\u1708\7\u01f4\2\2\u1708\u1709\7\u013f\2\2\u1709\u170a"+
		"\7\3\2\2\u170a\u170f\7\30\2\2\u170b\u170c\7\26\2\2\u170c\u170e\7\30\2"+
		"\2\u170d\u170b\3\2\2\2\u170e\u1711\3\2\2\2\u170f\u170d\3\2\2\2\u170f\u1710"+
		"\3\2\2\2\u1710\u1712\3\2\2\2\u1711\u170f\3\2\2\2\u1712\u1718\7\4\2\2\u1713"+
		"\u1718\5\u02a0\u0151\2\u1714\u1718\5\u02a2\u0152\2\u1715\u1718\5\u02a4"+
		"\u0153\2\u1716\u1718\5\u02a6\u0154\2\u1717\u16e1\3\2\2\2\u1717\u16ee\3"+
		"\2\2\2\u1717\u16fa\3\2\2\2\u1717\u1707\3\2\2\2\u1717\u1713\3\2\2\2\u1717"+
		"\u1714\3\2\2\2\u1717\u1715\3\2\2\2\u1717\u1716\3\2\2\2\u1718\u02a9\3\2"+
		"\2\2\u1719\u171b\7\'\2\2\u171a\u171c\7M\2\2\u171b\u171a\3\2\2\2\u171b"+
		"\u171c\3\2\2\2\u171c\u171d\3\2\2\2\u171d\u17a1\5\u0358\u01ad\2\u171e\u1720"+
		"\7,\2\2\u171f\u1721\7M\2\2\u1720\u171f\3\2\2\2\u1720\u1721\3\2\2\2\u1721"+
		"\u1722\3\2\2\2\u1722\u17a1\5\u030e\u0188\2\u1723\u1724\7\u00f6\2\2\u1724"+
		"\u1725\7M\2\2\u1725\u1726\5\u042a\u0216\2\u1726\u1727\7\u012c\2\2\u1727"+
		"\u1728\5\u042c\u0217\2\u1728\u17a1\3\2\2\2\u1729\u172b\7n\2\2\u172a\u172c"+
		"\7M\2\2\u172b\u172a\3\2\2\2\u172b\u172c\3\2\2\2\u172c\u172d\3\2\2\2\u172d"+
		"\u172e\5\u0428\u0215\2\u172e\u172f\7\u00f9\2\2\u172f\u17a1\3\2\2\2\u1730"+
		"\u1731\7\'\2\2\u1731\u17a1\5\u0356\u01ac\2\u1732\u1736\7\'\2\2\u1733\u1737"+
		"\5\u032c\u0197\2\u1734\u1737\5\u032e\u0198\2\u1735\u1737\5\u0332\u019a"+
		"\2\u1736\u1733\3\2\2\2\u1736\u1734\3\2\2\2\u1736\u1735\3\2\2\2\u1737\u17a1"+
		"\3\2\2\2\u1738\u1743\7n\2\2\u1739\u173a\7\u0212\2\2\u173a\u1744\7\u00ac"+
		"\2\2\u173b\u1741\7\u0132\2\2\u173c\u173d\7\u0204\2\2\u173d\u1741\7\u00ac"+
		"\2\2\u173e\u1741\7G\2\2\u173f\u1741\7T\2\2\u1740\u173b\3\2\2\2\u1740\u173c"+
		"\3\2\2\2\u1740\u173e\3\2\2\2\u1740\u173f\3\2\2\2\u1741\u1742\3\2\2\2\u1742"+
		"\u1744\5\u0458\u022d\2\u1743\u1739\3\2\2\2\u1743\u1740\3\2\2\2\u1744\u17a1"+
		"\3\2\2\2\u1745\u1746\7\'\2\2\u1746\u17a1\5\u0334\u019b\2\u1747\u1748\7"+
		"\'\2\2\u1748\u1749\7\u00df\2\2\u1749\u17a1\5\u0342\u01a2\2\u174a\u174b"+
		"\7,\2\2\u174b\u174c\7\u00df\2\2\u174c\u174d\7\31\2\2\u174d\u17a1\5\u0342"+
		"\u01a2\2\u174e\u174f\7\u0214\2\2\u174f\u1750\7\u00df\2\2\u1750\u1751\t"+
		"8\2\2\u1751\u1752\7\u012c\2\2\u1752\u1753\7\u00af\2\2\u1753\u17a1\5\u0344"+
		"\u01a3\2\u1754\u1755\7n\2\2\u1755\u17a1\7\u00d8\2\2\u1756\u17a1\5\u033e"+
		"\u01a0\2\u1757\u1759\7\'\2\2\u1758\u175a\7\u0127\2\2\u1759\u1758\3\2\2"+
		"\2\u1759\u175a\3\2\2\2\u175a\u175b\3\2\2\2\u175b\u175c\7\u013c\2\2\u175c"+
		"\u175d\7\u01a3\2\2\u175d\u175e\7\u0206\2\2\u175e\u175f\7\u0129\2\2\u175f"+
		"\u1761\5\u0440\u0221\2\u1760\u1762\5\u0346\u01a4\2\u1761\u1760\3\2\2\2"+
		"\u1761\u1762\3\2\2\2\u1762\u17a1\3\2\2\2\u1763\u1765\7n\2\2\u1764\u1766"+
		"\7\u0127\2\2\u1765\u1764\3\2\2\2\u1765\u1766\3\2\2\2\u1766\u1767\3\2\2"+
		"\2\u1767\u17a1\7\u013c\2\2\u1768\u176c\7\'\2\2\u1769\u176a\7\u00bf\2\2"+
		"\u176a\u176d\7\u00f0\2\2\u176b\u176d\7\u00f0\2\2\u176c\u1769\3\2\2\2\u176c"+
		"\u176b\3\2\2\2\u176c\u176d\3\2\2\2\u176d\u176e\3\2\2\2\u176e\u17a1\5\u0348"+
		"\u01a5\2\u176f\u1771\7,\2\2\u1770\u1772\7\u00bf\2\2\u1771\u1770\3\2\2"+
		"\2\u1771\u1772\3\2\2\2\u1772\u1773\3\2\2\2\u1773\u1774\7\u00f0\2\2\u1774"+
		"\u17a1\5\u034a\u01a6\2\u1775\u1777\7n\2\2\u1776\u1778\7\u00bf\2\2\u1777"+
		"\u1776\3\2\2\2\u1777\u1778\3\2\2\2\u1778\u1779\3\2\2\2\u1779\u17a1\7\u00f0"+
		"\2\2\u177a\u17a1\5\u017a\u00be\2\u177b\u17a1\5\u0182\u00c2\2\u177c\u177d"+
		"\7\'\2\2\u177d\u177e\7H\2\2\u177e\u17a1\5\u0442\u0222\2\u177f\u1780\7"+
		"n\2\2\u1780\u17a1\7H\2\2\u1781\u1782\7\'\2\2\u1782\u1783\7\u00f9\2\2\u1783"+
		"\u1784\7\u00d2\2\2\u1784\u17a1\7n\2\2\u1785\u1786\7n\2\2\u1786\u1787\7"+
		"\u00f9\2\2\u1787\u1788\7\u00d2\2\2\u1788\u17a1\7n\2\2\u1789\u178a\t9\2"+
		"\2\u178a\u178b\7\u010a\2\2\u178b\u178c\7\u01f6\2\2\u178c\u17a1\7\u01fe"+
		"\2\2\u178d\u178e\t9\2\2\u178e\u178f\7M\2\2\u178f\u1790\7\u01f6\2\2\u1790"+
		"\u17a1\7\u01fe\2\2\u1791\u17a1\5\u0184\u00c3\2\u1792\u17a1\5\u0176\u00bc"+
		"\2\u1793\u17a1\5\u0174\u00bb\2\u1794\u1795\7\u01df\2\2\u1795\u1796\7\u01fa"+
		"\2\2\u1796\u1797\7\u01a3\2\2\u1797\u17a1\5\u0444\u0223\2\u1798\u1799\7"+
		"h\2\2\u1799\u17a1\7\u01fa\2\2\u179a\u179b\7\u00c8\2\2\u179b\u179c\7\u00ac"+
		"\2\2\u179c\u17a1\7\u00ad\2\2\u179d\u179e\7\u00ac\2\2\u179e\u179f\7\u00ad"+
		"\2\2\u179f\u17a1\5\u0494\u024b\2\u17a0\u1719\3\2\2\2\u17a0\u171e\3\2\2"+
		"\2\u17a0\u1723\3\2\2\2\u17a0\u1729\3\2\2\2\u17a0\u1730\3\2\2\2\u17a0\u1732"+
		"\3\2\2\2\u17a0\u1738\3\2\2\2\u17a0\u1745\3\2\2\2\u17a0\u1747\3\2\2\2\u17a0"+
		"\u174a\3\2\2\2\u17a0\u174e\3\2\2\2\u17a0\u1754\3\2\2\2\u17a0\u1756\3\2"+
		"\2\2\u17a0\u1757\3\2\2\2\u17a0\u1763\3\2\2\2\u17a0\u1768\3\2\2\2\u17a0"+
		"\u176f\3\2\2\2\u17a0\u1775\3\2\2\2\u17a0\u177a\3\2\2\2\u17a0\u177b\3\2"+
		"\2\2\u17a0\u177c\3\2\2\2\u17a0\u177f\3\2\2\2\u17a0\u1781\3\2\2\2\u17a0"+
		"\u1785\3\2\2\2\u17a0\u1789\3\2\2\2\u17a0\u178d\3\2\2\2\u17a0\u1791\3\2"+
		"\2\2\u17a0\u1792\3\2\2\2\u17a0\u1793\3\2\2\2\u17a0\u1794\3\2\2\2\u17a0"+
		"\u1798\3\2\2\2\u17a0\u179a\3\2\2\2\u17a0\u179d\3\2\2\2\u17a1\u02ab\3\2"+
		"\2\2\u17a2\u17bb\5\u0248\u0125\2\u17a3\u17bb\5\u0180\u00c1\2\u17a4\u17bb"+
		"\5\u024a\u0126\2\u17a5\u17bb\5\u0256\u012c\2\u17a6\u17a7\7n\2\2\u17a7"+
		"\u17a8\7\u022a\2\2\u17a8\u17bb\7\u01fd\2\2\u17a9\u17bb\5\u024e\u0128\2"+
		"\u17aa\u17bb\5\u02c4\u0163\2\u17ab\u17bb\5\u025c\u012f\2\u17ac\u17bb\5"+
		"\u025a\u012e\2\u17ad\u17bb\5\u0260\u0131\2\u17ae\u17bb\5\u02c6\u0164\2"+
		"\u17af\u17bb\5\u02c8\u0165\2\u17b0\u17b1\7\u0226\2\2\u17b1\u17b2\7J\2"+
		"\2\u17b2\u17bb\t\"\2\2\u17b3\u17bb\5\u02ba\u015e\2\u17b4\u17bb\5\u0188"+
		"\u00c5\2\u17b5\u17bb\5\u02e4\u0173\2\u17b6\u17bb\5\u02e6\u0174\2\u17b7"+
		"\u17bb\5\u02ea\u0176\2\u17b8\u17b9\7\u0229\2\2\u17b9\u17bb\7\u022b\2\2"+
		"\u17ba\u17a2\3\2\2\2\u17ba\u17a3\3\2\2\2\u17ba\u17a4\3\2\2\2\u17ba\u17a5"+
		"\3\2\2\2\u17ba\u17a6\3\2\2\2\u17ba\u17a9\3\2\2\2\u17ba\u17aa\3\2\2\2\u17ba"+
		"\u17ab\3\2\2\2\u17ba\u17ac\3\2\2\2\u17ba\u17ad\3\2\2\2\u17ba\u17ae\3\2"+
		"\2\2\u17ba\u17af\3\2\2\2\u17ba\u17b0\3\2\2\2\u17ba\u17b3\3\2\2\2\u17ba"+
		"\u17b4\3\2\2\2\u17ba\u17b5\3\2\2\2\u17ba\u17b6\3\2\2\2\u17ba\u17b7\3\2"+
		"\2\2\u17ba\u17b8\3\2\2\2\u17bb\u02ad\3\2\2\2\u17bc\u17d1\5\u02b8\u015d"+
		"\2\u17bd\u17d1\5\u0248\u0125\2\u17be\u17d1\5\u02be\u0160\2\u17bf\u17d1"+
		"\5\u02c0\u0161\2\u17c0\u17d1\5\u02ba\u015e\2\u17c1\u17d1\5\u017e\u00c0"+
		"\2\u17c2\u17d1\5\u024a\u0126\2\u17c3\u17d1\5\u0256\u012c\2\u17c4\u17d1"+
		"\5\u0258\u012d\2\u17c5\u17d1\5\u02e6\u0174\2\u17c6\u17d1\5\u02ea\u0176"+
		"\2\u17c7\u17d1\5\u02c4\u0163\2\u17c8\u17d1\5\u025c\u012f\2\u17c9\u17d1"+
		"\5\u025a\u012e\2\u17ca\u17d1\5\u0260\u0131\2\u17cb\u17d1\5\u02c6\u0164"+
		"\2\u17cc\u17d1\5\u02c8\u0165\2\u17cd\u17d1\5\u0186\u00c4\2\u17ce\u17d1"+
		"\5\u0188\u00c5\2\u17cf\u17d1\5\u02e4\u0173\2\u17d0\u17bc\3\2\2\2\u17d0"+
		"\u17bd\3\2\2\2\u17d0\u17be\3\2\2\2\u17d0\u17bf\3\2\2\2\u17d0\u17c0\3\2"+
		"\2\2\u17d0\u17c1\3\2\2\2\u17d0\u17c2\3\2\2\2\u17d0\u17c3\3\2\2\2\u17d0"+
		"\u17c4\3\2\2\2\u17d0\u17c5\3\2\2\2\u17d0\u17c6\3\2\2\2\u17d0\u17c7\3\2"+
		"\2\2\u17d0\u17c8\3\2\2\2\u17d0\u17c9\3\2\2\2\u17d0\u17ca\3\2\2\2\u17d0"+
		"\u17cb\3\2\2\2\u17d0\u17cc\3\2\2\2\u17d0\u17cd\3\2\2\2\u17d0\u17ce\3\2"+
		"\2\2\u17d0\u17cf\3\2\2\2\u17d1\u02af\3\2\2\2\u17d2\u17d3\7,\2\2\u17d3"+
		"\u17d4\7\u0127\2\2\u17d4\u17d5\7\u0231\2\2\u17d5\u182b\5\u0476\u023c\2"+
		"\u17d6\u17d7\7,\2\2\u17d7\u17d8\7\u00c8\2\2\u17d8\u17d9\7d\2\2\u17d9\u182b"+
		"\7\u0100\2\2\u17da\u17db\7,\2\2\u17db\u17dc\7d\2\2\u17dc\u17dd\7\u0100"+
		"\2\2\u17dd\u17ea\5\u047a\u023e\2\u17de\u17df\7\u01aa\2\2\u17df\u17e0\7"+
		"\u0100\2\2\u17e0\u17e1\7\61\2\2\u17e1\u17e2\7\u0178\2\2\u17e2\u17eb\7"+
		"\u0234\2\2\u17e3\u17e4\7\u0144\2\2\u17e4\u17e5\7\u0100\2\2\u17e5\u17e6"+
		"\7\61\2\2\u17e6\u17e7\7\u0178\2\2\u17e7\u17e8\7\u0234\2\2\u17e8\u17e9"+
		"\7\u014c\2\2\u17e9\u17eb\7\u0236\2\2\u17ea\u17de\3\2\2\2\u17ea\u17e3\3"+
		"\2\2\2\u17ea\u17eb\3\2\2\2\u17eb\u182b\3\2\2\2\u17ec\u17ee\7,\2\2\u17ed"+
		"\u17ec\3\2\2\2\u17ed\u17ee\3\2\2\2\u17ee\u17ef\3\2\2\2\u17ef\u182b\7\u01df"+
		"\2\2\u17f0\u17f2\7,\2\2\u17f1\u17f0\3\2\2\2\u17f1\u17f2\3\2\2\2\u17f2"+
		"\u17f3\3\2\2\2\u17f3\u182b\7h\2\2\u17f4\u17f6\7,\2\2\u17f5\u17f4\3\2\2"+
		"\2\u17f5\u17f6\3\2\2\2\u17f6\u17f7\3\2\2\2\u17f7\u17f8\7\u00c8\2\2\u17f8"+
		"\u17f9\7d\2\2\u17f9\u17fa\7\u0113\2\2\u17fa\u182b\7\u00ad\2\2\u17fb\u17fd"+
		"\7,\2\2\u17fc\u17fb\3\2\2\2\u17fc\u17fd\3\2\2\2\u17fd\u17fe\3\2\2\2\u17fe"+
		"\u17ff\7d\2\2\u17ff\u1800\7\u0113\2\2\u1800\u1801\7\u00ad\2\2\u1801\u182b"+
		"\5\u047c\u023f\2\u1802\u1803\7,\2\2\u1803\u1804\7\u022f\2\2\u1804\u1805"+
		"\7\3\2\2\u1805\u180a\5\u02d0\u0169\2\u1806\u1807\7\26\2\2\u1807\u1809"+
		"\5\u02d0\u0169\2\u1808\u1806\3\2\2\2\u1809\u180c\3\2\2\2\u180a\u1808\3"+
		"\2\2\2\u180a\u180b\3\2\2\2\u180b\u180d\3\2\2\2\u180c\u180a\3\2\2\2\u180d"+
		"\u180e\7\4\2\2\u180e\u182b\3\2\2\2\u180f\u1810\7\'\2\2\u1810\u1811\7\u022f"+
		"\2\2\u1811\u1812\7\3\2\2\u1812\u1817\5\u02d2\u016a\2\u1813\u1814\7\26"+
		"\2\2\u1814\u1816\5\u02d2\u016a\2\u1815\u1813\3\2\2\2\u1816\u1819\3\2\2"+
		"\2\u1817\u1815\3\2\2\2\u1817\u1818\3\2\2\2\u1818\u181a\3\2\2\2\u1819\u1817"+
		"\3\2\2\2\u181a\u181b\7\4\2\2\u181b\u182b\3\2\2\2\u181c\u181d\7n\2\2\u181d"+
		"\u181e\7\u022f\2\2\u181e\u181f\7\3\2\2\u181f\u1824\5\u02d4\u016b\2\u1820"+
		"\u1821\7\26\2\2\u1821\u1823\5\u02d4\u016b\2\u1822\u1820\3\2\2\2\u1823"+
		"\u1826\3\2\2\2\u1824\u1822\3\2\2\2\u1824\u1825\3\2\2\2\u1825\u1827\3\2"+
		"\2\2\u1826\u1824\3\2\2\2\u1827\u1828\7\4\2\2\u1828\u182b\3\2\2\2\u1829"+
		"\u182b\5\u02d8\u016d\2\u182a\u17d2\3\2\2\2\u182a\u17d6\3\2\2\2\u182a\u17da"+
		"\3\2\2\2\u182a\u17ed\3\2\2\2\u182a\u17f1\3\2\2\2\u182a\u17f5\3\2\2\2\u182a"+
		"\u17fc\3\2\2\2\u182a\u1802\3\2\2\2\u182a\u180f\3\2\2\2\u182a\u181c\3\2"+
		"\2\2\u182a\u1829\3\2\2\2\u182b\u02b1\3\2\2\2\u182c\u183c\5\u0248\u0125"+
		"\2\u182d\u182e\7\u009e\2\2\u182e\u183c\5\u0488\u0245\2\u182f\u1830\7\61"+
		"\2\2\u1830\u1833\7\u023e\2\2\u1831\u1832\7\u0088\2\2\u1832\u1834\5\u0468"+
		"\u0235\2\u1833\u1831\3\2\2\2\u1833\u1834\3\2\2\2\u1834\u183c\3\2\2\2\u1835"+
		"\u1838\7\u0121\2\2\u1836\u1839\7\u023f\2\2\u1837\u1839\5\u048a\u0246\2"+
		"\u1838\u1836\3\2\2\2\u1838\u1837\3\2\2\2\u1838\u1839\3\2\2\2\u1839\u183c"+
		"\3\2\2\2\u183a\u183c\5\u017e\u00c0\2\u183b\u182c\3\2\2\2\u183b\u182d\3"+
		"\2\2\2\u183b\u182f\3\2\2\2\u183b\u1835\3\2\2\2\u183b\u183a\3\2\2\2\u183c"+
		"\u02b3\3\2\2\2\u183d\u1874\5\u02cc\u0167\2\u183e\u1874\5\u02d6\u016c\2"+
		"\u183f\u1874\5\u0252\u012a\2\u1840\u1874\7\u00e0\2\2\u1841\u1874\5\u0254"+
		"\u012b\2\u1842\u1874\5\u0256\u012c\2\u1843\u1874\5\u02ca\u0166\2\u1844"+
		"\u1874\5\u0268\u0135\2\u1845\u1874\5\u026a\u0136\2\u1846\u1874\5\u0258"+
		"\u012d\2\u1847\u1848\t:\2\2\u1848\u1849\7\u00cb\2\2\u1849\u1874\7\u0248"+
		"\2\2\u184a\u184b\7\u00df\2\2\u184b\u184d\7>\2\2\u184c\u184e\7\u0182\2"+
		"\2\u184d\u184c\3\2\2\2\u184d\u184e\3\2\2\2\u184e\u184f\3\2\2\2\u184f\u1850"+
		"\7\3\2\2\u1850\u1857\5\u026c\u0137\2\u1851\u1856\5\u02ca\u0166\2\u1852"+
		"\u1856\5\u0268\u0135\2\u1853\u1856\5\u026a\u0136\2\u1854\u1856\5\u024e"+
		"\u0128\2\u1855\u1851\3\2\2\2\u1855\u1852\3\2\2\2\u1855\u1853\3\2\2\2\u1855"+
		"\u1854\3\2\2\2\u1856\u1859\3\2\2\2\u1857\u1855\3\2\2\2\u1857\u1858\3\2"+
		"\2\2\u1858\u1867\3\2\2\2\u1859\u1857\3\2\2\2\u185a\u185b\7\26\2\2\u185b"+
		"\u1862\5\u026c\u0137\2\u185c\u1861\5\u02ca\u0166\2\u185d\u1861\5\u0268"+
		"\u0135\2\u185e\u1861\5\u026a\u0136\2\u185f\u1861\5\u024e\u0128\2\u1860"+
		"\u185c\3\2\2\2\u1860\u185d\3\2\2\2\u1860\u185e\3\2\2\2\u1860\u185f\3\2"+
		"\2\2\u1861\u1864\3\2\2\2\u1862\u1860\3\2\2\2\u1862\u1863\3\2\2\2\u1863"+
		"\u1866\3\2\2\2\u1864\u1862\3\2\2\2\u1865\u185a\3\2\2\2\u1866\u1869\3\2"+
		"\2\2\u1867\u1865\3\2\2\2\u1867\u1868\3\2\2\2\u1868\u186a\3\2\2\2\u1869"+
		"\u1867\3\2\2\2\u186a\u186b\7\4\2\2\u186b\u1874\3\2\2\2\u186c\u1874\5\u0248"+
		"\u0125\2\u186d\u1874\5\u024a\u0126\2\u186e\u186f\7\u0244\2\2\u186f\u1874"+
		"\t\"\2\2\u1870\u1874\5\u024e\u0128\2\u1871\u1874\5\u0250\u0129\2\u1872"+
		"\u1874\5\u024c\u0127\2\u1873\u183d\3\2\2\2\u1873\u183e\3\2\2\2\u1873\u183f"+
		"\3\2\2\2\u1873\u1840\3\2\2\2\u1873\u1841\3\2\2\2\u1873\u1842\3\2\2\2\u1873"+
		"\u1843\3\2\2\2\u1873\u1844\3\2\2\2\u1873\u1845\3\2\2\2\u1873\u1846\3\2"+
		"\2\2\u1873\u1847\3\2\2\2\u1873\u184a\3\2\2\2\u1873\u186c\3\2\2\2\u1873"+
		"\u186d\3\2\2\2\u1873\u186e\3\2\2\2\u1873\u1870\3\2\2\2\u1873\u1871\3\2"+
		"\2\2\u1873\u1872\3\2\2\2\u1874\u02b5\3\2\2\2\u1875\u1881\5\u02b8\u015d"+
		"\2\u1876\u1881\5\u0248\u0125\2\u1877\u1881\5\u024a\u0126\2\u1878\u1881"+
		"\5\u0256\u012c\2\u1879\u1881\5\u0258\u012d\2\u187a\u1881\5\u024e\u0128"+
		"\2\u187b\u1881\5\u026a\u0136\2\u187c\u1881\5\u025c\u012f\2\u187d\u1881"+
		"\5\u025a\u012e\2\u187e\u1881\5\u0260\u0131\2\u187f\u1881\5\u02ca\u0166"+
		"\2\u1880\u1875\3\2\2\2\u1880\u1876\3\2\2\2\u1880\u1877\3\2\2\2\u1880\u1878"+
		"\3\2\2\2\u1880\u1879\3\2\2\2\u1880\u187a\3\2\2\2\u1880\u187b\3\2\2\2\u1880"+
		"\u187c\3\2\2\2\u1880\u187d\3\2\2\2\u1880\u187e\3\2\2\2\u1880\u187f\3\2"+
		"\2\2\u1881\u02b7\3\2\2\2\u1882\u1883\7\u009b\2\2\u1883\u1884\5\u046a\u0236"+
		"\2\u1884\u02b9\3\2\2\2\u1885\u1886\7\u022c\2\2\u1886\u1887\7\31\2\2\u1887"+
		"\u02bb\3\2\2\2\u1888\u1889\7\u00cd\2\2\u1889\u188a\7\31\2\2\u188a\u02bd"+
		"\3\2\2\2\u188b\u188d\5\u02c8\u0165\2\u188c\u188e\5\u02bc\u015f\2\u188d"+
		"\u188c\3\2\2\2\u188d\u188e\3\2\2\2\u188e\u1891\3\2\2\2\u188f\u1891\5\u024e"+
		"\u0128\2\u1890\u188b\3\2\2\2\u1890\u188f\3\2\2\2\u1891\u02bf\3\2\2\2\u1892"+
		"\u18a6\5\u02bc\u015f\2\u1893\u189e\7\3\2\2\u1894\u1899\5\u02c2\u0162\2"+
		"\u1895\u1896\7\26\2\2\u1896\u1898\5\u02c2\u0162\2\u1897\u1895\3\2\2\2"+
		"\u1898\u189b\3\2\2\2\u1899\u1897\3\2\2\2\u1899\u189a\3\2\2\2\u189a\u189d"+
		"\3\2\2\2\u189b\u1899\3\2\2\2\u189c\u1894\3\2\2\2\u189d\u18a0\3\2\2\2\u189e"+
		"\u189c\3\2\2\2\u189e\u189f\3\2\2\2\u189f\u18a1\3\2\2\2\u18a0\u189e\3\2"+
		"\2\2\u18a1\u18a5\7\4\2\2\u18a2\u18a5\5\u018a\u00c6\2\u18a3\u18a5\5\u024e"+
		"\u0128\2\u18a4\u1893\3\2\2\2\u18a4\u18a2\3\2\2\2\u18a4\u18a3\3\2\2\2\u18a5"+
		"\u18a8\3\2\2\2\u18a6\u18a4\3\2\2\2\u18a6\u18a7\3\2\2\2\u18a7\u02c1\3\2"+
		"\2\2\u18a8\u18a6\3\2\2\2\u18a9\u18aa\t\t\2\2\u18aa\u18b3\7\31\2\2\u18ab"+
		"\u18b2\5\u02e4\u0173\2\u18ac\u18b2\5\u02e6\u0174\2\u18ad\u18b2\5\u02ea"+
		"\u0176\2\u18ae\u18b2\5\u0256\u012c\2\u18af\u18b2\5\u0188\u00c5\2\u18b0"+
		"\u18b2\5\u024e\u0128\2\u18b1\u18ab\3\2\2\2\u18b1\u18ac\3\2\2\2\u18b1\u18ad"+
		"\3\2\2\2\u18b1\u18ae\3\2\2\2\u18b1\u18af\3\2\2\2\u18b1\u18b0\3\2\2\2\u18b2"+
		"\u18b5\3\2\2\2\u18b3\u18b1\3\2\2\2\u18b3\u18b4\3\2\2\2\u18b4\u02c3\3\2"+
		"\2\2\u18b5\u18b3\3\2\2\2\u18b6\u18b7\7\u00a3\2\2\u18b7\u18b8\7\u021e\2"+
		"\2\u18b8\u18b9\7\31\2\2\u18b9\u02c5\3\2\2\2\u18ba\u18bb\7\u0225\2\2\u18bb"+
		"\u18bc\7\31\2\2\u18bc\u02c7\3\2\2\2\u18bd\u18be\7\u0224\2\2\u18be\u18bf"+
		"\7\31\2\2\u18bf\u02c9\3\2\2\2\u18c0\u18d0\7\u0135\2\2\u18c1\u18c2\7\u0121"+
		"\2\2\u18c2\u18cb\5\u048a\u0246\2\u18c3\u18c4\7\u00ea\2\2\u18c4\u18ca\7"+
		"\31\2\2\u18c5\u18c6\7\u0112\2\2\u18c6\u18ca\7\31\2\2\u18c7\u18c8\7y\2"+
		"\2\u18c8\u18ca\t\"\2\2\u18c9\u18c3\3\2\2\2\u18c9\u18c5\3\2\2\2\u18c9\u18c7"+
		"\3\2\2\2\u18ca\u18cd\3\2\2\2\u18cb\u18c9\3\2\2\2\u18cb\u18cc\3\2\2\2\u18cc"+
		"\u18d1\3\2\2\2\u18cd\u18cb\3\2\2\2\u18ce\u18cf\7\u013b\2\2\u18cf\u18d1"+
		"\5\u0470\u0239\2\u18d0\u18c1\3\2\2\2\u18d0\u18ce\3\2\2\2\u18d1\u02cb\3"+
		"\2\2\2\u18d2\u18d3\7\u0247\2\2\u18d3\u18d4\t;\2\2\u18d4\u18d5\7\u0135"+
		"\2\2\u18d5\u18d6\7\u0249\2\2\u18d6\u18d7\5\u02ce\u0168\2\u18d7\u18d8\7"+
		"\61\2\2\u18d8\u18d9\7\u01ce\2\2\u18d9\u18da\5\u031c\u018f\2\u18da\u02cd"+
		"\3\2\2\2\u18db\u18dc\7\30\2\2\u18dc\u02cf\3\2\2\2\u18dd\u18de\7\u022e"+
		"\2\2\u18de\u18e6\5\u0480\u0241\2\u18df\u18e0\7u\2\2\u18e0\u18e6\5\u0486"+
		"\u0244\2\u18e1\u18e2\7\u0237\2\2\u18e2\u18e6\5\u0484\u0243\2\u18e3\u18e4"+
		"\7\u0233\2\2\u18e4\u18e6\5\u0482\u0242\2\u18e5\u18dd\3\2\2\2\u18e5\u18df"+
		"\3\2\2\2\u18e5\u18e1\3\2\2\2\u18e5\u18e3\3\2\2\2\u18e6\u02d1\3\2\2\2\u18e7"+
		"\u18e8\7\u022e\2\2\u18e8\u18ee\5\u0480\u0241\2\u18e9\u18ea\7\u0237\2\2"+
		"\u18ea\u18ee\5\u0484\u0243\2\u18eb\u18ec\7\u0233\2\2\u18ec\u18ee\5\u0482"+
		"\u0242\2\u18ed\u18e7\3\2\2\2\u18ed\u18e9\3\2\2\2\u18ed\u18eb\3\2\2\2\u18ee"+
		"\u02d3\3\2\2\2\u18ef\u18f1\7\u022e\2\2\u18f0\u18f2\5\u0480\u0241\2\u18f1"+
		"\u18f0\3\2\2\2\u18f1\u18f2\3\2\2\2\u18f2\u18fc\3\2\2\2\u18f3\u18f5\7\u0237"+
		"\2\2\u18f4\u18f6\5\u0484\u0243\2\u18f5\u18f4\3\2\2\2\u18f5\u18f6\3\2\2"+
		"\2\u18f6\u18fc\3\2\2\2\u18f7\u18f9\7\u0233\2\2\u18f8\u18fa\5\u0482\u0242"+
		"\2\u18f9\u18f8\3\2\2\2\u18f9\u18fa\3\2\2\2\u18fa\u18fc\3\2\2\2\u18fb\u18ef"+
		"\3\2\2\2\u18fb\u18f3\3\2\2\2\u18fb\u18f7\3\2\2\2\u18fc\u02d5\3\2\2\2\u18fd"+
		"\u18fe\7\u01d9\2\2\u18fe\u18ff\7\3\2\2\u18ff\u1904\5\u0428\u0215\2\u1900"+
		"\u1901\7\26\2\2\u1901\u1903\5\u0428\u0215\2\u1902\u1900\3\2\2\2\u1903"+
		"\u1906\3\2\2\2\u1904\u1902\3\2\2\2\u1904\u1905\3\2\2\2\u1905\u1907\3\2"+
		"\2\2\u1906\u1904\3\2\2\2\u1907\u1908\7\4\2\2\u1908\u02d7\3\2\2\2\u1909"+
		"\u190a\7\'\2\2\u190a\u190b\7\u01a3\2\2\u190b\u190c\7\u0088\2\2\u190c\u1911"+
		"\5\u02da\u016e\2\u190d\u190e\7\26\2\2\u190e\u1910\5\u02da\u016e\2\u190f"+
		"\u190d\3\2\2\2\u1910\u1913\3\2\2\2\u1911\u190f\3\2\2\2\u1911\u1912\3\2"+
		"\2\2\u1912\u192b\3\2\2\2\u1913\u1911\3\2\2\2\u1914\u1915\7\u0350\2\2\u1915"+
		"\u1916\7\u01a3\2\2\u1916\u1917\7\u0088\2\2\u1917\u191c\5\u02dc\u016f\2"+
		"\u1918\u1919\7\26\2\2\u1919\u191b\5\u02dc\u016f\2\u191a\u1918\3\2\2\2"+
		"\u191b\u191e\3\2\2\2\u191c\u191a\3\2\2\2\u191c\u191d\3\2\2\2\u191d\u192b"+
		"\3\2\2\2\u191e\u191c\3\2\2\2\u191f\u1920\7n\2\2\u1920\u1921\7\u01a3\2"+
		"\2\u1921\u1922\7\u0088\2\2\u1922\u1927\5\u02de\u0170\2\u1923\u1924\7\26"+
		"\2\2\u1924\u1926\5\u02de\u0170\2\u1925\u1923\3\2\2\2\u1926\u1929\3\2\2"+
		"\2\u1927\u1925\3\2\2\2\u1927\u1928\3\2\2\2\u1928\u192b\3\2\2\2\u1929\u1927"+
		"\3\2\2\2\u192a\u1909\3\2\2\2\u192a\u1914\3\2\2\2\u192a\u191f\3\2\2\2\u192b"+
		"\u02d9\3\2\2\2\u192c\u192e\5\u0476\u023c\2\u192d\u192f\5\u02e0\u0171\2"+
		"\u192e\u192d\3\2\2\2\u192e\u192f\3\2\2\2\u192f\u193b\3\2\2\2\u1930\u1931"+
		"\7\u0082\2\2\u1931\u1932\7\u0113\2\2\u1932\u1933\7\u0235\2\2\u1933\u1935"+
		"\5\u0478\u023d\2\u1934\u1936\5\u02e0\u0171\2\u1935\u1934\3\2\2\2\u1935"+
		"\u1936\3\2\2\2\u1936\u193b\3\2\2\2\u1937\u1938\7\u00ef\2\2\u1938\u1939"+
		"\t\5\2\2\u1939\u193b\7\u0230\2\2\u193a\u192c\3\2\2\2\u193a\u1930\3\2\2"+
		"\2\u193a\u1937\3\2\2\2\u193b\u02db\3\2\2\2\u193c\u193d\5\u02da\u016e\2"+
		"\u193d\u02dd\3\2\2\2\u193e\u1945\5\u0476\u023c\2\u193f\u1940\7\u0082\2"+
		"\2\u1940\u1941\7\u0113\2\2\u1941\u1942\7\u0235\2\2\u1942\u1945\5\u0478"+
		"\u023d\2\u1943\u1945\7\u00ef\2\2\u1944\u193e\3\2\2\2\u1944\u193f\3\2\2"+
		"\2\u1944\u1943\3\2\2\2\u1945\u02df\3\2\2\2\u1946\u1947\7\u0100\2\2\u1947"+
		"\u1949\5\u047a\u023e\2\u1948\u1946\3\2\2\2\u1948\u1949\3\2\2\2\u1949\u194d"+
		"\3\2\2\2\u194a\u194b\7\u0113\2\2\u194b\u194c\7\u00ad\2\2\u194c\u194e\5"+
		"\u047c\u023f\2\u194d\u194a\3\2\2\2\u194d\u194e\3\2\2\2\u194e\u194f\3\2"+
		"\2\2\u194f\u1950\t\5\2\2\u1950\u1951\7\u0230\2\2\u1951\u02e1\3\2\2\2\u1952"+
		"\u1954\7,\2\2\u1953\u1952\3\2\2\2\u1953\u1954\3\2\2\2\u1954\u1955\3\2"+
		"\2\2\u1955\u1958\7\u00df\2\2\u1956\u1958\7\u00de\2\2\u1957\u1953\3\2\2"+
		"\2\u1957\u1956\3\2\2\2\u1958\u1959\3\2\2\2\u1959\u1960\7\31\2\2\u195a"+
		"\u1961\5\u02e4\u0173\2\u195b\u1961\5\u02e6\u0174\2\u195c\u1961\5\u02ea"+
		"\u0176\2\u195d\u1961\5\u0256\u012c\2\u195e\u1961\5\u024e\u0128\2\u195f"+
		"\u1961\5\u0188\u00c5\2\u1960\u195a\3\2\2\2\u1960\u195b\3\2\2\2\u1960\u195c"+
		"\3\2\2\2\u1960\u195d\3\2\2\2\u1960\u195e\3\2\2\2\u1960\u195f\3\2\2\2\u1961"+
		"\u1962\3\2\2\2\u1962\u1960\3\2\2\2\u1962\u1963\3\2\2\2\u1963\u02e3\3\2"+
		"\2\2\u1964\u1966\5\u0266\u0134\2\u1965\u1964\3\2\2\2\u1966\u1967\3\2\2"+
		"\2\u1967\u1965\3\2\2\2\u1967\u1968\3\2\2\2\u1968\u02e5\3\2\2\2\u1969\u196a"+
		"\7\u01d7\2\2\u196a\u1977\7\31\2\2\u196b\u196c\7\u01dc\2\2\u196c\u1977"+
		"\7\31\2\2\u196d\u1974\7\u01dc\2\2\u196e\u1970\7\31\2\2\u196f\u196e\3\2"+
		"\2\2\u196f\u1970\3\2\2\2\u1970\u1971\3\2\2\2\u1971\u1972\7\u0088\2\2\u1972"+
		"\u1973\7\u0134\2\2\u1973\u1975\7\31\2\2\u1974\u196f\3\2\2\2\u1974\u1975"+
		"\3\2\2\2\u1975\u1977\3\2\2\2\u1976\u1969\3\2\2\2\u1976\u196b\3\2\2\2\u1976"+
		"\u196d\3\2\2\2\u1977\u1978\3\2\2\2\u1978\u1976\3\2\2\2\u1978\u1979\3\2"+
		"\2\2\u1979\u02e7\3\2\2\2\u197a\u197b\7\u0227\2\2\u197b\u197c\7\u0129\2"+
		"\2\u197c\u197d\5\u043a\u021e\2\u197d\u197e\7\u012c\2\2\u197e\u1982\7\u012a"+
		"\2\2\u197f\u1980\5\u046a\u0236\2\u1980\u1981\7\23\2\2\u1981\u1983\3\2"+
		"\2\2\u1982\u197f\3\2\2\2\u1982\u1983\3\2\2\2\u1983\u1984\3\2\2\2\u1984"+
		"\u1985\5\u046c\u0237\2\u1985\u02e9\3\2\2\2\u1986\u1987\7\u01d8\2\2\u1987"+
		"\u1988\t\64\2\2\u1988\u02eb\3\2\2\2\u1989\u198b\7\u00ef\2\2\u198a\u1989"+
		"\3\2\2\2\u198a\u198b\3\2\2\2\u198b\u198c\3\2\2\2\u198c\u198d\7\u023c\2"+
		"\2\u198d\u198e\5\u0456\u022c\2\u198e\u198f\7\u0088\2\2\u198f\u1990\t\32"+
		"\2\2\u1990\u02ed\3\2\2\2\u1991\u1992\5\u043a\u021e\2\u1992\u1993\7\3\2"+
		"\2\u1993\u1994\5\u0428\u0215\2\u1994\u1995\7\u00a6\2\2\u1995\u199d\7\30"+
		"\2\2\u1996\u1997\7\26\2\2\u1997\u1998\5\u0428\u0215\2\u1998\u1999\7\u00a6"+
		"\2\2\u1999\u199a\7\30\2\2\u199a\u199c\3\2\2\2\u199b\u1996\3\2\2\2\u199c"+
		"\u199f\3\2\2\2\u199d\u199b\3\2\2\2\u199d\u199e\3\2\2\2\u199e\u19a0\3\2"+
		"\2\2\u199f\u199d\3\2\2\2\u19a0\u19a1\7\4\2\2\u19a1\u02ef\3\2\2\2\u19a2"+
		"\u19a3\7\u008c\2\2\u19a3\u19b0\5\u0496\u024c\2\u19a4\u19ad\7\3\2\2\u19a5"+
		"\u19aa\5\u02f2\u017a\2\u19a6\u19a7\7\26\2\2\u19a7\u19a9\5\u02f2\u017a"+
		"\2\u19a8\u19a6\3\2\2\2\u19a9\u19ac\3\2\2\2\u19aa\u19a8\3\2\2\2\u19aa\u19ab"+
		"\3\2\2\2\u19ab\u19ae\3\2\2\2\u19ac\u19aa\3\2\2\2\u19ad\u19a5\3\2\2\2\u19ad"+
		"\u19ae\3\2\2\2\u19ae\u19af\3\2\2\2\u19af\u19b1\7\4\2\2\u19b0\u19a4\3\2"+
		"\2\2\u19b0\u19b1\3\2\2\2\u19b1\u19b6\3\2\2\2\u19b2\u19b3\7\u011c\2\2\u19b3"+
		"\u19b4\7\u008c\2\2\u19b4\u19b6\5\u0498\u024d\2\u19b5\u19a2\3\2\2\2\u19b5"+
		"\u19b2\3\2\2\2\u19b6\u02f1\3\2\2\2\u19b7\u19ba\5\u0314\u018b\2\u19b8\u19b9"+
		"\7\61\2\2\u19b9\u19bb\7\u00b7\2\2\u19ba\u19b8\3\2\2\2\u19ba\u19bb\3\2"+
		"\2\2\u19bb\u02f3\3\2\2\2\u19bc\u19c6\5\u03d0\u01e9\2\u19bd\u19be\7\u00ca"+
		"\2\2\u19be\u19c6\7\u00cb\2\2\u19bf\u19c6\5\u02f8\u017d\2\u19c0\u19c6\5"+
		"\u02fa\u017e\2\u19c1\u19c6\5\u0190\u00c9\2\u19c2\u19c6\5\u018e\u00c8\2"+
		"\u19c3\u19c6\5\u018c\u00c7\2\u19c4\u19c6\5\u0192\u00ca\2\u19c5\u19bc\3"+
		"\2\2\2\u19c5\u19bd\3\2\2\2\u19c5\u19bf\3\2\2\2\u19c5\u19c0\3\2\2\2\u19c5"+
		"\u19c1\3\2\2\2\u19c5\u19c2\3\2\2\2\u19c5\u19c3\3\2\2\2\u19c5\u19c4\3\2"+
		"\2\2\u19c6\u02f5\3\2\2\2\u19c7\u19d1\5\u03d2\u01ea\2\u19c8\u19c9\7\u00ca"+
		"\2\2\u19c9\u19d1\7\u00cb\2\2\u19ca";
	private static final String _serializedATNSegment3 =
		"\u19d1\5\u02f8\u017d\2\u19cb\u19d1\5\u02fa\u017e\2\u19cc\u19d1\5\u0190"+
		"\u00c9\2\u19cd\u19d1\5\u018e\u00c8\2\u19ce\u19d1\5\u018c\u00c7\2\u19cf"+
		"\u19d1\5\u0192\u00ca\2\u19d0\u19c7\3\2\2\2\u19d0\u19c8\3\2\2\2\u19d0\u19ca"+
		"\3\2\2\2\u19d0\u19cb\3\2\2\2\u19d0\u19cc\3\2\2\2\u19d0\u19cd\3\2\2\2\u19d0"+
		"\u19ce\3\2\2\2\u19d0\u19cf\3\2\2\2\u19d1\u02f7\3\2\2\2\u19d2\u19d5\5\u0330"+
		"\u0199\2\u19d3\u19d5\5\u0332\u019a\2\u19d4\u19d2\3\2\2\2\u19d4\u19d3\3"+
		"\2\2\2\u19d5\u02f9\3\2\2\2\u19d6\u19da\7\u008d\2\2\u19d7\u19db\7\u01f8"+
		"\2\2\u19d8\u19d9\7>\2\2\u19d9\u19db\7d\2\2\u19da\u19d7\3\2\2\2\u19da\u19d8"+
		"\3\2\2\2\u19da\u19db\3\2\2\2\u19db\u19de\3\2\2\2\u19dc\u19df\5\u02fe\u0180"+
		"\2\u19dd\u19df\5\u0302\u0182\2\u19de\u19dc\3\2\2\2\u19de\u19dd\3\2\2\2"+
		"\u19df\u19ea\3\2\2\2\u19e0\u19e2\7\u008d\2\2\u19e1\u19e3\7\u01f8\2\2\u19e2"+
		"\u19e1\3\2\2\2\u19e2\u19e3\3\2\2\2\u19e3\u19e7\3\2\2\2\u19e4\u19e8\5\u0304"+
		"\u0183\2\u19e5\u19e8\5\u0306\u0184\2\u19e6\u19e8\5\u0308\u0185\2\u19e7"+
		"\u19e4\3\2\2\2\u19e7\u19e5\3\2\2\2\u19e7\u19e6\3\2\2\2\u19e8\u19ea\3\2"+
		"\2\2\u19e9\u19d6\3\2\2\2\u19e9\u19e0\3\2\2\2\u19ea\u02fb\3\2\2\2\u19eb"+
		"\u19ef\7\u008d\2\2\u19ec\u19f0\7\u01f8\2\2\u19ed\u19ee\7>\2\2\u19ee\u19f0"+
		"\7d\2\2\u19ef\u19ec\3\2\2\2\u19ef\u19ed\3\2\2\2\u19f0\u19f2\3\2\2\2\u19f1"+
		"\u19f3\5\u02fe\u0180\2\u19f2\u19f1\3\2\2\2\u19f2\u19f3\3\2\2\2\u19f3\u02fd"+
		"\3\2\2\2\u19f4\u19f5\7\61\2\2\u19f5\u1a03\7\u0208\2\2\u19f6\u19f7\7\3"+
		"\2\2\u19f7\u19fe\5\u0300\u0181\2\u19f8\u19fa\7\26\2\2\u19f9\u19f8\3\2"+
		"\2\2\u19f9\u19fa\3\2\2\2\u19fa\u19fb\3\2\2\2\u19fb\u19fd\5\u0300\u0181"+
		"\2\u19fc\u19f9\3\2\2\2\u19fd\u1a00\3\2\2\2\u19fe\u19fc\3\2\2\2\u19fe\u19ff"+
		"\3\2\2\2\u19ff\u1a01\3\2\2\2\u1a00\u19fe\3\2\2\2\u1a01\u1a02\7\4\2\2\u1a02"+
		"\u1a04\3\2\2\2\u1a03\u19f6\3\2\2\2\u1a03\u1a04\3\2\2\2\u1a04\u02ff\3\2"+
		"\2\2\u1a05\u1a0d\5\u0290\u0149\2\u1a06\u1a0d\5\u0294\u014b\2\u1a07\u1a0d"+
		"\5\u0296\u014c\2\u1a08\u1a0d\5\u0298\u014d\2\u1a09\u1a0d\5\u029a\u014e"+
		"\2\u1a0a\u1a0d\5\u029c\u014f\2\u1a0b\u1a0d\5\u029e\u0150\2\u1a0c\u1a05"+
		"\3\2\2\2\u1a0c\u1a06\3\2\2\2\u1a0c\u1a07\3\2\2\2\u1a0c\u1a08\3\2\2\2\u1a0c"+
		"\u1a09\3\2\2\2\u1a0c\u1a0a\3\2\2\2\u1a0c\u1a0b\3\2\2\2\u1a0d\u0301\3\2"+
		"\2\2\u1a0e\u1a0f\7\u0088\2\2\u1a0f\u1a10\7\u0201\2\2\u1a10\u1a11\7\u010a"+
		"\2\2\u1a11\u1a12\7\u00d2\2\2\u1a12\u1a13\7\u0134\2\2\u1a13\u1a14\7\61"+
		"\2\2\u1a14\u1a15\7\u010a\2\2\u1a15\u1a16\7\u0151\2\2\u1a16\u1a17\7\u036c"+
		"\2\2\u1a17\u0303\3\2\2\2\u1a18\u1a19\7\61\2\2\u1a19\u1a1a\7\u0217\2\2"+
		"\u1a1a\u1a1b\7\u0215\2\2\u1a1b\u1a1c\7\u0207\2\2\u1a1c\u0305\3\2\2\2\u1a1d"+
		"\u1a1e\7\61\2\2\u1a1e\u1a1f\7\u010a\2\2\u1a1f\u1a20\t<\2\2\u1a20\u0307"+
		"\3\2\2\2\u1a21\u1a22\7\61\2\2\u1a22\u1a23\7\3\2\2\u1a23\u1a24\5\u030a"+
		"\u0186\2\u1a24\u1a25\7\4\2\2\u1a25\u0309\3\2\2\2\u1a26\u1a27\7^\2\2\u1a27"+
		"\u1a28\7\u0151\2\2\u1a28\u1a2c\7\u020c\2\2\u1a29\u1a2c\5\u03c0\u01e1\2"+
		"\u1a2a\u1a2c\5\u030c\u0187\2\u1a2b\u1a26\3\2\2\2\u1a2b\u1a29\3\2\2\2\u1a2b"+
		"\u1a2a\3\2\2\2\u1a2c\u030b\3\2\2\2\u1a2d\u1a2e\7\u0216\2\2\u1a2e\u1a2f"+
		"\7\23\2\2\u1a2f\u1a37\7\u020f\2\2\u1a30\u1a31\7\u0216\2\2\u1a31\u1a32"+
		"\7\23\2\2\u1a32\u1a37\7\u0210\2\2\u1a33\u1a34\7\u0216\2\2\u1a34\u1a35"+
		"\7\23\2\2\u1a35\u1a37\7\u0211\2\2\u1a36\u1a2d\3\2\2\2\u1a36\u1a30\3\2"+
		"\2\2\u1a36\u1a33\3\2\2\2\u1a37\u030d\3\2\2\2\u1a38\u1a3a\5\u0428\u0215"+
		"\2\u1a39\u1a3b\5\u0310\u0189\2\u1a3a\u1a39\3\2\2\2\u1a3b\u1a3c\3\2\2\2"+
		"\u1a3c\u1a3a\3\2\2\2\u1a3c\u1a3d\3\2\2\2\u1a3d\u030f\3\2\2\2\u1a3e\u1a3f"+
		"\7\u0117\2\2\u1a3f\u1a40\7^\2\2\u1a40\u1a41\7\u012f\2\2\u1a41\u1a45\5"+
		"\u0312\u018a\2\u1a42\u1a43\7\u020b\2\2\u1a43\u1a44\7\u0323\2\2\u1a44\u1a46"+
		"\7\31\2\2\u1a45\u1a42\3\2\2\2\u1a45\u1a46\3\2\2\2\u1a46\u1a64\3\2\2\2"+
		"\u1a47\u1a48\7\u0117\2\2\u1a48\u1a64\5\u03ce\u01e8\2\u1a49\u1a4a\7\u0117"+
		"\2\2\u1a4a\u1a4b\7\u020b\2\2\u1a4b\u1a4c\7\u0323\2\2\u1a4c\u1a64\7\31"+
		"\2\2\u1a4d\u1a4e\7\u0117\2\2\u1a4e\u1a52\7\u008d\2\2\u1a4f\u1a53\7\u01f8"+
		"\2\2\u1a50\u1a51\7>\2\2\u1a51\u1a53\7d\2\2\u1a52\u1a4f\3\2\2\2\u1a52\u1a50"+
		"\3\2\2\2\u1a53\u1a55\3\2\2\2\u1a54\u1a56\5\u032a\u0196\2\u1a55\u1a54\3"+
		"\2\2\2\u1a55\u1a56\3\2\2\2\u1a56\u1a64\3\2\2\2\u1a57\u1a64\5\u032a\u0196"+
		"\2\u1a58\u1a59\7\u0117\2\2\u1a59\u1a5b\7\u008d\2\2\u1a5a\u1a5c\7\u01f8"+
		"\2\2\u1a5b\u1a5a\3\2\2\2\u1a5b\u1a5c\3\2\2\2\u1a5c\u1a5f\3\2\2\2\u1a5d"+
		"\u1a60\5\u0306\u0184\2\u1a5e\u1a60\5\u0304\u0183\2\u1a5f\u1a5d\3\2\2\2"+
		"\u1a5f\u1a5e\3\2\2\2\u1a60\u1a64\3\2\2\2\u1a61\u1a62\7n\2\2\u1a62\u1a64"+
		"\7d\2\2\u1a63\u1a3e\3\2\2\2\u1a63\u1a47\3\2\2\2\u1a63\u1a49\3\2\2\2\u1a63"+
		"\u1a4d\3\2\2\2\u1a63\u1a57\3\2\2\2\u1a63\u1a58\3\2\2\2\u1a63\u1a61\3\2"+
		"\2\2\u1a64\u0311\3\2\2\2\u1a65\u1a66\5\u0314\u018b\2\u1a66\u0313\3\2\2"+
		"\2\u1a67\u1a6a\5\u0316\u018c\2\u1a68\u1a6a\5\u0420\u0211\2\u1a69\u1a67"+
		"\3\2\2\2\u1a69\u1a68\3\2\2\2\u1a6a\u0315\3\2\2\2\u1a6b\u1adf\7\u035b\2"+
		"\2\u1a6c\u1adf\7\u031e\2\2\u1a6d\u1adf\7\u031d\2\2\u1a6e\u1adf\7\u02d1"+
		"\2\2\u1a6f\u1a73\t\65\2\2\u1a70\u1a74\5\u0418\u020d\2\u1a71\u1a72\7\3"+
		"\2\2\u1a72\u1a74\7\4\2\2\u1a73\u1a70\3\2\2\2\u1a73\u1a71\3\2\2\2\u1a74"+
		"\u1adf\3\2\2\2\u1a75\u1a79\7\u02f0\2\2\u1a76\u1a7a\5\u0418\u020d\2\u1a77"+
		"\u1a78\7\3\2\2\u1a78\u1a7a\7\4\2\2\u1a79\u1a76\3\2\2\2\u1a79\u1a77\3\2"+
		"\2\2\u1a7a\u1adf\3\2\2\2\u1a7b\u1a7f\7\u030c\2\2\u1a7c\u1a80\5\u0418\u020d"+
		"\2\u1a7d\u1a7e\7\3\2\2\u1a7e\u1a80\7\4\2\2\u1a7f\u1a7c\3\2\2\2\u1a7f\u1a7d"+
		"\3\2\2\2\u1a80\u1adf\3\2\2\2\u1a81\u1adf\7\u034a\2\2\u1a82\u1a84\7m\2"+
		"\2\u1a83\u1a85\7\u00e6\2\2\u1a84\u1a83\3\2\2\2\u1a84\u1a85\3\2\2\2\u1a85"+
		"\u1adf\3\2\2\2\u1a86\u1a88\t\66\2\2\u1a87\u1a89\7\u01a9\2\2\u1a88\u1a87"+
		"\3\2\2\2\u1a88\u1a89\3\2\2\2\u1a89\u1a8c\3\2\2\2\u1a8a\u1a8c\7\u0383\2"+
		"\2\u1a8b\u1a86\3\2\2\2\u1a8b\u1a8a\3\2\2\2\u1a8c\u1a90\3\2\2\2\u1a8d\u1a91"+
		"\5\u041a\u020e\2\u1a8e\u1a8f\7\3\2\2\u1a8f\u1a91\7\4\2\2\u1a90\u1a8d\3"+
		"\2\2\2\u1a90\u1a8e\3\2\2\2\u1a90\u1a91\3\2\2\2\u1a91\u1a94\3\2\2\2\u1a92"+
		"\u1a95\5\u041e\u0210\2\u1a93\u1a95\5\u0180\u00c1\2\u1a94\u1a92\3\2\2\2"+
		"\u1a94\u1a93\3\2\2\2\u1a94\u1a95\3\2\2\2\u1a95\u1adf\3\2\2\2\u1a96\u1a97"+
		"\t\66\2\2\u1a97\u1a98\7\u016b\2\2\u1a98\u1a9b\7\u0178\2\2\u1a99\u1a9b"+
		"\7\u02e2\2\2\u1a9a\u1a96\3\2\2\2\u1a9a\u1a99\3\2\2\2\u1a9b\u1a9f\3\2\2"+
		"\2\u1a9c\u1aa0\5\u041a\u020e\2\u1a9d\u1a9e\7\3\2\2\u1a9e\u1aa0\7\4\2\2"+
		"\u1a9f\u1a9c\3\2\2\2\u1a9f\u1a9d\3\2\2\2\u1a9f\u1aa0\3\2\2\2\u1aa0\u1aa3"+
		"\3\2\2\2\u1aa1\u1aa4\5\u041e\u0210\2\u1aa2\u1aa4\5\u0180\u00c1\2\u1aa3"+
		"\u1aa1\3\2\2\2\u1aa3\u1aa2\3\2\2\2\u1aa3\u1aa4\3\2\2\2\u1aa4\u1adf\3\2"+
		"\2\2\u1aa5\u1aa9\t\67\2\2\u1aa6\u1aaa\5\u041a\u020e\2\u1aa7\u1aa8\7\3"+
		"\2\2\u1aa8\u1aaa\7\4\2\2\u1aa9\u1aa6\3\2\2\2\u1aa9\u1aa7\3\2\2\2\u1aa9"+
		"\u1aaa\3\2\2\2\u1aaa\u1aac\3\2\2\2\u1aab\u1aad\5\u0180\u00c1\2\u1aac\u1aab"+
		"\3\2\2\2\u1aac\u1aad\3\2\2\2\u1aad\u1adf\3\2\2\2\u1aae\u1ab2\7\u02d2\2"+
		"\2\u1aaf\u1ab3\5\u0418\u020d\2\u1ab0\u1ab1\7\3\2\2\u1ab1\u1ab3\7\4\2\2"+
		"\u1ab2\u1aaf\3\2\2\2\u1ab2\u1ab0\3\2\2\2\u1ab2\u1ab3\3\2\2\2\u1ab3\u1adf"+
		"\3\2\2\2\u1ab4\u1ab6\7\u02d2\2\2\u1ab5\u1ab7\7\u01a9\2\2\u1ab6\u1ab5\3"+
		"\2\2\2\u1ab6\u1ab7\3\2\2\2\u1ab7\u1aba\3\2\2\2\u1ab8\u1aba\7\u0382\2\2"+
		"\u1ab9\u1ab4\3\2\2\2\u1ab9\u1ab8\3\2\2\2\u1aba\u1abe\3\2\2\2\u1abb\u1abf"+
		"\5\u0418\u020d\2\u1abc\u1abd\7\3\2\2\u1abd\u1abf\7\4\2\2\u1abe\u1abb\3"+
		"\2\2\2\u1abe\u1abc\3\2\2\2\u1abe\u1abf\3\2\2\2\u1abf\u1adf\3\2\2\2\u1ac0"+
		"\u1ac1\7\u02d2\2\2\u1ac1\u1ac2\7\u016b\2\2\u1ac2\u1ac5\7\u0178\2\2\u1ac3"+
		"\u1ac5\7\u02d8\2\2\u1ac4\u1ac0\3\2\2\2\u1ac4\u1ac3\3\2\2\2\u1ac5\u1ac9"+
		"\3\2\2\2\u1ac6\u1ac7\7\3\2\2\u1ac7\u1ac8\t=\2\2\u1ac8\u1aca\7\4\2\2\u1ac9"+
		"\u1ac6\3\2\2\2\u1ac9\u1aca\3\2\2\2\u1aca\u1adf\3\2\2\2\u1acb\u1adf\7\u02e8"+
		"\2\2\u1acc\u1adf\7\u036b\2\2\u1acd\u1acf\7\u036c\2\2\u1ace\u1ad0\5\u0418"+
		"\u020d\2\u1acf\u1ace\3\2\2\2\u1acf\u1ad0\3\2\2\2\u1ad0\u1ad4\3\2\2\2\u1ad1"+
		"\u1ad2\t\5\2\2\u1ad2\u1ad3\7\u036b\2\2\u1ad3\u1ad5\7\u014b\2\2\u1ad4\u1ad1"+
		"\3\2\2\2\u1ad4\u1ad5\3\2\2\2\u1ad5\u1adf\3\2\2\2\u1ad6\u1adf\7\u0354\2"+
		"\2\u1ad7\u1adc\7\u01ab\2\2\u1ad8\u1ad9\7\3\2\2\u1ad9\u1ada\5\u031e\u0190"+
		"\2\u1ada\u1adb\7\4\2\2\u1adb\u1add\3\2\2\2\u1adc\u1ad8\3\2\2\2\u1adc\u1add"+
		"\3\2\2\2\u1add\u1adf\3\2\2\2\u1ade\u1a6b\3\2\2\2\u1ade\u1a6c\3\2\2\2\u1ade"+
		"\u1a6d\3\2\2\2\u1ade\u1a6e\3\2\2\2\u1ade\u1a6f\3\2\2\2\u1ade\u1a75\3\2"+
		"\2\2\u1ade\u1a7b\3\2\2\2\u1ade\u1a81\3\2\2\2\u1ade\u1a82\3\2\2\2\u1ade"+
		"\u1a8b\3\2\2\2\u1ade\u1a9a\3\2\2\2\u1ade\u1aa5\3\2\2\2\u1ade\u1aae\3\2"+
		"\2\2\u1ade\u1ab9\3\2\2\2\u1ade\u1ac4\3\2\2\2\u1ade\u1acb\3\2\2\2\u1ade"+
		"\u1acc\3\2\2\2\u1ade\u1acd\3\2\2\2\u1ade\u1ad6\3\2\2\2\u1ade\u1ad7\3\2"+
		"\2\2\u1adf\u0317\3\2\2\2\u1ae0\u1ae3\5\u031a\u018e\2\u1ae1\u1ae3\5\u0420"+
		"\u0211\2\u1ae2\u1ae0\3\2\2\2\u1ae2\u1ae1\3\2\2\2\u1ae3\u0319\3\2\2\2\u1ae4"+
		"\u1aed\7\u035b\2\2\u1ae5\u1aed\7\u031e\2\2\u1ae6\u1aed\7\u031d\2\2\u1ae7"+
		"\u1aed\7\u02d1\2\2\u1ae8\u1aea\t\65\2\2\u1ae9\u1aeb\5\u0418\u020d\2\u1aea"+
		"\u1ae9\3\2\2\2\u1aea\u1aeb\3\2\2\2\u1aeb\u1aed\3\2\2\2\u1aec\u1ae4\3\2"+
		"\2\2\u1aec\u1ae5\3\2\2\2\u1aec\u1ae6\3\2\2\2\u1aec\u1ae7\3\2\2\2\u1aec"+
		"\u1ae8\3\2\2\2\u1aed\u031b\3\2\2\2\u1aee\u1aef\7\u0383\2\2\u1aef\u1af0"+
		"\7\3\2\2\u1af0\u1af1\7\31\2\2\u1af1\u1b00\7\4\2\2\u1af2\u1af6\7\u02f0"+
		"\2\2\u1af3\u1af4\7\3\2\2\u1af4\u1af5\7\31\2\2\u1af5\u1af7\7\4\2\2\u1af6"+
		"\u1af3\3\2\2\2\u1af6\u1af7\3\2\2\2\u1af7\u1b00\3\2\2\2\u1af8\u1b00\7\u02e8"+
		"\2\2\u1af9\u1afd\7\u036c\2\2\u1afa\u1afb\7\3\2\2\u1afb\u1afc\7\31\2\2"+
		"\u1afc\u1afe\7\4\2\2\u1afd\u1afa\3\2\2\2\u1afd\u1afe\3\2\2\2\u1afe\u1b00"+
		"\3\2\2\2\u1aff\u1aee\3\2\2\2\u1aff\u1af2\3\2\2\2\u1aff\u1af8\3\2\2\2\u1aff"+
		"\u1af9\3\2\2\2\u1b00\u031d\3\2\2\2\u1b01\u1b02\7\u0218\2\2\u1b02\u1b05"+
		"\5\u0320\u0191\2\u1b03\u1b04\7\u0219\2\2\u1b04\u1b06\5\u0322\u0192\2\u1b05"+
		"\u1b03\3\2\2\2\u1b05\u1b06\3\2\2\2\u1b06\u1b0f\3\2\2\2\u1b07\u1b08\7\26"+
		"\2\2\u1b08\u1b0b\5\u0320\u0191\2\u1b09\u1b0a\7\u0219\2\2\u1b0a\u1b0c\5"+
		"\u0322\u0192\2\u1b0b\u1b09\3\2\2\2\u1b0b\u1b0c\3\2\2\2\u1b0c\u1b0e\3\2"+
		"\2\2\u1b0d\u1b07\3\2\2\2\u1b0e\u1b11\3\2\2\2\u1b0f\u1b0d\3\2\2\2\u1b0f"+
		"\u1b10\3\2\2\2\u1b10\u031f\3\2\2\2\u1b11\u1b0f\3\2\2\2\u1b12\u1b13\7\u0207"+
		"\2\2\u1b13\u1b1f\5\u0324\u0193\2\u1b14\u1b15\7\u021a\2\2\u1b15\u1b19\5"+
		"\u0326\u0194\2\u1b16\u1b17\7\u00c8\2\2\u1b17\u1b19\7\u021b\2\2\u1b18\u1b14"+
		"\3\2\2\2\u1b18\u1b16\3\2\2\2\u1b19\u1b1c\3\2\2\2\u1b1a\u1b1b\7\u021c\2"+
		"\2\u1b1b\u1b1d\5\u0328\u0195\2\u1b1c\u1b1a\3\2\2\2\u1b1c\u1b1d\3\2\2\2"+
		"\u1b1d\u1b1f\3\2\2\2\u1b1e\u1b12\3\2\2\2\u1b1e\u1b18\3\2\2\2\u1b1f\u0321"+
		"\3\2\2\2\u1b20\u1b21\5\u0506\u0284\2\u1b21\u0323\3\2\2\2\u1b22\u1b23\7"+
		"\u021d\2\2\u1b23\u1b24\7\23\2\2\u1b24\u1b25\7\u03cc\2\2\u1b25\u0325\3"+
		"\2\2\2\u1b26\u1b27\7\30\2\2\u1b27\u0327\3\2\2\2\u1b28\u1b29\7\30\2\2\u1b29"+
		"\u0329\3\2\2\2\u1b2a\u1b2d\7\u01f1\2\2\u1b2b\u1b2c\7\u0144\2\2\u1b2c\u1b2e"+
		"\7\31\2\2\u1b2d\u1b2b\3\2\2\2\u1b2d\u1b2e\3\2\2\2\u1b2e\u1b3c\3\2\2\2"+
		"\u1b2f\u1b30\7\u0117\2\2\u1b30\u1b3c\5\u0294\u014b\2\u1b31\u1b32\7\u0117"+
		"\2\2\u1b32\u1b3c\5\u0296\u014c\2\u1b33\u1b34\7\u0117\2\2\u1b34\u1b3c\5"+
		"\u0298\u014d\2\u1b35\u1b36\7\u0117\2\2\u1b36\u1b3c\5\u029a\u014e\2\u1b37"+
		"\u1b38\7\u0117\2\2\u1b38\u1b3c\5\u029c\u014f\2\u1b39\u1b3a\7\u0117\2\2"+
		"\u1b3a\u1b3c\5\u029e\u0150\2\u1b3b\u1b2a\3\2\2\2\u1b3b\u1b2f\3\2\2\2\u1b3b"+
		"\u1b31\3\2\2\2\u1b3b\u1b33\3\2\2\2\u1b3b\u1b35\3\2\2\2\u1b3b\u1b37\3\2"+
		"\2\2\u1b3b\u1b39\3\2\2\2\u1b3c\u032b\3\2\2\2\u1b3d\u1b3e\7T\2\2\u1b3e"+
		"\u1b40\5\u0458\u022d\2\u1b3f\u1b3d\3\2\2\2\u1b3f\u1b40\3\2\2\2\u1b40\u1b44"+
		"\3\2\2\2\u1b41\u1b42\7\u0212\2\2\u1b42\u1b45\7\u00ac\2\2\u1b43\u1b45\7"+
		"\u0132\2\2\u1b44\u1b41\3\2\2\2\u1b44\u1b43\3\2\2\2\u1b45\u1b46\3\2\2\2"+
		"\u1b46\u1b47\7\3\2\2\u1b47\u1b4c\5\u0428\u0215\2\u1b48\u1b49\7\26\2\2"+
		"\u1b49\u1b4b\5\u0428\u0215\2\u1b4a\u1b48\3\2\2\2\u1b4b\u1b4e\3\2\2\2\u1b4c"+
		"\u1b4a\3\2\2\2\u1b4c\u1b4d\3\2\2\2\u1b4d\u1b53\3\2\2\2\u1b4e\u1b4c\3\2"+
		"\2\2\u1b4f\u1b50\7\26\2\2\u1b50\u1b51\7\u01b1\2\2\u1b51\u1b52\7\u01aa"+
		"\2\2\u1b52\u1b54\7\u020e\2\2\u1b53\u1b4f\3\2\2\2\u1b53\u1b54\3\2\2\2\u1b54"+
		"\u1b55\3\2\2\2\u1b55\u1b56\7\4\2\2\u1b56\u032d\3\2\2\2\u1b57\u1b58\7T"+
		"\2\2\u1b58\u1b59\5\u0458\u022d\2\u1b59\u1b5a\7\u0204\2\2\u1b5a\u1b5b\7"+
		"\u00ac\2\2\u1b5b\u1b62\3\2\2\2\u1b5c\u1b5d\7\u0204\2\2\u1b5d\u1b5f\7\u00ac"+
		"\2\2\u1b5e\u1b60\5\u0458\u022d\2\u1b5f\u1b5e\3\2\2\2\u1b5f\u1b60\3\2\2"+
		"\2\u1b60\u1b62\3\2\2\2\u1b61\u1b57\3\2\2\2\u1b61\u1b5c\3\2\2\2\u1b62\u1b63"+
		"\3\2\2\2\u1b63\u1b64\7\3\2\2\u1b64\u1b67\5\u0428\u0215\2\u1b65\u1b66\7"+
		"\u00e3\2\2\u1b66\u1b68\7\u01b1\2\2\u1b67\u1b65\3\2\2\2\u1b67\u1b68\3\2"+
		"\2\2\u1b68\u1b71\3\2\2\2\u1b69\u1b6a\7\26\2\2\u1b6a\u1b6d\5\u0428\u0215"+
		"\2\u1b6b\u1b6c\7\u00e3\2\2\u1b6c\u1b6e\7\u01b1\2\2\u1b6d\u1b6b\3\2\2\2"+
		"\u1b6d\u1b6e\3\2\2\2\u1b6e\u1b70\3\2\2\2\u1b6f\u1b69\3\2\2\2\u1b70\u1b73"+
		"\3\2\2\2\u1b71\u1b6f\3\2\2\2\u1b71\u1b72\3\2\2\2\u1b72\u1b74\3\2\2\2\u1b73"+
		"\u1b71\3\2\2\2\u1b74\u1b75\7\4\2\2\u1b75\u1b76\5\u0330\u0199\2\u1b76\u032f"+
		"\3\2\2\2\u1b77\u1b78\7\u00f3\2\2\u1b78\u1b8c\5\u043a\u021e\2\u1b79\u1b7a"+
		"\7\3\2\2\u1b7a\u1b7d\5\u0428\u0215\2\u1b7b\u1b7c\7\u00e3\2\2\u1b7c\u1b7e"+
		"\7\u01b1\2\2\u1b7d\u1b7b\3\2\2\2\u1b7d\u1b7e\3\2\2\2\u1b7e\u1b87\3\2\2"+
		"\2\u1b7f\u1b80\7\26\2\2\u1b80\u1b83\5\u0428\u0215\2\u1b81\u1b82\7\u00e3"+
		"\2\2\u1b82\u1b84\7\u01b1\2\2\u1b83\u1b81\3\2\2\2\u1b83\u1b84\3\2\2\2\u1b84"+
		"\u1b86\3\2\2\2\u1b85\u1b7f\3\2\2\2\u1b86\u1b89\3\2\2\2\u1b87\u1b85\3\2"+
		"\2\2\u1b87\u1b88\3\2\2\2\u1b88\u1b8a\3\2\2\2\u1b89\u1b87\3\2\2\2\u1b8a"+
		"\u1b8b\7\4\2\2\u1b8b\u1b8d\3\2\2\2\u1b8c\u1b79\3\2\2\2\u1b8c\u1b8d\3\2"+
		"\2\2\u1b8d\u1b98\3\2\2\2\u1b8e\u1b8f\7\u00d2\2\2\u1b8f\u1b96\7e\2\2\u1b90"+
		"\u1b97\7\u00f9\2\2\u1b91\u1b92\7\u00c8\2\2\u1b92\u1b97\7\u01b9\2\2\u1b93"+
		"\u1b97\7\u01fc\2\2\u1b94\u1b95\7\u0117\2\2\u1b95\u1b97\7\u00cb\2\2\u1b96"+
		"\u1b90\3\2\2\2\u1b96\u1b91\3\2\2\2\u1b96\u1b93\3\2\2\2\u1b96\u1b94\3\2"+
		"\2\2\u1b97\u1b99\3\2\2\2\u1b98\u1b8e\3\2\2\2\u1b98\u1b99\3\2\2\2\u1b99"+
		"\u1b9e\3\2\2\2\u1b9a\u1b9c\7\u00ca\2\2\u1b9b\u1b9a\3\2\2\2\u1b9b\u1b9c"+
		"\3\2\2\2\u1b9c\u1b9d\3\2\2\2\u1b9d\u1b9f\7\u0202\2\2\u1b9e\u1b9b\3\2\2"+
		"\2\u1b9e\u1b9f\3\2\2\2\u1b9f\u1ba3\3\2\2\2\u1ba0\u1ba1\7\u01df\2\2\u1ba1"+
		"\u1ba2\7\u00f0\2\2\u1ba2\u1ba4\7\u00d4\2\2\u1ba3\u1ba0\3\2\2\2\u1ba3\u1ba4"+
		"\3\2\2\2\u1ba4\u0331\3\2\2\2\u1ba5\u1ba6\7T\2\2\u1ba6\u1ba8\5\u0458\u022d"+
		"\2\u1ba7\u1ba5\3\2\2\2\u1ba7\u1ba8\3\2\2\2\u1ba8\u1ba9\3\2\2\2\u1ba9\u1baa"+
		"\7G\2\2\u1baa\u1bab\7\3\2\2\u1bab\u1bac\5\u03f4\u01fb\2\u1bac\u1bad\7"+
		"\4\2\2\u1bad\u0333\3\2\2\2\u1bae\u1baf\7\u00df\2\2\u1baf\u1bcd\7>\2\2"+
		"\u1bb0\u1bb2\7\u0182\2\2\u1bb1\u1bb0\3\2\2\2\u1bb1\u1bb2\3\2\2\2\u1bb2"+
		"\u1bb3\3\2\2\2\u1bb3\u1bb4\7\3\2\2\u1bb4\u1bb9\5\u0336\u019c\2\u1bb5\u1bb6"+
		"\7\26\2\2\u1bb6\u1bb8\5\u0336\u019c\2\u1bb7\u1bb5\3\2\2\2\u1bb8\u1bbb"+
		"\3\2\2\2\u1bb9\u1bb7\3\2\2\2\u1bb9\u1bba\3\2\2\2\u1bba\u1bbc\3\2\2\2\u1bbb"+
		"\u1bb9\3\2\2\2\u1bbc\u1bbd\7\4\2\2\u1bbd\u1bbe\7\3\2\2\u1bbe\u1bc3\5\u0340"+
		"\u01a1\2\u1bbf\u1bc0\7\26\2\2\u1bc0\u1bc2\5\u0340\u01a1\2\u1bc1\u1bbf"+
		"\3\2\2\2\u1bc2\u1bc5\3\2\2\2\u1bc3\u1bc1\3\2\2\2\u1bc3\u1bc4\3\2\2\2\u1bc4"+
		"\u1bc6\3\2\2\2\u1bc5\u1bc3\3\2\2\2\u1bc6\u1bc7\7\4\2\2\u1bc7\u1bce\3\2"+
		"\2\2\u1bc8\u1bcb\7\u024a\2\2\u1bc9\u1bca\7\u024b\2\2\u1bca\u1bcc\7\u03cc"+
		"\2\2\u1bcb\u1bc9\3\2\2\2\u1bcb\u1bcc\3\2\2\2\u1bcc\u1bce\3\2\2\2\u1bcd"+
		"\u1bb1\3\2\2\2\u1bcd\u1bc8\3\2\2\2\u1bce\u0335\3\2\2\2\u1bcf\u1bd2\5\u0428"+
		"\u0215\2\u1bd0\u1bd1\7\u00cc\2\2\u1bd1\u1bd3\7\u00af\2\2\u1bd2\u1bd0\3"+
		"\2\2\2\u1bd2\u1bd3\3\2\2\2\u1bd3\u1bd4\3\2\2\2\u1bd4\u1bd5\t>\2\2\u1bd5"+
		"\u0337\3\2\2\2\u1bd6\u1bd7\t?\2\2\u1bd7\u0339\3\2\2\2\u1bd8\u1bda\7x\2"+
		"\2\u1bd9\u1bdb\7\65\2\2\u1bda\u1bd9\3\2\2\2\u1bda\u1bdb\3\2\2\2\u1bdb"+
		"\u1bdc\3\2\2\2\u1bdc\u1bdd\7\3\2\2\u1bdd\u1be2\5\u0338\u019d\2\u1bde\u1bdf"+
		"\7\26\2\2\u1bdf\u1be1\5\u0338\u019d\2\u1be0\u1bde\3\2\2\2\u1be1\u1be4"+
		"\3\2\2\2\u1be2\u1be0\3\2\2\2\u1be2\u1be3\3\2\2\2\u1be3\u1be5\3\2\2\2\u1be4"+
		"\u1be2\3\2\2\2\u1be5\u1be7\7\4\2\2\u1be6\u1be8\5\u033c\u019f\2\u1be7\u1be6"+
		"\3\2\2\2\u1be7\u1be8\3\2\2\2\u1be8\u1bea\3\2\2\2\u1be9\u1beb\7\u009c\2"+
		"\2\u1bea\u1be9\3\2\2\2\u1bea\u1beb\3\2\2\2\u1beb\u1bed\3\2\2\2\u1bec\u1bee"+
		"\5\u033c\u019f\2\u1bed\u1bec\3\2\2\2\u1bed\u1bee\3\2\2\2\u1bee\u033b\3"+
		"\2\2\2\u1bef\u1bf0\7\u0314\2\2\u1bf0\u1bf1\7\u0361\2\2\u1bf1\u1bf2\7\u03cc"+
		"\2\2\u1bf2\u033d\3\2\2\2\u1bf3\u1bf4\7\'\2\2\u1bf4\u1bf5\7\u020d\2\2\u1bf5"+
		"\u1bf6\7>\2\2\u1bf6\u1bf7\7\u0314\2\2\u1bf7\u1bf8\7\u0132\2\2\u1bf8\u1bf9"+
		"\7\3\2\2\u1bf9\u1bfe\5\u0428\u0215\2\u1bfa\u1bfb\7\26\2\2\u1bfb\u1bfd"+
		"\5\u0428\u0215\2\u1bfc\u1bfa\3\2\2\2\u1bfd\u1c00\3\2\2\2\u1bfe\u1bfc\3"+
		"\2\2\2\u1bfe\u1bff\3\2\2\2\u1bff\u1c01\3\2\2\2\u1c00\u1bfe\3\2\2\2\u1c01"+
		"\u1c02\7\4\2\2\u1c02\u1c03\7\u0314\2\2\u1c03\u1c04\7\u0361\2\2\u1c04\u1c05"+
		"\7\u03cc\2\2\u1c05\u1c0d\3\2\2\2\u1c06\u1c07\7,\2\2\u1c07\u1c08\7\u00d8"+
		"\2\2\u1c08\u1c09\7\u0117\2\2\u1c09\u1c0a\7\u0314\2\2\u1c0a\u1c0b\7\u0361"+
		"\2\2\u1c0b\u1c0d\7\u03cc\2\2\u1c0c\u1bf3\3\2\2\2\u1c0c\u1c06\3\2\2\2\u1c0d"+
		"\u033f\3\2\2\2\u1c0e\u1c0f\7\u00df\2\2\u1c0f\u1c10\7\31\2\2\u1c10\u1c11"+
		"\5\u033a\u019e\2\u1c11\u0341\3\2\2\2\u1c12\u1c15\5\u033a\u019e\2\u1c13"+
		"\u1c15\5\u033c\u019f\2\u1c14\u1c12\3\2\2\2\u1c14\u1c13\3\2\2\2\u1c15\u0343"+
		"\3\2\2\2\u1c16\u1c17\5\u033a\u019e\2\u1c17\u1c18\7\u0213\2\2\u1c18\u0345"+
		"\3\2\2\2\u1c19\u1c1a\7\u00d2\2\2\u1c1a\u1c1b\7e\2\2\u1c1b\u1c1c\7\'\2"+
		"\2\u1c1c\u1c1d\7\u0203\2\2\u1c1d\u1c1e\7\u010a\2\2\u1c1e\u0347\3\2\2\2"+
		"\u1c1f\u1c20\7\3\2\2\u1c20\u1c21\5\u04fa\u027e\2\u1c21\u1c22\7\4\2\2\u1c22"+
		"\u1c23\5\u034c\u01a7\2\u1c23\u0349\3\2\2\2\u1c24\u1c26\7\u0117\2\2\u1c25"+
		"\u1c27\5\u0352\u01aa\2\u1c26\u1c25\3\2\2\2\u1c27\u1c28\3\2\2\2\u1c28\u1c26"+
		"\3\2\2\2\u1c28\u1c29\3\2\2\2\u1c29\u034b\3\2\2\2\u1c2a\u1c2b\5\u034e\u01a8"+
		"\2\u1c2b\u1c2f\5\u0350\u01a9\2\u1c2c\u1c2e\5\u0352\u01aa\2\u1c2d\u1c2c"+
		"\3\2\2\2\u1c2e\u1c31\3\2\2\2\u1c2f\u1c2d\3\2\2\2\u1c2f\u1c30\3\2\2\2\u1c30"+
		"\u034d\3\2\2\2\u1c31\u1c2f\3\2\2\2\u1c32\u1c33\7^\2\2\u1c33\u1c34\7\u020a"+
		"\2\2\u1c34\u1c35\7\u0200\2\2\u1c35\u034f\3\2\2\2\u1c36\u1c37\7\u00f4\2"+
		"\2\u1c37\u1c38\7\u0200\2\2\u1c38\u0351\3\2\2\2\u1c39\u1c3a\7\u00be\2\2"+
		"\u1c3a\u1c3b\7>\2\2\u1c3b\u1c41\t@\2\2\u1c3c\u1c3d\5\u025e\u0130\2\u1c3d"+
		"\u1c3e\7\u00f0\2\2\u1c3e\u1c3f\7\u00d4\2\2\u1c3f\u1c41\3\2\2\2\u1c40\u1c39"+
		"\3\2\2\2\u1c40\u1c3c\3\2\2\2\u1c41\u0353\3\2\2\2\u1c42\u1c44\7\u0117\2"+
		"\2\u1c43\u1c45\5\u0352\u01aa\2\u1c44\u1c43\3\2\2\2\u1c45\u1c46\3\2\2\2"+
		"\u1c46\u1c44\3\2\2\2\u1c46\u1c47\3\2\2\2\u1c47\u0355\3\2\2\2\u1c48\u1c4a"+
		"\7\u00e3\2\2\u1c49\u1c4b\7\u0088\2\2\u1c4a\u1c49\3\2\2\2\u1c4a\u1c4b\3"+
		"\2\2\2\u1c4b\u1c5b\3\2\2\2\u1c4c\u1c4d\7\u01b0\2\2\u1c4d\u1c4e\7\3\2\2"+
		"\u1c4e\u1c4f\5\u0430\u0219\2\u1c4f\u1c50\7\26\2\2\u1c50\u1c51\5\u0432"+
		"\u021a\2\u1c51\u1c52\7\4\2\2\u1c52\u1c5c\3\2\2\2\u1c53\u1c54\7\u01b1\2"+
		"\2\u1c54\u1c55\7\3\2\2\u1c55\u1c56\5\u0430\u0219\2\u1c56\u1c57\7\26\2"+
		"\2\u1c57\u1c58\5\u0432\u021a\2\u1c58\u1c59\tA\2\2\u1c59\u1c5a\7\4\2\2"+
		"\u1c5a\u1c5c\3\2\2\2\u1c5b\u1c4c\3\2\2\2\u1c5b\u1c53\3\2\2\2\u1c5c\u0357"+
		"\3\2\2\2\u1c5d\u1c5e\5\u0428\u0215\2\u1c5e\u1c62\5\u0316\u018c\2\u1c5f"+
		"\u1c61\5\u02f4\u017b\2\u1c60\u1c5f\3\2\2\2\u1c61\u1c64\3\2\2\2\u1c62\u1c60"+
		"\3\2\2\2\u1c62\u1c63\3\2\2\2\u1c63\u1c6e\3\2\2\2\u1c64\u1c62\3\2\2\2\u1c65"+
		"\u1c66\5\u0428\u0215\2\u1c66\u1c6a\5\u0420\u0211\2\u1c67\u1c69\5\u02f6"+
		"\u017c\2\u1c68\u1c67\3\2\2\2\u1c69\u1c6c\3\2\2\2\u1c6a\u1c68\3\2\2\2\u1c6a"+
		"\u1c6b\3\2\2\2\u1c6b\u1c6e\3\2\2\2\u1c6c\u1c6a\3\2\2\2\u1c6d\u1c5d\3\2"+
		"\2\2\u1c6d\u1c65\3\2\2\2\u1c6e\u0359\3\2\2\2\u1c6f\u1c72\5\u0506\u0284"+
		"\2\u1c70\u1c72\7\30\2\2\u1c71\u1c6f\3\2\2\2\u1c71\u1c70\3\2\2\2\u1c72"+
		"\u035b\3\2\2\2\u1c73\u1c7e\5\u035e\u01b0\2\u1c74\u1c7e\7\u03c1\2\2\u1c75"+
		"\u1c7e\7\u03c2\2\2\u1c76\u1c77\7Z\2\2\u1c77\u1c78\7\u00db\2\2\u1c78\u1c7e"+
		"\7\u00e2\2\2\u1c79\u1c7a\7Z\2\2\u1c7a\u1c7e\7\u00e2\2\2\u1c7b\u1c7e\5"+
		"\u049a\u024e\2\u1c7c\u1c7e\7\30\2\2\u1c7d\u1c73\3\2\2\2\u1c7d\u1c74\3"+
		"\2\2\2\u1c7d\u1c75\3\2\2\2\u1c7d\u1c76\3\2\2\2\u1c7d\u1c79\3\2\2\2\u1c7d"+
		"\u1c7b\3\2\2\2\u1c7d\u1c7c\3\2\2\2\u1c7e\u035d\3\2\2\2\u1c7f\u1c80\5\u0506"+
		"\u0284\2\u1c80\u035f\3\2\2\2\u1c81\u1c82\7\30\2\2\u1c82\u0361\3\2\2\2"+
		"\u1c83\u1c84\tB\2\2\u1c84\u0363\3\2\2\2\u1c85\u1c86\tC\2\2\u1c86\u0365"+
		"\3\2\2\2\u1c87\u1cba\5\u036e\u01b8\2\u1c88\u1c89\7\3\2\2\u1c89\u1c8a\5"+
		"\u0366\u01b4\2\u1c8a\u1c8b\7\4\2\2\u1c8b\u1cba\3\2\2\2\u1c8c\u1cba\5\u0424"+
		"\u0213\2\u1c8d\u1cba\5\u0428\u0215\2\u1c8e\u1cba\5\u049a\u024e\2\u1c8f"+
		"\u1cba\5\u03c0\u01e1\2\u1c90\u1cba\5\u04f8\u027d\2\u1c91\u1cba\5\u03e6"+
		"\u01f4\2\u1c92\u1cba\5\u0378\u01bd\2\u1c93\u1cba\5\u03ea\u01f6\2\u1c94"+
		"\u1cba\5\u0410\u0209\2\u1c95\u1cba\5\u037a\u01be\2\u1c96\u1cba\5\u037c"+
		"\u01bf\2\u1c97\u1cba\5\u0380\u01c1\2\u1c98\u1cba\5\u0382\u01c2\2\u1c99"+
		"\u1cba\5\u036a\u01b6\2\u1c9a\u1cba\5\u036c\u01b7\2\u1c9b\u1cb0\5\u036e"+
		"\u01b8\2\u1c9c\u1c9d\7\3\2\2\u1c9d\u1c9e\5\u0366\u01b4\2\u1c9e\u1c9f\7"+
		"\4\2\2\u1c9f\u1cb0\3\2\2\2\u1ca0\u1cb0\5\u0424\u0213\2\u1ca1\u1cb0\5\u0428"+
		"\u0215\2\u1ca2\u1cb0\5\u049a\u024e\2\u1ca3\u1cb0\5\u03c0\u01e1\2\u1ca4"+
		"\u1cb0\5\u04f8\u027d\2\u1ca5\u1cb0\5\u03e6\u01f4\2\u1ca6\u1cb0\5\u0378"+
		"\u01bd\2\u1ca7\u1cb0\5\u03ea\u01f6\2\u1ca8\u1cb0\5\u0410\u0209\2\u1ca9"+
		"\u1cb0\5\u037a\u01be\2\u1caa\u1cb0\5\u037c\u01bf\2\u1cab\u1cb0\5\u0380"+
		"\u01c1\2\u1cac\u1cb0\5\u0382\u01c2\2\u1cad\u1cb0\5\u036a\u01b6\2\u1cae"+
		"\u1cb0\5\u036c\u01b7\2\u1caf\u1c9b\3\2\2\2\u1caf\u1c9c\3\2\2\2\u1caf\u1ca0"+
		"\3\2\2\2\u1caf\u1ca1\3\2\2\2\u1caf\u1ca2\3\2\2\2\u1caf\u1ca3\3\2\2\2\u1caf"+
		"\u1ca4\3\2\2\2\u1caf\u1ca5\3\2\2\2\u1caf\u1ca6\3\2\2\2\u1caf\u1ca7\3\2"+
		"\2\2\u1caf\u1ca8\3\2\2\2\u1caf\u1ca9\3\2\2\2\u1caf\u1caa\3\2\2\2\u1caf"+
		"\u1cab\3\2\2\2\u1caf\u1cac\3\2\2\2\u1caf\u1cad\3\2\2\2\u1caf\u1cae\3\2"+
		"\2\2\u1cb0\u1cb6\3\2\2\2\u1cb1\u1cb2\5\u0364\u01b3\2\u1cb2\u1cb3\5\u0366"+
		"\u01b4\2\u1cb3\u1cb5\3\2\2\2\u1cb4\u1cb1\3\2\2\2\u1cb5\u1cb8\3\2\2\2\u1cb6"+
		"\u1cb4\3\2\2\2\u1cb6\u1cb7\3\2\2\2\u1cb7\u1cba\3\2\2\2\u1cb8\u1cb6\3\2"+
		"\2\2\u1cb9\u1c87\3\2\2\2\u1cb9\u1c88\3\2\2\2\u1cb9\u1c8c\3\2\2\2\u1cb9"+
		"\u1c8d\3\2\2\2\u1cb9\u1c8e\3\2\2\2\u1cb9\u1c8f\3\2\2\2\u1cb9\u1c90\3\2"+
		"\2\2\u1cb9\u1c91\3\2\2\2\u1cb9\u1c92\3\2\2\2\u1cb9\u1c93\3\2\2\2\u1cb9"+
		"\u1c94\3\2\2\2\u1cb9\u1c95\3\2\2\2\u1cb9\u1c96\3\2\2\2\u1cb9\u1c97\3\2"+
		"\2\2\u1cb9\u1c98\3\2\2\2\u1cb9\u1c99\3\2\2\2\u1cb9\u1c9a\3\2\2\2\u1cb9"+
		"\u1caf\3\2\2\2\u1cba\u0367\3\2\2\2\u1cbb\u1cbc\5\u0366\u01b4\2\u1cbc\u0369"+
		"\3\2\2\2\u1cbd\u1cbe\7\u010a\2\2\u1cbe\u1cbf\7\u0151\2\2\u1cbf\u1cc0\t"+
		"D\2\2\u1cc0\u1cc1\7\u0088\2\2\u1cc1\u1cc2\5\u043a\u021e\2\u1cc2\u036b"+
		"\3\2\2\2\u1cc3\u1cc4\tE\2\2\u1cc4\u1cc5\7\u0137\2\2\u1cc5\u1cc6\7\u0088"+
		"\2\2\u1cc6\u1cc7\5\u043a\u021e\2\u1cc7\u036d\3\2\2\2\u1cc8\u1ccd\5\u0370"+
		"\u01b9\2\u1cc9\u1ccd\5\u0372\u01ba\2\u1cca\u1ccd\5\u0374\u01bb\2\u1ccb"+
		"\u1ccd\5\u0376\u01bc\2\u1ccc\u1cc8\3\2\2\2\u1ccc\u1cc9\3\2\2\2\u1ccc\u1cca"+
		"\3\2\2\2\u1ccc\u1ccb\3\2\2\2\u1ccd\u036f\3\2\2\2\u1cce\u1ccf\5\u0438\u021d"+
		"\2\u1ccf\u1cd0\7\23\2\2\u1cd0\u1cd2\3\2\2\2\u1cd1\u1cce\3\2\2\2\u1cd1"+
		"\u1cd2\3\2\2\2\u1cd2\u1cd3\3\2\2\2\u1cd3\u1cd4\5\u03bc\u01df\2\u1cd4\u1cdd"+
		"\7\3\2\2\u1cd5\u1cda\5\u0366\u01b4\2\u1cd6\u1cd7\7\26\2\2\u1cd7\u1cd9"+
		"\5\u0366\u01b4\2\u1cd8\u1cd6\3\2\2\2\u1cd9\u1cdc\3\2\2\2\u1cda\u1cd8\3"+
		"\2\2\2\u1cda\u1cdb\3\2\2\2\u1cdb\u1cde\3\2\2\2\u1cdc\u1cda\3\2\2\2\u1cdd"+
		"\u1cd5\3\2\2\2\u1cdd\u1cde\3\2\2\2\u1cde\u1cdf\3\2\2\2\u1cdf\u1ce0\7\4"+
		"\2\2\u1ce0\u0371\3\2\2\2\u1ce1\u1ce2\5\u0438\u021d\2\u1ce2\u1ce3\7\23"+
		"\2\2\u1ce3\u1ce5\3\2\2\2\u1ce4\u1ce1\3\2\2\2\u1ce4\u1ce5\3\2\2\2\u1ce5"+
		"\u1ce6\3\2\2\2\u1ce6\u1ce7\5\u0398\u01cd\2\u1ce7\u1ce9\7\3\2\2\u1ce8\u1cea"+
		"\7j\2\2\u1ce9\u1ce8\3\2\2\2\u1ce9\u1cea\3\2\2\2\u1cea\u1ced\3\2\2\2\u1ceb"+
		"\u1cee\5\u0366\u01b4\2\u1cec\u1cee\7\20\2\2\u1ced\u1ceb\3\2\2\2\u1ced"+
		"\u1cec\3\2\2\2\u1cee\u1cef\3\2\2\2\u1cef\u1cf0\7\4\2\2\u1cf0\u0373\3\2"+
		"\2\2\u1cf1\u1cf2\5\u0438\u021d\2\u1cf2\u1cf3\7\23\2\2\u1cf3\u1cf5\3\2"+
		"\2\2\u1cf4\u1cf1\3\2\2\2\u1cf4\u1cf5\3\2\2\2\u1cf5\u1cf6\3\2\2\2\u1cf6"+
		"\u1cf7\5\u039a\u01ce\2\u1cf7\u1cf8\7\3\2\2\u1cf8\u1cf9\5\u0366\u01b4\2"+
		"\u1cf9\u1cfa\7\26\2\2\u1cfa\u1cfb\5\u0366\u01b4\2\u1cfb\u1cfc\7\4\2\2"+
		"\u1cfc\u0375\3\2\2\2\u1cfd\u1cfe\5\u0438\u021d\2\u1cfe\u1cff\7\23\2\2"+
		"\u1cff\u1d01\3\2\2\2\u1d00\u1cfd\3\2\2\2\u1d00\u1d01\3\2\2\2\u1d01\u1d02"+
		"\3\2\2\2\u1d02\u1d03\7\u03cc\2\2\u1d03\u1d04\7\3\2\2\u1d04\u1d09\5\u0366"+
		"\u01b4\2\u1d05\u1d06\7\26\2\2\u1d06\u1d08\5\u0366\u01b4\2\u1d07\u1d05"+
		"\3\2\2\2\u1d08\u1d0b\3\2\2\2\u1d09\u1d07\3\2\2\2\u1d09\u1d0a\3\2\2\2\u1d0a"+
		"\u1d0c\3\2\2\2\u1d0b\u1d09\3\2\2\2\u1d0c\u1d0d\7\4\2\2\u1d0d\u0377\3\2"+
		"\2\2\u1d0e\u1d17\5\u036e\u01b8\2\u1d0f\u1d10\7\3\2\2\u1d10\u1d11\5\u0366"+
		"\u01b4\2\u1d11\u1d12\7\4\2\2\u1d12\u1d17\3\2\2\2\u1d13\u1d17\7\31\2\2"+
		"\u1d14\u1d17\5\u0428\u0215\2\u1d15\u1d17\5\u04a2\u0252\2\u1d16\u1d0e\3"+
		"\2\2\2\u1d16\u1d0f\3\2\2\2\u1d16\u1d13\3\2\2\2\u1d16\u1d14\3\2\2\2\u1d16"+
		"\u1d15\3\2\2\2\u1d17\u1d18\3\2\2\2\u1d18\u1d19\tF\2\2\u1d19\u0379\3\2"+
		"\2\2\u1d1a\u1d1e\7\u0146\2\2\u1d1b\u1d1f\5\u0366\u01b4\2\u1d1c\u1d1f\7"+
		"\u00cb\2\2\u1d1d\u1d1f\5\u0412\u020a\2\u1d1e\u1d1b\3\2\2\2\u1d1e\u1d1c"+
		"\3\2\2\2\u1d1e\u1d1d\3\2\2\2\u1d1f\u1d20\3\2\2\2\u1d20\u1d21\7\61\2\2"+
		"\u1d21\u1d22\5\u0314\u018b\2\u1d22\u037b\3\2\2\2\u1d23\u1d24\5\u040e\u0208"+
		"\2\u1d24\u1d25\7\5\2\2\u1d25\u1d26\5\u037e\u01c0\2\u1d26\u1d27\7\6\2\2"+
		"\u1d27\u037d\3\2\2\2\u1d28\u1d2f\5\u0366\u01b4\2\u1d29\u1d2b\5\u0364\u01b3"+
		"\2\u1d2a\u1d29\3\2\2\2\u1d2a\u1d2b\3\2\2\2\u1d2b\u1d2c\3\2\2\2\u1d2c\u1d2e"+
		"\5\u0366\u01b4\2\u1d2d\u1d2a\3\2\2\2\u1d2e\u1d31\3\2\2\2\u1d2f\u1d2d\3"+
		"\2\2\2\u1d2f\u1d30\3\2\2\2\u1d30\u037f\3\2\2\2\u1d31\u1d2f\3\2\2\2\u1d32"+
		"\u1d33\7/\2\2\u1d33\u1d44\7\5\2\2\u1d34\u1d45\7\7\2\2\u1d35\u1d45\5\u04fa"+
		"\u027e\2\u1d36\u1d39\5\u0366\u01b4\2\u1d37\u1d39\7\u00cb\2\2\u1d38\u1d36"+
		"\3\2\2\2\u1d38\u1d37\3\2\2\2\u1d39\u1d41\3\2\2\2\u1d3a\u1d3d\7\26\2\2"+
		"\u1d3b\u1d3e\5\u0366\u01b4\2\u1d3c\u1d3e\7\u00cb\2\2\u1d3d\u1d3b\3\2\2"+
		"\2\u1d3d\u1d3c\3\2\2\2\u1d3e\u1d40\3\2\2\2\u1d3f\u1d3a\3\2\2\2\u1d40\u1d43"+
		"\3\2\2\2\u1d41\u1d3f\3\2\2\2\u1d41\u1d42\3\2\2\2\u1d42\u1d45\3\2\2\2\u1d43"+
		"\u1d41\3\2\2\2\u1d44\u1d34\3\2\2\2\u1d44\u1d35\3\2\2\2\u1d44\u1d38\3\2"+
		"\2\2\u1d45\u1d46\3\2\2\2\u1d46\u1d47\7\6\2\2\u1d47\u0381\3\2\2\2\u1d48"+
		"\u1d4c\5\u0384\u01c3\2\u1d49\u1d4c\5\u0394\u01cb\2\u1d4a\u1d4c\5\u0396"+
		"\u01cc\2\u1d4b\u1d48\3\2\2\2\u1d4b\u1d49\3\2\2\2\u1d4b\u1d4a\3\2\2\2\u1d4c"+
		"\u0383\3\2\2\2\u1d4d\u1d4e\5\u0386\u01c4\2\u1d4e\u1d4f\7\u017b\2\2\u1d4f"+
		"\u1d51\7\3\2\2\u1d50\u1d52\5\u038e\u01c8\2\u1d51\u1d50\3\2\2\2\u1d51\u1d52"+
		"\3\2\2\2\u1d52\u1d53\3\2\2\2\u1d53\u1d54\5\u0390\u01c9\2\u1d54\u1d55\7"+
		"\4\2\2\u1d55\u0385\3\2\2\2\u1d56\u1d57\7\u015e\2\2\u1d57\u1d58\7\3\2\2"+
		"\u1d58\u1d6a\7\4\2\2\u1d59\u1d5a\7\u017f\2\2\u1d5a\u1d5b\7\3\2\2\u1d5b"+
		"\u1d6a\7\4\2\2\u1d5c\u1d5d\7\u0183\2\2\u1d5d\u1d5e\7\3\2\2\u1d5e\u1d6a"+
		"\7\4\2\2\u1d5f\u1d60\7\u015f\2\2\u1d60\u1d61\7\3\2\2\u1d61\u1d6a\7\4\2"+
		"\2\u1d62\u1d63\7\u0176\2\2\u1d63\u1d64\7\3\2\2\u1d64\u1d65\5\u0366\u01b4"+
		"\2\u1d65\u1d66\7\4\2\2\u1d66\u1d6a\3\2\2\2\u1d67\u1d6a\5\u0388\u01c5\2"+
		"\u1d68\u1d6a\5\u038a\u01c6\2\u1d69\u1d56\3\2\2\2\u1d69\u1d59\3\2\2\2\u1d69"+
		"\u1d5c\3\2\2\2\u1d69\u1d5f\3\2\2\2\u1d69\u1d62\3\2\2\2\u1d69\u1d67\3\2"+
		"\2\2\u1d69\u1d68\3\2\2\2\u1d6a\u0387\3\2\2\2\u1d6b\u1d6c\7\u016a\2\2\u1d6c"+
		"\u1d6d\7\3\2\2\u1d6d\u1d6e\5\u0366\u01b4\2\u1d6e\u1d6f\7\26\2\2\u1d6f"+
		"\u1d7b\7\31\2\2\u1d70\u1d71\7\26\2\2\u1d71\u1d79\5\u0366\u01b4\2\u1d72"+
		"\u1d77\7\26\2\2\u1d73\u1d74\7\u0191\2\2\u1d74\u1d78\7\u00cc\2\2\u1d75"+
		"\u1d76\7\u0166\2\2\u1d76\u1d78\7\u00cc\2\2\u1d77\u1d73\3\2\2\2\u1d77\u1d75"+
		"\3\2\2\2\u1d78\u1d7a\3\2\2\2\u1d79\u1d72\3\2\2\2\u1d79\u1d7a\3\2\2\2\u1d7a"+
		"\u1d7c\3\2\2\2\u1d7b\u1d70\3\2\2\2\u1d7b\u1d7c\3\2\2\2\u1d7c\u1d7d\3\2"+
		"\2\2\u1d7d\u1d7e\7\4\2\2\u1d7e\u0389\3\2\2\2\u1d7f\u1d80\7\u016d\2\2\u1d80"+
		"\u1d81\7\3\2\2\u1d81\u1d82\5\u0366\u01b4\2\u1d82\u1d83\7\26\2\2\u1d83"+
		"\u1d8a\7\31\2\2\u1d84\u1d85\7\26\2\2\u1d85\u1d88\5\u0366\u01b4\2\u1d86"+
		"\u1d87\7\26\2\2\u1d87\u1d89\5\u038c\u01c7\2\u1d88\u1d86\3\2\2\2\u1d88"+
		"\u1d89\3\2\2\2\u1d89\u1d8b\3\2\2\2\u1d8a\u1d84\3\2\2\2\u1d8a\u1d8b\3\2"+
		"\2\2\u1d8b\u1d8c\3\2\2\2\u1d8c\u1d8d\7\4\2\2\u1d8d\u038b\3\2\2\2\u1d8e"+
		"\u1d8f\7\u0191\2\2\u1d8f\u1d93\7\u00cc\2\2\u1d90\u1d91\7\u0166\2\2\u1d91"+
		"\u1d93\7\u00cc\2\2\u1d92\u1d8e\3\2\2\2\u1d92\u1d90\3\2\2\2\u1d93\u038d"+
		"\3\2\2\2\u1d94\u1d95\7\u00df\2\2\u1d95\u1d96\7>\2\2\u1d96\u1d9b\5\u0366"+
		"\u01b4\2\u1d97\u1d98\7\26\2\2\u1d98\u1d9a\5\u0366\u01b4\2\u1d99\u1d97"+
		"\3\2\2\2\u1d9a\u1d9d\3\2\2\2\u1d9b\u1d99\3\2\2\2\u1d9b\u1d9c\3\2\2\2\u1d9c"+
		"\u038f\3\2\2\2\u1d9d\u1d9b\3\2\2\2\u1d9e\u1d9f\7\u00d7\2\2\u1d9f\u1da0"+
		"\7>\2\2\u1da0\u1da2\5\u0366\u01b4\2\u1da1\u1da3\5\u0392\u01ca\2\u1da2"+
		"\u1da1\3\2\2\2\u1da2\u1da3\3\2\2\2\u1da3\u1dab\3\2\2\2\u1da4\u1da5\7\26"+
		"\2\2\u1da5\u1da7\5\u0366\u01b4\2\u1da6\u1da8\5\u0392\u01ca\2\u1da7\u1da6"+
		"\3\2\2\2\u1da7\u1da8\3\2\2\2\u1da8\u1daa\3\2\2\2\u1da9\u1da4\3\2\2\2\u1daa"+
		"\u1dad\3\2\2\2\u1dab\u1da9\3\2\2\2\u1dab\u1dac\3\2\2\2\u1dac\u0391\3\2"+
		"\2\2\u1dad\u1dab\3\2\2\2\u1dae\u1db1\t>\2\2\u1daf\u1db0\7\u00cc\2\2\u1db0"+
		"\u1db2\tG\2\2\u1db1\u1daf\3\2\2\2\u1db1\u1db2\3\2\2\2\u1db2\u0393\3\2"+
		"\2\2\u1db3\u1db4\7\u0192\2\2\u1db4\u1db5\7\3\2\2\u1db5\u1db6\7\4\2\2\u1db6"+
		"\u1db7\7\u017b\2\2\u1db7\u1db9\7\3\2\2\u1db8\u1dba\5\u038e\u01c8\2\u1db9"+
		"\u1db8\3\2\2\2\u1db9\u1dba\3\2\2\2\u1dba\u1dbc\3\2\2\2\u1dbb\u1dbd\5\u0390"+
		"\u01c9\2\u1dbc\u1dbb\3\2\2\2\u1dbc\u1dbd\3\2\2\2\u1dbd\u1dbe\3\2\2\2\u1dbe"+
		"\u1dbf\7\4\2\2\u1dbf\u0395\3\2\2\2\u1dc0\u1dc3\5\u0372\u01ba\2\u1dc1\u1dc3"+
		"\5\u039c\u01cf\2\u1dc2\u1dc0\3\2\2\2\u1dc2\u1dc1\3\2\2\2\u1dc3\u1dc4\3"+
		"\2\2\2\u1dc4\u1dc5\7\u017b\2\2\u1dc5\u1dc7\7\3\2\2\u1dc6\u1dc8\5\u038e"+
		"\u01c8\2\u1dc7\u1dc6\3\2\2\2\u1dc7\u1dc8\3\2\2\2\u1dc8\u1ddb\3\2\2\2\u1dc9"+
		"\u1dca\7\u0182\2\2\u1dca\u1dcb\7;\2\2\u1dcb\u1dcc\7\u01a0\2\2\u1dcc\u1dcd"+
		"\7\u0180\2\2\u1dcd\u1dce\7\u014c\2\2\u1dce\u1dcf\7\u01a0\2\2\u1dcf\u1ddc"+
		"\7\u0164\2\2\u1dd0\u1dd9\5\u0390\u01c9\2\u1dd1\u1dd2\7\u0182\2\2\u1dd2"+
		"\u1dd3\7;\2\2\u1dd3\u1dd4\7\u01a0\2\2\u1dd4\u1dd5\7\u0180\2\2\u1dd5\u1dd6"+
		"\7\u014c\2\2\u1dd6\u1dd7\7Z\2\2\u1dd7\u1dda\7\u010a\2\2\u1dd8\u1dda\5"+
		"\u03a6\u01d4\2\u1dd9\u1dd1\3\2\2\2\u1dd9\u1dd8\3\2\2\2\u1dd9\u1dda\3\2"+
		"\2\2\u1dda\u1ddc\3\2\2\2\u1ddb\u1dc9\3\2\2\2\u1ddb\u1dd0\3\2\2\2\u1ddb"+
		"\u1ddc\3\2\2\2\u1ddc\u1ddd\3\2\2\2\u1ddd\u1dde\7\4\2\2\u1dde\u0397\3\2"+
		"\2\2\u1ddf\u1de0\tH\2\2\u1de0\u0399\3\2\2\2\u1de1\u1de2\tI\2\2\u1de2\u039b"+
		"\3\2\2\2\u1de3\u1de8\5\u039e\u01d0\2\u1de4\u1de8\5\u03a0\u01d1\2\u1de5"+
		"\u1de8\5\u03a2\u01d2\2\u1de6\u1de8\5\u03a4\u01d3\2\u1de7\u1de3\3\2\2\2"+
		"\u1de7\u1de4\3\2\2\2\u1de7\u1de5\3\2\2\2\u1de7\u1de6\3\2\2\2\u1de8\u039d"+
		"\3\2\2\2\u1de9\u1dea\7\u0163\2\2\u1dea\u1deb\7\3\2\2\u1deb\u1dee\5\u0366"+
		"\u01b4\2\u1dec\u1ded\7\26\2\2\u1ded\u1def\5\u038c\u01c7\2\u1dee\u1dec"+
		"\3\2\2\2\u1dee\u1def\3\2\2\2\u1def\u1df0\3\2\2\2\u1df0\u1df1\7\4\2\2\u1df1"+
		"\u039f\3\2\2\2\u1df2\u1df3\7\u016c\2\2\u1df3\u1df4\7\3\2\2\u1df4\u1df7"+
		"\5\u0366\u01b4\2\u1df5\u1df6\7\26\2\2\u1df6\u1df8\5\u038c\u01c7\2\u1df7"+
		"\u1df5\3\2\2\2\u1df7\u1df8\3\2\2\2\u1df8\u1df9\3\2\2\2\u1df9\u1dfa\7\4"+
		"\2\2\u1dfa\u03a1\3\2\2\2\u1dfb\u1dfc\7\u0175\2\2\u1dfc\u1dfd\7\3\2\2\u1dfd"+
		"\u1dfe\5\u0366\u01b4\2\u1dfe\u1dff\7\26\2\2\u1dff\u1e00\7\31\2\2\u1e00"+
		"\u1e01\7\4\2\2\u1e01\u03a3\3\2\2\2\u1e02\u1e03\7\u0184\2\2\u1e03\u1e04"+
		"\7\3\2\2\u1e04\u1e05\5\u0366\u01b4\2\u1e05\u1e06\7\4\2\2\u1e06\u03a5\3"+
		"\2\2\2\u1e07\u1e0b\tJ\2\2\u1e08\u1e0c\5\u03a8\u01d5\2\u1e09\u1e0c\5\u03aa"+
		"\u01d6\2\u1e0a\u1e0c\5\u03ac\u01d7\2\u1e0b\u1e08\3\2\2\2\u1e0b\u1e09\3"+
		"\2\2\2\u1e0b\u1e0a\3\2\2\2\u1e0c\u03a7\3\2\2\2\u1e0d\u1e11\5\u03b2\u01da"+
		"\2\u1e0e\u1e11\5\u03b6\u01dc\2\u1e0f\u1e11\5\u03ba\u01de\2\u1e10\u1e0d"+
		"\3\2\2\2\u1e10\u1e0e\3\2\2\2\u1e10\u1e0f\3\2\2\2\u1e11\u03a9\3\2\2\2\u1e12"+
		"\u1e13\7;\2\2\u1e13\u1e14\5\u03ae\u01d8\2\u1e14\u1e15\7\u014c\2\2\u1e15"+
		"\u1e16\5\u03b0\u01d9\2\u1e16\u03ab\3\2\2\2\u1e17\u1e1a\5\u03b4\u01db\2"+
		"\u1e18\u1e1a\5\u03b8\u01dd\2\u1e19\u1e17\3\2\2\2\u1e19\u1e18\3\2\2\2\u1e1a"+
		"\u03ad\3\2\2\2\u1e1b\u1e20\5\u03b2\u01da\2\u1e1c\u1e20\5\u03b6\u01dc\2"+
		"\u1e1d\u1e20\5\u03b8\u01dd\2\u1e1e\u1e20\5\u03ba\u01de\2\u1e1f\u1e1b\3"+
		"\2\2\2\u1e1f\u1e1c\3\2\2\2\u1e1f\u1e1d\3\2\2\2\u1e1f\u1e1e\3\2\2\2\u1e20"+
		"\u03af\3\2\2\2\u1e21\u1e26\5\u03b4\u01db\2\u1e22\u1e26\5\u03b6\u01dc\2"+
		"\u1e23\u1e26\5\u03b8\u01dd\2\u1e24\u1e26\5\u03ba\u01de\2\u1e25\u1e21\3"+
		"\2\2\2\u1e25\u1e22\3\2\2\2\u1e25\u1e23\3\2\2\2\u1e25\u1e24\3\2\2\2\u1e26"+
		"\u03b1\3\2\2\2\u1e27\u1e28\7\u01a0\2\2\u1e28\u1e29\7\u0180\2\2\u1e29\u03b3"+
		"\3\2\2\2\u1e2a\u1e2b\7\u01a0\2\2\u1e2b\u1e2c\7\u0164\2\2\u1e2c\u03b5\3"+
		"\2\2\2\u1e2d\u1e2e\7\31\2\2\u1e2e\u1e2f\7\u0180\2\2\u1e2f\u03b7\3\2\2"+
		"\2\u1e30\u1e31\7\31\2\2\u1e31\u1e32\7\u0164\2\2\u1e32\u03b9\3\2\2\2\u1e33"+
		"\u1e34\7Z\2\2\u1e34\u1e35\7\u010a\2\2\u1e35\u03bb\3\2\2\2\u1e36\u1e37"+
		"\tK\2\2\u1e37\u03bd\3\2\2\2\u1e38\u1e39\tL\2\2\u1e39\u03bf\3\2\2\2\u1e3a"+
		"\u1e3b\tM\2\2\u1e3b\u03c1\3\2\2\2\u1e3c\u1e3d\7\u03cb\2\2\u1e3d\u1e41"+
		"\7\3\2\2\u1e3e\u1e3f\5\u03dc\u01ef\2\u1e3f\u1e40\7\26\2\2\u1e40\u1e42"+
		"\3\2\2\2\u1e41\u1e3e\3\2\2\2\u1e41\u1e42\3\2\2\2\u1e42\u1e43\3\2\2\2\u1e43"+
		"\u1e4d\5\u03c4\u01e3\2\u1e44\u1e47\7\u017c\2\2\u1e45\u1e46\7>\2\2\u1e46"+
		"\u1e48\7\u0186\2\2\u1e47\u1e45\3\2\2\2\u1e47\u1e48\3\2\2\2\u1e48\u1e49"+
		"\3\2\2\2\u1e49\u1e4a\5\u03c6\u01e4\2\u1e4a\u1e4b\7\26\2\2\u1e4b\u1e4c"+
		"\5\u03c6\u01e4\2\u1e4c\u1e4e\3\2\2\2\u1e4d\u1e44\3\2\2\2\u1e4d\u1e4e\3"+
		"\2\2\2\u1e4e\u1e5e\3\2\2\2\u1e4f\u1e52\7\u01ad\2\2\u1e50\u1e53\5\u03cc"+
		"\u01e7\2\u1e51\u1e53\5\u03da\u01ee\2\u1e52\u1e50\3\2\2\2\u1e52\u1e51\3"+
		"\2\2\2\u1e53\u1e5b\3\2\2\2\u1e54\u1e57\7\26\2\2\u1e55\u1e58\5\u03cc\u01e7"+
		"\2\u1e56\u1e58\5\u03da\u01ee\2\u1e57\u1e55\3\2\2\2\u1e57\u1e56\3\2\2\2"+
		"\u1e58\u1e5a\3\2\2\2\u1e59\u1e54\3\2\2\2\u1e5a\u1e5d\3\2\2\2\u1e5b\u1e59"+
		"\3\2\2\2\u1e5b\u1e5c\3\2\2\2\u1e5c\u1e5f\3\2\2\2\u1e5d\u1e5b\3\2\2\2\u1e5e"+
		"\u1e4f\3\2\2\2\u1e5e\u1e5f\3\2\2\2\u1e5f\u1e60\3\2\2\2\u1e60\u1e61\7\4"+
		"\2\2\u1e61\u03c3\3\2\2\2\u1e62\u1e63\7\30\2\2\u1e63\u03c5\3\2\2\2\u1e64"+
		"\u1e6a\5\u03c8\u01e5\2\u1e65\u1e66\5\u03ca\u01e6\2\u1e66\u1e67\7\61\2"+
		"\2\u1e67\u1e68\5\u0506\u0284\2\u1e68\u1e6a\3\2\2\2\u1e69\u1e64\3\2\2\2"+
		"\u1e69\u1e65\3\2\2\2\u1e6a\u03c7\3\2\2\2\u1e6b\u1e6c\5\u0366\u01b4\2\u1e6c"+
		"\u03c9\3\2\2\2\u1e6d\u1e6e\5\u0366\u01b4\2\u1e6e\u03cb\3\2\2\2\u1e6f\u1e70"+
		"\5\u0428\u0215\2\u1e70\u1e74\5\u0314\u018b\2\u1e71\u1e75\5\u03ce\u01e8"+
		"\2\u1e72\u1e73\7\u00e2\2\2\u1e73\u1e75\5\u03d8\u01ed\2\u1e74\u1e71\3\2"+
		"\2\2\u1e74\u1e72\3\2\2\2\u1e74\u1e75\3\2\2\2\u1e75\u03cd\3\2\2\2\u1e76"+
		"\u1e78\7\u0144\2\2\u1e77\u1e76\3\2\2\2\u1e77\u1e78\3\2\2\2\u1e78\u1e79"+
		"\3\2\2\2\u1e79\u1e80\7d\2\2\u1e7a\u1e81\5\u03d4\u01eb\2\u1e7b\u1e7c\5"+
		"\u03d6\u01ec\2\u1e7c\u1e7d\7\3\2\2\u1e7d\u1e7e\5\u03d4\u01eb\2\u1e7e\u1e7f"+
		"\7\4\2\2\u1e7f\u1e81\3\2\2\2\u1e80\u1e7a\3\2\2\2\u1e80\u1e7b\3\2\2\2\u1e81"+
		"\u03cf\3\2\2\2\u1e82\u1e84\7\u0144\2\2\u1e83\u1e82\3\2\2\2\u1e83\u1e84"+
		"\3\2\2\2\u1e84\u1e85\3\2\2\2\u1e85\u1e87\7d\2\2\u1e86\u1e88\5\u03d4\u01eb"+
		"\2\u1e87\u1e86\3\2\2\2\u1e87\u1e88\3\2\2\2\u1e88\u03d1\3\2\2\2\u1e89\u1e8b"+
		"\7\u0144\2\2\u1e8a\u1e89\3\2\2\2\u1e8a\u1e8b\3\2\2\2\u1e8b\u1e8c\3\2\2"+
		"\2\u1e8c\u1e93\7d\2\2\u1e8d\u1e94\5\u03d4\u01eb\2\u1e8e\u1e8f\5\u03d6"+
		"\u01ec\2\u1e8f\u1e90\7\3\2\2\u1e90\u1e91\5\u03d4\u01eb\2\u1e91\u1e92\7"+
		"\4\2\2\u1e92\u1e94\3\2\2\2\u1e93\u1e8d\3\2\2\2\u1e93\u1e8e\3\2\2\2\u1e94"+
		"\u03d3\3\2\2\2\u1e95\u1e9b\5\u0424\u0213\2\u1e96\u1e9b\7\u03c1\2\2\u1e97"+
		"\u1e9b\7\u03c2\2\2\u1e98\u1e9b\7\u03b9\2\2\u1e99\u1e9b\7\u00cb\2\2\u1e9a"+
		"\u1e95\3\2\2\2\u1e9a\u1e96\3\2\2\2\u1e9a\u1e97\3\2\2\2\u1e9a\u1e98\3\2"+
		"\2\2\u1e9a\u1e99\3\2\2\2\u1e9b\u03d5\3\2\2\2\u1e9c\u1e9d\5\u0506\u0284"+
		"\2\u1e9d\u1e9e\7\23\2\2\u1e9e\u1e9f\5\u0506\u0284\2\u1e9f\u03d7\3\2\2"+
		"\2\u1ea0\u1ea1\7\30\2\2\u1ea1\u03d9\3\2\2\2\u1ea2\u1ea3\5\u0428\u0215"+
		"\2\u1ea3\u1ea4\7\u0088\2\2\u1ea4\u1ea5\7\u01af\2\2\u1ea5\u03db\3\2\2\2"+
		"\u1ea6\u1eab\5\u03de\u01f0\2\u1ea7\u1ea8\7\26\2\2\u1ea8\u1eaa\5\u03de"+
		"\u01f0\2\u1ea9\u1ea7\3\2\2\2\u1eaa\u1ead\3\2\2\2\u1eab\u1ea9\3\2\2\2\u1eab"+
		"\u1eac\3\2\2\2\u1eac\u03dd\3\2\2\2\u1ead\u1eab\3\2\2\2\u1eae\u1eaf\7\u0148"+
		"\2\2\u1eaf\u1eb0\7\3\2\2\u1eb0\u1eb5\5\u03e0\u01f1\2\u1eb1\u1eb2\7\26"+
		"\2\2\u1eb2\u1eb4\5\u03e0\u01f1\2\u1eb3\u1eb1\3\2\2\2\u1eb4\u1eb7\3\2\2"+
		"\2\u1eb5\u1eb3\3\2\2\2\u1eb5\u1eb6\3\2\2\2\u1eb6\u1eb8\3\2\2\2\u1eb7\u1eb5"+
		"\3\2\2\2\u1eb8\u1eb9\7\4\2\2\u1eb9\u03df\3\2\2\2\u1eba\u1ebb\5\u03e2\u01f2"+
		"\2\u1ebb\u1ebc\7\61\2\2\u1ebc\u1ebd\5\u03e4\u01f3\2\u1ebd\u1ec3\3\2\2"+
		"\2\u1ebe\u1ebf\7d\2\2\u1ebf\u1ec3\5\u03e2\u01f2\2\u1ec0\u1ec1\7\u00c8"+
		"\2\2\u1ec1\u1ec3\7d\2\2\u1ec2\u1eba\3\2\2\2\u1ec2\u1ebe\3\2\2\2\u1ec2"+
		"\u1ec0\3\2\2\2\u1ec3\u03e1\3\2\2\2\u1ec4\u1ec5\7\30\2\2\u1ec5\u03e3\3"+
		"\2\2\2\u1ec6\u1ec7\7\30\2\2\u1ec7\u03e5\3\2\2\2\u1ec8\u1ecf\5\u03e8\u01f5"+
		"\2\u1ec9\u1eca\7\65\2\2\u1eca\u1ed0\7\u00b5\2\2\u1ecb\u1ecc\7\65\2\2\u1ecc"+
		"\u1ecd\7\u036b\2\2\u1ecd\u1ece\7\u014b\2\2\u1ece\u1ed0\5\u03e8\u01f5\2"+
		"\u1ecf\u1ec9\3\2\2\2\u1ecf\u1ecb\3\2\2\2\u1ed0\u03e7\3\2\2\2\u1ed1\u1eda"+
		"\5\u036e\u01b8\2\u1ed2\u1eda\5\u0424\u0213\2\u1ed3\u1eda\5\u0428\u0215"+
		"\2\u1ed4\u1eda\5\u049a\u024e\2\u1ed5\u1eda\5\u03c0\u01e1\2\u1ed6\u1eda"+
		"\5\u04f8\u027d\2\u1ed7\u1eda\5\u03ea\u01f6\2\u1ed8\u1eda\5\u0410\u0209"+
		"\2\u1ed9\u1ed1\3\2\2\2\u1ed9\u1ed2\3\2\2\2\u1ed9\u1ed3\3\2\2\2\u1ed9\u1ed4"+
		"\3\2\2\2\u1ed9\u1ed5\3\2\2\2\u1ed9\u1ed6\3\2\2\2\u1ed9\u1ed7\3\2\2\2\u1ed9"+
		"\u1ed8\3\2\2\2\u1eda\u03e9\3\2\2\2\u1edb\u1ede\7B\2\2\u1edc\u1edf\5\u03ee"+
		"\u01f8\2\u1edd\u1edf\5\u03f0\u01f9\2\u1ede\u1edc\3\2\2\2\u1ede\u1edd\3"+
		"\2\2\2\u1edf\u1ee0\3\2\2\2\u1ee0\u1ede\3\2\2\2\u1ee0\u1ee1\3\2\2\2\u1ee1"+
		"\u1ee6\3\2\2\2\u1ee2\u1ee3\7r\2\2\u1ee3\u1ee7\7\u00cb\2\2\u1ee4\u1ee5"+
		"\7r\2\2\u1ee5\u1ee7\5\u03ec\u01f7\2\u1ee6\u1ee2\3\2\2\2\u1ee6\u1ee4\3"+
		"\2\2\2\u1ee6\u1ee7\3\2\2\2\u1ee7\u1ee8\3\2\2\2\u1ee8\u1ee9\7v\2\2\u1ee9"+
		"\u03eb\3\2\2\2\u1eea\u1eeb\5\u0366\u01b4\2\u1eeb\u03ed\3\2\2\2\u1eec\u1eed"+
		"\7\u0140\2\2\u1eed\u1eee\5\u03f2\u01fa\2\u1eee\u1ef1\7\u012b\2\2\u1eef"+
		"\u1ef2\5\u03ec\u01f7\2\u1ef0\u1ef2\7\u00cb\2\2\u1ef1\u1eef\3\2\2\2\u1ef1"+
		"\u1ef0\3\2\2\2\u1ef2\u03ef\3\2\2\2\u1ef3\u1ef4\5\u0366\u01b4\2\u1ef4\u1ef5"+
		"\7\u0140\2\2\u1ef5\u1ef6\5\u0366\u01b4\2\u1ef6\u1ef9\7\u012b\2\2\u1ef7"+
		"\u1efa\5\u03ec\u01f7\2\u1ef8\u1efa\7\u00cb\2\2\u1ef9\u1ef7\3\2\2\2\u1ef9"+
		"\u1ef8\3\2\2\2\u1efa\u03f1\3\2\2\2\u1efb\u1efd\7\u00ca\2\2\u1efc\u1efb"+
		"\3\2\2\2\u1efc\u1efd\3\2\2\2\u1efd\u1f07\3\2\2\2\u1efe\u1f01\5\u03f6\u01fc"+
		"\2\u1eff\u1f00\7\u0197\2\2\u1f00\u1f02\7\32\2\2\u1f01\u1eff\3\2\2\2\u1f01"+
		"\u1f02\3\2\2\2\u1f02\u1f08\3\2\2\2\u1f03\u1f04\7\3\2\2\u1f04\u1f05\5\u03f2"+
		"\u01fa\2\u1f05\u1f06\7\4\2\2\u1f06\u1f08\3\2\2\2\u1f07\u1efe\3\2\2\2\u1f07"+
		"\u1f03\3\2\2\2\u1f08\u1f16\3\2\2\2\u1f09\u1f0b\tN\2\2\u1f0a\u1f0c\7\u00ca"+
		"\2\2\u1f0b\u1f0a\3\2\2\2\u1f0b\u1f0c\3\2\2\2\u1f0c\u1f12\3\2\2\2\u1f0d"+
		"\u1f13\5\u03f6\u01fc\2\u1f0e\u1f0f\7\3\2\2\u1f0f\u1f10\5\u03f2\u01fa\2"+
		"\u1f10\u1f11\7\4\2\2\u1f11\u1f13\3\2\2\2\u1f12\u1f0d\3\2\2\2\u1f12\u1f0e"+
		"\3\2\2\2\u1f13\u1f15\3\2\2\2\u1f14\u1f09\3\2\2\2\u1f15\u1f18\3\2\2\2\u1f16"+
		"\u1f14\3\2\2\2\u1f16\u1f17\3\2\2\2\u1f17\u03f3\3\2\2\2\u1f18\u1f16\3\2"+
		"\2\2\u1f19\u1f1a\5\u03f2\u01fa\2\u1f1a\u03f5\3\2\2\2\u1f1b\u1f26\5\u03f8"+
		"\u01fd\2\u1f1c\u1f26\5\u03fc\u01ff\2\u1f1d\u1f26\5\u03fe\u0200\2\u1f1e"+
		"\u1f26\5\u0400\u0201\2\u1f1f\u1f26\5\u0402\u0202\2\u1f20\u1f26\5\u0404"+
		"\u0203\2\u1f21\u1f26\5\u0406\u0204\2\u1f22\u1f26\5\u0408\u0205\2\u1f23"+
		"\u1f26\5\u040a\u0206\2\u1f24\u1f26\5\u040c\u0207\2\u1f25\u1f1b\3\2\2\2"+
		"\u1f25\u1f1c\3\2\2\2\u1f25\u1f1d\3\2\2\2\u1f25\u1f1e\3\2\2\2\u1f25\u1f1f"+
		"\3\2\2\2\u1f25\u1f20\3\2\2\2\u1f25\u1f21\3\2\2\2\u1f25\u1f22\3\2\2\2\u1f25"+
		"\u1f23\3\2\2\2\u1f25\u1f24\3\2\2\2\u1f26\u03f7\3\2\2\2\u1f27\u1f28\5\u0366"+
		"\u01b4\2\u1f28\u1f29\5\u0362\u01b2\2\u1f29\u1f2a\5\u0366\u01b4\2\u1f2a"+
		"\u1f30\3\2\2\2\u1f2b\u1f2c\5\u03fa\u01fe\2\u1f2c\u1f2d\5\u0362\u01b2\2"+
		"\u1f2d\u1f2e\5\u03fa\u01fe\2\u1f2e\u1f30\3\2\2\2\u1f2f\u1f27\3\2\2\2\u1f2f"+
		"\u1f2b\3\2\2\2\u1f30\u03f9\3\2\2\2\u1f31\u1f32\7\3\2\2\u1f32\u1f37\5\u0366"+
		"\u01b4\2\u1f33\u1f34\7\26\2\2\u1f34\u1f36\5\u0366\u01b4\2\u1f35\u1f33"+
		"\3\2\2\2\u1f36\u1f39\3\2\2\2\u1f37\u1f35\3\2\2\2\u1f37\u1f38\3\2\2\2\u1f38"+
		"\u1f3a\3\2\2\2\u1f39\u1f37\3\2\2\2\u1f3a\u1f3b\7\4\2\2\u1f3b\u03fb\3\2"+
		"\2\2\u1f3c\u1f3d\5\u0366\u01b4\2\u1f3d\u1f3e\5\u0362\u01b2\2\u1f3e\u1f3f"+
		"\tO\2\2\u1f3f\u1f40\7\3\2\2\u1f40\u1f41\5\u04fa\u027e\2\u1f41\u1f42\7"+
		"\4\2\2\u1f42\u1f52\3\2\2\2\u1f43\u1f44\5\u03fa\u01fe\2\u1f44\u1f45\7\b"+
		"\2\2\u1f45\u1f46\tP\2\2\u1f46\u1f47\7\3\2\2\u1f47\u1f48\5\u04fa\u027e"+
		"\2\u1f48\u1f49\7\4\2\2\u1f49\u1f52\3\2\2\2\u1f4a\u1f4b\5\u03fa\u01fe\2"+
		"\u1f4b\u1f4c\7\r\2\2\u1f4c\u1f4d\7)\2\2\u1f4d\u1f4e\7\3\2\2\u1f4e\u1f4f"+
		"\5\u04fa\u027e\2\u1f4f\u1f50\7\4\2\2\u1f50\u1f52\3\2\2\2\u1f51\u1f3c\3"+
		"\2\2\2\u1f51\u1f43\3\2\2\2\u1f51\u1f4a\3\2\2\2\u1f52\u03fd\3\2\2\2\u1f53"+
		"\u1f54\7\60\2\2\u1f54\u1f55\7\3\2\2\u1f55\u1f56\5\u040e\u0208\2\u1f56"+
		"\u1f57\7\31\2\2\u1f57\u1f58\7\4\2\2\u1f58\u03ff\3\2\2\2\u1f59\u1f5b\5"+
		"\u0366\u01b4\2\u1f5a\u1f5c\7\u00ca\2\2\u1f5b\u1f5a\3\2\2\2\u1f5b\u1f5c"+
		"\3\2\2\2\u1f5c\u1f5d\3\2\2\2\u1f5d\u1f5e\7;\2\2\u1f5e\u1f5f\5\u0366\u01b4"+
		"\2\u1f5f\u1f60\7\u014c\2\2\u1f60\u1f61\5\u0366\u01b4\2\u1f61\u0401\3\2"+
		"\2\2\u1f62\u1f63\5\u0366\u01b4\2\u1f63\u1f65\7\u00a6\2\2\u1f64\u1f66\7"+
		"\u00ca\2\2\u1f65\u1f64\3\2\2\2\u1f65\u1f66\3\2\2\2\u1f66\u1f67\3\2\2\2"+
		"\u1f67\u1f68\7j\2\2\u1f68\u1f69\7\u008a\2\2\u1f69\u1f6a\5\u0366\u01b4"+
		"\2\u1f6a\u0403\3\2\2\2\u1f6b\u1f6c\7\177\2\2\u1f6c\u1f6d\7\3\2\2\u1f6d"+
		"\u1f6e\5\u04fa\u027e\2\u1f6e\u1f6f\7\4\2\2\u1f6f\u0405\3\2\2\2\u1f70\u1f72"+
		"\5\u0366\u01b4\2\u1f71\u1f73\7\u00ca\2\2\u1f72\u1f71\3\2\2\2\u1f72\u1f73"+
		"\3\2\2\2\u1f73\u1f74\3\2\2\2\u1f74\u1f84\7\u009b\2\2\u1f75\u1f76\7\3\2"+
		"\2\u1f76\u1f77\5\u04fa\u027e\2\u1f77\u1f78\7\4\2\2\u1f78\u1f85\3\2\2\2"+
		"\u1f79\u1f7a\7\3\2\2\u1f7a\u1f7f\5\u0366\u01b4\2\u1f7b\u1f7c\7\26\2\2"+
		"\u1f7c\u1f7e\5\u0366\u01b4\2\u1f7d\u1f7b\3\2\2\2\u1f7e\u1f81\3\2\2\2\u1f7f"+
		"\u1f7d\3\2\2\2\u1f7f\u1f80\3\2\2\2\u1f80\u1f82\3\2\2\2\u1f81\u1f7f\3\2"+
		"\2\2\u1f82\u1f83\7\4\2\2\u1f83\u1f85\3\2\2\2\u1f84\u1f75\3\2\2\2\u1f84"+
		"\u1f79\3\2\2\2\u1f85\u0407\3\2\2\2\u1f86\u1f88\5\u0366\u01b4\2\u1f87\u1f89"+
		"\7\u00ca\2\2\u1f88\u1f87\3\2\2\2\u1f88\u1f89\3\2\2\2\u1f89\u1f8a\3\2\2"+
		"\2\u1f8a\u1f8b\7\u00b3\2\2\u1f8b\u1f8e\5\u0366\u01b4\2\u1f8c\u1f8d\7z"+
		"\2\2\u1f8d\u1f8f\5\u0366\u01b4\2\u1f8e\u1f8c\3\2\2\2\u1f8e\u1f8f\3\2\2"+
		"\2\u1f8f\u0409\3\2\2\2\u1f90\u1f98\5\u0366\u01b4\2\u1f91\u1f93\7\u00a6"+
		"\2\2\u1f92\u1f94\7\u00ca\2\2\u1f93\u1f92\3\2\2\2\u1f93\u1f94\3\2\2\2\u1f94"+
		"\u1f95\3\2\2\2\u1f95\u1f99\7\u00cb\2\2\u1f96\u1f99\7\u0169\2\2\u1f97\u1f99"+
		"\7\u0174\2\2\u1f98\u1f91\3\2\2\2\u1f98\u1f96\3\2\2\2\u1f98\u1f97\3\2\2"+
		"\2\u1f99\u040b\3\2\2\2\u1f9a\u1f9b\7\u0147\2\2\u1f9b\u1f9c\7\3\2\2\u1f9c"+
		"\u1faa\7\30\2\2\u1f9d\u1fa0\7\u017c\2\2\u1f9e\u1f9f\7>\2\2\u1f9f\u1fa1"+
		"\7\u0186\2\2\u1fa0\u1f9e\3\2\2\2\u1fa0\u1fa1\3\2\2\2\u1fa1\u1fa2\3\2\2"+
		"\2\u1fa2\u1fa7\5\u0366\u01b4\2\u1fa3\u1fa4\7\26\2\2\u1fa4\u1fa6\5\u0366"+
		"\u01b4\2\u1fa5\u1fa3\3\2\2\2\u1fa6\u1fa9\3\2\2\2\u1fa7\u1fa5\3\2\2\2\u1fa7"+
		"\u1fa8\3\2\2\2\u1fa8\u1fab\3\2\2\2\u1fa9\u1fa7\3\2\2\2\u1faa\u1f9d\3\2"+
		"\2\2\u1faa\u1fab\3\2\2\2\u1fab\u1fac\3\2\2\2\u1fac\u1fad\7\4\2\2\u1fad"+
		"\u040d\3\2\2\2\u1fae\u1fb1\5\u04a2\u0252\2\u1faf\u1fb1\5\u0410\u0209\2"+
		"\u1fb0\u1fae\3\2\2\2\u1fb0\u1faf\3\2\2\2\u1fb1\u040f\3\2\2\2\u1fb2\u1fb3"+
		"\7C\2\2\u1fb3\u1fb7\7\3\2\2\u1fb4\u1fb8\5\u0366\u01b4\2\u1fb5\u1fb8\7"+
		"\u00cb\2\2\u1fb6\u1fb8\5\u0412\u020a\2\u1fb7\u1fb4\3\2\2\2\u1fb7\u1fb5"+
		"\3\2\2\2\u1fb7\u1fb6\3\2\2\2\u1fb8\u1fb9\3\2\2\2\u1fb9\u1fba\7\61\2\2"+
		"\u1fba\u1fbb\5\u0414\u020b\2\u1fbb\u1fbc\7\4\2\2\u1fbc\u0411\3\2\2\2\u1fbd"+
		"\u1fbe\7\7\2\2\u1fbe\u0413\3\2\2\2\u1fbf\u1fc3\5\u0416\u020c\2\u1fc0\u1fc3"+
		"\5\u0420\u0211\2\u1fc1\u1fc3\5\u0422\u0212\2\u1fc2\u1fbf\3\2\2\2\u1fc2"+
		"\u1fc0\3\2\2\2\u1fc2\u1fc1\3\2\2\2\u1fc3\u0415\3\2\2\2\u1fc4\u2032\7\u035b"+
		"\2\2\u1fc5\u2032\7\u031e\2\2\u1fc6\u2032\7\u031d\2\2\u1fc7\u2032\7\u02d1"+
		"\2\2\u1fc8\u1fcc\t\65\2\2\u1fc9\u1fcd\5\u0418\u020d\2\u1fca\u1fcb\7\3"+
		"\2\2\u1fcb\u1fcd\7\4\2\2\u1fcc\u1fc9\3\2\2\2\u1fcc\u1fca\3\2\2\2\u1fcd"+
		"\u2032\3\2\2\2\u1fce\u1fd2\7\u02f0\2\2\u1fcf\u1fd3\5\u0418\u020d\2\u1fd0"+
		"\u1fd1\7\3\2\2\u1fd1\u1fd3\7\4\2\2\u1fd2\u1fcf\3\2\2\2\u1fd2\u1fd0\3\2"+
		"\2\2\u1fd3\u2032\3\2\2\2\u1fd4\u1fd8\7\u030c\2\2\u1fd5\u1fd9\5\u0418\u020d"+
		"\2\u1fd6\u1fd7\7\3\2\2\u1fd7\u1fd9\7\4\2\2\u1fd8\u1fd5\3\2\2\2\u1fd8\u1fd6"+
		"\3\2\2\2\u1fd9\u2032\3\2\2\2\u1fda\u2032\7\u034a\2\2\u1fdb\u1fdd\7m\2"+
		"\2\u1fdc\u1fde\7\u00e6\2\2\u1fdd\u1fdc\3\2\2\2\u1fdd\u1fde\3\2\2\2\u1fde"+
		"\u2032\3\2\2\2\u1fdf\u1fe1\t\66\2\2\u1fe0\u1fe2\7\u01a9\2\2\u1fe1\u1fe0"+
		"\3\2\2\2\u1fe1\u1fe2\3\2\2\2\u1fe2\u1fe5\3\2\2\2\u1fe3\u1fe5\7\u0383\2"+
		"\2\u1fe4\u1fdf\3\2\2\2\u1fe4\u1fe3\3\2\2\2\u1fe5\u1fe9\3\2\2\2\u1fe6\u1fea"+
		"\5\u041a\u020e\2\u1fe7\u1fe8\7\3\2\2\u1fe8\u1fea\7\4\2\2\u1fe9\u1fe6\3"+
		"\2\2\2\u1fe9\u1fe7\3\2\2\2\u1fe9\u1fea\3\2\2\2\u1fea\u1fec\3\2\2\2\u1feb"+
		"\u1fed\5\u041c\u020f\2\u1fec\u1feb\3\2\2\2\u1fec\u1fed\3\2\2\2\u1fed\u2032"+
		"\3\2\2\2\u1fee\u1fef\t\66\2\2\u1fef\u1ff0\7\u016b\2\2\u1ff0\u1ff3\7\u0178"+
		"\2\2\u1ff1\u1ff3\7\u02e2\2\2\u1ff2\u1fee\3\2\2\2\u1ff2\u1ff1\3\2\2\2\u1ff3"+
		"\u1ff7\3\2\2\2\u1ff4\u1ff8\5\u041a\u020e\2\u1ff5\u1ff6\7\3\2\2\u1ff6\u1ff8"+
		"\7\4\2\2\u1ff7\u1ff4\3\2\2\2\u1ff7\u1ff5\3\2\2\2\u1ff7\u1ff8\3\2\2\2\u1ff8"+
		"\u1ffa\3\2\2\2\u1ff9\u1ffb\5\u041c\u020f\2\u1ffa\u1ff9\3\2\2\2\u1ffa\u1ffb"+
		"\3\2\2\2\u1ffb\u2032\3\2\2\2\u1ffc\u2000\t\67\2\2\u1ffd\u2001\5\u041a"+
		"\u020e\2\u1ffe\u1fff\7\3\2\2\u1fff\u2001\7\4\2\2\u2000\u1ffd\3\2\2\2\u2000"+
		"\u1ffe\3\2\2\2\u2000\u2001\3\2\2\2\u2001\u2003\3\2\2\2\u2002\u2004\5\u041c"+
		"\u020f\2\u2003\u2002\3\2\2\2\u2003\u2004\3\2\2\2\u2004\u2032\3\2\2\2\u2005"+
		"\u2009\7\u02d2\2\2\u2006\u200a\5\u0418\u020d\2\u2007\u2008\7\3\2\2\u2008"+
		"\u200a\7\4\2\2\u2009\u2006\3\2\2\2\u2009\u2007\3\2\2\2\u2009\u200a\3\2"+
		"\2\2\u200a\u2032\3\2\2\2\u200b\u200d\7\u02d2\2\2\u200c\u200e\7\u01a9\2"+
		"\2\u200d\u200c\3\2\2\2\u200d\u200e\3\2\2\2\u200e\u2011\3\2\2\2\u200f\u2011"+
		"\7\u0382\2\2\u2010\u200b\3\2\2\2\u2010\u200f\3\2\2\2\u2011\u2015\3\2\2"+
		"\2\u2012\u2016\5\u0418\u020d\2\u2013\u2014\7\3\2\2\u2014\u2016\7\4\2\2"+
		"\u2015\u2012\3\2\2\2\u2015\u2013\3\2\2\2\u2015\u2016\3\2\2\2\u2016\u2032"+
		"\3\2\2\2\u2017\u2018\7\u02d2\2\2\u2018\u2019\7\u016b\2\2\u2019\u201c\7"+
		"\u0178\2\2\u201a\u201c\7\u02d8\2\2\u201b\u2017\3\2\2\2\u201b\u201a\3\2"+
		"\2\2\u201c\u2022\3\2\2\2\u201d\u201e\7\3\2\2\u201e\u201f\7\31\2\2\u201f"+
		"\u2020\7\u03cc\2\2\u2020\u2021\3\2\2\2\u2021\u2023\7\4\2\2\u2022\u201d"+
		"\3\2\2\2\u2022\u2023\3\2\2\2\u2023\u2032\3\2\2\2\u2024\u2032\7\u02e8\2"+
		"\2\u2025\u2032\7\u036b\2\2\u2026\u2028\7\u036c\2\2\u2027\u2029\5\u0418"+
		"\u020d\2\u2028\u2027\3\2\2\2\u2028\u2029\3\2\2\2\u2029\u202d\3\2\2\2\u202a"+
		"\u202b\t\5\2\2\u202b\u202c\7\u036b\2\2\u202c\u202e\7\u014b\2\2\u202d\u202a"+
		"\3\2\2\2\u202d\u202e\3\2\2\2\u202e\u2032\3\2\2\2\u202f\u2032\7\u0354\2"+
		"\2\u2030\u2032\7\u01ab\2\2\u2031\u1fc4\3\2\2\2\u2031\u1fc5\3\2\2\2\u2031"+
		"\u1fc6\3\2\2\2\u2031\u1fc7\3\2\2\2\u2031\u1fc8\3\2\2\2\u2031\u1fce\3\2"+
		"\2\2\u2031\u1fd4\3\2\2\2\u2031\u1fda\3\2\2\2\u2031\u1fdb\3\2\2\2\u2031"+
		"\u1fe4\3\2\2\2\u2031\u1ff2\3\2\2\2\u2031\u1ffc\3\2\2\2\u2031\u2005\3\2"+
		"\2\2\u2031\u2010\3\2\2\2\u2031\u201b\3\2\2\2\u2031\u2024\3\2\2\2\u2031"+
		"\u2025\3\2\2\2\u2031\u2026\3\2\2\2\u2031\u202f\3\2\2\2\u2031\u2030\3\2"+
		"\2\2\u2032\u0417\3\2\2\2\u2033\u2034\7\3\2\2\u2034\u2037\7\31\2\2\u2035"+
		"\u2036\7\26\2\2\u2036\u2038\7\31\2\2\u2037\u2035\3\2\2\2\u2037\u2038\3"+
		"\2\2\2\u2038\u2039\3\2\2\2\u2039\u203a\7\4\2\2\u203a\u0419\3\2\2\2\u203b"+
		"\u203c\7\3\2\2\u203c\u203e\t=\2\2\u203d\u203f\tQ\2\2\u203e\u203d\3\2\2"+
		"\2\u203e\u203f\3\2\2\2\u203f\u2040\3\2\2\2\u2040\u2041\7\4\2\2\u2041\u041b"+
		"\3\2\2\2\u2042\u2048\7D\2\2\u2043\u2045\t!\2\2\u2044\u2046\5\u041e\u0210"+
		"\2\u2045\u2044\3\2\2\2\u2045\u2046\3\2\2\2\u2046\u2049\3\2\2\2\u2047\u2049"+
		"\7\31\2\2\u2048\u2043\3\2\2\2\u2048\u2047\3\2\2\2\u2049\u041d\3\2\2\2"+
		"\u204a\u204b\7\u0088\2\2\u204b\u204c\tR\2\2\u204c\u204d\7^\2\2\u204d\u041f"+
		"\3\2\2\2\u204e\u204f\5\u0438\u021d\2\u204f\u2050\7\23\2\2\u2050\u2052"+
		"\3\2\2\2\u2051\u204e\3\2\2\2\u2051\u2052\3\2\2\2\u2052\u2053\3\2\2\2\u2053"+
		"\u2054\5\u0506\u0284\2\u2054\u0421\3\2\2\2\u2055\u2056\5\u0506\u0284\2"+
		"\u2056\u0423\3\2\2\2\u2057\u2058\tS\2\2\u2058\u0425\3\2\2\2\u2059\u205a"+
		"\7\31\2\2\u205a\u0427\3\2\2\2\u205b\u205c\5\u0434\u021b\2\u205c\u205d"+
		"\7\23\2\2\u205d\u205f\3\2\2\2\u205e\u205b\3\2\2\2\u205e\u205f\3\2\2\2"+
		"\u205f\u2060\3\2\2\2\u2060\u2061\5\u0506\u0284\2\u2061\u0429\3\2\2\2\u2062"+
		"\u2063\5\u0428\u0215\2\u2063\u042b\3\2\2\2\u2064\u2065\5\u0428\u0215\2"+
		"\u2065\u042d\3\2\2\2\u2066\u2067\5\u0506\u0284\2\u2067\u042f\3\2\2\2\u2068"+
		"\u2069\5\u0506\u0284\2\u2069\u0431\3\2\2\2\u206a\u206b\5\u0506\u0284\2"+
		"\u206b\u0433\3\2\2\2\u206c\u206d\5\u0506\u0284\2\u206d\u0435\3\2\2\2\u206e"+
		"\u2072\5\u0506\u0284\2\u206f\u2072\7\32\2\2\u2070\u2072\7\31\2\2\u2071"+
		"\u206e\3\2\2\2\u2071\u206f\3\2\2\2\u2071\u2070\3\2\2\2\u2072\u207d\3\2"+
		"\2\2\u2073\u2075\7\23\2\2\u2074\u2073\3\2\2\2\u2074\u2075\3\2\2\2\u2075"+
		"\u2079\3\2\2\2\u2076\u207a\5\u0506\u0284\2\u2077\u207a\7\32\2\2\u2078"+
		"\u207a\7\31\2\2\u2079\u2076\3\2\2\2\u2079\u2077\3\2\2\2\u2079\u2078\3"+
		"\2\2\2\u207a\u207c\3\2\2\2\u207b\u2074\3\2\2\2\u207c\u207f\3\2\2\2\u207d"+
		"\u207b\3\2\2\2\u207d\u207e\3\2\2\2\u207e\u0437\3\2\2\2\u207f\u207d\3\2"+
		"\2\2\u2080\u2081\5\u0506\u0284\2\u2081\u0439\3\2\2\2\u2082\u2083\5\u0436"+
		"\u021c\2\u2083\u2084\7\23\2\2\u2084\u2085\5\u0438\u021d\2\u2085\u2086"+
		"\7\23\2\2\u2086\u208b\3\2\2\2\u2087\u2088\5\u0438\u021d\2\u2088\u2089"+
		"\7\23\2\2\u2089\u208b\3\2\2\2\u208a\u2082\3\2\2\2\u208a\u2087\3\2\2\2"+
		"\u208a\u208b\3\2\2\2\u208b\u208c\3\2\2\2\u208c\u208d\5\u0506\u0284\2\u208d"+
		"\u043b\3\2\2\2\u208e\u208f\5\u0436\u021c\2\u208f\u2090\7\23\2\2\u2090"+
		"\u2091\5\u0438\u021d\2\u2091\u2092\7\23\2\2\u2092\u2097\3\2\2\2\u2093"+
		"\u2094\5\u0438\u021d\2\u2094\u2095\7\23\2\2\u2095\u2097\3\2\2\2\u2096"+
		"\u208e\3\2\2\2\u2096\u2093\3\2\2\2\u2096\u2097\3\2\2\2\u2097\u2098\3\2"+
		"\2\2\u2098\u2099\5\u0506\u0284\2\u2099\u043d\3\2\2\2\u209a\u209b\5\u0436"+
		"\u021c\2\u209b\u209c\7\23\2\2\u209c\u209d\5\u0438\u021d\2\u209d\u209e"+
		"\7\23\2\2\u209e\u20a3\3\2\2\2\u209f\u20a0\5\u0438\u021d\2\u20a0\u20a1"+
		"\7\23\2\2\u20a1\u20a3\3\2\2\2\u20a2\u209a\3\2\2\2\u20a2\u209f\3\2\2\2"+
		"\u20a2\u20a3\3\2\2\2\u20a3\u20a4\3\2\2\2\u20a4\u20a5\5\u0506\u0284\2\u20a5"+
		"\u043f\3\2\2\2\u20a6\u20a7\5\u043a\u021e\2\u20a7\u0441\3\2\2\2\u20a8\u20a9"+
		"\5\u043a\u021e\2\u20a9\u0443\3\2\2\2\u20aa\u20ab\5\u043a\u021e\2\u20ab"+
		"\u0445\3\2\2\2\u20ac\u20ad\5\u0436\u021c\2\u20ad\u20ae\7\23\2\2\u20ae"+
		"\u20af\5\u0438\u021d\2\u20af\u20b0\7\23\2\2\u20b0\u20b5\3\2\2\2\u20b1"+
		"\u20b2\5\u0438\u021d\2\u20b2\u20b3\7\23\2\2\u20b3\u20b5\3\2\2\2\u20b4"+
		"\u20ac\3\2\2\2\u20b4\u20b1\3\2\2\2\u20b4\u20b5\3\2\2\2\u20b5\u20b6\3\2"+
		"\2\2\u20b6\u20b8\5\u0506\u0284\2\u20b7\u20b9\5\u0434\u021b\2\u20b8\u20b7"+
		"\3\2\2\2\u20b8\u20b9\3\2\2\2\u20b9\u0447\3\2\2\2\u20ba\u20bb\5\u0506\u0284"+
		"\2\u20bb\u0449\3\2\2\2\u20bc\u20bd\5\u0506\u0284\2\u20bd\u044b\3\2\2\2"+
		"\u20be\u20bf\5\u0506\u0284\2\u20bf\u044d\3\2\2\2\u20c0\u20c1\5\u0438\u021d"+
		"\2\u20c1\u20c2\7\23\2\2\u20c2\u20c4\3\2\2\2\u20c3\u20c0\3\2\2\2\u20c3"+
		"\u20c4\3\2\2\2\u20c4\u20c5\3\2\2\2\u20c5\u20c6\5\u0506\u0284\2\u20c6\u044f"+
		"\3\2\2\2\u20c7\u20c8\5\u0438\u021d\2\u20c8\u20c9\7\23\2\2\u20c9\u20cb"+
		"\3\2\2\2\u20ca\u20c7\3\2\2\2\u20ca\u20cb\3\2\2\2\u20cb\u20cc\3\2\2\2\u20cc"+
		"\u20cd\5\u0506\u0284\2\u20cd\u0451\3\2\2\2\u20ce\u20cf\5\u0438\u021d\2"+
		"\u20cf\u20d0\7\23\2\2\u20d0\u20d2\3\2\2\2\u20d1\u20ce\3\2\2\2\u20d1\u20d2"+
		"\3\2\2\2\u20d2\u20d3\3\2\2\2\u20d3\u20d4\5\u0506\u0284\2\u20d4\u0453\3"+
		"\2\2\2\u20d5\u20d6\5\u0438\u021d\2\u20d6\u20d7\7\23\2\2\u20d7\u20d9\3"+
		"\2\2\2\u20d8\u20d5\3\2\2\2\u20d8\u20d9\3\2\2\2\u20d9\u20da\3\2\2\2\u20da"+
		"\u20db\5\u0506\u0284\2\u20db\u0455\3\2\2\2\u20dc\u20dd\5\u0506\u0284\2"+
		"\u20dd\u0457\3\2\2\2\u20de\u20df\5\u0506\u0284\2\u20df\u0459\3\2\2\2\u20e0"+
		"\u20e4\5\u0506\u0284\2\u20e1\u20e4\7\32\2\2\u20e2\u20e4\7\31\2\2\u20e3"+
		"\u20e0\3\2\2\2\u20e3\u20e1\3\2\2\2\u20e3\u20e2\3\2\2\2\u20e4\u20ef\3\2"+
		"\2\2\u20e5\u20e7\7\23\2\2\u20e6\u20e5\3\2\2\2\u20e6\u20e7\3\2\2\2\u20e7"+
		"\u20eb\3\2\2\2\u20e8\u20ec\5\u0506\u0284\2\u20e9\u20ec\7\32\2\2\u20ea"+
		"\u20ec\7\31\2\2\u20eb\u20e8\3\2\2\2\u20eb\u20e9\3\2\2\2\u20eb\u20ea\3"+
		"\2\2\2\u20ec\u20ee\3\2\2\2\u20ed\u20e6\3\2\2\2\u20ee\u20f1\3\2\2\2\u20ef"+
		"\u20ed\3\2\2\2\u20ef\u20f0\3\2\2\2\u20f0\u045b\3\2\2\2\u20f1\u20ef\3\2"+
		"\2\2\u20f2\u20f6\5\u0506\u0284\2\u20f3\u20f6\7\32\2\2\u20f4\u20f6\7\31"+
		"\2\2\u20f5\u20f2\3\2\2\2\u20f5\u20f3\3\2\2\2\u20f5\u20f4\3\2\2\2\u20f6"+
		"\u2101\3\2\2\2\u20f7\u20f9\7\23\2\2\u20f8\u20f7\3\2\2\2\u20f8\u20f9\3"+
		"\2\2\2\u20f9\u20fd\3\2\2\2\u20fa\u20fe\5\u0506\u0284\2\u20fb\u20fe\7\32"+
		"\2\2\u20fc\u20fe\7\31\2\2\u20fd\u20fa\3\2\2\2\u20fd\u20fb\3\2\2\2\u20fd"+
		"\u20fc\3\2\2\2\u20fe\u2100\3\2\2\2\u20ff\u20f8\3\2\2\2\u2100\u2103\3\2"+
		"\2\2\u2101\u20ff\3\2\2\2\u2101\u2102\3\2\2\2\u2102\u045d\3\2\2\2\u2103"+
		"\u2101\3\2\2\2\u2104\u2105\5\u0438\u021d\2\u2105\u2106\7\23\2\2\u2106"+
		"\u2108\3\2\2\2\u2107\u2104\3\2\2\2\u2107\u2108\3\2\2\2\u2108\u2109\3\2"+
		"\2\2\u2109\u210a\5\u0506\u0284\2\u210a\u045f\3\2\2\2\u210b\u210c\5\u0438"+
		"\u021d\2\u210c\u210d\7\23\2\2\u210d\u210f\3\2\2\2\u210e\u210b\3\2\2\2"+
		"\u210e\u210f\3\2\2\2\u210f\u2110\3\2\2\2\u2110\u2111\5\u0506\u0284\2\u2111"+
		"\u0461\3\2\2\2\u2112\u2113\5\u0438\u021d\2\u2113\u2114\7\23\2\2\u2114"+
		"\u2116\3\2\2\2\u2115\u2112\3\2\2\2\u2115\u2116\3\2\2\2\u2116\u2117\3\2"+
		"\2\2\u2117\u2118\5\u0506\u0284\2\u2118\u0463\3\2\2\2\u2119\u211a\5\u0436"+
		"\u021c\2\u211a\u211b\7\23\2\2\u211b\u211c\5\u0438\u021d\2\u211c\u211d"+
		"\7\23\2\2\u211d\u2122\3\2\2\2\u211e\u211f\5\u0438\u021d\2\u211f\u2120"+
		"\7\23\2\2\u2120\u2122\3\2\2\2\u2121\u2119\3\2\2\2\u2121\u211e\3\2\2\2"+
		"\u2121\u2122\3\2\2\2\u2122\u2123\3\2\2\2\u2123\u2124\5\u0506\u0284\2\u2124"+
		"\u0465\3\2\2\2\u2125\u2126\5\u0438\u021d\2\u2126\u2127\7\23\2\2\u2127"+
		"\u2129\3\2\2\2\u2128\u2125\3\2\2\2\u2128\u2129\3\2\2\2\u2129\u212a\3\2"+
		"\2\2\u212a\u212b\5\u0506\u0284\2\u212b\u0467\3\2\2\2\u212c\u212d\5\u0506"+
		"\u0284\2\u212d\u0469\3\2\2\2\u212e\u212f\5\u0506\u0284\2\u212f\u046b\3"+
		"\2\2\2\u2130\u2131\5\u0506\u0284\2\u2131\u046d\3\2\2\2\u2132\u2133\5\u0506"+
		"\u0284\2\u2133\u046f\3\2\2\2\u2134\u2135\5\u0506\u0284\2\u2135\u0471\3"+
		"\2\2\2\u2136\u2137\5\u0506\u0284\2\u2137\u0473\3\2\2\2\u2138\u2139\5\u0506"+
		"\u0284\2\u2139\u0475\3\2\2\2\u213a\u213b\5\u0506\u0284\2\u213b\u0477\3"+
		"\2\2\2\u213c\u213d\5\u0506\u0284\2\u213d\u0479\3\2\2\2\u213e\u213f\5\u0506"+
		"\u0284\2\u213f\u047b\3\2\2\2\u2140\u2141\5\u0506\u0284\2\u2141\u047d\3"+
		"\2\2\2\u2142\u2143\5\u0506\u0284\2\u2143\u047f\3\2\2\2\u2144\u2145\7\30"+
		"\2\2\u2145\u0481\3\2\2\2\u2146\u2147\7\30\2\2\u2147\u0483\3\2\2\2\u2148"+
		"\u2149\7\30\2\2\u2149\u0485\3\2\2\2\u214a\u214b\7\30\2\2\u214b\u0487\3"+
		"\2\2\2\u214c\u214d\5\u0506\u0284\2\u214d\u0489\3\2\2\2\u214e\u214f\5\u0506"+
		"\u0284\2\u214f\u048b\3\2\2\2\u2150\u2151\5\u0506\u0284\2\u2151\u048d\3"+
		"\2\2\2\u2152\u2153\5\u0506\u0284\2\u2153\u048f\3\2\2\2\u2154\u2155\5\u0506"+
		"\u0284\2\u2155\u0491\3\2\2\2\u2156\u2157\5\u0506\u0284\2\u2157\u0493\3"+
		"\2\2\2\u2158\u215b\5\u0506\u0284\2\u2159\u215b\7\30\2\2\u215a\u2158\3"+
		"\2\2\2\u215a\u2159\3\2\2\2\u215b\u0495\3\2\2\2\u215c\u215d\5\u0438\u021d"+
		"\2\u215d\u215e\7\23\2\2\u215e\u2160\3\2\2\2\u215f\u215c\3\2\2\2\u215f"+
		"\u2160\3\2\2\2\u2160\u2161\3\2\2\2\u2161\u2162\5\u0506\u0284\2\u2162\u0497"+
		"\3\2\2\2\u2163\u2164\5\u0438\u021d\2\u2164\u2165\7\23\2\2\u2165\u2167"+
		"\3\2\2\2\u2166\u2163\3\2\2\2\u2166\u2167\3\2\2\2\u2167\u2168\3\2\2\2\u2168"+
		"\u2169\5\u0506\u0284\2\u2169\u0499\3\2\2\2\u216a\u216e\7\24\2\2\u216b"+
		"\u216c\5\u049e\u0250\2\u216c\u216d\7\23\2\2\u216d\u216f\3\2\2\2\u216e"+
		"\u216b\3\2\2\2\u216e\u216f\3\2\2\2\u216f\u2170\3\2\2\2\u2170\u217b\5\u049c"+
		"\u024f\2\u2171\u2173\7\u0167\2\2\u2172\u2171\3\2\2\2\u2172\u2173\3\2\2"+
		"\2\u2173\u2174\3\2\2\2\u2174\u2178\7\24\2\2\u2175\u2176\5\u049e\u0250"+
		"\2\u2176\u2177\7\23\2\2\u2177\u2179\3\2\2\2\u2178\u2175\3\2\2\2\u2178"+
		"\u2179\3\2\2\2\u2179\u217a\3\2\2\2\u217a\u217c\5\u049c\u024f\2\u217b\u2172"+
		"\3\2\2\2\u217b\u217c\3\2\2\2\u217c\u049b\3\2\2\2\u217d\u217e\5\u0506\u0284"+
		"\2\u217e\u049d\3\2\2\2\u217f\u2180\5\u0506\u0284\2\u2180\u049f\3\2\2\2"+
		"\u2181\u2182\5\u0506\u0284\2\u2182\u04a1\3\2\2\2\u2183\u2184\5\u0438\u021d"+
		"\2\u2184\u2185\7\23\2\2\u2185\u2187\3\2\2\2\u2186\u2183\3\2\2\2\u2186"+
		"\u2187\3\2\2\2\u2187\u2188\3\2\2\2\u2188\u218b\5\u0506\u0284\2\u2189\u218b"+
		"\5\u049a\u024e\2\u218a\u2186\3\2\2\2\u218a\u2189\3\2\2\2\u218b\u04a3\3"+
		"\2\2\2\u218c\u218f\7\u00a5\2\2\u218d\u2190\5\u04a2\u0252\2\u218e\u2190"+
		"\5\u037c\u01bf\2\u218f\u218d\3\2\2\2\u218f\u218e\3\2\2\2\u2190\u2195\3"+
		"\2\2\2\u2191\u2192\7\26\2\2\u2192\u2194\5\u04a2\u0252\2\u2193\u2191\3"+
		"\2\2\2\u2194\u2197\3\2\2\2\u2195\u2193\3\2\2\2\u2195\u2196\3\2\2\2\u2196"+
		"\u04a5\3\2\2\2\u2197\u2195\3\2\2\2\u2198\u219a\7\61\2\2\u2199\u2198\3"+
		"\2\2\2\u2199\u219a\3\2\2\2\u219a\u219b\3\2\2\2\u219b\u21a7\5\u0434\u021b"+
		"\2\u219c\u219d\7\3\2\2\u219d\u21a2\5\u042e\u0218\2\u219e\u219f\7\26\2"+
		"\2\u219f\u21a1\5\u042e\u0218\2\u21a0\u219e\3\2\2\2\u21a1\u21a4\3\2\2\2"+
		"\u21a2\u21a0\3\2\2\2\u21a2\u21a3\3\2\2\2\u21a3\u21a5\3\2\2\2\u21a4\u21a2"+
		"\3\2\2\2\u21a5\u21a6\7\4\2\2\u21a6\u21a8\3\2\2\2\u21a7\u219c\3\2\2\2\u21a7"+
		"\u21a8\3\2\2\2\u21a8\u04a7\3\2\2\2\u21a9\u21b8\7\u008a\2\2\u21aa\u21ac"+
		"\7\3\2\2\u21ab\u21aa\3\2\2\2\u21ac\u21af\3\2\2\2\u21ad\u21ab\3\2\2\2\u21ad"+
		"\u21ae\3\2\2\2\u21ae\u21b0\3\2\2\2\u21af\u21ad\3\2\2\2\u21b0\u21b4\5\u04aa"+
		"\u0256\2\u21b1\u21b3\7\4\2\2\u21b2\u21b1\3\2\2\2\u21b3\u21b6\3\2\2\2\u21b4"+
		"\u21b2\3\2\2\2\u21b4\u21b5\3\2\2\2\u21b5\u21b9\3\2\2\2\u21b6\u21b4\3\2"+
		"\2\2\u21b7\u21b9\5\u04c0\u0261\2\u21b8\u21ad\3\2\2\2\u21b8\u21b7\3\2\2"+
		"\2\u21b9\u21cd\3\2\2\2\u21ba\u21c9\7\26\2\2\u21bb\u21bd\7\3\2\2\u21bc"+
		"\u21bb\3\2\2\2\u21bd\u21c0\3\2\2\2\u21be\u21bc\3\2\2\2\u21be\u21bf\3\2"+
		"\2\2\u21bf\u21c1\3\2\2\2\u21c0\u21be\3\2\2\2\u21c1\u21c5\5\u04aa\u0256"+
		"\2\u21c2\u21c4\7\4\2\2\u21c3\u21c2\3\2\2\2\u21c4\u21c7\3\2\2\2\u21c5\u21c3"+
		"\3\2\2\2\u21c5\u21c6\3\2\2\2\u21c6\u21ca\3\2\2\2\u21c7\u21c5\3\2\2\2\u21c8"+
		"\u21ca\5\u04c0\u0261\2\u21c9\u21be\3\2\2\2\u21c9\u21c8\3\2\2\2\u21ca\u21cc"+
		"\3\2\2\2\u21cb\u21ba\3\2\2\2\u21cc\u21cf\3\2\2\2\u21cd\u21cb\3\2\2\2\u21cd"+
		"\u21ce\3\2\2\2\u21ce\u04a9\3\2\2\2\u21cf\u21cd\3\2\2\2\u21d0\u2257\5\u04ac"+
		"\u0257\2\u21d1\u2257\5\u04b2\u025a\2\u21d2\u2257\5\u04b4\u025b\2\u21d3"+
		"\u2257\5\u04b6\u025c\2\u21d4\u2257\5\u04bc\u025f\2\u21d5\u2257\5\u04be"+
		"\u0260\2\u21d6\u2257\5\u04c0\u0261\2\u21d7\u2208\5\u04ac\u0257\2\u21d8"+
		"\u2208\5\u04b2\u025a\2\u21d9\u2208\5\u04b6\u025c\2\u21da\u2208\5\u04bc"+
		"\u025f\2\u21db\u2208\5\u04be\u0260\2\u21dc\u2208\5\u04c0\u0261\2\u21dd"+
		"\u21df\7\3\2\2\u21de\u21dd\3\2\2\2\u21df\u21e0\3\2\2\2\u21e0\u21de\3\2"+
		"\2\2\u21e0\u21e1\3\2\2\2\u21e1\u21e2\3\2\2\2\u21e2\u21e4\5\u04aa\u0256"+
		"\2\u21e3\u21e5\7\4\2\2\u21e4\u21e3\3\2\2\2\u21e5\u21e6\3\2\2\2\u21e6\u21e4"+
		"\3\2\2\2\u21e6\u21e7\3\2\2\2\u21e7\u2208\3\2\2\2\u21e8\u21fa\5\u04ac\u0257"+
		"\2\u21e9\u21fa\5\u04b2\u025a\2\u21ea\u21fa\5\u04b6\u025c\2\u21eb\u21fa"+
		"\5\u04bc\u025f\2\u21ec\u21fa\5\u04be\u0260\2\u21ed\u21ef\7\3\2\2\u21ee"+
		"\u21ed\3\2\2\2\u21ef\u21f0\3\2\2\2\u21f0\u21ee\3\2\2\2\u21f0\u21f1\3\2"+
		"\2\2\u21f1\u21f2\3\2\2\2\u21f2\u21f4\5\u04aa\u0256\2\u21f3\u21f5\7\4\2"+
		"\2\u21f4\u21f3\3\2\2\2\u21f5\u21f6\3\2\2\2\u21f6\u21f4\3\2\2\2\u21f6\u21f7"+
		"\3\2\2\2\u21f7\u21fa\3\2\2\2\u21f8\u21fa\5\u04c0\u0261\2\u21f9\u21e8\3"+
		"\2\2\2\u21f9\u21e9\3\2\2\2\u21f9\u21ea\3\2\2\2\u21f9\u21eb\3\2\2\2\u21f9"+
		"\u21ec\3\2\2\2\u21f9\u21ee\3\2\2\2\u21f9\u21f8\3\2\2\2\u21fa\u2200\3\2"+
		"\2\2\u21fb\u2201\7\u00a0\2\2\u21fc\u21fe\tT\2\2\u21fd\u21ff\7\u00da\2"+
		"\2\u21fe\u21fd\3\2\2\2\u21fe\u21ff\3\2\2\2\u21ff\u2201\3\2\2\2\u2200\u21fb"+
		"\3\2\2\2\u2200\u21fc\3\2\2\2\u2201\u2202\3\2\2\2\u2202\u2203\7\u00aa\2"+
		"\2\u2203\u2204\5\u04aa\u0256\2\u2204\u2205\7\u00d2\2\2\u2205\u2206\5\u04c2"+
		"\u0262\2\u2206\u2208\3\2\2\2\u2207\u21d7\3\2\2\2\u2207\u21d8\3\2\2\2\u2207"+
		"\u21d9\3\2\2\2\u2207\u21da\3\2\2\2\u2207\u21db\3\2\2\2\u2207\u21dc\3\2"+
		"\2\2\u2207\u21de\3\2\2\2\u2207\u21f9\3\2\2\2\u2208\u220e\3\2\2\2\u2209"+
		"\u220f\7\u00a0\2\2\u220a\u220c\tT\2\2\u220b\u220d\7\u00da\2\2\u220c\u220b"+
		"\3\2\2\2\u220c\u220d\3\2\2\2\u220d\u220f\3\2\2\2\u220e\u2209\3\2\2\2\u220e"+
		"\u220a\3\2\2\2\u220f\u2210\3\2\2\2\u2210\u2211\7\u00aa\2\2\u2211\u2212"+
		"\5\u04aa\u0256\2\u2212\u2213\7\u00d2\2\2\u2213\u2214\5\u04c2\u0262\2\u2214"+
		"\u2257\3\2\2\2\u2215\u2246\5\u04ac\u0257\2\u2216\u2246\5\u04b2\u025a\2"+
		"\u2217\u2246\5\u04b6\u025c\2\u2218\u2246\5\u04bc\u025f\2\u2219\u2246\5"+
		"\u04be\u0260\2\u221a\u2246\5\u04c0\u0261\2\u221b\u221d\7\3\2\2\u221c\u221b"+
		"\3\2\2\2\u221d\u221e\3\2\2\2\u221e\u221c\3\2\2\2\u221e\u221f\3\2\2\2\u221f"+
		"\u2220\3\2\2\2\u2220\u2222\5\u04aa\u0256\2\u2221\u2223\7\4\2\2\u2222\u2221"+
		"\3\2\2\2\u2223\u2224\3\2\2\2\u2224\u2222\3\2\2\2\u2224\u2225\3\2\2\2\u2225"+
		"\u2246\3\2\2\2\u2226\u2238\5\u04ac\u0257\2\u2227\u2238\5\u04b2\u025a\2"+
		"\u2228\u2238\5\u04b6\u025c\2\u2229\u2238\5\u04bc\u025f\2\u222a\u2238\5"+
		"\u04be\u0260\2\u222b\u222d\7\3\2\2\u222c\u222b\3\2\2\2\u222d\u222e\3\2"+
		"\2\2\u222e\u222c\3\2\2\2\u222e\u222f\3\2\2\2\u222f\u2230\3\2\2\2\u2230"+
		"\u2232\5\u04aa\u0256\2\u2231\u2233\7\4\2\2\u2232\u2231\3\2\2\2\u2233\u2234"+
		"\3\2\2\2\u2234\u2232\3\2\2\2\u2234\u2235\3\2\2\2\u2235\u2238\3\2\2\2\u2236"+
		"\u2238\5\u04c0\u0261\2\u2237\u2226\3\2\2\2\u2237\u2227\3\2\2\2\u2237\u2228"+
		"\3\2\2\2\u2237\u2229\3\2\2\2\u2237\u222a\3\2\2\2\u2237\u222c\3\2\2\2\u2237"+
		"\u2236\3\2\2\2\u2238\u223e\3\2\2\2\u2239\u223f\7\u00a0\2\2\u223a\u223c"+
		"\tT\2\2\u223b\u223d\7\u00da\2\2\u223c\u223b\3\2\2\2\u223c\u223d\3\2\2"+
		"\2\u223d\u223f\3\2\2\2\u223e\u2239\3\2\2\2\u223e\u223a\3\2\2\2\u223f\u2240"+
		"\3\2\2\2\u2240\u2241\7\u00aa\2\2\u2241\u2242\5\u04aa\u0256\2\u2242\u2243"+
		"\7\u00d2\2\2\u2243\u2244\5\u04c2\u0262\2\u2244\u2246\3\2\2\2\u2245\u2215"+
		"\3\2\2\2\u2245\u2216\3\2\2\2\u2245\u2217\3\2\2\2\u2245\u2218\3\2\2\2\u2245"+
		"\u2219\3\2\2\2\u2245\u221a\3\2\2\2\u2245\u221c\3\2\2\2\u2245\u2237\3\2"+
		"\2\2\u2246\u2247\3\2\2\2\u2247\u2248\7\u01b4\2\2\u2248\u2249\7\u00aa\2"+
		"\2\u2249\u224a\5\u04aa\u0256\2\u224a\u2257\3\2\2\2\u224b\u224d\7\3\2\2"+
		"\u224c\u224b\3\2\2\2\u224d\u224e\3\2\2\2\u224e\u224c\3\2\2\2\u224e\u224f"+
		"\3\2\2\2\u224f\u2250\3\2\2\2\u2250\u2252\5\u04aa\u0256\2\u2251\u2253\7"+
		"\4\2\2\u2252\u2251\3\2\2\2\u2253\u2254\3\2\2\2\u2254\u2252\3\2\2\2\u2254"+
		"\u2255\3\2\2\2\u2255\u2257\3\2\2\2\u2256\u21d0\3\2\2\2\u2256\u21d1\3\2"+
		"\2\2\u2256\u21d2\3\2\2\2\u2256\u21d3\3\2\2\2\u2256\u21d4\3\2\2\2\u2256"+
		"\u21d5\3\2\2\2\u2256\u21d6\3\2\2\2\u2256\u2207\3\2\2\2\u2256\u2245\3\2"+
		"\2\2\u2256\u224c\3\2\2\2\u2257\u04ab\3\2\2\2\u2258\u225a\5\u043a\u021e"+
		"\2\u2259\u225b\7\61\2\2\u225a\u2259\3\2\2\2\u225a\u225b\3\2\2\2\u225b"+
		"\u225d\3\2\2\2\u225c\u225e\5\u0434\u021b\2\u225d\u225c\3\2\2\2\u225d\u225e"+
		"\3\2\2\2\u225e\u2262\3\2\2\2\u225f\u2261\5\u04ae\u0258\2\u2260\u225f\3"+
		"\2\2\2\u2261\u2264\3\2\2\2\u2262\u2260\3\2\2\2\u2262\u2263\3\2\2\2\u2263"+
		"\u2266\3\2\2\2\u2264\u2262\3\2\2\2\u2265\u2267\5\u04a6\u0254\2\u2266\u2265"+
		"\3\2\2\2\u2266\u2267\3\2\2\2\u2267\u04ad\3\2\2\2\u2268\u2269\7\u0088\2"+
		"\2\u2269\u2277\tU\2\2\u226a\u226b\7\61\2\2\u226b\u226c\7\u00cf\2\2\u226c"+
		"\u2278\5\u0366\u01b4\2\u226d\u226e\7\u008a\2\2\u226e\u226f\5\u0366\u01b4"+
		"\2\u226f\u2270\7\u012c\2\2\u2270\u2271\5\u0366\u01b4\2\u2271\u2278\3\2"+
		"\2\2\u2272\u2273\7;\2\2\u2273\u2274\5\u0366\u01b4\2\u2274\u2275\7\u014c"+
		"\2\2\u2275\u2276\5\u0366\u01b4\2\u2276\u2278\3\2\2\2\u2277\u226a\3\2\2"+
		"\2\u2277\u226d\3\2\2\2\u2277\u2272\3\2\2\2\u2278\u04af\3\2\2\2\u2279\u227a"+
		"\7\u0088\2\2\u227a\u227b\7\u01e8\2\2\u227b\u227c\7\u00cf\2\2\u227c\u2287"+
		"\7\u01b1\2\2\u227d\u227e\7\u008a\2\2\u227e\u227f\5\u0366\u01b4\2\u227f"+
		"\u2280\7\u012c\2\2\u2280\u2281\5\u0366\u01b4\2\u2281\u2288\3\2\2\2\u2282"+
		"\u2283\7;\2\2\u2283\u2284\5\u0366\u01b4\2\u2284\u2285\7\u014c\2\2\u2285"+
		"\u2286\5\u0366\u01b4\2\u2286\u2288\3\2\2\2\u2287\u227d\3\2\2\2\u2287\u2282"+
		"\3\2\2\2\u2288\u04b1\3\2\2\2\u2289\u228b\7\u0129\2\2\u228a\u2289\3\2\2"+
		"\2\u228a\u228b\3\2\2\2\u228b\u228c\3\2\2\2\u228c\u228d\7\3\2\2\u228d\u228e"+
		"\5\u04fa\u027e\2\u228e\u2290\7\4\2\2\u228f\u2291\5\u04a6\u0254\2\u2290"+
		"\u228f\3\2\2\2\u2290\u2291\3\2\2\2\u2291\u04b3\3\2\2\2\u2292\u2293\7\u0086"+
		"\2\2\u2293\u2294\7\u0129\2\2\u2294\u2295\7\3\2\2\u2295\u2296\5\u00a4S"+
		"\2\u2296\u2298\7\4\2\2\u2297\u2299\5\u04a6\u0254\2\u2298\u2297\3\2\2\2"+
		"\u2298\u2299\3\2\2\2\u2299\u22a4\3\2\2\2\u229a\u229b\tV\2\2\u229b\u229c"+
		"\7\u0129\2\2\u229c\u22a4\5\u021c\u010f\2\u229d\u229e\7\u00d1\2\2\u229e"+
		"\u229f\7\u0129\2\2\u229f\u22a4\5\u0218\u010d\2\u22a0\u22a1\7\u0086\2\2"+
		"\u22a1\u22a2\7\u0129\2\2\u22a2\u22a4\5\u00aaV\2\u22a3\u2292\3\2\2\2\u22a3"+
		"\u229a\3\2\2\2\u22a3\u229d\3\2\2\2\u22a3\u22a0\3\2\2\2\u22a4\u04b5\3\2"+
		"\2\2\u22a5\u22a6\7\u0129\2\2\u22a6\u22ab\7\3\2\2\u22a7\u22ac\5\u03bc\u01df"+
		"\2\u22a8\u22ac\5\u0398\u01cd\2\u22a9\u22ac\5\u039a\u01ce\2\u22aa\u22ac"+
		"\5\u0506\u0284\2\u22ab\u22a7\3\2\2\2\u22ab\u22a8\3\2\2\2\u22ab\u22a9\3"+
		"\2\2\2\u22ab\u22aa\3\2\2\2\u22ac\u22ad\3\2\2\2\u22ad\u22b1\7\3\2\2\u22ae"+
		"\u22b2\5\u0366\u01b4\2\u22af\u22b0\7\u0129\2\2\u22b0\u22b2\5\u043a\u021e"+
		"\2\u22b1\u22ae\3\2\2\2\u22b1\u22af\3\2\2\2\u22b2\u22bb\3\2\2\2\u22b3\u22b7"+
		"\7\26\2\2\u22b4\u22b8\5\u0366\u01b4\2\u22b5\u22b6\7\u0129\2\2\u22b6\u22b8"+
		"\5\u043a\u021e\2\u22b7\u22b4\3\2\2\2\u22b7\u22b5\3\2\2\2\u22b8\u22ba\3"+
		"\2\2\2\u22b9\u22b3\3\2\2\2\u22ba\u22bd\3\2\2\2\u22bb\u22b9\3\2\2\2\u22bb"+
		"\u22bc\3\2\2\2\u22bc\u22be\3\2\2\2\u22bd\u22bb\3\2\2\2\u22be\u22c0\7\4"+
		"\2\2\u22bf\u22c1\5\u04b8\u025d\2\u22c0\u22bf\3\2\2\2\u22c0\u22c1\3\2\2"+
		"\2\u22c1\u22c2\3\2\2\2\u22c2\u22c5\7\4\2\2\u22c3\u22c6\5\u04a6\u0254\2"+
		"\u22c4\u22c6\5\u04ba\u025e\2\u22c5\u22c3\3\2\2\2\u22c5\u22c4\3\2\2\2\u22c5"+
		"\u22c6\3\2\2\2\u22c6\u04b7\3\2\2\2\u22c7\u22c9\7\u02da\2\2\u22c8\u22ca"+
		"\7\u01b2\2\2\u22c9\u22c8\3\2\2\2\u22c9\u22ca\3\2\2\2\u22ca\u22cb\3\2\2"+
		"\2\u22cb\u22cc\tW\2\2\u22cc\u04b9\3\2\2\2\u22cd\u22cf\7\61\2\2\u22ce\u22cd"+
		"\3\2\2\2\u22ce\u22cf\3\2\2\2\u22cf\u22d0\3\2\2\2\u22d0\u22d1\5\u0434\u021b"+
		"\2\u22d1\u22d2\7\3\2\2\u22d2\u22d3\5\u0428\u0215\2\u22d3\u22da\5\u0314"+
		"\u018b\2\u22d4\u22d5\7\26\2\2\u22d5\u22d6\5\u0428\u0215\2\u22d6\u22d7"+
		"\5\u0314\u018b\2\u22d7\u22d9\3\2\2\2\u22d8\u22d4\3\2\2\2\u22d9\u22dc\3"+
		"\2\2\2\u22da\u22d8\3\2\2\2\u22da\u22db\3\2\2\2\u22db\u22dd\3\2\2\2\u22dc"+
		"\u22da\3\2\2\2\u22dd\u22de\7\4\2\2\u22de\u04bb\3\2\2\2\u22df\u22e0\7\u0129"+
		"\2\2\u22e0\u22e1\7\3\2\2\u22e1\u22e2\5\u0506\u0284\2\u22e2\u22e3\7\u00b3"+
		"\2\2\u22e3\u22e4\5\u043a\u021e\2\u22e4\u22e6\7\4\2\2\u22e5\u22e7\5\u0434"+
		"\u021b\2\u22e6\u22e5\3\2\2\2\u22e6\u22e7\3\2\2\2\u22e7\u04bd\3\2\2\2\u22e8"+
		"\u22ea\5\u03c2\u01e2\2\u22e9\u22eb\5\u04a6\u0254\2\u22ea\u22e9\3\2\2\2"+
		"\u22ea\u22eb\3\2\2\2\u22eb\u04bf\3\2\2\2\u22ec\u22ed\7\u01b3\2\2\u22ed"+
		"\u22f0\7\3\2\2\u22ee\u22f1\5\u04c8\u0265\2\u22ef\u22f1\5\u04ca\u0266\2"+
		"\u22f0\u22ee\3\2\2\2\u22f0\u22ef\3\2\2\2\u22f1\u22f9\3\2\2\2\u22f2\u22f5"+
		"\7\26\2\2\u22f3\u22f6\5\u04c8\u0265\2\u22f4\u22f6\5\u04ca\u0266\2\u22f5"+
		"\u22f3\3\2\2\2\u22f5\u22f4\3\2\2\2\u22f6\u22f8\3\2\2\2\u22f7\u22f2\3\2"+
		"\2\2\u22f8\u22fb\3\2\2\2\u22f9\u22f7\3\2\2\2\u22f9\u22fa\3\2\2\2\u22fa"+
		"\u22fc\3\2\2\2\u22fb\u22f9\3\2\2\2\u22fc\u22ff\7\4\2\2\u22fd\u22fe\7\u0144"+
		"\2\2\u22fe\u2300\7\u01af\2\2\u22ff\u22fd\3\2\2\2\u22ff\u2300\3\2\2\2\u2300"+
		"\u2302\3\2\2\2\u2301\u2303\5\u04a6\u0254\2\u2302\u2301\3\2\2\2\u2302\u2303"+
		"\3\2\2\2\u2303\u04c1\3\2\2\2\u2304\u230a\5\u03f2\u01fa\2\u2305\u2306\5"+
		"\u04c4\u0263\2\u2306\u2307\7\b\2\2\u2307\u2308\5\u04c4\u0263\2\u2308\u230a"+
		"\3\2\2\2\u2309\u2304\3\2\2\2\u2309\u2305\3\2\2\2\u230a\u04c3\3\2\2\2\u230b"+
		"\u2320\5\u0428\u0215\2\u230c\u2320\5\u04c6\u0264\2\u230d\u230e\7\u02e3"+
		"\2\2\u230e\u2311\7\3\2\2\u230f\u2312\5\u0428\u0215\2\u2310\u2312\5\u04c6"+
		"\u0264\2\u2311\u230f\3\2\2\2\u2311\u2310\3\2\2\2\u2312\u231a\3\2\2\2\u2313"+
		"\u2316\7\26\2\2\u2314\u2317\5\u0428\u0215\2\u2315\u2317\5\u04c6\u0264"+
		"\2\u2316\u2314\3\2\2\2\u2316\u2315\3\2\2\2\u2317\u2319\3\2\2\2\u2318\u2313"+
		"\3\2\2\2\u2319\u231c\3\2\2\2\u231a\u2318\3\2\2\2\u231a\u231b\3\2\2\2\u231b"+
		"\u231d\3\2\2\2\u231c\u231a\3\2\2\2\u231d\u231e\7\4\2\2\u231e\u2320\3\2"+
		"\2\2\u231f\u230b\3\2\2\2\u231f\u230c\3\2\2\2\u231f\u230d\3\2\2\2\u2320"+
		"\u04c5\3\2\2\2\u2321\u2322\5\u0410\u0209\2\u2322\u04c7\3\2\2\2\u2323\u2324"+
		"\5\u0366\u01b4\2\u2324\u04c9\3\2\2\2\u2325\u2326\5\u0366\u01b4\2\u2326"+
		"\u04cb\3\2\2\2\u2327\u2328\5\u0428\u0215\2\u2328\u232b\5\u0362\u01b2\2"+
		"\u2329\u232c\5\u0428\u0215\2\u232a\u232c\5\u0424\u0213\2\u232b\u2329\3"+
		"\2\2\2\u232b\u232a\3\2\2\2\u232c\u04cd\3\2\2\2\u232d\u232e\7\u0142\2\2"+
		"\u232e\u232f\5\u03f2\u01fa\2\u232f\u04cf\3\2\2\2\u2330\u2331\7\u0093\2"+
		"\2\u2331\u2335\7>\2\2\u2332\u2336\5\u04d4\u026b\2\u2333\u2336\5\u04d6"+
		"\u026c\2\u2334\u2336\5\u04da\u026e\2\u2335\u2332\3\2\2\2\u2335\u2333\3"+
		"\2\2\2\u2335\u2334\3\2\2\2\u2336\u04d1\3\2\2\2\u2337\u2338\7\u0095\2\2"+
		"\u2338\u2339\5\u03f2\u01fa\2\u2339\u04d3\3\2\2\2\u233a\u233f\5\u0366\u01b4"+
		"\2\u233b\u233c\7\26\2\2\u233c\u233e\5\u0366\u01b4\2\u233d\u233b\3\2\2"+
		"\2\u233e\u2341\3\2\2\2\u233f\u233d\3\2\2\2\u233f\u2340\3\2\2\2\u2340\u04d5"+
		"\3\2\2\2\u2341\u233f\3\2\2\2\u2342\u2343\7\u0165\2\2\u2343\u2344\7\u0198"+
		"\2\2\u2344\u2345\5\u04d8\u026d\2\u2345\u04d7\3\2\2\2\u2346\u234a\7\3\2"+
		"\2\u2347\u234b\5\u04d8\u026d\2\u2348\u234b\5\u04d4\u026b\2\u2349\u234b"+
		"\5\u04da\u026e\2\u234a\u2347\3\2\2\2\u234a\u2348\3\2\2\2\u234a\u2349\3"+
		"\2\2\2\u234b\u2354\3\2\2\2\u234c\u2350\7\26\2\2\u234d\u2351\5\u04d8\u026d"+
		"\2\u234e\u2351\5\u04d4\u026b\2\u234f\u2351\5\u04da\u026e\2\u2350\u234d"+
		"\3\2\2\2\u2350\u234e\3\2\2\2\u2350\u234f\3\2\2\2\u2351\u2353\3\2\2\2\u2352"+
		"\u234c\3\2\2\2\u2353\u2356\3\2\2\2\u2354\u2352\3\2\2\2\u2354\u2355\3\2"+
		"\2\2\u2355\u2357\3\2\2\2\u2356\u2354\3\2\2\2\u2357\u2358\7\4\2\2\u2358"+
		"\u04d9\3\2\2\2\u2359\u235a\tX\2\2\u235a\u235b\7\3\2\2\u235b\u235c\5\u04d4"+
		"\u026b\2\u235c\u235d\7\4\2\2\u235d\u2361\3\2\2\2\u235e\u235f\7\3\2\2\u235f"+
		"\u2361\7\4\2\2\u2360\u2359\3\2\2\2\u2360\u235e\3\2\2\2\u2361\u04db\3\2"+
		"\2\2\u2362\u2368\5\u0366\u01b4\2\u2363\u2364\5\u0364\u01b3\2\u2364\u2365"+
		"\5\u0366\u01b4\2\u2365\u2367\3\2\2\2\u2366\u2363\3\2\2\2\u2367\u236a\3"+
		"\2\2\2\u2368\u2366\3\2\2\2\u2368\u2369\3\2\2\2\u2369\u236f\3\2\2\2\u236a"+
		"\u2368\3\2\2\2\u236b\u236d\7\61\2\2\u236c\u236b\3\2\2\2\u236c\u236d\3"+
		"\2\2\2\u236d\u236e\3\2\2\2\u236e\u2370\5\u042e\u0218\2\u236f\u236c\3\2"+
		"\2\2\u236f\u2370\3\2\2\2\u2370\u2377\3\2\2\2\u2371\u2372\5\u043a\u021e"+
		"\2\u2372\u2373\7\23\2\2\u2373\u2374\7\20\2\2\u2374\u2377\3\2\2\2\u2375"+
		"\u2377\5\u04de\u0270\2\u2376\u2362\3\2\2\2\u2376\u2371\3\2\2\2\u2376\u2375"+
		"\3\2\2\2\u2377\u04dd\3\2\2\2\u2378\u2379\7\u01a1\2\2\u2379\u237a\7\3\2"+
		"\2\u237a\u237b\5\u0366\u01b4\2\u237b\u237c\7\4\2\2\u237c\u237d\7\23\2"+
		"\2\u237d\u237e\7\20\2\2\u237e\u237f\7\61\2\2\u237f\u2380\7\3\2\2\u2380"+
		"\u2381\5\u0428\u0215\2\u2381\u2388\5\u0314\u018b\2\u2382\u2383\7\26\2"+
		"\2\u2383\u2384\5\u0428\u0215\2\u2384\u2385\5\u0314\u018b\2\u2385\u2387"+
		"\3\2\2\2\u2386\u2382\3\2\2\2\u2387\u238a\3\2\2\2\u2388\u2386\3\2\2\2\u2388"+
		"\u2389\3\2\2\2\u2389\u238b\3\2\2\2\u238a\u2388\3\2\2\2\u238b\u238c\7\4"+
		"\2\2\u238c\u04df\3\2\2\2\u238d\u238f\7\u0114\2\2\u238e\u2390\tY\2\2\u238f"+
		"\u238e\3\2\2\2\u238f\u2390\3\2\2\2\u2390\u239a\3\2\2\2\u2391\u239b\7\20"+
		"\2\2\u2392\u2397\5\u04dc\u026f\2\u2393\u2394\7\26\2\2\u2394\u2396\5\u04dc"+
		"\u026f\2\u2395\u2393\3\2\2\2\u2396\u2399\3\2\2\2\u2397\u2395\3\2\2\2\u2397"+
		"\u2398\3\2\2\2\u2398\u239b\3\2\2\2\u2399\u2397\3\2\2\2\u239a\u2391\3\2"+
		"\2\2\u239a\u2392\3\2\2\2\u239b\u04e1\3\2\2\2\u239c\u239d\5\u04e0\u0271"+
		"\2\u239d\u239f\5\u04a8\u0255\2\u239e\u23a0\5\u04ce\u0268\2\u239f\u239e"+
		"\3\2\2\2\u239f\u23a0\3\2\2\2\u23a0\u23a2\3\2\2\2\u23a1\u23a3\5\u04d0\u0269"+
		"\2\u23a2\u23a1\3\2\2\2\u23a2\u23a3\3\2\2\2\u23a3\u23a5\3\2\2\2\u23a4\u23a6"+
		"\5\u04d2\u026a\2\u23a5\u23a4\3\2\2\2\u23a5\u23a6\3\2\2\2\u23a6\u23a8\3"+
		"\2\2\2\u23a7\u23a9\5\u04fe\u0280\2\u23a8\u23a7\3\2\2\2\u23a8\u23a9\3\2"+
		"\2\2\u23a9\u23ab\3\2\2\2\u23aa\u23ac\5\u0502\u0282\2\u23ab\u23aa\3\2\2"+
		"\2\u23ab\u23ac\3\2\2\2\u23ac\u23ae\3\2\2\2\u23ad\u23af\5\u0504\u0283\2"+
		"\u23ae\u23ad\3\2\2\2\u23ae\u23af\3\2\2\2\u23af\u04e3\3\2\2\2\u23b0\u23b1"+
		"\7\u0144\2\2\u23b1\u23b6\5\u04e8\u0275\2\u23b2\u23b3\7\26\2\2\u23b3\u23b5"+
		"\5\u04e8\u0275\2\u23b4\u23b2\3\2\2\2\u23b5\u23b8\3\2\2\2\u23b6\u23b4\3"+
		"\2\2\2\u23b6\u23b7\3\2\2\2\u23b7\u23ba\3\2\2\2\u23b8\u23b6\3\2\2\2\u23b9"+
		"\u23b0\3\2\2\2\u23b9\u23ba\3\2\2\2\u23ba\u23bb\3\2\2\2\u23bb\u23bc\5\u04e0"+
		"\u0271\2\u23bc\u23bd\5\u04a4\u0253\2\u23bd\u23bf\5\u04a8\u0255\2\u23be"+
		"\u23c0\5\u04ce\u0268\2\u23bf\u23be\3\2\2\2\u23bf\u23c0\3\2\2\2\u23c0\u23c2"+
		"\3\2\2\2\u23c1\u23c3\5\u04d0\u0269\2\u23c2\u23c1\3\2\2\2\u23c2\u23c3\3"+
		"\2\2\2\u23c3\u23c5\3\2\2\2\u23c4\u23c6\5\u04d2\u026a\2\u23c5\u23c4\3\2"+
		"\2\2\u23c5\u23c6\3\2\2\2\u23c6\u23c8\3\2\2\2\u23c7\u23c9\5\u04fe\u0280"+
		"\2\u23c8\u23c7\3\2\2\2\u23c8\u23c9\3\2\2\2\u23c9\u23cb\3\2\2\2\u23ca\u23cc"+
		"\5\u0502\u0282\2\u23cb\u23ca\3\2\2\2\u23cb\u23cc\3\2\2\2\u23cc\u23ce\3"+
		"\2\2\2\u23cd\u23cf\5\u0504\u0283\2\u23ce\u23cd\3\2\2\2\u23ce\u23cf\3\2"+
		"\2\2\u23cf\u23d2\3\2\2\2\u23d0\u23d3\5\u04f0\u0279\2\u23d1\u23d3\5\u04f4"+
		"\u027b\2\u23d2\u23d0\3\2\2\2\u23d2\u23d1\3\2\2\2\u23d2\u23d3\3\2\2\2\u23d3"+
		"\u23d5\3\2\2\2\u23d4\u23d6\5\u04f6\u027c\2\u23d5\u23d4\3\2\2\2\u23d5\u23d6"+
		"\3\2\2\2\u23d6\u04e5\3\2\2\2\u23d7\u23d8\7\u0144\2\2\u23d8\u23dd\5\u04e8"+
		"\u0275\2\u23d9\u23da\7\26\2\2\u23da\u23dc\5\u04e8\u0275\2\u23db\u23d9"+
		"\3\2\2\2\u23dc\u23df\3\2\2\2\u23dd\u23db\3\2\2\2\u23dd\u23de\3\2\2\2\u23de"+
		"\u23e1\3\2\2\2\u23df\u23dd\3\2\2\2\u23e0\u23d7\3\2\2\2\u23e0\u23e1\3\2"+
		"\2\2\u23e1\u23e2\3\2\2\2\u23e2\u23eb\5\u04fa\u027e\2\u23e3\u23ea\5\u04ea"+
		"\u0276\2\u23e4\u23ea\5\u04ec\u0277\2\u23e5\u23ea\5\u04ee\u0278\2\u23e6"+
		"\u23ea\5\u04f0\u0279\2\u23e7\u23ea\5\u04f4\u027b\2\u23e8\u23ea\5\u04f6"+
		"\u027c\2\u23e9\u23e3\3\2\2\2\u23e9\u23e4\3\2\2\2\u23e9\u23e5\3\2\2\2\u23e9"+
		"\u23e6\3\2\2\2\u23e9\u23e7\3\2\2\2\u23e9\u23e8\3\2\2\2\u23ea\u23ed\3\2"+
		"\2\2\u23eb\u23e9\3\2\2\2\u23eb\u23ec\3\2\2\2\u23ec\u04e7\3\2\2\2\u23ed"+
		"\u23eb\3\2\2\2\u23ee\u23ef\5\u043a\u021e\2\u23ef\u23f0\7\3\2\2\u23f0\u23f5"+
		"\5\u0428\u0215\2\u23f1\u23f2\7\26\2\2\u23f2\u23f4\5\u0428\u0215\2\u23f3"+
		"\u23f1\3\2\2\2\u23f4\u23f7\3\2\2\2\u23f5\u23f3\3\2\2\2\u23f5\u23f6\3\2"+
		"\2\2\u23f6\u23f8\3\2\2\2\u23f7\u23f5\3\2\2\2\u23f8\u23f9\7\4\2\2\u23f9"+
		"\u23fa\7\61\2\2\u23fa\u23fb\7\3\2\2\u23fb\u23fc\5\u04fa\u027e\2\u23fc"+
		"\u23fd\7\4\2\2\u23fd\u04e9\3\2\2\2\u23fe\u23ff\7\u0088\2\2\u23ff\u2409"+
		"\7\u0134\2\2\u2400\u2401\7\u00cf\2\2\u2401\u2406\5\u0428\u0215\2\u2402"+
		"\u2403\7\26\2\2\u2403\u2405\5\u0428\u0215\2\u2404\u2402\3\2\2\2\u2405"+
		"\u2408\3\2\2\2\u2406\u2404\3\2\2\2\u2406\u2407\3\2\2\2\u2407\u240a\3\2"+
		"\2\2\u2408\u2406\3\2\2\2\u2409\u2400\3\2\2\2\u2409\u240a\3\2\2\2\u240a"+
		"\u04eb\3\2\2\2\u240b\u240c\7\u0088\2\2\u240c\u240d\7\u0185\2\2\u240d\u240e"+
		"\7\u017a\2\2\u240e\u04ed\3\2\2\2\u240f\u2410\7\u00d5\2\2\u2410\u2411\7"+
		"\u0088\2\2\u2411\u2412\7\31\2\2\u2412\u2413\tZ\2\2\u2413\u04ef\3\2\2\2"+
		"\u2414\u241f\7\u0144\2\2\u2415\u2417\7\u0194\2\2\u2416\u2418\5\u04f2\u027a"+
		"\2\u2417\u2416\3\2\2\2\u2417\u2418\3\2\2\2\u2418\u2420\3\2\2\2\u2419\u241b"+
		"\7\u0195\2\2\u241a\u241c\5\u04f2\u027a\2\u241b\u241a\3\2\2\2\u241b\u241c"+
		"\3\2\2\2\u241c\u2420\3\2\2\2\u241d\u2420\7\u015d\2\2\u241e\u2420\7\u01a2"+
		"\2\2\u241f\u2415\3\2\2\2\u241f\u2419\3\2\2\2\u241f\u241d\3\2\2\2\u241f"+
		"\u241e\3\2\2\2\u2420\u04f1\3\2\2\2\u2421\u2422\7\u01a3\2\2\u2422\u2423"+
		"\7\u014c\2\2\u2423\u2424\7\u00ab\2\2\u2424\u2425\t[\2\2\u2425\u2426\7"+
		"\u0170\2\2\u2426\u04f3\3\2\2\2\u2427\u2428\7\u019a\2\2\u2428\u2429\7\u016f"+
		"\2\2\u2429\u242a\7^\2\2\u242a\u04f5\3\2\2\2\u242b\u242c\7\u00f1\2\2\u242c"+
		"\u242d\7\31\2\2\u242d\u04f7\3\2\2\2\u242e\u242f\7\3\2\2\u242f\u2430\5"+
		"\u04fa\u027e\2\u2430\u2431\7\4\2\2\u2431\u04f9\3\2\2\2\u2432\u2433\7\3"+
		"\2\2\u2433\u2434\5\u04fa\u027e\2\u2434\u2435\7\4\2\2\u2435\u2439\3\2\2"+
		"\2\u2436\u2439\5\u04e2\u0272\2\u2437\u2439\5\u04fc\u027f\2\u2438\u2432"+
		"\3\2\2\2\u2438\u2436\3\2\2\2\u2438\u2437\3\2\2\2\u2439\u2447\3\2\2\2\u243a"+
		"\u243c\t\\\2\2\u243b\u243d\tY\2\2\u243c\u243b\3\2\2\2\u243c\u243d\3\2"+
		"\2\2\u243d\u2443\3\2\2\2\u243e\u2444\5\u04e2\u0272\2\u243f\u2440\7\3\2"+
		"\2\u2440\u2441\5\u04fa\u027e\2\u2441\u2442\7\4\2\2\u2442\u2444\3\2\2\2"+
		"\u2443\u243e\3\2\2\2\u2443\u243f\3\2\2\2\u2444\u2446\3\2\2\2\u2445\u243a"+
		"\3\2\2\2\u2446\u2449\3\2\2\2\u2447\u2445\3\2\2\2\u2447\u2448\3\2\2\2\u2448"+
		"\u244b\3\2\2\2\u2449\u2447\3\2\2\2\u244a\u244c\5\u04fe\u0280\2\u244b\u244a"+
		"\3\2\2\2\u244b\u244c\3\2\2\2\u244c\u244e\3\2\2\2\u244d\u244f\5\u0502\u0282"+
		"\2\u244e\u244d\3\2\2\2\u244e\u244f\3\2\2\2\u244f\u2451\3\2\2\2\u2450\u2452"+
		"\5\u0504\u0283\2\u2451\u2450\3\2\2\2\u2451\u2452\3\2\2\2\u2452\u04fb\3"+
		"\2\2\2\u2453\u2460\7\u0138\2\2\u2454\u2461\5\u036c\u01b7\2\u2455\u2456"+
		"\7\3\2\2\u2456\u245b\5\u036c\u01b7\2\u2457\u2458\7\26\2\2\u2458\u245a"+
		"\5\u036c\u01b7\2\u2459\u2457\3\2\2\2\u245a\u245d\3\2\2\2\u245b\u2459\3"+
		"\2\2\2\u245b\u245c\3\2\2\2\u245c\u245e\3\2\2\2\u245d\u245b\3\2\2\2\u245e"+
		"\u245f\7\4\2\2\u245f\u2461\3\2\2\2\u2460\u2454\3\2\2\2\u2460\u2455\3\2"+
		"\2\2\u2461\u04fd\3\2\2\2\u2462\u2463\7\u00d7\2\2\u2463\u2477\7>\2\2\u2464"+
		"\u2466\5\u0500\u0281\2\u2465\u2467\t>\2\2\u2466\u2465\3\2\2\2\u2466\u2467"+
		"\3\2\2\2\u2467\u246f\3\2\2\2\u2468\u2469\7\26\2\2\u2469\u246b\5\u0500"+
		"\u0281\2\u246a\u246c\t>\2\2\u246b\u246a\3\2\2\2\u246b\u246c\3\2\2\2\u246c"+
		"\u246e\3\2\2\2\u246d\u2468\3\2\2\2\u246e\u2471\3\2\2\2\u246f\u246d\3\2"+
		"\2\2\u246f\u2470\3\2\2\2\u2470\u2478\3\2\2\2\u2471\u246f\3\2\2\2\u2472"+
		"\u2473\7\u0168\2\2\u2473\u2478\7\u0116\2\2\u2474\u2475\7\u00d7\2\2\u2475"+
		"\u2476\7\u00cf\2\2\u2476\u2478\5\u043a\u021e\2\u2477\u2464\3\2\2\2\u2477"+
		"\u2472\3\2\2\2\u2477\u2474\3\2\2\2\u2478\u04ff\3\2\2\2\u2479\u247d\5\u0428"+
		"\u0215\2\u247a\u247d\7\31\2\2\u247b\u247d\5\u0366\u01b4\2\u247c\u2479"+
		"\3\2\2\2\u247c\u247a\3\2\2\2\u247c\u247b\3\2\2\2\u247d\u0501\3\2\2\2\u247e"+
		"\u247f\7\u00d0\2\2\u247f\u2480\7\31\2\2\u2480\u2481\tZ\2\2\u2481\u0503"+
		"\3\2\2\2\u2482\u2483\7\u0084\2\2\u2483\u2485\t]\2\2\u2484\u2486\7\31\2"+
		"\2\u2485\u2484\3\2\2\2\u2485\u2486\3\2\2\2\u2486\u2487\3\2\2\2\u2487\u2488"+
		"\tZ\2\2\u2488\u2489\7\u017a\2\2\u2489\u0505\3\2\2\2\u248a\u2492\7\u03cc"+
		"\2\2\u248b\u2492\5\u0508\u0285\2\u248c\u2492\5\u03c0\u01e1\2\u248d\u2492"+
		"\5\u03bc\u01df\2\u248e\u2492\5\u0398\u01cd\2\u248f\u2492\5\u039a\u01ce"+
		"\2\u2490\u2492\5\u03be\u01e0\2\u2491\u248a\3\2\2\2\u2491\u248b\3\2\2\2"+
		"\u2491\u248c\3\2\2\2\u2491\u248d\3\2\2\2\u2491\u248e\3\2\2\2\u2491\u248f"+
		"\3\2\2\2\u2491\u2490\3\2\2\2\u2492\u0507\3\2\2\2\u2493\u2494\t^\2\2\u2494"+
		"\u0509\3\2\2\2\u0477\u050d\u0511\u0514\u055b\u0560\u0563\u0569\u0575\u057f"+
		"\u0581\u0589\u0591\u05a7\u05a9\u05b4\u05b9\u05be\u05c1\u05c6\u05cc\u05d1"+
		"\u05d9\u05dc\u05e4\u05ec\u05f4\u05fc\u0604\u060c\u0613\u0619\u061d\u0620"+
		"\u0629\u0634\u063e\u0643\u064c\u0654\u065d\u0664\u066b\u066f\u0675\u0689"+
		"\u0697\u06a5\u06b2\u06b8\u06bc\u06c2\u06c5\u06c9\u06cd\u06d2\u06da\u06e0"+
		"\u06ed\u06f4\u06ff\u0702\u0708\u0713\u0716\u071c\u0727\u072a\u0730\u073b"+
		"\u073e\u0744\u0751\u0758\u075b\u0762\u0764\u076d\u0770\u0775\u0778\u077c"+
		"\u0783\u0788\u078d\u0797\u07a0\u07a3\u07ab\u07b3\u07b6\u07c1\u07c6\u07d0"+
		"\u07d5\u07da\u07e6\u07f0\u07f6\u07fa\u07fe\u0803\u0806\u0809\u080c\u0817"+
		"\u081f\u0823\u082b\u082f\u0832\u0835\u0838\u083b\u083e\u0841\u0844\u0847"+
		"\u084a\u084d\u0850\u0853\u0856\u0859\u085c\u085f\u0862\u0865\u0868\u086b"+
		"\u086e\u0876\u088e\u0890\u089b\u08a7\u08ae\u08b5\u08b7\u08c2\u08cd\u08d0"+
		"\u08d4\u08de\u08e1\u08e7\u08e9\u08ef\u08fc\u0903\u0908\u090a\u0914\u091a"+
		"\u091e\u0929\u0934\u093e\u0942\u0949\u094f\u095c\u0962\u0968\u0973\u0989"+
		"\u099c\u09a1\u09a5\u09ac\u09b2\u09b9\u09bd\u09c1\u09c4\u09c7\u09cc\u09d5"+
		"\u09da\u09e0\u09ee\u09f7\u0a06\u0a0b\u0a0e\u0a13\u0a1d\u0a22\u0a2a\u0a2d"+
		"\u0a31\u0a34\u0a37\u0a44\u0a55\u0a5a\u0a61\u0a6b\u0a6e\u0a74\u0a7b\u0a7f"+
		"\u0a88\u0a8c\u0a90\u0a93\u0a96\u0aa0\u0aa6\u0aad\u0ab7\u0abc\u0ac7\u0acb"+
		"\u0ad3\u0ad7\u0adf\u0ae9\u0af2\u0af6\u0b01\u0b0d\u0b16\u0b1a\u0b1c\u0b24"+
		"\u0b28\u0b31\u0b34\u0b3d\u0b46\u0b4a\u0b52\u0b5c\u0b65\u0b69\u0b71\u0b7c"+
		"\u0b7f\u0b87\u0b8b\u0b93\u0b9d\u0ba6\u0baa\u0bb2\u0bb7\u0bbf\u0bc3\u0bcb"+
		"\u0bd0\u0bd9\u0bdd\u0be3\u0beb\u0bf4\u0bf7\u0bff\u0c03\u0c0b\u0c15\u0c1e"+
		"\u0c22\u0c2e\u0c32\u0c3a\u0c45\u0c4c\u0c53\u0c58\u0c5b\u0c5f\u0c63\u0c67"+
		"\u0c74\u0c79\u0c85\u0c8a\u0c8c\u0c9d\u0ca1\u0cb0\u0cbe\u0cc7\u0ccc\u0cd2"+
		"\u0cdf\u0cea\u0cf5\u0cfc\u0d03\u0d11\u0d18\u0d1a\u0d20\u0d28\u0d2d\u0d32"+
		"\u0d34\u0d46\u0d48\u0d50\u0d54\u0d59\u0d5d\u0d60\u0d65\u0d6a\u0d6f\u0d79"+
		"\u0d7f\u0d86\u0d8e\u0d95\u0d9a\u0d9c\u0da7\u0dab\u0db3\u0db7\u0dbb\u0dbf"+
		"\u0dc3\u0dcb\u0dd1\u0dd6\u0dd9\u0ddc\u0de2\u0def\u0df4\u0df7\u0dfd\u0dff"+
		"\u0e10\u0e15\u0e1a\u0e29\u0e37\u0e3c\u0e45\u0e48\u0e50\u0e5a\u0e63\u0e65"+
		"\u0e69\u0e80\u0e82\u0e8e\u0e97\u0e9f\u0ea2\u0eae\u0eb7\u0ec0\u0eca\u0ed0"+
		"\u0ed9\u0ee8\u0eeb\u0ef0\u0ef2\u0ef8\u0f02\u0f0d\u0f10\u0f12\u0f1a\u0f21"+
		"\u0f2d\u0f31\u0f36\u0f3f\u0f44\u0f48\u0f51\u0f55\u0f59\u0f5c\u0f5f\u0f62"+
		"\u0f65\u0f68\u0f6b\u0f6e\u0f75\u0f7a\u0f92\u0f96\u0fac\u0fc0\u0fc2\u0fc8"+
		"\u0fd0\u0fd4\u0fda\u0fe7\u0fea\u1003\u1008\u100f\u101a\u1026\u102d\u1033"+
		"\u103b\u103d\u1041\u1046\u104d\u104f\u1055\u1058\u105d\u1063\u106b\u106d"+
		"\u108a\u1090\u1092\u1098\u109b\u10c4\u10c9\u10cc\u10d0\u10d3\u10e2\u10ea"+
		"\u10f5\u10fe\u110a\u110d\u1118\u111e\u1121\u112d\u1138\u1141\u114c\u1153"+
		"\u116c\u117f\u1185\u118e\u1190\u119c\u11a3\u11a7\u11ae\u11cb\u11d1\u11dd"+
		"\u11e3\u11e5\u11ea\u11f0\u11fa\u1204\u1211\u1214\u1217\u121a\u121e\u1224"+
		"\u1228\u122a\u122e\u1234\u1237\u1241\u1245\u124a\u124d\u1250\u1253\u1259"+
		"\u125d\u125f\u1263\u1268\u126b\u1277\u127b\u1281\u1285\u128e\u129a\u129f"+
		"\u12a8\u12b0\u12b4\u12b7\u12bc\u12c1\u12c7\u12cb\u12d2\u12d9\u12df\u12e4"+
		"\u12e8\u12f3\u12f7\u1303\u1308\u130c\u1318\u1321\u132c\u1330\u1334\u133d"+
		"\u1349\u1355\u135a\u135f\u1363\u136e\u1374\u137c\u1381\u1387\u138b\u1390"+
		"\u139c\u13a9\u13ae\u13b3\u13b6\u13ba\u13c1\u13d3\u13dd\u13df\u13f1\u13f6"+
		"\u13fd\u1400\u140e\u1415\u1422\u1427\u142b\u142d\u1435\u143d\u1443\u144c"+
		"\u1452\u1458\u145c\u1461\u1463\u146c\u1470\u147a\u1480\u1486\u148b\u148f"+
		"\u1492\u1497\u149a\u149d\u14a3\u14a8\u14ab\u14ae\u14b4\u14b7\u14bd\u14c1"+
		"\u14c4\u14c9\u14cf\u14d6\u14dc\u14e3\u14ed\u14f3\u14f9\u14fe\u1502\u1505"+
		"\u150a\u150d\u1510\u1516\u151b\u151e\u1521\u1527\u152a\u1530\u1534\u1537"+
		"\u153c\u1542\u1545\u154b\u1550\u1553\u155d\u1563\u1569\u156e\u1572\u1575"+
		"\u1578\u157b\u157e\u1584\u1587\u158a\u158d\u1593\u1596\u159c\u15a0\u15a3"+
		"\u15a8\u15ae\u15b1\u15b7\u15bc\u15be\u15c4\u15c7\u15ca\u15cd\u15d0\u15d2"+
		"\u15dc\u15e2\u15e8\u15ed\u15f1\u15f4\u15f7\u15fa\u1600\u1603\u1606\u160a"+
		"\u1610\u1614\u1617\u161c\u1622\u1625\u162b\u1630\u1632\u1651\u1672\u168b"+
		"\u168f\u1698\u16a2\u16ae\u16b8\u16be\u16c1\u16c9\u16cc\u16d6\u16e9\u16f6"+
		"\u1702\u170f\u1717\u171b\u1720\u172b\u1736\u1740\u1743\u1759\u1761\u1765"+
		"\u176c\u1771\u1777\u17a0\u17ba\u17d0\u17ea\u17ed\u17f1\u17f5\u17fc\u180a"+
		"\u1817\u1824\u182a\u1833\u1838\u183b\u184d\u1855\u1857\u1860\u1862\u1867"+
		"\u1873\u1880\u188d\u1890\u1899\u189e\u18a4\u18a6\u18b1\u18b3\u18c9\u18cb"+
		"\u18d0\u18e5\u18ed\u18f1\u18f5\u18f9\u18fb\u1904\u1911\u191c\u1927\u192a"+
		"\u192e\u1935\u193a\u1944\u1948\u194d\u1953\u1957\u1960\u1962\u1967\u196f"+
		"\u1974\u1976\u1978\u1982\u198a\u199d\u19aa\u19ad\u19b0\u19b5\u19ba\u19c5"+
		"\u19d0\u19d4\u19da\u19de\u19e2\u19e7\u19e9\u19ef\u19f2\u19f9\u19fe\u1a03"+
		"\u1a0c\u1a2b\u1a36\u1a3c\u1a45\u1a52\u1a55\u1a5b\u1a5f\u1a63\u1a69\u1a73"+
		"\u1a79\u1a7f\u1a84\u1a88\u1a8b\u1a90\u1a94\u1a9a\u1a9f\u1aa3\u1aa9\u1aac"+
		"\u1ab2\u1ab6\u1ab9\u1abe\u1ac4\u1ac9\u1acf\u1ad4\u1adc\u1ade\u1ae2\u1aea"+
		"\u1aec\u1af6\u1afd\u1aff\u1b05\u1b0b\u1b0f\u1b18\u1b1c\u1b1e\u1b2d\u1b3b"+
		"\u1b3f\u1b44\u1b4c\u1b53\u1b5f\u1b61\u1b67\u1b6d\u1b71\u1b7d\u1b83\u1b87"+
		"\u1b8c\u1b96\u1b98\u1b9b\u1b9e\u1ba3\u1ba7\u1bb1\u1bb9\u1bc3\u1bcb\u1bcd"+
		"\u1bd2\u1bda\u1be2\u1be7\u1bea\u1bed\u1bfe\u1c0c\u1c14\u1c28\u1c2f\u1c40"+
		"\u1c46\u1c4a\u1c5b\u1c62\u1c6a\u1c6d\u1c71\u1c7d\u1caf\u1cb6\u1cb9\u1ccc"+
		"\u1cd1\u1cda\u1cdd\u1ce4\u1ce9\u1ced\u1cf4\u1d00\u1d09\u1d16\u1d1e\u1d2a"+
		"\u1d2f\u1d38\u1d3d\u1d41\u1d44\u1d4b\u1d51\u1d69\u1d77\u1d79\u1d7b\u1d88"+
		"\u1d8a\u1d92\u1d9b\u1da2\u1da7\u1dab\u1db1\u1db9\u1dbc\u1dc2\u1dc7\u1dd9"+
		"\u1ddb\u1de7\u1dee\u1df7\u1e0b\u1e10\u1e19\u1e1f\u1e25\u1e41\u1e47\u1e4d"+
		"\u1e52\u1e57\u1e5b\u1e5e\u1e69\u1e74\u1e77\u1e80\u1e83\u1e87\u1e8a\u1e93"+
		"\u1e9a\u1eab\u1eb5\u1ec2\u1ecf\u1ed9\u1ede\u1ee0\u1ee6\u1ef1\u1ef9\u1efc"+
		"\u1f01\u1f07\u1f0b\u1f12\u1f16\u1f25\u1f2f\u1f37\u1f51\u1f5b\u1f65\u1f72"+
		"\u1f7f\u1f84\u1f88\u1f8e\u1f93\u1f98\u1fa0\u1fa7\u1faa\u1fb0\u1fb7\u1fc2"+
		"\u1fcc\u1fd2\u1fd8\u1fdd\u1fe1\u1fe4\u1fe9\u1fec\u1ff2\u1ff7\u1ffa\u2000"+
		"\u2003\u2009\u200d\u2010\u2015\u201b\u2022\u2028\u202d\u2031\u2037\u203e"+
		"\u2045\u2048\u2051\u205e\u2071\u2074\u2079\u207d\u208a\u2096\u20a2\u20b4"+
		"\u20b8\u20c3\u20ca\u20d1\u20d8\u20e3\u20e6\u20eb\u20ef\u20f5\u20f8\u20fd"+
		"\u2101\u2107\u210e\u2115\u2121\u2128\u215a\u215f\u2166\u216e\u2172\u2178"+
		"\u217b\u2186\u218a\u218f\u2195\u2199\u21a2\u21a7\u21ad\u21b4\u21b8\u21be"+
		"\u21c5\u21c9\u21cd\u21e0\u21e6\u21f0\u21f6\u21f9\u21fe\u2200\u2207\u220c"+
		"\u220e\u221e\u2224\u222e\u2234\u2237\u223c\u223e\u2245\u224e\u2254\u2256"+
		"\u225a\u225d\u2262\u2266\u2277\u2287\u228a\u2290\u2298\u22a3\u22ab\u22b1"+
		"\u22b7\u22bb\u22c0\u22c5\u22c9\u22ce\u22da\u22e6\u22ea\u22f0\u22f5\u22f9"+
		"\u22ff\u2302\u2309\u2311\u2316\u231a\u231f\u232b\u2335\u233f\u234a\u2350"+
		"\u2354\u2360\u2368\u236c\u236f\u2376\u2388\u238f\u2397\u239a\u239f\u23a2"+
		"\u23a5\u23a8\u23ab\u23ae\u23b6\u23b9\u23bf\u23c2\u23c5\u23c8\u23cb\u23ce"+
		"\u23d2\u23d5\u23dd\u23e0\u23e9\u23eb\u23f5\u2406\u2409\u2417\u241b\u241f"+
		"\u2438\u243c\u2443\u2447\u244b\u244e\u2451\u245b\u2460\u2466\u246b\u246f"+
		"\u2477\u247c\u2485\u2491";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2,
			_serializedATNSegment3
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}
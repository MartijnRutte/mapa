// Generated from src/DB2zSQLParser.g4 by ANTLR 4.7.2
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class DB2zSQLParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.7.2", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		LPAREN=1, RPAREN=2, OPENSQBRACKET=3, CLOSESQBRACKET=4, QUESTIONMARK=5, 
		EQ=6, GT=7, LT=8, GE=9, LE=10, NE=11, PLUS=12, MINUS=13, SPLAT=14, SLASH=15, 
		CONCATOP=16, DOT=17, COLON=18, SEMICOLON=19, COMMA=20, NONNUMERICLITERAL=21, 
		INTEGERLITERAL=22, NUMERICLITERAL=23, NEWLINE=24, WS=25, SQLCOMMENT=26, 
		SQLBLOCKCOMMENTBEGIN=27, SQLBLOCKCOMMENTEND=28, ADD=29, AFTER=30, ALL=31, 
		ALLOCATE=32, ALLOW=33, ALTER=34, ALTERAND=35, ANY=36, ARRAY=37, ARRAY_EXISTS=38, 
		AS=39, ASENSITIVE=40, ASSOCIATE=41, ASUTIME=42, AT=43, AUDIT=44, AUX=45, 
		AUXILIARY=46, BEFORE=47, BEGIN=48, BETWEEN=49, BUFFERPOOL=50, BY=51, CALL=52, 
		CAPTURE=53, CASCADED=54, CASE=55, CAST=56, CCSID=57, CHAR=58, CHARACTER=59, 
		CHECK=60, CLONE=61, CLOSE=62, CLUSTER=63, COLLECTION=64, COLLID=65, COLUMN=66, 
		COMMENT=67, COMMIT=68, CONCAT=69, CONDITION=70, CONNECT=71, CONNECTION=72, 
		CONSTRAINT=73, CONTAINS=74, CONTENT=75, CONTINUE=76, CREATE=77, CUBE=78, 
		CURRENT=79, CURRENT_LC_CTYPE=80, CURRVAL=81, CURSOR=82, DATA=83, DATABASE=84, 
		DAY=85, DAYS=86, DBINFO=87, DECLARE=88, DEFAULT=89, DELETE=90, DESCRIPTOR=91, 
		DETERMINISTIC=92, DISABLE=93, DISALLOW=94, DISTINCT=95, DO=96, DOCUMENT=97, 
		DOUBLE=98, DROP=99, DSSIZE=100, DYNAMIC=101, EDITPROC=102, ELSE=103, ELSEIF=104, 
		ENCODING=105, ENCRYPTION=106, END=107, END_EXEC=108, ENDING=109, ERASE=110, 
		ESCAPE=111, EXCEPT=112, EXCEPTION=113, EXEC_SQL=114, EXECUTE=115, EXISTS=116, 
		EXIT=117, EXPLAIN=118, EXTERNAL=119, FENCED=120, FETCH=121, FIELDPROC=122, 
		FINAL=123, FIRST=124, FOR=125, FREE=126, FROM=127, FULL=128, FUNCTION=129, 
		GENERATED=130, GET=131, GLOBAL=132, GO=133, GOTO=134, GRANT=135, GROUP=136, 
		HANDLER=137, HAVING=138, HOLD=139, HOUR=140, HOURS=141, IF=142, IMMEDIATE=143, 
		IN=144, INCLUSIVE=145, INDEX=146, INDEXBP=147, INHERIT=148, INNER=149, 
		INOUT=150, INSENSITIVE=151, INSERT=152, INTERSECT=153, INTO=154, IS=155, 
		ISOBID=156, ITERATE=157, JAR=158, JOIN=159, KEEP=160, KEY=161, LABEL=162, 
		LANGUAGE=163, LAST=164, LC_CTYPE=165, LEAVE=166, LEFT=167, LIKE=168, LIMIT=169, 
		LOCAL=170, LOCALE=171, LOCATOR=172, LOCATORS=173, LOCK=174, LOCKMAX=175, 
		LOCKSIZE=176, LONG=177, LOOP=178, MAINTAINED=179, MATERIALIZED=180, MICROSECOND=181, 
		MICROSECONDS=182, MINUTEMINUTES=183, MODIFIES=184, MONTH=185, MONTHS=186, 
		NEXT=187, NEXTVAL=188, NO=189, NONE=190, NOT=191, NULL=192, NULLS=193, 
		NUMPARTS=194, OBID=195, OF=196, OFFSET=197, OLD=198, ON=199, OPEN=200, 
		OPTIMIZATION=201, OPTIMIZE=202, OR=203, ORDER=204, ORGANIZATION=205, OUT=206, 
		OUTER=207, PACKAGE=208, PADDED=209, PARAMETER=210, PART=211, PARTITION=212, 
		PARTITIONED=213, PARTITIONING=214, PATH=215, PERIOD=216, PIECESIZE=217, 
		PLAN=218, PRECISION=219, PREPARE=220, PREVVAL=221, PRIOR=222, PRIQTY=223, 
		PRIVILEGES=224, PROCEDURE=225, PROGRAM=226, PSID=227, PUBLIC=228, QUERY=229, 
		QUERYNO=230, READS=231, REFERENCES=232, REFRESH=233, RELEASE=234, RENAME=235, 
		REPEAT=236, RESIGNAL=237, RESTRICT=238, RESULT=239, RESULT_SET_LOCATOR=240, 
		RETURN=241, RETURNS=242, REVOKE=243, RIGHT=244, ROLE=245, ROLLBACK=246, 
		ROLLUP=247, ROUND_CEILING=248, ROUND_DOWN=249, ROUND_FLOOR=250, ROUND_HALF_DOWN=251, 
		ROUND_HALF_EVEN=252, ROUND_HALF_UP=253, ROUND_UP=254, ROW=255, ROWSET=256, 
		RUN=257, SAVEPOINT=258, SCHEMA=259, SCRATCHPAD=260, SECOND=261, SECONDS=262, 
		SECQTY=263, SECURITY=264, SELECT=265, SENSITIVE=266, SEQUENCE=267, SET=268, 
		SIGNAL=269, SIMPLE=270, SOME=271, SOURCE=272, SPECIFIC=273, STANDARD=274, 
		STATEMENT=275, STATIC=276, STAY=277, STOGROUP=278, STORES=279, STYLE=280, 
		SUMMARY=281, SYNONYM=282, SYSDATE=283, SYSTEM=284, SYSTIMESTAMP=285, TABLE=286, 
		TABLESPACE=287, THEN=288, TO=289, TRIGGER=290, TRUNCATE=291, TYPE=292, 
		UNDO=293, UNION=294, UNIQUE=295, UNTIL=296, UPDATE=297, USING=298, VALIDPROC=299, 
		VALUE=300, VALUES=301, VARIABLE=302, VARIANT=303, VCAT=304, VERSIONING=305, 
		VIEW=306, VOLATILE=307, VOLUMES=308, WHEN=309, WHENEVER=310, WHERE=311, 
		WHILE=312, WITH=313, WLM=314, XMLCAST=315, XMLEXISTS=316, XMLNAMESPACES=317, 
		YEAR=318, YEARS=319, ZONE=320, AND=321, ARRAY_AGG=322, ASC=323, AVG=324, 
		BIT=325, CHANGE=326, CODEUNITS16=327, CODEUNITS32=328, CORR=329, CORRELATION=330, 
		COUNT=331, COUNT_BIG=332, COVAR=333, COVARIANCE=334, COVARIANCE_SAMP=335, 
		COVAR_POP=336, COVAR_SAMP=337, CS=338, CUME_DIST=339, DENSE_RANK=340, 
		DESC=341, EBCDIC=342, EXCLUSIVE=343, FIRST_VALUE=344, FOLLOWING=345, GROUPING=346, 
		IGNORE=347, INDICATOR=348, INPUT=349, ISNULL=350, LAG=351, LARGE=352, 
		LAST_VALUE=353, LEAD=354, LISTAGG=355, LOCKED=356, LOCKS=357, MEDIAN=358, 
		MINUTES=359, MIXED=360, NOTNULL=361, NTH_VALUE=362, NTILE=363, NUMERIC=364, 
		OBJECT=365, OCTETS=366, ONLY=367, OVER=368, PASSING=369, PERCENTILE_CONT=370, 
		PERCENTILE_DISC=371, PERCENT_RANK=372, PRECEDING=373, PREVIOUS=374, RANGE=375, 
		RANK=376, RATIO_TO_REPORT=377, READ=378, REF=379, REGR_AVGX=380, REGR_AVGY=381, 
		REGR_COUNT=382, REGR_ICPT=383, REGR_INTERCEPT=384, REGR_R2=385, REGR_SLOPE=386, 
		REGR_SXX=387, REGR_SXY=388, REGR_SYY=389, RESPECT=390, ROW_NUMBER=391, 
		ROWS=392, RR=393, RS=394, SBCS=395, SELECTIVITY=396, SETS=397, SHARE=398, 
		SKIP_=399, STDDEV=400, STDDEV_POP=401, STDDEV_SAMP=402, SUM=403, TOKEN=404, 
		UNBOUNDED=405, UNPACK=406, UR=407, USE=408, VAR=409, VARIANCE=410, VARIANCE_SAMP=411, 
		VAR_POP=412, VAR_SAMP=413, VARYING=414, WITHOUT=415, XML=416, XMLAGG=417, 
		COLUMNS=418, SQLID=419, ORDINALITY=420, SYSTEM_TIME=421, BUSINESS_TIME=422, 
		MULTIPLIER=423, UNNEST=424, CROSS=425, CALLER=426, CLIENT=427, POSITIONING=428, 
		SCROLL=429, ACTION=430, ASSEMBLE=431, C_=432, CALLED=433, COBOL=434, DB2=435, 
		DEFINER=436, DISPATCH=437, ENVIRONMENT=438, FAILURE=439, FAILURES=440, 
		JAVA=441, MAIN=442, NAME=443, OPTIONS=444, PARALLEL=445, PLI=446, REGISTERS=447, 
		RESIDENT=448, SECURED=449, SPECIAL=450, SQL=451, STOP=452, SUB=453, YES=454, 
		APPLICATION=455, CHANGED=456, COMPATIBILITY=457, COMPRESS=458, COPY=459, 
		FREEPAGE=460, GBPCACHE=461, INCLUDE=462, MAXVALUE=463, MINVALUE=464, PCTFREE=465, 
		REGENERATE=466, MASK=467, ENABLE=468, PERMISSION=469, ATOMIC=470, SQLEXCEPTION=471, 
		MERGE=472, MATCHED=473, SQLSTATE=474, MESSAGE_TEXT=475, OVERRIDING=476, 
		PORTION=477, DB2SQL=478, DEBUG=479, GENERAL=480, MODE_=481, REXX=482, 
		CACHE=483, CYCLE=484, INCREMENT=485, RESTART=486, DATACLAS=487, MGMTCLAS=488, 
		REMOVE=489, STORCLAS=490, ACCESS=491, ACTIVATE=492, ALWAYS=493, APPEND=494, 
		ARCHIVE=495, BUSINESS=496, CASCADE=497, CHANGES=498, CONTROL=499, DEACTIVATE=500, 
		DEFERRED=501, EACH=502, ENFORCED=503, EXTRA=504, FOREIGN=505, HIDDEN_=506, 
		HISTORY=507, ID=508, IDENTITY=509, IMPLICITLY=510, INITIALLY=511, INLINE=512, 
		OPERATION=513, ORGANIZE=514, OVERLAPS=515, PACKAGE_NAME=516, PACKAGE_SCHEMA=517, 
		PACKAGE_VERSION=518, PRIMARY=519, RESET=520, ROTATE=521, START=522, SYSIBM=523, 
		TRANSACTION=524, XMLSCHEMA=525, ELEMENT=526, URL=527, NAMESPACE=528, LOCATION=529, 
		SYSXSR=530, ALGORITHM=531, FIXEDLENGTH=532, HUFFMAN=533, LOB=534, LOG=535, 
		LOGGED=536, MAXPARTITIONS=537, MAXROWS=538, MEMBER=539, MOVE=540, PAGE=541, 
		PAGENUM=542, PENDING=543, RELATIVE=544, SEGSIZE=545, TRACKMOD=546, ADDRESS=547, 
		ATTRIBUTES=548, AUTHENTICATION=549, AUTHID=550, CONTEXT=551, JOBNAME=552, 
		OWNER=553, PROFILE=554, QUALIFIER=555, SERVAUTH=556, TRUSTED=557, SECTION=558, 
		ACTIVE=559, VERSION=560, ALIAS=561, WORK=562, WORKFILE=563, SYSDEFLT=564, 
		NULTERM=565, STRUCTURE=566, GENERIC=567, ABS=568, ABSVAL=569, ACOS=570, 
		ADD_DAYS=571, ADD_MONTHS=572, ARRAY_DELETE=573, ARRAY_FIRST=574, ARRAY_LAST=575, 
		ARRAY_NEXT=576, ARRAY_PRIOR=577, ARRAY_TRIM=578, ASCII=579, ASCII_CHR=580, 
		ASCIISTR=581, ASCII_STR=582, ASIN=583, ATAN=584, ATAN2=585, ATANH=586, 
		BIGINT=587, BINARY=588, BITAND=589, BITANDNOT=590, BITNOT=591, BITOR=592, 
		BITXOR=593, BLOB=594, BTRIM=595, CARDINALITY=596, CCSID_ENCODING=597, 
		CEIL=598, CEILING=599, CHAR9=600, CHARACTER_LENGTH=601, CHAR_LENGTH=602, 
		CHR=603, CLOB=604, COALESCE=605, COLLATION_KEY=606, COMPARE_DECFLOAT=607, 
		COS=608, COSH=609, DATE=610, DAYOFMONTH=611, DAYOFWEEK=612, DAYOFWEEK_ISO=613, 
		DAYOFYEAR=614, DAYS_BETWEEN=615, DBCLOB=616, DEC=617, DECFLOAT=618, DECFLOAT_FORMAT=619, 
		DECFLOAT_SORTKEY=620, DECIMAL=621, DECODE=622, DECRYPT_BINARY=623, DECRYPT_BIT=624, 
		DECRYPT_CHAR=625, DECRYPT_DATAKEY_BIGINT=626, DECRYPT_DATAKEY_BIT=627, 
		DECRYPT_DATAKEY_CLOB=628, DECRYPT_DATAKEY_DBCLOB=629, DECRYPT_DATAKEY_DECIMAL=630, 
		DECRYPT_DATAKEY_INTEGER=631, DECRYPT_DATAKEY_VARCHAR=632, DECRYPT_DATAKEY_VARGRAPHIC=633, 
		DECRYPT_DB=634, DEGREES=635, DIFFERENCE=636, DIGITS=637, DOUBLE_PRECISION=638, 
		DSN_XMLVALIDATE=639, EBCDIC_CHR=640, EBCDIC_STR=641, ENCRYPT_DATAKEY=642, 
		ENCRYPT_TDES=643, EXP=644, EXTRACT=645, FLOAT=646, FLOOR=647, GENERATE_UNIQUE=648, 
		GENERATE_UNIQUE_BINARY=649, GETHINT=650, GETVARIABLE=651, GRAPHIC=652, 
		GREATEST=653, HASH=654, HASH_CRC32=655, HASH_MD5=656, HASH_SHA1=657, HASH_SHA256=658, 
		HEX=659, IDENTITY_VAL_LOCAL=660, IFNULL=661, INSTR=662, INT=663, INTEGER=664, 
		JULIAN_DAY=665, LAST_DAY=666, LCASE=667, LEAST=668, LENGTH=669, LN=670, 
		LOCATE=671, LOCATE_IN_STRING=672, LOG10=673, LOWER=674, LPAD=675, LTRIM=676, 
		MAX=677, MAX_CARDINALITY=678, MIDNIGHT_SECONDS=679, MIN=680, MINUTE=681, 
		MOD=682, MONTHS_BETWEEN=683, MQREAD=684, MQREADCLOB=685, MQRECEIVE=686, 
		MQRECEIVECLOB=687, MQSEND=688, MULTIPLY_ALT=689, NEXT_DAY=690, NEXT_MONTH=691, 
		NORMALIZE_DECFLOAT=692, NORMALIZE_STRING=693, NULLIF=694, NVL=695, OVERLAY=696, 
		PACK=697, POSITION=698, POSSTR=699, POW=700, POWER=701, QUANTIZE=702, 
		QUARTER=703, RADIANS=704, RAISE_ERROR=705, RAND=706, RANDOM=707, REAL=708, 
		REGEXP_COUNT=709, REGEXP_INSTR=710, REGEXP_LIKE=711, REGEXP_REPLACE=712, 
		REGEXP_SUBSTR=713, REPLACE=714, RID=715, ROUND=716, ROUND_TIMESTAMP=717, 
		ROWID=718, RPAD=719, RTRIM=720, SCORE=721, SIGN=722, SIN=723, SINH=724, 
		SMALLINT=725, SOAPHTTPC=726, SOAPHTTPNC=727, SOAPHTTPNV=728, SOAPHTTPV=729, 
		SOUNDEX=730, SPACE=731, SQRT=732, STRIP=733, STRLEFT=734, STRPOS=735, 
		STRRIGHT=736, SUBSTR=737, SUBSTRING=738, TAN=739, TANH=740, TIME=741, 
		TIMESTAMP=742, TIMESTAMPADD=743, TIMESTAMPDIFF=744, TIMESTAMP_FORMAT=745, 
		TIMESTAMP_ISO=746, TIMESTAMP_TZ=747, TO_CHAR=748, TO_CLOB=749, TO_DATE=750, 
		TO_NUMBER=751, TOTALORDER=752, TO_TIMESTAMP=753, TRANSLATE=754, TRIM=755, 
		TRIM_ARRAY=756, TRUNC=757, TRUNC_TIMESTAMP=758, UCASE=759, UNICODE=760, 
		UNICODE_STR=761, UNISTR=762, UPPER=763, VARBINARY=764, VARCHAR=765, VARCHAR9=766, 
		VARCHAR_BIT_FORMAT=767, VARCHAR_FORMAT=768, VARGRAPHIC=769, VERIFY_GROUP_FOR_USER=770, 
		VERIFY_ROLE_FOR_USER=771, VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER=772, WEEK=773, 
		WEEK_ISO=774, WRAP=775, XMLATTRIBUTES=776, XMLCOMMENT=777, XMLCONCAT=778, 
		XMLDOCUMENT=779, XMLELEMENT=780, XMLFOREST=781, XMLMODIFY=782, XMLPARSE=783, 
		XMLPI=784, XMLQUERY=785, XMLSERIALIZE=786, XMLTEXT=787, XMLXSROBJECTID=788, 
		XSLTRANSFORM=789, CURRENT_ACCELERATOR=790, CURRENT_APPLICATION_COMPATIBILITY=791, 
		CURRENT_APPLICATION_ENCODING_SCHEME=792, CURRENT_CLIENT_ACCTNG=793, CURRENT_CLIENT_APPLNAME=794, 
		CURRENT_CLIENT_CORR_TOKEN=795, CURRENT_CLIENT_USERID=796, CURRENT_CLIENT_WRKSTNNAME=797, 
		CURRENT_DATE=798, CURRENT_DEBUG_MODE=799, CURRENT_DECFLOAT_ROUNDING_MODE=800, 
		CURRENT_DEGREE=801, CURRENT_EXPLAIN_MODE=802, CURRENT_GET_ACCEL_ARCHIVE=803, 
		CURRENT_LOCALE_LC_CTYPE=804, CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION=805, 
		CURRENT_MEMBER=806, CURRENT_OPTIMIZATION_HINT=807, CURRENT_PACKAGE_PATH=808, 
		CURRENT_PACKAGESET=809, CURRENT_PATH=810, CURRENT_PRECISION=811, CURRENT_QUERY_ACCELERATION=812, 
		CURRENT_QUERY_ACCELERATION_WAITFORDATA=813, CURRENT_REFRESH_AGE=814, CURRENT_ROUTINE_VERSION=815, 
		CURRENT_RULES=816, CURRENT_SCHEMA=817, CURRENT_SERVER=818, CURRENT_SQLID=819, 
		CURRENT_TEMPORAL_BUSINESS_TIME=820, CURRENT_TEMPORAL_SYSTEM_TIME=821, 
		CURRENT_TIME=822, CURRENT_TIMESTAMP=823, CURRENT_TIME_ZONE=824, ENCRYPTION_PASSWORD=825, 
		SESSION_TIME_ZONE=826, SESSION_USER=827, USER=828, ADMIN_TASK_LIST=829, 
		ADMIN_TASK_OUTPUT=830, ADMIN_TASK_STATUS=831, BLOCKING_THREADS=832, MQREADALL=833, 
		MQREADALLCLOB=834, MQRECEIVEALL=835, MQRECEIVEALLCLOB=836, XMLTABLE=837, 
		SQLIDENTIFIER=838;
	public static final int
		RULE_startRule = 0, RULE_sqlStatement = 1, RULE_query = 2, RULE_declareCursorStatement = 3, 
		RULE_cursorName = 4, RULE_statementName = 5, RULE_holdability = 6, RULE_returnability = 7, 
		RULE_rowsetPositioning = 8, RULE_declareTableStatement = 9, RULE_notNullPhrase = 10, 
		RULE_declareStatementStatement = 11, RULE_allocateCursorStatement = 12, 
		RULE_rsLocatorVariable = 13, RULE_alterDatabaseStatement = 14, RULE_alterFunctionStatement = 15, 
		RULE_alterIndexStatement = 16, RULE_alterMaskStatement = 17, RULE_alterPermissionStatement = 18, 
		RULE_alterProcedureStatement = 19, RULE_alterSequenceStatement = 20, RULE_alterStogroupStatement = 21, 
		RULE_alterTableStatement = 22, RULE_alterTablespaceStatement = 23, RULE_alterTriggerStatement = 24, 
		RULE_alterTrustedContextStatement = 25, RULE_alterViewStatement = 26, 
		RULE_associateLocatorsStatement = 27, RULE_beginDeclareSectionStatement = 28, 
		RULE_callStatement = 29, RULE_closeStatement = 30, RULE_commentStatement = 31, 
		RULE_commitStatement = 32, RULE_connectStatement = 33, RULE_createAliasStatement = 34, 
		RULE_createAuxiliaryTableStatement = 35, RULE_createDatabaseStatement = 36, 
		RULE_createFunctionStatement = 37, RULE_createFunctionStatementExternalScalar = 38, 
		RULE_createFunctionStatementExternalTable = 39, RULE_createFunctionStatementSourced = 40, 
		RULE_createFunctionStatementInlineSqlScalar = 41, RULE_parameterDeclaration1 = 42, 
		RULE_parameterDeclaration2 = 43, RULE_createFunctionStatementExternalScalarOptions = 44, 
		RULE_createFunctionStatementExternalTableOptions = 45, RULE_createFunctionStatementSourcedOptions = 46, 
		RULE_createFunctionStatementInlineSqlScalarOptions = 47, RULE_sequenceAlias = 48, 
		RULE_tableAlias = 49, RULE_authorization = 50, RULE_searchedDelete = 51, 
		RULE_positionedDelete = 52, RULE_deleteStatement = 53, RULE_insertStatement = 54, 
		RULE_mergeStatement = 55, RULE_searchedUpdate = 56, RULE_positionedUpdate = 57, 
		RULE_updateStatement = 58, RULE_sourceValues = 59, RULE_valuesSingleRow = 60, 
		RULE_valuesMultipleRow = 61, RULE_matchingCondition = 62, RULE_modificationOperation = 63, 
		RULE_assignmentClause = 64, RULE_updateOperation = 65, RULE_deleteOperation = 66, 
		RULE_insertOperation = 67, RULE_signalStatement = 68, RULE_signalInformation = 69, 
		RULE_valuesList1 = 70, RULE_valuesList2 = 71, RULE_valuesList3 = 72, RULE_valuesList4 = 73, 
		RULE_includeColumns = 74, RULE_multipleRowInsert = 75, RULE_regenerateClause = 76, 
		RULE_alterIndexOptions = 77, RULE_alterIndexPartitionOptions = 78, RULE_usingSpecification = 79, 
		RULE_freeSpecification = 80, RULE_gbpcacheSpecification = 81, RULE_partitionElement = 82, 
		RULE_applCompatValue = 83, RULE_functionLevel = 84, RULE_functionParameterType = 85, 
		RULE_functionDataType = 86, RULE_functionBuiltInType = 87, RULE_functionOptionList = 88, 
		RULE_procedureOptionList = 89, RULE_sequenceOptionList = 90, RULE_stogroupOptionList = 91, 
		RULE_tableOptionList = 92, RULE_tablespaceOptionList = 93, RULE_trustedContextOptionList = 94, 
		RULE_databaseOptionList = 95, RULE_alterAttributesOptions = 96, RULE_addAttributesOptions = 97, 
		RULE_dropAttributesOptions = 98, RULE_userClause = 99, RULE_userClauseAddOptions = 100, 
		RULE_userClauseReplaceOptions = 101, RULE_userClauseDropOptions = 102, 
		RULE_useOptions = 103, RULE_alterPartitionClause = 104, RULE_usingBlock = 105, 
		RULE_freeBlock = 106, RULE_moveTableClause = 107, RULE_gbpcacheBlock = 108, 
		RULE_aliasDesignator = 109, RULE_multipleColumnList = 110, RULE_functionDesignator = 111, 
		RULE_parameterType = 112, RULE_columnDefinitionOptionList1 = 113, RULE_columnDefinitionOptionList2 = 114, 
		RULE_columnConstraint = 115, RULE_generatedClause = 116, RULE_asIdentityClause = 117, 
		RULE_asIdentityClauseOptionList = 118, RULE_asRowChangeTimestampClause = 119, 
		RULE_asRowTransactionStartIDClause = 120, RULE_asRowTransactionTimestampClause = 121, 
		RULE_asGeneratedExpressionClause = 122, RULE_nonDeterministicExpression = 123, 
		RULE_nonDeterministicExpressionSessionVariable = 124, RULE_columnAlteration = 125, 
		RULE_columnAlterationOptionList = 126, RULE_alteredDataType = 127, RULE_dataType = 128, 
		RULE_builtInType = 129, RULE_xmlTypeModifier = 130, RULE_xmlSchemaSpecification = 131, 
		RULE_xmlElementName = 132, RULE_registeredXmlSchemaName = 133, RULE_targetNamespace = 134, 
		RULE_schemaLocation = 135, RULE_identityAlteration = 136, RULE_uniqueConstraint = 137, 
		RULE_referentialConstraint = 138, RULE_referencesClause = 139, RULE_checkConstraint = 140, 
		RULE_partitioningClause = 141, RULE_partitionExpression = 142, RULE_partitionLimitKey = 143, 
		RULE_partitioningPhrase = 144, RULE_partitionHashSpace = 145, RULE_alterHashOrganization = 146, 
		RULE_partitioningClauseElement = 147, RULE_partitionClause = 148, RULE_rotatePartitionClause = 149, 
		RULE_extraRowOption = 150, RULE_materializedQueryDefinition = 151, RULE_materializedQueryAlteration = 152, 
		RULE_refreshableTableOptions = 153, RULE_refreshableTableOptionsList = 154, 
		RULE_materializedQueryTableAlteration = 155, RULE_periodDefinition = 156, 
		RULE_columnDefinition = 157, RULE_externalProgramName = 158, RULE_packagePath = 159, 
		RULE_collectionID = 160, RULE_runTimeOptions = 161, RULE_comparisonOperator = 162, 
		RULE_operator = 163, RULE_expression = 164, RULE_rowChangeExpression = 165, 
		RULE_sequenceReference = 166, RULE_functionInvocation = 167, RULE_scalarFunctionInvocation = 168, 
		RULE_aggregateFunctionInvocation = 169, RULE_regressionFunctionInvocation = 170, 
		RULE_externalFunctionInvocation = 171, RULE_labeledDuration = 172, RULE_xmlCastSpecification = 173, 
		RULE_arrayElementSpecification = 174, RULE_arrayIndex = 175, RULE_arrayConstructor = 176, 
		RULE_olapSpecification = 177, RULE_orderedOlapSpecification = 178, RULE_olapSpecificationFunction = 179, 
		RULE_lagFunction = 180, RULE_leadFunction = 181, RULE_respectNullsClause = 182, 
		RULE_windowPartitionClause = 183, RULE_windowOrderClause = 184, RULE_windowOrderClauseQualifier = 185, 
		RULE_numberingSpecification = 186, RULE_aggregationSpecification = 187, 
		RULE_aggregateFunction = 188, RULE_regressionFunction = 189, RULE_olapColumnFunction = 190, 
		RULE_firstValueFunction = 191, RULE_lastValueFunction = 192, RULE_nthValueFunction = 193, 
		RULE_ratioToReportFunction = 194, RULE_windowAggregationGroupClause = 195, 
		RULE_groupStart = 196, RULE_groupBetween = 197, RULE_groupEnd = 198, RULE_groupBound1 = 199, 
		RULE_groupBound2 = 200, RULE_unboundedPreceding = 201, RULE_unboundedFollowing = 202, 
		RULE_boundedPreceding = 203, RULE_boundedFollowing = 204, RULE_currentRow = 205, 
		RULE_scalarFunction = 206, RULE_tableFunction = 207, RULE_specialRegister = 208, 
		RULE_xmltableFunctionSpecification = 209, RULE_rowXqueryExpressionConstant = 210, 
		RULE_rowXqueryArgument = 211, RULE_xqueryContextItemExpression = 212, 
		RULE_xqueryVariableExpression = 213, RULE_xmlTableRegularColumnDefinition = 214, 
		RULE_defaultClause = 215, RULE_defaultClause1 = 216, RULE_defaultClause2 = 217, 
		RULE_defaultClauseAllowables = 218, RULE_distinctTypeCastFunctionName = 219, 
		RULE_columnXqueryExpressionConstant = 220, RULE_xmlTableOrdinalityColumnDefinition = 221, 
		RULE_xmlnamespacesDeclaration = 222, RULE_xmlnamespacesFunctionSpecification = 223, 
		RULE_xmlnamespacesFunctionArguments = 224, RULE_namespaceUri = 225, RULE_namespacePrefix = 226, 
		RULE_timeZoneSpecificExpression = 227, RULE_timeZoneExpressionSubset = 228, 
		RULE_caseExpression = 229, RULE_resultExpression = 230, RULE_searchedWhenClause = 231, 
		RULE_simpleWhenClause = 232, RULE_searchCondition = 233, RULE_checkCondition = 234, 
		RULE_predicate = 235, RULE_basicPredicate = 236, RULE_rowValueExpression = 237, 
		RULE_quantifiedPredicate = 238, RULE_arrayExistsPredicate = 239, RULE_betweenPredicate = 240, 
		RULE_distinctPredicate = 241, RULE_existsPredicate = 242, RULE_inPredicate = 243, 
		RULE_likePredicate = 244, RULE_nullPredicate = 245, RULE_xmlExistsPredicate = 246, 
		RULE_arrayExpression = 247, RULE_castSpecification = 248, RULE_parameterMarker = 249, 
		RULE_castDataType = 250, RULE_castBuiltInType = 251, RULE_integerInParens = 252, 
		RULE_length = 253, RULE_ccsidQualifier = 254, RULE_forDataQualifier = 255, 
		RULE_distinctTypeName = 256, RULE_arrayType = 257, RULE_literal = 258, 
		RULE_ccsidValue = 259, RULE_columnName = 260, RULE_sourceColumnName = 261, 
		RULE_targetColumnName = 262, RULE_newColumnName = 263, RULE_beginColumnName = 264, 
		RULE_endColumnName = 265, RULE_correlationName = 266, RULE_locationName = 267, 
		RULE_schemaName = 268, RULE_tableName = 269, RULE_alterTableName = 270, 
		RULE_auxTableName = 271, RULE_historyTableName = 272, RULE_cloneTableName = 273, 
		RULE_archiveTableName = 274, RULE_viewName = 275, RULE_programName = 276, 
		RULE_packageName = 277, RULE_planName = 278, RULE_typeName = 279, RULE_variableName = 280, 
		RULE_aliasName = 281, RULE_constraintName = 282, RULE_routineVersionID = 283, 
		RULE_versionID = 284, RULE_indexName = 285, RULE_maskName = 286, RULE_permissionName = 287, 
		RULE_procedureName = 288, RULE_sequenceName = 289, RULE_memberName = 290, 
		RULE_databaseName = 291, RULE_tablespaceName = 292, RULE_catalogName = 293, 
		RULE_triggerName = 294, RULE_contextName = 295, RULE_authorizationName = 296, 
		RULE_profileName = 297, RULE_roleName = 298, RULE_seclabelName = 299, 
		RULE_parameterName = 300, RULE_addressValue = 301, RULE_jobnameValue = 302, 
		RULE_servauthValue = 303, RULE_encryptionValue = 304, RULE_bpName = 305, 
		RULE_stogroupName = 306, RULE_dcName = 307, RULE_mcName = 308, RULE_scName = 309, 
		RULE_volumeID = 310, RULE_keyLabelName = 311, RULE_functionName = 312, 
		RULE_specificName = 313, RULE_hostVariable = 314, RULE_hostIdentifier = 315, 
		RULE_hostStructure = 316, RULE_variable = 317, RULE_intoClause = 318, 
		RULE_correlationClause = 319, RULE_fromClause = 320, RULE_tableReference = 321, 
		RULE_singleTableReference = 322, RULE_periodSpecification = 323, RULE_periodClause = 324, 
		RULE_nestedTableExpression = 325, RULE_dataChangeTableReference = 326, 
		RULE_tableFunctionReference = 327, RULE_tableUdfCardinalityClause = 328, 
		RULE_typedCorrelationClause = 329, RULE_tableLocatorReference = 330, RULE_xmltableExpression = 331, 
		RULE_collectionDerivedTable = 332, RULE_joinCondition = 333, RULE_fullJoinExpression = 334, 
		RULE_castFunction = 335, RULE_ordinaryArrayExpression = 336, RULE_associativeArrayExpression = 337, 
		RULE_comparison = 338, RULE_whereClause = 339, RULE_groupByClause = 340, 
		RULE_havingClause = 341, RULE_groupingExpression = 342, RULE_groupingSets = 343, 
		RULE_groupingSetsGroup = 344, RULE_superGroups = 345, RULE_selectColumns = 346, 
		RULE_unpackedRow = 347, RULE_selectClause = 348, RULE_subSelect = 349, 
		RULE_selectIntoStatement = 350, RULE_selectStatement = 351, RULE_commonTableExpression = 352, 
		RULE_updateClause = 353, RULE_readOnlyClause = 354, RULE_optimizeClause = 355, 
		RULE_isolationClause = 356, RULE_lockClause = 357, RULE_skipLockedDataClause = 358, 
		RULE_querynoClause = 359, RULE_scalarFullSelect = 360, RULE_fullSelect = 361, 
		RULE_valuesClause = 362, RULE_orderByClause = 363, RULE_sortKey = 364, 
		RULE_offsetClause = 365, RULE_fetchClause = 366, RULE_identifier = 367, 
		RULE_sqlKeyword = 368;
	private static String[] makeRuleNames() {
		return new String[] {
			"startRule", "sqlStatement", "query", "declareCursorStatement", "cursorName", 
			"statementName", "holdability", "returnability", "rowsetPositioning", 
			"declareTableStatement", "notNullPhrase", "declareStatementStatement", 
			"allocateCursorStatement", "rsLocatorVariable", "alterDatabaseStatement", 
			"alterFunctionStatement", "alterIndexStatement", "alterMaskStatement", 
			"alterPermissionStatement", "alterProcedureStatement", "alterSequenceStatement", 
			"alterStogroupStatement", "alterTableStatement", "alterTablespaceStatement", 
			"alterTriggerStatement", "alterTrustedContextStatement", "alterViewStatement", 
			"associateLocatorsStatement", "beginDeclareSectionStatement", "callStatement", 
			"closeStatement", "commentStatement", "commitStatement", "connectStatement", 
			"createAliasStatement", "createAuxiliaryTableStatement", "createDatabaseStatement", 
			"createFunctionStatement", "createFunctionStatementExternalScalar", "createFunctionStatementExternalTable", 
			"createFunctionStatementSourced", "createFunctionStatementInlineSqlScalar", 
			"parameterDeclaration1", "parameterDeclaration2", "createFunctionStatementExternalScalarOptions", 
			"createFunctionStatementExternalTableOptions", "createFunctionStatementSourcedOptions", 
			"createFunctionStatementInlineSqlScalarOptions", "sequenceAlias", "tableAlias", 
			"authorization", "searchedDelete", "positionedDelete", "deleteStatement", 
			"insertStatement", "mergeStatement", "searchedUpdate", "positionedUpdate", 
			"updateStatement", "sourceValues", "valuesSingleRow", "valuesMultipleRow", 
			"matchingCondition", "modificationOperation", "assignmentClause", "updateOperation", 
			"deleteOperation", "insertOperation", "signalStatement", "signalInformation", 
			"valuesList1", "valuesList2", "valuesList3", "valuesList4", "includeColumns", 
			"multipleRowInsert", "regenerateClause", "alterIndexOptions", "alterIndexPartitionOptions", 
			"usingSpecification", "freeSpecification", "gbpcacheSpecification", "partitionElement", 
			"applCompatValue", "functionLevel", "functionParameterType", "functionDataType", 
			"functionBuiltInType", "functionOptionList", "procedureOptionList", "sequenceOptionList", 
			"stogroupOptionList", "tableOptionList", "tablespaceOptionList", "trustedContextOptionList", 
			"databaseOptionList", "alterAttributesOptions", "addAttributesOptions", 
			"dropAttributesOptions", "userClause", "userClauseAddOptions", "userClauseReplaceOptions", 
			"userClauseDropOptions", "useOptions", "alterPartitionClause", "usingBlock", 
			"freeBlock", "moveTableClause", "gbpcacheBlock", "aliasDesignator", "multipleColumnList", 
			"functionDesignator", "parameterType", "columnDefinitionOptionList1", 
			"columnDefinitionOptionList2", "columnConstraint", "generatedClause", 
			"asIdentityClause", "asIdentityClauseOptionList", "asRowChangeTimestampClause", 
			"asRowTransactionStartIDClause", "asRowTransactionTimestampClause", "asGeneratedExpressionClause", 
			"nonDeterministicExpression", "nonDeterministicExpressionSessionVariable", 
			"columnAlteration", "columnAlterationOptionList", "alteredDataType", 
			"dataType", "builtInType", "xmlTypeModifier", "xmlSchemaSpecification", 
			"xmlElementName", "registeredXmlSchemaName", "targetNamespace", "schemaLocation", 
			"identityAlteration", "uniqueConstraint", "referentialConstraint", "referencesClause", 
			"checkConstraint", "partitioningClause", "partitionExpression", "partitionLimitKey", 
			"partitioningPhrase", "partitionHashSpace", "alterHashOrganization", 
			"partitioningClauseElement", "partitionClause", "rotatePartitionClause", 
			"extraRowOption", "materializedQueryDefinition", "materializedQueryAlteration", 
			"refreshableTableOptions", "refreshableTableOptionsList", "materializedQueryTableAlteration", 
			"periodDefinition", "columnDefinition", "externalProgramName", "packagePath", 
			"collectionID", "runTimeOptions", "comparisonOperator", "operator", "expression", 
			"rowChangeExpression", "sequenceReference", "functionInvocation", "scalarFunctionInvocation", 
			"aggregateFunctionInvocation", "regressionFunctionInvocation", "externalFunctionInvocation", 
			"labeledDuration", "xmlCastSpecification", "arrayElementSpecification", 
			"arrayIndex", "arrayConstructor", "olapSpecification", "orderedOlapSpecification", 
			"olapSpecificationFunction", "lagFunction", "leadFunction", "respectNullsClause", 
			"windowPartitionClause", "windowOrderClause", "windowOrderClauseQualifier", 
			"numberingSpecification", "aggregationSpecification", "aggregateFunction", 
			"regressionFunction", "olapColumnFunction", "firstValueFunction", "lastValueFunction", 
			"nthValueFunction", "ratioToReportFunction", "windowAggregationGroupClause", 
			"groupStart", "groupBetween", "groupEnd", "groupBound1", "groupBound2", 
			"unboundedPreceding", "unboundedFollowing", "boundedPreceding", "boundedFollowing", 
			"currentRow", "scalarFunction", "tableFunction", "specialRegister", "xmltableFunctionSpecification", 
			"rowXqueryExpressionConstant", "rowXqueryArgument", "xqueryContextItemExpression", 
			"xqueryVariableExpression", "xmlTableRegularColumnDefinition", "defaultClause", 
			"defaultClause1", "defaultClause2", "defaultClauseAllowables", "distinctTypeCastFunctionName", 
			"columnXqueryExpressionConstant", "xmlTableOrdinalityColumnDefinition", 
			"xmlnamespacesDeclaration", "xmlnamespacesFunctionSpecification", "xmlnamespacesFunctionArguments", 
			"namespaceUri", "namespacePrefix", "timeZoneSpecificExpression", "timeZoneExpressionSubset", 
			"caseExpression", "resultExpression", "searchedWhenClause", "simpleWhenClause", 
			"searchCondition", "checkCondition", "predicate", "basicPredicate", "rowValueExpression", 
			"quantifiedPredicate", "arrayExistsPredicate", "betweenPredicate", "distinctPredicate", 
			"existsPredicate", "inPredicate", "likePredicate", "nullPredicate", "xmlExistsPredicate", 
			"arrayExpression", "castSpecification", "parameterMarker", "castDataType", 
			"castBuiltInType", "integerInParens", "length", "ccsidQualifier", "forDataQualifier", 
			"distinctTypeName", "arrayType", "literal", "ccsidValue", "columnName", 
			"sourceColumnName", "targetColumnName", "newColumnName", "beginColumnName", 
			"endColumnName", "correlationName", "locationName", "schemaName", "tableName", 
			"alterTableName", "auxTableName", "historyTableName", "cloneTableName", 
			"archiveTableName", "viewName", "programName", "packageName", "planName", 
			"typeName", "variableName", "aliasName", "constraintName", "routineVersionID", 
			"versionID", "indexName", "maskName", "permissionName", "procedureName", 
			"sequenceName", "memberName", "databaseName", "tablespaceName", "catalogName", 
			"triggerName", "contextName", "authorizationName", "profileName", "roleName", 
			"seclabelName", "parameterName", "addressValue", "jobnameValue", "servauthValue", 
			"encryptionValue", "bpName", "stogroupName", "dcName", "mcName", "scName", 
			"volumeID", "keyLabelName", "functionName", "specificName", "hostVariable", 
			"hostIdentifier", "hostStructure", "variable", "intoClause", "correlationClause", 
			"fromClause", "tableReference", "singleTableReference", "periodSpecification", 
			"periodClause", "nestedTableExpression", "dataChangeTableReference", 
			"tableFunctionReference", "tableUdfCardinalityClause", "typedCorrelationClause", 
			"tableLocatorReference", "xmltableExpression", "collectionDerivedTable", 
			"joinCondition", "fullJoinExpression", "castFunction", "ordinaryArrayExpression", 
			"associativeArrayExpression", "comparison", "whereClause", "groupByClause", 
			"havingClause", "groupingExpression", "groupingSets", "groupingSetsGroup", 
			"superGroups", "selectColumns", "unpackedRow", "selectClause", "subSelect", 
			"selectIntoStatement", "selectStatement", "commonTableExpression", "updateClause", 
			"readOnlyClause", "optimizeClause", "isolationClause", "lockClause", 
			"skipLockedDataClause", "querynoClause", "scalarFullSelect", "fullSelect", 
			"valuesClause", "orderByClause", "sortKey", "offsetClause", "fetchClause", 
			"identifier", "sqlKeyword"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'('", "')'", "'['", "']'", "'?'", "'='", "'>'", "'<'", null, null, 
			null, "'+'", "'-'", "'*'", "'/'", "'||'", "'.'", "':'", "';'", "','"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "LPAREN", "RPAREN", "OPENSQBRACKET", "CLOSESQBRACKET", "QUESTIONMARK", 
			"EQ", "GT", "LT", "GE", "LE", "NE", "PLUS", "MINUS", "SPLAT", "SLASH", 
			"CONCATOP", "DOT", "COLON", "SEMICOLON", "COMMA", "NONNUMERICLITERAL", 
			"INTEGERLITERAL", "NUMERICLITERAL", "NEWLINE", "WS", "SQLCOMMENT", "SQLBLOCKCOMMENTBEGIN", 
			"SQLBLOCKCOMMENTEND", "ADD", "AFTER", "ALL", "ALLOCATE", "ALLOW", "ALTER", 
			"ALTERAND", "ANY", "ARRAY", "ARRAY_EXISTS", "AS", "ASENSITIVE", "ASSOCIATE", 
			"ASUTIME", "AT", "AUDIT", "AUX", "AUXILIARY", "BEFORE", "BEGIN", "BETWEEN", 
			"BUFFERPOOL", "BY", "CALL", "CAPTURE", "CASCADED", "CASE", "CAST", "CCSID", 
			"CHAR", "CHARACTER", "CHECK", "CLONE", "CLOSE", "CLUSTER", "COLLECTION", 
			"COLLID", "COLUMN", "COMMENT", "COMMIT", "CONCAT", "CONDITION", "CONNECT", 
			"CONNECTION", "CONSTRAINT", "CONTAINS", "CONTENT", "CONTINUE", "CREATE", 
			"CUBE", "CURRENT", "CURRENT_LC_CTYPE", "CURRVAL", "CURSOR", "DATA", "DATABASE", 
			"DAY", "DAYS", "DBINFO", "DECLARE", "DEFAULT", "DELETE", "DESCRIPTOR", 
			"DETERMINISTIC", "DISABLE", "DISALLOW", "DISTINCT", "DO", "DOCUMENT", 
			"DOUBLE", "DROP", "DSSIZE", "DYNAMIC", "EDITPROC", "ELSE", "ELSEIF", 
			"ENCODING", "ENCRYPTION", "END", "END_EXEC", "ENDING", "ERASE", "ESCAPE", 
			"EXCEPT", "EXCEPTION", "EXEC_SQL", "EXECUTE", "EXISTS", "EXIT", "EXPLAIN", 
			"EXTERNAL", "FENCED", "FETCH", "FIELDPROC", "FINAL", "FIRST", "FOR", 
			"FREE", "FROM", "FULL", "FUNCTION", "GENERATED", "GET", "GLOBAL", "GO", 
			"GOTO", "GRANT", "GROUP", "HANDLER", "HAVING", "HOLD", "HOUR", "HOURS", 
			"IF", "IMMEDIATE", "IN", "INCLUSIVE", "INDEX", "INDEXBP", "INHERIT", 
			"INNER", "INOUT", "INSENSITIVE", "INSERT", "INTERSECT", "INTO", "IS", 
			"ISOBID", "ITERATE", "JAR", "JOIN", "KEEP", "KEY", "LABEL", "LANGUAGE", 
			"LAST", "LC_CTYPE", "LEAVE", "LEFT", "LIKE", "LIMIT", "LOCAL", "LOCALE", 
			"LOCATOR", "LOCATORS", "LOCK", "LOCKMAX", "LOCKSIZE", "LONG", "LOOP", 
			"MAINTAINED", "MATERIALIZED", "MICROSECOND", "MICROSECONDS", "MINUTEMINUTES", 
			"MODIFIES", "MONTH", "MONTHS", "NEXT", "NEXTVAL", "NO", "NONE", "NOT", 
			"NULL", "NULLS", "NUMPARTS", "OBID", "OF", "OFFSET", "OLD", "ON", "OPEN", 
			"OPTIMIZATION", "OPTIMIZE", "OR", "ORDER", "ORGANIZATION", "OUT", "OUTER", 
			"PACKAGE", "PADDED", "PARAMETER", "PART", "PARTITION", "PARTITIONED", 
			"PARTITIONING", "PATH", "PERIOD", "PIECESIZE", "PLAN", "PRECISION", "PREPARE", 
			"PREVVAL", "PRIOR", "PRIQTY", "PRIVILEGES", "PROCEDURE", "PROGRAM", "PSID", 
			"PUBLIC", "QUERY", "QUERYNO", "READS", "REFERENCES", "REFRESH", "RELEASE", 
			"RENAME", "REPEAT", "RESIGNAL", "RESTRICT", "RESULT", "RESULT_SET_LOCATOR", 
			"RETURN", "RETURNS", "REVOKE", "RIGHT", "ROLE", "ROLLBACK", "ROLLUP", 
			"ROUND_CEILING", "ROUND_DOWN", "ROUND_FLOOR", "ROUND_HALF_DOWN", "ROUND_HALF_EVEN", 
			"ROUND_HALF_UP", "ROUND_UP", "ROW", "ROWSET", "RUN", "SAVEPOINT", "SCHEMA", 
			"SCRATCHPAD", "SECOND", "SECONDS", "SECQTY", "SECURITY", "SELECT", "SENSITIVE", 
			"SEQUENCE", "SET", "SIGNAL", "SIMPLE", "SOME", "SOURCE", "SPECIFIC", 
			"STANDARD", "STATEMENT", "STATIC", "STAY", "STOGROUP", "STORES", "STYLE", 
			"SUMMARY", "SYNONYM", "SYSDATE", "SYSTEM", "SYSTIMESTAMP", "TABLE", "TABLESPACE", 
			"THEN", "TO", "TRIGGER", "TRUNCATE", "TYPE", "UNDO", "UNION", "UNIQUE", 
			"UNTIL", "UPDATE", "USING", "VALIDPROC", "VALUE", "VALUES", "VARIABLE", 
			"VARIANT", "VCAT", "VERSIONING", "VIEW", "VOLATILE", "VOLUMES", "WHEN", 
			"WHENEVER", "WHERE", "WHILE", "WITH", "WLM", "XMLCAST", "XMLEXISTS", 
			"XMLNAMESPACES", "YEAR", "YEARS", "ZONE", "AND", "ARRAY_AGG", "ASC", 
			"AVG", "BIT", "CHANGE", "CODEUNITS16", "CODEUNITS32", "CORR", "CORRELATION", 
			"COUNT", "COUNT_BIG", "COVAR", "COVARIANCE", "COVARIANCE_SAMP", "COVAR_POP", 
			"COVAR_SAMP", "CS", "CUME_DIST", "DENSE_RANK", "DESC", "EBCDIC", "EXCLUSIVE", 
			"FIRST_VALUE", "FOLLOWING", "GROUPING", "IGNORE", "INDICATOR", "INPUT", 
			"ISNULL", "LAG", "LARGE", "LAST_VALUE", "LEAD", "LISTAGG", "LOCKED", 
			"LOCKS", "MEDIAN", "MINUTES", "MIXED", "NOTNULL", "NTH_VALUE", "NTILE", 
			"NUMERIC", "OBJECT", "OCTETS", "ONLY", "OVER", "PASSING", "PERCENTILE_CONT", 
			"PERCENTILE_DISC", "PERCENT_RANK", "PRECEDING", "PREVIOUS", "RANGE", 
			"RANK", "RATIO_TO_REPORT", "READ", "REF", "REGR_AVGX", "REGR_AVGY", "REGR_COUNT", 
			"REGR_ICPT", "REGR_INTERCEPT", "REGR_R2", "REGR_SLOPE", "REGR_SXX", "REGR_SXY", 
			"REGR_SYY", "RESPECT", "ROW_NUMBER", "ROWS", "RR", "RS", "SBCS", "SELECTIVITY", 
			"SETS", "SHARE", "SKIP_", "STDDEV", "STDDEV_POP", "STDDEV_SAMP", "SUM", 
			"TOKEN", "UNBOUNDED", "UNPACK", "UR", "USE", "VAR", "VARIANCE", "VARIANCE_SAMP", 
			"VAR_POP", "VAR_SAMP", "VARYING", "WITHOUT", "XML", "XMLAGG", "COLUMNS", 
			"SQLID", "ORDINALITY", "SYSTEM_TIME", "BUSINESS_TIME", "MULTIPLIER", 
			"UNNEST", "CROSS", "CALLER", "CLIENT", "POSITIONING", "SCROLL", "ACTION", 
			"ASSEMBLE", "C_", "CALLED", "COBOL", "DB2", "DEFINER", "DISPATCH", "ENVIRONMENT", 
			"FAILURE", "FAILURES", "JAVA", "MAIN", "NAME", "OPTIONS", "PARALLEL", 
			"PLI", "REGISTERS", "RESIDENT", "SECURED", "SPECIAL", "SQL", "STOP", 
			"SUB", "YES", "APPLICATION", "CHANGED", "COMPATIBILITY", "COMPRESS", 
			"COPY", "FREEPAGE", "GBPCACHE", "INCLUDE", "MAXVALUE", "MINVALUE", "PCTFREE", 
			"REGENERATE", "MASK", "ENABLE", "PERMISSION", "ATOMIC", "SQLEXCEPTION", 
			"MERGE", "MATCHED", "SQLSTATE", "MESSAGE_TEXT", "OVERRIDING", "PORTION", 
			"DB2SQL", "DEBUG", "GENERAL", "MODE_", "REXX", "CACHE", "CYCLE", "INCREMENT", 
			"RESTART", "DATACLAS", "MGMTCLAS", "REMOVE", "STORCLAS", "ACCESS", "ACTIVATE", 
			"ALWAYS", "APPEND", "ARCHIVE", "BUSINESS", "CASCADE", "CHANGES", "CONTROL", 
			"DEACTIVATE", "DEFERRED", "EACH", "ENFORCED", "EXTRA", "FOREIGN", "HIDDEN_", 
			"HISTORY", "ID", "IDENTITY", "IMPLICITLY", "INITIALLY", "INLINE", "OPERATION", 
			"ORGANIZE", "OVERLAPS", "PACKAGE_NAME", "PACKAGE_SCHEMA", "PACKAGE_VERSION", 
			"PRIMARY", "RESET", "ROTATE", "START", "SYSIBM", "TRANSACTION", "XMLSCHEMA", 
			"ELEMENT", "URL", "NAMESPACE", "LOCATION", "SYSXSR", "ALGORITHM", "FIXEDLENGTH", 
			"HUFFMAN", "LOB", "LOG", "LOGGED", "MAXPARTITIONS", "MAXROWS", "MEMBER", 
			"MOVE", "PAGE", "PAGENUM", "PENDING", "RELATIVE", "SEGSIZE", "TRACKMOD", 
			"ADDRESS", "ATTRIBUTES", "AUTHENTICATION", "AUTHID", "CONTEXT", "JOBNAME", 
			"OWNER", "PROFILE", "QUALIFIER", "SERVAUTH", "TRUSTED", "SECTION", "ACTIVE", 
			"VERSION", "ALIAS", "WORK", "WORKFILE", "SYSDEFLT", "NULTERM", "STRUCTURE", 
			"GENERIC", "ABS", "ABSVAL", "ACOS", "ADD_DAYS", "ADD_MONTHS", "ARRAY_DELETE", 
			"ARRAY_FIRST", "ARRAY_LAST", "ARRAY_NEXT", "ARRAY_PRIOR", "ARRAY_TRIM", 
			"ASCII", "ASCII_CHR", "ASCIISTR", "ASCII_STR", "ASIN", "ATAN", "ATAN2", 
			"ATANH", "BIGINT", "BINARY", "BITAND", "BITANDNOT", "BITNOT", "BITOR", 
			"BITXOR", "BLOB", "BTRIM", "CARDINALITY", "CCSID_ENCODING", "CEIL", "CEILING", 
			"CHAR9", "CHARACTER_LENGTH", "CHAR_LENGTH", "CHR", "CLOB", "COALESCE", 
			"COLLATION_KEY", "COMPARE_DECFLOAT", "COS", "COSH", "DATE", "DAYOFMONTH", 
			"DAYOFWEEK", "DAYOFWEEK_ISO", "DAYOFYEAR", "DAYS_BETWEEN", "DBCLOB", 
			"DEC", "DECFLOAT", "DECFLOAT_FORMAT", "DECFLOAT_SORTKEY", "DECIMAL", 
			"DECODE", "DECRYPT_BINARY", "DECRYPT_BIT", "DECRYPT_CHAR", "DECRYPT_DATAKEY_BIGINT", 
			"DECRYPT_DATAKEY_BIT", "DECRYPT_DATAKEY_CLOB", "DECRYPT_DATAKEY_DBCLOB", 
			"DECRYPT_DATAKEY_DECIMAL", "DECRYPT_DATAKEY_INTEGER", "DECRYPT_DATAKEY_VARCHAR", 
			"DECRYPT_DATAKEY_VARGRAPHIC", "DECRYPT_DB", "DEGREES", "DIFFERENCE", 
			"DIGITS", "DOUBLE_PRECISION", "DSN_XMLVALIDATE", "EBCDIC_CHR", "EBCDIC_STR", 
			"ENCRYPT_DATAKEY", "ENCRYPT_TDES", "EXP", "EXTRACT", "FLOAT", "FLOOR", 
			"GENERATE_UNIQUE", "GENERATE_UNIQUE_BINARY", "GETHINT", "GETVARIABLE", 
			"GRAPHIC", "GREATEST", "HASH", "HASH_CRC32", "HASH_MD5", "HASH_SHA1", 
			"HASH_SHA256", "HEX", "IDENTITY_VAL_LOCAL", "IFNULL", "INSTR", "INT", 
			"INTEGER", "JULIAN_DAY", "LAST_DAY", "LCASE", "LEAST", "LENGTH", "LN", 
			"LOCATE", "LOCATE_IN_STRING", "LOG10", "LOWER", "LPAD", "LTRIM", "MAX", 
			"MAX_CARDINALITY", "MIDNIGHT_SECONDS", "MIN", "MINUTE", "MOD", "MONTHS_BETWEEN", 
			"MQREAD", "MQREADCLOB", "MQRECEIVE", "MQRECEIVECLOB", "MQSEND", "MULTIPLY_ALT", 
			"NEXT_DAY", "NEXT_MONTH", "NORMALIZE_DECFLOAT", "NORMALIZE_STRING", "NULLIF", 
			"NVL", "OVERLAY", "PACK", "POSITION", "POSSTR", "POW", "POWER", "QUANTIZE", 
			"QUARTER", "RADIANS", "RAISE_ERROR", "RAND", "RANDOM", "REAL", "REGEXP_COUNT", 
			"REGEXP_INSTR", "REGEXP_LIKE", "REGEXP_REPLACE", "REGEXP_SUBSTR", "REPLACE", 
			"RID", "ROUND", "ROUND_TIMESTAMP", "ROWID", "RPAD", "RTRIM", "SCORE", 
			"SIGN", "SIN", "SINH", "SMALLINT", "SOAPHTTPC", "SOAPHTTPNC", "SOAPHTTPNV", 
			"SOAPHTTPV", "SOUNDEX", "SPACE", "SQRT", "STRIP", "STRLEFT", "STRPOS", 
			"STRRIGHT", "SUBSTR", "SUBSTRING", "TAN", "TANH", "TIME", "TIMESTAMP", 
			"TIMESTAMPADD", "TIMESTAMPDIFF", "TIMESTAMP_FORMAT", "TIMESTAMP_ISO", 
			"TIMESTAMP_TZ", "TO_CHAR", "TO_CLOB", "TO_DATE", "TO_NUMBER", "TOTALORDER", 
			"TO_TIMESTAMP", "TRANSLATE", "TRIM", "TRIM_ARRAY", "TRUNC", "TRUNC_TIMESTAMP", 
			"UCASE", "UNICODE", "UNICODE_STR", "UNISTR", "UPPER", "VARBINARY", "VARCHAR", 
			"VARCHAR9", "VARCHAR_BIT_FORMAT", "VARCHAR_FORMAT", "VARGRAPHIC", "VERIFY_GROUP_FOR_USER", 
			"VERIFY_ROLE_FOR_USER", "VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER", "WEEK", 
			"WEEK_ISO", "WRAP", "XMLATTRIBUTES", "XMLCOMMENT", "XMLCONCAT", "XMLDOCUMENT", 
			"XMLELEMENT", "XMLFOREST", "XMLMODIFY", "XMLPARSE", "XMLPI", "XMLQUERY", 
			"XMLSERIALIZE", "XMLTEXT", "XMLXSROBJECTID", "XSLTRANSFORM", "CURRENT_ACCELERATOR", 
			"CURRENT_APPLICATION_COMPATIBILITY", "CURRENT_APPLICATION_ENCODING_SCHEME", 
			"CURRENT_CLIENT_ACCTNG", "CURRENT_CLIENT_APPLNAME", "CURRENT_CLIENT_CORR_TOKEN", 
			"CURRENT_CLIENT_USERID", "CURRENT_CLIENT_WRKSTNNAME", "CURRENT_DATE", 
			"CURRENT_DEBUG_MODE", "CURRENT_DECFLOAT_ROUNDING_MODE", "CURRENT_DEGREE", 
			"CURRENT_EXPLAIN_MODE", "CURRENT_GET_ACCEL_ARCHIVE", "CURRENT_LOCALE_LC_CTYPE", 
			"CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION", "CURRENT_MEMBER", 
			"CURRENT_OPTIMIZATION_HINT", "CURRENT_PACKAGE_PATH", "CURRENT_PACKAGESET", 
			"CURRENT_PATH", "CURRENT_PRECISION", "CURRENT_QUERY_ACCELERATION", "CURRENT_QUERY_ACCELERATION_WAITFORDATA", 
			"CURRENT_REFRESH_AGE", "CURRENT_ROUTINE_VERSION", "CURRENT_RULES", "CURRENT_SCHEMA", 
			"CURRENT_SERVER", "CURRENT_SQLID", "CURRENT_TEMPORAL_BUSINESS_TIME", 
			"CURRENT_TEMPORAL_SYSTEM_TIME", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
			"CURRENT_TIME_ZONE", "ENCRYPTION_PASSWORD", "SESSION_TIME_ZONE", "SESSION_USER", 
			"USER", "ADMIN_TASK_LIST", "ADMIN_TASK_OUTPUT", "ADMIN_TASK_STATUS", 
			"BLOCKING_THREADS", "MQREADALL", "MQREADALLCLOB", "MQRECEIVEALL", "MQRECEIVEALLCLOB", 
			"XMLTABLE", "SQLIDENTIFIER"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "DB2zSQLParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public DB2zSQLParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	public static class StartRuleContext extends ParserRuleContext {
		public List<SqlStatementContext> sqlStatement() {
			return getRuleContexts(SqlStatementContext.class);
		}
		public SqlStatementContext sqlStatement(int i) {
			return getRuleContext(SqlStatementContext.class,i);
		}
		public TerminalNode EOF() { return getToken(DB2zSQLParser.EOF, 0); }
		public StartRuleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startRule; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterStartRule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitStartRule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitStartRule(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StartRuleContext startRule() throws RecognitionException {
		StartRuleContext _localctx = new StartRuleContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_startRule);
		int _la;
		try {
			setState(745);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(741);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAREN) | (1L << ALLOCATE) | (1L << ALTER) | (1L << ASSOCIATE) | (1L << BEGIN) | (1L << CALL) | (1L << CLOSE))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (CONNECT - 67)) | (1L << (CREATE - 67)) | (1L << (DECLARE - 67)) | (1L << (DELETE - 67)) | (1L << (EXEC_SQL - 67)))) != 0) || _la==INSERT || ((((_la - 265)) & ~0x3f) == 0 && ((1L << (_la - 265)) & ((1L << (SELECT - 265)) | (1L << (UPDATE - 265)) | (1L << (VALUES - 265)) | (1L << (WITH - 265)))) != 0) || _la==MERGE) {
					{
					{
					setState(738);
					sqlStatement();
					}
					}
					setState(743);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(744);
				match(EOF);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SqlStatementContext extends ParserRuleContext {
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public AllocateCursorStatementContext allocateCursorStatement() {
			return getRuleContext(AllocateCursorStatementContext.class,0);
		}
		public AlterDatabaseStatementContext alterDatabaseStatement() {
			return getRuleContext(AlterDatabaseStatementContext.class,0);
		}
		public AlterFunctionStatementContext alterFunctionStatement() {
			return getRuleContext(AlterFunctionStatementContext.class,0);
		}
		public AlterIndexStatementContext alterIndexStatement() {
			return getRuleContext(AlterIndexStatementContext.class,0);
		}
		public AlterMaskStatementContext alterMaskStatement() {
			return getRuleContext(AlterMaskStatementContext.class,0);
		}
		public AlterPermissionStatementContext alterPermissionStatement() {
			return getRuleContext(AlterPermissionStatementContext.class,0);
		}
		public AlterProcedureStatementContext alterProcedureStatement() {
			return getRuleContext(AlterProcedureStatementContext.class,0);
		}
		public AlterSequenceStatementContext alterSequenceStatement() {
			return getRuleContext(AlterSequenceStatementContext.class,0);
		}
		public AlterStogroupStatementContext alterStogroupStatement() {
			return getRuleContext(AlterStogroupStatementContext.class,0);
		}
		public AlterTableStatementContext alterTableStatement() {
			return getRuleContext(AlterTableStatementContext.class,0);
		}
		public AlterTablespaceStatementContext alterTablespaceStatement() {
			return getRuleContext(AlterTablespaceStatementContext.class,0);
		}
		public AlterTriggerStatementContext alterTriggerStatement() {
			return getRuleContext(AlterTriggerStatementContext.class,0);
		}
		public AlterTrustedContextStatementContext alterTrustedContextStatement() {
			return getRuleContext(AlterTrustedContextStatementContext.class,0);
		}
		public AlterViewStatementContext alterViewStatement() {
			return getRuleContext(AlterViewStatementContext.class,0);
		}
		public AssociateLocatorsStatementContext associateLocatorsStatement() {
			return getRuleContext(AssociateLocatorsStatementContext.class,0);
		}
		public BeginDeclareSectionStatementContext beginDeclareSectionStatement() {
			return getRuleContext(BeginDeclareSectionStatementContext.class,0);
		}
		public CallStatementContext callStatement() {
			return getRuleContext(CallStatementContext.class,0);
		}
		public CloseStatementContext closeStatement() {
			return getRuleContext(CloseStatementContext.class,0);
		}
		public CommitStatementContext commitStatement() {
			return getRuleContext(CommitStatementContext.class,0);
		}
		public CommentStatementContext commentStatement() {
			return getRuleContext(CommentStatementContext.class,0);
		}
		public ConnectStatementContext connectStatement() {
			return getRuleContext(ConnectStatementContext.class,0);
		}
		public CreateAliasStatementContext createAliasStatement() {
			return getRuleContext(CreateAliasStatementContext.class,0);
		}
		public CreateAuxiliaryTableStatementContext createAuxiliaryTableStatement() {
			return getRuleContext(CreateAuxiliaryTableStatementContext.class,0);
		}
		public CreateDatabaseStatementContext createDatabaseStatement() {
			return getRuleContext(CreateDatabaseStatementContext.class,0);
		}
		public CreateFunctionStatementContext createFunctionStatement() {
			return getRuleContext(CreateFunctionStatementContext.class,0);
		}
		public DeclareCursorStatementContext declareCursorStatement() {
			return getRuleContext(DeclareCursorStatementContext.class,0);
		}
		public DeclareTableStatementContext declareTableStatement() {
			return getRuleContext(DeclareTableStatementContext.class,0);
		}
		public DeclareStatementStatementContext declareStatementStatement() {
			return getRuleContext(DeclareStatementStatementContext.class,0);
		}
		public DeleteStatementContext deleteStatement() {
			return getRuleContext(DeleteStatementContext.class,0);
		}
		public InsertStatementContext insertStatement() {
			return getRuleContext(InsertStatementContext.class,0);
		}
		public MergeStatementContext mergeStatement() {
			return getRuleContext(MergeStatementContext.class,0);
		}
		public UpdateStatementContext updateStatement() {
			return getRuleContext(UpdateStatementContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(DB2zSQLParser.SEMICOLON, 0); }
		public TerminalNode EOF() { return getToken(DB2zSQLParser.EOF, 0); }
		public TerminalNode EXEC_SQL() { return getToken(DB2zSQLParser.EXEC_SQL, 0); }
		public TerminalNode END_EXEC() { return getToken(DB2zSQLParser.END_EXEC, 0); }
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public SqlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSqlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSqlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSqlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SqlStatementContext sqlStatement() throws RecognitionException {
		SqlStatementContext _localctx = new SqlStatementContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_sqlStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(748);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXEC_SQL) {
				{
				setState(747);
				match(EXEC_SQL);
				}
			}

			setState(783);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {
			case 1:
				{
				setState(750);
				query();
				}
				break;
			case 2:
				{
				setState(751);
				allocateCursorStatement();
				}
				break;
			case 3:
				{
				setState(752);
				alterDatabaseStatement();
				}
				break;
			case 4:
				{
				setState(753);
				alterFunctionStatement();
				}
				break;
			case 5:
				{
				setState(754);
				alterIndexStatement();
				}
				break;
			case 6:
				{
				setState(755);
				alterMaskStatement();
				}
				break;
			case 7:
				{
				setState(756);
				alterPermissionStatement();
				}
				break;
			case 8:
				{
				setState(757);
				alterProcedureStatement();
				}
				break;
			case 9:
				{
				setState(758);
				alterSequenceStatement();
				}
				break;
			case 10:
				{
				setState(759);
				alterStogroupStatement();
				}
				break;
			case 11:
				{
				setState(760);
				alterTableStatement();
				}
				break;
			case 12:
				{
				setState(761);
				alterTablespaceStatement();
				}
				break;
			case 13:
				{
				setState(762);
				alterTriggerStatement();
				}
				break;
			case 14:
				{
				setState(763);
				alterTrustedContextStatement();
				}
				break;
			case 15:
				{
				setState(764);
				alterViewStatement();
				}
				break;
			case 16:
				{
				setState(765);
				associateLocatorsStatement();
				}
				break;
			case 17:
				{
				setState(766);
				beginDeclareSectionStatement();
				}
				break;
			case 18:
				{
				setState(767);
				callStatement();
				}
				break;
			case 19:
				{
				setState(768);
				closeStatement();
				}
				break;
			case 20:
				{
				setState(769);
				commitStatement();
				}
				break;
			case 21:
				{
				setState(770);
				commentStatement();
				}
				break;
			case 22:
				{
				setState(771);
				connectStatement();
				}
				break;
			case 23:
				{
				setState(772);
				createAliasStatement();
				}
				break;
			case 24:
				{
				setState(773);
				createAuxiliaryTableStatement();
				}
				break;
			case 25:
				{
				setState(774);
				createDatabaseStatement();
				}
				break;
			case 26:
				{
				setState(775);
				createFunctionStatement();
				}
				break;
			case 27:
				{
				setState(776);
				declareCursorStatement();
				}
				break;
			case 28:
				{
				setState(777);
				declareTableStatement();
				}
				break;
			case 29:
				{
				setState(778);
				declareStatementStatement();
				}
				break;
			case 30:
				{
				setState(779);
				deleteStatement();
				}
				break;
			case 31:
				{
				setState(780);
				insertStatement();
				}
				break;
			case 32:
				{
				setState(781);
				mergeStatement();
				}
				break;
			case 33:
				{
				setState(782);
				updateStatement();
				}
				break;
			}
			setState(791);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SEMICOLON:
				{
				setState(785);
				match(SEMICOLON);
				}
				break;
			case END_EXEC:
				{
				{
				setState(786);
				match(END_EXEC);
				setState(788);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT) {
					{
					setState(787);
					match(DOT);
					}
				}

				}
				}
				break;
			case EOF:
				{
				setState(790);
				match(EOF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryContext extends ParserRuleContext {
		public SubSelectContext subSelect() {
			return getRuleContext(SubSelectContext.class,0);
		}
		public FullSelectContext fullSelect() {
			return getRuleContext(FullSelectContext.class,0);
		}
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public SelectIntoStatementContext selectIntoStatement() {
			return getRuleContext(SelectIntoStatementContext.class,0);
		}
		public QueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterQuery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitQuery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitQuery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryContext query() throws RecognitionException {
		QueryContext _localctx = new QueryContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_query);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(797);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,6,_ctx) ) {
			case 1:
				{
				setState(793);
				subSelect();
				}
				break;
			case 2:
				{
				setState(794);
				fullSelect();
				}
				break;
			case 3:
				{
				setState(795);
				selectStatement();
				}
				break;
			case 4:
				{
				setState(796);
				selectIntoStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareCursorStatementContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(DB2zSQLParser.DECLARE, 0); }
		public CursorNameContext cursorName() {
			return getRuleContext(CursorNameContext.class,0);
		}
		public TerminalNode CURSOR() { return getToken(DB2zSQLParser.CURSOR, 0); }
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public StatementNameContext statementName() {
			return getRuleContext(StatementNameContext.class,0);
		}
		public List<HoldabilityContext> holdability() {
			return getRuleContexts(HoldabilityContext.class);
		}
		public HoldabilityContext holdability(int i) {
			return getRuleContext(HoldabilityContext.class,i);
		}
		public List<ReturnabilityContext> returnability() {
			return getRuleContexts(ReturnabilityContext.class);
		}
		public ReturnabilityContext returnability(int i) {
			return getRuleContext(ReturnabilityContext.class,i);
		}
		public List<RowsetPositioningContext> rowsetPositioning() {
			return getRuleContexts(RowsetPositioningContext.class);
		}
		public RowsetPositioningContext rowsetPositioning(int i) {
			return getRuleContext(RowsetPositioningContext.class,i);
		}
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode SCROLL() { return getToken(DB2zSQLParser.SCROLL, 0); }
		public TerminalNode ASENSITIVE() { return getToken(DB2zSQLParser.ASENSITIVE, 0); }
		public TerminalNode INSENSITIVE() { return getToken(DB2zSQLParser.INSENSITIVE, 0); }
		public TerminalNode SENSITIVE() { return getToken(DB2zSQLParser.SENSITIVE, 0); }
		public TerminalNode DYNAMIC() { return getToken(DB2zSQLParser.DYNAMIC, 0); }
		public TerminalNode STATIC() { return getToken(DB2zSQLParser.STATIC, 0); }
		public DeclareCursorStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareCursorStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDeclareCursorStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDeclareCursorStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDeclareCursorStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareCursorStatementContext declareCursorStatement() throws RecognitionException {
		DeclareCursorStatementContext _localctx = new DeclareCursorStatementContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_declareCursorStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(799);
			match(DECLARE);
			setState(800);
			cursorName();
			setState(810);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO:
				{
				{
				setState(801);
				match(NO);
				setState(802);
				match(SCROLL);
				}
				}
				break;
			case ASENSITIVE:
			case INSENSITIVE:
			case SENSITIVE:
				{
				{
				setState(807);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ASENSITIVE:
					{
					setState(803);
					match(ASENSITIVE);
					}
					break;
				case INSENSITIVE:
					{
					setState(804);
					match(INSENSITIVE);
					}
					break;
				case SENSITIVE:
					{
					{
					setState(805);
					match(SENSITIVE);
					setState(806);
					_la = _input.LA(1);
					if ( !(_la==DYNAMIC || _la==STATIC) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(809);
				match(SCROLL);
				}
				}
				break;
			case CURSOR:
				break;
			default:
				break;
			}
			setState(812);
			match(CURSOR);
			setState(818);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==WITH || _la==WITHOUT) {
				{
				setState(816);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,9,_ctx) ) {
				case 1:
					{
					setState(813);
					holdability();
					}
					break;
				case 2:
					{
					setState(814);
					returnability();
					}
					break;
				case 3:
					{
					setState(815);
					rowsetPositioning();
					}
					break;
				}
				}
				setState(820);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(821);
			match(FOR);
			setState(824);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,11,_ctx) ) {
			case 1:
				{
				setState(822);
				selectStatement();
				}
				break;
			case 2:
				{
				setState(823);
				statementName();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CursorNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public CursorNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursorName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCursorName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCursorName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCursorName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CursorNameContext cursorName() throws RecognitionException {
		CursorNameContext _localctx = new CursorNameContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_cursorName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(826);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatementNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public StatementNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statementName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterStatementName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitStatementName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitStatementName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StatementNameContext statementName() throws RecognitionException {
		StatementNameContext _localctx = new StatementNameContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_statementName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(828);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HoldabilityContext extends ParserRuleContext {
		public TerminalNode WITHOUT() { return getToken(DB2zSQLParser.WITHOUT, 0); }
		public TerminalNode HOLD() { return getToken(DB2zSQLParser.HOLD, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public HoldabilityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_holdability; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterHoldability(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitHoldability(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitHoldability(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HoldabilityContext holdability() throws RecognitionException {
		HoldabilityContext _localctx = new HoldabilityContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_holdability);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(834);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITHOUT:
				{
				{
				setState(830);
				match(WITHOUT);
				setState(831);
				match(HOLD);
				}
				}
				break;
			case WITH:
				{
				{
				setState(832);
				match(WITH);
				setState(833);
				match(HOLD);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReturnabilityContext extends ParserRuleContext {
		public TerminalNode WITHOUT() { return getToken(DB2zSQLParser.WITHOUT, 0); }
		public TerminalNode RETURN() { return getToken(DB2zSQLParser.RETURN, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode TO() { return getToken(DB2zSQLParser.TO, 0); }
		public TerminalNode CALLER() { return getToken(DB2zSQLParser.CALLER, 0); }
		public TerminalNode CLIENT() { return getToken(DB2zSQLParser.CLIENT, 0); }
		public ReturnabilityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_returnability; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterReturnability(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitReturnability(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitReturnability(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReturnabilityContext returnability() throws RecognitionException {
		ReturnabilityContext _localctx = new ReturnabilityContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_returnability);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(846);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITHOUT:
				{
				{
				setState(836);
				match(WITHOUT);
				setState(837);
				match(RETURN);
				}
				}
				break;
			case WITH:
				{
				{
				setState(838);
				match(WITH);
				setState(839);
				match(RETURN);
				setState(844);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,13,_ctx) ) {
				case 1:
					{
					{
					setState(840);
					match(TO);
					setState(841);
					match(CALLER);
					}
					}
					break;
				case 2:
					{
					{
					setState(842);
					match(TO);
					setState(843);
					match(CLIENT);
					}
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowsetPositioningContext extends ParserRuleContext {
		public TerminalNode WITHOUT() { return getToken(DB2zSQLParser.WITHOUT, 0); }
		public TerminalNode ROWSET() { return getToken(DB2zSQLParser.ROWSET, 0); }
		public TerminalNode POSITIONING() { return getToken(DB2zSQLParser.POSITIONING, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public RowsetPositioningContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowsetPositioning; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRowsetPositioning(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRowsetPositioning(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRowsetPositioning(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowsetPositioningContext rowsetPositioning() throws RecognitionException {
		RowsetPositioningContext _localctx = new RowsetPositioningContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_rowsetPositioning);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(854);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITHOUT:
				{
				{
				setState(848);
				match(WITHOUT);
				setState(849);
				match(ROWSET);
				setState(850);
				match(POSITIONING);
				}
				}
				break;
			case WITH:
				{
				{
				setState(851);
				match(WITH);
				setState(852);
				match(ROWSET);
				setState(853);
				match(POSITIONING);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareTableStatementContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(DB2zSQLParser.DECLARE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public List<DataTypeContext> dataType() {
			return getRuleContexts(DataTypeContext.class);
		}
		public DataTypeContext dataType(int i) {
			return getRuleContext(DataTypeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public List<NotNullPhraseContext> notNullPhrase() {
			return getRuleContexts(NotNullPhraseContext.class);
		}
		public NotNullPhraseContext notNullPhrase(int i) {
			return getRuleContext(NotNullPhraseContext.class,i);
		}
		public DeclareTableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareTableStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDeclareTableStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDeclareTableStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDeclareTableStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareTableStatementContext declareTableStatement() throws RecognitionException {
		DeclareTableStatementContext _localctx = new DeclareTableStatementContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_declareTableStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(856);
			match(DECLARE);
			setState(857);
			tableName();
			setState(858);
			match(TABLE);
			setState(859);
			match(LPAREN);
			{
			setState(860);
			columnName();
			setState(861);
			dataType();
			setState(863);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(862);
				notNullPhrase();
				}
			}

			}
			setState(873);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(865);
				match(COMMA);
				setState(866);
				columnName();
				setState(867);
				dataType();
				setState(869);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(868);
					notNullPhrase();
					}
				}

				}
				}
				setState(875);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(876);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NotNullPhraseContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode DEFAULT() { return getToken(DB2zSQLParser.DEFAULT, 0); }
		public NotNullPhraseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notNullPhrase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterNotNullPhrase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitNotNullPhrase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitNotNullPhrase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NotNullPhraseContext notNullPhrase() throws RecognitionException {
		NotNullPhraseContext _localctx = new NotNullPhraseContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_notNullPhrase);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(884);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,19,_ctx) ) {
			case 1:
				{
				{
				setState(878);
				match(NOT);
				setState(879);
				match(NULL);
				}
				}
				break;
			case 2:
				{
				{
				setState(880);
				match(NOT);
				setState(881);
				match(NULL);
				setState(882);
				match(WITH);
				setState(883);
				match(DEFAULT);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareStatementStatementContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(DB2zSQLParser.DECLARE, 0); }
		public List<StatementNameContext> statementName() {
			return getRuleContexts(StatementNameContext.class);
		}
		public StatementNameContext statementName(int i) {
			return getRuleContext(StatementNameContext.class,i);
		}
		public TerminalNode STATEMENT() { return getToken(DB2zSQLParser.STATEMENT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public DeclareStatementStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareStatementStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDeclareStatementStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDeclareStatementStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDeclareStatementStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareStatementStatementContext declareStatementStatement() throws RecognitionException {
		DeclareStatementStatementContext _localctx = new DeclareStatementStatementContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_declareStatementStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(886);
			match(DECLARE);
			setState(887);
			statementName();
			setState(892);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(888);
				match(COMMA);
				setState(889);
				statementName();
				}
				}
				setState(894);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(895);
			match(STATEMENT);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AllocateCursorStatementContext extends ParserRuleContext {
		public TerminalNode ALLOCATE() { return getToken(DB2zSQLParser.ALLOCATE, 0); }
		public CursorNameContext cursorName() {
			return getRuleContext(CursorNameContext.class,0);
		}
		public TerminalNode CURSOR() { return getToken(DB2zSQLParser.CURSOR, 0); }
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode RESULT() { return getToken(DB2zSQLParser.RESULT, 0); }
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public RsLocatorVariableContext rsLocatorVariable() {
			return getRuleContext(RsLocatorVariableContext.class,0);
		}
		public AllocateCursorStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_allocateCursorStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAllocateCursorStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAllocateCursorStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAllocateCursorStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AllocateCursorStatementContext allocateCursorStatement() throws RecognitionException {
		AllocateCursorStatementContext _localctx = new AllocateCursorStatementContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_allocateCursorStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(897);
			match(ALLOCATE);
			setState(898);
			cursorName();
			setState(899);
			match(CURSOR);
			setState(900);
			match(FOR);
			setState(901);
			match(RESULT);
			setState(902);
			match(SET);
			setState(903);
			rsLocatorVariable();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RsLocatorVariableContext extends ParserRuleContext {
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public RsLocatorVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rsLocatorVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRsLocatorVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRsLocatorVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRsLocatorVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RsLocatorVariableContext rsLocatorVariable() throws RecognitionException {
		RsLocatorVariableContext _localctx = new RsLocatorVariableContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_rsLocatorVariable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(905);
			hostVariable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDatabaseStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode DATABASE() { return getToken(DB2zSQLParser.DATABASE, 0); }
		public DatabaseNameContext databaseName() {
			return getRuleContext(DatabaseNameContext.class,0);
		}
		public List<TerminalNode> BUFFERPOOL() { return getTokens(DB2zSQLParser.BUFFERPOOL); }
		public TerminalNode BUFFERPOOL(int i) {
			return getToken(DB2zSQLParser.BUFFERPOOL, i);
		}
		public List<BpNameContext> bpName() {
			return getRuleContexts(BpNameContext.class);
		}
		public BpNameContext bpName(int i) {
			return getRuleContext(BpNameContext.class,i);
		}
		public List<TerminalNode> INDEXBP() { return getTokens(DB2zSQLParser.INDEXBP); }
		public TerminalNode INDEXBP(int i) {
			return getToken(DB2zSQLParser.INDEXBP, i);
		}
		public List<TerminalNode> STOGROUP() { return getTokens(DB2zSQLParser.STOGROUP); }
		public TerminalNode STOGROUP(int i) {
			return getToken(DB2zSQLParser.STOGROUP, i);
		}
		public List<StogroupNameContext> stogroupName() {
			return getRuleContexts(StogroupNameContext.class);
		}
		public StogroupNameContext stogroupName(int i) {
			return getRuleContext(StogroupNameContext.class,i);
		}
		public List<TerminalNode> CCSID() { return getTokens(DB2zSQLParser.CCSID); }
		public TerminalNode CCSID(int i) {
			return getToken(DB2zSQLParser.CCSID, i);
		}
		public List<CcsidValueContext> ccsidValue() {
			return getRuleContexts(CcsidValueContext.class);
		}
		public CcsidValueContext ccsidValue(int i) {
			return getRuleContext(CcsidValueContext.class,i);
		}
		public AlterDatabaseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDatabaseStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterDatabaseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterDatabaseStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterDatabaseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDatabaseStatementContext alterDatabaseStatement() throws RecognitionException {
		AlterDatabaseStatementContext _localctx = new AlterDatabaseStatementContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_alterDatabaseStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(907);
			match(ALTER);
			setState(908);
			match(DATABASE);
			setState(909);
			databaseName();
			setState(918); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(918);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BUFFERPOOL:
					{
					{
					setState(910);
					match(BUFFERPOOL);
					setState(911);
					bpName();
					}
					}
					break;
				case INDEXBP:
					{
					{
					setState(912);
					match(INDEXBP);
					setState(913);
					bpName();
					}
					}
					break;
				case STOGROUP:
					{
					{
					setState(914);
					match(STOGROUP);
					setState(915);
					stogroupName();
					}
					}
					break;
				case CCSID:
					{
					{
					setState(916);
					match(CCSID);
					setState(917);
					ccsidValue();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(920); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==BUFFERPOOL || _la==CCSID || _la==INDEXBP || _la==STOGROUP );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterFunctionStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode RESTRICT() { return getToken(DB2zSQLParser.RESTRICT, 0); }
		public List<FunctionOptionListContext> functionOptionList() {
			return getRuleContexts(FunctionOptionListContext.class);
		}
		public FunctionOptionListContext functionOptionList(int i) {
			return getRuleContext(FunctionOptionListContext.class,i);
		}
		public TerminalNode FUNCTION() { return getToken(DB2zSQLParser.FUNCTION, 0); }
		public FunctionNameContext functionName() {
			return getRuleContext(FunctionNameContext.class,0);
		}
		public TerminalNode SPECIFIC() { return getToken(DB2zSQLParser.SPECIFIC, 0); }
		public SpecificNameContext specificName() {
			return getRuleContext(SpecificNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<FunctionParameterTypeContext> functionParameterType() {
			return getRuleContexts(FunctionParameterTypeContext.class);
		}
		public FunctionParameterTypeContext functionParameterType(int i) {
			return getRuleContext(FunctionParameterTypeContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public AlterFunctionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterFunctionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterFunctionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterFunctionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterFunctionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterFunctionStatementContext alterFunctionStatement() throws RecognitionException {
		AlterFunctionStatementContext _localctx = new AlterFunctionStatementContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_alterFunctionStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(922);
			match(ALTER);
			setState(941);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FUNCTION:
				{
				{
				setState(923);
				match(FUNCTION);
				setState(924);
				functionName();
				setState(936);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(925);
					match(LPAREN);
					setState(926);
					functionParameterType();
					setState(931);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(927);
						match(COMMA);
						setState(928);
						functionParameterType();
						}
						}
						setState(933);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(934);
					match(RPAREN);
					}
				}

				}
				}
				break;
			case SPECIFIC:
				{
				{
				setState(938);
				match(SPECIFIC);
				setState(939);
				match(FUNCTION);
				setState(940);
				specificName();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(944);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RESTRICT) {
				{
				setState(943);
				match(RESTRICT);
				}
			}

			setState(947); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(946);
				functionOptionList();
				}
				}
				setState(949); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (ALLOW - 33)) | (1L << (ASUTIME - 33)) | (1L << (COLLID - 33)) | (1L << (CONTAINS - 33)) | (1L << (CONTINUE - 33)) | (1L << (DBINFO - 33)) | (1L << (DEFAULT - 33)) | (1L << (DETERMINISTIC - 33)) | (1L << (DISALLOW - 33)))) != 0) || ((((_la - 119)) & ~0x3f) == 0 && ((1L << (_la - 119)) & ((1L << (EXTERNAL - 119)) | (1L << (FINAL - 119)) | (1L << (INHERIT - 119)) | (1L << (LANGUAGE - 119)))) != 0) || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & ((1L << (MODIFIES - 184)) | (1L << (NO - 184)) | (1L << (NOT - 184)) | (1L << (NULL - 184)) | (1L << (PACKAGE - 184)) | (1L << (PARAMETER - 184)) | (1L << (PROGRAM - 184)) | (1L << (READS - 184)) | (1L << (RETURNS - 184)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (RUN - 257)) | (1L << (SCRATCHPAD - 257)) | (1L << (SECURITY - 257)) | (1L << (SPECIFIC - 257)) | (1L << (STATIC - 257)) | (1L << (STAY - 257)) | (1L << (VARIANT - 257)) | (1L << (WLM - 257)))) != 0) || ((((_la - 433)) & ~0x3f) == 0 && ((1L << (_la - 433)) & ((1L << (CALLED - 433)) | (1L << (SECURED - 433)) | (1L << (STOP - 433)))) != 0) || _la==CARDINALITY );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterIndexStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode INDEX() { return getToken(DB2zSQLParser.INDEX, 0); }
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public RegenerateClauseContext regenerateClause() {
			return getRuleContext(RegenerateClauseContext.class,0);
		}
		public List<AlterIndexOptionsContext> alterIndexOptions() {
			return getRuleContexts(AlterIndexOptionsContext.class);
		}
		public AlterIndexOptionsContext alterIndexOptions(int i) {
			return getRuleContext(AlterIndexOptionsContext.class,i);
		}
		public List<AlterIndexPartitionOptionsContext> alterIndexPartitionOptions() {
			return getRuleContexts(AlterIndexPartitionOptionsContext.class);
		}
		public AlterIndexPartitionOptionsContext alterIndexPartitionOptions(int i) {
			return getRuleContext(AlterIndexPartitionOptionsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public AlterIndexStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterIndexStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterIndexStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterIndexStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterIndexStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterIndexStatementContext alterIndexStatement() throws RecognitionException {
		AlterIndexStatementContext _localctx = new AlterIndexStatementContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_alterIndexStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(951);
			match(ALTER);
			setState(952);
			match(INDEX);
			setState(953);
			indexName();
			setState(955);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REGENERATE) {
				{
				setState(954);
				regenerateClause();
				}
			}

			setState(960);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << BUFFERPOOL) | (1L << CLOSE) | (1L << CLUSTER))) != 0) || _la==DSSIZE || _la==ERASE || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (NOT - 191)) | (1L << (PADDED - 191)) | (1L << (PIECESIZE - 191)) | (1L << (PRIQTY - 191)))) != 0) || _la==SECQTY || _la==USING || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (COMPRESS - 458)) | (1L << (COPY - 458)) | (1L << (FREEPAGE - 458)) | (1L << (GBPCACHE - 458)) | (1L << (PCTFREE - 458)))) != 0)) {
				{
				{
				setState(957);
				alterIndexOptions();
				}
				}
				setState(962);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(971);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALTER) {
				{
				setState(963);
				alterIndexPartitionOptions();
				setState(968);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(964);
					match(COMMA);
					setState(965);
					alterIndexPartitionOptions();
					}
					}
					setState(970);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterMaskStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode MASK() { return getToken(DB2zSQLParser.MASK, 0); }
		public MaskNameContext maskName() {
			return getRuleContext(MaskNameContext.class,0);
		}
		public TerminalNode ENABLE() { return getToken(DB2zSQLParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(DB2zSQLParser.DISABLE, 0); }
		public RegenerateClauseContext regenerateClause() {
			return getRuleContext(RegenerateClauseContext.class,0);
		}
		public AlterMaskStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterMaskStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterMaskStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterMaskStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterMaskStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterMaskStatementContext alterMaskStatement() throws RecognitionException {
		AlterMaskStatementContext _localctx = new AlterMaskStatementContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_alterMaskStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(973);
			match(ALTER);
			setState(974);
			match(MASK);
			setState(975);
			maskName();
			setState(979);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENABLE:
				{
				setState(976);
				match(ENABLE);
				}
				break;
			case DISABLE:
				{
				setState(977);
				match(DISABLE);
				}
				break;
			case REGENERATE:
				{
				setState(978);
				regenerateClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterPermissionStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode PERMISSION() { return getToken(DB2zSQLParser.PERMISSION, 0); }
		public PermissionNameContext permissionName() {
			return getRuleContext(PermissionNameContext.class,0);
		}
		public TerminalNode ENABLE() { return getToken(DB2zSQLParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(DB2zSQLParser.DISABLE, 0); }
		public RegenerateClauseContext regenerateClause() {
			return getRuleContext(RegenerateClauseContext.class,0);
		}
		public AlterPermissionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterPermissionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterPermissionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterPermissionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterPermissionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterPermissionStatementContext alterPermissionStatement() throws RecognitionException {
		AlterPermissionStatementContext _localctx = new AlterPermissionStatementContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_alterPermissionStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(981);
			match(ALTER);
			setState(982);
			match(PERMISSION);
			setState(983);
			permissionName();
			setState(987);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENABLE:
				{
				setState(984);
				match(ENABLE);
				}
				break;
			case DISABLE:
				{
				setState(985);
				match(DISABLE);
				}
				break;
			case REGENERATE:
				{
				setState(986);
				regenerateClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterProcedureStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode PROCEDURE() { return getToken(DB2zSQLParser.PROCEDURE, 0); }
		public ProcedureNameContext procedureName() {
			return getRuleContext(ProcedureNameContext.class,0);
		}
		public List<ProcedureOptionListContext> procedureOptionList() {
			return getRuleContexts(ProcedureOptionListContext.class);
		}
		public ProcedureOptionListContext procedureOptionList(int i) {
			return getRuleContext(ProcedureOptionListContext.class,i);
		}
		public AlterProcedureStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterProcedureStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterProcedureStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterProcedureStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterProcedureStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterProcedureStatementContext alterProcedureStatement() throws RecognitionException {
		AlterProcedureStatementContext _localctx = new AlterProcedureStatementContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_alterProcedureStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(989);
			match(ALTER);
			setState(990);
			match(PROCEDURE);
			setState(991);
			procedureName();
			setState(993); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(992);
				procedureOptionList();
				}
				}
				setState(995); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (ALLOW - 33)) | (1L << (ASUTIME - 33)) | (1L << (COLLID - 33)) | (1L << (COMMIT - 33)) | (1L << (CONTAINS - 33)) | (1L << (CONTINUE - 33)) | (1L << (DBINFO - 33)) | (1L << (DEFAULT - 33)) | (1L << (DETERMINISTIC - 33)) | (1L << (DISABLE - 33)) | (1L << (DISALLOW - 33)))) != 0) || ((((_la - 101)) & ~0x3f) == 0 && ((1L << (_la - 101)) & ((1L << (DYNAMIC - 101)) | (1L << (EXTERNAL - 101)) | (1L << (INHERIT - 101)) | (1L << (LANGUAGE - 101)))) != 0) || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & ((1L << (MODIFIES - 184)) | (1L << (NO - 184)) | (1L << (NOT - 184)) | (1L << (NULL - 184)) | (1L << (PACKAGE - 184)) | (1L << (PARAMETER - 184)) | (1L << (PROGRAM - 184)) | (1L << (READS - 184)) | (1L << (RESULT - 184)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (RUN - 257)) | (1L << (SECURITY - 257)) | (1L << (STAY - 257)) | (1L << (VARIANT - 257)) | (1L << (WLM - 257)))) != 0) || _la==CALLED || _la==STOP );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterSequenceStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode SEQUENCE() { return getToken(DB2zSQLParser.SEQUENCE, 0); }
		public SequenceNameContext sequenceName() {
			return getRuleContext(SequenceNameContext.class,0);
		}
		public List<SequenceOptionListContext> sequenceOptionList() {
			return getRuleContexts(SequenceOptionListContext.class);
		}
		public SequenceOptionListContext sequenceOptionList(int i) {
			return getRuleContext(SequenceOptionListContext.class,i);
		}
		public AlterSequenceStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterSequenceStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterSequenceStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterSequenceStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterSequenceStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterSequenceStatementContext alterSequenceStatement() throws RecognitionException {
		AlterSequenceStatementContext _localctx = new AlterSequenceStatementContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_alterSequenceStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(997);
			match(ALTER);
			setState(998);
			match(SEQUENCE);
			setState(999);
			sequenceName();
			setState(1001); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1000);
				sequenceOptionList();
				}
				}
				setState(1003); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==NO || _la==ORDER || ((((_la - 463)) & ~0x3f) == 0 && ((1L << (_la - 463)) & ((1L << (MAXVALUE - 463)) | (1L << (MINVALUE - 463)) | (1L << (CACHE - 463)) | (1L << (CYCLE - 463)) | (1L << (INCREMENT - 463)) | (1L << (RESTART - 463)))) != 0) );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterStogroupStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode STOGROUP() { return getToken(DB2zSQLParser.STOGROUP, 0); }
		public StogroupNameContext stogroupName() {
			return getRuleContext(StogroupNameContext.class,0);
		}
		public List<StogroupOptionListContext> stogroupOptionList() {
			return getRuleContexts(StogroupOptionListContext.class);
		}
		public StogroupOptionListContext stogroupOptionList(int i) {
			return getRuleContext(StogroupOptionListContext.class,i);
		}
		public AlterStogroupStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterStogroupStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterStogroupStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterStogroupStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterStogroupStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterStogroupStatementContext alterStogroupStatement() throws RecognitionException {
		AlterStogroupStatementContext _localctx = new AlterStogroupStatementContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_alterStogroupStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1005);
			match(ALTER);
			setState(1006);
			match(STOGROUP);
			setState(1007);
			stogroupName();
			setState(1009); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1008);
				stogroupOptionList();
				}
				}
				setState(1011); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==ADD || _la==KEY || _la==NO || ((((_la - 487)) & ~0x3f) == 0 && ((1L << (_la - 487)) & ((1L << (DATACLAS - 487)) | (1L << (MGMTCLAS - 487)) | (1L << (REMOVE - 487)) | (1L << (STORCLAS - 487)))) != 0) );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public AlterTableNameContext alterTableName() {
			return getRuleContext(AlterTableNameContext.class,0);
		}
		public List<TableOptionListContext> tableOptionList() {
			return getRuleContexts(TableOptionListContext.class);
		}
		public TableOptionListContext tableOptionList(int i) {
			return getRuleContext(TableOptionListContext.class,i);
		}
		public AlterTableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTableStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterTableStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterTableStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterTableStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableStatementContext alterTableStatement() throws RecognitionException {
		AlterTableStatementContext _localctx = new AlterTableStatementContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_alterTableStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1013);
			match(ALTER);
			setState(1014);
			match(TABLE);
			setState(1015);
			alterTableName();
			setState(1017); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1016);
				tableOptionList();
				}
				}
				setState(1019); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALTER) | (1L << AUDIT))) != 0) || ((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & ((1L << (DATA - 83)) | (1L << (DISABLE - 83)) | (1L << (DROP - 83)))) != 0) || ((((_la - 161)) & ~0x3f) == 0 && ((1L << (_la - 161)) & ((1L << (KEY - 161)) | (1L << (NO - 161)) | (1L << (NOT - 161)))) != 0) || _la==RENAME || _la==VALIDPROC || _la==VOLATILE || ((((_la - 468)) & ~0x3f) == 0 && ((1L << (_la - 468)) & ((1L << (ENABLE - 468)) | (1L << (ACTIVATE - 468)) | (1L << (APPEND - 468)) | (1L << (DEACTIVATE - 468)) | (1L << (ROTATE - 468)))) != 0) );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTablespaceStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode TABLESPACE() { return getToken(DB2zSQLParser.TABLESPACE, 0); }
		public TablespaceNameContext tablespaceName() {
			return getRuleContext(TablespaceNameContext.class,0);
		}
		public DatabaseNameContext databaseName() {
			return getRuleContext(DatabaseNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public List<TablespaceOptionListContext> tablespaceOptionList() {
			return getRuleContexts(TablespaceOptionListContext.class);
		}
		public TablespaceOptionListContext tablespaceOptionList(int i) {
			return getRuleContext(TablespaceOptionListContext.class,i);
		}
		public AlterPartitionClauseContext alterPartitionClause() {
			return getRuleContext(AlterPartitionClauseContext.class,0);
		}
		public MoveTableClauseContext moveTableClause() {
			return getRuleContext(MoveTableClauseContext.class,0);
		}
		public AlterTablespaceStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTablespaceStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterTablespaceStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterTablespaceStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterTablespaceStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTablespaceStatementContext alterTablespaceStatement() throws RecognitionException {
		AlterTablespaceStatementContext _localctx = new AlterTablespaceStatementContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_alterTablespaceStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1021);
			match(ALTER);
			setState(1022);
			match(TABLESPACE);
			setState(1026);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,38,_ctx) ) {
			case 1:
				{
				setState(1023);
				databaseName();
				setState(1024);
				match(DOT);
				}
				break;
			}
			setState(1028);
			tablespaceName();
			setState(1032);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUFFERPOOL) | (1L << CCSID) | (1L << CLOSE))) != 0) || ((((_la - 99)) & ~0x3f) == 0 && ((1L << (_la - 99)) & ((1L << (DROP - 99)) | (1L << (DSSIZE - 99)) | (1L << (ERASE - 99)) | (1L << (INSERT - 99)))) != 0) || ((((_la - 175)) & ~0x3f) == 0 && ((1L << (_la - 175)) & ((1L << (LOCKMAX - 175)) | (1L << (LOCKSIZE - 175)) | (1L << (NOT - 175)) | (1L << (PRIQTY - 175)))) != 0) || _la==SECQTY || _la==USING || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (COMPRESS - 458)) | (1L << (FREEPAGE - 458)) | (1L << (GBPCACHE - 458)) | (1L << (PCTFREE - 458)))) != 0) || ((((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & ((1L << (LOG - 535)) | (1L << (LOGGED - 535)) | (1L << (MAXPARTITIONS - 535)) | (1L << (MAXROWS - 535)) | (1L << (MEMBER - 535)) | (1L << (PAGENUM - 535)) | (1L << (SEGSIZE - 535)) | (1L << (TRACKMOD - 535)))) != 0)) {
				{
				{
				setState(1029);
				tablespaceOptionList();
				}
				}
				setState(1034);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1036);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALTER || _la==PART || _la==PARTITION) {
				{
				setState(1035);
				alterPartitionClause();
				}
			}

			setState(1039);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MOVE) {
				{
				setState(1038);
				moveTableClause();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTriggerStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode TRIGGER() { return getToken(DB2zSQLParser.TRIGGER, 0); }
		public TriggerNameContext triggerName() {
			return getRuleContext(TriggerNameContext.class,0);
		}
		public TerminalNode SECURED() { return getToken(DB2zSQLParser.SECURED, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public AlterTriggerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTriggerStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterTriggerStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterTriggerStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterTriggerStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTriggerStatementContext alterTriggerStatement() throws RecognitionException {
		AlterTriggerStatementContext _localctx = new AlterTriggerStatementContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_alterTriggerStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1041);
			match(ALTER);
			setState(1042);
			match(TRIGGER);
			{
			setState(1043);
			schemaName();
			setState(1044);
			match(DOT);
			}
			setState(1046);
			triggerName();
			setState(1048);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(1047);
				match(NOT);
				}
			}

			setState(1050);
			match(SECURED);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTrustedContextStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode TRUSTED() { return getToken(DB2zSQLParser.TRUSTED, 0); }
		public TerminalNode CONTEXT() { return getToken(DB2zSQLParser.CONTEXT, 0); }
		public ContextNameContext contextName() {
			return getRuleContext(ContextNameContext.class,0);
		}
		public List<TrustedContextOptionListContext> trustedContextOptionList() {
			return getRuleContexts(TrustedContextOptionListContext.class);
		}
		public TrustedContextOptionListContext trustedContextOptionList(int i) {
			return getRuleContext(TrustedContextOptionListContext.class,i);
		}
		public AlterTrustedContextStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTrustedContextStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterTrustedContextStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterTrustedContextStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterTrustedContextStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTrustedContextStatementContext alterTrustedContextStatement() throws RecognitionException {
		AlterTrustedContextStatementContext _localctx = new AlterTrustedContextStatementContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_alterTrustedContextStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1052);
			match(ALTER);
			setState(1053);
			match(TRUSTED);
			setState(1054);
			match(CONTEXT);
			setState(1055);
			contextName();
			setState(1057); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1056);
				trustedContextOptionList();
				}
				}
				setState(1059); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==ADD || _la==ALTER || ((((_la - 89)) & ~0x3f) == 0 && ((1L << (_la - 89)) & ((1L << (DEFAULT - 89)) | (1L << (DISABLE - 89)) | (1L << (DROP - 89)))) != 0) || _la==NO || _la==ENABLE || _la==REPLACE );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterViewStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode VIEW() { return getToken(DB2zSQLParser.VIEW, 0); }
		public ViewNameContext viewName() {
			return getRuleContext(ViewNameContext.class,0);
		}
		public TerminalNode REGENERATE() { return getToken(DB2zSQLParser.REGENERATE, 0); }
		public TerminalNode USING() { return getToken(DB2zSQLParser.USING, 0); }
		public TerminalNode APPLICATION() { return getToken(DB2zSQLParser.APPLICATION, 0); }
		public TerminalNode COMPATIBILITY() { return getToken(DB2zSQLParser.COMPATIBILITY, 0); }
		public ApplCompatValueContext applCompatValue() {
			return getRuleContext(ApplCompatValueContext.class,0);
		}
		public AlterViewStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterViewStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterViewStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterViewStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterViewStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterViewStatementContext alterViewStatement() throws RecognitionException {
		AlterViewStatementContext _localctx = new AlterViewStatementContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_alterViewStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1061);
			match(ALTER);
			setState(1062);
			match(VIEW);
			setState(1063);
			viewName();
			setState(1064);
			match(REGENERATE);
			setState(1069);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(1065);
				match(USING);
				setState(1066);
				match(APPLICATION);
				setState(1067);
				match(COMPATIBILITY);
				setState(1068);
				applCompatValue();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AssociateLocatorsStatementContext extends ParserRuleContext {
		public TerminalNode ASSOCIATE() { return getToken(DB2zSQLParser.ASSOCIATE, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<RsLocatorVariableContext> rsLocatorVariable() {
			return getRuleContexts(RsLocatorVariableContext.class);
		}
		public RsLocatorVariableContext rsLocatorVariable(int i) {
			return getRuleContext(RsLocatorVariableContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode PROCEDURE() { return getToken(DB2zSQLParser.PROCEDURE, 0); }
		public TerminalNode LOCATOR() { return getToken(DB2zSQLParser.LOCATOR, 0); }
		public TerminalNode LOCATORS() { return getToken(DB2zSQLParser.LOCATORS, 0); }
		public ProcedureNameContext procedureName() {
			return getRuleContext(ProcedureNameContext.class,0);
		}
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public TerminalNode RESULT() { return getToken(DB2zSQLParser.RESULT, 0); }
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public AssociateLocatorsStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_associateLocatorsStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAssociateLocatorsStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAssociateLocatorsStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAssociateLocatorsStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AssociateLocatorsStatementContext associateLocatorsStatement() throws RecognitionException {
		AssociateLocatorsStatementContext _localctx = new AssociateLocatorsStatementContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_associateLocatorsStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1071);
			match(ASSOCIATE);
			setState(1074);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RESULT) {
				{
				setState(1072);
				match(RESULT);
				setState(1073);
				match(SET);
				}
			}

			setState(1076);
			_la = _input.LA(1);
			if ( !(_la==LOCATOR || _la==LOCATORS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1077);
			match(LPAREN);
			setState(1078);
			rsLocatorVariable();
			setState(1083);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1079);
				match(COMMA);
				setState(1080);
				rsLocatorVariable();
				}
				}
				setState(1085);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1086);
			match(RPAREN);
			setState(1087);
			match(WITH);
			setState(1088);
			match(PROCEDURE);
			setState(1091);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTEGERLITERAL:
			case NUMERICLITERAL:
			case ADD:
			case AFTER:
			case ALL:
			case ALLOCATE:
			case ALLOW:
			case ALTER:
			case ALTERAND:
			case ANY:
			case ARRAY:
			case ARRAY_EXISTS:
			case AS:
			case ASENSITIVE:
			case ASSOCIATE:
			case ASUTIME:
			case AT:
			case AUDIT:
			case AUX:
			case AUXILIARY:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BUFFERPOOL:
			case BY:
			case CALL:
			case CAPTURE:
			case CASCADED:
			case CASE:
			case CAST:
			case CCSID:
			case CHAR:
			case CHARACTER:
			case CHECK:
			case CLONE:
			case CLOSE:
			case CLUSTER:
			case COLLECTION:
			case COLLID:
			case COLUMN:
			case COMMENT:
			case COMMIT:
			case CONCAT:
			case CONDITION:
			case CONNECT:
			case CONNECTION:
			case CONSTRAINT:
			case CONTAINS:
			case CONTENT:
			case CONTINUE:
			case CREATE:
			case CUBE:
			case CURRENT:
			case CURRENT_LC_CTYPE:
			case CURRVAL:
			case CURSOR:
			case DATA:
			case DATABASE:
			case DAY:
			case DAYS:
			case DBINFO:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DISABLE:
			case DISALLOW:
			case DISTINCT:
			case DO:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSSIZE:
			case DYNAMIC:
			case EDITPROC:
			case ELSE:
			case ELSEIF:
			case ENCODING:
			case ENCRYPTION:
			case END:
			case END_EXEC:
			case ENDING:
			case ERASE:
			case ESCAPE:
			case EXCEPT:
			case EXCEPTION:
			case EXEC_SQL:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case FENCED:
			case FETCH:
			case FIELDPROC:
			case FINAL:
			case FIRST:
			case FOR:
			case FREE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANT:
			case GROUP:
			case HANDLER:
			case HAVING:
			case HOLD:
			case HOUR:
			case HOURS:
			case IF:
			case IMMEDIATE:
			case IN:
			case INCLUSIVE:
			case INDEX:
			case INDEXBP:
			case INHERIT:
			case INNER:
			case INOUT:
			case INSENSITIVE:
			case INSERT:
			case INTERSECT:
			case INTO:
			case IS:
			case ISOBID:
			case ITERATE:
			case JAR:
			case JOIN:
			case KEEP:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LAST:
			case LC_CTYPE:
			case LEAVE:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOCALE:
			case LOCATOR:
			case LOCATORS:
			case LOCK:
			case LOCKMAX:
			case LOCKSIZE:
			case LONG:
			case LOOP:
			case MAINTAINED:
			case MATERIALIZED:
			case MICROSECOND:
			case MICROSECONDS:
			case MODIFIES:
			case MONTH:
			case MONTHS:
			case NEXT:
			case NEXTVAL:
			case NO:
			case NONE:
			case NOT:
			case NULL:
			case NULLS:
			case NUMPARTS:
			case OBID:
			case OF:
			case OFFSET:
			case OLD:
			case ON:
			case OPEN:
			case OPTIMIZATION:
			case OPTIMIZE:
			case OR:
			case ORDER:
			case ORGANIZATION:
			case OUT:
			case OUTER:
			case PACKAGE:
			case PADDED:
			case PARAMETER:
			case PART:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONING:
			case PATH:
			case PERIOD:
			case PIECESIZE:
			case PLAN:
			case PRECISION:
			case PREPARE:
			case PREVVAL:
			case PRIOR:
			case PRIQTY:
			case PRIVILEGES:
			case PROCEDURE:
			case PROGRAM:
			case PSID:
			case PUBLIC:
			case QUERY:
			case QUERYNO:
			case READS:
			case REFERENCES:
			case REFRESH:
			case RELEASE:
			case RENAME:
			case REPEAT:
			case RESIGNAL:
			case RESTRICT:
			case RESULT:
			case RESULT_SET_LOCATOR:
			case RETURN:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUND_CEILING:
			case ROUND_DOWN:
			case ROUND_FLOOR:
			case ROUND_HALF_DOWN:
			case ROUND_HALF_EVEN:
			case ROUND_HALF_UP:
			case ROUND_UP:
			case ROW:
			case ROWSET:
			case RUN:
			case SAVEPOINT:
			case SCHEMA:
			case SCRATCHPAD:
			case SECOND:
			case SECONDS:
			case SECQTY:
			case SECURITY:
			case SELECT:
			case SENSITIVE:
			case SEQUENCE:
			case SET:
			case SIGNAL:
			case SIMPLE:
			case SOME:
			case SOURCE:
			case SPECIFIC:
			case STANDARD:
			case STATEMENT:
			case STATIC:
			case STAY:
			case STOGROUP:
			case STORES:
			case STYLE:
			case SUMMARY:
			case SYNONYM:
			case SYSDATE:
			case SYSTEM:
			case SYSTIMESTAMP:
			case TABLE:
			case TABLESPACE:
			case THEN:
			case TO:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNDO:
			case UNION:
			case UNIQUE:
			case UNTIL:
			case UPDATE:
			case USING:
			case VALIDPROC:
			case VALUE:
			case VALUES:
			case VARIABLE:
			case VARIANT:
			case VCAT:
			case VERSIONING:
			case VIEW:
			case VOLATILE:
			case VOLUMES:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WLM:
			case XMLCAST:
			case XMLEXISTS:
			case XMLNAMESPACES:
			case YEAR:
			case YEARS:
			case ZONE:
			case AND:
			case ARRAY_AGG:
			case ASC:
			case AVG:
			case BIT:
			case CHANGE:
			case CODEUNITS16:
			case CODEUNITS32:
			case CORR:
			case CORRELATION:
			case COUNT:
			case COUNT_BIG:
			case COVAR:
			case COVARIANCE:
			case COVARIANCE_SAMP:
			case COVAR_POP:
			case COVAR_SAMP:
			case CS:
			case CUME_DIST:
			case DENSE_RANK:
			case DESC:
			case EBCDIC:
			case EXCLUSIVE:
			case FIRST_VALUE:
			case FOLLOWING:
			case GROUPING:
			case IGNORE:
			case INDICATOR:
			case INPUT:
			case ISNULL:
			case LAG:
			case LARGE:
			case LAST_VALUE:
			case LEAD:
			case LISTAGG:
			case LOCKED:
			case LOCKS:
			case MEDIAN:
			case MINUTES:
			case MIXED:
			case NOTNULL:
			case NTH_VALUE:
			case NTILE:
			case NUMERIC:
			case OBJECT:
			case OCTETS:
			case ONLY:
			case OVER:
			case PASSING:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PERCENT_RANK:
			case PRECEDING:
			case PREVIOUS:
			case RANGE:
			case RANK:
			case RATIO_TO_REPORT:
			case READ:
			case REF:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_ICPT:
			case REGR_INTERCEPT:
			case REGR_R2:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case RESPECT:
			case ROW_NUMBER:
			case ROWS:
			case RR:
			case RS:
			case SBCS:
			case SELECTIVITY:
			case SETS:
			case SHARE:
			case SKIP_:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case TOKEN:
			case UNBOUNDED:
			case UNPACK:
			case UR:
			case USE:
			case VAR:
			case VARIANCE:
			case VARIANCE_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARYING:
			case WITHOUT:
			case XML:
			case XMLAGG:
			case COLUMNS:
			case SQLID:
			case ORDINALITY:
			case SYSTEM_TIME:
			case BUSINESS_TIME:
			case MULTIPLIER:
			case UNNEST:
			case CROSS:
			case CALLER:
			case CLIENT:
			case POSITIONING:
			case SCROLL:
			case ACTION:
			case ASSEMBLE:
			case C_:
			case CALLED:
			case COBOL:
			case DB2:
			case DEFINER:
			case DISPATCH:
			case ENVIRONMENT:
			case FAILURE:
			case FAILURES:
			case JAVA:
			case MAIN:
			case NAME:
			case OPTIONS:
			case PARALLEL:
			case PLI:
			case REGISTERS:
			case RESIDENT:
			case SECURED:
			case SPECIAL:
			case SQL:
			case STOP:
			case SUB:
			case YES:
			case APPLICATION:
			case CHANGED:
			case COMPATIBILITY:
			case COMPRESS:
			case COPY:
			case FREEPAGE:
			case GBPCACHE:
			case INCLUDE:
			case MAXVALUE:
			case MINVALUE:
			case PCTFREE:
			case REGENERATE:
			case MASK:
			case ENABLE:
			case PERMISSION:
			case ATOMIC:
			case SQLEXCEPTION:
			case MERGE:
			case MATCHED:
			case SQLSTATE:
			case MESSAGE_TEXT:
			case OVERRIDING:
			case PORTION:
			case DB2SQL:
			case DEBUG:
			case GENERAL:
			case MODE_:
			case REXX:
			case CACHE:
			case CYCLE:
			case INCREMENT:
			case RESTART:
			case DATACLAS:
			case MGMTCLAS:
			case REMOVE:
			case STORCLAS:
			case ACCESS:
			case ACTIVATE:
			case ALWAYS:
			case APPEND:
			case ARCHIVE:
			case BUSINESS:
			case CASCADE:
			case CHANGES:
			case CONTROL:
			case DEACTIVATE:
			case DEFERRED:
			case EACH:
			case ENFORCED:
			case EXTRA:
			case FOREIGN:
			case HIDDEN_:
			case HISTORY:
			case ID:
			case IDENTITY:
			case IMPLICITLY:
			case INITIALLY:
			case INLINE:
			case OPERATION:
			case ORGANIZE:
			case OVERLAPS:
			case PACKAGE_NAME:
			case PACKAGE_SCHEMA:
			case PACKAGE_VERSION:
			case PRIMARY:
			case RESET:
			case ROTATE:
			case START:
			case SYSIBM:
			case TRANSACTION:
			case XMLSCHEMA:
			case ELEMENT:
			case URL:
			case NAMESPACE:
			case LOCATION:
			case SYSXSR:
			case ALGORITHM:
			case FIXEDLENGTH:
			case HUFFMAN:
			case LOB:
			case LOG:
			case LOGGED:
			case MAXPARTITIONS:
			case MAXROWS:
			case MEMBER:
			case MOVE:
			case PAGE:
			case PAGENUM:
			case PENDING:
			case RELATIVE:
			case SEGSIZE:
			case TRACKMOD:
			case ADDRESS:
			case ATTRIBUTES:
			case AUTHENTICATION:
			case AUTHID:
			case CONTEXT:
			case JOBNAME:
			case OWNER:
			case PROFILE:
			case QUALIFIER:
			case SERVAUTH:
			case TRUSTED:
			case SECTION:
			case ACTIVE:
			case VERSION:
			case ALIAS:
			case WORK:
			case WORKFILE:
			case SYSDEFLT:
			case NULTERM:
			case STRUCTURE:
			case GENERIC:
			case ABS:
			case ABSVAL:
			case ACOS:
			case ADD_DAYS:
			case ADD_MONTHS:
			case ARRAY_DELETE:
			case ARRAY_FIRST:
			case ARRAY_LAST:
			case ARRAY_NEXT:
			case ARRAY_PRIOR:
			case ARRAY_TRIM:
			case ASCII:
			case ASCII_CHR:
			case ASCIISTR:
			case ASCII_STR:
			case ASIN:
			case ATAN:
			case ATAN2:
			case ATANH:
			case BIGINT:
			case BINARY:
			case BITAND:
			case BITANDNOT:
			case BITNOT:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BTRIM:
			case CARDINALITY:
			case CCSID_ENCODING:
			case CEIL:
			case CEILING:
			case CHAR9:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case CHR:
			case CLOB:
			case COALESCE:
			case COLLATION_KEY:
			case COMPARE_DECFLOAT:
			case COS:
			case COSH:
			case DATE:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFWEEK_ISO:
			case DAYOFYEAR:
			case DAYS_BETWEEN:
			case DBCLOB:
			case DEC:
			case DECFLOAT:
			case DECFLOAT_FORMAT:
			case DECFLOAT_SORTKEY:
			case DECIMAL:
			case DECODE:
			case DECRYPT_BINARY:
			case DECRYPT_BIT:
			case DECRYPT_CHAR:
			case DECRYPT_DATAKEY_BIGINT:
			case DECRYPT_DATAKEY_BIT:
			case DECRYPT_DATAKEY_CLOB:
			case DECRYPT_DATAKEY_DBCLOB:
			case DECRYPT_DATAKEY_DECIMAL:
			case DECRYPT_DATAKEY_INTEGER:
			case DECRYPT_DATAKEY_VARCHAR:
			case DECRYPT_DATAKEY_VARGRAPHIC:
			case DECRYPT_DB:
			case DEGREES:
			case DIFFERENCE:
			case DIGITS:
			case DOUBLE_PRECISION:
			case DSN_XMLVALIDATE:
			case EBCDIC_CHR:
			case EBCDIC_STR:
			case ENCRYPT_DATAKEY:
			case ENCRYPT_TDES:
			case EXP:
			case EXTRACT:
			case FLOAT:
			case FLOOR:
			case GENERATE_UNIQUE:
			case GENERATE_UNIQUE_BINARY:
			case GETHINT:
			case GETVARIABLE:
			case GRAPHIC:
			case GREATEST:
			case HASH:
			case HASH_CRC32:
			case HASH_MD5:
			case HASH_SHA1:
			case HASH_SHA256:
			case HEX:
			case IDENTITY_VAL_LOCAL:
			case IFNULL:
			case INSTR:
			case INT:
			case INTEGER:
			case JULIAN_DAY:
			case LAST_DAY:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LN:
			case LOCATE:
			case LOCATE_IN_STRING:
			case LOG10:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAX:
			case MAX_CARDINALITY:
			case MIDNIGHT_SECONDS:
			case MIN:
			case MINUTE:
			case MOD:
			case MONTHS_BETWEEN:
			case MQREAD:
			case MQREADCLOB:
			case MQRECEIVE:
			case MQRECEIVECLOB:
			case MQSEND:
			case MULTIPLY_ALT:
			case NEXT_DAY:
			case NEXT_MONTH:
			case NORMALIZE_DECFLOAT:
			case NORMALIZE_STRING:
			case NULLIF:
			case NVL:
			case OVERLAY:
			case PACK:
			case POSITION:
			case POSSTR:
			case POW:
			case POWER:
			case QUANTIZE:
			case QUARTER:
			case RADIANS:
			case RAISE_ERROR:
			case RAND:
			case RANDOM:
			case REAL:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REPLACE:
			case RID:
			case ROUND:
			case ROUND_TIMESTAMP:
			case ROWID:
			case RPAD:
			case RTRIM:
			case SCORE:
			case SIGN:
			case SIN:
			case SINH:
			case SMALLINT:
			case SOAPHTTPC:
			case SOAPHTTPNC:
			case SOAPHTTPNV:
			case SOAPHTTPV:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STRIP:
			case STRLEFT:
			case STRPOS:
			case STRRIGHT:
			case SUBSTR:
			case SUBSTRING:
			case TAN:
			case TANH:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIMESTAMP_FORMAT:
			case TIMESTAMP_ISO:
			case TIMESTAMP_TZ:
			case TO_CHAR:
			case TO_CLOB:
			case TO_DATE:
			case TO_NUMBER:
			case TOTALORDER:
			case TO_TIMESTAMP:
			case TRANSLATE:
			case TRIM:
			case TRIM_ARRAY:
			case TRUNC:
			case TRUNC_TIMESTAMP:
			case UCASE:
			case UNICODE:
			case UNICODE_STR:
			case UNISTR:
			case UPPER:
			case VARBINARY:
			case VARCHAR:
			case VARCHAR9:
			case VARCHAR_BIT_FORMAT:
			case VARCHAR_FORMAT:
			case VARGRAPHIC:
			case VERIFY_GROUP_FOR_USER:
			case VERIFY_ROLE_FOR_USER:
			case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
			case WEEK:
			case WEEK_ISO:
			case WRAP:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLCONCAT:
			case XMLDOCUMENT:
			case XMLELEMENT:
			case XMLFOREST:
			case XMLMODIFY:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLSERIALIZE:
			case XMLTEXT:
			case XMLXSROBJECTID:
			case XSLTRANSFORM:
			case CURRENT_ACCELERATOR:
			case CURRENT_APPLICATION_COMPATIBILITY:
			case CURRENT_APPLICATION_ENCODING_SCHEME:
			case CURRENT_CLIENT_ACCTNG:
			case CURRENT_CLIENT_APPLNAME:
			case CURRENT_CLIENT_CORR_TOKEN:
			case CURRENT_CLIENT_USERID:
			case CURRENT_CLIENT_WRKSTNNAME:
			case CURRENT_DATE:
			case CURRENT_DEBUG_MODE:
			case CURRENT_DECFLOAT_ROUNDING_MODE:
			case CURRENT_DEGREE:
			case CURRENT_EXPLAIN_MODE:
			case CURRENT_GET_ACCEL_ARCHIVE:
			case CURRENT_LOCALE_LC_CTYPE:
			case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
			case CURRENT_MEMBER:
			case CURRENT_OPTIMIZATION_HINT:
			case CURRENT_PACKAGE_PATH:
			case CURRENT_PACKAGESET:
			case CURRENT_PATH:
			case CURRENT_PRECISION:
			case CURRENT_QUERY_ACCELERATION:
			case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
			case CURRENT_REFRESH_AGE:
			case CURRENT_ROUTINE_VERSION:
			case CURRENT_RULES:
			case CURRENT_SCHEMA:
			case CURRENT_SERVER:
			case CURRENT_SQLID:
			case CURRENT_TEMPORAL_BUSINESS_TIME:
			case CURRENT_TEMPORAL_SYSTEM_TIME:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_TIME_ZONE:
			case ENCRYPTION_PASSWORD:
			case SESSION_TIME_ZONE:
			case SESSION_USER:
			case USER:
			case ADMIN_TASK_LIST:
			case ADMIN_TASK_OUTPUT:
			case ADMIN_TASK_STATUS:
			case BLOCKING_THREADS:
			case MQREADALL:
			case MQREADALLCLOB:
			case MQRECEIVEALL:
			case MQRECEIVEALLCLOB:
			case XMLTABLE:
			case SQLIDENTIFIER:
				{
				setState(1089);
				procedureName();
				}
				break;
			case COLON:
				{
				setState(1090);
				hostVariable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BeginDeclareSectionStatementContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(DB2zSQLParser.BEGIN, 0); }
		public TerminalNode DECLARE() { return getToken(DB2zSQLParser.DECLARE, 0); }
		public TerminalNode SECTION() { return getToken(DB2zSQLParser.SECTION, 0); }
		public BeginDeclareSectionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_beginDeclareSectionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterBeginDeclareSectionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitBeginDeclareSectionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitBeginDeclareSectionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BeginDeclareSectionStatementContext beginDeclareSectionStatement() throws RecognitionException {
		BeginDeclareSectionStatementContext _localctx = new BeginDeclareSectionStatementContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_beginDeclareSectionStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1093);
			match(BEGIN);
			setState(1094);
			match(DECLARE);
			setState(1095);
			match(SECTION);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CallStatementContext extends ParserRuleContext {
		public TerminalNode CALL() { return getToken(DB2zSQLParser.CALL, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public ProcedureNameContext procedureName() {
			return getRuleContext(ProcedureNameContext.class,0);
		}
		public List<HostVariableContext> hostVariable() {
			return getRuleContexts(HostVariableContext.class);
		}
		public HostVariableContext hostVariable(int i) {
			return getRuleContext(HostVariableContext.class,i);
		}
		public TerminalNode USING() { return getToken(DB2zSQLParser.USING, 0); }
		public TerminalNode DESCRIPTOR() { return getToken(DB2zSQLParser.DESCRIPTOR, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> NULL() { return getTokens(DB2zSQLParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(DB2zSQLParser.NULL, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public List<TerminalNode> TABLE() { return getTokens(DB2zSQLParser.TABLE); }
		public TerminalNode TABLE(int i) {
			return getToken(DB2zSQLParser.TABLE, i);
		}
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public CallStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_callStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCallStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCallStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCallStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CallStatementContext callStatement() throws RecognitionException {
		CallStatementContext _localctx = new CallStatementContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_callStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1097);
			match(CALL);
			setState(1100);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTEGERLITERAL:
			case NUMERICLITERAL:
			case ADD:
			case AFTER:
			case ALL:
			case ALLOCATE:
			case ALLOW:
			case ALTER:
			case ALTERAND:
			case ANY:
			case ARRAY:
			case ARRAY_EXISTS:
			case AS:
			case ASENSITIVE:
			case ASSOCIATE:
			case ASUTIME:
			case AT:
			case AUDIT:
			case AUX:
			case AUXILIARY:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BUFFERPOOL:
			case BY:
			case CALL:
			case CAPTURE:
			case CASCADED:
			case CASE:
			case CAST:
			case CCSID:
			case CHAR:
			case CHARACTER:
			case CHECK:
			case CLONE:
			case CLOSE:
			case CLUSTER:
			case COLLECTION:
			case COLLID:
			case COLUMN:
			case COMMENT:
			case COMMIT:
			case CONCAT:
			case CONDITION:
			case CONNECT:
			case CONNECTION:
			case CONSTRAINT:
			case CONTAINS:
			case CONTENT:
			case CONTINUE:
			case CREATE:
			case CUBE:
			case CURRENT:
			case CURRENT_LC_CTYPE:
			case CURRVAL:
			case CURSOR:
			case DATA:
			case DATABASE:
			case DAY:
			case DAYS:
			case DBINFO:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DISABLE:
			case DISALLOW:
			case DISTINCT:
			case DO:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSSIZE:
			case DYNAMIC:
			case EDITPROC:
			case ELSE:
			case ELSEIF:
			case ENCODING:
			case ENCRYPTION:
			case END:
			case END_EXEC:
			case ENDING:
			case ERASE:
			case ESCAPE:
			case EXCEPT:
			case EXCEPTION:
			case EXEC_SQL:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case FENCED:
			case FETCH:
			case FIELDPROC:
			case FINAL:
			case FIRST:
			case FOR:
			case FREE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANT:
			case GROUP:
			case HANDLER:
			case HAVING:
			case HOLD:
			case HOUR:
			case HOURS:
			case IF:
			case IMMEDIATE:
			case IN:
			case INCLUSIVE:
			case INDEX:
			case INDEXBP:
			case INHERIT:
			case INNER:
			case INOUT:
			case INSENSITIVE:
			case INSERT:
			case INTERSECT:
			case INTO:
			case IS:
			case ISOBID:
			case ITERATE:
			case JAR:
			case JOIN:
			case KEEP:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LAST:
			case LC_CTYPE:
			case LEAVE:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOCALE:
			case LOCATOR:
			case LOCATORS:
			case LOCK:
			case LOCKMAX:
			case LOCKSIZE:
			case LONG:
			case LOOP:
			case MAINTAINED:
			case MATERIALIZED:
			case MICROSECOND:
			case MICROSECONDS:
			case MODIFIES:
			case MONTH:
			case MONTHS:
			case NEXT:
			case NEXTVAL:
			case NO:
			case NONE:
			case NOT:
			case NULL:
			case NULLS:
			case NUMPARTS:
			case OBID:
			case OF:
			case OFFSET:
			case OLD:
			case ON:
			case OPEN:
			case OPTIMIZATION:
			case OPTIMIZE:
			case OR:
			case ORDER:
			case ORGANIZATION:
			case OUT:
			case OUTER:
			case PACKAGE:
			case PADDED:
			case PARAMETER:
			case PART:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONING:
			case PATH:
			case PERIOD:
			case PIECESIZE:
			case PLAN:
			case PRECISION:
			case PREPARE:
			case PREVVAL:
			case PRIOR:
			case PRIQTY:
			case PRIVILEGES:
			case PROCEDURE:
			case PROGRAM:
			case PSID:
			case PUBLIC:
			case QUERY:
			case QUERYNO:
			case READS:
			case REFERENCES:
			case REFRESH:
			case RELEASE:
			case RENAME:
			case REPEAT:
			case RESIGNAL:
			case RESTRICT:
			case RESULT:
			case RESULT_SET_LOCATOR:
			case RETURN:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUND_CEILING:
			case ROUND_DOWN:
			case ROUND_FLOOR:
			case ROUND_HALF_DOWN:
			case ROUND_HALF_EVEN:
			case ROUND_HALF_UP:
			case ROUND_UP:
			case ROW:
			case ROWSET:
			case RUN:
			case SAVEPOINT:
			case SCHEMA:
			case SCRATCHPAD:
			case SECOND:
			case SECONDS:
			case SECQTY:
			case SECURITY:
			case SELECT:
			case SENSITIVE:
			case SEQUENCE:
			case SET:
			case SIGNAL:
			case SIMPLE:
			case SOME:
			case SOURCE:
			case SPECIFIC:
			case STANDARD:
			case STATEMENT:
			case STATIC:
			case STAY:
			case STOGROUP:
			case STORES:
			case STYLE:
			case SUMMARY:
			case SYNONYM:
			case SYSDATE:
			case SYSTEM:
			case SYSTIMESTAMP:
			case TABLE:
			case TABLESPACE:
			case THEN:
			case TO:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNDO:
			case UNION:
			case UNIQUE:
			case UNTIL:
			case UPDATE:
			case USING:
			case VALIDPROC:
			case VALUE:
			case VALUES:
			case VARIABLE:
			case VARIANT:
			case VCAT:
			case VERSIONING:
			case VIEW:
			case VOLATILE:
			case VOLUMES:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WLM:
			case XMLCAST:
			case XMLEXISTS:
			case XMLNAMESPACES:
			case YEAR:
			case YEARS:
			case ZONE:
			case AND:
			case ARRAY_AGG:
			case ASC:
			case AVG:
			case BIT:
			case CHANGE:
			case CODEUNITS16:
			case CODEUNITS32:
			case CORR:
			case CORRELATION:
			case COUNT:
			case COUNT_BIG:
			case COVAR:
			case COVARIANCE:
			case COVARIANCE_SAMP:
			case COVAR_POP:
			case COVAR_SAMP:
			case CS:
			case CUME_DIST:
			case DENSE_RANK:
			case DESC:
			case EBCDIC:
			case EXCLUSIVE:
			case FIRST_VALUE:
			case FOLLOWING:
			case GROUPING:
			case IGNORE:
			case INDICATOR:
			case INPUT:
			case ISNULL:
			case LAG:
			case LARGE:
			case LAST_VALUE:
			case LEAD:
			case LISTAGG:
			case LOCKED:
			case LOCKS:
			case MEDIAN:
			case MINUTES:
			case MIXED:
			case NOTNULL:
			case NTH_VALUE:
			case NTILE:
			case NUMERIC:
			case OBJECT:
			case OCTETS:
			case ONLY:
			case OVER:
			case PASSING:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PERCENT_RANK:
			case PRECEDING:
			case PREVIOUS:
			case RANGE:
			case RANK:
			case RATIO_TO_REPORT:
			case READ:
			case REF:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_ICPT:
			case REGR_INTERCEPT:
			case REGR_R2:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case RESPECT:
			case ROW_NUMBER:
			case ROWS:
			case RR:
			case RS:
			case SBCS:
			case SELECTIVITY:
			case SETS:
			case SHARE:
			case SKIP_:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case TOKEN:
			case UNBOUNDED:
			case UNPACK:
			case UR:
			case USE:
			case VAR:
			case VARIANCE:
			case VARIANCE_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARYING:
			case WITHOUT:
			case XML:
			case XMLAGG:
			case COLUMNS:
			case SQLID:
			case ORDINALITY:
			case SYSTEM_TIME:
			case BUSINESS_TIME:
			case MULTIPLIER:
			case UNNEST:
			case CROSS:
			case CALLER:
			case CLIENT:
			case POSITIONING:
			case SCROLL:
			case ACTION:
			case ASSEMBLE:
			case C_:
			case CALLED:
			case COBOL:
			case DB2:
			case DEFINER:
			case DISPATCH:
			case ENVIRONMENT:
			case FAILURE:
			case FAILURES:
			case JAVA:
			case MAIN:
			case NAME:
			case OPTIONS:
			case PARALLEL:
			case PLI:
			case REGISTERS:
			case RESIDENT:
			case SECURED:
			case SPECIAL:
			case SQL:
			case STOP:
			case SUB:
			case YES:
			case APPLICATION:
			case CHANGED:
			case COMPATIBILITY:
			case COMPRESS:
			case COPY:
			case FREEPAGE:
			case GBPCACHE:
			case INCLUDE:
			case MAXVALUE:
			case MINVALUE:
			case PCTFREE:
			case REGENERATE:
			case MASK:
			case ENABLE:
			case PERMISSION:
			case ATOMIC:
			case SQLEXCEPTION:
			case MERGE:
			case MATCHED:
			case SQLSTATE:
			case MESSAGE_TEXT:
			case OVERRIDING:
			case PORTION:
			case DB2SQL:
			case DEBUG:
			case GENERAL:
			case MODE_:
			case REXX:
			case CACHE:
			case CYCLE:
			case INCREMENT:
			case RESTART:
			case DATACLAS:
			case MGMTCLAS:
			case REMOVE:
			case STORCLAS:
			case ACCESS:
			case ACTIVATE:
			case ALWAYS:
			case APPEND:
			case ARCHIVE:
			case BUSINESS:
			case CASCADE:
			case CHANGES:
			case CONTROL:
			case DEACTIVATE:
			case DEFERRED:
			case EACH:
			case ENFORCED:
			case EXTRA:
			case FOREIGN:
			case HIDDEN_:
			case HISTORY:
			case ID:
			case IDENTITY:
			case IMPLICITLY:
			case INITIALLY:
			case INLINE:
			case OPERATION:
			case ORGANIZE:
			case OVERLAPS:
			case PACKAGE_NAME:
			case PACKAGE_SCHEMA:
			case PACKAGE_VERSION:
			case PRIMARY:
			case RESET:
			case ROTATE:
			case START:
			case SYSIBM:
			case TRANSACTION:
			case XMLSCHEMA:
			case ELEMENT:
			case URL:
			case NAMESPACE:
			case LOCATION:
			case SYSXSR:
			case ALGORITHM:
			case FIXEDLENGTH:
			case HUFFMAN:
			case LOB:
			case LOG:
			case LOGGED:
			case MAXPARTITIONS:
			case MAXROWS:
			case MEMBER:
			case MOVE:
			case PAGE:
			case PAGENUM:
			case PENDING:
			case RELATIVE:
			case SEGSIZE:
			case TRACKMOD:
			case ADDRESS:
			case ATTRIBUTES:
			case AUTHENTICATION:
			case AUTHID:
			case CONTEXT:
			case JOBNAME:
			case OWNER:
			case PROFILE:
			case QUALIFIER:
			case SERVAUTH:
			case TRUSTED:
			case SECTION:
			case ACTIVE:
			case VERSION:
			case ALIAS:
			case WORK:
			case WORKFILE:
			case SYSDEFLT:
			case NULTERM:
			case STRUCTURE:
			case GENERIC:
			case ABS:
			case ABSVAL:
			case ACOS:
			case ADD_DAYS:
			case ADD_MONTHS:
			case ARRAY_DELETE:
			case ARRAY_FIRST:
			case ARRAY_LAST:
			case ARRAY_NEXT:
			case ARRAY_PRIOR:
			case ARRAY_TRIM:
			case ASCII:
			case ASCII_CHR:
			case ASCIISTR:
			case ASCII_STR:
			case ASIN:
			case ATAN:
			case ATAN2:
			case ATANH:
			case BIGINT:
			case BINARY:
			case BITAND:
			case BITANDNOT:
			case BITNOT:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BTRIM:
			case CARDINALITY:
			case CCSID_ENCODING:
			case CEIL:
			case CEILING:
			case CHAR9:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case CHR:
			case CLOB:
			case COALESCE:
			case COLLATION_KEY:
			case COMPARE_DECFLOAT:
			case COS:
			case COSH:
			case DATE:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFWEEK_ISO:
			case DAYOFYEAR:
			case DAYS_BETWEEN:
			case DBCLOB:
			case DEC:
			case DECFLOAT:
			case DECFLOAT_FORMAT:
			case DECFLOAT_SORTKEY:
			case DECIMAL:
			case DECODE:
			case DECRYPT_BINARY:
			case DECRYPT_BIT:
			case DECRYPT_CHAR:
			case DECRYPT_DATAKEY_BIGINT:
			case DECRYPT_DATAKEY_BIT:
			case DECRYPT_DATAKEY_CLOB:
			case DECRYPT_DATAKEY_DBCLOB:
			case DECRYPT_DATAKEY_DECIMAL:
			case DECRYPT_DATAKEY_INTEGER:
			case DECRYPT_DATAKEY_VARCHAR:
			case DECRYPT_DATAKEY_VARGRAPHIC:
			case DECRYPT_DB:
			case DEGREES:
			case DIFFERENCE:
			case DIGITS:
			case DOUBLE_PRECISION:
			case DSN_XMLVALIDATE:
			case EBCDIC_CHR:
			case EBCDIC_STR:
			case ENCRYPT_DATAKEY:
			case ENCRYPT_TDES:
			case EXP:
			case EXTRACT:
			case FLOAT:
			case FLOOR:
			case GENERATE_UNIQUE:
			case GENERATE_UNIQUE_BINARY:
			case GETHINT:
			case GETVARIABLE:
			case GRAPHIC:
			case GREATEST:
			case HASH:
			case HASH_CRC32:
			case HASH_MD5:
			case HASH_SHA1:
			case HASH_SHA256:
			case HEX:
			case IDENTITY_VAL_LOCAL:
			case IFNULL:
			case INSTR:
			case INT:
			case INTEGER:
			case JULIAN_DAY:
			case LAST_DAY:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LN:
			case LOCATE:
			case LOCATE_IN_STRING:
			case LOG10:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAX:
			case MAX_CARDINALITY:
			case MIDNIGHT_SECONDS:
			case MIN:
			case MINUTE:
			case MOD:
			case MONTHS_BETWEEN:
			case MQREAD:
			case MQREADCLOB:
			case MQRECEIVE:
			case MQRECEIVECLOB:
			case MQSEND:
			case MULTIPLY_ALT:
			case NEXT_DAY:
			case NEXT_MONTH:
			case NORMALIZE_DECFLOAT:
			case NORMALIZE_STRING:
			case NULLIF:
			case NVL:
			case OVERLAY:
			case PACK:
			case POSITION:
			case POSSTR:
			case POW:
			case POWER:
			case QUANTIZE:
			case QUARTER:
			case RADIANS:
			case RAISE_ERROR:
			case RAND:
			case RANDOM:
			case REAL:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REPLACE:
			case RID:
			case ROUND:
			case ROUND_TIMESTAMP:
			case ROWID:
			case RPAD:
			case RTRIM:
			case SCORE:
			case SIGN:
			case SIN:
			case SINH:
			case SMALLINT:
			case SOAPHTTPC:
			case SOAPHTTPNC:
			case SOAPHTTPNV:
			case SOAPHTTPV:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STRIP:
			case STRLEFT:
			case STRPOS:
			case STRRIGHT:
			case SUBSTR:
			case SUBSTRING:
			case TAN:
			case TANH:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIMESTAMP_FORMAT:
			case TIMESTAMP_ISO:
			case TIMESTAMP_TZ:
			case TO_CHAR:
			case TO_CLOB:
			case TO_DATE:
			case TO_NUMBER:
			case TOTALORDER:
			case TO_TIMESTAMP:
			case TRANSLATE:
			case TRIM:
			case TRIM_ARRAY:
			case TRUNC:
			case TRUNC_TIMESTAMP:
			case UCASE:
			case UNICODE:
			case UNICODE_STR:
			case UNISTR:
			case UPPER:
			case VARBINARY:
			case VARCHAR:
			case VARCHAR9:
			case VARCHAR_BIT_FORMAT:
			case VARCHAR_FORMAT:
			case VARGRAPHIC:
			case VERIFY_GROUP_FOR_USER:
			case VERIFY_ROLE_FOR_USER:
			case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
			case WEEK:
			case WEEK_ISO:
			case WRAP:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLCONCAT:
			case XMLDOCUMENT:
			case XMLELEMENT:
			case XMLFOREST:
			case XMLMODIFY:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLSERIALIZE:
			case XMLTEXT:
			case XMLXSROBJECTID:
			case XSLTRANSFORM:
			case CURRENT_ACCELERATOR:
			case CURRENT_APPLICATION_COMPATIBILITY:
			case CURRENT_APPLICATION_ENCODING_SCHEME:
			case CURRENT_CLIENT_ACCTNG:
			case CURRENT_CLIENT_APPLNAME:
			case CURRENT_CLIENT_CORR_TOKEN:
			case CURRENT_CLIENT_USERID:
			case CURRENT_CLIENT_WRKSTNNAME:
			case CURRENT_DATE:
			case CURRENT_DEBUG_MODE:
			case CURRENT_DECFLOAT_ROUNDING_MODE:
			case CURRENT_DEGREE:
			case CURRENT_EXPLAIN_MODE:
			case CURRENT_GET_ACCEL_ARCHIVE:
			case CURRENT_LOCALE_LC_CTYPE:
			case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
			case CURRENT_MEMBER:
			case CURRENT_OPTIMIZATION_HINT:
			case CURRENT_PACKAGE_PATH:
			case CURRENT_PACKAGESET:
			case CURRENT_PATH:
			case CURRENT_PRECISION:
			case CURRENT_QUERY_ACCELERATION:
			case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
			case CURRENT_REFRESH_AGE:
			case CURRENT_ROUTINE_VERSION:
			case CURRENT_RULES:
			case CURRENT_SCHEMA:
			case CURRENT_SERVER:
			case CURRENT_SQLID:
			case CURRENT_TEMPORAL_BUSINESS_TIME:
			case CURRENT_TEMPORAL_SYSTEM_TIME:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_TIME_ZONE:
			case ENCRYPTION_PASSWORD:
			case SESSION_TIME_ZONE:
			case SESSION_USER:
			case USER:
			case ADMIN_TASK_LIST:
			case ADMIN_TASK_OUTPUT:
			case ADMIN_TASK_STATUS:
			case BLOCKING_THREADS:
			case MQREADALL:
			case MQREADALLCLOB:
			case MQRECEIVEALL:
			case MQRECEIVEALLCLOB:
			case XMLTABLE:
			case SQLIDENTIFIER:
				{
				setState(1098);
				procedureName();
				}
				break;
			case COLON:
				{
				setState(1099);
				hostVariable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1102);
			match(LPAREN);
			setState(1124);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,52,_ctx) ) {
			case 1:
				{
				{
				setState(1107);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,49,_ctx) ) {
				case 1:
					{
					setState(1103);
					expression();
					}
					break;
				case 2:
					{
					setState(1104);
					match(NULL);
					}
					break;
				case 3:
					{
					{
					setState(1105);
					match(TABLE);
					setState(1106);
					tableName();
					}
					}
					break;
				}
				setState(1118);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1109);
					match(COMMA);
					setState(1114);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,50,_ctx) ) {
					case 1:
						{
						setState(1110);
						expression();
						}
						break;
					case 2:
						{
						setState(1111);
						match(NULL);
						}
						break;
					case 3:
						{
						{
						setState(1112);
						match(TABLE);
						setState(1113);
						tableName();
						}
						}
						break;
					}
					}
					}
					setState(1120);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case 2:
				{
				{
				setState(1121);
				match(USING);
				setState(1122);
				match(DESCRIPTOR);
				setState(1123);
				hostVariable();
				}
				}
				break;
			}
			setState(1126);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CloseStatementContext extends ParserRuleContext {
		public TerminalNode CLOSE() { return getToken(DB2zSQLParser.CLOSE, 0); }
		public CursorNameContext cursorName() {
			return getRuleContext(CursorNameContext.class,0);
		}
		public CloseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_closeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCloseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCloseStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCloseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CloseStatementContext closeStatement() throws RecognitionException {
		CloseStatementContext _localctx = new CloseStatementContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_closeStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1128);
			match(CLOSE);
			setState(1129);
			cursorName();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommentStatementContext extends ParserRuleContext {
		public TerminalNode COMMENT() { return getToken(DB2zSQLParser.COMMENT, 0); }
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public MultipleColumnListContext multipleColumnList() {
			return getRuleContext(MultipleColumnListContext.class,0);
		}
		public TerminalNode IS() { return getToken(DB2zSQLParser.IS, 0); }
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public AliasDesignatorContext aliasDesignator() {
			return getRuleContext(AliasDesignatorContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(DB2zSQLParser.COLUMN, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public FunctionDesignatorContext functionDesignator() {
			return getRuleContext(FunctionDesignatorContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(DB2zSQLParser.INDEX, 0); }
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public TerminalNode PACKAGE() { return getToken(DB2zSQLParser.PACKAGE, 0); }
		public CollectionIDContext collectionID() {
			return getRuleContext(CollectionIDContext.class,0);
		}
		public PackageNameContext packageName() {
			return getRuleContext(PackageNameContext.class,0);
		}
		public TerminalNode PLAN() { return getToken(DB2zSQLParser.PLAN, 0); }
		public PlanNameContext planName() {
			return getRuleContext(PlanNameContext.class,0);
		}
		public TerminalNode PROCEDURE() { return getToken(DB2zSQLParser.PROCEDURE, 0); }
		public ProcedureNameContext procedureName() {
			return getRuleContext(ProcedureNameContext.class,0);
		}
		public TerminalNode ROLE() { return getToken(DB2zSQLParser.ROLE, 0); }
		public RoleNameContext roleName() {
			return getRuleContext(RoleNameContext.class,0);
		}
		public TerminalNode SEQUENCE() { return getToken(DB2zSQLParser.SEQUENCE, 0); }
		public SequenceNameContext sequenceName() {
			return getRuleContext(SequenceNameContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public TerminalNode TRIGGER() { return getToken(DB2zSQLParser.TRIGGER, 0); }
		public TriggerNameContext triggerName() {
			return getRuleContext(TriggerNameContext.class,0);
		}
		public TerminalNode TRUSTED() { return getToken(DB2zSQLParser.TRUSTED, 0); }
		public TerminalNode CONTEXT() { return getToken(DB2zSQLParser.CONTEXT, 0); }
		public ContextNameContext contextName() {
			return getRuleContext(ContextNameContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(DB2zSQLParser.TYPE, 0); }
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public TerminalNode MASK() { return getToken(DB2zSQLParser.MASK, 0); }
		public MaskNameContext maskName() {
			return getRuleContext(MaskNameContext.class,0);
		}
		public TerminalNode PERMISSION() { return getToken(DB2zSQLParser.PERMISSION, 0); }
		public PermissionNameContext permissionName() {
			return getRuleContext(PermissionNameContext.class,0);
		}
		public TerminalNode VARIABLE() { return getToken(DB2zSQLParser.VARIABLE, 0); }
		public VariableNameContext variableName() {
			return getRuleContext(VariableNameContext.class,0);
		}
		public VersionIDContext versionID() {
			return getRuleContext(VersionIDContext.class,0);
		}
		public TerminalNode ACTIVE() { return getToken(DB2zSQLParser.ACTIVE, 0); }
		public TerminalNode VERSION() { return getToken(DB2zSQLParser.VERSION, 0); }
		public RoutineVersionIDContext routineVersionID() {
			return getRuleContext(RoutineVersionIDContext.class,0);
		}
		public CommentStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commentStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCommentStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCommentStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCommentStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommentStatementContext commentStatement() throws RecognitionException {
		CommentStatementContext _localctx = new CommentStatementContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_commentStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1131);
			match(COMMENT);
			setState(1132);
			match(ON);
			setState(1199);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,59,_ctx) ) {
			case 1:
				{
				{
				setState(1193);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PUBLIC:
				case ALIAS:
					{
					setState(1133);
					aliasDesignator();
					}
					break;
				case COLUMN:
					{
					{
					setState(1134);
					match(COLUMN);
					setState(1135);
					tableName();
					setState(1136);
					match(DOT);
					setState(1137);
					columnName();
					}
					}
					break;
				case FUNCTION:
				case SPECIFIC:
					{
					{
					setState(1139);
					functionDesignator();
					setState(1144);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ACTIVE:
						{
						{
						setState(1140);
						match(ACTIVE);
						setState(1141);
						match(VERSION);
						}
						}
						break;
					case VERSION:
						{
						{
						setState(1142);
						match(VERSION);
						setState(1143);
						routineVersionID();
						}
						}
						break;
					case IS:
						break;
					default:
						break;
					}
					}
					}
					break;
				case INDEX:
					{
					{
					setState(1146);
					match(INDEX);
					setState(1147);
					indexName();
					}
					}
					break;
				case PACKAGE:
					{
					{
					setState(1148);
					match(PACKAGE);
					setState(1149);
					collectionID();
					setState(1150);
					match(DOT);
					setState(1151);
					packageName();
					setState(1156);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,55,_ctx) ) {
					case 1:
						{
						setState(1153);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,54,_ctx) ) {
						case 1:
							{
							setState(1152);
							match(VERSION);
							}
							break;
						}
						setState(1155);
						versionID();
						}
						break;
					}
					}
					}
					break;
				case PLAN:
					{
					{
					setState(1158);
					match(PLAN);
					setState(1159);
					planName();
					}
					}
					break;
				case PROCEDURE:
					{
					{
					setState(1160);
					match(PROCEDURE);
					setState(1161);
					procedureName();
					setState(1166);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ACTIVE:
						{
						{
						setState(1162);
						match(ACTIVE);
						setState(1163);
						match(VERSION);
						}
						}
						break;
					case VERSION:
						{
						{
						setState(1164);
						match(VERSION);
						setState(1165);
						routineVersionID();
						}
						}
						break;
					case IS:
						break;
					default:
						break;
					}
					}
					}
					break;
				case ROLE:
					{
					{
					setState(1168);
					match(ROLE);
					setState(1169);
					roleName();
					}
					}
					break;
				case SEQUENCE:
					{
					{
					setState(1170);
					match(SEQUENCE);
					setState(1171);
					sequenceName();
					}
					}
					break;
				case TABLE:
					{
					{
					setState(1172);
					match(TABLE);
					setState(1173);
					tableName();
					}
					}
					break;
				case TRIGGER:
					{
					{
					setState(1174);
					match(TRIGGER);
					setState(1175);
					triggerName();
					setState(1180);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ACTIVE:
						{
						{
						setState(1176);
						match(ACTIVE);
						setState(1177);
						match(VERSION);
						}
						}
						break;
					case VERSION:
						{
						{
						setState(1178);
						match(VERSION);
						setState(1179);
						routineVersionID();
						}
						}
						break;
					case IS:
						break;
					default:
						break;
					}
					}
					}
					break;
				case TRUSTED:
					{
					{
					setState(1182);
					match(TRUSTED);
					setState(1183);
					match(CONTEXT);
					setState(1184);
					contextName();
					}
					}
					break;
				case TYPE:
					{
					{
					setState(1185);
					match(TYPE);
					setState(1186);
					typeName();
					}
					}
					break;
				case MASK:
					{
					{
					setState(1187);
					match(MASK);
					setState(1188);
					maskName();
					}
					}
					break;
				case PERMISSION:
					{
					{
					setState(1189);
					match(PERMISSION);
					setState(1190);
					permissionName();
					}
					}
					break;
				case VARIABLE:
					{
					{
					setState(1191);
					match(VARIABLE);
					setState(1192);
					variableName();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1195);
				match(IS);
				setState(1196);
				match(NONNUMERICLITERAL);
				}
				}
				break;
			case 2:
				{
				setState(1198);
				multipleColumnList();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommitStatementContext extends ParserRuleContext {
		public TerminalNode COMMIT() { return getToken(DB2zSQLParser.COMMIT, 0); }
		public TerminalNode WORK() { return getToken(DB2zSQLParser.WORK, 0); }
		public CommitStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commitStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCommitStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCommitStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCommitStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommitStatementContext commitStatement() throws RecognitionException {
		CommitStatementContext _localctx = new CommitStatementContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_commitStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1201);
			match(COMMIT);
			setState(1203);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(1202);
				match(WORK);
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConnectStatementContext extends ParserRuleContext {
		public TerminalNode CONNECT() { return getToken(DB2zSQLParser.CONNECT, 0); }
		public TerminalNode RESET() { return getToken(DB2zSQLParser.RESET, 0); }
		public AuthorizationContext authorization() {
			return getRuleContext(AuthorizationContext.class,0);
		}
		public TerminalNode TO() { return getToken(DB2zSQLParser.TO, 0); }
		public LocationNameContext locationName() {
			return getRuleContext(LocationNameContext.class,0);
		}
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public ConnectStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_connectStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterConnectStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitConnectStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitConnectStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConnectStatementContext connectStatement() throws RecognitionException {
		ConnectStatementContext _localctx = new ConnectStatementContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_connectStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1205);
			match(CONNECT);
			setState(1216);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TO:
				{
				{
				setState(1206);
				match(TO);
				setState(1209);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case INTEGERLITERAL:
				case NUMERICLITERAL:
				case ADD:
				case AFTER:
				case ALL:
				case ALLOCATE:
				case ALLOW:
				case ALTER:
				case ALTERAND:
				case ANY:
				case ARRAY:
				case ARRAY_EXISTS:
				case AS:
				case ASENSITIVE:
				case ASSOCIATE:
				case ASUTIME:
				case AT:
				case AUDIT:
				case AUX:
				case AUXILIARY:
				case BEFORE:
				case BEGIN:
				case BETWEEN:
				case BUFFERPOOL:
				case BY:
				case CALL:
				case CAPTURE:
				case CASCADED:
				case CASE:
				case CAST:
				case CCSID:
				case CHAR:
				case CHARACTER:
				case CHECK:
				case CLONE:
				case CLOSE:
				case CLUSTER:
				case COLLECTION:
				case COLLID:
				case COLUMN:
				case COMMENT:
				case COMMIT:
				case CONCAT:
				case CONDITION:
				case CONNECT:
				case CONNECTION:
				case CONSTRAINT:
				case CONTAINS:
				case CONTENT:
				case CONTINUE:
				case CREATE:
				case CUBE:
				case CURRENT:
				case CURRENT_LC_CTYPE:
				case CURRVAL:
				case CURSOR:
				case DATA:
				case DATABASE:
				case DAY:
				case DAYS:
				case DBINFO:
				case DECLARE:
				case DEFAULT:
				case DELETE:
				case DESCRIPTOR:
				case DETERMINISTIC:
				case DISABLE:
				case DISALLOW:
				case DISTINCT:
				case DO:
				case DOCUMENT:
				case DOUBLE:
				case DROP:
				case DSSIZE:
				case DYNAMIC:
				case EDITPROC:
				case ELSE:
				case ELSEIF:
				case ENCODING:
				case ENCRYPTION:
				case END:
				case END_EXEC:
				case ENDING:
				case ERASE:
				case ESCAPE:
				case EXCEPT:
				case EXCEPTION:
				case EXEC_SQL:
				case EXECUTE:
				case EXISTS:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case FENCED:
				case FETCH:
				case FIELDPROC:
				case FINAL:
				case FIRST:
				case FOR:
				case FREE:
				case FROM:
				case FULL:
				case FUNCTION:
				case GENERATED:
				case GET:
				case GLOBAL:
				case GO:
				case GOTO:
				case GRANT:
				case GROUP:
				case HANDLER:
				case HAVING:
				case HOLD:
				case HOUR:
				case HOURS:
				case IF:
				case IMMEDIATE:
				case IN:
				case INCLUSIVE:
				case INDEX:
				case INDEXBP:
				case INHERIT:
				case INNER:
				case INOUT:
				case INSENSITIVE:
				case INSERT:
				case INTERSECT:
				case INTO:
				case IS:
				case ISOBID:
				case ITERATE:
				case JAR:
				case JOIN:
				case KEEP:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LAST:
				case LC_CTYPE:
				case LEAVE:
				case LEFT:
				case LIKE:
				case LIMIT:
				case LOCAL:
				case LOCALE:
				case LOCATOR:
				case LOCATORS:
				case LOCK:
				case LOCKMAX:
				case LOCKSIZE:
				case LONG:
				case LOOP:
				case MAINTAINED:
				case MATERIALIZED:
				case MICROSECOND:
				case MICROSECONDS:
				case MODIFIES:
				case MONTH:
				case MONTHS:
				case NEXT:
				case NEXTVAL:
				case NO:
				case NONE:
				case NOT:
				case NULL:
				case NULLS:
				case NUMPARTS:
				case OBID:
				case OF:
				case OFFSET:
				case OLD:
				case ON:
				case OPEN:
				case OPTIMIZATION:
				case OPTIMIZE:
				case OR:
				case ORDER:
				case ORGANIZATION:
				case OUT:
				case OUTER:
				case PACKAGE:
				case PADDED:
				case PARAMETER:
				case PART:
				case PARTITION:
				case PARTITIONED:
				case PARTITIONING:
				case PATH:
				case PERIOD:
				case PIECESIZE:
				case PLAN:
				case PRECISION:
				case PREPARE:
				case PREVVAL:
				case PRIOR:
				case PRIQTY:
				case PRIVILEGES:
				case PROCEDURE:
				case PROGRAM:
				case PSID:
				case PUBLIC:
				case QUERY:
				case QUERYNO:
				case READS:
				case REFERENCES:
				case REFRESH:
				case RELEASE:
				case RENAME:
				case REPEAT:
				case RESIGNAL:
				case RESTRICT:
				case RESULT:
				case RESULT_SET_LOCATOR:
				case RETURN:
				case RETURNS:
				case REVOKE:
				case RIGHT:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUND_CEILING:
				case ROUND_DOWN:
				case ROUND_FLOOR:
				case ROUND_HALF_DOWN:
				case ROUND_HALF_EVEN:
				case ROUND_HALF_UP:
				case ROUND_UP:
				case ROW:
				case ROWSET:
				case RUN:
				case SAVEPOINT:
				case SCHEMA:
				case SCRATCHPAD:
				case SECOND:
				case SECONDS:
				case SECQTY:
				case SECURITY:
				case SELECT:
				case SENSITIVE:
				case SEQUENCE:
				case SET:
				case SIGNAL:
				case SIMPLE:
				case SOME:
				case SOURCE:
				case SPECIFIC:
				case STANDARD:
				case STATEMENT:
				case STATIC:
				case STAY:
				case STOGROUP:
				case STORES:
				case STYLE:
				case SUMMARY:
				case SYNONYM:
				case SYSDATE:
				case SYSTEM:
				case SYSTIMESTAMP:
				case TABLE:
				case TABLESPACE:
				case THEN:
				case TO:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNDO:
				case UNION:
				case UNIQUE:
				case UNTIL:
				case UPDATE:
				case USING:
				case VALIDPROC:
				case VALUE:
				case VALUES:
				case VARIABLE:
				case VARIANT:
				case VCAT:
				case VERSIONING:
				case VIEW:
				case VOLATILE:
				case VOLUMES:
				case WHEN:
				case WHENEVER:
				case WHERE:
				case WHILE:
				case WITH:
				case WLM:
				case XMLCAST:
				case XMLEXISTS:
				case XMLNAMESPACES:
				case YEAR:
				case YEARS:
				case ZONE:
				case AND:
				case ARRAY_AGG:
				case ASC:
				case AVG:
				case BIT:
				case CHANGE:
				case CODEUNITS16:
				case CODEUNITS32:
				case CORR:
				case CORRELATION:
				case COUNT:
				case COUNT_BIG:
				case COVAR:
				case COVARIANCE:
				case COVARIANCE_SAMP:
				case COVAR_POP:
				case COVAR_SAMP:
				case CS:
				case CUME_DIST:
				case DENSE_RANK:
				case DESC:
				case EBCDIC:
				case EXCLUSIVE:
				case FIRST_VALUE:
				case FOLLOWING:
				case GROUPING:
				case IGNORE:
				case INDICATOR:
				case INPUT:
				case ISNULL:
				case LAG:
				case LARGE:
				case LAST_VALUE:
				case LEAD:
				case LISTAGG:
				case LOCKED:
				case LOCKS:
				case MEDIAN:
				case MINUTES:
				case MIXED:
				case NOTNULL:
				case NTH_VALUE:
				case NTILE:
				case NUMERIC:
				case OBJECT:
				case OCTETS:
				case ONLY:
				case OVER:
				case PASSING:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case PERCENT_RANK:
				case PRECEDING:
				case PREVIOUS:
				case RANGE:
				case RANK:
				case RATIO_TO_REPORT:
				case READ:
				case REF:
				case REGR_AVGX:
				case REGR_AVGY:
				case REGR_COUNT:
				case REGR_ICPT:
				case REGR_INTERCEPT:
				case REGR_R2:
				case REGR_SLOPE:
				case REGR_SXX:
				case REGR_SXY:
				case REGR_SYY:
				case RESPECT:
				case ROW_NUMBER:
				case ROWS:
				case RR:
				case RS:
				case SBCS:
				case SELECTIVITY:
				case SETS:
				case SHARE:
				case SKIP_:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case TOKEN:
				case UNBOUNDED:
				case UNPACK:
				case UR:
				case USE:
				case VAR:
				case VARIANCE:
				case VARIANCE_SAMP:
				case VAR_POP:
				case VAR_SAMP:
				case VARYING:
				case WITHOUT:
				case XML:
				case XMLAGG:
				case COLUMNS:
				case SQLID:
				case ORDINALITY:
				case SYSTEM_TIME:
				case BUSINESS_TIME:
				case MULTIPLIER:
				case UNNEST:
				case CROSS:
				case CALLER:
				case CLIENT:
				case POSITIONING:
				case SCROLL:
				case ACTION:
				case ASSEMBLE:
				case C_:
				case CALLED:
				case COBOL:
				case DB2:
				case DEFINER:
				case DISPATCH:
				case ENVIRONMENT:
				case FAILURE:
				case FAILURES:
				case JAVA:
				case MAIN:
				case NAME:
				case OPTIONS:
				case PARALLEL:
				case PLI:
				case REGISTERS:
				case RESIDENT:
				case SECURED:
				case SPECIAL:
				case SQL:
				case STOP:
				case SUB:
				case YES:
				case APPLICATION:
				case CHANGED:
				case COMPATIBILITY:
				case COMPRESS:
				case COPY:
				case FREEPAGE:
				case GBPCACHE:
				case INCLUDE:
				case MAXVALUE:
				case MINVALUE:
				case PCTFREE:
				case REGENERATE:
				case MASK:
				case ENABLE:
				case PERMISSION:
				case ATOMIC:
				case SQLEXCEPTION:
				case MERGE:
				case MATCHED:
				case SQLSTATE:
				case MESSAGE_TEXT:
				case OVERRIDING:
				case PORTION:
				case DB2SQL:
				case DEBUG:
				case GENERAL:
				case MODE_:
				case REXX:
				case CACHE:
				case CYCLE:
				case INCREMENT:
				case RESTART:
				case DATACLAS:
				case MGMTCLAS:
				case REMOVE:
				case STORCLAS:
				case ACCESS:
				case ACTIVATE:
				case ALWAYS:
				case APPEND:
				case ARCHIVE:
				case BUSINESS:
				case CASCADE:
				case CHANGES:
				case CONTROL:
				case DEACTIVATE:
				case DEFERRED:
				case EACH:
				case ENFORCED:
				case EXTRA:
				case FOREIGN:
				case HIDDEN_:
				case HISTORY:
				case ID:
				case IDENTITY:
				case IMPLICITLY:
				case INITIALLY:
				case INLINE:
				case OPERATION:
				case ORGANIZE:
				case OVERLAPS:
				case PACKAGE_NAME:
				case PACKAGE_SCHEMA:
				case PACKAGE_VERSION:
				case PRIMARY:
				case RESET:
				case ROTATE:
				case START:
				case SYSIBM:
				case TRANSACTION:
				case XMLSCHEMA:
				case ELEMENT:
				case URL:
				case NAMESPACE:
				case LOCATION:
				case SYSXSR:
				case ALGORITHM:
				case FIXEDLENGTH:
				case HUFFMAN:
				case LOB:
				case LOG:
				case LOGGED:
				case MAXPARTITIONS:
				case MAXROWS:
				case MEMBER:
				case MOVE:
				case PAGE:
				case PAGENUM:
				case PENDING:
				case RELATIVE:
				case SEGSIZE:
				case TRACKMOD:
				case ADDRESS:
				case ATTRIBUTES:
				case AUTHENTICATION:
				case AUTHID:
				case CONTEXT:
				case JOBNAME:
				case OWNER:
				case PROFILE:
				case QUALIFIER:
				case SERVAUTH:
				case TRUSTED:
				case SECTION:
				case ACTIVE:
				case VERSION:
				case ALIAS:
				case WORK:
				case WORKFILE:
				case SYSDEFLT:
				case NULTERM:
				case STRUCTURE:
				case GENERIC:
				case ABS:
				case ABSVAL:
				case ACOS:
				case ADD_DAYS:
				case ADD_MONTHS:
				case ARRAY_DELETE:
				case ARRAY_FIRST:
				case ARRAY_LAST:
				case ARRAY_NEXT:
				case ARRAY_PRIOR:
				case ARRAY_TRIM:
				case ASCII:
				case ASCII_CHR:
				case ASCIISTR:
				case ASCII_STR:
				case ASIN:
				case ATAN:
				case ATAN2:
				case ATANH:
				case BIGINT:
				case BINARY:
				case BITAND:
				case BITANDNOT:
				case BITNOT:
				case BITOR:
				case BITXOR:
				case BLOB:
				case BTRIM:
				case CARDINALITY:
				case CCSID_ENCODING:
				case CEIL:
				case CEILING:
				case CHAR9:
				case CHARACTER_LENGTH:
				case CHAR_LENGTH:
				case CHR:
				case CLOB:
				case COALESCE:
				case COLLATION_KEY:
				case COMPARE_DECFLOAT:
				case COS:
				case COSH:
				case DATE:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFWEEK_ISO:
				case DAYOFYEAR:
				case DAYS_BETWEEN:
				case DBCLOB:
				case DEC:
				case DECFLOAT:
				case DECFLOAT_FORMAT:
				case DECFLOAT_SORTKEY:
				case DECIMAL:
				case DECODE:
				case DECRYPT_BINARY:
				case DECRYPT_BIT:
				case DECRYPT_CHAR:
				case DECRYPT_DATAKEY_BIGINT:
				case DECRYPT_DATAKEY_BIT:
				case DECRYPT_DATAKEY_CLOB:
				case DECRYPT_DATAKEY_DBCLOB:
				case DECRYPT_DATAKEY_DECIMAL:
				case DECRYPT_DATAKEY_INTEGER:
				case DECRYPT_DATAKEY_VARCHAR:
				case DECRYPT_DATAKEY_VARGRAPHIC:
				case DECRYPT_DB:
				case DEGREES:
				case DIFFERENCE:
				case DIGITS:
				case DOUBLE_PRECISION:
				case DSN_XMLVALIDATE:
				case EBCDIC_CHR:
				case EBCDIC_STR:
				case ENCRYPT_DATAKEY:
				case ENCRYPT_TDES:
				case EXP:
				case EXTRACT:
				case FLOAT:
				case FLOOR:
				case GENERATE_UNIQUE:
				case GENERATE_UNIQUE_BINARY:
				case GETHINT:
				case GETVARIABLE:
				case GRAPHIC:
				case GREATEST:
				case HASH:
				case HASH_CRC32:
				case HASH_MD5:
				case HASH_SHA1:
				case HASH_SHA256:
				case HEX:
				case IDENTITY_VAL_LOCAL:
				case IFNULL:
				case INSTR:
				case INT:
				case INTEGER:
				case JULIAN_DAY:
				case LAST_DAY:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LN:
				case LOCATE:
				case LOCATE_IN_STRING:
				case LOG10:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAX:
				case MAX_CARDINALITY:
				case MIDNIGHT_SECONDS:
				case MIN:
				case MINUTE:
				case MOD:
				case MONTHS_BETWEEN:
				case MQREAD:
				case MQREADCLOB:
				case MQRECEIVE:
				case MQRECEIVECLOB:
				case MQSEND:
				case MULTIPLY_ALT:
				case NEXT_DAY:
				case NEXT_MONTH:
				case NORMALIZE_DECFLOAT:
				case NORMALIZE_STRING:
				case NULLIF:
				case NVL:
				case OVERLAY:
				case PACK:
				case POSITION:
				case POSSTR:
				case POW:
				case POWER:
				case QUANTIZE:
				case QUARTER:
				case RADIANS:
				case RAISE_ERROR:
				case RAND:
				case RANDOM:
				case REAL:
				case REGEXP_COUNT:
				case REGEXP_INSTR:
				case REGEXP_LIKE:
				case REGEXP_REPLACE:
				case REGEXP_SUBSTR:
				case REPLACE:
				case RID:
				case ROUND:
				case ROUND_TIMESTAMP:
				case ROWID:
				case RPAD:
				case RTRIM:
				case SCORE:
				case SIGN:
				case SIN:
				case SINH:
				case SMALLINT:
				case SOAPHTTPC:
				case SOAPHTTPNC:
				case SOAPHTTPNV:
				case SOAPHTTPV:
				case SOUNDEX:
				case SPACE:
				case SQRT:
				case STRIP:
				case STRLEFT:
				case STRPOS:
				case STRRIGHT:
				case SUBSTR:
				case SUBSTRING:
				case TAN:
				case TANH:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIMESTAMP_FORMAT:
				case TIMESTAMP_ISO:
				case TIMESTAMP_TZ:
				case TO_CHAR:
				case TO_CLOB:
				case TO_DATE:
				case TO_NUMBER:
				case TOTALORDER:
				case TO_TIMESTAMP:
				case TRANSLATE:
				case TRIM:
				case TRIM_ARRAY:
				case TRUNC:
				case TRUNC_TIMESTAMP:
				case UCASE:
				case UNICODE:
				case UNICODE_STR:
				case UNISTR:
				case UPPER:
				case VARBINARY:
				case VARCHAR:
				case VARCHAR9:
				case VARCHAR_BIT_FORMAT:
				case VARCHAR_FORMAT:
				case VARGRAPHIC:
				case VERIFY_GROUP_FOR_USER:
				case VERIFY_ROLE_FOR_USER:
				case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
				case WEEK:
				case WEEK_ISO:
				case WRAP:
				case XMLATTRIBUTES:
				case XMLCOMMENT:
				case XMLCONCAT:
				case XMLDOCUMENT:
				case XMLELEMENT:
				case XMLFOREST:
				case XMLMODIFY:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLSERIALIZE:
				case XMLTEXT:
				case XMLXSROBJECTID:
				case XSLTRANSFORM:
				case CURRENT_ACCELERATOR:
				case CURRENT_APPLICATION_COMPATIBILITY:
				case CURRENT_APPLICATION_ENCODING_SCHEME:
				case CURRENT_CLIENT_ACCTNG:
				case CURRENT_CLIENT_APPLNAME:
				case CURRENT_CLIENT_CORR_TOKEN:
				case CURRENT_CLIENT_USERID:
				case CURRENT_CLIENT_WRKSTNNAME:
				case CURRENT_DATE:
				case CURRENT_DEBUG_MODE:
				case CURRENT_DECFLOAT_ROUNDING_MODE:
				case CURRENT_DEGREE:
				case CURRENT_EXPLAIN_MODE:
				case CURRENT_GET_ACCEL_ARCHIVE:
				case CURRENT_LOCALE_LC_CTYPE:
				case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
				case CURRENT_MEMBER:
				case CURRENT_OPTIMIZATION_HINT:
				case CURRENT_PACKAGE_PATH:
				case CURRENT_PACKAGESET:
				case CURRENT_PATH:
				case CURRENT_PRECISION:
				case CURRENT_QUERY_ACCELERATION:
				case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
				case CURRENT_REFRESH_AGE:
				case CURRENT_ROUTINE_VERSION:
				case CURRENT_RULES:
				case CURRENT_SCHEMA:
				case CURRENT_SERVER:
				case CURRENT_SQLID:
				case CURRENT_TEMPORAL_BUSINESS_TIME:
				case CURRENT_TEMPORAL_SYSTEM_TIME:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case CURRENT_TIME_ZONE:
				case ENCRYPTION_PASSWORD:
				case SESSION_TIME_ZONE:
				case SESSION_USER:
				case USER:
				case ADMIN_TASK_LIST:
				case ADMIN_TASK_OUTPUT:
				case ADMIN_TASK_STATUS:
				case BLOCKING_THREADS:
				case MQREADALL:
				case MQREADALLCLOB:
				case MQRECEIVEALL:
				case MQRECEIVEALLCLOB:
				case XMLTABLE:
				case SQLIDENTIFIER:
					{
					setState(1207);
					locationName();
					}
					break;
				case COLON:
					{
					setState(1208);
					hostVariable();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1212);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USER) {
					{
					setState(1211);
					authorization();
					}
				}

				}
				}
				break;
			case RESET:
				{
				setState(1214);
				match(RESET);
				}
				break;
			case USER:
				{
				setState(1215);
				authorization();
				}
				break;
			case EOF:
			case SEMICOLON:
			case END_EXEC:
				break;
			default:
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateAliasStatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DB2zSQLParser.CREATE, 0); }
		public TerminalNode ALIAS() { return getToken(DB2zSQLParser.ALIAS, 0); }
		public SequenceAliasContext sequenceAlias() {
			return getRuleContext(SequenceAliasContext.class,0);
		}
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public TerminalNode PUBLIC() { return getToken(DB2zSQLParser.PUBLIC, 0); }
		public CreateAliasStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createAliasStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateAliasStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateAliasStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateAliasStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateAliasStatementContext createAliasStatement() throws RecognitionException {
		CreateAliasStatementContext _localctx = new CreateAliasStatementContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_createAliasStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1218);
			match(CREATE);
			setState(1220);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PUBLIC) {
				{
				setState(1219);
				match(PUBLIC);
				}
			}

			setState(1222);
			match(ALIAS);
			setState(1225);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,65,_ctx) ) {
			case 1:
				{
				setState(1223);
				sequenceAlias();
				}
				break;
			case 2:
				{
				setState(1224);
				tableAlias();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateAuxiliaryTableStatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DB2zSQLParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public AuxTableNameContext auxTableName() {
			return getRuleContext(AuxTableNameContext.class,0);
		}
		public TerminalNode IN() { return getToken(DB2zSQLParser.IN, 0); }
		public TablespaceNameContext tablespaceName() {
			return getRuleContext(TablespaceNameContext.class,0);
		}
		public TerminalNode STORES() { return getToken(DB2zSQLParser.STORES, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(DB2zSQLParser.COLUMN, 0); }
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TerminalNode PART() { return getToken(DB2zSQLParser.PART, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode AUX() { return getToken(DB2zSQLParser.AUX, 0); }
		public TerminalNode AUXILIARY() { return getToken(DB2zSQLParser.AUXILIARY, 0); }
		public DatabaseNameContext databaseName() {
			return getRuleContext(DatabaseNameContext.class,0);
		}
		public TerminalNode APPEND() { return getToken(DB2zSQLParser.APPEND, 0); }
		public TerminalNode YES() { return getToken(DB2zSQLParser.YES, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public CreateAuxiliaryTableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createAuxiliaryTableStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateAuxiliaryTableStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateAuxiliaryTableStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateAuxiliaryTableStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateAuxiliaryTableStatementContext createAuxiliaryTableStatement() throws RecognitionException {
		CreateAuxiliaryTableStatementContext _localctx = new CreateAuxiliaryTableStatementContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_createAuxiliaryTableStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1227);
			match(CREATE);
			setState(1228);
			_la = _input.LA(1);
			if ( !(_la==AUX || _la==AUXILIARY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1229);
			match(TABLE);
			setState(1230);
			auxTableName();
			setState(1231);
			match(IN);
			setState(1233);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,66,_ctx) ) {
			case 1:
				{
				setState(1232);
				databaseName();
				}
				break;
			}
			setState(1235);
			tablespaceName();
			setState(1236);
			match(STORES);
			setState(1237);
			tableName();
			setState(1240);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==APPEND) {
				{
				setState(1238);
				match(APPEND);
				setState(1239);
				_la = _input.LA(1);
				if ( !(_la==NO || _la==YES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1242);
			match(COLUMN);
			setState(1243);
			columnName();
			setState(1244);
			match(PART);
			setState(1245);
			match(INTEGERLITERAL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDatabaseStatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DB2zSQLParser.CREATE, 0); }
		public TerminalNode DATABASE() { return getToken(DB2zSQLParser.DATABASE, 0); }
		public DatabaseNameContext databaseName() {
			return getRuleContext(DatabaseNameContext.class,0);
		}
		public List<DatabaseOptionListContext> databaseOptionList() {
			return getRuleContexts(DatabaseOptionListContext.class);
		}
		public DatabaseOptionListContext databaseOptionList(int i) {
			return getRuleContext(DatabaseOptionListContext.class,i);
		}
		public CreateDatabaseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDatabaseStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateDatabaseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateDatabaseStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateDatabaseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDatabaseStatementContext createDatabaseStatement() throws RecognitionException {
		CreateDatabaseStatementContext _localctx = new CreateDatabaseStatementContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_createDatabaseStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1247);
			match(CREATE);
			setState(1248);
			match(DATABASE);
			setState(1249);
			databaseName();
			setState(1253);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AS) | (1L << BUFFERPOOL) | (1L << CCSID))) != 0) || _la==INDEXBP || _la==STOGROUP) {
				{
				{
				setState(1250);
				databaseOptionList();
				}
				}
				setState(1255);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFunctionStatementContext extends ParserRuleContext {
		public CreateFunctionStatementExternalScalarContext createFunctionStatementExternalScalar() {
			return getRuleContext(CreateFunctionStatementExternalScalarContext.class,0);
		}
		public CreateFunctionStatementExternalTableContext createFunctionStatementExternalTable() {
			return getRuleContext(CreateFunctionStatementExternalTableContext.class,0);
		}
		public CreateFunctionStatementSourcedContext createFunctionStatementSourced() {
			return getRuleContext(CreateFunctionStatementSourcedContext.class,0);
		}
		public CreateFunctionStatementInlineSqlScalarContext createFunctionStatementInlineSqlScalar() {
			return getRuleContext(CreateFunctionStatementInlineSqlScalarContext.class,0);
		}
		public CreateFunctionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunctionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateFunctionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateFunctionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateFunctionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFunctionStatementContext createFunctionStatement() throws RecognitionException {
		CreateFunctionStatementContext _localctx = new CreateFunctionStatementContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_createFunctionStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1260);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,69,_ctx) ) {
			case 1:
				{
				setState(1256);
				createFunctionStatementExternalScalar();
				}
				break;
			case 2:
				{
				setState(1257);
				createFunctionStatementExternalTable();
				}
				break;
			case 3:
				{
				setState(1258);
				createFunctionStatementSourced();
				}
				break;
			case 4:
				{
				setState(1259);
				createFunctionStatementInlineSqlScalar();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFunctionStatementExternalScalarContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DB2zSQLParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(DB2zSQLParser.FUNCTION, 0); }
		public FunctionNameContext functionName() {
			return getRuleContext(FunctionNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<ParameterDeclaration1Context> parameterDeclaration1() {
			return getRuleContexts(ParameterDeclaration1Context.class);
		}
		public ParameterDeclaration1Context parameterDeclaration1(int i) {
			return getRuleContext(ParameterDeclaration1Context.class,i);
		}
		public List<CreateFunctionStatementExternalScalarOptionsContext> createFunctionStatementExternalScalarOptions() {
			return getRuleContexts(CreateFunctionStatementExternalScalarOptionsContext.class);
		}
		public CreateFunctionStatementExternalScalarOptionsContext createFunctionStatementExternalScalarOptions(int i) {
			return getRuleContext(CreateFunctionStatementExternalScalarOptionsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public CreateFunctionStatementExternalScalarContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunctionStatementExternalScalar; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateFunctionStatementExternalScalar(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateFunctionStatementExternalScalar(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateFunctionStatementExternalScalar(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFunctionStatementExternalScalarContext createFunctionStatementExternalScalar() throws RecognitionException {
		CreateFunctionStatementExternalScalarContext _localctx = new CreateFunctionStatementExternalScalarContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_createFunctionStatementExternalScalar);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1262);
			match(CREATE);
			setState(1263);
			match(FUNCTION);
			setState(1264);
			functionName();
			setState(1265);
			match(LPAREN);
			setState(1274);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 29)) & ~0x3f) == 0 && ((1L << (_la - 29)) & ((1L << (ADD - 29)) | (1L << (AFTER - 29)) | (1L << (ALL - 29)) | (1L << (ALLOCATE - 29)) | (1L << (ALLOW - 29)) | (1L << (ALTER - 29)) | (1L << (ALTERAND - 29)) | (1L << (ANY - 29)) | (1L << (ARRAY - 29)) | (1L << (ARRAY_EXISTS - 29)) | (1L << (AS - 29)) | (1L << (ASENSITIVE - 29)) | (1L << (ASSOCIATE - 29)) | (1L << (ASUTIME - 29)) | (1L << (AT - 29)) | (1L << (AUDIT - 29)) | (1L << (AUX - 29)) | (1L << (AUXILIARY - 29)) | (1L << (BEFORE - 29)) | (1L << (BEGIN - 29)) | (1L << (BETWEEN - 29)) | (1L << (BUFFERPOOL - 29)) | (1L << (BY - 29)) | (1L << (CALL - 29)) | (1L << (CAPTURE - 29)) | (1L << (CASCADED - 29)) | (1L << (CASE - 29)) | (1L << (CAST - 29)) | (1L << (CCSID - 29)) | (1L << (CHAR - 29)) | (1L << (CHARACTER - 29)) | (1L << (CHECK - 29)) | (1L << (CLONE - 29)) | (1L << (CLOSE - 29)) | (1L << (CLUSTER - 29)) | (1L << (COLLECTION - 29)) | (1L << (COLLID - 29)) | (1L << (COLUMN - 29)) | (1L << (COMMENT - 29)) | (1L << (COMMIT - 29)) | (1L << (CONCAT - 29)) | (1L << (CONDITION - 29)) | (1L << (CONNECT - 29)) | (1L << (CONNECTION - 29)) | (1L << (CONSTRAINT - 29)) | (1L << (CONTAINS - 29)) | (1L << (CONTENT - 29)) | (1L << (CONTINUE - 29)) | (1L << (CREATE - 29)) | (1L << (CUBE - 29)) | (1L << (CURRENT - 29)) | (1L << (CURRENT_LC_CTYPE - 29)) | (1L << (CURRVAL - 29)) | (1L << (CURSOR - 29)) | (1L << (DATA - 29)) | (1L << (DATABASE - 29)) | (1L << (DAY - 29)) | (1L << (DAYS - 29)) | (1L << (DBINFO - 29)) | (1L << (DECLARE - 29)) | (1L << (DEFAULT - 29)) | (1L << (DELETE - 29)) | (1L << (DESCRIPTOR - 29)) | (1L << (DETERMINISTIC - 29)))) != 0) || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (DISABLE - 93)) | (1L << (DISALLOW - 93)) | (1L << (DISTINCT - 93)) | (1L << (DO - 93)) | (1L << (DOCUMENT - 93)) | (1L << (DOUBLE - 93)) | (1L << (DROP - 93)) | (1L << (DSSIZE - 93)) | (1L << (DYNAMIC - 93)) | (1L << (EDITPROC - 93)) | (1L << (ELSE - 93)) | (1L << (ELSEIF - 93)) | (1L << (ENCODING - 93)) | (1L << (ENCRYPTION - 93)) | (1L << (END - 93)) | (1L << (END_EXEC - 93)) | (1L << (ENDING - 93)) | (1L << (ERASE - 93)) | (1L << (ESCAPE - 93)) | (1L << (EXCEPT - 93)) | (1L << (EXCEPTION - 93)) | (1L << (EXEC_SQL - 93)) | (1L << (EXECUTE - 93)) | (1L << (EXISTS - 93)) | (1L << (EXIT - 93)) | (1L << (EXPLAIN - 93)) | (1L << (EXTERNAL - 93)) | (1L << (FENCED - 93)) | (1L << (FETCH - 93)) | (1L << (FIELDPROC - 93)) | (1L << (FINAL - 93)) | (1L << (FIRST - 93)) | (1L << (FOR - 93)) | (1L << (FREE - 93)) | (1L << (FROM - 93)) | (1L << (FULL - 93)) | (1L << (FUNCTION - 93)) | (1L << (GENERATED - 93)) | (1L << (GET - 93)) | (1L << (GLOBAL - 93)) | (1L << (GO - 93)) | (1L << (GOTO - 93)) | (1L << (GRANT - 93)) | (1L << (GROUP - 93)) | (1L << (HANDLER - 93)) | (1L << (HAVING - 93)) | (1L << (HOLD - 93)) | (1L << (HOUR - 93)) | (1L << (HOURS - 93)) | (1L << (IF - 93)) | (1L << (IMMEDIATE - 93)) | (1L << (IN - 93)) | (1L << (INCLUSIVE - 93)) | (1L << (INDEX - 93)) | (1L << (INDEXBP - 93)) | (1L << (INHERIT - 93)) | (1L << (INNER - 93)) | (1L << (INOUT - 93)) | (1L << (INSENSITIVE - 93)) | (1L << (INSERT - 93)) | (1L << (INTERSECT - 93)) | (1L << (INTO - 93)) | (1L << (IS - 93)) | (1L << (ISOBID - 93)))) != 0) || ((((_la - 157)) & ~0x3f) == 0 && ((1L << (_la - 157)) & ((1L << (ITERATE - 157)) | (1L << (JAR - 157)) | (1L << (JOIN - 157)) | (1L << (KEEP - 157)) | (1L << (KEY - 157)) | (1L << (LABEL - 157)) | (1L << (LANGUAGE - 157)) | (1L << (LAST - 157)) | (1L << (LC_CTYPE - 157)) | (1L << (LEAVE - 157)) | (1L << (LEFT - 157)) | (1L << (LIKE - 157)) | (1L << (LIMIT - 157)) | (1L << (LOCAL - 157)) | (1L << (LOCALE - 157)) | (1L << (LOCATOR - 157)) | (1L << (LOCATORS - 157)) | (1L << (LOCK - 157)) | (1L << (LOCKMAX - 157)) | (1L << (LOCKSIZE - 157)) | (1L << (LONG - 157)) | (1L << (LOOP - 157)) | (1L << (MAINTAINED - 157)) | (1L << (MATERIALIZED - 157)) | (1L << (MICROSECOND - 157)) | (1L << (MICROSECONDS - 157)) | (1L << (MODIFIES - 157)) | (1L << (MONTH - 157)) | (1L << (MONTHS - 157)) | (1L << (NEXT - 157)) | (1L << (NEXTVAL - 157)) | (1L << (NO - 157)) | (1L << (NONE - 157)) | (1L << (NOT - 157)) | (1L << (NULL - 157)) | (1L << (NULLS - 157)) | (1L << (NUMPARTS - 157)) | (1L << (OBID - 157)) | (1L << (OF - 157)) | (1L << (OFFSET - 157)) | (1L << (OLD - 157)) | (1L << (ON - 157)) | (1L << (OPEN - 157)) | (1L << (OPTIMIZATION - 157)) | (1L << (OPTIMIZE - 157)) | (1L << (OR - 157)) | (1L << (ORDER - 157)) | (1L << (ORGANIZATION - 157)) | (1L << (OUT - 157)) | (1L << (OUTER - 157)) | (1L << (PACKAGE - 157)) | (1L << (PADDED - 157)) | (1L << (PARAMETER - 157)) | (1L << (PART - 157)) | (1L << (PARTITION - 157)) | (1L << (PARTITIONED - 157)) | (1L << (PARTITIONING - 157)) | (1L << (PATH - 157)) | (1L << (PERIOD - 157)) | (1L << (PIECESIZE - 157)) | (1L << (PLAN - 157)) | (1L << (PRECISION - 157)) | (1L << (PREPARE - 157)))) != 0) || ((((_la - 221)) & ~0x3f) == 0 && ((1L << (_la - 221)) & ((1L << (PREVVAL - 221)) | (1L << (PRIOR - 221)) | (1L << (PRIQTY - 221)) | (1L << (PRIVILEGES - 221)) | (1L << (PROCEDURE - 221)) | (1L << (PROGRAM - 221)) | (1L << (PSID - 221)) | (1L << (PUBLIC - 221)) | (1L << (QUERY - 221)) | (1L << (QUERYNO - 221)) | (1L << (READS - 221)) | (1L << (REFERENCES - 221)) | (1L << (REFRESH - 221)) | (1L << (RELEASE - 221)) | (1L << (RENAME - 221)) | (1L << (REPEAT - 221)) | (1L << (RESIGNAL - 221)) | (1L << (RESTRICT - 221)) | (1L << (RESULT - 221)) | (1L << (RESULT_SET_LOCATOR - 221)) | (1L << (RETURN - 221)) | (1L << (RETURNS - 221)) | (1L << (REVOKE - 221)) | (1L << (RIGHT - 221)) | (1L << (ROLE - 221)) | (1L << (ROLLBACK - 221)) | (1L << (ROLLUP - 221)) | (1L << (ROUND_CEILING - 221)) | (1L << (ROUND_DOWN - 221)) | (1L << (ROUND_FLOOR - 221)) | (1L << (ROUND_HALF_DOWN - 221)) | (1L << (ROUND_HALF_EVEN - 221)) | (1L << (ROUND_HALF_UP - 221)) | (1L << (ROUND_UP - 221)) | (1L << (ROW - 221)) | (1L << (ROWSET - 221)) | (1L << (RUN - 221)) | (1L << (SAVEPOINT - 221)) | (1L << (SCHEMA - 221)) | (1L << (SCRATCHPAD - 221)) | (1L << (SECOND - 221)) | (1L << (SECONDS - 221)) | (1L << (SECQTY - 221)) | (1L << (SECURITY - 221)) | (1L << (SELECT - 221)) | (1L << (SENSITIVE - 221)) | (1L << (SEQUENCE - 221)) | (1L << (SET - 221)) | (1L << (SIGNAL - 221)) | (1L << (SIMPLE - 221)) | (1L << (SOME - 221)) | (1L << (SOURCE - 221)) | (1L << (SPECIFIC - 221)) | (1L << (STANDARD - 221)) | (1L << (STATEMENT - 221)) | (1L << (STATIC - 221)) | (1L << (STAY - 221)) | (1L << (STOGROUP - 221)) | (1L << (STORES - 221)) | (1L << (STYLE - 221)) | (1L << (SUMMARY - 221)) | (1L << (SYNONYM - 221)) | (1L << (SYSDATE - 221)) | (1L << (SYSTEM - 221)))) != 0) || ((((_la - 285)) & ~0x3f) == 0 && ((1L << (_la - 285)) & ((1L << (SYSTIMESTAMP - 285)) | (1L << (TABLE - 285)) | (1L << (TABLESPACE - 285)) | (1L << (THEN - 285)) | (1L << (TO - 285)) | (1L << (TRIGGER - 285)) | (1L << (TRUNCATE - 285)) | (1L << (TYPE - 285)) | (1L << (UNDO - 285)) | (1L << (UNION - 285)) | (1L << (UNIQUE - 285)) | (1L << (UNTIL - 285)) | (1L << (UPDATE - 285)) | (1L << (USING - 285)) | (1L << (VALIDPROC - 285)) | (1L << (VALUE - 285)) | (1L << (VALUES - 285)) | (1L << (VARIABLE - 285)) | (1L << (VARIANT - 285)) | (1L << (VCAT - 285)) | (1L << (VERSIONING - 285)) | (1L << (VIEW - 285)) | (1L << (VOLATILE - 285)) | (1L << (VOLUMES - 285)) | (1L << (WHEN - 285)) | (1L << (WHENEVER - 285)) | (1L << (WHERE - 285)) | (1L << (WHILE - 285)) | (1L << (WITH - 285)) | (1L << (WLM - 285)) | (1L << (XMLCAST - 285)) | (1L << (XMLEXISTS - 285)) | (1L << (XMLNAMESPACES - 285)) | (1L << (YEAR - 285)) | (1L << (YEARS - 285)) | (1L << (ZONE - 285)) | (1L << (AND - 285)) | (1L << (ARRAY_AGG - 285)) | (1L << (ASC - 285)) | (1L << (AVG - 285)) | (1L << (BIT - 285)) | (1L << (CHANGE - 285)) | (1L << (CODEUNITS16 - 285)) | (1L << (CODEUNITS32 - 285)) | (1L << (CORR - 285)) | (1L << (CORRELATION - 285)) | (1L << (COUNT - 285)) | (1L << (COUNT_BIG - 285)) | (1L << (COVAR - 285)) | (1L << (COVARIANCE - 285)) | (1L << (COVARIANCE_SAMP - 285)) | (1L << (COVAR_POP - 285)) | (1L << (COVAR_SAMP - 285)) | (1L << (CS - 285)) | (1L << (CUME_DIST - 285)) | (1L << (DENSE_RANK - 285)) | (1L << (DESC - 285)) | (1L << (EBCDIC - 285)) | (1L << (EXCLUSIVE - 285)) | (1L << (FIRST_VALUE - 285)) | (1L << (FOLLOWING - 285)) | (1L << (GROUPING - 285)) | (1L << (IGNORE - 285)) | (1L << (INDICATOR - 285)))) != 0) || ((((_la - 349)) & ~0x3f) == 0 && ((1L << (_la - 349)) & ((1L << (INPUT - 349)) | (1L << (ISNULL - 349)) | (1L << (LAG - 349)) | (1L << (LARGE - 349)) | (1L << (LAST_VALUE - 349)) | (1L << (LEAD - 349)) | (1L << (LISTAGG - 349)) | (1L << (LOCKED - 349)) | (1L << (LOCKS - 349)) | (1L << (MEDIAN - 349)) | (1L << (MINUTES - 349)) | (1L << (MIXED - 349)) | (1L << (NOTNULL - 349)) | (1L << (NTH_VALUE - 349)) | (1L << (NTILE - 349)) | (1L << (NUMERIC - 349)) | (1L << (OBJECT - 349)) | (1L << (OCTETS - 349)) | (1L << (ONLY - 349)) | (1L << (OVER - 349)) | (1L << (PASSING - 349)) | (1L << (PERCENTILE_CONT - 349)) | (1L << (PERCENTILE_DISC - 349)) | (1L << (PERCENT_RANK - 349)) | (1L << (PRECEDING - 349)) | (1L << (PREVIOUS - 349)) | (1L << (RANGE - 349)) | (1L << (RANK - 349)) | (1L << (RATIO_TO_REPORT - 349)) | (1L << (READ - 349)) | (1L << (REF - 349)) | (1L << (REGR_AVGX - 349)) | (1L << (REGR_AVGY - 349)) | (1L << (REGR_COUNT - 349)) | (1L << (REGR_ICPT - 349)) | (1L << (REGR_INTERCEPT - 349)) | (1L << (REGR_R2 - 349)) | (1L << (REGR_SLOPE - 349)) | (1L << (REGR_SXX - 349)) | (1L << (REGR_SXY - 349)) | (1L << (REGR_SYY - 349)) | (1L << (RESPECT - 349)) | (1L << (ROW_NUMBER - 349)) | (1L << (ROWS - 349)) | (1L << (RR - 349)) | (1L << (RS - 349)) | (1L << (SBCS - 349)) | (1L << (SELECTIVITY - 349)) | (1L << (SETS - 349)) | (1L << (SHARE - 349)) | (1L << (SKIP_ - 349)) | (1L << (STDDEV - 349)) | (1L << (STDDEV_POP - 349)) | (1L << (STDDEV_SAMP - 349)) | (1L << (SUM - 349)) | (1L << (TOKEN - 349)) | (1L << (UNBOUNDED - 349)) | (1L << (UNPACK - 349)) | (1L << (UR - 349)) | (1L << (USE - 349)) | (1L << (VAR - 349)) | (1L << (VARIANCE - 349)) | (1L << (VARIANCE_SAMP - 349)) | (1L << (VAR_POP - 349)))) != 0) || ((((_la - 413)) & ~0x3f) == 0 && ((1L << (_la - 413)) & ((1L << (VAR_SAMP - 413)) | (1L << (VARYING - 413)) | (1L << (WITHOUT - 413)) | (1L << (XML - 413)) | (1L << (XMLAGG - 413)) | (1L << (COLUMNS - 413)) | (1L << (SQLID - 413)) | (1L << (ORDINALITY - 413)) | (1L << (SYSTEM_TIME - 413)) | (1L << (BUSINESS_TIME - 413)) | (1L << (MULTIPLIER - 413)) | (1L << (UNNEST - 413)) | (1L << (CROSS - 413)) | (1L << (CALLER - 413)) | (1L << (CLIENT - 413)) | (1L << (POSITIONING - 413)) | (1L << (SCROLL - 413)) | (1L << (ACTION - 413)) | (1L << (ASSEMBLE - 413)) | (1L << (C_ - 413)) | (1L << (CALLED - 413)) | (1L << (COBOL - 413)) | (1L << (DB2 - 413)) | (1L << (DEFINER - 413)) | (1L << (DISPATCH - 413)) | (1L << (ENVIRONMENT - 413)) | (1L << (FAILURE - 413)) | (1L << (FAILURES - 413)) | (1L << (JAVA - 413)) | (1L << (MAIN - 413)) | (1L << (NAME - 413)) | (1L << (OPTIONS - 413)) | (1L << (PARALLEL - 413)) | (1L << (PLI - 413)) | (1L << (REGISTERS - 413)) | (1L << (RESIDENT - 413)) | (1L << (SECURED - 413)) | (1L << (SPECIAL - 413)) | (1L << (SQL - 413)) | (1L << (STOP - 413)) | (1L << (SUB - 413)) | (1L << (YES - 413)) | (1L << (APPLICATION - 413)) | (1L << (CHANGED - 413)) | (1L << (COMPATIBILITY - 413)) | (1L << (COMPRESS - 413)) | (1L << (COPY - 413)) | (1L << (FREEPAGE - 413)) | (1L << (GBPCACHE - 413)) | (1L << (INCLUDE - 413)) | (1L << (MAXVALUE - 413)) | (1L << (MINVALUE - 413)) | (1L << (PCTFREE - 413)) | (1L << (REGENERATE - 413)) | (1L << (MASK - 413)) | (1L << (ENABLE - 413)) | (1L << (PERMISSION - 413)) | (1L << (ATOMIC - 413)) | (1L << (SQLEXCEPTION - 413)) | (1L << (MERGE - 413)) | (1L << (MATCHED - 413)) | (1L << (SQLSTATE - 413)) | (1L << (MESSAGE_TEXT - 413)) | (1L << (OVERRIDING - 413)))) != 0) || ((((_la - 477)) & ~0x3f) == 0 && ((1L << (_la - 477)) & ((1L << (PORTION - 477)) | (1L << (DB2SQL - 477)) | (1L << (DEBUG - 477)) | (1L << (GENERAL - 477)) | (1L << (MODE_ - 477)) | (1L << (REXX - 477)) | (1L << (CACHE - 477)) | (1L << (CYCLE - 477)) | (1L << (INCREMENT - 477)) | (1L << (RESTART - 477)) | (1L << (DATACLAS - 477)) | (1L << (MGMTCLAS - 477)) | (1L << (REMOVE - 477)) | (1L << (STORCLAS - 477)) | (1L << (ACCESS - 477)) | (1L << (ACTIVATE - 477)) | (1L << (ALWAYS - 477)) | (1L << (APPEND - 477)) | (1L << (ARCHIVE - 477)) | (1L << (BUSINESS - 477)) | (1L << (CASCADE - 477)) | (1L << (CHANGES - 477)) | (1L << (CONTROL - 477)) | (1L << (DEACTIVATE - 477)) | (1L << (DEFERRED - 477)) | (1L << (EACH - 477)) | (1L << (ENFORCED - 477)) | (1L << (EXTRA - 477)) | (1L << (FOREIGN - 477)) | (1L << (HIDDEN_ - 477)) | (1L << (HISTORY - 477)) | (1L << (ID - 477)) | (1L << (IDENTITY - 477)) | (1L << (IMPLICITLY - 477)) | (1L << (INITIALLY - 477)) | (1L << (INLINE - 477)) | (1L << (OPERATION - 477)) | (1L << (ORGANIZE - 477)) | (1L << (OVERLAPS - 477)) | (1L << (PACKAGE_NAME - 477)) | (1L << (PACKAGE_SCHEMA - 477)) | (1L << (PACKAGE_VERSION - 477)) | (1L << (PRIMARY - 477)) | (1L << (RESET - 477)) | (1L << (ROTATE - 477)) | (1L << (START - 477)) | (1L << (SYSIBM - 477)) | (1L << (TRANSACTION - 477)) | (1L << (XMLSCHEMA - 477)) | (1L << (ELEMENT - 477)) | (1L << (URL - 477)) | (1L << (NAMESPACE - 477)) | (1L << (LOCATION - 477)) | (1L << (SYSXSR - 477)) | (1L << (ALGORITHM - 477)) | (1L << (FIXEDLENGTH - 477)) | (1L << (HUFFMAN - 477)) | (1L << (LOB - 477)) | (1L << (LOG - 477)) | (1L << (LOGGED - 477)) | (1L << (MAXPARTITIONS - 477)) | (1L << (MAXROWS - 477)) | (1L << (MEMBER - 477)) | (1L << (MOVE - 477)))) != 0) || ((((_la - 541)) & ~0x3f) == 0 && ((1L << (_la - 541)) & ((1L << (PAGE - 541)) | (1L << (PAGENUM - 541)) | (1L << (PENDING - 541)) | (1L << (RELATIVE - 541)) | (1L << (SEGSIZE - 541)) | (1L << (TRACKMOD - 541)) | (1L << (ADDRESS - 541)) | (1L << (ATTRIBUTES - 541)) | (1L << (AUTHENTICATION - 541)) | (1L << (AUTHID - 541)) | (1L << (CONTEXT - 541)) | (1L << (JOBNAME - 541)) | (1L << (OWNER - 541)) | (1L << (PROFILE - 541)) | (1L << (QUALIFIER - 541)) | (1L << (SERVAUTH - 541)) | (1L << (TRUSTED - 541)) | (1L << (SECTION - 541)) | (1L << (ACTIVE - 541)) | (1L << (VERSION - 541)) | (1L << (ALIAS - 541)) | (1L << (WORK - 541)) | (1L << (WORKFILE - 541)) | (1L << (SYSDEFLT - 541)) | (1L << (NULTERM - 541)) | (1L << (STRUCTURE - 541)) | (1L << (GENERIC - 541)) | (1L << (ABS - 541)) | (1L << (ABSVAL - 541)) | (1L << (ACOS - 541)) | (1L << (ADD_DAYS - 541)) | (1L << (ADD_MONTHS - 541)) | (1L << (ARRAY_DELETE - 541)) | (1L << (ARRAY_FIRST - 541)) | (1L << (ARRAY_LAST - 541)) | (1L << (ARRAY_NEXT - 541)) | (1L << (ARRAY_PRIOR - 541)) | (1L << (ARRAY_TRIM - 541)) | (1L << (ASCII - 541)) | (1L << (ASCII_CHR - 541)) | (1L << (ASCIISTR - 541)) | (1L << (ASCII_STR - 541)) | (1L << (ASIN - 541)) | (1L << (ATAN - 541)) | (1L << (ATAN2 - 541)) | (1L << (ATANH - 541)) | (1L << (BIGINT - 541)) | (1L << (BINARY - 541)) | (1L << (BITAND - 541)) | (1L << (BITANDNOT - 541)) | (1L << (BITNOT - 541)) | (1L << (BITOR - 541)) | (1L << (BITXOR - 541)) | (1L << (BLOB - 541)) | (1L << (BTRIM - 541)) | (1L << (CARDINALITY - 541)) | (1L << (CCSID_ENCODING - 541)) | (1L << (CEIL - 541)) | (1L << (CEILING - 541)) | (1L << (CHAR9 - 541)) | (1L << (CHARACTER_LENGTH - 541)) | (1L << (CHAR_LENGTH - 541)) | (1L << (CHR - 541)) | (1L << (CLOB - 541)))) != 0) || ((((_la - 605)) & ~0x3f) == 0 && ((1L << (_la - 605)) & ((1L << (COALESCE - 605)) | (1L << (COLLATION_KEY - 605)) | (1L << (COMPARE_DECFLOAT - 605)) | (1L << (COS - 605)) | (1L << (COSH - 605)) | (1L << (DATE - 605)) | (1L << (DAYOFMONTH - 605)) | (1L << (DAYOFWEEK - 605)) | (1L << (DAYOFWEEK_ISO - 605)) | (1L << (DAYOFYEAR - 605)) | (1L << (DAYS_BETWEEN - 605)) | (1L << (DBCLOB - 605)) | (1L << (DEC - 605)) | (1L << (DECFLOAT - 605)) | (1L << (DECFLOAT_FORMAT - 605)) | (1L << (DECFLOAT_SORTKEY - 605)) | (1L << (DECIMAL - 605)) | (1L << (DECODE - 605)) | (1L << (DECRYPT_BINARY - 605)) | (1L << (DECRYPT_BIT - 605)) | (1L << (DECRYPT_CHAR - 605)) | (1L << (DECRYPT_DATAKEY_BIGINT - 605)) | (1L << (DECRYPT_DATAKEY_BIT - 605)) | (1L << (DECRYPT_DATAKEY_CLOB - 605)) | (1L << (DECRYPT_DATAKEY_DBCLOB - 605)) | (1L << (DECRYPT_DATAKEY_DECIMAL - 605)) | (1L << (DECRYPT_DATAKEY_INTEGER - 605)) | (1L << (DECRYPT_DATAKEY_VARCHAR - 605)) | (1L << (DECRYPT_DATAKEY_VARGRAPHIC - 605)) | (1L << (DECRYPT_DB - 605)) | (1L << (DEGREES - 605)) | (1L << (DIFFERENCE - 605)) | (1L << (DIGITS - 605)) | (1L << (DOUBLE_PRECISION - 605)) | (1L << (DSN_XMLVALIDATE - 605)) | (1L << (EBCDIC_CHR - 605)) | (1L << (EBCDIC_STR - 605)) | (1L << (ENCRYPT_DATAKEY - 605)) | (1L << (ENCRYPT_TDES - 605)) | (1L << (EXP - 605)) | (1L << (EXTRACT - 605)) | (1L << (FLOAT - 605)) | (1L << (FLOOR - 605)) | (1L << (GENERATE_UNIQUE - 605)) | (1L << (GENERATE_UNIQUE_BINARY - 605)) | (1L << (GETHINT - 605)) | (1L << (GETVARIABLE - 605)) | (1L << (GRAPHIC - 605)) | (1L << (GREATEST - 605)) | (1L << (HASH - 605)) | (1L << (HASH_CRC32 - 605)) | (1L << (HASH_MD5 - 605)) | (1L << (HASH_SHA1 - 605)) | (1L << (HASH_SHA256 - 605)) | (1L << (HEX - 605)) | (1L << (IDENTITY_VAL_LOCAL - 605)) | (1L << (IFNULL - 605)) | (1L << (INSTR - 605)) | (1L << (INT - 605)) | (1L << (INTEGER - 605)) | (1L << (JULIAN_DAY - 605)) | (1L << (LAST_DAY - 605)) | (1L << (LCASE - 605)) | (1L << (LEAST - 605)))) != 0) || ((((_la - 669)) & ~0x3f) == 0 && ((1L << (_la - 669)) & ((1L << (LENGTH - 669)) | (1L << (LN - 669)) | (1L << (LOCATE - 669)) | (1L << (LOCATE_IN_STRING - 669)) | (1L << (LOG10 - 669)) | (1L << (LOWER - 669)) | (1L << (LPAD - 669)) | (1L << (LTRIM - 669)) | (1L << (MAX - 669)) | (1L << (MAX_CARDINALITY - 669)) | (1L << (MIDNIGHT_SECONDS - 669)) | (1L << (MIN - 669)) | (1L << (MINUTE - 669)) | (1L << (MOD - 669)) | (1L << (MONTHS_BETWEEN - 669)) | (1L << (MQREAD - 669)) | (1L << (MQREADCLOB - 669)) | (1L << (MQRECEIVE - 669)) | (1L << (MQRECEIVECLOB - 669)) | (1L << (MQSEND - 669)) | (1L << (MULTIPLY_ALT - 669)) | (1L << (NEXT_DAY - 669)) | (1L << (NEXT_MONTH - 669)) | (1L << (NORMALIZE_DECFLOAT - 669)) | (1L << (NORMALIZE_STRING - 669)) | (1L << (NULLIF - 669)) | (1L << (NVL - 669)) | (1L << (OVERLAY - 669)) | (1L << (PACK - 669)) | (1L << (POSITION - 669)) | (1L << (POSSTR - 669)) | (1L << (POW - 669)) | (1L << (POWER - 669)) | (1L << (QUANTIZE - 669)) | (1L << (QUARTER - 669)) | (1L << (RADIANS - 669)) | (1L << (RAISE_ERROR - 669)) | (1L << (RAND - 669)) | (1L << (RANDOM - 669)) | (1L << (REAL - 669)) | (1L << (REGEXP_COUNT - 669)) | (1L << (REGEXP_INSTR - 669)) | (1L << (REGEXP_LIKE - 669)) | (1L << (REGEXP_REPLACE - 669)) | (1L << (REGEXP_SUBSTR - 669)) | (1L << (REPLACE - 669)) | (1L << (RID - 669)) | (1L << (ROUND - 669)) | (1L << (ROUND_TIMESTAMP - 669)) | (1L << (ROWID - 669)) | (1L << (RPAD - 669)) | (1L << (RTRIM - 669)) | (1L << (SCORE - 669)) | (1L << (SIGN - 669)) | (1L << (SIN - 669)) | (1L << (SINH - 669)) | (1L << (SMALLINT - 669)) | (1L << (SOAPHTTPC - 669)) | (1L << (SOAPHTTPNC - 669)) | (1L << (SOAPHTTPNV - 669)) | (1L << (SOAPHTTPV - 669)) | (1L << (SOUNDEX - 669)) | (1L << (SPACE - 669)) | (1L << (SQRT - 669)))) != 0) || ((((_la - 733)) & ~0x3f) == 0 && ((1L << (_la - 733)) & ((1L << (STRIP - 733)) | (1L << (STRLEFT - 733)) | (1L << (STRPOS - 733)) | (1L << (STRRIGHT - 733)) | (1L << (SUBSTR - 733)) | (1L << (SUBSTRING - 733)) | (1L << (TAN - 733)) | (1L << (TANH - 733)) | (1L << (TIME - 733)) | (1L << (TIMESTAMP - 733)) | (1L << (TIMESTAMPADD - 733)) | (1L << (TIMESTAMPDIFF - 733)) | (1L << (TIMESTAMP_FORMAT - 733)) | (1L << (TIMESTAMP_ISO - 733)) | (1L << (TIMESTAMP_TZ - 733)) | (1L << (TO_CHAR - 733)) | (1L << (TO_CLOB - 733)) | (1L << (TO_DATE - 733)) | (1L << (TO_NUMBER - 733)) | (1L << (TOTALORDER - 733)) | (1L << (TO_TIMESTAMP - 733)) | (1L << (TRANSLATE - 733)) | (1L << (TRIM - 733)) | (1L << (TRIM_ARRAY - 733)) | (1L << (TRUNC - 733)) | (1L << (TRUNC_TIMESTAMP - 733)) | (1L << (UCASE - 733)) | (1L << (UNICODE - 733)) | (1L << (UNICODE_STR - 733)) | (1L << (UNISTR - 733)) | (1L << (UPPER - 733)) | (1L << (VARBINARY - 733)) | (1L << (VARCHAR - 733)) | (1L << (VARCHAR9 - 733)) | (1L << (VARCHAR_BIT_FORMAT - 733)) | (1L << (VARCHAR_FORMAT - 733)) | (1L << (VARGRAPHIC - 733)) | (1L << (VERIFY_GROUP_FOR_USER - 733)) | (1L << (VERIFY_ROLE_FOR_USER - 733)) | (1L << (VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER - 733)) | (1L << (WEEK - 733)) | (1L << (WEEK_ISO - 733)) | (1L << (WRAP - 733)) | (1L << (XMLATTRIBUTES - 733)) | (1L << (XMLCOMMENT - 733)) | (1L << (XMLCONCAT - 733)) | (1L << (XMLDOCUMENT - 733)) | (1L << (XMLELEMENT - 733)) | (1L << (XMLFOREST - 733)) | (1L << (XMLMODIFY - 733)) | (1L << (XMLPARSE - 733)) | (1L << (XMLPI - 733)) | (1L << (XMLQUERY - 733)) | (1L << (XMLSERIALIZE - 733)) | (1L << (XMLTEXT - 733)) | (1L << (XMLXSROBJECTID - 733)) | (1L << (XSLTRANSFORM - 733)) | (1L << (CURRENT_ACCELERATOR - 733)) | (1L << (CURRENT_APPLICATION_COMPATIBILITY - 733)) | (1L << (CURRENT_APPLICATION_ENCODING_SCHEME - 733)) | (1L << (CURRENT_CLIENT_ACCTNG - 733)) | (1L << (CURRENT_CLIENT_APPLNAME - 733)) | (1L << (CURRENT_CLIENT_CORR_TOKEN - 733)) | (1L << (CURRENT_CLIENT_USERID - 733)))) != 0) || ((((_la - 797)) & ~0x3f) == 0 && ((1L << (_la - 797)) & ((1L << (CURRENT_CLIENT_WRKSTNNAME - 797)) | (1L << (CURRENT_DATE - 797)) | (1L << (CURRENT_DEBUG_MODE - 797)) | (1L << (CURRENT_DECFLOAT_ROUNDING_MODE - 797)) | (1L << (CURRENT_DEGREE - 797)) | (1L << (CURRENT_EXPLAIN_MODE - 797)) | (1L << (CURRENT_GET_ACCEL_ARCHIVE - 797)) | (1L << (CURRENT_LOCALE_LC_CTYPE - 797)) | (1L << (CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION - 797)) | (1L << (CURRENT_MEMBER - 797)) | (1L << (CURRENT_OPTIMIZATION_HINT - 797)) | (1L << (CURRENT_PACKAGE_PATH - 797)) | (1L << (CURRENT_PACKAGESET - 797)) | (1L << (CURRENT_PATH - 797)) | (1L << (CURRENT_PRECISION - 797)) | (1L << (CURRENT_QUERY_ACCELERATION - 797)) | (1L << (CURRENT_QUERY_ACCELERATION_WAITFORDATA - 797)) | (1L << (CURRENT_REFRESH_AGE - 797)) | (1L << (CURRENT_ROUTINE_VERSION - 797)) | (1L << (CURRENT_RULES - 797)) | (1L << (CURRENT_SCHEMA - 797)) | (1L << (CURRENT_SERVER - 797)) | (1L << (CURRENT_SQLID - 797)) | (1L << (CURRENT_TEMPORAL_BUSINESS_TIME - 797)) | (1L << (CURRENT_TEMPORAL_SYSTEM_TIME - 797)) | (1L << (CURRENT_TIME - 797)) | (1L << (CURRENT_TIMESTAMP - 797)) | (1L << (CURRENT_TIME_ZONE - 797)) | (1L << (ENCRYPTION_PASSWORD - 797)) | (1L << (SESSION_TIME_ZONE - 797)) | (1L << (SESSION_USER - 797)) | (1L << (USER - 797)) | (1L << (ADMIN_TASK_LIST - 797)) | (1L << (ADMIN_TASK_OUTPUT - 797)) | (1L << (ADMIN_TASK_STATUS - 797)) | (1L << (BLOCKING_THREADS - 797)) | (1L << (MQREADALL - 797)) | (1L << (MQREADALLCLOB - 797)) | (1L << (MQRECEIVEALL - 797)) | (1L << (MQRECEIVEALLCLOB - 797)) | (1L << (XMLTABLE - 797)) | (1L << (SQLIDENTIFIER - 797)))) != 0)) {
				{
				setState(1266);
				parameterDeclaration1();
				setState(1271);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1267);
					match(COMMA);
					setState(1268);
					parameterDeclaration1();
					}
					}
					setState(1273);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(1276);
			match(RPAREN);
			setState(1278); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1277);
				createFunctionStatementExternalScalarOptions();
				}
				}
				setState(1280); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (ALLOW - 33)) | (1L << (ASUTIME - 33)) | (1L << (COLLID - 33)) | (1L << (CONTAINS - 33)) | (1L << (CONTINUE - 33)) | (1L << (DBINFO - 33)) | (1L << (DEFAULT - 33)) | (1L << (DETERMINISTIC - 33)) | (1L << (DISALLOW - 33)))) != 0) || ((((_la - 119)) & ~0x3f) == 0 && ((1L << (_la - 119)) & ((1L << (EXTERNAL - 119)) | (1L << (FENCED - 119)) | (1L << (FINAL - 119)) | (1L << (INHERIT - 119)) | (1L << (LANGUAGE - 119)))) != 0) || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & ((1L << (MODIFIES - 184)) | (1L << (NO - 184)) | (1L << (NOT - 184)) | (1L << (NULL - 184)) | (1L << (PACKAGE - 184)) | (1L << (PARAMETER - 184)) | (1L << (PROGRAM - 184)) | (1L << (READS - 184)) | (1L << (RETURNS - 184)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (RUN - 257)) | (1L << (SCRATCHPAD - 257)) | (1L << (SECURITY - 257)) | (1L << (SPECIFIC - 257)) | (1L << (STATIC - 257)) | (1L << (STAY - 257)) | (1L << (VARIANT - 257)) | (1L << (WLM - 257)))) != 0) || ((((_la - 433)) & ~0x3f) == 0 && ((1L << (_la - 433)) & ((1L << (CALLED - 433)) | (1L << (SECURED - 433)) | (1L << (STOP - 433)))) != 0) || _la==CARDINALITY );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFunctionStatementExternalTableContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DB2zSQLParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(DB2zSQLParser.FUNCTION, 0); }
		public FunctionNameContext functionName() {
			return getRuleContext(FunctionNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<ParameterDeclaration1Context> parameterDeclaration1() {
			return getRuleContexts(ParameterDeclaration1Context.class);
		}
		public ParameterDeclaration1Context parameterDeclaration1(int i) {
			return getRuleContext(ParameterDeclaration1Context.class,i);
		}
		public List<CreateFunctionStatementExternalTableOptionsContext> createFunctionStatementExternalTableOptions() {
			return getRuleContexts(CreateFunctionStatementExternalTableOptionsContext.class);
		}
		public CreateFunctionStatementExternalTableOptionsContext createFunctionStatementExternalTableOptions(int i) {
			return getRuleContext(CreateFunctionStatementExternalTableOptionsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public CreateFunctionStatementExternalTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunctionStatementExternalTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateFunctionStatementExternalTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateFunctionStatementExternalTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateFunctionStatementExternalTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFunctionStatementExternalTableContext createFunctionStatementExternalTable() throws RecognitionException {
		CreateFunctionStatementExternalTableContext _localctx = new CreateFunctionStatementExternalTableContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_createFunctionStatementExternalTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1282);
			match(CREATE);
			setState(1283);
			match(FUNCTION);
			setState(1284);
			functionName();
			setState(1285);
			match(LPAREN);
			setState(1294);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 29)) & ~0x3f) == 0 && ((1L << (_la - 29)) & ((1L << (ADD - 29)) | (1L << (AFTER - 29)) | (1L << (ALL - 29)) | (1L << (ALLOCATE - 29)) | (1L << (ALLOW - 29)) | (1L << (ALTER - 29)) | (1L << (ALTERAND - 29)) | (1L << (ANY - 29)) | (1L << (ARRAY - 29)) | (1L << (ARRAY_EXISTS - 29)) | (1L << (AS - 29)) | (1L << (ASENSITIVE - 29)) | (1L << (ASSOCIATE - 29)) | (1L << (ASUTIME - 29)) | (1L << (AT - 29)) | (1L << (AUDIT - 29)) | (1L << (AUX - 29)) | (1L << (AUXILIARY - 29)) | (1L << (BEFORE - 29)) | (1L << (BEGIN - 29)) | (1L << (BETWEEN - 29)) | (1L << (BUFFERPOOL - 29)) | (1L << (BY - 29)) | (1L << (CALL - 29)) | (1L << (CAPTURE - 29)) | (1L << (CASCADED - 29)) | (1L << (CASE - 29)) | (1L << (CAST - 29)) | (1L << (CCSID - 29)) | (1L << (CHAR - 29)) | (1L << (CHARACTER - 29)) | (1L << (CHECK - 29)) | (1L << (CLONE - 29)) | (1L << (CLOSE - 29)) | (1L << (CLUSTER - 29)) | (1L << (COLLECTION - 29)) | (1L << (COLLID - 29)) | (1L << (COLUMN - 29)) | (1L << (COMMENT - 29)) | (1L << (COMMIT - 29)) | (1L << (CONCAT - 29)) | (1L << (CONDITION - 29)) | (1L << (CONNECT - 29)) | (1L << (CONNECTION - 29)) | (1L << (CONSTRAINT - 29)) | (1L << (CONTAINS - 29)) | (1L << (CONTENT - 29)) | (1L << (CONTINUE - 29)) | (1L << (CREATE - 29)) | (1L << (CUBE - 29)) | (1L << (CURRENT - 29)) | (1L << (CURRENT_LC_CTYPE - 29)) | (1L << (CURRVAL - 29)) | (1L << (CURSOR - 29)) | (1L << (DATA - 29)) | (1L << (DATABASE - 29)) | (1L << (DAY - 29)) | (1L << (DAYS - 29)) | (1L << (DBINFO - 29)) | (1L << (DECLARE - 29)) | (1L << (DEFAULT - 29)) | (1L << (DELETE - 29)) | (1L << (DESCRIPTOR - 29)) | (1L << (DETERMINISTIC - 29)))) != 0) || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (DISABLE - 93)) | (1L << (DISALLOW - 93)) | (1L << (DISTINCT - 93)) | (1L << (DO - 93)) | (1L << (DOCUMENT - 93)) | (1L << (DOUBLE - 93)) | (1L << (DROP - 93)) | (1L << (DSSIZE - 93)) | (1L << (DYNAMIC - 93)) | (1L << (EDITPROC - 93)) | (1L << (ELSE - 93)) | (1L << (ELSEIF - 93)) | (1L << (ENCODING - 93)) | (1L << (ENCRYPTION - 93)) | (1L << (END - 93)) | (1L << (END_EXEC - 93)) | (1L << (ENDING - 93)) | (1L << (ERASE - 93)) | (1L << (ESCAPE - 93)) | (1L << (EXCEPT - 93)) | (1L << (EXCEPTION - 93)) | (1L << (EXEC_SQL - 93)) | (1L << (EXECUTE - 93)) | (1L << (EXISTS - 93)) | (1L << (EXIT - 93)) | (1L << (EXPLAIN - 93)) | (1L << (EXTERNAL - 93)) | (1L << (FENCED - 93)) | (1L << (FETCH - 93)) | (1L << (FIELDPROC - 93)) | (1L << (FINAL - 93)) | (1L << (FIRST - 93)) | (1L << (FOR - 93)) | (1L << (FREE - 93)) | (1L << (FROM - 93)) | (1L << (FULL - 93)) | (1L << (FUNCTION - 93)) | (1L << (GENERATED - 93)) | (1L << (GET - 93)) | (1L << (GLOBAL - 93)) | (1L << (GO - 93)) | (1L << (GOTO - 93)) | (1L << (GRANT - 93)) | (1L << (GROUP - 93)) | (1L << (HANDLER - 93)) | (1L << (HAVING - 93)) | (1L << (HOLD - 93)) | (1L << (HOUR - 93)) | (1L << (HOURS - 93)) | (1L << (IF - 93)) | (1L << (IMMEDIATE - 93)) | (1L << (IN - 93)) | (1L << (INCLUSIVE - 93)) | (1L << (INDEX - 93)) | (1L << (INDEXBP - 93)) | (1L << (INHERIT - 93)) | (1L << (INNER - 93)) | (1L << (INOUT - 93)) | (1L << (INSENSITIVE - 93)) | (1L << (INSERT - 93)) | (1L << (INTERSECT - 93)) | (1L << (INTO - 93)) | (1L << (IS - 93)) | (1L << (ISOBID - 93)))) != 0) || ((((_la - 157)) & ~0x3f) == 0 && ((1L << (_la - 157)) & ((1L << (ITERATE - 157)) | (1L << (JAR - 157)) | (1L << (JOIN - 157)) | (1L << (KEEP - 157)) | (1L << (KEY - 157)) | (1L << (LABEL - 157)) | (1L << (LANGUAGE - 157)) | (1L << (LAST - 157)) | (1L << (LC_CTYPE - 157)) | (1L << (LEAVE - 157)) | (1L << (LEFT - 157)) | (1L << (LIKE - 157)) | (1L << (LIMIT - 157)) | (1L << (LOCAL - 157)) | (1L << (LOCALE - 157)) | (1L << (LOCATOR - 157)) | (1L << (LOCATORS - 157)) | (1L << (LOCK - 157)) | (1L << (LOCKMAX - 157)) | (1L << (LOCKSIZE - 157)) | (1L << (LONG - 157)) | (1L << (LOOP - 157)) | (1L << (MAINTAINED - 157)) | (1L << (MATERIALIZED - 157)) | (1L << (MICROSECOND - 157)) | (1L << (MICROSECONDS - 157)) | (1L << (MODIFIES - 157)) | (1L << (MONTH - 157)) | (1L << (MONTHS - 157)) | (1L << (NEXT - 157)) | (1L << (NEXTVAL - 157)) | (1L << (NO - 157)) | (1L << (NONE - 157)) | (1L << (NOT - 157)) | (1L << (NULL - 157)) | (1L << (NULLS - 157)) | (1L << (NUMPARTS - 157)) | (1L << (OBID - 157)) | (1L << (OF - 157)) | (1L << (OFFSET - 157)) | (1L << (OLD - 157)) | (1L << (ON - 157)) | (1L << (OPEN - 157)) | (1L << (OPTIMIZATION - 157)) | (1L << (OPTIMIZE - 157)) | (1L << (OR - 157)) | (1L << (ORDER - 157)) | (1L << (ORGANIZATION - 157)) | (1L << (OUT - 157)) | (1L << (OUTER - 157)) | (1L << (PACKAGE - 157)) | (1L << (PADDED - 157)) | (1L << (PARAMETER - 157)) | (1L << (PART - 157)) | (1L << (PARTITION - 157)) | (1L << (PARTITIONED - 157)) | (1L << (PARTITIONING - 157)) | (1L << (PATH - 157)) | (1L << (PERIOD - 157)) | (1L << (PIECESIZE - 157)) | (1L << (PLAN - 157)) | (1L << (PRECISION - 157)) | (1L << (PREPARE - 157)))) != 0) || ((((_la - 221)) & ~0x3f) == 0 && ((1L << (_la - 221)) & ((1L << (PREVVAL - 221)) | (1L << (PRIOR - 221)) | (1L << (PRIQTY - 221)) | (1L << (PRIVILEGES - 221)) | (1L << (PROCEDURE - 221)) | (1L << (PROGRAM - 221)) | (1L << (PSID - 221)) | (1L << (PUBLIC - 221)) | (1L << (QUERY - 221)) | (1L << (QUERYNO - 221)) | (1L << (READS - 221)) | (1L << (REFERENCES - 221)) | (1L << (REFRESH - 221)) | (1L << (RELEASE - 221)) | (1L << (RENAME - 221)) | (1L << (REPEAT - 221)) | (1L << (RESIGNAL - 221)) | (1L << (RESTRICT - 221)) | (1L << (RESULT - 221)) | (1L << (RESULT_SET_LOCATOR - 221)) | (1L << (RETURN - 221)) | (1L << (RETURNS - 221)) | (1L << (REVOKE - 221)) | (1L << (RIGHT - 221)) | (1L << (ROLE - 221)) | (1L << (ROLLBACK - 221)) | (1L << (ROLLUP - 221)) | (1L << (ROUND_CEILING - 221)) | (1L << (ROUND_DOWN - 221)) | (1L << (ROUND_FLOOR - 221)) | (1L << (ROUND_HALF_DOWN - 221)) | (1L << (ROUND_HALF_EVEN - 221)) | (1L << (ROUND_HALF_UP - 221)) | (1L << (ROUND_UP - 221)) | (1L << (ROW - 221)) | (1L << (ROWSET - 221)) | (1L << (RUN - 221)) | (1L << (SAVEPOINT - 221)) | (1L << (SCHEMA - 221)) | (1L << (SCRATCHPAD - 221)) | (1L << (SECOND - 221)) | (1L << (SECONDS - 221)) | (1L << (SECQTY - 221)) | (1L << (SECURITY - 221)) | (1L << (SELECT - 221)) | (1L << (SENSITIVE - 221)) | (1L << (SEQUENCE - 221)) | (1L << (SET - 221)) | (1L << (SIGNAL - 221)) | (1L << (SIMPLE - 221)) | (1L << (SOME - 221)) | (1L << (SOURCE - 221)) | (1L << (SPECIFIC - 221)) | (1L << (STANDARD - 221)) | (1L << (STATEMENT - 221)) | (1L << (STATIC - 221)) | (1L << (STAY - 221)) | (1L << (STOGROUP - 221)) | (1L << (STORES - 221)) | (1L << (STYLE - 221)) | (1L << (SUMMARY - 221)) | (1L << (SYNONYM - 221)) | (1L << (SYSDATE - 221)) | (1L << (SYSTEM - 221)))) != 0) || ((((_la - 285)) & ~0x3f) == 0 && ((1L << (_la - 285)) & ((1L << (SYSTIMESTAMP - 285)) | (1L << (TABLE - 285)) | (1L << (TABLESPACE - 285)) | (1L << (THEN - 285)) | (1L << (TO - 285)) | (1L << (TRIGGER - 285)) | (1L << (TRUNCATE - 285)) | (1L << (TYPE - 285)) | (1L << (UNDO - 285)) | (1L << (UNION - 285)) | (1L << (UNIQUE - 285)) | (1L << (UNTIL - 285)) | (1L << (UPDATE - 285)) | (1L << (USING - 285)) | (1L << (VALIDPROC - 285)) | (1L << (VALUE - 285)) | (1L << (VALUES - 285)) | (1L << (VARIABLE - 285)) | (1L << (VARIANT - 285)) | (1L << (VCAT - 285)) | (1L << (VERSIONING - 285)) | (1L << (VIEW - 285)) | (1L << (VOLATILE - 285)) | (1L << (VOLUMES - 285)) | (1L << (WHEN - 285)) | (1L << (WHENEVER - 285)) | (1L << (WHERE - 285)) | (1L << (WHILE - 285)) | (1L << (WITH - 285)) | (1L << (WLM - 285)) | (1L << (XMLCAST - 285)) | (1L << (XMLEXISTS - 285)) | (1L << (XMLNAMESPACES - 285)) | (1L << (YEAR - 285)) | (1L << (YEARS - 285)) | (1L << (ZONE - 285)) | (1L << (AND - 285)) | (1L << (ARRAY_AGG - 285)) | (1L << (ASC - 285)) | (1L << (AVG - 285)) | (1L << (BIT - 285)) | (1L << (CHANGE - 285)) | (1L << (CODEUNITS16 - 285)) | (1L << (CODEUNITS32 - 285)) | (1L << (CORR - 285)) | (1L << (CORRELATION - 285)) | (1L << (COUNT - 285)) | (1L << (COUNT_BIG - 285)) | (1L << (COVAR - 285)) | (1L << (COVARIANCE - 285)) | (1L << (COVARIANCE_SAMP - 285)) | (1L << (COVAR_POP - 285)) | (1L << (COVAR_SAMP - 285)) | (1L << (CS - 285)) | (1L << (CUME_DIST - 285)) | (1L << (DENSE_RANK - 285)) | (1L << (DESC - 285)) | (1L << (EBCDIC - 285)) | (1L << (EXCLUSIVE - 285)) | (1L << (FIRST_VALUE - 285)) | (1L << (FOLLOWING - 285)) | (1L << (GROUPING - 285)) | (1L << (IGNORE - 285)) | (1L << (INDICATOR - 285)))) != 0) || ((((_la - 349)) & ~0x3f) == 0 && ((1L << (_la - 349)) & ((1L << (INPUT - 349)) | (1L << (ISNULL - 349)) | (1L << (LAG - 349)) | (1L << (LARGE - 349)) | (1L << (LAST_VALUE - 349)) | (1L << (LEAD - 349)) | (1L << (LISTAGG - 349)) | (1L << (LOCKED - 349)) | (1L << (LOCKS - 349)) | (1L << (MEDIAN - 349)) | (1L << (MINUTES - 349)) | (1L << (MIXED - 349)) | (1L << (NOTNULL - 349)) | (1L << (NTH_VALUE - 349)) | (1L << (NTILE - 349)) | (1L << (NUMERIC - 349)) | (1L << (OBJECT - 349)) | (1L << (OCTETS - 349)) | (1L << (ONLY - 349)) | (1L << (OVER - 349)) | (1L << (PASSING - 349)) | (1L << (PERCENTILE_CONT - 349)) | (1L << (PERCENTILE_DISC - 349)) | (1L << (PERCENT_RANK - 349)) | (1L << (PRECEDING - 349)) | (1L << (PREVIOUS - 349)) | (1L << (RANGE - 349)) | (1L << (RANK - 349)) | (1L << (RATIO_TO_REPORT - 349)) | (1L << (READ - 349)) | (1L << (REF - 349)) | (1L << (REGR_AVGX - 349)) | (1L << (REGR_AVGY - 349)) | (1L << (REGR_COUNT - 349)) | (1L << (REGR_ICPT - 349)) | (1L << (REGR_INTERCEPT - 349)) | (1L << (REGR_R2 - 349)) | (1L << (REGR_SLOPE - 349)) | (1L << (REGR_SXX - 349)) | (1L << (REGR_SXY - 349)) | (1L << (REGR_SYY - 349)) | (1L << (RESPECT - 349)) | (1L << (ROW_NUMBER - 349)) | (1L << (ROWS - 349)) | (1L << (RR - 349)) | (1L << (RS - 349)) | (1L << (SBCS - 349)) | (1L << (SELECTIVITY - 349)) | (1L << (SETS - 349)) | (1L << (SHARE - 349)) | (1L << (SKIP_ - 349)) | (1L << (STDDEV - 349)) | (1L << (STDDEV_POP - 349)) | (1L << (STDDEV_SAMP - 349)) | (1L << (SUM - 349)) | (1L << (TOKEN - 349)) | (1L << (UNBOUNDED - 349)) | (1L << (UNPACK - 349)) | (1L << (UR - 349)) | (1L << (USE - 349)) | (1L << (VAR - 349)) | (1L << (VARIANCE - 349)) | (1L << (VARIANCE_SAMP - 349)) | (1L << (VAR_POP - 349)))) != 0) || ((((_la - 413)) & ~0x3f) == 0 && ((1L << (_la - 413)) & ((1L << (VAR_SAMP - 413)) | (1L << (VARYING - 413)) | (1L << (WITHOUT - 413)) | (1L << (XML - 413)) | (1L << (XMLAGG - 413)) | (1L << (COLUMNS - 413)) | (1L << (SQLID - 413)) | (1L << (ORDINALITY - 413)) | (1L << (SYSTEM_TIME - 413)) | (1L << (BUSINESS_TIME - 413)) | (1L << (MULTIPLIER - 413)) | (1L << (UNNEST - 413)) | (1L << (CROSS - 413)) | (1L << (CALLER - 413)) | (1L << (CLIENT - 413)) | (1L << (POSITIONING - 413)) | (1L << (SCROLL - 413)) | (1L << (ACTION - 413)) | (1L << (ASSEMBLE - 413)) | (1L << (C_ - 413)) | (1L << (CALLED - 413)) | (1L << (COBOL - 413)) | (1L << (DB2 - 413)) | (1L << (DEFINER - 413)) | (1L << (DISPATCH - 413)) | (1L << (ENVIRONMENT - 413)) | (1L << (FAILURE - 413)) | (1L << (FAILURES - 413)) | (1L << (JAVA - 413)) | (1L << (MAIN - 413)) | (1L << (NAME - 413)) | (1L << (OPTIONS - 413)) | (1L << (PARALLEL - 413)) | (1L << (PLI - 413)) | (1L << (REGISTERS - 413)) | (1L << (RESIDENT - 413)) | (1L << (SECURED - 413)) | (1L << (SPECIAL - 413)) | (1L << (SQL - 413)) | (1L << (STOP - 413)) | (1L << (SUB - 413)) | (1L << (YES - 413)) | (1L << (APPLICATION - 413)) | (1L << (CHANGED - 413)) | (1L << (COMPATIBILITY - 413)) | (1L << (COMPRESS - 413)) | (1L << (COPY - 413)) | (1L << (FREEPAGE - 413)) | (1L << (GBPCACHE - 413)) | (1L << (INCLUDE - 413)) | (1L << (MAXVALUE - 413)) | (1L << (MINVALUE - 413)) | (1L << (PCTFREE - 413)) | (1L << (REGENERATE - 413)) | (1L << (MASK - 413)) | (1L << (ENABLE - 413)) | (1L << (PERMISSION - 413)) | (1L << (ATOMIC - 413)) | (1L << (SQLEXCEPTION - 413)) | (1L << (MERGE - 413)) | (1L << (MATCHED - 413)) | (1L << (SQLSTATE - 413)) | (1L << (MESSAGE_TEXT - 413)) | (1L << (OVERRIDING - 413)))) != 0) || ((((_la - 477)) & ~0x3f) == 0 && ((1L << (_la - 477)) & ((1L << (PORTION - 477)) | (1L << (DB2SQL - 477)) | (1L << (DEBUG - 477)) | (1L << (GENERAL - 477)) | (1L << (MODE_ - 477)) | (1L << (REXX - 477)) | (1L << (CACHE - 477)) | (1L << (CYCLE - 477)) | (1L << (INCREMENT - 477)) | (1L << (RESTART - 477)) | (1L << (DATACLAS - 477)) | (1L << (MGMTCLAS - 477)) | (1L << (REMOVE - 477)) | (1L << (STORCLAS - 477)) | (1L << (ACCESS - 477)) | (1L << (ACTIVATE - 477)) | (1L << (ALWAYS - 477)) | (1L << (APPEND - 477)) | (1L << (ARCHIVE - 477)) | (1L << (BUSINESS - 477)) | (1L << (CASCADE - 477)) | (1L << (CHANGES - 477)) | (1L << (CONTROL - 477)) | (1L << (DEACTIVATE - 477)) | (1L << (DEFERRED - 477)) | (1L << (EACH - 477)) | (1L << (ENFORCED - 477)) | (1L << (EXTRA - 477)) | (1L << (FOREIGN - 477)) | (1L << (HIDDEN_ - 477)) | (1L << (HISTORY - 477)) | (1L << (ID - 477)) | (1L << (IDENTITY - 477)) | (1L << (IMPLICITLY - 477)) | (1L << (INITIALLY - 477)) | (1L << (INLINE - 477)) | (1L << (OPERATION - 477)) | (1L << (ORGANIZE - 477)) | (1L << (OVERLAPS - 477)) | (1L << (PACKAGE_NAME - 477)) | (1L << (PACKAGE_SCHEMA - 477)) | (1L << (PACKAGE_VERSION - 477)) | (1L << (PRIMARY - 477)) | (1L << (RESET - 477)) | (1L << (ROTATE - 477)) | (1L << (START - 477)) | (1L << (SYSIBM - 477)) | (1L << (TRANSACTION - 477)) | (1L << (XMLSCHEMA - 477)) | (1L << (ELEMENT - 477)) | (1L << (URL - 477)) | (1L << (NAMESPACE - 477)) | (1L << (LOCATION - 477)) | (1L << (SYSXSR - 477)) | (1L << (ALGORITHM - 477)) | (1L << (FIXEDLENGTH - 477)) | (1L << (HUFFMAN - 477)) | (1L << (LOB - 477)) | (1L << (LOG - 477)) | (1L << (LOGGED - 477)) | (1L << (MAXPARTITIONS - 477)) | (1L << (MAXROWS - 477)) | (1L << (MEMBER - 477)) | (1L << (MOVE - 477)))) != 0) || ((((_la - 541)) & ~0x3f) == 0 && ((1L << (_la - 541)) & ((1L << (PAGE - 541)) | (1L << (PAGENUM - 541)) | (1L << (PENDING - 541)) | (1L << (RELATIVE - 541)) | (1L << (SEGSIZE - 541)) | (1L << (TRACKMOD - 541)) | (1L << (ADDRESS - 541)) | (1L << (ATTRIBUTES - 541)) | (1L << (AUTHENTICATION - 541)) | (1L << (AUTHID - 541)) | (1L << (CONTEXT - 541)) | (1L << (JOBNAME - 541)) | (1L << (OWNER - 541)) | (1L << (PROFILE - 541)) | (1L << (QUALIFIER - 541)) | (1L << (SERVAUTH - 541)) | (1L << (TRUSTED - 541)) | (1L << (SECTION - 541)) | (1L << (ACTIVE - 541)) | (1L << (VERSION - 541)) | (1L << (ALIAS - 541)) | (1L << (WORK - 541)) | (1L << (WORKFILE - 541)) | (1L << (SYSDEFLT - 541)) | (1L << (NULTERM - 541)) | (1L << (STRUCTURE - 541)) | (1L << (GENERIC - 541)) | (1L << (ABS - 541)) | (1L << (ABSVAL - 541)) | (1L << (ACOS - 541)) | (1L << (ADD_DAYS - 541)) | (1L << (ADD_MONTHS - 541)) | (1L << (ARRAY_DELETE - 541)) | (1L << (ARRAY_FIRST - 541)) | (1L << (ARRAY_LAST - 541)) | (1L << (ARRAY_NEXT - 541)) | (1L << (ARRAY_PRIOR - 541)) | (1L << (ARRAY_TRIM - 541)) | (1L << (ASCII - 541)) | (1L << (ASCII_CHR - 541)) | (1L << (ASCIISTR - 541)) | (1L << (ASCII_STR - 541)) | (1L << (ASIN - 541)) | (1L << (ATAN - 541)) | (1L << (ATAN2 - 541)) | (1L << (ATANH - 541)) | (1L << (BIGINT - 541)) | (1L << (BINARY - 541)) | (1L << (BITAND - 541)) | (1L << (BITANDNOT - 541)) | (1L << (BITNOT - 541)) | (1L << (BITOR - 541)) | (1L << (BITXOR - 541)) | (1L << (BLOB - 541)) | (1L << (BTRIM - 541)) | (1L << (CARDINALITY - 541)) | (1L << (CCSID_ENCODING - 541)) | (1L << (CEIL - 541)) | (1L << (CEILING - 541)) | (1L << (CHAR9 - 541)) | (1L << (CHARACTER_LENGTH - 541)) | (1L << (CHAR_LENGTH - 541)) | (1L << (CHR - 541)) | (1L << (CLOB - 541)))) != 0) || ((((_la - 605)) & ~0x3f) == 0 && ((1L << (_la - 605)) & ((1L << (COALESCE - 605)) | (1L << (COLLATION_KEY - 605)) | (1L << (COMPARE_DECFLOAT - 605)) | (1L << (COS - 605)) | (1L << (COSH - 605)) | (1L << (DATE - 605)) | (1L << (DAYOFMONTH - 605)) | (1L << (DAYOFWEEK - 605)) | (1L << (DAYOFWEEK_ISO - 605)) | (1L << (DAYOFYEAR - 605)) | (1L << (DAYS_BETWEEN - 605)) | (1L << (DBCLOB - 605)) | (1L << (DEC - 605)) | (1L << (DECFLOAT - 605)) | (1L << (DECFLOAT_FORMAT - 605)) | (1L << (DECFLOAT_SORTKEY - 605)) | (1L << (DECIMAL - 605)) | (1L << (DECODE - 605)) | (1L << (DECRYPT_BINARY - 605)) | (1L << (DECRYPT_BIT - 605)) | (1L << (DECRYPT_CHAR - 605)) | (1L << (DECRYPT_DATAKEY_BIGINT - 605)) | (1L << (DECRYPT_DATAKEY_BIT - 605)) | (1L << (DECRYPT_DATAKEY_CLOB - 605)) | (1L << (DECRYPT_DATAKEY_DBCLOB - 605)) | (1L << (DECRYPT_DATAKEY_DECIMAL - 605)) | (1L << (DECRYPT_DATAKEY_INTEGER - 605)) | (1L << (DECRYPT_DATAKEY_VARCHAR - 605)) | (1L << (DECRYPT_DATAKEY_VARGRAPHIC - 605)) | (1L << (DECRYPT_DB - 605)) | (1L << (DEGREES - 605)) | (1L << (DIFFERENCE - 605)) | (1L << (DIGITS - 605)) | (1L << (DOUBLE_PRECISION - 605)) | (1L << (DSN_XMLVALIDATE - 605)) | (1L << (EBCDIC_CHR - 605)) | (1L << (EBCDIC_STR - 605)) | (1L << (ENCRYPT_DATAKEY - 605)) | (1L << (ENCRYPT_TDES - 605)) | (1L << (EXP - 605)) | (1L << (EXTRACT - 605)) | (1L << (FLOAT - 605)) | (1L << (FLOOR - 605)) | (1L << (GENERATE_UNIQUE - 605)) | (1L << (GENERATE_UNIQUE_BINARY - 605)) | (1L << (GETHINT - 605)) | (1L << (GETVARIABLE - 605)) | (1L << (GRAPHIC - 605)) | (1L << (GREATEST - 605)) | (1L << (HASH - 605)) | (1L << (HASH_CRC32 - 605)) | (1L << (HASH_MD5 - 605)) | (1L << (HASH_SHA1 - 605)) | (1L << (HASH_SHA256 - 605)) | (1L << (HEX - 605)) | (1L << (IDENTITY_VAL_LOCAL - 605)) | (1L << (IFNULL - 605)) | (1L << (INSTR - 605)) | (1L << (INT - 605)) | (1L << (INTEGER - 605)) | (1L << (JULIAN_DAY - 605)) | (1L << (LAST_DAY - 605)) | (1L << (LCASE - 605)) | (1L << (LEAST - 605)))) != 0) || ((((_la - 669)) & ~0x3f) == 0 && ((1L << (_la - 669)) & ((1L << (LENGTH - 669)) | (1L << (LN - 669)) | (1L << (LOCATE - 669)) | (1L << (LOCATE_IN_STRING - 669)) | (1L << (LOG10 - 669)) | (1L << (LOWER - 669)) | (1L << (LPAD - 669)) | (1L << (LTRIM - 669)) | (1L << (MAX - 669)) | (1L << (MAX_CARDINALITY - 669)) | (1L << (MIDNIGHT_SECONDS - 669)) | (1L << (MIN - 669)) | (1L << (MINUTE - 669)) | (1L << (MOD - 669)) | (1L << (MONTHS_BETWEEN - 669)) | (1L << (MQREAD - 669)) | (1L << (MQREADCLOB - 669)) | (1L << (MQRECEIVE - 669)) | (1L << (MQRECEIVECLOB - 669)) | (1L << (MQSEND - 669)) | (1L << (MULTIPLY_ALT - 669)) | (1L << (NEXT_DAY - 669)) | (1L << (NEXT_MONTH - 669)) | (1L << (NORMALIZE_DECFLOAT - 669)) | (1L << (NORMALIZE_STRING - 669)) | (1L << (NULLIF - 669)) | (1L << (NVL - 669)) | (1L << (OVERLAY - 669)) | (1L << (PACK - 669)) | (1L << (POSITION - 669)) | (1L << (POSSTR - 669)) | (1L << (POW - 669)) | (1L << (POWER - 669)) | (1L << (QUANTIZE - 669)) | (1L << (QUARTER - 669)) | (1L << (RADIANS - 669)) | (1L << (RAISE_ERROR - 669)) | (1L << (RAND - 669)) | (1L << (RANDOM - 669)) | (1L << (REAL - 669)) | (1L << (REGEXP_COUNT - 669)) | (1L << (REGEXP_INSTR - 669)) | (1L << (REGEXP_LIKE - 669)) | (1L << (REGEXP_REPLACE - 669)) | (1L << (REGEXP_SUBSTR - 669)) | (1L << (REPLACE - 669)) | (1L << (RID - 669)) | (1L << (ROUND - 669)) | (1L << (ROUND_TIMESTAMP - 669)) | (1L << (ROWID - 669)) | (1L << (RPAD - 669)) | (1L << (RTRIM - 669)) | (1L << (SCORE - 669)) | (1L << (SIGN - 669)) | (1L << (SIN - 669)) | (1L << (SINH - 669)) | (1L << (SMALLINT - 669)) | (1L << (SOAPHTTPC - 669)) | (1L << (SOAPHTTPNC - 669)) | (1L << (SOAPHTTPNV - 669)) | (1L << (SOAPHTTPV - 669)) | (1L << (SOUNDEX - 669)) | (1L << (SPACE - 669)) | (1L << (SQRT - 669)))) != 0) || ((((_la - 733)) & ~0x3f) == 0 && ((1L << (_la - 733)) & ((1L << (STRIP - 733)) | (1L << (STRLEFT - 733)) | (1L << (STRPOS - 733)) | (1L << (STRRIGHT - 733)) | (1L << (SUBSTR - 733)) | (1L << (SUBSTRING - 733)) | (1L << (TAN - 733)) | (1L << (TANH - 733)) | (1L << (TIME - 733)) | (1L << (TIMESTAMP - 733)) | (1L << (TIMESTAMPADD - 733)) | (1L << (TIMESTAMPDIFF - 733)) | (1L << (TIMESTAMP_FORMAT - 733)) | (1L << (TIMESTAMP_ISO - 733)) | (1L << (TIMESTAMP_TZ - 733)) | (1L << (TO_CHAR - 733)) | (1L << (TO_CLOB - 733)) | (1L << (TO_DATE - 733)) | (1L << (TO_NUMBER - 733)) | (1L << (TOTALORDER - 733)) | (1L << (TO_TIMESTAMP - 733)) | (1L << (TRANSLATE - 733)) | (1L << (TRIM - 733)) | (1L << (TRIM_ARRAY - 733)) | (1L << (TRUNC - 733)) | (1L << (TRUNC_TIMESTAMP - 733)) | (1L << (UCASE - 733)) | (1L << (UNICODE - 733)) | (1L << (UNICODE_STR - 733)) | (1L << (UNISTR - 733)) | (1L << (UPPER - 733)) | (1L << (VARBINARY - 733)) | (1L << (VARCHAR - 733)) | (1L << (VARCHAR9 - 733)) | (1L << (VARCHAR_BIT_FORMAT - 733)) | (1L << (VARCHAR_FORMAT - 733)) | (1L << (VARGRAPHIC - 733)) | (1L << (VERIFY_GROUP_FOR_USER - 733)) | (1L << (VERIFY_ROLE_FOR_USER - 733)) | (1L << (VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER - 733)) | (1L << (WEEK - 733)) | (1L << (WEEK_ISO - 733)) | (1L << (WRAP - 733)) | (1L << (XMLATTRIBUTES - 733)) | (1L << (XMLCOMMENT - 733)) | (1L << (XMLCONCAT - 733)) | (1L << (XMLDOCUMENT - 733)) | (1L << (XMLELEMENT - 733)) | (1L << (XMLFOREST - 733)) | (1L << (XMLMODIFY - 733)) | (1L << (XMLPARSE - 733)) | (1L << (XMLPI - 733)) | (1L << (XMLQUERY - 733)) | (1L << (XMLSERIALIZE - 733)) | (1L << (XMLTEXT - 733)) | (1L << (XMLXSROBJECTID - 733)) | (1L << (XSLTRANSFORM - 733)) | (1L << (CURRENT_ACCELERATOR - 733)) | (1L << (CURRENT_APPLICATION_COMPATIBILITY - 733)) | (1L << (CURRENT_APPLICATION_ENCODING_SCHEME - 733)) | (1L << (CURRENT_CLIENT_ACCTNG - 733)) | (1L << (CURRENT_CLIENT_APPLNAME - 733)) | (1L << (CURRENT_CLIENT_CORR_TOKEN - 733)) | (1L << (CURRENT_CLIENT_USERID - 733)))) != 0) || ((((_la - 797)) & ~0x3f) == 0 && ((1L << (_la - 797)) & ((1L << (CURRENT_CLIENT_WRKSTNNAME - 797)) | (1L << (CURRENT_DATE - 797)) | (1L << (CURRENT_DEBUG_MODE - 797)) | (1L << (CURRENT_DECFLOAT_ROUNDING_MODE - 797)) | (1L << (CURRENT_DEGREE - 797)) | (1L << (CURRENT_EXPLAIN_MODE - 797)) | (1L << (CURRENT_GET_ACCEL_ARCHIVE - 797)) | (1L << (CURRENT_LOCALE_LC_CTYPE - 797)) | (1L << (CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION - 797)) | (1L << (CURRENT_MEMBER - 797)) | (1L << (CURRENT_OPTIMIZATION_HINT - 797)) | (1L << (CURRENT_PACKAGE_PATH - 797)) | (1L << (CURRENT_PACKAGESET - 797)) | (1L << (CURRENT_PATH - 797)) | (1L << (CURRENT_PRECISION - 797)) | (1L << (CURRENT_QUERY_ACCELERATION - 797)) | (1L << (CURRENT_QUERY_ACCELERATION_WAITFORDATA - 797)) | (1L << (CURRENT_REFRESH_AGE - 797)) | (1L << (CURRENT_ROUTINE_VERSION - 797)) | (1L << (CURRENT_RULES - 797)) | (1L << (CURRENT_SCHEMA - 797)) | (1L << (CURRENT_SERVER - 797)) | (1L << (CURRENT_SQLID - 797)) | (1L << (CURRENT_TEMPORAL_BUSINESS_TIME - 797)) | (1L << (CURRENT_TEMPORAL_SYSTEM_TIME - 797)) | (1L << (CURRENT_TIME - 797)) | (1L << (CURRENT_TIMESTAMP - 797)) | (1L << (CURRENT_TIME_ZONE - 797)) | (1L << (ENCRYPTION_PASSWORD - 797)) | (1L << (SESSION_TIME_ZONE - 797)) | (1L << (SESSION_USER - 797)) | (1L << (USER - 797)) | (1L << (ADMIN_TASK_LIST - 797)) | (1L << (ADMIN_TASK_OUTPUT - 797)) | (1L << (ADMIN_TASK_STATUS - 797)) | (1L << (BLOCKING_THREADS - 797)) | (1L << (MQREADALL - 797)) | (1L << (MQREADALLCLOB - 797)) | (1L << (MQRECEIVEALL - 797)) | (1L << (MQRECEIVEALLCLOB - 797)) | (1L << (XMLTABLE - 797)) | (1L << (SQLIDENTIFIER - 797)))) != 0)) {
				{
				setState(1286);
				parameterDeclaration1();
				setState(1291);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1287);
					match(COMMA);
					setState(1288);
					parameterDeclaration1();
					}
					}
					setState(1293);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(1296);
			match(RPAREN);
			setState(1298); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1297);
				createFunctionStatementExternalTableOptions();
				}
				}
				setState(1300); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 42)) & ~0x3f) == 0 && ((1L << (_la - 42)) & ((1L << (ASUTIME - 42)) | (1L << (COLLID - 42)) | (1L << (CONTAINS - 42)) | (1L << (CONTINUE - 42)) | (1L << (DBINFO - 42)) | (1L << (DEFAULT - 42)) | (1L << (DETERMINISTIC - 42)) | (1L << (DISALLOW - 42)))) != 0) || ((((_la - 119)) & ~0x3f) == 0 && ((1L << (_la - 119)) & ((1L << (EXTERNAL - 119)) | (1L << (FENCED - 119)) | (1L << (FINAL - 119)) | (1L << (INHERIT - 119)) | (1L << (LANGUAGE - 119)))) != 0) || ((((_la - 189)) & ~0x3f) == 0 && ((1L << (_la - 189)) & ((1L << (NO - 189)) | (1L << (NOT - 189)) | (1L << (NULL - 189)) | (1L << (PACKAGE - 189)) | (1L << (PARAMETER - 189)) | (1L << (PROGRAM - 189)) | (1L << (READS - 189)) | (1L << (RETURNS - 189)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (RUN - 257)) | (1L << (SCRATCHPAD - 257)) | (1L << (SECURITY - 257)) | (1L << (SPECIFIC - 257)) | (1L << (STATIC - 257)) | (1L << (STAY - 257)) | (1L << (VARIANT - 257)) | (1L << (WLM - 257)))) != 0) || ((((_la - 433)) & ~0x3f) == 0 && ((1L << (_la - 433)) & ((1L << (CALLED - 433)) | (1L << (SECURED - 433)) | (1L << (STOP - 433)))) != 0) || _la==CARDINALITY );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFunctionStatementSourcedContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DB2zSQLParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(DB2zSQLParser.FUNCTION, 0); }
		public FunctionNameContext functionName() {
			return getRuleContext(FunctionNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<ParameterDeclaration1Context> parameterDeclaration1() {
			return getRuleContexts(ParameterDeclaration1Context.class);
		}
		public ParameterDeclaration1Context parameterDeclaration1(int i) {
			return getRuleContext(ParameterDeclaration1Context.class,i);
		}
		public List<CreateFunctionStatementSourcedOptionsContext> createFunctionStatementSourcedOptions() {
			return getRuleContexts(CreateFunctionStatementSourcedOptionsContext.class);
		}
		public CreateFunctionStatementSourcedOptionsContext createFunctionStatementSourcedOptions(int i) {
			return getRuleContext(CreateFunctionStatementSourcedOptionsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public CreateFunctionStatementSourcedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunctionStatementSourced; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateFunctionStatementSourced(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateFunctionStatementSourced(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateFunctionStatementSourced(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFunctionStatementSourcedContext createFunctionStatementSourced() throws RecognitionException {
		CreateFunctionStatementSourcedContext _localctx = new CreateFunctionStatementSourcedContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_createFunctionStatementSourced);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1302);
			match(CREATE);
			setState(1303);
			match(FUNCTION);
			setState(1304);
			functionName();
			setState(1305);
			match(LPAREN);
			setState(1314);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 29)) & ~0x3f) == 0 && ((1L << (_la - 29)) & ((1L << (ADD - 29)) | (1L << (AFTER - 29)) | (1L << (ALL - 29)) | (1L << (ALLOCATE - 29)) | (1L << (ALLOW - 29)) | (1L << (ALTER - 29)) | (1L << (ALTERAND - 29)) | (1L << (ANY - 29)) | (1L << (ARRAY - 29)) | (1L << (ARRAY_EXISTS - 29)) | (1L << (AS - 29)) | (1L << (ASENSITIVE - 29)) | (1L << (ASSOCIATE - 29)) | (1L << (ASUTIME - 29)) | (1L << (AT - 29)) | (1L << (AUDIT - 29)) | (1L << (AUX - 29)) | (1L << (AUXILIARY - 29)) | (1L << (BEFORE - 29)) | (1L << (BEGIN - 29)) | (1L << (BETWEEN - 29)) | (1L << (BUFFERPOOL - 29)) | (1L << (BY - 29)) | (1L << (CALL - 29)) | (1L << (CAPTURE - 29)) | (1L << (CASCADED - 29)) | (1L << (CASE - 29)) | (1L << (CAST - 29)) | (1L << (CCSID - 29)) | (1L << (CHAR - 29)) | (1L << (CHARACTER - 29)) | (1L << (CHECK - 29)) | (1L << (CLONE - 29)) | (1L << (CLOSE - 29)) | (1L << (CLUSTER - 29)) | (1L << (COLLECTION - 29)) | (1L << (COLLID - 29)) | (1L << (COLUMN - 29)) | (1L << (COMMENT - 29)) | (1L << (COMMIT - 29)) | (1L << (CONCAT - 29)) | (1L << (CONDITION - 29)) | (1L << (CONNECT - 29)) | (1L << (CONNECTION - 29)) | (1L << (CONSTRAINT - 29)) | (1L << (CONTAINS - 29)) | (1L << (CONTENT - 29)) | (1L << (CONTINUE - 29)) | (1L << (CREATE - 29)) | (1L << (CUBE - 29)) | (1L << (CURRENT - 29)) | (1L << (CURRENT_LC_CTYPE - 29)) | (1L << (CURRVAL - 29)) | (1L << (CURSOR - 29)) | (1L << (DATA - 29)) | (1L << (DATABASE - 29)) | (1L << (DAY - 29)) | (1L << (DAYS - 29)) | (1L << (DBINFO - 29)) | (1L << (DECLARE - 29)) | (1L << (DEFAULT - 29)) | (1L << (DELETE - 29)) | (1L << (DESCRIPTOR - 29)) | (1L << (DETERMINISTIC - 29)))) != 0) || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (DISABLE - 93)) | (1L << (DISALLOW - 93)) | (1L << (DISTINCT - 93)) | (1L << (DO - 93)) | (1L << (DOCUMENT - 93)) | (1L << (DOUBLE - 93)) | (1L << (DROP - 93)) | (1L << (DSSIZE - 93)) | (1L << (DYNAMIC - 93)) | (1L << (EDITPROC - 93)) | (1L << (ELSE - 93)) | (1L << (ELSEIF - 93)) | (1L << (ENCODING - 93)) | (1L << (ENCRYPTION - 93)) | (1L << (END - 93)) | (1L << (END_EXEC - 93)) | (1L << (ENDING - 93)) | (1L << (ERASE - 93)) | (1L << (ESCAPE - 93)) | (1L << (EXCEPT - 93)) | (1L << (EXCEPTION - 93)) | (1L << (EXEC_SQL - 93)) | (1L << (EXECUTE - 93)) | (1L << (EXISTS - 93)) | (1L << (EXIT - 93)) | (1L << (EXPLAIN - 93)) | (1L << (EXTERNAL - 93)) | (1L << (FENCED - 93)) | (1L << (FETCH - 93)) | (1L << (FIELDPROC - 93)) | (1L << (FINAL - 93)) | (1L << (FIRST - 93)) | (1L << (FOR - 93)) | (1L << (FREE - 93)) | (1L << (FROM - 93)) | (1L << (FULL - 93)) | (1L << (FUNCTION - 93)) | (1L << (GENERATED - 93)) | (1L << (GET - 93)) | (1L << (GLOBAL - 93)) | (1L << (GO - 93)) | (1L << (GOTO - 93)) | (1L << (GRANT - 93)) | (1L << (GROUP - 93)) | (1L << (HANDLER - 93)) | (1L << (HAVING - 93)) | (1L << (HOLD - 93)) | (1L << (HOUR - 93)) | (1L << (HOURS - 93)) | (1L << (IF - 93)) | (1L << (IMMEDIATE - 93)) | (1L << (IN - 93)) | (1L << (INCLUSIVE - 93)) | (1L << (INDEX - 93)) | (1L << (INDEXBP - 93)) | (1L << (INHERIT - 93)) | (1L << (INNER - 93)) | (1L << (INOUT - 93)) | (1L << (INSENSITIVE - 93)) | (1L << (INSERT - 93)) | (1L << (INTERSECT - 93)) | (1L << (INTO - 93)) | (1L << (IS - 93)) | (1L << (ISOBID - 93)))) != 0) || ((((_la - 157)) & ~0x3f) == 0 && ((1L << (_la - 157)) & ((1L << (ITERATE - 157)) | (1L << (JAR - 157)) | (1L << (JOIN - 157)) | (1L << (KEEP - 157)) | (1L << (KEY - 157)) | (1L << (LABEL - 157)) | (1L << (LANGUAGE - 157)) | (1L << (LAST - 157)) | (1L << (LC_CTYPE - 157)) | (1L << (LEAVE - 157)) | (1L << (LEFT - 157)) | (1L << (LIKE - 157)) | (1L << (LIMIT - 157)) | (1L << (LOCAL - 157)) | (1L << (LOCALE - 157)) | (1L << (LOCATOR - 157)) | (1L << (LOCATORS - 157)) | (1L << (LOCK - 157)) | (1L << (LOCKMAX - 157)) | (1L << (LOCKSIZE - 157)) | (1L << (LONG - 157)) | (1L << (LOOP - 157)) | (1L << (MAINTAINED - 157)) | (1L << (MATERIALIZED - 157)) | (1L << (MICROSECOND - 157)) | (1L << (MICROSECONDS - 157)) | (1L << (MODIFIES - 157)) | (1L << (MONTH - 157)) | (1L << (MONTHS - 157)) | (1L << (NEXT - 157)) | (1L << (NEXTVAL - 157)) | (1L << (NO - 157)) | (1L << (NONE - 157)) | (1L << (NOT - 157)) | (1L << (NULL - 157)) | (1L << (NULLS - 157)) | (1L << (NUMPARTS - 157)) | (1L << (OBID - 157)) | (1L << (OF - 157)) | (1L << (OFFSET - 157)) | (1L << (OLD - 157)) | (1L << (ON - 157)) | (1L << (OPEN - 157)) | (1L << (OPTIMIZATION - 157)) | (1L << (OPTIMIZE - 157)) | (1L << (OR - 157)) | (1L << (ORDER - 157)) | (1L << (ORGANIZATION - 157)) | (1L << (OUT - 157)) | (1L << (OUTER - 157)) | (1L << (PACKAGE - 157)) | (1L << (PADDED - 157)) | (1L << (PARAMETER - 157)) | (1L << (PART - 157)) | (1L << (PARTITION - 157)) | (1L << (PARTITIONED - 157)) | (1L << (PARTITIONING - 157)) | (1L << (PATH - 157)) | (1L << (PERIOD - 157)) | (1L << (PIECESIZE - 157)) | (1L << (PLAN - 157)) | (1L << (PRECISION - 157)) | (1L << (PREPARE - 157)))) != 0) || ((((_la - 221)) & ~0x3f) == 0 && ((1L << (_la - 221)) & ((1L << (PREVVAL - 221)) | (1L << (PRIOR - 221)) | (1L << (PRIQTY - 221)) | (1L << (PRIVILEGES - 221)) | (1L << (PROCEDURE - 221)) | (1L << (PROGRAM - 221)) | (1L << (PSID - 221)) | (1L << (PUBLIC - 221)) | (1L << (QUERY - 221)) | (1L << (QUERYNO - 221)) | (1L << (READS - 221)) | (1L << (REFERENCES - 221)) | (1L << (REFRESH - 221)) | (1L << (RELEASE - 221)) | (1L << (RENAME - 221)) | (1L << (REPEAT - 221)) | (1L << (RESIGNAL - 221)) | (1L << (RESTRICT - 221)) | (1L << (RESULT - 221)) | (1L << (RESULT_SET_LOCATOR - 221)) | (1L << (RETURN - 221)) | (1L << (RETURNS - 221)) | (1L << (REVOKE - 221)) | (1L << (RIGHT - 221)) | (1L << (ROLE - 221)) | (1L << (ROLLBACK - 221)) | (1L << (ROLLUP - 221)) | (1L << (ROUND_CEILING - 221)) | (1L << (ROUND_DOWN - 221)) | (1L << (ROUND_FLOOR - 221)) | (1L << (ROUND_HALF_DOWN - 221)) | (1L << (ROUND_HALF_EVEN - 221)) | (1L << (ROUND_HALF_UP - 221)) | (1L << (ROUND_UP - 221)) | (1L << (ROW - 221)) | (1L << (ROWSET - 221)) | (1L << (RUN - 221)) | (1L << (SAVEPOINT - 221)) | (1L << (SCHEMA - 221)) | (1L << (SCRATCHPAD - 221)) | (1L << (SECOND - 221)) | (1L << (SECONDS - 221)) | (1L << (SECQTY - 221)) | (1L << (SECURITY - 221)) | (1L << (SELECT - 221)) | (1L << (SENSITIVE - 221)) | (1L << (SEQUENCE - 221)) | (1L << (SET - 221)) | (1L << (SIGNAL - 221)) | (1L << (SIMPLE - 221)) | (1L << (SOME - 221)) | (1L << (SOURCE - 221)) | (1L << (SPECIFIC - 221)) | (1L << (STANDARD - 221)) | (1L << (STATEMENT - 221)) | (1L << (STATIC - 221)) | (1L << (STAY - 221)) | (1L << (STOGROUP - 221)) | (1L << (STORES - 221)) | (1L << (STYLE - 221)) | (1L << (SUMMARY - 221)) | (1L << (SYNONYM - 221)) | (1L << (SYSDATE - 221)) | (1L << (SYSTEM - 221)))) != 0) || ((((_la - 285)) & ~0x3f) == 0 && ((1L << (_la - 285)) & ((1L << (SYSTIMESTAMP - 285)) | (1L << (TABLE - 285)) | (1L << (TABLESPACE - 285)) | (1L << (THEN - 285)) | (1L << (TO - 285)) | (1L << (TRIGGER - 285)) | (1L << (TRUNCATE - 285)) | (1L << (TYPE - 285)) | (1L << (UNDO - 285)) | (1L << (UNION - 285)) | (1L << (UNIQUE - 285)) | (1L << (UNTIL - 285)) | (1L << (UPDATE - 285)) | (1L << (USING - 285)) | (1L << (VALIDPROC - 285)) | (1L << (VALUE - 285)) | (1L << (VALUES - 285)) | (1L << (VARIABLE - 285)) | (1L << (VARIANT - 285)) | (1L << (VCAT - 285)) | (1L << (VERSIONING - 285)) | (1L << (VIEW - 285)) | (1L << (VOLATILE - 285)) | (1L << (VOLUMES - 285)) | (1L << (WHEN - 285)) | (1L << (WHENEVER - 285)) | (1L << (WHERE - 285)) | (1L << (WHILE - 285)) | (1L << (WITH - 285)) | (1L << (WLM - 285)) | (1L << (XMLCAST - 285)) | (1L << (XMLEXISTS - 285)) | (1L << (XMLNAMESPACES - 285)) | (1L << (YEAR - 285)) | (1L << (YEARS - 285)) | (1L << (ZONE - 285)) | (1L << (AND - 285)) | (1L << (ARRAY_AGG - 285)) | (1L << (ASC - 285)) | (1L << (AVG - 285)) | (1L << (BIT - 285)) | (1L << (CHANGE - 285)) | (1L << (CODEUNITS16 - 285)) | (1L << (CODEUNITS32 - 285)) | (1L << (CORR - 285)) | (1L << (CORRELATION - 285)) | (1L << (COUNT - 285)) | (1L << (COUNT_BIG - 285)) | (1L << (COVAR - 285)) | (1L << (COVARIANCE - 285)) | (1L << (COVARIANCE_SAMP - 285)) | (1L << (COVAR_POP - 285)) | (1L << (COVAR_SAMP - 285)) | (1L << (CS - 285)) | (1L << (CUME_DIST - 285)) | (1L << (DENSE_RANK - 285)) | (1L << (DESC - 285)) | (1L << (EBCDIC - 285)) | (1L << (EXCLUSIVE - 285)) | (1L << (FIRST_VALUE - 285)) | (1L << (FOLLOWING - 285)) | (1L << (GROUPING - 285)) | (1L << (IGNORE - 285)) | (1L << (INDICATOR - 285)))) != 0) || ((((_la - 349)) & ~0x3f) == 0 && ((1L << (_la - 349)) & ((1L << (INPUT - 349)) | (1L << (ISNULL - 349)) | (1L << (LAG - 349)) | (1L << (LARGE - 349)) | (1L << (LAST_VALUE - 349)) | (1L << (LEAD - 349)) | (1L << (LISTAGG - 349)) | (1L << (LOCKED - 349)) | (1L << (LOCKS - 349)) | (1L << (MEDIAN - 349)) | (1L << (MINUTES - 349)) | (1L << (MIXED - 349)) | (1L << (NOTNULL - 349)) | (1L << (NTH_VALUE - 349)) | (1L << (NTILE - 349)) | (1L << (NUMERIC - 349)) | (1L << (OBJECT - 349)) | (1L << (OCTETS - 349)) | (1L << (ONLY - 349)) | (1L << (OVER - 349)) | (1L << (PASSING - 349)) | (1L << (PERCENTILE_CONT - 349)) | (1L << (PERCENTILE_DISC - 349)) | (1L << (PERCENT_RANK - 349)) | (1L << (PRECEDING - 349)) | (1L << (PREVIOUS - 349)) | (1L << (RANGE - 349)) | (1L << (RANK - 349)) | (1L << (RATIO_TO_REPORT - 349)) | (1L << (READ - 349)) | (1L << (REF - 349)) | (1L << (REGR_AVGX - 349)) | (1L << (REGR_AVGY - 349)) | (1L << (REGR_COUNT - 349)) | (1L << (REGR_ICPT - 349)) | (1L << (REGR_INTERCEPT - 349)) | (1L << (REGR_R2 - 349)) | (1L << (REGR_SLOPE - 349)) | (1L << (REGR_SXX - 349)) | (1L << (REGR_SXY - 349)) | (1L << (REGR_SYY - 349)) | (1L << (RESPECT - 349)) | (1L << (ROW_NUMBER - 349)) | (1L << (ROWS - 349)) | (1L << (RR - 349)) | (1L << (RS - 349)) | (1L << (SBCS - 349)) | (1L << (SELECTIVITY - 349)) | (1L << (SETS - 349)) | (1L << (SHARE - 349)) | (1L << (SKIP_ - 349)) | (1L << (STDDEV - 349)) | (1L << (STDDEV_POP - 349)) | (1L << (STDDEV_SAMP - 349)) | (1L << (SUM - 349)) | (1L << (TOKEN - 349)) | (1L << (UNBOUNDED - 349)) | (1L << (UNPACK - 349)) | (1L << (UR - 349)) | (1L << (USE - 349)) | (1L << (VAR - 349)) | (1L << (VARIANCE - 349)) | (1L << (VARIANCE_SAMP - 349)) | (1L << (VAR_POP - 349)))) != 0) || ((((_la - 413)) & ~0x3f) == 0 && ((1L << (_la - 413)) & ((1L << (VAR_SAMP - 413)) | (1L << (VARYING - 413)) | (1L << (WITHOUT - 413)) | (1L << (XML - 413)) | (1L << (XMLAGG - 413)) | (1L << (COLUMNS - 413)) | (1L << (SQLID - 413)) | (1L << (ORDINALITY - 413)) | (1L << (SYSTEM_TIME - 413)) | (1L << (BUSINESS_TIME - 413)) | (1L << (MULTIPLIER - 413)) | (1L << (UNNEST - 413)) | (1L << (CROSS - 413)) | (1L << (CALLER - 413)) | (1L << (CLIENT - 413)) | (1L << (POSITIONING - 413)) | (1L << (SCROLL - 413)) | (1L << (ACTION - 413)) | (1L << (ASSEMBLE - 413)) | (1L << (C_ - 413)) | (1L << (CALLED - 413)) | (1L << (COBOL - 413)) | (1L << (DB2 - 413)) | (1L << (DEFINER - 413)) | (1L << (DISPATCH - 413)) | (1L << (ENVIRONMENT - 413)) | (1L << (FAILURE - 413)) | (1L << (FAILURES - 413)) | (1L << (JAVA - 413)) | (1L << (MAIN - 413)) | (1L << (NAME - 413)) | (1L << (OPTIONS - 413)) | (1L << (PARALLEL - 413)) | (1L << (PLI - 413)) | (1L << (REGISTERS - 413)) | (1L << (RESIDENT - 413)) | (1L << (SECURED - 413)) | (1L << (SPECIAL - 413)) | (1L << (SQL - 413)) | (1L << (STOP - 413)) | (1L << (SUB - 413)) | (1L << (YES - 413)) | (1L << (APPLICATION - 413)) | (1L << (CHANGED - 413)) | (1L << (COMPATIBILITY - 413)) | (1L << (COMPRESS - 413)) | (1L << (COPY - 413)) | (1L << (FREEPAGE - 413)) | (1L << (GBPCACHE - 413)) | (1L << (INCLUDE - 413)) | (1L << (MAXVALUE - 413)) | (1L << (MINVALUE - 413)) | (1L << (PCTFREE - 413)) | (1L << (REGENERATE - 413)) | (1L << (MASK - 413)) | (1L << (ENABLE - 413)) | (1L << (PERMISSION - 413)) | (1L << (ATOMIC - 413)) | (1L << (SQLEXCEPTION - 413)) | (1L << (MERGE - 413)) | (1L << (MATCHED - 413)) | (1L << (SQLSTATE - 413)) | (1L << (MESSAGE_TEXT - 413)) | (1L << (OVERRIDING - 413)))) != 0) || ((((_la - 477)) & ~0x3f) == 0 && ((1L << (_la - 477)) & ((1L << (PORTION - 477)) | (1L << (DB2SQL - 477)) | (1L << (DEBUG - 477)) | (1L << (GENERAL - 477)) | (1L << (MODE_ - 477)) | (1L << (REXX - 477)) | (1L << (CACHE - 477)) | (1L << (CYCLE - 477)) | (1L << (INCREMENT - 477)) | (1L << (RESTART - 477)) | (1L << (DATACLAS - 477)) | (1L << (MGMTCLAS - 477)) | (1L << (REMOVE - 477)) | (1L << (STORCLAS - 477)) | (1L << (ACCESS - 477)) | (1L << (ACTIVATE - 477)) | (1L << (ALWAYS - 477)) | (1L << (APPEND - 477)) | (1L << (ARCHIVE - 477)) | (1L << (BUSINESS - 477)) | (1L << (CASCADE - 477)) | (1L << (CHANGES - 477)) | (1L << (CONTROL - 477)) | (1L << (DEACTIVATE - 477)) | (1L << (DEFERRED - 477)) | (1L << (EACH - 477)) | (1L << (ENFORCED - 477)) | (1L << (EXTRA - 477)) | (1L << (FOREIGN - 477)) | (1L << (HIDDEN_ - 477)) | (1L << (HISTORY - 477)) | (1L << (ID - 477)) | (1L << (IDENTITY - 477)) | (1L << (IMPLICITLY - 477)) | (1L << (INITIALLY - 477)) | (1L << (INLINE - 477)) | (1L << (OPERATION - 477)) | (1L << (ORGANIZE - 477)) | (1L << (OVERLAPS - 477)) | (1L << (PACKAGE_NAME - 477)) | (1L << (PACKAGE_SCHEMA - 477)) | (1L << (PACKAGE_VERSION - 477)) | (1L << (PRIMARY - 477)) | (1L << (RESET - 477)) | (1L << (ROTATE - 477)) | (1L << (START - 477)) | (1L << (SYSIBM - 477)) | (1L << (TRANSACTION - 477)) | (1L << (XMLSCHEMA - 477)) | (1L << (ELEMENT - 477)) | (1L << (URL - 477)) | (1L << (NAMESPACE - 477)) | (1L << (LOCATION - 477)) | (1L << (SYSXSR - 477)) | (1L << (ALGORITHM - 477)) | (1L << (FIXEDLENGTH - 477)) | (1L << (HUFFMAN - 477)) | (1L << (LOB - 477)) | (1L << (LOG - 477)) | (1L << (LOGGED - 477)) | (1L << (MAXPARTITIONS - 477)) | (1L << (MAXROWS - 477)) | (1L << (MEMBER - 477)) | (1L << (MOVE - 477)))) != 0) || ((((_la - 541)) & ~0x3f) == 0 && ((1L << (_la - 541)) & ((1L << (PAGE - 541)) | (1L << (PAGENUM - 541)) | (1L << (PENDING - 541)) | (1L << (RELATIVE - 541)) | (1L << (SEGSIZE - 541)) | (1L << (TRACKMOD - 541)) | (1L << (ADDRESS - 541)) | (1L << (ATTRIBUTES - 541)) | (1L << (AUTHENTICATION - 541)) | (1L << (AUTHID - 541)) | (1L << (CONTEXT - 541)) | (1L << (JOBNAME - 541)) | (1L << (OWNER - 541)) | (1L << (PROFILE - 541)) | (1L << (QUALIFIER - 541)) | (1L << (SERVAUTH - 541)) | (1L << (TRUSTED - 541)) | (1L << (SECTION - 541)) | (1L << (ACTIVE - 541)) | (1L << (VERSION - 541)) | (1L << (ALIAS - 541)) | (1L << (WORK - 541)) | (1L << (WORKFILE - 541)) | (1L << (SYSDEFLT - 541)) | (1L << (NULTERM - 541)) | (1L << (STRUCTURE - 541)) | (1L << (GENERIC - 541)) | (1L << (ABS - 541)) | (1L << (ABSVAL - 541)) | (1L << (ACOS - 541)) | (1L << (ADD_DAYS - 541)) | (1L << (ADD_MONTHS - 541)) | (1L << (ARRAY_DELETE - 541)) | (1L << (ARRAY_FIRST - 541)) | (1L << (ARRAY_LAST - 541)) | (1L << (ARRAY_NEXT - 541)) | (1L << (ARRAY_PRIOR - 541)) | (1L << (ARRAY_TRIM - 541)) | (1L << (ASCII - 541)) | (1L << (ASCII_CHR - 541)) | (1L << (ASCIISTR - 541)) | (1L << (ASCII_STR - 541)) | (1L << (ASIN - 541)) | (1L << (ATAN - 541)) | (1L << (ATAN2 - 541)) | (1L << (ATANH - 541)) | (1L << (BIGINT - 541)) | (1L << (BINARY - 541)) | (1L << (BITAND - 541)) | (1L << (BITANDNOT - 541)) | (1L << (BITNOT - 541)) | (1L << (BITOR - 541)) | (1L << (BITXOR - 541)) | (1L << (BLOB - 541)) | (1L << (BTRIM - 541)) | (1L << (CARDINALITY - 541)) | (1L << (CCSID_ENCODING - 541)) | (1L << (CEIL - 541)) | (1L << (CEILING - 541)) | (1L << (CHAR9 - 541)) | (1L << (CHARACTER_LENGTH - 541)) | (1L << (CHAR_LENGTH - 541)) | (1L << (CHR - 541)) | (1L << (CLOB - 541)))) != 0) || ((((_la - 605)) & ~0x3f) == 0 && ((1L << (_la - 605)) & ((1L << (COALESCE - 605)) | (1L << (COLLATION_KEY - 605)) | (1L << (COMPARE_DECFLOAT - 605)) | (1L << (COS - 605)) | (1L << (COSH - 605)) | (1L << (DATE - 605)) | (1L << (DAYOFMONTH - 605)) | (1L << (DAYOFWEEK - 605)) | (1L << (DAYOFWEEK_ISO - 605)) | (1L << (DAYOFYEAR - 605)) | (1L << (DAYS_BETWEEN - 605)) | (1L << (DBCLOB - 605)) | (1L << (DEC - 605)) | (1L << (DECFLOAT - 605)) | (1L << (DECFLOAT_FORMAT - 605)) | (1L << (DECFLOAT_SORTKEY - 605)) | (1L << (DECIMAL - 605)) | (1L << (DECODE - 605)) | (1L << (DECRYPT_BINARY - 605)) | (1L << (DECRYPT_BIT - 605)) | (1L << (DECRYPT_CHAR - 605)) | (1L << (DECRYPT_DATAKEY_BIGINT - 605)) | (1L << (DECRYPT_DATAKEY_BIT - 605)) | (1L << (DECRYPT_DATAKEY_CLOB - 605)) | (1L << (DECRYPT_DATAKEY_DBCLOB - 605)) | (1L << (DECRYPT_DATAKEY_DECIMAL - 605)) | (1L << (DECRYPT_DATAKEY_INTEGER - 605)) | (1L << (DECRYPT_DATAKEY_VARCHAR - 605)) | (1L << (DECRYPT_DATAKEY_VARGRAPHIC - 605)) | (1L << (DECRYPT_DB - 605)) | (1L << (DEGREES - 605)) | (1L << (DIFFERENCE - 605)) | (1L << (DIGITS - 605)) | (1L << (DOUBLE_PRECISION - 605)) | (1L << (DSN_XMLVALIDATE - 605)) | (1L << (EBCDIC_CHR - 605)) | (1L << (EBCDIC_STR - 605)) | (1L << (ENCRYPT_DATAKEY - 605)) | (1L << (ENCRYPT_TDES - 605)) | (1L << (EXP - 605)) | (1L << (EXTRACT - 605)) | (1L << (FLOAT - 605)) | (1L << (FLOOR - 605)) | (1L << (GENERATE_UNIQUE - 605)) | (1L << (GENERATE_UNIQUE_BINARY - 605)) | (1L << (GETHINT - 605)) | (1L << (GETVARIABLE - 605)) | (1L << (GRAPHIC - 605)) | (1L << (GREATEST - 605)) | (1L << (HASH - 605)) | (1L << (HASH_CRC32 - 605)) | (1L << (HASH_MD5 - 605)) | (1L << (HASH_SHA1 - 605)) | (1L << (HASH_SHA256 - 605)) | (1L << (HEX - 605)) | (1L << (IDENTITY_VAL_LOCAL - 605)) | (1L << (IFNULL - 605)) | (1L << (INSTR - 605)) | (1L << (INT - 605)) | (1L << (INTEGER - 605)) | (1L << (JULIAN_DAY - 605)) | (1L << (LAST_DAY - 605)) | (1L << (LCASE - 605)) | (1L << (LEAST - 605)))) != 0) || ((((_la - 669)) & ~0x3f) == 0 && ((1L << (_la - 669)) & ((1L << (LENGTH - 669)) | (1L << (LN - 669)) | (1L << (LOCATE - 669)) | (1L << (LOCATE_IN_STRING - 669)) | (1L << (LOG10 - 669)) | (1L << (LOWER - 669)) | (1L << (LPAD - 669)) | (1L << (LTRIM - 669)) | (1L << (MAX - 669)) | (1L << (MAX_CARDINALITY - 669)) | (1L << (MIDNIGHT_SECONDS - 669)) | (1L << (MIN - 669)) | (1L << (MINUTE - 669)) | (1L << (MOD - 669)) | (1L << (MONTHS_BETWEEN - 669)) | (1L << (MQREAD - 669)) | (1L << (MQREADCLOB - 669)) | (1L << (MQRECEIVE - 669)) | (1L << (MQRECEIVECLOB - 669)) | (1L << (MQSEND - 669)) | (1L << (MULTIPLY_ALT - 669)) | (1L << (NEXT_DAY - 669)) | (1L << (NEXT_MONTH - 669)) | (1L << (NORMALIZE_DECFLOAT - 669)) | (1L << (NORMALIZE_STRING - 669)) | (1L << (NULLIF - 669)) | (1L << (NVL - 669)) | (1L << (OVERLAY - 669)) | (1L << (PACK - 669)) | (1L << (POSITION - 669)) | (1L << (POSSTR - 669)) | (1L << (POW - 669)) | (1L << (POWER - 669)) | (1L << (QUANTIZE - 669)) | (1L << (QUARTER - 669)) | (1L << (RADIANS - 669)) | (1L << (RAISE_ERROR - 669)) | (1L << (RAND - 669)) | (1L << (RANDOM - 669)) | (1L << (REAL - 669)) | (1L << (REGEXP_COUNT - 669)) | (1L << (REGEXP_INSTR - 669)) | (1L << (REGEXP_LIKE - 669)) | (1L << (REGEXP_REPLACE - 669)) | (1L << (REGEXP_SUBSTR - 669)) | (1L << (REPLACE - 669)) | (1L << (RID - 669)) | (1L << (ROUND - 669)) | (1L << (ROUND_TIMESTAMP - 669)) | (1L << (ROWID - 669)) | (1L << (RPAD - 669)) | (1L << (RTRIM - 669)) | (1L << (SCORE - 669)) | (1L << (SIGN - 669)) | (1L << (SIN - 669)) | (1L << (SINH - 669)) | (1L << (SMALLINT - 669)) | (1L << (SOAPHTTPC - 669)) | (1L << (SOAPHTTPNC - 669)) | (1L << (SOAPHTTPNV - 669)) | (1L << (SOAPHTTPV - 669)) | (1L << (SOUNDEX - 669)) | (1L << (SPACE - 669)) | (1L << (SQRT - 669)))) != 0) || ((((_la - 733)) & ~0x3f) == 0 && ((1L << (_la - 733)) & ((1L << (STRIP - 733)) | (1L << (STRLEFT - 733)) | (1L << (STRPOS - 733)) | (1L << (STRRIGHT - 733)) | (1L << (SUBSTR - 733)) | (1L << (SUBSTRING - 733)) | (1L << (TAN - 733)) | (1L << (TANH - 733)) | (1L << (TIME - 733)) | (1L << (TIMESTAMP - 733)) | (1L << (TIMESTAMPADD - 733)) | (1L << (TIMESTAMPDIFF - 733)) | (1L << (TIMESTAMP_FORMAT - 733)) | (1L << (TIMESTAMP_ISO - 733)) | (1L << (TIMESTAMP_TZ - 733)) | (1L << (TO_CHAR - 733)) | (1L << (TO_CLOB - 733)) | (1L << (TO_DATE - 733)) | (1L << (TO_NUMBER - 733)) | (1L << (TOTALORDER - 733)) | (1L << (TO_TIMESTAMP - 733)) | (1L << (TRANSLATE - 733)) | (1L << (TRIM - 733)) | (1L << (TRIM_ARRAY - 733)) | (1L << (TRUNC - 733)) | (1L << (TRUNC_TIMESTAMP - 733)) | (1L << (UCASE - 733)) | (1L << (UNICODE - 733)) | (1L << (UNICODE_STR - 733)) | (1L << (UNISTR - 733)) | (1L << (UPPER - 733)) | (1L << (VARBINARY - 733)) | (1L << (VARCHAR - 733)) | (1L << (VARCHAR9 - 733)) | (1L << (VARCHAR_BIT_FORMAT - 733)) | (1L << (VARCHAR_FORMAT - 733)) | (1L << (VARGRAPHIC - 733)) | (1L << (VERIFY_GROUP_FOR_USER - 733)) | (1L << (VERIFY_ROLE_FOR_USER - 733)) | (1L << (VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER - 733)) | (1L << (WEEK - 733)) | (1L << (WEEK_ISO - 733)) | (1L << (WRAP - 733)) | (1L << (XMLATTRIBUTES - 733)) | (1L << (XMLCOMMENT - 733)) | (1L << (XMLCONCAT - 733)) | (1L << (XMLDOCUMENT - 733)) | (1L << (XMLELEMENT - 733)) | (1L << (XMLFOREST - 733)) | (1L << (XMLMODIFY - 733)) | (1L << (XMLPARSE - 733)) | (1L << (XMLPI - 733)) | (1L << (XMLQUERY - 733)) | (1L << (XMLSERIALIZE - 733)) | (1L << (XMLTEXT - 733)) | (1L << (XMLXSROBJECTID - 733)) | (1L << (XSLTRANSFORM - 733)) | (1L << (CURRENT_ACCELERATOR - 733)) | (1L << (CURRENT_APPLICATION_COMPATIBILITY - 733)) | (1L << (CURRENT_APPLICATION_ENCODING_SCHEME - 733)) | (1L << (CURRENT_CLIENT_ACCTNG - 733)) | (1L << (CURRENT_CLIENT_APPLNAME - 733)) | (1L << (CURRENT_CLIENT_CORR_TOKEN - 733)) | (1L << (CURRENT_CLIENT_USERID - 733)))) != 0) || ((((_la - 797)) & ~0x3f) == 0 && ((1L << (_la - 797)) & ((1L << (CURRENT_CLIENT_WRKSTNNAME - 797)) | (1L << (CURRENT_DATE - 797)) | (1L << (CURRENT_DEBUG_MODE - 797)) | (1L << (CURRENT_DECFLOAT_ROUNDING_MODE - 797)) | (1L << (CURRENT_DEGREE - 797)) | (1L << (CURRENT_EXPLAIN_MODE - 797)) | (1L << (CURRENT_GET_ACCEL_ARCHIVE - 797)) | (1L << (CURRENT_LOCALE_LC_CTYPE - 797)) | (1L << (CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION - 797)) | (1L << (CURRENT_MEMBER - 797)) | (1L << (CURRENT_OPTIMIZATION_HINT - 797)) | (1L << (CURRENT_PACKAGE_PATH - 797)) | (1L << (CURRENT_PACKAGESET - 797)) | (1L << (CURRENT_PATH - 797)) | (1L << (CURRENT_PRECISION - 797)) | (1L << (CURRENT_QUERY_ACCELERATION - 797)) | (1L << (CURRENT_QUERY_ACCELERATION_WAITFORDATA - 797)) | (1L << (CURRENT_REFRESH_AGE - 797)) | (1L << (CURRENT_ROUTINE_VERSION - 797)) | (1L << (CURRENT_RULES - 797)) | (1L << (CURRENT_SCHEMA - 797)) | (1L << (CURRENT_SERVER - 797)) | (1L << (CURRENT_SQLID - 797)) | (1L << (CURRENT_TEMPORAL_BUSINESS_TIME - 797)) | (1L << (CURRENT_TEMPORAL_SYSTEM_TIME - 797)) | (1L << (CURRENT_TIME - 797)) | (1L << (CURRENT_TIMESTAMP - 797)) | (1L << (CURRENT_TIME_ZONE - 797)) | (1L << (ENCRYPTION_PASSWORD - 797)) | (1L << (SESSION_TIME_ZONE - 797)) | (1L << (SESSION_USER - 797)) | (1L << (USER - 797)) | (1L << (ADMIN_TASK_LIST - 797)) | (1L << (ADMIN_TASK_OUTPUT - 797)) | (1L << (ADMIN_TASK_STATUS - 797)) | (1L << (BLOCKING_THREADS - 797)) | (1L << (MQREADALL - 797)) | (1L << (MQREADALLCLOB - 797)) | (1L << (MQRECEIVEALL - 797)) | (1L << (MQRECEIVEALLCLOB - 797)) | (1L << (XMLTABLE - 797)) | (1L << (SQLIDENTIFIER - 797)))) != 0)) {
				{
				setState(1306);
				parameterDeclaration1();
				setState(1311);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1307);
					match(COMMA);
					setState(1308);
					parameterDeclaration1();
					}
					}
					setState(1313);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(1316);
			match(RPAREN);
			setState(1318); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1317);
				createFunctionStatementSourcedOptions();
				}
				}
				setState(1320); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 210)) & ~0x3f) == 0 && ((1L << (_la - 210)) & ((1L << (PARAMETER - 210)) | (1L << (RETURNS - 210)) | (1L << (SOURCE - 210)) | (1L << (SPECIFIC - 210)))) != 0) );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFunctionStatementInlineSqlScalarContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DB2zSQLParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(DB2zSQLParser.FUNCTION, 0); }
		public FunctionNameContext functionName() {
			return getRuleContext(FunctionNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<CreateFunctionStatementInlineSqlScalarOptionsContext> createFunctionStatementInlineSqlScalarOptions() {
			return getRuleContexts(CreateFunctionStatementInlineSqlScalarOptionsContext.class);
		}
		public CreateFunctionStatementInlineSqlScalarOptionsContext createFunctionStatementInlineSqlScalarOptions(int i) {
			return getRuleContext(CreateFunctionStatementInlineSqlScalarOptionsContext.class,i);
		}
		public List<ParameterDeclaration2Context> parameterDeclaration2() {
			return getRuleContexts(ParameterDeclaration2Context.class);
		}
		public ParameterDeclaration2Context parameterDeclaration2(int i) {
			return getRuleContext(ParameterDeclaration2Context.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public CreateFunctionStatementInlineSqlScalarContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunctionStatementInlineSqlScalar; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateFunctionStatementInlineSqlScalar(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateFunctionStatementInlineSqlScalar(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateFunctionStatementInlineSqlScalar(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFunctionStatementInlineSqlScalarContext createFunctionStatementInlineSqlScalar() throws RecognitionException {
		CreateFunctionStatementInlineSqlScalarContext _localctx = new CreateFunctionStatementInlineSqlScalarContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_createFunctionStatementInlineSqlScalar);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1322);
			match(CREATE);
			setState(1323);
			match(FUNCTION);
			setState(1324);
			functionName();
			setState(1325);
			match(LPAREN);
			{
			setState(1334);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 29)) & ~0x3f) == 0 && ((1L << (_la - 29)) & ((1L << (ADD - 29)) | (1L << (AFTER - 29)) | (1L << (ALL - 29)) | (1L << (ALLOCATE - 29)) | (1L << (ALLOW - 29)) | (1L << (ALTER - 29)) | (1L << (ALTERAND - 29)) | (1L << (ANY - 29)) | (1L << (ARRAY - 29)) | (1L << (ARRAY_EXISTS - 29)) | (1L << (AS - 29)) | (1L << (ASENSITIVE - 29)) | (1L << (ASSOCIATE - 29)) | (1L << (ASUTIME - 29)) | (1L << (AT - 29)) | (1L << (AUDIT - 29)) | (1L << (AUX - 29)) | (1L << (AUXILIARY - 29)) | (1L << (BEFORE - 29)) | (1L << (BEGIN - 29)) | (1L << (BETWEEN - 29)) | (1L << (BUFFERPOOL - 29)) | (1L << (BY - 29)) | (1L << (CALL - 29)) | (1L << (CAPTURE - 29)) | (1L << (CASCADED - 29)) | (1L << (CASE - 29)) | (1L << (CAST - 29)) | (1L << (CCSID - 29)) | (1L << (CHAR - 29)) | (1L << (CHARACTER - 29)) | (1L << (CHECK - 29)) | (1L << (CLONE - 29)) | (1L << (CLOSE - 29)) | (1L << (CLUSTER - 29)) | (1L << (COLLECTION - 29)) | (1L << (COLLID - 29)) | (1L << (COLUMN - 29)) | (1L << (COMMENT - 29)) | (1L << (COMMIT - 29)) | (1L << (CONCAT - 29)) | (1L << (CONDITION - 29)) | (1L << (CONNECT - 29)) | (1L << (CONNECTION - 29)) | (1L << (CONSTRAINT - 29)) | (1L << (CONTAINS - 29)) | (1L << (CONTENT - 29)) | (1L << (CONTINUE - 29)) | (1L << (CREATE - 29)) | (1L << (CUBE - 29)) | (1L << (CURRENT - 29)) | (1L << (CURRENT_LC_CTYPE - 29)) | (1L << (CURRVAL - 29)) | (1L << (CURSOR - 29)) | (1L << (DATA - 29)) | (1L << (DATABASE - 29)) | (1L << (DAY - 29)) | (1L << (DAYS - 29)) | (1L << (DBINFO - 29)) | (1L << (DECLARE - 29)) | (1L << (DEFAULT - 29)) | (1L << (DELETE - 29)) | (1L << (DESCRIPTOR - 29)) | (1L << (DETERMINISTIC - 29)))) != 0) || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (DISABLE - 93)) | (1L << (DISALLOW - 93)) | (1L << (DISTINCT - 93)) | (1L << (DO - 93)) | (1L << (DOCUMENT - 93)) | (1L << (DOUBLE - 93)) | (1L << (DROP - 93)) | (1L << (DSSIZE - 93)) | (1L << (DYNAMIC - 93)) | (1L << (EDITPROC - 93)) | (1L << (ELSE - 93)) | (1L << (ELSEIF - 93)) | (1L << (ENCODING - 93)) | (1L << (ENCRYPTION - 93)) | (1L << (END - 93)) | (1L << (END_EXEC - 93)) | (1L << (ENDING - 93)) | (1L << (ERASE - 93)) | (1L << (ESCAPE - 93)) | (1L << (EXCEPT - 93)) | (1L << (EXCEPTION - 93)) | (1L << (EXEC_SQL - 93)) | (1L << (EXECUTE - 93)) | (1L << (EXISTS - 93)) | (1L << (EXIT - 93)) | (1L << (EXPLAIN - 93)) | (1L << (EXTERNAL - 93)) | (1L << (FENCED - 93)) | (1L << (FETCH - 93)) | (1L << (FIELDPROC - 93)) | (1L << (FINAL - 93)) | (1L << (FIRST - 93)) | (1L << (FOR - 93)) | (1L << (FREE - 93)) | (1L << (FROM - 93)) | (1L << (FULL - 93)) | (1L << (FUNCTION - 93)) | (1L << (GENERATED - 93)) | (1L << (GET - 93)) | (1L << (GLOBAL - 93)) | (1L << (GO - 93)) | (1L << (GOTO - 93)) | (1L << (GRANT - 93)) | (1L << (GROUP - 93)) | (1L << (HANDLER - 93)) | (1L << (HAVING - 93)) | (1L << (HOLD - 93)) | (1L << (HOUR - 93)) | (1L << (HOURS - 93)) | (1L << (IF - 93)) | (1L << (IMMEDIATE - 93)) | (1L << (IN - 93)) | (1L << (INCLUSIVE - 93)) | (1L << (INDEX - 93)) | (1L << (INDEXBP - 93)) | (1L << (INHERIT - 93)) | (1L << (INNER - 93)) | (1L << (INOUT - 93)) | (1L << (INSENSITIVE - 93)) | (1L << (INSERT - 93)) | (1L << (INTERSECT - 93)) | (1L << (INTO - 93)) | (1L << (IS - 93)) | (1L << (ISOBID - 93)))) != 0) || ((((_la - 157)) & ~0x3f) == 0 && ((1L << (_la - 157)) & ((1L << (ITERATE - 157)) | (1L << (JAR - 157)) | (1L << (JOIN - 157)) | (1L << (KEEP - 157)) | (1L << (KEY - 157)) | (1L << (LABEL - 157)) | (1L << (LANGUAGE - 157)) | (1L << (LAST - 157)) | (1L << (LC_CTYPE - 157)) | (1L << (LEAVE - 157)) | (1L << (LEFT - 157)) | (1L << (LIKE - 157)) | (1L << (LIMIT - 157)) | (1L << (LOCAL - 157)) | (1L << (LOCALE - 157)) | (1L << (LOCATOR - 157)) | (1L << (LOCATORS - 157)) | (1L << (LOCK - 157)) | (1L << (LOCKMAX - 157)) | (1L << (LOCKSIZE - 157)) | (1L << (LONG - 157)) | (1L << (LOOP - 157)) | (1L << (MAINTAINED - 157)) | (1L << (MATERIALIZED - 157)) | (1L << (MICROSECOND - 157)) | (1L << (MICROSECONDS - 157)) | (1L << (MODIFIES - 157)) | (1L << (MONTH - 157)) | (1L << (MONTHS - 157)) | (1L << (NEXT - 157)) | (1L << (NEXTVAL - 157)) | (1L << (NO - 157)) | (1L << (NONE - 157)) | (1L << (NOT - 157)) | (1L << (NULL - 157)) | (1L << (NULLS - 157)) | (1L << (NUMPARTS - 157)) | (1L << (OBID - 157)) | (1L << (OF - 157)) | (1L << (OFFSET - 157)) | (1L << (OLD - 157)) | (1L << (ON - 157)) | (1L << (OPEN - 157)) | (1L << (OPTIMIZATION - 157)) | (1L << (OPTIMIZE - 157)) | (1L << (OR - 157)) | (1L << (ORDER - 157)) | (1L << (ORGANIZATION - 157)) | (1L << (OUT - 157)) | (1L << (OUTER - 157)) | (1L << (PACKAGE - 157)) | (1L << (PADDED - 157)) | (1L << (PARAMETER - 157)) | (1L << (PART - 157)) | (1L << (PARTITION - 157)) | (1L << (PARTITIONED - 157)) | (1L << (PARTITIONING - 157)) | (1L << (PATH - 157)) | (1L << (PERIOD - 157)) | (1L << (PIECESIZE - 157)) | (1L << (PLAN - 157)) | (1L << (PRECISION - 157)) | (1L << (PREPARE - 157)))) != 0) || ((((_la - 221)) & ~0x3f) == 0 && ((1L << (_la - 221)) & ((1L << (PREVVAL - 221)) | (1L << (PRIOR - 221)) | (1L << (PRIQTY - 221)) | (1L << (PRIVILEGES - 221)) | (1L << (PROCEDURE - 221)) | (1L << (PROGRAM - 221)) | (1L << (PSID - 221)) | (1L << (PUBLIC - 221)) | (1L << (QUERY - 221)) | (1L << (QUERYNO - 221)) | (1L << (READS - 221)) | (1L << (REFERENCES - 221)) | (1L << (REFRESH - 221)) | (1L << (RELEASE - 221)) | (1L << (RENAME - 221)) | (1L << (REPEAT - 221)) | (1L << (RESIGNAL - 221)) | (1L << (RESTRICT - 221)) | (1L << (RESULT - 221)) | (1L << (RESULT_SET_LOCATOR - 221)) | (1L << (RETURN - 221)) | (1L << (RETURNS - 221)) | (1L << (REVOKE - 221)) | (1L << (RIGHT - 221)) | (1L << (ROLE - 221)) | (1L << (ROLLBACK - 221)) | (1L << (ROLLUP - 221)) | (1L << (ROUND_CEILING - 221)) | (1L << (ROUND_DOWN - 221)) | (1L << (ROUND_FLOOR - 221)) | (1L << (ROUND_HALF_DOWN - 221)) | (1L << (ROUND_HALF_EVEN - 221)) | (1L << (ROUND_HALF_UP - 221)) | (1L << (ROUND_UP - 221)) | (1L << (ROW - 221)) | (1L << (ROWSET - 221)) | (1L << (RUN - 221)) | (1L << (SAVEPOINT - 221)) | (1L << (SCHEMA - 221)) | (1L << (SCRATCHPAD - 221)) | (1L << (SECOND - 221)) | (1L << (SECONDS - 221)) | (1L << (SECQTY - 221)) | (1L << (SECURITY - 221)) | (1L << (SELECT - 221)) | (1L << (SENSITIVE - 221)) | (1L << (SEQUENCE - 221)) | (1L << (SET - 221)) | (1L << (SIGNAL - 221)) | (1L << (SIMPLE - 221)) | (1L << (SOME - 221)) | (1L << (SOURCE - 221)) | (1L << (SPECIFIC - 221)) | (1L << (STANDARD - 221)) | (1L << (STATEMENT - 221)) | (1L << (STATIC - 221)) | (1L << (STAY - 221)) | (1L << (STOGROUP - 221)) | (1L << (STORES - 221)) | (1L << (STYLE - 221)) | (1L << (SUMMARY - 221)) | (1L << (SYNONYM - 221)) | (1L << (SYSDATE - 221)) | (1L << (SYSTEM - 221)))) != 0) || ((((_la - 285)) & ~0x3f) == 0 && ((1L << (_la - 285)) & ((1L << (SYSTIMESTAMP - 285)) | (1L << (TABLE - 285)) | (1L << (TABLESPACE - 285)) | (1L << (THEN - 285)) | (1L << (TO - 285)) | (1L << (TRIGGER - 285)) | (1L << (TRUNCATE - 285)) | (1L << (TYPE - 285)) | (1L << (UNDO - 285)) | (1L << (UNION - 285)) | (1L << (UNIQUE - 285)) | (1L << (UNTIL - 285)) | (1L << (UPDATE - 285)) | (1L << (USING - 285)) | (1L << (VALIDPROC - 285)) | (1L << (VALUE - 285)) | (1L << (VALUES - 285)) | (1L << (VARIABLE - 285)) | (1L << (VARIANT - 285)) | (1L << (VCAT - 285)) | (1L << (VERSIONING - 285)) | (1L << (VIEW - 285)) | (1L << (VOLATILE - 285)) | (1L << (VOLUMES - 285)) | (1L << (WHEN - 285)) | (1L << (WHENEVER - 285)) | (1L << (WHERE - 285)) | (1L << (WHILE - 285)) | (1L << (WITH - 285)) | (1L << (WLM - 285)) | (1L << (XMLCAST - 285)) | (1L << (XMLEXISTS - 285)) | (1L << (XMLNAMESPACES - 285)) | (1L << (YEAR - 285)) | (1L << (YEARS - 285)) | (1L << (ZONE - 285)) | (1L << (AND - 285)) | (1L << (ARRAY_AGG - 285)) | (1L << (ASC - 285)) | (1L << (AVG - 285)) | (1L << (BIT - 285)) | (1L << (CHANGE - 285)) | (1L << (CODEUNITS16 - 285)) | (1L << (CODEUNITS32 - 285)) | (1L << (CORR - 285)) | (1L << (CORRELATION - 285)) | (1L << (COUNT - 285)) | (1L << (COUNT_BIG - 285)) | (1L << (COVAR - 285)) | (1L << (COVARIANCE - 285)) | (1L << (COVARIANCE_SAMP - 285)) | (1L << (COVAR_POP - 285)) | (1L << (COVAR_SAMP - 285)) | (1L << (CS - 285)) | (1L << (CUME_DIST - 285)) | (1L << (DENSE_RANK - 285)) | (1L << (DESC - 285)) | (1L << (EBCDIC - 285)) | (1L << (EXCLUSIVE - 285)) | (1L << (FIRST_VALUE - 285)) | (1L << (FOLLOWING - 285)) | (1L << (GROUPING - 285)) | (1L << (IGNORE - 285)) | (1L << (INDICATOR - 285)))) != 0) || ((((_la - 349)) & ~0x3f) == 0 && ((1L << (_la - 349)) & ((1L << (INPUT - 349)) | (1L << (ISNULL - 349)) | (1L << (LAG - 349)) | (1L << (LARGE - 349)) | (1L << (LAST_VALUE - 349)) | (1L << (LEAD - 349)) | (1L << (LISTAGG - 349)) | (1L << (LOCKED - 349)) | (1L << (LOCKS - 349)) | (1L << (MEDIAN - 349)) | (1L << (MINUTES - 349)) | (1L << (MIXED - 349)) | (1L << (NOTNULL - 349)) | (1L << (NTH_VALUE - 349)) | (1L << (NTILE - 349)) | (1L << (NUMERIC - 349)) | (1L << (OBJECT - 349)) | (1L << (OCTETS - 349)) | (1L << (ONLY - 349)) | (1L << (OVER - 349)) | (1L << (PASSING - 349)) | (1L << (PERCENTILE_CONT - 349)) | (1L << (PERCENTILE_DISC - 349)) | (1L << (PERCENT_RANK - 349)) | (1L << (PRECEDING - 349)) | (1L << (PREVIOUS - 349)) | (1L << (RANGE - 349)) | (1L << (RANK - 349)) | (1L << (RATIO_TO_REPORT - 349)) | (1L << (READ - 349)) | (1L << (REF - 349)) | (1L << (REGR_AVGX - 349)) | (1L << (REGR_AVGY - 349)) | (1L << (REGR_COUNT - 349)) | (1L << (REGR_ICPT - 349)) | (1L << (REGR_INTERCEPT - 349)) | (1L << (REGR_R2 - 349)) | (1L << (REGR_SLOPE - 349)) | (1L << (REGR_SXX - 349)) | (1L << (REGR_SXY - 349)) | (1L << (REGR_SYY - 349)) | (1L << (RESPECT - 349)) | (1L << (ROW_NUMBER - 349)) | (1L << (ROWS - 349)) | (1L << (RR - 349)) | (1L << (RS - 349)) | (1L << (SBCS - 349)) | (1L << (SELECTIVITY - 349)) | (1L << (SETS - 349)) | (1L << (SHARE - 349)) | (1L << (SKIP_ - 349)) | (1L << (STDDEV - 349)) | (1L << (STDDEV_POP - 349)) | (1L << (STDDEV_SAMP - 349)) | (1L << (SUM - 349)) | (1L << (TOKEN - 349)) | (1L << (UNBOUNDED - 349)) | (1L << (UNPACK - 349)) | (1L << (UR - 349)) | (1L << (USE - 349)) | (1L << (VAR - 349)) | (1L << (VARIANCE - 349)) | (1L << (VARIANCE_SAMP - 349)) | (1L << (VAR_POP - 349)))) != 0) || ((((_la - 413)) & ~0x3f) == 0 && ((1L << (_la - 413)) & ((1L << (VAR_SAMP - 413)) | (1L << (VARYING - 413)) | (1L << (WITHOUT - 413)) | (1L << (XML - 413)) | (1L << (XMLAGG - 413)) | (1L << (COLUMNS - 413)) | (1L << (SQLID - 413)) | (1L << (ORDINALITY - 413)) | (1L << (SYSTEM_TIME - 413)) | (1L << (BUSINESS_TIME - 413)) | (1L << (MULTIPLIER - 413)) | (1L << (UNNEST - 413)) | (1L << (CROSS - 413)) | (1L << (CALLER - 413)) | (1L << (CLIENT - 413)) | (1L << (POSITIONING - 413)) | (1L << (SCROLL - 413)) | (1L << (ACTION - 413)) | (1L << (ASSEMBLE - 413)) | (1L << (C_ - 413)) | (1L << (CALLED - 413)) | (1L << (COBOL - 413)) | (1L << (DB2 - 413)) | (1L << (DEFINER - 413)) | (1L << (DISPATCH - 413)) | (1L << (ENVIRONMENT - 413)) | (1L << (FAILURE - 413)) | (1L << (FAILURES - 413)) | (1L << (JAVA - 413)) | (1L << (MAIN - 413)) | (1L << (NAME - 413)) | (1L << (OPTIONS - 413)) | (1L << (PARALLEL - 413)) | (1L << (PLI - 413)) | (1L << (REGISTERS - 413)) | (1L << (RESIDENT - 413)) | (1L << (SECURED - 413)) | (1L << (SPECIAL - 413)) | (1L << (SQL - 413)) | (1L << (STOP - 413)) | (1L << (SUB - 413)) | (1L << (YES - 413)) | (1L << (APPLICATION - 413)) | (1L << (CHANGED - 413)) | (1L << (COMPATIBILITY - 413)) | (1L << (COMPRESS - 413)) | (1L << (COPY - 413)) | (1L << (FREEPAGE - 413)) | (1L << (GBPCACHE - 413)) | (1L << (INCLUDE - 413)) | (1L << (MAXVALUE - 413)) | (1L << (MINVALUE - 413)) | (1L << (PCTFREE - 413)) | (1L << (REGENERATE - 413)) | (1L << (MASK - 413)) | (1L << (ENABLE - 413)) | (1L << (PERMISSION - 413)) | (1L << (ATOMIC - 413)) | (1L << (SQLEXCEPTION - 413)) | (1L << (MERGE - 413)) | (1L << (MATCHED - 413)) | (1L << (SQLSTATE - 413)) | (1L << (MESSAGE_TEXT - 413)) | (1L << (OVERRIDING - 413)))) != 0) || ((((_la - 477)) & ~0x3f) == 0 && ((1L << (_la - 477)) & ((1L << (PORTION - 477)) | (1L << (DB2SQL - 477)) | (1L << (DEBUG - 477)) | (1L << (GENERAL - 477)) | (1L << (MODE_ - 477)) | (1L << (REXX - 477)) | (1L << (CACHE - 477)) | (1L << (CYCLE - 477)) | (1L << (INCREMENT - 477)) | (1L << (RESTART - 477)) | (1L << (DATACLAS - 477)) | (1L << (MGMTCLAS - 477)) | (1L << (REMOVE - 477)) | (1L << (STORCLAS - 477)) | (1L << (ACCESS - 477)) | (1L << (ACTIVATE - 477)) | (1L << (ALWAYS - 477)) | (1L << (APPEND - 477)) | (1L << (ARCHIVE - 477)) | (1L << (BUSINESS - 477)) | (1L << (CASCADE - 477)) | (1L << (CHANGES - 477)) | (1L << (CONTROL - 477)) | (1L << (DEACTIVATE - 477)) | (1L << (DEFERRED - 477)) | (1L << (EACH - 477)) | (1L << (ENFORCED - 477)) | (1L << (EXTRA - 477)) | (1L << (FOREIGN - 477)) | (1L << (HIDDEN_ - 477)) | (1L << (HISTORY - 477)) | (1L << (ID - 477)) | (1L << (IDENTITY - 477)) | (1L << (IMPLICITLY - 477)) | (1L << (INITIALLY - 477)) | (1L << (INLINE - 477)) | (1L << (OPERATION - 477)) | (1L << (ORGANIZE - 477)) | (1L << (OVERLAPS - 477)) | (1L << (PACKAGE_NAME - 477)) | (1L << (PACKAGE_SCHEMA - 477)) | (1L << (PACKAGE_VERSION - 477)) | (1L << (PRIMARY - 477)) | (1L << (RESET - 477)) | (1L << (ROTATE - 477)) | (1L << (START - 477)) | (1L << (SYSIBM - 477)) | (1L << (TRANSACTION - 477)) | (1L << (XMLSCHEMA - 477)) | (1L << (ELEMENT - 477)) | (1L << (URL - 477)) | (1L << (NAMESPACE - 477)) | (1L << (LOCATION - 477)) | (1L << (SYSXSR - 477)) | (1L << (ALGORITHM - 477)) | (1L << (FIXEDLENGTH - 477)) | (1L << (HUFFMAN - 477)) | (1L << (LOB - 477)) | (1L << (LOG - 477)) | (1L << (LOGGED - 477)) | (1L << (MAXPARTITIONS - 477)) | (1L << (MAXROWS - 477)) | (1L << (MEMBER - 477)) | (1L << (MOVE - 477)))) != 0) || ((((_la - 541)) & ~0x3f) == 0 && ((1L << (_la - 541)) & ((1L << (PAGE - 541)) | (1L << (PAGENUM - 541)) | (1L << (PENDING - 541)) | (1L << (RELATIVE - 541)) | (1L << (SEGSIZE - 541)) | (1L << (TRACKMOD - 541)) | (1L << (ADDRESS - 541)) | (1L << (ATTRIBUTES - 541)) | (1L << (AUTHENTICATION - 541)) | (1L << (AUTHID - 541)) | (1L << (CONTEXT - 541)) | (1L << (JOBNAME - 541)) | (1L << (OWNER - 541)) | (1L << (PROFILE - 541)) | (1L << (QUALIFIER - 541)) | (1L << (SERVAUTH - 541)) | (1L << (TRUSTED - 541)) | (1L << (SECTION - 541)) | (1L << (ACTIVE - 541)) | (1L << (VERSION - 541)) | (1L << (ALIAS - 541)) | (1L << (WORK - 541)) | (1L << (WORKFILE - 541)) | (1L << (SYSDEFLT - 541)) | (1L << (NULTERM - 541)) | (1L << (STRUCTURE - 541)) | (1L << (GENERIC - 541)) | (1L << (ABS - 541)) | (1L << (ABSVAL - 541)) | (1L << (ACOS - 541)) | (1L << (ADD_DAYS - 541)) | (1L << (ADD_MONTHS - 541)) | (1L << (ARRAY_DELETE - 541)) | (1L << (ARRAY_FIRST - 541)) | (1L << (ARRAY_LAST - 541)) | (1L << (ARRAY_NEXT - 541)) | (1L << (ARRAY_PRIOR - 541)) | (1L << (ARRAY_TRIM - 541)) | (1L << (ASCII - 541)) | (1L << (ASCII_CHR - 541)) | (1L << (ASCIISTR - 541)) | (1L << (ASCII_STR - 541)) | (1L << (ASIN - 541)) | (1L << (ATAN - 541)) | (1L << (ATAN2 - 541)) | (1L << (ATANH - 541)) | (1L << (BIGINT - 541)) | (1L << (BINARY - 541)) | (1L << (BITAND - 541)) | (1L << (BITANDNOT - 541)) | (1L << (BITNOT - 541)) | (1L << (BITOR - 541)) | (1L << (BITXOR - 541)) | (1L << (BLOB - 541)) | (1L << (BTRIM - 541)) | (1L << (CARDINALITY - 541)) | (1L << (CCSID_ENCODING - 541)) | (1L << (CEIL - 541)) | (1L << (CEILING - 541)) | (1L << (CHAR9 - 541)) | (1L << (CHARACTER_LENGTH - 541)) | (1L << (CHAR_LENGTH - 541)) | (1L << (CHR - 541)) | (1L << (CLOB - 541)))) != 0) || ((((_la - 605)) & ~0x3f) == 0 && ((1L << (_la - 605)) & ((1L << (COALESCE - 605)) | (1L << (COLLATION_KEY - 605)) | (1L << (COMPARE_DECFLOAT - 605)) | (1L << (COS - 605)) | (1L << (COSH - 605)) | (1L << (DATE - 605)) | (1L << (DAYOFMONTH - 605)) | (1L << (DAYOFWEEK - 605)) | (1L << (DAYOFWEEK_ISO - 605)) | (1L << (DAYOFYEAR - 605)) | (1L << (DAYS_BETWEEN - 605)) | (1L << (DBCLOB - 605)) | (1L << (DEC - 605)) | (1L << (DECFLOAT - 605)) | (1L << (DECFLOAT_FORMAT - 605)) | (1L << (DECFLOAT_SORTKEY - 605)) | (1L << (DECIMAL - 605)) | (1L << (DECODE - 605)) | (1L << (DECRYPT_BINARY - 605)) | (1L << (DECRYPT_BIT - 605)) | (1L << (DECRYPT_CHAR - 605)) | (1L << (DECRYPT_DATAKEY_BIGINT - 605)) | (1L << (DECRYPT_DATAKEY_BIT - 605)) | (1L << (DECRYPT_DATAKEY_CLOB - 605)) | (1L << (DECRYPT_DATAKEY_DBCLOB - 605)) | (1L << (DECRYPT_DATAKEY_DECIMAL - 605)) | (1L << (DECRYPT_DATAKEY_INTEGER - 605)) | (1L << (DECRYPT_DATAKEY_VARCHAR - 605)) | (1L << (DECRYPT_DATAKEY_VARGRAPHIC - 605)) | (1L << (DECRYPT_DB - 605)) | (1L << (DEGREES - 605)) | (1L << (DIFFERENCE - 605)) | (1L << (DIGITS - 605)) | (1L << (DOUBLE_PRECISION - 605)) | (1L << (DSN_XMLVALIDATE - 605)) | (1L << (EBCDIC_CHR - 605)) | (1L << (EBCDIC_STR - 605)) | (1L << (ENCRYPT_DATAKEY - 605)) | (1L << (ENCRYPT_TDES - 605)) | (1L << (EXP - 605)) | (1L << (EXTRACT - 605)) | (1L << (FLOAT - 605)) | (1L << (FLOOR - 605)) | (1L << (GENERATE_UNIQUE - 605)) | (1L << (GENERATE_UNIQUE_BINARY - 605)) | (1L << (GETHINT - 605)) | (1L << (GETVARIABLE - 605)) | (1L << (GRAPHIC - 605)) | (1L << (GREATEST - 605)) | (1L << (HASH - 605)) | (1L << (HASH_CRC32 - 605)) | (1L << (HASH_MD5 - 605)) | (1L << (HASH_SHA1 - 605)) | (1L << (HASH_SHA256 - 605)) | (1L << (HEX - 605)) | (1L << (IDENTITY_VAL_LOCAL - 605)) | (1L << (IFNULL - 605)) | (1L << (INSTR - 605)) | (1L << (INT - 605)) | (1L << (INTEGER - 605)) | (1L << (JULIAN_DAY - 605)) | (1L << (LAST_DAY - 605)) | (1L << (LCASE - 605)) | (1L << (LEAST - 605)))) != 0) || ((((_la - 669)) & ~0x3f) == 0 && ((1L << (_la - 669)) & ((1L << (LENGTH - 669)) | (1L << (LN - 669)) | (1L << (LOCATE - 669)) | (1L << (LOCATE_IN_STRING - 669)) | (1L << (LOG10 - 669)) | (1L << (LOWER - 669)) | (1L << (LPAD - 669)) | (1L << (LTRIM - 669)) | (1L << (MAX - 669)) | (1L << (MAX_CARDINALITY - 669)) | (1L << (MIDNIGHT_SECONDS - 669)) | (1L << (MIN - 669)) | (1L << (MINUTE - 669)) | (1L << (MOD - 669)) | (1L << (MONTHS_BETWEEN - 669)) | (1L << (MQREAD - 669)) | (1L << (MQREADCLOB - 669)) | (1L << (MQRECEIVE - 669)) | (1L << (MQRECEIVECLOB - 669)) | (1L << (MQSEND - 669)) | (1L << (MULTIPLY_ALT - 669)) | (1L << (NEXT_DAY - 669)) | (1L << (NEXT_MONTH - 669)) | (1L << (NORMALIZE_DECFLOAT - 669)) | (1L << (NORMALIZE_STRING - 669)) | (1L << (NULLIF - 669)) | (1L << (NVL - 669)) | (1L << (OVERLAY - 669)) | (1L << (PACK - 669)) | (1L << (POSITION - 669)) | (1L << (POSSTR - 669)) | (1L << (POW - 669)) | (1L << (POWER - 669)) | (1L << (QUANTIZE - 669)) | (1L << (QUARTER - 669)) | (1L << (RADIANS - 669)) | (1L << (RAISE_ERROR - 669)) | (1L << (RAND - 669)) | (1L << (RANDOM - 669)) | (1L << (REAL - 669)) | (1L << (REGEXP_COUNT - 669)) | (1L << (REGEXP_INSTR - 669)) | (1L << (REGEXP_LIKE - 669)) | (1L << (REGEXP_REPLACE - 669)) | (1L << (REGEXP_SUBSTR - 669)) | (1L << (REPLACE - 669)) | (1L << (RID - 669)) | (1L << (ROUND - 669)) | (1L << (ROUND_TIMESTAMP - 669)) | (1L << (ROWID - 669)) | (1L << (RPAD - 669)) | (1L << (RTRIM - 669)) | (1L << (SCORE - 669)) | (1L << (SIGN - 669)) | (1L << (SIN - 669)) | (1L << (SINH - 669)) | (1L << (SMALLINT - 669)) | (1L << (SOAPHTTPC - 669)) | (1L << (SOAPHTTPNC - 669)) | (1L << (SOAPHTTPNV - 669)) | (1L << (SOAPHTTPV - 669)) | (1L << (SOUNDEX - 669)) | (1L << (SPACE - 669)) | (1L << (SQRT - 669)))) != 0) || ((((_la - 733)) & ~0x3f) == 0 && ((1L << (_la - 733)) & ((1L << (STRIP - 733)) | (1L << (STRLEFT - 733)) | (1L << (STRPOS - 733)) | (1L << (STRRIGHT - 733)) | (1L << (SUBSTR - 733)) | (1L << (SUBSTRING - 733)) | (1L << (TAN - 733)) | (1L << (TANH - 733)) | (1L << (TIME - 733)) | (1L << (TIMESTAMP - 733)) | (1L << (TIMESTAMPADD - 733)) | (1L << (TIMESTAMPDIFF - 733)) | (1L << (TIMESTAMP_FORMAT - 733)) | (1L << (TIMESTAMP_ISO - 733)) | (1L << (TIMESTAMP_TZ - 733)) | (1L << (TO_CHAR - 733)) | (1L << (TO_CLOB - 733)) | (1L << (TO_DATE - 733)) | (1L << (TO_NUMBER - 733)) | (1L << (TOTALORDER - 733)) | (1L << (TO_TIMESTAMP - 733)) | (1L << (TRANSLATE - 733)) | (1L << (TRIM - 733)) | (1L << (TRIM_ARRAY - 733)) | (1L << (TRUNC - 733)) | (1L << (TRUNC_TIMESTAMP - 733)) | (1L << (UCASE - 733)) | (1L << (UNICODE - 733)) | (1L << (UNICODE_STR - 733)) | (1L << (UNISTR - 733)) | (1L << (UPPER - 733)) | (1L << (VARBINARY - 733)) | (1L << (VARCHAR - 733)) | (1L << (VARCHAR9 - 733)) | (1L << (VARCHAR_BIT_FORMAT - 733)) | (1L << (VARCHAR_FORMAT - 733)) | (1L << (VARGRAPHIC - 733)) | (1L << (VERIFY_GROUP_FOR_USER - 733)) | (1L << (VERIFY_ROLE_FOR_USER - 733)) | (1L << (VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER - 733)) | (1L << (WEEK - 733)) | (1L << (WEEK_ISO - 733)) | (1L << (WRAP - 733)) | (1L << (XMLATTRIBUTES - 733)) | (1L << (XMLCOMMENT - 733)) | (1L << (XMLCONCAT - 733)) | (1L << (XMLDOCUMENT - 733)) | (1L << (XMLELEMENT - 733)) | (1L << (XMLFOREST - 733)) | (1L << (XMLMODIFY - 733)) | (1L << (XMLPARSE - 733)) | (1L << (XMLPI - 733)) | (1L << (XMLQUERY - 733)) | (1L << (XMLSERIALIZE - 733)) | (1L << (XMLTEXT - 733)) | (1L << (XMLXSROBJECTID - 733)) | (1L << (XSLTRANSFORM - 733)) | (1L << (CURRENT_ACCELERATOR - 733)) | (1L << (CURRENT_APPLICATION_COMPATIBILITY - 733)) | (1L << (CURRENT_APPLICATION_ENCODING_SCHEME - 733)) | (1L << (CURRENT_CLIENT_ACCTNG - 733)) | (1L << (CURRENT_CLIENT_APPLNAME - 733)) | (1L << (CURRENT_CLIENT_CORR_TOKEN - 733)) | (1L << (CURRENT_CLIENT_USERID - 733)))) != 0) || ((((_la - 797)) & ~0x3f) == 0 && ((1L << (_la - 797)) & ((1L << (CURRENT_CLIENT_WRKSTNNAME - 797)) | (1L << (CURRENT_DATE - 797)) | (1L << (CURRENT_DEBUG_MODE - 797)) | (1L << (CURRENT_DECFLOAT_ROUNDING_MODE - 797)) | (1L << (CURRENT_DEGREE - 797)) | (1L << (CURRENT_EXPLAIN_MODE - 797)) | (1L << (CURRENT_GET_ACCEL_ARCHIVE - 797)) | (1L << (CURRENT_LOCALE_LC_CTYPE - 797)) | (1L << (CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION - 797)) | (1L << (CURRENT_MEMBER - 797)) | (1L << (CURRENT_OPTIMIZATION_HINT - 797)) | (1L << (CURRENT_PACKAGE_PATH - 797)) | (1L << (CURRENT_PACKAGESET - 797)) | (1L << (CURRENT_PATH - 797)) | (1L << (CURRENT_PRECISION - 797)) | (1L << (CURRENT_QUERY_ACCELERATION - 797)) | (1L << (CURRENT_QUERY_ACCELERATION_WAITFORDATA - 797)) | (1L << (CURRENT_REFRESH_AGE - 797)) | (1L << (CURRENT_ROUTINE_VERSION - 797)) | (1L << (CURRENT_RULES - 797)) | (1L << (CURRENT_SCHEMA - 797)) | (1L << (CURRENT_SERVER - 797)) | (1L << (CURRENT_SQLID - 797)) | (1L << (CURRENT_TEMPORAL_BUSINESS_TIME - 797)) | (1L << (CURRENT_TEMPORAL_SYSTEM_TIME - 797)) | (1L << (CURRENT_TIME - 797)) | (1L << (CURRENT_TIMESTAMP - 797)) | (1L << (CURRENT_TIME_ZONE - 797)) | (1L << (ENCRYPTION_PASSWORD - 797)) | (1L << (SESSION_TIME_ZONE - 797)) | (1L << (SESSION_USER - 797)) | (1L << (USER - 797)) | (1L << (ADMIN_TASK_LIST - 797)) | (1L << (ADMIN_TASK_OUTPUT - 797)) | (1L << (ADMIN_TASK_STATUS - 797)) | (1L << (BLOCKING_THREADS - 797)) | (1L << (MQREADALL - 797)) | (1L << (MQREADALLCLOB - 797)) | (1L << (MQRECEIVEALL - 797)) | (1L << (MQRECEIVEALLCLOB - 797)) | (1L << (XMLTABLE - 797)) | (1L << (SQLIDENTIFIER - 797)))) != 0)) {
				{
				setState(1326);
				parameterDeclaration2();
				setState(1331);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1327);
					match(COMMA);
					setState(1328);
					parameterDeclaration2();
					}
					}
					setState(1333);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
			setState(1336);
			match(RPAREN);
			setState(1338); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1337);
				createFunctionStatementInlineSqlScalarOptions();
				}
				}
				setState(1340); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (CONTAINS - 74)) | (1L << (DETERMINISTIC - 74)) | (1L << (EXTERNAL - 74)))) != 0) || ((((_la - 189)) & ~0x3f) == 0 && ((1L << (_la - 189)) & ((1L << (NO - 189)) | (1L << (NOT - 189)) | (1L << (NULL - 189)) | (1L << (PARAMETER - 189)) | (1L << (READS - 189)) | (1L << (RETURN - 189)) | (1L << (RETURNS - 189)))) != 0) || ((((_la - 273)) & ~0x3f) == 0 && ((1L << (_la - 273)) & ((1L << (SPECIFIC - 273)) | (1L << (STATIC - 273)) | (1L << (VARIANT - 273)))) != 0) || _la==CALLED || _la==SECURED );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterDeclaration1Context extends ParserRuleContext {
		public ParameterNameContext parameterName() {
			return getRuleContext(ParameterNameContext.class,0);
		}
		public FunctionDataTypeContext functionDataType() {
			return getRuleContext(FunctionDataTypeContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public TerminalNode LIKE() { return getToken(DB2zSQLParser.LIKE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode LOCATOR() { return getToken(DB2zSQLParser.LOCATOR, 0); }
		public ParameterDeclaration1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterDeclaration1; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterParameterDeclaration1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitParameterDeclaration1(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitParameterDeclaration1(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParameterDeclaration1Context parameterDeclaration1() throws RecognitionException {
		ParameterDeclaration1Context _localctx = new ParameterDeclaration1Context(_ctx, getState());
		enterRule(_localctx, 84, RULE_parameterDeclaration1);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1343);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,82,_ctx) ) {
			case 1:
				{
				setState(1342);
				parameterName();
				}
				break;
			}
			setState(1357);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,85,_ctx) ) {
			case 1:
				{
				{
				setState(1345);
				functionDataType();
				setState(1348);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(1346);
					match(AS);
					setState(1347);
					match(LOCATOR);
					}
				}

				}
				}
				break;
			case 2:
				{
				{
				setState(1350);
				match(TABLE);
				setState(1351);
				match(LIKE);
				setState(1352);
				tableName();
				setState(1355);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(1353);
					match(AS);
					setState(1354);
					match(LOCATOR);
					}
				}

				}
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterDeclaration2Context extends ParserRuleContext {
		public ParameterNameContext parameterName() {
			return getRuleContext(ParameterNameContext.class,0);
		}
		public FunctionDataTypeContext functionDataType() {
			return getRuleContext(FunctionDataTypeContext.class,0);
		}
		public ParameterDeclaration2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterDeclaration2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterParameterDeclaration2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitParameterDeclaration2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitParameterDeclaration2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParameterDeclaration2Context parameterDeclaration2() throws RecognitionException {
		ParameterDeclaration2Context _localctx = new ParameterDeclaration2Context(_ctx, getState());
		enterRule(_localctx, 86, RULE_parameterDeclaration2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1359);
			parameterName();
			setState(1360);
			functionDataType();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFunctionStatementExternalScalarOptionsContext extends ParserRuleContext {
		public TerminalNode SPECIFIC() { return getToken(DB2zSQLParser.SPECIFIC, 0); }
		public TerminalNode RETURNS() { return getToken(DB2zSQLParser.RETURNS, 0); }
		public TerminalNode EXTERNAL() { return getToken(DB2zSQLParser.EXTERNAL, 0); }
		public TerminalNode LANGUAGE() { return getToken(DB2zSQLParser.LANGUAGE, 0); }
		public TerminalNode PARAMETER() { return getToken(DB2zSQLParser.PARAMETER, 0); }
		public TerminalNode STYLE() { return getToken(DB2zSQLParser.STYLE, 0); }
		public TerminalNode DETERMINISTIC() { return getToken(DB2zSQLParser.DETERMINISTIC, 0); }
		public TerminalNode VARIANT() { return getToken(DB2zSQLParser.VARIANT, 0); }
		public TerminalNode FENCED() { return getToken(DB2zSQLParser.FENCED, 0); }
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public List<TerminalNode> NULL() { return getTokens(DB2zSQLParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(DB2zSQLParser.NULL, i);
		}
		public TerminalNode INPUT() { return getToken(DB2zSQLParser.INPUT, 0); }
		public TerminalNode CALL() { return getToken(DB2zSQLParser.CALL, 0); }
		public TerminalNode ACTION() { return getToken(DB2zSQLParser.ACTION, 0); }
		public TerminalNode FINAL() { return getToken(DB2zSQLParser.FINAL, 0); }
		public TerminalNode PARALLEL() { return getToken(DB2zSQLParser.PARALLEL, 0); }
		public TerminalNode DBINFO() { return getToken(DB2zSQLParser.DBINFO, 0); }
		public TerminalNode CARDINALITY() { return getToken(DB2zSQLParser.CARDINALITY, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode WLM() { return getToken(DB2zSQLParser.WLM, 0); }
		public TerminalNode ENVIRONMENT() { return getToken(DB2zSQLParser.ENVIRONMENT, 0); }
		public TerminalNode ASUTIME() { return getToken(DB2zSQLParser.ASUTIME, 0); }
		public TerminalNode STAY() { return getToken(DB2zSQLParser.STAY, 0); }
		public TerminalNode RESIDENT() { return getToken(DB2zSQLParser.RESIDENT, 0); }
		public TerminalNode PROGRAM() { return getToken(DB2zSQLParser.PROGRAM, 0); }
		public TerminalNode TYPE() { return getToken(DB2zSQLParser.TYPE, 0); }
		public TerminalNode SECURITY() { return getToken(DB2zSQLParser.SECURITY, 0); }
		public TerminalNode RUN() { return getToken(DB2zSQLParser.RUN, 0); }
		public TerminalNode OPTIONS() { return getToken(DB2zSQLParser.OPTIONS, 0); }
		public RunTimeOptionsContext runTimeOptions() {
			return getRuleContext(RunTimeOptionsContext.class,0);
		}
		public TerminalNode SPECIAL() { return getToken(DB2zSQLParser.SPECIAL, 0); }
		public TerminalNode REGISTERS() { return getToken(DB2zSQLParser.REGISTERS, 0); }
		public TerminalNode STATIC() { return getToken(DB2zSQLParser.STATIC, 0); }
		public TerminalNode DISPATCH() { return getToken(DB2zSQLParser.DISPATCH, 0); }
		public TerminalNode SECURED() { return getToken(DB2zSQLParser.SECURED, 0); }
		public TerminalNode ASSEMBLE() { return getToken(DB2zSQLParser.ASSEMBLE, 0); }
		public TerminalNode C_() { return getToken(DB2zSQLParser.C_, 0); }
		public TerminalNode COBOL() { return getToken(DB2zSQLParser.COBOL, 0); }
		public TerminalNode JAVA() { return getToken(DB2zSQLParser.JAVA, 0); }
		public TerminalNode PLI() { return getToken(DB2zSQLParser.PLI, 0); }
		public TerminalNode SQL() { return getToken(DB2zSQLParser.SQL, 0); }
		public TerminalNode ALLOW() { return getToken(DB2zSQLParser.ALLOW, 0); }
		public TerminalNode DISALLOW() { return getToken(DB2zSQLParser.DISALLOW, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode YES() { return getToken(DB2zSQLParser.YES, 0); }
		public TerminalNode SUB() { return getToken(DB2zSQLParser.SUB, 0); }
		public TerminalNode MAIN() { return getToken(DB2zSQLParser.MAIN, 0); }
		public TerminalNode DB2() { return getToken(DB2zSQLParser.DB2, 0); }
		public TerminalNode USER() { return getToken(DB2zSQLParser.USER, 0); }
		public TerminalNode DEFINER() { return getToken(DB2zSQLParser.DEFINER, 0); }
		public TerminalNode INHERIT() { return getToken(DB2zSQLParser.INHERIT, 0); }
		public TerminalNode DEFAULT() { return getToken(DB2zSQLParser.DEFAULT, 0); }
		public SpecificNameContext specificName() {
			return getRuleContext(SpecificNameContext.class,0);
		}
		public TerminalNode CALLED() { return getToken(DB2zSQLParser.CALLED, 0); }
		public TerminalNode MODIFIES() { return getToken(DB2zSQLParser.MODIFIES, 0); }
		public TerminalNode DATA() { return getToken(DB2zSQLParser.DATA, 0); }
		public TerminalNode READS() { return getToken(DB2zSQLParser.READS, 0); }
		public TerminalNode CONTAINS() { return getToken(DB2zSQLParser.CONTAINS, 0); }
		public TerminalNode PACKAGE() { return getToken(DB2zSQLParser.PACKAGE, 0); }
		public TerminalNode PATH() { return getToken(DB2zSQLParser.PATH, 0); }
		public PackagePathContext packagePath() {
			return getRuleContext(PackagePathContext.class,0);
		}
		public TerminalNode SCRATCHPAD() { return getToken(DB2zSQLParser.SCRATCHPAD, 0); }
		public TerminalNode COLLID() { return getToken(DB2zSQLParser.COLLID, 0); }
		public CollectionIDContext collectionID() {
			return getRuleContext(CollectionIDContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode STOP() { return getToken(DB2zSQLParser.STOP, 0); }
		public TerminalNode AFTER() { return getToken(DB2zSQLParser.AFTER, 0); }
		public TerminalNode SYSTEM() { return getToken(DB2zSQLParser.SYSTEM, 0); }
		public TerminalNode FAILURES() { return getToken(DB2zSQLParser.FAILURES, 0); }
		public TerminalNode CONTINUE() { return getToken(DB2zSQLParser.CONTINUE, 0); }
		public TerminalNode FAILURE() { return getToken(DB2zSQLParser.FAILURE, 0); }
		public TerminalNode NAME() { return getToken(DB2zSQLParser.NAME, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public List<DataTypeContext> dataType() {
			return getRuleContexts(DataTypeContext.class);
		}
		public DataTypeContext dataType(int i) {
			return getRuleContext(DataTypeContext.class,i);
		}
		public TerminalNode CAST() { return getToken(DB2zSQLParser.CAST, 0); }
		public TerminalNode FROM() { return getToken(DB2zSQLParser.FROM, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode LIMIT() { return getToken(DB2zSQLParser.LIMIT, 0); }
		public ExternalProgramNameContext externalProgramName() {
			return getRuleContext(ExternalProgramNameContext.class,0);
		}
		public List<TerminalNode> CCSID() { return getTokens(DB2zSQLParser.CCSID); }
		public TerminalNode CCSID(int i) {
			return getToken(DB2zSQLParser.CCSID, i);
		}
		public List<TerminalNode> VARCHAR() { return getTokens(DB2zSQLParser.VARCHAR); }
		public TerminalNode VARCHAR(int i) {
			return getToken(DB2zSQLParser.VARCHAR, i);
		}
		public List<TerminalNode> ASCII() { return getTokens(DB2zSQLParser.ASCII); }
		public TerminalNode ASCII(int i) {
			return getToken(DB2zSQLParser.ASCII, i);
		}
		public List<TerminalNode> EBCDIC() { return getTokens(DB2zSQLParser.EBCDIC); }
		public TerminalNode EBCDIC(int i) {
			return getToken(DB2zSQLParser.EBCDIC, i);
		}
		public List<TerminalNode> UNICODE() { return getTokens(DB2zSQLParser.UNICODE); }
		public TerminalNode UNICODE(int i) {
			return getToken(DB2zSQLParser.UNICODE, i);
		}
		public List<TerminalNode> NULTERM() { return getTokens(DB2zSQLParser.NULTERM); }
		public TerminalNode NULTERM(int i) {
			return getToken(DB2zSQLParser.NULTERM, i);
		}
		public List<TerminalNode> STRUCTURE() { return getTokens(DB2zSQLParser.STRUCTURE); }
		public TerminalNode STRUCTURE(int i) {
			return getToken(DB2zSQLParser.STRUCTURE, i);
		}
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode LOCATOR() { return getToken(DB2zSQLParser.LOCATOR, 0); }
		public CreateFunctionStatementExternalScalarOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunctionStatementExternalScalarOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateFunctionStatementExternalScalarOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateFunctionStatementExternalScalarOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateFunctionStatementExternalScalarOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFunctionStatementExternalScalarOptionsContext createFunctionStatementExternalScalarOptions() throws RecognitionException {
		CreateFunctionStatementExternalScalarOptionsContext _localctx = new CreateFunctionStatementExternalScalarOptionsContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_createFunctionStatementExternalScalarOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1523);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,108,_ctx) ) {
			case 1:
				{
				{
				setState(1362);
				match(RETURNS);
				setState(1376);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,88,_ctx) ) {
				case 1:
					{
					{
					setState(1363);
					dataType();
					setState(1366);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(1364);
						match(AS);
						setState(1365);
						match(LOCATOR);
						}
					}

					}
					}
					break;
				case 2:
					{
					{
					setState(1368);
					dataType();
					setState(1369);
					match(CAST);
					setState(1370);
					match(FROM);
					setState(1371);
					dataType();
					setState(1374);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(1372);
						match(AS);
						setState(1373);
						match(LOCATOR);
						}
					}

					}
					}
					break;
				}
				}
				}
				break;
			case 2:
				{
				{
				setState(1378);
				match(EXTERNAL);
				setState(1384);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NAME) {
					{
					setState(1379);
					match(NAME);
					setState(1382);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,89,_ctx) ) {
					case 1:
						{
						setState(1380);
						externalProgramName();
						}
						break;
					case 2:
						{
						setState(1381);
						identifier();
						}
						break;
					}
					}
				}

				}
				}
				break;
			case 3:
				{
				{
				setState(1386);
				match(LANGUAGE);
				setState(1387);
				_la = _input.LA(1);
				if ( !(((((_la - 431)) & ~0x3f) == 0 && ((1L << (_la - 431)) & ((1L << (ASSEMBLE - 431)) | (1L << (C_ - 431)) | (1L << (COBOL - 431)) | (1L << (JAVA - 431)) | (1L << (PLI - 431)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case 4:
				{
				{
				setState(1388);
				match(PARAMETER);
				setState(1389);
				match(STYLE);
				setState(1390);
				_la = _input.LA(1);
				if ( !(_la==JAVA || _la==SQL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case 5:
				{
				{
				setState(1392);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1391);
					match(NOT);
					}
				}

				setState(1394);
				match(DETERMINISTIC);
				}
				}
				break;
			case 6:
				{
				{
				setState(1396);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1395);
					match(NOT);
					}
				}

				setState(1398);
				match(VARIANT);
				}
				}
				break;
			case 7:
				{
				{
				setState(1399);
				match(FENCED);
				}
				}
				break;
			case 8:
				{
				{
				setState(1403);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case RETURNS:
					{
					{
					setState(1400);
					match(RETURNS);
					setState(1401);
					match(NULL);
					}
					}
					break;
				case CALLED:
					{
					setState(1402);
					match(CALLED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1405);
				match(ON);
				setState(1406);
				match(NULL);
				setState(1407);
				match(INPUT);
				}
				}
				break;
			case 9:
				{
				{
				setState(1408);
				match(NULL);
				setState(1409);
				match(CALL);
				}
				}
				break;
			case 10:
				{
				setState(1420);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case MODIFIES:
					{
					{
					setState(1410);
					match(MODIFIES);
					setState(1411);
					match(SQL);
					setState(1412);
					match(DATA);
					}
					}
					break;
				case READS:
					{
					{
					setState(1413);
					match(READS);
					setState(1414);
					match(SQL);
					setState(1415);
					match(DATA);
					}
					}
					break;
				case CONTAINS:
					{
					{
					setState(1416);
					match(CONTAINS);
					setState(1417);
					match(SQL);
					}
					}
					break;
				case NO:
					{
					{
					setState(1418);
					match(NO);
					setState(1419);
					match(SQL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 11:
				{
				{
				setState(1423);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(1422);
					match(NO);
					}
				}

				setState(1425);
				match(EXTERNAL);
				setState(1426);
				match(ACTION);
				}
				}
				break;
			case 12:
				{
				setState(1433);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PACKAGE:
					{
					{
					setState(1427);
					match(PACKAGE);
					setState(1428);
					match(PATH);
					setState(1429);
					packagePath();
					}
					}
					break;
				case NO:
					{
					{
					setState(1430);
					match(NO);
					setState(1431);
					match(PACKAGE);
					setState(1432);
					match(PATH);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 13:
				{
				setState(1439);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NO:
					{
					{
					setState(1435);
					match(NO);
					setState(1436);
					match(SCRATCHPAD);
					}
					}
					break;
				case SCRATCHPAD:
					{
					{
					setState(1437);
					match(SCRATCHPAD);
					setState(1438);
					match(INTEGERLITERAL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 14:
				{
				{
				setState(1442);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(1441);
					match(NO);
					}
				}

				setState(1444);
				match(FINAL);
				setState(1445);
				match(CALL);
				}
				}
				break;
			case 15:
				{
				{
				setState(1446);
				_la = _input.LA(1);
				if ( !(_la==ALLOW || _la==DISALLOW) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1447);
				match(PARALLEL);
				}
				}
				break;
			case 16:
				{
				{
				setState(1449);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(1448);
					match(NO);
					}
				}

				setState(1451);
				match(DBINFO);
				}
				}
				break;
			case 17:
				{
				{
				setState(1452);
				match(CARDINALITY);
				setState(1453);
				match(INTEGERLITERAL);
				}
				}
				break;
			case 18:
				{
				setState(1458);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NO:
					{
					{
					setState(1454);
					match(NO);
					setState(1455);
					match(COLLID);
					}
					}
					break;
				case COLLID:
					{
					{
					setState(1456);
					match(COLLID);
					setState(1457);
					collectionID();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 19:
				{
				{
				setState(1460);
				match(WLM);
				setState(1461);
				match(ENVIRONMENT);
				setState(1467);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ADD:
				case AFTER:
				case ALL:
				case ALLOCATE:
				case ALLOW:
				case ALTER:
				case ALTERAND:
				case ANY:
				case ARRAY:
				case ARRAY_EXISTS:
				case AS:
				case ASENSITIVE:
				case ASSOCIATE:
				case ASUTIME:
				case AT:
				case AUDIT:
				case AUX:
				case AUXILIARY:
				case BEFORE:
				case BEGIN:
				case BETWEEN:
				case BUFFERPOOL:
				case BY:
				case CALL:
				case CAPTURE:
				case CASCADED:
				case CASE:
				case CAST:
				case CCSID:
				case CHAR:
				case CHARACTER:
				case CHECK:
				case CLONE:
				case CLOSE:
				case CLUSTER:
				case COLLECTION:
				case COLLID:
				case COLUMN:
				case COMMENT:
				case COMMIT:
				case CONCAT:
				case CONDITION:
				case CONNECT:
				case CONNECTION:
				case CONSTRAINT:
				case CONTAINS:
				case CONTENT:
				case CONTINUE:
				case CREATE:
				case CUBE:
				case CURRENT:
				case CURRENT_LC_CTYPE:
				case CURRVAL:
				case CURSOR:
				case DATA:
				case DATABASE:
				case DAY:
				case DAYS:
				case DBINFO:
				case DECLARE:
				case DEFAULT:
				case DELETE:
				case DESCRIPTOR:
				case DETERMINISTIC:
				case DISABLE:
				case DISALLOW:
				case DISTINCT:
				case DO:
				case DOCUMENT:
				case DOUBLE:
				case DROP:
				case DSSIZE:
				case DYNAMIC:
				case EDITPROC:
				case ELSE:
				case ELSEIF:
				case ENCODING:
				case ENCRYPTION:
				case END:
				case END_EXEC:
				case ENDING:
				case ERASE:
				case ESCAPE:
				case EXCEPT:
				case EXCEPTION:
				case EXEC_SQL:
				case EXECUTE:
				case EXISTS:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case FENCED:
				case FETCH:
				case FIELDPROC:
				case FINAL:
				case FIRST:
				case FOR:
				case FREE:
				case FROM:
				case FULL:
				case FUNCTION:
				case GENERATED:
				case GET:
				case GLOBAL:
				case GO:
				case GOTO:
				case GRANT:
				case GROUP:
				case HANDLER:
				case HAVING:
				case HOLD:
				case HOUR:
				case HOURS:
				case IF:
				case IMMEDIATE:
				case IN:
				case INCLUSIVE:
				case INDEX:
				case INDEXBP:
				case INHERIT:
				case INNER:
				case INOUT:
				case INSENSITIVE:
				case INSERT:
				case INTERSECT:
				case INTO:
				case IS:
				case ISOBID:
				case ITERATE:
				case JAR:
				case JOIN:
				case KEEP:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LAST:
				case LC_CTYPE:
				case LEAVE:
				case LEFT:
				case LIKE:
				case LIMIT:
				case LOCAL:
				case LOCALE:
				case LOCATOR:
				case LOCATORS:
				case LOCK:
				case LOCKMAX:
				case LOCKSIZE:
				case LONG:
				case LOOP:
				case MAINTAINED:
				case MATERIALIZED:
				case MICROSECOND:
				case MICROSECONDS:
				case MODIFIES:
				case MONTH:
				case MONTHS:
				case NEXT:
				case NEXTVAL:
				case NO:
				case NONE:
				case NOT:
				case NULL:
				case NULLS:
				case NUMPARTS:
				case OBID:
				case OF:
				case OFFSET:
				case OLD:
				case ON:
				case OPEN:
				case OPTIMIZATION:
				case OPTIMIZE:
				case OR:
				case ORDER:
				case ORGANIZATION:
				case OUT:
				case OUTER:
				case PACKAGE:
				case PADDED:
				case PARAMETER:
				case PART:
				case PARTITION:
				case PARTITIONED:
				case PARTITIONING:
				case PATH:
				case PERIOD:
				case PIECESIZE:
				case PLAN:
				case PRECISION:
				case PREPARE:
				case PREVVAL:
				case PRIOR:
				case PRIQTY:
				case PRIVILEGES:
				case PROCEDURE:
				case PROGRAM:
				case PSID:
				case PUBLIC:
				case QUERY:
				case QUERYNO:
				case READS:
				case REFERENCES:
				case REFRESH:
				case RELEASE:
				case RENAME:
				case REPEAT:
				case RESIGNAL:
				case RESTRICT:
				case RESULT:
				case RESULT_SET_LOCATOR:
				case RETURN:
				case RETURNS:
				case REVOKE:
				case RIGHT:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUND_CEILING:
				case ROUND_DOWN:
				case ROUND_FLOOR:
				case ROUND_HALF_DOWN:
				case ROUND_HALF_EVEN:
				case ROUND_HALF_UP:
				case ROUND_UP:
				case ROW:
				case ROWSET:
				case RUN:
				case SAVEPOINT:
				case SCHEMA:
				case SCRATCHPAD:
				case SECOND:
				case SECONDS:
				case SECQTY:
				case SECURITY:
				case SELECT:
				case SENSITIVE:
				case SEQUENCE:
				case SET:
				case SIGNAL:
				case SIMPLE:
				case SOME:
				case SOURCE:
				case SPECIFIC:
				case STANDARD:
				case STATEMENT:
				case STATIC:
				case STAY:
				case STOGROUP:
				case STORES:
				case STYLE:
				case SUMMARY:
				case SYNONYM:
				case SYSDATE:
				case SYSTEM:
				case SYSTIMESTAMP:
				case TABLE:
				case TABLESPACE:
				case THEN:
				case TO:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNDO:
				case UNION:
				case UNIQUE:
				case UNTIL:
				case UPDATE:
				case USING:
				case VALIDPROC:
				case VALUE:
				case VALUES:
				case VARIABLE:
				case VARIANT:
				case VCAT:
				case VERSIONING:
				case VIEW:
				case VOLATILE:
				case VOLUMES:
				case WHEN:
				case WHENEVER:
				case WHERE:
				case WHILE:
				case WITH:
				case WLM:
				case XMLCAST:
				case XMLEXISTS:
				case XMLNAMESPACES:
				case YEAR:
				case YEARS:
				case ZONE:
				case AND:
				case ARRAY_AGG:
				case ASC:
				case AVG:
				case BIT:
				case CHANGE:
				case CODEUNITS16:
				case CODEUNITS32:
				case CORR:
				case CORRELATION:
				case COUNT:
				case COUNT_BIG:
				case COVAR:
				case COVARIANCE:
				case COVARIANCE_SAMP:
				case COVAR_POP:
				case COVAR_SAMP:
				case CS:
				case CUME_DIST:
				case DENSE_RANK:
				case DESC:
				case EBCDIC:
				case EXCLUSIVE:
				case FIRST_VALUE:
				case FOLLOWING:
				case GROUPING:
				case IGNORE:
				case INDICATOR:
				case INPUT:
				case ISNULL:
				case LAG:
				case LARGE:
				case LAST_VALUE:
				case LEAD:
				case LISTAGG:
				case LOCKED:
				case LOCKS:
				case MEDIAN:
				case MINUTES:
				case MIXED:
				case NOTNULL:
				case NTH_VALUE:
				case NTILE:
				case NUMERIC:
				case OBJECT:
				case OCTETS:
				case ONLY:
				case OVER:
				case PASSING:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case PERCENT_RANK:
				case PRECEDING:
				case PREVIOUS:
				case RANGE:
				case RANK:
				case RATIO_TO_REPORT:
				case READ:
				case REF:
				case REGR_AVGX:
				case REGR_AVGY:
				case REGR_COUNT:
				case REGR_ICPT:
				case REGR_INTERCEPT:
				case REGR_R2:
				case REGR_SLOPE:
				case REGR_SXX:
				case REGR_SXY:
				case REGR_SYY:
				case RESPECT:
				case ROW_NUMBER:
				case ROWS:
				case RR:
				case RS:
				case SBCS:
				case SELECTIVITY:
				case SETS:
				case SHARE:
				case SKIP_:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case TOKEN:
				case UNBOUNDED:
				case UNPACK:
				case UR:
				case USE:
				case VAR:
				case VARIANCE:
				case VARIANCE_SAMP:
				case VAR_POP:
				case VAR_SAMP:
				case VARYING:
				case WITHOUT:
				case XML:
				case XMLAGG:
				case COLUMNS:
				case SQLID:
				case ORDINALITY:
				case SYSTEM_TIME:
				case BUSINESS_TIME:
				case MULTIPLIER:
				case UNNEST:
				case CROSS:
				case CALLER:
				case CLIENT:
				case POSITIONING:
				case SCROLL:
				case ACTION:
				case ASSEMBLE:
				case C_:
				case CALLED:
				case COBOL:
				case DB2:
				case DEFINER:
				case DISPATCH:
				case ENVIRONMENT:
				case FAILURE:
				case FAILURES:
				case JAVA:
				case MAIN:
				case NAME:
				case OPTIONS:
				case PARALLEL:
				case PLI:
				case REGISTERS:
				case RESIDENT:
				case SECURED:
				case SPECIAL:
				case SQL:
				case STOP:
				case SUB:
				case YES:
				case APPLICATION:
				case CHANGED:
				case COMPATIBILITY:
				case COMPRESS:
				case COPY:
				case FREEPAGE:
				case GBPCACHE:
				case INCLUDE:
				case MAXVALUE:
				case MINVALUE:
				case PCTFREE:
				case REGENERATE:
				case MASK:
				case ENABLE:
				case PERMISSION:
				case ATOMIC:
				case SQLEXCEPTION:
				case MERGE:
				case MATCHED:
				case SQLSTATE:
				case MESSAGE_TEXT:
				case OVERRIDING:
				case PORTION:
				case DB2SQL:
				case DEBUG:
				case GENERAL:
				case MODE_:
				case REXX:
				case CACHE:
				case CYCLE:
				case INCREMENT:
				case RESTART:
				case DATACLAS:
				case MGMTCLAS:
				case REMOVE:
				case STORCLAS:
				case ACCESS:
				case ACTIVATE:
				case ALWAYS:
				case APPEND:
				case ARCHIVE:
				case BUSINESS:
				case CASCADE:
				case CHANGES:
				case CONTROL:
				case DEACTIVATE:
				case DEFERRED:
				case EACH:
				case ENFORCED:
				case EXTRA:
				case FOREIGN:
				case HIDDEN_:
				case HISTORY:
				case ID:
				case IDENTITY:
				case IMPLICITLY:
				case INITIALLY:
				case INLINE:
				case OPERATION:
				case ORGANIZE:
				case OVERLAPS:
				case PACKAGE_NAME:
				case PACKAGE_SCHEMA:
				case PACKAGE_VERSION:
				case PRIMARY:
				case RESET:
				case ROTATE:
				case START:
				case SYSIBM:
				case TRANSACTION:
				case XMLSCHEMA:
				case ELEMENT:
				case URL:
				case NAMESPACE:
				case LOCATION:
				case SYSXSR:
				case ALGORITHM:
				case FIXEDLENGTH:
				case HUFFMAN:
				case LOB:
				case LOG:
				case LOGGED:
				case MAXPARTITIONS:
				case MAXROWS:
				case MEMBER:
				case MOVE:
				case PAGE:
				case PAGENUM:
				case PENDING:
				case RELATIVE:
				case SEGSIZE:
				case TRACKMOD:
				case ADDRESS:
				case ATTRIBUTES:
				case AUTHENTICATION:
				case AUTHID:
				case CONTEXT:
				case JOBNAME:
				case OWNER:
				case PROFILE:
				case QUALIFIER:
				case SERVAUTH:
				case TRUSTED:
				case SECTION:
				case ACTIVE:
				case VERSION:
				case ALIAS:
				case WORK:
				case WORKFILE:
				case SYSDEFLT:
				case NULTERM:
				case STRUCTURE:
				case GENERIC:
				case ABS:
				case ABSVAL:
				case ACOS:
				case ADD_DAYS:
				case ADD_MONTHS:
				case ARRAY_DELETE:
				case ARRAY_FIRST:
				case ARRAY_LAST:
				case ARRAY_NEXT:
				case ARRAY_PRIOR:
				case ARRAY_TRIM:
				case ASCII:
				case ASCII_CHR:
				case ASCIISTR:
				case ASCII_STR:
				case ASIN:
				case ATAN:
				case ATAN2:
				case ATANH:
				case BIGINT:
				case BINARY:
				case BITAND:
				case BITANDNOT:
				case BITNOT:
				case BITOR:
				case BITXOR:
				case BLOB:
				case BTRIM:
				case CARDINALITY:
				case CCSID_ENCODING:
				case CEIL:
				case CEILING:
				case CHAR9:
				case CHARACTER_LENGTH:
				case CHAR_LENGTH:
				case CHR:
				case CLOB:
				case COALESCE:
				case COLLATION_KEY:
				case COMPARE_DECFLOAT:
				case COS:
				case COSH:
				case DATE:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFWEEK_ISO:
				case DAYOFYEAR:
				case DAYS_BETWEEN:
				case DBCLOB:
				case DEC:
				case DECFLOAT:
				case DECFLOAT_FORMAT:
				case DECFLOAT_SORTKEY:
				case DECIMAL:
				case DECODE:
				case DECRYPT_BINARY:
				case DECRYPT_BIT:
				case DECRYPT_CHAR:
				case DECRYPT_DATAKEY_BIGINT:
				case DECRYPT_DATAKEY_BIT:
				case DECRYPT_DATAKEY_CLOB:
				case DECRYPT_DATAKEY_DBCLOB:
				case DECRYPT_DATAKEY_DECIMAL:
				case DECRYPT_DATAKEY_INTEGER:
				case DECRYPT_DATAKEY_VARCHAR:
				case DECRYPT_DATAKEY_VARGRAPHIC:
				case DECRYPT_DB:
				case DEGREES:
				case DIFFERENCE:
				case DIGITS:
				case DOUBLE_PRECISION:
				case DSN_XMLVALIDATE:
				case EBCDIC_CHR:
				case EBCDIC_STR:
				case ENCRYPT_DATAKEY:
				case ENCRYPT_TDES:
				case EXP:
				case EXTRACT:
				case FLOAT:
				case FLOOR:
				case GENERATE_UNIQUE:
				case GENERATE_UNIQUE_BINARY:
				case GETHINT:
				case GETVARIABLE:
				case GRAPHIC:
				case GREATEST:
				case HASH:
				case HASH_CRC32:
				case HASH_MD5:
				case HASH_SHA1:
				case HASH_SHA256:
				case HEX:
				case IDENTITY_VAL_LOCAL:
				case IFNULL:
				case INSTR:
				case INT:
				case INTEGER:
				case JULIAN_DAY:
				case LAST_DAY:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LN:
				case LOCATE:
				case LOCATE_IN_STRING:
				case LOG10:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAX:
				case MAX_CARDINALITY:
				case MIDNIGHT_SECONDS:
				case MIN:
				case MINUTE:
				case MOD:
				case MONTHS_BETWEEN:
				case MQREAD:
				case MQREADCLOB:
				case MQRECEIVE:
				case MQRECEIVECLOB:
				case MQSEND:
				case MULTIPLY_ALT:
				case NEXT_DAY:
				case NEXT_MONTH:
				case NORMALIZE_DECFLOAT:
				case NORMALIZE_STRING:
				case NULLIF:
				case NVL:
				case OVERLAY:
				case PACK:
				case POSITION:
				case POSSTR:
				case POW:
				case POWER:
				case QUANTIZE:
				case QUARTER:
				case RADIANS:
				case RAISE_ERROR:
				case RAND:
				case RANDOM:
				case REAL:
				case REGEXP_COUNT:
				case REGEXP_INSTR:
				case REGEXP_LIKE:
				case REGEXP_REPLACE:
				case REGEXP_SUBSTR:
				case REPLACE:
				case RID:
				case ROUND:
				case ROUND_TIMESTAMP:
				case ROWID:
				case RPAD:
				case RTRIM:
				case SCORE:
				case SIGN:
				case SIN:
				case SINH:
				case SMALLINT:
				case SOAPHTTPC:
				case SOAPHTTPNC:
				case SOAPHTTPNV:
				case SOAPHTTPV:
				case SOUNDEX:
				case SPACE:
				case SQRT:
				case STRIP:
				case STRLEFT:
				case STRPOS:
				case STRRIGHT:
				case SUBSTR:
				case SUBSTRING:
				case TAN:
				case TANH:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIMESTAMP_FORMAT:
				case TIMESTAMP_ISO:
				case TIMESTAMP_TZ:
				case TO_CHAR:
				case TO_CLOB:
				case TO_DATE:
				case TO_NUMBER:
				case TOTALORDER:
				case TO_TIMESTAMP:
				case TRANSLATE:
				case TRIM:
				case TRIM_ARRAY:
				case TRUNC:
				case TRUNC_TIMESTAMP:
				case UCASE:
				case UNICODE:
				case UNICODE_STR:
				case UNISTR:
				case UPPER:
				case VARBINARY:
				case VARCHAR:
				case VARCHAR9:
				case VARCHAR_BIT_FORMAT:
				case VARCHAR_FORMAT:
				case VARGRAPHIC:
				case VERIFY_GROUP_FOR_USER:
				case VERIFY_ROLE_FOR_USER:
				case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
				case WEEK:
				case WEEK_ISO:
				case WRAP:
				case XMLATTRIBUTES:
				case XMLCOMMENT:
				case XMLCONCAT:
				case XMLDOCUMENT:
				case XMLELEMENT:
				case XMLFOREST:
				case XMLMODIFY:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLSERIALIZE:
				case XMLTEXT:
				case XMLXSROBJECTID:
				case XSLTRANSFORM:
				case CURRENT_ACCELERATOR:
				case CURRENT_APPLICATION_COMPATIBILITY:
				case CURRENT_APPLICATION_ENCODING_SCHEME:
				case CURRENT_CLIENT_ACCTNG:
				case CURRENT_CLIENT_APPLNAME:
				case CURRENT_CLIENT_CORR_TOKEN:
				case CURRENT_CLIENT_USERID:
				case CURRENT_CLIENT_WRKSTNNAME:
				case CURRENT_DATE:
				case CURRENT_DEBUG_MODE:
				case CURRENT_DECFLOAT_ROUNDING_MODE:
				case CURRENT_DEGREE:
				case CURRENT_EXPLAIN_MODE:
				case CURRENT_GET_ACCEL_ARCHIVE:
				case CURRENT_LOCALE_LC_CTYPE:
				case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
				case CURRENT_MEMBER:
				case CURRENT_OPTIMIZATION_HINT:
				case CURRENT_PACKAGE_PATH:
				case CURRENT_PACKAGESET:
				case CURRENT_PATH:
				case CURRENT_PRECISION:
				case CURRENT_QUERY_ACCELERATION:
				case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
				case CURRENT_REFRESH_AGE:
				case CURRENT_ROUTINE_VERSION:
				case CURRENT_RULES:
				case CURRENT_SCHEMA:
				case CURRENT_SERVER:
				case CURRENT_SQLID:
				case CURRENT_TEMPORAL_BUSINESS_TIME:
				case CURRENT_TEMPORAL_SYSTEM_TIME:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case CURRENT_TIME_ZONE:
				case ENCRYPTION_PASSWORD:
				case SESSION_TIME_ZONE:
				case SESSION_USER:
				case USER:
				case ADMIN_TASK_LIST:
				case ADMIN_TASK_OUTPUT:
				case ADMIN_TASK_STATUS:
				case BLOCKING_THREADS:
				case MQREADALL:
				case MQREADALLCLOB:
				case MQRECEIVEALL:
				case MQRECEIVEALLCLOB:
				case XMLTABLE:
				case SQLIDENTIFIER:
					{
					setState(1462);
					identifier();
					}
					break;
				case LPAREN:
					{
					{
					setState(1463);
					match(LPAREN);
					setState(1464);
					identifier();
					setState(1465);
					match(RPAREN);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case 20:
				{
				{
				setState(1469);
				match(ASUTIME);
				setState(1474);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NO:
					{
					{
					setState(1470);
					match(NO);
					setState(1471);
					match(LIMIT);
					}
					}
					break;
				case LIMIT:
					{
					{
					setState(1472);
					match(LIMIT);
					setState(1473);
					match(INTEGERLITERAL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case 21:
				{
				{
				setState(1476);
				match(STAY);
				setState(1477);
				match(RESIDENT);
				setState(1478);
				_la = _input.LA(1);
				if ( !(_la==NO || _la==YES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case 22:
				{
				{
				setState(1479);
				match(PROGRAM);
				setState(1480);
				match(TYPE);
				setState(1481);
				_la = _input.LA(1);
				if ( !(_la==MAIN || _la==SUB) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case 23:
				{
				{
				setState(1482);
				match(SECURITY);
				setState(1483);
				_la = _input.LA(1);
				if ( !(_la==DB2 || _la==DEFINER || _la==USER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case 24:
				{
				setState(1496);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,103,_ctx) ) {
				case 1:
					{
					{
					setState(1484);
					match(STOP);
					setState(1485);
					match(AFTER);
					setState(1486);
					match(SYSTEM);
					setState(1487);
					match(DEFAULT);
					setState(1488);
					match(FAILURES);
					}
					}
					break;
				case 2:
					{
					{
					setState(1489);
					match(STOP);
					setState(1490);
					match(AFTER);
					setState(1491);
					match(INTEGERLITERAL);
					setState(1492);
					match(FAILURES);
					}
					}
					break;
				case 3:
					{
					{
					setState(1493);
					match(CONTINUE);
					setState(1494);
					match(AFTER);
					setState(1495);
					match(FAILURE);
					}
					}
					break;
				}
				}
				break;
			case 25:
				{
				{
				setState(1498);
				match(RUN);
				setState(1499);
				match(OPTIONS);
				setState(1500);
				runTimeOptions();
				}
				}
				break;
			case 26:
				{
				{
				setState(1501);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==INHERIT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1502);
				match(SPECIAL);
				setState(1503);
				match(REGISTERS);
				}
				}
				break;
			case 27:
				{
				{
				setState(1504);
				match(STATIC);
				setState(1505);
				match(DISPATCH);
				}
				}
				break;
			case 28:
				{
				{
				setState(1507);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1506);
					match(NOT);
					}
				}

				setState(1509);
				match(SECURED);
				}
				}
				break;
			case 29:
				{
				setState(1510);
				match(SPECIFIC);
				setState(1512);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,105,_ctx) ) {
				case 1:
					{
					setState(1511);
					specificName();
					}
					break;
				}
				}
				break;
			case 30:
				{
				{
				setState(1514);
				match(PARAMETER);
				setState(1519); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(1519);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CCSID:
						{
						{
						setState(1515);
						match(CCSID);
						setState(1516);
						_la = _input.LA(1);
						if ( !(_la==EBCDIC || _la==ASCII || _la==UNICODE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						}
						break;
					case VARCHAR:
						{
						{
						setState(1517);
						match(VARCHAR);
						setState(1518);
						_la = _input.LA(1);
						if ( !(_la==NULTERM || _la==STRUCTURE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(1521); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==CCSID || _la==VARCHAR );
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFunctionStatementExternalTableOptionsContext extends ParserRuleContext {
		public TerminalNode SPECIFIC() { return getToken(DB2zSQLParser.SPECIFIC, 0); }
		public TerminalNode RETURNS() { return getToken(DB2zSQLParser.RETURNS, 0); }
		public TerminalNode EXTERNAL() { return getToken(DB2zSQLParser.EXTERNAL, 0); }
		public TerminalNode LANGUAGE() { return getToken(DB2zSQLParser.LANGUAGE, 0); }
		public TerminalNode PARAMETER() { return getToken(DB2zSQLParser.PARAMETER, 0); }
		public TerminalNode STYLE() { return getToken(DB2zSQLParser.STYLE, 0); }
		public TerminalNode SQL() { return getToken(DB2zSQLParser.SQL, 0); }
		public TerminalNode DETERMINISTIC() { return getToken(DB2zSQLParser.DETERMINISTIC, 0); }
		public TerminalNode VARIANT() { return getToken(DB2zSQLParser.VARIANT, 0); }
		public TerminalNode FENCED() { return getToken(DB2zSQLParser.FENCED, 0); }
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public List<TerminalNode> NULL() { return getTokens(DB2zSQLParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(DB2zSQLParser.NULL, i);
		}
		public TerminalNode INPUT() { return getToken(DB2zSQLParser.INPUT, 0); }
		public TerminalNode CALL() { return getToken(DB2zSQLParser.CALL, 0); }
		public TerminalNode ACTION() { return getToken(DB2zSQLParser.ACTION, 0); }
		public TerminalNode FINAL() { return getToken(DB2zSQLParser.FINAL, 0); }
		public TerminalNode DISALLOW() { return getToken(DB2zSQLParser.DISALLOW, 0); }
		public TerminalNode PARALLEL() { return getToken(DB2zSQLParser.PARALLEL, 0); }
		public TerminalNode DBINFO() { return getToken(DB2zSQLParser.DBINFO, 0); }
		public TerminalNode CARDINALITY() { return getToken(DB2zSQLParser.CARDINALITY, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode WLM() { return getToken(DB2zSQLParser.WLM, 0); }
		public TerminalNode ENVIRONMENT() { return getToken(DB2zSQLParser.ENVIRONMENT, 0); }
		public TerminalNode ASUTIME() { return getToken(DB2zSQLParser.ASUTIME, 0); }
		public TerminalNode STAY() { return getToken(DB2zSQLParser.STAY, 0); }
		public TerminalNode RESIDENT() { return getToken(DB2zSQLParser.RESIDENT, 0); }
		public TerminalNode PROGRAM() { return getToken(DB2zSQLParser.PROGRAM, 0); }
		public TerminalNode TYPE() { return getToken(DB2zSQLParser.TYPE, 0); }
		public TerminalNode SECURITY() { return getToken(DB2zSQLParser.SECURITY, 0); }
		public TerminalNode RUN() { return getToken(DB2zSQLParser.RUN, 0); }
		public TerminalNode OPTIONS() { return getToken(DB2zSQLParser.OPTIONS, 0); }
		public RunTimeOptionsContext runTimeOptions() {
			return getRuleContext(RunTimeOptionsContext.class,0);
		}
		public TerminalNode SPECIAL() { return getToken(DB2zSQLParser.SPECIAL, 0); }
		public TerminalNode REGISTERS() { return getToken(DB2zSQLParser.REGISTERS, 0); }
		public TerminalNode STATIC() { return getToken(DB2zSQLParser.STATIC, 0); }
		public TerminalNode DISPATCH() { return getToken(DB2zSQLParser.DISPATCH, 0); }
		public TerminalNode SECURED() { return getToken(DB2zSQLParser.SECURED, 0); }
		public TerminalNode ASSEMBLE() { return getToken(DB2zSQLParser.ASSEMBLE, 0); }
		public TerminalNode C_() { return getToken(DB2zSQLParser.C_, 0); }
		public TerminalNode COBOL() { return getToken(DB2zSQLParser.COBOL, 0); }
		public TerminalNode PLI() { return getToken(DB2zSQLParser.PLI, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode YES() { return getToken(DB2zSQLParser.YES, 0); }
		public TerminalNode SUB() { return getToken(DB2zSQLParser.SUB, 0); }
		public TerminalNode MAIN() { return getToken(DB2zSQLParser.MAIN, 0); }
		public TerminalNode DB2() { return getToken(DB2zSQLParser.DB2, 0); }
		public TerminalNode USER() { return getToken(DB2zSQLParser.USER, 0); }
		public TerminalNode DEFINER() { return getToken(DB2zSQLParser.DEFINER, 0); }
		public TerminalNode INHERIT() { return getToken(DB2zSQLParser.INHERIT, 0); }
		public TerminalNode DEFAULT() { return getToken(DB2zSQLParser.DEFAULT, 0); }
		public SpecificNameContext specificName() {
			return getRuleContext(SpecificNameContext.class,0);
		}
		public TerminalNode CALLED() { return getToken(DB2zSQLParser.CALLED, 0); }
		public TerminalNode READS() { return getToken(DB2zSQLParser.READS, 0); }
		public TerminalNode DATA() { return getToken(DB2zSQLParser.DATA, 0); }
		public TerminalNode CONTAINS() { return getToken(DB2zSQLParser.CONTAINS, 0); }
		public TerminalNode PACKAGE() { return getToken(DB2zSQLParser.PACKAGE, 0); }
		public TerminalNode PATH() { return getToken(DB2zSQLParser.PATH, 0); }
		public PackagePathContext packagePath() {
			return getRuleContext(PackagePathContext.class,0);
		}
		public TerminalNode SCRATCHPAD() { return getToken(DB2zSQLParser.SCRATCHPAD, 0); }
		public TerminalNode COLLID() { return getToken(DB2zSQLParser.COLLID, 0); }
		public CollectionIDContext collectionID() {
			return getRuleContext(CollectionIDContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode STOP() { return getToken(DB2zSQLParser.STOP, 0); }
		public TerminalNode AFTER() { return getToken(DB2zSQLParser.AFTER, 0); }
		public TerminalNode SYSTEM() { return getToken(DB2zSQLParser.SYSTEM, 0); }
		public TerminalNode FAILURES() { return getToken(DB2zSQLParser.FAILURES, 0); }
		public TerminalNode CONTINUE() { return getToken(DB2zSQLParser.CONTINUE, 0); }
		public TerminalNode FAILURE() { return getToken(DB2zSQLParser.FAILURE, 0); }
		public TerminalNode NAME() { return getToken(DB2zSQLParser.NAME, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public List<FunctionDataTypeContext> functionDataType() {
			return getRuleContexts(FunctionDataTypeContext.class);
		}
		public FunctionDataTypeContext functionDataType(int i) {
			return getRuleContext(FunctionDataTypeContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode GENERIC() { return getToken(DB2zSQLParser.GENERIC, 0); }
		public TerminalNode LIMIT() { return getToken(DB2zSQLParser.LIMIT, 0); }
		public ExternalProgramNameContext externalProgramName() {
			return getRuleContext(ExternalProgramNameContext.class,0);
		}
		public List<TerminalNode> CCSID() { return getTokens(DB2zSQLParser.CCSID); }
		public TerminalNode CCSID(int i) {
			return getToken(DB2zSQLParser.CCSID, i);
		}
		public List<TerminalNode> VARCHAR() { return getTokens(DB2zSQLParser.VARCHAR); }
		public TerminalNode VARCHAR(int i) {
			return getToken(DB2zSQLParser.VARCHAR, i);
		}
		public List<TerminalNode> ASCII() { return getTokens(DB2zSQLParser.ASCII); }
		public TerminalNode ASCII(int i) {
			return getToken(DB2zSQLParser.ASCII, i);
		}
		public List<TerminalNode> EBCDIC() { return getTokens(DB2zSQLParser.EBCDIC); }
		public TerminalNode EBCDIC(int i) {
			return getToken(DB2zSQLParser.EBCDIC, i);
		}
		public List<TerminalNode> UNICODE() { return getTokens(DB2zSQLParser.UNICODE); }
		public TerminalNode UNICODE(int i) {
			return getToken(DB2zSQLParser.UNICODE, i);
		}
		public List<TerminalNode> NULTERM() { return getTokens(DB2zSQLParser.NULTERM); }
		public TerminalNode NULTERM(int i) {
			return getToken(DB2zSQLParser.NULTERM, i);
		}
		public List<TerminalNode> STRUCTURE() { return getTokens(DB2zSQLParser.STRUCTURE); }
		public TerminalNode STRUCTURE(int i) {
			return getToken(DB2zSQLParser.STRUCTURE, i);
		}
		public List<TerminalNode> AS() { return getTokens(DB2zSQLParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(DB2zSQLParser.AS, i);
		}
		public List<TerminalNode> LOCATOR() { return getTokens(DB2zSQLParser.LOCATOR); }
		public TerminalNode LOCATOR(int i) {
			return getToken(DB2zSQLParser.LOCATOR, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public CreateFunctionStatementExternalTableOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunctionStatementExternalTableOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateFunctionStatementExternalTableOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateFunctionStatementExternalTableOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateFunctionStatementExternalTableOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFunctionStatementExternalTableOptionsContext createFunctionStatementExternalTableOptions() throws RecognitionException {
		CreateFunctionStatementExternalTableOptionsContext _localctx = new CreateFunctionStatementExternalTableOptionsContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_createFunctionStatementExternalTableOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1694);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,132,_ctx) ) {
			case 1:
				{
				{
				setState(1525);
				match(RETURNS);
				setState(1550);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case TABLE:
					{
					{
					setState(1526);
					match(TABLE);
					setState(1527);
					match(LPAREN);
					setState(1528);
					columnName();
					setState(1529);
					functionDataType();
					setState(1532);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(1530);
						match(AS);
						setState(1531);
						match(LOCATOR);
						}
					}

					setState(1543);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1534);
						match(COMMA);
						setState(1535);
						columnName();
						setState(1536);
						functionDataType();
						setState(1539);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==AS) {
							{
							setState(1537);
							match(AS);
							setState(1538);
							match(LOCATOR);
							}
						}

						}
						}
						setState(1545);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(1546);
					match(RPAREN);
					}
					}
					break;
				case GENERIC:
					{
					{
					setState(1548);
					match(GENERIC);
					setState(1549);
					match(TABLE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case 2:
				{
				{
				setState(1552);
				match(EXTERNAL);
				setState(1558);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NAME) {
					{
					setState(1553);
					match(NAME);
					setState(1556);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,113,_ctx) ) {
					case 1:
						{
						setState(1554);
						externalProgramName();
						}
						break;
					case 2:
						{
						setState(1555);
						identifier();
						}
						break;
					}
					}
				}

				}
				}
				break;
			case 3:
				{
				{
				setState(1560);
				match(LANGUAGE);
				setState(1561);
				_la = _input.LA(1);
				if ( !(((((_la - 431)) & ~0x3f) == 0 && ((1L << (_la - 431)) & ((1L << (ASSEMBLE - 431)) | (1L << (C_ - 431)) | (1L << (COBOL - 431)) | (1L << (PLI - 431)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case 4:
				{
				{
				setState(1562);
				match(PARAMETER);
				setState(1563);
				match(STYLE);
				setState(1564);
				match(SQL);
				}
				}
				break;
			case 5:
				{
				{
				setState(1566);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1565);
					match(NOT);
					}
				}

				setState(1568);
				match(DETERMINISTIC);
				}
				}
				break;
			case 6:
				{
				{
				setState(1570);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1569);
					match(NOT);
					}
				}

				setState(1572);
				match(VARIANT);
				}
				}
				break;
			case 7:
				{
				{
				setState(1573);
				match(FENCED);
				}
				}
				break;
			case 8:
				{
				{
				setState(1577);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case RETURNS:
					{
					{
					setState(1574);
					match(RETURNS);
					setState(1575);
					match(NULL);
					}
					}
					break;
				case CALLED:
					{
					setState(1576);
					match(CALLED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1579);
				match(ON);
				setState(1580);
				match(NULL);
				setState(1581);
				match(INPUT);
				}
				}
				break;
			case 9:
				{
				{
				setState(1582);
				match(NULL);
				setState(1583);
				match(CALL);
				}
				}
				break;
			case 10:
				{
				setState(1591);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case READS:
					{
					{
					setState(1584);
					match(READS);
					setState(1585);
					match(SQL);
					setState(1586);
					match(DATA);
					}
					}
					break;
				case CONTAINS:
					{
					{
					setState(1587);
					match(CONTAINS);
					setState(1588);
					match(SQL);
					}
					}
					break;
				case NO:
					{
					{
					setState(1589);
					match(NO);
					setState(1590);
					match(SQL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 11:
				{
				{
				setState(1594);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(1593);
					match(NO);
					}
				}

				setState(1596);
				match(EXTERNAL);
				setState(1597);
				match(ACTION);
				}
				}
				break;
			case 12:
				{
				setState(1604);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PACKAGE:
					{
					{
					setState(1598);
					match(PACKAGE);
					setState(1599);
					match(PATH);
					setState(1600);
					packagePath();
					}
					}
					break;
				case NO:
					{
					{
					setState(1601);
					match(NO);
					setState(1602);
					match(PACKAGE);
					setState(1603);
					match(PATH);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 13:
				{
				setState(1610);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NO:
					{
					{
					setState(1606);
					match(NO);
					setState(1607);
					match(SCRATCHPAD);
					}
					}
					break;
				case SCRATCHPAD:
					{
					{
					setState(1608);
					match(SCRATCHPAD);
					setState(1609);
					match(INTEGERLITERAL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 14:
				{
				{
				setState(1613);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(1612);
					match(NO);
					}
				}

				setState(1615);
				match(FINAL);
				setState(1616);
				match(CALL);
				}
				}
				break;
			case 15:
				{
				{
				setState(1617);
				match(DISALLOW);
				setState(1618);
				match(PARALLEL);
				}
				}
				break;
			case 16:
				{
				{
				setState(1620);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(1619);
					match(NO);
					}
				}

				setState(1622);
				match(DBINFO);
				}
				}
				break;
			case 17:
				{
				{
				setState(1623);
				match(CARDINALITY);
				setState(1624);
				match(INTEGERLITERAL);
				}
				}
				break;
			case 18:
				{
				setState(1629);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NO:
					{
					{
					setState(1625);
					match(NO);
					setState(1626);
					match(COLLID);
					}
					}
					break;
				case COLLID:
					{
					{
					setState(1627);
					match(COLLID);
					setState(1628);
					collectionID();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 19:
				{
				{
				setState(1631);
				match(WLM);
				setState(1632);
				match(ENVIRONMENT);
				setState(1638);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ADD:
				case AFTER:
				case ALL:
				case ALLOCATE:
				case ALLOW:
				case ALTER:
				case ALTERAND:
				case ANY:
				case ARRAY:
				case ARRAY_EXISTS:
				case AS:
				case ASENSITIVE:
				case ASSOCIATE:
				case ASUTIME:
				case AT:
				case AUDIT:
				case AUX:
				case AUXILIARY:
				case BEFORE:
				case BEGIN:
				case BETWEEN:
				case BUFFERPOOL:
				case BY:
				case CALL:
				case CAPTURE:
				case CASCADED:
				case CASE:
				case CAST:
				case CCSID:
				case CHAR:
				case CHARACTER:
				case CHECK:
				case CLONE:
				case CLOSE:
				case CLUSTER:
				case COLLECTION:
				case COLLID:
				case COLUMN:
				case COMMENT:
				case COMMIT:
				case CONCAT:
				case CONDITION:
				case CONNECT:
				case CONNECTION:
				case CONSTRAINT:
				case CONTAINS:
				case CONTENT:
				case CONTINUE:
				case CREATE:
				case CUBE:
				case CURRENT:
				case CURRENT_LC_CTYPE:
				case CURRVAL:
				case CURSOR:
				case DATA:
				case DATABASE:
				case DAY:
				case DAYS:
				case DBINFO:
				case DECLARE:
				case DEFAULT:
				case DELETE:
				case DESCRIPTOR:
				case DETERMINISTIC:
				case DISABLE:
				case DISALLOW:
				case DISTINCT:
				case DO:
				case DOCUMENT:
				case DOUBLE:
				case DROP:
				case DSSIZE:
				case DYNAMIC:
				case EDITPROC:
				case ELSE:
				case ELSEIF:
				case ENCODING:
				case ENCRYPTION:
				case END:
				case END_EXEC:
				case ENDING:
				case ERASE:
				case ESCAPE:
				case EXCEPT:
				case EXCEPTION:
				case EXEC_SQL:
				case EXECUTE:
				case EXISTS:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case FENCED:
				case FETCH:
				case FIELDPROC:
				case FINAL:
				case FIRST:
				case FOR:
				case FREE:
				case FROM:
				case FULL:
				case FUNCTION:
				case GENERATED:
				case GET:
				case GLOBAL:
				case GO:
				case GOTO:
				case GRANT:
				case GROUP:
				case HANDLER:
				case HAVING:
				case HOLD:
				case HOUR:
				case HOURS:
				case IF:
				case IMMEDIATE:
				case IN:
				case INCLUSIVE:
				case INDEX:
				case INDEXBP:
				case INHERIT:
				case INNER:
				case INOUT:
				case INSENSITIVE:
				case INSERT:
				case INTERSECT:
				case INTO:
				case IS:
				case ISOBID:
				case ITERATE:
				case JAR:
				case JOIN:
				case KEEP:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LAST:
				case LC_CTYPE:
				case LEAVE:
				case LEFT:
				case LIKE:
				case LIMIT:
				case LOCAL:
				case LOCALE:
				case LOCATOR:
				case LOCATORS:
				case LOCK:
				case LOCKMAX:
				case LOCKSIZE:
				case LONG:
				case LOOP:
				case MAINTAINED:
				case MATERIALIZED:
				case MICROSECOND:
				case MICROSECONDS:
				case MODIFIES:
				case MONTH:
				case MONTHS:
				case NEXT:
				case NEXTVAL:
				case NO:
				case NONE:
				case NOT:
				case NULL:
				case NULLS:
				case NUMPARTS:
				case OBID:
				case OF:
				case OFFSET:
				case OLD:
				case ON:
				case OPEN:
				case OPTIMIZATION:
				case OPTIMIZE:
				case OR:
				case ORDER:
				case ORGANIZATION:
				case OUT:
				case OUTER:
				case PACKAGE:
				case PADDED:
				case PARAMETER:
				case PART:
				case PARTITION:
				case PARTITIONED:
				case PARTITIONING:
				case PATH:
				case PERIOD:
				case PIECESIZE:
				case PLAN:
				case PRECISION:
				case PREPARE:
				case PREVVAL:
				case PRIOR:
				case PRIQTY:
				case PRIVILEGES:
				case PROCEDURE:
				case PROGRAM:
				case PSID:
				case PUBLIC:
				case QUERY:
				case QUERYNO:
				case READS:
				case REFERENCES:
				case REFRESH:
				case RELEASE:
				case RENAME:
				case REPEAT:
				case RESIGNAL:
				case RESTRICT:
				case RESULT:
				case RESULT_SET_LOCATOR:
				case RETURN:
				case RETURNS:
				case REVOKE:
				case RIGHT:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUND_CEILING:
				case ROUND_DOWN:
				case ROUND_FLOOR:
				case ROUND_HALF_DOWN:
				case ROUND_HALF_EVEN:
				case ROUND_HALF_UP:
				case ROUND_UP:
				case ROW:
				case ROWSET:
				case RUN:
				case SAVEPOINT:
				case SCHEMA:
				case SCRATCHPAD:
				case SECOND:
				case SECONDS:
				case SECQTY:
				case SECURITY:
				case SELECT:
				case SENSITIVE:
				case SEQUENCE:
				case SET:
				case SIGNAL:
				case SIMPLE:
				case SOME:
				case SOURCE:
				case SPECIFIC:
				case STANDARD:
				case STATEMENT:
				case STATIC:
				case STAY:
				case STOGROUP:
				case STORES:
				case STYLE:
				case SUMMARY:
				case SYNONYM:
				case SYSDATE:
				case SYSTEM:
				case SYSTIMESTAMP:
				case TABLE:
				case TABLESPACE:
				case THEN:
				case TO:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNDO:
				case UNION:
				case UNIQUE:
				case UNTIL:
				case UPDATE:
				case USING:
				case VALIDPROC:
				case VALUE:
				case VALUES:
				case VARIABLE:
				case VARIANT:
				case VCAT:
				case VERSIONING:
				case VIEW:
				case VOLATILE:
				case VOLUMES:
				case WHEN:
				case WHENEVER:
				case WHERE:
				case WHILE:
				case WITH:
				case WLM:
				case XMLCAST:
				case XMLEXISTS:
				case XMLNAMESPACES:
				case YEAR:
				case YEARS:
				case ZONE:
				case AND:
				case ARRAY_AGG:
				case ASC:
				case AVG:
				case BIT:
				case CHANGE:
				case CODEUNITS16:
				case CODEUNITS32:
				case CORR:
				case CORRELATION:
				case COUNT:
				case COUNT_BIG:
				case COVAR:
				case COVARIANCE:
				case COVARIANCE_SAMP:
				case COVAR_POP:
				case COVAR_SAMP:
				case CS:
				case CUME_DIST:
				case DENSE_RANK:
				case DESC:
				case EBCDIC:
				case EXCLUSIVE:
				case FIRST_VALUE:
				case FOLLOWING:
				case GROUPING:
				case IGNORE:
				case INDICATOR:
				case INPUT:
				case ISNULL:
				case LAG:
				case LARGE:
				case LAST_VALUE:
				case LEAD:
				case LISTAGG:
				case LOCKED:
				case LOCKS:
				case MEDIAN:
				case MINUTES:
				case MIXED:
				case NOTNULL:
				case NTH_VALUE:
				case NTILE:
				case NUMERIC:
				case OBJECT:
				case OCTETS:
				case ONLY:
				case OVER:
				case PASSING:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case PERCENT_RANK:
				case PRECEDING:
				case PREVIOUS:
				case RANGE:
				case RANK:
				case RATIO_TO_REPORT:
				case READ:
				case REF:
				case REGR_AVGX:
				case REGR_AVGY:
				case REGR_COUNT:
				case REGR_ICPT:
				case REGR_INTERCEPT:
				case REGR_R2:
				case REGR_SLOPE:
				case REGR_SXX:
				case REGR_SXY:
				case REGR_SYY:
				case RESPECT:
				case ROW_NUMBER:
				case ROWS:
				case RR:
				case RS:
				case SBCS:
				case SELECTIVITY:
				case SETS:
				case SHARE:
				case SKIP_:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case TOKEN:
				case UNBOUNDED:
				case UNPACK:
				case UR:
				case USE:
				case VAR:
				case VARIANCE:
				case VARIANCE_SAMP:
				case VAR_POP:
				case VAR_SAMP:
				case VARYING:
				case WITHOUT:
				case XML:
				case XMLAGG:
				case COLUMNS:
				case SQLID:
				case ORDINALITY:
				case SYSTEM_TIME:
				case BUSINESS_TIME:
				case MULTIPLIER:
				case UNNEST:
				case CROSS:
				case CALLER:
				case CLIENT:
				case POSITIONING:
				case SCROLL:
				case ACTION:
				case ASSEMBLE:
				case C_:
				case CALLED:
				case COBOL:
				case DB2:
				case DEFINER:
				case DISPATCH:
				case ENVIRONMENT:
				case FAILURE:
				case FAILURES:
				case JAVA:
				case MAIN:
				case NAME:
				case OPTIONS:
				case PARALLEL:
				case PLI:
				case REGISTERS:
				case RESIDENT:
				case SECURED:
				case SPECIAL:
				case SQL:
				case STOP:
				case SUB:
				case YES:
				case APPLICATION:
				case CHANGED:
				case COMPATIBILITY:
				case COMPRESS:
				case COPY:
				case FREEPAGE:
				case GBPCACHE:
				case INCLUDE:
				case MAXVALUE:
				case MINVALUE:
				case PCTFREE:
				case REGENERATE:
				case MASK:
				case ENABLE:
				case PERMISSION:
				case ATOMIC:
				case SQLEXCEPTION:
				case MERGE:
				case MATCHED:
				case SQLSTATE:
				case MESSAGE_TEXT:
				case OVERRIDING:
				case PORTION:
				case DB2SQL:
				case DEBUG:
				case GENERAL:
				case MODE_:
				case REXX:
				case CACHE:
				case CYCLE:
				case INCREMENT:
				case RESTART:
				case DATACLAS:
				case MGMTCLAS:
				case REMOVE:
				case STORCLAS:
				case ACCESS:
				case ACTIVATE:
				case ALWAYS:
				case APPEND:
				case ARCHIVE:
				case BUSINESS:
				case CASCADE:
				case CHANGES:
				case CONTROL:
				case DEACTIVATE:
				case DEFERRED:
				case EACH:
				case ENFORCED:
				case EXTRA:
				case FOREIGN:
				case HIDDEN_:
				case HISTORY:
				case ID:
				case IDENTITY:
				case IMPLICITLY:
				case INITIALLY:
				case INLINE:
				case OPERATION:
				case ORGANIZE:
				case OVERLAPS:
				case PACKAGE_NAME:
				case PACKAGE_SCHEMA:
				case PACKAGE_VERSION:
				case PRIMARY:
				case RESET:
				case ROTATE:
				case START:
				case SYSIBM:
				case TRANSACTION:
				case XMLSCHEMA:
				case ELEMENT:
				case URL:
				case NAMESPACE:
				case LOCATION:
				case SYSXSR:
				case ALGORITHM:
				case FIXEDLENGTH:
				case HUFFMAN:
				case LOB:
				case LOG:
				case LOGGED:
				case MAXPARTITIONS:
				case MAXROWS:
				case MEMBER:
				case MOVE:
				case PAGE:
				case PAGENUM:
				case PENDING:
				case RELATIVE:
				case SEGSIZE:
				case TRACKMOD:
				case ADDRESS:
				case ATTRIBUTES:
				case AUTHENTICATION:
				case AUTHID:
				case CONTEXT:
				case JOBNAME:
				case OWNER:
				case PROFILE:
				case QUALIFIER:
				case SERVAUTH:
				case TRUSTED:
				case SECTION:
				case ACTIVE:
				case VERSION:
				case ALIAS:
				case WORK:
				case WORKFILE:
				case SYSDEFLT:
				case NULTERM:
				case STRUCTURE:
				case GENERIC:
				case ABS:
				case ABSVAL:
				case ACOS:
				case ADD_DAYS:
				case ADD_MONTHS:
				case ARRAY_DELETE:
				case ARRAY_FIRST:
				case ARRAY_LAST:
				case ARRAY_NEXT:
				case ARRAY_PRIOR:
				case ARRAY_TRIM:
				case ASCII:
				case ASCII_CHR:
				case ASCIISTR:
				case ASCII_STR:
				case ASIN:
				case ATAN:
				case ATAN2:
				case ATANH:
				case BIGINT:
				case BINARY:
				case BITAND:
				case BITANDNOT:
				case BITNOT:
				case BITOR:
				case BITXOR:
				case BLOB:
				case BTRIM:
				case CARDINALITY:
				case CCSID_ENCODING:
				case CEIL:
				case CEILING:
				case CHAR9:
				case CHARACTER_LENGTH:
				case CHAR_LENGTH:
				case CHR:
				case CLOB:
				case COALESCE:
				case COLLATION_KEY:
				case COMPARE_DECFLOAT:
				case COS:
				case COSH:
				case DATE:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFWEEK_ISO:
				case DAYOFYEAR:
				case DAYS_BETWEEN:
				case DBCLOB:
				case DEC:
				case DECFLOAT:
				case DECFLOAT_FORMAT:
				case DECFLOAT_SORTKEY:
				case DECIMAL:
				case DECODE:
				case DECRYPT_BINARY:
				case DECRYPT_BIT:
				case DECRYPT_CHAR:
				case DECRYPT_DATAKEY_BIGINT:
				case DECRYPT_DATAKEY_BIT:
				case DECRYPT_DATAKEY_CLOB:
				case DECRYPT_DATAKEY_DBCLOB:
				case DECRYPT_DATAKEY_DECIMAL:
				case DECRYPT_DATAKEY_INTEGER:
				case DECRYPT_DATAKEY_VARCHAR:
				case DECRYPT_DATAKEY_VARGRAPHIC:
				case DECRYPT_DB:
				case DEGREES:
				case DIFFERENCE:
				case DIGITS:
				case DOUBLE_PRECISION:
				case DSN_XMLVALIDATE:
				case EBCDIC_CHR:
				case EBCDIC_STR:
				case ENCRYPT_DATAKEY:
				case ENCRYPT_TDES:
				case EXP:
				case EXTRACT:
				case FLOAT:
				case FLOOR:
				case GENERATE_UNIQUE:
				case GENERATE_UNIQUE_BINARY:
				case GETHINT:
				case GETVARIABLE:
				case GRAPHIC:
				case GREATEST:
				case HASH:
				case HASH_CRC32:
				case HASH_MD5:
				case HASH_SHA1:
				case HASH_SHA256:
				case HEX:
				case IDENTITY_VAL_LOCAL:
				case IFNULL:
				case INSTR:
				case INT:
				case INTEGER:
				case JULIAN_DAY:
				case LAST_DAY:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LN:
				case LOCATE:
				case LOCATE_IN_STRING:
				case LOG10:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAX:
				case MAX_CARDINALITY:
				case MIDNIGHT_SECONDS:
				case MIN:
				case MINUTE:
				case MOD:
				case MONTHS_BETWEEN:
				case MQREAD:
				case MQREADCLOB:
				case MQRECEIVE:
				case MQRECEIVECLOB:
				case MQSEND:
				case MULTIPLY_ALT:
				case NEXT_DAY:
				case NEXT_MONTH:
				case NORMALIZE_DECFLOAT:
				case NORMALIZE_STRING:
				case NULLIF:
				case NVL:
				case OVERLAY:
				case PACK:
				case POSITION:
				case POSSTR:
				case POW:
				case POWER:
				case QUANTIZE:
				case QUARTER:
				case RADIANS:
				case RAISE_ERROR:
				case RAND:
				case RANDOM:
				case REAL:
				case REGEXP_COUNT:
				case REGEXP_INSTR:
				case REGEXP_LIKE:
				case REGEXP_REPLACE:
				case REGEXP_SUBSTR:
				case REPLACE:
				case RID:
				case ROUND:
				case ROUND_TIMESTAMP:
				case ROWID:
				case RPAD:
				case RTRIM:
				case SCORE:
				case SIGN:
				case SIN:
				case SINH:
				case SMALLINT:
				case SOAPHTTPC:
				case SOAPHTTPNC:
				case SOAPHTTPNV:
				case SOAPHTTPV:
				case SOUNDEX:
				case SPACE:
				case SQRT:
				case STRIP:
				case STRLEFT:
				case STRPOS:
				case STRRIGHT:
				case SUBSTR:
				case SUBSTRING:
				case TAN:
				case TANH:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIMESTAMP_FORMAT:
				case TIMESTAMP_ISO:
				case TIMESTAMP_TZ:
				case TO_CHAR:
				case TO_CLOB:
				case TO_DATE:
				case TO_NUMBER:
				case TOTALORDER:
				case TO_TIMESTAMP:
				case TRANSLATE:
				case TRIM:
				case TRIM_ARRAY:
				case TRUNC:
				case TRUNC_TIMESTAMP:
				case UCASE:
				case UNICODE:
				case UNICODE_STR:
				case UNISTR:
				case UPPER:
				case VARBINARY:
				case VARCHAR:
				case VARCHAR9:
				case VARCHAR_BIT_FORMAT:
				case VARCHAR_FORMAT:
				case VARGRAPHIC:
				case VERIFY_GROUP_FOR_USER:
				case VERIFY_ROLE_FOR_USER:
				case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
				case WEEK:
				case WEEK_ISO:
				case WRAP:
				case XMLATTRIBUTES:
				case XMLCOMMENT:
				case XMLCONCAT:
				case XMLDOCUMENT:
				case XMLELEMENT:
				case XMLFOREST:
				case XMLMODIFY:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLSERIALIZE:
				case XMLTEXT:
				case XMLXSROBJECTID:
				case XSLTRANSFORM:
				case CURRENT_ACCELERATOR:
				case CURRENT_APPLICATION_COMPATIBILITY:
				case CURRENT_APPLICATION_ENCODING_SCHEME:
				case CURRENT_CLIENT_ACCTNG:
				case CURRENT_CLIENT_APPLNAME:
				case CURRENT_CLIENT_CORR_TOKEN:
				case CURRENT_CLIENT_USERID:
				case CURRENT_CLIENT_WRKSTNNAME:
				case CURRENT_DATE:
				case CURRENT_DEBUG_MODE:
				case CURRENT_DECFLOAT_ROUNDING_MODE:
				case CURRENT_DEGREE:
				case CURRENT_EXPLAIN_MODE:
				case CURRENT_GET_ACCEL_ARCHIVE:
				case CURRENT_LOCALE_LC_CTYPE:
				case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
				case CURRENT_MEMBER:
				case CURRENT_OPTIMIZATION_HINT:
				case CURRENT_PACKAGE_PATH:
				case CURRENT_PACKAGESET:
				case CURRENT_PATH:
				case CURRENT_PRECISION:
				case CURRENT_QUERY_ACCELERATION:
				case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
				case CURRENT_REFRESH_AGE:
				case CURRENT_ROUTINE_VERSION:
				case CURRENT_RULES:
				case CURRENT_SCHEMA:
				case CURRENT_SERVER:
				case CURRENT_SQLID:
				case CURRENT_TEMPORAL_BUSINESS_TIME:
				case CURRENT_TEMPORAL_SYSTEM_TIME:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case CURRENT_TIME_ZONE:
				case ENCRYPTION_PASSWORD:
				case SESSION_TIME_ZONE:
				case SESSION_USER:
				case USER:
				case ADMIN_TASK_LIST:
				case ADMIN_TASK_OUTPUT:
				case ADMIN_TASK_STATUS:
				case BLOCKING_THREADS:
				case MQREADALL:
				case MQREADALLCLOB:
				case MQRECEIVEALL:
				case MQRECEIVEALLCLOB:
				case XMLTABLE:
				case SQLIDENTIFIER:
					{
					setState(1633);
					identifier();
					}
					break;
				case LPAREN:
					{
					{
					setState(1634);
					match(LPAREN);
					setState(1635);
					identifier();
					setState(1636);
					match(RPAREN);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case 20:
				{
				{
				setState(1640);
				match(ASUTIME);
				setState(1645);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NO:
					{
					{
					setState(1641);
					match(NO);
					setState(1642);
					match(LIMIT);
					}
					}
					break;
				case LIMIT:
					{
					{
					setState(1643);
					match(LIMIT);
					setState(1644);
					match(INTEGERLITERAL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case 21:
				{
				{
				setState(1647);
				match(STAY);
				setState(1648);
				match(RESIDENT);
				setState(1649);
				_la = _input.LA(1);
				if ( !(_la==NO || _la==YES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case 22:
				{
				{
				setState(1650);
				match(PROGRAM);
				setState(1651);
				match(TYPE);
				setState(1652);
				_la = _input.LA(1);
				if ( !(_la==MAIN || _la==SUB) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case 23:
				{
				{
				setState(1653);
				match(SECURITY);
				setState(1654);
				_la = _input.LA(1);
				if ( !(_la==DB2 || _la==DEFINER || _la==USER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case 24:
				{
				setState(1667);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,127,_ctx) ) {
				case 1:
					{
					{
					setState(1655);
					match(STOP);
					setState(1656);
					match(AFTER);
					setState(1657);
					match(SYSTEM);
					setState(1658);
					match(DEFAULT);
					setState(1659);
					match(FAILURES);
					}
					}
					break;
				case 2:
					{
					{
					setState(1660);
					match(STOP);
					setState(1661);
					match(AFTER);
					setState(1662);
					match(INTEGERLITERAL);
					setState(1663);
					match(FAILURES);
					}
					}
					break;
				case 3:
					{
					{
					setState(1664);
					match(CONTINUE);
					setState(1665);
					match(AFTER);
					setState(1666);
					match(FAILURE);
					}
					}
					break;
				}
				}
				break;
			case 25:
				{
				{
				setState(1669);
				match(RUN);
				setState(1670);
				match(OPTIONS);
				setState(1671);
				runTimeOptions();
				}
				}
				break;
			case 26:
				{
				{
				setState(1672);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==INHERIT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1673);
				match(SPECIAL);
				setState(1674);
				match(REGISTERS);
				}
				}
				break;
			case 27:
				{
				{
				setState(1675);
				match(STATIC);
				setState(1676);
				match(DISPATCH);
				}
				}
				break;
			case 28:
				{
				{
				setState(1678);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1677);
					match(NOT);
					}
				}

				setState(1680);
				match(SECURED);
				}
				}
				break;
			case 29:
				{
				setState(1681);
				match(SPECIFIC);
				setState(1683);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,129,_ctx) ) {
				case 1:
					{
					setState(1682);
					specificName();
					}
					break;
				}
				}
				break;
			case 30:
				{
				{
				setState(1685);
				match(PARAMETER);
				setState(1690); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(1690);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CCSID:
						{
						{
						setState(1686);
						match(CCSID);
						setState(1687);
						_la = _input.LA(1);
						if ( !(_la==EBCDIC || _la==ASCII || _la==UNICODE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						}
						break;
					case VARCHAR:
						{
						{
						setState(1688);
						match(VARCHAR);
						setState(1689);
						_la = _input.LA(1);
						if ( !(_la==NULTERM || _la==STRUCTURE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(1692); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==CCSID || _la==VARCHAR );
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFunctionStatementSourcedOptionsContext extends ParserRuleContext {
		public TerminalNode RETURNS() { return getToken(DB2zSQLParser.RETURNS, 0); }
		public FunctionDataTypeContext functionDataType() {
			return getRuleContext(FunctionDataTypeContext.class,0);
		}
		public TerminalNode SPECIFIC() { return getToken(DB2zSQLParser.SPECIFIC, 0); }
		public SpecificNameContext specificName() {
			return getRuleContext(SpecificNameContext.class,0);
		}
		public TerminalNode PARAMETER() { return getToken(DB2zSQLParser.PARAMETER, 0); }
		public TerminalNode CCSID() { return getToken(DB2zSQLParser.CCSID, 0); }
		public TerminalNode SOURCE() { return getToken(DB2zSQLParser.SOURCE, 0); }
		public TerminalNode ASCII() { return getToken(DB2zSQLParser.ASCII, 0); }
		public TerminalNode EBCDIC() { return getToken(DB2zSQLParser.EBCDIC, 0); }
		public TerminalNode UNICODE() { return getToken(DB2zSQLParser.UNICODE, 0); }
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode LOCATOR() { return getToken(DB2zSQLParser.LOCATOR, 0); }
		public FunctionNameContext functionName() {
			return getRuleContext(FunctionNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ParameterTypeContext> parameterType() {
			return getRuleContexts(ParameterTypeContext.class);
		}
		public ParameterTypeContext parameterType(int i) {
			return getRuleContext(ParameterTypeContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public CreateFunctionStatementSourcedOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunctionStatementSourcedOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateFunctionStatementSourcedOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateFunctionStatementSourcedOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateFunctionStatementSourcedOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFunctionStatementSourcedOptionsContext createFunctionStatementSourcedOptions() throws RecognitionException {
		CreateFunctionStatementSourcedOptionsContext _localctx = new CreateFunctionStatementSourcedOptionsContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_createFunctionStatementSourcedOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1724);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RETURNS:
				{
				{
				setState(1696);
				match(RETURNS);
				setState(1697);
				functionDataType();
				setState(1700);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(1698);
					match(AS);
					setState(1699);
					match(LOCATOR);
					}
				}

				}
				}
				break;
			case SPECIFIC:
				{
				{
				setState(1702);
				match(SPECIFIC);
				setState(1703);
				specificName();
				}
				}
				break;
			case PARAMETER:
				{
				{
				setState(1704);
				match(PARAMETER);
				setState(1705);
				match(CCSID);
				setState(1706);
				_la = _input.LA(1);
				if ( !(_la==EBCDIC || _la==ASCII || _la==UNICODE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case SOURCE:
				{
				{
				setState(1707);
				match(SOURCE);
				setState(1722);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,135,_ctx) ) {
				case 1:
					{
					{
					setState(1708);
					functionName();
					setState(1709);
					match(LPAREN);
					setState(1710);
					parameterType();
					setState(1715);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1711);
						match(COMMA);
						setState(1712);
						parameterType();
						}
						}
						setState(1717);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(1718);
					match(RPAREN);
					}
					}
					break;
				case 2:
					{
					{
					setState(1720);
					match(SPECIFIC);
					setState(1721);
					specificName();
					}
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFunctionStatementInlineSqlScalarOptionsContext extends ParserRuleContext {
		public TerminalNode SPECIFIC() { return getToken(DB2zSQLParser.SPECIFIC, 0); }
		public TerminalNode RETURNS() { return getToken(DB2zSQLParser.RETURNS, 0); }
		public FunctionDataTypeContext functionDataType() {
			return getRuleContext(FunctionDataTypeContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(DB2zSQLParser.RETURN, 0); }
		public TerminalNode DETERMINISTIC() { return getToken(DB2zSQLParser.DETERMINISTIC, 0); }
		public TerminalNode VARIANT() { return getToken(DB2zSQLParser.VARIANT, 0); }
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public List<TerminalNode> NULL() { return getTokens(DB2zSQLParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(DB2zSQLParser.NULL, i);
		}
		public TerminalNode INPUT() { return getToken(DB2zSQLParser.INPUT, 0); }
		public TerminalNode CALL() { return getToken(DB2zSQLParser.CALL, 0); }
		public TerminalNode EXTERNAL() { return getToken(DB2zSQLParser.EXTERNAL, 0); }
		public TerminalNode ACTION() { return getToken(DB2zSQLParser.ACTION, 0); }
		public TerminalNode STATIC() { return getToken(DB2zSQLParser.STATIC, 0); }
		public TerminalNode DISPATCH() { return getToken(DB2zSQLParser.DISPATCH, 0); }
		public TerminalNode SECURED() { return getToken(DB2zSQLParser.SECURED, 0); }
		public TerminalNode PARAMETER() { return getToken(DB2zSQLParser.PARAMETER, 0); }
		public TerminalNode CCSID() { return getToken(DB2zSQLParser.CCSID, 0); }
		public SpecificNameContext specificName() {
			return getRuleContext(SpecificNameContext.class,0);
		}
		public TerminalNode ASCII() { return getToken(DB2zSQLParser.ASCII, 0); }
		public TerminalNode EBCDIC() { return getToken(DB2zSQLParser.EBCDIC, 0); }
		public TerminalNode UNICODE() { return getToken(DB2zSQLParser.UNICODE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public FullSelectContext fullSelect() {
			return getRuleContext(FullSelectContext.class,0);
		}
		public TerminalNode CALLED() { return getToken(DB2zSQLParser.CALLED, 0); }
		public TerminalNode READS() { return getToken(DB2zSQLParser.READS, 0); }
		public TerminalNode SQL() { return getToken(DB2zSQLParser.SQL, 0); }
		public TerminalNode DATA() { return getToken(DB2zSQLParser.DATA, 0); }
		public TerminalNode CONTAINS() { return getToken(DB2zSQLParser.CONTAINS, 0); }
		public TerminalNode LANGUAGE() { return getToken(DB2zSQLParser.LANGUAGE, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public CreateFunctionStatementInlineSqlScalarOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunctionStatementInlineSqlScalarOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCreateFunctionStatementInlineSqlScalarOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCreateFunctionStatementInlineSqlScalarOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCreateFunctionStatementInlineSqlScalarOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFunctionStatementInlineSqlScalarOptionsContext createFunctionStatementInlineSqlScalarOptions() throws RecognitionException {
		CreateFunctionStatementInlineSqlScalarOptionsContext _localctx = new CreateFunctionStatementInlineSqlScalarOptionsContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_createFunctionStatementInlineSqlScalarOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1781);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,146,_ctx) ) {
			case 1:
				{
				{
				setState(1726);
				match(RETURNS);
				setState(1727);
				functionDataType();
				setState(1730);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LANGUAGE) {
					{
					setState(1728);
					match(LANGUAGE);
					setState(1729);
					match(SQL);
					}
				}

				}
				}
				break;
			case 2:
				{
				{
				setState(1732);
				match(RETURN);
				setState(1736);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,138,_ctx) ) {
				case 1:
					{
					setState(1733);
					expression();
					}
					break;
				case 2:
					{
					setState(1734);
					match(NULL);
					}
					break;
				case 3:
					{
					setState(1735);
					fullSelect();
					}
					break;
				}
				}
				}
				break;
			case 3:
				{
				{
				setState(1739);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1738);
					match(NOT);
					}
				}

				setState(1741);
				match(DETERMINISTIC);
				}
				}
				break;
			case 4:
				{
				{
				setState(1743);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1742);
					match(NOT);
					}
				}

				setState(1745);
				match(VARIANT);
				}
				}
				break;
			case 5:
				{
				{
				setState(1749);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case RETURNS:
					{
					{
					setState(1746);
					match(RETURNS);
					setState(1747);
					match(NULL);
					}
					}
					break;
				case CALLED:
					{
					setState(1748);
					match(CALLED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1751);
				match(ON);
				setState(1752);
				match(NULL);
				setState(1753);
				match(INPUT);
				}
				}
				break;
			case 6:
				{
				{
				setState(1754);
				match(NULL);
				setState(1755);
				match(CALL);
				}
				}
				break;
			case 7:
				{
				setState(1761);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case READS:
					{
					{
					setState(1756);
					match(READS);
					setState(1757);
					match(SQL);
					setState(1758);
					match(DATA);
					}
					}
					break;
				case CONTAINS:
					{
					{
					setState(1759);
					match(CONTAINS);
					setState(1760);
					match(SQL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 8:
				{
				{
				setState(1764);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(1763);
					match(NO);
					}
				}

				setState(1766);
				match(EXTERNAL);
				setState(1767);
				match(ACTION);
				}
				}
				break;
			case 9:
				{
				{
				setState(1768);
				match(STATIC);
				setState(1769);
				match(DISPATCH);
				}
				}
				break;
			case 10:
				{
				{
				setState(1771);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1770);
					match(NOT);
					}
				}

				setState(1773);
				match(SECURED);
				}
				}
				break;
			case 11:
				{
				setState(1774);
				match(SPECIFIC);
				setState(1776);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,145,_ctx) ) {
				case 1:
					{
					setState(1775);
					specificName();
					}
					break;
				}
				}
				break;
			case 12:
				{
				{
				setState(1778);
				match(PARAMETER);
				setState(1779);
				match(CCSID);
				setState(1780);
				_la = _input.LA(1);
				if ( !(_la==EBCDIC || _la==ASCII || _la==UNICODE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SequenceAliasContext extends ParserRuleContext {
		public AliasNameContext aliasName() {
			return getRuleContext(AliasNameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode SEQUENCE() { return getToken(DB2zSQLParser.SEQUENCE, 0); }
		public SequenceNameContext sequenceName() {
			return getRuleContext(SequenceNameContext.class,0);
		}
		public SequenceAliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequenceAlias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSequenceAlias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSequenceAlias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSequenceAlias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SequenceAliasContext sequenceAlias() throws RecognitionException {
		SequenceAliasContext _localctx = new SequenceAliasContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_sequenceAlias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1783);
			aliasName();
			setState(1784);
			match(FOR);
			setState(1785);
			match(SEQUENCE);
			setState(1786);
			sequenceName();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableAliasContext extends ParserRuleContext {
		public AliasNameContext aliasName() {
			return getRuleContext(AliasNameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public TableAliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableAlias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTableAlias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTableAlias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTableAlias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableAliasContext tableAlias() throws RecognitionException {
		TableAliasContext _localctx = new TableAliasContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_tableAlias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1788);
			aliasName();
			setState(1789);
			match(FOR);
			setState(1791);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,147,_ctx) ) {
			case 1:
				{
				setState(1790);
				match(TABLE);
				}
				break;
			}
			setState(1793);
			tableName();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AuthorizationContext extends ParserRuleContext {
		public TerminalNode USER() { return getToken(DB2zSQLParser.USER, 0); }
		public List<HostVariableContext> hostVariable() {
			return getRuleContexts(HostVariableContext.class);
		}
		public HostVariableContext hostVariable(int i) {
			return getRuleContext(HostVariableContext.class,i);
		}
		public TerminalNode USING() { return getToken(DB2zSQLParser.USING, 0); }
		public AuthorizationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_authorization; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAuthorization(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAuthorization(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAuthorization(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AuthorizationContext authorization() throws RecognitionException {
		AuthorizationContext _localctx = new AuthorizationContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_authorization);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1795);
			match(USER);
			setState(1796);
			hostVariable();
			setState(1797);
			match(USING);
			setState(1798);
			hostVariable();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SearchedDeleteContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(DB2zSQLParser.DELETE, 0); }
		public TerminalNode FROM() { return getToken(DB2zSQLParser.FROM, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(DB2zSQLParser.WHERE, 0); }
		public SearchConditionContext searchCondition() {
			return getRuleContext(SearchConditionContext.class,0);
		}
		public PeriodClauseContext periodClause() {
			return getRuleContext(PeriodClauseContext.class,0);
		}
		public CorrelationNameContext correlationName() {
			return getRuleContext(CorrelationNameContext.class,0);
		}
		public IncludeColumnsContext includeColumns() {
			return getRuleContext(IncludeColumnsContext.class,0);
		}
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public AssignmentClauseContext assignmentClause() {
			return getRuleContext(AssignmentClauseContext.class,0);
		}
		public FetchClauseContext fetchClause() {
			return getRuleContext(FetchClauseContext.class,0);
		}
		public List<IsolationClauseContext> isolationClause() {
			return getRuleContexts(IsolationClauseContext.class);
		}
		public IsolationClauseContext isolationClause(int i) {
			return getRuleContext(IsolationClauseContext.class,i);
		}
		public List<SkipLockedDataClauseContext> skipLockedDataClause() {
			return getRuleContexts(SkipLockedDataClauseContext.class);
		}
		public SkipLockedDataClauseContext skipLockedDataClause(int i) {
			return getRuleContext(SkipLockedDataClauseContext.class,i);
		}
		public TerminalNode QUERYNO() { return getToken(DB2zSQLParser.QUERYNO, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public SearchedDeleteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searchedDelete; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSearchedDelete(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSearchedDelete(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSearchedDelete(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SearchedDeleteContext searchedDelete() throws RecognitionException {
		SearchedDeleteContext _localctx = new SearchedDeleteContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_searchedDelete);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1800);
			match(DELETE);
			setState(1801);
			match(FROM);
			setState(1802);
			tableName();
			setState(1804);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,148,_ctx) ) {
			case 1:
				{
				setState(1803);
				periodClause();
				}
				break;
			}
			setState(1807);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,149,_ctx) ) {
			case 1:
				{
				setState(1806);
				correlationName();
				}
				break;
			}
			setState(1810);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INCLUDE) {
				{
				setState(1809);
				includeColumns();
				}
			}

			setState(1814);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SET) {
				{
				setState(1812);
				match(SET);
				setState(1813);
				assignmentClause();
				}
			}

			{
			setState(1816);
			match(WHERE);
			setState(1817);
			searchCondition();
			}
			setState(1820);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,152,_ctx) ) {
			case 1:
				{
				setState(1819);
				fetchClause();
				}
				break;
			}
			setState(1826);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,154,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(1824);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case WITH:
						{
						setState(1822);
						isolationClause();
						}
						break;
					case SKIP_:
						{
						setState(1823);
						skipLockedDataClause();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(1828);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,154,_ctx);
			}
			setState(1831);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,155,_ctx) ) {
			case 1:
				{
				setState(1829);
				match(QUERYNO);
				setState(1830);
				match(INTEGERLITERAL);
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PositionedDeleteContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(DB2zSQLParser.DELETE, 0); }
		public TerminalNode FROM() { return getToken(DB2zSQLParser.FROM, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(DB2zSQLParser.WHERE, 0); }
		public TerminalNode CURRENT() { return getToken(DB2zSQLParser.CURRENT, 0); }
		public List<TerminalNode> OF() { return getTokens(DB2zSQLParser.OF); }
		public TerminalNode OF(int i) {
			return getToken(DB2zSQLParser.OF, i);
		}
		public CursorNameContext cursorName() {
			return getRuleContext(CursorNameContext.class,0);
		}
		public CorrelationNameContext correlationName() {
			return getRuleContext(CorrelationNameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode ROW() { return getToken(DB2zSQLParser.ROW, 0); }
		public TerminalNode ROWSET() { return getToken(DB2zSQLParser.ROWSET, 0); }
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public PositionedDeleteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_positionedDelete; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPositionedDelete(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPositionedDelete(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPositionedDelete(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PositionedDeleteContext positionedDelete() throws RecognitionException {
		PositionedDeleteContext _localctx = new PositionedDeleteContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_positionedDelete);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1833);
			match(DELETE);
			setState(1834);
			match(FROM);
			setState(1835);
			tableName();
			setState(1837);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,156,_ctx) ) {
			case 1:
				{
				setState(1836);
				correlationName();
				}
				break;
			}
			setState(1839);
			match(WHERE);
			setState(1840);
			match(CURRENT);
			setState(1841);
			match(OF);
			setState(1842);
			cursorName();
			setState(1851);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(1843);
				match(FOR);
				setState(1844);
				match(ROW);
				setState(1847);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case COLON:
					{
					setState(1845);
					hostVariable();
					}
					break;
				case INTEGERLITERAL:
					{
					setState(1846);
					match(INTEGERLITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1849);
				match(OF);
				setState(1850);
				match(ROWSET);
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeleteStatementContext extends ParserRuleContext {
		public SearchedDeleteContext searchedDelete() {
			return getRuleContext(SearchedDeleteContext.class,0);
		}
		public PositionedDeleteContext positionedDelete() {
			return getRuleContext(PositionedDeleteContext.class,0);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deleteStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDeleteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDeleteStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDeleteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeleteStatementContext deleteStatement() throws RecognitionException {
		DeleteStatementContext _localctx = new DeleteStatementContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_deleteStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1855);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,159,_ctx) ) {
			case 1:
				{
				setState(1853);
				searchedDelete();
				}
				break;
			case 2:
				{
				setState(1854);
				positionedDelete();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertStatementContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(DB2zSQLParser.INSERT, 0); }
		public TerminalNode INTO() { return getToken(DB2zSQLParser.INTO, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public MultipleRowInsertContext multipleRowInsert() {
			return getRuleContext(MultipleRowInsertContext.class,0);
		}
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public IncludeColumnsContext includeColumns() {
			return getRuleContext(IncludeColumnsContext.class,0);
		}
		public TerminalNode OVERRIDING() { return getToken(DB2zSQLParser.OVERRIDING, 0); }
		public TerminalNode USER() { return getToken(DB2zSQLParser.USER, 0); }
		public TerminalNode VALUE() { return getToken(DB2zSQLParser.VALUE, 0); }
		public TerminalNode VALUES() { return getToken(DB2zSQLParser.VALUES, 0); }
		public FullSelectContext fullSelect() {
			return getRuleContext(FullSelectContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public List<ValuesList1Context> valuesList1() {
			return getRuleContexts(ValuesList1Context.class);
		}
		public ValuesList1Context valuesList1(int i) {
			return getRuleContext(ValuesList1Context.class,i);
		}
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public List<CommonTableExpressionContext> commonTableExpression() {
			return getRuleContexts(CommonTableExpressionContext.class);
		}
		public CommonTableExpressionContext commonTableExpression(int i) {
			return getRuleContext(CommonTableExpressionContext.class,i);
		}
		public IsolationClauseContext isolationClause() {
			return getRuleContext(IsolationClauseContext.class,0);
		}
		public TerminalNode QUERYNO() { return getToken(DB2zSQLParser.QUERYNO, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public InsertStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterInsertStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitInsertStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitInsertStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertStatementContext insertStatement() throws RecognitionException {
		InsertStatementContext _localctx = new InsertStatementContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_insertStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1857);
			match(INSERT);
			setState(1858);
			match(INTO);
			setState(1859);
			tableName();
			setState(1871);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,161,_ctx) ) {
			case 1:
				{
				setState(1860);
				match(LPAREN);
				setState(1861);
				columnName();
				setState(1866);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1862);
					match(COMMA);
					setState(1863);
					columnName();
					}
					}
					setState(1868);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1869);
				match(RPAREN);
				}
				break;
			}
			setState(1874);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INCLUDE) {
				{
				setState(1873);
				includeColumns();
				}
			}

			setState(1879);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OVERRIDING) {
				{
				setState(1876);
				match(OVERRIDING);
				setState(1877);
				match(USER);
				setState(1878);
				match(VALUE);
				}
			}

			setState(1916);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,170,_ctx) ) {
			case 1:
				{
				{
				setState(1881);
				match(VALUES);
				setState(1894);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,165,_ctx) ) {
				case 1:
					{
					setState(1882);
					valuesList1();
					}
					break;
				case 2:
					{
					{
					setState(1883);
					match(LPAREN);
					setState(1884);
					valuesList1();
					setState(1889);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1885);
						match(COMMA);
						setState(1886);
						valuesList1();
						}
						}
						setState(1891);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(1892);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 2:
				{
				{
				setState(1905);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(1896);
					match(WITH);
					setState(1897);
					commonTableExpression();
					setState(1902);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1898);
						match(COMMA);
						setState(1899);
						commonTableExpression();
						}
						}
						setState(1904);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(1907);
				fullSelect();
				setState(1909);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(1908);
					isolationClause();
					}
				}

				setState(1913);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==QUERYNO) {
					{
					setState(1911);
					match(QUERYNO);
					setState(1912);
					match(INTEGERLITERAL);
					}
				}

				}
				}
				break;
			case 3:
				{
				setState(1915);
				multipleRowInsert();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MergeStatementContext extends ParserRuleContext {
		public TerminalNode MERGE() { return getToken(DB2zSQLParser.MERGE, 0); }
		public TerminalNode INTO() { return getToken(DB2zSQLParser.INTO, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode USING() { return getToken(DB2zSQLParser.USING, 0); }
		public List<TerminalNode> ON() { return getTokens(DB2zSQLParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(DB2zSQLParser.ON, i);
		}
		public SearchConditionContext searchCondition() {
			return getRuleContext(SearchConditionContext.class,0);
		}
		public SourceValuesContext sourceValues() {
			return getRuleContext(SourceValuesContext.class,0);
		}
		public CorrelationClauseContext correlationClause() {
			return getRuleContext(CorrelationClauseContext.class,0);
		}
		public IncludeColumnsContext includeColumns() {
			return getRuleContext(IncludeColumnsContext.class,0);
		}
		public List<TerminalNode> WHEN() { return getTokens(DB2zSQLParser.WHEN); }
		public TerminalNode WHEN(int i) {
			return getToken(DB2zSQLParser.WHEN, i);
		}
		public List<MatchingConditionContext> matchingCondition() {
			return getRuleContexts(MatchingConditionContext.class);
		}
		public MatchingConditionContext matchingCondition(int i) {
			return getRuleContext(MatchingConditionContext.class,i);
		}
		public List<TerminalNode> THEN() { return getTokens(DB2zSQLParser.THEN); }
		public TerminalNode THEN(int i) {
			return getToken(DB2zSQLParser.THEN, i);
		}
		public TerminalNode ELSE() { return getToken(DB2zSQLParser.ELSE, 0); }
		public TerminalNode IGNORE() { return getToken(DB2zSQLParser.IGNORE, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TerminalNode ATOMIC() { return getToken(DB2zSQLParser.ATOMIC, 0); }
		public TerminalNode CONTINUE() { return getToken(DB2zSQLParser.CONTINUE, 0); }
		public TerminalNode SQLEXCEPTION() { return getToken(DB2zSQLParser.SQLEXCEPTION, 0); }
		public TerminalNode QUERYNO() { return getToken(DB2zSQLParser.QUERYNO, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public List<ModificationOperationContext> modificationOperation() {
			return getRuleContexts(ModificationOperationContext.class);
		}
		public ModificationOperationContext modificationOperation(int i) {
			return getRuleContext(ModificationOperationContext.class,i);
		}
		public List<SignalStatementContext> signalStatement() {
			return getRuleContexts(SignalStatementContext.class);
		}
		public SignalStatementContext signalStatement(int i) {
			return getRuleContext(SignalStatementContext.class,i);
		}
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public MergeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mergeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterMergeStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitMergeStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitMergeStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MergeStatementContext mergeStatement() throws RecognitionException {
		MergeStatementContext _localctx = new MergeStatementContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_mergeStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1918);
			match(MERGE);
			setState(1919);
			match(INTO);
			setState(1920);
			tableName();
			setState(1922);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,171,_ctx) ) {
			case 1:
				{
				setState(1921);
				correlationClause();
				}
				break;
			}
			setState(1925);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INCLUDE) {
				{
				setState(1924);
				includeColumns();
				}
			}

			setState(1927);
			match(USING);
			setState(1942);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,175,_ctx) ) {
			case 1:
				{
				{
				setState(1931);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,173,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1928);
						match(LPAREN);
						}
						} 
					}
					setState(1933);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,173,_ctx);
				}
				setState(1934);
				tableReference();
				setState(1938);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==RPAREN) {
					{
					{
					setState(1935);
					match(RPAREN);
					}
					}
					setState(1940);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case 2:
				{
				setState(1941);
				sourceValues();
				}
				break;
			}
			setState(1944);
			match(ON);
			setState(1945);
			searchCondition();
			setState(1953); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1946);
				match(WHEN);
				setState(1947);
				matchingCondition();
				setState(1948);
				match(THEN);
				setState(1951);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DELETE:
				case INSERT:
				case UPDATE:
					{
					setState(1949);
					modificationOperation();
					}
					break;
				case SIGNAL:
					{
					setState(1950);
					signalStatement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				setState(1955); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(1959);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(1957);
				match(ELSE);
				setState(1958);
				match(IGNORE);
				}
			}

			setState(1966);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,179,_ctx) ) {
			case 1:
				{
				setState(1961);
				match(NOT);
				setState(1962);
				match(ATOMIC);
				setState(1963);
				match(CONTINUE);
				setState(1964);
				match(ON);
				setState(1965);
				match(SQLEXCEPTION);
				}
				break;
			}
			setState(1970);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,180,_ctx) ) {
			case 1:
				{
				setState(1968);
				match(QUERYNO);
				setState(1969);
				match(INTEGERLITERAL);
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SearchedUpdateContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(DB2zSQLParser.UPDATE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public AssignmentClauseContext assignmentClause() {
			return getRuleContext(AssignmentClauseContext.class,0);
		}
		public PeriodClauseContext periodClause() {
			return getRuleContext(PeriodClauseContext.class,0);
		}
		public CorrelationNameContext correlationName() {
			return getRuleContext(CorrelationNameContext.class,0);
		}
		public IncludeColumnsContext includeColumns() {
			return getRuleContext(IncludeColumnsContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(DB2zSQLParser.WHERE, 0); }
		public SearchConditionContext searchCondition() {
			return getRuleContext(SearchConditionContext.class,0);
		}
		public List<IsolationClauseContext> isolationClause() {
			return getRuleContexts(IsolationClauseContext.class);
		}
		public IsolationClauseContext isolationClause(int i) {
			return getRuleContext(IsolationClauseContext.class,i);
		}
		public List<SkipLockedDataClauseContext> skipLockedDataClause() {
			return getRuleContexts(SkipLockedDataClauseContext.class);
		}
		public SkipLockedDataClauseContext skipLockedDataClause(int i) {
			return getRuleContext(SkipLockedDataClauseContext.class,i);
		}
		public TerminalNode QUERYNO() { return getToken(DB2zSQLParser.QUERYNO, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public SearchedUpdateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searchedUpdate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSearchedUpdate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSearchedUpdate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSearchedUpdate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SearchedUpdateContext searchedUpdate() throws RecognitionException {
		SearchedUpdateContext _localctx = new SearchedUpdateContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_searchedUpdate);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1972);
			match(UPDATE);
			setState(1973);
			tableName();
			setState(1975);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,181,_ctx) ) {
			case 1:
				{
				setState(1974);
				periodClause();
				}
				break;
			}
			setState(1978);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,182,_ctx) ) {
			case 1:
				{
				setState(1977);
				correlationName();
				}
				break;
			}
			setState(1981);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INCLUDE) {
				{
				setState(1980);
				includeColumns();
				}
			}

			setState(1983);
			match(SET);
			setState(1984);
			assignmentClause();
			setState(1987);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,184,_ctx) ) {
			case 1:
				{
				setState(1985);
				match(WHERE);
				setState(1986);
				searchCondition();
				}
				break;
			}
			setState(1993);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,186,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(1991);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case WITH:
						{
						setState(1989);
						isolationClause();
						}
						break;
					case SKIP_:
						{
						setState(1990);
						skipLockedDataClause();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(1995);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,186,_ctx);
			}
			setState(1998);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,187,_ctx) ) {
			case 1:
				{
				setState(1996);
				match(QUERYNO);
				setState(1997);
				match(INTEGERLITERAL);
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PositionedUpdateContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(DB2zSQLParser.UPDATE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public AssignmentClauseContext assignmentClause() {
			return getRuleContext(AssignmentClauseContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(DB2zSQLParser.WHERE, 0); }
		public TerminalNode CURRENT() { return getToken(DB2zSQLParser.CURRENT, 0); }
		public List<TerminalNode> OF() { return getTokens(DB2zSQLParser.OF); }
		public TerminalNode OF(int i) {
			return getToken(DB2zSQLParser.OF, i);
		}
		public CursorNameContext cursorName() {
			return getRuleContext(CursorNameContext.class,0);
		}
		public CorrelationNameContext correlationName() {
			return getRuleContext(CorrelationNameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode ROW() { return getToken(DB2zSQLParser.ROW, 0); }
		public TerminalNode ROWSET() { return getToken(DB2zSQLParser.ROWSET, 0); }
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public PositionedUpdateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_positionedUpdate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPositionedUpdate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPositionedUpdate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPositionedUpdate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PositionedUpdateContext positionedUpdate() throws RecognitionException {
		PositionedUpdateContext _localctx = new PositionedUpdateContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_positionedUpdate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2000);
			match(UPDATE);
			setState(2001);
			tableName();
			setState(2003);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,188,_ctx) ) {
			case 1:
				{
				setState(2002);
				correlationName();
				}
				break;
			}
			setState(2005);
			match(SET);
			setState(2006);
			assignmentClause();
			setState(2007);
			match(WHERE);
			setState(2008);
			match(CURRENT);
			setState(2009);
			match(OF);
			setState(2010);
			cursorName();
			setState(2019);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(2011);
				match(FOR);
				setState(2012);
				match(ROW);
				setState(2015);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case COLON:
					{
					setState(2013);
					hostVariable();
					}
					break;
				case INTEGERLITERAL:
					{
					setState(2014);
					match(INTEGERLITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2017);
				match(OF);
				setState(2018);
				match(ROWSET);
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateStatementContext extends ParserRuleContext {
		public SearchedUpdateContext searchedUpdate() {
			return getRuleContext(SearchedUpdateContext.class,0);
		}
		public PositionedUpdateContext positionedUpdate() {
			return getRuleContext(PositionedUpdateContext.class,0);
		}
		public UpdateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterUpdateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitUpdateStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitUpdateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateStatementContext updateStatement() throws RecognitionException {
		UpdateStatementContext _localctx = new UpdateStatementContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_updateStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2023);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,191,_ctx) ) {
			case 1:
				{
				setState(2021);
				searchedUpdate();
				}
				break;
			case 2:
				{
				setState(2022);
				positionedUpdate();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SourceValuesContext extends ParserRuleContext {
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public TerminalNode VALUES() { return getToken(DB2zSQLParser.VALUES, 0); }
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public CorrelationNameContext correlationName() {
			return getRuleContext(CorrelationNameContext.class,0);
		}
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public ValuesSingleRowContext valuesSingleRow() {
			return getRuleContext(ValuesSingleRowContext.class,0);
		}
		public ValuesMultipleRowContext valuesMultipleRow() {
			return getRuleContext(ValuesMultipleRowContext.class,0);
		}
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public SourceValuesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sourceValues; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSourceValues(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSourceValues(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSourceValues(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SourceValuesContext sourceValues() throws RecognitionException {
		SourceValuesContext _localctx = new SourceValuesContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_sourceValues);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2025);
			match(LPAREN);
			setState(2026);
			match(VALUES);
			setState(2029);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,192,_ctx) ) {
			case 1:
				{
				setState(2027);
				valuesSingleRow();
				}
				break;
			case 2:
				{
				setState(2028);
				valuesMultipleRow();
				}
				break;
			}
			setState(2031);
			match(RPAREN);
			setState(2033);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,193,_ctx) ) {
			case 1:
				{
				setState(2032);
				match(AS);
				}
				break;
			}
			setState(2035);
			correlationName();
			setState(2036);
			match(LPAREN);
			setState(2037);
			columnName();
			setState(2042);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2038);
				match(COMMA);
				setState(2039);
				columnName();
				}
				}
				setState(2044);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2045);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValuesSingleRowContext extends ParserRuleContext {
		public List<ValuesList3Context> valuesList3() {
			return getRuleContexts(ValuesList3Context.class);
		}
		public ValuesList3Context valuesList3(int i) {
			return getRuleContext(ValuesList3Context.class,i);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public ValuesSingleRowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valuesSingleRow; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterValuesSingleRow(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitValuesSingleRow(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitValuesSingleRow(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValuesSingleRowContext valuesSingleRow() throws RecognitionException {
		ValuesSingleRowContext _localctx = new ValuesSingleRowContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_valuesSingleRow);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2059);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,196,_ctx) ) {
			case 1:
				{
				setState(2047);
				valuesList3();
				}
				break;
			case 2:
				{
				{
				setState(2048);
				match(LPAREN);
				setState(2049);
				valuesList3();
				setState(2054);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2050);
					match(COMMA);
					setState(2051);
					valuesList3();
					}
					}
					setState(2056);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2057);
				match(RPAREN);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValuesMultipleRowContext extends ParserRuleContext {
		public List<ValuesList4Context> valuesList4() {
			return getRuleContexts(ValuesList4Context.class);
		}
		public ValuesList4Context valuesList4(int i) {
			return getRuleContext(ValuesList4Context.class,i);
		}
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode ROWS() { return getToken(DB2zSQLParser.ROWS, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public ValuesMultipleRowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valuesMultipleRow; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterValuesMultipleRow(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitValuesMultipleRow(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitValuesMultipleRow(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValuesMultipleRowContext valuesMultipleRow() throws RecognitionException {
		ValuesMultipleRowContext _localctx = new ValuesMultipleRowContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_valuesMultipleRow);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2080);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,199,_ctx) ) {
			case 1:
				{
				setState(2061);
				valuesList4();
				}
				break;
			case 2:
				{
				{
				setState(2062);
				match(LPAREN);
				setState(2063);
				valuesList4();
				setState(2068);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2064);
					match(COMMA);
					setState(2065);
					valuesList4();
					}
					}
					setState(2070);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2071);
				match(RPAREN);
				}
				setState(2073);
				match(FOR);
				setState(2076);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case COLON:
					{
					setState(2074);
					hostVariable();
					}
					break;
				case INTEGERLITERAL:
					{
					setState(2075);
					match(INTEGERLITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2078);
				match(ROWS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MatchingConditionContext extends ParserRuleContext {
		public TerminalNode MATCHED() { return getToken(DB2zSQLParser.MATCHED, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TerminalNode AND() { return getToken(DB2zSQLParser.AND, 0); }
		public SearchConditionContext searchCondition() {
			return getRuleContext(SearchConditionContext.class,0);
		}
		public MatchingConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_matchingCondition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterMatchingCondition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitMatchingCondition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitMatchingCondition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MatchingConditionContext matchingCondition() throws RecognitionException {
		MatchingConditionContext _localctx = new MatchingConditionContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_matchingCondition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2083);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2082);
				match(NOT);
				}
			}

			setState(2085);
			match(MATCHED);
			setState(2088);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(2086);
				match(AND);
				setState(2087);
				searchCondition();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ModificationOperationContext extends ParserRuleContext {
		public UpdateOperationContext updateOperation() {
			return getRuleContext(UpdateOperationContext.class,0);
		}
		public DeleteOperationContext deleteOperation() {
			return getRuleContext(DeleteOperationContext.class,0);
		}
		public InsertOperationContext insertOperation() {
			return getRuleContext(InsertOperationContext.class,0);
		}
		public ModificationOperationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modificationOperation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterModificationOperation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitModificationOperation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitModificationOperation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ModificationOperationContext modificationOperation() throws RecognitionException {
		ModificationOperationContext _localctx = new ModificationOperationContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_modificationOperation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2093);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UPDATE:
				{
				setState(2090);
				updateOperation();
				}
				break;
			case DELETE:
				{
				setState(2091);
				deleteOperation();
				}
				break;
			case INSERT:
				{
				setState(2092);
				insertOperation();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AssignmentClauseContext extends ParserRuleContext {
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public List<TerminalNode> EQ() { return getTokens(DB2zSQLParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(DB2zSQLParser.EQ, i);
		}
		public List<ValuesList1Context> valuesList1() {
			return getRuleContexts(ValuesList1Context.class);
		}
		public ValuesList1Context valuesList1(int i) {
			return getRuleContext(ValuesList1Context.class,i);
		}
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public FullSelectContext fullSelect() {
			return getRuleContext(FullSelectContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public AssignmentClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignmentClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAssignmentClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAssignmentClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAssignmentClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AssignmentClauseContext assignmentClause() throws RecognitionException {
		AssignmentClauseContext _localctx = new AssignmentClauseContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_assignmentClause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2133);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,207,_ctx) ) {
			case 1:
				{
				{
				setState(2095);
				columnName();
				setState(2096);
				match(EQ);
				setState(2097);
				valuesList1();
				setState(2105);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,203,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2098);
						match(COMMA);
						setState(2099);
						columnName();
						setState(2100);
						match(EQ);
						setState(2101);
						valuesList1();
						}
						} 
					}
					setState(2107);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,203,_ctx);
				}
				}
				}
				break;
			case 2:
				{
				setState(2129);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,206,_ctx) ) {
				case 1:
					{
					setState(2108);
					match(LPAREN);
					setState(2109);
					columnName();
					setState(2114);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2110);
						match(COMMA);
						setState(2111);
						columnName();
						}
						}
						setState(2116);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2117);
					match(RPAREN);
					setState(2118);
					match(EQ);
					setState(2119);
					match(LPAREN);
					{
					setState(2120);
					valuesList1();
					setState(2125);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2121);
						match(COMMA);
						setState(2122);
						valuesList1();
						}
						}
						setState(2127);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					}
					break;
				case 2:
					{
					setState(2128);
					fullSelect();
					}
					break;
				}
				setState(2131);
				match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateOperationContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(DB2zSQLParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public List<AssignmentClauseContext> assignmentClause() {
			return getRuleContexts(AssignmentClauseContext.class);
		}
		public AssignmentClauseContext assignmentClause(int i) {
			return getRuleContext(AssignmentClauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public UpdateOperationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateOperation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterUpdateOperation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitUpdateOperation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitUpdateOperation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateOperationContext updateOperation() throws RecognitionException {
		UpdateOperationContext _localctx = new UpdateOperationContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_updateOperation);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2135);
			match(UPDATE);
			setState(2136);
			match(SET);
			setState(2137);
			assignmentClause();
			setState(2142);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,208,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2138);
					match(COMMA);
					setState(2139);
					assignmentClause();
					}
					} 
				}
				setState(2144);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,208,_ctx);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeleteOperationContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(DB2zSQLParser.DELETE, 0); }
		public DeleteOperationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deleteOperation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDeleteOperation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDeleteOperation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDeleteOperation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeleteOperationContext deleteOperation() throws RecognitionException {
		DeleteOperationContext _localctx = new DeleteOperationContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_deleteOperation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2145);
			match(DELETE);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertOperationContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(DB2zSQLParser.INSERT, 0); }
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public TerminalNode VALUES() { return getToken(DB2zSQLParser.VALUES, 0); }
		public List<ValuesList1Context> valuesList1() {
			return getRuleContexts(ValuesList1Context.class);
		}
		public ValuesList1Context valuesList1(int i) {
			return getRuleContext(ValuesList1Context.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public InsertOperationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertOperation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterInsertOperation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitInsertOperation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitInsertOperation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertOperationContext insertOperation() throws RecognitionException {
		InsertOperationContext _localctx = new InsertOperationContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_insertOperation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2147);
			match(INSERT);
			setState(2148);
			match(LPAREN);
			setState(2149);
			columnName();
			setState(2154);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2150);
				match(COMMA);
				setState(2151);
				columnName();
				}
				}
				setState(2156);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2157);
			match(RPAREN);
			setState(2158);
			match(VALUES);
			setState(2171);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,211,_ctx) ) {
			case 1:
				{
				setState(2159);
				valuesList1();
				}
				break;
			case 2:
				{
				{
				setState(2160);
				match(LPAREN);
				setState(2161);
				valuesList1();
				setState(2166);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2162);
					match(COMMA);
					setState(2163);
					valuesList1();
					}
					}
					setState(2168);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2169);
				match(RPAREN);
				}
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignalStatementContext extends ParserRuleContext {
		public TerminalNode SIGNAL() { return getToken(DB2zSQLParser.SIGNAL, 0); }
		public TerminalNode SQLSTATE() { return getToken(DB2zSQLParser.SQLSTATE, 0); }
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public TerminalNode VALUE() { return getToken(DB2zSQLParser.VALUE, 0); }
		public SignalInformationContext signalInformation() {
			return getRuleContext(SignalInformationContext.class,0);
		}
		public SignalStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signalStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSignalStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSignalStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSignalStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignalStatementContext signalStatement() throws RecognitionException {
		SignalStatementContext _localctx = new SignalStatementContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_signalStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2173);
			match(SIGNAL);
			setState(2174);
			match(SQLSTATE);
			setState(2176);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VALUE) {
				{
				setState(2175);
				match(VALUE);
				}
			}

			setState(2178);
			match(NONNUMERICLITERAL);
			setState(2180);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SET) {
				{
				setState(2179);
				signalInformation();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignalInformationContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public TerminalNode MESSAGE_TEXT() { return getToken(DB2zSQLParser.MESSAGE_TEXT, 0); }
		public TerminalNode EQ() { return getToken(DB2zSQLParser.EQ, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<OperatorContext> operator() {
			return getRuleContexts(OperatorContext.class);
		}
		public OperatorContext operator(int i) {
			return getRuleContext(OperatorContext.class,i);
		}
		public SignalInformationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signalInformation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSignalInformation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSignalInformation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSignalInformation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignalInformationContext signalInformation() throws RecognitionException {
		SignalInformationContext _localctx = new SignalInformationContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_signalInformation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2182);
			match(SET);
			setState(2183);
			match(MESSAGE_TEXT);
			setState(2184);
			match(EQ);
			setState(2185);
			expression();
			setState(2191);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 12)) & ~0x3f) == 0 && ((1L << (_la - 12)) & ((1L << (PLUS - 12)) | (1L << (MINUS - 12)) | (1L << (SPLAT - 12)) | (1L << (SLASH - 12)) | (1L << (CONCATOP - 12)) | (1L << (CONCAT - 12)))) != 0)) {
				{
				{
				setState(2186);
				operator();
				setState(2187);
				expression();
				}
				}
				setState(2193);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValuesList1Context extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(DB2zSQLParser.DEFAULT, 0); }
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<OperatorContext> operator() {
			return getRuleContexts(OperatorContext.class);
		}
		public OperatorContext operator(int i) {
			return getRuleContext(OperatorContext.class,i);
		}
		public ValuesList1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valuesList1; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterValuesList1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitValuesList1(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitValuesList1(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValuesList1Context valuesList1() throws RecognitionException {
		ValuesList1Context _localctx = new ValuesList1Context(_ctx, getState());
		enterRule(_localctx, 140, RULE_valuesList1);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2205);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,216,_ctx) ) {
			case 1:
				{
				{
				setState(2194);
				expression();
				setState(2200);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (((((_la - 12)) & ~0x3f) == 0 && ((1L << (_la - 12)) & ((1L << (PLUS - 12)) | (1L << (MINUS - 12)) | (1L << (SPLAT - 12)) | (1L << (SLASH - 12)) | (1L << (CONCATOP - 12)) | (1L << (CONCAT - 12)))) != 0)) {
					{
					{
					setState(2195);
					operator();
					setState(2196);
					expression();
					}
					}
					setState(2202);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case 2:
				{
				setState(2203);
				match(DEFAULT);
				}
				break;
			case 3:
				{
				setState(2204);
				match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValuesList2Context extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(DB2zSQLParser.DEFAULT, 0); }
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public ValuesList2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valuesList2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterValuesList2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitValuesList2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitValuesList2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValuesList2Context valuesList2() throws RecognitionException {
		ValuesList2Context _localctx = new ValuesList2Context(_ctx, getState());
		enterRule(_localctx, 142, RULE_valuesList2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2211);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,217,_ctx) ) {
			case 1:
				{
				setState(2207);
				expression();
				}
				break;
			case 2:
				{
				setState(2208);
				hostVariable();
				}
				break;
			case 3:
				{
				setState(2209);
				match(DEFAULT);
				}
				break;
			case 4:
				{
				setState(2210);
				match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValuesList3Context extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public ValuesList3Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valuesList3; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterValuesList3(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitValuesList3(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitValuesList3(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValuesList3Context valuesList3() throws RecognitionException {
		ValuesList3Context _localctx = new ValuesList3Context(_ctx, getState());
		enterRule(_localctx, 144, RULE_valuesList3);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2215);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,218,_ctx) ) {
			case 1:
				{
				setState(2213);
				expression();
				}
				break;
			case 2:
				{
				setState(2214);
				match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValuesList4Context extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public ValuesList4Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valuesList4; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterValuesList4(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitValuesList4(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitValuesList4(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValuesList4Context valuesList4() throws RecognitionException {
		ValuesList4Context _localctx = new ValuesList4Context(_ctx, getState());
		enterRule(_localctx, 146, RULE_valuesList4);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2220);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,219,_ctx) ) {
			case 1:
				{
				setState(2217);
				expression();
				}
				break;
			case 2:
				{
				setState(2218);
				hostVariable();
				}
				break;
			case 3:
				{
				setState(2219);
				match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IncludeColumnsContext extends ParserRuleContext {
		public TerminalNode INCLUDE() { return getToken(DB2zSQLParser.INCLUDE, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public List<DataTypeContext> dataType() {
			return getRuleContexts(DataTypeContext.class);
		}
		public DataTypeContext dataType(int i) {
			return getRuleContext(DataTypeContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public IncludeColumnsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_includeColumns; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterIncludeColumns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitIncludeColumns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitIncludeColumns(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IncludeColumnsContext includeColumns() throws RecognitionException {
		IncludeColumnsContext _localctx = new IncludeColumnsContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_includeColumns);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2222);
			match(INCLUDE);
			setState(2223);
			match(LPAREN);
			setState(2224);
			columnName();
			setState(2225);
			dataType();
			setState(2232);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2226);
				match(COMMA);
				setState(2227);
				columnName();
				setState(2228);
				dataType();
				}
				}
				setState(2234);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2235);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultipleRowInsertContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(DB2zSQLParser.VALUES, 0); }
		public List<ValuesList2Context> valuesList2() {
			return getRuleContexts(ValuesList2Context.class);
		}
		public ValuesList2Context valuesList2(int i) {
			return getRuleContext(ValuesList2Context.class,i);
		}
		public TerminalNode ATOMIC() { return getToken(DB2zSQLParser.ATOMIC, 0); }
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode ROWS() { return getToken(DB2zSQLParser.ROWS, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TerminalNode CONTINUE() { return getToken(DB2zSQLParser.CONTINUE, 0); }
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public TerminalNode SQLEXCEPTION() { return getToken(DB2zSQLParser.SQLEXCEPTION, 0); }
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public MultipleRowInsertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipleRowInsert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterMultipleRowInsert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitMultipleRowInsert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitMultipleRowInsert(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultipleRowInsertContext multipleRowInsert() throws RecognitionException {
		MultipleRowInsertContext _localctx = new MultipleRowInsertContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_multipleRowInsert);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2237);
			match(VALUES);
			setState(2250);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,222,_ctx) ) {
			case 1:
				{
				setState(2238);
				valuesList2();
				}
				break;
			case 2:
				{
				{
				setState(2239);
				match(LPAREN);
				setState(2240);
				valuesList2();
				setState(2245);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2241);
					match(COMMA);
					setState(2242);
					valuesList2();
					}
					}
					setState(2247);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2248);
				match(RPAREN);
				}
				}
				break;
			}
			setState(2258);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(2252);
				match(FOR);
				setState(2255);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case COLON:
					{
					setState(2253);
					hostVariable();
					}
					break;
				case INTEGERLITERAL:
					{
					setState(2254);
					match(INTEGERLITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2257);
				match(ROWS);
				}
			}

			setState(2266);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ATOMIC:
				{
				setState(2260);
				match(ATOMIC);
				}
				break;
			case NOT:
				{
				{
				setState(2261);
				match(NOT);
				setState(2262);
				match(ATOMIC);
				setState(2263);
				match(CONTINUE);
				setState(2264);
				match(ON);
				setState(2265);
				match(SQLEXCEPTION);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RegenerateClauseContext extends ParserRuleContext {
		public TerminalNode REGENERATE() { return getToken(DB2zSQLParser.REGENERATE, 0); }
		public TerminalNode USING() { return getToken(DB2zSQLParser.USING, 0); }
		public TerminalNode APPLICATION() { return getToken(DB2zSQLParser.APPLICATION, 0); }
		public TerminalNode COMPATIBILITY() { return getToken(DB2zSQLParser.COMPATIBILITY, 0); }
		public ApplCompatValueContext applCompatValue() {
			return getRuleContext(ApplCompatValueContext.class,0);
		}
		public RegenerateClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regenerateClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRegenerateClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRegenerateClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRegenerateClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RegenerateClauseContext regenerateClause() throws RecognitionException {
		RegenerateClauseContext _localctx = new RegenerateClauseContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_regenerateClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2268);
			match(REGENERATE);
			setState(2273);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,226,_ctx) ) {
			case 1:
				{
				setState(2269);
				match(USING);
				setState(2270);
				match(APPLICATION);
				setState(2271);
				match(COMPATIBILITY);
				setState(2272);
				applCompatValue();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterIndexOptionsContext extends ParserRuleContext {
		public UsingSpecificationContext usingSpecification() {
			return getRuleContext(UsingSpecificationContext.class,0);
		}
		public FreeSpecificationContext freeSpecification() {
			return getRuleContext(FreeSpecificationContext.class,0);
		}
		public GbpcacheSpecificationContext gbpcacheSpecification() {
			return getRuleContext(GbpcacheSpecificationContext.class,0);
		}
		public TerminalNode BUFFERPOOL() { return getToken(DB2zSQLParser.BUFFERPOOL, 0); }
		public BpNameContext bpName() {
			return getRuleContext(BpNameContext.class,0);
		}
		public TerminalNode CLOSE() { return getToken(DB2zSQLParser.CLOSE, 0); }
		public TerminalNode COPY() { return getToken(DB2zSQLParser.COPY, 0); }
		public TerminalNode DSSIZE() { return getToken(DB2zSQLParser.DSSIZE, 0); }
		public TerminalNode SQLIDENTIFIER() { return getToken(DB2zSQLParser.SQLIDENTIFIER, 0); }
		public TerminalNode PIECESIZE() { return getToken(DB2zSQLParser.PIECESIZE, 0); }
		public TerminalNode CLUSTER() { return getToken(DB2zSQLParser.CLUSTER, 0); }
		public TerminalNode PADDED() { return getToken(DB2zSQLParser.PADDED, 0); }
		public TerminalNode COMPRESS() { return getToken(DB2zSQLParser.COMPRESS, 0); }
		public TerminalNode ADD() { return getToken(DB2zSQLParser.ADD, 0); }
		public TerminalNode YES() { return getToken(DB2zSQLParser.YES, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TerminalNode COLUMN() { return getToken(DB2zSQLParser.COLUMN, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode INCLUDE() { return getToken(DB2zSQLParser.INCLUDE, 0); }
		public TerminalNode ASC() { return getToken(DB2zSQLParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(DB2zSQLParser.DESC, 0); }
		public TerminalNode RANDOM() { return getToken(DB2zSQLParser.RANDOM, 0); }
		public AlterIndexOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterIndexOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterIndexOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterIndexOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterIndexOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterIndexOptionsContext alterIndexOptions() throws RecognitionException {
		AlterIndexOptionsContext _localctx = new AlterIndexOptionsContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_alterIndexOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2315);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,231,_ctx) ) {
			case 1:
				{
				{
				setState(2275);
				match(BUFFERPOOL);
				setState(2276);
				bpName();
				}
				}
				break;
			case 2:
				{
				{
				setState(2277);
				match(CLOSE);
				setState(2278);
				_la = _input.LA(1);
				if ( !(_la==NO || _la==YES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case 3:
				{
				{
				setState(2279);
				match(COPY);
				setState(2280);
				_la = _input.LA(1);
				if ( !(_la==NO || _la==YES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case 4:
				{
				{
				setState(2281);
				match(DSSIZE);
				setState(2282);
				match(SQLIDENTIFIER);
				}
				}
				break;
			case 5:
				{
				{
				setState(2283);
				match(PIECESIZE);
				setState(2284);
				match(SQLIDENTIFIER);
				}
				}
				break;
			case 6:
				{
				setState(2285);
				usingSpecification();
				}
				break;
			case 7:
				{
				setState(2286);
				freeSpecification();
				}
				break;
			case 8:
				{
				setState(2287);
				gbpcacheSpecification();
				}
				break;
			case 9:
				{
				{
				setState(2289);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2288);
					match(NOT);
					}
				}

				setState(2291);
				match(CLUSTER);
				}
				}
				break;
			case 10:
				{
				{
				setState(2293);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2292);
					match(NOT);
					}
				}

				setState(2295);
				match(PADDED);
				}
				}
				break;
			case 11:
				{
				{
				setState(2296);
				match(COMPRESS);
				setState(2297);
				_la = _input.LA(1);
				if ( !(_la==NO || _la==YES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case 12:
				{
				{
				setState(2298);
				match(ADD);
				setState(2313);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case COLUMN:
					{
					{
					setState(2299);
					match(COLUMN);
					setState(2300);
					match(LPAREN);
					setState(2301);
					columnName();
					setState(2303);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ASC || _la==DESC || _la==RANDOM) {
						{
						setState(2302);
						_la = _input.LA(1);
						if ( !(_la==ASC || _la==DESC || _la==RANDOM) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(2305);
					match(RPAREN);
					}
					}
					break;
				case INCLUDE:
					{
					{
					setState(2307);
					match(INCLUDE);
					setState(2308);
					match(COLUMN);
					setState(2309);
					match(LPAREN);
					setState(2310);
					columnName();
					setState(2311);
					match(RPAREN);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterIndexPartitionOptionsContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public PartitionElementContext partitionElement() {
			return getRuleContext(PartitionElementContext.class,0);
		}
		public List<GbpcacheSpecificationContext> gbpcacheSpecification() {
			return getRuleContexts(GbpcacheSpecificationContext.class);
		}
		public GbpcacheSpecificationContext gbpcacheSpecification(int i) {
			return getRuleContext(GbpcacheSpecificationContext.class,i);
		}
		public List<TerminalNode> DSSIZE() { return getTokens(DB2zSQLParser.DSSIZE); }
		public TerminalNode DSSIZE(int i) {
			return getToken(DB2zSQLParser.DSSIZE, i);
		}
		public List<TerminalNode> SQLIDENTIFIER() { return getTokens(DB2zSQLParser.SQLIDENTIFIER); }
		public TerminalNode SQLIDENTIFIER(int i) {
			return getToken(DB2zSQLParser.SQLIDENTIFIER, i);
		}
		public List<UsingSpecificationContext> usingSpecification() {
			return getRuleContexts(UsingSpecificationContext.class);
		}
		public UsingSpecificationContext usingSpecification(int i) {
			return getRuleContext(UsingSpecificationContext.class,i);
		}
		public List<FreeSpecificationContext> freeSpecification() {
			return getRuleContexts(FreeSpecificationContext.class);
		}
		public FreeSpecificationContext freeSpecification(int i) {
			return getRuleContext(FreeSpecificationContext.class,i);
		}
		public AlterIndexPartitionOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterIndexPartitionOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterIndexPartitionOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterIndexPartitionOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterIndexPartitionOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterIndexPartitionOptionsContext alterIndexPartitionOptions() throws RecognitionException {
		AlterIndexPartitionOptionsContext _localctx = new AlterIndexPartitionOptionsContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_alterIndexPartitionOptions);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2317);
			match(ALTER);
			setState(2318);
			partitionElement();
			setState(2334);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DSSIZE || _la==ERASE || _la==PRIQTY || _la==SECQTY || _la==USING || ((((_la - 460)) & ~0x3f) == 0 && ((1L << (_la - 460)) & ((1L << (FREEPAGE - 460)) | (1L << (GBPCACHE - 460)) | (1L << (PCTFREE - 460)))) != 0)) {
				{
				setState(2332);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ERASE:
				case PRIQTY:
				case SECQTY:
				case USING:
					{
					setState(2320); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(2319);
							usingSpecification();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(2322); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,232,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				case FREEPAGE:
				case PCTFREE:
					{
					setState(2325); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(2324);
							freeSpecification();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(2327); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,233,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				case GBPCACHE:
					{
					setState(2329);
					gbpcacheSpecification();
					}
					break;
				case DSSIZE:
					{
					{
					setState(2330);
					match(DSSIZE);
					setState(2331);
					match(SQLIDENTIFIER);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(2336);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UsingSpecificationContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(DB2zSQLParser.USING, 0); }
		public TerminalNode PRIQTY() { return getToken(DB2zSQLParser.PRIQTY, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode SECQTY() { return getToken(DB2zSQLParser.SECQTY, 0); }
		public TerminalNode ERASE() { return getToken(DB2zSQLParser.ERASE, 0); }
		public TerminalNode YES() { return getToken(DB2zSQLParser.YES, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode VCAT() { return getToken(DB2zSQLParser.VCAT, 0); }
		public CatalogNameContext catalogName() {
			return getRuleContext(CatalogNameContext.class,0);
		}
		public TerminalNode STOGROUP() { return getToken(DB2zSQLParser.STOGROUP, 0); }
		public StogroupNameContext stogroupName() {
			return getRuleContext(StogroupNameContext.class,0);
		}
		public UsingSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_usingSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterUsingSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitUsingSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitUsingSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UsingSpecificationContext usingSpecification() throws RecognitionException {
		UsingSpecificationContext _localctx = new UsingSpecificationContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_usingSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2350);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USING:
				{
				{
				setState(2337);
				match(USING);
				setState(2342);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case VCAT:
					{
					{
					setState(2338);
					match(VCAT);
					setState(2339);
					catalogName();
					}
					}
					break;
				case STOGROUP:
					{
					{
					setState(2340);
					match(STOGROUP);
					setState(2341);
					stogroupName();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case PRIQTY:
				{
				{
				setState(2344);
				match(PRIQTY);
				setState(2345);
				match(INTEGERLITERAL);
				}
				}
				break;
			case SECQTY:
				{
				{
				setState(2346);
				match(SECQTY);
				setState(2347);
				match(INTEGERLITERAL);
				}
				}
				break;
			case ERASE:
				{
				{
				setState(2348);
				match(ERASE);
				setState(2349);
				_la = _input.LA(1);
				if ( !(_la==NO || _la==YES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FreeSpecificationContext extends ParserRuleContext {
		public TerminalNode FREEPAGE() { return getToken(DB2zSQLParser.FREEPAGE, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode PCTFREE() { return getToken(DB2zSQLParser.PCTFREE, 0); }
		public FreeSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_freeSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFreeSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFreeSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFreeSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FreeSpecificationContext freeSpecification() throws RecognitionException {
		FreeSpecificationContext _localctx = new FreeSpecificationContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_freeSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2356);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FREEPAGE:
				{
				{
				setState(2352);
				match(FREEPAGE);
				setState(2353);
				match(INTEGERLITERAL);
				}
				}
				break;
			case PCTFREE:
				{
				{
				setState(2354);
				match(PCTFREE);
				setState(2355);
				match(INTEGERLITERAL);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GbpcacheSpecificationContext extends ParserRuleContext {
		public TerminalNode GBPCACHE() { return getToken(DB2zSQLParser.GBPCACHE, 0); }
		public TerminalNode CHANGED() { return getToken(DB2zSQLParser.CHANGED, 0); }
		public TerminalNode ALL() { return getToken(DB2zSQLParser.ALL, 0); }
		public TerminalNode NONE() { return getToken(DB2zSQLParser.NONE, 0); }
		public GbpcacheSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_gbpcacheSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGbpcacheSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGbpcacheSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGbpcacheSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GbpcacheSpecificationContext gbpcacheSpecification() throws RecognitionException {
		GbpcacheSpecificationContext _localctx = new GbpcacheSpecificationContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_gbpcacheSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2358);
			match(GBPCACHE);
			setState(2359);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==NONE || _la==CHANGED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionElementContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(DB2zSQLParser.PARTITION, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode ENDING() { return getToken(DB2zSQLParser.ENDING, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<LiteralContext> literal() {
			return getRuleContexts(LiteralContext.class);
		}
		public LiteralContext literal(int i) {
			return getRuleContext(LiteralContext.class,i);
		}
		public List<TerminalNode> MAXVALUE() { return getTokens(DB2zSQLParser.MAXVALUE); }
		public TerminalNode MAXVALUE(int i) {
			return getToken(DB2zSQLParser.MAXVALUE, i);
		}
		public List<TerminalNode> MINVALUE() { return getTokens(DB2zSQLParser.MINVALUE); }
		public TerminalNode MINVALUE(int i) {
			return getToken(DB2zSQLParser.MINVALUE, i);
		}
		public TerminalNode AT() { return getToken(DB2zSQLParser.AT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public TerminalNode INCLUSIVE() { return getToken(DB2zSQLParser.INCLUSIVE, 0); }
		public PartitionElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPartitionElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPartitionElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPartitionElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionElementContext partitionElement() throws RecognitionException {
		PartitionElementContext _localctx = new PartitionElementContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_partitionElement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2361);
			match(PARTITION);
			setState(2362);
			match(INTEGERLITERAL);
			setState(2388);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENDING) {
				{
				setState(2363);
				match(ENDING);
				setState(2365);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AT) {
					{
					setState(2364);
					match(AT);
					}
				}

				setState(2367);
				match(LPAREN);
				setState(2371);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NONNUMERICLITERAL:
				case INTEGERLITERAL:
				case NUMERICLITERAL:
					{
					setState(2368);
					literal();
					}
					break;
				case MAXVALUE:
					{
					setState(2369);
					match(MAXVALUE);
					}
					break;
				case MINVALUE:
					{
					setState(2370);
					match(MINVALUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2381);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2373);
					match(COMMA);
					setState(2377);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NONNUMERICLITERAL:
					case INTEGERLITERAL:
					case NUMERICLITERAL:
						{
						setState(2374);
						literal();
						}
						break;
					case MAXVALUE:
						{
						setState(2375);
						match(MAXVALUE);
						}
						break;
					case MINVALUE:
						{
						setState(2376);
						match(MINVALUE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					setState(2383);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2384);
				match(RPAREN);
				setState(2386);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INCLUSIVE) {
					{
					setState(2385);
					match(INCLUSIVE);
					}
				}

				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ApplCompatValueContext extends ParserRuleContext {
		public FunctionLevelContext functionLevel() {
			return getRuleContext(FunctionLevelContext.class,0);
		}
		public ApplCompatValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_applCompatValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterApplCompatValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitApplCompatValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitApplCompatValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ApplCompatValueContext applCompatValue() throws RecognitionException {
		ApplCompatValueContext _localctx = new ApplCompatValueContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_applCompatValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2390);
			functionLevel();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionLevelContext extends ParserRuleContext {
		public TerminalNode SQLIDENTIFIER() { return getToken(DB2zSQLParser.SQLIDENTIFIER, 0); }
		public FunctionLevelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionLevel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFunctionLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFunctionLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFunctionLevel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionLevelContext functionLevel() throws RecognitionException {
		FunctionLevelContext _localctx = new FunctionLevelContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_functionLevel);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2392);
			match(SQLIDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionParameterTypeContext extends ParserRuleContext {
		public FunctionDataTypeContext functionDataType() {
			return getRuleContext(FunctionDataTypeContext.class,0);
		}
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode LOCATOR() { return getToken(DB2zSQLParser.LOCATOR, 0); }
		public FunctionParameterTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionParameterType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFunctionParameterType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFunctionParameterType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFunctionParameterType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionParameterTypeContext functionParameterType() throws RecognitionException {
		FunctionParameterTypeContext _localctx = new FunctionParameterTypeContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_functionParameterType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2394);
			functionDataType();
			setState(2397);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(2395);
				match(AS);
				setState(2396);
				match(LOCATOR);
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionDataTypeContext extends ParserRuleContext {
		public FunctionBuiltInTypeContext functionBuiltInType() {
			return getRuleContext(FunctionBuiltInTypeContext.class,0);
		}
		public DistinctTypeNameContext distinctTypeName() {
			return getRuleContext(DistinctTypeNameContext.class,0);
		}
		public FunctionDataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionDataType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFunctionDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFunctionDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFunctionDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionDataTypeContext functionDataType() throws RecognitionException {
		FunctionDataTypeContext _localctx = new FunctionDataTypeContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_functionDataType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2401);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,246,_ctx) ) {
			case 1:
				{
				setState(2399);
				functionBuiltInType();
				}
				break;
			case 2:
				{
				setState(2400);
				distinctTypeName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionBuiltInTypeContext extends ParserRuleContext {
		public TerminalNode SMALLINT() { return getToken(DB2zSQLParser.SMALLINT, 0); }
		public TerminalNode INTEGER() { return getToken(DB2zSQLParser.INTEGER, 0); }
		public TerminalNode INT() { return getToken(DB2zSQLParser.INT, 0); }
		public TerminalNode BIGINT() { return getToken(DB2zSQLParser.BIGINT, 0); }
		public TerminalNode REAL() { return getToken(DB2zSQLParser.REAL, 0); }
		public TerminalNode DATE() { return getToken(DB2zSQLParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(DB2zSQLParser.TIME, 0); }
		public TerminalNode ROWID() { return getToken(DB2zSQLParser.ROWID, 0); }
		public TerminalNode XML() { return getToken(DB2zSQLParser.XML, 0); }
		public TerminalNode DECFLOAT() { return getToken(DB2zSQLParser.DECFLOAT, 0); }
		public TerminalNode FLOAT() { return getToken(DB2zSQLParser.FLOAT, 0); }
		public TerminalNode DOUBLE() { return getToken(DB2zSQLParser.DOUBLE, 0); }
		public TerminalNode BINARY() { return getToken(DB2zSQLParser.BINARY, 0); }
		public TerminalNode TIMESTAMP() { return getToken(DB2zSQLParser.TIMESTAMP, 0); }
		public TerminalNode DECIMAL() { return getToken(DB2zSQLParser.DECIMAL, 0); }
		public TerminalNode DEC() { return getToken(DB2zSQLParser.DEC, 0); }
		public TerminalNode NUMERIC() { return getToken(DB2zSQLParser.NUMERIC, 0); }
		public TerminalNode GRAPHIC() { return getToken(DB2zSQLParser.GRAPHIC, 0); }
		public TerminalNode VARGRAPHIC() { return getToken(DB2zSQLParser.VARGRAPHIC, 0); }
		public TerminalNode DBCLOB() { return getToken(DB2zSQLParser.DBCLOB, 0); }
		public IntegerInParensContext integerInParens() {
			return getRuleContext(IntegerInParensContext.class,0);
		}
		public TerminalNode VARCHAR() { return getToken(DB2zSQLParser.VARCHAR, 0); }
		public TerminalNode CLOB() { return getToken(DB2zSQLParser.CLOB, 0); }
		public TerminalNode VARBINARY() { return getToken(DB2zSQLParser.VARBINARY, 0); }
		public TerminalNode BLOB() { return getToken(DB2zSQLParser.BLOB, 0); }
		public TerminalNode ZONE() { return getToken(DB2zSQLParser.ZONE, 0); }
		public TerminalNode PRECISION() { return getToken(DB2zSQLParser.PRECISION, 0); }
		public LengthContext length() {
			return getRuleContext(LengthContext.class,0);
		}
		public TerminalNode CCSID() { return getToken(DB2zSQLParser.CCSID, 0); }
		public ForDataQualifierContext forDataQualifier() {
			return getRuleContext(ForDataQualifierContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode WITHOUT() { return getToken(DB2zSQLParser.WITHOUT, 0); }
		public TerminalNode ASCII() { return getToken(DB2zSQLParser.ASCII, 0); }
		public TerminalNode EBCDIC() { return getToken(DB2zSQLParser.EBCDIC, 0); }
		public TerminalNode UNICODE() { return getToken(DB2zSQLParser.UNICODE, 0); }
		public TerminalNode LARGE() { return getToken(DB2zSQLParser.LARGE, 0); }
		public TerminalNode OBJECT() { return getToken(DB2zSQLParser.OBJECT, 0); }
		public TerminalNode CHARACTER() { return getToken(DB2zSQLParser.CHARACTER, 0); }
		public TerminalNode CHAR() { return getToken(DB2zSQLParser.CHAR, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode SQLIDENTIFIER() { return getToken(DB2zSQLParser.SQLIDENTIFIER, 0); }
		public TerminalNode VARYING() { return getToken(DB2zSQLParser.VARYING, 0); }
		public FunctionBuiltInTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionBuiltInType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFunctionBuiltInType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFunctionBuiltInType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFunctionBuiltInType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionBuiltInTypeContext functionBuiltInType() throws RecognitionException {
		FunctionBuiltInTypeContext _localctx = new FunctionBuiltInTypeContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_functionBuiltInType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2519);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,269,_ctx) ) {
			case 1:
				{
				setState(2403);
				match(SMALLINT);
				}
				break;
			case 2:
				{
				setState(2404);
				match(INTEGER);
				}
				break;
			case 3:
				{
				setState(2405);
				match(INT);
				}
				break;
			case 4:
				{
				setState(2406);
				match(BIGINT);
				}
				break;
			case 5:
				{
				{
				setState(2407);
				_la = _input.LA(1);
				if ( !(_la==NUMERIC || _la==DEC || _la==DECIMAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2411);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,247,_ctx) ) {
				case 1:
					{
					setState(2408);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(2409);
					match(LPAREN);
					setState(2410);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 6:
				{
				{
				setState(2413);
				match(DECFLOAT);
				setState(2417);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,248,_ctx) ) {
				case 1:
					{
					setState(2414);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(2415);
					match(LPAREN);
					setState(2416);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 7:
				{
				{
				setState(2419);
				match(FLOAT);
				setState(2423);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,249,_ctx) ) {
				case 1:
					{
					setState(2420);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(2421);
					match(LPAREN);
					setState(2422);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 8:
				{
				setState(2425);
				match(REAL);
				}
				break;
			case 9:
				{
				{
				setState(2426);
				match(DOUBLE);
				setState(2428);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRECISION) {
					{
					setState(2427);
					match(PRECISION);
					}
				}

				}
				}
				break;
			case 10:
				{
				{
				setState(2435);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHAR:
				case CHARACTER:
					{
					{
					setState(2430);
					_la = _input.LA(1);
					if ( !(_la==CHAR || _la==CHARACTER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(2432);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==VARYING) {
						{
						setState(2431);
						match(VARYING);
						}
					}

					}
					}
					break;
				case VARCHAR:
					{
					setState(2434);
					match(VARCHAR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2440);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,253,_ctx) ) {
				case 1:
					{
					setState(2437);
					length();
					}
					break;
				case 2:
					{
					{
					setState(2438);
					match(LPAREN);
					setState(2439);
					match(RPAREN);
					}
					}
					break;
				}
				setState(2444);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CCSID) {
					{
					setState(2442);
					match(CCSID);
					setState(2443);
					_la = _input.LA(1);
					if ( !(_la==EBCDIC || _la==ASCII || _la==UNICODE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2447);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(2446);
					forDataQualifier();
					}
				}

				}
				}
				break;
			case 11:
				{
				{
				setState(2453);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHAR:
				case CHARACTER:
					{
					{
					setState(2449);
					_la = _input.LA(1);
					if ( !(_la==CHAR || _la==CHARACTER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(2450);
					match(LARGE);
					setState(2451);
					match(OBJECT);
					}
					}
					break;
				case CLOB:
					{
					setState(2452);
					match(CLOB);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2458);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,257,_ctx) ) {
				case 1:
					{
					setState(2455);
					length();
					}
					break;
				case 2:
					{
					{
					setState(2456);
					match(LPAREN);
					setState(2457);
					match(RPAREN);
					}
					}
					break;
				}
				setState(2462);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CCSID) {
					{
					setState(2460);
					match(CCSID);
					setState(2461);
					_la = _input.LA(1);
					if ( !(_la==EBCDIC || _la==ASCII || _la==UNICODE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2465);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(2464);
					forDataQualifier();
					}
				}

				}
				}
				break;
			case 12:
				{
				{
				setState(2467);
				_la = _input.LA(1);
				if ( !(_la==DBCLOB || _la==GRAPHIC || _la==VARGRAPHIC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2471);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,260,_ctx) ) {
				case 1:
					{
					setState(2468);
					length();
					}
					break;
				case 2:
					{
					{
					setState(2469);
					match(LPAREN);
					setState(2470);
					match(RPAREN);
					}
					}
					break;
				}
				setState(2475);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CCSID) {
					{
					setState(2473);
					match(CCSID);
					setState(2474);
					_la = _input.LA(1);
					if ( !(_la==EBCDIC || _la==ASCII || _la==UNICODE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				}
				break;
			case 13:
				{
				{
				setState(2477);
				match(BINARY);
				setState(2481);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,262,_ctx) ) {
				case 1:
					{
					setState(2478);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(2479);
					match(LPAREN);
					setState(2480);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 14:
				{
				{
				setState(2488);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
					{
					{
					setState(2483);
					match(BINARY);
					setState(2485);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==VARYING) {
						{
						setState(2484);
						match(VARYING);
						}
					}

					}
					}
					break;
				case VARBINARY:
					{
					setState(2487);
					match(VARBINARY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2493);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,265,_ctx) ) {
				case 1:
					{
					setState(2490);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(2491);
					match(LPAREN);
					setState(2492);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 15:
				{
				{
				setState(2499);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
					{
					{
					setState(2495);
					match(BINARY);
					setState(2496);
					match(LARGE);
					setState(2497);
					match(OBJECT);
					}
					}
					break;
				case BLOB:
					{
					setState(2498);
					match(BLOB);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2506);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(2501);
					match(LPAREN);
					{
					setState(2502);
					match(INTEGERLITERAL);
					setState(2503);
					match(SQLIDENTIFIER);
					}
					setState(2505);
					match(RPAREN);
					}
				}

				}
				}
				break;
			case 16:
				{
				setState(2508);
				match(DATE);
				}
				break;
			case 17:
				{
				setState(2509);
				match(TIME);
				}
				break;
			case 18:
				{
				{
				setState(2510);
				match(TIMESTAMP);
				setState(2512);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(2511);
					integerInParens();
					}
				}

				{
				setState(2514);
				_la = _input.LA(1);
				if ( !(_la==WITH || _la==WITHOUT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2515);
				match(TIME);
				setState(2516);
				match(ZONE);
				}
				}
				}
				break;
			case 19:
				{
				setState(2517);
				match(ROWID);
				}
				break;
			case 20:
				{
				setState(2518);
				match(XML);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionOptionListContext extends ParserRuleContext {
		public TerminalNode SPECIFIC() { return getToken(DB2zSQLParser.SPECIFIC, 0); }
		public TerminalNode EXTERNAL() { return getToken(DB2zSQLParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(DB2zSQLParser.NAME, 0); }
		public TerminalNode LANGUAGE() { return getToken(DB2zSQLParser.LANGUAGE, 0); }
		public TerminalNode PARAMETER() { return getToken(DB2zSQLParser.PARAMETER, 0); }
		public TerminalNode STYLE() { return getToken(DB2zSQLParser.STYLE, 0); }
		public TerminalNode DETERMINISTIC() { return getToken(DB2zSQLParser.DETERMINISTIC, 0); }
		public TerminalNode VARIANT() { return getToken(DB2zSQLParser.VARIANT, 0); }
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public List<TerminalNode> NULL() { return getTokens(DB2zSQLParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(DB2zSQLParser.NULL, i);
		}
		public TerminalNode INPUT() { return getToken(DB2zSQLParser.INPUT, 0); }
		public TerminalNode CALL() { return getToken(DB2zSQLParser.CALL, 0); }
		public TerminalNode ACTION() { return getToken(DB2zSQLParser.ACTION, 0); }
		public TerminalNode FINAL() { return getToken(DB2zSQLParser.FINAL, 0); }
		public TerminalNode PARALLEL() { return getToken(DB2zSQLParser.PARALLEL, 0); }
		public TerminalNode DBINFO() { return getToken(DB2zSQLParser.DBINFO, 0); }
		public TerminalNode CARDINALITY() { return getToken(DB2zSQLParser.CARDINALITY, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode WLM() { return getToken(DB2zSQLParser.WLM, 0); }
		public TerminalNode ENVIRONMENT() { return getToken(DB2zSQLParser.ENVIRONMENT, 0); }
		public TerminalNode ASUTIME() { return getToken(DB2zSQLParser.ASUTIME, 0); }
		public TerminalNode STAY() { return getToken(DB2zSQLParser.STAY, 0); }
		public TerminalNode RESIDENT() { return getToken(DB2zSQLParser.RESIDENT, 0); }
		public TerminalNode PROGRAM() { return getToken(DB2zSQLParser.PROGRAM, 0); }
		public TerminalNode TYPE() { return getToken(DB2zSQLParser.TYPE, 0); }
		public TerminalNode SECURITY() { return getToken(DB2zSQLParser.SECURITY, 0); }
		public TerminalNode RUN() { return getToken(DB2zSQLParser.RUN, 0); }
		public TerminalNode OPTIONS() { return getToken(DB2zSQLParser.OPTIONS, 0); }
		public RunTimeOptionsContext runTimeOptions() {
			return getRuleContext(RunTimeOptionsContext.class,0);
		}
		public TerminalNode SPECIAL() { return getToken(DB2zSQLParser.SPECIAL, 0); }
		public TerminalNode REGISTERS() { return getToken(DB2zSQLParser.REGISTERS, 0); }
		public TerminalNode STATIC() { return getToken(DB2zSQLParser.STATIC, 0); }
		public TerminalNode DISPATCH() { return getToken(DB2zSQLParser.DISPATCH, 0); }
		public TerminalNode SECURED() { return getToken(DB2zSQLParser.SECURED, 0); }
		public TerminalNode CCSID() { return getToken(DB2zSQLParser.CCSID, 0); }
		public TerminalNode ASSEMBLE() { return getToken(DB2zSQLParser.ASSEMBLE, 0); }
		public TerminalNode C_() { return getToken(DB2zSQLParser.C_, 0); }
		public TerminalNode COBOL() { return getToken(DB2zSQLParser.COBOL, 0); }
		public TerminalNode JAVA() { return getToken(DB2zSQLParser.JAVA, 0); }
		public TerminalNode PLI() { return getToken(DB2zSQLParser.PLI, 0); }
		public TerminalNode SQL() { return getToken(DB2zSQLParser.SQL, 0); }
		public TerminalNode ALLOW() { return getToken(DB2zSQLParser.ALLOW, 0); }
		public TerminalNode DISALLOW() { return getToken(DB2zSQLParser.DISALLOW, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode YES() { return getToken(DB2zSQLParser.YES, 0); }
		public TerminalNode SUB() { return getToken(DB2zSQLParser.SUB, 0); }
		public TerminalNode MAIN() { return getToken(DB2zSQLParser.MAIN, 0); }
		public TerminalNode DB2() { return getToken(DB2zSQLParser.DB2, 0); }
		public TerminalNode USER() { return getToken(DB2zSQLParser.USER, 0); }
		public TerminalNode DEFINER() { return getToken(DB2zSQLParser.DEFINER, 0); }
		public TerminalNode INHERIT() { return getToken(DB2zSQLParser.INHERIT, 0); }
		public TerminalNode DEFAULT() { return getToken(DB2zSQLParser.DEFAULT, 0); }
		public ExternalProgramNameContext externalProgramName() {
			return getRuleContext(ExternalProgramNameContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode CALLED() { return getToken(DB2zSQLParser.CALLED, 0); }
		public TerminalNode MODIFIES() { return getToken(DB2zSQLParser.MODIFIES, 0); }
		public TerminalNode DATA() { return getToken(DB2zSQLParser.DATA, 0); }
		public TerminalNode READS() { return getToken(DB2zSQLParser.READS, 0); }
		public TerminalNode CONTAINS() { return getToken(DB2zSQLParser.CONTAINS, 0); }
		public TerminalNode PACKAGE() { return getToken(DB2zSQLParser.PACKAGE, 0); }
		public TerminalNode PATH() { return getToken(DB2zSQLParser.PATH, 0); }
		public PackagePathContext packagePath() {
			return getRuleContext(PackagePathContext.class,0);
		}
		public TerminalNode SCRATCHPAD() { return getToken(DB2zSQLParser.SCRATCHPAD, 0); }
		public TerminalNode COLLID() { return getToken(DB2zSQLParser.COLLID, 0); }
		public CollectionIDContext collectionID() {
			return getRuleContext(CollectionIDContext.class,0);
		}
		public TerminalNode STOP() { return getToken(DB2zSQLParser.STOP, 0); }
		public TerminalNode AFTER() { return getToken(DB2zSQLParser.AFTER, 0); }
		public TerminalNode SYSTEM() { return getToken(DB2zSQLParser.SYSTEM, 0); }
		public TerminalNode FAILURES() { return getToken(DB2zSQLParser.FAILURES, 0); }
		public TerminalNode CONTINUE() { return getToken(DB2zSQLParser.CONTINUE, 0); }
		public TerminalNode FAILURE() { return getToken(DB2zSQLParser.FAILURE, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TerminalNode RETURNS() { return getToken(DB2zSQLParser.RETURNS, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode COMMA() { return getToken(DB2zSQLParser.COMMA, 0); }
		public TerminalNode SPLAT() { return getToken(DB2zSQLParser.SPLAT, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode LIMIT() { return getToken(DB2zSQLParser.LIMIT, 0); }
		public FunctionOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFunctionOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFunctionOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFunctionOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionOptionListContext functionOptionList() throws RecognitionException {
		FunctionOptionListContext _localctx = new FunctionOptionListContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_functionOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2655);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,285,_ctx) ) {
			case 1:
				{
				{
				setState(2521);
				match(EXTERNAL);
				setState(2522);
				match(NAME);
				setState(2525);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,270,_ctx) ) {
				case 1:
					{
					setState(2523);
					externalProgramName();
					}
					break;
				case 2:
					{
					setState(2524);
					identifier();
					}
					break;
				}
				}
				}
				break;
			case 2:
				{
				{
				setState(2527);
				match(LANGUAGE);
				setState(2528);
				_la = _input.LA(1);
				if ( !(((((_la - 431)) & ~0x3f) == 0 && ((1L << (_la - 431)) & ((1L << (ASSEMBLE - 431)) | (1L << (C_ - 431)) | (1L << (COBOL - 431)) | (1L << (JAVA - 431)) | (1L << (PLI - 431)) | (1L << (SQL - 431)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case 3:
				{
				{
				setState(2529);
				match(PARAMETER);
				setState(2530);
				match(STYLE);
				setState(2531);
				_la = _input.LA(1);
				if ( !(_la==JAVA || _la==SQL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case 4:
				{
				{
				setState(2533);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2532);
					match(NOT);
					}
				}

				setState(2535);
				match(DETERMINISTIC);
				}
				}
				break;
			case 5:
				{
				{
				setState(2537);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2536);
					match(NOT);
					}
				}

				setState(2539);
				match(VARIANT);
				}
				}
				break;
			case 6:
				{
				{
				setState(2543);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case RETURNS:
					{
					{
					setState(2540);
					match(RETURNS);
					setState(2541);
					match(NULL);
					}
					}
					break;
				case CALLED:
					{
					setState(2542);
					match(CALLED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2545);
				match(ON);
				setState(2546);
				match(NULL);
				setState(2547);
				match(INPUT);
				}
				}
				break;
			case 7:
				{
				{
				setState(2548);
				match(NULL);
				setState(2549);
				match(CALL);
				}
				}
				break;
			case 8:
				{
				setState(2560);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case MODIFIES:
					{
					{
					setState(2550);
					match(MODIFIES);
					setState(2551);
					match(SQL);
					setState(2552);
					match(DATA);
					}
					}
					break;
				case READS:
					{
					{
					setState(2553);
					match(READS);
					setState(2554);
					match(SQL);
					setState(2555);
					match(DATA);
					}
					}
					break;
				case CONTAINS:
					{
					{
					setState(2556);
					match(CONTAINS);
					setState(2557);
					match(SQL);
					}
					}
					break;
				case NO:
					{
					{
					setState(2558);
					match(NO);
					setState(2559);
					match(SQL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 9:
				{
				{
				setState(2563);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(2562);
					match(NO);
					}
				}

				setState(2565);
				match(EXTERNAL);
				setState(2566);
				match(ACTION);
				}
				}
				break;
			case 10:
				{
				setState(2573);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PACKAGE:
					{
					{
					setState(2567);
					match(PACKAGE);
					setState(2568);
					match(PATH);
					setState(2569);
					packagePath();
					}
					}
					break;
				case NO:
					{
					{
					setState(2570);
					match(NO);
					setState(2571);
					match(PACKAGE);
					setState(2572);
					match(PATH);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 11:
				{
				setState(2579);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NO:
					{
					{
					setState(2575);
					match(NO);
					setState(2576);
					match(SCRATCHPAD);
					}
					}
					break;
				case SCRATCHPAD:
					{
					{
					setState(2577);
					match(SCRATCHPAD);
					setState(2578);
					match(INTEGERLITERAL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 12:
				{
				{
				setState(2582);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(2581);
					match(NO);
					}
				}

				setState(2584);
				match(FINAL);
				setState(2585);
				match(CALL);
				}
				}
				break;
			case 13:
				{
				{
				setState(2586);
				_la = _input.LA(1);
				if ( !(_la==ALLOW || _la==DISALLOW) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2587);
				match(PARALLEL);
				}
				}
				break;
			case 14:
				{
				{
				setState(2589);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(2588);
					match(NO);
					}
				}

				setState(2591);
				match(DBINFO);
				}
				}
				break;
			case 15:
				{
				{
				setState(2592);
				match(CARDINALITY);
				setState(2593);
				match(INTEGERLITERAL);
				}
				}
				break;
			case 16:
				{
				setState(2598);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NO:
					{
					{
					setState(2594);
					match(NO);
					setState(2595);
					match(COLLID);
					}
					}
					break;
				case COLLID:
					{
					{
					setState(2596);
					match(COLLID);
					setState(2597);
					collectionID();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 17:
				{
				{
				setState(2600);
				match(WLM);
				setState(2601);
				match(ENVIRONMENT);
				setState(2609);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ADD:
				case AFTER:
				case ALL:
				case ALLOCATE:
				case ALLOW:
				case ALTER:
				case ALTERAND:
				case ANY:
				case ARRAY:
				case ARRAY_EXISTS:
				case AS:
				case ASENSITIVE:
				case ASSOCIATE:
				case ASUTIME:
				case AT:
				case AUDIT:
				case AUX:
				case AUXILIARY:
				case BEFORE:
				case BEGIN:
				case BETWEEN:
				case BUFFERPOOL:
				case BY:
				case CALL:
				case CAPTURE:
				case CASCADED:
				case CASE:
				case CAST:
				case CCSID:
				case CHAR:
				case CHARACTER:
				case CHECK:
				case CLONE:
				case CLOSE:
				case CLUSTER:
				case COLLECTION:
				case COLLID:
				case COLUMN:
				case COMMENT:
				case COMMIT:
				case CONCAT:
				case CONDITION:
				case CONNECT:
				case CONNECTION:
				case CONSTRAINT:
				case CONTAINS:
				case CONTENT:
				case CONTINUE:
				case CREATE:
				case CUBE:
				case CURRENT:
				case CURRENT_LC_CTYPE:
				case CURRVAL:
				case CURSOR:
				case DATA:
				case DATABASE:
				case DAY:
				case DAYS:
				case DBINFO:
				case DECLARE:
				case DEFAULT:
				case DELETE:
				case DESCRIPTOR:
				case DETERMINISTIC:
				case DISABLE:
				case DISALLOW:
				case DISTINCT:
				case DO:
				case DOCUMENT:
				case DOUBLE:
				case DROP:
				case DSSIZE:
				case DYNAMIC:
				case EDITPROC:
				case ELSE:
				case ELSEIF:
				case ENCODING:
				case ENCRYPTION:
				case END:
				case END_EXEC:
				case ENDING:
				case ERASE:
				case ESCAPE:
				case EXCEPT:
				case EXCEPTION:
				case EXEC_SQL:
				case EXECUTE:
				case EXISTS:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case FENCED:
				case FETCH:
				case FIELDPROC:
				case FINAL:
				case FIRST:
				case FOR:
				case FREE:
				case FROM:
				case FULL:
				case FUNCTION:
				case GENERATED:
				case GET:
				case GLOBAL:
				case GO:
				case GOTO:
				case GRANT:
				case GROUP:
				case HANDLER:
				case HAVING:
				case HOLD:
				case HOUR:
				case HOURS:
				case IF:
				case IMMEDIATE:
				case IN:
				case INCLUSIVE:
				case INDEX:
				case INDEXBP:
				case INHERIT:
				case INNER:
				case INOUT:
				case INSENSITIVE:
				case INSERT:
				case INTERSECT:
				case INTO:
				case IS:
				case ISOBID:
				case ITERATE:
				case JAR:
				case JOIN:
				case KEEP:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LAST:
				case LC_CTYPE:
				case LEAVE:
				case LEFT:
				case LIKE:
				case LIMIT:
				case LOCAL:
				case LOCALE:
				case LOCATOR:
				case LOCATORS:
				case LOCK:
				case LOCKMAX:
				case LOCKSIZE:
				case LONG:
				case LOOP:
				case MAINTAINED:
				case MATERIALIZED:
				case MICROSECOND:
				case MICROSECONDS:
				case MODIFIES:
				case MONTH:
				case MONTHS:
				case NEXT:
				case NEXTVAL:
				case NO:
				case NONE:
				case NOT:
				case NULL:
				case NULLS:
				case NUMPARTS:
				case OBID:
				case OF:
				case OFFSET:
				case OLD:
				case ON:
				case OPEN:
				case OPTIMIZATION:
				case OPTIMIZE:
				case OR:
				case ORDER:
				case ORGANIZATION:
				case OUT:
				case OUTER:
				case PACKAGE:
				case PADDED:
				case PARAMETER:
				case PART:
				case PARTITION:
				case PARTITIONED:
				case PARTITIONING:
				case PATH:
				case PERIOD:
				case PIECESIZE:
				case PLAN:
				case PRECISION:
				case PREPARE:
				case PREVVAL:
				case PRIOR:
				case PRIQTY:
				case PRIVILEGES:
				case PROCEDURE:
				case PROGRAM:
				case PSID:
				case PUBLIC:
				case QUERY:
				case QUERYNO:
				case READS:
				case REFERENCES:
				case REFRESH:
				case RELEASE:
				case RENAME:
				case REPEAT:
				case RESIGNAL:
				case RESTRICT:
				case RESULT:
				case RESULT_SET_LOCATOR:
				case RETURN:
				case RETURNS:
				case REVOKE:
				case RIGHT:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUND_CEILING:
				case ROUND_DOWN:
				case ROUND_FLOOR:
				case ROUND_HALF_DOWN:
				case ROUND_HALF_EVEN:
				case ROUND_HALF_UP:
				case ROUND_UP:
				case ROW:
				case ROWSET:
				case RUN:
				case SAVEPOINT:
				case SCHEMA:
				case SCRATCHPAD:
				case SECOND:
				case SECONDS:
				case SECQTY:
				case SECURITY:
				case SELECT:
				case SENSITIVE:
				case SEQUENCE:
				case SET:
				case SIGNAL:
				case SIMPLE:
				case SOME:
				case SOURCE:
				case SPECIFIC:
				case STANDARD:
				case STATEMENT:
				case STATIC:
				case STAY:
				case STOGROUP:
				case STORES:
				case STYLE:
				case SUMMARY:
				case SYNONYM:
				case SYSDATE:
				case SYSTEM:
				case SYSTIMESTAMP:
				case TABLE:
				case TABLESPACE:
				case THEN:
				case TO:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNDO:
				case UNION:
				case UNIQUE:
				case UNTIL:
				case UPDATE:
				case USING:
				case VALIDPROC:
				case VALUE:
				case VALUES:
				case VARIABLE:
				case VARIANT:
				case VCAT:
				case VERSIONING:
				case VIEW:
				case VOLATILE:
				case VOLUMES:
				case WHEN:
				case WHENEVER:
				case WHERE:
				case WHILE:
				case WITH:
				case WLM:
				case XMLCAST:
				case XMLEXISTS:
				case XMLNAMESPACES:
				case YEAR:
				case YEARS:
				case ZONE:
				case AND:
				case ARRAY_AGG:
				case ASC:
				case AVG:
				case BIT:
				case CHANGE:
				case CODEUNITS16:
				case CODEUNITS32:
				case CORR:
				case CORRELATION:
				case COUNT:
				case COUNT_BIG:
				case COVAR:
				case COVARIANCE:
				case COVARIANCE_SAMP:
				case COVAR_POP:
				case COVAR_SAMP:
				case CS:
				case CUME_DIST:
				case DENSE_RANK:
				case DESC:
				case EBCDIC:
				case EXCLUSIVE:
				case FIRST_VALUE:
				case FOLLOWING:
				case GROUPING:
				case IGNORE:
				case INDICATOR:
				case INPUT:
				case ISNULL:
				case LAG:
				case LARGE:
				case LAST_VALUE:
				case LEAD:
				case LISTAGG:
				case LOCKED:
				case LOCKS:
				case MEDIAN:
				case MINUTES:
				case MIXED:
				case NOTNULL:
				case NTH_VALUE:
				case NTILE:
				case NUMERIC:
				case OBJECT:
				case OCTETS:
				case ONLY:
				case OVER:
				case PASSING:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case PERCENT_RANK:
				case PRECEDING:
				case PREVIOUS:
				case RANGE:
				case RANK:
				case RATIO_TO_REPORT:
				case READ:
				case REF:
				case REGR_AVGX:
				case REGR_AVGY:
				case REGR_COUNT:
				case REGR_ICPT:
				case REGR_INTERCEPT:
				case REGR_R2:
				case REGR_SLOPE:
				case REGR_SXX:
				case REGR_SXY:
				case REGR_SYY:
				case RESPECT:
				case ROW_NUMBER:
				case ROWS:
				case RR:
				case RS:
				case SBCS:
				case SELECTIVITY:
				case SETS:
				case SHARE:
				case SKIP_:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case TOKEN:
				case UNBOUNDED:
				case UNPACK:
				case UR:
				case USE:
				case VAR:
				case VARIANCE:
				case VARIANCE_SAMP:
				case VAR_POP:
				case VAR_SAMP:
				case VARYING:
				case WITHOUT:
				case XML:
				case XMLAGG:
				case COLUMNS:
				case SQLID:
				case ORDINALITY:
				case SYSTEM_TIME:
				case BUSINESS_TIME:
				case MULTIPLIER:
				case UNNEST:
				case CROSS:
				case CALLER:
				case CLIENT:
				case POSITIONING:
				case SCROLL:
				case ACTION:
				case ASSEMBLE:
				case C_:
				case CALLED:
				case COBOL:
				case DB2:
				case DEFINER:
				case DISPATCH:
				case ENVIRONMENT:
				case FAILURE:
				case FAILURES:
				case JAVA:
				case MAIN:
				case NAME:
				case OPTIONS:
				case PARALLEL:
				case PLI:
				case REGISTERS:
				case RESIDENT:
				case SECURED:
				case SPECIAL:
				case SQL:
				case STOP:
				case SUB:
				case YES:
				case APPLICATION:
				case CHANGED:
				case COMPATIBILITY:
				case COMPRESS:
				case COPY:
				case FREEPAGE:
				case GBPCACHE:
				case INCLUDE:
				case MAXVALUE:
				case MINVALUE:
				case PCTFREE:
				case REGENERATE:
				case MASK:
				case ENABLE:
				case PERMISSION:
				case ATOMIC:
				case SQLEXCEPTION:
				case MERGE:
				case MATCHED:
				case SQLSTATE:
				case MESSAGE_TEXT:
				case OVERRIDING:
				case PORTION:
				case DB2SQL:
				case DEBUG:
				case GENERAL:
				case MODE_:
				case REXX:
				case CACHE:
				case CYCLE:
				case INCREMENT:
				case RESTART:
				case DATACLAS:
				case MGMTCLAS:
				case REMOVE:
				case STORCLAS:
				case ACCESS:
				case ACTIVATE:
				case ALWAYS:
				case APPEND:
				case ARCHIVE:
				case BUSINESS:
				case CASCADE:
				case CHANGES:
				case CONTROL:
				case DEACTIVATE:
				case DEFERRED:
				case EACH:
				case ENFORCED:
				case EXTRA:
				case FOREIGN:
				case HIDDEN_:
				case HISTORY:
				case ID:
				case IDENTITY:
				case IMPLICITLY:
				case INITIALLY:
				case INLINE:
				case OPERATION:
				case ORGANIZE:
				case OVERLAPS:
				case PACKAGE_NAME:
				case PACKAGE_SCHEMA:
				case PACKAGE_VERSION:
				case PRIMARY:
				case RESET:
				case ROTATE:
				case START:
				case SYSIBM:
				case TRANSACTION:
				case XMLSCHEMA:
				case ELEMENT:
				case URL:
				case NAMESPACE:
				case LOCATION:
				case SYSXSR:
				case ALGORITHM:
				case FIXEDLENGTH:
				case HUFFMAN:
				case LOB:
				case LOG:
				case LOGGED:
				case MAXPARTITIONS:
				case MAXROWS:
				case MEMBER:
				case MOVE:
				case PAGE:
				case PAGENUM:
				case PENDING:
				case RELATIVE:
				case SEGSIZE:
				case TRACKMOD:
				case ADDRESS:
				case ATTRIBUTES:
				case AUTHENTICATION:
				case AUTHID:
				case CONTEXT:
				case JOBNAME:
				case OWNER:
				case PROFILE:
				case QUALIFIER:
				case SERVAUTH:
				case TRUSTED:
				case SECTION:
				case ACTIVE:
				case VERSION:
				case ALIAS:
				case WORK:
				case WORKFILE:
				case SYSDEFLT:
				case NULTERM:
				case STRUCTURE:
				case GENERIC:
				case ABS:
				case ABSVAL:
				case ACOS:
				case ADD_DAYS:
				case ADD_MONTHS:
				case ARRAY_DELETE:
				case ARRAY_FIRST:
				case ARRAY_LAST:
				case ARRAY_NEXT:
				case ARRAY_PRIOR:
				case ARRAY_TRIM:
				case ASCII:
				case ASCII_CHR:
				case ASCIISTR:
				case ASCII_STR:
				case ASIN:
				case ATAN:
				case ATAN2:
				case ATANH:
				case BIGINT:
				case BINARY:
				case BITAND:
				case BITANDNOT:
				case BITNOT:
				case BITOR:
				case BITXOR:
				case BLOB:
				case BTRIM:
				case CARDINALITY:
				case CCSID_ENCODING:
				case CEIL:
				case CEILING:
				case CHAR9:
				case CHARACTER_LENGTH:
				case CHAR_LENGTH:
				case CHR:
				case CLOB:
				case COALESCE:
				case COLLATION_KEY:
				case COMPARE_DECFLOAT:
				case COS:
				case COSH:
				case DATE:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFWEEK_ISO:
				case DAYOFYEAR:
				case DAYS_BETWEEN:
				case DBCLOB:
				case DEC:
				case DECFLOAT:
				case DECFLOAT_FORMAT:
				case DECFLOAT_SORTKEY:
				case DECIMAL:
				case DECODE:
				case DECRYPT_BINARY:
				case DECRYPT_BIT:
				case DECRYPT_CHAR:
				case DECRYPT_DATAKEY_BIGINT:
				case DECRYPT_DATAKEY_BIT:
				case DECRYPT_DATAKEY_CLOB:
				case DECRYPT_DATAKEY_DBCLOB:
				case DECRYPT_DATAKEY_DECIMAL:
				case DECRYPT_DATAKEY_INTEGER:
				case DECRYPT_DATAKEY_VARCHAR:
				case DECRYPT_DATAKEY_VARGRAPHIC:
				case DECRYPT_DB:
				case DEGREES:
				case DIFFERENCE:
				case DIGITS:
				case DOUBLE_PRECISION:
				case DSN_XMLVALIDATE:
				case EBCDIC_CHR:
				case EBCDIC_STR:
				case ENCRYPT_DATAKEY:
				case ENCRYPT_TDES:
				case EXP:
				case EXTRACT:
				case FLOAT:
				case FLOOR:
				case GENERATE_UNIQUE:
				case GENERATE_UNIQUE_BINARY:
				case GETHINT:
				case GETVARIABLE:
				case GRAPHIC:
				case GREATEST:
				case HASH:
				case HASH_CRC32:
				case HASH_MD5:
				case HASH_SHA1:
				case HASH_SHA256:
				case HEX:
				case IDENTITY_VAL_LOCAL:
				case IFNULL:
				case INSTR:
				case INT:
				case INTEGER:
				case JULIAN_DAY:
				case LAST_DAY:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LN:
				case LOCATE:
				case LOCATE_IN_STRING:
				case LOG10:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAX:
				case MAX_CARDINALITY:
				case MIDNIGHT_SECONDS:
				case MIN:
				case MINUTE:
				case MOD:
				case MONTHS_BETWEEN:
				case MQREAD:
				case MQREADCLOB:
				case MQRECEIVE:
				case MQRECEIVECLOB:
				case MQSEND:
				case MULTIPLY_ALT:
				case NEXT_DAY:
				case NEXT_MONTH:
				case NORMALIZE_DECFLOAT:
				case NORMALIZE_STRING:
				case NULLIF:
				case NVL:
				case OVERLAY:
				case PACK:
				case POSITION:
				case POSSTR:
				case POW:
				case POWER:
				case QUANTIZE:
				case QUARTER:
				case RADIANS:
				case RAISE_ERROR:
				case RAND:
				case RANDOM:
				case REAL:
				case REGEXP_COUNT:
				case REGEXP_INSTR:
				case REGEXP_LIKE:
				case REGEXP_REPLACE:
				case REGEXP_SUBSTR:
				case REPLACE:
				case RID:
				case ROUND:
				case ROUND_TIMESTAMP:
				case ROWID:
				case RPAD:
				case RTRIM:
				case SCORE:
				case SIGN:
				case SIN:
				case SINH:
				case SMALLINT:
				case SOAPHTTPC:
				case SOAPHTTPNC:
				case SOAPHTTPNV:
				case SOAPHTTPV:
				case SOUNDEX:
				case SPACE:
				case SQRT:
				case STRIP:
				case STRLEFT:
				case STRPOS:
				case STRRIGHT:
				case SUBSTR:
				case SUBSTRING:
				case TAN:
				case TANH:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIMESTAMP_FORMAT:
				case TIMESTAMP_ISO:
				case TIMESTAMP_TZ:
				case TO_CHAR:
				case TO_CLOB:
				case TO_DATE:
				case TO_NUMBER:
				case TOTALORDER:
				case TO_TIMESTAMP:
				case TRANSLATE:
				case TRIM:
				case TRIM_ARRAY:
				case TRUNC:
				case TRUNC_TIMESTAMP:
				case UCASE:
				case UNICODE:
				case UNICODE_STR:
				case UNISTR:
				case UPPER:
				case VARBINARY:
				case VARCHAR:
				case VARCHAR9:
				case VARCHAR_BIT_FORMAT:
				case VARCHAR_FORMAT:
				case VARGRAPHIC:
				case VERIFY_GROUP_FOR_USER:
				case VERIFY_ROLE_FOR_USER:
				case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
				case WEEK:
				case WEEK_ISO:
				case WRAP:
				case XMLATTRIBUTES:
				case XMLCOMMENT:
				case XMLCONCAT:
				case XMLDOCUMENT:
				case XMLELEMENT:
				case XMLFOREST:
				case XMLMODIFY:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLSERIALIZE:
				case XMLTEXT:
				case XMLXSROBJECTID:
				case XSLTRANSFORM:
				case CURRENT_ACCELERATOR:
				case CURRENT_APPLICATION_COMPATIBILITY:
				case CURRENT_APPLICATION_ENCODING_SCHEME:
				case CURRENT_CLIENT_ACCTNG:
				case CURRENT_CLIENT_APPLNAME:
				case CURRENT_CLIENT_CORR_TOKEN:
				case CURRENT_CLIENT_USERID:
				case CURRENT_CLIENT_WRKSTNNAME:
				case CURRENT_DATE:
				case CURRENT_DEBUG_MODE:
				case CURRENT_DECFLOAT_ROUNDING_MODE:
				case CURRENT_DEGREE:
				case CURRENT_EXPLAIN_MODE:
				case CURRENT_GET_ACCEL_ARCHIVE:
				case CURRENT_LOCALE_LC_CTYPE:
				case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
				case CURRENT_MEMBER:
				case CURRENT_OPTIMIZATION_HINT:
				case CURRENT_PACKAGE_PATH:
				case CURRENT_PACKAGESET:
				case CURRENT_PATH:
				case CURRENT_PRECISION:
				case CURRENT_QUERY_ACCELERATION:
				case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
				case CURRENT_REFRESH_AGE:
				case CURRENT_ROUTINE_VERSION:
				case CURRENT_RULES:
				case CURRENT_SCHEMA:
				case CURRENT_SERVER:
				case CURRENT_SQLID:
				case CURRENT_TEMPORAL_BUSINESS_TIME:
				case CURRENT_TEMPORAL_SYSTEM_TIME:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case CURRENT_TIME_ZONE:
				case ENCRYPTION_PASSWORD:
				case SESSION_TIME_ZONE:
				case SESSION_USER:
				case USER:
				case ADMIN_TASK_LIST:
				case ADMIN_TASK_OUTPUT:
				case ADMIN_TASK_STATUS:
				case BLOCKING_THREADS:
				case MQREADALL:
				case MQREADALLCLOB:
				case MQRECEIVEALL:
				case MQRECEIVEALLCLOB:
				case XMLTABLE:
				case SQLIDENTIFIER:
					{
					setState(2602);
					identifier();
					}
					break;
				case LPAREN:
					{
					{
					setState(2603);
					match(LPAREN);
					setState(2604);
					identifier();
					setState(2605);
					match(COMMA);
					setState(2606);
					match(SPLAT);
					setState(2607);
					match(RPAREN);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case 18:
				{
				{
				setState(2611);
				match(ASUTIME);
				setState(2616);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NO:
					{
					{
					setState(2612);
					match(NO);
					setState(2613);
					match(LIMIT);
					}
					}
					break;
				case LIMIT:
					{
					{
					setState(2614);
					match(LIMIT);
					setState(2615);
					match(INTEGERLITERAL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case 19:
				{
				{
				setState(2618);
				match(STAY);
				setState(2619);
				match(RESIDENT);
				setState(2620);
				_la = _input.LA(1);
				if ( !(_la==NO || _la==YES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case 20:
				{
				{
				setState(2621);
				match(PROGRAM);
				setState(2622);
				match(TYPE);
				setState(2623);
				_la = _input.LA(1);
				if ( !(_la==MAIN || _la==SUB) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case 21:
				{
				{
				setState(2624);
				match(SECURITY);
				setState(2625);
				_la = _input.LA(1);
				if ( !(_la==DB2 || _la==DEFINER || _la==USER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case 22:
				{
				setState(2638);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,283,_ctx) ) {
				case 1:
					{
					{
					setState(2626);
					match(STOP);
					setState(2627);
					match(AFTER);
					setState(2628);
					match(SYSTEM);
					setState(2629);
					match(DEFAULT);
					setState(2630);
					match(FAILURES);
					}
					}
					break;
				case 2:
					{
					{
					setState(2631);
					match(STOP);
					setState(2632);
					match(AFTER);
					setState(2633);
					match(INTEGERLITERAL);
					setState(2634);
					match(FAILURES);
					}
					}
					break;
				case 3:
					{
					{
					setState(2635);
					match(CONTINUE);
					setState(2636);
					match(AFTER);
					setState(2637);
					match(FAILURE);
					}
					}
					break;
				}
				}
				break;
			case 23:
				{
				{
				setState(2640);
				match(RUN);
				setState(2641);
				match(OPTIONS);
				setState(2642);
				runTimeOptions();
				}
				}
				break;
			case 24:
				{
				{
				setState(2643);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==INHERIT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2644);
				match(SPECIAL);
				setState(2645);
				match(REGISTERS);
				}
				}
				break;
			case 25:
				{
				{
				setState(2646);
				match(STATIC);
				setState(2647);
				match(DISPATCH);
				}
				}
				break;
			case 26:
				{
				{
				setState(2649);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2648);
					match(NOT);
					}
				}

				setState(2651);
				match(SECURED);
				}
				}
				break;
			case 27:
				{
				setState(2652);
				match(SPECIFIC);
				}
				break;
			case 28:
				{
				{
				setState(2653);
				match(PARAMETER);
				setState(2654);
				match(CCSID);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcedureOptionListContext extends ParserRuleContext {
		public TerminalNode RESULT() { return getToken(DB2zSQLParser.RESULT, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode EXTERNAL() { return getToken(DB2zSQLParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(DB2zSQLParser.NAME, 0); }
		public TerminalNode LANGUAGE() { return getToken(DB2zSQLParser.LANGUAGE, 0); }
		public TerminalNode PARAMETER() { return getToken(DB2zSQLParser.PARAMETER, 0); }
		public TerminalNode STYLE() { return getToken(DB2zSQLParser.STYLE, 0); }
		public TerminalNode DETERMINISTIC() { return getToken(DB2zSQLParser.DETERMINISTIC, 0); }
		public TerminalNode VARIANT() { return getToken(DB2zSQLParser.VARIANT, 0); }
		public TerminalNode DBINFO() { return getToken(DB2zSQLParser.DBINFO, 0); }
		public TerminalNode WLM() { return getToken(DB2zSQLParser.WLM, 0); }
		public TerminalNode ENVIRONMENT() { return getToken(DB2zSQLParser.ENVIRONMENT, 0); }
		public TerminalNode ASUTIME() { return getToken(DB2zSQLParser.ASUTIME, 0); }
		public TerminalNode STAY() { return getToken(DB2zSQLParser.STAY, 0); }
		public TerminalNode RESIDENT() { return getToken(DB2zSQLParser.RESIDENT, 0); }
		public TerminalNode PROGRAM() { return getToken(DB2zSQLParser.PROGRAM, 0); }
		public TerminalNode TYPE() { return getToken(DB2zSQLParser.TYPE, 0); }
		public TerminalNode SECURITY() { return getToken(DB2zSQLParser.SECURITY, 0); }
		public TerminalNode RUN() { return getToken(DB2zSQLParser.RUN, 0); }
		public TerminalNode OPTIONS() { return getToken(DB2zSQLParser.OPTIONS, 0); }
		public RunTimeOptionsContext runTimeOptions() {
			return getRuleContext(RunTimeOptionsContext.class,0);
		}
		public TerminalNode COMMIT() { return getToken(DB2zSQLParser.COMMIT, 0); }
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public TerminalNode RETURN() { return getToken(DB2zSQLParser.RETURN, 0); }
		public TerminalNode SPECIAL() { return getToken(DB2zSQLParser.SPECIAL, 0); }
		public TerminalNode REGISTERS() { return getToken(DB2zSQLParser.REGISTERS, 0); }
		public TerminalNode CALLED() { return getToken(DB2zSQLParser.CALLED, 0); }
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public TerminalNode INPUT() { return getToken(DB2zSQLParser.INPUT, 0); }
		public TerminalNode CALL() { return getToken(DB2zSQLParser.CALL, 0); }
		public TerminalNode DEBUG() { return getToken(DB2zSQLParser.DEBUG, 0); }
		public TerminalNode MODE_() { return getToken(DB2zSQLParser.MODE_, 0); }
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public TerminalNode SETS() { return getToken(DB2zSQLParser.SETS, 0); }
		public TerminalNode ASSEMBLE() { return getToken(DB2zSQLParser.ASSEMBLE, 0); }
		public TerminalNode C_() { return getToken(DB2zSQLParser.C_, 0); }
		public TerminalNode COBOL() { return getToken(DB2zSQLParser.COBOL, 0); }
		public TerminalNode JAVA() { return getToken(DB2zSQLParser.JAVA, 0); }
		public TerminalNode PLI() { return getToken(DB2zSQLParser.PLI, 0); }
		public TerminalNode REXX() { return getToken(DB2zSQLParser.REXX, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode YES() { return getToken(DB2zSQLParser.YES, 0); }
		public TerminalNode SUB() { return getToken(DB2zSQLParser.SUB, 0); }
		public TerminalNode MAIN() { return getToken(DB2zSQLParser.MAIN, 0); }
		public TerminalNode DB2() { return getToken(DB2zSQLParser.DB2, 0); }
		public TerminalNode USER() { return getToken(DB2zSQLParser.USER, 0); }
		public TerminalNode DEFINER() { return getToken(DB2zSQLParser.DEFINER, 0); }
		public TerminalNode INHERIT() { return getToken(DB2zSQLParser.INHERIT, 0); }
		public TerminalNode DEFAULT() { return getToken(DB2zSQLParser.DEFAULT, 0); }
		public TerminalNode DISALLOW() { return getToken(DB2zSQLParser.DISALLOW, 0); }
		public TerminalNode ALLOW() { return getToken(DB2zSQLParser.ALLOW, 0); }
		public TerminalNode DISABLE() { return getToken(DB2zSQLParser.DISABLE, 0); }
		public ExternalProgramNameContext externalProgramName() {
			return getRuleContext(ExternalProgramNameContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode SQL() { return getToken(DB2zSQLParser.SQL, 0); }
		public TerminalNode DB2SQL() { return getToken(DB2zSQLParser.DB2SQL, 0); }
		public TerminalNode GENERAL() { return getToken(DB2zSQLParser.GENERAL, 0); }
		public TerminalNode PACKAGE() { return getToken(DB2zSQLParser.PACKAGE, 0); }
		public TerminalNode PATH() { return getToken(DB2zSQLParser.PATH, 0); }
		public PackagePathContext packagePath() {
			return getRuleContext(PackagePathContext.class,0);
		}
		public TerminalNode MODIFIES() { return getToken(DB2zSQLParser.MODIFIES, 0); }
		public TerminalNode DATA() { return getToken(DB2zSQLParser.DATA, 0); }
		public TerminalNode READS() { return getToken(DB2zSQLParser.READS, 0); }
		public TerminalNode CONTAINS() { return getToken(DB2zSQLParser.CONTAINS, 0); }
		public TerminalNode COLLID() { return getToken(DB2zSQLParser.COLLID, 0); }
		public CollectionIDContext collectionID() {
			return getRuleContext(CollectionIDContext.class,0);
		}
		public TerminalNode STOP() { return getToken(DB2zSQLParser.STOP, 0); }
		public TerminalNode AFTER() { return getToken(DB2zSQLParser.AFTER, 0); }
		public TerminalNode SYSTEM() { return getToken(DB2zSQLParser.SYSTEM, 0); }
		public TerminalNode FAILURES() { return getToken(DB2zSQLParser.FAILURES, 0); }
		public TerminalNode CONTINUE() { return getToken(DB2zSQLParser.CONTINUE, 0); }
		public TerminalNode FAILURE() { return getToken(DB2zSQLParser.FAILURE, 0); }
		public TerminalNode DYNAMIC() { return getToken(DB2zSQLParser.DYNAMIC, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TerminalNode STANDARD() { return getToken(DB2zSQLParser.STANDARD, 0); }
		public TerminalNode SIMPLE() { return getToken(DB2zSQLParser.SIMPLE, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode NULLS() { return getToken(DB2zSQLParser.NULLS, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode COMMA() { return getToken(DB2zSQLParser.COMMA, 0); }
		public TerminalNode SPLAT() { return getToken(DB2zSQLParser.SPLAT, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode LIMIT() { return getToken(DB2zSQLParser.LIMIT, 0); }
		public ProcedureOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterProcedureOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitProcedureOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitProcedureOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProcedureOptionListContext procedureOptionList() throws RecognitionException {
		ProcedureOptionListContext _localctx = new ProcedureOptionListContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_procedureOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2787);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,299,_ctx) ) {
			case 1:
				{
				{
				setState(2658);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DYNAMIC) {
					{
					setState(2657);
					match(DYNAMIC);
					}
				}

				setState(2660);
				match(RESULT);
				setState(2661);
				_la = _input.LA(1);
				if ( !(_la==SET || _la==SETS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2662);
				match(INTEGERLITERAL);
				}
				}
				break;
			case 2:
				{
				{
				setState(2663);
				match(EXTERNAL);
				setState(2664);
				match(NAME);
				setState(2667);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,287,_ctx) ) {
				case 1:
					{
					setState(2665);
					externalProgramName();
					}
					break;
				case 2:
					{
					setState(2666);
					identifier();
					}
					break;
				}
				}
				}
				break;
			case 3:
				{
				{
				setState(2669);
				match(LANGUAGE);
				setState(2670);
				_la = _input.LA(1);
				if ( !(((((_la - 431)) & ~0x3f) == 0 && ((1L << (_la - 431)) & ((1L << (ASSEMBLE - 431)) | (1L << (C_ - 431)) | (1L << (COBOL - 431)) | (1L << (JAVA - 431)) | (1L << (PLI - 431)) | (1L << (REXX - 431)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case 4:
				{
				{
				setState(2671);
				match(PARAMETER);
				setState(2672);
				match(STYLE);
				setState(2688);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,289,_ctx) ) {
				case 1:
					{
					setState(2673);
					match(SQL);
					}
					break;
				case 2:
					{
					setState(2674);
					match(DB2SQL);
					}
					break;
				case 3:
					{
					{
					setState(2675);
					match(STANDARD);
					setState(2676);
					match(CALL);
					}
					}
					break;
				case 4:
					{
					setState(2677);
					match(GENERAL);
					}
					break;
				case 5:
					{
					{
					setState(2678);
					match(SIMPLE);
					setState(2679);
					match(CALL);
					}
					}
					break;
				case 6:
					{
					{
					setState(2683);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case GENERAL:
						{
						setState(2680);
						match(GENERAL);
						}
						break;
					case SIMPLE:
						{
						{
						setState(2681);
						match(SIMPLE);
						setState(2682);
						match(CALL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2685);
					match(WITH);
					setState(2686);
					match(NULLS);
					}
					}
					break;
				case 7:
					{
					setState(2687);
					match(JAVA);
					}
					break;
				}
				}
				}
				break;
			case 5:
				{
				{
				setState(2691);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2690);
					match(NOT);
					}
				}

				setState(2693);
				match(DETERMINISTIC);
				}
				}
				break;
			case 6:
				{
				{
				setState(2695);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2694);
					match(NOT);
					}
				}

				setState(2697);
				match(VARIANT);
				}
				}
				break;
			case 7:
				{
				setState(2704);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PACKAGE:
					{
					{
					setState(2698);
					match(PACKAGE);
					setState(2699);
					match(PATH);
					setState(2700);
					packagePath();
					}
					}
					break;
				case NO:
					{
					{
					setState(2701);
					match(NO);
					setState(2702);
					match(PACKAGE);
					setState(2703);
					match(PATH);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 8:
				{
				setState(2716);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case MODIFIES:
					{
					{
					setState(2706);
					match(MODIFIES);
					setState(2707);
					match(SQL);
					setState(2708);
					match(DATA);
					}
					}
					break;
				case READS:
					{
					{
					setState(2709);
					match(READS);
					setState(2710);
					match(SQL);
					setState(2711);
					match(DATA);
					}
					}
					break;
				case CONTAINS:
					{
					{
					setState(2712);
					match(CONTAINS);
					setState(2713);
					match(SQL);
					}
					}
					break;
				case NO:
					{
					{
					setState(2714);
					match(NO);
					setState(2715);
					match(SQL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 9:
				{
				{
				setState(2719);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(2718);
					match(NO);
					}
				}

				setState(2721);
				match(DBINFO);
				}
				}
				break;
			case 10:
				{
				setState(2726);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NO:
					{
					{
					setState(2722);
					match(NO);
					setState(2723);
					match(COLLID);
					}
					}
					break;
				case COLLID:
					{
					{
					setState(2724);
					match(COLLID);
					setState(2725);
					collectionID();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 11:
				{
				{
				setState(2728);
				match(WLM);
				setState(2729);
				match(ENVIRONMENT);
				setState(2737);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ADD:
				case AFTER:
				case ALL:
				case ALLOCATE:
				case ALLOW:
				case ALTER:
				case ALTERAND:
				case ANY:
				case ARRAY:
				case ARRAY_EXISTS:
				case AS:
				case ASENSITIVE:
				case ASSOCIATE:
				case ASUTIME:
				case AT:
				case AUDIT:
				case AUX:
				case AUXILIARY:
				case BEFORE:
				case BEGIN:
				case BETWEEN:
				case BUFFERPOOL:
				case BY:
				case CALL:
				case CAPTURE:
				case CASCADED:
				case CASE:
				case CAST:
				case CCSID:
				case CHAR:
				case CHARACTER:
				case CHECK:
				case CLONE:
				case CLOSE:
				case CLUSTER:
				case COLLECTION:
				case COLLID:
				case COLUMN:
				case COMMENT:
				case COMMIT:
				case CONCAT:
				case CONDITION:
				case CONNECT:
				case CONNECTION:
				case CONSTRAINT:
				case CONTAINS:
				case CONTENT:
				case CONTINUE:
				case CREATE:
				case CUBE:
				case CURRENT:
				case CURRENT_LC_CTYPE:
				case CURRVAL:
				case CURSOR:
				case DATA:
				case DATABASE:
				case DAY:
				case DAYS:
				case DBINFO:
				case DECLARE:
				case DEFAULT:
				case DELETE:
				case DESCRIPTOR:
				case DETERMINISTIC:
				case DISABLE:
				case DISALLOW:
				case DISTINCT:
				case DO:
				case DOCUMENT:
				case DOUBLE:
				case DROP:
				case DSSIZE:
				case DYNAMIC:
				case EDITPROC:
				case ELSE:
				case ELSEIF:
				case ENCODING:
				case ENCRYPTION:
				case END:
				case END_EXEC:
				case ENDING:
				case ERASE:
				case ESCAPE:
				case EXCEPT:
				case EXCEPTION:
				case EXEC_SQL:
				case EXECUTE:
				case EXISTS:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case FENCED:
				case FETCH:
				case FIELDPROC:
				case FINAL:
				case FIRST:
				case FOR:
				case FREE:
				case FROM:
				case FULL:
				case FUNCTION:
				case GENERATED:
				case GET:
				case GLOBAL:
				case GO:
				case GOTO:
				case GRANT:
				case GROUP:
				case HANDLER:
				case HAVING:
				case HOLD:
				case HOUR:
				case HOURS:
				case IF:
				case IMMEDIATE:
				case IN:
				case INCLUSIVE:
				case INDEX:
				case INDEXBP:
				case INHERIT:
				case INNER:
				case INOUT:
				case INSENSITIVE:
				case INSERT:
				case INTERSECT:
				case INTO:
				case IS:
				case ISOBID:
				case ITERATE:
				case JAR:
				case JOIN:
				case KEEP:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LAST:
				case LC_CTYPE:
				case LEAVE:
				case LEFT:
				case LIKE:
				case LIMIT:
				case LOCAL:
				case LOCALE:
				case LOCATOR:
				case LOCATORS:
				case LOCK:
				case LOCKMAX:
				case LOCKSIZE:
				case LONG:
				case LOOP:
				case MAINTAINED:
				case MATERIALIZED:
				case MICROSECOND:
				case MICROSECONDS:
				case MODIFIES:
				case MONTH:
				case MONTHS:
				case NEXT:
				case NEXTVAL:
				case NO:
				case NONE:
				case NOT:
				case NULL:
				case NULLS:
				case NUMPARTS:
				case OBID:
				case OF:
				case OFFSET:
				case OLD:
				case ON:
				case OPEN:
				case OPTIMIZATION:
				case OPTIMIZE:
				case OR:
				case ORDER:
				case ORGANIZATION:
				case OUT:
				case OUTER:
				case PACKAGE:
				case PADDED:
				case PARAMETER:
				case PART:
				case PARTITION:
				case PARTITIONED:
				case PARTITIONING:
				case PATH:
				case PERIOD:
				case PIECESIZE:
				case PLAN:
				case PRECISION:
				case PREPARE:
				case PREVVAL:
				case PRIOR:
				case PRIQTY:
				case PRIVILEGES:
				case PROCEDURE:
				case PROGRAM:
				case PSID:
				case PUBLIC:
				case QUERY:
				case QUERYNO:
				case READS:
				case REFERENCES:
				case REFRESH:
				case RELEASE:
				case RENAME:
				case REPEAT:
				case RESIGNAL:
				case RESTRICT:
				case RESULT:
				case RESULT_SET_LOCATOR:
				case RETURN:
				case RETURNS:
				case REVOKE:
				case RIGHT:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUND_CEILING:
				case ROUND_DOWN:
				case ROUND_FLOOR:
				case ROUND_HALF_DOWN:
				case ROUND_HALF_EVEN:
				case ROUND_HALF_UP:
				case ROUND_UP:
				case ROW:
				case ROWSET:
				case RUN:
				case SAVEPOINT:
				case SCHEMA:
				case SCRATCHPAD:
				case SECOND:
				case SECONDS:
				case SECQTY:
				case SECURITY:
				case SELECT:
				case SENSITIVE:
				case SEQUENCE:
				case SET:
				case SIGNAL:
				case SIMPLE:
				case SOME:
				case SOURCE:
				case SPECIFIC:
				case STANDARD:
				case STATEMENT:
				case STATIC:
				case STAY:
				case STOGROUP:
				case STORES:
				case STYLE:
				case SUMMARY:
				case SYNONYM:
				case SYSDATE:
				case SYSTEM:
				case SYSTIMESTAMP:
				case TABLE:
				case TABLESPACE:
				case THEN:
				case TO:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNDO:
				case UNION:
				case UNIQUE:
				case UNTIL:
				case UPDATE:
				case USING:
				case VALIDPROC:
				case VALUE:
				case VALUES:
				case VARIABLE:
				case VARIANT:
				case VCAT:
				case VERSIONING:
				case VIEW:
				case VOLATILE:
				case VOLUMES:
				case WHEN:
				case WHENEVER:
				case WHERE:
				case WHILE:
				case WITH:
				case WLM:
				case XMLCAST:
				case XMLEXISTS:
				case XMLNAMESPACES:
				case YEAR:
				case YEARS:
				case ZONE:
				case AND:
				case ARRAY_AGG:
				case ASC:
				case AVG:
				case BIT:
				case CHANGE:
				case CODEUNITS16:
				case CODEUNITS32:
				case CORR:
				case CORRELATION:
				case COUNT:
				case COUNT_BIG:
				case COVAR:
				case COVARIANCE:
				case COVARIANCE_SAMP:
				case COVAR_POP:
				case COVAR_SAMP:
				case CS:
				case CUME_DIST:
				case DENSE_RANK:
				case DESC:
				case EBCDIC:
				case EXCLUSIVE:
				case FIRST_VALUE:
				case FOLLOWING:
				case GROUPING:
				case IGNORE:
				case INDICATOR:
				case INPUT:
				case ISNULL:
				case LAG:
				case LARGE:
				case LAST_VALUE:
				case LEAD:
				case LISTAGG:
				case LOCKED:
				case LOCKS:
				case MEDIAN:
				case MINUTES:
				case MIXED:
				case NOTNULL:
				case NTH_VALUE:
				case NTILE:
				case NUMERIC:
				case OBJECT:
				case OCTETS:
				case ONLY:
				case OVER:
				case PASSING:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case PERCENT_RANK:
				case PRECEDING:
				case PREVIOUS:
				case RANGE:
				case RANK:
				case RATIO_TO_REPORT:
				case READ:
				case REF:
				case REGR_AVGX:
				case REGR_AVGY:
				case REGR_COUNT:
				case REGR_ICPT:
				case REGR_INTERCEPT:
				case REGR_R2:
				case REGR_SLOPE:
				case REGR_SXX:
				case REGR_SXY:
				case REGR_SYY:
				case RESPECT:
				case ROW_NUMBER:
				case ROWS:
				case RR:
				case RS:
				case SBCS:
				case SELECTIVITY:
				case SETS:
				case SHARE:
				case SKIP_:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case TOKEN:
				case UNBOUNDED:
				case UNPACK:
				case UR:
				case USE:
				case VAR:
				case VARIANCE:
				case VARIANCE_SAMP:
				case VAR_POP:
				case VAR_SAMP:
				case VARYING:
				case WITHOUT:
				case XML:
				case XMLAGG:
				case COLUMNS:
				case SQLID:
				case ORDINALITY:
				case SYSTEM_TIME:
				case BUSINESS_TIME:
				case MULTIPLIER:
				case UNNEST:
				case CROSS:
				case CALLER:
				case CLIENT:
				case POSITIONING:
				case SCROLL:
				case ACTION:
				case ASSEMBLE:
				case C_:
				case CALLED:
				case COBOL:
				case DB2:
				case DEFINER:
				case DISPATCH:
				case ENVIRONMENT:
				case FAILURE:
				case FAILURES:
				case JAVA:
				case MAIN:
				case NAME:
				case OPTIONS:
				case PARALLEL:
				case PLI:
				case REGISTERS:
				case RESIDENT:
				case SECURED:
				case SPECIAL:
				case SQL:
				case STOP:
				case SUB:
				case YES:
				case APPLICATION:
				case CHANGED:
				case COMPATIBILITY:
				case COMPRESS:
				case COPY:
				case FREEPAGE:
				case GBPCACHE:
				case INCLUDE:
				case MAXVALUE:
				case MINVALUE:
				case PCTFREE:
				case REGENERATE:
				case MASK:
				case ENABLE:
				case PERMISSION:
				case ATOMIC:
				case SQLEXCEPTION:
				case MERGE:
				case MATCHED:
				case SQLSTATE:
				case MESSAGE_TEXT:
				case OVERRIDING:
				case PORTION:
				case DB2SQL:
				case DEBUG:
				case GENERAL:
				case MODE_:
				case REXX:
				case CACHE:
				case CYCLE:
				case INCREMENT:
				case RESTART:
				case DATACLAS:
				case MGMTCLAS:
				case REMOVE:
				case STORCLAS:
				case ACCESS:
				case ACTIVATE:
				case ALWAYS:
				case APPEND:
				case ARCHIVE:
				case BUSINESS:
				case CASCADE:
				case CHANGES:
				case CONTROL:
				case DEACTIVATE:
				case DEFERRED:
				case EACH:
				case ENFORCED:
				case EXTRA:
				case FOREIGN:
				case HIDDEN_:
				case HISTORY:
				case ID:
				case IDENTITY:
				case IMPLICITLY:
				case INITIALLY:
				case INLINE:
				case OPERATION:
				case ORGANIZE:
				case OVERLAPS:
				case PACKAGE_NAME:
				case PACKAGE_SCHEMA:
				case PACKAGE_VERSION:
				case PRIMARY:
				case RESET:
				case ROTATE:
				case START:
				case SYSIBM:
				case TRANSACTION:
				case XMLSCHEMA:
				case ELEMENT:
				case URL:
				case NAMESPACE:
				case LOCATION:
				case SYSXSR:
				case ALGORITHM:
				case FIXEDLENGTH:
				case HUFFMAN:
				case LOB:
				case LOG:
				case LOGGED:
				case MAXPARTITIONS:
				case MAXROWS:
				case MEMBER:
				case MOVE:
				case PAGE:
				case PAGENUM:
				case PENDING:
				case RELATIVE:
				case SEGSIZE:
				case TRACKMOD:
				case ADDRESS:
				case ATTRIBUTES:
				case AUTHENTICATION:
				case AUTHID:
				case CONTEXT:
				case JOBNAME:
				case OWNER:
				case PROFILE:
				case QUALIFIER:
				case SERVAUTH:
				case TRUSTED:
				case SECTION:
				case ACTIVE:
				case VERSION:
				case ALIAS:
				case WORK:
				case WORKFILE:
				case SYSDEFLT:
				case NULTERM:
				case STRUCTURE:
				case GENERIC:
				case ABS:
				case ABSVAL:
				case ACOS:
				case ADD_DAYS:
				case ADD_MONTHS:
				case ARRAY_DELETE:
				case ARRAY_FIRST:
				case ARRAY_LAST:
				case ARRAY_NEXT:
				case ARRAY_PRIOR:
				case ARRAY_TRIM:
				case ASCII:
				case ASCII_CHR:
				case ASCIISTR:
				case ASCII_STR:
				case ASIN:
				case ATAN:
				case ATAN2:
				case ATANH:
				case BIGINT:
				case BINARY:
				case BITAND:
				case BITANDNOT:
				case BITNOT:
				case BITOR:
				case BITXOR:
				case BLOB:
				case BTRIM:
				case CARDINALITY:
				case CCSID_ENCODING:
				case CEIL:
				case CEILING:
				case CHAR9:
				case CHARACTER_LENGTH:
				case CHAR_LENGTH:
				case CHR:
				case CLOB:
				case COALESCE:
				case COLLATION_KEY:
				case COMPARE_DECFLOAT:
				case COS:
				case COSH:
				case DATE:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFWEEK_ISO:
				case DAYOFYEAR:
				case DAYS_BETWEEN:
				case DBCLOB:
				case DEC:
				case DECFLOAT:
				case DECFLOAT_FORMAT:
				case DECFLOAT_SORTKEY:
				case DECIMAL:
				case DECODE:
				case DECRYPT_BINARY:
				case DECRYPT_BIT:
				case DECRYPT_CHAR:
				case DECRYPT_DATAKEY_BIGINT:
				case DECRYPT_DATAKEY_BIT:
				case DECRYPT_DATAKEY_CLOB:
				case DECRYPT_DATAKEY_DBCLOB:
				case DECRYPT_DATAKEY_DECIMAL:
				case DECRYPT_DATAKEY_INTEGER:
				case DECRYPT_DATAKEY_VARCHAR:
				case DECRYPT_DATAKEY_VARGRAPHIC:
				case DECRYPT_DB:
				case DEGREES:
				case DIFFERENCE:
				case DIGITS:
				case DOUBLE_PRECISION:
				case DSN_XMLVALIDATE:
				case EBCDIC_CHR:
				case EBCDIC_STR:
				case ENCRYPT_DATAKEY:
				case ENCRYPT_TDES:
				case EXP:
				case EXTRACT:
				case FLOAT:
				case FLOOR:
				case GENERATE_UNIQUE:
				case GENERATE_UNIQUE_BINARY:
				case GETHINT:
				case GETVARIABLE:
				case GRAPHIC:
				case GREATEST:
				case HASH:
				case HASH_CRC32:
				case HASH_MD5:
				case HASH_SHA1:
				case HASH_SHA256:
				case HEX:
				case IDENTITY_VAL_LOCAL:
				case IFNULL:
				case INSTR:
				case INT:
				case INTEGER:
				case JULIAN_DAY:
				case LAST_DAY:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LN:
				case LOCATE:
				case LOCATE_IN_STRING:
				case LOG10:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAX:
				case MAX_CARDINALITY:
				case MIDNIGHT_SECONDS:
				case MIN:
				case MINUTE:
				case MOD:
				case MONTHS_BETWEEN:
				case MQREAD:
				case MQREADCLOB:
				case MQRECEIVE:
				case MQRECEIVECLOB:
				case MQSEND:
				case MULTIPLY_ALT:
				case NEXT_DAY:
				case NEXT_MONTH:
				case NORMALIZE_DECFLOAT:
				case NORMALIZE_STRING:
				case NULLIF:
				case NVL:
				case OVERLAY:
				case PACK:
				case POSITION:
				case POSSTR:
				case POW:
				case POWER:
				case QUANTIZE:
				case QUARTER:
				case RADIANS:
				case RAISE_ERROR:
				case RAND:
				case RANDOM:
				case REAL:
				case REGEXP_COUNT:
				case REGEXP_INSTR:
				case REGEXP_LIKE:
				case REGEXP_REPLACE:
				case REGEXP_SUBSTR:
				case REPLACE:
				case RID:
				case ROUND:
				case ROUND_TIMESTAMP:
				case ROWID:
				case RPAD:
				case RTRIM:
				case SCORE:
				case SIGN:
				case SIN:
				case SINH:
				case SMALLINT:
				case SOAPHTTPC:
				case SOAPHTTPNC:
				case SOAPHTTPNV:
				case SOAPHTTPV:
				case SOUNDEX:
				case SPACE:
				case SQRT:
				case STRIP:
				case STRLEFT:
				case STRPOS:
				case STRRIGHT:
				case SUBSTR:
				case SUBSTRING:
				case TAN:
				case TANH:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIMESTAMP_FORMAT:
				case TIMESTAMP_ISO:
				case TIMESTAMP_TZ:
				case TO_CHAR:
				case TO_CLOB:
				case TO_DATE:
				case TO_NUMBER:
				case TOTALORDER:
				case TO_TIMESTAMP:
				case TRANSLATE:
				case TRIM:
				case TRIM_ARRAY:
				case TRUNC:
				case TRUNC_TIMESTAMP:
				case UCASE:
				case UNICODE:
				case UNICODE_STR:
				case UNISTR:
				case UPPER:
				case VARBINARY:
				case VARCHAR:
				case VARCHAR9:
				case VARCHAR_BIT_FORMAT:
				case VARCHAR_FORMAT:
				case VARGRAPHIC:
				case VERIFY_GROUP_FOR_USER:
				case VERIFY_ROLE_FOR_USER:
				case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
				case WEEK:
				case WEEK_ISO:
				case WRAP:
				case XMLATTRIBUTES:
				case XMLCOMMENT:
				case XMLCONCAT:
				case XMLDOCUMENT:
				case XMLELEMENT:
				case XMLFOREST:
				case XMLMODIFY:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLSERIALIZE:
				case XMLTEXT:
				case XMLXSROBJECTID:
				case XSLTRANSFORM:
				case CURRENT_ACCELERATOR:
				case CURRENT_APPLICATION_COMPATIBILITY:
				case CURRENT_APPLICATION_ENCODING_SCHEME:
				case CURRENT_CLIENT_ACCTNG:
				case CURRENT_CLIENT_APPLNAME:
				case CURRENT_CLIENT_CORR_TOKEN:
				case CURRENT_CLIENT_USERID:
				case CURRENT_CLIENT_WRKSTNNAME:
				case CURRENT_DATE:
				case CURRENT_DEBUG_MODE:
				case CURRENT_DECFLOAT_ROUNDING_MODE:
				case CURRENT_DEGREE:
				case CURRENT_EXPLAIN_MODE:
				case CURRENT_GET_ACCEL_ARCHIVE:
				case CURRENT_LOCALE_LC_CTYPE:
				case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
				case CURRENT_MEMBER:
				case CURRENT_OPTIMIZATION_HINT:
				case CURRENT_PACKAGE_PATH:
				case CURRENT_PACKAGESET:
				case CURRENT_PATH:
				case CURRENT_PRECISION:
				case CURRENT_QUERY_ACCELERATION:
				case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
				case CURRENT_REFRESH_AGE:
				case CURRENT_ROUTINE_VERSION:
				case CURRENT_RULES:
				case CURRENT_SCHEMA:
				case CURRENT_SERVER:
				case CURRENT_SQLID:
				case CURRENT_TEMPORAL_BUSINESS_TIME:
				case CURRENT_TEMPORAL_SYSTEM_TIME:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case CURRENT_TIME_ZONE:
				case ENCRYPTION_PASSWORD:
				case SESSION_TIME_ZONE:
				case SESSION_USER:
				case USER:
				case ADMIN_TASK_LIST:
				case ADMIN_TASK_OUTPUT:
				case ADMIN_TASK_STATUS:
				case BLOCKING_THREADS:
				case MQREADALL:
				case MQREADALLCLOB:
				case MQRECEIVEALL:
				case MQRECEIVEALLCLOB:
				case XMLTABLE:
				case SQLIDENTIFIER:
					{
					setState(2730);
					identifier();
					}
					break;
				case LPAREN:
					{
					{
					setState(2731);
					match(LPAREN);
					setState(2732);
					identifier();
					setState(2733);
					match(COMMA);
					setState(2734);
					match(SPLAT);
					setState(2735);
					match(RPAREN);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case 12:
				{
				{
				setState(2739);
				match(ASUTIME);
				setState(2744);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NO:
					{
					{
					setState(2740);
					match(NO);
					setState(2741);
					match(LIMIT);
					}
					}
					break;
				case LIMIT:
					{
					{
					setState(2742);
					match(LIMIT);
					setState(2743);
					match(INTEGERLITERAL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case 13:
				{
				{
				setState(2746);
				match(STAY);
				setState(2747);
				match(RESIDENT);
				setState(2748);
				_la = _input.LA(1);
				if ( !(_la==NO || _la==YES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case 14:
				{
				{
				setState(2749);
				match(PROGRAM);
				setState(2750);
				match(TYPE);
				setState(2751);
				_la = _input.LA(1);
				if ( !(_la==MAIN || _la==SUB) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case 15:
				{
				{
				setState(2752);
				match(SECURITY);
				setState(2753);
				_la = _input.LA(1);
				if ( !(_la==DB2 || _la==DEFINER || _la==USER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case 16:
				{
				{
				setState(2754);
				match(RUN);
				setState(2755);
				match(OPTIONS);
				setState(2756);
				runTimeOptions();
				}
				}
				break;
			case 17:
				{
				{
				setState(2757);
				match(COMMIT);
				setState(2758);
				match(ON);
				setState(2759);
				match(RETURN);
				setState(2760);
				_la = _input.LA(1);
				if ( !(_la==NO || _la==YES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case 18:
				{
				{
				setState(2761);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==INHERIT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2762);
				match(SPECIAL);
				setState(2763);
				match(REGISTERS);
				}
				}
				break;
			case 19:
				{
				{
				setState(2764);
				match(CALLED);
				setState(2765);
				match(ON);
				setState(2766);
				match(NULL);
				setState(2767);
				match(INPUT);
				}
				}
				break;
			case 20:
				{
				{
				setState(2768);
				match(NULL);
				setState(2769);
				match(CALL);
				}
				}
				break;
			case 21:
				{
				setState(2782);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,298,_ctx) ) {
				case 1:
					{
					{
					setState(2770);
					match(STOP);
					setState(2771);
					match(AFTER);
					setState(2772);
					match(SYSTEM);
					setState(2773);
					match(DEFAULT);
					setState(2774);
					match(FAILURES);
					}
					}
					break;
				case 2:
					{
					{
					setState(2775);
					match(STOP);
					setState(2776);
					match(AFTER);
					setState(2777);
					match(INTEGERLITERAL);
					setState(2778);
					match(FAILURES);
					}
					}
					break;
				case 3:
					{
					{
					setState(2779);
					match(CONTINUE);
					setState(2780);
					match(AFTER);
					setState(2781);
					match(FAILURE);
					}
					}
					break;
				}
				}
				break;
			case 22:
				{
				{
				setState(2784);
				_la = _input.LA(1);
				if ( !(((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (ALLOW - 33)) | (1L << (DISABLE - 33)) | (1L << (DISALLOW - 33)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2785);
				match(DEBUG);
				setState(2786);
				match(MODE_);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SequenceOptionListContext extends ParserRuleContext {
		public TerminalNode RESTART() { return getToken(DB2zSQLParser.RESTART, 0); }
		public TerminalNode INCREMENT() { return getToken(DB2zSQLParser.INCREMENT, 0); }
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode CYCLE() { return getToken(DB2zSQLParser.CYCLE, 0); }
		public TerminalNode ORDER() { return getToken(DB2zSQLParser.ORDER, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode MINVALUE() { return getToken(DB2zSQLParser.MINVALUE, 0); }
		public TerminalNode MAXVALUE() { return getToken(DB2zSQLParser.MAXVALUE, 0); }
		public TerminalNode CACHE() { return getToken(DB2zSQLParser.CACHE, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public SequenceOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequenceOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSequenceOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSequenceOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSequenceOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SequenceOptionListContext sequenceOptionList() throws RecognitionException {
		SequenceOptionListContext _localctx = new SequenceOptionListContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_sequenceOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2823);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,306,_ctx) ) {
			case 1:
				{
				{
				setState(2789);
				match(RESTART);
				setState(2792);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(2790);
					match(WITH);
					setState(2791);
					match(INTEGERLITERAL);
					}
				}

				}
				}
				break;
			case 2:
				{
				{
				setState(2794);
				match(INCREMENT);
				setState(2795);
				match(BY);
				setState(2796);
				match(INTEGERLITERAL);
				}
				}
				break;
			case 3:
				{
				setState(2801);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NO:
					{
					{
					setState(2797);
					match(NO);
					setState(2798);
					match(MINVALUE);
					}
					}
					break;
				case MINVALUE:
					{
					{
					setState(2799);
					match(MINVALUE);
					setState(2800);
					match(INTEGERLITERAL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				{
				setState(2807);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NO:
					{
					{
					setState(2803);
					match(NO);
					setState(2804);
					match(MAXVALUE);
					}
					}
					break;
				case MAXVALUE:
					{
					{
					setState(2805);
					match(MAXVALUE);
					setState(2806);
					match(INTEGERLITERAL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 5:
				{
				{
				setState(2810);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(2809);
					match(NO);
					}
				}

				setState(2812);
				match(CYCLE);
				}
				}
				break;
			case 6:
				{
				setState(2817);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NO:
					{
					{
					setState(2813);
					match(NO);
					setState(2814);
					match(CACHE);
					}
					}
					break;
				case CACHE:
					{
					{
					setState(2815);
					match(CACHE);
					setState(2816);
					match(INTEGERLITERAL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 7:
				{
				{
				setState(2820);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(2819);
					match(NO);
					}
				}

				setState(2822);
				match(ORDER);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StogroupOptionListContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(DB2zSQLParser.ADD, 0); }
		public TerminalNode VOLUMES() { return getToken(DB2zSQLParser.VOLUMES, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<VolumeIDContext> volumeID() {
			return getRuleContexts(VolumeIDContext.class);
		}
		public VolumeIDContext volumeID(int i) {
			return getRuleContext(VolumeIDContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> NONNUMERICLITERAL() { return getTokens(DB2zSQLParser.NONNUMERICLITERAL); }
		public TerminalNode NONNUMERICLITERAL(int i) {
			return getToken(DB2zSQLParser.NONNUMERICLITERAL, i);
		}
		public TerminalNode REMOVE() { return getToken(DB2zSQLParser.REMOVE, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode KEY() { return getToken(DB2zSQLParser.KEY, 0); }
		public TerminalNode LABEL() { return getToken(DB2zSQLParser.LABEL, 0); }
		public KeyLabelNameContext keyLabelName() {
			return getRuleContext(KeyLabelNameContext.class,0);
		}
		public TerminalNode DATACLAS() { return getToken(DB2zSQLParser.DATACLAS, 0); }
		public DcNameContext dcName() {
			return getRuleContext(DcNameContext.class,0);
		}
		public TerminalNode MGMTCLAS() { return getToken(DB2zSQLParser.MGMTCLAS, 0); }
		public McNameContext mcName() {
			return getRuleContext(McNameContext.class,0);
		}
		public TerminalNode STORCLAS() { return getToken(DB2zSQLParser.STORCLAS, 0); }
		public ScNameContext scName() {
			return getRuleContext(ScNameContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public StogroupOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stogroupOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterStogroupOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitStogroupOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitStogroupOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StogroupOptionListContext stogroupOptionList() throws RecognitionException {
		StogroupOptionListContext _localctx = new StogroupOptionListContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_stogroupOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2887);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,311,_ctx) ) {
			case 1:
				{
				{
				setState(2825);
				match(ADD);
				setState(2826);
				match(VOLUMES);
				setState(2827);
				match(LPAREN);
				setState(2828);
				volumeID();
				setState(2833);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2829);
					match(COMMA);
					setState(2830);
					volumeID();
					}
					}
					setState(2835);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2836);
				match(RPAREN);
				}
				}
				break;
			case 2:
				{
				{
				setState(2838);
				match(ADD);
				setState(2839);
				match(VOLUMES);
				setState(2840);
				match(LPAREN);
				setState(2841);
				match(NONNUMERICLITERAL);
				setState(2846);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2842);
					match(COMMA);
					setState(2843);
					match(NONNUMERICLITERAL);
					}
					}
					setState(2848);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2849);
				match(RPAREN);
				}
				}
				break;
			case 3:
				{
				{
				setState(2850);
				match(REMOVE);
				setState(2851);
				match(VOLUMES);
				setState(2852);
				match(LPAREN);
				setState(2853);
				volumeID();
				setState(2858);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2854);
					match(COMMA);
					setState(2855);
					volumeID();
					}
					}
					setState(2860);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2861);
				match(RPAREN);
				}
				}
				break;
			case 4:
				{
				{
				setState(2863);
				match(REMOVE);
				setState(2864);
				match(VOLUMES);
				setState(2865);
				match(LPAREN);
				setState(2866);
				match(NONNUMERICLITERAL);
				setState(2871);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2867);
					match(COMMA);
					setState(2868);
					match(NONNUMERICLITERAL);
					}
					}
					setState(2873);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2874);
				match(RPAREN);
				}
				}
				break;
			case 5:
				{
				{
				setState(2875);
				match(NO);
				setState(2876);
				match(KEY);
				setState(2877);
				match(LABEL);
				}
				}
				break;
			case 6:
				{
				{
				setState(2878);
				match(KEY);
				setState(2879);
				match(LABEL);
				setState(2880);
				keyLabelName();
				}
				}
				break;
			case 7:
				{
				{
				setState(2881);
				match(DATACLAS);
				setState(2882);
				dcName();
				}
				}
				break;
			case 8:
				{
				{
				setState(2883);
				match(MGMTCLAS);
				setState(2884);
				mcName();
				}
				}
				break;
			case 9:
				{
				{
				setState(2885);
				match(STORCLAS);
				setState(2886);
				scName();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableOptionListContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(DB2zSQLParser.ADD, 0); }
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public ColumnAlterationContext columnAlteration() {
			return getRuleContext(ColumnAlterationContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(DB2zSQLParser.RENAME, 0); }
		public TerminalNode COLUMN() { return getToken(DB2zSQLParser.COLUMN, 0); }
		public SourceColumnNameContext sourceColumnName() {
			return getRuleContext(SourceColumnNameContext.class,0);
		}
		public TerminalNode TO() { return getToken(DB2zSQLParser.TO, 0); }
		public TargetColumnNameContext targetColumnName() {
			return getRuleContext(TargetColumnNameContext.class,0);
		}
		public List<TerminalNode> DROP() { return getTokens(DB2zSQLParser.DROP); }
		public TerminalNode DROP(int i) {
			return getToken(DB2zSQLParser.DROP, i);
		}
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TerminalNode RESTRICT() { return getToken(DB2zSQLParser.RESTRICT, 0); }
		public TerminalNode PERIOD() { return getToken(DB2zSQLParser.PERIOD, 0); }
		public PeriodDefinitionContext periodDefinition() {
			return getRuleContext(PeriodDefinitionContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(DB2zSQLParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public PartitioningClauseContext partitioningClause() {
			return getRuleContext(PartitioningClauseContext.class,0);
		}
		public PartitionClauseContext partitionClause() {
			return getRuleContext(PartitionClauseContext.class,0);
		}
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode ROTATE() { return getToken(DB2zSQLParser.ROTATE, 0); }
		public TerminalNode LAST() { return getToken(DB2zSQLParser.LAST, 0); }
		public RotatePartitionClauseContext rotatePartitionClause() {
			return getRuleContext(RotatePartitionClauseContext.class,0);
		}
		public TerminalNode ORGANIZATION() { return getToken(DB2zSQLParser.ORGANIZATION, 0); }
		public AlterHashOrganizationContext alterHashOrganization() {
			return getRuleContext(AlterHashOrganizationContext.class,0);
		}
		public TerminalNode VERSIONING() { return getToken(DB2zSQLParser.VERSIONING, 0); }
		public TerminalNode USE() { return getToken(DB2zSQLParser.USE, 0); }
		public TerminalNode HISTORY() { return getToken(DB2zSQLParser.HISTORY, 0); }
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public HistoryTableNameContext historyTableName() {
			return getRuleContext(HistoryTableNameContext.class,0);
		}
		public MaterializedQueryDefinitionContext materializedQueryDefinition() {
			return getRuleContext(MaterializedQueryDefinitionContext.class,0);
		}
		public TerminalNode QUERY() { return getToken(DB2zSQLParser.QUERY, 0); }
		public MaterializedQueryAlterationContext materializedQueryAlteration() {
			return getRuleContext(MaterializedQueryAlterationContext.class,0);
		}
		public TerminalNode DATA() { return getToken(DB2zSQLParser.DATA, 0); }
		public TerminalNode CAPTURE() { return getToken(DB2zSQLParser.CAPTURE, 0); }
		public TerminalNode VOLATILE() { return getToken(DB2zSQLParser.VOLATILE, 0); }
		public TerminalNode CLONE() { return getToken(DB2zSQLParser.CLONE, 0); }
		public CloneTableNameContext cloneTableName() {
			return getRuleContext(CloneTableNameContext.class,0);
		}
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public TerminalNode ROW() { return getToken(DB2zSQLParser.ROW, 0); }
		public TerminalNode ACCESS() { return getToken(DB2zSQLParser.ACCESS, 0); }
		public TerminalNode CONTROL() { return getToken(DB2zSQLParser.CONTROL, 0); }
		public TerminalNode APPEND() { return getToken(DB2zSQLParser.APPEND, 0); }
		public TerminalNode AUDIT() { return getToken(DB2zSQLParser.AUDIT, 0); }
		public TerminalNode VALIDPROC() { return getToken(DB2zSQLParser.VALIDPROC, 0); }
		public TerminalNode ENABLE() { return getToken(DB2zSQLParser.ENABLE, 0); }
		public TerminalNode ARCHIVE() { return getToken(DB2zSQLParser.ARCHIVE, 0); }
		public ArchiveTableNameContext archiveTableName() {
			return getRuleContext(ArchiveTableNameContext.class,0);
		}
		public TerminalNode DISABLE() { return getToken(DB2zSQLParser.DISABLE, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode KEY() { return getToken(DB2zSQLParser.KEY, 0); }
		public TerminalNode LABEL() { return getToken(DB2zSQLParser.LABEL, 0); }
		public KeyLabelNameContext keyLabelName() {
			return getRuleContext(KeyLabelNameContext.class,0);
		}
		public TerminalNode FIRST() { return getToken(DB2zSQLParser.FIRST, 0); }
		public TerminalNode NONE() { return getToken(DB2zSQLParser.NONE, 0); }
		public TerminalNode CHANGES() { return getToken(DB2zSQLParser.CHANGES, 0); }
		public TerminalNode ACTIVATE() { return getToken(DB2zSQLParser.ACTIVATE, 0); }
		public TerminalNode DEACTIVATE() { return getToken(DB2zSQLParser.DEACTIVATE, 0); }
		public TerminalNode YES() { return getToken(DB2zSQLParser.YES, 0); }
		public TerminalNode ALL() { return getToken(DB2zSQLParser.ALL, 0); }
		public UniqueConstraintContext uniqueConstraint() {
			return getRuleContext(UniqueConstraintContext.class,0);
		}
		public ReferentialConstraintContext referentialConstraint() {
			return getRuleContext(ReferentialConstraintContext.class,0);
		}
		public CheckConstraintContext checkConstraint() {
			return getRuleContext(CheckConstraintContext.class,0);
		}
		public ProgramNameContext programName() {
			return getRuleContext(ProgramNameContext.class,0);
		}
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode SYSTEM() { return getToken(DB2zSQLParser.SYSTEM, 0); }
		public ExtraRowOptionContext extraRowOption() {
			return getRuleContext(ExtraRowOptionContext.class,0);
		}
		public TerminalNode MATERIALIZED() { return getToken(DB2zSQLParser.MATERIALIZED, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TerminalNode CARDINALITY() { return getToken(DB2zSQLParser.CARDINALITY, 0); }
		public TerminalNode PRIMARY() { return getToken(DB2zSQLParser.PRIMARY, 0); }
		public ConstraintNameContext constraintName() {
			return getRuleContext(ConstraintNameContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(DB2zSQLParser.UNIQUE, 0); }
		public TerminalNode CHECK() { return getToken(DB2zSQLParser.CHECK, 0); }
		public TerminalNode CONSTRAINT() { return getToken(DB2zSQLParser.CONSTRAINT, 0); }
		public TerminalNode FOREIGN() { return getToken(DB2zSQLParser.FOREIGN, 0); }
		public TableOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTableOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTableOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTableOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableOptionListContext tableOptionList() throws RecognitionException {
		TableOptionListContext _localctx = new TableOptionListContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_tableOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3044);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,328,_ctx) ) {
			case 1:
				{
				{
				setState(2889);
				match(ADD);
				setState(2891);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,312,_ctx) ) {
				case 1:
					{
					setState(2890);
					match(COLUMN);
					}
					break;
				}
				setState(2893);
				columnDefinition();
				}
				}
				break;
			case 2:
				{
				{
				setState(2894);
				match(ALTER);
				setState(2896);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,313,_ctx) ) {
				case 1:
					{
					setState(2895);
					match(COLUMN);
					}
					break;
				}
				setState(2898);
				columnAlteration();
				}
				}
				break;
			case 3:
				{
				{
				setState(2899);
				match(RENAME);
				setState(2900);
				match(COLUMN);
				setState(2901);
				sourceColumnName();
				setState(2902);
				match(TO);
				setState(2903);
				targetColumnName();
				}
				}
				break;
			case 4:
				{
				{
				setState(2905);
				match(DROP);
				setState(2907);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,314,_ctx) ) {
				case 1:
					{
					setState(2906);
					match(COLUMN);
					}
					break;
				}
				setState(2909);
				columnName();
				setState(2910);
				match(RESTRICT);
				}
				}
				break;
			case 5:
				{
				{
				setState(2912);
				match(ADD);
				setState(2913);
				match(PERIOD);
				setState(2915);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(2914);
					match(FOR);
					}
				}

				setState(2917);
				periodDefinition();
				}
				}
				break;
			case 6:
				{
				{
				setState(2918);
				match(ADD);
				setState(2922);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,316,_ctx) ) {
				case 1:
					{
					setState(2919);
					uniqueConstraint();
					}
					break;
				case 2:
					{
					setState(2920);
					referentialConstraint();
					}
					break;
				case 3:
					{
					setState(2921);
					checkConstraint();
					}
					break;
				}
				}
				}
				break;
			case 7:
				{
				{
				setState(2924);
				match(DROP);
				setState(2935);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PRIMARY:
					{
					{
					setState(2925);
					match(PRIMARY);
					setState(2926);
					match(KEY);
					}
					}
					break;
				case CHECK:
				case CONSTRAINT:
				case UNIQUE:
				case FOREIGN:
					{
					{
					setState(2932);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case UNIQUE:
						{
						setState(2927);
						match(UNIQUE);
						}
						break;
					case FOREIGN:
						{
						{
						setState(2928);
						match(FOREIGN);
						setState(2929);
						match(KEY);
						}
						}
						break;
					case CHECK:
						{
						setState(2930);
						match(CHECK);
						}
						break;
					case CONSTRAINT:
						{
						setState(2931);
						match(CONSTRAINT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2934);
					constraintName();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case 8:
				{
				{
				setState(2937);
				match(ADD);
				setState(2938);
				match(PARTITION);
				setState(2939);
				match(BY);
				setState(2940);
				partitioningClause();
				}
				}
				break;
			case 9:
				{
				{
				setState(2941);
				match(ADD);
				setState(2942);
				match(PARTITION);
				setState(2943);
				partitionClause();
				}
				}
				break;
			case 10:
				{
				{
				setState(2944);
				match(ALTER);
				setState(2945);
				match(PARTITION);
				setState(2946);
				match(INTEGERLITERAL);
				setState(2947);
				partitionClause();
				}
				}
				break;
			case 11:
				{
				{
				setState(2948);
				match(ROTATE);
				setState(2949);
				match(PARTITION);
				setState(2950);
				_la = _input.LA(1);
				if ( !(_la==INTEGERLITERAL || _la==FIRST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2951);
				match(TO);
				setState(2952);
				match(LAST);
				setState(2953);
				rotatePartitionClause();
				}
				}
				break;
			case 12:
				{
				{
				setState(2954);
				match(DROP);
				setState(2955);
				match(ORGANIZATION);
				}
				}
				break;
			case 13:
				{
				{
				setState(2956);
				alterHashOrganization();
				}
				}
				break;
			case 14:
				{
				{
				setState(2957);
				match(ADD);
				setState(2959);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SYSTEM) {
					{
					setState(2958);
					match(SYSTEM);
					}
				}

				setState(2961);
				match(VERSIONING);
				setState(2962);
				match(USE);
				setState(2963);
				match(HISTORY);
				setState(2964);
				match(TABLE);
				setState(2965);
				historyTableName();
				setState(2967);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(2966);
					extraRowOption();
					}
				}

				}
				}
				break;
			case 15:
				{
				{
				setState(2969);
				match(DROP);
				setState(2971);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SYSTEM) {
					{
					setState(2970);
					match(SYSTEM);
					}
				}

				setState(2973);
				match(VERSIONING);
				}
				}
				break;
			case 16:
				{
				{
				setState(2974);
				match(ADD);
				setState(2978);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case MATERIALIZED:
					{
					{
					setState(2975);
					match(MATERIALIZED);
					setState(2976);
					match(QUERY);
					}
					}
					break;
				case QUERY:
					{
					setState(2977);
					match(QUERY);
					}
					break;
				case LPAREN:
					break;
				default:
					break;
				}
				setState(2980);
				materializedQueryDefinition();
				}
				}
				break;
			case 17:
				{
				{
				setState(2981);
				match(ALTER);
				setState(2983);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MATERIALIZED) {
					{
					setState(2982);
					match(MATERIALIZED);
					}
				}

				setState(2985);
				match(QUERY);
				setState(2986);
				materializedQueryAlteration();
				}
				}
				break;
			case 18:
				{
				{
				setState(2987);
				match(DROP);
				setState(2989);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MATERIALIZED) {
					{
					setState(2988);
					match(MATERIALIZED);
					}
				}

				setState(2991);
				match(QUERY);
				}
				}
				break;
			case 19:
				{
				{
				setState(2992);
				match(DATA);
				setState(2993);
				match(CAPTURE);
				setState(2994);
				_la = _input.LA(1);
				if ( !(_la==NONE || _la==CHANGES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case 20:
				{
				{
				setState(2996);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2995);
					match(NOT);
					}
				}

				setState(2998);
				match(VOLATILE);
				setState(3000);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CARDINALITY) {
					{
					setState(2999);
					match(CARDINALITY);
					}
				}

				}
				}
				break;
			case 21:
				{
				{
				setState(3002);
				match(ADD);
				setState(3003);
				match(CLONE);
				setState(3004);
				cloneTableName();
				}
				}
				break;
			case 22:
				{
				{
				setState(3005);
				match(DROP);
				setState(3006);
				match(CLONE);
				}
				}
				break;
			case 23:
				{
				{
				setState(3007);
				match(ADD);
				setState(3008);
				match(RESTRICT);
				setState(3009);
				match(ON);
				setState(3010);
				match(DROP);
				}
				}
				break;
			case 24:
				{
				{
				setState(3011);
				match(DROP);
				setState(3012);
				match(RESTRICT);
				setState(3013);
				match(ON);
				setState(3014);
				match(DROP);
				}
				}
				break;
			case 25:
				{
				{
				setState(3015);
				_la = _input.LA(1);
				if ( !(_la==ACTIVATE || _la==DEACTIVATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3016);
				match(ROW);
				setState(3017);
				match(ACCESS);
				setState(3018);
				match(CONTROL);
				}
				}
				break;
			case 26:
				{
				{
				setState(3019);
				_la = _input.LA(1);
				if ( !(_la==ACTIVATE || _la==DEACTIVATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3020);
				match(COLUMN);
				setState(3021);
				match(ACCESS);
				setState(3022);
				match(CONTROL);
				}
				}
				break;
			case 27:
				{
				{
				setState(3023);
				match(APPEND);
				setState(3024);
				_la = _input.LA(1);
				if ( !(_la==NO || _la==YES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case 28:
				{
				{
				setState(3025);
				match(AUDIT);
				setState(3026);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==NONE || _la==CHANGES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case 29:
				{
				{
				setState(3027);
				match(VALIDPROC);
				setState(3030);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,327,_ctx) ) {
				case 1:
					{
					setState(3028);
					programName();
					}
					break;
				case 2:
					{
					setState(3029);
					match(NULL);
					}
					break;
				}
				}
				}
				break;
			case 30:
				{
				{
				setState(3032);
				match(ENABLE);
				setState(3033);
				match(ARCHIVE);
				setState(3034);
				match(USE);
				setState(3035);
				archiveTableName();
				}
				}
				break;
			case 31:
				{
				{
				setState(3036);
				match(DISABLE);
				setState(3037);
				match(ARCHIVE);
				}
				}
				break;
			case 32:
				{
				{
				setState(3038);
				match(NO);
				setState(3039);
				match(KEY);
				setState(3040);
				match(LABEL);
				}
				}
				break;
			case 33:
				{
				{
				setState(3041);
				match(KEY);
				setState(3042);
				match(LABEL);
				setState(3043);
				keyLabelName();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablespaceOptionListContext extends ParserRuleContext {
		public TerminalNode BUFFERPOOL() { return getToken(DB2zSQLParser.BUFFERPOOL, 0); }
		public BpNameContext bpName() {
			return getRuleContext(BpNameContext.class,0);
		}
		public TerminalNode CCSID() { return getToken(DB2zSQLParser.CCSID, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode CLOSE() { return getToken(DB2zSQLParser.CLOSE, 0); }
		public TerminalNode YES() { return getToken(DB2zSQLParser.YES, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode COMPRESS() { return getToken(DB2zSQLParser.COMPRESS, 0); }
		public TerminalNode DROP() { return getToken(DB2zSQLParser.DROP, 0); }
		public TerminalNode PENDING() { return getToken(DB2zSQLParser.PENDING, 0); }
		public TerminalNode CHANGES() { return getToken(DB2zSQLParser.CHANGES, 0); }
		public TerminalNode DSSIZE() { return getToken(DB2zSQLParser.DSSIZE, 0); }
		public TerminalNode SQLIDENTIFIER() { return getToken(DB2zSQLParser.SQLIDENTIFIER, 0); }
		public TerminalNode INSERT() { return getToken(DB2zSQLParser.INSERT, 0); }
		public TerminalNode ALGORITHM() { return getToken(DB2zSQLParser.ALGORITHM, 0); }
		public TerminalNode LOCKMAX() { return getToken(DB2zSQLParser.LOCKMAX, 0); }
		public TerminalNode LOCKSIZE() { return getToken(DB2zSQLParser.LOCKSIZE, 0); }
		public TerminalNode LOGGED() { return getToken(DB2zSQLParser.LOGGED, 0); }
		public TerminalNode MAXROWS() { return getToken(DB2zSQLParser.MAXROWS, 0); }
		public TerminalNode MAXPARTITIONS() { return getToken(DB2zSQLParser.MAXPARTITIONS, 0); }
		public TerminalNode MEMBER() { return getToken(DB2zSQLParser.MEMBER, 0); }
		public TerminalNode CLUSTER() { return getToken(DB2zSQLParser.CLUSTER, 0); }
		public TerminalNode SEGSIZE() { return getToken(DB2zSQLParser.SEGSIZE, 0); }
		public TerminalNode TRACKMOD() { return getToken(DB2zSQLParser.TRACKMOD, 0); }
		public UsingBlockContext usingBlock() {
			return getRuleContext(UsingBlockContext.class,0);
		}
		public FreeBlockContext freeBlock() {
			return getRuleContext(FreeBlockContext.class,0);
		}
		public GbpcacheBlockContext gbpcacheBlock() {
			return getRuleContext(GbpcacheBlockContext.class,0);
		}
		public TerminalNode PAGENUM() { return getToken(DB2zSQLParser.PAGENUM, 0); }
		public TerminalNode RELATIVE() { return getToken(DB2zSQLParser.RELATIVE, 0); }
		public TerminalNode SYSTEM() { return getToken(DB2zSQLParser.SYSTEM, 0); }
		public TerminalNode ANY() { return getToken(DB2zSQLParser.ANY, 0); }
		public TerminalNode TABLESPACE() { return getToken(DB2zSQLParser.TABLESPACE, 0); }
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public TerminalNode PAGE() { return getToken(DB2zSQLParser.PAGE, 0); }
		public TerminalNode ROW() { return getToken(DB2zSQLParser.ROW, 0); }
		public TerminalNode LOB() { return getToken(DB2zSQLParser.LOB, 0); }
		public TerminalNode LOG() { return getToken(DB2zSQLParser.LOG, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TerminalNode FIXEDLENGTH() { return getToken(DB2zSQLParser.FIXEDLENGTH, 0); }
		public TerminalNode HUFFMAN() { return getToken(DB2zSQLParser.HUFFMAN, 0); }
		public TablespaceOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablespaceOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTablespaceOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTablespaceOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTablespaceOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablespaceOptionListContext tablespaceOptionList() throws RecognitionException {
		TablespaceOptionListContext _localctx = new TablespaceOptionListContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_tablespaceOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3099);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,332,_ctx) ) {
			case 1:
				{
				{
				setState(3046);
				match(BUFFERPOOL);
				setState(3047);
				bpName();
				}
				}
				break;
			case 2:
				{
				{
				setState(3048);
				match(CCSID);
				setState(3049);
				match(INTEGERLITERAL);
				}
				}
				break;
			case 3:
				{
				{
				setState(3050);
				match(CLOSE);
				setState(3051);
				match(YES);
				}
				}
				break;
			case 4:
				{
				{
				setState(3052);
				match(CLOSE);
				setState(3053);
				match(NO);
				}
				}
				break;
			case 5:
				{
				{
				setState(3054);
				match(COMPRESS);
				setState(3055);
				match(YES);
				setState(3057);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FIXEDLENGTH || _la==HUFFMAN) {
					{
					setState(3056);
					_la = _input.LA(1);
					if ( !(_la==FIXEDLENGTH || _la==HUFFMAN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				}
				break;
			case 6:
				{
				{
				setState(3059);
				match(COMPRESS);
				setState(3060);
				match(NO);
				}
				}
				break;
			case 7:
				{
				{
				setState(3061);
				match(DROP);
				setState(3062);
				match(PENDING);
				setState(3063);
				match(CHANGES);
				}
				}
				break;
			case 8:
				{
				{
				setState(3064);
				match(DSSIZE);
				setState(3065);
				match(SQLIDENTIFIER);
				}
				}
				break;
			case 9:
				{
				{
				setState(3066);
				match(INSERT);
				setState(3067);
				match(ALGORITHM);
				setState(3068);
				match(INTEGERLITERAL);
				}
				}
				break;
			case 10:
				{
				{
				setState(3069);
				match(LOCKMAX);
				setState(3070);
				_la = _input.LA(1);
				if ( !(_la==INTEGERLITERAL || _la==SYSTEM) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case 11:
				{
				{
				setState(3071);
				match(LOCKSIZE);
				setState(3072);
				_la = _input.LA(1);
				if ( !(_la==ANY || ((((_la - 255)) & ~0x3f) == 0 && ((1L << (_la - 255)) & ((1L << (ROW - 255)) | (1L << (TABLE - 255)) | (1L << (TABLESPACE - 255)))) != 0) || _la==LOB || _la==PAGE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case 12:
				{
				{
				setState(3074);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(3073);
					match(NOT);
					}
				}

				setState(3076);
				match(LOGGED);
				}
				}
				break;
			case 13:
				{
				setState(3081);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,331,_ctx) ) {
				case 1:
					{
					{
					setState(3077);
					match(LOG);
					setState(3078);
					match(YES);
					}
					}
					break;
				case 2:
					{
					{
					setState(3079);
					match(LOG);
					setState(3080);
					match(NO);
					}
					}
					break;
				}
				}
				break;
			case 14:
				{
				{
				setState(3083);
				match(MAXROWS);
				setState(3084);
				match(INTEGERLITERAL);
				}
				}
				break;
			case 15:
				{
				{
				setState(3085);
				match(MAXPARTITIONS);
				setState(3086);
				match(INTEGERLITERAL);
				}
				}
				break;
			case 16:
				{
				{
				setState(3087);
				match(MEMBER);
				setState(3088);
				match(CLUSTER);
				setState(3089);
				_la = _input.LA(1);
				if ( !(_la==NO || _la==YES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case 17:
				{
				{
				setState(3090);
				match(SEGSIZE);
				setState(3091);
				match(INTEGERLITERAL);
				}
				}
				break;
			case 18:
				{
				{
				setState(3092);
				match(TRACKMOD);
				setState(3093);
				_la = _input.LA(1);
				if ( !(_la==NO || _la==YES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case 19:
				{
				{
				setState(3094);
				usingBlock();
				}
				}
				break;
			case 20:
				{
				{
				setState(3095);
				freeBlock();
				}
				}
				break;
			case 21:
				{
				{
				setState(3096);
				gbpcacheBlock();
				}
				}
				break;
			case 22:
				{
				{
				setState(3097);
				match(PAGENUM);
				setState(3098);
				match(RELATIVE);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TrustedContextOptionListContext extends ParserRuleContext {
		public UserClauseContext userClause() {
			return getRuleContext(UserClauseContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode SYSTEM() { return getToken(DB2zSQLParser.SYSTEM, 0); }
		public TerminalNode AUTHID() { return getToken(DB2zSQLParser.AUTHID, 0); }
		public AuthorizationNameContext authorizationName() {
			return getRuleContext(AuthorizationNameContext.class,0);
		}
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode DEFAULT() { return getToken(DB2zSQLParser.DEFAULT, 0); }
		public List<TerminalNode> ROLE() { return getTokens(DB2zSQLParser.ROLE); }
		public TerminalNode ROLE(int i) {
			return getToken(DB2zSQLParser.ROLE, i);
		}
		public RoleNameContext roleName() {
			return getRuleContext(RoleNameContext.class,0);
		}
		public TerminalNode ENABLE() { return getToken(DB2zSQLParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(DB2zSQLParser.DISABLE, 0); }
		public TerminalNode SECURITY() { return getToken(DB2zSQLParser.SECURITY, 0); }
		public TerminalNode LABEL() { return getToken(DB2zSQLParser.LABEL, 0); }
		public SeclabelNameContext seclabelName() {
			return getRuleContext(SeclabelNameContext.class,0);
		}
		public TerminalNode ATTRIBUTES() { return getToken(DB2zSQLParser.ATTRIBUTES, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<AlterAttributesOptionsContext> alterAttributesOptions() {
			return getRuleContexts(AlterAttributesOptionsContext.class);
		}
		public AlterAttributesOptionsContext alterAttributesOptions(int i) {
			return getRuleContext(AlterAttributesOptionsContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode ADD() { return getToken(DB2zSQLParser.ADD, 0); }
		public List<AddAttributesOptionsContext> addAttributesOptions() {
			return getRuleContexts(AddAttributesOptionsContext.class);
		}
		public AddAttributesOptionsContext addAttributesOptions(int i) {
			return getRuleContext(AddAttributesOptionsContext.class,i);
		}
		public TerminalNode DROP() { return getToken(DB2zSQLParser.DROP, 0); }
		public List<DropAttributesOptionsContext> dropAttributesOptions() {
			return getRuleContexts(DropAttributesOptionsContext.class);
		}
		public DropAttributesOptionsContext dropAttributesOptions(int i) {
			return getRuleContext(DropAttributesOptionsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public TerminalNode WITHOUT() { return getToken(DB2zSQLParser.WITHOUT, 0); }
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode OBJECT() { return getToken(DB2zSQLParser.OBJECT, 0); }
		public TerminalNode OWNER() { return getToken(DB2zSQLParser.OWNER, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode AND() { return getToken(DB2zSQLParser.AND, 0); }
		public TerminalNode QUALIFIER() { return getToken(DB2zSQLParser.QUALIFIER, 0); }
		public TrustedContextOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trustedContextOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTrustedContextOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTrustedContextOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTrustedContextOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TrustedContextOptionListContext trustedContextOptionList() throws RecognitionException {
		TrustedContextOptionListContext _localctx = new TrustedContextOptionListContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_trustedContextOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3189);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,341,_ctx) ) {
			case 1:
				{
				{
				setState(3101);
				match(ALTER);
				setState(3102);
				match(SYSTEM);
				setState(3103);
				match(AUTHID);
				setState(3104);
				authorizationName();
				}
				}
				break;
			case 2:
				{
				{
				setState(3105);
				match(ALTER);
				setState(3106);
				match(NO);
				setState(3107);
				match(DEFAULT);
				setState(3108);
				match(ROLE);
				}
				}
				break;
			case 3:
				{
				{
				setState(3109);
				match(ALTER);
				setState(3110);
				match(DEFAULT);
				setState(3111);
				match(ROLE);
				setState(3112);
				roleName();
				setState(3125);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case WITHOUT:
					{
					{
					setState(3113);
					match(WITHOUT);
					setState(3114);
					match(ROLE);
					setState(3115);
					match(AS);
					setState(3116);
					match(OBJECT);
					setState(3117);
					match(OWNER);
					}
					}
					break;
				case WITH:
					{
					{
					setState(3118);
					match(WITH);
					setState(3119);
					match(ROLE);
					setState(3120);
					match(AS);
					setState(3121);
					match(OBJECT);
					setState(3122);
					match(OWNER);
					setState(3123);
					match(AND);
					setState(3124);
					match(QUALIFIER);
					}
					}
					break;
				case EOF:
				case SEMICOLON:
				case ADD:
				case ALTER:
				case DEFAULT:
				case DISABLE:
				case DROP:
				case END_EXEC:
				case NO:
				case ENABLE:
				case REPLACE:
					break;
				default:
					break;
				}
				}
				}
				break;
			case 4:
				{
				{
				setState(3128);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALTER) {
					{
					setState(3127);
					match(ALTER);
					}
				}

				setState(3130);
				match(ENABLE);
				}
				}
				break;
			case 5:
				{
				{
				setState(3132);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALTER) {
					{
					setState(3131);
					match(ALTER);
					}
				}

				setState(3134);
				match(DISABLE);
				}
				}
				break;
			case 6:
				{
				{
				setState(3136);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALTER) {
					{
					setState(3135);
					match(ALTER);
					}
				}

				setState(3138);
				match(NO);
				setState(3139);
				match(DEFAULT);
				setState(3140);
				match(SECURITY);
				setState(3141);
				match(LABEL);
				}
				}
				break;
			case 7:
				{
				{
				setState(3143);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALTER) {
					{
					setState(3142);
					match(ALTER);
					}
				}

				setState(3145);
				match(DEFAULT);
				setState(3146);
				match(SECURITY);
				setState(3147);
				match(LABEL);
				setState(3148);
				seclabelName();
				}
				}
				break;
			case 8:
				{
				{
				setState(3149);
				match(ALTER);
				setState(3150);
				match(ATTRIBUTES);
				setState(3151);
				match(LPAREN);
				setState(3152);
				alterAttributesOptions();
				setState(3157);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3153);
					match(COMMA);
					setState(3154);
					alterAttributesOptions();
					}
					}
					setState(3159);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3160);
				match(RPAREN);
				}
				}
				break;
			case 9:
				{
				{
				setState(3162);
				match(ADD);
				setState(3163);
				match(ATTRIBUTES);
				setState(3164);
				match(LPAREN);
				setState(3165);
				addAttributesOptions();
				setState(3170);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3166);
					match(COMMA);
					setState(3167);
					addAttributesOptions();
					}
					}
					setState(3172);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3173);
				match(RPAREN);
				}
				}
				break;
			case 10:
				{
				{
				setState(3175);
				match(DROP);
				setState(3176);
				match(ATTRIBUTES);
				setState(3177);
				match(LPAREN);
				setState(3178);
				dropAttributesOptions();
				setState(3183);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3179);
					match(COMMA);
					setState(3180);
					dropAttributesOptions();
					}
					}
					setState(3185);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3186);
				match(RPAREN);
				}
				}
				break;
			case 11:
				{
				setState(3188);
				userClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DatabaseOptionListContext extends ParserRuleContext {
		public TerminalNode BUFFERPOOL() { return getToken(DB2zSQLParser.BUFFERPOOL, 0); }
		public BpNameContext bpName() {
			return getRuleContext(BpNameContext.class,0);
		}
		public TerminalNode INDEXBP() { return getToken(DB2zSQLParser.INDEXBP, 0); }
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode WORKFILE() { return getToken(DB2zSQLParser.WORKFILE, 0); }
		public TerminalNode STOGROUP() { return getToken(DB2zSQLParser.STOGROUP, 0); }
		public TerminalNode CCSID() { return getToken(DB2zSQLParser.CCSID, 0); }
		public TerminalNode ASCII() { return getToken(DB2zSQLParser.ASCII, 0); }
		public TerminalNode EBCDIC() { return getToken(DB2zSQLParser.EBCDIC, 0); }
		public TerminalNode UNICODE() { return getToken(DB2zSQLParser.UNICODE, 0); }
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public MemberNameContext memberName() {
			return getRuleContext(MemberNameContext.class,0);
		}
		public TerminalNode SYSDEFLT() { return getToken(DB2zSQLParser.SYSDEFLT, 0); }
		public StogroupNameContext stogroupName() {
			return getRuleContext(StogroupNameContext.class,0);
		}
		public DatabaseOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_databaseOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDatabaseOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDatabaseOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDatabaseOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DatabaseOptionListContext databaseOptionList() throws RecognitionException {
		DatabaseOptionListContext _localctx = new DatabaseOptionListContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_databaseOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3208);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BUFFERPOOL:
				{
				{
				setState(3191);
				match(BUFFERPOOL);
				setState(3192);
				bpName();
				}
				}
				break;
			case INDEXBP:
				{
				{
				setState(3193);
				match(INDEXBP);
				setState(3194);
				bpName();
				}
				}
				break;
			case AS:
				{
				{
				setState(3195);
				match(AS);
				setState(3196);
				match(WORKFILE);
				setState(3199);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(3197);
					match(FOR);
					setState(3198);
					memberName();
					}
				}

				}
				}
				break;
			case STOGROUP:
				{
				{
				setState(3201);
				match(STOGROUP);
				setState(3204);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,343,_ctx) ) {
				case 1:
					{
					setState(3202);
					match(SYSDEFLT);
					}
					break;
				case 2:
					{
					setState(3203);
					stogroupName();
					}
					break;
				}
				}
				}
				break;
			case CCSID:
				{
				{
				setState(3206);
				match(CCSID);
				setState(3207);
				_la = _input.LA(1);
				if ( !(_la==EBCDIC || _la==ASCII || _la==UNICODE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterAttributesOptionsContext extends ParserRuleContext {
		public TerminalNode ADDRESS() { return getToken(DB2zSQLParser.ADDRESS, 0); }
		public AddressValueContext addressValue() {
			return getRuleContext(AddressValueContext.class,0);
		}
		public TerminalNode ENCRYPTION() { return getToken(DB2zSQLParser.ENCRYPTION, 0); }
		public EncryptionValueContext encryptionValue() {
			return getRuleContext(EncryptionValueContext.class,0);
		}
		public TerminalNode SERVAUTH() { return getToken(DB2zSQLParser.SERVAUTH, 0); }
		public ServauthValueContext servauthValue() {
			return getRuleContext(ServauthValueContext.class,0);
		}
		public TerminalNode JOBNAME() { return getToken(DB2zSQLParser.JOBNAME, 0); }
		public JobnameValueContext jobnameValue() {
			return getRuleContext(JobnameValueContext.class,0);
		}
		public AlterAttributesOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterAttributesOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterAttributesOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterAttributesOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterAttributesOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterAttributesOptionsContext alterAttributesOptions() throws RecognitionException {
		AlterAttributesOptionsContext _localctx = new AlterAttributesOptionsContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_alterAttributesOptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3218);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADDRESS:
				{
				{
				setState(3210);
				match(ADDRESS);
				setState(3211);
				addressValue();
				}
				}
				break;
			case ENCRYPTION:
				{
				{
				setState(3212);
				match(ENCRYPTION);
				setState(3213);
				encryptionValue();
				}
				}
				break;
			case SERVAUTH:
				{
				{
				setState(3214);
				match(SERVAUTH);
				setState(3215);
				servauthValue();
				}
				}
				break;
			case JOBNAME:
				{
				{
				setState(3216);
				match(JOBNAME);
				setState(3217);
				jobnameValue();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AddAttributesOptionsContext extends ParserRuleContext {
		public TerminalNode ADDRESS() { return getToken(DB2zSQLParser.ADDRESS, 0); }
		public AddressValueContext addressValue() {
			return getRuleContext(AddressValueContext.class,0);
		}
		public TerminalNode SERVAUTH() { return getToken(DB2zSQLParser.SERVAUTH, 0); }
		public ServauthValueContext servauthValue() {
			return getRuleContext(ServauthValueContext.class,0);
		}
		public TerminalNode JOBNAME() { return getToken(DB2zSQLParser.JOBNAME, 0); }
		public JobnameValueContext jobnameValue() {
			return getRuleContext(JobnameValueContext.class,0);
		}
		public AddAttributesOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_addAttributesOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAddAttributesOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAddAttributesOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAddAttributesOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AddAttributesOptionsContext addAttributesOptions() throws RecognitionException {
		AddAttributesOptionsContext _localctx = new AddAttributesOptionsContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_addAttributesOptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3226);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADDRESS:
				{
				{
				setState(3220);
				match(ADDRESS);
				setState(3221);
				addressValue();
				}
				}
				break;
			case SERVAUTH:
				{
				{
				setState(3222);
				match(SERVAUTH);
				setState(3223);
				servauthValue();
				}
				}
				break;
			case JOBNAME:
				{
				{
				setState(3224);
				match(JOBNAME);
				setState(3225);
				jobnameValue();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropAttributesOptionsContext extends ParserRuleContext {
		public TerminalNode ADDRESS() { return getToken(DB2zSQLParser.ADDRESS, 0); }
		public TerminalNode SERVAUTH() { return getToken(DB2zSQLParser.SERVAUTH, 0); }
		public TerminalNode JOBNAME() { return getToken(DB2zSQLParser.JOBNAME, 0); }
		public AddressValueContext addressValue() {
			return getRuleContext(AddressValueContext.class,0);
		}
		public ServauthValueContext servauthValue() {
			return getRuleContext(ServauthValueContext.class,0);
		}
		public JobnameValueContext jobnameValue() {
			return getRuleContext(JobnameValueContext.class,0);
		}
		public DropAttributesOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropAttributesOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDropAttributesOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDropAttributesOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDropAttributesOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropAttributesOptionsContext dropAttributesOptions() throws RecognitionException {
		DropAttributesOptionsContext _localctx = new DropAttributesOptionsContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_dropAttributesOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3240);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADDRESS:
				{
				{
				setState(3228);
				match(ADDRESS);
				setState(3230);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NONNUMERICLITERAL) {
					{
					setState(3229);
					addressValue();
					}
				}

				}
				}
				break;
			case SERVAUTH:
				{
				{
				setState(3232);
				match(SERVAUTH);
				setState(3234);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NONNUMERICLITERAL) {
					{
					setState(3233);
					servauthValue();
					}
				}

				}
				}
				break;
			case JOBNAME:
				{
				{
				setState(3236);
				match(JOBNAME);
				setState(3238);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NONNUMERICLITERAL) {
					{
					setState(3237);
					jobnameValue();
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserClauseContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(DB2zSQLParser.ADD, 0); }
		public TerminalNode USE() { return getToken(DB2zSQLParser.USE, 0); }
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public List<UserClauseAddOptionsContext> userClauseAddOptions() {
			return getRuleContexts(UserClauseAddOptionsContext.class);
		}
		public UserClauseAddOptionsContext userClauseAddOptions(int i) {
			return getRuleContext(UserClauseAddOptionsContext.class,i);
		}
		public TerminalNode REPLACE() { return getToken(DB2zSQLParser.REPLACE, 0); }
		public List<UserClauseReplaceOptionsContext> userClauseReplaceOptions() {
			return getRuleContexts(UserClauseReplaceOptionsContext.class);
		}
		public UserClauseReplaceOptionsContext userClauseReplaceOptions(int i) {
			return getRuleContext(UserClauseReplaceOptionsContext.class,i);
		}
		public TerminalNode DROP() { return getToken(DB2zSQLParser.DROP, 0); }
		public List<UserClauseDropOptionsContext> userClauseDropOptions() {
			return getRuleContexts(UserClauseDropOptionsContext.class);
		}
		public UserClauseDropOptionsContext userClauseDropOptions(int i) {
			return getRuleContext(UserClauseDropOptionsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public UserClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterUserClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitUserClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitUserClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserClauseContext userClause() throws RecognitionException {
		UserClauseContext _localctx = new UserClauseContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_userClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3275);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
				{
				{
				setState(3242);
				match(ADD);
				setState(3243);
				match(USE);
				setState(3244);
				match(FOR);
				setState(3245);
				userClauseAddOptions();
				setState(3250);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3246);
					match(COMMA);
					setState(3247);
					userClauseAddOptions();
					}
					}
					setState(3252);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case REPLACE:
				{
				{
				setState(3253);
				match(REPLACE);
				setState(3254);
				match(USE);
				setState(3255);
				match(FOR);
				setState(3256);
				userClauseReplaceOptions();
				setState(3261);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3257);
					match(COMMA);
					setState(3258);
					userClauseReplaceOptions();
					}
					}
					setState(3263);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case DROP:
				{
				{
				setState(3264);
				match(DROP);
				setState(3265);
				match(USE);
				setState(3266);
				match(FOR);
				setState(3267);
				userClauseDropOptions();
				setState(3272);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3268);
					match(COMMA);
					setState(3269);
					userClauseDropOptions();
					}
					}
					setState(3274);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserClauseAddOptionsContext extends ParserRuleContext {
		public AuthorizationNameContext authorizationName() {
			return getRuleContext(AuthorizationNameContext.class,0);
		}
		public TerminalNode EXTERNAL() { return getToken(DB2zSQLParser.EXTERNAL, 0); }
		public TerminalNode SECURITY() { return getToken(DB2zSQLParser.SECURITY, 0); }
		public TerminalNode PROFILE() { return getToken(DB2zSQLParser.PROFILE, 0); }
		public ProfileNameContext profileName() {
			return getRuleContext(ProfileNameContext.class,0);
		}
		public TerminalNode PUBLIC() { return getToken(DB2zSQLParser.PUBLIC, 0); }
		public TerminalNode AUTHENTICATION() { return getToken(DB2zSQLParser.AUTHENTICATION, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode WITHOUT() { return getToken(DB2zSQLParser.WITHOUT, 0); }
		public UseOptionsContext useOptions() {
			return getRuleContext(UseOptionsContext.class,0);
		}
		public UserClauseAddOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userClauseAddOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterUserClauseAddOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitUserClauseAddOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitUserClauseAddOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserClauseAddOptionsContext userClauseAddOptions() throws RecognitionException {
		UserClauseAddOptionsContext _localctx = new UserClauseAddOptionsContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_userClauseAddOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3291);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,357,_ctx) ) {
			case 1:
				{
				{
				setState(3277);
				authorizationName();
				setState(3279);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ROLE || _la==SECURITY || _la==WITH || _la==WITHOUT) {
					{
					setState(3278);
					useOptions();
					}
				}

				}
				}
				break;
			case 2:
				{
				{
				setState(3281);
				match(EXTERNAL);
				setState(3282);
				match(SECURITY);
				setState(3283);
				match(PROFILE);
				setState(3284);
				profileName();
				setState(3286);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ROLE || _la==SECURITY || _la==WITH || _la==WITHOUT) {
					{
					setState(3285);
					useOptions();
					}
				}

				}
				}
				break;
			case 3:
				{
				{
				setState(3288);
				match(PUBLIC);
				setState(3289);
				_la = _input.LA(1);
				if ( !(_la==WITH || _la==WITHOUT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3290);
				match(AUTHENTICATION);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserClauseReplaceOptionsContext extends ParserRuleContext {
		public UserClauseAddOptionsContext userClauseAddOptions() {
			return getRuleContext(UserClauseAddOptionsContext.class,0);
		}
		public UserClauseReplaceOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userClauseReplaceOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterUserClauseReplaceOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitUserClauseReplaceOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitUserClauseReplaceOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserClauseReplaceOptionsContext userClauseReplaceOptions() throws RecognitionException {
		UserClauseReplaceOptionsContext _localctx = new UserClauseReplaceOptionsContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_userClauseReplaceOptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3293);
			userClauseAddOptions();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserClauseDropOptionsContext extends ParserRuleContext {
		public AuthorizationNameContext authorizationName() {
			return getRuleContext(AuthorizationNameContext.class,0);
		}
		public TerminalNode EXTERNAL() { return getToken(DB2zSQLParser.EXTERNAL, 0); }
		public TerminalNode SECURITY() { return getToken(DB2zSQLParser.SECURITY, 0); }
		public TerminalNode PROFILE() { return getToken(DB2zSQLParser.PROFILE, 0); }
		public ProfileNameContext profileName() {
			return getRuleContext(ProfileNameContext.class,0);
		}
		public TerminalNode PUBLIC() { return getToken(DB2zSQLParser.PUBLIC, 0); }
		public UserClauseDropOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userClauseDropOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterUserClauseDropOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitUserClauseDropOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitUserClauseDropOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserClauseDropOptionsContext userClauseDropOptions() throws RecognitionException {
		UserClauseDropOptionsContext _localctx = new UserClauseDropOptionsContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_userClauseDropOptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3301);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,358,_ctx) ) {
			case 1:
				{
				{
				setState(3295);
				authorizationName();
				}
				}
				break;
			case 2:
				{
				{
				setState(3296);
				match(EXTERNAL);
				setState(3297);
				match(SECURITY);
				setState(3298);
				match(PROFILE);
				setState(3299);
				profileName();
				}
				}
				break;
			case 3:
				{
				{
				setState(3300);
				match(PUBLIC);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UseOptionsContext extends ParserRuleContext {
		public TerminalNode AUTHENTICATION() { return getToken(DB2zSQLParser.AUTHENTICATION, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode WITHOUT() { return getToken(DB2zSQLParser.WITHOUT, 0); }
		public TerminalNode ROLE() { return getToken(DB2zSQLParser.ROLE, 0); }
		public RoleNameContext roleName() {
			return getRuleContext(RoleNameContext.class,0);
		}
		public TerminalNode SECURITY() { return getToken(DB2zSQLParser.SECURITY, 0); }
		public TerminalNode LABEL() { return getToken(DB2zSQLParser.LABEL, 0); }
		public SeclabelNameContext seclabelName() {
			return getRuleContext(SeclabelNameContext.class,0);
		}
		public UseOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_useOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterUseOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitUseOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitUseOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UseOptionsContext useOptions() throws RecognitionException {
		UseOptionsContext _localctx = new UseOptionsContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_useOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3305);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ROLE) {
				{
				setState(3303);
				match(ROLE);
				setState(3304);
				roleName();
				}
			}

			setState(3310);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SECURITY) {
				{
				setState(3307);
				match(SECURITY);
				setState(3308);
				match(LABEL);
				setState(3309);
				seclabelName();
				}
			}

			setState(3312);
			_la = _input.LA(1);
			if ( !(_la==WITH || _la==WITHOUT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3313);
			match(AUTHENTICATION);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterPartitionClauseContext extends ParserRuleContext {
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode PART() { return getToken(DB2zSQLParser.PART, 0); }
		public TerminalNode PARTITION() { return getToken(DB2zSQLParser.PARTITION, 0); }
		public List<UsingBlockContext> usingBlock() {
			return getRuleContexts(UsingBlockContext.class);
		}
		public UsingBlockContext usingBlock(int i) {
			return getRuleContext(UsingBlockContext.class,i);
		}
		public List<FreeBlockContext> freeBlock() {
			return getRuleContexts(FreeBlockContext.class);
		}
		public FreeBlockContext freeBlock(int i) {
			return getRuleContext(FreeBlockContext.class,i);
		}
		public List<GbpcacheBlockContext> gbpcacheBlock() {
			return getRuleContexts(GbpcacheBlockContext.class);
		}
		public GbpcacheBlockContext gbpcacheBlock(int i) {
			return getRuleContext(GbpcacheBlockContext.class,i);
		}
		public List<TerminalNode> COMPRESS() { return getTokens(DB2zSQLParser.COMPRESS); }
		public TerminalNode COMPRESS(int i) {
			return getToken(DB2zSQLParser.COMPRESS, i);
		}
		public List<TerminalNode> DSSIZE() { return getTokens(DB2zSQLParser.DSSIZE); }
		public TerminalNode DSSIZE(int i) {
			return getToken(DB2zSQLParser.DSSIZE, i);
		}
		public List<TerminalNode> SQLIDENTIFIER() { return getTokens(DB2zSQLParser.SQLIDENTIFIER); }
		public TerminalNode SQLIDENTIFIER(int i) {
			return getToken(DB2zSQLParser.SQLIDENTIFIER, i);
		}
		public List<TerminalNode> TRACKMOD() { return getTokens(DB2zSQLParser.TRACKMOD); }
		public TerminalNode TRACKMOD(int i) {
			return getToken(DB2zSQLParser.TRACKMOD, i);
		}
		public List<TerminalNode> YES() { return getTokens(DB2zSQLParser.YES); }
		public TerminalNode YES(int i) {
			return getToken(DB2zSQLParser.YES, i);
		}
		public List<TerminalNode> NO() { return getTokens(DB2zSQLParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(DB2zSQLParser.NO, i);
		}
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public AlterPartitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterPartitionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterPartitionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterPartitionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterPartitionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterPartitionClauseContext alterPartitionClause() throws RecognitionException {
		AlterPartitionClauseContext _localctx = new AlterPartitionClauseContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_alterPartitionClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3320);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALTER:
			case PARTITION:
				{
				{
				setState(3316);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALTER) {
					{
					setState(3315);
					match(ALTER);
					}
				}

				setState(3318);
				match(PARTITION);
				}
				}
				break;
			case PART:
				{
				setState(3319);
				match(PART);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3322);
			match(INTEGERLITERAL);
			setState(3332); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(3332);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ERASE:
				case PRIQTY:
				case SECQTY:
				case USING:
					{
					{
					setState(3323);
					usingBlock();
					}
					}
					break;
				case FREEPAGE:
				case PCTFREE:
					{
					{
					setState(3324);
					freeBlock();
					}
					}
					break;
				case GBPCACHE:
					{
					{
					setState(3325);
					gbpcacheBlock();
					}
					}
					break;
				case COMPRESS:
					{
					{
					setState(3326);
					match(COMPRESS);
					setState(3327);
					_la = _input.LA(1);
					if ( !(_la==NO || _la==YES) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					break;
				case DSSIZE:
					{
					{
					setState(3328);
					match(DSSIZE);
					setState(3329);
					match(SQLIDENTIFIER);
					}
					}
					break;
				case TRACKMOD:
					{
					{
					setState(3330);
					match(TRACKMOD);
					setState(3331);
					_la = _input.LA(1);
					if ( !(_la==NO || _la==YES) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(3334); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==DSSIZE || _la==ERASE || _la==PRIQTY || _la==SECQTY || _la==USING || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (COMPRESS - 458)) | (1L << (FREEPAGE - 458)) | (1L << (GBPCACHE - 458)) | (1L << (PCTFREE - 458)))) != 0) || _la==TRACKMOD );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UsingBlockContext extends ParserRuleContext {
		public List<UsingSpecificationContext> usingSpecification() {
			return getRuleContexts(UsingSpecificationContext.class);
		}
		public UsingSpecificationContext usingSpecification(int i) {
			return getRuleContext(UsingSpecificationContext.class,i);
		}
		public UsingBlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_usingBlock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterUsingBlock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitUsingBlock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitUsingBlock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UsingBlockContext usingBlock() throws RecognitionException {
		UsingBlockContext _localctx = new UsingBlockContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_usingBlock);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3337); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(3336);
					usingSpecification();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3339); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,365,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FreeBlockContext extends ParserRuleContext {
		public List<TerminalNode> FREEPAGE() { return getTokens(DB2zSQLParser.FREEPAGE); }
		public TerminalNode FREEPAGE(int i) {
			return getToken(DB2zSQLParser.FREEPAGE, i);
		}
		public List<TerminalNode> INTEGERLITERAL() { return getTokens(DB2zSQLParser.INTEGERLITERAL); }
		public TerminalNode INTEGERLITERAL(int i) {
			return getToken(DB2zSQLParser.INTEGERLITERAL, i);
		}
		public List<TerminalNode> PCTFREE() { return getTokens(DB2zSQLParser.PCTFREE); }
		public TerminalNode PCTFREE(int i) {
			return getToken(DB2zSQLParser.PCTFREE, i);
		}
		public List<TerminalNode> FOR() { return getTokens(DB2zSQLParser.FOR); }
		public TerminalNode FOR(int i) {
			return getToken(DB2zSQLParser.FOR, i);
		}
		public List<TerminalNode> UPDATE() { return getTokens(DB2zSQLParser.UPDATE); }
		public TerminalNode UPDATE(int i) {
			return getToken(DB2zSQLParser.UPDATE, i);
		}
		public FreeBlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_freeBlock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFreeBlock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFreeBlock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFreeBlock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FreeBlockContext freeBlock() throws RecognitionException {
		FreeBlockContext _localctx = new FreeBlockContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_freeBlock);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3354); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(3354);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,368,_ctx) ) {
					case 1:
						{
						{
						setState(3341);
						match(FREEPAGE);
						setState(3342);
						match(INTEGERLITERAL);
						}
						}
						break;
					case 2:
						{
						{
						setState(3343);
						match(PCTFREE);
						setState(3344);
						match(INTEGERLITERAL);
						}
						}
						break;
					case 3:
						{
						{
						setState(3345);
						match(PCTFREE);
						setState(3352);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==INTEGERLITERAL || _la==FOR) {
							{
							setState(3347);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==INTEGERLITERAL) {
								{
								setState(3346);
								match(INTEGERLITERAL);
								}
							}

							setState(3349);
							match(FOR);
							setState(3350);
							match(UPDATE);
							setState(3351);
							match(INTEGERLITERAL);
							}
						}

						}
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3356); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,369,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MoveTableClauseContext extends ParserRuleContext {
		public TerminalNode MOVE() { return getToken(DB2zSQLParser.MOVE, 0); }
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode TO() { return getToken(DB2zSQLParser.TO, 0); }
		public TerminalNode TABLESPACE() { return getToken(DB2zSQLParser.TABLESPACE, 0); }
		public TablespaceNameContext tablespaceName() {
			return getRuleContext(TablespaceNameContext.class,0);
		}
		public DatabaseNameContext databaseName() {
			return getRuleContext(DatabaseNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public MoveTableClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_moveTableClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterMoveTableClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitMoveTableClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitMoveTableClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MoveTableClauseContext moveTableClause() throws RecognitionException {
		MoveTableClauseContext _localctx = new MoveTableClauseContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_moveTableClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3358);
			match(MOVE);
			setState(3359);
			match(TABLE);
			setState(3360);
			tableName();
			setState(3361);
			match(TO);
			setState(3362);
			match(TABLESPACE);
			setState(3366);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,370,_ctx) ) {
			case 1:
				{
				setState(3363);
				databaseName();
				setState(3364);
				match(DOT);
				}
				break;
			}
			setState(3368);
			tablespaceName();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GbpcacheBlockContext extends ParserRuleContext {
		public TerminalNode GBPCACHE() { return getToken(DB2zSQLParser.GBPCACHE, 0); }
		public TerminalNode CHANGED() { return getToken(DB2zSQLParser.CHANGED, 0); }
		public TerminalNode ALL() { return getToken(DB2zSQLParser.ALL, 0); }
		public TerminalNode SYSTEM() { return getToken(DB2zSQLParser.SYSTEM, 0); }
		public TerminalNode NONE() { return getToken(DB2zSQLParser.NONE, 0); }
		public GbpcacheBlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_gbpcacheBlock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGbpcacheBlock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGbpcacheBlock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGbpcacheBlock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GbpcacheBlockContext gbpcacheBlock() throws RecognitionException {
		GbpcacheBlockContext _localctx = new GbpcacheBlockContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_gbpcacheBlock);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3370);
			match(GBPCACHE);
			setState(3371);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==NONE || _la==SYSTEM || _la==CHANGED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AliasDesignatorContext extends ParserRuleContext {
		public TerminalNode ALIAS() { return getToken(DB2zSQLParser.ALIAS, 0); }
		public AliasNameContext aliasName() {
			return getRuleContext(AliasNameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public TerminalNode SEQUENCE() { return getToken(DB2zSQLParser.SEQUENCE, 0); }
		public TerminalNode PUBLIC() { return getToken(DB2zSQLParser.PUBLIC, 0); }
		public AliasDesignatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aliasDesignator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAliasDesignator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAliasDesignator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAliasDesignator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AliasDesignatorContext aliasDesignator() throws RecognitionException {
		AliasDesignatorContext _localctx = new AliasDesignatorContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_aliasDesignator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3374);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PUBLIC) {
				{
				setState(3373);
				match(PUBLIC);
				}
			}

			setState(3376);
			match(ALIAS);
			setState(3377);
			aliasName();
			setState(3378);
			match(FOR);
			setState(3379);
			_la = _input.LA(1);
			if ( !(_la==SEQUENCE || _la==TABLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultipleColumnListContext extends ParserRuleContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public List<TerminalNode> IS() { return getTokens(DB2zSQLParser.IS); }
		public TerminalNode IS(int i) {
			return getToken(DB2zSQLParser.IS, i);
		}
		public List<TerminalNode> NONNUMERICLITERAL() { return getTokens(DB2zSQLParser.NONNUMERICLITERAL); }
		public TerminalNode NONNUMERICLITERAL(int i) {
			return getToken(DB2zSQLParser.NONNUMERICLITERAL, i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public MultipleColumnListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipleColumnList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterMultipleColumnList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitMultipleColumnList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitMultipleColumnList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultipleColumnListContext multipleColumnList() throws RecognitionException {
		MultipleColumnListContext _localctx = new MultipleColumnListContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_multipleColumnList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3381);
			tableName();
			setState(3382);
			match(LPAREN);
			setState(3383);
			columnName();
			setState(3384);
			match(IS);
			setState(3385);
			match(NONNUMERICLITERAL);
			setState(3393);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3386);
				match(COMMA);
				setState(3387);
				columnName();
				setState(3388);
				match(IS);
				setState(3389);
				match(NONNUMERICLITERAL);
				}
				}
				setState(3395);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3396);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionDesignatorContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(DB2zSQLParser.FUNCTION, 0); }
		public FunctionNameContext functionName() {
			return getRuleContext(FunctionNameContext.class,0);
		}
		public TerminalNode SPECIFIC() { return getToken(DB2zSQLParser.SPECIFIC, 0); }
		public SpecificNameContext specificName() {
			return getRuleContext(SpecificNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<ParameterTypeContext> parameterType() {
			return getRuleContexts(ParameterTypeContext.class);
		}
		public ParameterTypeContext parameterType(int i) {
			return getRuleContext(ParameterTypeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public FunctionDesignatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionDesignator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFunctionDesignator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFunctionDesignator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFunctionDesignator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionDesignatorContext functionDesignator() throws RecognitionException {
		FunctionDesignatorContext _localctx = new FunctionDesignatorContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_functionDesignator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3417);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FUNCTION:
				{
				{
				setState(3398);
				match(FUNCTION);
				setState(3399);
				functionName();
				setState(3412);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(3400);
					match(LPAREN);
					setState(3409);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 29)) & ~0x3f) == 0 && ((1L << (_la - 29)) & ((1L << (ADD - 29)) | (1L << (AFTER - 29)) | (1L << (ALL - 29)) | (1L << (ALLOCATE - 29)) | (1L << (ALLOW - 29)) | (1L << (ALTER - 29)) | (1L << (ALTERAND - 29)) | (1L << (ANY - 29)) | (1L << (ARRAY - 29)) | (1L << (ARRAY_EXISTS - 29)) | (1L << (AS - 29)) | (1L << (ASENSITIVE - 29)) | (1L << (ASSOCIATE - 29)) | (1L << (ASUTIME - 29)) | (1L << (AT - 29)) | (1L << (AUDIT - 29)) | (1L << (AUX - 29)) | (1L << (AUXILIARY - 29)) | (1L << (BEFORE - 29)) | (1L << (BEGIN - 29)) | (1L << (BETWEEN - 29)) | (1L << (BUFFERPOOL - 29)) | (1L << (BY - 29)) | (1L << (CALL - 29)) | (1L << (CAPTURE - 29)) | (1L << (CASCADED - 29)) | (1L << (CASE - 29)) | (1L << (CAST - 29)) | (1L << (CCSID - 29)) | (1L << (CHAR - 29)) | (1L << (CHARACTER - 29)) | (1L << (CHECK - 29)) | (1L << (CLONE - 29)) | (1L << (CLOSE - 29)) | (1L << (CLUSTER - 29)) | (1L << (COLLECTION - 29)) | (1L << (COLLID - 29)) | (1L << (COLUMN - 29)) | (1L << (COMMENT - 29)) | (1L << (COMMIT - 29)) | (1L << (CONCAT - 29)) | (1L << (CONDITION - 29)) | (1L << (CONNECT - 29)) | (1L << (CONNECTION - 29)) | (1L << (CONSTRAINT - 29)) | (1L << (CONTAINS - 29)) | (1L << (CONTENT - 29)) | (1L << (CONTINUE - 29)) | (1L << (CREATE - 29)) | (1L << (CUBE - 29)) | (1L << (CURRENT - 29)) | (1L << (CURRENT_LC_CTYPE - 29)) | (1L << (CURRVAL - 29)) | (1L << (CURSOR - 29)) | (1L << (DATA - 29)) | (1L << (DATABASE - 29)) | (1L << (DAY - 29)) | (1L << (DAYS - 29)) | (1L << (DBINFO - 29)) | (1L << (DECLARE - 29)) | (1L << (DEFAULT - 29)) | (1L << (DELETE - 29)) | (1L << (DESCRIPTOR - 29)) | (1L << (DETERMINISTIC - 29)))) != 0) || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (DISABLE - 93)) | (1L << (DISALLOW - 93)) | (1L << (DISTINCT - 93)) | (1L << (DO - 93)) | (1L << (DOCUMENT - 93)) | (1L << (DOUBLE - 93)) | (1L << (DROP - 93)) | (1L << (DSSIZE - 93)) | (1L << (DYNAMIC - 93)) | (1L << (EDITPROC - 93)) | (1L << (ELSE - 93)) | (1L << (ELSEIF - 93)) | (1L << (ENCODING - 93)) | (1L << (ENCRYPTION - 93)) | (1L << (END - 93)) | (1L << (END_EXEC - 93)) | (1L << (ENDING - 93)) | (1L << (ERASE - 93)) | (1L << (ESCAPE - 93)) | (1L << (EXCEPT - 93)) | (1L << (EXCEPTION - 93)) | (1L << (EXEC_SQL - 93)) | (1L << (EXECUTE - 93)) | (1L << (EXISTS - 93)) | (1L << (EXIT - 93)) | (1L << (EXPLAIN - 93)) | (1L << (EXTERNAL - 93)) | (1L << (FENCED - 93)) | (1L << (FETCH - 93)) | (1L << (FIELDPROC - 93)) | (1L << (FINAL - 93)) | (1L << (FIRST - 93)) | (1L << (FOR - 93)) | (1L << (FREE - 93)) | (1L << (FROM - 93)) | (1L << (FULL - 93)) | (1L << (FUNCTION - 93)) | (1L << (GENERATED - 93)) | (1L << (GET - 93)) | (1L << (GLOBAL - 93)) | (1L << (GO - 93)) | (1L << (GOTO - 93)) | (1L << (GRANT - 93)) | (1L << (GROUP - 93)) | (1L << (HANDLER - 93)) | (1L << (HAVING - 93)) | (1L << (HOLD - 93)) | (1L << (HOUR - 93)) | (1L << (HOURS - 93)) | (1L << (IF - 93)) | (1L << (IMMEDIATE - 93)) | (1L << (IN - 93)) | (1L << (INCLUSIVE - 93)) | (1L << (INDEX - 93)) | (1L << (INDEXBP - 93)) | (1L << (INHERIT - 93)) | (1L << (INNER - 93)) | (1L << (INOUT - 93)) | (1L << (INSENSITIVE - 93)) | (1L << (INSERT - 93)) | (1L << (INTERSECT - 93)) | (1L << (INTO - 93)) | (1L << (IS - 93)) | (1L << (ISOBID - 93)))) != 0) || ((((_la - 157)) & ~0x3f) == 0 && ((1L << (_la - 157)) & ((1L << (ITERATE - 157)) | (1L << (JAR - 157)) | (1L << (JOIN - 157)) | (1L << (KEEP - 157)) | (1L << (KEY - 157)) | (1L << (LABEL - 157)) | (1L << (LANGUAGE - 157)) | (1L << (LAST - 157)) | (1L << (LC_CTYPE - 157)) | (1L << (LEAVE - 157)) | (1L << (LEFT - 157)) | (1L << (LIKE - 157)) | (1L << (LIMIT - 157)) | (1L << (LOCAL - 157)) | (1L << (LOCALE - 157)) | (1L << (LOCATOR - 157)) | (1L << (LOCATORS - 157)) | (1L << (LOCK - 157)) | (1L << (LOCKMAX - 157)) | (1L << (LOCKSIZE - 157)) | (1L << (LONG - 157)) | (1L << (LOOP - 157)) | (1L << (MAINTAINED - 157)) | (1L << (MATERIALIZED - 157)) | (1L << (MICROSECOND - 157)) | (1L << (MICROSECONDS - 157)) | (1L << (MODIFIES - 157)) | (1L << (MONTH - 157)) | (1L << (MONTHS - 157)) | (1L << (NEXT - 157)) | (1L << (NEXTVAL - 157)) | (1L << (NO - 157)) | (1L << (NONE - 157)) | (1L << (NOT - 157)) | (1L << (NULL - 157)) | (1L << (NULLS - 157)) | (1L << (NUMPARTS - 157)) | (1L << (OBID - 157)) | (1L << (OF - 157)) | (1L << (OFFSET - 157)) | (1L << (OLD - 157)) | (1L << (ON - 157)) | (1L << (OPEN - 157)) | (1L << (OPTIMIZATION - 157)) | (1L << (OPTIMIZE - 157)) | (1L << (OR - 157)) | (1L << (ORDER - 157)) | (1L << (ORGANIZATION - 157)) | (1L << (OUT - 157)) | (1L << (OUTER - 157)) | (1L << (PACKAGE - 157)) | (1L << (PADDED - 157)) | (1L << (PARAMETER - 157)) | (1L << (PART - 157)) | (1L << (PARTITION - 157)) | (1L << (PARTITIONED - 157)) | (1L << (PARTITIONING - 157)) | (1L << (PATH - 157)) | (1L << (PERIOD - 157)) | (1L << (PIECESIZE - 157)) | (1L << (PLAN - 157)) | (1L << (PRECISION - 157)) | (1L << (PREPARE - 157)))) != 0) || ((((_la - 221)) & ~0x3f) == 0 && ((1L << (_la - 221)) & ((1L << (PREVVAL - 221)) | (1L << (PRIOR - 221)) | (1L << (PRIQTY - 221)) | (1L << (PRIVILEGES - 221)) | (1L << (PROCEDURE - 221)) | (1L << (PROGRAM - 221)) | (1L << (PSID - 221)) | (1L << (PUBLIC - 221)) | (1L << (QUERY - 221)) | (1L << (QUERYNO - 221)) | (1L << (READS - 221)) | (1L << (REFERENCES - 221)) | (1L << (REFRESH - 221)) | (1L << (RELEASE - 221)) | (1L << (RENAME - 221)) | (1L << (REPEAT - 221)) | (1L << (RESIGNAL - 221)) | (1L << (RESTRICT - 221)) | (1L << (RESULT - 221)) | (1L << (RESULT_SET_LOCATOR - 221)) | (1L << (RETURN - 221)) | (1L << (RETURNS - 221)) | (1L << (REVOKE - 221)) | (1L << (RIGHT - 221)) | (1L << (ROLE - 221)) | (1L << (ROLLBACK - 221)) | (1L << (ROLLUP - 221)) | (1L << (ROUND_CEILING - 221)) | (1L << (ROUND_DOWN - 221)) | (1L << (ROUND_FLOOR - 221)) | (1L << (ROUND_HALF_DOWN - 221)) | (1L << (ROUND_HALF_EVEN - 221)) | (1L << (ROUND_HALF_UP - 221)) | (1L << (ROUND_UP - 221)) | (1L << (ROW - 221)) | (1L << (ROWSET - 221)) | (1L << (RUN - 221)) | (1L << (SAVEPOINT - 221)) | (1L << (SCHEMA - 221)) | (1L << (SCRATCHPAD - 221)) | (1L << (SECOND - 221)) | (1L << (SECONDS - 221)) | (1L << (SECQTY - 221)) | (1L << (SECURITY - 221)) | (1L << (SELECT - 221)) | (1L << (SENSITIVE - 221)) | (1L << (SEQUENCE - 221)) | (1L << (SET - 221)) | (1L << (SIGNAL - 221)) | (1L << (SIMPLE - 221)) | (1L << (SOME - 221)) | (1L << (SOURCE - 221)) | (1L << (SPECIFIC - 221)) | (1L << (STANDARD - 221)) | (1L << (STATEMENT - 221)) | (1L << (STATIC - 221)) | (1L << (STAY - 221)) | (1L << (STOGROUP - 221)) | (1L << (STORES - 221)) | (1L << (STYLE - 221)) | (1L << (SUMMARY - 221)) | (1L << (SYNONYM - 221)) | (1L << (SYSDATE - 221)) | (1L << (SYSTEM - 221)))) != 0) || ((((_la - 285)) & ~0x3f) == 0 && ((1L << (_la - 285)) & ((1L << (SYSTIMESTAMP - 285)) | (1L << (TABLE - 285)) | (1L << (TABLESPACE - 285)) | (1L << (THEN - 285)) | (1L << (TO - 285)) | (1L << (TRIGGER - 285)) | (1L << (TRUNCATE - 285)) | (1L << (TYPE - 285)) | (1L << (UNDO - 285)) | (1L << (UNION - 285)) | (1L << (UNIQUE - 285)) | (1L << (UNTIL - 285)) | (1L << (UPDATE - 285)) | (1L << (USING - 285)) | (1L << (VALIDPROC - 285)) | (1L << (VALUE - 285)) | (1L << (VALUES - 285)) | (1L << (VARIABLE - 285)) | (1L << (VARIANT - 285)) | (1L << (VCAT - 285)) | (1L << (VERSIONING - 285)) | (1L << (VIEW - 285)) | (1L << (VOLATILE - 285)) | (1L << (VOLUMES - 285)) | (1L << (WHEN - 285)) | (1L << (WHENEVER - 285)) | (1L << (WHERE - 285)) | (1L << (WHILE - 285)) | (1L << (WITH - 285)) | (1L << (WLM - 285)) | (1L << (XMLCAST - 285)) | (1L << (XMLEXISTS - 285)) | (1L << (XMLNAMESPACES - 285)) | (1L << (YEAR - 285)) | (1L << (YEARS - 285)) | (1L << (ZONE - 285)) | (1L << (AND - 285)) | (1L << (ARRAY_AGG - 285)) | (1L << (ASC - 285)) | (1L << (AVG - 285)) | (1L << (BIT - 285)) | (1L << (CHANGE - 285)) | (1L << (CODEUNITS16 - 285)) | (1L << (CODEUNITS32 - 285)) | (1L << (CORR - 285)) | (1L << (CORRELATION - 285)) | (1L << (COUNT - 285)) | (1L << (COUNT_BIG - 285)) | (1L << (COVAR - 285)) | (1L << (COVARIANCE - 285)) | (1L << (COVARIANCE_SAMP - 285)) | (1L << (COVAR_POP - 285)) | (1L << (COVAR_SAMP - 285)) | (1L << (CS - 285)) | (1L << (CUME_DIST - 285)) | (1L << (DENSE_RANK - 285)) | (1L << (DESC - 285)) | (1L << (EBCDIC - 285)) | (1L << (EXCLUSIVE - 285)) | (1L << (FIRST_VALUE - 285)) | (1L << (FOLLOWING - 285)) | (1L << (GROUPING - 285)) | (1L << (IGNORE - 285)) | (1L << (INDICATOR - 285)))) != 0) || ((((_la - 349)) & ~0x3f) == 0 && ((1L << (_la - 349)) & ((1L << (INPUT - 349)) | (1L << (ISNULL - 349)) | (1L << (LAG - 349)) | (1L << (LARGE - 349)) | (1L << (LAST_VALUE - 349)) | (1L << (LEAD - 349)) | (1L << (LISTAGG - 349)) | (1L << (LOCKED - 349)) | (1L << (LOCKS - 349)) | (1L << (MEDIAN - 349)) | (1L << (MINUTES - 349)) | (1L << (MIXED - 349)) | (1L << (NOTNULL - 349)) | (1L << (NTH_VALUE - 349)) | (1L << (NTILE - 349)) | (1L << (NUMERIC - 349)) | (1L << (OBJECT - 349)) | (1L << (OCTETS - 349)) | (1L << (ONLY - 349)) | (1L << (OVER - 349)) | (1L << (PASSING - 349)) | (1L << (PERCENTILE_CONT - 349)) | (1L << (PERCENTILE_DISC - 349)) | (1L << (PERCENT_RANK - 349)) | (1L << (PRECEDING - 349)) | (1L << (PREVIOUS - 349)) | (1L << (RANGE - 349)) | (1L << (RANK - 349)) | (1L << (RATIO_TO_REPORT - 349)) | (1L << (READ - 349)) | (1L << (REF - 349)) | (1L << (REGR_AVGX - 349)) | (1L << (REGR_AVGY - 349)) | (1L << (REGR_COUNT - 349)) | (1L << (REGR_ICPT - 349)) | (1L << (REGR_INTERCEPT - 349)) | (1L << (REGR_R2 - 349)) | (1L << (REGR_SLOPE - 349)) | (1L << (REGR_SXX - 349)) | (1L << (REGR_SXY - 349)) | (1L << (REGR_SYY - 349)) | (1L << (RESPECT - 349)) | (1L << (ROW_NUMBER - 349)) | (1L << (ROWS - 349)) | (1L << (RR - 349)) | (1L << (RS - 349)) | (1L << (SBCS - 349)) | (1L << (SELECTIVITY - 349)) | (1L << (SETS - 349)) | (1L << (SHARE - 349)) | (1L << (SKIP_ - 349)) | (1L << (STDDEV - 349)) | (1L << (STDDEV_POP - 349)) | (1L << (STDDEV_SAMP - 349)) | (1L << (SUM - 349)) | (1L << (TOKEN - 349)) | (1L << (UNBOUNDED - 349)) | (1L << (UNPACK - 349)) | (1L << (UR - 349)) | (1L << (USE - 349)) | (1L << (VAR - 349)) | (1L << (VARIANCE - 349)) | (1L << (VARIANCE_SAMP - 349)) | (1L << (VAR_POP - 349)))) != 0) || ((((_la - 413)) & ~0x3f) == 0 && ((1L << (_la - 413)) & ((1L << (VAR_SAMP - 413)) | (1L << (VARYING - 413)) | (1L << (WITHOUT - 413)) | (1L << (XML - 413)) | (1L << (XMLAGG - 413)) | (1L << (COLUMNS - 413)) | (1L << (SQLID - 413)) | (1L << (ORDINALITY - 413)) | (1L << (SYSTEM_TIME - 413)) | (1L << (BUSINESS_TIME - 413)) | (1L << (MULTIPLIER - 413)) | (1L << (UNNEST - 413)) | (1L << (CROSS - 413)) | (1L << (CALLER - 413)) | (1L << (CLIENT - 413)) | (1L << (POSITIONING - 413)) | (1L << (SCROLL - 413)) | (1L << (ACTION - 413)) | (1L << (ASSEMBLE - 413)) | (1L << (C_ - 413)) | (1L << (CALLED - 413)) | (1L << (COBOL - 413)) | (1L << (DB2 - 413)) | (1L << (DEFINER - 413)) | (1L << (DISPATCH - 413)) | (1L << (ENVIRONMENT - 413)) | (1L << (FAILURE - 413)) | (1L << (FAILURES - 413)) | (1L << (JAVA - 413)) | (1L << (MAIN - 413)) | (1L << (NAME - 413)) | (1L << (OPTIONS - 413)) | (1L << (PARALLEL - 413)) | (1L << (PLI - 413)) | (1L << (REGISTERS - 413)) | (1L << (RESIDENT - 413)) | (1L << (SECURED - 413)) | (1L << (SPECIAL - 413)) | (1L << (SQL - 413)) | (1L << (STOP - 413)) | (1L << (SUB - 413)) | (1L << (YES - 413)) | (1L << (APPLICATION - 413)) | (1L << (CHANGED - 413)) | (1L << (COMPATIBILITY - 413)) | (1L << (COMPRESS - 413)) | (1L << (COPY - 413)) | (1L << (FREEPAGE - 413)) | (1L << (GBPCACHE - 413)) | (1L << (INCLUDE - 413)) | (1L << (MAXVALUE - 413)) | (1L << (MINVALUE - 413)) | (1L << (PCTFREE - 413)) | (1L << (REGENERATE - 413)) | (1L << (MASK - 413)) | (1L << (ENABLE - 413)) | (1L << (PERMISSION - 413)) | (1L << (ATOMIC - 413)) | (1L << (SQLEXCEPTION - 413)) | (1L << (MERGE - 413)) | (1L << (MATCHED - 413)) | (1L << (SQLSTATE - 413)) | (1L << (MESSAGE_TEXT - 413)) | (1L << (OVERRIDING - 413)))) != 0) || ((((_la - 477)) & ~0x3f) == 0 && ((1L << (_la - 477)) & ((1L << (PORTION - 477)) | (1L << (DB2SQL - 477)) | (1L << (DEBUG - 477)) | (1L << (GENERAL - 477)) | (1L << (MODE_ - 477)) | (1L << (REXX - 477)) | (1L << (CACHE - 477)) | (1L << (CYCLE - 477)) | (1L << (INCREMENT - 477)) | (1L << (RESTART - 477)) | (1L << (DATACLAS - 477)) | (1L << (MGMTCLAS - 477)) | (1L << (REMOVE - 477)) | (1L << (STORCLAS - 477)) | (1L << (ACCESS - 477)) | (1L << (ACTIVATE - 477)) | (1L << (ALWAYS - 477)) | (1L << (APPEND - 477)) | (1L << (ARCHIVE - 477)) | (1L << (BUSINESS - 477)) | (1L << (CASCADE - 477)) | (1L << (CHANGES - 477)) | (1L << (CONTROL - 477)) | (1L << (DEACTIVATE - 477)) | (1L << (DEFERRED - 477)) | (1L << (EACH - 477)) | (1L << (ENFORCED - 477)) | (1L << (EXTRA - 477)) | (1L << (FOREIGN - 477)) | (1L << (HIDDEN_ - 477)) | (1L << (HISTORY - 477)) | (1L << (ID - 477)) | (1L << (IDENTITY - 477)) | (1L << (IMPLICITLY - 477)) | (1L << (INITIALLY - 477)) | (1L << (INLINE - 477)) | (1L << (OPERATION - 477)) | (1L << (ORGANIZE - 477)) | (1L << (OVERLAPS - 477)) | (1L << (PACKAGE_NAME - 477)) | (1L << (PACKAGE_SCHEMA - 477)) | (1L << (PACKAGE_VERSION - 477)) | (1L << (PRIMARY - 477)) | (1L << (RESET - 477)) | (1L << (ROTATE - 477)) | (1L << (START - 477)) | (1L << (SYSIBM - 477)) | (1L << (TRANSACTION - 477)) | (1L << (XMLSCHEMA - 477)) | (1L << (ELEMENT - 477)) | (1L << (URL - 477)) | (1L << (NAMESPACE - 477)) | (1L << (LOCATION - 477)) | (1L << (SYSXSR - 477)) | (1L << (ALGORITHM - 477)) | (1L << (FIXEDLENGTH - 477)) | (1L << (HUFFMAN - 477)) | (1L << (LOB - 477)) | (1L << (LOG - 477)) | (1L << (LOGGED - 477)) | (1L << (MAXPARTITIONS - 477)) | (1L << (MAXROWS - 477)) | (1L << (MEMBER - 477)) | (1L << (MOVE - 477)))) != 0) || ((((_la - 541)) & ~0x3f) == 0 && ((1L << (_la - 541)) & ((1L << (PAGE - 541)) | (1L << (PAGENUM - 541)) | (1L << (PENDING - 541)) | (1L << (RELATIVE - 541)) | (1L << (SEGSIZE - 541)) | (1L << (TRACKMOD - 541)) | (1L << (ADDRESS - 541)) | (1L << (ATTRIBUTES - 541)) | (1L << (AUTHENTICATION - 541)) | (1L << (AUTHID - 541)) | (1L << (CONTEXT - 541)) | (1L << (JOBNAME - 541)) | (1L << (OWNER - 541)) | (1L << (PROFILE - 541)) | (1L << (QUALIFIER - 541)) | (1L << (SERVAUTH - 541)) | (1L << (TRUSTED - 541)) | (1L << (SECTION - 541)) | (1L << (ACTIVE - 541)) | (1L << (VERSION - 541)) | (1L << (ALIAS - 541)) | (1L << (WORK - 541)) | (1L << (WORKFILE - 541)) | (1L << (SYSDEFLT - 541)) | (1L << (NULTERM - 541)) | (1L << (STRUCTURE - 541)) | (1L << (GENERIC - 541)) | (1L << (ABS - 541)) | (1L << (ABSVAL - 541)) | (1L << (ACOS - 541)) | (1L << (ADD_DAYS - 541)) | (1L << (ADD_MONTHS - 541)) | (1L << (ARRAY_DELETE - 541)) | (1L << (ARRAY_FIRST - 541)) | (1L << (ARRAY_LAST - 541)) | (1L << (ARRAY_NEXT - 541)) | (1L << (ARRAY_PRIOR - 541)) | (1L << (ARRAY_TRIM - 541)) | (1L << (ASCII - 541)) | (1L << (ASCII_CHR - 541)) | (1L << (ASCIISTR - 541)) | (1L << (ASCII_STR - 541)) | (1L << (ASIN - 541)) | (1L << (ATAN - 541)) | (1L << (ATAN2 - 541)) | (1L << (ATANH - 541)) | (1L << (BIGINT - 541)) | (1L << (BINARY - 541)) | (1L << (BITAND - 541)) | (1L << (BITANDNOT - 541)) | (1L << (BITNOT - 541)) | (1L << (BITOR - 541)) | (1L << (BITXOR - 541)) | (1L << (BLOB - 541)) | (1L << (BTRIM - 541)) | (1L << (CARDINALITY - 541)) | (1L << (CCSID_ENCODING - 541)) | (1L << (CEIL - 541)) | (1L << (CEILING - 541)) | (1L << (CHAR9 - 541)) | (1L << (CHARACTER_LENGTH - 541)) | (1L << (CHAR_LENGTH - 541)) | (1L << (CHR - 541)) | (1L << (CLOB - 541)))) != 0) || ((((_la - 605)) & ~0x3f) == 0 && ((1L << (_la - 605)) & ((1L << (COALESCE - 605)) | (1L << (COLLATION_KEY - 605)) | (1L << (COMPARE_DECFLOAT - 605)) | (1L << (COS - 605)) | (1L << (COSH - 605)) | (1L << (DATE - 605)) | (1L << (DAYOFMONTH - 605)) | (1L << (DAYOFWEEK - 605)) | (1L << (DAYOFWEEK_ISO - 605)) | (1L << (DAYOFYEAR - 605)) | (1L << (DAYS_BETWEEN - 605)) | (1L << (DBCLOB - 605)) | (1L << (DEC - 605)) | (1L << (DECFLOAT - 605)) | (1L << (DECFLOAT_FORMAT - 605)) | (1L << (DECFLOAT_SORTKEY - 605)) | (1L << (DECIMAL - 605)) | (1L << (DECODE - 605)) | (1L << (DECRYPT_BINARY - 605)) | (1L << (DECRYPT_BIT - 605)) | (1L << (DECRYPT_CHAR - 605)) | (1L << (DECRYPT_DATAKEY_BIGINT - 605)) | (1L << (DECRYPT_DATAKEY_BIT - 605)) | (1L << (DECRYPT_DATAKEY_CLOB - 605)) | (1L << (DECRYPT_DATAKEY_DBCLOB - 605)) | (1L << (DECRYPT_DATAKEY_DECIMAL - 605)) | (1L << (DECRYPT_DATAKEY_INTEGER - 605)) | (1L << (DECRYPT_DATAKEY_VARCHAR - 605)) | (1L << (DECRYPT_DATAKEY_VARGRAPHIC - 605)) | (1L << (DECRYPT_DB - 605)) | (1L << (DEGREES - 605)) | (1L << (DIFFERENCE - 605)) | (1L << (DIGITS - 605)) | (1L << (DOUBLE_PRECISION - 605)) | (1L << (DSN_XMLVALIDATE - 605)) | (1L << (EBCDIC_CHR - 605)) | (1L << (EBCDIC_STR - 605)) | (1L << (ENCRYPT_DATAKEY - 605)) | (1L << (ENCRYPT_TDES - 605)) | (1L << (EXP - 605)) | (1L << (EXTRACT - 605)) | (1L << (FLOAT - 605)) | (1L << (FLOOR - 605)) | (1L << (GENERATE_UNIQUE - 605)) | (1L << (GENERATE_UNIQUE_BINARY - 605)) | (1L << (GETHINT - 605)) | (1L << (GETVARIABLE - 605)) | (1L << (GRAPHIC - 605)) | (1L << (GREATEST - 605)) | (1L << (HASH - 605)) | (1L << (HASH_CRC32 - 605)) | (1L << (HASH_MD5 - 605)) | (1L << (HASH_SHA1 - 605)) | (1L << (HASH_SHA256 - 605)) | (1L << (HEX - 605)) | (1L << (IDENTITY_VAL_LOCAL - 605)) | (1L << (IFNULL - 605)) | (1L << (INSTR - 605)) | (1L << (INT - 605)) | (1L << (INTEGER - 605)) | (1L << (JULIAN_DAY - 605)) | (1L << (LAST_DAY - 605)) | (1L << (LCASE - 605)) | (1L << (LEAST - 605)))) != 0) || ((((_la - 669)) & ~0x3f) == 0 && ((1L << (_la - 669)) & ((1L << (LENGTH - 669)) | (1L << (LN - 669)) | (1L << (LOCATE - 669)) | (1L << (LOCATE_IN_STRING - 669)) | (1L << (LOG10 - 669)) | (1L << (LOWER - 669)) | (1L << (LPAD - 669)) | (1L << (LTRIM - 669)) | (1L << (MAX - 669)) | (1L << (MAX_CARDINALITY - 669)) | (1L << (MIDNIGHT_SECONDS - 669)) | (1L << (MIN - 669)) | (1L << (MINUTE - 669)) | (1L << (MOD - 669)) | (1L << (MONTHS_BETWEEN - 669)) | (1L << (MQREAD - 669)) | (1L << (MQREADCLOB - 669)) | (1L << (MQRECEIVE - 669)) | (1L << (MQRECEIVECLOB - 669)) | (1L << (MQSEND - 669)) | (1L << (MULTIPLY_ALT - 669)) | (1L << (NEXT_DAY - 669)) | (1L << (NEXT_MONTH - 669)) | (1L << (NORMALIZE_DECFLOAT - 669)) | (1L << (NORMALIZE_STRING - 669)) | (1L << (NULLIF - 669)) | (1L << (NVL - 669)) | (1L << (OVERLAY - 669)) | (1L << (PACK - 669)) | (1L << (POSITION - 669)) | (1L << (POSSTR - 669)) | (1L << (POW - 669)) | (1L << (POWER - 669)) | (1L << (QUANTIZE - 669)) | (1L << (QUARTER - 669)) | (1L << (RADIANS - 669)) | (1L << (RAISE_ERROR - 669)) | (1L << (RAND - 669)) | (1L << (RANDOM - 669)) | (1L << (REAL - 669)) | (1L << (REGEXP_COUNT - 669)) | (1L << (REGEXP_INSTR - 669)) | (1L << (REGEXP_LIKE - 669)) | (1L << (REGEXP_REPLACE - 669)) | (1L << (REGEXP_SUBSTR - 669)) | (1L << (REPLACE - 669)) | (1L << (RID - 669)) | (1L << (ROUND - 669)) | (1L << (ROUND_TIMESTAMP - 669)) | (1L << (ROWID - 669)) | (1L << (RPAD - 669)) | (1L << (RTRIM - 669)) | (1L << (SCORE - 669)) | (1L << (SIGN - 669)) | (1L << (SIN - 669)) | (1L << (SINH - 669)) | (1L << (SMALLINT - 669)) | (1L << (SOAPHTTPC - 669)) | (1L << (SOAPHTTPNC - 669)) | (1L << (SOAPHTTPNV - 669)) | (1L << (SOAPHTTPV - 669)) | (1L << (SOUNDEX - 669)) | (1L << (SPACE - 669)) | (1L << (SQRT - 669)))) != 0) || ((((_la - 733)) & ~0x3f) == 0 && ((1L << (_la - 733)) & ((1L << (STRIP - 733)) | (1L << (STRLEFT - 733)) | (1L << (STRPOS - 733)) | (1L << (STRRIGHT - 733)) | (1L << (SUBSTR - 733)) | (1L << (SUBSTRING - 733)) | (1L << (TAN - 733)) | (1L << (TANH - 733)) | (1L << (TIME - 733)) | (1L << (TIMESTAMP - 733)) | (1L << (TIMESTAMPADD - 733)) | (1L << (TIMESTAMPDIFF - 733)) | (1L << (TIMESTAMP_FORMAT - 733)) | (1L << (TIMESTAMP_ISO - 733)) | (1L << (TIMESTAMP_TZ - 733)) | (1L << (TO_CHAR - 733)) | (1L << (TO_CLOB - 733)) | (1L << (TO_DATE - 733)) | (1L << (TO_NUMBER - 733)) | (1L << (TOTALORDER - 733)) | (1L << (TO_TIMESTAMP - 733)) | (1L << (TRANSLATE - 733)) | (1L << (TRIM - 733)) | (1L << (TRIM_ARRAY - 733)) | (1L << (TRUNC - 733)) | (1L << (TRUNC_TIMESTAMP - 733)) | (1L << (UCASE - 733)) | (1L << (UNICODE - 733)) | (1L << (UNICODE_STR - 733)) | (1L << (UNISTR - 733)) | (1L << (UPPER - 733)) | (1L << (VARBINARY - 733)) | (1L << (VARCHAR - 733)) | (1L << (VARCHAR9 - 733)) | (1L << (VARCHAR_BIT_FORMAT - 733)) | (1L << (VARCHAR_FORMAT - 733)) | (1L << (VARGRAPHIC - 733)) | (1L << (VERIFY_GROUP_FOR_USER - 733)) | (1L << (VERIFY_ROLE_FOR_USER - 733)) | (1L << (VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER - 733)) | (1L << (WEEK - 733)) | (1L << (WEEK_ISO - 733)) | (1L << (WRAP - 733)) | (1L << (XMLATTRIBUTES - 733)) | (1L << (XMLCOMMENT - 733)) | (1L << (XMLCONCAT - 733)) | (1L << (XMLDOCUMENT - 733)) | (1L << (XMLELEMENT - 733)) | (1L << (XMLFOREST - 733)) | (1L << (XMLMODIFY - 733)) | (1L << (XMLPARSE - 733)) | (1L << (XMLPI - 733)) | (1L << (XMLQUERY - 733)) | (1L << (XMLSERIALIZE - 733)) | (1L << (XMLTEXT - 733)) | (1L << (XMLXSROBJECTID - 733)) | (1L << (XSLTRANSFORM - 733)) | (1L << (CURRENT_ACCELERATOR - 733)) | (1L << (CURRENT_APPLICATION_COMPATIBILITY - 733)) | (1L << (CURRENT_APPLICATION_ENCODING_SCHEME - 733)) | (1L << (CURRENT_CLIENT_ACCTNG - 733)) | (1L << (CURRENT_CLIENT_APPLNAME - 733)) | (1L << (CURRENT_CLIENT_CORR_TOKEN - 733)) | (1L << (CURRENT_CLIENT_USERID - 733)))) != 0) || ((((_la - 797)) & ~0x3f) == 0 && ((1L << (_la - 797)) & ((1L << (CURRENT_CLIENT_WRKSTNNAME - 797)) | (1L << (CURRENT_DATE - 797)) | (1L << (CURRENT_DEBUG_MODE - 797)) | (1L << (CURRENT_DECFLOAT_ROUNDING_MODE - 797)) | (1L << (CURRENT_DEGREE - 797)) | (1L << (CURRENT_EXPLAIN_MODE - 797)) | (1L << (CURRENT_GET_ACCEL_ARCHIVE - 797)) | (1L << (CURRENT_LOCALE_LC_CTYPE - 797)) | (1L << (CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION - 797)) | (1L << (CURRENT_MEMBER - 797)) | (1L << (CURRENT_OPTIMIZATION_HINT - 797)) | (1L << (CURRENT_PACKAGE_PATH - 797)) | (1L << (CURRENT_PACKAGESET - 797)) | (1L << (CURRENT_PATH - 797)) | (1L << (CURRENT_PRECISION - 797)) | (1L << (CURRENT_QUERY_ACCELERATION - 797)) | (1L << (CURRENT_QUERY_ACCELERATION_WAITFORDATA - 797)) | (1L << (CURRENT_REFRESH_AGE - 797)) | (1L << (CURRENT_ROUTINE_VERSION - 797)) | (1L << (CURRENT_RULES - 797)) | (1L << (CURRENT_SCHEMA - 797)) | (1L << (CURRENT_SERVER - 797)) | (1L << (CURRENT_SQLID - 797)) | (1L << (CURRENT_TEMPORAL_BUSINESS_TIME - 797)) | (1L << (CURRENT_TEMPORAL_SYSTEM_TIME - 797)) | (1L << (CURRENT_TIME - 797)) | (1L << (CURRENT_TIMESTAMP - 797)) | (1L << (CURRENT_TIME_ZONE - 797)) | (1L << (ENCRYPTION_PASSWORD - 797)) | (1L << (SESSION_TIME_ZONE - 797)) | (1L << (SESSION_USER - 797)) | (1L << (USER - 797)) | (1L << (ADMIN_TASK_LIST - 797)) | (1L << (ADMIN_TASK_OUTPUT - 797)) | (1L << (ADMIN_TASK_STATUS - 797)) | (1L << (BLOCKING_THREADS - 797)) | (1L << (MQREADALL - 797)) | (1L << (MQREADALLCLOB - 797)) | (1L << (MQRECEIVEALL - 797)) | (1L << (MQRECEIVEALLCLOB - 797)) | (1L << (XMLTABLE - 797)) | (1L << (SQLIDENTIFIER - 797)))) != 0)) {
						{
						setState(3401);
						parameterType();
						setState(3406);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(3402);
							match(COMMA);
							setState(3403);
							parameterType();
							}
							}
							setState(3408);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
					}

					setState(3411);
					match(RPAREN);
					}
				}

				}
				}
				break;
			case SPECIFIC:
				{
				{
				setState(3414);
				match(SPECIFIC);
				setState(3415);
				match(FUNCTION);
				setState(3416);
				specificName();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterTypeContext extends ParserRuleContext {
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode LOCATOR() { return getToken(DB2zSQLParser.LOCATOR, 0); }
		public ParameterTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterParameterType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitParameterType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitParameterType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParameterTypeContext parameterType() throws RecognitionException {
		ParameterTypeContext _localctx = new ParameterTypeContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_parameterType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3419);
			dataType();
			setState(3422);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(3420);
				match(AS);
				setState(3421);
				match(LOCATOR);
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnDefinitionOptionList1Context extends ParserRuleContext {
		public DefaultClause1Context defaultClause1() {
			return getRuleContext(DefaultClause1Context.class,0);
		}
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public ColumnConstraintContext columnConstraint() {
			return getRuleContext(ColumnConstraintContext.class,0);
		}
		public GeneratedClauseContext generatedClause() {
			return getRuleContext(GeneratedClauseContext.class,0);
		}
		public TerminalNode IMPLICITLY() { return getToken(DB2zSQLParser.IMPLICITLY, 0); }
		public TerminalNode HIDDEN_() { return getToken(DB2zSQLParser.HIDDEN_, 0); }
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode SECURITY() { return getToken(DB2zSQLParser.SECURITY, 0); }
		public TerminalNode LABEL() { return getToken(DB2zSQLParser.LABEL, 0); }
		public TerminalNode FIELDPROC() { return getToken(DB2zSQLParser.FIELDPROC, 0); }
		public ProgramNameContext programName() {
			return getRuleContext(ProgramNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<LiteralContext> literal() {
			return getRuleContexts(LiteralContext.class);
		}
		public LiteralContext literal(int i) {
			return getRuleContext(LiteralContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode INLINE() { return getToken(DB2zSQLParser.INLINE, 0); }
		public TerminalNode LENGTH() { return getToken(DB2zSQLParser.LENGTH, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public ColumnDefinitionOptionList1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDefinitionOptionList1; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterColumnDefinitionOptionList1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitColumnDefinitionOptionList1(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitColumnDefinitionOptionList1(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnDefinitionOptionList1Context columnDefinitionOptionList1() throws RecognitionException {
		ColumnDefinitionOptionList1Context _localctx = new ColumnDefinitionOptionList1Context(_ctx, getState());
		enterRule(_localctx, 226, RULE_columnDefinitionOptionList1);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3450);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFAULT:
			case WITH:
				{
				{
				setState(3424);
				defaultClause1();
				}
				}
				break;
			case NOT:
				{
				{
				setState(3425);
				match(NOT);
				setState(3426);
				match(NULL);
				}
				}
				break;
			case CHECK:
			case CONSTRAINT:
			case REFERENCES:
				{
				{
				setState(3427);
				columnConstraint();
				}
				}
				break;
			case GENERATED:
				{
				{
				setState(3428);
				generatedClause();
				}
				}
				break;
			case IMPLICITLY:
				{
				{
				setState(3429);
				match(IMPLICITLY);
				setState(3430);
				match(HIDDEN_);
				}
				}
				break;
			case AS:
				{
				{
				setState(3431);
				match(AS);
				setState(3432);
				match(SECURITY);
				setState(3433);
				match(LABEL);
				}
				}
				break;
			case FIELDPROC:
				{
				{
				setState(3434);
				match(FIELDPROC);
				setState(3435);
				programName();
				setState(3436);
				match(LPAREN);
				setState(3437);
				literal();
				setState(3442);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3438);
					match(COMMA);
					setState(3439);
					literal();
					}
					}
					setState(3444);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3445);
				match(RPAREN);
				}
				}
				break;
			case INLINE:
				{
				{
				setState(3447);
				match(INLINE);
				setState(3448);
				match(LENGTH);
				setState(3449);
				match(INTEGERLITERAL);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnDefinitionOptionList2Context extends ParserRuleContext {
		public DefaultClause2Context defaultClause2() {
			return getRuleContext(DefaultClause2Context.class,0);
		}
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public ColumnConstraintContext columnConstraint() {
			return getRuleContext(ColumnConstraintContext.class,0);
		}
		public GeneratedClauseContext generatedClause() {
			return getRuleContext(GeneratedClauseContext.class,0);
		}
		public TerminalNode IMPLICITLY() { return getToken(DB2zSQLParser.IMPLICITLY, 0); }
		public TerminalNode HIDDEN_() { return getToken(DB2zSQLParser.HIDDEN_, 0); }
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode SECURITY() { return getToken(DB2zSQLParser.SECURITY, 0); }
		public TerminalNode LABEL() { return getToken(DB2zSQLParser.LABEL, 0); }
		public TerminalNode FIELDPROC() { return getToken(DB2zSQLParser.FIELDPROC, 0); }
		public ProgramNameContext programName() {
			return getRuleContext(ProgramNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<LiteralContext> literal() {
			return getRuleContexts(LiteralContext.class);
		}
		public LiteralContext literal(int i) {
			return getRuleContext(LiteralContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode INLINE() { return getToken(DB2zSQLParser.INLINE, 0); }
		public TerminalNode LENGTH() { return getToken(DB2zSQLParser.LENGTH, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public ColumnDefinitionOptionList2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDefinitionOptionList2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterColumnDefinitionOptionList2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitColumnDefinitionOptionList2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitColumnDefinitionOptionList2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnDefinitionOptionList2Context columnDefinitionOptionList2() throws RecognitionException {
		ColumnDefinitionOptionList2Context _localctx = new ColumnDefinitionOptionList2Context(_ctx, getState());
		enterRule(_localctx, 228, RULE_columnDefinitionOptionList2);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3478);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFAULT:
			case WITH:
				{
				{
				setState(3452);
				defaultClause2();
				}
				}
				break;
			case NOT:
				{
				{
				setState(3453);
				match(NOT);
				setState(3454);
				match(NULL);
				}
				}
				break;
			case CHECK:
			case CONSTRAINT:
			case REFERENCES:
				{
				{
				setState(3455);
				columnConstraint();
				}
				}
				break;
			case GENERATED:
				{
				{
				setState(3456);
				generatedClause();
				}
				}
				break;
			case IMPLICITLY:
				{
				{
				setState(3457);
				match(IMPLICITLY);
				setState(3458);
				match(HIDDEN_);
				}
				}
				break;
			case AS:
				{
				{
				setState(3459);
				match(AS);
				setState(3460);
				match(SECURITY);
				setState(3461);
				match(LABEL);
				}
				}
				break;
			case FIELDPROC:
				{
				{
				setState(3462);
				match(FIELDPROC);
				setState(3463);
				programName();
				setState(3464);
				match(LPAREN);
				setState(3465);
				literal();
				setState(3470);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3466);
					match(COMMA);
					setState(3467);
					literal();
					}
					}
					setState(3472);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3473);
				match(RPAREN);
				}
				}
				break;
			case INLINE:
				{
				{
				setState(3475);
				match(INLINE);
				setState(3476);
				match(LENGTH);
				setState(3477);
				match(INTEGERLITERAL);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnConstraintContext extends ParserRuleContext {
		public ReferencesClauseContext referencesClause() {
			return getRuleContext(ReferencesClauseContext.class,0);
		}
		public CheckConstraintContext checkConstraint() {
			return getRuleContext(CheckConstraintContext.class,0);
		}
		public ColumnConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnConstraintContext columnConstraint() throws RecognitionException {
		ColumnConstraintContext _localctx = new ColumnConstraintContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_columnConstraint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3482);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REFERENCES:
				{
				setState(3480);
				referencesClause();
				}
				break;
			case CHECK:
			case CONSTRAINT:
				{
				setState(3481);
				checkConstraint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GeneratedClauseContext extends ParserRuleContext {
		public TerminalNode GENERATED() { return getToken(DB2zSQLParser.GENERATED, 0); }
		public TerminalNode ALWAYS() { return getToken(DB2zSQLParser.ALWAYS, 0); }
		public AsIdentityClauseContext asIdentityClause() {
			return getRuleContext(AsIdentityClauseContext.class,0);
		}
		public AsRowChangeTimestampClauseContext asRowChangeTimestampClause() {
			return getRuleContext(AsRowChangeTimestampClauseContext.class,0);
		}
		public AsRowTransactionStartIDClauseContext asRowTransactionStartIDClause() {
			return getRuleContext(AsRowTransactionStartIDClauseContext.class,0);
		}
		public AsRowTransactionTimestampClauseContext asRowTransactionTimestampClause() {
			return getRuleContext(AsRowTransactionTimestampClauseContext.class,0);
		}
		public AsGeneratedExpressionClauseContext asGeneratedExpressionClause() {
			return getRuleContext(AsGeneratedExpressionClauseContext.class,0);
		}
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public TerminalNode DEFAULT() { return getToken(DB2zSQLParser.DEFAULT, 0); }
		public GeneratedClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generatedClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGeneratedClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGeneratedClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGeneratedClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GeneratedClauseContext generatedClause() throws RecognitionException {
		GeneratedClauseContext _localctx = new GeneratedClauseContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_generatedClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3503);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,387,_ctx) ) {
			case 1:
				{
				{
				setState(3484);
				match(GENERATED);
				setState(3488);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALWAYS:
					{
					setState(3485);
					match(ALWAYS);
					}
					break;
				case BY:
					{
					{
					setState(3486);
					match(BY);
					setState(3487);
					match(DEFAULT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3492);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AS:
					{
					setState(3490);
					asIdentityClause();
					}
					break;
				case FOR:
					{
					setState(3491);
					asRowChangeTimestampClause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case 2:
				{
				{
				setState(3494);
				match(GENERATED);
				setState(3496);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALWAYS) {
					{
					setState(3495);
					match(ALWAYS);
					}
				}

				setState(3501);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,386,_ctx) ) {
				case 1:
					{
					setState(3498);
					asRowTransactionStartIDClause();
					}
					break;
				case 2:
					{
					setState(3499);
					asRowTransactionTimestampClause();
					}
					break;
				case 3:
					{
					setState(3500);
					asGeneratedExpressionClause();
					}
					break;
				}
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AsIdentityClauseContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode IDENTITY() { return getToken(DB2zSQLParser.IDENTITY, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<AsIdentityClauseOptionListContext> asIdentityClauseOptionList() {
			return getRuleContexts(AsIdentityClauseOptionListContext.class);
		}
		public AsIdentityClauseOptionListContext asIdentityClauseOptionList(int i) {
			return getRuleContext(AsIdentityClauseOptionListContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public AsIdentityClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asIdentityClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAsIdentityClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAsIdentityClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAsIdentityClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AsIdentityClauseContext asIdentityClause() throws RecognitionException {
		AsIdentityClauseContext _localctx = new AsIdentityClauseContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_asIdentityClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3505);
			match(AS);
			setState(3506);
			match(IDENTITY);
			setState(3507);
			match(LPAREN);
			setState(3508);
			asIdentityClauseOptionList();
			setState(3515);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA || _la==NO || _la==ORDER || ((((_la - 463)) & ~0x3f) == 0 && ((1L << (_la - 463)) & ((1L << (MAXVALUE - 463)) | (1L << (MINVALUE - 463)) | (1L << (CACHE - 463)) | (1L << (CYCLE - 463)) | (1L << (INCREMENT - 463)) | (1L << (START - 463)))) != 0)) {
				{
				{
				setState(3510);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3509);
					match(COMMA);
					}
				}

				setState(3512);
				asIdentityClauseOptionList();
				}
				}
				setState(3517);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3518);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AsIdentityClauseOptionListContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(DB2zSQLParser.START, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode INCREMENT() { return getToken(DB2zSQLParser.INCREMENT, 0); }
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public TerminalNode CYCLE() { return getToken(DB2zSQLParser.CYCLE, 0); }
		public TerminalNode ORDER() { return getToken(DB2zSQLParser.ORDER, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode MINVALUE() { return getToken(DB2zSQLParser.MINVALUE, 0); }
		public TerminalNode MAXVALUE() { return getToken(DB2zSQLParser.MAXVALUE, 0); }
		public TerminalNode CACHE() { return getToken(DB2zSQLParser.CACHE, 0); }
		public AsIdentityClauseOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asIdentityClauseOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAsIdentityClauseOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAsIdentityClauseOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAsIdentityClauseOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AsIdentityClauseOptionListContext asIdentityClauseOptionList() throws RecognitionException {
		AsIdentityClauseOptionListContext _localctx = new AsIdentityClauseOptionListContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_asIdentityClauseOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3552);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,395,_ctx) ) {
			case 1:
				{
				{
				setState(3520);
				match(START);
				setState(3521);
				match(WITH);
				setState(3522);
				match(INTEGERLITERAL);
				}
				}
				break;
			case 2:
				{
				{
				setState(3523);
				match(INCREMENT);
				setState(3524);
				match(BY);
				setState(3525);
				match(INTEGERLITERAL);
				}
				}
				break;
			case 3:
				{
				setState(3530);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NO:
					{
					{
					setState(3526);
					match(NO);
					setState(3527);
					match(MINVALUE);
					}
					}
					break;
				case MINVALUE:
					{
					{
					setState(3528);
					match(MINVALUE);
					setState(3529);
					match(INTEGERLITERAL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				{
				setState(3536);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NO:
					{
					{
					setState(3532);
					match(NO);
					setState(3533);
					match(MAXVALUE);
					}
					}
					break;
				case MAXVALUE:
					{
					{
					setState(3534);
					match(MAXVALUE);
					setState(3535);
					match(INTEGERLITERAL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 5:
				{
				{
				setState(3539);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3538);
					match(NO);
					}
				}

				setState(3541);
				match(CYCLE);
				}
				}
				break;
			case 6:
				{
				setState(3546);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NO:
					{
					{
					setState(3542);
					match(NO);
					setState(3543);
					match(CACHE);
					}
					}
					break;
				case CACHE:
					{
					{
					setState(3544);
					match(CACHE);
					setState(3545);
					match(INTEGERLITERAL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 7:
				{
				{
				setState(3549);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3548);
					match(NO);
					}
				}

				setState(3551);
				match(ORDER);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AsRowChangeTimestampClauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode EACH() { return getToken(DB2zSQLParser.EACH, 0); }
		public List<TerminalNode> ROW() { return getTokens(DB2zSQLParser.ROW); }
		public TerminalNode ROW(int i) {
			return getToken(DB2zSQLParser.ROW, i);
		}
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(DB2zSQLParser.UPDATE, 0); }
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode CHANGE() { return getToken(DB2zSQLParser.CHANGE, 0); }
		public TerminalNode TIMESTAMP() { return getToken(DB2zSQLParser.TIMESTAMP, 0); }
		public AsRowChangeTimestampClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asRowChangeTimestampClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAsRowChangeTimestampClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAsRowChangeTimestampClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAsRowChangeTimestampClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AsRowChangeTimestampClauseContext asRowChangeTimestampClause() throws RecognitionException {
		AsRowChangeTimestampClauseContext _localctx = new AsRowChangeTimestampClauseContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_asRowChangeTimestampClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3554);
			match(FOR);
			setState(3555);
			match(EACH);
			setState(3556);
			match(ROW);
			setState(3557);
			match(ON);
			setState(3558);
			match(UPDATE);
			setState(3559);
			match(AS);
			setState(3560);
			match(ROW);
			setState(3561);
			match(CHANGE);
			setState(3562);
			match(TIMESTAMP);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AsRowTransactionStartIDClauseContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode TRANSACTION() { return getToken(DB2zSQLParser.TRANSACTION, 0); }
		public TerminalNode START() { return getToken(DB2zSQLParser.START, 0); }
		public TerminalNode ID() { return getToken(DB2zSQLParser.ID, 0); }
		public AsRowTransactionStartIDClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asRowTransactionStartIDClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAsRowTransactionStartIDClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAsRowTransactionStartIDClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAsRowTransactionStartIDClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AsRowTransactionStartIDClauseContext asRowTransactionStartIDClause() throws RecognitionException {
		AsRowTransactionStartIDClauseContext _localctx = new AsRowTransactionStartIDClauseContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_asRowTransactionStartIDClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3564);
			match(AS);
			setState(3565);
			match(TRANSACTION);
			setState(3566);
			match(START);
			setState(3567);
			match(ID);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AsRowTransactionTimestampClauseContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode ROW() { return getToken(DB2zSQLParser.ROW, 0); }
		public TerminalNode BEGIN() { return getToken(DB2zSQLParser.BEGIN, 0); }
		public TerminalNode START() { return getToken(DB2zSQLParser.START, 0); }
		public TerminalNode END() { return getToken(DB2zSQLParser.END, 0); }
		public AsRowTransactionTimestampClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asRowTransactionTimestampClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAsRowTransactionTimestampClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAsRowTransactionTimestampClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAsRowTransactionTimestampClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AsRowTransactionTimestampClauseContext asRowTransactionTimestampClause() throws RecognitionException {
		AsRowTransactionTimestampClauseContext _localctx = new AsRowTransactionTimestampClauseContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_asRowTransactionTimestampClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3569);
			match(AS);
			setState(3570);
			match(ROW);
			setState(3571);
			_la = _input.LA(1);
			if ( !(_la==BEGIN || _la==END || _la==START) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AsGeneratedExpressionClauseContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public NonDeterministicExpressionContext nonDeterministicExpression() {
			return getRuleContext(NonDeterministicExpressionContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public AsGeneratedExpressionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asGeneratedExpressionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAsGeneratedExpressionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAsGeneratedExpressionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAsGeneratedExpressionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AsGeneratedExpressionClauseContext asGeneratedExpressionClause() throws RecognitionException {
		AsGeneratedExpressionClauseContext _localctx = new AsGeneratedExpressionClauseContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_asGeneratedExpressionClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3573);
			match(AS);
			setState(3574);
			match(LPAREN);
			setState(3575);
			nonDeterministicExpression();
			setState(3576);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NonDeterministicExpressionContext extends ParserRuleContext {
		public SpecialRegisterContext specialRegister() {
			return getRuleContext(SpecialRegisterContext.class,0);
		}
		public NonDeterministicExpressionSessionVariableContext nonDeterministicExpressionSessionVariable() {
			return getRuleContext(NonDeterministicExpressionSessionVariableContext.class,0);
		}
		public TerminalNode DATA() { return getToken(DB2zSQLParser.DATA, 0); }
		public TerminalNode CHANGE() { return getToken(DB2zSQLParser.CHANGE, 0); }
		public TerminalNode OPERATION() { return getToken(DB2zSQLParser.OPERATION, 0); }
		public NonDeterministicExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonDeterministicExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterNonDeterministicExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitNonDeterministicExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitNonDeterministicExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NonDeterministicExpressionContext nonDeterministicExpression() throws RecognitionException {
		NonDeterministicExpressionContext _localctx = new NonDeterministicExpressionContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_nonDeterministicExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3583);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATA:
				{
				{
				setState(3578);
				match(DATA);
				setState(3579);
				match(CHANGE);
				setState(3580);
				match(OPERATION);
				}
				}
				break;
			case CURRENT_ACCELERATOR:
			case CURRENT_APPLICATION_COMPATIBILITY:
			case CURRENT_APPLICATION_ENCODING_SCHEME:
			case CURRENT_CLIENT_ACCTNG:
			case CURRENT_CLIENT_APPLNAME:
			case CURRENT_CLIENT_CORR_TOKEN:
			case CURRENT_CLIENT_USERID:
			case CURRENT_CLIENT_WRKSTNNAME:
			case CURRENT_DATE:
			case CURRENT_DEBUG_MODE:
			case CURRENT_DECFLOAT_ROUNDING_MODE:
			case CURRENT_DEGREE:
			case CURRENT_EXPLAIN_MODE:
			case CURRENT_GET_ACCEL_ARCHIVE:
			case CURRENT_LOCALE_LC_CTYPE:
			case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
			case CURRENT_MEMBER:
			case CURRENT_OPTIMIZATION_HINT:
			case CURRENT_PACKAGE_PATH:
			case CURRENT_PACKAGESET:
			case CURRENT_PATH:
			case CURRENT_PRECISION:
			case CURRENT_QUERY_ACCELERATION:
			case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
			case CURRENT_REFRESH_AGE:
			case CURRENT_ROUTINE_VERSION:
			case CURRENT_RULES:
			case CURRENT_SCHEMA:
			case CURRENT_SERVER:
			case CURRENT_SQLID:
			case CURRENT_TEMPORAL_BUSINESS_TIME:
			case CURRENT_TEMPORAL_SYSTEM_TIME:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_TIME_ZONE:
			case ENCRYPTION_PASSWORD:
			case SESSION_TIME_ZONE:
			case SESSION_USER:
			case USER:
				{
				setState(3581);
				specialRegister();
				}
				break;
			case SYSIBM:
				{
				setState(3582);
				nonDeterministicExpressionSessionVariable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NonDeterministicExpressionSessionVariableContext extends ParserRuleContext {
		public TerminalNode SYSIBM() { return getToken(DB2zSQLParser.SYSIBM, 0); }
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public TerminalNode PACKAGE_NAME() { return getToken(DB2zSQLParser.PACKAGE_NAME, 0); }
		public TerminalNode PACKAGE_SCHEMA() { return getToken(DB2zSQLParser.PACKAGE_SCHEMA, 0); }
		public TerminalNode PACKAGE_VERSION() { return getToken(DB2zSQLParser.PACKAGE_VERSION, 0); }
		public NonDeterministicExpressionSessionVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonDeterministicExpressionSessionVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterNonDeterministicExpressionSessionVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitNonDeterministicExpressionSessionVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitNonDeterministicExpressionSessionVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NonDeterministicExpressionSessionVariableContext nonDeterministicExpressionSessionVariable() throws RecognitionException {
		NonDeterministicExpressionSessionVariableContext _localctx = new NonDeterministicExpressionSessionVariableContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_nonDeterministicExpressionSessionVariable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3594);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,397,_ctx) ) {
			case 1:
				{
				{
				setState(3585);
				match(SYSIBM);
				setState(3586);
				match(DOT);
				setState(3587);
				match(PACKAGE_NAME);
				}
				}
				break;
			case 2:
				{
				{
				setState(3588);
				match(SYSIBM);
				setState(3589);
				match(DOT);
				setState(3590);
				match(PACKAGE_SCHEMA);
				}
				}
				break;
			case 3:
				{
				{
				setState(3591);
				match(SYSIBM);
				setState(3592);
				match(DOT);
				setState(3593);
				match(PACKAGE_VERSION);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnAlterationContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public List<ColumnAlterationOptionListContext> columnAlterationOptionList() {
			return getRuleContexts(ColumnAlterationOptionListContext.class);
		}
		public ColumnAlterationOptionListContext columnAlterationOptionList(int i) {
			return getRuleContext(ColumnAlterationOptionListContext.class,i);
		}
		public ColumnAlterationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnAlteration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterColumnAlteration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitColumnAlteration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitColumnAlteration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnAlterationContext columnAlteration() throws RecognitionException {
		ColumnAlterationContext _localctx = new ColumnAlterationContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_columnAlteration);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3596);
			columnName();
			setState(3598); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(3597);
					columnAlterationOptionList();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3600); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,398,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnAlterationOptionListContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public TerminalNode DATA() { return getToken(DB2zSQLParser.DATA, 0); }
		public TerminalNode TYPE() { return getToken(DB2zSQLParser.TYPE, 0); }
		public AlteredDataTypeContext alteredDataType() {
			return getRuleContext(AlteredDataTypeContext.class,0);
		}
		public DefaultClauseContext defaultClause() {
			return getRuleContext(DefaultClauseContext.class,0);
		}
		public TerminalNode INLINE() { return getToken(DB2zSQLParser.INLINE, 0); }
		public TerminalNode LENGTH() { return getToken(DB2zSQLParser.LENGTH, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode GENERATED() { return getToken(DB2zSQLParser.GENERATED, 0); }
		public IdentityAlterationContext identityAlteration() {
			return getRuleContext(IdentityAlterationContext.class,0);
		}
		public TerminalNode DROP() { return getToken(DB2zSQLParser.DROP, 0); }
		public TerminalNode DEFAULT() { return getToken(DB2zSQLParser.DEFAULT, 0); }
		public TerminalNode ALWAYS() { return getToken(DB2zSQLParser.ALWAYS, 0); }
		public AsRowTransactionTimestampClauseContext asRowTransactionTimestampClause() {
			return getRuleContext(AsRowTransactionTimestampClauseContext.class,0);
		}
		public AsRowTransactionStartIDClauseContext asRowTransactionStartIDClause() {
			return getRuleContext(AsRowTransactionStartIDClauseContext.class,0);
		}
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public ColumnAlterationOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnAlterationOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterColumnAlterationOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitColumnAlterationOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitColumnAlterationOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnAlterationOptionListContext columnAlterationOptionList() throws RecognitionException {
		ColumnAlterationOptionListContext _localctx = new ColumnAlterationOptionListContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_columnAlterationOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3639);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,404,_ctx) ) {
			case 1:
				{
				{
				setState(3602);
				match(SET);
				setState(3603);
				match(DATA);
				setState(3604);
				match(TYPE);
				setState(3605);
				alteredDataType();
				setState(3609);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INLINE) {
					{
					setState(3606);
					match(INLINE);
					setState(3607);
					match(LENGTH);
					setState(3608);
					match(INTEGERLITERAL);
					}
				}

				}
				}
				break;
			case 2:
				{
				{
				setState(3611);
				match(SET);
				setState(3612);
				defaultClause();
				}
				}
				break;
			case 3:
				{
				{
				setState(3613);
				match(SET);
				setState(3614);
				match(INLINE);
				setState(3615);
				match(LENGTH);
				setState(3616);
				match(INTEGERLITERAL);
				}
				}
				break;
			case 4:
				{
				{
				setState(3617);
				match(SET);
				setState(3618);
				match(GENERATED);
				setState(3622);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALWAYS:
					{
					setState(3619);
					match(ALWAYS);
					}
					break;
				case BY:
					{
					{
					setState(3620);
					match(BY);
					setState(3621);
					match(DEFAULT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3625);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,401,_ctx) ) {
				case 1:
					{
					setState(3624);
					identityAlteration();
					}
					break;
				}
				}
				}
				break;
			case 5:
				{
				{
				setState(3627);
				identityAlteration();
				}
				}
				break;
			case 6:
				{
				{
				setState(3628);
				match(SET);
				setState(3629);
				match(GENERATED);
				setState(3631);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALWAYS) {
					{
					setState(3630);
					match(ALWAYS);
					}
				}

				setState(3635);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,403,_ctx) ) {
				case 1:
					{
					setState(3633);
					asRowTransactionTimestampClause();
					}
					break;
				case 2:
					{
					setState(3634);
					asRowTransactionStartIDClause();
					}
					break;
				}
				}
				}
				break;
			case 7:
				{
				{
				setState(3637);
				match(DROP);
				setState(3638);
				match(DEFAULT);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlteredDataTypeContext extends ParserRuleContext {
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public AlteredDataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alteredDataType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlteredDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlteredDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlteredDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlteredDataTypeContext alteredDataType() throws RecognitionException {
		AlteredDataTypeContext _localctx = new AlteredDataTypeContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_alteredDataType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3641);
			dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeContext extends ParserRuleContext {
		public BuiltInTypeContext builtInType() {
			return getRuleContext(BuiltInTypeContext.class,0);
		}
		public DistinctTypeNameContext distinctTypeName() {
			return getRuleContext(DistinctTypeNameContext.class,0);
		}
		public DataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeContext dataType() throws RecognitionException {
		DataTypeContext _localctx = new DataTypeContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_dataType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3645);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,405,_ctx) ) {
			case 1:
				{
				setState(3643);
				builtInType();
				}
				break;
			case 2:
				{
				setState(3644);
				distinctTypeName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BuiltInTypeContext extends ParserRuleContext {
		public TerminalNode SMALLINT() { return getToken(DB2zSQLParser.SMALLINT, 0); }
		public TerminalNode INTEGER() { return getToken(DB2zSQLParser.INTEGER, 0); }
		public TerminalNode INT() { return getToken(DB2zSQLParser.INT, 0); }
		public TerminalNode BIGINT() { return getToken(DB2zSQLParser.BIGINT, 0); }
		public TerminalNode REAL() { return getToken(DB2zSQLParser.REAL, 0); }
		public TerminalNode DATE() { return getToken(DB2zSQLParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(DB2zSQLParser.TIME, 0); }
		public TerminalNode ROWID() { return getToken(DB2zSQLParser.ROWID, 0); }
		public TerminalNode DECFLOAT() { return getToken(DB2zSQLParser.DECFLOAT, 0); }
		public TerminalNode FLOAT() { return getToken(DB2zSQLParser.FLOAT, 0); }
		public TerminalNode DOUBLE() { return getToken(DB2zSQLParser.DOUBLE, 0); }
		public TerminalNode BINARY() { return getToken(DB2zSQLParser.BINARY, 0); }
		public TerminalNode TIMESTAMP() { return getToken(DB2zSQLParser.TIMESTAMP, 0); }
		public TerminalNode XML() { return getToken(DB2zSQLParser.XML, 0); }
		public TerminalNode DECIMAL() { return getToken(DB2zSQLParser.DECIMAL, 0); }
		public TerminalNode DEC() { return getToken(DB2zSQLParser.DEC, 0); }
		public TerminalNode NUMERIC() { return getToken(DB2zSQLParser.NUMERIC, 0); }
		public TerminalNode GRAPHIC() { return getToken(DB2zSQLParser.GRAPHIC, 0); }
		public TerminalNode VARGRAPHIC() { return getToken(DB2zSQLParser.VARGRAPHIC, 0); }
		public TerminalNode DBCLOB() { return getToken(DB2zSQLParser.DBCLOB, 0); }
		public IntegerInParensContext integerInParens() {
			return getRuleContext(IntegerInParensContext.class,0);
		}
		public TerminalNode VARCHAR() { return getToken(DB2zSQLParser.VARCHAR, 0); }
		public TerminalNode CLOB() { return getToken(DB2zSQLParser.CLOB, 0); }
		public TerminalNode VARBINARY() { return getToken(DB2zSQLParser.VARBINARY, 0); }
		public TerminalNode BLOB() { return getToken(DB2zSQLParser.BLOB, 0); }
		public TerminalNode PRECISION() { return getToken(DB2zSQLParser.PRECISION, 0); }
		public LengthContext length() {
			return getRuleContext(LengthContext.class,0);
		}
		public ForDataQualifierContext forDataQualifier() {
			return getRuleContext(ForDataQualifierContext.class,0);
		}
		public TerminalNode CCSID() { return getToken(DB2zSQLParser.CCSID, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode ZONE() { return getToken(DB2zSQLParser.ZONE, 0); }
		public XmlTypeModifierContext xmlTypeModifier() {
			return getRuleContext(XmlTypeModifierContext.class,0);
		}
		public TerminalNode LARGE() { return getToken(DB2zSQLParser.LARGE, 0); }
		public TerminalNode OBJECT() { return getToken(DB2zSQLParser.OBJECT, 0); }
		public TerminalNode SQLIDENTIFIER() { return getToken(DB2zSQLParser.SQLIDENTIFIER, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode WITHOUT() { return getToken(DB2zSQLParser.WITHOUT, 0); }
		public TerminalNode CHARACTER() { return getToken(DB2zSQLParser.CHARACTER, 0); }
		public TerminalNode CHAR() { return getToken(DB2zSQLParser.CHAR, 0); }
		public TerminalNode VARYING() { return getToken(DB2zSQLParser.VARYING, 0); }
		public BuiltInTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_builtInType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterBuiltInType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitBuiltInType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitBuiltInType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BuiltInTypeContext builtInType() throws RecognitionException {
		BuiltInTypeContext _localctx = new BuiltInTypeContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_builtInType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3765);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,428,_ctx) ) {
			case 1:
				{
				setState(3647);
				match(SMALLINT);
				}
				break;
			case 2:
				{
				setState(3648);
				match(INTEGER);
				}
				break;
			case 3:
				{
				setState(3649);
				match(INT);
				}
				break;
			case 4:
				{
				setState(3650);
				match(BIGINT);
				}
				break;
			case 5:
				{
				{
				setState(3651);
				_la = _input.LA(1);
				if ( !(_la==NUMERIC || _la==DEC || _la==DECIMAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3655);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,406,_ctx) ) {
				case 1:
					{
					setState(3652);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(3653);
					match(LPAREN);
					setState(3654);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 6:
				{
				{
				setState(3657);
				match(DECFLOAT);
				setState(3661);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,407,_ctx) ) {
				case 1:
					{
					setState(3658);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(3659);
					match(LPAREN);
					setState(3660);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 7:
				{
				{
				setState(3663);
				match(FLOAT);
				setState(3667);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,408,_ctx) ) {
				case 1:
					{
					setState(3664);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(3665);
					match(LPAREN);
					setState(3666);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 8:
				{
				setState(3669);
				match(REAL);
				}
				break;
			case 9:
				{
				{
				setState(3670);
				match(DOUBLE);
				setState(3672);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,409,_ctx) ) {
				case 1:
					{
					setState(3671);
					match(PRECISION);
					}
					break;
				}
				}
				}
				break;
			case 10:
				{
				{
				setState(3679);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHAR:
				case CHARACTER:
					{
					{
					setState(3674);
					_la = _input.LA(1);
					if ( !(_la==CHAR || _la==CHARACTER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(3676);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,410,_ctx) ) {
					case 1:
						{
						setState(3675);
						match(VARYING);
						}
						break;
					}
					}
					}
					break;
				case VARCHAR:
					{
					setState(3678);
					match(VARCHAR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3684);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,412,_ctx) ) {
				case 1:
					{
					setState(3681);
					length();
					}
					break;
				case 2:
					{
					{
					setState(3682);
					match(LPAREN);
					setState(3683);
					match(RPAREN);
					}
					}
					break;
				}
				setState(3689);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,413,_ctx) ) {
				case 1:
					{
					setState(3686);
					forDataQualifier();
					}
					break;
				case 2:
					{
					{
					setState(3687);
					match(CCSID);
					setState(3688);
					match(INTEGERLITERAL);
					}
					}
					break;
				}
				}
				}
				break;
			case 11:
				{
				{
				setState(3695);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHAR:
				case CHARACTER:
					{
					{
					setState(3691);
					_la = _input.LA(1);
					if ( !(_la==CHAR || _la==CHARACTER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(3692);
					match(LARGE);
					setState(3693);
					match(OBJECT);
					}
					}
					break;
				case CLOB:
					{
					setState(3694);
					match(CLOB);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3700);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,415,_ctx) ) {
				case 1:
					{
					setState(3697);
					length();
					}
					break;
				case 2:
					{
					{
					setState(3698);
					match(LPAREN);
					setState(3699);
					match(RPAREN);
					}
					}
					break;
				}
				setState(3705);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,416,_ctx) ) {
				case 1:
					{
					setState(3702);
					forDataQualifier();
					}
					break;
				case 2:
					{
					{
					setState(3703);
					match(CCSID);
					setState(3704);
					match(INTEGERLITERAL);
					}
					}
					break;
				}
				}
				}
				break;
			case 12:
				{
				{
				setState(3707);
				_la = _input.LA(1);
				if ( !(_la==DBCLOB || _la==GRAPHIC || _la==VARGRAPHIC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3711);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,417,_ctx) ) {
				case 1:
					{
					setState(3708);
					length();
					}
					break;
				case 2:
					{
					{
					setState(3709);
					match(LPAREN);
					setState(3710);
					match(RPAREN);
					}
					}
					break;
				}
				setState(3715);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,418,_ctx) ) {
				case 1:
					{
					setState(3713);
					match(CCSID);
					setState(3714);
					match(INTEGERLITERAL);
					}
					break;
				}
				}
				}
				break;
			case 13:
				{
				{
				setState(3717);
				match(BINARY);
				setState(3721);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,419,_ctx) ) {
				case 1:
					{
					setState(3718);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(3719);
					match(LPAREN);
					setState(3720);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 14:
				{
				{
				setState(3728);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
					{
					{
					setState(3723);
					match(BINARY);
					setState(3725);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,420,_ctx) ) {
					case 1:
						{
						setState(3724);
						match(VARYING);
						}
						break;
					}
					}
					}
					break;
				case VARBINARY:
					{
					setState(3727);
					match(VARBINARY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3733);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,422,_ctx) ) {
				case 1:
					{
					setState(3730);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(3731);
					match(LPAREN);
					setState(3732);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 15:
				{
				{
				setState(3739);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
					{
					{
					setState(3735);
					match(BINARY);
					setState(3736);
					match(LARGE);
					setState(3737);
					match(OBJECT);
					}
					}
					break;
				case BLOB:
					{
					setState(3738);
					match(BLOB);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3744);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,424,_ctx) ) {
				case 1:
					{
					setState(3741);
					match(LPAREN);
					setState(3742);
					_la = _input.LA(1);
					if ( !(_la==INTEGERLITERAL || _la==SQLIDENTIFIER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(3743);
					match(RPAREN);
					}
					break;
				}
				}
				}
				break;
			case 16:
				{
				setState(3746);
				match(DATE);
				}
				break;
			case 17:
				{
				setState(3747);
				match(TIME);
				}
				break;
			case 18:
				{
				{
				setState(3748);
				match(TIMESTAMP);
				setState(3750);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,425,_ctx) ) {
				case 1:
					{
					setState(3749);
					integerInParens();
					}
					break;
				}
				setState(3755);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,426,_ctx) ) {
				case 1:
					{
					setState(3752);
					_la = _input.LA(1);
					if ( !(_la==WITH || _la==WITHOUT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(3753);
					match(TIME);
					setState(3754);
					match(ZONE);
					}
					break;
				}
				}
				}
				break;
			case 19:
				{
				setState(3757);
				match(ROWID);
				}
				break;
			case 20:
				{
				{
				setState(3758);
				match(XML);
				setState(3763);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,427,_ctx) ) {
				case 1:
					{
					setState(3759);
					match(LPAREN);
					setState(3760);
					xmlTypeModifier();
					setState(3761);
					match(RPAREN);
					}
					break;
				}
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlTypeModifierContext extends ParserRuleContext {
		public TerminalNode XMLSCHEMA() { return getToken(DB2zSQLParser.XMLSCHEMA, 0); }
		public List<XmlSchemaSpecificationContext> xmlSchemaSpecification() {
			return getRuleContexts(XmlSchemaSpecificationContext.class);
		}
		public XmlSchemaSpecificationContext xmlSchemaSpecification(int i) {
			return getRuleContext(XmlSchemaSpecificationContext.class,i);
		}
		public List<TerminalNode> ELEMENT() { return getTokens(DB2zSQLParser.ELEMENT); }
		public TerminalNode ELEMENT(int i) {
			return getToken(DB2zSQLParser.ELEMENT, i);
		}
		public List<XmlElementNameContext> xmlElementName() {
			return getRuleContexts(XmlElementNameContext.class);
		}
		public XmlElementNameContext xmlElementName(int i) {
			return getRuleContext(XmlElementNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public XmlTypeModifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlTypeModifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterXmlTypeModifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitXmlTypeModifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitXmlTypeModifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlTypeModifierContext xmlTypeModifier() throws RecognitionException {
		XmlTypeModifierContext _localctx = new XmlTypeModifierContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_xmlTypeModifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3767);
			match(XMLSCHEMA);
			setState(3768);
			xmlSchemaSpecification();
			setState(3771);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELEMENT) {
				{
				setState(3769);
				match(ELEMENT);
				setState(3770);
				xmlElementName();
				}
			}

			setState(3781);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3773);
				match(COMMA);
				setState(3774);
				xmlSchemaSpecification();
				setState(3777);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELEMENT) {
					{
					setState(3775);
					match(ELEMENT);
					setState(3776);
					xmlElementName();
					}
				}

				}
				}
				setState(3783);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlSchemaSpecificationContext extends ParserRuleContext {
		public TerminalNode ID() { return getToken(DB2zSQLParser.ID, 0); }
		public RegisteredXmlSchemaNameContext registeredXmlSchemaName() {
			return getRuleContext(RegisteredXmlSchemaNameContext.class,0);
		}
		public TerminalNode LOCATION() { return getToken(DB2zSQLParser.LOCATION, 0); }
		public SchemaLocationContext schemaLocation() {
			return getRuleContext(SchemaLocationContext.class,0);
		}
		public TerminalNode URL() { return getToken(DB2zSQLParser.URL, 0); }
		public TargetNamespaceContext targetNamespace() {
			return getRuleContext(TargetNamespaceContext.class,0);
		}
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode NAMESPACE() { return getToken(DB2zSQLParser.NAMESPACE, 0); }
		public XmlSchemaSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlSchemaSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterXmlSchemaSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitXmlSchemaSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitXmlSchemaSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlSchemaSpecificationContext xmlSchemaSpecification() throws RecognitionException {
		XmlSchemaSpecificationContext _localctx = new XmlSchemaSpecificationContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_xmlSchemaSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3796);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ID:
				{
				{
				setState(3784);
				match(ID);
				setState(3785);
				registeredXmlSchemaName();
				}
				}
				break;
			case NO:
			case URL:
				{
				{
				setState(3790);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case URL:
					{
					{
					setState(3786);
					match(URL);
					setState(3787);
					targetNamespace();
					}
					}
					break;
				case NO:
					{
					{
					setState(3788);
					match(NO);
					setState(3789);
					match(NAMESPACE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3794);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCATION) {
					{
					setState(3792);
					match(LOCATION);
					setState(3793);
					schemaLocation();
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlElementNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public XmlElementNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlElementName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterXmlElementName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitXmlElementName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitXmlElementName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlElementNameContext xmlElementName() throws RecognitionException {
		XmlElementNameContext _localctx = new XmlElementNameContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_xmlElementName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3798);
			identifier();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RegisteredXmlSchemaNameContext extends ParserRuleContext {
		public TerminalNode SYSXSR() { return getToken(DB2zSQLParser.SYSXSR, 0); }
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public TerminalNode SQLIDENTIFIER() { return getToken(DB2zSQLParser.SQLIDENTIFIER, 0); }
		public RegisteredXmlSchemaNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_registeredXmlSchemaName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRegisteredXmlSchemaName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRegisteredXmlSchemaName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRegisteredXmlSchemaName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RegisteredXmlSchemaNameContext registeredXmlSchemaName() throws RecognitionException {
		RegisteredXmlSchemaNameContext _localctx = new RegisteredXmlSchemaNameContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_registeredXmlSchemaName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3800);
			match(SYSXSR);
			setState(3801);
			match(DOT);
			setState(3802);
			match(SQLIDENTIFIER);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TargetNamespaceContext extends ParserRuleContext {
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public TargetNamespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_targetNamespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTargetNamespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTargetNamespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTargetNamespace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TargetNamespaceContext targetNamespace() throws RecognitionException {
		TargetNamespaceContext _localctx = new TargetNamespaceContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_targetNamespace);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3804);
			match(NONNUMERICLITERAL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SchemaLocationContext extends ParserRuleContext {
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public SchemaLocationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaLocation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSchemaLocation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSchemaLocation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSchemaLocation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SchemaLocationContext schemaLocation() throws RecognitionException {
		SchemaLocationContext _localctx = new SchemaLocationContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_schemaLocation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3806);
			match(NONNUMERICLITERAL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentityAlterationContext extends ParserRuleContext {
		public TerminalNode RESTART() { return getToken(DB2zSQLParser.RESTART, 0); }
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public TerminalNode INCREMENT() { return getToken(DB2zSQLParser.INCREMENT, 0); }
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode CYCLE() { return getToken(DB2zSQLParser.CYCLE, 0); }
		public TerminalNode ORDER() { return getToken(DB2zSQLParser.ORDER, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode MINVALUE() { return getToken(DB2zSQLParser.MINVALUE, 0); }
		public TerminalNode MAXVALUE() { return getToken(DB2zSQLParser.MAXVALUE, 0); }
		public TerminalNode CACHE() { return getToken(DB2zSQLParser.CACHE, 0); }
		public IdentityAlterationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identityAlteration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterIdentityAlteration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitIdentityAlteration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitIdentityAlteration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentityAlterationContext identityAlteration() throws RecognitionException {
		IdentityAlterationContext _localctx = new IdentityAlterationContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_identityAlteration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3848);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,441,_ctx) ) {
			case 1:
				{
				{
				setState(3808);
				match(RESTART);
				setState(3811);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(3809);
					match(WITH);
					setState(3810);
					match(INTEGERLITERAL);
					}
				}

				}
				}
				break;
			case 2:
				{
				{
				setState(3813);
				match(SET);
				setState(3814);
				match(INCREMENT);
				setState(3815);
				match(BY);
				setState(3816);
				match(INTEGERLITERAL);
				}
				}
				break;
			case 3:
				{
				{
				setState(3817);
				match(SET);
				setState(3822);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NO:
					{
					{
					setState(3818);
					match(NO);
					setState(3819);
					match(MINVALUE);
					}
					}
					break;
				case MINVALUE:
					{
					{
					setState(3820);
					match(MINVALUE);
					setState(3821);
					match(INTEGERLITERAL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case 4:
				{
				{
				setState(3824);
				match(SET);
				setState(3829);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NO:
					{
					{
					setState(3825);
					match(NO);
					setState(3826);
					match(MAXVALUE);
					}
					}
					break;
				case MAXVALUE:
					{
					{
					setState(3827);
					match(MAXVALUE);
					setState(3828);
					match(INTEGERLITERAL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case 5:
				{
				{
				setState(3831);
				match(SET);
				setState(3833);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3832);
					match(NO);
					}
				}

				setState(3835);
				match(CYCLE);
				}
				}
				break;
			case 6:
				{
				{
				setState(3836);
				match(SET);
				setState(3841);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NO:
					{
					{
					setState(3837);
					match(NO);
					setState(3838);
					match(CACHE);
					}
					}
					break;
				case CACHE:
					{
					{
					setState(3839);
					match(CACHE);
					setState(3840);
					match(INTEGERLITERAL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case 7:
				{
				{
				setState(3843);
				match(SET);
				setState(3845);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3844);
					match(NO);
					}
				}

				setState(3847);
				match(ORDER);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UniqueConstraintContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode UNIQUE() { return getToken(DB2zSQLParser.UNIQUE, 0); }
		public TerminalNode CONSTRAINT() { return getToken(DB2zSQLParser.CONSTRAINT, 0); }
		public ConstraintNameContext constraintName() {
			return getRuleContext(ConstraintNameContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public TerminalNode BUSINESS_TIME() { return getToken(DB2zSQLParser.BUSINESS_TIME, 0); }
		public TerminalNode WITHOUT() { return getToken(DB2zSQLParser.WITHOUT, 0); }
		public TerminalNode OVERLAPS() { return getToken(DB2zSQLParser.OVERLAPS, 0); }
		public TerminalNode PRIMARY() { return getToken(DB2zSQLParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(DB2zSQLParser.KEY, 0); }
		public UniqueConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uniqueConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterUniqueConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitUniqueConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitUniqueConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UniqueConstraintContext uniqueConstraint() throws RecognitionException {
		UniqueConstraintContext _localctx = new UniqueConstraintContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_uniqueConstraint);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3852);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(3850);
				match(CONSTRAINT);
				setState(3851);
				constraintName();
				}
			}

			setState(3857);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PRIMARY:
				{
				{
				setState(3854);
				match(PRIMARY);
				setState(3855);
				match(KEY);
				}
				}
				break;
			case UNIQUE:
				{
				setState(3856);
				match(UNIQUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3859);
			match(LPAREN);
			setState(3860);
			columnName();
			setState(3865);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,444,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3861);
					match(COMMA);
					setState(3862);
					columnName();
					}
					} 
				}
				setState(3867);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,444,_ctx);
			}
			setState(3872);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(3868);
				match(COMMA);
				setState(3869);
				match(BUSINESS_TIME);
				setState(3870);
				match(WITHOUT);
				setState(3871);
				match(OVERLAPS);
				}
			}

			setState(3874);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferentialConstraintContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public ReferencesClauseContext referencesClause() {
			return getRuleContext(ReferencesClauseContext.class,0);
		}
		public List<TerminalNode> PERIOD() { return getTokens(DB2zSQLParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(DB2zSQLParser.PERIOD, i);
		}
		public List<TerminalNode> BUSINESS() { return getTokens(DB2zSQLParser.BUSINESS); }
		public TerminalNode BUSINESS(int i) {
			return getToken(DB2zSQLParser.BUSINESS, i);
		}
		public List<TerminalNode> TIME() { return getTokens(DB2zSQLParser.TIME); }
		public TerminalNode TIME(int i) {
			return getToken(DB2zSQLParser.TIME, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public TerminalNode CONSTRAINT() { return getToken(DB2zSQLParser.CONSTRAINT, 0); }
		public ConstraintNameContext constraintName() {
			return getRuleContext(ConstraintNameContext.class,0);
		}
		public TerminalNode FOREIGN() { return getToken(DB2zSQLParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(DB2zSQLParser.KEY, 0); }
		public ReferentialConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referentialConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterReferentialConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitReferentialConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitReferentialConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReferentialConstraintContext referentialConstraint() throws RecognitionException {
		ReferentialConstraintContext _localctx = new ReferentialConstraintContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_referentialConstraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3886);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CONSTRAINT:
				{
				{
				setState(3876);
				match(CONSTRAINT);
				setState(3877);
				constraintName();
				setState(3878);
				match(FOREIGN);
				setState(3879);
				match(KEY);
				}
				}
				break;
			case FOREIGN:
				{
				{
				setState(3881);
				match(FOREIGN);
				setState(3882);
				match(KEY);
				setState(3884);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 29)) & ~0x3f) == 0 && ((1L << (_la - 29)) & ((1L << (ADD - 29)) | (1L << (AFTER - 29)) | (1L << (ALL - 29)) | (1L << (ALLOCATE - 29)) | (1L << (ALLOW - 29)) | (1L << (ALTER - 29)) | (1L << (ALTERAND - 29)) | (1L << (ANY - 29)) | (1L << (ARRAY - 29)) | (1L << (ARRAY_EXISTS - 29)) | (1L << (AS - 29)) | (1L << (ASENSITIVE - 29)) | (1L << (ASSOCIATE - 29)) | (1L << (ASUTIME - 29)) | (1L << (AT - 29)) | (1L << (AUDIT - 29)) | (1L << (AUX - 29)) | (1L << (AUXILIARY - 29)) | (1L << (BEFORE - 29)) | (1L << (BEGIN - 29)) | (1L << (BETWEEN - 29)) | (1L << (BUFFERPOOL - 29)) | (1L << (BY - 29)) | (1L << (CALL - 29)) | (1L << (CAPTURE - 29)) | (1L << (CASCADED - 29)) | (1L << (CASE - 29)) | (1L << (CAST - 29)) | (1L << (CCSID - 29)) | (1L << (CHAR - 29)) | (1L << (CHARACTER - 29)) | (1L << (CHECK - 29)) | (1L << (CLONE - 29)) | (1L << (CLOSE - 29)) | (1L << (CLUSTER - 29)) | (1L << (COLLECTION - 29)) | (1L << (COLLID - 29)) | (1L << (COLUMN - 29)) | (1L << (COMMENT - 29)) | (1L << (COMMIT - 29)) | (1L << (CONCAT - 29)) | (1L << (CONDITION - 29)) | (1L << (CONNECT - 29)) | (1L << (CONNECTION - 29)) | (1L << (CONSTRAINT - 29)) | (1L << (CONTAINS - 29)) | (1L << (CONTENT - 29)) | (1L << (CONTINUE - 29)) | (1L << (CREATE - 29)) | (1L << (CUBE - 29)) | (1L << (CURRENT - 29)) | (1L << (CURRENT_LC_CTYPE - 29)) | (1L << (CURRVAL - 29)) | (1L << (CURSOR - 29)) | (1L << (DATA - 29)) | (1L << (DATABASE - 29)) | (1L << (DAY - 29)) | (1L << (DAYS - 29)) | (1L << (DBINFO - 29)) | (1L << (DECLARE - 29)) | (1L << (DEFAULT - 29)) | (1L << (DELETE - 29)) | (1L << (DESCRIPTOR - 29)) | (1L << (DETERMINISTIC - 29)))) != 0) || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (DISABLE - 93)) | (1L << (DISALLOW - 93)) | (1L << (DISTINCT - 93)) | (1L << (DO - 93)) | (1L << (DOCUMENT - 93)) | (1L << (DOUBLE - 93)) | (1L << (DROP - 93)) | (1L << (DSSIZE - 93)) | (1L << (DYNAMIC - 93)) | (1L << (EDITPROC - 93)) | (1L << (ELSE - 93)) | (1L << (ELSEIF - 93)) | (1L << (ENCODING - 93)) | (1L << (ENCRYPTION - 93)) | (1L << (END - 93)) | (1L << (END_EXEC - 93)) | (1L << (ENDING - 93)) | (1L << (ERASE - 93)) | (1L << (ESCAPE - 93)) | (1L << (EXCEPT - 93)) | (1L << (EXCEPTION - 93)) | (1L << (EXEC_SQL - 93)) | (1L << (EXECUTE - 93)) | (1L << (EXISTS - 93)) | (1L << (EXIT - 93)) | (1L << (EXPLAIN - 93)) | (1L << (EXTERNAL - 93)) | (1L << (FENCED - 93)) | (1L << (FETCH - 93)) | (1L << (FIELDPROC - 93)) | (1L << (FINAL - 93)) | (1L << (FIRST - 93)) | (1L << (FOR - 93)) | (1L << (FREE - 93)) | (1L << (FROM - 93)) | (1L << (FULL - 93)) | (1L << (FUNCTION - 93)) | (1L << (GENERATED - 93)) | (1L << (GET - 93)) | (1L << (GLOBAL - 93)) | (1L << (GO - 93)) | (1L << (GOTO - 93)) | (1L << (GRANT - 93)) | (1L << (GROUP - 93)) | (1L << (HANDLER - 93)) | (1L << (HAVING - 93)) | (1L << (HOLD - 93)) | (1L << (HOUR - 93)) | (1L << (HOURS - 93)) | (1L << (IF - 93)) | (1L << (IMMEDIATE - 93)) | (1L << (IN - 93)) | (1L << (INCLUSIVE - 93)) | (1L << (INDEX - 93)) | (1L << (INDEXBP - 93)) | (1L << (INHERIT - 93)) | (1L << (INNER - 93)) | (1L << (INOUT - 93)) | (1L << (INSENSITIVE - 93)) | (1L << (INSERT - 93)) | (1L << (INTERSECT - 93)) | (1L << (INTO - 93)) | (1L << (IS - 93)) | (1L << (ISOBID - 93)))) != 0) || ((((_la - 157)) & ~0x3f) == 0 && ((1L << (_la - 157)) & ((1L << (ITERATE - 157)) | (1L << (JAR - 157)) | (1L << (JOIN - 157)) | (1L << (KEEP - 157)) | (1L << (KEY - 157)) | (1L << (LABEL - 157)) | (1L << (LANGUAGE - 157)) | (1L << (LAST - 157)) | (1L << (LC_CTYPE - 157)) | (1L << (LEAVE - 157)) | (1L << (LEFT - 157)) | (1L << (LIKE - 157)) | (1L << (LIMIT - 157)) | (1L << (LOCAL - 157)) | (1L << (LOCALE - 157)) | (1L << (LOCATOR - 157)) | (1L << (LOCATORS - 157)) | (1L << (LOCK - 157)) | (1L << (LOCKMAX - 157)) | (1L << (LOCKSIZE - 157)) | (1L << (LONG - 157)) | (1L << (LOOP - 157)) | (1L << (MAINTAINED - 157)) | (1L << (MATERIALIZED - 157)) | (1L << (MICROSECOND - 157)) | (1L << (MICROSECONDS - 157)) | (1L << (MODIFIES - 157)) | (1L << (MONTH - 157)) | (1L << (MONTHS - 157)) | (1L << (NEXT - 157)) | (1L << (NEXTVAL - 157)) | (1L << (NO - 157)) | (1L << (NONE - 157)) | (1L << (NOT - 157)) | (1L << (NULL - 157)) | (1L << (NULLS - 157)) | (1L << (NUMPARTS - 157)) | (1L << (OBID - 157)) | (1L << (OF - 157)) | (1L << (OFFSET - 157)) | (1L << (OLD - 157)) | (1L << (ON - 157)) | (1L << (OPEN - 157)) | (1L << (OPTIMIZATION - 157)) | (1L << (OPTIMIZE - 157)) | (1L << (OR - 157)) | (1L << (ORDER - 157)) | (1L << (ORGANIZATION - 157)) | (1L << (OUT - 157)) | (1L << (OUTER - 157)) | (1L << (PACKAGE - 157)) | (1L << (PADDED - 157)) | (1L << (PARAMETER - 157)) | (1L << (PART - 157)) | (1L << (PARTITION - 157)) | (1L << (PARTITIONED - 157)) | (1L << (PARTITIONING - 157)) | (1L << (PATH - 157)) | (1L << (PERIOD - 157)) | (1L << (PIECESIZE - 157)) | (1L << (PLAN - 157)) | (1L << (PRECISION - 157)) | (1L << (PREPARE - 157)))) != 0) || ((((_la - 221)) & ~0x3f) == 0 && ((1L << (_la - 221)) & ((1L << (PREVVAL - 221)) | (1L << (PRIOR - 221)) | (1L << (PRIQTY - 221)) | (1L << (PRIVILEGES - 221)) | (1L << (PROCEDURE - 221)) | (1L << (PROGRAM - 221)) | (1L << (PSID - 221)) | (1L << (PUBLIC - 221)) | (1L << (QUERY - 221)) | (1L << (QUERYNO - 221)) | (1L << (READS - 221)) | (1L << (REFERENCES - 221)) | (1L << (REFRESH - 221)) | (1L << (RELEASE - 221)) | (1L << (RENAME - 221)) | (1L << (REPEAT - 221)) | (1L << (RESIGNAL - 221)) | (1L << (RESTRICT - 221)) | (1L << (RESULT - 221)) | (1L << (RESULT_SET_LOCATOR - 221)) | (1L << (RETURN - 221)) | (1L << (RETURNS - 221)) | (1L << (REVOKE - 221)) | (1L << (RIGHT - 221)) | (1L << (ROLE - 221)) | (1L << (ROLLBACK - 221)) | (1L << (ROLLUP - 221)) | (1L << (ROUND_CEILING - 221)) | (1L << (ROUND_DOWN - 221)) | (1L << (ROUND_FLOOR - 221)) | (1L << (ROUND_HALF_DOWN - 221)) | (1L << (ROUND_HALF_EVEN - 221)) | (1L << (ROUND_HALF_UP - 221)) | (1L << (ROUND_UP - 221)) | (1L << (ROW - 221)) | (1L << (ROWSET - 221)) | (1L << (RUN - 221)) | (1L << (SAVEPOINT - 221)) | (1L << (SCHEMA - 221)) | (1L << (SCRATCHPAD - 221)) | (1L << (SECOND - 221)) | (1L << (SECONDS - 221)) | (1L << (SECQTY - 221)) | (1L << (SECURITY - 221)) | (1L << (SELECT - 221)) | (1L << (SENSITIVE - 221)) | (1L << (SEQUENCE - 221)) | (1L << (SET - 221)) | (1L << (SIGNAL - 221)) | (1L << (SIMPLE - 221)) | (1L << (SOME - 221)) | (1L << (SOURCE - 221)) | (1L << (SPECIFIC - 221)) | (1L << (STANDARD - 221)) | (1L << (STATEMENT - 221)) | (1L << (STATIC - 221)) | (1L << (STAY - 221)) | (1L << (STOGROUP - 221)) | (1L << (STORES - 221)) | (1L << (STYLE - 221)) | (1L << (SUMMARY - 221)) | (1L << (SYNONYM - 221)) | (1L << (SYSDATE - 221)) | (1L << (SYSTEM - 221)))) != 0) || ((((_la - 285)) & ~0x3f) == 0 && ((1L << (_la - 285)) & ((1L << (SYSTIMESTAMP - 285)) | (1L << (TABLE - 285)) | (1L << (TABLESPACE - 285)) | (1L << (THEN - 285)) | (1L << (TO - 285)) | (1L << (TRIGGER - 285)) | (1L << (TRUNCATE - 285)) | (1L << (TYPE - 285)) | (1L << (UNDO - 285)) | (1L << (UNION - 285)) | (1L << (UNIQUE - 285)) | (1L << (UNTIL - 285)) | (1L << (UPDATE - 285)) | (1L << (USING - 285)) | (1L << (VALIDPROC - 285)) | (1L << (VALUE - 285)) | (1L << (VALUES - 285)) | (1L << (VARIABLE - 285)) | (1L << (VARIANT - 285)) | (1L << (VCAT - 285)) | (1L << (VERSIONING - 285)) | (1L << (VIEW - 285)) | (1L << (VOLATILE - 285)) | (1L << (VOLUMES - 285)) | (1L << (WHEN - 285)) | (1L << (WHENEVER - 285)) | (1L << (WHERE - 285)) | (1L << (WHILE - 285)) | (1L << (WITH - 285)) | (1L << (WLM - 285)) | (1L << (XMLCAST - 285)) | (1L << (XMLEXISTS - 285)) | (1L << (XMLNAMESPACES - 285)) | (1L << (YEAR - 285)) | (1L << (YEARS - 285)) | (1L << (ZONE - 285)) | (1L << (AND - 285)) | (1L << (ARRAY_AGG - 285)) | (1L << (ASC - 285)) | (1L << (AVG - 285)) | (1L << (BIT - 285)) | (1L << (CHANGE - 285)) | (1L << (CODEUNITS16 - 285)) | (1L << (CODEUNITS32 - 285)) | (1L << (CORR - 285)) | (1L << (CORRELATION - 285)) | (1L << (COUNT - 285)) | (1L << (COUNT_BIG - 285)) | (1L << (COVAR - 285)) | (1L << (COVARIANCE - 285)) | (1L << (COVARIANCE_SAMP - 285)) | (1L << (COVAR_POP - 285)) | (1L << (COVAR_SAMP - 285)) | (1L << (CS - 285)) | (1L << (CUME_DIST - 285)) | (1L << (DENSE_RANK - 285)) | (1L << (DESC - 285)) | (1L << (EBCDIC - 285)) | (1L << (EXCLUSIVE - 285)) | (1L << (FIRST_VALUE - 285)) | (1L << (FOLLOWING - 285)) | (1L << (GROUPING - 285)) | (1L << (IGNORE - 285)) | (1L << (INDICATOR - 285)))) != 0) || ((((_la - 349)) & ~0x3f) == 0 && ((1L << (_la - 349)) & ((1L << (INPUT - 349)) | (1L << (ISNULL - 349)) | (1L << (LAG - 349)) | (1L << (LARGE - 349)) | (1L << (LAST_VALUE - 349)) | (1L << (LEAD - 349)) | (1L << (LISTAGG - 349)) | (1L << (LOCKED - 349)) | (1L << (LOCKS - 349)) | (1L << (MEDIAN - 349)) | (1L << (MINUTES - 349)) | (1L << (MIXED - 349)) | (1L << (NOTNULL - 349)) | (1L << (NTH_VALUE - 349)) | (1L << (NTILE - 349)) | (1L << (NUMERIC - 349)) | (1L << (OBJECT - 349)) | (1L << (OCTETS - 349)) | (1L << (ONLY - 349)) | (1L << (OVER - 349)) | (1L << (PASSING - 349)) | (1L << (PERCENTILE_CONT - 349)) | (1L << (PERCENTILE_DISC - 349)) | (1L << (PERCENT_RANK - 349)) | (1L << (PRECEDING - 349)) | (1L << (PREVIOUS - 349)) | (1L << (RANGE - 349)) | (1L << (RANK - 349)) | (1L << (RATIO_TO_REPORT - 349)) | (1L << (READ - 349)) | (1L << (REF - 349)) | (1L << (REGR_AVGX - 349)) | (1L << (REGR_AVGY - 349)) | (1L << (REGR_COUNT - 349)) | (1L << (REGR_ICPT - 349)) | (1L << (REGR_INTERCEPT - 349)) | (1L << (REGR_R2 - 349)) | (1L << (REGR_SLOPE - 349)) | (1L << (REGR_SXX - 349)) | (1L << (REGR_SXY - 349)) | (1L << (REGR_SYY - 349)) | (1L << (RESPECT - 349)) | (1L << (ROW_NUMBER - 349)) | (1L << (ROWS - 349)) | (1L << (RR - 349)) | (1L << (RS - 349)) | (1L << (SBCS - 349)) | (1L << (SELECTIVITY - 349)) | (1L << (SETS - 349)) | (1L << (SHARE - 349)) | (1L << (SKIP_ - 349)) | (1L << (STDDEV - 349)) | (1L << (STDDEV_POP - 349)) | (1L << (STDDEV_SAMP - 349)) | (1L << (SUM - 349)) | (1L << (TOKEN - 349)) | (1L << (UNBOUNDED - 349)) | (1L << (UNPACK - 349)) | (1L << (UR - 349)) | (1L << (USE - 349)) | (1L << (VAR - 349)) | (1L << (VARIANCE - 349)) | (1L << (VARIANCE_SAMP - 349)) | (1L << (VAR_POP - 349)))) != 0) || ((((_la - 413)) & ~0x3f) == 0 && ((1L << (_la - 413)) & ((1L << (VAR_SAMP - 413)) | (1L << (VARYING - 413)) | (1L << (WITHOUT - 413)) | (1L << (XML - 413)) | (1L << (XMLAGG - 413)) | (1L << (COLUMNS - 413)) | (1L << (SQLID - 413)) | (1L << (ORDINALITY - 413)) | (1L << (SYSTEM_TIME - 413)) | (1L << (BUSINESS_TIME - 413)) | (1L << (MULTIPLIER - 413)) | (1L << (UNNEST - 413)) | (1L << (CROSS - 413)) | (1L << (CALLER - 413)) | (1L << (CLIENT - 413)) | (1L << (POSITIONING - 413)) | (1L << (SCROLL - 413)) | (1L << (ACTION - 413)) | (1L << (ASSEMBLE - 413)) | (1L << (C_ - 413)) | (1L << (CALLED - 413)) | (1L << (COBOL - 413)) | (1L << (DB2 - 413)) | (1L << (DEFINER - 413)) | (1L << (DISPATCH - 413)) | (1L << (ENVIRONMENT - 413)) | (1L << (FAILURE - 413)) | (1L << (FAILURES - 413)) | (1L << (JAVA - 413)) | (1L << (MAIN - 413)) | (1L << (NAME - 413)) | (1L << (OPTIONS - 413)) | (1L << (PARALLEL - 413)) | (1L << (PLI - 413)) | (1L << (REGISTERS - 413)) | (1L << (RESIDENT - 413)) | (1L << (SECURED - 413)) | (1L << (SPECIAL - 413)) | (1L << (SQL - 413)) | (1L << (STOP - 413)) | (1L << (SUB - 413)) | (1L << (YES - 413)) | (1L << (APPLICATION - 413)) | (1L << (CHANGED - 413)) | (1L << (COMPATIBILITY - 413)) | (1L << (COMPRESS - 413)) | (1L << (COPY - 413)) | (1L << (FREEPAGE - 413)) | (1L << (GBPCACHE - 413)) | (1L << (INCLUDE - 413)) | (1L << (MAXVALUE - 413)) | (1L << (MINVALUE - 413)) | (1L << (PCTFREE - 413)) | (1L << (REGENERATE - 413)) | (1L << (MASK - 413)) | (1L << (ENABLE - 413)) | (1L << (PERMISSION - 413)) | (1L << (ATOMIC - 413)) | (1L << (SQLEXCEPTION - 413)) | (1L << (MERGE - 413)) | (1L << (MATCHED - 413)) | (1L << (SQLSTATE - 413)) | (1L << (MESSAGE_TEXT - 413)) | (1L << (OVERRIDING - 413)))) != 0) || ((((_la - 477)) & ~0x3f) == 0 && ((1L << (_la - 477)) & ((1L << (PORTION - 477)) | (1L << (DB2SQL - 477)) | (1L << (DEBUG - 477)) | (1L << (GENERAL - 477)) | (1L << (MODE_ - 477)) | (1L << (REXX - 477)) | (1L << (CACHE - 477)) | (1L << (CYCLE - 477)) | (1L << (INCREMENT - 477)) | (1L << (RESTART - 477)) | (1L << (DATACLAS - 477)) | (1L << (MGMTCLAS - 477)) | (1L << (REMOVE - 477)) | (1L << (STORCLAS - 477)) | (1L << (ACCESS - 477)) | (1L << (ACTIVATE - 477)) | (1L << (ALWAYS - 477)) | (1L << (APPEND - 477)) | (1L << (ARCHIVE - 477)) | (1L << (BUSINESS - 477)) | (1L << (CASCADE - 477)) | (1L << (CHANGES - 477)) | (1L << (CONTROL - 477)) | (1L << (DEACTIVATE - 477)) | (1L << (DEFERRED - 477)) | (1L << (EACH - 477)) | (1L << (ENFORCED - 477)) | (1L << (EXTRA - 477)) | (1L << (FOREIGN - 477)) | (1L << (HIDDEN_ - 477)) | (1L << (HISTORY - 477)) | (1L << (ID - 477)) | (1L << (IDENTITY - 477)) | (1L << (IMPLICITLY - 477)) | (1L << (INITIALLY - 477)) | (1L << (INLINE - 477)) | (1L << (OPERATION - 477)) | (1L << (ORGANIZE - 477)) | (1L << (OVERLAPS - 477)) | (1L << (PACKAGE_NAME - 477)) | (1L << (PACKAGE_SCHEMA - 477)) | (1L << (PACKAGE_VERSION - 477)) | (1L << (PRIMARY - 477)) | (1L << (RESET - 477)) | (1L << (ROTATE - 477)) | (1L << (START - 477)) | (1L << (SYSIBM - 477)) | (1L << (TRANSACTION - 477)) | (1L << (XMLSCHEMA - 477)) | (1L << (ELEMENT - 477)) | (1L << (URL - 477)) | (1L << (NAMESPACE - 477)) | (1L << (LOCATION - 477)) | (1L << (SYSXSR - 477)) | (1L << (ALGORITHM - 477)) | (1L << (FIXEDLENGTH - 477)) | (1L << (HUFFMAN - 477)) | (1L << (LOB - 477)) | (1L << (LOG - 477)) | (1L << (LOGGED - 477)) | (1L << (MAXPARTITIONS - 477)) | (1L << (MAXROWS - 477)) | (1L << (MEMBER - 477)) | (1L << (MOVE - 477)))) != 0) || ((((_la - 541)) & ~0x3f) == 0 && ((1L << (_la - 541)) & ((1L << (PAGE - 541)) | (1L << (PAGENUM - 541)) | (1L << (PENDING - 541)) | (1L << (RELATIVE - 541)) | (1L << (SEGSIZE - 541)) | (1L << (TRACKMOD - 541)) | (1L << (ADDRESS - 541)) | (1L << (ATTRIBUTES - 541)) | (1L << (AUTHENTICATION - 541)) | (1L << (AUTHID - 541)) | (1L << (CONTEXT - 541)) | (1L << (JOBNAME - 541)) | (1L << (OWNER - 541)) | (1L << (PROFILE - 541)) | (1L << (QUALIFIER - 541)) | (1L << (SERVAUTH - 541)) | (1L << (TRUSTED - 541)) | (1L << (SECTION - 541)) | (1L << (ACTIVE - 541)) | (1L << (VERSION - 541)) | (1L << (ALIAS - 541)) | (1L << (WORK - 541)) | (1L << (WORKFILE - 541)) | (1L << (SYSDEFLT - 541)) | (1L << (NULTERM - 541)) | (1L << (STRUCTURE - 541)) | (1L << (GENERIC - 541)) | (1L << (ABS - 541)) | (1L << (ABSVAL - 541)) | (1L << (ACOS - 541)) | (1L << (ADD_DAYS - 541)) | (1L << (ADD_MONTHS - 541)) | (1L << (ARRAY_DELETE - 541)) | (1L << (ARRAY_FIRST - 541)) | (1L << (ARRAY_LAST - 541)) | (1L << (ARRAY_NEXT - 541)) | (1L << (ARRAY_PRIOR - 541)) | (1L << (ARRAY_TRIM - 541)) | (1L << (ASCII - 541)) | (1L << (ASCII_CHR - 541)) | (1L << (ASCIISTR - 541)) | (1L << (ASCII_STR - 541)) | (1L << (ASIN - 541)) | (1L << (ATAN - 541)) | (1L << (ATAN2 - 541)) | (1L << (ATANH - 541)) | (1L << (BIGINT - 541)) | (1L << (BINARY - 541)) | (1L << (BITAND - 541)) | (1L << (BITANDNOT - 541)) | (1L << (BITNOT - 541)) | (1L << (BITOR - 541)) | (1L << (BITXOR - 541)) | (1L << (BLOB - 541)) | (1L << (BTRIM - 541)) | (1L << (CARDINALITY - 541)) | (1L << (CCSID_ENCODING - 541)) | (1L << (CEIL - 541)) | (1L << (CEILING - 541)) | (1L << (CHAR9 - 541)) | (1L << (CHARACTER_LENGTH - 541)) | (1L << (CHAR_LENGTH - 541)) | (1L << (CHR - 541)) | (1L << (CLOB - 541)))) != 0) || ((((_la - 605)) & ~0x3f) == 0 && ((1L << (_la - 605)) & ((1L << (COALESCE - 605)) | (1L << (COLLATION_KEY - 605)) | (1L << (COMPARE_DECFLOAT - 605)) | (1L << (COS - 605)) | (1L << (COSH - 605)) | (1L << (DATE - 605)) | (1L << (DAYOFMONTH - 605)) | (1L << (DAYOFWEEK - 605)) | (1L << (DAYOFWEEK_ISO - 605)) | (1L << (DAYOFYEAR - 605)) | (1L << (DAYS_BETWEEN - 605)) | (1L << (DBCLOB - 605)) | (1L << (DEC - 605)) | (1L << (DECFLOAT - 605)) | (1L << (DECFLOAT_FORMAT - 605)) | (1L << (DECFLOAT_SORTKEY - 605)) | (1L << (DECIMAL - 605)) | (1L << (DECODE - 605)) | (1L << (DECRYPT_BINARY - 605)) | (1L << (DECRYPT_BIT - 605)) | (1L << (DECRYPT_CHAR - 605)) | (1L << (DECRYPT_DATAKEY_BIGINT - 605)) | (1L << (DECRYPT_DATAKEY_BIT - 605)) | (1L << (DECRYPT_DATAKEY_CLOB - 605)) | (1L << (DECRYPT_DATAKEY_DBCLOB - 605)) | (1L << (DECRYPT_DATAKEY_DECIMAL - 605)) | (1L << (DECRYPT_DATAKEY_INTEGER - 605)) | (1L << (DECRYPT_DATAKEY_VARCHAR - 605)) | (1L << (DECRYPT_DATAKEY_VARGRAPHIC - 605)) | (1L << (DECRYPT_DB - 605)) | (1L << (DEGREES - 605)) | (1L << (DIFFERENCE - 605)) | (1L << (DIGITS - 605)) | (1L << (DOUBLE_PRECISION - 605)) | (1L << (DSN_XMLVALIDATE - 605)) | (1L << (EBCDIC_CHR - 605)) | (1L << (EBCDIC_STR - 605)) | (1L << (ENCRYPT_DATAKEY - 605)) | (1L << (ENCRYPT_TDES - 605)) | (1L << (EXP - 605)) | (1L << (EXTRACT - 605)) | (1L << (FLOAT - 605)) | (1L << (FLOOR - 605)) | (1L << (GENERATE_UNIQUE - 605)) | (1L << (GENERATE_UNIQUE_BINARY - 605)) | (1L << (GETHINT - 605)) | (1L << (GETVARIABLE - 605)) | (1L << (GRAPHIC - 605)) | (1L << (GREATEST - 605)) | (1L << (HASH - 605)) | (1L << (HASH_CRC32 - 605)) | (1L << (HASH_MD5 - 605)) | (1L << (HASH_SHA1 - 605)) | (1L << (HASH_SHA256 - 605)) | (1L << (HEX - 605)) | (1L << (IDENTITY_VAL_LOCAL - 605)) | (1L << (IFNULL - 605)) | (1L << (INSTR - 605)) | (1L << (INT - 605)) | (1L << (INTEGER - 605)) | (1L << (JULIAN_DAY - 605)) | (1L << (LAST_DAY - 605)) | (1L << (LCASE - 605)) | (1L << (LEAST - 605)))) != 0) || ((((_la - 669)) & ~0x3f) == 0 && ((1L << (_la - 669)) & ((1L << (LENGTH - 669)) | (1L << (LN - 669)) | (1L << (LOCATE - 669)) | (1L << (LOCATE_IN_STRING - 669)) | (1L << (LOG10 - 669)) | (1L << (LOWER - 669)) | (1L << (LPAD - 669)) | (1L << (LTRIM - 669)) | (1L << (MAX - 669)) | (1L << (MAX_CARDINALITY - 669)) | (1L << (MIDNIGHT_SECONDS - 669)) | (1L << (MIN - 669)) | (1L << (MINUTE - 669)) | (1L << (MOD - 669)) | (1L << (MONTHS_BETWEEN - 669)) | (1L << (MQREAD - 669)) | (1L << (MQREADCLOB - 669)) | (1L << (MQRECEIVE - 669)) | (1L << (MQRECEIVECLOB - 669)) | (1L << (MQSEND - 669)) | (1L << (MULTIPLY_ALT - 669)) | (1L << (NEXT_DAY - 669)) | (1L << (NEXT_MONTH - 669)) | (1L << (NORMALIZE_DECFLOAT - 669)) | (1L << (NORMALIZE_STRING - 669)) | (1L << (NULLIF - 669)) | (1L << (NVL - 669)) | (1L << (OVERLAY - 669)) | (1L << (PACK - 669)) | (1L << (POSITION - 669)) | (1L << (POSSTR - 669)) | (1L << (POW - 669)) | (1L << (POWER - 669)) | (1L << (QUANTIZE - 669)) | (1L << (QUARTER - 669)) | (1L << (RADIANS - 669)) | (1L << (RAISE_ERROR - 669)) | (1L << (RAND - 669)) | (1L << (RANDOM - 669)) | (1L << (REAL - 669)) | (1L << (REGEXP_COUNT - 669)) | (1L << (REGEXP_INSTR - 669)) | (1L << (REGEXP_LIKE - 669)) | (1L << (REGEXP_REPLACE - 669)) | (1L << (REGEXP_SUBSTR - 669)) | (1L << (REPLACE - 669)) | (1L << (RID - 669)) | (1L << (ROUND - 669)) | (1L << (ROUND_TIMESTAMP - 669)) | (1L << (ROWID - 669)) | (1L << (RPAD - 669)) | (1L << (RTRIM - 669)) | (1L << (SCORE - 669)) | (1L << (SIGN - 669)) | (1L << (SIN - 669)) | (1L << (SINH - 669)) | (1L << (SMALLINT - 669)) | (1L << (SOAPHTTPC - 669)) | (1L << (SOAPHTTPNC - 669)) | (1L << (SOAPHTTPNV - 669)) | (1L << (SOAPHTTPV - 669)) | (1L << (SOUNDEX - 669)) | (1L << (SPACE - 669)) | (1L << (SQRT - 669)))) != 0) || ((((_la - 733)) & ~0x3f) == 0 && ((1L << (_la - 733)) & ((1L << (STRIP - 733)) | (1L << (STRLEFT - 733)) | (1L << (STRPOS - 733)) | (1L << (STRRIGHT - 733)) | (1L << (SUBSTR - 733)) | (1L << (SUBSTRING - 733)) | (1L << (TAN - 733)) | (1L << (TANH - 733)) | (1L << (TIME - 733)) | (1L << (TIMESTAMP - 733)) | (1L << (TIMESTAMPADD - 733)) | (1L << (TIMESTAMPDIFF - 733)) | (1L << (TIMESTAMP_FORMAT - 733)) | (1L << (TIMESTAMP_ISO - 733)) | (1L << (TIMESTAMP_TZ - 733)) | (1L << (TO_CHAR - 733)) | (1L << (TO_CLOB - 733)) | (1L << (TO_DATE - 733)) | (1L << (TO_NUMBER - 733)) | (1L << (TOTALORDER - 733)) | (1L << (TO_TIMESTAMP - 733)) | (1L << (TRANSLATE - 733)) | (1L << (TRIM - 733)) | (1L << (TRIM_ARRAY - 733)) | (1L << (TRUNC - 733)) | (1L << (TRUNC_TIMESTAMP - 733)) | (1L << (UCASE - 733)) | (1L << (UNICODE - 733)) | (1L << (UNICODE_STR - 733)) | (1L << (UNISTR - 733)) | (1L << (UPPER - 733)) | (1L << (VARBINARY - 733)) | (1L << (VARCHAR - 733)) | (1L << (VARCHAR9 - 733)) | (1L << (VARCHAR_BIT_FORMAT - 733)) | (1L << (VARCHAR_FORMAT - 733)) | (1L << (VARGRAPHIC - 733)) | (1L << (VERIFY_GROUP_FOR_USER - 733)) | (1L << (VERIFY_ROLE_FOR_USER - 733)) | (1L << (VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER - 733)) | (1L << (WEEK - 733)) | (1L << (WEEK_ISO - 733)) | (1L << (WRAP - 733)) | (1L << (XMLATTRIBUTES - 733)) | (1L << (XMLCOMMENT - 733)) | (1L << (XMLCONCAT - 733)) | (1L << (XMLDOCUMENT - 733)) | (1L << (XMLELEMENT - 733)) | (1L << (XMLFOREST - 733)) | (1L << (XMLMODIFY - 733)) | (1L << (XMLPARSE - 733)) | (1L << (XMLPI - 733)) | (1L << (XMLQUERY - 733)) | (1L << (XMLSERIALIZE - 733)) | (1L << (XMLTEXT - 733)) | (1L << (XMLXSROBJECTID - 733)) | (1L << (XSLTRANSFORM - 733)) | (1L << (CURRENT_ACCELERATOR - 733)) | (1L << (CURRENT_APPLICATION_COMPATIBILITY - 733)) | (1L << (CURRENT_APPLICATION_ENCODING_SCHEME - 733)) | (1L << (CURRENT_CLIENT_ACCTNG - 733)) | (1L << (CURRENT_CLIENT_APPLNAME - 733)) | (1L << (CURRENT_CLIENT_CORR_TOKEN - 733)) | (1L << (CURRENT_CLIENT_USERID - 733)))) != 0) || ((((_la - 797)) & ~0x3f) == 0 && ((1L << (_la - 797)) & ((1L << (CURRENT_CLIENT_WRKSTNNAME - 797)) | (1L << (CURRENT_DATE - 797)) | (1L << (CURRENT_DEBUG_MODE - 797)) | (1L << (CURRENT_DECFLOAT_ROUNDING_MODE - 797)) | (1L << (CURRENT_DEGREE - 797)) | (1L << (CURRENT_EXPLAIN_MODE - 797)) | (1L << (CURRENT_GET_ACCEL_ARCHIVE - 797)) | (1L << (CURRENT_LOCALE_LC_CTYPE - 797)) | (1L << (CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION - 797)) | (1L << (CURRENT_MEMBER - 797)) | (1L << (CURRENT_OPTIMIZATION_HINT - 797)) | (1L << (CURRENT_PACKAGE_PATH - 797)) | (1L << (CURRENT_PACKAGESET - 797)) | (1L << (CURRENT_PATH - 797)) | (1L << (CURRENT_PRECISION - 797)) | (1L << (CURRENT_QUERY_ACCELERATION - 797)) | (1L << (CURRENT_QUERY_ACCELERATION_WAITFORDATA - 797)) | (1L << (CURRENT_REFRESH_AGE - 797)) | (1L << (CURRENT_ROUTINE_VERSION - 797)) | (1L << (CURRENT_RULES - 797)) | (1L << (CURRENT_SCHEMA - 797)) | (1L << (CURRENT_SERVER - 797)) | (1L << (CURRENT_SQLID - 797)) | (1L << (CURRENT_TEMPORAL_BUSINESS_TIME - 797)) | (1L << (CURRENT_TEMPORAL_SYSTEM_TIME - 797)) | (1L << (CURRENT_TIME - 797)) | (1L << (CURRENT_TIMESTAMP - 797)) | (1L << (CURRENT_TIME_ZONE - 797)) | (1L << (ENCRYPTION_PASSWORD - 797)) | (1L << (SESSION_TIME_ZONE - 797)) | (1L << (SESSION_USER - 797)) | (1L << (USER - 797)) | (1L << (ADMIN_TASK_LIST - 797)) | (1L << (ADMIN_TASK_OUTPUT - 797)) | (1L << (ADMIN_TASK_STATUS - 797)) | (1L << (BLOCKING_THREADS - 797)) | (1L << (MQREADALL - 797)) | (1L << (MQREADALLCLOB - 797)) | (1L << (MQRECEIVEALL - 797)) | (1L << (MQRECEIVEALLCLOB - 797)) | (1L << (XMLTABLE - 797)) | (1L << (SQLIDENTIFIER - 797)))) != 0)) {
					{
					setState(3883);
					constraintName();
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3888);
			match(LPAREN);
			setState(3889);
			columnName();
			setState(3893);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(3890);
				match(PERIOD);
				setState(3891);
				match(BUSINESS);
				setState(3892);
				match(TIME);
				}
			}

			setState(3904);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3895);
				match(COMMA);
				setState(3896);
				columnName();
				setState(3900);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(3897);
					match(PERIOD);
					setState(3898);
					match(BUSINESS);
					setState(3899);
					match(TIME);
					}
				}

				}
				}
				setState(3906);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3907);
			match(RPAREN);
			setState(3908);
			referencesClause();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferencesClauseContext extends ParserRuleContext {
		public TerminalNode REFERENCES() { return getToken(DB2zSQLParser.REFERENCES, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode ENFORCED() { return getToken(DB2zSQLParser.ENFORCED, 0); }
		public List<TerminalNode> PERIOD() { return getTokens(DB2zSQLParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(DB2zSQLParser.PERIOD, i);
		}
		public List<TerminalNode> BUSINESS() { return getTokens(DB2zSQLParser.BUSINESS); }
		public TerminalNode BUSINESS(int i) {
			return getToken(DB2zSQLParser.BUSINESS, i);
		}
		public List<TerminalNode> TIME() { return getTokens(DB2zSQLParser.TIME); }
		public TerminalNode TIME(int i) {
			return getToken(DB2zSQLParser.TIME, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public TerminalNode DELETE() { return getToken(DB2zSQLParser.DELETE, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TerminalNode ENABLE() { return getToken(DB2zSQLParser.ENABLE, 0); }
		public TerminalNode QUERY() { return getToken(DB2zSQLParser.QUERY, 0); }
		public TerminalNode OPTIMIZATION() { return getToken(DB2zSQLParser.OPTIMIZATION, 0); }
		public TerminalNode RESTRICT() { return getToken(DB2zSQLParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(DB2zSQLParser.CASCADE, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(DB2zSQLParser.ACTION, 0); }
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public ReferencesClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referencesClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterReferencesClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitReferencesClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitReferencesClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReferencesClauseContext referencesClause() throws RecognitionException {
		ReferencesClauseContext _localctx = new ReferencesClauseContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_referencesClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3910);
			match(REFERENCES);
			setState(3911);
			tableName();
			setState(3912);
			match(LPAREN);
			setState(3913);
			columnName();
			setState(3917);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(3914);
				match(PERIOD);
				setState(3915);
				match(BUSINESS);
				setState(3916);
				match(TIME);
				}
			}

			setState(3928);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3919);
				match(COMMA);
				setState(3920);
				columnName();
				setState(3924);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(3921);
					match(PERIOD);
					setState(3922);
					match(BUSINESS);
					setState(3923);
					match(TIME);
					}
				}

				}
				}
				setState(3930);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3931);
			match(RPAREN);
			setState(3942);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(3932);
				match(ON);
				setState(3933);
				match(DELETE);
				setState(3940);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case RESTRICT:
					{
					setState(3934);
					match(RESTRICT);
					}
					break;
				case NO:
					{
					{
					setState(3935);
					match(NO);
					setState(3936);
					match(ACTION);
					}
					}
					break;
				case CASCADE:
					{
					setState(3937);
					match(CASCADE);
					}
					break;
				case SET:
					{
					{
					setState(3938);
					match(SET);
					setState(3939);
					match(NULL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(3945);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(3944);
				match(NOT);
				}
			}

			setState(3947);
			match(ENFORCED);
			setState(3951);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,457,_ctx) ) {
			case 1:
				{
				setState(3948);
				match(ENABLE);
				setState(3949);
				match(QUERY);
				setState(3950);
				match(OPTIMIZATION);
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckConstraintContext extends ParserRuleContext {
		public TerminalNode CHECK() { return getToken(DB2zSQLParser.CHECK, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public CheckConditionContext checkCondition() {
			return getRuleContext(CheckConditionContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode CONSTRAINT() { return getToken(DB2zSQLParser.CONSTRAINT, 0); }
		public ConstraintNameContext constraintName() {
			return getRuleContext(ConstraintNameContext.class,0);
		}
		public CheckConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCheckConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCheckConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCheckConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckConstraintContext checkConstraint() throws RecognitionException {
		CheckConstraintContext _localctx = new CheckConstraintContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_checkConstraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3955);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(3953);
				match(CONSTRAINT);
				setState(3954);
				constraintName();
				}
			}

			setState(3957);
			match(CHECK);
			setState(3958);
			match(LPAREN);
			setState(3959);
			checkCondition();
			setState(3960);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitioningClauseContext extends ParserRuleContext {
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public List<PartitionExpressionContext> partitionExpression() {
			return getRuleContexts(PartitionExpressionContext.class);
		}
		public PartitionExpressionContext partitionExpression(int i) {
			return getRuleContext(PartitionExpressionContext.class,i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public List<PartitioningClauseElementContext> partitioningClauseElement() {
			return getRuleContexts(PartitioningClauseElementContext.class);
		}
		public PartitioningClauseElementContext partitioningClauseElement(int i) {
			return getRuleContext(PartitioningClauseElementContext.class,i);
		}
		public TerminalNode RANGE() { return getToken(DB2zSQLParser.RANGE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public PartitioningClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitioningClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPartitioningClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPartitioningClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPartitioningClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitioningClauseContext partitioningClause() throws RecognitionException {
		PartitioningClauseContext _localctx = new PartitioningClauseContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_partitioningClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3963);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RANGE) {
				{
				setState(3962);
				match(RANGE);
				}
			}

			setState(3965);
			match(LPAREN);
			setState(3966);
			partitionExpression();
			setState(3971);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3967);
				match(COMMA);
				setState(3968);
				partitionExpression();
				}
				}
				setState(3973);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3974);
			match(RPAREN);
			setState(3975);
			match(LPAREN);
			setState(3976);
			partitioningClauseElement();
			setState(3981);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3977);
				match(COMMA);
				setState(3978);
				partitioningClauseElement();
				}
				}
				setState(3983);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3984);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionExpressionContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TerminalNode ASC() { return getToken(DB2zSQLParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(DB2zSQLParser.DESC, 0); }
		public TerminalNode NULLS() { return getToken(DB2zSQLParser.NULLS, 0); }
		public TerminalNode LAST() { return getToken(DB2zSQLParser.LAST, 0); }
		public PartitionExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPartitionExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPartitionExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPartitionExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionExpressionContext partitionExpression() throws RecognitionException {
		PartitionExpressionContext _localctx = new PartitionExpressionContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_partitionExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3986);
			columnName();
			setState(3989);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NULLS) {
				{
				setState(3987);
				match(NULLS);
				setState(3988);
				match(LAST);
				}
			}

			setState(3991);
			_la = _input.LA(1);
			if ( !(_la==ASC || _la==DESC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionLimitKeyContext extends ParserRuleContext {
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode MAXVALUE() { return getToken(DB2zSQLParser.MAXVALUE, 0); }
		public TerminalNode MINVALUE() { return getToken(DB2zSQLParser.MINVALUE, 0); }
		public PartitionLimitKeyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionLimitKey; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPartitionLimitKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPartitionLimitKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPartitionLimitKey(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionLimitKeyContext partitionLimitKey() throws RecognitionException {
		PartitionLimitKeyContext _localctx = new PartitionLimitKeyContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_partitionLimitKey);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3993);
			_la = _input.LA(1);
			if ( !(_la==INTEGERLITERAL || _la==MAXVALUE || _la==MINVALUE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitioningPhraseContext extends ParserRuleContext {
		public TerminalNode ENDING() { return getToken(DB2zSQLParser.ENDING, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<PartitionLimitKeyContext> partitionLimitKey() {
			return getRuleContexts(PartitionLimitKeyContext.class);
		}
		public PartitionLimitKeyContext partitionLimitKey(int i) {
			return getRuleContext(PartitionLimitKeyContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode AT() { return getToken(DB2zSQLParser.AT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public TerminalNode INCLUSIVE() { return getToken(DB2zSQLParser.INCLUSIVE, 0); }
		public PartitioningPhraseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitioningPhrase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPartitioningPhrase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPartitioningPhrase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPartitioningPhrase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitioningPhraseContext partitioningPhrase() throws RecognitionException {
		PartitioningPhraseContext _localctx = new PartitioningPhraseContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_partitioningPhrase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3995);
			match(ENDING);
			setState(3997);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AT) {
				{
				setState(3996);
				match(AT);
				}
			}

			setState(3999);
			match(LPAREN);
			setState(4000);
			partitionLimitKey();
			setState(4005);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4001);
				match(COMMA);
				setState(4002);
				partitionLimitKey();
				}
				}
				setState(4007);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4008);
			match(RPAREN);
			setState(4010);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INCLUSIVE) {
				{
				setState(4009);
				match(INCLUSIVE);
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionHashSpaceContext extends ParserRuleContext {
		public TerminalNode HASH() { return getToken(DB2zSQLParser.HASH, 0); }
		public TerminalNode SPACE() { return getToken(DB2zSQLParser.SPACE, 0); }
		public TerminalNode SQLIDENTIFIER() { return getToken(DB2zSQLParser.SQLIDENTIFIER, 0); }
		public PartitionHashSpaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionHashSpace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPartitionHashSpace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPartitionHashSpace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPartitionHashSpace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionHashSpaceContext partitionHashSpace() throws RecognitionException {
		PartitionHashSpaceContext _localctx = new PartitionHashSpaceContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_partitionHashSpace);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4012);
			match(HASH);
			setState(4013);
			match(SPACE);
			setState(4014);
			match(SQLIDENTIFIER);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterHashOrganizationContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(DB2zSQLParser.ADD, 0); }
		public TerminalNode ORGANIZE() { return getToken(DB2zSQLParser.ORGANIZE, 0); }
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public List<TerminalNode> HASH() { return getTokens(DB2zSQLParser.HASH); }
		public TerminalNode HASH(int i) {
			return getToken(DB2zSQLParser.HASH, i);
		}
		public TerminalNode UNIQUE() { return getToken(DB2zSQLParser.UNIQUE, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode SPACE() { return getToken(DB2zSQLParser.SPACE, 0); }
		public TerminalNode SQLIDENTIFIER() { return getToken(DB2zSQLParser.SQLIDENTIFIER, 0); }
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode ORGANIZATION() { return getToken(DB2zSQLParser.ORGANIZATION, 0); }
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public AlterHashOrganizationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterHashOrganization; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterHashOrganization(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterHashOrganization(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterHashOrganization(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterHashOrganizationContext alterHashOrganization() throws RecognitionException {
		AlterHashOrganizationContext _localctx = new AlterHashOrganizationContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_alterHashOrganization);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4041);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
				{
				{
				setState(4016);
				match(ADD);
				setState(4017);
				match(ORGANIZE);
				setState(4018);
				match(BY);
				setState(4019);
				match(HASH);
				setState(4020);
				match(UNIQUE);
				setState(4021);
				match(LPAREN);
				setState(4022);
				columnName();
				setState(4027);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4023);
					match(COMMA);
					setState(4024);
					columnName();
					}
					}
					setState(4029);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4030);
				match(RPAREN);
				setState(4031);
				match(HASH);
				setState(4032);
				match(SPACE);
				setState(4033);
				match(SQLIDENTIFIER);
				}
				}
				break;
			case ALTER:
				{
				{
				setState(4035);
				match(ALTER);
				setState(4036);
				match(ORGANIZATION);
				setState(4037);
				match(SET);
				setState(4038);
				match(HASH);
				setState(4039);
				match(SPACE);
				setState(4040);
				match(SQLIDENTIFIER);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitioningClauseElementContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(DB2zSQLParser.PARTITION, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public PartitioningPhraseContext partitioningPhrase() {
			return getRuleContext(PartitioningPhraseContext.class,0);
		}
		public PartitionHashSpaceContext partitionHashSpace() {
			return getRuleContext(PartitionHashSpaceContext.class,0);
		}
		public PartitioningClauseElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitioningClauseElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPartitioningClauseElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPartitioningClauseElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPartitioningClauseElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitioningClauseElementContext partitioningClauseElement() throws RecognitionException {
		PartitioningClauseElementContext _localctx = new PartitioningClauseElementContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_partitioningClauseElement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4043);
			match(PARTITION);
			setState(4044);
			match(INTEGERLITERAL);
			setState(4045);
			partitioningPhrase();
			setState(4047);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HASH) {
				{
				setState(4046);
				partitionHashSpace();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionClauseContext extends ParserRuleContext {
		public PartitioningPhraseContext partitioningPhrase() {
			return getRuleContext(PartitioningPhraseContext.class,0);
		}
		public PartitionHashSpaceContext partitionHashSpace() {
			return getRuleContext(PartitionHashSpaceContext.class,0);
		}
		public PartitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPartitionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPartitionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPartitionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionClauseContext partitionClause() throws RecognitionException {
		PartitionClauseContext _localctx = new PartitionClauseContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_partitionClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4051);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENDING:
				{
				setState(4049);
				partitioningPhrase();
				}
				break;
			case HASH:
				{
				setState(4050);
				partitionHashSpace();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RotatePartitionClauseContext extends ParserRuleContext {
		public PartitioningPhraseContext partitioningPhrase() {
			return getRuleContext(PartitioningPhraseContext.class,0);
		}
		public TerminalNode RESET() { return getToken(DB2zSQLParser.RESET, 0); }
		public RotatePartitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rotatePartitionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRotatePartitionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRotatePartitionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRotatePartitionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RotatePartitionClauseContext rotatePartitionClause() throws RecognitionException {
		RotatePartitionClauseContext _localctx = new RotatePartitionClauseContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_rotatePartitionClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4053);
			partitioningPhrase();
			setState(4054);
			match(RESET);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExtraRowOptionContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public TerminalNode DELETE() { return getToken(DB2zSQLParser.DELETE, 0); }
		public TerminalNode ADD() { return getToken(DB2zSQLParser.ADD, 0); }
		public TerminalNode EXTRA() { return getToken(DB2zSQLParser.EXTRA, 0); }
		public TerminalNode ROW() { return getToken(DB2zSQLParser.ROW, 0); }
		public ExtraRowOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extraRowOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterExtraRowOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitExtraRowOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitExtraRowOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExtraRowOptionContext extraRowOption() throws RecognitionException {
		ExtraRowOptionContext _localctx = new ExtraRowOptionContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_extraRowOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4056);
			match(ON);
			setState(4057);
			match(DELETE);
			setState(4058);
			match(ADD);
			setState(4059);
			match(EXTRA);
			setState(4060);
			match(ROW);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MaterializedQueryDefinitionContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public FullSelectContext fullSelect() {
			return getRuleContext(FullSelectContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public RefreshableTableOptionsContext refreshableTableOptions() {
			return getRuleContext(RefreshableTableOptionsContext.class,0);
		}
		public MaterializedQueryDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_materializedQueryDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterMaterializedQueryDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitMaterializedQueryDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitMaterializedQueryDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MaterializedQueryDefinitionContext materializedQueryDefinition() throws RecognitionException {
		MaterializedQueryDefinitionContext _localctx = new MaterializedQueryDefinitionContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_materializedQueryDefinition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4062);
			match(LPAREN);
			setState(4063);
			fullSelect();
			setState(4064);
			match(RPAREN);
			setState(4065);
			refreshableTableOptions();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MaterializedQueryAlterationContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public List<RefreshableTableOptionsListContext> refreshableTableOptionsList() {
			return getRuleContexts(RefreshableTableOptionsListContext.class);
		}
		public RefreshableTableOptionsListContext refreshableTableOptionsList(int i) {
			return getRuleContext(RefreshableTableOptionsListContext.class,i);
		}
		public MaterializedQueryAlterationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_materializedQueryAlteration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterMaterializedQueryAlteration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitMaterializedQueryAlteration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitMaterializedQueryAlteration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MaterializedQueryAlterationContext materializedQueryAlteration() throws RecognitionException {
		MaterializedQueryAlterationContext _localctx = new MaterializedQueryAlterationContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_materializedQueryAlteration);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4067);
			match(SET);
			setState(4069); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4068);
					refreshableTableOptionsList();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4071); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,470,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RefreshableTableOptionsContext extends ParserRuleContext {
		public TerminalNode DATA() { return getToken(DB2zSQLParser.DATA, 0); }
		public TerminalNode INITIALLY() { return getToken(DB2zSQLParser.INITIALLY, 0); }
		public List<TerminalNode> DEFERRED() { return getTokens(DB2zSQLParser.DEFERRED); }
		public TerminalNode DEFERRED(int i) {
			return getToken(DB2zSQLParser.DEFERRED, i);
		}
		public TerminalNode REFRESH() { return getToken(DB2zSQLParser.REFRESH, 0); }
		public List<RefreshableTableOptionsListContext> refreshableTableOptionsList() {
			return getRuleContexts(RefreshableTableOptionsListContext.class);
		}
		public RefreshableTableOptionsListContext refreshableTableOptionsList(int i) {
			return getRuleContext(RefreshableTableOptionsListContext.class,i);
		}
		public RefreshableTableOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_refreshableTableOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRefreshableTableOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRefreshableTableOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRefreshableTableOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RefreshableTableOptionsContext refreshableTableOptions() throws RecognitionException {
		RefreshableTableOptionsContext _localctx = new RefreshableTableOptionsContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_refreshableTableOptions);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4073);
			match(DATA);
			setState(4074);
			match(INITIALLY);
			setState(4075);
			match(DEFERRED);
			setState(4076);
			match(REFRESH);
			setState(4077);
			match(DEFERRED);
			setState(4081);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,471,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4078);
					refreshableTableOptionsList();
					}
					} 
				}
				setState(4083);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,471,_ctx);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RefreshableTableOptionsListContext extends ParserRuleContext {
		public TerminalNode MAINTAINED() { return getToken(DB2zSQLParser.MAINTAINED, 0); }
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public TerminalNode QUERY() { return getToken(DB2zSQLParser.QUERY, 0); }
		public TerminalNode OPTIMIZATION() { return getToken(DB2zSQLParser.OPTIMIZATION, 0); }
		public TerminalNode SYSTEM() { return getToken(DB2zSQLParser.SYSTEM, 0); }
		public TerminalNode USER() { return getToken(DB2zSQLParser.USER, 0); }
		public TerminalNode ENABLE() { return getToken(DB2zSQLParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(DB2zSQLParser.DISABLE, 0); }
		public RefreshableTableOptionsListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_refreshableTableOptionsList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRefreshableTableOptionsList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRefreshableTableOptionsList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRefreshableTableOptionsList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RefreshableTableOptionsListContext refreshableTableOptionsList() throws RecognitionException {
		RefreshableTableOptionsListContext _localctx = new RefreshableTableOptionsListContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_refreshableTableOptionsList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4090);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAINTAINED:
				{
				{
				setState(4084);
				match(MAINTAINED);
				setState(4085);
				match(BY);
				setState(4086);
				_la = _input.LA(1);
				if ( !(_la==SYSTEM || _la==USER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case DISABLE:
			case ENABLE:
				{
				{
				setState(4087);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4088);
				match(QUERY);
				setState(4089);
				match(OPTIMIZATION);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MaterializedQueryTableAlterationContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public List<RefreshableTableOptionsListContext> refreshableTableOptionsList() {
			return getRuleContexts(RefreshableTableOptionsListContext.class);
		}
		public RefreshableTableOptionsListContext refreshableTableOptionsList(int i) {
			return getRuleContext(RefreshableTableOptionsListContext.class,i);
		}
		public MaterializedQueryTableAlterationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_materializedQueryTableAlteration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterMaterializedQueryTableAlteration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitMaterializedQueryTableAlteration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitMaterializedQueryTableAlteration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MaterializedQueryTableAlterationContext materializedQueryTableAlteration() throws RecognitionException {
		MaterializedQueryTableAlterationContext _localctx = new MaterializedQueryTableAlterationContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_materializedQueryTableAlteration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4092);
			match(SET);
			setState(4094); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4093);
				refreshableTableOptionsList();
				}
				}
				setState(4096); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==DISABLE || _la==MAINTAINED || _la==ENABLE );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PeriodDefinitionContext extends ParserRuleContext {
		public TerminalNode SYSTEM_TIME() { return getToken(DB2zSQLParser.SYSTEM_TIME, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public BeginColumnNameContext beginColumnName() {
			return getRuleContext(BeginColumnNameContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(DB2zSQLParser.COMMA, 0); }
		public EndColumnNameContext endColumnName() {
			return getRuleContext(EndColumnNameContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode BUSINESS_TIME() { return getToken(DB2zSQLParser.BUSINESS_TIME, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(DB2zSQLParser.EXCLUSIVE, 0); }
		public TerminalNode INCLUSIVE() { return getToken(DB2zSQLParser.INCLUSIVE, 0); }
		public PeriodDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_periodDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPeriodDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPeriodDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPeriodDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PeriodDefinitionContext periodDefinition() throws RecognitionException {
		PeriodDefinitionContext _localctx = new PeriodDefinitionContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_periodDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4113);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SYSTEM_TIME:
				{
				{
				setState(4098);
				match(SYSTEM_TIME);
				setState(4099);
				match(LPAREN);
				setState(4100);
				beginColumnName();
				setState(4101);
				match(COMMA);
				setState(4102);
				endColumnName();
				setState(4103);
				match(RPAREN);
				}
				}
				break;
			case BUSINESS_TIME:
				{
				{
				setState(4105);
				match(BUSINESS_TIME);
				setState(4106);
				match(LPAREN);
				setState(4107);
				beginColumnName();
				setState(4108);
				match(COMMA);
				setState(4109);
				endColumnName();
				setState(4110);
				_la = _input.LA(1);
				if ( !(_la==INCLUSIVE || _la==EXCLUSIVE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4111);
				match(RPAREN);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnDefinitionContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public BuiltInTypeContext builtInType() {
			return getRuleContext(BuiltInTypeContext.class,0);
		}
		public DistinctTypeNameContext distinctTypeName() {
			return getRuleContext(DistinctTypeNameContext.class,0);
		}
		public List<ColumnDefinitionOptionList1Context> columnDefinitionOptionList1() {
			return getRuleContexts(ColumnDefinitionOptionList1Context.class);
		}
		public ColumnDefinitionOptionList1Context columnDefinitionOptionList1(int i) {
			return getRuleContext(ColumnDefinitionOptionList1Context.class,i);
		}
		public List<ColumnDefinitionOptionList2Context> columnDefinitionOptionList2() {
			return getRuleContexts(ColumnDefinitionOptionList2Context.class);
		}
		public ColumnDefinitionOptionList2Context columnDefinitionOptionList2(int i) {
			return getRuleContext(ColumnDefinitionOptionList2Context.class,i);
		}
		public ColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterColumnDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitColumnDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitColumnDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnDefinitionContext columnDefinition() throws RecognitionException {
		ColumnDefinitionContext _localctx = new ColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_columnDefinition);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4131);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,477,_ctx) ) {
			case 1:
				{
				{
				setState(4115);
				columnName();
				setState(4116);
				builtInType();
				setState(4120);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,475,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4117);
						columnDefinitionOptionList1();
						}
						} 
					}
					setState(4122);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,475,_ctx);
				}
				}
				}
				break;
			case 2:
				{
				{
				setState(4123);
				columnName();
				setState(4124);
				distinctTypeName();
				setState(4128);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,476,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4125);
						columnDefinitionOptionList2();
						}
						} 
					}
					setState(4130);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,476,_ctx);
				}
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExternalProgramNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public ExternalProgramNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_externalProgramName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterExternalProgramName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitExternalProgramName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitExternalProgramName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExternalProgramNameContext externalProgramName() throws RecognitionException {
		ExternalProgramNameContext _localctx = new ExternalProgramNameContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_externalProgramName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4135);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case ALL:
			case ALLOCATE:
			case ALLOW:
			case ALTER:
			case ALTERAND:
			case ANY:
			case ARRAY:
			case ARRAY_EXISTS:
			case AS:
			case ASENSITIVE:
			case ASSOCIATE:
			case ASUTIME:
			case AT:
			case AUDIT:
			case AUX:
			case AUXILIARY:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BUFFERPOOL:
			case BY:
			case CALL:
			case CAPTURE:
			case CASCADED:
			case CASE:
			case CAST:
			case CCSID:
			case CHAR:
			case CHARACTER:
			case CHECK:
			case CLONE:
			case CLOSE:
			case CLUSTER:
			case COLLECTION:
			case COLLID:
			case COLUMN:
			case COMMENT:
			case COMMIT:
			case CONCAT:
			case CONDITION:
			case CONNECT:
			case CONNECTION:
			case CONSTRAINT:
			case CONTAINS:
			case CONTENT:
			case CONTINUE:
			case CREATE:
			case CUBE:
			case CURRENT:
			case CURRENT_LC_CTYPE:
			case CURRVAL:
			case CURSOR:
			case DATA:
			case DATABASE:
			case DAY:
			case DAYS:
			case DBINFO:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DISABLE:
			case DISALLOW:
			case DISTINCT:
			case DO:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSSIZE:
			case DYNAMIC:
			case EDITPROC:
			case ELSE:
			case ELSEIF:
			case ENCODING:
			case ENCRYPTION:
			case END:
			case END_EXEC:
			case ENDING:
			case ERASE:
			case ESCAPE:
			case EXCEPT:
			case EXCEPTION:
			case EXEC_SQL:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case FENCED:
			case FETCH:
			case FIELDPROC:
			case FINAL:
			case FIRST:
			case FOR:
			case FREE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANT:
			case GROUP:
			case HANDLER:
			case HAVING:
			case HOLD:
			case HOUR:
			case HOURS:
			case IF:
			case IMMEDIATE:
			case IN:
			case INCLUSIVE:
			case INDEX:
			case INDEXBP:
			case INHERIT:
			case INNER:
			case INOUT:
			case INSENSITIVE:
			case INSERT:
			case INTERSECT:
			case INTO:
			case IS:
			case ISOBID:
			case ITERATE:
			case JAR:
			case JOIN:
			case KEEP:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LAST:
			case LC_CTYPE:
			case LEAVE:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOCALE:
			case LOCATOR:
			case LOCATORS:
			case LOCK:
			case LOCKMAX:
			case LOCKSIZE:
			case LONG:
			case LOOP:
			case MAINTAINED:
			case MATERIALIZED:
			case MICROSECOND:
			case MICROSECONDS:
			case MODIFIES:
			case MONTH:
			case MONTHS:
			case NEXT:
			case NEXTVAL:
			case NO:
			case NONE:
			case NOT:
			case NULL:
			case NULLS:
			case NUMPARTS:
			case OBID:
			case OF:
			case OFFSET:
			case OLD:
			case ON:
			case OPEN:
			case OPTIMIZATION:
			case OPTIMIZE:
			case OR:
			case ORDER:
			case ORGANIZATION:
			case OUT:
			case OUTER:
			case PACKAGE:
			case PADDED:
			case PARAMETER:
			case PART:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONING:
			case PATH:
			case PERIOD:
			case PIECESIZE:
			case PLAN:
			case PRECISION:
			case PREPARE:
			case PREVVAL:
			case PRIOR:
			case PRIQTY:
			case PRIVILEGES:
			case PROCEDURE:
			case PROGRAM:
			case PSID:
			case PUBLIC:
			case QUERY:
			case QUERYNO:
			case READS:
			case REFERENCES:
			case REFRESH:
			case RELEASE:
			case RENAME:
			case REPEAT:
			case RESIGNAL:
			case RESTRICT:
			case RESULT:
			case RESULT_SET_LOCATOR:
			case RETURN:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUND_CEILING:
			case ROUND_DOWN:
			case ROUND_FLOOR:
			case ROUND_HALF_DOWN:
			case ROUND_HALF_EVEN:
			case ROUND_HALF_UP:
			case ROUND_UP:
			case ROW:
			case ROWSET:
			case RUN:
			case SAVEPOINT:
			case SCHEMA:
			case SCRATCHPAD:
			case SECOND:
			case SECONDS:
			case SECQTY:
			case SECURITY:
			case SELECT:
			case SENSITIVE:
			case SEQUENCE:
			case SET:
			case SIGNAL:
			case SIMPLE:
			case SOME:
			case SOURCE:
			case SPECIFIC:
			case STANDARD:
			case STATEMENT:
			case STATIC:
			case STAY:
			case STOGROUP:
			case STORES:
			case STYLE:
			case SUMMARY:
			case SYNONYM:
			case SYSDATE:
			case SYSTEM:
			case SYSTIMESTAMP:
			case TABLE:
			case TABLESPACE:
			case THEN:
			case TO:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNDO:
			case UNION:
			case UNIQUE:
			case UNTIL:
			case UPDATE:
			case USING:
			case VALIDPROC:
			case VALUE:
			case VALUES:
			case VARIABLE:
			case VARIANT:
			case VCAT:
			case VERSIONING:
			case VIEW:
			case VOLATILE:
			case VOLUMES:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WLM:
			case XMLCAST:
			case XMLEXISTS:
			case XMLNAMESPACES:
			case YEAR:
			case YEARS:
			case ZONE:
			case AND:
			case ARRAY_AGG:
			case ASC:
			case AVG:
			case BIT:
			case CHANGE:
			case CODEUNITS16:
			case CODEUNITS32:
			case CORR:
			case CORRELATION:
			case COUNT:
			case COUNT_BIG:
			case COVAR:
			case COVARIANCE:
			case COVARIANCE_SAMP:
			case COVAR_POP:
			case COVAR_SAMP:
			case CS:
			case CUME_DIST:
			case DENSE_RANK:
			case DESC:
			case EBCDIC:
			case EXCLUSIVE:
			case FIRST_VALUE:
			case FOLLOWING:
			case GROUPING:
			case IGNORE:
			case INDICATOR:
			case INPUT:
			case ISNULL:
			case LAG:
			case LARGE:
			case LAST_VALUE:
			case LEAD:
			case LISTAGG:
			case LOCKED:
			case LOCKS:
			case MEDIAN:
			case MINUTES:
			case MIXED:
			case NOTNULL:
			case NTH_VALUE:
			case NTILE:
			case NUMERIC:
			case OBJECT:
			case OCTETS:
			case ONLY:
			case OVER:
			case PASSING:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PERCENT_RANK:
			case PRECEDING:
			case PREVIOUS:
			case RANGE:
			case RANK:
			case RATIO_TO_REPORT:
			case READ:
			case REF:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_ICPT:
			case REGR_INTERCEPT:
			case REGR_R2:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case RESPECT:
			case ROW_NUMBER:
			case ROWS:
			case RR:
			case RS:
			case SBCS:
			case SELECTIVITY:
			case SETS:
			case SHARE:
			case SKIP_:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case TOKEN:
			case UNBOUNDED:
			case UNPACK:
			case UR:
			case USE:
			case VAR:
			case VARIANCE:
			case VARIANCE_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARYING:
			case WITHOUT:
			case XML:
			case XMLAGG:
			case COLUMNS:
			case SQLID:
			case ORDINALITY:
			case SYSTEM_TIME:
			case BUSINESS_TIME:
			case MULTIPLIER:
			case UNNEST:
			case CROSS:
			case CALLER:
			case CLIENT:
			case POSITIONING:
			case SCROLL:
			case ACTION:
			case ASSEMBLE:
			case C_:
			case CALLED:
			case COBOL:
			case DB2:
			case DEFINER:
			case DISPATCH:
			case ENVIRONMENT:
			case FAILURE:
			case FAILURES:
			case JAVA:
			case MAIN:
			case NAME:
			case OPTIONS:
			case PARALLEL:
			case PLI:
			case REGISTERS:
			case RESIDENT:
			case SECURED:
			case SPECIAL:
			case SQL:
			case STOP:
			case SUB:
			case YES:
			case APPLICATION:
			case CHANGED:
			case COMPATIBILITY:
			case COMPRESS:
			case COPY:
			case FREEPAGE:
			case GBPCACHE:
			case INCLUDE:
			case MAXVALUE:
			case MINVALUE:
			case PCTFREE:
			case REGENERATE:
			case MASK:
			case ENABLE:
			case PERMISSION:
			case ATOMIC:
			case SQLEXCEPTION:
			case MERGE:
			case MATCHED:
			case SQLSTATE:
			case MESSAGE_TEXT:
			case OVERRIDING:
			case PORTION:
			case DB2SQL:
			case DEBUG:
			case GENERAL:
			case MODE_:
			case REXX:
			case CACHE:
			case CYCLE:
			case INCREMENT:
			case RESTART:
			case DATACLAS:
			case MGMTCLAS:
			case REMOVE:
			case STORCLAS:
			case ACCESS:
			case ACTIVATE:
			case ALWAYS:
			case APPEND:
			case ARCHIVE:
			case BUSINESS:
			case CASCADE:
			case CHANGES:
			case CONTROL:
			case DEACTIVATE:
			case DEFERRED:
			case EACH:
			case ENFORCED:
			case EXTRA:
			case FOREIGN:
			case HIDDEN_:
			case HISTORY:
			case ID:
			case IDENTITY:
			case IMPLICITLY:
			case INITIALLY:
			case INLINE:
			case OPERATION:
			case ORGANIZE:
			case OVERLAPS:
			case PACKAGE_NAME:
			case PACKAGE_SCHEMA:
			case PACKAGE_VERSION:
			case PRIMARY:
			case RESET:
			case ROTATE:
			case START:
			case SYSIBM:
			case TRANSACTION:
			case XMLSCHEMA:
			case ELEMENT:
			case URL:
			case NAMESPACE:
			case LOCATION:
			case SYSXSR:
			case ALGORITHM:
			case FIXEDLENGTH:
			case HUFFMAN:
			case LOB:
			case LOG:
			case LOGGED:
			case MAXPARTITIONS:
			case MAXROWS:
			case MEMBER:
			case MOVE:
			case PAGE:
			case PAGENUM:
			case PENDING:
			case RELATIVE:
			case SEGSIZE:
			case TRACKMOD:
			case ADDRESS:
			case ATTRIBUTES:
			case AUTHENTICATION:
			case AUTHID:
			case CONTEXT:
			case JOBNAME:
			case OWNER:
			case PROFILE:
			case QUALIFIER:
			case SERVAUTH:
			case TRUSTED:
			case SECTION:
			case ACTIVE:
			case VERSION:
			case ALIAS:
			case WORK:
			case WORKFILE:
			case SYSDEFLT:
			case NULTERM:
			case STRUCTURE:
			case GENERIC:
			case ABS:
			case ABSVAL:
			case ACOS:
			case ADD_DAYS:
			case ADD_MONTHS:
			case ARRAY_DELETE:
			case ARRAY_FIRST:
			case ARRAY_LAST:
			case ARRAY_NEXT:
			case ARRAY_PRIOR:
			case ARRAY_TRIM:
			case ASCII:
			case ASCII_CHR:
			case ASCIISTR:
			case ASCII_STR:
			case ASIN:
			case ATAN:
			case ATAN2:
			case ATANH:
			case BIGINT:
			case BINARY:
			case BITAND:
			case BITANDNOT:
			case BITNOT:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BTRIM:
			case CARDINALITY:
			case CCSID_ENCODING:
			case CEIL:
			case CEILING:
			case CHAR9:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case CHR:
			case CLOB:
			case COALESCE:
			case COLLATION_KEY:
			case COMPARE_DECFLOAT:
			case COS:
			case COSH:
			case DATE:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFWEEK_ISO:
			case DAYOFYEAR:
			case DAYS_BETWEEN:
			case DBCLOB:
			case DEC:
			case DECFLOAT:
			case DECFLOAT_FORMAT:
			case DECFLOAT_SORTKEY:
			case DECIMAL:
			case DECODE:
			case DECRYPT_BINARY:
			case DECRYPT_BIT:
			case DECRYPT_CHAR:
			case DECRYPT_DATAKEY_BIGINT:
			case DECRYPT_DATAKEY_BIT:
			case DECRYPT_DATAKEY_CLOB:
			case DECRYPT_DATAKEY_DBCLOB:
			case DECRYPT_DATAKEY_DECIMAL:
			case DECRYPT_DATAKEY_INTEGER:
			case DECRYPT_DATAKEY_VARCHAR:
			case DECRYPT_DATAKEY_VARGRAPHIC:
			case DECRYPT_DB:
			case DEGREES:
			case DIFFERENCE:
			case DIGITS:
			case DOUBLE_PRECISION:
			case DSN_XMLVALIDATE:
			case EBCDIC_CHR:
			case EBCDIC_STR:
			case ENCRYPT_DATAKEY:
			case ENCRYPT_TDES:
			case EXP:
			case EXTRACT:
			case FLOAT:
			case FLOOR:
			case GENERATE_UNIQUE:
			case GENERATE_UNIQUE_BINARY:
			case GETHINT:
			case GETVARIABLE:
			case GRAPHIC:
			case GREATEST:
			case HASH:
			case HASH_CRC32:
			case HASH_MD5:
			case HASH_SHA1:
			case HASH_SHA256:
			case HEX:
			case IDENTITY_VAL_LOCAL:
			case IFNULL:
			case INSTR:
			case INT:
			case INTEGER:
			case JULIAN_DAY:
			case LAST_DAY:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LN:
			case LOCATE:
			case LOCATE_IN_STRING:
			case LOG10:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAX:
			case MAX_CARDINALITY:
			case MIDNIGHT_SECONDS:
			case MIN:
			case MINUTE:
			case MOD:
			case MONTHS_BETWEEN:
			case MQREAD:
			case MQREADCLOB:
			case MQRECEIVE:
			case MQRECEIVECLOB:
			case MQSEND:
			case MULTIPLY_ALT:
			case NEXT_DAY:
			case NEXT_MONTH:
			case NORMALIZE_DECFLOAT:
			case NORMALIZE_STRING:
			case NULLIF:
			case NVL:
			case OVERLAY:
			case PACK:
			case POSITION:
			case POSSTR:
			case POW:
			case POWER:
			case QUANTIZE:
			case QUARTER:
			case RADIANS:
			case RAISE_ERROR:
			case RAND:
			case RANDOM:
			case REAL:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REPLACE:
			case RID:
			case ROUND:
			case ROUND_TIMESTAMP:
			case ROWID:
			case RPAD:
			case RTRIM:
			case SCORE:
			case SIGN:
			case SIN:
			case SINH:
			case SMALLINT:
			case SOAPHTTPC:
			case SOAPHTTPNC:
			case SOAPHTTPNV:
			case SOAPHTTPV:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STRIP:
			case STRLEFT:
			case STRPOS:
			case STRRIGHT:
			case SUBSTR:
			case SUBSTRING:
			case TAN:
			case TANH:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIMESTAMP_FORMAT:
			case TIMESTAMP_ISO:
			case TIMESTAMP_TZ:
			case TO_CHAR:
			case TO_CLOB:
			case TO_DATE:
			case TO_NUMBER:
			case TOTALORDER:
			case TO_TIMESTAMP:
			case TRANSLATE:
			case TRIM:
			case TRIM_ARRAY:
			case TRUNC:
			case TRUNC_TIMESTAMP:
			case UCASE:
			case UNICODE:
			case UNICODE_STR:
			case UNISTR:
			case UPPER:
			case VARBINARY:
			case VARCHAR:
			case VARCHAR9:
			case VARCHAR_BIT_FORMAT:
			case VARCHAR_FORMAT:
			case VARGRAPHIC:
			case VERIFY_GROUP_FOR_USER:
			case VERIFY_ROLE_FOR_USER:
			case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
			case WEEK:
			case WEEK_ISO:
			case WRAP:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLCONCAT:
			case XMLDOCUMENT:
			case XMLELEMENT:
			case XMLFOREST:
			case XMLMODIFY:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLSERIALIZE:
			case XMLTEXT:
			case XMLXSROBJECTID:
			case XSLTRANSFORM:
			case CURRENT_ACCELERATOR:
			case CURRENT_APPLICATION_COMPATIBILITY:
			case CURRENT_APPLICATION_ENCODING_SCHEME:
			case CURRENT_CLIENT_ACCTNG:
			case CURRENT_CLIENT_APPLNAME:
			case CURRENT_CLIENT_CORR_TOKEN:
			case CURRENT_CLIENT_USERID:
			case CURRENT_CLIENT_WRKSTNNAME:
			case CURRENT_DATE:
			case CURRENT_DEBUG_MODE:
			case CURRENT_DECFLOAT_ROUNDING_MODE:
			case CURRENT_DEGREE:
			case CURRENT_EXPLAIN_MODE:
			case CURRENT_GET_ACCEL_ARCHIVE:
			case CURRENT_LOCALE_LC_CTYPE:
			case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
			case CURRENT_MEMBER:
			case CURRENT_OPTIMIZATION_HINT:
			case CURRENT_PACKAGE_PATH:
			case CURRENT_PACKAGESET:
			case CURRENT_PATH:
			case CURRENT_PRECISION:
			case CURRENT_QUERY_ACCELERATION:
			case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
			case CURRENT_REFRESH_AGE:
			case CURRENT_ROUTINE_VERSION:
			case CURRENT_RULES:
			case CURRENT_SCHEMA:
			case CURRENT_SERVER:
			case CURRENT_SQLID:
			case CURRENT_TEMPORAL_BUSINESS_TIME:
			case CURRENT_TEMPORAL_SYSTEM_TIME:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_TIME_ZONE:
			case ENCRYPTION_PASSWORD:
			case SESSION_TIME_ZONE:
			case SESSION_USER:
			case USER:
			case ADMIN_TASK_LIST:
			case ADMIN_TASK_OUTPUT:
			case ADMIN_TASK_STATUS:
			case BLOCKING_THREADS:
			case MQREADALL:
			case MQREADALLCLOB:
			case MQRECEIVEALL:
			case MQRECEIVEALLCLOB:
			case XMLTABLE:
			case SQLIDENTIFIER:
				{
				setState(4133);
				identifier();
				}
				break;
			case NONNUMERICLITERAL:
				{
				setState(4134);
				match(NONNUMERICLITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PackagePathContext extends ParserRuleContext {
		public CollectionIDContext collectionID() {
			return getRuleContext(CollectionIDContext.class,0);
		}
		public TerminalNode SESSION_USER() { return getToken(DB2zSQLParser.SESSION_USER, 0); }
		public TerminalNode USER() { return getToken(DB2zSQLParser.USER, 0); }
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public TerminalNode CURRENT() { return getToken(DB2zSQLParser.CURRENT, 0); }
		public TerminalNode PACKAGE() { return getToken(DB2zSQLParser.PACKAGE, 0); }
		public TerminalNode PATH() { return getToken(DB2zSQLParser.PATH, 0); }
		public PackagePathContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_packagePath; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPackagePath(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPackagePath(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPackagePath(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PackagePathContext packagePath() throws RecognitionException {
		PackagePathContext _localctx = new PackagePathContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_packagePath);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4147);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,479,_ctx) ) {
			case 1:
				{
				setState(4137);
				collectionID();
				}
				break;
			case 2:
				{
				setState(4138);
				match(SESSION_USER);
				}
				break;
			case 3:
				{
				setState(4139);
				match(USER);
				}
				break;
			case 4:
				{
				{
				setState(4140);
				match(CURRENT);
				setState(4141);
				match(PACKAGE);
				setState(4142);
				match(PATH);
				}
				}
				break;
			case 5:
				{
				{
				setState(4143);
				match(CURRENT);
				setState(4144);
				match(PATH);
				}
				}
				break;
			case 6:
				{
				setState(4145);
				hostVariable();
				}
				break;
			case 7:
				{
				setState(4146);
				match(NONNUMERICLITERAL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollectionIDContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public CollectionIDContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collectionID; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCollectionID(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCollectionID(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCollectionID(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollectionIDContext collectionID() throws RecognitionException {
		CollectionIDContext _localctx = new CollectionIDContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_collectionID);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4149);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RunTimeOptionsContext extends ParserRuleContext {
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public RunTimeOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_runTimeOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRunTimeOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRunTimeOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRunTimeOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RunTimeOptionsContext runTimeOptions() throws RecognitionException {
		RunTimeOptionsContext _localctx = new RunTimeOptionsContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_runTimeOptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4151);
			match(NONNUMERICLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ComparisonOperatorContext extends ParserRuleContext {
		public TerminalNode EQ() { return getToken(DB2zSQLParser.EQ, 0); }
		public TerminalNode GT() { return getToken(DB2zSQLParser.GT, 0); }
		public TerminalNode LT() { return getToken(DB2zSQLParser.LT, 0); }
		public TerminalNode GE() { return getToken(DB2zSQLParser.GE, 0); }
		public TerminalNode LE() { return getToken(DB2zSQLParser.LE, 0); }
		public TerminalNode NE() { return getToken(DB2zSQLParser.NE, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparisonOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterComparisonOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitComparisonOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitComparisonOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ComparisonOperatorContext comparisonOperator() throws RecognitionException {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_comparisonOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4153);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQ) | (1L << GT) | (1L << LT) | (1L << GE) | (1L << LE) | (1L << NE))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OperatorContext extends ParserRuleContext {
		public TerminalNode SPLAT() { return getToken(DB2zSQLParser.SPLAT, 0); }
		public TerminalNode PLUS() { return getToken(DB2zSQLParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(DB2zSQLParser.MINUS, 0); }
		public TerminalNode SLASH() { return getToken(DB2zSQLParser.SLASH, 0); }
		public TerminalNode CONCAT() { return getToken(DB2zSQLParser.CONCAT, 0); }
		public TerminalNode CONCATOP() { return getToken(DB2zSQLParser.CONCATOP, 0); }
		public OperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OperatorContext operator() throws RecognitionException {
		OperatorContext _localctx = new OperatorContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_operator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4155);
			_la = _input.LA(1);
			if ( !(((((_la - 12)) & ~0x3f) == 0 && ((1L << (_la - 12)) & ((1L << (PLUS - 12)) | (1L << (MINUS - 12)) | (1L << (SPLAT - 12)) | (1L << (SLASH - 12)) | (1L << (CONCATOP - 12)) | (1L << (CONCAT - 12)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionContext extends ParserRuleContext {
		public FunctionInvocationContext functionInvocation() {
			return getRuleContext(FunctionInvocationContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public SpecialRegisterContext specialRegister() {
			return getRuleContext(SpecialRegisterContext.class,0);
		}
		public ScalarFullSelectContext scalarFullSelect() {
			return getRuleContext(ScalarFullSelectContext.class,0);
		}
		public TimeZoneSpecificExpressionContext timeZoneSpecificExpression() {
			return getRuleContext(TimeZoneSpecificExpressionContext.class,0);
		}
		public LabeledDurationContext labeledDuration() {
			return getRuleContext(LabeledDurationContext.class,0);
		}
		public CaseExpressionContext caseExpression() {
			return getRuleContext(CaseExpressionContext.class,0);
		}
		public CastSpecificationContext castSpecification() {
			return getRuleContext(CastSpecificationContext.class,0);
		}
		public XmlCastSpecificationContext xmlCastSpecification() {
			return getRuleContext(XmlCastSpecificationContext.class,0);
		}
		public ArrayElementSpecificationContext arrayElementSpecification() {
			return getRuleContext(ArrayElementSpecificationContext.class,0);
		}
		public ArrayConstructorContext arrayConstructor() {
			return getRuleContext(ArrayConstructorContext.class,0);
		}
		public OlapSpecificationContext olapSpecification() {
			return getRuleContext(OlapSpecificationContext.class,0);
		}
		public RowChangeExpressionContext rowChangeExpression() {
			return getRuleContext(RowChangeExpressionContext.class,0);
		}
		public SequenceReferenceContext sequenceReference() {
			return getRuleContext(SequenceReferenceContext.class,0);
		}
		public List<OperatorContext> operator() {
			return getRuleContexts(OperatorContext.class);
		}
		public OperatorContext operator(int i) {
			return getRuleContext(OperatorContext.class,i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		ExpressionContext _localctx = new ExpressionContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_expression);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4207);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,482,_ctx) ) {
			case 1:
				{
				setState(4157);
				functionInvocation();
				}
				break;
			case 2:
				{
				setState(4158);
				match(LPAREN);
				setState(4159);
				expression();
				setState(4160);
				match(RPAREN);
				}
				break;
			case 3:
				{
				setState(4162);
				literal();
				}
				break;
			case 4:
				{
				setState(4163);
				columnName();
				}
				break;
			case 5:
				{
				setState(4164);
				hostVariable();
				}
				break;
			case 6:
				{
				setState(4165);
				specialRegister();
				}
				break;
			case 7:
				{
				setState(4166);
				scalarFullSelect();
				}
				break;
			case 8:
				{
				setState(4167);
				timeZoneSpecificExpression();
				}
				break;
			case 9:
				{
				setState(4168);
				labeledDuration();
				}
				break;
			case 10:
				{
				setState(4169);
				caseExpression();
				}
				break;
			case 11:
				{
				setState(4170);
				castSpecification();
				}
				break;
			case 12:
				{
				setState(4171);
				xmlCastSpecification();
				}
				break;
			case 13:
				{
				setState(4172);
				arrayElementSpecification();
				}
				break;
			case 14:
				{
				setState(4173);
				arrayConstructor();
				}
				break;
			case 15:
				{
				setState(4174);
				olapSpecification();
				}
				break;
			case 16:
				{
				setState(4175);
				rowChangeExpression();
				}
				break;
			case 17:
				{
				setState(4176);
				sequenceReference();
				}
				break;
			case 18:
				{
				{
				setState(4197);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,480,_ctx) ) {
				case 1:
					{
					setState(4177);
					functionInvocation();
					}
					break;
				case 2:
					{
					setState(4178);
					match(LPAREN);
					setState(4179);
					expression();
					setState(4180);
					match(RPAREN);
					}
					break;
				case 3:
					{
					setState(4182);
					literal();
					}
					break;
				case 4:
					{
					setState(4183);
					columnName();
					}
					break;
				case 5:
					{
					setState(4184);
					hostVariable();
					}
					break;
				case 6:
					{
					setState(4185);
					specialRegister();
					}
					break;
				case 7:
					{
					setState(4186);
					scalarFullSelect();
					}
					break;
				case 8:
					{
					setState(4187);
					timeZoneSpecificExpression();
					}
					break;
				case 9:
					{
					setState(4188);
					labeledDuration();
					}
					break;
				case 10:
					{
					setState(4189);
					caseExpression();
					}
					break;
				case 11:
					{
					setState(4190);
					castSpecification();
					}
					break;
				case 12:
					{
					setState(4191);
					xmlCastSpecification();
					}
					break;
				case 13:
					{
					setState(4192);
					arrayElementSpecification();
					}
					break;
				case 14:
					{
					setState(4193);
					arrayConstructor();
					}
					break;
				case 15:
					{
					setState(4194);
					olapSpecification();
					}
					break;
				case 16:
					{
					setState(4195);
					rowChangeExpression();
					}
					break;
				case 17:
					{
					setState(4196);
					sequenceReference();
					}
					break;
				}
				setState(4204);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,481,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4199);
						operator();
						setState(4200);
						expression();
						}
						} 
					}
					setState(4206);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,481,_ctx);
				}
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowChangeExpressionContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(DB2zSQLParser.ROW, 0); }
		public TerminalNode CHANGE() { return getToken(DB2zSQLParser.CHANGE, 0); }
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode TIMESTAMP() { return getToken(DB2zSQLParser.TIMESTAMP, 0); }
		public TerminalNode TOKEN() { return getToken(DB2zSQLParser.TOKEN, 0); }
		public RowChangeExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowChangeExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRowChangeExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRowChangeExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRowChangeExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowChangeExpressionContext rowChangeExpression() throws RecognitionException {
		RowChangeExpressionContext _localctx = new RowChangeExpressionContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_rowChangeExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4209);
			match(ROW);
			setState(4210);
			match(CHANGE);
			setState(4211);
			_la = _input.LA(1);
			if ( !(_la==TOKEN || _la==TIMESTAMP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4212);
			match(FOR);
			setState(4213);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SequenceReferenceContext extends ParserRuleContext {
		public TerminalNode VALUE() { return getToken(DB2zSQLParser.VALUE, 0); }
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode NEXT() { return getToken(DB2zSQLParser.NEXT, 0); }
		public TerminalNode PREVIOUS() { return getToken(DB2zSQLParser.PREVIOUS, 0); }
		public SequenceReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequenceReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSequenceReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSequenceReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSequenceReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SequenceReferenceContext sequenceReference() throws RecognitionException {
		SequenceReferenceContext _localctx = new SequenceReferenceContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_sequenceReference);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4215);
			_la = _input.LA(1);
			if ( !(_la==NEXT || _la==PREVIOUS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4216);
			match(VALUE);
			setState(4217);
			match(FOR);
			setState(4218);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionInvocationContext extends ParserRuleContext {
		public ScalarFunctionInvocationContext scalarFunctionInvocation() {
			return getRuleContext(ScalarFunctionInvocationContext.class,0);
		}
		public AggregateFunctionInvocationContext aggregateFunctionInvocation() {
			return getRuleContext(AggregateFunctionInvocationContext.class,0);
		}
		public RegressionFunctionInvocationContext regressionFunctionInvocation() {
			return getRuleContext(RegressionFunctionInvocationContext.class,0);
		}
		public ExternalFunctionInvocationContext externalFunctionInvocation() {
			return getRuleContext(ExternalFunctionInvocationContext.class,0);
		}
		public FunctionInvocationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionInvocation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFunctionInvocation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFunctionInvocation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFunctionInvocation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionInvocationContext functionInvocation() throws RecognitionException {
		FunctionInvocationContext _localctx = new FunctionInvocationContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_functionInvocation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4224);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,483,_ctx) ) {
			case 1:
				{
				setState(4220);
				scalarFunctionInvocation();
				}
				break;
			case 2:
				{
				setState(4221);
				aggregateFunctionInvocation();
				}
				break;
			case 3:
				{
				setState(4222);
				regressionFunctionInvocation();
				}
				break;
			case 4:
				{
				setState(4223);
				externalFunctionInvocation();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScalarFunctionInvocationContext extends ParserRuleContext {
		public ScalarFunctionContext scalarFunction() {
			return getRuleContext(ScalarFunctionContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public ScalarFunctionInvocationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scalarFunctionInvocation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterScalarFunctionInvocation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitScalarFunctionInvocation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitScalarFunctionInvocation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ScalarFunctionInvocationContext scalarFunctionInvocation() throws RecognitionException {
		ScalarFunctionInvocationContext _localctx = new ScalarFunctionInvocationContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_scalarFunctionInvocation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4229);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,484,_ctx) ) {
			case 1:
				{
				setState(4226);
				schemaName();
				setState(4227);
				match(DOT);
				}
				break;
			}
			setState(4231);
			scalarFunction();
			setState(4232);
			match(LPAREN);
			setState(4233);
			expression();
			setState(4238);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4234);
				match(COMMA);
				setState(4235);
				expression();
				}
				}
				setState(4240);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4241);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggregateFunctionInvocationContext extends ParserRuleContext {
		public AggregateFunctionContext aggregateFunction() {
			return getRuleContext(AggregateFunctionContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode SPLAT() { return getToken(DB2zSQLParser.SPLAT, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public TerminalNode DISTINCT() { return getToken(DB2zSQLParser.DISTINCT, 0); }
		public AggregateFunctionInvocationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregateFunctionInvocation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAggregateFunctionInvocation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAggregateFunctionInvocation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAggregateFunctionInvocation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggregateFunctionInvocationContext aggregateFunctionInvocation() throws RecognitionException {
		AggregateFunctionInvocationContext _localctx = new AggregateFunctionInvocationContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_aggregateFunctionInvocation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4246);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,486,_ctx) ) {
			case 1:
				{
				setState(4243);
				schemaName();
				setState(4244);
				match(DOT);
				}
				break;
			}
			setState(4248);
			aggregateFunction();
			setState(4249);
			match(LPAREN);
			setState(4251);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,487,_ctx) ) {
			case 1:
				{
				setState(4250);
				match(DISTINCT);
				}
				break;
			}
			setState(4255);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LPAREN:
			case COLON:
			case NONNUMERICLITERAL:
			case INTEGERLITERAL:
			case NUMERICLITERAL:
			case ADD:
			case AFTER:
			case ALL:
			case ALLOCATE:
			case ALLOW:
			case ALTER:
			case ALTERAND:
			case ANY:
			case ARRAY:
			case ARRAY_EXISTS:
			case AS:
			case ASENSITIVE:
			case ASSOCIATE:
			case ASUTIME:
			case AT:
			case AUDIT:
			case AUX:
			case AUXILIARY:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BUFFERPOOL:
			case BY:
			case CALL:
			case CAPTURE:
			case CASCADED:
			case CASE:
			case CAST:
			case CCSID:
			case CHAR:
			case CHARACTER:
			case CHECK:
			case CLONE:
			case CLOSE:
			case CLUSTER:
			case COLLECTION:
			case COLLID:
			case COLUMN:
			case COMMENT:
			case COMMIT:
			case CONCAT:
			case CONDITION:
			case CONNECT:
			case CONNECTION:
			case CONSTRAINT:
			case CONTAINS:
			case CONTENT:
			case CONTINUE:
			case CREATE:
			case CUBE:
			case CURRENT:
			case CURRENT_LC_CTYPE:
			case CURRVAL:
			case CURSOR:
			case DATA:
			case DATABASE:
			case DAY:
			case DAYS:
			case DBINFO:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DISABLE:
			case DISALLOW:
			case DISTINCT:
			case DO:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSSIZE:
			case DYNAMIC:
			case EDITPROC:
			case ELSE:
			case ELSEIF:
			case ENCODING:
			case ENCRYPTION:
			case END:
			case END_EXEC:
			case ENDING:
			case ERASE:
			case ESCAPE:
			case EXCEPT:
			case EXCEPTION:
			case EXEC_SQL:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case FENCED:
			case FETCH:
			case FIELDPROC:
			case FINAL:
			case FIRST:
			case FOR:
			case FREE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANT:
			case GROUP:
			case HANDLER:
			case HAVING:
			case HOLD:
			case HOUR:
			case HOURS:
			case IF:
			case IMMEDIATE:
			case IN:
			case INCLUSIVE:
			case INDEX:
			case INDEXBP:
			case INHERIT:
			case INNER:
			case INOUT:
			case INSENSITIVE:
			case INSERT:
			case INTERSECT:
			case INTO:
			case IS:
			case ISOBID:
			case ITERATE:
			case JAR:
			case JOIN:
			case KEEP:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LAST:
			case LC_CTYPE:
			case LEAVE:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOCALE:
			case LOCATOR:
			case LOCATORS:
			case LOCK:
			case LOCKMAX:
			case LOCKSIZE:
			case LONG:
			case LOOP:
			case MAINTAINED:
			case MATERIALIZED:
			case MICROSECOND:
			case MICROSECONDS:
			case MODIFIES:
			case MONTH:
			case MONTHS:
			case NEXT:
			case NEXTVAL:
			case NO:
			case NONE:
			case NOT:
			case NULL:
			case NULLS:
			case NUMPARTS:
			case OBID:
			case OF:
			case OFFSET:
			case OLD:
			case ON:
			case OPEN:
			case OPTIMIZATION:
			case OPTIMIZE:
			case OR:
			case ORDER:
			case ORGANIZATION:
			case OUT:
			case OUTER:
			case PACKAGE:
			case PADDED:
			case PARAMETER:
			case PART:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONING:
			case PATH:
			case PERIOD:
			case PIECESIZE:
			case PLAN:
			case PRECISION:
			case PREPARE:
			case PREVVAL:
			case PRIOR:
			case PRIQTY:
			case PRIVILEGES:
			case PROCEDURE:
			case PROGRAM:
			case PSID:
			case PUBLIC:
			case QUERY:
			case QUERYNO:
			case READS:
			case REFERENCES:
			case REFRESH:
			case RELEASE:
			case RENAME:
			case REPEAT:
			case RESIGNAL:
			case RESTRICT:
			case RESULT:
			case RESULT_SET_LOCATOR:
			case RETURN:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUND_CEILING:
			case ROUND_DOWN:
			case ROUND_FLOOR:
			case ROUND_HALF_DOWN:
			case ROUND_HALF_EVEN:
			case ROUND_HALF_UP:
			case ROUND_UP:
			case ROW:
			case ROWSET:
			case RUN:
			case SAVEPOINT:
			case SCHEMA:
			case SCRATCHPAD:
			case SECOND:
			case SECONDS:
			case SECQTY:
			case SECURITY:
			case SELECT:
			case SENSITIVE:
			case SEQUENCE:
			case SET:
			case SIGNAL:
			case SIMPLE:
			case SOME:
			case SOURCE:
			case SPECIFIC:
			case STANDARD:
			case STATEMENT:
			case STATIC:
			case STAY:
			case STOGROUP:
			case STORES:
			case STYLE:
			case SUMMARY:
			case SYNONYM:
			case SYSDATE:
			case SYSTEM:
			case SYSTIMESTAMP:
			case TABLE:
			case TABLESPACE:
			case THEN:
			case TO:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNDO:
			case UNION:
			case UNIQUE:
			case UNTIL:
			case UPDATE:
			case USING:
			case VALIDPROC:
			case VALUE:
			case VALUES:
			case VARIABLE:
			case VARIANT:
			case VCAT:
			case VERSIONING:
			case VIEW:
			case VOLATILE:
			case VOLUMES:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WLM:
			case XMLCAST:
			case XMLEXISTS:
			case XMLNAMESPACES:
			case YEAR:
			case YEARS:
			case ZONE:
			case AND:
			case ARRAY_AGG:
			case ASC:
			case AVG:
			case BIT:
			case CHANGE:
			case CODEUNITS16:
			case CODEUNITS32:
			case CORR:
			case CORRELATION:
			case COUNT:
			case COUNT_BIG:
			case COVAR:
			case COVARIANCE:
			case COVARIANCE_SAMP:
			case COVAR_POP:
			case COVAR_SAMP:
			case CS:
			case CUME_DIST:
			case DENSE_RANK:
			case DESC:
			case EBCDIC:
			case EXCLUSIVE:
			case FIRST_VALUE:
			case FOLLOWING:
			case GROUPING:
			case IGNORE:
			case INDICATOR:
			case INPUT:
			case ISNULL:
			case LAG:
			case LARGE:
			case LAST_VALUE:
			case LEAD:
			case LISTAGG:
			case LOCKED:
			case LOCKS:
			case MEDIAN:
			case MINUTES:
			case MIXED:
			case NOTNULL:
			case NTH_VALUE:
			case NTILE:
			case NUMERIC:
			case OBJECT:
			case OCTETS:
			case ONLY:
			case OVER:
			case PASSING:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PERCENT_RANK:
			case PRECEDING:
			case PREVIOUS:
			case RANGE:
			case RANK:
			case RATIO_TO_REPORT:
			case READ:
			case REF:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_ICPT:
			case REGR_INTERCEPT:
			case REGR_R2:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case RESPECT:
			case ROW_NUMBER:
			case ROWS:
			case RR:
			case RS:
			case SBCS:
			case SELECTIVITY:
			case SETS:
			case SHARE:
			case SKIP_:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case TOKEN:
			case UNBOUNDED:
			case UNPACK:
			case UR:
			case USE:
			case VAR:
			case VARIANCE:
			case VARIANCE_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARYING:
			case WITHOUT:
			case XML:
			case XMLAGG:
			case COLUMNS:
			case SQLID:
			case ORDINALITY:
			case SYSTEM_TIME:
			case BUSINESS_TIME:
			case MULTIPLIER:
			case UNNEST:
			case CROSS:
			case CALLER:
			case CLIENT:
			case POSITIONING:
			case SCROLL:
			case ACTION:
			case ASSEMBLE:
			case C_:
			case CALLED:
			case COBOL:
			case DB2:
			case DEFINER:
			case DISPATCH:
			case ENVIRONMENT:
			case FAILURE:
			case FAILURES:
			case JAVA:
			case MAIN:
			case NAME:
			case OPTIONS:
			case PARALLEL:
			case PLI:
			case REGISTERS:
			case RESIDENT:
			case SECURED:
			case SPECIAL:
			case SQL:
			case STOP:
			case SUB:
			case YES:
			case APPLICATION:
			case CHANGED:
			case COMPATIBILITY:
			case COMPRESS:
			case COPY:
			case FREEPAGE:
			case GBPCACHE:
			case INCLUDE:
			case MAXVALUE:
			case MINVALUE:
			case PCTFREE:
			case REGENERATE:
			case MASK:
			case ENABLE:
			case PERMISSION:
			case ATOMIC:
			case SQLEXCEPTION:
			case MERGE:
			case MATCHED:
			case SQLSTATE:
			case MESSAGE_TEXT:
			case OVERRIDING:
			case PORTION:
			case DB2SQL:
			case DEBUG:
			case GENERAL:
			case MODE_:
			case REXX:
			case CACHE:
			case CYCLE:
			case INCREMENT:
			case RESTART:
			case DATACLAS:
			case MGMTCLAS:
			case REMOVE:
			case STORCLAS:
			case ACCESS:
			case ACTIVATE:
			case ALWAYS:
			case APPEND:
			case ARCHIVE:
			case BUSINESS:
			case CASCADE:
			case CHANGES:
			case CONTROL:
			case DEACTIVATE:
			case DEFERRED:
			case EACH:
			case ENFORCED:
			case EXTRA:
			case FOREIGN:
			case HIDDEN_:
			case HISTORY:
			case ID:
			case IDENTITY:
			case IMPLICITLY:
			case INITIALLY:
			case INLINE:
			case OPERATION:
			case ORGANIZE:
			case OVERLAPS:
			case PACKAGE_NAME:
			case PACKAGE_SCHEMA:
			case PACKAGE_VERSION:
			case PRIMARY:
			case RESET:
			case ROTATE:
			case START:
			case SYSIBM:
			case TRANSACTION:
			case XMLSCHEMA:
			case ELEMENT:
			case URL:
			case NAMESPACE:
			case LOCATION:
			case SYSXSR:
			case ALGORITHM:
			case FIXEDLENGTH:
			case HUFFMAN:
			case LOB:
			case LOG:
			case LOGGED:
			case MAXPARTITIONS:
			case MAXROWS:
			case MEMBER:
			case MOVE:
			case PAGE:
			case PAGENUM:
			case PENDING:
			case RELATIVE:
			case SEGSIZE:
			case TRACKMOD:
			case ADDRESS:
			case ATTRIBUTES:
			case AUTHENTICATION:
			case AUTHID:
			case CONTEXT:
			case JOBNAME:
			case OWNER:
			case PROFILE:
			case QUALIFIER:
			case SERVAUTH:
			case TRUSTED:
			case SECTION:
			case ACTIVE:
			case VERSION:
			case ALIAS:
			case WORK:
			case WORKFILE:
			case SYSDEFLT:
			case NULTERM:
			case STRUCTURE:
			case GENERIC:
			case ABS:
			case ABSVAL:
			case ACOS:
			case ADD_DAYS:
			case ADD_MONTHS:
			case ARRAY_DELETE:
			case ARRAY_FIRST:
			case ARRAY_LAST:
			case ARRAY_NEXT:
			case ARRAY_PRIOR:
			case ARRAY_TRIM:
			case ASCII:
			case ASCII_CHR:
			case ASCIISTR:
			case ASCII_STR:
			case ASIN:
			case ATAN:
			case ATAN2:
			case ATANH:
			case BIGINT:
			case BINARY:
			case BITAND:
			case BITANDNOT:
			case BITNOT:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BTRIM:
			case CARDINALITY:
			case CCSID_ENCODING:
			case CEIL:
			case CEILING:
			case CHAR9:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case CHR:
			case CLOB:
			case COALESCE:
			case COLLATION_KEY:
			case COMPARE_DECFLOAT:
			case COS:
			case COSH:
			case DATE:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFWEEK_ISO:
			case DAYOFYEAR:
			case DAYS_BETWEEN:
			case DBCLOB:
			case DEC:
			case DECFLOAT:
			case DECFLOAT_FORMAT:
			case DECFLOAT_SORTKEY:
			case DECIMAL:
			case DECODE:
			case DECRYPT_BINARY:
			case DECRYPT_BIT:
			case DECRYPT_CHAR:
			case DECRYPT_DATAKEY_BIGINT:
			case DECRYPT_DATAKEY_BIT:
			case DECRYPT_DATAKEY_CLOB:
			case DECRYPT_DATAKEY_DBCLOB:
			case DECRYPT_DATAKEY_DECIMAL:
			case DECRYPT_DATAKEY_INTEGER:
			case DECRYPT_DATAKEY_VARCHAR:
			case DECRYPT_DATAKEY_VARGRAPHIC:
			case DECRYPT_DB:
			case DEGREES:
			case DIFFERENCE:
			case DIGITS:
			case DOUBLE_PRECISION:
			case DSN_XMLVALIDATE:
			case EBCDIC_CHR:
			case EBCDIC_STR:
			case ENCRYPT_DATAKEY:
			case ENCRYPT_TDES:
			case EXP:
			case EXTRACT:
			case FLOAT:
			case FLOOR:
			case GENERATE_UNIQUE:
			case GENERATE_UNIQUE_BINARY:
			case GETHINT:
			case GETVARIABLE:
			case GRAPHIC:
			case GREATEST:
			case HASH:
			case HASH_CRC32:
			case HASH_MD5:
			case HASH_SHA1:
			case HASH_SHA256:
			case HEX:
			case IDENTITY_VAL_LOCAL:
			case IFNULL:
			case INSTR:
			case INT:
			case INTEGER:
			case JULIAN_DAY:
			case LAST_DAY:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LN:
			case LOCATE:
			case LOCATE_IN_STRING:
			case LOG10:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAX:
			case MAX_CARDINALITY:
			case MIDNIGHT_SECONDS:
			case MIN:
			case MINUTE:
			case MOD:
			case MONTHS_BETWEEN:
			case MQREAD:
			case MQREADCLOB:
			case MQRECEIVE:
			case MQRECEIVECLOB:
			case MQSEND:
			case MULTIPLY_ALT:
			case NEXT_DAY:
			case NEXT_MONTH:
			case NORMALIZE_DECFLOAT:
			case NORMALIZE_STRING:
			case NULLIF:
			case NVL:
			case OVERLAY:
			case PACK:
			case POSITION:
			case POSSTR:
			case POW:
			case POWER:
			case QUANTIZE:
			case QUARTER:
			case RADIANS:
			case RAISE_ERROR:
			case RAND:
			case RANDOM:
			case REAL:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REPLACE:
			case RID:
			case ROUND:
			case ROUND_TIMESTAMP:
			case ROWID:
			case RPAD:
			case RTRIM:
			case SCORE:
			case SIGN:
			case SIN:
			case SINH:
			case SMALLINT:
			case SOAPHTTPC:
			case SOAPHTTPNC:
			case SOAPHTTPNV:
			case SOAPHTTPV:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STRIP:
			case STRLEFT:
			case STRPOS:
			case STRRIGHT:
			case SUBSTR:
			case SUBSTRING:
			case TAN:
			case TANH:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIMESTAMP_FORMAT:
			case TIMESTAMP_ISO:
			case TIMESTAMP_TZ:
			case TO_CHAR:
			case TO_CLOB:
			case TO_DATE:
			case TO_NUMBER:
			case TOTALORDER:
			case TO_TIMESTAMP:
			case TRANSLATE:
			case TRIM:
			case TRIM_ARRAY:
			case TRUNC:
			case TRUNC_TIMESTAMP:
			case UCASE:
			case UNICODE:
			case UNICODE_STR:
			case UNISTR:
			case UPPER:
			case VARBINARY:
			case VARCHAR:
			case VARCHAR9:
			case VARCHAR_BIT_FORMAT:
			case VARCHAR_FORMAT:
			case VARGRAPHIC:
			case VERIFY_GROUP_FOR_USER:
			case VERIFY_ROLE_FOR_USER:
			case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
			case WEEK:
			case WEEK_ISO:
			case WRAP:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLCONCAT:
			case XMLDOCUMENT:
			case XMLELEMENT:
			case XMLFOREST:
			case XMLMODIFY:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLSERIALIZE:
			case XMLTEXT:
			case XMLXSROBJECTID:
			case XSLTRANSFORM:
			case CURRENT_ACCELERATOR:
			case CURRENT_APPLICATION_COMPATIBILITY:
			case CURRENT_APPLICATION_ENCODING_SCHEME:
			case CURRENT_CLIENT_ACCTNG:
			case CURRENT_CLIENT_APPLNAME:
			case CURRENT_CLIENT_CORR_TOKEN:
			case CURRENT_CLIENT_USERID:
			case CURRENT_CLIENT_WRKSTNNAME:
			case CURRENT_DATE:
			case CURRENT_DEBUG_MODE:
			case CURRENT_DECFLOAT_ROUNDING_MODE:
			case CURRENT_DEGREE:
			case CURRENT_EXPLAIN_MODE:
			case CURRENT_GET_ACCEL_ARCHIVE:
			case CURRENT_LOCALE_LC_CTYPE:
			case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
			case CURRENT_MEMBER:
			case CURRENT_OPTIMIZATION_HINT:
			case CURRENT_PACKAGE_PATH:
			case CURRENT_PACKAGESET:
			case CURRENT_PATH:
			case CURRENT_PRECISION:
			case CURRENT_QUERY_ACCELERATION:
			case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
			case CURRENT_REFRESH_AGE:
			case CURRENT_ROUTINE_VERSION:
			case CURRENT_RULES:
			case CURRENT_SCHEMA:
			case CURRENT_SERVER:
			case CURRENT_SQLID:
			case CURRENT_TEMPORAL_BUSINESS_TIME:
			case CURRENT_TEMPORAL_SYSTEM_TIME:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_TIME_ZONE:
			case ENCRYPTION_PASSWORD:
			case SESSION_TIME_ZONE:
			case SESSION_USER:
			case USER:
			case ADMIN_TASK_LIST:
			case ADMIN_TASK_OUTPUT:
			case ADMIN_TASK_STATUS:
			case BLOCKING_THREADS:
			case MQREADALL:
			case MQREADALLCLOB:
			case MQRECEIVEALL:
			case MQRECEIVEALLCLOB:
			case XMLTABLE:
			case SQLIDENTIFIER:
				{
				setState(4253);
				expression();
				}
				break;
			case SPLAT:
				{
				setState(4254);
				match(SPLAT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4257);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RegressionFunctionInvocationContext extends ParserRuleContext {
		public RegressionFunctionContext regressionFunction() {
			return getRuleContext(RegressionFunctionContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(DB2zSQLParser.COMMA, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public RegressionFunctionInvocationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regressionFunctionInvocation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRegressionFunctionInvocation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRegressionFunctionInvocation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRegressionFunctionInvocation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RegressionFunctionInvocationContext regressionFunctionInvocation() throws RecognitionException {
		RegressionFunctionInvocationContext _localctx = new RegressionFunctionInvocationContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_regressionFunctionInvocation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4262);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,489,_ctx) ) {
			case 1:
				{
				setState(4259);
				schemaName();
				setState(4260);
				match(DOT);
				}
				break;
			}
			setState(4264);
			regressionFunction();
			setState(4265);
			match(LPAREN);
			setState(4266);
			expression();
			setState(4267);
			match(COMMA);
			setState(4268);
			expression();
			setState(4269);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExternalFunctionInvocationContext extends ParserRuleContext {
		public TerminalNode SQLIDENTIFIER() { return getToken(DB2zSQLParser.SQLIDENTIFIER, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public ExternalFunctionInvocationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_externalFunctionInvocation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterExternalFunctionInvocation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitExternalFunctionInvocation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitExternalFunctionInvocation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExternalFunctionInvocationContext externalFunctionInvocation() throws RecognitionException {
		ExternalFunctionInvocationContext _localctx = new ExternalFunctionInvocationContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_externalFunctionInvocation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4274);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,490,_ctx) ) {
			case 1:
				{
				setState(4271);
				schemaName();
				setState(4272);
				match(DOT);
				}
				break;
			}
			setState(4276);
			match(SQLIDENTIFIER);
			setState(4277);
			match(LPAREN);
			setState(4278);
			expression();
			setState(4283);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4279);
				match(COMMA);
				setState(4280);
				expression();
				}
				}
				setState(4285);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4286);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LabeledDurationContext extends ParserRuleContext {
		public TerminalNode YEAR() { return getToken(DB2zSQLParser.YEAR, 0); }
		public TerminalNode YEARS() { return getToken(DB2zSQLParser.YEARS, 0); }
		public TerminalNode MONTH() { return getToken(DB2zSQLParser.MONTH, 0); }
		public TerminalNode MONTHS() { return getToken(DB2zSQLParser.MONTHS, 0); }
		public TerminalNode DAY() { return getToken(DB2zSQLParser.DAY, 0); }
		public TerminalNode DAYS() { return getToken(DB2zSQLParser.DAYS, 0); }
		public TerminalNode HOUR() { return getToken(DB2zSQLParser.HOUR, 0); }
		public TerminalNode HOURS() { return getToken(DB2zSQLParser.HOURS, 0); }
		public TerminalNode MINUTE() { return getToken(DB2zSQLParser.MINUTE, 0); }
		public TerminalNode MINUTES() { return getToken(DB2zSQLParser.MINUTES, 0); }
		public TerminalNode SECOND() { return getToken(DB2zSQLParser.SECOND, 0); }
		public TerminalNode SECONDS() { return getToken(DB2zSQLParser.SECONDS, 0); }
		public TerminalNode MICROSECOND() { return getToken(DB2zSQLParser.MICROSECOND, 0); }
		public TerminalNode MICROSECONDS() { return getToken(DB2zSQLParser.MICROSECONDS, 0); }
		public FunctionInvocationContext functionInvocation() {
			return getRuleContext(FunctionInvocationContext.class,0);
		}
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public LabeledDurationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_labeledDuration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterLabeledDuration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitLabeledDuration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitLabeledDuration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LabeledDurationContext labeledDuration() throws RecognitionException {
		LabeledDurationContext _localctx = new LabeledDurationContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_labeledDuration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4296);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,492,_ctx) ) {
			case 1:
				{
				setState(4288);
				functionInvocation();
				}
				break;
			case 2:
				{
				{
				setState(4289);
				match(LPAREN);
				setState(4290);
				expression();
				setState(4291);
				match(RPAREN);
				}
				}
				break;
			case 3:
				{
				setState(4293);
				match(INTEGERLITERAL);
				}
				break;
			case 4:
				{
				setState(4294);
				columnName();
				}
				break;
			case 5:
				{
				setState(4295);
				variable();
				}
				break;
			}
			setState(4298);
			_la = _input.LA(1);
			if ( !(((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & ((1L << (DAY - 85)) | (1L << (DAYS - 85)) | (1L << (HOUR - 85)) | (1L << (HOURS - 85)))) != 0) || ((((_la - 181)) & ~0x3f) == 0 && ((1L << (_la - 181)) & ((1L << (MICROSECOND - 181)) | (1L << (MICROSECONDS - 181)) | (1L << (MONTH - 181)) | (1L << (MONTHS - 181)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (SECOND - 261)) | (1L << (SECONDS - 261)) | (1L << (YEAR - 261)) | (1L << (YEARS - 261)))) != 0) || _la==MINUTES || _la==MINUTE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlCastSpecificationContext extends ParserRuleContext {
		public TerminalNode XMLCAST() { return getToken(DB2zSQLParser.XMLCAST, 0); }
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public ParameterMarkerContext parameterMarker() {
			return getRuleContext(ParameterMarkerContext.class,0);
		}
		public XmlCastSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlCastSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterXmlCastSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitXmlCastSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitXmlCastSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlCastSpecificationContext xmlCastSpecification() throws RecognitionException {
		XmlCastSpecificationContext _localctx = new XmlCastSpecificationContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_xmlCastSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4300);
			match(XMLCAST);
			setState(4304);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,493,_ctx) ) {
			case 1:
				{
				setState(4301);
				expression();
				}
				break;
			case 2:
				{
				setState(4302);
				match(NULL);
				}
				break;
			case 3:
				{
				setState(4303);
				parameterMarker();
				}
				break;
			}
			setState(4306);
			match(AS);
			setState(4307);
			dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArrayElementSpecificationContext extends ParserRuleContext {
		public ArrayExpressionContext arrayExpression() {
			return getRuleContext(ArrayExpressionContext.class,0);
		}
		public TerminalNode OPENSQBRACKET() { return getToken(DB2zSQLParser.OPENSQBRACKET, 0); }
		public ArrayIndexContext arrayIndex() {
			return getRuleContext(ArrayIndexContext.class,0);
		}
		public TerminalNode CLOSESQBRACKET() { return getToken(DB2zSQLParser.CLOSESQBRACKET, 0); }
		public ArrayElementSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arrayElementSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterArrayElementSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitArrayElementSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitArrayElementSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArrayElementSpecificationContext arrayElementSpecification() throws RecognitionException {
		ArrayElementSpecificationContext _localctx = new ArrayElementSpecificationContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_arrayElementSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4309);
			arrayExpression();
			setState(4310);
			match(OPENSQBRACKET);
			setState(4311);
			arrayIndex();
			setState(4312);
			match(CLOSESQBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArrayIndexContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<OperatorContext> operator() {
			return getRuleContexts(OperatorContext.class);
		}
		public OperatorContext operator(int i) {
			return getRuleContext(OperatorContext.class,i);
		}
		public ArrayIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arrayIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterArrayIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitArrayIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitArrayIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArrayIndexContext arrayIndex() throws RecognitionException {
		ArrayIndexContext _localctx = new ArrayIndexContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_arrayIndex);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4314);
			expression();
			setState(4321);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAREN) | (1L << PLUS) | (1L << MINUS) | (1L << SPLAT) | (1L << SLASH) | (1L << CONCATOP) | (1L << COLON) | (1L << NONNUMERICLITERAL) | (1L << INTEGERLITERAL) | (1L << NUMERICLITERAL) | (1L << ADD) | (1L << AFTER) | (1L << ALL) | (1L << ALLOCATE) | (1L << ALLOW) | (1L << ALTER) | (1L << ALTERAND) | (1L << ANY) | (1L << ARRAY) | (1L << ARRAY_EXISTS) | (1L << AS) | (1L << ASENSITIVE) | (1L << ASSOCIATE) | (1L << ASUTIME) | (1L << AT) | (1L << AUDIT) | (1L << AUX) | (1L << AUXILIARY) | (1L << BEFORE) | (1L << BEGIN) | (1L << BETWEEN) | (1L << BUFFERPOOL) | (1L << BY) | (1L << CALL) | (1L << CAPTURE) | (1L << CASCADED) | (1L << CASE) | (1L << CAST) | (1L << CCSID) | (1L << CHAR) | (1L << CHARACTER) | (1L << CHECK) | (1L << CLONE) | (1L << CLOSE) | (1L << CLUSTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLLECTION - 64)) | (1L << (COLLID - 64)) | (1L << (COLUMN - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (CONCAT - 64)) | (1L << (CONDITION - 64)) | (1L << (CONNECT - 64)) | (1L << (CONNECTION - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONTAINS - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CREATE - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT - 64)) | (1L << (CURRENT_LC_CTYPE - 64)) | (1L << (CURRVAL - 64)) | (1L << (CURSOR - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DAYS - 64)) | (1L << (DBINFO - 64)) | (1L << (DECLARE - 64)) | (1L << (DEFAULT - 64)) | (1L << (DELETE - 64)) | (1L << (DESCRIPTOR - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DISABLE - 64)) | (1L << (DISALLOW - 64)) | (1L << (DISTINCT - 64)) | (1L << (DO - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (DSSIZE - 64)) | (1L << (DYNAMIC - 64)) | (1L << (EDITPROC - 64)) | (1L << (ELSE - 64)) | (1L << (ELSEIF - 64)) | (1L << (ENCODING - 64)) | (1L << (ENCRYPTION - 64)) | (1L << (END - 64)) | (1L << (END_EXEC - 64)) | (1L << (ENDING - 64)) | (1L << (ERASE - 64)) | (1L << (ESCAPE - 64)) | (1L << (EXCEPT - 64)) | (1L << (EXCEPTION - 64)) | (1L << (EXEC_SQL - 64)) | (1L << (EXECUTE - 64)) | (1L << (EXISTS - 64)) | (1L << (EXIT - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FENCED - 64)) | (1L << (FETCH - 64)) | (1L << (FIELDPROC - 64)) | (1L << (FINAL - 64)) | (1L << (FIRST - 64)) | (1L << (FOR - 64)) | (1L << (FREE - 64)) | (1L << (FROM - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GENERATED - 128)) | (1L << (GET - 128)) | (1L << (GLOBAL - 128)) | (1L << (GO - 128)) | (1L << (GOTO - 128)) | (1L << (GRANT - 128)) | (1L << (GROUP - 128)) | (1L << (HANDLER - 128)) | (1L << (HAVING - 128)) | (1L << (HOLD - 128)) | (1L << (HOUR - 128)) | (1L << (HOURS - 128)) | (1L << (IF - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (IN - 128)) | (1L << (INCLUSIVE - 128)) | (1L << (INDEX - 128)) | (1L << (INDEXBP - 128)) | (1L << (INHERIT - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSENSITIVE - 128)) | (1L << (INSERT - 128)) | (1L << (INTERSECT - 128)) | (1L << (INTO - 128)) | (1L << (IS - 128)) | (1L << (ISOBID - 128)) | (1L << (ITERATE - 128)) | (1L << (JAR - 128)) | (1L << (JOIN - 128)) | (1L << (KEEP - 128)) | (1L << (KEY - 128)) | (1L << (LABEL - 128)) | (1L << (LANGUAGE - 128)) | (1L << (LAST - 128)) | (1L << (LC_CTYPE - 128)) | (1L << (LEAVE - 128)) | (1L << (LEFT - 128)) | (1L << (LIKE - 128)) | (1L << (LIMIT - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCALE - 128)) | (1L << (LOCATOR - 128)) | (1L << (LOCATORS - 128)) | (1L << (LOCK - 128)) | (1L << (LOCKMAX - 128)) | (1L << (LOCKSIZE - 128)) | (1L << (LONG - 128)) | (1L << (LOOP - 128)) | (1L << (MAINTAINED - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MICROSECOND - 128)) | (1L << (MICROSECONDS - 128)) | (1L << (MODIFIES - 128)) | (1L << (MONTH - 128)) | (1L << (MONTHS - 128)) | (1L << (NEXT - 128)) | (1L << (NEXTVAL - 128)) | (1L << (NO - 128)) | (1L << (NONE - 128)) | (1L << (NOT - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (NULL - 192)) | (1L << (NULLS - 192)) | (1L << (NUMPARTS - 192)) | (1L << (OBID - 192)) | (1L << (OF - 192)) | (1L << (OFFSET - 192)) | (1L << (OLD - 192)) | (1L << (ON - 192)) | (1L << (OPEN - 192)) | (1L << (OPTIMIZATION - 192)) | (1L << (OPTIMIZE - 192)) | (1L << (OR - 192)) | (1L << (ORDER - 192)) | (1L << (ORGANIZATION - 192)) | (1L << (OUT - 192)) | (1L << (OUTER - 192)) | (1L << (PACKAGE - 192)) | (1L << (PADDED - 192)) | (1L << (PARAMETER - 192)) | (1L << (PART - 192)) | (1L << (PARTITION - 192)) | (1L << (PARTITIONED - 192)) | (1L << (PARTITIONING - 192)) | (1L << (PATH - 192)) | (1L << (PERIOD - 192)) | (1L << (PIECESIZE - 192)) | (1L << (PLAN - 192)) | (1L << (PRECISION - 192)) | (1L << (PREPARE - 192)) | (1L << (PREVVAL - 192)) | (1L << (PRIOR - 192)) | (1L << (PRIQTY - 192)) | (1L << (PRIVILEGES - 192)) | (1L << (PROCEDURE - 192)) | (1L << (PROGRAM - 192)) | (1L << (PSID - 192)) | (1L << (PUBLIC - 192)) | (1L << (QUERY - 192)) | (1L << (QUERYNO - 192)) | (1L << (READS - 192)) | (1L << (REFERENCES - 192)) | (1L << (REFRESH - 192)) | (1L << (RELEASE - 192)) | (1L << (RENAME - 192)) | (1L << (REPEAT - 192)) | (1L << (RESIGNAL - 192)) | (1L << (RESTRICT - 192)) | (1L << (RESULT - 192)) | (1L << (RESULT_SET_LOCATOR - 192)) | (1L << (RETURN - 192)) | (1L << (RETURNS - 192)) | (1L << (REVOKE - 192)) | (1L << (RIGHT - 192)) | (1L << (ROLE - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROLLUP - 192)) | (1L << (ROUND_CEILING - 192)) | (1L << (ROUND_DOWN - 192)) | (1L << (ROUND_FLOOR - 192)) | (1L << (ROUND_HALF_DOWN - 192)) | (1L << (ROUND_HALF_EVEN - 192)) | (1L << (ROUND_HALF_UP - 192)) | (1L << (ROUND_UP - 192)) | (1L << (ROW - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (ROWSET - 256)) | (1L << (RUN - 256)) | (1L << (SAVEPOINT - 256)) | (1L << (SCHEMA - 256)) | (1L << (SCRATCHPAD - 256)) | (1L << (SECOND - 256)) | (1L << (SECONDS - 256)) | (1L << (SECQTY - 256)) | (1L << (SECURITY - 256)) | (1L << (SELECT - 256)) | (1L << (SENSITIVE - 256)) | (1L << (SEQUENCE - 256)) | (1L << (SET - 256)) | (1L << (SIGNAL - 256)) | (1L << (SIMPLE - 256)) | (1L << (SOME - 256)) | (1L << (SOURCE - 256)) | (1L << (SPECIFIC - 256)) | (1L << (STANDARD - 256)) | (1L << (STATEMENT - 256)) | (1L << (STATIC - 256)) | (1L << (STAY - 256)) | (1L << (STOGROUP - 256)) | (1L << (STORES - 256)) | (1L << (STYLE - 256)) | (1L << (SUMMARY - 256)) | (1L << (SYNONYM - 256)) | (1L << (SYSDATE - 256)) | (1L << (SYSTEM - 256)) | (1L << (SYSTIMESTAMP - 256)) | (1L << (TABLE - 256)) | (1L << (TABLESPACE - 256)) | (1L << (THEN - 256)) | (1L << (TO - 256)) | (1L << (TRIGGER - 256)) | (1L << (TRUNCATE - 256)) | (1L << (TYPE - 256)) | (1L << (UNDO - 256)) | (1L << (UNION - 256)) | (1L << (UNIQUE - 256)) | (1L << (UNTIL - 256)) | (1L << (UPDATE - 256)) | (1L << (USING - 256)) | (1L << (VALIDPROC - 256)) | (1L << (VALUE - 256)) | (1L << (VALUES - 256)) | (1L << (VARIABLE - 256)) | (1L << (VARIANT - 256)) | (1L << (VCAT - 256)) | (1L << (VERSIONING - 256)) | (1L << (VIEW - 256)) | (1L << (VOLATILE - 256)) | (1L << (VOLUMES - 256)) | (1L << (WHEN - 256)) | (1L << (WHENEVER - 256)) | (1L << (WHERE - 256)) | (1L << (WHILE - 256)) | (1L << (WITH - 256)) | (1L << (WLM - 256)) | (1L << (XMLCAST - 256)) | (1L << (XMLEXISTS - 256)) | (1L << (XMLNAMESPACES - 256)) | (1L << (YEAR - 256)) | (1L << (YEARS - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (ZONE - 320)) | (1L << (AND - 320)) | (1L << (ARRAY_AGG - 320)) | (1L << (ASC - 320)) | (1L << (AVG - 320)) | (1L << (BIT - 320)) | (1L << (CHANGE - 320)) | (1L << (CODEUNITS16 - 320)) | (1L << (CODEUNITS32 - 320)) | (1L << (CORR - 320)) | (1L << (CORRELATION - 320)) | (1L << (COUNT - 320)) | (1L << (COUNT_BIG - 320)) | (1L << (COVAR - 320)) | (1L << (COVARIANCE - 320)) | (1L << (COVARIANCE_SAMP - 320)) | (1L << (COVAR_POP - 320)) | (1L << (COVAR_SAMP - 320)) | (1L << (CS - 320)) | (1L << (CUME_DIST - 320)) | (1L << (DENSE_RANK - 320)) | (1L << (DESC - 320)) | (1L << (EBCDIC - 320)) | (1L << (EXCLUSIVE - 320)) | (1L << (FIRST_VALUE - 320)) | (1L << (FOLLOWING - 320)) | (1L << (GROUPING - 320)) | (1L << (IGNORE - 320)) | (1L << (INDICATOR - 320)) | (1L << (INPUT - 320)) | (1L << (ISNULL - 320)) | (1L << (LAG - 320)) | (1L << (LARGE - 320)) | (1L << (LAST_VALUE - 320)) | (1L << (LEAD - 320)) | (1L << (LISTAGG - 320)) | (1L << (LOCKED - 320)) | (1L << (LOCKS - 320)) | (1L << (MEDIAN - 320)) | (1L << (MINUTES - 320)) | (1L << (MIXED - 320)) | (1L << (NOTNULL - 320)) | (1L << (NTH_VALUE - 320)) | (1L << (NTILE - 320)) | (1L << (NUMERIC - 320)) | (1L << (OBJECT - 320)) | (1L << (OCTETS - 320)) | (1L << (ONLY - 320)) | (1L << (OVER - 320)) | (1L << (PASSING - 320)) | (1L << (PERCENTILE_CONT - 320)) | (1L << (PERCENTILE_DISC - 320)) | (1L << (PERCENT_RANK - 320)) | (1L << (PRECEDING - 320)) | (1L << (PREVIOUS - 320)) | (1L << (RANGE - 320)) | (1L << (RANK - 320)) | (1L << (RATIO_TO_REPORT - 320)) | (1L << (READ - 320)) | (1L << (REF - 320)) | (1L << (REGR_AVGX - 320)) | (1L << (REGR_AVGY - 320)) | (1L << (REGR_COUNT - 320)) | (1L << (REGR_ICPT - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (REGR_INTERCEPT - 384)) | (1L << (REGR_R2 - 384)) | (1L << (REGR_SLOPE - 384)) | (1L << (REGR_SXX - 384)) | (1L << (REGR_SXY - 384)) | (1L << (REGR_SYY - 384)) | (1L << (RESPECT - 384)) | (1L << (ROW_NUMBER - 384)) | (1L << (ROWS - 384)) | (1L << (RR - 384)) | (1L << (RS - 384)) | (1L << (SBCS - 384)) | (1L << (SELECTIVITY - 384)) | (1L << (SETS - 384)) | (1L << (SHARE - 384)) | (1L << (SKIP_ - 384)) | (1L << (STDDEV - 384)) | (1L << (STDDEV_POP - 384)) | (1L << (STDDEV_SAMP - 384)) | (1L << (SUM - 384)) | (1L << (TOKEN - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNPACK - 384)) | (1L << (UR - 384)) | (1L << (USE - 384)) | (1L << (VAR - 384)) | (1L << (VARIANCE - 384)) | (1L << (VARIANCE_SAMP - 384)) | (1L << (VAR_POP - 384)) | (1L << (VAR_SAMP - 384)) | (1L << (VARYING - 384)) | (1L << (WITHOUT - 384)) | (1L << (XML - 384)) | (1L << (XMLAGG - 384)) | (1L << (COLUMNS - 384)) | (1L << (SQLID - 384)) | (1L << (ORDINALITY - 384)) | (1L << (SYSTEM_TIME - 384)) | (1L << (BUSINESS_TIME - 384)) | (1L << (MULTIPLIER - 384)) | (1L << (UNNEST - 384)) | (1L << (CROSS - 384)) | (1L << (CALLER - 384)) | (1L << (CLIENT - 384)) | (1L << (POSITIONING - 384)) | (1L << (SCROLL - 384)) | (1L << (ACTION - 384)) | (1L << (ASSEMBLE - 384)) | (1L << (C_ - 384)) | (1L << (CALLED - 384)) | (1L << (COBOL - 384)) | (1L << (DB2 - 384)) | (1L << (DEFINER - 384)) | (1L << (DISPATCH - 384)) | (1L << (ENVIRONMENT - 384)) | (1L << (FAILURE - 384)) | (1L << (FAILURES - 384)) | (1L << (JAVA - 384)) | (1L << (MAIN - 384)) | (1L << (NAME - 384)) | (1L << (OPTIONS - 384)) | (1L << (PARALLEL - 384)) | (1L << (PLI - 384)) | (1L << (REGISTERS - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (RESIDENT - 448)) | (1L << (SECURED - 448)) | (1L << (SPECIAL - 448)) | (1L << (SQL - 448)) | (1L << (STOP - 448)) | (1L << (SUB - 448)) | (1L << (YES - 448)) | (1L << (APPLICATION - 448)) | (1L << (CHANGED - 448)) | (1L << (COMPATIBILITY - 448)) | (1L << (COMPRESS - 448)) | (1L << (COPY - 448)) | (1L << (FREEPAGE - 448)) | (1L << (GBPCACHE - 448)) | (1L << (INCLUDE - 448)) | (1L << (MAXVALUE - 448)) | (1L << (MINVALUE - 448)) | (1L << (PCTFREE - 448)) | (1L << (REGENERATE - 448)) | (1L << (MASK - 448)) | (1L << (ENABLE - 448)) | (1L << (PERMISSION - 448)) | (1L << (ATOMIC - 448)) | (1L << (SQLEXCEPTION - 448)) | (1L << (MERGE - 448)) | (1L << (MATCHED - 448)) | (1L << (SQLSTATE - 448)) | (1L << (MESSAGE_TEXT - 448)) | (1L << (OVERRIDING - 448)) | (1L << (PORTION - 448)) | (1L << (DB2SQL - 448)) | (1L << (DEBUG - 448)) | (1L << (GENERAL - 448)) | (1L << (MODE_ - 448)) | (1L << (REXX - 448)) | (1L << (CACHE - 448)) | (1L << (CYCLE - 448)) | (1L << (INCREMENT - 448)) | (1L << (RESTART - 448)) | (1L << (DATACLAS - 448)) | (1L << (MGMTCLAS - 448)) | (1L << (REMOVE - 448)) | (1L << (STORCLAS - 448)) | (1L << (ACCESS - 448)) | (1L << (ACTIVATE - 448)) | (1L << (ALWAYS - 448)) | (1L << (APPEND - 448)) | (1L << (ARCHIVE - 448)) | (1L << (BUSINESS - 448)) | (1L << (CASCADE - 448)) | (1L << (CHANGES - 448)) | (1L << (CONTROL - 448)) | (1L << (DEACTIVATE - 448)) | (1L << (DEFERRED - 448)) | (1L << (EACH - 448)) | (1L << (ENFORCED - 448)) | (1L << (EXTRA - 448)) | (1L << (FOREIGN - 448)) | (1L << (HIDDEN_ - 448)) | (1L << (HISTORY - 448)) | (1L << (ID - 448)) | (1L << (IDENTITY - 448)) | (1L << (IMPLICITLY - 448)) | (1L << (INITIALLY - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (INLINE - 512)) | (1L << (OPERATION - 512)) | (1L << (ORGANIZE - 512)) | (1L << (OVERLAPS - 512)) | (1L << (PACKAGE_NAME - 512)) | (1L << (PACKAGE_SCHEMA - 512)) | (1L << (PACKAGE_VERSION - 512)) | (1L << (PRIMARY - 512)) | (1L << (RESET - 512)) | (1L << (ROTATE - 512)) | (1L << (START - 512)) | (1L << (SYSIBM - 512)) | (1L << (TRANSACTION - 512)) | (1L << (XMLSCHEMA - 512)) | (1L << (ELEMENT - 512)) | (1L << (URL - 512)) | (1L << (NAMESPACE - 512)) | (1L << (LOCATION - 512)) | (1L << (SYSXSR - 512)) | (1L << (ALGORITHM - 512)) | (1L << (FIXEDLENGTH - 512)) | (1L << (HUFFMAN - 512)) | (1L << (LOB - 512)) | (1L << (LOG - 512)) | (1L << (LOGGED - 512)) | (1L << (MAXPARTITIONS - 512)) | (1L << (MAXROWS - 512)) | (1L << (MEMBER - 512)) | (1L << (MOVE - 512)) | (1L << (PAGE - 512)) | (1L << (PAGENUM - 512)) | (1L << (PENDING - 512)) | (1L << (RELATIVE - 512)) | (1L << (SEGSIZE - 512)) | (1L << (TRACKMOD - 512)) | (1L << (ADDRESS - 512)) | (1L << (ATTRIBUTES - 512)) | (1L << (AUTHENTICATION - 512)) | (1L << (AUTHID - 512)) | (1L << (CONTEXT - 512)) | (1L << (JOBNAME - 512)) | (1L << (OWNER - 512)) | (1L << (PROFILE - 512)) | (1L << (QUALIFIER - 512)) | (1L << (SERVAUTH - 512)) | (1L << (TRUSTED - 512)) | (1L << (SECTION - 512)) | (1L << (ACTIVE - 512)) | (1L << (VERSION - 512)) | (1L << (ALIAS - 512)) | (1L << (WORK - 512)) | (1L << (WORKFILE - 512)) | (1L << (SYSDEFLT - 512)) | (1L << (NULTERM - 512)) | (1L << (STRUCTURE - 512)) | (1L << (GENERIC - 512)) | (1L << (ABS - 512)) | (1L << (ABSVAL - 512)) | (1L << (ACOS - 512)) | (1L << (ADD_DAYS - 512)) | (1L << (ADD_MONTHS - 512)) | (1L << (ARRAY_DELETE - 512)) | (1L << (ARRAY_FIRST - 512)) | (1L << (ARRAY_LAST - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (ARRAY_NEXT - 576)) | (1L << (ARRAY_PRIOR - 576)) | (1L << (ARRAY_TRIM - 576)) | (1L << (ASCII - 576)) | (1L << (ASCII_CHR - 576)) | (1L << (ASCIISTR - 576)) | (1L << (ASCII_STR - 576)) | (1L << (ASIN - 576)) | (1L << (ATAN - 576)) | (1L << (ATAN2 - 576)) | (1L << (ATANH - 576)) | (1L << (BIGINT - 576)) | (1L << (BINARY - 576)) | (1L << (BITAND - 576)) | (1L << (BITANDNOT - 576)) | (1L << (BITNOT - 576)) | (1L << (BITOR - 576)) | (1L << (BITXOR - 576)) | (1L << (BLOB - 576)) | (1L << (BTRIM - 576)) | (1L << (CARDINALITY - 576)) | (1L << (CCSID_ENCODING - 576)) | (1L << (CEIL - 576)) | (1L << (CEILING - 576)) | (1L << (CHAR9 - 576)) | (1L << (CHARACTER_LENGTH - 576)) | (1L << (CHAR_LENGTH - 576)) | (1L << (CHR - 576)) | (1L << (CLOB - 576)) | (1L << (COALESCE - 576)) | (1L << (COLLATION_KEY - 576)) | (1L << (COMPARE_DECFLOAT - 576)) | (1L << (COS - 576)) | (1L << (COSH - 576)) | (1L << (DATE - 576)) | (1L << (DAYOFMONTH - 576)) | (1L << (DAYOFWEEK - 576)) | (1L << (DAYOFWEEK_ISO - 576)) | (1L << (DAYOFYEAR - 576)) | (1L << (DAYS_BETWEEN - 576)) | (1L << (DBCLOB - 576)) | (1L << (DEC - 576)) | (1L << (DECFLOAT - 576)) | (1L << (DECFLOAT_FORMAT - 576)) | (1L << (DECFLOAT_SORTKEY - 576)) | (1L << (DECIMAL - 576)) | (1L << (DECODE - 576)) | (1L << (DECRYPT_BINARY - 576)) | (1L << (DECRYPT_BIT - 576)) | (1L << (DECRYPT_CHAR - 576)) | (1L << (DECRYPT_DATAKEY_BIGINT - 576)) | (1L << (DECRYPT_DATAKEY_BIT - 576)) | (1L << (DECRYPT_DATAKEY_CLOB - 576)) | (1L << (DECRYPT_DATAKEY_DBCLOB - 576)) | (1L << (DECRYPT_DATAKEY_DECIMAL - 576)) | (1L << (DECRYPT_DATAKEY_INTEGER - 576)) | (1L << (DECRYPT_DATAKEY_VARCHAR - 576)) | (1L << (DECRYPT_DATAKEY_VARGRAPHIC - 576)) | (1L << (DECRYPT_DB - 576)) | (1L << (DEGREES - 576)) | (1L << (DIFFERENCE - 576)) | (1L << (DIGITS - 576)) | (1L << (DOUBLE_PRECISION - 576)) | (1L << (DSN_XMLVALIDATE - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (EBCDIC_CHR - 640)) | (1L << (EBCDIC_STR - 640)) | (1L << (ENCRYPT_DATAKEY - 640)) | (1L << (ENCRYPT_TDES - 640)) | (1L << (EXP - 640)) | (1L << (EXTRACT - 640)) | (1L << (FLOAT - 640)) | (1L << (FLOOR - 640)) | (1L << (GENERATE_UNIQUE - 640)) | (1L << (GENERATE_UNIQUE_BINARY - 640)) | (1L << (GETHINT - 640)) | (1L << (GETVARIABLE - 640)) | (1L << (GRAPHIC - 640)) | (1L << (GREATEST - 640)) | (1L << (HASH - 640)) | (1L << (HASH_CRC32 - 640)) | (1L << (HASH_MD5 - 640)) | (1L << (HASH_SHA1 - 640)) | (1L << (HASH_SHA256 - 640)) | (1L << (HEX - 640)) | (1L << (IDENTITY_VAL_LOCAL - 640)) | (1L << (IFNULL - 640)) | (1L << (INSTR - 640)) | (1L << (INT - 640)) | (1L << (INTEGER - 640)) | (1L << (JULIAN_DAY - 640)) | (1L << (LAST_DAY - 640)) | (1L << (LCASE - 640)) | (1L << (LEAST - 640)) | (1L << (LENGTH - 640)) | (1L << (LN - 640)) | (1L << (LOCATE - 640)) | (1L << (LOCATE_IN_STRING - 640)) | (1L << (LOG10 - 640)) | (1L << (LOWER - 640)) | (1L << (LPAD - 640)) | (1L << (LTRIM - 640)) | (1L << (MAX - 640)) | (1L << (MAX_CARDINALITY - 640)) | (1L << (MIDNIGHT_SECONDS - 640)) | (1L << (MIN - 640)) | (1L << (MINUTE - 640)) | (1L << (MOD - 640)) | (1L << (MONTHS_BETWEEN - 640)) | (1L << (MQREAD - 640)) | (1L << (MQREADCLOB - 640)) | (1L << (MQRECEIVE - 640)) | (1L << (MQRECEIVECLOB - 640)) | (1L << (MQSEND - 640)) | (1L << (MULTIPLY_ALT - 640)) | (1L << (NEXT_DAY - 640)) | (1L << (NEXT_MONTH - 640)) | (1L << (NORMALIZE_DECFLOAT - 640)) | (1L << (NORMALIZE_STRING - 640)) | (1L << (NULLIF - 640)) | (1L << (NVL - 640)) | (1L << (OVERLAY - 640)) | (1L << (PACK - 640)) | (1L << (POSITION - 640)) | (1L << (POSSTR - 640)) | (1L << (POW - 640)) | (1L << (POWER - 640)) | (1L << (QUANTIZE - 640)) | (1L << (QUARTER - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (RADIANS - 704)) | (1L << (RAISE_ERROR - 704)) | (1L << (RAND - 704)) | (1L << (RANDOM - 704)) | (1L << (REAL - 704)) | (1L << (REGEXP_COUNT - 704)) | (1L << (REGEXP_INSTR - 704)) | (1L << (REGEXP_LIKE - 704)) | (1L << (REGEXP_REPLACE - 704)) | (1L << (REGEXP_SUBSTR - 704)) | (1L << (REPLACE - 704)) | (1L << (RID - 704)) | (1L << (ROUND - 704)) | (1L << (ROUND_TIMESTAMP - 704)) | (1L << (ROWID - 704)) | (1L << (RPAD - 704)) | (1L << (RTRIM - 704)) | (1L << (SCORE - 704)) | (1L << (SIGN - 704)) | (1L << (SIN - 704)) | (1L << (SINH - 704)) | (1L << (SMALLINT - 704)) | (1L << (SOAPHTTPC - 704)) | (1L << (SOAPHTTPNC - 704)) | (1L << (SOAPHTTPNV - 704)) | (1L << (SOAPHTTPV - 704)) | (1L << (SOUNDEX - 704)) | (1L << (SPACE - 704)) | (1L << (SQRT - 704)) | (1L << (STRIP - 704)) | (1L << (STRLEFT - 704)) | (1L << (STRPOS - 704)) | (1L << (STRRIGHT - 704)) | (1L << (SUBSTR - 704)) | (1L << (SUBSTRING - 704)) | (1L << (TAN - 704)) | (1L << (TANH - 704)) | (1L << (TIME - 704)) | (1L << (TIMESTAMP - 704)) | (1L << (TIMESTAMPADD - 704)) | (1L << (TIMESTAMPDIFF - 704)) | (1L << (TIMESTAMP_FORMAT - 704)) | (1L << (TIMESTAMP_ISO - 704)) | (1L << (TIMESTAMP_TZ - 704)) | (1L << (TO_CHAR - 704)) | (1L << (TO_CLOB - 704)) | (1L << (TO_DATE - 704)) | (1L << (TO_NUMBER - 704)) | (1L << (TOTALORDER - 704)) | (1L << (TO_TIMESTAMP - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRIM - 704)) | (1L << (TRIM_ARRAY - 704)) | (1L << (TRUNC - 704)) | (1L << (TRUNC_TIMESTAMP - 704)) | (1L << (UCASE - 704)) | (1L << (UNICODE - 704)) | (1L << (UNICODE_STR - 704)) | (1L << (UNISTR - 704)) | (1L << (UPPER - 704)) | (1L << (VARBINARY - 704)) | (1L << (VARCHAR - 704)) | (1L << (VARCHAR9 - 704)) | (1L << (VARCHAR_BIT_FORMAT - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (VARCHAR_FORMAT - 768)) | (1L << (VARGRAPHIC - 768)) | (1L << (VERIFY_GROUP_FOR_USER - 768)) | (1L << (VERIFY_ROLE_FOR_USER - 768)) | (1L << (VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER - 768)) | (1L << (WEEK - 768)) | (1L << (WEEK_ISO - 768)) | (1L << (WRAP - 768)) | (1L << (XMLATTRIBUTES - 768)) | (1L << (XMLCOMMENT - 768)) | (1L << (XMLCONCAT - 768)) | (1L << (XMLDOCUMENT - 768)) | (1L << (XMLELEMENT - 768)) | (1L << (XMLFOREST - 768)) | (1L << (XMLMODIFY - 768)) | (1L << (XMLPARSE - 768)) | (1L << (XMLPI - 768)) | (1L << (XMLQUERY - 768)) | (1L << (XMLSERIALIZE - 768)) | (1L << (XMLTEXT - 768)) | (1L << (XMLXSROBJECTID - 768)) | (1L << (XSLTRANSFORM - 768)) | (1L << (CURRENT_ACCELERATOR - 768)) | (1L << (CURRENT_APPLICATION_COMPATIBILITY - 768)) | (1L << (CURRENT_APPLICATION_ENCODING_SCHEME - 768)) | (1L << (CURRENT_CLIENT_ACCTNG - 768)) | (1L << (CURRENT_CLIENT_APPLNAME - 768)) | (1L << (CURRENT_CLIENT_CORR_TOKEN - 768)) | (1L << (CURRENT_CLIENT_USERID - 768)) | (1L << (CURRENT_CLIENT_WRKSTNNAME - 768)) | (1L << (CURRENT_DATE - 768)) | (1L << (CURRENT_DEBUG_MODE - 768)) | (1L << (CURRENT_DECFLOAT_ROUNDING_MODE - 768)) | (1L << (CURRENT_DEGREE - 768)) | (1L << (CURRENT_EXPLAIN_MODE - 768)) | (1L << (CURRENT_GET_ACCEL_ARCHIVE - 768)) | (1L << (CURRENT_LOCALE_LC_CTYPE - 768)) | (1L << (CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION - 768)) | (1L << (CURRENT_MEMBER - 768)) | (1L << (CURRENT_OPTIMIZATION_HINT - 768)) | (1L << (CURRENT_PACKAGE_PATH - 768)) | (1L << (CURRENT_PACKAGESET - 768)) | (1L << (CURRENT_PATH - 768)) | (1L << (CURRENT_PRECISION - 768)) | (1L << (CURRENT_QUERY_ACCELERATION - 768)) | (1L << (CURRENT_QUERY_ACCELERATION_WAITFORDATA - 768)) | (1L << (CURRENT_REFRESH_AGE - 768)) | (1L << (CURRENT_ROUTINE_VERSION - 768)) | (1L << (CURRENT_RULES - 768)) | (1L << (CURRENT_SCHEMA - 768)) | (1L << (CURRENT_SERVER - 768)) | (1L << (CURRENT_SQLID - 768)) | (1L << (CURRENT_TEMPORAL_BUSINESS_TIME - 768)) | (1L << (CURRENT_TEMPORAL_SYSTEM_TIME - 768)) | (1L << (CURRENT_TIME - 768)) | (1L << (CURRENT_TIMESTAMP - 768)) | (1L << (CURRENT_TIME_ZONE - 768)) | (1L << (ENCRYPTION_PASSWORD - 768)) | (1L << (SESSION_TIME_ZONE - 768)) | (1L << (SESSION_USER - 768)) | (1L << (USER - 768)) | (1L << (ADMIN_TASK_LIST - 768)) | (1L << (ADMIN_TASK_OUTPUT - 768)) | (1L << (ADMIN_TASK_STATUS - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (BLOCKING_THREADS - 832)) | (1L << (MQREADALL - 832)) | (1L << (MQREADALLCLOB - 832)) | (1L << (MQRECEIVEALL - 832)) | (1L << (MQRECEIVEALLCLOB - 832)) | (1L << (XMLTABLE - 832)) | (1L << (SQLIDENTIFIER - 832)))) != 0)) {
				{
				{
				setState(4316);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,494,_ctx) ) {
				case 1:
					{
					setState(4315);
					operator();
					}
					break;
				}
				setState(4318);
				expression();
				}
				}
				setState(4323);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArrayConstructorContext extends ParserRuleContext {
		public TerminalNode ARRAY() { return getToken(DB2zSQLParser.ARRAY, 0); }
		public TerminalNode OPENSQBRACKET() { return getToken(DB2zSQLParser.OPENSQBRACKET, 0); }
		public TerminalNode CLOSESQBRACKET() { return getToken(DB2zSQLParser.CLOSESQBRACKET, 0); }
		public TerminalNode QUESTIONMARK() { return getToken(DB2zSQLParser.QUESTIONMARK, 0); }
		public FullSelectContext fullSelect() {
			return getRuleContext(FullSelectContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> NULL() { return getTokens(DB2zSQLParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(DB2zSQLParser.NULL, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public ArrayConstructorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arrayConstructor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterArrayConstructor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitArrayConstructor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitArrayConstructor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArrayConstructorContext arrayConstructor() throws RecognitionException {
		ArrayConstructorContext _localctx = new ArrayConstructorContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_arrayConstructor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4324);
			match(ARRAY);
			setState(4325);
			match(OPENSQBRACKET);
			setState(4342);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,499,_ctx) ) {
			case 1:
				{
				setState(4326);
				match(QUESTIONMARK);
				}
				break;
			case 2:
				{
				setState(4327);
				fullSelect();
				}
				break;
			case 3:
				{
				{
				setState(4330);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,496,_ctx) ) {
				case 1:
					{
					setState(4328);
					expression();
					}
					break;
				case 2:
					{
					setState(4329);
					match(NULL);
					}
					break;
				}
				setState(4339);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4332);
					match(COMMA);
					setState(4335);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,497,_ctx) ) {
					case 1:
						{
						setState(4333);
						expression();
						}
						break;
					case 2:
						{
						setState(4334);
						match(NULL);
						}
						break;
					}
					}
					}
					setState(4341);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			}
			setState(4344);
			match(CLOSESQBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OlapSpecificationContext extends ParserRuleContext {
		public OrderedOlapSpecificationContext orderedOlapSpecification() {
			return getRuleContext(OrderedOlapSpecificationContext.class,0);
		}
		public NumberingSpecificationContext numberingSpecification() {
			return getRuleContext(NumberingSpecificationContext.class,0);
		}
		public AggregationSpecificationContext aggregationSpecification() {
			return getRuleContext(AggregationSpecificationContext.class,0);
		}
		public OlapSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_olapSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterOlapSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitOlapSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitOlapSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OlapSpecificationContext olapSpecification() throws RecognitionException {
		OlapSpecificationContext _localctx = new OlapSpecificationContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_olapSpecification);
		try {
			setState(4349);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,500,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4346);
				orderedOlapSpecification();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4347);
				numberingSpecification();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4348);
				aggregationSpecification();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderedOlapSpecificationContext extends ParserRuleContext {
		public OlapSpecificationFunctionContext olapSpecificationFunction() {
			return getRuleContext(OlapSpecificationFunctionContext.class,0);
		}
		public TerminalNode OVER() { return getToken(DB2zSQLParser.OVER, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public WindowOrderClauseContext windowOrderClause() {
			return getRuleContext(WindowOrderClauseContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public WindowPartitionClauseContext windowPartitionClause() {
			return getRuleContext(WindowPartitionClauseContext.class,0);
		}
		public OrderedOlapSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderedOlapSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterOrderedOlapSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitOrderedOlapSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitOrderedOlapSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderedOlapSpecificationContext orderedOlapSpecification() throws RecognitionException {
		OrderedOlapSpecificationContext _localctx = new OrderedOlapSpecificationContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_orderedOlapSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4351);
			olapSpecificationFunction();
			setState(4352);
			match(OVER);
			setState(4353);
			match(LPAREN);
			setState(4355);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(4354);
				windowPartitionClause();
				}
			}

			setState(4357);
			windowOrderClause();
			setState(4358);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OlapSpecificationFunctionContext extends ParserRuleContext {
		public LagFunctionContext lagFunction() {
			return getRuleContext(LagFunctionContext.class,0);
		}
		public LeadFunctionContext leadFunction() {
			return getRuleContext(LeadFunctionContext.class,0);
		}
		public TerminalNode CUME_DIST() { return getToken(DB2zSQLParser.CUME_DIST, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(DB2zSQLParser.PERCENT_RANK, 0); }
		public TerminalNode RANK() { return getToken(DB2zSQLParser.RANK, 0); }
		public TerminalNode DENSE_RANK() { return getToken(DB2zSQLParser.DENSE_RANK, 0); }
		public TerminalNode NTILE() { return getToken(DB2zSQLParser.NTILE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public OlapSpecificationFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_olapSpecificationFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterOlapSpecificationFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitOlapSpecificationFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitOlapSpecificationFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OlapSpecificationFunctionContext olapSpecificationFunction() throws RecognitionException {
		OlapSpecificationFunctionContext _localctx = new OlapSpecificationFunctionContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_olapSpecificationFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4379);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CUME_DIST:
				{
				{
				setState(4360);
				match(CUME_DIST);
				setState(4361);
				match(LPAREN);
				setState(4362);
				match(RPAREN);
				}
				}
				break;
			case PERCENT_RANK:
				{
				{
				setState(4363);
				match(PERCENT_RANK);
				setState(4364);
				match(LPAREN);
				setState(4365);
				match(RPAREN);
				}
				}
				break;
			case RANK:
				{
				{
				setState(4366);
				match(RANK);
				setState(4367);
				match(LPAREN);
				setState(4368);
				match(RPAREN);
				}
				}
				break;
			case DENSE_RANK:
				{
				{
				setState(4369);
				match(DENSE_RANK);
				setState(4370);
				match(LPAREN);
				setState(4371);
				match(RPAREN);
				}
				}
				break;
			case NTILE:
				{
				{
				setState(4372);
				match(NTILE);
				setState(4373);
				match(LPAREN);
				setState(4374);
				expression();
				setState(4375);
				match(RPAREN);
				}
				}
				break;
			case LAG:
				{
				setState(4377);
				lagFunction();
				}
				break;
			case LEAD:
				{
				setState(4378);
				leadFunction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LagFunctionContext extends ParserRuleContext {
		public TerminalNode LAG() { return getToken(DB2zSQLParser.LAG, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode RESPECT() { return getToken(DB2zSQLParser.RESPECT, 0); }
		public TerminalNode NULLS() { return getToken(DB2zSQLParser.NULLS, 0); }
		public TerminalNode IGNORE() { return getToken(DB2zSQLParser.IGNORE, 0); }
		public LagFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lagFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterLagFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitLagFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitLagFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LagFunctionContext lagFunction() throws RecognitionException {
		LagFunctionContext _localctx = new LagFunctionContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_lagFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4381);
			match(LAG);
			setState(4382);
			match(LPAREN);
			setState(4383);
			expression();
			{
			setState(4384);
			match(COMMA);
			setState(4385);
			match(INTEGERLITERAL);
			setState(4397);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(4386);
				match(COMMA);
				setState(4387);
				expression();
				setState(4395);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4388);
					match(COMMA);
					setState(4393);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case RESPECT:
						{
						{
						setState(4389);
						match(RESPECT);
						setState(4390);
						match(NULLS);
						}
						}
						break;
					case IGNORE:
						{
						{
						setState(4391);
						match(IGNORE);
						setState(4392);
						match(NULLS);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
			}

			setState(4399);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LeadFunctionContext extends ParserRuleContext {
		public TerminalNode LEAD() { return getToken(DB2zSQLParser.LEAD, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public RespectNullsClauseContext respectNullsClause() {
			return getRuleContext(RespectNullsClauseContext.class,0);
		}
		public LeadFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_leadFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterLeadFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitLeadFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitLeadFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LeadFunctionContext leadFunction() throws RecognitionException {
		LeadFunctionContext _localctx = new LeadFunctionContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_leadFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4401);
			match(LEAD);
			setState(4402);
			match(LPAREN);
			setState(4403);
			expression();
			{
			setState(4404);
			match(COMMA);
			setState(4405);
			match(INTEGERLITERAL);
			setState(4412);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(4406);
				match(COMMA);
				setState(4407);
				expression();
				setState(4410);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4408);
					match(COMMA);
					setState(4409);
					respectNullsClause();
					}
				}

				}
			}

			setState(4414);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RespectNullsClauseContext extends ParserRuleContext {
		public TerminalNode RESPECT() { return getToken(DB2zSQLParser.RESPECT, 0); }
		public TerminalNode NULLS() { return getToken(DB2zSQLParser.NULLS, 0); }
		public TerminalNode IGNORE() { return getToken(DB2zSQLParser.IGNORE, 0); }
		public RespectNullsClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_respectNullsClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRespectNullsClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRespectNullsClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRespectNullsClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RespectNullsClauseContext respectNullsClause() throws RecognitionException {
		RespectNullsClauseContext _localctx = new RespectNullsClauseContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_respectNullsClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4420);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RESPECT:
				{
				{
				setState(4416);
				match(RESPECT);
				setState(4417);
				match(NULLS);
				}
				}
				break;
			case IGNORE:
				{
				{
				setState(4418);
				match(IGNORE);
				setState(4419);
				match(NULLS);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowPartitionClauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(DB2zSQLParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public WindowPartitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowPartitionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterWindowPartitionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitWindowPartitionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitWindowPartitionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowPartitionClauseContext windowPartitionClause() throws RecognitionException {
		WindowPartitionClauseContext _localctx = new WindowPartitionClauseContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_windowPartitionClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4422);
			match(PARTITION);
			setState(4423);
			match(BY);
			setState(4424);
			expression();
			setState(4429);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4425);
				match(COMMA);
				setState(4426);
				expression();
				}
				}
				setState(4431);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowOrderClauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(DB2zSQLParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<WindowOrderClauseQualifierContext> windowOrderClauseQualifier() {
			return getRuleContexts(WindowOrderClauseQualifierContext.class);
		}
		public WindowOrderClauseQualifierContext windowOrderClauseQualifier(int i) {
			return getRuleContext(WindowOrderClauseQualifierContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public WindowOrderClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowOrderClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterWindowOrderClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitWindowOrderClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitWindowOrderClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowOrderClauseContext windowOrderClause() throws RecognitionException {
		WindowOrderClauseContext _localctx = new WindowOrderClauseContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_windowOrderClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4432);
			match(ORDER);
			setState(4433);
			match(BY);
			setState(4434);
			expression();
			setState(4436);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(4435);
				windowOrderClauseQualifier();
				}
			}

			setState(4445);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4438);
				match(COMMA);
				setState(4439);
				expression();
				setState(4441);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					setState(4440);
					windowOrderClauseQualifier();
					}
				}

				}
				}
				setState(4447);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowOrderClauseQualifierContext extends ParserRuleContext {
		public TerminalNode ASC() { return getToken(DB2zSQLParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(DB2zSQLParser.DESC, 0); }
		public TerminalNode NULLS() { return getToken(DB2zSQLParser.NULLS, 0); }
		public TerminalNode FIRST() { return getToken(DB2zSQLParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(DB2zSQLParser.LAST, 0); }
		public WindowOrderClauseQualifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowOrderClauseQualifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterWindowOrderClauseQualifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitWindowOrderClauseQualifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitWindowOrderClauseQualifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowOrderClauseQualifierContext windowOrderClauseQualifier() throws RecognitionException {
		WindowOrderClauseQualifierContext _localctx = new WindowOrderClauseQualifierContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_windowOrderClauseQualifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4448);
			_la = _input.LA(1);
			if ( !(_la==ASC || _la==DESC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4451);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NULLS) {
				{
				setState(4449);
				match(NULLS);
				setState(4450);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumberingSpecificationContext extends ParserRuleContext {
		public TerminalNode ROW_NUMBER() { return getToken(DB2zSQLParser.ROW_NUMBER, 0); }
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public TerminalNode OVER() { return getToken(DB2zSQLParser.OVER, 0); }
		public WindowPartitionClauseContext windowPartitionClause() {
			return getRuleContext(WindowPartitionClauseContext.class,0);
		}
		public WindowOrderClauseContext windowOrderClause() {
			return getRuleContext(WindowOrderClauseContext.class,0);
		}
		public NumberingSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numberingSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterNumberingSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitNumberingSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitNumberingSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumberingSpecificationContext numberingSpecification() throws RecognitionException {
		NumberingSpecificationContext _localctx = new NumberingSpecificationContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_numberingSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4453);
			match(ROW_NUMBER);
			setState(4454);
			match(LPAREN);
			setState(4455);
			match(RPAREN);
			setState(4456);
			match(OVER);
			setState(4457);
			match(LPAREN);
			setState(4459);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(4458);
				windowPartitionClause();
				}
			}

			setState(4462);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(4461);
				windowOrderClause();
				}
			}

			setState(4464);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggregationSpecificationContext extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(DB2zSQLParser.OVER, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public AggregateFunctionInvocationContext aggregateFunctionInvocation() {
			return getRuleContext(AggregateFunctionInvocationContext.class,0);
		}
		public OlapColumnFunctionContext olapColumnFunction() {
			return getRuleContext(OlapColumnFunctionContext.class,0);
		}
		public WindowPartitionClauseContext windowPartitionClause() {
			return getRuleContext(WindowPartitionClauseContext.class,0);
		}
		public TerminalNode RANGE() { return getToken(DB2zSQLParser.RANGE, 0); }
		public TerminalNode BETWEEN() { return getToken(DB2zSQLParser.BETWEEN, 0); }
		public List<TerminalNode> UNBOUNDED() { return getTokens(DB2zSQLParser.UNBOUNDED); }
		public TerminalNode UNBOUNDED(int i) {
			return getToken(DB2zSQLParser.UNBOUNDED, i);
		}
		public TerminalNode PRECEDING() { return getToken(DB2zSQLParser.PRECEDING, 0); }
		public TerminalNode AND() { return getToken(DB2zSQLParser.AND, 0); }
		public TerminalNode FOLLOWING() { return getToken(DB2zSQLParser.FOLLOWING, 0); }
		public WindowOrderClauseContext windowOrderClause() {
			return getRuleContext(WindowOrderClauseContext.class,0);
		}
		public WindowAggregationGroupClauseContext windowAggregationGroupClause() {
			return getRuleContext(WindowAggregationGroupClauseContext.class,0);
		}
		public TerminalNode CURRENT() { return getToken(DB2zSQLParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(DB2zSQLParser.ROW, 0); }
		public AggregationSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregationSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAggregationSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAggregationSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAggregationSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggregationSpecificationContext aggregationSpecification() throws RecognitionException {
		AggregationSpecificationContext _localctx = new AggregationSpecificationContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_aggregationSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4468);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,516,_ctx) ) {
			case 1:
				{
				setState(4466);
				aggregateFunctionInvocation();
				}
				break;
			case 2:
				{
				setState(4467);
				olapColumnFunction();
				}
				break;
			}
			setState(4470);
			match(OVER);
			setState(4471);
			match(LPAREN);
			setState(4473);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(4472);
				windowPartitionClause();
				}
			}

			setState(4493);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RANGE:
				{
				{
				setState(4475);
				match(RANGE);
				setState(4476);
				match(BETWEEN);
				setState(4477);
				match(UNBOUNDED);
				setState(4478);
				match(PRECEDING);
				setState(4479);
				match(AND);
				setState(4480);
				match(UNBOUNDED);
				setState(4481);
				match(FOLLOWING);
				}
				}
				break;
			case ORDER:
				{
				{
				setState(4482);
				windowOrderClause();
				setState(4491);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,518,_ctx) ) {
				case 1:
					{
					{
					setState(4483);
					match(RANGE);
					setState(4484);
					match(BETWEEN);
					setState(4485);
					match(UNBOUNDED);
					setState(4486);
					match(PRECEDING);
					setState(4487);
					match(AND);
					setState(4488);
					match(CURRENT);
					setState(4489);
					match(ROW);
					}
					}
					break;
				case 2:
					{
					setState(4490);
					windowAggregationGroupClause();
					}
					break;
				}
				}
				}
				break;
			case RPAREN:
				break;
			default:
				break;
			}
			setState(4495);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggregateFunctionContext extends ParserRuleContext {
		public TerminalNode ARRAY_AGG() { return getToken(DB2zSQLParser.ARRAY_AGG, 0); }
		public TerminalNode AVG() { return getToken(DB2zSQLParser.AVG, 0); }
		public TerminalNode CORR() { return getToken(DB2zSQLParser.CORR, 0); }
		public TerminalNode CORRELATION() { return getToken(DB2zSQLParser.CORRELATION, 0); }
		public TerminalNode COUNT() { return getToken(DB2zSQLParser.COUNT, 0); }
		public TerminalNode COUNT_BIG() { return getToken(DB2zSQLParser.COUNT_BIG, 0); }
		public TerminalNode COVAR_POP() { return getToken(DB2zSQLParser.COVAR_POP, 0); }
		public TerminalNode COVARIANCE() { return getToken(DB2zSQLParser.COVARIANCE, 0); }
		public TerminalNode COVAR() { return getToken(DB2zSQLParser.COVAR, 0); }
		public TerminalNode COVAR_SAMP() { return getToken(DB2zSQLParser.COVAR_SAMP, 0); }
		public TerminalNode COVARIANCE_SAMP() { return getToken(DB2zSQLParser.COVARIANCE_SAMP, 0); }
		public TerminalNode CUME_DIST() { return getToken(DB2zSQLParser.CUME_DIST, 0); }
		public TerminalNode GROUPING() { return getToken(DB2zSQLParser.GROUPING, 0); }
		public TerminalNode LISTAGG() { return getToken(DB2zSQLParser.LISTAGG, 0); }
		public TerminalNode MAX() { return getToken(DB2zSQLParser.MAX, 0); }
		public TerminalNode MEDIAN() { return getToken(DB2zSQLParser.MEDIAN, 0); }
		public TerminalNode MIN() { return getToken(DB2zSQLParser.MIN, 0); }
		public TerminalNode PERCENTILE_CONT() { return getToken(DB2zSQLParser.PERCENTILE_CONT, 0); }
		public TerminalNode PERCENTILE_DISC() { return getToken(DB2zSQLParser.PERCENTILE_DISC, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(DB2zSQLParser.PERCENT_RANK, 0); }
		public TerminalNode STDDEV_POP() { return getToken(DB2zSQLParser.STDDEV_POP, 0); }
		public TerminalNode STDDEV() { return getToken(DB2zSQLParser.STDDEV, 0); }
		public TerminalNode STDDEV_SAMP() { return getToken(DB2zSQLParser.STDDEV_SAMP, 0); }
		public TerminalNode SUM() { return getToken(DB2zSQLParser.SUM, 0); }
		public TerminalNode VAR_POP() { return getToken(DB2zSQLParser.VAR_POP, 0); }
		public TerminalNode VARIANCE() { return getToken(DB2zSQLParser.VARIANCE, 0); }
		public TerminalNode VAR() { return getToken(DB2zSQLParser.VAR, 0); }
		public TerminalNode VAR_SAMP() { return getToken(DB2zSQLParser.VAR_SAMP, 0); }
		public TerminalNode VARIANCE_SAMP() { return getToken(DB2zSQLParser.VARIANCE_SAMP, 0); }
		public TerminalNode XMLAGG() { return getToken(DB2zSQLParser.XMLAGG, 0); }
		public AggregateFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregateFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAggregateFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAggregateFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAggregateFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggregateFunctionContext aggregateFunction() throws RecognitionException {
		AggregateFunctionContext _localctx = new AggregateFunctionContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_aggregateFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4497);
			_la = _input.LA(1);
			if ( !(((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (ARRAY_AGG - 322)) | (1L << (AVG - 322)) | (1L << (CORR - 322)) | (1L << (CORRELATION - 322)) | (1L << (COUNT - 322)) | (1L << (COUNT_BIG - 322)) | (1L << (COVAR - 322)) | (1L << (COVARIANCE - 322)) | (1L << (COVARIANCE_SAMP - 322)) | (1L << (COVAR_POP - 322)) | (1L << (COVAR_SAMP - 322)) | (1L << (CUME_DIST - 322)) | (1L << (GROUPING - 322)) | (1L << (LISTAGG - 322)) | (1L << (MEDIAN - 322)) | (1L << (PERCENTILE_CONT - 322)) | (1L << (PERCENTILE_DISC - 322)) | (1L << (PERCENT_RANK - 322)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (STDDEV - 400)) | (1L << (STDDEV_POP - 400)) | (1L << (STDDEV_SAMP - 400)) | (1L << (SUM - 400)) | (1L << (VAR - 400)) | (1L << (VARIANCE - 400)) | (1L << (VARIANCE_SAMP - 400)) | (1L << (VAR_POP - 400)) | (1L << (VAR_SAMP - 400)) | (1L << (XMLAGG - 400)))) != 0) || _la==MAX || _la==MIN) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RegressionFunctionContext extends ParserRuleContext {
		public TerminalNode REGR_AVGX() { return getToken(DB2zSQLParser.REGR_AVGX, 0); }
		public TerminalNode REGR_AVGY() { return getToken(DB2zSQLParser.REGR_AVGY, 0); }
		public TerminalNode REGR_COUNT() { return getToken(DB2zSQLParser.REGR_COUNT, 0); }
		public TerminalNode REGR_INTERCEPT() { return getToken(DB2zSQLParser.REGR_INTERCEPT, 0); }
		public TerminalNode REGR_ICPT() { return getToken(DB2zSQLParser.REGR_ICPT, 0); }
		public TerminalNode REGR_R2() { return getToken(DB2zSQLParser.REGR_R2, 0); }
		public TerminalNode REGR_SLOPE() { return getToken(DB2zSQLParser.REGR_SLOPE, 0); }
		public TerminalNode REGR_SXX() { return getToken(DB2zSQLParser.REGR_SXX, 0); }
		public TerminalNode REGR_SXY() { return getToken(DB2zSQLParser.REGR_SXY, 0); }
		public TerminalNode REGR_SYY() { return getToken(DB2zSQLParser.REGR_SYY, 0); }
		public RegressionFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regressionFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRegressionFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRegressionFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRegressionFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RegressionFunctionContext regressionFunction() throws RecognitionException {
		RegressionFunctionContext _localctx = new RegressionFunctionContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_regressionFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4499);
			_la = _input.LA(1);
			if ( !(((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (REGR_AVGX - 380)) | (1L << (REGR_AVGY - 380)) | (1L << (REGR_COUNT - 380)) | (1L << (REGR_ICPT - 380)) | (1L << (REGR_INTERCEPT - 380)) | (1L << (REGR_R2 - 380)) | (1L << (REGR_SLOPE - 380)) | (1L << (REGR_SXX - 380)) | (1L << (REGR_SXY - 380)) | (1L << (REGR_SYY - 380)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OlapColumnFunctionContext extends ParserRuleContext {
		public FirstValueFunctionContext firstValueFunction() {
			return getRuleContext(FirstValueFunctionContext.class,0);
		}
		public LastValueFunctionContext lastValueFunction() {
			return getRuleContext(LastValueFunctionContext.class,0);
		}
		public NthValueFunctionContext nthValueFunction() {
			return getRuleContext(NthValueFunctionContext.class,0);
		}
		public RatioToReportFunctionContext ratioToReportFunction() {
			return getRuleContext(RatioToReportFunctionContext.class,0);
		}
		public OlapColumnFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_olapColumnFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterOlapColumnFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitOlapColumnFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitOlapColumnFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OlapColumnFunctionContext olapColumnFunction() throws RecognitionException {
		OlapColumnFunctionContext _localctx = new OlapColumnFunctionContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_olapColumnFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4505);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FIRST_VALUE:
				{
				setState(4501);
				firstValueFunction();
				}
				break;
			case LAST_VALUE:
				{
				setState(4502);
				lastValueFunction();
				}
				break;
			case NTH_VALUE:
				{
				setState(4503);
				nthValueFunction();
				}
				break;
			case RATIO_TO_REPORT:
				{
				setState(4504);
				ratioToReportFunction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FirstValueFunctionContext extends ParserRuleContext {
		public TerminalNode FIRST_VALUE() { return getToken(DB2zSQLParser.FIRST_VALUE, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode COMMA() { return getToken(DB2zSQLParser.COMMA, 0); }
		public RespectNullsClauseContext respectNullsClause() {
			return getRuleContext(RespectNullsClauseContext.class,0);
		}
		public FirstValueFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_firstValueFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFirstValueFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFirstValueFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFirstValueFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FirstValueFunctionContext firstValueFunction() throws RecognitionException {
		FirstValueFunctionContext _localctx = new FirstValueFunctionContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_firstValueFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4507);
			match(FIRST_VALUE);
			setState(4508);
			match(LPAREN);
			setState(4509);
			expression();
			setState(4512);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(4510);
				match(COMMA);
				setState(4511);
				respectNullsClause();
				}
			}

			setState(4514);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LastValueFunctionContext extends ParserRuleContext {
		public TerminalNode LAST_VALUE() { return getToken(DB2zSQLParser.LAST_VALUE, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode COMMA() { return getToken(DB2zSQLParser.COMMA, 0); }
		public RespectNullsClauseContext respectNullsClause() {
			return getRuleContext(RespectNullsClauseContext.class,0);
		}
		public LastValueFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lastValueFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterLastValueFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitLastValueFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitLastValueFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LastValueFunctionContext lastValueFunction() throws RecognitionException {
		LastValueFunctionContext _localctx = new LastValueFunctionContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_lastValueFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4516);
			match(LAST_VALUE);
			setState(4517);
			match(LPAREN);
			setState(4518);
			expression();
			setState(4521);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(4519);
				match(COMMA);
				setState(4520);
				respectNullsClause();
				}
			}

			setState(4523);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NthValueFunctionContext extends ParserRuleContext {
		public TerminalNode NTH_VALUE() { return getToken(DB2zSQLParser.NTH_VALUE, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(DB2zSQLParser.COMMA, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public NthValueFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nthValueFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterNthValueFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitNthValueFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitNthValueFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NthValueFunctionContext nthValueFunction() throws RecognitionException {
		NthValueFunctionContext _localctx = new NthValueFunctionContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_nthValueFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4525);
			match(NTH_VALUE);
			setState(4526);
			match(LPAREN);
			setState(4527);
			expression();
			setState(4528);
			match(COMMA);
			setState(4529);
			match(INTEGERLITERAL);
			setState(4530);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RatioToReportFunctionContext extends ParserRuleContext {
		public TerminalNode RATIO_TO_REPORT() { return getToken(DB2zSQLParser.RATIO_TO_REPORT, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public RatioToReportFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ratioToReportFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRatioToReportFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRatioToReportFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRatioToReportFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RatioToReportFunctionContext ratioToReportFunction() throws RecognitionException {
		RatioToReportFunctionContext _localctx = new RatioToReportFunctionContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_ratioToReportFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4532);
			match(RATIO_TO_REPORT);
			setState(4533);
			match(LPAREN);
			setState(4534);
			expression();
			setState(4535);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowAggregationGroupClauseContext extends ParserRuleContext {
		public TerminalNode ROWS() { return getToken(DB2zSQLParser.ROWS, 0); }
		public TerminalNode RANGE() { return getToken(DB2zSQLParser.RANGE, 0); }
		public GroupStartContext groupStart() {
			return getRuleContext(GroupStartContext.class,0);
		}
		public GroupBetweenContext groupBetween() {
			return getRuleContext(GroupBetweenContext.class,0);
		}
		public GroupEndContext groupEnd() {
			return getRuleContext(GroupEndContext.class,0);
		}
		public WindowAggregationGroupClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowAggregationGroupClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterWindowAggregationGroupClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitWindowAggregationGroupClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitWindowAggregationGroupClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowAggregationGroupClauseContext windowAggregationGroupClause() throws RecognitionException {
		WindowAggregationGroupClauseContext _localctx = new WindowAggregationGroupClauseContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_windowAggregationGroupClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4537);
			_la = _input.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4541);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,523,_ctx) ) {
			case 1:
				{
				setState(4538);
				groupStart();
				}
				break;
			case 2:
				{
				setState(4539);
				groupBetween();
				}
				break;
			case 3:
				{
				setState(4540);
				groupEnd();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupStartContext extends ParserRuleContext {
		public UnboundedPrecedingContext unboundedPreceding() {
			return getRuleContext(UnboundedPrecedingContext.class,0);
		}
		public BoundedPrecedingContext boundedPreceding() {
			return getRuleContext(BoundedPrecedingContext.class,0);
		}
		public CurrentRowContext currentRow() {
			return getRuleContext(CurrentRowContext.class,0);
		}
		public GroupStartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupStart; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGroupStart(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGroupStart(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGroupStart(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupStartContext groupStart() throws RecognitionException {
		GroupStartContext _localctx = new GroupStartContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_groupStart);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4546);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNBOUNDED:
				{
				setState(4543);
				unboundedPreceding();
				}
				break;
			case INTEGERLITERAL:
				{
				setState(4544);
				boundedPreceding();
				}
				break;
			case CURRENT:
				{
				setState(4545);
				currentRow();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupBetweenContext extends ParserRuleContext {
		public TerminalNode BETWEEN() { return getToken(DB2zSQLParser.BETWEEN, 0); }
		public GroupBound1Context groupBound1() {
			return getRuleContext(GroupBound1Context.class,0);
		}
		public TerminalNode AND() { return getToken(DB2zSQLParser.AND, 0); }
		public GroupBound2Context groupBound2() {
			return getRuleContext(GroupBound2Context.class,0);
		}
		public GroupBetweenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupBetween; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGroupBetween(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGroupBetween(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGroupBetween(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupBetweenContext groupBetween() throws RecognitionException {
		GroupBetweenContext _localctx = new GroupBetweenContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_groupBetween);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4548);
			match(BETWEEN);
			setState(4549);
			groupBound1();
			setState(4550);
			match(AND);
			setState(4551);
			groupBound2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupEndContext extends ParserRuleContext {
		public UnboundedFollowingContext unboundedFollowing() {
			return getRuleContext(UnboundedFollowingContext.class,0);
		}
		public BoundedFollowingContext boundedFollowing() {
			return getRuleContext(BoundedFollowingContext.class,0);
		}
		public GroupEndContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupEnd; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGroupEnd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGroupEnd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGroupEnd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupEndContext groupEnd() throws RecognitionException {
		GroupEndContext _localctx = new GroupEndContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_groupEnd);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4555);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNBOUNDED:
				{
				setState(4553);
				unboundedFollowing();
				}
				break;
			case INTEGERLITERAL:
				{
				setState(4554);
				boundedFollowing();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupBound1Context extends ParserRuleContext {
		public UnboundedPrecedingContext unboundedPreceding() {
			return getRuleContext(UnboundedPrecedingContext.class,0);
		}
		public BoundedPrecedingContext boundedPreceding() {
			return getRuleContext(BoundedPrecedingContext.class,0);
		}
		public BoundedFollowingContext boundedFollowing() {
			return getRuleContext(BoundedFollowingContext.class,0);
		}
		public CurrentRowContext currentRow() {
			return getRuleContext(CurrentRowContext.class,0);
		}
		public GroupBound1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupBound1; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGroupBound1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGroupBound1(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGroupBound1(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupBound1Context groupBound1() throws RecognitionException {
		GroupBound1Context _localctx = new GroupBound1Context(_ctx, getState());
		enterRule(_localctx, 398, RULE_groupBound1);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4561);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,526,_ctx) ) {
			case 1:
				{
				setState(4557);
				unboundedPreceding();
				}
				break;
			case 2:
				{
				setState(4558);
				boundedPreceding();
				}
				break;
			case 3:
				{
				setState(4559);
				boundedFollowing();
				}
				break;
			case 4:
				{
				setState(4560);
				currentRow();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupBound2Context extends ParserRuleContext {
		public UnboundedFollowingContext unboundedFollowing() {
			return getRuleContext(UnboundedFollowingContext.class,0);
		}
		public BoundedPrecedingContext boundedPreceding() {
			return getRuleContext(BoundedPrecedingContext.class,0);
		}
		public BoundedFollowingContext boundedFollowing() {
			return getRuleContext(BoundedFollowingContext.class,0);
		}
		public CurrentRowContext currentRow() {
			return getRuleContext(CurrentRowContext.class,0);
		}
		public GroupBound2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupBound2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGroupBound2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGroupBound2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGroupBound2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupBound2Context groupBound2() throws RecognitionException {
		GroupBound2Context _localctx = new GroupBound2Context(_ctx, getState());
		enterRule(_localctx, 400, RULE_groupBound2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4567);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,527,_ctx) ) {
			case 1:
				{
				setState(4563);
				unboundedFollowing();
				}
				break;
			case 2:
				{
				setState(4564);
				boundedPreceding();
				}
				break;
			case 3:
				{
				setState(4565);
				boundedFollowing();
				}
				break;
			case 4:
				{
				setState(4566);
				currentRow();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnboundedPrecedingContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(DB2zSQLParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(DB2zSQLParser.PRECEDING, 0); }
		public UnboundedPrecedingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unboundedPreceding; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterUnboundedPreceding(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitUnboundedPreceding(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitUnboundedPreceding(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnboundedPrecedingContext unboundedPreceding() throws RecognitionException {
		UnboundedPrecedingContext _localctx = new UnboundedPrecedingContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_unboundedPreceding);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4569);
			match(UNBOUNDED);
			setState(4570);
			match(PRECEDING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnboundedFollowingContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(DB2zSQLParser.UNBOUNDED, 0); }
		public TerminalNode FOLLOWING() { return getToken(DB2zSQLParser.FOLLOWING, 0); }
		public UnboundedFollowingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unboundedFollowing; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterUnboundedFollowing(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitUnboundedFollowing(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitUnboundedFollowing(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnboundedFollowingContext unboundedFollowing() throws RecognitionException {
		UnboundedFollowingContext _localctx = new UnboundedFollowingContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_unboundedFollowing);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4572);
			match(UNBOUNDED);
			setState(4573);
			match(FOLLOWING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BoundedPrecedingContext extends ParserRuleContext {
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode PRECEDING() { return getToken(DB2zSQLParser.PRECEDING, 0); }
		public BoundedPrecedingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boundedPreceding; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterBoundedPreceding(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitBoundedPreceding(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitBoundedPreceding(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BoundedPrecedingContext boundedPreceding() throws RecognitionException {
		BoundedPrecedingContext _localctx = new BoundedPrecedingContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_boundedPreceding);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4575);
			match(INTEGERLITERAL);
			setState(4576);
			match(PRECEDING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BoundedFollowingContext extends ParserRuleContext {
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode FOLLOWING() { return getToken(DB2zSQLParser.FOLLOWING, 0); }
		public BoundedFollowingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boundedFollowing; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterBoundedFollowing(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitBoundedFollowing(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitBoundedFollowing(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BoundedFollowingContext boundedFollowing() throws RecognitionException {
		BoundedFollowingContext _localctx = new BoundedFollowingContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_boundedFollowing);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4578);
			match(INTEGERLITERAL);
			setState(4579);
			match(FOLLOWING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CurrentRowContext extends ParserRuleContext {
		public TerminalNode CURRENT() { return getToken(DB2zSQLParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(DB2zSQLParser.ROW, 0); }
		public CurrentRowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_currentRow; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCurrentRow(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCurrentRow(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCurrentRow(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CurrentRowContext currentRow() throws RecognitionException {
		CurrentRowContext _localctx = new CurrentRowContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_currentRow);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4581);
			match(CURRENT);
			setState(4582);
			match(ROW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScalarFunctionContext extends ParserRuleContext {
		public TerminalNode ABS() { return getToken(DB2zSQLParser.ABS, 0); }
		public TerminalNode ABSVAL() { return getToken(DB2zSQLParser.ABSVAL, 0); }
		public TerminalNode ACOS() { return getToken(DB2zSQLParser.ACOS, 0); }
		public TerminalNode ADD_DAYS() { return getToken(DB2zSQLParser.ADD_DAYS, 0); }
		public TerminalNode ADD_MONTHS() { return getToken(DB2zSQLParser.ADD_MONTHS, 0); }
		public TerminalNode ARRAY_DELETE() { return getToken(DB2zSQLParser.ARRAY_DELETE, 0); }
		public TerminalNode ARRAY_FIRST() { return getToken(DB2zSQLParser.ARRAY_FIRST, 0); }
		public TerminalNode ARRAY_LAST() { return getToken(DB2zSQLParser.ARRAY_LAST, 0); }
		public TerminalNode ARRAY_NEXT() { return getToken(DB2zSQLParser.ARRAY_NEXT, 0); }
		public TerminalNode ARRAY_PRIOR() { return getToken(DB2zSQLParser.ARRAY_PRIOR, 0); }
		public TerminalNode ARRAY_TRIM() { return getToken(DB2zSQLParser.ARRAY_TRIM, 0); }
		public TerminalNode ASCII() { return getToken(DB2zSQLParser.ASCII, 0); }
		public TerminalNode ASCII_CHR() { return getToken(DB2zSQLParser.ASCII_CHR, 0); }
		public TerminalNode ASCIISTR() { return getToken(DB2zSQLParser.ASCIISTR, 0); }
		public TerminalNode ASCII_STR() { return getToken(DB2zSQLParser.ASCII_STR, 0); }
		public TerminalNode ASIN() { return getToken(DB2zSQLParser.ASIN, 0); }
		public TerminalNode ATAN() { return getToken(DB2zSQLParser.ATAN, 0); }
		public TerminalNode ATAN2() { return getToken(DB2zSQLParser.ATAN2, 0); }
		public TerminalNode ATANH() { return getToken(DB2zSQLParser.ATANH, 0); }
		public TerminalNode BIGINT() { return getToken(DB2zSQLParser.BIGINT, 0); }
		public TerminalNode BINARY() { return getToken(DB2zSQLParser.BINARY, 0); }
		public TerminalNode BITAND() { return getToken(DB2zSQLParser.BITAND, 0); }
		public TerminalNode BITANDNOT() { return getToken(DB2zSQLParser.BITANDNOT, 0); }
		public TerminalNode BITNOT() { return getToken(DB2zSQLParser.BITNOT, 0); }
		public TerminalNode BITOR() { return getToken(DB2zSQLParser.BITOR, 0); }
		public TerminalNode BITXOR() { return getToken(DB2zSQLParser.BITXOR, 0); }
		public TerminalNode BLOB() { return getToken(DB2zSQLParser.BLOB, 0); }
		public TerminalNode BTRIM() { return getToken(DB2zSQLParser.BTRIM, 0); }
		public TerminalNode CARDINALITY() { return getToken(DB2zSQLParser.CARDINALITY, 0); }
		public TerminalNode CCSID_ENCODING() { return getToken(DB2zSQLParser.CCSID_ENCODING, 0); }
		public TerminalNode CEIL() { return getToken(DB2zSQLParser.CEIL, 0); }
		public TerminalNode CEILING() { return getToken(DB2zSQLParser.CEILING, 0); }
		public TerminalNode CHAR() { return getToken(DB2zSQLParser.CHAR, 0); }
		public TerminalNode CHAR9() { return getToken(DB2zSQLParser.CHAR9, 0); }
		public TerminalNode CHARACTER_LENGTH() { return getToken(DB2zSQLParser.CHARACTER_LENGTH, 0); }
		public TerminalNode CHAR_LENGTH() { return getToken(DB2zSQLParser.CHAR_LENGTH, 0); }
		public TerminalNode CHR() { return getToken(DB2zSQLParser.CHR, 0); }
		public TerminalNode CLOB() { return getToken(DB2zSQLParser.CLOB, 0); }
		public TerminalNode COALESCE() { return getToken(DB2zSQLParser.COALESCE, 0); }
		public TerminalNode COLLATION_KEY() { return getToken(DB2zSQLParser.COLLATION_KEY, 0); }
		public TerminalNode COMPARE_DECFLOAT() { return getToken(DB2zSQLParser.COMPARE_DECFLOAT, 0); }
		public TerminalNode CONCAT() { return getToken(DB2zSQLParser.CONCAT, 0); }
		public TerminalNode CONTAINS() { return getToken(DB2zSQLParser.CONTAINS, 0); }
		public TerminalNode COS() { return getToken(DB2zSQLParser.COS, 0); }
		public TerminalNode COSH() { return getToken(DB2zSQLParser.COSH, 0); }
		public TerminalNode DATE() { return getToken(DB2zSQLParser.DATE, 0); }
		public TerminalNode DAY() { return getToken(DB2zSQLParser.DAY, 0); }
		public TerminalNode DAYOFMONTH() { return getToken(DB2zSQLParser.DAYOFMONTH, 0); }
		public TerminalNode DAYOFWEEK() { return getToken(DB2zSQLParser.DAYOFWEEK, 0); }
		public TerminalNode DAYOFWEEK_ISO() { return getToken(DB2zSQLParser.DAYOFWEEK_ISO, 0); }
		public TerminalNode DAYOFYEAR() { return getToken(DB2zSQLParser.DAYOFYEAR, 0); }
		public TerminalNode DAYS() { return getToken(DB2zSQLParser.DAYS, 0); }
		public TerminalNode DAYS_BETWEEN() { return getToken(DB2zSQLParser.DAYS_BETWEEN, 0); }
		public TerminalNode DBCLOB() { return getToken(DB2zSQLParser.DBCLOB, 0); }
		public TerminalNode DEC() { return getToken(DB2zSQLParser.DEC, 0); }
		public TerminalNode DECFLOAT() { return getToken(DB2zSQLParser.DECFLOAT, 0); }
		public TerminalNode DECFLOAT_FORMAT() { return getToken(DB2zSQLParser.DECFLOAT_FORMAT, 0); }
		public TerminalNode DECFLOAT_SORTKEY() { return getToken(DB2zSQLParser.DECFLOAT_SORTKEY, 0); }
		public TerminalNode DECIMAL() { return getToken(DB2zSQLParser.DECIMAL, 0); }
		public TerminalNode DECODE() { return getToken(DB2zSQLParser.DECODE, 0); }
		public TerminalNode DECRYPT_BINARY() { return getToken(DB2zSQLParser.DECRYPT_BINARY, 0); }
		public TerminalNode DECRYPT_BIT() { return getToken(DB2zSQLParser.DECRYPT_BIT, 0); }
		public TerminalNode DECRYPT_CHAR() { return getToken(DB2zSQLParser.DECRYPT_CHAR, 0); }
		public TerminalNode DECRYPT_DATAKEY_BIGINT() { return getToken(DB2zSQLParser.DECRYPT_DATAKEY_BIGINT, 0); }
		public TerminalNode DECRYPT_DATAKEY_BIT() { return getToken(DB2zSQLParser.DECRYPT_DATAKEY_BIT, 0); }
		public TerminalNode DECRYPT_DATAKEY_CLOB() { return getToken(DB2zSQLParser.DECRYPT_DATAKEY_CLOB, 0); }
		public TerminalNode DECRYPT_DATAKEY_DBCLOB() { return getToken(DB2zSQLParser.DECRYPT_DATAKEY_DBCLOB, 0); }
		public TerminalNode DECRYPT_DATAKEY_DECIMAL() { return getToken(DB2zSQLParser.DECRYPT_DATAKEY_DECIMAL, 0); }
		public TerminalNode DECRYPT_DATAKEY_INTEGER() { return getToken(DB2zSQLParser.DECRYPT_DATAKEY_INTEGER, 0); }
		public TerminalNode DECRYPT_DATAKEY_VARCHAR() { return getToken(DB2zSQLParser.DECRYPT_DATAKEY_VARCHAR, 0); }
		public TerminalNode DECRYPT_DATAKEY_VARGRAPHIC() { return getToken(DB2zSQLParser.DECRYPT_DATAKEY_VARGRAPHIC, 0); }
		public TerminalNode DECRYPT_DB() { return getToken(DB2zSQLParser.DECRYPT_DB, 0); }
		public TerminalNode DEGREES() { return getToken(DB2zSQLParser.DEGREES, 0); }
		public TerminalNode DIFFERENCE() { return getToken(DB2zSQLParser.DIFFERENCE, 0); }
		public TerminalNode DIGITS() { return getToken(DB2zSQLParser.DIGITS, 0); }
		public TerminalNode DOUBLE() { return getToken(DB2zSQLParser.DOUBLE, 0); }
		public TerminalNode DOUBLE_PRECISION() { return getToken(DB2zSQLParser.DOUBLE_PRECISION, 0); }
		public TerminalNode DSN_XMLVALIDATE() { return getToken(DB2zSQLParser.DSN_XMLVALIDATE, 0); }
		public TerminalNode EBCDIC_CHR() { return getToken(DB2zSQLParser.EBCDIC_CHR, 0); }
		public TerminalNode EBCDIC_STR() { return getToken(DB2zSQLParser.EBCDIC_STR, 0); }
		public TerminalNode ENCRYPT_DATAKEY() { return getToken(DB2zSQLParser.ENCRYPT_DATAKEY, 0); }
		public TerminalNode ENCRYPT_TDES() { return getToken(DB2zSQLParser.ENCRYPT_TDES, 0); }
		public TerminalNode EXP() { return getToken(DB2zSQLParser.EXP, 0); }
		public TerminalNode EXTRACT() { return getToken(DB2zSQLParser.EXTRACT, 0); }
		public TerminalNode FLOAT() { return getToken(DB2zSQLParser.FLOAT, 0); }
		public TerminalNode FLOOR() { return getToken(DB2zSQLParser.FLOOR, 0); }
		public TerminalNode GENERATE_UNIQUE() { return getToken(DB2zSQLParser.GENERATE_UNIQUE, 0); }
		public TerminalNode GENERATE_UNIQUE_BINARY() { return getToken(DB2zSQLParser.GENERATE_UNIQUE_BINARY, 0); }
		public TerminalNode GETHINT() { return getToken(DB2zSQLParser.GETHINT, 0); }
		public TerminalNode GETVARIABLE() { return getToken(DB2zSQLParser.GETVARIABLE, 0); }
		public TerminalNode GRAPHIC() { return getToken(DB2zSQLParser.GRAPHIC, 0); }
		public TerminalNode GREATEST() { return getToken(DB2zSQLParser.GREATEST, 0); }
		public TerminalNode HASH() { return getToken(DB2zSQLParser.HASH, 0); }
		public TerminalNode HASH_CRC32() { return getToken(DB2zSQLParser.HASH_CRC32, 0); }
		public TerminalNode HASH_MD5() { return getToken(DB2zSQLParser.HASH_MD5, 0); }
		public TerminalNode HASH_SHA1() { return getToken(DB2zSQLParser.HASH_SHA1, 0); }
		public TerminalNode HASH_SHA256() { return getToken(DB2zSQLParser.HASH_SHA256, 0); }
		public TerminalNode HEX() { return getToken(DB2zSQLParser.HEX, 0); }
		public TerminalNode HOUR() { return getToken(DB2zSQLParser.HOUR, 0); }
		public TerminalNode IDENTITY_VAL_LOCAL() { return getToken(DB2zSQLParser.IDENTITY_VAL_LOCAL, 0); }
		public TerminalNode IFNULL() { return getToken(DB2zSQLParser.IFNULL, 0); }
		public TerminalNode INSERT() { return getToken(DB2zSQLParser.INSERT, 0); }
		public TerminalNode INSTR() { return getToken(DB2zSQLParser.INSTR, 0); }
		public TerminalNode INT() { return getToken(DB2zSQLParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(DB2zSQLParser.INTEGER, 0); }
		public TerminalNode JULIAN_DAY() { return getToken(DB2zSQLParser.JULIAN_DAY, 0); }
		public TerminalNode LAST_DAY() { return getToken(DB2zSQLParser.LAST_DAY, 0); }
		public TerminalNode LCASE() { return getToken(DB2zSQLParser.LCASE, 0); }
		public TerminalNode LEAST() { return getToken(DB2zSQLParser.LEAST, 0); }
		public TerminalNode LEFT() { return getToken(DB2zSQLParser.LEFT, 0); }
		public TerminalNode LENGTH() { return getToken(DB2zSQLParser.LENGTH, 0); }
		public TerminalNode LN() { return getToken(DB2zSQLParser.LN, 0); }
		public TerminalNode LOCATE() { return getToken(DB2zSQLParser.LOCATE, 0); }
		public TerminalNode LOCATE_IN_STRING() { return getToken(DB2zSQLParser.LOCATE_IN_STRING, 0); }
		public TerminalNode LOG10() { return getToken(DB2zSQLParser.LOG10, 0); }
		public TerminalNode LOWER() { return getToken(DB2zSQLParser.LOWER, 0); }
		public TerminalNode LPAD() { return getToken(DB2zSQLParser.LPAD, 0); }
		public TerminalNode LTRIM() { return getToken(DB2zSQLParser.LTRIM, 0); }
		public TerminalNode MAX_CARDINALITY() { return getToken(DB2zSQLParser.MAX_CARDINALITY, 0); }
		public TerminalNode MICROSECOND() { return getToken(DB2zSQLParser.MICROSECOND, 0); }
		public TerminalNode MIDNIGHT_SECONDS() { return getToken(DB2zSQLParser.MIDNIGHT_SECONDS, 0); }
		public TerminalNode MINUTE() { return getToken(DB2zSQLParser.MINUTE, 0); }
		public TerminalNode MOD() { return getToken(DB2zSQLParser.MOD, 0); }
		public TerminalNode MONTH() { return getToken(DB2zSQLParser.MONTH, 0); }
		public TerminalNode MONTHS_BETWEEN() { return getToken(DB2zSQLParser.MONTHS_BETWEEN, 0); }
		public TerminalNode MQREAD() { return getToken(DB2zSQLParser.MQREAD, 0); }
		public TerminalNode MQREADCLOB() { return getToken(DB2zSQLParser.MQREADCLOB, 0); }
		public TerminalNode MQRECEIVE() { return getToken(DB2zSQLParser.MQRECEIVE, 0); }
		public TerminalNode MQRECEIVECLOB() { return getToken(DB2zSQLParser.MQRECEIVECLOB, 0); }
		public TerminalNode MQSEND() { return getToken(DB2zSQLParser.MQSEND, 0); }
		public TerminalNode MULTIPLY_ALT() { return getToken(DB2zSQLParser.MULTIPLY_ALT, 0); }
		public TerminalNode NEXT_DAY() { return getToken(DB2zSQLParser.NEXT_DAY, 0); }
		public TerminalNode NEXT_MONTH() { return getToken(DB2zSQLParser.NEXT_MONTH, 0); }
		public TerminalNode NORMALIZE_DECFLOAT() { return getToken(DB2zSQLParser.NORMALIZE_DECFLOAT, 0); }
		public TerminalNode NORMALIZE_STRING() { return getToken(DB2zSQLParser.NORMALIZE_STRING, 0); }
		public TerminalNode NULLIF() { return getToken(DB2zSQLParser.NULLIF, 0); }
		public TerminalNode NVL() { return getToken(DB2zSQLParser.NVL, 0); }
		public TerminalNode OVERLAY() { return getToken(DB2zSQLParser.OVERLAY, 0); }
		public TerminalNode PACK() { return getToken(DB2zSQLParser.PACK, 0); }
		public TerminalNode POSITION() { return getToken(DB2zSQLParser.POSITION, 0); }
		public TerminalNode POSSTR() { return getToken(DB2zSQLParser.POSSTR, 0); }
		public TerminalNode POW() { return getToken(DB2zSQLParser.POW, 0); }
		public TerminalNode POWER() { return getToken(DB2zSQLParser.POWER, 0); }
		public TerminalNode QUANTIZE() { return getToken(DB2zSQLParser.QUANTIZE, 0); }
		public TerminalNode QUARTER() { return getToken(DB2zSQLParser.QUARTER, 0); }
		public TerminalNode RADIANS() { return getToken(DB2zSQLParser.RADIANS, 0); }
		public TerminalNode RAISE_ERROR() { return getToken(DB2zSQLParser.RAISE_ERROR, 0); }
		public TerminalNode RAND() { return getToken(DB2zSQLParser.RAND, 0); }
		public TerminalNode RANDOM() { return getToken(DB2zSQLParser.RANDOM, 0); }
		public TerminalNode REAL() { return getToken(DB2zSQLParser.REAL, 0); }
		public TerminalNode REGEXP_COUNT() { return getToken(DB2zSQLParser.REGEXP_COUNT, 0); }
		public TerminalNode REGEXP_INSTR() { return getToken(DB2zSQLParser.REGEXP_INSTR, 0); }
		public TerminalNode REGEXP_LIKE() { return getToken(DB2zSQLParser.REGEXP_LIKE, 0); }
		public TerminalNode REGEXP_REPLACE() { return getToken(DB2zSQLParser.REGEXP_REPLACE, 0); }
		public TerminalNode REGEXP_SUBSTR() { return getToken(DB2zSQLParser.REGEXP_SUBSTR, 0); }
		public TerminalNode REPEAT() { return getToken(DB2zSQLParser.REPEAT, 0); }
		public TerminalNode REPLACE() { return getToken(DB2zSQLParser.REPLACE, 0); }
		public TerminalNode RID() { return getToken(DB2zSQLParser.RID, 0); }
		public TerminalNode RIGHT() { return getToken(DB2zSQLParser.RIGHT, 0); }
		public TerminalNode ROUND() { return getToken(DB2zSQLParser.ROUND, 0); }
		public TerminalNode ROUND_TIMESTAMP() { return getToken(DB2zSQLParser.ROUND_TIMESTAMP, 0); }
		public TerminalNode ROWID() { return getToken(DB2zSQLParser.ROWID, 0); }
		public TerminalNode RPAD() { return getToken(DB2zSQLParser.RPAD, 0); }
		public TerminalNode RTRIM() { return getToken(DB2zSQLParser.RTRIM, 0); }
		public TerminalNode SCORE() { return getToken(DB2zSQLParser.SCORE, 0); }
		public TerminalNode SECOND() { return getToken(DB2zSQLParser.SECOND, 0); }
		public TerminalNode SIGN() { return getToken(DB2zSQLParser.SIGN, 0); }
		public TerminalNode SIN() { return getToken(DB2zSQLParser.SIN, 0); }
		public TerminalNode SINH() { return getToken(DB2zSQLParser.SINH, 0); }
		public TerminalNode SMALLINT() { return getToken(DB2zSQLParser.SMALLINT, 0); }
		public TerminalNode SOAPHTTPC() { return getToken(DB2zSQLParser.SOAPHTTPC, 0); }
		public TerminalNode SOAPHTTPNC() { return getToken(DB2zSQLParser.SOAPHTTPNC, 0); }
		public TerminalNode SOAPHTTPNV() { return getToken(DB2zSQLParser.SOAPHTTPNV, 0); }
		public TerminalNode SOAPHTTPV() { return getToken(DB2zSQLParser.SOAPHTTPV, 0); }
		public TerminalNode SOUNDEX() { return getToken(DB2zSQLParser.SOUNDEX, 0); }
		public TerminalNode SPACE() { return getToken(DB2zSQLParser.SPACE, 0); }
		public TerminalNode SQRT() { return getToken(DB2zSQLParser.SQRT, 0); }
		public TerminalNode STRIP() { return getToken(DB2zSQLParser.STRIP, 0); }
		public TerminalNode STRLEFT() { return getToken(DB2zSQLParser.STRLEFT, 0); }
		public TerminalNode STRPOS() { return getToken(DB2zSQLParser.STRPOS, 0); }
		public TerminalNode STRRIGHT() { return getToken(DB2zSQLParser.STRRIGHT, 0); }
		public TerminalNode SUBSTR() { return getToken(DB2zSQLParser.SUBSTR, 0); }
		public TerminalNode SUBSTRING() { return getToken(DB2zSQLParser.SUBSTRING, 0); }
		public TerminalNode TAN() { return getToken(DB2zSQLParser.TAN, 0); }
		public TerminalNode TANH() { return getToken(DB2zSQLParser.TANH, 0); }
		public TerminalNode TIME() { return getToken(DB2zSQLParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(DB2zSQLParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMPADD() { return getToken(DB2zSQLParser.TIMESTAMPADD, 0); }
		public TerminalNode TIMESTAMPDIFF() { return getToken(DB2zSQLParser.TIMESTAMPDIFF, 0); }
		public TerminalNode TIMESTAMP_FORMAT() { return getToken(DB2zSQLParser.TIMESTAMP_FORMAT, 0); }
		public TerminalNode TIMESTAMP_ISO() { return getToken(DB2zSQLParser.TIMESTAMP_ISO, 0); }
		public TerminalNode TIMESTAMP_TZ() { return getToken(DB2zSQLParser.TIMESTAMP_TZ, 0); }
		public TerminalNode TO_CHAR() { return getToken(DB2zSQLParser.TO_CHAR, 0); }
		public TerminalNode TO_CLOB() { return getToken(DB2zSQLParser.TO_CLOB, 0); }
		public TerminalNode TO_DATE() { return getToken(DB2zSQLParser.TO_DATE, 0); }
		public TerminalNode TO_NUMBER() { return getToken(DB2zSQLParser.TO_NUMBER, 0); }
		public TerminalNode TOTALORDER() { return getToken(DB2zSQLParser.TOTALORDER, 0); }
		public TerminalNode TO_TIMESTAMP() { return getToken(DB2zSQLParser.TO_TIMESTAMP, 0); }
		public TerminalNode TRANSLATE() { return getToken(DB2zSQLParser.TRANSLATE, 0); }
		public TerminalNode TRIM() { return getToken(DB2zSQLParser.TRIM, 0); }
		public TerminalNode TRIM_ARRAY() { return getToken(DB2zSQLParser.TRIM_ARRAY, 0); }
		public TerminalNode TRUNC() { return getToken(DB2zSQLParser.TRUNC, 0); }
		public TerminalNode TRUNCATE() { return getToken(DB2zSQLParser.TRUNCATE, 0); }
		public TerminalNode TRUNC_TIMESTAMP() { return getToken(DB2zSQLParser.TRUNC_TIMESTAMP, 0); }
		public TerminalNode UCASE() { return getToken(DB2zSQLParser.UCASE, 0); }
		public TerminalNode UNICODE() { return getToken(DB2zSQLParser.UNICODE, 0); }
		public TerminalNode UNICODE_STR() { return getToken(DB2zSQLParser.UNICODE_STR, 0); }
		public TerminalNode UNISTR() { return getToken(DB2zSQLParser.UNISTR, 0); }
		public TerminalNode UPPER() { return getToken(DB2zSQLParser.UPPER, 0); }
		public TerminalNode VALUE() { return getToken(DB2zSQLParser.VALUE, 0); }
		public TerminalNode VARBINARY() { return getToken(DB2zSQLParser.VARBINARY, 0); }
		public TerminalNode VARCHAR() { return getToken(DB2zSQLParser.VARCHAR, 0); }
		public TerminalNode VARCHAR9() { return getToken(DB2zSQLParser.VARCHAR9, 0); }
		public TerminalNode VARCHAR_BIT_FORMAT() { return getToken(DB2zSQLParser.VARCHAR_BIT_FORMAT, 0); }
		public TerminalNode VARCHAR_FORMAT() { return getToken(DB2zSQLParser.VARCHAR_FORMAT, 0); }
		public TerminalNode VARGRAPHIC() { return getToken(DB2zSQLParser.VARGRAPHIC, 0); }
		public TerminalNode VERIFY_GROUP_FOR_USER() { return getToken(DB2zSQLParser.VERIFY_GROUP_FOR_USER, 0); }
		public TerminalNode VERIFY_ROLE_FOR_USER() { return getToken(DB2zSQLParser.VERIFY_ROLE_FOR_USER, 0); }
		public TerminalNode VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER() { return getToken(DB2zSQLParser.VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER, 0); }
		public TerminalNode WEEK() { return getToken(DB2zSQLParser.WEEK, 0); }
		public TerminalNode WEEK_ISO() { return getToken(DB2zSQLParser.WEEK_ISO, 0); }
		public TerminalNode WRAP() { return getToken(DB2zSQLParser.WRAP, 0); }
		public TerminalNode XMLATTRIBUTES() { return getToken(DB2zSQLParser.XMLATTRIBUTES, 0); }
		public TerminalNode XMLCOMMENT() { return getToken(DB2zSQLParser.XMLCOMMENT, 0); }
		public TerminalNode XMLCONCAT() { return getToken(DB2zSQLParser.XMLCONCAT, 0); }
		public TerminalNode XMLDOCUMENT() { return getToken(DB2zSQLParser.XMLDOCUMENT, 0); }
		public TerminalNode XMLELEMENT() { return getToken(DB2zSQLParser.XMLELEMENT, 0); }
		public TerminalNode XMLFOREST() { return getToken(DB2zSQLParser.XMLFOREST, 0); }
		public TerminalNode XMLMODIFY() { return getToken(DB2zSQLParser.XMLMODIFY, 0); }
		public TerminalNode XMLNAMESPACES() { return getToken(DB2zSQLParser.XMLNAMESPACES, 0); }
		public TerminalNode XMLPARSE() { return getToken(DB2zSQLParser.XMLPARSE, 0); }
		public TerminalNode XMLPI() { return getToken(DB2zSQLParser.XMLPI, 0); }
		public TerminalNode XMLQUERY() { return getToken(DB2zSQLParser.XMLQUERY, 0); }
		public TerminalNode XMLSERIALIZE() { return getToken(DB2zSQLParser.XMLSERIALIZE, 0); }
		public TerminalNode XMLTEXT() { return getToken(DB2zSQLParser.XMLTEXT, 0); }
		public TerminalNode XMLXSROBJECTID() { return getToken(DB2zSQLParser.XMLXSROBJECTID, 0); }
		public TerminalNode XSLTRANSFORM() { return getToken(DB2zSQLParser.XSLTRANSFORM, 0); }
		public TerminalNode YEAR() { return getToken(DB2zSQLParser.YEAR, 0); }
		public ScalarFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scalarFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterScalarFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitScalarFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitScalarFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ScalarFunctionContext scalarFunction() throws RecognitionException {
		ScalarFunctionContext _localctx = new ScalarFunctionContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_scalarFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4584);
			_la = _input.LA(1);
			if ( !(((((_la - 58)) & ~0x3f) == 0 && ((1L << (_la - 58)) & ((1L << (CHAR - 58)) | (1L << (CONCAT - 58)) | (1L << (CONTAINS - 58)) | (1L << (DAY - 58)) | (1L << (DAYS - 58)) | (1L << (DOUBLE - 58)))) != 0) || ((((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & ((1L << (HOUR - 140)) | (1L << (INSERT - 140)) | (1L << (LEFT - 140)) | (1L << (MICROSECOND - 140)) | (1L << (MONTH - 140)))) != 0) || ((((_la - 236)) & ~0x3f) == 0 && ((1L << (_la - 236)) & ((1L << (REPEAT - 236)) | (1L << (RIGHT - 236)) | (1L << (SECOND - 236)) | (1L << (TRUNCATE - 236)))) != 0) || ((((_la - 300)) & ~0x3f) == 0 && ((1L << (_la - 300)) & ((1L << (VALUE - 300)) | (1L << (XMLNAMESPACES - 300)) | (1L << (YEAR - 300)))) != 0) || ((((_la - 568)) & ~0x3f) == 0 && ((1L << (_la - 568)) & ((1L << (ABS - 568)) | (1L << (ABSVAL - 568)) | (1L << (ACOS - 568)) | (1L << (ADD_DAYS - 568)) | (1L << (ADD_MONTHS - 568)) | (1L << (ARRAY_DELETE - 568)) | (1L << (ARRAY_FIRST - 568)) | (1L << (ARRAY_LAST - 568)) | (1L << (ARRAY_NEXT - 568)) | (1L << (ARRAY_PRIOR - 568)) | (1L << (ARRAY_TRIM - 568)) | (1L << (ASCII - 568)) | (1L << (ASCII_CHR - 568)) | (1L << (ASCIISTR - 568)) | (1L << (ASCII_STR - 568)) | (1L << (ASIN - 568)) | (1L << (ATAN - 568)) | (1L << (ATAN2 - 568)) | (1L << (ATANH - 568)) | (1L << (BIGINT - 568)) | (1L << (BINARY - 568)) | (1L << (BITAND - 568)) | (1L << (BITANDNOT - 568)) | (1L << (BITNOT - 568)) | (1L << (BITOR - 568)) | (1L << (BITXOR - 568)) | (1L << (BLOB - 568)) | (1L << (BTRIM - 568)) | (1L << (CARDINALITY - 568)) | (1L << (CCSID_ENCODING - 568)) | (1L << (CEIL - 568)) | (1L << (CEILING - 568)) | (1L << (CHAR9 - 568)) | (1L << (CHARACTER_LENGTH - 568)) | (1L << (CHAR_LENGTH - 568)) | (1L << (CHR - 568)) | (1L << (CLOB - 568)) | (1L << (COALESCE - 568)) | (1L << (COLLATION_KEY - 568)) | (1L << (COMPARE_DECFLOAT - 568)) | (1L << (COS - 568)) | (1L << (COSH - 568)) | (1L << (DATE - 568)) | (1L << (DAYOFMONTH - 568)) | (1L << (DAYOFWEEK - 568)) | (1L << (DAYOFWEEK_ISO - 568)) | (1L << (DAYOFYEAR - 568)) | (1L << (DAYS_BETWEEN - 568)) | (1L << (DBCLOB - 568)) | (1L << (DEC - 568)) | (1L << (DECFLOAT - 568)) | (1L << (DECFLOAT_FORMAT - 568)) | (1L << (DECFLOAT_SORTKEY - 568)) | (1L << (DECIMAL - 568)) | (1L << (DECODE - 568)) | (1L << (DECRYPT_BINARY - 568)) | (1L << (DECRYPT_BIT - 568)) | (1L << (DECRYPT_CHAR - 568)) | (1L << (DECRYPT_DATAKEY_BIGINT - 568)) | (1L << (DECRYPT_DATAKEY_BIT - 568)) | (1L << (DECRYPT_DATAKEY_CLOB - 568)) | (1L << (DECRYPT_DATAKEY_DBCLOB - 568)) | (1L << (DECRYPT_DATAKEY_DECIMAL - 568)) | (1L << (DECRYPT_DATAKEY_INTEGER - 568)))) != 0) || ((((_la - 632)) & ~0x3f) == 0 && ((1L << (_la - 632)) & ((1L << (DECRYPT_DATAKEY_VARCHAR - 632)) | (1L << (DECRYPT_DATAKEY_VARGRAPHIC - 632)) | (1L << (DECRYPT_DB - 632)) | (1L << (DEGREES - 632)) | (1L << (DIFFERENCE - 632)) | (1L << (DIGITS - 632)) | (1L << (DOUBLE_PRECISION - 632)) | (1L << (DSN_XMLVALIDATE - 632)) | (1L << (EBCDIC_CHR - 632)) | (1L << (EBCDIC_STR - 632)) | (1L << (ENCRYPT_DATAKEY - 632)) | (1L << (ENCRYPT_TDES - 632)) | (1L << (EXP - 632)) | (1L << (EXTRACT - 632)) | (1L << (FLOAT - 632)) | (1L << (FLOOR - 632)) | (1L << (GENERATE_UNIQUE - 632)) | (1L << (GENERATE_UNIQUE_BINARY - 632)) | (1L << (GETHINT - 632)) | (1L << (GETVARIABLE - 632)) | (1L << (GRAPHIC - 632)) | (1L << (GREATEST - 632)) | (1L << (HASH - 632)) | (1L << (HASH_CRC32 - 632)) | (1L << (HASH_MD5 - 632)) | (1L << (HASH_SHA1 - 632)) | (1L << (HASH_SHA256 - 632)) | (1L << (HEX - 632)) | (1L << (IDENTITY_VAL_LOCAL - 632)) | (1L << (IFNULL - 632)) | (1L << (INSTR - 632)) | (1L << (INT - 632)) | (1L << (INTEGER - 632)) | (1L << (JULIAN_DAY - 632)) | (1L << (LAST_DAY - 632)) | (1L << (LCASE - 632)) | (1L << (LEAST - 632)) | (1L << (LENGTH - 632)) | (1L << (LN - 632)) | (1L << (LOCATE - 632)) | (1L << (LOCATE_IN_STRING - 632)) | (1L << (LOG10 - 632)) | (1L << (LOWER - 632)) | (1L << (LPAD - 632)) | (1L << (LTRIM - 632)) | (1L << (MAX_CARDINALITY - 632)) | (1L << (MIDNIGHT_SECONDS - 632)) | (1L << (MINUTE - 632)) | (1L << (MOD - 632)) | (1L << (MONTHS_BETWEEN - 632)) | (1L << (MQREAD - 632)) | (1L << (MQREADCLOB - 632)) | (1L << (MQRECEIVE - 632)) | (1L << (MQRECEIVECLOB - 632)) | (1L << (MQSEND - 632)) | (1L << (MULTIPLY_ALT - 632)) | (1L << (NEXT_DAY - 632)) | (1L << (NEXT_MONTH - 632)) | (1L << (NORMALIZE_DECFLOAT - 632)) | (1L << (NORMALIZE_STRING - 632)) | (1L << (NULLIF - 632)) | (1L << (NVL - 632)))) != 0) || ((((_la - 696)) & ~0x3f) == 0 && ((1L << (_la - 696)) & ((1L << (OVERLAY - 696)) | (1L << (PACK - 696)) | (1L << (POSITION - 696)) | (1L << (POSSTR - 696)) | (1L << (POW - 696)) | (1L << (POWER - 696)) | (1L << (QUANTIZE - 696)) | (1L << (QUARTER - 696)) | (1L << (RADIANS - 696)) | (1L << (RAISE_ERROR - 696)) | (1L << (RAND - 696)) | (1L << (RANDOM - 696)) | (1L << (REAL - 696)) | (1L << (REGEXP_COUNT - 696)) | (1L << (REGEXP_INSTR - 696)) | (1L << (REGEXP_LIKE - 696)) | (1L << (REGEXP_REPLACE - 696)) | (1L << (REGEXP_SUBSTR - 696)) | (1L << (REPLACE - 696)) | (1L << (RID - 696)) | (1L << (ROUND - 696)) | (1L << (ROUND_TIMESTAMP - 696)) | (1L << (ROWID - 696)) | (1L << (RPAD - 696)) | (1L << (RTRIM - 696)) | (1L << (SCORE - 696)) | (1L << (SIGN - 696)) | (1L << (SIN - 696)) | (1L << (SINH - 696)) | (1L << (SMALLINT - 696)) | (1L << (SOAPHTTPC - 696)) | (1L << (SOAPHTTPNC - 696)) | (1L << (SOAPHTTPNV - 696)) | (1L << (SOAPHTTPV - 696)) | (1L << (SOUNDEX - 696)) | (1L << (SPACE - 696)) | (1L << (SQRT - 696)) | (1L << (STRIP - 696)) | (1L << (STRLEFT - 696)) | (1L << (STRPOS - 696)) | (1L << (STRRIGHT - 696)) | (1L << (SUBSTR - 696)) | (1L << (SUBSTRING - 696)) | (1L << (TAN - 696)) | (1L << (TANH - 696)) | (1L << (TIME - 696)) | (1L << (TIMESTAMP - 696)) | (1L << (TIMESTAMPADD - 696)) | (1L << (TIMESTAMPDIFF - 696)) | (1L << (TIMESTAMP_FORMAT - 696)) | (1L << (TIMESTAMP_ISO - 696)) | (1L << (TIMESTAMP_TZ - 696)) | (1L << (TO_CHAR - 696)) | (1L << (TO_CLOB - 696)) | (1L << (TO_DATE - 696)) | (1L << (TO_NUMBER - 696)) | (1L << (TOTALORDER - 696)) | (1L << (TO_TIMESTAMP - 696)) | (1L << (TRANSLATE - 696)) | (1L << (TRIM - 696)) | (1L << (TRIM_ARRAY - 696)) | (1L << (TRUNC - 696)) | (1L << (TRUNC_TIMESTAMP - 696)) | (1L << (UCASE - 696)))) != 0) || ((((_la - 760)) & ~0x3f) == 0 && ((1L << (_la - 760)) & ((1L << (UNICODE - 760)) | (1L << (UNICODE_STR - 760)) | (1L << (UNISTR - 760)) | (1L << (UPPER - 760)) | (1L << (VARBINARY - 760)) | (1L << (VARCHAR - 760)) | (1L << (VARCHAR9 - 760)) | (1L << (VARCHAR_BIT_FORMAT - 760)) | (1L << (VARCHAR_FORMAT - 760)) | (1L << (VARGRAPHIC - 760)) | (1L << (VERIFY_GROUP_FOR_USER - 760)) | (1L << (VERIFY_ROLE_FOR_USER - 760)) | (1L << (VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER - 760)) | (1L << (WEEK - 760)) | (1L << (WEEK_ISO - 760)) | (1L << (WRAP - 760)) | (1L << (XMLATTRIBUTES - 760)) | (1L << (XMLCOMMENT - 760)) | (1L << (XMLCONCAT - 760)) | (1L << (XMLDOCUMENT - 760)) | (1L << (XMLELEMENT - 760)) | (1L << (XMLFOREST - 760)) | (1L << (XMLMODIFY - 760)) | (1L << (XMLPARSE - 760)) | (1L << (XMLPI - 760)) | (1L << (XMLQUERY - 760)) | (1L << (XMLSERIALIZE - 760)) | (1L << (XMLTEXT - 760)) | (1L << (XMLXSROBJECTID - 760)) | (1L << (XSLTRANSFORM - 760)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableFunctionContext extends ParserRuleContext {
		public TerminalNode ADMIN_TASK_LIST() { return getToken(DB2zSQLParser.ADMIN_TASK_LIST, 0); }
		public TerminalNode ADMIN_TASK_OUTPUT() { return getToken(DB2zSQLParser.ADMIN_TASK_OUTPUT, 0); }
		public TerminalNode ADMIN_TASK_STATUS() { return getToken(DB2zSQLParser.ADMIN_TASK_STATUS, 0); }
		public TerminalNode BLOCKING_THREADS() { return getToken(DB2zSQLParser.BLOCKING_THREADS, 0); }
		public TerminalNode MQREADALL() { return getToken(DB2zSQLParser.MQREADALL, 0); }
		public TerminalNode MQREADALLCLOB() { return getToken(DB2zSQLParser.MQREADALLCLOB, 0); }
		public TerminalNode MQRECEIVEALL() { return getToken(DB2zSQLParser.MQRECEIVEALL, 0); }
		public TerminalNode MQRECEIVEALLCLOB() { return getToken(DB2zSQLParser.MQRECEIVEALLCLOB, 0); }
		public TerminalNode XMLTABLE() { return getToken(DB2zSQLParser.XMLTABLE, 0); }
		public TableFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTableFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTableFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTableFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableFunctionContext tableFunction() throws RecognitionException {
		TableFunctionContext _localctx = new TableFunctionContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_tableFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4586);
			_la = _input.LA(1);
			if ( !(((((_la - 829)) & ~0x3f) == 0 && ((1L << (_la - 829)) & ((1L << (ADMIN_TASK_LIST - 829)) | (1L << (ADMIN_TASK_OUTPUT - 829)) | (1L << (ADMIN_TASK_STATUS - 829)) | (1L << (BLOCKING_THREADS - 829)) | (1L << (MQREADALL - 829)) | (1L << (MQREADALLCLOB - 829)) | (1L << (MQRECEIVEALL - 829)) | (1L << (MQRECEIVEALLCLOB - 829)) | (1L << (XMLTABLE - 829)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SpecialRegisterContext extends ParserRuleContext {
		public TerminalNode CURRENT_ACCELERATOR() { return getToken(DB2zSQLParser.CURRENT_ACCELERATOR, 0); }
		public TerminalNode CURRENT_APPLICATION_COMPATIBILITY() { return getToken(DB2zSQLParser.CURRENT_APPLICATION_COMPATIBILITY, 0); }
		public TerminalNode CURRENT_APPLICATION_ENCODING_SCHEME() { return getToken(DB2zSQLParser.CURRENT_APPLICATION_ENCODING_SCHEME, 0); }
		public TerminalNode CURRENT_CLIENT_ACCTNG() { return getToken(DB2zSQLParser.CURRENT_CLIENT_ACCTNG, 0); }
		public TerminalNode CURRENT_CLIENT_APPLNAME() { return getToken(DB2zSQLParser.CURRENT_CLIENT_APPLNAME, 0); }
		public TerminalNode CURRENT_CLIENT_CORR_TOKEN() { return getToken(DB2zSQLParser.CURRENT_CLIENT_CORR_TOKEN, 0); }
		public TerminalNode CURRENT_CLIENT_USERID() { return getToken(DB2zSQLParser.CURRENT_CLIENT_USERID, 0); }
		public TerminalNode CURRENT_CLIENT_WRKSTNNAME() { return getToken(DB2zSQLParser.CURRENT_CLIENT_WRKSTNNAME, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(DB2zSQLParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_DEBUG_MODE() { return getToken(DB2zSQLParser.CURRENT_DEBUG_MODE, 0); }
		public TerminalNode CURRENT_DECFLOAT_ROUNDING_MODE() { return getToken(DB2zSQLParser.CURRENT_DECFLOAT_ROUNDING_MODE, 0); }
		public TerminalNode CURRENT_DEGREE() { return getToken(DB2zSQLParser.CURRENT_DEGREE, 0); }
		public TerminalNode CURRENT_EXPLAIN_MODE() { return getToken(DB2zSQLParser.CURRENT_EXPLAIN_MODE, 0); }
		public TerminalNode CURRENT_GET_ACCEL_ARCHIVE() { return getToken(DB2zSQLParser.CURRENT_GET_ACCEL_ARCHIVE, 0); }
		public TerminalNode CURRENT_LOCALE_LC_CTYPE() { return getToken(DB2zSQLParser.CURRENT_LOCALE_LC_CTYPE, 0); }
		public TerminalNode CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION() { return getToken(DB2zSQLParser.CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION, 0); }
		public TerminalNode CURRENT_MEMBER() { return getToken(DB2zSQLParser.CURRENT_MEMBER, 0); }
		public TerminalNode CURRENT_OPTIMIZATION_HINT() { return getToken(DB2zSQLParser.CURRENT_OPTIMIZATION_HINT, 0); }
		public TerminalNode CURRENT_PACKAGE_PATH() { return getToken(DB2zSQLParser.CURRENT_PACKAGE_PATH, 0); }
		public TerminalNode CURRENT_PACKAGESET() { return getToken(DB2zSQLParser.CURRENT_PACKAGESET, 0); }
		public TerminalNode CURRENT_PATH() { return getToken(DB2zSQLParser.CURRENT_PATH, 0); }
		public TerminalNode CURRENT_PRECISION() { return getToken(DB2zSQLParser.CURRENT_PRECISION, 0); }
		public TerminalNode CURRENT_QUERY_ACCELERATION() { return getToken(DB2zSQLParser.CURRENT_QUERY_ACCELERATION, 0); }
		public TerminalNode CURRENT_QUERY_ACCELERATION_WAITFORDATA() { return getToken(DB2zSQLParser.CURRENT_QUERY_ACCELERATION_WAITFORDATA, 0); }
		public TerminalNode CURRENT_REFRESH_AGE() { return getToken(DB2zSQLParser.CURRENT_REFRESH_AGE, 0); }
		public TerminalNode CURRENT_ROUTINE_VERSION() { return getToken(DB2zSQLParser.CURRENT_ROUTINE_VERSION, 0); }
		public TerminalNode CURRENT_RULES() { return getToken(DB2zSQLParser.CURRENT_RULES, 0); }
		public TerminalNode CURRENT_SCHEMA() { return getToken(DB2zSQLParser.CURRENT_SCHEMA, 0); }
		public TerminalNode CURRENT_SERVER() { return getToken(DB2zSQLParser.CURRENT_SERVER, 0); }
		public TerminalNode CURRENT_SQLID() { return getToken(DB2zSQLParser.CURRENT_SQLID, 0); }
		public TerminalNode CURRENT_TEMPORAL_BUSINESS_TIME() { return getToken(DB2zSQLParser.CURRENT_TEMPORAL_BUSINESS_TIME, 0); }
		public TerminalNode CURRENT_TEMPORAL_SYSTEM_TIME() { return getToken(DB2zSQLParser.CURRENT_TEMPORAL_SYSTEM_TIME, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(DB2zSQLParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(DB2zSQLParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_TIME_ZONE() { return getToken(DB2zSQLParser.CURRENT_TIME_ZONE, 0); }
		public TerminalNode ENCRYPTION_PASSWORD() { return getToken(DB2zSQLParser.ENCRYPTION_PASSWORD, 0); }
		public TerminalNode SESSION_TIME_ZONE() { return getToken(DB2zSQLParser.SESSION_TIME_ZONE, 0); }
		public TerminalNode SESSION_USER() { return getToken(DB2zSQLParser.SESSION_USER, 0); }
		public TerminalNode USER() { return getToken(DB2zSQLParser.USER, 0); }
		public SpecialRegisterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_specialRegister; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSpecialRegister(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSpecialRegister(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSpecialRegister(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SpecialRegisterContext specialRegister() throws RecognitionException {
		SpecialRegisterContext _localctx = new SpecialRegisterContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_specialRegister);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4588);
			_la = _input.LA(1);
			if ( !(((((_la - 790)) & ~0x3f) == 0 && ((1L << (_la - 790)) & ((1L << (CURRENT_ACCELERATOR - 790)) | (1L << (CURRENT_APPLICATION_COMPATIBILITY - 790)) | (1L << (CURRENT_APPLICATION_ENCODING_SCHEME - 790)) | (1L << (CURRENT_CLIENT_ACCTNG - 790)) | (1L << (CURRENT_CLIENT_APPLNAME - 790)) | (1L << (CURRENT_CLIENT_CORR_TOKEN - 790)) | (1L << (CURRENT_CLIENT_USERID - 790)) | (1L << (CURRENT_CLIENT_WRKSTNNAME - 790)) | (1L << (CURRENT_DATE - 790)) | (1L << (CURRENT_DEBUG_MODE - 790)) | (1L << (CURRENT_DECFLOAT_ROUNDING_MODE - 790)) | (1L << (CURRENT_DEGREE - 790)) | (1L << (CURRENT_EXPLAIN_MODE - 790)) | (1L << (CURRENT_GET_ACCEL_ARCHIVE - 790)) | (1L << (CURRENT_LOCALE_LC_CTYPE - 790)) | (1L << (CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION - 790)) | (1L << (CURRENT_MEMBER - 790)) | (1L << (CURRENT_OPTIMIZATION_HINT - 790)) | (1L << (CURRENT_PACKAGE_PATH - 790)) | (1L << (CURRENT_PACKAGESET - 790)) | (1L << (CURRENT_PATH - 790)) | (1L << (CURRENT_PRECISION - 790)) | (1L << (CURRENT_QUERY_ACCELERATION - 790)) | (1L << (CURRENT_QUERY_ACCELERATION_WAITFORDATA - 790)) | (1L << (CURRENT_REFRESH_AGE - 790)) | (1L << (CURRENT_ROUTINE_VERSION - 790)) | (1L << (CURRENT_RULES - 790)) | (1L << (CURRENT_SCHEMA - 790)) | (1L << (CURRENT_SERVER - 790)) | (1L << (CURRENT_SQLID - 790)) | (1L << (CURRENT_TEMPORAL_BUSINESS_TIME - 790)) | (1L << (CURRENT_TEMPORAL_SYSTEM_TIME - 790)) | (1L << (CURRENT_TIME - 790)) | (1L << (CURRENT_TIMESTAMP - 790)) | (1L << (CURRENT_TIME_ZONE - 790)) | (1L << (ENCRYPTION_PASSWORD - 790)) | (1L << (SESSION_TIME_ZONE - 790)) | (1L << (SESSION_USER - 790)) | (1L << (USER - 790)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmltableFunctionSpecificationContext extends ParserRuleContext {
		public TerminalNode XMLTABLE() { return getToken(DB2zSQLParser.XMLTABLE, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public RowXqueryExpressionConstantContext rowXqueryExpressionConstant() {
			return getRuleContext(RowXqueryExpressionConstantContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public XmlnamespacesDeclarationContext xmlnamespacesDeclaration() {
			return getRuleContext(XmlnamespacesDeclarationContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public TerminalNode PASSING() { return getToken(DB2zSQLParser.PASSING, 0); }
		public List<RowXqueryArgumentContext> rowXqueryArgument() {
			return getRuleContexts(RowXqueryArgumentContext.class);
		}
		public RowXqueryArgumentContext rowXqueryArgument(int i) {
			return getRuleContext(RowXqueryArgumentContext.class,i);
		}
		public TerminalNode COLUMNS() { return getToken(DB2zSQLParser.COLUMNS, 0); }
		public List<XmlTableRegularColumnDefinitionContext> xmlTableRegularColumnDefinition() {
			return getRuleContexts(XmlTableRegularColumnDefinitionContext.class);
		}
		public XmlTableRegularColumnDefinitionContext xmlTableRegularColumnDefinition(int i) {
			return getRuleContext(XmlTableRegularColumnDefinitionContext.class,i);
		}
		public List<XmlTableOrdinalityColumnDefinitionContext> xmlTableOrdinalityColumnDefinition() {
			return getRuleContexts(XmlTableOrdinalityColumnDefinitionContext.class);
		}
		public XmlTableOrdinalityColumnDefinitionContext xmlTableOrdinalityColumnDefinition(int i) {
			return getRuleContext(XmlTableOrdinalityColumnDefinitionContext.class,i);
		}
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public TerminalNode REF() { return getToken(DB2zSQLParser.REF, 0); }
		public XmltableFunctionSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmltableFunctionSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterXmltableFunctionSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitXmltableFunctionSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitXmltableFunctionSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmltableFunctionSpecificationContext xmltableFunctionSpecification() throws RecognitionException {
		XmltableFunctionSpecificationContext _localctx = new XmltableFunctionSpecificationContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_xmltableFunctionSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4590);
			match(XMLTABLE);
			setState(4591);
			match(LPAREN);
			setState(4595);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==XMLNAMESPACES) {
				{
				setState(4592);
				xmlnamespacesDeclaration();
				setState(4593);
				match(COMMA);
				}
			}

			setState(4597);
			rowXqueryExpressionConstant();
			setState(4607);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PASSING) {
				{
				setState(4598);
				match(PASSING);
				setState(4601);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,529,_ctx) ) {
				case 1:
					{
					setState(4599);
					match(BY);
					setState(4600);
					match(REF);
					}
					break;
				}
				setState(4603);
				rowXqueryArgument();
				{
				setState(4604);
				match(COMMA);
				setState(4605);
				rowXqueryArgument();
				}
				}
			}

			setState(4624);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMNS) {
				{
				setState(4609);
				match(COLUMNS);
				setState(4612);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,531,_ctx) ) {
				case 1:
					{
					setState(4610);
					xmlTableRegularColumnDefinition();
					}
					break;
				case 2:
					{
					setState(4611);
					xmlTableOrdinalityColumnDefinition();
					}
					break;
				}
				setState(4621);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4614);
					match(COMMA);
					setState(4617);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,532,_ctx) ) {
					case 1:
						{
						setState(4615);
						xmlTableRegularColumnDefinition();
						}
						break;
					case 2:
						{
						setState(4616);
						xmlTableOrdinalityColumnDefinition();
						}
						break;
					}
					}
					}
					setState(4623);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(4626);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowXqueryExpressionConstantContext extends ParserRuleContext {
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public RowXqueryExpressionConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowXqueryExpressionConstant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRowXqueryExpressionConstant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRowXqueryExpressionConstant(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRowXqueryExpressionConstant(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowXqueryExpressionConstantContext rowXqueryExpressionConstant() throws RecognitionException {
		RowXqueryExpressionConstantContext _localctx = new RowXqueryExpressionConstantContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_rowXqueryExpressionConstant);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4628);
			match(NONNUMERICLITERAL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowXqueryArgumentContext extends ParserRuleContext {
		public XqueryContextItemExpressionContext xqueryContextItemExpression() {
			return getRuleContext(XqueryContextItemExpressionContext.class,0);
		}
		public XqueryVariableExpressionContext xqueryVariableExpression() {
			return getRuleContext(XqueryVariableExpressionContext.class,0);
		}
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public RowXqueryArgumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowXqueryArgument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRowXqueryArgument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRowXqueryArgument(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRowXqueryArgument(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowXqueryArgumentContext rowXqueryArgument() throws RecognitionException {
		RowXqueryArgumentContext _localctx = new RowXqueryArgumentContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_rowXqueryArgument);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4635);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,535,_ctx) ) {
			case 1:
				{
				setState(4630);
				xqueryContextItemExpression();
				}
				break;
			case 2:
				{
				{
				setState(4631);
				xqueryVariableExpression();
				setState(4632);
				match(AS);
				setState(4633);
				identifier();
				}
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XqueryContextItemExpressionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public XqueryContextItemExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xqueryContextItemExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterXqueryContextItemExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitXqueryContextItemExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitXqueryContextItemExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XqueryContextItemExpressionContext xqueryContextItemExpression() throws RecognitionException {
		XqueryContextItemExpressionContext _localctx = new XqueryContextItemExpressionContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_xqueryContextItemExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4637);
			expression();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XqueryVariableExpressionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public XqueryVariableExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xqueryVariableExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterXqueryVariableExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitXqueryVariableExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitXqueryVariableExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XqueryVariableExpressionContext xqueryVariableExpression() throws RecognitionException {
		XqueryVariableExpressionContext _localctx = new XqueryVariableExpressionContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_xqueryVariableExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4639);
			expression();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlTableRegularColumnDefinitionContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public DefaultClauseContext defaultClause() {
			return getRuleContext(DefaultClauseContext.class,0);
		}
		public TerminalNode PATH() { return getToken(DB2zSQLParser.PATH, 0); }
		public ColumnXqueryExpressionConstantContext columnXqueryExpressionConstant() {
			return getRuleContext(ColumnXqueryExpressionConstantContext.class,0);
		}
		public XmlTableRegularColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlTableRegularColumnDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterXmlTableRegularColumnDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitXmlTableRegularColumnDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitXmlTableRegularColumnDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlTableRegularColumnDefinitionContext xmlTableRegularColumnDefinition() throws RecognitionException {
		XmlTableRegularColumnDefinitionContext _localctx = new XmlTableRegularColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_xmlTableRegularColumnDefinition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4641);
			columnName();
			setState(4642);
			dataType();
			setState(4646);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFAULT:
			case WITH:
				{
				setState(4643);
				defaultClause();
				}
				break;
			case PATH:
				{
				{
				setState(4644);
				match(PATH);
				setState(4645);
				columnXqueryExpressionConstant();
				}
				}
				break;
			case RPAREN:
			case COMMA:
				break;
			default:
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaultClauseContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(DB2zSQLParser.DEFAULT, 0); }
		public DefaultClauseAllowablesContext defaultClauseAllowables() {
			return getRuleContext(DefaultClauseAllowablesContext.class,0);
		}
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public DistinctTypeCastFunctionNameContext distinctTypeCastFunctionName() {
			return getRuleContext(DistinctTypeCastFunctionNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public DefaultClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDefaultClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDefaultClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDefaultClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefaultClauseContext defaultClause() throws RecognitionException {
		DefaultClauseContext _localctx = new DefaultClauseContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_defaultClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4649);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4648);
				match(WITH);
				}
			}

			setState(4651);
			match(DEFAULT);
			setState(4658);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,538,_ctx) ) {
			case 1:
				{
				setState(4652);
				defaultClauseAllowables();
				}
				break;
			case 2:
				{
				{
				setState(4653);
				distinctTypeCastFunctionName();
				setState(4654);
				match(LPAREN);
				setState(4655);
				defaultClauseAllowables();
				setState(4656);
				match(RPAREN);
				}
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaultClause1Context extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(DB2zSQLParser.DEFAULT, 0); }
		public DefaultClauseAllowablesContext defaultClauseAllowables() {
			return getRuleContext(DefaultClauseAllowablesContext.class,0);
		}
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public DefaultClause1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultClause1; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDefaultClause1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDefaultClause1(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDefaultClause1(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefaultClause1Context defaultClause1() throws RecognitionException {
		DefaultClause1Context _localctx = new DefaultClause1Context(_ctx, getState());
		enterRule(_localctx, 432, RULE_defaultClause1);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4661);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4660);
				match(WITH);
				}
			}

			setState(4663);
			match(DEFAULT);
			setState(4664);
			defaultClauseAllowables();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaultClause2Context extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(DB2zSQLParser.DEFAULT, 0); }
		public DefaultClauseAllowablesContext defaultClauseAllowables() {
			return getRuleContext(DefaultClauseAllowablesContext.class,0);
		}
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public DistinctTypeCastFunctionNameContext distinctTypeCastFunctionName() {
			return getRuleContext(DistinctTypeCastFunctionNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public DefaultClause2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultClause2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDefaultClause2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDefaultClause2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDefaultClause2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefaultClause2Context defaultClause2() throws RecognitionException {
		DefaultClause2Context _localctx = new DefaultClause2Context(_ctx, getState());
		enterRule(_localctx, 434, RULE_defaultClause2);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4667);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4666);
				match(WITH);
				}
			}

			setState(4669);
			match(DEFAULT);
			setState(4676);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,541,_ctx) ) {
			case 1:
				{
				setState(4670);
				defaultClauseAllowables();
				}
				break;
			case 2:
				{
				{
				setState(4671);
				distinctTypeCastFunctionName();
				setState(4672);
				match(LPAREN);
				setState(4673);
				defaultClauseAllowables();
				setState(4674);
				match(RPAREN);
				}
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaultClauseAllowablesContext extends ParserRuleContext {
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public TerminalNode SESSION_USER() { return getToken(DB2zSQLParser.SESSION_USER, 0); }
		public TerminalNode USER() { return getToken(DB2zSQLParser.USER, 0); }
		public TerminalNode CURRENT_SQLID() { return getToken(DB2zSQLParser.CURRENT_SQLID, 0); }
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public DefaultClauseAllowablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultClauseAllowables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDefaultClauseAllowables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDefaultClauseAllowables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDefaultClauseAllowables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefaultClauseAllowablesContext defaultClauseAllowables() throws RecognitionException {
		DefaultClauseAllowablesContext _localctx = new DefaultClauseAllowablesContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_defaultClauseAllowables);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4683);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NONNUMERICLITERAL:
			case INTEGERLITERAL:
			case NUMERICLITERAL:
				{
				setState(4678);
				literal();
				}
				break;
			case SESSION_USER:
				{
				setState(4679);
				match(SESSION_USER);
				}
				break;
			case USER:
				{
				setState(4680);
				match(USER);
				}
				break;
			case CURRENT_SQLID:
				{
				setState(4681);
				match(CURRENT_SQLID);
				}
				break;
			case NULL:
				{
				setState(4682);
				match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DistinctTypeCastFunctionNameContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public DistinctTypeCastFunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_distinctTypeCastFunctionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDistinctTypeCastFunctionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDistinctTypeCastFunctionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDistinctTypeCastFunctionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DistinctTypeCastFunctionNameContext distinctTypeCastFunctionName() throws RecognitionException {
		DistinctTypeCastFunctionNameContext _localctx = new DistinctTypeCastFunctionNameContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_distinctTypeCastFunctionName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4685);
			identifier();
			setState(4686);
			match(DOT);
			setState(4687);
			identifier();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnXqueryExpressionConstantContext extends ParserRuleContext {
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public ColumnXqueryExpressionConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnXqueryExpressionConstant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterColumnXqueryExpressionConstant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitColumnXqueryExpressionConstant(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitColumnXqueryExpressionConstant(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnXqueryExpressionConstantContext columnXqueryExpressionConstant() throws RecognitionException {
		ColumnXqueryExpressionConstantContext _localctx = new ColumnXqueryExpressionConstantContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_columnXqueryExpressionConstant);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4689);
			match(NONNUMERICLITERAL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlTableOrdinalityColumnDefinitionContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode ORDINALITY() { return getToken(DB2zSQLParser.ORDINALITY, 0); }
		public XmlTableOrdinalityColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlTableOrdinalityColumnDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterXmlTableOrdinalityColumnDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitXmlTableOrdinalityColumnDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitXmlTableOrdinalityColumnDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlTableOrdinalityColumnDefinitionContext xmlTableOrdinalityColumnDefinition() throws RecognitionException {
		XmlTableOrdinalityColumnDefinitionContext _localctx = new XmlTableOrdinalityColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_xmlTableOrdinalityColumnDefinition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4691);
			columnName();
			setState(4692);
			match(FOR);
			setState(4693);
			match(ORDINALITY);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlnamespacesDeclarationContext extends ParserRuleContext {
		public List<XmlnamespacesFunctionSpecificationContext> xmlnamespacesFunctionSpecification() {
			return getRuleContexts(XmlnamespacesFunctionSpecificationContext.class);
		}
		public XmlnamespacesFunctionSpecificationContext xmlnamespacesFunctionSpecification(int i) {
			return getRuleContext(XmlnamespacesFunctionSpecificationContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public XmlnamespacesDeclarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlnamespacesDeclaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterXmlnamespacesDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitXmlnamespacesDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitXmlnamespacesDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlnamespacesDeclarationContext xmlnamespacesDeclaration() throws RecognitionException {
		XmlnamespacesDeclarationContext _localctx = new XmlnamespacesDeclarationContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_xmlnamespacesDeclaration);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4695);
			xmlnamespacesFunctionSpecification();
			setState(4700);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,543,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4696);
					match(COMMA);
					setState(4697);
					xmlnamespacesFunctionSpecification();
					}
					} 
				}
				setState(4702);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,543,_ctx);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlnamespacesFunctionSpecificationContext extends ParserRuleContext {
		public TerminalNode XMLNAMESPACES() { return getToken(DB2zSQLParser.XMLNAMESPACES, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<XmlnamespacesFunctionArgumentsContext> xmlnamespacesFunctionArguments() {
			return getRuleContexts(XmlnamespacesFunctionArgumentsContext.class);
		}
		public XmlnamespacesFunctionArgumentsContext xmlnamespacesFunctionArguments(int i) {
			return getRuleContext(XmlnamespacesFunctionArgumentsContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public XmlnamespacesFunctionSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlnamespacesFunctionSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterXmlnamespacesFunctionSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitXmlnamespacesFunctionSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitXmlnamespacesFunctionSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlnamespacesFunctionSpecificationContext xmlnamespacesFunctionSpecification() throws RecognitionException {
		XmlnamespacesFunctionSpecificationContext _localctx = new XmlnamespacesFunctionSpecificationContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_xmlnamespacesFunctionSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4703);
			match(XMLNAMESPACES);
			setState(4704);
			match(LPAREN);
			setState(4705);
			xmlnamespacesFunctionArguments();
			setState(4710);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4706);
				match(COMMA);
				setState(4707);
				xmlnamespacesFunctionArguments();
				}
				}
				setState(4712);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4713);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlnamespacesFunctionArgumentsContext extends ParserRuleContext {
		public NamespaceUriContext namespaceUri() {
			return getRuleContext(NamespaceUriContext.class,0);
		}
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public NamespacePrefixContext namespacePrefix() {
			return getRuleContext(NamespacePrefixContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(DB2zSQLParser.DEFAULT, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public XmlnamespacesFunctionArgumentsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlnamespacesFunctionArguments; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterXmlnamespacesFunctionArguments(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitXmlnamespacesFunctionArguments(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitXmlnamespacesFunctionArguments(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlnamespacesFunctionArgumentsContext xmlnamespacesFunctionArguments() throws RecognitionException {
		XmlnamespacesFunctionArgumentsContext _localctx = new XmlnamespacesFunctionArgumentsContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_xmlnamespacesFunctionArguments);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4723);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NONNUMERICLITERAL:
				{
				{
				setState(4715);
				namespaceUri();
				setState(4716);
				match(AS);
				setState(4717);
				namespacePrefix();
				}
				}
				break;
			case DEFAULT:
				{
				{
				setState(4719);
				match(DEFAULT);
				setState(4720);
				namespaceUri();
				}
				}
				break;
			case NO:
				{
				{
				setState(4721);
				match(NO);
				setState(4722);
				match(DEFAULT);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NamespaceUriContext extends ParserRuleContext {
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public NamespaceUriContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_namespaceUri; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterNamespaceUri(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitNamespaceUri(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitNamespaceUri(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NamespaceUriContext namespaceUri() throws RecognitionException {
		NamespaceUriContext _localctx = new NamespaceUriContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_namespaceUri);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4725);
			match(NONNUMERICLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NamespacePrefixContext extends ParserRuleContext {
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public NamespacePrefixContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_namespacePrefix; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterNamespacePrefix(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitNamespacePrefix(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitNamespacePrefix(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NamespacePrefixContext namespacePrefix() throws RecognitionException {
		NamespacePrefixContext _localctx = new NamespacePrefixContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_namespacePrefix);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4727);
			match(NONNUMERICLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TimeZoneSpecificExpressionContext extends ParserRuleContext {
		public List<TimeZoneExpressionSubsetContext> timeZoneExpressionSubset() {
			return getRuleContexts(TimeZoneExpressionSubsetContext.class);
		}
		public TimeZoneExpressionSubsetContext timeZoneExpressionSubset(int i) {
			return getRuleContext(TimeZoneExpressionSubsetContext.class,i);
		}
		public TerminalNode AT() { return getToken(DB2zSQLParser.AT, 0); }
		public TerminalNode LOCAL() { return getToken(DB2zSQLParser.LOCAL, 0); }
		public TerminalNode TIME() { return getToken(DB2zSQLParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(DB2zSQLParser.ZONE, 0); }
		public TimeZoneSpecificExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timeZoneSpecificExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTimeZoneSpecificExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTimeZoneSpecificExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTimeZoneSpecificExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TimeZoneSpecificExpressionContext timeZoneSpecificExpression() throws RecognitionException {
		TimeZoneSpecificExpressionContext _localctx = new TimeZoneSpecificExpressionContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_timeZoneSpecificExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4729);
			timeZoneExpressionSubset();
			setState(4736);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,546,_ctx) ) {
			case 1:
				{
				{
				setState(4730);
				match(AT);
				setState(4731);
				match(LOCAL);
				}
				}
				break;
			case 2:
				{
				{
				setState(4732);
				match(AT);
				setState(4733);
				match(TIME);
				setState(4734);
				match(ZONE);
				setState(4735);
				timeZoneExpressionSubset();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TimeZoneExpressionSubsetContext extends ParserRuleContext {
		public FunctionInvocationContext functionInvocation() {
			return getRuleContext(FunctionInvocationContext.class,0);
		}
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public SpecialRegisterContext specialRegister() {
			return getRuleContext(SpecialRegisterContext.class,0);
		}
		public ScalarFullSelectContext scalarFullSelect() {
			return getRuleContext(ScalarFullSelectContext.class,0);
		}
		public CaseExpressionContext caseExpression() {
			return getRuleContext(CaseExpressionContext.class,0);
		}
		public CastSpecificationContext castSpecification() {
			return getRuleContext(CastSpecificationContext.class,0);
		}
		public TimeZoneExpressionSubsetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timeZoneExpressionSubset; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTimeZoneExpressionSubset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTimeZoneExpressionSubset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTimeZoneExpressionSubset(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TimeZoneExpressionSubsetContext timeZoneExpressionSubset() throws RecognitionException {
		TimeZoneExpressionSubsetContext _localctx = new TimeZoneExpressionSubsetContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_timeZoneExpressionSubset);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4746);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,547,_ctx) ) {
			case 1:
				{
				setState(4738);
				functionInvocation();
				}
				break;
			case 2:
				{
				setState(4739);
				literal();
				}
				break;
			case 3:
				{
				setState(4740);
				columnName();
				}
				break;
			case 4:
				{
				setState(4741);
				hostVariable();
				}
				break;
			case 5:
				{
				setState(4742);
				specialRegister();
				}
				break;
			case 6:
				{
				setState(4743);
				scalarFullSelect();
				}
				break;
			case 7:
				{
				setState(4744);
				caseExpression();
				}
				break;
			case 8:
				{
				setState(4745);
				castSpecification();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseExpressionContext extends ParserRuleContext {
		public TerminalNode CASE() { return getToken(DB2zSQLParser.CASE, 0); }
		public TerminalNode END() { return getToken(DB2zSQLParser.END, 0); }
		public SearchedWhenClauseContext searchedWhenClause() {
			return getRuleContext(SearchedWhenClauseContext.class,0);
		}
		public SimpleWhenClauseContext simpleWhenClause() {
			return getRuleContext(SimpleWhenClauseContext.class,0);
		}
		public TerminalNode ELSE() { return getToken(DB2zSQLParser.ELSE, 0); }
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public ResultExpressionContext resultExpression() {
			return getRuleContext(ResultExpressionContext.class,0);
		}
		public CaseExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCaseExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCaseExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCaseExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseExpressionContext caseExpression() throws RecognitionException {
		CaseExpressionContext _localctx = new CaseExpressionContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_caseExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4748);
			match(CASE);
			setState(4751);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,548,_ctx) ) {
			case 1:
				{
				setState(4749);
				searchedWhenClause();
				}
				break;
			case 2:
				{
				setState(4750);
				simpleWhenClause();
				}
				break;
			}
			setState(4757);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,549,_ctx) ) {
			case 1:
				{
				{
				setState(4753);
				match(ELSE);
				setState(4754);
				match(NULL);
				}
				}
				break;
			case 2:
				{
				{
				setState(4755);
				match(ELSE);
				setState(4756);
				resultExpression();
				}
				}
				break;
			}
			setState(4759);
			match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResultExpressionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ResultExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resultExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterResultExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitResultExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitResultExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResultExpressionContext resultExpression() throws RecognitionException {
		ResultExpressionContext _localctx = new ResultExpressionContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_resultExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4761);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SearchedWhenClauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(DB2zSQLParser.WHEN, 0); }
		public SearchConditionContext searchCondition() {
			return getRuleContext(SearchConditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(DB2zSQLParser.THEN, 0); }
		public ResultExpressionContext resultExpression() {
			return getRuleContext(ResultExpressionContext.class,0);
		}
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public SearchedWhenClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searchedWhenClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSearchedWhenClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSearchedWhenClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSearchedWhenClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SearchedWhenClauseContext searchedWhenClause() throws RecognitionException {
		SearchedWhenClauseContext _localctx = new SearchedWhenClauseContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_searchedWhenClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4763);
			match(WHEN);
			setState(4764);
			searchCondition();
			setState(4765);
			match(THEN);
			setState(4768);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,550,_ctx) ) {
			case 1:
				{
				setState(4766);
				resultExpression();
				}
				break;
			case 2:
				{
				setState(4767);
				match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleWhenClauseContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode WHEN() { return getToken(DB2zSQLParser.WHEN, 0); }
		public TerminalNode THEN() { return getToken(DB2zSQLParser.THEN, 0); }
		public ResultExpressionContext resultExpression() {
			return getRuleContext(ResultExpressionContext.class,0);
		}
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public SimpleWhenClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleWhenClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSimpleWhenClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSimpleWhenClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSimpleWhenClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleWhenClauseContext simpleWhenClause() throws RecognitionException {
		SimpleWhenClauseContext _localctx = new SimpleWhenClauseContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_simpleWhenClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4770);
			expression();
			setState(4771);
			match(WHEN);
			setState(4772);
			expression();
			setState(4773);
			match(THEN);
			setState(4776);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,551,_ctx) ) {
			case 1:
				{
				setState(4774);
				resultExpression();
				}
				break;
			case 2:
				{
				setState(4775);
				match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SearchConditionContext extends ParserRuleContext {
		public List<TerminalNode> NOT() { return getTokens(DB2zSQLParser.NOT); }
		public TerminalNode NOT(int i) {
			return getToken(DB2zSQLParser.NOT, i);
		}
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public List<SearchConditionContext> searchCondition() {
			return getRuleContexts(SearchConditionContext.class);
		}
		public SearchConditionContext searchCondition(int i) {
			return getRuleContext(SearchConditionContext.class,i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public List<TerminalNode> AND() { return getTokens(DB2zSQLParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(DB2zSQLParser.AND, i);
		}
		public List<TerminalNode> OR() { return getTokens(DB2zSQLParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(DB2zSQLParser.OR, i);
		}
		public TerminalNode SELECTIVITY() { return getToken(DB2zSQLParser.SELECTIVITY, 0); }
		public TerminalNode NUMERICLITERAL() { return getToken(DB2zSQLParser.NUMERICLITERAL, 0); }
		public SearchConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searchCondition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSearchCondition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSearchCondition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSearchCondition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SearchConditionContext searchCondition() throws RecognitionException {
		SearchConditionContext _localctx = new SearchConditionContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_searchCondition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4779);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,552,_ctx) ) {
			case 1:
				{
				setState(4778);
				match(NOT);
				}
				break;
			}
			setState(4790);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,554,_ctx) ) {
			case 1:
				{
				{
				setState(4781);
				predicate();
				setState(4784);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SELECTIVITY) {
					{
					setState(4782);
					match(SELECTIVITY);
					setState(4783);
					match(NUMERICLITERAL);
					}
				}

				}
				}
				break;
			case 2:
				{
				{
				setState(4786);
				match(LPAREN);
				setState(4787);
				searchCondition();
				setState(4788);
				match(RPAREN);
				}
				}
				break;
			}
			setState(4805);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR || _la==AND) {
				{
				{
				setState(4792);
				_la = _input.LA(1);
				if ( !(_la==OR || _la==AND) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4794);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,555,_ctx) ) {
				case 1:
					{
					setState(4793);
					match(NOT);
					}
					break;
				}
				setState(4801);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,556,_ctx) ) {
				case 1:
					{
					setState(4796);
					predicate();
					}
					break;
				case 2:
					{
					{
					setState(4797);
					match(LPAREN);
					setState(4798);
					searchCondition();
					setState(4799);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				setState(4807);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckConditionContext extends ParserRuleContext {
		public SearchConditionContext searchCondition() {
			return getRuleContext(SearchConditionContext.class,0);
		}
		public CheckConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkCondition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCheckCondition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCheckCondition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCheckCondition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckConditionContext checkCondition() throws RecognitionException {
		CheckConditionContext _localctx = new CheckConditionContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_checkCondition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4808);
			searchCondition();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PredicateContext extends ParserRuleContext {
		public BasicPredicateContext basicPredicate() {
			return getRuleContext(BasicPredicateContext.class,0);
		}
		public QuantifiedPredicateContext quantifiedPredicate() {
			return getRuleContext(QuantifiedPredicateContext.class,0);
		}
		public ArrayExistsPredicateContext arrayExistsPredicate() {
			return getRuleContext(ArrayExistsPredicateContext.class,0);
		}
		public BetweenPredicateContext betweenPredicate() {
			return getRuleContext(BetweenPredicateContext.class,0);
		}
		public DistinctPredicateContext distinctPredicate() {
			return getRuleContext(DistinctPredicateContext.class,0);
		}
		public ExistsPredicateContext existsPredicate() {
			return getRuleContext(ExistsPredicateContext.class,0);
		}
		public InPredicateContext inPredicate() {
			return getRuleContext(InPredicateContext.class,0);
		}
		public LikePredicateContext likePredicate() {
			return getRuleContext(LikePredicateContext.class,0);
		}
		public NullPredicateContext nullPredicate() {
			return getRuleContext(NullPredicateContext.class,0);
		}
		public XmlExistsPredicateContext xmlExistsPredicate() {
			return getRuleContext(XmlExistsPredicateContext.class,0);
		}
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PredicateContext predicate() throws RecognitionException {
		PredicateContext _localctx = new PredicateContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_predicate);
		try {
			setState(4820);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,558,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4810);
				basicPredicate();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4811);
				quantifiedPredicate();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4812);
				arrayExistsPredicate();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4813);
				betweenPredicate();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4814);
				distinctPredicate();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4815);
				existsPredicate();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4816);
				inPredicate();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4817);
				likePredicate();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4818);
				nullPredicate();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4819);
				xmlExistsPredicate();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BasicPredicateContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public List<RowValueExpressionContext> rowValueExpression() {
			return getRuleContexts(RowValueExpressionContext.class);
		}
		public RowValueExpressionContext rowValueExpression(int i) {
			return getRuleContext(RowValueExpressionContext.class,i);
		}
		public BasicPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_basicPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterBasicPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitBasicPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitBasicPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BasicPredicateContext basicPredicate() throws RecognitionException {
		BasicPredicateContext _localctx = new BasicPredicateContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_basicPredicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4830);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,559,_ctx) ) {
			case 1:
				{
				{
				setState(4822);
				expression();
				setState(4823);
				comparisonOperator();
				setState(4824);
				expression();
				}
				}
				break;
			case 2:
				{
				{
				setState(4826);
				rowValueExpression();
				setState(4827);
				comparisonOperator();
				setState(4828);
				rowValueExpression();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowValueExpressionContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public RowValueExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowValueExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRowValueExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRowValueExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRowValueExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowValueExpressionContext rowValueExpression() throws RecognitionException {
		RowValueExpressionContext _localctx = new RowValueExpressionContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_rowValueExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4832);
			match(LPAREN);
			setState(4833);
			expression();
			setState(4838);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4834);
				match(COMMA);
				setState(4835);
				expression();
				}
				}
				setState(4840);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4841);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QuantifiedPredicateContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public FullSelectContext fullSelect() {
			return getRuleContext(FullSelectContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public RowValueExpressionContext rowValueExpression() {
			return getRuleContext(RowValueExpressionContext.class,0);
		}
		public TerminalNode EQ() { return getToken(DB2zSQLParser.EQ, 0); }
		public TerminalNode NE() { return getToken(DB2zSQLParser.NE, 0); }
		public TerminalNode ALL() { return getToken(DB2zSQLParser.ALL, 0); }
		public TerminalNode SOME() { return getToken(DB2zSQLParser.SOME, 0); }
		public TerminalNode ANY() { return getToken(DB2zSQLParser.ANY, 0); }
		public QuantifiedPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_quantifiedPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterQuantifiedPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitQuantifiedPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitQuantifiedPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QuantifiedPredicateContext quantifiedPredicate() throws RecognitionException {
		QuantifiedPredicateContext _localctx = new QuantifiedPredicateContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_quantifiedPredicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4864);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,561,_ctx) ) {
			case 1:
				{
				{
				setState(4843);
				expression();
				setState(4844);
				comparisonOperator();
				setState(4845);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4846);
				match(LPAREN);
				setState(4847);
				fullSelect();
				setState(4848);
				match(RPAREN);
				}
				}
				break;
			case 2:
				{
				{
				setState(4850);
				rowValueExpression();
				setState(4851);
				match(EQ);
				setState(4852);
				_la = _input.LA(1);
				if ( !(_la==ANY || _la==SOME) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4853);
				match(LPAREN);
				setState(4854);
				fullSelect();
				setState(4855);
				match(RPAREN);
				}
				}
				break;
			case 3:
				{
				{
				setState(4857);
				rowValueExpression();
				setState(4858);
				match(NE);
				setState(4859);
				match(ALL);
				setState(4860);
				match(LPAREN);
				setState(4861);
				fullSelect();
				setState(4862);
				match(RPAREN);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArrayExistsPredicateContext extends ParserRuleContext {
		public TerminalNode ARRAY_EXISTS() { return getToken(DB2zSQLParser.ARRAY_EXISTS, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public ArrayExpressionContext arrayExpression() {
			return getRuleContext(ArrayExpressionContext.class,0);
		}
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public ArrayExistsPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arrayExistsPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterArrayExistsPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitArrayExistsPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitArrayExistsPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArrayExistsPredicateContext arrayExistsPredicate() throws RecognitionException {
		ArrayExistsPredicateContext _localctx = new ArrayExistsPredicateContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_arrayExistsPredicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4866);
			match(ARRAY_EXISTS);
			setState(4867);
			match(LPAREN);
			setState(4868);
			arrayExpression();
			setState(4869);
			match(INTEGERLITERAL);
			setState(4870);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BetweenPredicateContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode BETWEEN() { return getToken(DB2zSQLParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(DB2zSQLParser.AND, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public BetweenPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_betweenPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterBetweenPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitBetweenPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitBetweenPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BetweenPredicateContext betweenPredicate() throws RecognitionException {
		BetweenPredicateContext _localctx = new BetweenPredicateContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_betweenPredicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4872);
			expression();
			setState(4874);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(4873);
				match(NOT);
				}
			}

			setState(4876);
			match(BETWEEN);
			setState(4877);
			expression();
			setState(4878);
			match(AND);
			setState(4879);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DistinctPredicateContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode IS() { return getToken(DB2zSQLParser.IS, 0); }
		public TerminalNode DISTINCT() { return getToken(DB2zSQLParser.DISTINCT, 0); }
		public TerminalNode FROM() { return getToken(DB2zSQLParser.FROM, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public DistinctPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_distinctPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDistinctPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDistinctPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDistinctPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DistinctPredicateContext distinctPredicate() throws RecognitionException {
		DistinctPredicateContext _localctx = new DistinctPredicateContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_distinctPredicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4881);
			expression();
			setState(4882);
			match(IS);
			setState(4884);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(4883);
				match(NOT);
				}
			}

			setState(4886);
			match(DISTINCT);
			setState(4887);
			match(FROM);
			setState(4888);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExistsPredicateContext extends ParserRuleContext {
		public TerminalNode EXISTS() { return getToken(DB2zSQLParser.EXISTS, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public FullSelectContext fullSelect() {
			return getRuleContext(FullSelectContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public ExistsPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_existsPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterExistsPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitExistsPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitExistsPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExistsPredicateContext existsPredicate() throws RecognitionException {
		ExistsPredicateContext _localctx = new ExistsPredicateContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_existsPredicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4890);
			match(EXISTS);
			setState(4891);
			match(LPAREN);
			setState(4892);
			fullSelect();
			setState(4893);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InPredicateContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode IN() { return getToken(DB2zSQLParser.IN, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public FullSelectContext fullSelect() {
			return getRuleContext(FullSelectContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public InPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterInPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitInPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitInPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InPredicateContext inPredicate() throws RecognitionException {
		InPredicateContext _localctx = new InPredicateContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_inPredicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4895);
			expression();
			setState(4897);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(4896);
				match(NOT);
				}
			}

			setState(4899);
			match(IN);
			setState(4915);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,566,_ctx) ) {
			case 1:
				{
				{
				setState(4900);
				match(LPAREN);
				setState(4901);
				fullSelect();
				setState(4902);
				match(RPAREN);
				}
				}
				break;
			case 2:
				{
				{
				setState(4904);
				match(LPAREN);
				setState(4905);
				expression();
				setState(4910);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4906);
					match(COMMA);
					setState(4907);
					expression();
					}
					}
					setState(4912);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4913);
				match(RPAREN);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LikePredicateContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode LIKE() { return getToken(DB2zSQLParser.LIKE, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TerminalNode ESCAPE() { return getToken(DB2zSQLParser.ESCAPE, 0); }
		public LikePredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_likePredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterLikePredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitLikePredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitLikePredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LikePredicateContext likePredicate() throws RecognitionException {
		LikePredicateContext _localctx = new LikePredicateContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_likePredicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4917);
			expression();
			setState(4919);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(4918);
				match(NOT);
				}
			}

			setState(4921);
			match(LIKE);
			setState(4922);
			expression();
			setState(4925);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ESCAPE) {
				{
				setState(4923);
				match(ESCAPE);
				setState(4924);
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NullPredicateContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ISNULL() { return getToken(DB2zSQLParser.ISNULL, 0); }
		public TerminalNode NOTNULL() { return getToken(DB2zSQLParser.NOTNULL, 0); }
		public TerminalNode IS() { return getToken(DB2zSQLParser.IS, 0); }
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public NullPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterNullPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitNullPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitNullPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NullPredicateContext nullPredicate() throws RecognitionException {
		NullPredicateContext _localctx = new NullPredicateContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_nullPredicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4927);
			expression();
			setState(4935);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IS:
				{
				{
				setState(4928);
				match(IS);
				setState(4930);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(4929);
					match(NOT);
					}
				}

				setState(4932);
				match(NULL);
				}
				}
				break;
			case ISNULL:
				{
				setState(4933);
				match(ISNULL);
				}
				break;
			case NOTNULL:
				{
				setState(4934);
				match(NOTNULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlExistsPredicateContext extends ParserRuleContext {
		public TerminalNode XMLEXISTS() { return getToken(DB2zSQLParser.XMLEXISTS, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode PASSING() { return getToken(DB2zSQLParser.PASSING, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public TerminalNode REF() { return getToken(DB2zSQLParser.REF, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public XmlExistsPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlExistsPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterXmlExistsPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitXmlExistsPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitXmlExistsPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlExistsPredicateContext xmlExistsPredicate() throws RecognitionException {
		XmlExistsPredicateContext _localctx = new XmlExistsPredicateContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_xmlExistsPredicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4937);
			match(XMLEXISTS);
			setState(4938);
			match(LPAREN);
			setState(4939);
			match(NONNUMERICLITERAL);
			setState(4953);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PASSING) {
				{
				setState(4940);
				match(PASSING);
				setState(4943);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,571,_ctx) ) {
				case 1:
					{
					setState(4941);
					match(BY);
					setState(4942);
					match(REF);
					}
					break;
				}
				setState(4945);
				expression();
				setState(4950);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4946);
					match(COMMA);
					setState(4947);
					expression();
					}
					}
					setState(4952);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(4955);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArrayExpressionContext extends ParserRuleContext {
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public CastSpecificationContext castSpecification() {
			return getRuleContext(CastSpecificationContext.class,0);
		}
		public ArrayExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arrayExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterArrayExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitArrayExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitArrayExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArrayExpressionContext arrayExpression() throws RecognitionException {
		ArrayExpressionContext _localctx = new ArrayExpressionContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_arrayExpression);
		try {
			setState(4959);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,574,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4957);
				variable();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4958);
				castSpecification();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CastSpecificationContext extends ParserRuleContext {
		public TerminalNode CAST() { return getToken(DB2zSQLParser.CAST, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public CastDataTypeContext castDataType() {
			return getRuleContext(CastDataTypeContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public ParameterMarkerContext parameterMarker() {
			return getRuleContext(ParameterMarkerContext.class,0);
		}
		public CastSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_castSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCastSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCastSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCastSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CastSpecificationContext castSpecification() throws RecognitionException {
		CastSpecificationContext _localctx = new CastSpecificationContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_castSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4961);
			match(CAST);
			setState(4962);
			match(LPAREN);
			setState(4966);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,575,_ctx) ) {
			case 1:
				{
				setState(4963);
				expression();
				}
				break;
			case 2:
				{
				setState(4964);
				match(NULL);
				}
				break;
			case 3:
				{
				setState(4965);
				parameterMarker();
				}
				break;
			}
			setState(4968);
			match(AS);
			setState(4969);
			castDataType();
			setState(4970);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterMarkerContext extends ParserRuleContext {
		public TerminalNode QUESTIONMARK() { return getToken(DB2zSQLParser.QUESTIONMARK, 0); }
		public ParameterMarkerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterMarker; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterParameterMarker(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitParameterMarker(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitParameterMarker(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParameterMarkerContext parameterMarker() throws RecognitionException {
		ParameterMarkerContext _localctx = new ParameterMarkerContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_parameterMarker);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4972);
			match(QUESTIONMARK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CastDataTypeContext extends ParserRuleContext {
		public CastBuiltInTypeContext castBuiltInType() {
			return getRuleContext(CastBuiltInTypeContext.class,0);
		}
		public DistinctTypeNameContext distinctTypeName() {
			return getRuleContext(DistinctTypeNameContext.class,0);
		}
		public ArrayTypeContext arrayType() {
			return getRuleContext(ArrayTypeContext.class,0);
		}
		public CastDataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_castDataType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCastDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCastDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCastDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CastDataTypeContext castDataType() throws RecognitionException {
		CastDataTypeContext _localctx = new CastDataTypeContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_castDataType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4977);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,576,_ctx) ) {
			case 1:
				{
				setState(4974);
				castBuiltInType();
				}
				break;
			case 2:
				{
				setState(4975);
				distinctTypeName();
				}
				break;
			case 3:
				{
				setState(4976);
				arrayType();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CastBuiltInTypeContext extends ParserRuleContext {
		public TerminalNode SMALLINT() { return getToken(DB2zSQLParser.SMALLINT, 0); }
		public TerminalNode INTEGER() { return getToken(DB2zSQLParser.INTEGER, 0); }
		public TerminalNode INT() { return getToken(DB2zSQLParser.INT, 0); }
		public TerminalNode BIGINT() { return getToken(DB2zSQLParser.BIGINT, 0); }
		public TerminalNode REAL() { return getToken(DB2zSQLParser.REAL, 0); }
		public TerminalNode DATE() { return getToken(DB2zSQLParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(DB2zSQLParser.TIME, 0); }
		public TerminalNode ROWID() { return getToken(DB2zSQLParser.ROWID, 0); }
		public TerminalNode XML() { return getToken(DB2zSQLParser.XML, 0); }
		public TerminalNode DECFLOAT() { return getToken(DB2zSQLParser.DECFLOAT, 0); }
		public TerminalNode FLOAT() { return getToken(DB2zSQLParser.FLOAT, 0); }
		public TerminalNode DOUBLE() { return getToken(DB2zSQLParser.DOUBLE, 0); }
		public TerminalNode BINARY() { return getToken(DB2zSQLParser.BINARY, 0); }
		public TerminalNode TIMESTAMP() { return getToken(DB2zSQLParser.TIMESTAMP, 0); }
		public TerminalNode DECIMAL() { return getToken(DB2zSQLParser.DECIMAL, 0); }
		public TerminalNode DEC() { return getToken(DB2zSQLParser.DEC, 0); }
		public TerminalNode NUMERIC() { return getToken(DB2zSQLParser.NUMERIC, 0); }
		public TerminalNode GRAPHIC() { return getToken(DB2zSQLParser.GRAPHIC, 0); }
		public TerminalNode VARGRAPHIC() { return getToken(DB2zSQLParser.VARGRAPHIC, 0); }
		public TerminalNode DBCLOB() { return getToken(DB2zSQLParser.DBCLOB, 0); }
		public IntegerInParensContext integerInParens() {
			return getRuleContext(IntegerInParensContext.class,0);
		}
		public TerminalNode VARCHAR() { return getToken(DB2zSQLParser.VARCHAR, 0); }
		public TerminalNode CLOB() { return getToken(DB2zSQLParser.CLOB, 0); }
		public TerminalNode VARBINARY() { return getToken(DB2zSQLParser.VARBINARY, 0); }
		public TerminalNode BLOB() { return getToken(DB2zSQLParser.BLOB, 0); }
		public TerminalNode ZONE() { return getToken(DB2zSQLParser.ZONE, 0); }
		public TerminalNode PRECISION() { return getToken(DB2zSQLParser.PRECISION, 0); }
		public LengthContext length() {
			return getRuleContext(LengthContext.class,0);
		}
		public CcsidQualifierContext ccsidQualifier() {
			return getRuleContext(CcsidQualifierContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode WITHOUT() { return getToken(DB2zSQLParser.WITHOUT, 0); }
		public TerminalNode LARGE() { return getToken(DB2zSQLParser.LARGE, 0); }
		public TerminalNode OBJECT() { return getToken(DB2zSQLParser.OBJECT, 0); }
		public TerminalNode CHARACTER() { return getToken(DB2zSQLParser.CHARACTER, 0); }
		public TerminalNode CHAR() { return getToken(DB2zSQLParser.CHAR, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode SQLIDENTIFIER() { return getToken(DB2zSQLParser.SQLIDENTIFIER, 0); }
		public TerminalNode VARYING() { return getToken(DB2zSQLParser.VARYING, 0); }
		public CastBuiltInTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_castBuiltInType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCastBuiltInType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCastBuiltInType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCastBuiltInType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CastBuiltInTypeContext castBuiltInType() throws RecognitionException {
		CastBuiltInTypeContext _localctx = new CastBuiltInTypeContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_castBuiltInType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5086);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,597,_ctx) ) {
			case 1:
				{
				setState(4979);
				match(SMALLINT);
				}
				break;
			case 2:
				{
				setState(4980);
				match(INTEGER);
				}
				break;
			case 3:
				{
				setState(4981);
				match(INT);
				}
				break;
			case 4:
				{
				setState(4982);
				match(BIGINT);
				}
				break;
			case 5:
				{
				{
				setState(4983);
				_la = _input.LA(1);
				if ( !(_la==NUMERIC || _la==DEC || _la==DECIMAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4987);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,577,_ctx) ) {
				case 1:
					{
					setState(4984);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(4985);
					match(LPAREN);
					setState(4986);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 6:
				{
				{
				setState(4989);
				match(DECFLOAT);
				setState(4993);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,578,_ctx) ) {
				case 1:
					{
					setState(4990);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(4991);
					match(LPAREN);
					setState(4992);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 7:
				{
				{
				setState(4995);
				match(FLOAT);
				setState(4999);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,579,_ctx) ) {
				case 1:
					{
					setState(4996);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(4997);
					match(LPAREN);
					setState(4998);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 8:
				{
				setState(5001);
				match(REAL);
				}
				break;
			case 9:
				{
				{
				setState(5002);
				match(DOUBLE);
				setState(5004);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRECISION) {
					{
					setState(5003);
					match(PRECISION);
					}
				}

				}
				}
				break;
			case 10:
				{
				{
				setState(5011);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHAR:
				case CHARACTER:
					{
					{
					setState(5006);
					_la = _input.LA(1);
					if ( !(_la==CHAR || _la==CHARACTER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5008);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==VARYING) {
						{
						setState(5007);
						match(VARYING);
						}
					}

					}
					}
					break;
				case VARCHAR:
					{
					setState(5010);
					match(VARCHAR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5016);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,583,_ctx) ) {
				case 1:
					{
					setState(5013);
					length();
					}
					break;
				case 2:
					{
					{
					setState(5014);
					match(LPAREN);
					setState(5015);
					match(RPAREN);
					}
					}
					break;
				}
				setState(5019);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CCSID) {
					{
					setState(5018);
					ccsidQualifier();
					}
				}

				}
				}
				break;
			case 11:
				{
				{
				setState(5025);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHAR:
				case CHARACTER:
					{
					{
					setState(5021);
					_la = _input.LA(1);
					if ( !(_la==CHAR || _la==CHARACTER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5022);
					match(LARGE);
					setState(5023);
					match(OBJECT);
					}
					}
					break;
				case CLOB:
					{
					setState(5024);
					match(CLOB);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5030);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,586,_ctx) ) {
				case 1:
					{
					setState(5027);
					length();
					}
					break;
				case 2:
					{
					{
					setState(5028);
					match(LPAREN);
					setState(5029);
					match(RPAREN);
					}
					}
					break;
				}
				setState(5033);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CCSID) {
					{
					setState(5032);
					ccsidQualifier();
					}
				}

				}
				}
				break;
			case 12:
				{
				{
				setState(5035);
				_la = _input.LA(1);
				if ( !(_la==DBCLOB || _la==GRAPHIC || _la==VARGRAPHIC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5039);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,588,_ctx) ) {
				case 1:
					{
					setState(5036);
					length();
					}
					break;
				case 2:
					{
					{
					setState(5037);
					match(LPAREN);
					setState(5038);
					match(RPAREN);
					}
					}
					break;
				}
				setState(5042);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CCSID) {
					{
					setState(5041);
					ccsidQualifier();
					}
				}

				}
				}
				break;
			case 13:
				{
				{
				setState(5044);
				match(BINARY);
				setState(5048);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,590,_ctx) ) {
				case 1:
					{
					setState(5045);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(5046);
					match(LPAREN);
					setState(5047);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 14:
				{
				{
				setState(5055);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
					{
					{
					setState(5050);
					match(BINARY);
					setState(5052);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==VARYING) {
						{
						setState(5051);
						match(VARYING);
						}
					}

					}
					}
					break;
				case VARBINARY:
					{
					setState(5054);
					match(VARBINARY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5060);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,593,_ctx) ) {
				case 1:
					{
					setState(5057);
					integerInParens();
					}
					break;
				case 2:
					{
					{
					setState(5058);
					match(LPAREN);
					setState(5059);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			case 15:
				{
				{
				setState(5066);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
					{
					{
					setState(5062);
					match(BINARY);
					setState(5063);
					match(LARGE);
					setState(5064);
					match(OBJECT);
					}
					}
					break;
				case BLOB:
					{
					setState(5065);
					match(BLOB);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5073);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(5068);
					match(LPAREN);
					{
					setState(5069);
					match(INTEGERLITERAL);
					setState(5070);
					match(SQLIDENTIFIER);
					}
					setState(5072);
					match(RPAREN);
					}
				}

				}
				}
				break;
			case 16:
				{
				setState(5075);
				match(DATE);
				}
				break;
			case 17:
				{
				setState(5076);
				match(TIME);
				}
				break;
			case 18:
				{
				{
				setState(5077);
				match(TIMESTAMP);
				setState(5079);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(5078);
					integerInParens();
					}
				}

				{
				setState(5081);
				_la = _input.LA(1);
				if ( !(_la==WITH || _la==WITHOUT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5082);
				match(TIME);
				setState(5083);
				match(ZONE);
				}
				}
				}
				break;
			case 19:
				{
				setState(5084);
				match(ROWID);
				}
				break;
			case 20:
				{
				setState(5085);
				match(XML);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntegerInParensContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<TerminalNode> INTEGERLITERAL() { return getTokens(DB2zSQLParser.INTEGERLITERAL); }
		public TerminalNode INTEGERLITERAL(int i) {
			return getToken(DB2zSQLParser.INTEGERLITERAL, i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode COMMA() { return getToken(DB2zSQLParser.COMMA, 0); }
		public IntegerInParensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_integerInParens; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterIntegerInParens(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitIntegerInParens(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitIntegerInParens(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntegerInParensContext integerInParens() throws RecognitionException {
		IntegerInParensContext _localctx = new IntegerInParensContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_integerInParens);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5088);
			match(LPAREN);
			setState(5089);
			match(INTEGERLITERAL);
			setState(5092);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(5090);
				match(COMMA);
				setState(5091);
				match(INTEGERLITERAL);
				}
			}

			setState(5094);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode SQLIDENTIFIER() { return getToken(DB2zSQLParser.SQLIDENTIFIER, 0); }
		public TerminalNode CODEUNITS16() { return getToken(DB2zSQLParser.CODEUNITS16, 0); }
		public TerminalNode CODEUNITS32() { return getToken(DB2zSQLParser.CODEUNITS32, 0); }
		public TerminalNode OCTETS() { return getToken(DB2zSQLParser.OCTETS, 0); }
		public LengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_length; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterLength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitLength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LengthContext length() throws RecognitionException {
		LengthContext _localctx = new LengthContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_length);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5096);
			match(LPAREN);
			setState(5097);
			_la = _input.LA(1);
			if ( !(_la==INTEGERLITERAL || _la==SQLIDENTIFIER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5099);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 327)) & ~0x3f) == 0 && ((1L << (_la - 327)) & ((1L << (CODEUNITS16 - 327)) | (1L << (CODEUNITS32 - 327)) | (1L << (OCTETS - 327)))) != 0)) {
				{
				setState(5098);
				_la = _input.LA(1);
				if ( !(((((_la - 327)) & ~0x3f) == 0 && ((1L << (_la - 327)) & ((1L << (CODEUNITS16 - 327)) | (1L << (CODEUNITS32 - 327)) | (1L << (OCTETS - 327)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5101);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CcsidQualifierContext extends ParserRuleContext {
		public TerminalNode CCSID() { return getToken(DB2zSQLParser.CCSID, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode ASCII() { return getToken(DB2zSQLParser.ASCII, 0); }
		public TerminalNode EBCDIC() { return getToken(DB2zSQLParser.EBCDIC, 0); }
		public TerminalNode UNICODE() { return getToken(DB2zSQLParser.UNICODE, 0); }
		public ForDataQualifierContext forDataQualifier() {
			return getRuleContext(ForDataQualifierContext.class,0);
		}
		public CcsidQualifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ccsidQualifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCcsidQualifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCcsidQualifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCcsidQualifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CcsidQualifierContext ccsidQualifier() throws RecognitionException {
		CcsidQualifierContext _localctx = new CcsidQualifierContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_ccsidQualifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5103);
			match(CCSID);
			setState(5109);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EBCDIC:
			case ASCII:
			case UNICODE:
				{
				{
				setState(5104);
				_la = _input.LA(1);
				if ( !(_la==EBCDIC || _la==ASCII || _la==UNICODE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5106);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5105);
					forDataQualifier();
					}
				}

				}
				}
				break;
			case INTEGERLITERAL:
				{
				setState(5108);
				match(INTEGERLITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ForDataQualifierContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode DATA() { return getToken(DB2zSQLParser.DATA, 0); }
		public TerminalNode SBCS() { return getToken(DB2zSQLParser.SBCS, 0); }
		public TerminalNode MIXED() { return getToken(DB2zSQLParser.MIXED, 0); }
		public TerminalNode BIT() { return getToken(DB2zSQLParser.BIT, 0); }
		public ForDataQualifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forDataQualifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterForDataQualifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitForDataQualifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitForDataQualifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ForDataQualifierContext forDataQualifier() throws RecognitionException {
		ForDataQualifierContext _localctx = new ForDataQualifierContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_forDataQualifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5111);
			match(FOR);
			setState(5112);
			_la = _input.LA(1);
			if ( !(_la==BIT || _la==MIXED || _la==SBCS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5113);
			match(DATA);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DistinctTypeNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public CorrelationNameContext correlationName() {
			return getRuleContext(CorrelationNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public DistinctTypeNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_distinctTypeName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDistinctTypeName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDistinctTypeName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDistinctTypeName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DistinctTypeNameContext distinctTypeName() throws RecognitionException {
		DistinctTypeNameContext _localctx = new DistinctTypeNameContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_distinctTypeName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5118);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,602,_ctx) ) {
			case 1:
				{
				setState(5115);
				correlationName();
				setState(5116);
				match(DOT);
				}
				break;
			}
			setState(5120);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArrayTypeContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ArrayTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arrayType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterArrayType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitArrayType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitArrayType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArrayTypeContext arrayType() throws RecognitionException {
		ArrayTypeContext _localctx = new ArrayTypeContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_arrayType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5122);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LiteralContext extends ParserRuleContext {
		public TerminalNode NUMERICLITERAL() { return getToken(DB2zSQLParser.NUMERICLITERAL, 0); }
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LiteralContext literal() throws RecognitionException {
		LiteralContext _localctx = new LiteralContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_literal);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5124);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NONNUMERICLITERAL) | (1L << INTEGERLITERAL) | (1L << NUMERICLITERAL))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CcsidValueContext extends ParserRuleContext {
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public CcsidValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ccsidValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCcsidValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCcsidValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCcsidValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CcsidValueContext ccsidValue() throws RecognitionException {
		CcsidValueContext _localctx = new CcsidValueContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_ccsidValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5126);
			match(INTEGERLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public CorrelationNameContext correlationName() {
			return getRuleContext(CorrelationNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public ColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnNameContext columnName() throws RecognitionException {
		ColumnNameContext _localctx = new ColumnNameContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_columnName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5131);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,603,_ctx) ) {
			case 1:
				{
				setState(5128);
				correlationName();
				setState(5129);
				match(DOT);
				}
				break;
			}
			setState(5133);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SourceColumnNameContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public SourceColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sourceColumnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSourceColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSourceColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSourceColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SourceColumnNameContext sourceColumnName() throws RecognitionException {
		SourceColumnNameContext _localctx = new SourceColumnNameContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_sourceColumnName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5135);
			columnName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TargetColumnNameContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TargetColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_targetColumnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTargetColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTargetColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTargetColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TargetColumnNameContext targetColumnName() throws RecognitionException {
		TargetColumnNameContext _localctx = new TargetColumnNameContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_targetColumnName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5137);
			columnName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NewColumnNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public NewColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_newColumnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterNewColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitNewColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitNewColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NewColumnNameContext newColumnName() throws RecognitionException {
		NewColumnNameContext _localctx = new NewColumnNameContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_newColumnName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5139);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BeginColumnNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public BeginColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_beginColumnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterBeginColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitBeginColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitBeginColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BeginColumnNameContext beginColumnName() throws RecognitionException {
		BeginColumnNameContext _localctx = new BeginColumnNameContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_beginColumnName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5141);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EndColumnNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public EndColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_endColumnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterEndColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitEndColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitEndColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EndColumnNameContext endColumnName() throws RecognitionException {
		EndColumnNameContext _localctx = new EndColumnNameContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_endColumnName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5143);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CorrelationNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public CorrelationNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_correlationName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCorrelationName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCorrelationName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCorrelationName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CorrelationNameContext correlationName() throws RecognitionException {
		CorrelationNameContext _localctx = new CorrelationNameContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_correlationName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5145);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LocationNameContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> NUMERICLITERAL() { return getTokens(DB2zSQLParser.NUMERICLITERAL); }
		public TerminalNode NUMERICLITERAL(int i) {
			return getToken(DB2zSQLParser.NUMERICLITERAL, i);
		}
		public List<TerminalNode> INTEGERLITERAL() { return getTokens(DB2zSQLParser.INTEGERLITERAL); }
		public TerminalNode INTEGERLITERAL(int i) {
			return getToken(DB2zSQLParser.INTEGERLITERAL, i);
		}
		public List<TerminalNode> DOT() { return getTokens(DB2zSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(DB2zSQLParser.DOT, i);
		}
		public LocationNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_locationName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterLocationName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitLocationName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitLocationName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LocationNameContext locationName() throws RecognitionException {
		LocationNameContext _localctx = new LocationNameContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_locationName);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5150);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case ALL:
			case ALLOCATE:
			case ALLOW:
			case ALTER:
			case ALTERAND:
			case ANY:
			case ARRAY:
			case ARRAY_EXISTS:
			case AS:
			case ASENSITIVE:
			case ASSOCIATE:
			case ASUTIME:
			case AT:
			case AUDIT:
			case AUX:
			case AUXILIARY:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BUFFERPOOL:
			case BY:
			case CALL:
			case CAPTURE:
			case CASCADED:
			case CASE:
			case CAST:
			case CCSID:
			case CHAR:
			case CHARACTER:
			case CHECK:
			case CLONE:
			case CLOSE:
			case CLUSTER:
			case COLLECTION:
			case COLLID:
			case COLUMN:
			case COMMENT:
			case COMMIT:
			case CONCAT:
			case CONDITION:
			case CONNECT:
			case CONNECTION:
			case CONSTRAINT:
			case CONTAINS:
			case CONTENT:
			case CONTINUE:
			case CREATE:
			case CUBE:
			case CURRENT:
			case CURRENT_LC_CTYPE:
			case CURRVAL:
			case CURSOR:
			case DATA:
			case DATABASE:
			case DAY:
			case DAYS:
			case DBINFO:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DISABLE:
			case DISALLOW:
			case DISTINCT:
			case DO:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSSIZE:
			case DYNAMIC:
			case EDITPROC:
			case ELSE:
			case ELSEIF:
			case ENCODING:
			case ENCRYPTION:
			case END:
			case END_EXEC:
			case ENDING:
			case ERASE:
			case ESCAPE:
			case EXCEPT:
			case EXCEPTION:
			case EXEC_SQL:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case FENCED:
			case FETCH:
			case FIELDPROC:
			case FINAL:
			case FIRST:
			case FOR:
			case FREE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANT:
			case GROUP:
			case HANDLER:
			case HAVING:
			case HOLD:
			case HOUR:
			case HOURS:
			case IF:
			case IMMEDIATE:
			case IN:
			case INCLUSIVE:
			case INDEX:
			case INDEXBP:
			case INHERIT:
			case INNER:
			case INOUT:
			case INSENSITIVE:
			case INSERT:
			case INTERSECT:
			case INTO:
			case IS:
			case ISOBID:
			case ITERATE:
			case JAR:
			case JOIN:
			case KEEP:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LAST:
			case LC_CTYPE:
			case LEAVE:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOCALE:
			case LOCATOR:
			case LOCATORS:
			case LOCK:
			case LOCKMAX:
			case LOCKSIZE:
			case LONG:
			case LOOP:
			case MAINTAINED:
			case MATERIALIZED:
			case MICROSECOND:
			case MICROSECONDS:
			case MODIFIES:
			case MONTH:
			case MONTHS:
			case NEXT:
			case NEXTVAL:
			case NO:
			case NONE:
			case NOT:
			case NULL:
			case NULLS:
			case NUMPARTS:
			case OBID:
			case OF:
			case OFFSET:
			case OLD:
			case ON:
			case OPEN:
			case OPTIMIZATION:
			case OPTIMIZE:
			case OR:
			case ORDER:
			case ORGANIZATION:
			case OUT:
			case OUTER:
			case PACKAGE:
			case PADDED:
			case PARAMETER:
			case PART:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONING:
			case PATH:
			case PERIOD:
			case PIECESIZE:
			case PLAN:
			case PRECISION:
			case PREPARE:
			case PREVVAL:
			case PRIOR:
			case PRIQTY:
			case PRIVILEGES:
			case PROCEDURE:
			case PROGRAM:
			case PSID:
			case PUBLIC:
			case QUERY:
			case QUERYNO:
			case READS:
			case REFERENCES:
			case REFRESH:
			case RELEASE:
			case RENAME:
			case REPEAT:
			case RESIGNAL:
			case RESTRICT:
			case RESULT:
			case RESULT_SET_LOCATOR:
			case RETURN:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUND_CEILING:
			case ROUND_DOWN:
			case ROUND_FLOOR:
			case ROUND_HALF_DOWN:
			case ROUND_HALF_EVEN:
			case ROUND_HALF_UP:
			case ROUND_UP:
			case ROW:
			case ROWSET:
			case RUN:
			case SAVEPOINT:
			case SCHEMA:
			case SCRATCHPAD:
			case SECOND:
			case SECONDS:
			case SECQTY:
			case SECURITY:
			case SELECT:
			case SENSITIVE:
			case SEQUENCE:
			case SET:
			case SIGNAL:
			case SIMPLE:
			case SOME:
			case SOURCE:
			case SPECIFIC:
			case STANDARD:
			case STATEMENT:
			case STATIC:
			case STAY:
			case STOGROUP:
			case STORES:
			case STYLE:
			case SUMMARY:
			case SYNONYM:
			case SYSDATE:
			case SYSTEM:
			case SYSTIMESTAMP:
			case TABLE:
			case TABLESPACE:
			case THEN:
			case TO:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNDO:
			case UNION:
			case UNIQUE:
			case UNTIL:
			case UPDATE:
			case USING:
			case VALIDPROC:
			case VALUE:
			case VALUES:
			case VARIABLE:
			case VARIANT:
			case VCAT:
			case VERSIONING:
			case VIEW:
			case VOLATILE:
			case VOLUMES:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WLM:
			case XMLCAST:
			case XMLEXISTS:
			case XMLNAMESPACES:
			case YEAR:
			case YEARS:
			case ZONE:
			case AND:
			case ARRAY_AGG:
			case ASC:
			case AVG:
			case BIT:
			case CHANGE:
			case CODEUNITS16:
			case CODEUNITS32:
			case CORR:
			case CORRELATION:
			case COUNT:
			case COUNT_BIG:
			case COVAR:
			case COVARIANCE:
			case COVARIANCE_SAMP:
			case COVAR_POP:
			case COVAR_SAMP:
			case CS:
			case CUME_DIST:
			case DENSE_RANK:
			case DESC:
			case EBCDIC:
			case EXCLUSIVE:
			case FIRST_VALUE:
			case FOLLOWING:
			case GROUPING:
			case IGNORE:
			case INDICATOR:
			case INPUT:
			case ISNULL:
			case LAG:
			case LARGE:
			case LAST_VALUE:
			case LEAD:
			case LISTAGG:
			case LOCKED:
			case LOCKS:
			case MEDIAN:
			case MINUTES:
			case MIXED:
			case NOTNULL:
			case NTH_VALUE:
			case NTILE:
			case NUMERIC:
			case OBJECT:
			case OCTETS:
			case ONLY:
			case OVER:
			case PASSING:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PERCENT_RANK:
			case PRECEDING:
			case PREVIOUS:
			case RANGE:
			case RANK:
			case RATIO_TO_REPORT:
			case READ:
			case REF:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_ICPT:
			case REGR_INTERCEPT:
			case REGR_R2:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case RESPECT:
			case ROW_NUMBER:
			case ROWS:
			case RR:
			case RS:
			case SBCS:
			case SELECTIVITY:
			case SETS:
			case SHARE:
			case SKIP_:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case TOKEN:
			case UNBOUNDED:
			case UNPACK:
			case UR:
			case USE:
			case VAR:
			case VARIANCE:
			case VARIANCE_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARYING:
			case WITHOUT:
			case XML:
			case XMLAGG:
			case COLUMNS:
			case SQLID:
			case ORDINALITY:
			case SYSTEM_TIME:
			case BUSINESS_TIME:
			case MULTIPLIER:
			case UNNEST:
			case CROSS:
			case CALLER:
			case CLIENT:
			case POSITIONING:
			case SCROLL:
			case ACTION:
			case ASSEMBLE:
			case C_:
			case CALLED:
			case COBOL:
			case DB2:
			case DEFINER:
			case DISPATCH:
			case ENVIRONMENT:
			case FAILURE:
			case FAILURES:
			case JAVA:
			case MAIN:
			case NAME:
			case OPTIONS:
			case PARALLEL:
			case PLI:
			case REGISTERS:
			case RESIDENT:
			case SECURED:
			case SPECIAL:
			case SQL:
			case STOP:
			case SUB:
			case YES:
			case APPLICATION:
			case CHANGED:
			case COMPATIBILITY:
			case COMPRESS:
			case COPY:
			case FREEPAGE:
			case GBPCACHE:
			case INCLUDE:
			case MAXVALUE:
			case MINVALUE:
			case PCTFREE:
			case REGENERATE:
			case MASK:
			case ENABLE:
			case PERMISSION:
			case ATOMIC:
			case SQLEXCEPTION:
			case MERGE:
			case MATCHED:
			case SQLSTATE:
			case MESSAGE_TEXT:
			case OVERRIDING:
			case PORTION:
			case DB2SQL:
			case DEBUG:
			case GENERAL:
			case MODE_:
			case REXX:
			case CACHE:
			case CYCLE:
			case INCREMENT:
			case RESTART:
			case DATACLAS:
			case MGMTCLAS:
			case REMOVE:
			case STORCLAS:
			case ACCESS:
			case ACTIVATE:
			case ALWAYS:
			case APPEND:
			case ARCHIVE:
			case BUSINESS:
			case CASCADE:
			case CHANGES:
			case CONTROL:
			case DEACTIVATE:
			case DEFERRED:
			case EACH:
			case ENFORCED:
			case EXTRA:
			case FOREIGN:
			case HIDDEN_:
			case HISTORY:
			case ID:
			case IDENTITY:
			case IMPLICITLY:
			case INITIALLY:
			case INLINE:
			case OPERATION:
			case ORGANIZE:
			case OVERLAPS:
			case PACKAGE_NAME:
			case PACKAGE_SCHEMA:
			case PACKAGE_VERSION:
			case PRIMARY:
			case RESET:
			case ROTATE:
			case START:
			case SYSIBM:
			case TRANSACTION:
			case XMLSCHEMA:
			case ELEMENT:
			case URL:
			case NAMESPACE:
			case LOCATION:
			case SYSXSR:
			case ALGORITHM:
			case FIXEDLENGTH:
			case HUFFMAN:
			case LOB:
			case LOG:
			case LOGGED:
			case MAXPARTITIONS:
			case MAXROWS:
			case MEMBER:
			case MOVE:
			case PAGE:
			case PAGENUM:
			case PENDING:
			case RELATIVE:
			case SEGSIZE:
			case TRACKMOD:
			case ADDRESS:
			case ATTRIBUTES:
			case AUTHENTICATION:
			case AUTHID:
			case CONTEXT:
			case JOBNAME:
			case OWNER:
			case PROFILE:
			case QUALIFIER:
			case SERVAUTH:
			case TRUSTED:
			case SECTION:
			case ACTIVE:
			case VERSION:
			case ALIAS:
			case WORK:
			case WORKFILE:
			case SYSDEFLT:
			case NULTERM:
			case STRUCTURE:
			case GENERIC:
			case ABS:
			case ABSVAL:
			case ACOS:
			case ADD_DAYS:
			case ADD_MONTHS:
			case ARRAY_DELETE:
			case ARRAY_FIRST:
			case ARRAY_LAST:
			case ARRAY_NEXT:
			case ARRAY_PRIOR:
			case ARRAY_TRIM:
			case ASCII:
			case ASCII_CHR:
			case ASCIISTR:
			case ASCII_STR:
			case ASIN:
			case ATAN:
			case ATAN2:
			case ATANH:
			case BIGINT:
			case BINARY:
			case BITAND:
			case BITANDNOT:
			case BITNOT:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BTRIM:
			case CARDINALITY:
			case CCSID_ENCODING:
			case CEIL:
			case CEILING:
			case CHAR9:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case CHR:
			case CLOB:
			case COALESCE:
			case COLLATION_KEY:
			case COMPARE_DECFLOAT:
			case COS:
			case COSH:
			case DATE:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFWEEK_ISO:
			case DAYOFYEAR:
			case DAYS_BETWEEN:
			case DBCLOB:
			case DEC:
			case DECFLOAT:
			case DECFLOAT_FORMAT:
			case DECFLOAT_SORTKEY:
			case DECIMAL:
			case DECODE:
			case DECRYPT_BINARY:
			case DECRYPT_BIT:
			case DECRYPT_CHAR:
			case DECRYPT_DATAKEY_BIGINT:
			case DECRYPT_DATAKEY_BIT:
			case DECRYPT_DATAKEY_CLOB:
			case DECRYPT_DATAKEY_DBCLOB:
			case DECRYPT_DATAKEY_DECIMAL:
			case DECRYPT_DATAKEY_INTEGER:
			case DECRYPT_DATAKEY_VARCHAR:
			case DECRYPT_DATAKEY_VARGRAPHIC:
			case DECRYPT_DB:
			case DEGREES:
			case DIFFERENCE:
			case DIGITS:
			case DOUBLE_PRECISION:
			case DSN_XMLVALIDATE:
			case EBCDIC_CHR:
			case EBCDIC_STR:
			case ENCRYPT_DATAKEY:
			case ENCRYPT_TDES:
			case EXP:
			case EXTRACT:
			case FLOAT:
			case FLOOR:
			case GENERATE_UNIQUE:
			case GENERATE_UNIQUE_BINARY:
			case GETHINT:
			case GETVARIABLE:
			case GRAPHIC:
			case GREATEST:
			case HASH:
			case HASH_CRC32:
			case HASH_MD5:
			case HASH_SHA1:
			case HASH_SHA256:
			case HEX:
			case IDENTITY_VAL_LOCAL:
			case IFNULL:
			case INSTR:
			case INT:
			case INTEGER:
			case JULIAN_DAY:
			case LAST_DAY:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LN:
			case LOCATE:
			case LOCATE_IN_STRING:
			case LOG10:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAX:
			case MAX_CARDINALITY:
			case MIDNIGHT_SECONDS:
			case MIN:
			case MINUTE:
			case MOD:
			case MONTHS_BETWEEN:
			case MQREAD:
			case MQREADCLOB:
			case MQRECEIVE:
			case MQRECEIVECLOB:
			case MQSEND:
			case MULTIPLY_ALT:
			case NEXT_DAY:
			case NEXT_MONTH:
			case NORMALIZE_DECFLOAT:
			case NORMALIZE_STRING:
			case NULLIF:
			case NVL:
			case OVERLAY:
			case PACK:
			case POSITION:
			case POSSTR:
			case POW:
			case POWER:
			case QUANTIZE:
			case QUARTER:
			case RADIANS:
			case RAISE_ERROR:
			case RAND:
			case RANDOM:
			case REAL:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REPLACE:
			case RID:
			case ROUND:
			case ROUND_TIMESTAMP:
			case ROWID:
			case RPAD:
			case RTRIM:
			case SCORE:
			case SIGN:
			case SIN:
			case SINH:
			case SMALLINT:
			case SOAPHTTPC:
			case SOAPHTTPNC:
			case SOAPHTTPNV:
			case SOAPHTTPV:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STRIP:
			case STRLEFT:
			case STRPOS:
			case STRRIGHT:
			case SUBSTR:
			case SUBSTRING:
			case TAN:
			case TANH:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIMESTAMP_FORMAT:
			case TIMESTAMP_ISO:
			case TIMESTAMP_TZ:
			case TO_CHAR:
			case TO_CLOB:
			case TO_DATE:
			case TO_NUMBER:
			case TOTALORDER:
			case TO_TIMESTAMP:
			case TRANSLATE:
			case TRIM:
			case TRIM_ARRAY:
			case TRUNC:
			case TRUNC_TIMESTAMP:
			case UCASE:
			case UNICODE:
			case UNICODE_STR:
			case UNISTR:
			case UPPER:
			case VARBINARY:
			case VARCHAR:
			case VARCHAR9:
			case VARCHAR_BIT_FORMAT:
			case VARCHAR_FORMAT:
			case VARGRAPHIC:
			case VERIFY_GROUP_FOR_USER:
			case VERIFY_ROLE_FOR_USER:
			case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
			case WEEK:
			case WEEK_ISO:
			case WRAP:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLCONCAT:
			case XMLDOCUMENT:
			case XMLELEMENT:
			case XMLFOREST:
			case XMLMODIFY:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLSERIALIZE:
			case XMLTEXT:
			case XMLXSROBJECTID:
			case XSLTRANSFORM:
			case CURRENT_ACCELERATOR:
			case CURRENT_APPLICATION_COMPATIBILITY:
			case CURRENT_APPLICATION_ENCODING_SCHEME:
			case CURRENT_CLIENT_ACCTNG:
			case CURRENT_CLIENT_APPLNAME:
			case CURRENT_CLIENT_CORR_TOKEN:
			case CURRENT_CLIENT_USERID:
			case CURRENT_CLIENT_WRKSTNNAME:
			case CURRENT_DATE:
			case CURRENT_DEBUG_MODE:
			case CURRENT_DECFLOAT_ROUNDING_MODE:
			case CURRENT_DEGREE:
			case CURRENT_EXPLAIN_MODE:
			case CURRENT_GET_ACCEL_ARCHIVE:
			case CURRENT_LOCALE_LC_CTYPE:
			case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
			case CURRENT_MEMBER:
			case CURRENT_OPTIMIZATION_HINT:
			case CURRENT_PACKAGE_PATH:
			case CURRENT_PACKAGESET:
			case CURRENT_PATH:
			case CURRENT_PRECISION:
			case CURRENT_QUERY_ACCELERATION:
			case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
			case CURRENT_REFRESH_AGE:
			case CURRENT_ROUTINE_VERSION:
			case CURRENT_RULES:
			case CURRENT_SCHEMA:
			case CURRENT_SERVER:
			case CURRENT_SQLID:
			case CURRENT_TEMPORAL_BUSINESS_TIME:
			case CURRENT_TEMPORAL_SYSTEM_TIME:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_TIME_ZONE:
			case ENCRYPTION_PASSWORD:
			case SESSION_TIME_ZONE:
			case SESSION_USER:
			case USER:
			case ADMIN_TASK_LIST:
			case ADMIN_TASK_OUTPUT:
			case ADMIN_TASK_STATUS:
			case BLOCKING_THREADS:
			case MQREADALL:
			case MQREADALLCLOB:
			case MQRECEIVEALL:
			case MQRECEIVEALLCLOB:
			case XMLTABLE:
			case SQLIDENTIFIER:
				{
				setState(5147);
				identifier();
				}
				break;
			case NUMERICLITERAL:
				{
				setState(5148);
				match(NUMERICLITERAL);
				}
				break;
			case INTEGERLITERAL:
				{
				setState(5149);
				match(INTEGERLITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5162);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,607,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5153);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DOT) {
						{
						setState(5152);
						match(DOT);
						}
					}

					setState(5158);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ADD:
					case AFTER:
					case ALL:
					case ALLOCATE:
					case ALLOW:
					case ALTER:
					case ALTERAND:
					case ANY:
					case ARRAY:
					case ARRAY_EXISTS:
					case AS:
					case ASENSITIVE:
					case ASSOCIATE:
					case ASUTIME:
					case AT:
					case AUDIT:
					case AUX:
					case AUXILIARY:
					case BEFORE:
					case BEGIN:
					case BETWEEN:
					case BUFFERPOOL:
					case BY:
					case CALL:
					case CAPTURE:
					case CASCADED:
					case CASE:
					case CAST:
					case CCSID:
					case CHAR:
					case CHARACTER:
					case CHECK:
					case CLONE:
					case CLOSE:
					case CLUSTER:
					case COLLECTION:
					case COLLID:
					case COLUMN:
					case COMMENT:
					case COMMIT:
					case CONCAT:
					case CONDITION:
					case CONNECT:
					case CONNECTION:
					case CONSTRAINT:
					case CONTAINS:
					case CONTENT:
					case CONTINUE:
					case CREATE:
					case CUBE:
					case CURRENT:
					case CURRENT_LC_CTYPE:
					case CURRVAL:
					case CURSOR:
					case DATA:
					case DATABASE:
					case DAY:
					case DAYS:
					case DBINFO:
					case DECLARE:
					case DEFAULT:
					case DELETE:
					case DESCRIPTOR:
					case DETERMINISTIC:
					case DISABLE:
					case DISALLOW:
					case DISTINCT:
					case DO:
					case DOCUMENT:
					case DOUBLE:
					case DROP:
					case DSSIZE:
					case DYNAMIC:
					case EDITPROC:
					case ELSE:
					case ELSEIF:
					case ENCODING:
					case ENCRYPTION:
					case END:
					case END_EXEC:
					case ENDING:
					case ERASE:
					case ESCAPE:
					case EXCEPT:
					case EXCEPTION:
					case EXEC_SQL:
					case EXECUTE:
					case EXISTS:
					case EXIT:
					case EXPLAIN:
					case EXTERNAL:
					case FENCED:
					case FETCH:
					case FIELDPROC:
					case FINAL:
					case FIRST:
					case FOR:
					case FREE:
					case FROM:
					case FULL:
					case FUNCTION:
					case GENERATED:
					case GET:
					case GLOBAL:
					case GO:
					case GOTO:
					case GRANT:
					case GROUP:
					case HANDLER:
					case HAVING:
					case HOLD:
					case HOUR:
					case HOURS:
					case IF:
					case IMMEDIATE:
					case IN:
					case INCLUSIVE:
					case INDEX:
					case INDEXBP:
					case INHERIT:
					case INNER:
					case INOUT:
					case INSENSITIVE:
					case INSERT:
					case INTERSECT:
					case INTO:
					case IS:
					case ISOBID:
					case ITERATE:
					case JAR:
					case JOIN:
					case KEEP:
					case KEY:
					case LABEL:
					case LANGUAGE:
					case LAST:
					case LC_CTYPE:
					case LEAVE:
					case LEFT:
					case LIKE:
					case LIMIT:
					case LOCAL:
					case LOCALE:
					case LOCATOR:
					case LOCATORS:
					case LOCK:
					case LOCKMAX:
					case LOCKSIZE:
					case LONG:
					case LOOP:
					case MAINTAINED:
					case MATERIALIZED:
					case MICROSECOND:
					case MICROSECONDS:
					case MODIFIES:
					case MONTH:
					case MONTHS:
					case NEXT:
					case NEXTVAL:
					case NO:
					case NONE:
					case NOT:
					case NULL:
					case NULLS:
					case NUMPARTS:
					case OBID:
					case OF:
					case OFFSET:
					case OLD:
					case ON:
					case OPEN:
					case OPTIMIZATION:
					case OPTIMIZE:
					case OR:
					case ORDER:
					case ORGANIZATION:
					case OUT:
					case OUTER:
					case PACKAGE:
					case PADDED:
					case PARAMETER:
					case PART:
					case PARTITION:
					case PARTITIONED:
					case PARTITIONING:
					case PATH:
					case PERIOD:
					case PIECESIZE:
					case PLAN:
					case PRECISION:
					case PREPARE:
					case PREVVAL:
					case PRIOR:
					case PRIQTY:
					case PRIVILEGES:
					case PROCEDURE:
					case PROGRAM:
					case PSID:
					case PUBLIC:
					case QUERY:
					case QUERYNO:
					case READS:
					case REFERENCES:
					case REFRESH:
					case RELEASE:
					case RENAME:
					case REPEAT:
					case RESIGNAL:
					case RESTRICT:
					case RESULT:
					case RESULT_SET_LOCATOR:
					case RETURN:
					case RETURNS:
					case REVOKE:
					case RIGHT:
					case ROLE:
					case ROLLBACK:
					case ROLLUP:
					case ROUND_CEILING:
					case ROUND_DOWN:
					case ROUND_FLOOR:
					case ROUND_HALF_DOWN:
					case ROUND_HALF_EVEN:
					case ROUND_HALF_UP:
					case ROUND_UP:
					case ROW:
					case ROWSET:
					case RUN:
					case SAVEPOINT:
					case SCHEMA:
					case SCRATCHPAD:
					case SECOND:
					case SECONDS:
					case SECQTY:
					case SECURITY:
					case SELECT:
					case SENSITIVE:
					case SEQUENCE:
					case SET:
					case SIGNAL:
					case SIMPLE:
					case SOME:
					case SOURCE:
					case SPECIFIC:
					case STANDARD:
					case STATEMENT:
					case STATIC:
					case STAY:
					case STOGROUP:
					case STORES:
					case STYLE:
					case SUMMARY:
					case SYNONYM:
					case SYSDATE:
					case SYSTEM:
					case SYSTIMESTAMP:
					case TABLE:
					case TABLESPACE:
					case THEN:
					case TO:
					case TRIGGER:
					case TRUNCATE:
					case TYPE:
					case UNDO:
					case UNION:
					case UNIQUE:
					case UNTIL:
					case UPDATE:
					case USING:
					case VALIDPROC:
					case VALUE:
					case VALUES:
					case VARIABLE:
					case VARIANT:
					case VCAT:
					case VERSIONING:
					case VIEW:
					case VOLATILE:
					case VOLUMES:
					case WHEN:
					case WHENEVER:
					case WHERE:
					case WHILE:
					case WITH:
					case WLM:
					case XMLCAST:
					case XMLEXISTS:
					case XMLNAMESPACES:
					case YEAR:
					case YEARS:
					case ZONE:
					case AND:
					case ARRAY_AGG:
					case ASC:
					case AVG:
					case BIT:
					case CHANGE:
					case CODEUNITS16:
					case CODEUNITS32:
					case CORR:
					case CORRELATION:
					case COUNT:
					case COUNT_BIG:
					case COVAR:
					case COVARIANCE:
					case COVARIANCE_SAMP:
					case COVAR_POP:
					case COVAR_SAMP:
					case CS:
					case CUME_DIST:
					case DENSE_RANK:
					case DESC:
					case EBCDIC:
					case EXCLUSIVE:
					case FIRST_VALUE:
					case FOLLOWING:
					case GROUPING:
					case IGNORE:
					case INDICATOR:
					case INPUT:
					case ISNULL:
					case LAG:
					case LARGE:
					case LAST_VALUE:
					case LEAD:
					case LISTAGG:
					case LOCKED:
					case LOCKS:
					case MEDIAN:
					case MINUTES:
					case MIXED:
					case NOTNULL:
					case NTH_VALUE:
					case NTILE:
					case NUMERIC:
					case OBJECT:
					case OCTETS:
					case ONLY:
					case OVER:
					case PASSING:
					case PERCENTILE_CONT:
					case PERCENTILE_DISC:
					case PERCENT_RANK:
					case PRECEDING:
					case PREVIOUS:
					case RANGE:
					case RANK:
					case RATIO_TO_REPORT:
					case READ:
					case REF:
					case REGR_AVGX:
					case REGR_AVGY:
					case REGR_COUNT:
					case REGR_ICPT:
					case REGR_INTERCEPT:
					case REGR_R2:
					case REGR_SLOPE:
					case REGR_SXX:
					case REGR_SXY:
					case REGR_SYY:
					case RESPECT:
					case ROW_NUMBER:
					case ROWS:
					case RR:
					case RS:
					case SBCS:
					case SELECTIVITY:
					case SETS:
					case SHARE:
					case SKIP_:
					case STDDEV:
					case STDDEV_POP:
					case STDDEV_SAMP:
					case SUM:
					case TOKEN:
					case UNBOUNDED:
					case UNPACK:
					case UR:
					case USE:
					case VAR:
					case VARIANCE:
					case VARIANCE_SAMP:
					case VAR_POP:
					case VAR_SAMP:
					case VARYING:
					case WITHOUT:
					case XML:
					case XMLAGG:
					case COLUMNS:
					case SQLID:
					case ORDINALITY:
					case SYSTEM_TIME:
					case BUSINESS_TIME:
					case MULTIPLIER:
					case UNNEST:
					case CROSS:
					case CALLER:
					case CLIENT:
					case POSITIONING:
					case SCROLL:
					case ACTION:
					case ASSEMBLE:
					case C_:
					case CALLED:
					case COBOL:
					case DB2:
					case DEFINER:
					case DISPATCH:
					case ENVIRONMENT:
					case FAILURE:
					case FAILURES:
					case JAVA:
					case MAIN:
					case NAME:
					case OPTIONS:
					case PARALLEL:
					case PLI:
					case REGISTERS:
					case RESIDENT:
					case SECURED:
					case SPECIAL:
					case SQL:
					case STOP:
					case SUB:
					case YES:
					case APPLICATION:
					case CHANGED:
					case COMPATIBILITY:
					case COMPRESS:
					case COPY:
					case FREEPAGE:
					case GBPCACHE:
					case INCLUDE:
					case MAXVALUE:
					case MINVALUE:
					case PCTFREE:
					case REGENERATE:
					case MASK:
					case ENABLE:
					case PERMISSION:
					case ATOMIC:
					case SQLEXCEPTION:
					case MERGE:
					case MATCHED:
					case SQLSTATE:
					case MESSAGE_TEXT:
					case OVERRIDING:
					case PORTION:
					case DB2SQL:
					case DEBUG:
					case GENERAL:
					case MODE_:
					case REXX:
					case CACHE:
					case CYCLE:
					case INCREMENT:
					case RESTART:
					case DATACLAS:
					case MGMTCLAS:
					case REMOVE:
					case STORCLAS:
					case ACCESS:
					case ACTIVATE:
					case ALWAYS:
					case APPEND:
					case ARCHIVE:
					case BUSINESS:
					case CASCADE:
					case CHANGES:
					case CONTROL:
					case DEACTIVATE:
					case DEFERRED:
					case EACH:
					case ENFORCED:
					case EXTRA:
					case FOREIGN:
					case HIDDEN_:
					case HISTORY:
					case ID:
					case IDENTITY:
					case IMPLICITLY:
					case INITIALLY:
					case INLINE:
					case OPERATION:
					case ORGANIZE:
					case OVERLAPS:
					case PACKAGE_NAME:
					case PACKAGE_SCHEMA:
					case PACKAGE_VERSION:
					case PRIMARY:
					case RESET:
					case ROTATE:
					case START:
					case SYSIBM:
					case TRANSACTION:
					case XMLSCHEMA:
					case ELEMENT:
					case URL:
					case NAMESPACE:
					case LOCATION:
					case SYSXSR:
					case ALGORITHM:
					case FIXEDLENGTH:
					case HUFFMAN:
					case LOB:
					case LOG:
					case LOGGED:
					case MAXPARTITIONS:
					case MAXROWS:
					case MEMBER:
					case MOVE:
					case PAGE:
					case PAGENUM:
					case PENDING:
					case RELATIVE:
					case SEGSIZE:
					case TRACKMOD:
					case ADDRESS:
					case ATTRIBUTES:
					case AUTHENTICATION:
					case AUTHID:
					case CONTEXT:
					case JOBNAME:
					case OWNER:
					case PROFILE:
					case QUALIFIER:
					case SERVAUTH:
					case TRUSTED:
					case SECTION:
					case ACTIVE:
					case VERSION:
					case ALIAS:
					case WORK:
					case WORKFILE:
					case SYSDEFLT:
					case NULTERM:
					case STRUCTURE:
					case GENERIC:
					case ABS:
					case ABSVAL:
					case ACOS:
					case ADD_DAYS:
					case ADD_MONTHS:
					case ARRAY_DELETE:
					case ARRAY_FIRST:
					case ARRAY_LAST:
					case ARRAY_NEXT:
					case ARRAY_PRIOR:
					case ARRAY_TRIM:
					case ASCII:
					case ASCII_CHR:
					case ASCIISTR:
					case ASCII_STR:
					case ASIN:
					case ATAN:
					case ATAN2:
					case ATANH:
					case BIGINT:
					case BINARY:
					case BITAND:
					case BITANDNOT:
					case BITNOT:
					case BITOR:
					case BITXOR:
					case BLOB:
					case BTRIM:
					case CARDINALITY:
					case CCSID_ENCODING:
					case CEIL:
					case CEILING:
					case CHAR9:
					case CHARACTER_LENGTH:
					case CHAR_LENGTH:
					case CHR:
					case CLOB:
					case COALESCE:
					case COLLATION_KEY:
					case COMPARE_DECFLOAT:
					case COS:
					case COSH:
					case DATE:
					case DAYOFMONTH:
					case DAYOFWEEK:
					case DAYOFWEEK_ISO:
					case DAYOFYEAR:
					case DAYS_BETWEEN:
					case DBCLOB:
					case DEC:
					case DECFLOAT:
					case DECFLOAT_FORMAT:
					case DECFLOAT_SORTKEY:
					case DECIMAL:
					case DECODE:
					case DECRYPT_BINARY:
					case DECRYPT_BIT:
					case DECRYPT_CHAR:
					case DECRYPT_DATAKEY_BIGINT:
					case DECRYPT_DATAKEY_BIT:
					case DECRYPT_DATAKEY_CLOB:
					case DECRYPT_DATAKEY_DBCLOB:
					case DECRYPT_DATAKEY_DECIMAL:
					case DECRYPT_DATAKEY_INTEGER:
					case DECRYPT_DATAKEY_VARCHAR:
					case DECRYPT_DATAKEY_VARGRAPHIC:
					case DECRYPT_DB:
					case DEGREES:
					case DIFFERENCE:
					case DIGITS:
					case DOUBLE_PRECISION:
					case DSN_XMLVALIDATE:
					case EBCDIC_CHR:
					case EBCDIC_STR:
					case ENCRYPT_DATAKEY:
					case ENCRYPT_TDES:
					case EXP:
					case EXTRACT:
					case FLOAT:
					case FLOOR:
					case GENERATE_UNIQUE:
					case GENERATE_UNIQUE_BINARY:
					case GETHINT:
					case GETVARIABLE:
					case GRAPHIC:
					case GREATEST:
					case HASH:
					case HASH_CRC32:
					case HASH_MD5:
					case HASH_SHA1:
					case HASH_SHA256:
					case HEX:
					case IDENTITY_VAL_LOCAL:
					case IFNULL:
					case INSTR:
					case INT:
					case INTEGER:
					case JULIAN_DAY:
					case LAST_DAY:
					case LCASE:
					case LEAST:
					case LENGTH:
					case LN:
					case LOCATE:
					case LOCATE_IN_STRING:
					case LOG10:
					case LOWER:
					case LPAD:
					case LTRIM:
					case MAX:
					case MAX_CARDINALITY:
					case MIDNIGHT_SECONDS:
					case MIN:
					case MINUTE:
					case MOD:
					case MONTHS_BETWEEN:
					case MQREAD:
					case MQREADCLOB:
					case MQRECEIVE:
					case MQRECEIVECLOB:
					case MQSEND:
					case MULTIPLY_ALT:
					case NEXT_DAY:
					case NEXT_MONTH:
					case NORMALIZE_DECFLOAT:
					case NORMALIZE_STRING:
					case NULLIF:
					case NVL:
					case OVERLAY:
					case PACK:
					case POSITION:
					case POSSTR:
					case POW:
					case POWER:
					case QUANTIZE:
					case QUARTER:
					case RADIANS:
					case RAISE_ERROR:
					case RAND:
					case RANDOM:
					case REAL:
					case REGEXP_COUNT:
					case REGEXP_INSTR:
					case REGEXP_LIKE:
					case REGEXP_REPLACE:
					case REGEXP_SUBSTR:
					case REPLACE:
					case RID:
					case ROUND:
					case ROUND_TIMESTAMP:
					case ROWID:
					case RPAD:
					case RTRIM:
					case SCORE:
					case SIGN:
					case SIN:
					case SINH:
					case SMALLINT:
					case SOAPHTTPC:
					case SOAPHTTPNC:
					case SOAPHTTPNV:
					case SOAPHTTPV:
					case SOUNDEX:
					case SPACE:
					case SQRT:
					case STRIP:
					case STRLEFT:
					case STRPOS:
					case STRRIGHT:
					case SUBSTR:
					case SUBSTRING:
					case TAN:
					case TANH:
					case TIME:
					case TIMESTAMP:
					case TIMESTAMPADD:
					case TIMESTAMPDIFF:
					case TIMESTAMP_FORMAT:
					case TIMESTAMP_ISO:
					case TIMESTAMP_TZ:
					case TO_CHAR:
					case TO_CLOB:
					case TO_DATE:
					case TO_NUMBER:
					case TOTALORDER:
					case TO_TIMESTAMP:
					case TRANSLATE:
					case TRIM:
					case TRIM_ARRAY:
					case TRUNC:
					case TRUNC_TIMESTAMP:
					case UCASE:
					case UNICODE:
					case UNICODE_STR:
					case UNISTR:
					case UPPER:
					case VARBINARY:
					case VARCHAR:
					case VARCHAR9:
					case VARCHAR_BIT_FORMAT:
					case VARCHAR_FORMAT:
					case VARGRAPHIC:
					case VERIFY_GROUP_FOR_USER:
					case VERIFY_ROLE_FOR_USER:
					case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
					case WEEK:
					case WEEK_ISO:
					case WRAP:
					case XMLATTRIBUTES:
					case XMLCOMMENT:
					case XMLCONCAT:
					case XMLDOCUMENT:
					case XMLELEMENT:
					case XMLFOREST:
					case XMLMODIFY:
					case XMLPARSE:
					case XMLPI:
					case XMLQUERY:
					case XMLSERIALIZE:
					case XMLTEXT:
					case XMLXSROBJECTID:
					case XSLTRANSFORM:
					case CURRENT_ACCELERATOR:
					case CURRENT_APPLICATION_COMPATIBILITY:
					case CURRENT_APPLICATION_ENCODING_SCHEME:
					case CURRENT_CLIENT_ACCTNG:
					case CURRENT_CLIENT_APPLNAME:
					case CURRENT_CLIENT_CORR_TOKEN:
					case CURRENT_CLIENT_USERID:
					case CURRENT_CLIENT_WRKSTNNAME:
					case CURRENT_DATE:
					case CURRENT_DEBUG_MODE:
					case CURRENT_DECFLOAT_ROUNDING_MODE:
					case CURRENT_DEGREE:
					case CURRENT_EXPLAIN_MODE:
					case CURRENT_GET_ACCEL_ARCHIVE:
					case CURRENT_LOCALE_LC_CTYPE:
					case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
					case CURRENT_MEMBER:
					case CURRENT_OPTIMIZATION_HINT:
					case CURRENT_PACKAGE_PATH:
					case CURRENT_PACKAGESET:
					case CURRENT_PATH:
					case CURRENT_PRECISION:
					case CURRENT_QUERY_ACCELERATION:
					case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
					case CURRENT_REFRESH_AGE:
					case CURRENT_ROUTINE_VERSION:
					case CURRENT_RULES:
					case CURRENT_SCHEMA:
					case CURRENT_SERVER:
					case CURRENT_SQLID:
					case CURRENT_TEMPORAL_BUSINESS_TIME:
					case CURRENT_TEMPORAL_SYSTEM_TIME:
					case CURRENT_TIME:
					case CURRENT_TIMESTAMP:
					case CURRENT_TIME_ZONE:
					case ENCRYPTION_PASSWORD:
					case SESSION_TIME_ZONE:
					case SESSION_USER:
					case USER:
					case ADMIN_TASK_LIST:
					case ADMIN_TASK_OUTPUT:
					case ADMIN_TASK_STATUS:
					case BLOCKING_THREADS:
					case MQREADALL:
					case MQREADALLCLOB:
					case MQRECEIVEALL:
					case MQRECEIVEALLCLOB:
					case XMLTABLE:
					case SQLIDENTIFIER:
						{
						setState(5155);
						identifier();
						}
						break;
					case NUMERICLITERAL:
						{
						setState(5156);
						match(NUMERICLITERAL);
						}
						break;
					case INTEGERLITERAL:
						{
						setState(5157);
						match(INTEGERLITERAL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					} 
				}
				setState(5164);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,607,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SchemaNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSchemaName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSchemaName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSchemaName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SchemaNameContext schemaName() throws RecognitionException {
		SchemaNameContext _localctx = new SchemaNameContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_schemaName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5165);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public CorrelationNameContext correlationName() {
			return getRuleContext(CorrelationNameContext.class,0);
		}
		public LocationNameContext locationName() {
			return getRuleContext(LocationNameContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(DB2zSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(DB2zSQLParser.DOT, i);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableNameContext tableName() throws RecognitionException {
		TableNameContext _localctx = new TableNameContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_tableName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5175);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,608,_ctx) ) {
			case 1:
				{
				{
				setState(5167);
				locationName();
				setState(5168);
				match(DOT);
				setState(5169);
				schemaName();
				setState(5170);
				match(DOT);
				}
				}
				break;
			case 2:
				{
				{
				setState(5172);
				schemaName();
				setState(5173);
				match(DOT);
				}
				}
				break;
			}
			setState(5177);
			identifier();
			setState(5179);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,609,_ctx) ) {
			case 1:
				{
				setState(5178);
				correlationName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public LocationNameContext locationName() {
			return getRuleContext(LocationNameContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(DB2zSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(DB2zSQLParser.DOT, i);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public AlterTableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAlterTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAlterTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAlterTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableNameContext alterTableName() throws RecognitionException {
		AlterTableNameContext _localctx = new AlterTableNameContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_alterTableName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5189);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,610,_ctx) ) {
			case 1:
				{
				{
				setState(5181);
				locationName();
				setState(5182);
				match(DOT);
				setState(5183);
				schemaName();
				setState(5184);
				match(DOT);
				}
				}
				break;
			case 2:
				{
				{
				setState(5186);
				schemaName();
				setState(5187);
				match(DOT);
				}
				}
				break;
			}
			setState(5191);
			identifier();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AuxTableNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public LocationNameContext locationName() {
			return getRuleContext(LocationNameContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(DB2zSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(DB2zSQLParser.DOT, i);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public AuxTableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_auxTableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAuxTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAuxTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAuxTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AuxTableNameContext auxTableName() throws RecognitionException {
		AuxTableNameContext _localctx = new AuxTableNameContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_auxTableName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5201);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,611,_ctx) ) {
			case 1:
				{
				{
				setState(5193);
				locationName();
				setState(5194);
				match(DOT);
				setState(5195);
				schemaName();
				setState(5196);
				match(DOT);
				}
				}
				break;
			case 2:
				{
				{
				setState(5198);
				schemaName();
				setState(5199);
				match(DOT);
				}
				}
				break;
			}
			setState(5203);
			identifier();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HistoryTableNameContext extends ParserRuleContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public HistoryTableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_historyTableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterHistoryTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitHistoryTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitHistoryTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HistoryTableNameContext historyTableName() throws RecognitionException {
		HistoryTableNameContext _localctx = new HistoryTableNameContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_historyTableName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5205);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CloneTableNameContext extends ParserRuleContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public CloneTableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cloneTableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCloneTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCloneTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCloneTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CloneTableNameContext cloneTableName() throws RecognitionException {
		CloneTableNameContext _localctx = new CloneTableNameContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_cloneTableName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5207);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArchiveTableNameContext extends ParserRuleContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public ArchiveTableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_archiveTableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterArchiveTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitArchiveTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitArchiveTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArchiveTableNameContext archiveTableName() throws RecognitionException {
		ArchiveTableNameContext _localctx = new ArchiveTableNameContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_archiveTableName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5209);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ViewNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public CorrelationNameContext correlationName() {
			return getRuleContext(CorrelationNameContext.class,0);
		}
		public LocationNameContext locationName() {
			return getRuleContext(LocationNameContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(DB2zSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(DB2zSQLParser.DOT, i);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public ViewNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterViewName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitViewName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitViewName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ViewNameContext viewName() throws RecognitionException {
		ViewNameContext _localctx = new ViewNameContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_viewName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5219);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,612,_ctx) ) {
			case 1:
				{
				{
				setState(5211);
				locationName();
				setState(5212);
				match(DOT);
				setState(5213);
				schemaName();
				setState(5214);
				match(DOT);
				}
				}
				break;
			case 2:
				{
				{
				setState(5216);
				schemaName();
				setState(5217);
				match(DOT);
				}
				}
				break;
			}
			setState(5221);
			identifier();
			setState(5223);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,613,_ctx) ) {
			case 1:
				{
				setState(5222);
				correlationName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProgramNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ProgramNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_programName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterProgramName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitProgramName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitProgramName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProgramNameContext programName() throws RecognitionException {
		ProgramNameContext _localctx = new ProgramNameContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_programName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5225);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PackageNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public PackageNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_packageName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPackageName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPackageName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPackageName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PackageNameContext packageName() throws RecognitionException {
		PackageNameContext _localctx = new PackageNameContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_packageName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5227);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PlanNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public PlanNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_planName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPlanName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPlanName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPlanName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PlanNameContext planName() throws RecognitionException {
		PlanNameContext _localctx = new PlanNameContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_planName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5229);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypeNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTypeName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTypeName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTypeName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypeNameContext typeName() throws RecognitionException {
		TypeNameContext _localctx = new TypeNameContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_typeName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5231);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public VariableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterVariableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitVariableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitVariableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableNameContext variableName() throws RecognitionException {
		VariableNameContext _localctx = new VariableNameContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_variableName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5233);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AliasNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public AliasNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aliasName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAliasName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAliasName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAliasName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AliasNameContext aliasName() throws RecognitionException {
		AliasNameContext _localctx = new AliasNameContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_aliasName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5235);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ConstraintNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterConstraintName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitConstraintName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitConstraintName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintNameContext constraintName() throws RecognitionException {
		ConstraintNameContext _localctx = new ConstraintNameContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_constraintName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5237);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoutineVersionIDContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> NUMERICLITERAL() { return getTokens(DB2zSQLParser.NUMERICLITERAL); }
		public TerminalNode NUMERICLITERAL(int i) {
			return getToken(DB2zSQLParser.NUMERICLITERAL, i);
		}
		public List<TerminalNode> INTEGERLITERAL() { return getTokens(DB2zSQLParser.INTEGERLITERAL); }
		public TerminalNode INTEGERLITERAL(int i) {
			return getToken(DB2zSQLParser.INTEGERLITERAL, i);
		}
		public List<TerminalNode> DOT() { return getTokens(DB2zSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(DB2zSQLParser.DOT, i);
		}
		public RoutineVersionIDContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routineVersionID; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRoutineVersionID(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRoutineVersionID(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRoutineVersionID(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoutineVersionIDContext routineVersionID() throws RecognitionException {
		RoutineVersionIDContext _localctx = new RoutineVersionIDContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_routineVersionID);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5242);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case ALL:
			case ALLOCATE:
			case ALLOW:
			case ALTER:
			case ALTERAND:
			case ANY:
			case ARRAY:
			case ARRAY_EXISTS:
			case AS:
			case ASENSITIVE:
			case ASSOCIATE:
			case ASUTIME:
			case AT:
			case AUDIT:
			case AUX:
			case AUXILIARY:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BUFFERPOOL:
			case BY:
			case CALL:
			case CAPTURE:
			case CASCADED:
			case CASE:
			case CAST:
			case CCSID:
			case CHAR:
			case CHARACTER:
			case CHECK:
			case CLONE:
			case CLOSE:
			case CLUSTER:
			case COLLECTION:
			case COLLID:
			case COLUMN:
			case COMMENT:
			case COMMIT:
			case CONCAT:
			case CONDITION:
			case CONNECT:
			case CONNECTION:
			case CONSTRAINT:
			case CONTAINS:
			case CONTENT:
			case CONTINUE:
			case CREATE:
			case CUBE:
			case CURRENT:
			case CURRENT_LC_CTYPE:
			case CURRVAL:
			case CURSOR:
			case DATA:
			case DATABASE:
			case DAY:
			case DAYS:
			case DBINFO:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DISABLE:
			case DISALLOW:
			case DISTINCT:
			case DO:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSSIZE:
			case DYNAMIC:
			case EDITPROC:
			case ELSE:
			case ELSEIF:
			case ENCODING:
			case ENCRYPTION:
			case END:
			case END_EXEC:
			case ENDING:
			case ERASE:
			case ESCAPE:
			case EXCEPT:
			case EXCEPTION:
			case EXEC_SQL:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case FENCED:
			case FETCH:
			case FIELDPROC:
			case FINAL:
			case FIRST:
			case FOR:
			case FREE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANT:
			case GROUP:
			case HANDLER:
			case HAVING:
			case HOLD:
			case HOUR:
			case HOURS:
			case IF:
			case IMMEDIATE:
			case IN:
			case INCLUSIVE:
			case INDEX:
			case INDEXBP:
			case INHERIT:
			case INNER:
			case INOUT:
			case INSENSITIVE:
			case INSERT:
			case INTERSECT:
			case INTO:
			case IS:
			case ISOBID:
			case ITERATE:
			case JAR:
			case JOIN:
			case KEEP:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LAST:
			case LC_CTYPE:
			case LEAVE:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOCALE:
			case LOCATOR:
			case LOCATORS:
			case LOCK:
			case LOCKMAX:
			case LOCKSIZE:
			case LONG:
			case LOOP:
			case MAINTAINED:
			case MATERIALIZED:
			case MICROSECOND:
			case MICROSECONDS:
			case MODIFIES:
			case MONTH:
			case MONTHS:
			case NEXT:
			case NEXTVAL:
			case NO:
			case NONE:
			case NOT:
			case NULL:
			case NULLS:
			case NUMPARTS:
			case OBID:
			case OF:
			case OFFSET:
			case OLD:
			case ON:
			case OPEN:
			case OPTIMIZATION:
			case OPTIMIZE:
			case OR:
			case ORDER:
			case ORGANIZATION:
			case OUT:
			case OUTER:
			case PACKAGE:
			case PADDED:
			case PARAMETER:
			case PART:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONING:
			case PATH:
			case PERIOD:
			case PIECESIZE:
			case PLAN:
			case PRECISION:
			case PREPARE:
			case PREVVAL:
			case PRIOR:
			case PRIQTY:
			case PRIVILEGES:
			case PROCEDURE:
			case PROGRAM:
			case PSID:
			case PUBLIC:
			case QUERY:
			case QUERYNO:
			case READS:
			case REFERENCES:
			case REFRESH:
			case RELEASE:
			case RENAME:
			case REPEAT:
			case RESIGNAL:
			case RESTRICT:
			case RESULT:
			case RESULT_SET_LOCATOR:
			case RETURN:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUND_CEILING:
			case ROUND_DOWN:
			case ROUND_FLOOR:
			case ROUND_HALF_DOWN:
			case ROUND_HALF_EVEN:
			case ROUND_HALF_UP:
			case ROUND_UP:
			case ROW:
			case ROWSET:
			case RUN:
			case SAVEPOINT:
			case SCHEMA:
			case SCRATCHPAD:
			case SECOND:
			case SECONDS:
			case SECQTY:
			case SECURITY:
			case SELECT:
			case SENSITIVE:
			case SEQUENCE:
			case SET:
			case SIGNAL:
			case SIMPLE:
			case SOME:
			case SOURCE:
			case SPECIFIC:
			case STANDARD:
			case STATEMENT:
			case STATIC:
			case STAY:
			case STOGROUP:
			case STORES:
			case STYLE:
			case SUMMARY:
			case SYNONYM:
			case SYSDATE:
			case SYSTEM:
			case SYSTIMESTAMP:
			case TABLE:
			case TABLESPACE:
			case THEN:
			case TO:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNDO:
			case UNION:
			case UNIQUE:
			case UNTIL:
			case UPDATE:
			case USING:
			case VALIDPROC:
			case VALUE:
			case VALUES:
			case VARIABLE:
			case VARIANT:
			case VCAT:
			case VERSIONING:
			case VIEW:
			case VOLATILE:
			case VOLUMES:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WLM:
			case XMLCAST:
			case XMLEXISTS:
			case XMLNAMESPACES:
			case YEAR:
			case YEARS:
			case ZONE:
			case AND:
			case ARRAY_AGG:
			case ASC:
			case AVG:
			case BIT:
			case CHANGE:
			case CODEUNITS16:
			case CODEUNITS32:
			case CORR:
			case CORRELATION:
			case COUNT:
			case COUNT_BIG:
			case COVAR:
			case COVARIANCE:
			case COVARIANCE_SAMP:
			case COVAR_POP:
			case COVAR_SAMP:
			case CS:
			case CUME_DIST:
			case DENSE_RANK:
			case DESC:
			case EBCDIC:
			case EXCLUSIVE:
			case FIRST_VALUE:
			case FOLLOWING:
			case GROUPING:
			case IGNORE:
			case INDICATOR:
			case INPUT:
			case ISNULL:
			case LAG:
			case LARGE:
			case LAST_VALUE:
			case LEAD:
			case LISTAGG:
			case LOCKED:
			case LOCKS:
			case MEDIAN:
			case MINUTES:
			case MIXED:
			case NOTNULL:
			case NTH_VALUE:
			case NTILE:
			case NUMERIC:
			case OBJECT:
			case OCTETS:
			case ONLY:
			case OVER:
			case PASSING:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PERCENT_RANK:
			case PRECEDING:
			case PREVIOUS:
			case RANGE:
			case RANK:
			case RATIO_TO_REPORT:
			case READ:
			case REF:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_ICPT:
			case REGR_INTERCEPT:
			case REGR_R2:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case RESPECT:
			case ROW_NUMBER:
			case ROWS:
			case RR:
			case RS:
			case SBCS:
			case SELECTIVITY:
			case SETS:
			case SHARE:
			case SKIP_:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case TOKEN:
			case UNBOUNDED:
			case UNPACK:
			case UR:
			case USE:
			case VAR:
			case VARIANCE:
			case VARIANCE_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARYING:
			case WITHOUT:
			case XML:
			case XMLAGG:
			case COLUMNS:
			case SQLID:
			case ORDINALITY:
			case SYSTEM_TIME:
			case BUSINESS_TIME:
			case MULTIPLIER:
			case UNNEST:
			case CROSS:
			case CALLER:
			case CLIENT:
			case POSITIONING:
			case SCROLL:
			case ACTION:
			case ASSEMBLE:
			case C_:
			case CALLED:
			case COBOL:
			case DB2:
			case DEFINER:
			case DISPATCH:
			case ENVIRONMENT:
			case FAILURE:
			case FAILURES:
			case JAVA:
			case MAIN:
			case NAME:
			case OPTIONS:
			case PARALLEL:
			case PLI:
			case REGISTERS:
			case RESIDENT:
			case SECURED:
			case SPECIAL:
			case SQL:
			case STOP:
			case SUB:
			case YES:
			case APPLICATION:
			case CHANGED:
			case COMPATIBILITY:
			case COMPRESS:
			case COPY:
			case FREEPAGE:
			case GBPCACHE:
			case INCLUDE:
			case MAXVALUE:
			case MINVALUE:
			case PCTFREE:
			case REGENERATE:
			case MASK:
			case ENABLE:
			case PERMISSION:
			case ATOMIC:
			case SQLEXCEPTION:
			case MERGE:
			case MATCHED:
			case SQLSTATE:
			case MESSAGE_TEXT:
			case OVERRIDING:
			case PORTION:
			case DB2SQL:
			case DEBUG:
			case GENERAL:
			case MODE_:
			case REXX:
			case CACHE:
			case CYCLE:
			case INCREMENT:
			case RESTART:
			case DATACLAS:
			case MGMTCLAS:
			case REMOVE:
			case STORCLAS:
			case ACCESS:
			case ACTIVATE:
			case ALWAYS:
			case APPEND:
			case ARCHIVE:
			case BUSINESS:
			case CASCADE:
			case CHANGES:
			case CONTROL:
			case DEACTIVATE:
			case DEFERRED:
			case EACH:
			case ENFORCED:
			case EXTRA:
			case FOREIGN:
			case HIDDEN_:
			case HISTORY:
			case ID:
			case IDENTITY:
			case IMPLICITLY:
			case INITIALLY:
			case INLINE:
			case OPERATION:
			case ORGANIZE:
			case OVERLAPS:
			case PACKAGE_NAME:
			case PACKAGE_SCHEMA:
			case PACKAGE_VERSION:
			case PRIMARY:
			case RESET:
			case ROTATE:
			case START:
			case SYSIBM:
			case TRANSACTION:
			case XMLSCHEMA:
			case ELEMENT:
			case URL:
			case NAMESPACE:
			case LOCATION:
			case SYSXSR:
			case ALGORITHM:
			case FIXEDLENGTH:
			case HUFFMAN:
			case LOB:
			case LOG:
			case LOGGED:
			case MAXPARTITIONS:
			case MAXROWS:
			case MEMBER:
			case MOVE:
			case PAGE:
			case PAGENUM:
			case PENDING:
			case RELATIVE:
			case SEGSIZE:
			case TRACKMOD:
			case ADDRESS:
			case ATTRIBUTES:
			case AUTHENTICATION:
			case AUTHID:
			case CONTEXT:
			case JOBNAME:
			case OWNER:
			case PROFILE:
			case QUALIFIER:
			case SERVAUTH:
			case TRUSTED:
			case SECTION:
			case ACTIVE:
			case VERSION:
			case ALIAS:
			case WORK:
			case WORKFILE:
			case SYSDEFLT:
			case NULTERM:
			case STRUCTURE:
			case GENERIC:
			case ABS:
			case ABSVAL:
			case ACOS:
			case ADD_DAYS:
			case ADD_MONTHS:
			case ARRAY_DELETE:
			case ARRAY_FIRST:
			case ARRAY_LAST:
			case ARRAY_NEXT:
			case ARRAY_PRIOR:
			case ARRAY_TRIM:
			case ASCII:
			case ASCII_CHR:
			case ASCIISTR:
			case ASCII_STR:
			case ASIN:
			case ATAN:
			case ATAN2:
			case ATANH:
			case BIGINT:
			case BINARY:
			case BITAND:
			case BITANDNOT:
			case BITNOT:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BTRIM:
			case CARDINALITY:
			case CCSID_ENCODING:
			case CEIL:
			case CEILING:
			case CHAR9:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case CHR:
			case CLOB:
			case COALESCE:
			case COLLATION_KEY:
			case COMPARE_DECFLOAT:
			case COS:
			case COSH:
			case DATE:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFWEEK_ISO:
			case DAYOFYEAR:
			case DAYS_BETWEEN:
			case DBCLOB:
			case DEC:
			case DECFLOAT:
			case DECFLOAT_FORMAT:
			case DECFLOAT_SORTKEY:
			case DECIMAL:
			case DECODE:
			case DECRYPT_BINARY:
			case DECRYPT_BIT:
			case DECRYPT_CHAR:
			case DECRYPT_DATAKEY_BIGINT:
			case DECRYPT_DATAKEY_BIT:
			case DECRYPT_DATAKEY_CLOB:
			case DECRYPT_DATAKEY_DBCLOB:
			case DECRYPT_DATAKEY_DECIMAL:
			case DECRYPT_DATAKEY_INTEGER:
			case DECRYPT_DATAKEY_VARCHAR:
			case DECRYPT_DATAKEY_VARGRAPHIC:
			case DECRYPT_DB:
			case DEGREES:
			case DIFFERENCE:
			case DIGITS:
			case DOUBLE_PRECISION:
			case DSN_XMLVALIDATE:
			case EBCDIC_CHR:
			case EBCDIC_STR:
			case ENCRYPT_DATAKEY:
			case ENCRYPT_TDES:
			case EXP:
			case EXTRACT:
			case FLOAT:
			case FLOOR:
			case GENERATE_UNIQUE:
			case GENERATE_UNIQUE_BINARY:
			case GETHINT:
			case GETVARIABLE:
			case GRAPHIC:
			case GREATEST:
			case HASH:
			case HASH_CRC32:
			case HASH_MD5:
			case HASH_SHA1:
			case HASH_SHA256:
			case HEX:
			case IDENTITY_VAL_LOCAL:
			case IFNULL:
			case INSTR:
			case INT:
			case INTEGER:
			case JULIAN_DAY:
			case LAST_DAY:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LN:
			case LOCATE:
			case LOCATE_IN_STRING:
			case LOG10:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAX:
			case MAX_CARDINALITY:
			case MIDNIGHT_SECONDS:
			case MIN:
			case MINUTE:
			case MOD:
			case MONTHS_BETWEEN:
			case MQREAD:
			case MQREADCLOB:
			case MQRECEIVE:
			case MQRECEIVECLOB:
			case MQSEND:
			case MULTIPLY_ALT:
			case NEXT_DAY:
			case NEXT_MONTH:
			case NORMALIZE_DECFLOAT:
			case NORMALIZE_STRING:
			case NULLIF:
			case NVL:
			case OVERLAY:
			case PACK:
			case POSITION:
			case POSSTR:
			case POW:
			case POWER:
			case QUANTIZE:
			case QUARTER:
			case RADIANS:
			case RAISE_ERROR:
			case RAND:
			case RANDOM:
			case REAL:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REPLACE:
			case RID:
			case ROUND:
			case ROUND_TIMESTAMP:
			case ROWID:
			case RPAD:
			case RTRIM:
			case SCORE:
			case SIGN:
			case SIN:
			case SINH:
			case SMALLINT:
			case SOAPHTTPC:
			case SOAPHTTPNC:
			case SOAPHTTPNV:
			case SOAPHTTPV:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STRIP:
			case STRLEFT:
			case STRPOS:
			case STRRIGHT:
			case SUBSTR:
			case SUBSTRING:
			case TAN:
			case TANH:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIMESTAMP_FORMAT:
			case TIMESTAMP_ISO:
			case TIMESTAMP_TZ:
			case TO_CHAR:
			case TO_CLOB:
			case TO_DATE:
			case TO_NUMBER:
			case TOTALORDER:
			case TO_TIMESTAMP:
			case TRANSLATE:
			case TRIM:
			case TRIM_ARRAY:
			case TRUNC:
			case TRUNC_TIMESTAMP:
			case UCASE:
			case UNICODE:
			case UNICODE_STR:
			case UNISTR:
			case UPPER:
			case VARBINARY:
			case VARCHAR:
			case VARCHAR9:
			case VARCHAR_BIT_FORMAT:
			case VARCHAR_FORMAT:
			case VARGRAPHIC:
			case VERIFY_GROUP_FOR_USER:
			case VERIFY_ROLE_FOR_USER:
			case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
			case WEEK:
			case WEEK_ISO:
			case WRAP:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLCONCAT:
			case XMLDOCUMENT:
			case XMLELEMENT:
			case XMLFOREST:
			case XMLMODIFY:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLSERIALIZE:
			case XMLTEXT:
			case XMLXSROBJECTID:
			case XSLTRANSFORM:
			case CURRENT_ACCELERATOR:
			case CURRENT_APPLICATION_COMPATIBILITY:
			case CURRENT_APPLICATION_ENCODING_SCHEME:
			case CURRENT_CLIENT_ACCTNG:
			case CURRENT_CLIENT_APPLNAME:
			case CURRENT_CLIENT_CORR_TOKEN:
			case CURRENT_CLIENT_USERID:
			case CURRENT_CLIENT_WRKSTNNAME:
			case CURRENT_DATE:
			case CURRENT_DEBUG_MODE:
			case CURRENT_DECFLOAT_ROUNDING_MODE:
			case CURRENT_DEGREE:
			case CURRENT_EXPLAIN_MODE:
			case CURRENT_GET_ACCEL_ARCHIVE:
			case CURRENT_LOCALE_LC_CTYPE:
			case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
			case CURRENT_MEMBER:
			case CURRENT_OPTIMIZATION_HINT:
			case CURRENT_PACKAGE_PATH:
			case CURRENT_PACKAGESET:
			case CURRENT_PATH:
			case CURRENT_PRECISION:
			case CURRENT_QUERY_ACCELERATION:
			case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
			case CURRENT_REFRESH_AGE:
			case CURRENT_ROUTINE_VERSION:
			case CURRENT_RULES:
			case CURRENT_SCHEMA:
			case CURRENT_SERVER:
			case CURRENT_SQLID:
			case CURRENT_TEMPORAL_BUSINESS_TIME:
			case CURRENT_TEMPORAL_SYSTEM_TIME:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_TIME_ZONE:
			case ENCRYPTION_PASSWORD:
			case SESSION_TIME_ZONE:
			case SESSION_USER:
			case USER:
			case ADMIN_TASK_LIST:
			case ADMIN_TASK_OUTPUT:
			case ADMIN_TASK_STATUS:
			case BLOCKING_THREADS:
			case MQREADALL:
			case MQREADALLCLOB:
			case MQRECEIVEALL:
			case MQRECEIVEALLCLOB:
			case XMLTABLE:
			case SQLIDENTIFIER:
				{
				setState(5239);
				identifier();
				}
				break;
			case NUMERICLITERAL:
				{
				setState(5240);
				match(NUMERICLITERAL);
				}
				break;
			case INTEGERLITERAL:
				{
				setState(5241);
				match(INTEGERLITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5254);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,617,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5245);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DOT) {
						{
						setState(5244);
						match(DOT);
						}
					}

					setState(5250);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ADD:
					case AFTER:
					case ALL:
					case ALLOCATE:
					case ALLOW:
					case ALTER:
					case ALTERAND:
					case ANY:
					case ARRAY:
					case ARRAY_EXISTS:
					case AS:
					case ASENSITIVE:
					case ASSOCIATE:
					case ASUTIME:
					case AT:
					case AUDIT:
					case AUX:
					case AUXILIARY:
					case BEFORE:
					case BEGIN:
					case BETWEEN:
					case BUFFERPOOL:
					case BY:
					case CALL:
					case CAPTURE:
					case CASCADED:
					case CASE:
					case CAST:
					case CCSID:
					case CHAR:
					case CHARACTER:
					case CHECK:
					case CLONE:
					case CLOSE:
					case CLUSTER:
					case COLLECTION:
					case COLLID:
					case COLUMN:
					case COMMENT:
					case COMMIT:
					case CONCAT:
					case CONDITION:
					case CONNECT:
					case CONNECTION:
					case CONSTRAINT:
					case CONTAINS:
					case CONTENT:
					case CONTINUE:
					case CREATE:
					case CUBE:
					case CURRENT:
					case CURRENT_LC_CTYPE:
					case CURRVAL:
					case CURSOR:
					case DATA:
					case DATABASE:
					case DAY:
					case DAYS:
					case DBINFO:
					case DECLARE:
					case DEFAULT:
					case DELETE:
					case DESCRIPTOR:
					case DETERMINISTIC:
					case DISABLE:
					case DISALLOW:
					case DISTINCT:
					case DO:
					case DOCUMENT:
					case DOUBLE:
					case DROP:
					case DSSIZE:
					case DYNAMIC:
					case EDITPROC:
					case ELSE:
					case ELSEIF:
					case ENCODING:
					case ENCRYPTION:
					case END:
					case END_EXEC:
					case ENDING:
					case ERASE:
					case ESCAPE:
					case EXCEPT:
					case EXCEPTION:
					case EXEC_SQL:
					case EXECUTE:
					case EXISTS:
					case EXIT:
					case EXPLAIN:
					case EXTERNAL:
					case FENCED:
					case FETCH:
					case FIELDPROC:
					case FINAL:
					case FIRST:
					case FOR:
					case FREE:
					case FROM:
					case FULL:
					case FUNCTION:
					case GENERATED:
					case GET:
					case GLOBAL:
					case GO:
					case GOTO:
					case GRANT:
					case GROUP:
					case HANDLER:
					case HAVING:
					case HOLD:
					case HOUR:
					case HOURS:
					case IF:
					case IMMEDIATE:
					case IN:
					case INCLUSIVE:
					case INDEX:
					case INDEXBP:
					case INHERIT:
					case INNER:
					case INOUT:
					case INSENSITIVE:
					case INSERT:
					case INTERSECT:
					case INTO:
					case IS:
					case ISOBID:
					case ITERATE:
					case JAR:
					case JOIN:
					case KEEP:
					case KEY:
					case LABEL:
					case LANGUAGE:
					case LAST:
					case LC_CTYPE:
					case LEAVE:
					case LEFT:
					case LIKE:
					case LIMIT:
					case LOCAL:
					case LOCALE:
					case LOCATOR:
					case LOCATORS:
					case LOCK:
					case LOCKMAX:
					case LOCKSIZE:
					case LONG:
					case LOOP:
					case MAINTAINED:
					case MATERIALIZED:
					case MICROSECOND:
					case MICROSECONDS:
					case MODIFIES:
					case MONTH:
					case MONTHS:
					case NEXT:
					case NEXTVAL:
					case NO:
					case NONE:
					case NOT:
					case NULL:
					case NULLS:
					case NUMPARTS:
					case OBID:
					case OF:
					case OFFSET:
					case OLD:
					case ON:
					case OPEN:
					case OPTIMIZATION:
					case OPTIMIZE:
					case OR:
					case ORDER:
					case ORGANIZATION:
					case OUT:
					case OUTER:
					case PACKAGE:
					case PADDED:
					case PARAMETER:
					case PART:
					case PARTITION:
					case PARTITIONED:
					case PARTITIONING:
					case PATH:
					case PERIOD:
					case PIECESIZE:
					case PLAN:
					case PRECISION:
					case PREPARE:
					case PREVVAL:
					case PRIOR:
					case PRIQTY:
					case PRIVILEGES:
					case PROCEDURE:
					case PROGRAM:
					case PSID:
					case PUBLIC:
					case QUERY:
					case QUERYNO:
					case READS:
					case REFERENCES:
					case REFRESH:
					case RELEASE:
					case RENAME:
					case REPEAT:
					case RESIGNAL:
					case RESTRICT:
					case RESULT:
					case RESULT_SET_LOCATOR:
					case RETURN:
					case RETURNS:
					case REVOKE:
					case RIGHT:
					case ROLE:
					case ROLLBACK:
					case ROLLUP:
					case ROUND_CEILING:
					case ROUND_DOWN:
					case ROUND_FLOOR:
					case ROUND_HALF_DOWN:
					case ROUND_HALF_EVEN:
					case ROUND_HALF_UP:
					case ROUND_UP:
					case ROW:
					case ROWSET:
					case RUN:
					case SAVEPOINT:
					case SCHEMA:
					case SCRATCHPAD:
					case SECOND:
					case SECONDS:
					case SECQTY:
					case SECURITY:
					case SELECT:
					case SENSITIVE:
					case SEQUENCE:
					case SET:
					case SIGNAL:
					case SIMPLE:
					case SOME:
					case SOURCE:
					case SPECIFIC:
					case STANDARD:
					case STATEMENT:
					case STATIC:
					case STAY:
					case STOGROUP:
					case STORES:
					case STYLE:
					case SUMMARY:
					case SYNONYM:
					case SYSDATE:
					case SYSTEM:
					case SYSTIMESTAMP:
					case TABLE:
					case TABLESPACE:
					case THEN:
					case TO:
					case TRIGGER:
					case TRUNCATE:
					case TYPE:
					case UNDO:
					case UNION:
					case UNIQUE:
					case UNTIL:
					case UPDATE:
					case USING:
					case VALIDPROC:
					case VALUE:
					case VALUES:
					case VARIABLE:
					case VARIANT:
					case VCAT:
					case VERSIONING:
					case VIEW:
					case VOLATILE:
					case VOLUMES:
					case WHEN:
					case WHENEVER:
					case WHERE:
					case WHILE:
					case WITH:
					case WLM:
					case XMLCAST:
					case XMLEXISTS:
					case XMLNAMESPACES:
					case YEAR:
					case YEARS:
					case ZONE:
					case AND:
					case ARRAY_AGG:
					case ASC:
					case AVG:
					case BIT:
					case CHANGE:
					case CODEUNITS16:
					case CODEUNITS32:
					case CORR:
					case CORRELATION:
					case COUNT:
					case COUNT_BIG:
					case COVAR:
					case COVARIANCE:
					case COVARIANCE_SAMP:
					case COVAR_POP:
					case COVAR_SAMP:
					case CS:
					case CUME_DIST:
					case DENSE_RANK:
					case DESC:
					case EBCDIC:
					case EXCLUSIVE:
					case FIRST_VALUE:
					case FOLLOWING:
					case GROUPING:
					case IGNORE:
					case INDICATOR:
					case INPUT:
					case ISNULL:
					case LAG:
					case LARGE:
					case LAST_VALUE:
					case LEAD:
					case LISTAGG:
					case LOCKED:
					case LOCKS:
					case MEDIAN:
					case MINUTES:
					case MIXED:
					case NOTNULL:
					case NTH_VALUE:
					case NTILE:
					case NUMERIC:
					case OBJECT:
					case OCTETS:
					case ONLY:
					case OVER:
					case PASSING:
					case PERCENTILE_CONT:
					case PERCENTILE_DISC:
					case PERCENT_RANK:
					case PRECEDING:
					case PREVIOUS:
					case RANGE:
					case RANK:
					case RATIO_TO_REPORT:
					case READ:
					case REF:
					case REGR_AVGX:
					case REGR_AVGY:
					case REGR_COUNT:
					case REGR_ICPT:
					case REGR_INTERCEPT:
					case REGR_R2:
					case REGR_SLOPE:
					case REGR_SXX:
					case REGR_SXY:
					case REGR_SYY:
					case RESPECT:
					case ROW_NUMBER:
					case ROWS:
					case RR:
					case RS:
					case SBCS:
					case SELECTIVITY:
					case SETS:
					case SHARE:
					case SKIP_:
					case STDDEV:
					case STDDEV_POP:
					case STDDEV_SAMP:
					case SUM:
					case TOKEN:
					case UNBOUNDED:
					case UNPACK:
					case UR:
					case USE:
					case VAR:
					case VARIANCE:
					case VARIANCE_SAMP:
					case VAR_POP:
					case VAR_SAMP:
					case VARYING:
					case WITHOUT:
					case XML:
					case XMLAGG:
					case COLUMNS:
					case SQLID:
					case ORDINALITY:
					case SYSTEM_TIME:
					case BUSINESS_TIME:
					case MULTIPLIER:
					case UNNEST:
					case CROSS:
					case CALLER:
					case CLIENT:
					case POSITIONING:
					case SCROLL:
					case ACTION:
					case ASSEMBLE:
					case C_:
					case CALLED:
					case COBOL:
					case DB2:
					case DEFINER:
					case DISPATCH:
					case ENVIRONMENT:
					case FAILURE:
					case FAILURES:
					case JAVA:
					case MAIN:
					case NAME:
					case OPTIONS:
					case PARALLEL:
					case PLI:
					case REGISTERS:
					case RESIDENT:
					case SECURED:
					case SPECIAL:
					case SQL:
					case STOP:
					case SUB:
					case YES:
					case APPLICATION:
					case CHANGED:
					case COMPATIBILITY:
					case COMPRESS:
					case COPY:
					case FREEPAGE:
					case GBPCACHE:
					case INCLUDE:
					case MAXVALUE:
					case MINVALUE:
					case PCTFREE:
					case REGENERATE:
					case MASK:
					case ENABLE:
					case PERMISSION:
					case ATOMIC:
					case SQLEXCEPTION:
					case MERGE:
					case MATCHED:
					case SQLSTATE:
					case MESSAGE_TEXT:
					case OVERRIDING:
					case PORTION:
					case DB2SQL:
					case DEBUG:
					case GENERAL:
					case MODE_:
					case REXX:
					case CACHE:
					case CYCLE:
					case INCREMENT:
					case RESTART:
					case DATACLAS:
					case MGMTCLAS:
					case REMOVE:
					case STORCLAS:
					case ACCESS:
					case ACTIVATE:
					case ALWAYS:
					case APPEND:
					case ARCHIVE:
					case BUSINESS:
					case CASCADE:
					case CHANGES:
					case CONTROL:
					case DEACTIVATE:
					case DEFERRED:
					case EACH:
					case ENFORCED:
					case EXTRA:
					case FOREIGN:
					case HIDDEN_:
					case HISTORY:
					case ID:
					case IDENTITY:
					case IMPLICITLY:
					case INITIALLY:
					case INLINE:
					case OPERATION:
					case ORGANIZE:
					case OVERLAPS:
					case PACKAGE_NAME:
					case PACKAGE_SCHEMA:
					case PACKAGE_VERSION:
					case PRIMARY:
					case RESET:
					case ROTATE:
					case START:
					case SYSIBM:
					case TRANSACTION:
					case XMLSCHEMA:
					case ELEMENT:
					case URL:
					case NAMESPACE:
					case LOCATION:
					case SYSXSR:
					case ALGORITHM:
					case FIXEDLENGTH:
					case HUFFMAN:
					case LOB:
					case LOG:
					case LOGGED:
					case MAXPARTITIONS:
					case MAXROWS:
					case MEMBER:
					case MOVE:
					case PAGE:
					case PAGENUM:
					case PENDING:
					case RELATIVE:
					case SEGSIZE:
					case TRACKMOD:
					case ADDRESS:
					case ATTRIBUTES:
					case AUTHENTICATION:
					case AUTHID:
					case CONTEXT:
					case JOBNAME:
					case OWNER:
					case PROFILE:
					case QUALIFIER:
					case SERVAUTH:
					case TRUSTED:
					case SECTION:
					case ACTIVE:
					case VERSION:
					case ALIAS:
					case WORK:
					case WORKFILE:
					case SYSDEFLT:
					case NULTERM:
					case STRUCTURE:
					case GENERIC:
					case ABS:
					case ABSVAL:
					case ACOS:
					case ADD_DAYS:
					case ADD_MONTHS:
					case ARRAY_DELETE:
					case ARRAY_FIRST:
					case ARRAY_LAST:
					case ARRAY_NEXT:
					case ARRAY_PRIOR:
					case ARRAY_TRIM:
					case ASCII:
					case ASCII_CHR:
					case ASCIISTR:
					case ASCII_STR:
					case ASIN:
					case ATAN:
					case ATAN2:
					case ATANH:
					case BIGINT:
					case BINARY:
					case BITAND:
					case BITANDNOT:
					case BITNOT:
					case BITOR:
					case BITXOR:
					case BLOB:
					case BTRIM:
					case CARDINALITY:
					case CCSID_ENCODING:
					case CEIL:
					case CEILING:
					case CHAR9:
					case CHARACTER_LENGTH:
					case CHAR_LENGTH:
					case CHR:
					case CLOB:
					case COALESCE:
					case COLLATION_KEY:
					case COMPARE_DECFLOAT:
					case COS:
					case COSH:
					case DATE:
					case DAYOFMONTH:
					case DAYOFWEEK:
					case DAYOFWEEK_ISO:
					case DAYOFYEAR:
					case DAYS_BETWEEN:
					case DBCLOB:
					case DEC:
					case DECFLOAT:
					case DECFLOAT_FORMAT:
					case DECFLOAT_SORTKEY:
					case DECIMAL:
					case DECODE:
					case DECRYPT_BINARY:
					case DECRYPT_BIT:
					case DECRYPT_CHAR:
					case DECRYPT_DATAKEY_BIGINT:
					case DECRYPT_DATAKEY_BIT:
					case DECRYPT_DATAKEY_CLOB:
					case DECRYPT_DATAKEY_DBCLOB:
					case DECRYPT_DATAKEY_DECIMAL:
					case DECRYPT_DATAKEY_INTEGER:
					case DECRYPT_DATAKEY_VARCHAR:
					case DECRYPT_DATAKEY_VARGRAPHIC:
					case DECRYPT_DB:
					case DEGREES:
					case DIFFERENCE:
					case DIGITS:
					case DOUBLE_PRECISION:
					case DSN_XMLVALIDATE:
					case EBCDIC_CHR:
					case EBCDIC_STR:
					case ENCRYPT_DATAKEY:
					case ENCRYPT_TDES:
					case EXP:
					case EXTRACT:
					case FLOAT:
					case FLOOR:
					case GENERATE_UNIQUE:
					case GENERATE_UNIQUE_BINARY:
					case GETHINT:
					case GETVARIABLE:
					case GRAPHIC:
					case GREATEST:
					case HASH:
					case HASH_CRC32:
					case HASH_MD5:
					case HASH_SHA1:
					case HASH_SHA256:
					case HEX:
					case IDENTITY_VAL_LOCAL:
					case IFNULL:
					case INSTR:
					case INT:
					case INTEGER:
					case JULIAN_DAY:
					case LAST_DAY:
					case LCASE:
					case LEAST:
					case LENGTH:
					case LN:
					case LOCATE:
					case LOCATE_IN_STRING:
					case LOG10:
					case LOWER:
					case LPAD:
					case LTRIM:
					case MAX:
					case MAX_CARDINALITY:
					case MIDNIGHT_SECONDS:
					case MIN:
					case MINUTE:
					case MOD:
					case MONTHS_BETWEEN:
					case MQREAD:
					case MQREADCLOB:
					case MQRECEIVE:
					case MQRECEIVECLOB:
					case MQSEND:
					case MULTIPLY_ALT:
					case NEXT_DAY:
					case NEXT_MONTH:
					case NORMALIZE_DECFLOAT:
					case NORMALIZE_STRING:
					case NULLIF:
					case NVL:
					case OVERLAY:
					case PACK:
					case POSITION:
					case POSSTR:
					case POW:
					case POWER:
					case QUANTIZE:
					case QUARTER:
					case RADIANS:
					case RAISE_ERROR:
					case RAND:
					case RANDOM:
					case REAL:
					case REGEXP_COUNT:
					case REGEXP_INSTR:
					case REGEXP_LIKE:
					case REGEXP_REPLACE:
					case REGEXP_SUBSTR:
					case REPLACE:
					case RID:
					case ROUND:
					case ROUND_TIMESTAMP:
					case ROWID:
					case RPAD:
					case RTRIM:
					case SCORE:
					case SIGN:
					case SIN:
					case SINH:
					case SMALLINT:
					case SOAPHTTPC:
					case SOAPHTTPNC:
					case SOAPHTTPNV:
					case SOAPHTTPV:
					case SOUNDEX:
					case SPACE:
					case SQRT:
					case STRIP:
					case STRLEFT:
					case STRPOS:
					case STRRIGHT:
					case SUBSTR:
					case SUBSTRING:
					case TAN:
					case TANH:
					case TIME:
					case TIMESTAMP:
					case TIMESTAMPADD:
					case TIMESTAMPDIFF:
					case TIMESTAMP_FORMAT:
					case TIMESTAMP_ISO:
					case TIMESTAMP_TZ:
					case TO_CHAR:
					case TO_CLOB:
					case TO_DATE:
					case TO_NUMBER:
					case TOTALORDER:
					case TO_TIMESTAMP:
					case TRANSLATE:
					case TRIM:
					case TRIM_ARRAY:
					case TRUNC:
					case TRUNC_TIMESTAMP:
					case UCASE:
					case UNICODE:
					case UNICODE_STR:
					case UNISTR:
					case UPPER:
					case VARBINARY:
					case VARCHAR:
					case VARCHAR9:
					case VARCHAR_BIT_FORMAT:
					case VARCHAR_FORMAT:
					case VARGRAPHIC:
					case VERIFY_GROUP_FOR_USER:
					case VERIFY_ROLE_FOR_USER:
					case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
					case WEEK:
					case WEEK_ISO:
					case WRAP:
					case XMLATTRIBUTES:
					case XMLCOMMENT:
					case XMLCONCAT:
					case XMLDOCUMENT:
					case XMLELEMENT:
					case XMLFOREST:
					case XMLMODIFY:
					case XMLPARSE:
					case XMLPI:
					case XMLQUERY:
					case XMLSERIALIZE:
					case XMLTEXT:
					case XMLXSROBJECTID:
					case XSLTRANSFORM:
					case CURRENT_ACCELERATOR:
					case CURRENT_APPLICATION_COMPATIBILITY:
					case CURRENT_APPLICATION_ENCODING_SCHEME:
					case CURRENT_CLIENT_ACCTNG:
					case CURRENT_CLIENT_APPLNAME:
					case CURRENT_CLIENT_CORR_TOKEN:
					case CURRENT_CLIENT_USERID:
					case CURRENT_CLIENT_WRKSTNNAME:
					case CURRENT_DATE:
					case CURRENT_DEBUG_MODE:
					case CURRENT_DECFLOAT_ROUNDING_MODE:
					case CURRENT_DEGREE:
					case CURRENT_EXPLAIN_MODE:
					case CURRENT_GET_ACCEL_ARCHIVE:
					case CURRENT_LOCALE_LC_CTYPE:
					case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
					case CURRENT_MEMBER:
					case CURRENT_OPTIMIZATION_HINT:
					case CURRENT_PACKAGE_PATH:
					case CURRENT_PACKAGESET:
					case CURRENT_PATH:
					case CURRENT_PRECISION:
					case CURRENT_QUERY_ACCELERATION:
					case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
					case CURRENT_REFRESH_AGE:
					case CURRENT_ROUTINE_VERSION:
					case CURRENT_RULES:
					case CURRENT_SCHEMA:
					case CURRENT_SERVER:
					case CURRENT_SQLID:
					case CURRENT_TEMPORAL_BUSINESS_TIME:
					case CURRENT_TEMPORAL_SYSTEM_TIME:
					case CURRENT_TIME:
					case CURRENT_TIMESTAMP:
					case CURRENT_TIME_ZONE:
					case ENCRYPTION_PASSWORD:
					case SESSION_TIME_ZONE:
					case SESSION_USER:
					case USER:
					case ADMIN_TASK_LIST:
					case ADMIN_TASK_OUTPUT:
					case ADMIN_TASK_STATUS:
					case BLOCKING_THREADS:
					case MQREADALL:
					case MQREADALLCLOB:
					case MQRECEIVEALL:
					case MQRECEIVEALLCLOB:
					case XMLTABLE:
					case SQLIDENTIFIER:
						{
						setState(5247);
						identifier();
						}
						break;
					case NUMERICLITERAL:
						{
						setState(5248);
						match(NUMERICLITERAL);
						}
						break;
					case INTEGERLITERAL:
						{
						setState(5249);
						match(INTEGERLITERAL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					} 
				}
				setState(5256);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,617,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VersionIDContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> NUMERICLITERAL() { return getTokens(DB2zSQLParser.NUMERICLITERAL); }
		public TerminalNode NUMERICLITERAL(int i) {
			return getToken(DB2zSQLParser.NUMERICLITERAL, i);
		}
		public List<TerminalNode> INTEGERLITERAL() { return getTokens(DB2zSQLParser.INTEGERLITERAL); }
		public TerminalNode INTEGERLITERAL(int i) {
			return getToken(DB2zSQLParser.INTEGERLITERAL, i);
		}
		public List<TerminalNode> DOT() { return getTokens(DB2zSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(DB2zSQLParser.DOT, i);
		}
		public VersionIDContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_versionID; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterVersionID(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitVersionID(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitVersionID(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VersionIDContext versionID() throws RecognitionException {
		VersionIDContext _localctx = new VersionIDContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_versionID);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5260);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case ALL:
			case ALLOCATE:
			case ALLOW:
			case ALTER:
			case ALTERAND:
			case ANY:
			case ARRAY:
			case ARRAY_EXISTS:
			case AS:
			case ASENSITIVE:
			case ASSOCIATE:
			case ASUTIME:
			case AT:
			case AUDIT:
			case AUX:
			case AUXILIARY:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BUFFERPOOL:
			case BY:
			case CALL:
			case CAPTURE:
			case CASCADED:
			case CASE:
			case CAST:
			case CCSID:
			case CHAR:
			case CHARACTER:
			case CHECK:
			case CLONE:
			case CLOSE:
			case CLUSTER:
			case COLLECTION:
			case COLLID:
			case COLUMN:
			case COMMENT:
			case COMMIT:
			case CONCAT:
			case CONDITION:
			case CONNECT:
			case CONNECTION:
			case CONSTRAINT:
			case CONTAINS:
			case CONTENT:
			case CONTINUE:
			case CREATE:
			case CUBE:
			case CURRENT:
			case CURRENT_LC_CTYPE:
			case CURRVAL:
			case CURSOR:
			case DATA:
			case DATABASE:
			case DAY:
			case DAYS:
			case DBINFO:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DISABLE:
			case DISALLOW:
			case DISTINCT:
			case DO:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSSIZE:
			case DYNAMIC:
			case EDITPROC:
			case ELSE:
			case ELSEIF:
			case ENCODING:
			case ENCRYPTION:
			case END:
			case END_EXEC:
			case ENDING:
			case ERASE:
			case ESCAPE:
			case EXCEPT:
			case EXCEPTION:
			case EXEC_SQL:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case FENCED:
			case FETCH:
			case FIELDPROC:
			case FINAL:
			case FIRST:
			case FOR:
			case FREE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANT:
			case GROUP:
			case HANDLER:
			case HAVING:
			case HOLD:
			case HOUR:
			case HOURS:
			case IF:
			case IMMEDIATE:
			case IN:
			case INCLUSIVE:
			case INDEX:
			case INDEXBP:
			case INHERIT:
			case INNER:
			case INOUT:
			case INSENSITIVE:
			case INSERT:
			case INTERSECT:
			case INTO:
			case IS:
			case ISOBID:
			case ITERATE:
			case JAR:
			case JOIN:
			case KEEP:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LAST:
			case LC_CTYPE:
			case LEAVE:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOCALE:
			case LOCATOR:
			case LOCATORS:
			case LOCK:
			case LOCKMAX:
			case LOCKSIZE:
			case LONG:
			case LOOP:
			case MAINTAINED:
			case MATERIALIZED:
			case MICROSECOND:
			case MICROSECONDS:
			case MODIFIES:
			case MONTH:
			case MONTHS:
			case NEXT:
			case NEXTVAL:
			case NO:
			case NONE:
			case NOT:
			case NULL:
			case NULLS:
			case NUMPARTS:
			case OBID:
			case OF:
			case OFFSET:
			case OLD:
			case ON:
			case OPEN:
			case OPTIMIZATION:
			case OPTIMIZE:
			case OR:
			case ORDER:
			case ORGANIZATION:
			case OUT:
			case OUTER:
			case PACKAGE:
			case PADDED:
			case PARAMETER:
			case PART:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONING:
			case PATH:
			case PERIOD:
			case PIECESIZE:
			case PLAN:
			case PRECISION:
			case PREPARE:
			case PREVVAL:
			case PRIOR:
			case PRIQTY:
			case PRIVILEGES:
			case PROCEDURE:
			case PROGRAM:
			case PSID:
			case PUBLIC:
			case QUERY:
			case QUERYNO:
			case READS:
			case REFERENCES:
			case REFRESH:
			case RELEASE:
			case RENAME:
			case REPEAT:
			case RESIGNAL:
			case RESTRICT:
			case RESULT:
			case RESULT_SET_LOCATOR:
			case RETURN:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUND_CEILING:
			case ROUND_DOWN:
			case ROUND_FLOOR:
			case ROUND_HALF_DOWN:
			case ROUND_HALF_EVEN:
			case ROUND_HALF_UP:
			case ROUND_UP:
			case ROW:
			case ROWSET:
			case RUN:
			case SAVEPOINT:
			case SCHEMA:
			case SCRATCHPAD:
			case SECOND:
			case SECONDS:
			case SECQTY:
			case SECURITY:
			case SELECT:
			case SENSITIVE:
			case SEQUENCE:
			case SET:
			case SIGNAL:
			case SIMPLE:
			case SOME:
			case SOURCE:
			case SPECIFIC:
			case STANDARD:
			case STATEMENT:
			case STATIC:
			case STAY:
			case STOGROUP:
			case STORES:
			case STYLE:
			case SUMMARY:
			case SYNONYM:
			case SYSDATE:
			case SYSTEM:
			case SYSTIMESTAMP:
			case TABLE:
			case TABLESPACE:
			case THEN:
			case TO:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNDO:
			case UNION:
			case UNIQUE:
			case UNTIL:
			case UPDATE:
			case USING:
			case VALIDPROC:
			case VALUE:
			case VALUES:
			case VARIABLE:
			case VARIANT:
			case VCAT:
			case VERSIONING:
			case VIEW:
			case VOLATILE:
			case VOLUMES:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WLM:
			case XMLCAST:
			case XMLEXISTS:
			case XMLNAMESPACES:
			case YEAR:
			case YEARS:
			case ZONE:
			case AND:
			case ARRAY_AGG:
			case ASC:
			case AVG:
			case BIT:
			case CHANGE:
			case CODEUNITS16:
			case CODEUNITS32:
			case CORR:
			case CORRELATION:
			case COUNT:
			case COUNT_BIG:
			case COVAR:
			case COVARIANCE:
			case COVARIANCE_SAMP:
			case COVAR_POP:
			case COVAR_SAMP:
			case CS:
			case CUME_DIST:
			case DENSE_RANK:
			case DESC:
			case EBCDIC:
			case EXCLUSIVE:
			case FIRST_VALUE:
			case FOLLOWING:
			case GROUPING:
			case IGNORE:
			case INDICATOR:
			case INPUT:
			case ISNULL:
			case LAG:
			case LARGE:
			case LAST_VALUE:
			case LEAD:
			case LISTAGG:
			case LOCKED:
			case LOCKS:
			case MEDIAN:
			case MINUTES:
			case MIXED:
			case NOTNULL:
			case NTH_VALUE:
			case NTILE:
			case NUMERIC:
			case OBJECT:
			case OCTETS:
			case ONLY:
			case OVER:
			case PASSING:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PERCENT_RANK:
			case PRECEDING:
			case PREVIOUS:
			case RANGE:
			case RANK:
			case RATIO_TO_REPORT:
			case READ:
			case REF:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_ICPT:
			case REGR_INTERCEPT:
			case REGR_R2:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case RESPECT:
			case ROW_NUMBER:
			case ROWS:
			case RR:
			case RS:
			case SBCS:
			case SELECTIVITY:
			case SETS:
			case SHARE:
			case SKIP_:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case TOKEN:
			case UNBOUNDED:
			case UNPACK:
			case UR:
			case USE:
			case VAR:
			case VARIANCE:
			case VARIANCE_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARYING:
			case WITHOUT:
			case XML:
			case XMLAGG:
			case COLUMNS:
			case SQLID:
			case ORDINALITY:
			case SYSTEM_TIME:
			case BUSINESS_TIME:
			case MULTIPLIER:
			case UNNEST:
			case CROSS:
			case CALLER:
			case CLIENT:
			case POSITIONING:
			case SCROLL:
			case ACTION:
			case ASSEMBLE:
			case C_:
			case CALLED:
			case COBOL:
			case DB2:
			case DEFINER:
			case DISPATCH:
			case ENVIRONMENT:
			case FAILURE:
			case FAILURES:
			case JAVA:
			case MAIN:
			case NAME:
			case OPTIONS:
			case PARALLEL:
			case PLI:
			case REGISTERS:
			case RESIDENT:
			case SECURED:
			case SPECIAL:
			case SQL:
			case STOP:
			case SUB:
			case YES:
			case APPLICATION:
			case CHANGED:
			case COMPATIBILITY:
			case COMPRESS:
			case COPY:
			case FREEPAGE:
			case GBPCACHE:
			case INCLUDE:
			case MAXVALUE:
			case MINVALUE:
			case PCTFREE:
			case REGENERATE:
			case MASK:
			case ENABLE:
			case PERMISSION:
			case ATOMIC:
			case SQLEXCEPTION:
			case MERGE:
			case MATCHED:
			case SQLSTATE:
			case MESSAGE_TEXT:
			case OVERRIDING:
			case PORTION:
			case DB2SQL:
			case DEBUG:
			case GENERAL:
			case MODE_:
			case REXX:
			case CACHE:
			case CYCLE:
			case INCREMENT:
			case RESTART:
			case DATACLAS:
			case MGMTCLAS:
			case REMOVE:
			case STORCLAS:
			case ACCESS:
			case ACTIVATE:
			case ALWAYS:
			case APPEND:
			case ARCHIVE:
			case BUSINESS:
			case CASCADE:
			case CHANGES:
			case CONTROL:
			case DEACTIVATE:
			case DEFERRED:
			case EACH:
			case ENFORCED:
			case EXTRA:
			case FOREIGN:
			case HIDDEN_:
			case HISTORY:
			case ID:
			case IDENTITY:
			case IMPLICITLY:
			case INITIALLY:
			case INLINE:
			case OPERATION:
			case ORGANIZE:
			case OVERLAPS:
			case PACKAGE_NAME:
			case PACKAGE_SCHEMA:
			case PACKAGE_VERSION:
			case PRIMARY:
			case RESET:
			case ROTATE:
			case START:
			case SYSIBM:
			case TRANSACTION:
			case XMLSCHEMA:
			case ELEMENT:
			case URL:
			case NAMESPACE:
			case LOCATION:
			case SYSXSR:
			case ALGORITHM:
			case FIXEDLENGTH:
			case HUFFMAN:
			case LOB:
			case LOG:
			case LOGGED:
			case MAXPARTITIONS:
			case MAXROWS:
			case MEMBER:
			case MOVE:
			case PAGE:
			case PAGENUM:
			case PENDING:
			case RELATIVE:
			case SEGSIZE:
			case TRACKMOD:
			case ADDRESS:
			case ATTRIBUTES:
			case AUTHENTICATION:
			case AUTHID:
			case CONTEXT:
			case JOBNAME:
			case OWNER:
			case PROFILE:
			case QUALIFIER:
			case SERVAUTH:
			case TRUSTED:
			case SECTION:
			case ACTIVE:
			case VERSION:
			case ALIAS:
			case WORK:
			case WORKFILE:
			case SYSDEFLT:
			case NULTERM:
			case STRUCTURE:
			case GENERIC:
			case ABS:
			case ABSVAL:
			case ACOS:
			case ADD_DAYS:
			case ADD_MONTHS:
			case ARRAY_DELETE:
			case ARRAY_FIRST:
			case ARRAY_LAST:
			case ARRAY_NEXT:
			case ARRAY_PRIOR:
			case ARRAY_TRIM:
			case ASCII:
			case ASCII_CHR:
			case ASCIISTR:
			case ASCII_STR:
			case ASIN:
			case ATAN:
			case ATAN2:
			case ATANH:
			case BIGINT:
			case BINARY:
			case BITAND:
			case BITANDNOT:
			case BITNOT:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BTRIM:
			case CARDINALITY:
			case CCSID_ENCODING:
			case CEIL:
			case CEILING:
			case CHAR9:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case CHR:
			case CLOB:
			case COALESCE:
			case COLLATION_KEY:
			case COMPARE_DECFLOAT:
			case COS:
			case COSH:
			case DATE:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFWEEK_ISO:
			case DAYOFYEAR:
			case DAYS_BETWEEN:
			case DBCLOB:
			case DEC:
			case DECFLOAT:
			case DECFLOAT_FORMAT:
			case DECFLOAT_SORTKEY:
			case DECIMAL:
			case DECODE:
			case DECRYPT_BINARY:
			case DECRYPT_BIT:
			case DECRYPT_CHAR:
			case DECRYPT_DATAKEY_BIGINT:
			case DECRYPT_DATAKEY_BIT:
			case DECRYPT_DATAKEY_CLOB:
			case DECRYPT_DATAKEY_DBCLOB:
			case DECRYPT_DATAKEY_DECIMAL:
			case DECRYPT_DATAKEY_INTEGER:
			case DECRYPT_DATAKEY_VARCHAR:
			case DECRYPT_DATAKEY_VARGRAPHIC:
			case DECRYPT_DB:
			case DEGREES:
			case DIFFERENCE:
			case DIGITS:
			case DOUBLE_PRECISION:
			case DSN_XMLVALIDATE:
			case EBCDIC_CHR:
			case EBCDIC_STR:
			case ENCRYPT_DATAKEY:
			case ENCRYPT_TDES:
			case EXP:
			case EXTRACT:
			case FLOAT:
			case FLOOR:
			case GENERATE_UNIQUE:
			case GENERATE_UNIQUE_BINARY:
			case GETHINT:
			case GETVARIABLE:
			case GRAPHIC:
			case GREATEST:
			case HASH:
			case HASH_CRC32:
			case HASH_MD5:
			case HASH_SHA1:
			case HASH_SHA256:
			case HEX:
			case IDENTITY_VAL_LOCAL:
			case IFNULL:
			case INSTR:
			case INT:
			case INTEGER:
			case JULIAN_DAY:
			case LAST_DAY:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LN:
			case LOCATE:
			case LOCATE_IN_STRING:
			case LOG10:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAX:
			case MAX_CARDINALITY:
			case MIDNIGHT_SECONDS:
			case MIN:
			case MINUTE:
			case MOD:
			case MONTHS_BETWEEN:
			case MQREAD:
			case MQREADCLOB:
			case MQRECEIVE:
			case MQRECEIVECLOB:
			case MQSEND:
			case MULTIPLY_ALT:
			case NEXT_DAY:
			case NEXT_MONTH:
			case NORMALIZE_DECFLOAT:
			case NORMALIZE_STRING:
			case NULLIF:
			case NVL:
			case OVERLAY:
			case PACK:
			case POSITION:
			case POSSTR:
			case POW:
			case POWER:
			case QUANTIZE:
			case QUARTER:
			case RADIANS:
			case RAISE_ERROR:
			case RAND:
			case RANDOM:
			case REAL:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REPLACE:
			case RID:
			case ROUND:
			case ROUND_TIMESTAMP:
			case ROWID:
			case RPAD:
			case RTRIM:
			case SCORE:
			case SIGN:
			case SIN:
			case SINH:
			case SMALLINT:
			case SOAPHTTPC:
			case SOAPHTTPNC:
			case SOAPHTTPNV:
			case SOAPHTTPV:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STRIP:
			case STRLEFT:
			case STRPOS:
			case STRRIGHT:
			case SUBSTR:
			case SUBSTRING:
			case TAN:
			case TANH:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIMESTAMP_FORMAT:
			case TIMESTAMP_ISO:
			case TIMESTAMP_TZ:
			case TO_CHAR:
			case TO_CLOB:
			case TO_DATE:
			case TO_NUMBER:
			case TOTALORDER:
			case TO_TIMESTAMP:
			case TRANSLATE:
			case TRIM:
			case TRIM_ARRAY:
			case TRUNC:
			case TRUNC_TIMESTAMP:
			case UCASE:
			case UNICODE:
			case UNICODE_STR:
			case UNISTR:
			case UPPER:
			case VARBINARY:
			case VARCHAR:
			case VARCHAR9:
			case VARCHAR_BIT_FORMAT:
			case VARCHAR_FORMAT:
			case VARGRAPHIC:
			case VERIFY_GROUP_FOR_USER:
			case VERIFY_ROLE_FOR_USER:
			case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
			case WEEK:
			case WEEK_ISO:
			case WRAP:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLCONCAT:
			case XMLDOCUMENT:
			case XMLELEMENT:
			case XMLFOREST:
			case XMLMODIFY:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLSERIALIZE:
			case XMLTEXT:
			case XMLXSROBJECTID:
			case XSLTRANSFORM:
			case CURRENT_ACCELERATOR:
			case CURRENT_APPLICATION_COMPATIBILITY:
			case CURRENT_APPLICATION_ENCODING_SCHEME:
			case CURRENT_CLIENT_ACCTNG:
			case CURRENT_CLIENT_APPLNAME:
			case CURRENT_CLIENT_CORR_TOKEN:
			case CURRENT_CLIENT_USERID:
			case CURRENT_CLIENT_WRKSTNNAME:
			case CURRENT_DATE:
			case CURRENT_DEBUG_MODE:
			case CURRENT_DECFLOAT_ROUNDING_MODE:
			case CURRENT_DEGREE:
			case CURRENT_EXPLAIN_MODE:
			case CURRENT_GET_ACCEL_ARCHIVE:
			case CURRENT_LOCALE_LC_CTYPE:
			case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
			case CURRENT_MEMBER:
			case CURRENT_OPTIMIZATION_HINT:
			case CURRENT_PACKAGE_PATH:
			case CURRENT_PACKAGESET:
			case CURRENT_PATH:
			case CURRENT_PRECISION:
			case CURRENT_QUERY_ACCELERATION:
			case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
			case CURRENT_REFRESH_AGE:
			case CURRENT_ROUTINE_VERSION:
			case CURRENT_RULES:
			case CURRENT_SCHEMA:
			case CURRENT_SERVER:
			case CURRENT_SQLID:
			case CURRENT_TEMPORAL_BUSINESS_TIME:
			case CURRENT_TEMPORAL_SYSTEM_TIME:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_TIME_ZONE:
			case ENCRYPTION_PASSWORD:
			case SESSION_TIME_ZONE:
			case SESSION_USER:
			case USER:
			case ADMIN_TASK_LIST:
			case ADMIN_TASK_OUTPUT:
			case ADMIN_TASK_STATUS:
			case BLOCKING_THREADS:
			case MQREADALL:
			case MQREADALLCLOB:
			case MQRECEIVEALL:
			case MQRECEIVEALLCLOB:
			case XMLTABLE:
			case SQLIDENTIFIER:
				{
				setState(5257);
				identifier();
				}
				break;
			case NUMERICLITERAL:
				{
				setState(5258);
				match(NUMERICLITERAL);
				}
				break;
			case INTEGERLITERAL:
				{
				setState(5259);
				match(INTEGERLITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5272);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,621,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5263);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DOT) {
						{
						setState(5262);
						match(DOT);
						}
					}

					setState(5268);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ADD:
					case AFTER:
					case ALL:
					case ALLOCATE:
					case ALLOW:
					case ALTER:
					case ALTERAND:
					case ANY:
					case ARRAY:
					case ARRAY_EXISTS:
					case AS:
					case ASENSITIVE:
					case ASSOCIATE:
					case ASUTIME:
					case AT:
					case AUDIT:
					case AUX:
					case AUXILIARY:
					case BEFORE:
					case BEGIN:
					case BETWEEN:
					case BUFFERPOOL:
					case BY:
					case CALL:
					case CAPTURE:
					case CASCADED:
					case CASE:
					case CAST:
					case CCSID:
					case CHAR:
					case CHARACTER:
					case CHECK:
					case CLONE:
					case CLOSE:
					case CLUSTER:
					case COLLECTION:
					case COLLID:
					case COLUMN:
					case COMMENT:
					case COMMIT:
					case CONCAT:
					case CONDITION:
					case CONNECT:
					case CONNECTION:
					case CONSTRAINT:
					case CONTAINS:
					case CONTENT:
					case CONTINUE:
					case CREATE:
					case CUBE:
					case CURRENT:
					case CURRENT_LC_CTYPE:
					case CURRVAL:
					case CURSOR:
					case DATA:
					case DATABASE:
					case DAY:
					case DAYS:
					case DBINFO:
					case DECLARE:
					case DEFAULT:
					case DELETE:
					case DESCRIPTOR:
					case DETERMINISTIC:
					case DISABLE:
					case DISALLOW:
					case DISTINCT:
					case DO:
					case DOCUMENT:
					case DOUBLE:
					case DROP:
					case DSSIZE:
					case DYNAMIC:
					case EDITPROC:
					case ELSE:
					case ELSEIF:
					case ENCODING:
					case ENCRYPTION:
					case END:
					case END_EXEC:
					case ENDING:
					case ERASE:
					case ESCAPE:
					case EXCEPT:
					case EXCEPTION:
					case EXEC_SQL:
					case EXECUTE:
					case EXISTS:
					case EXIT:
					case EXPLAIN:
					case EXTERNAL:
					case FENCED:
					case FETCH:
					case FIELDPROC:
					case FINAL:
					case FIRST:
					case FOR:
					case FREE:
					case FROM:
					case FULL:
					case FUNCTION:
					case GENERATED:
					case GET:
					case GLOBAL:
					case GO:
					case GOTO:
					case GRANT:
					case GROUP:
					case HANDLER:
					case HAVING:
					case HOLD:
					case HOUR:
					case HOURS:
					case IF:
					case IMMEDIATE:
					case IN:
					case INCLUSIVE:
					case INDEX:
					case INDEXBP:
					case INHERIT:
					case INNER:
					case INOUT:
					case INSENSITIVE:
					case INSERT:
					case INTERSECT:
					case INTO:
					case IS:
					case ISOBID:
					case ITERATE:
					case JAR:
					case JOIN:
					case KEEP:
					case KEY:
					case LABEL:
					case LANGUAGE:
					case LAST:
					case LC_CTYPE:
					case LEAVE:
					case LEFT:
					case LIKE:
					case LIMIT:
					case LOCAL:
					case LOCALE:
					case LOCATOR:
					case LOCATORS:
					case LOCK:
					case LOCKMAX:
					case LOCKSIZE:
					case LONG:
					case LOOP:
					case MAINTAINED:
					case MATERIALIZED:
					case MICROSECOND:
					case MICROSECONDS:
					case MODIFIES:
					case MONTH:
					case MONTHS:
					case NEXT:
					case NEXTVAL:
					case NO:
					case NONE:
					case NOT:
					case NULL:
					case NULLS:
					case NUMPARTS:
					case OBID:
					case OF:
					case OFFSET:
					case OLD:
					case ON:
					case OPEN:
					case OPTIMIZATION:
					case OPTIMIZE:
					case OR:
					case ORDER:
					case ORGANIZATION:
					case OUT:
					case OUTER:
					case PACKAGE:
					case PADDED:
					case PARAMETER:
					case PART:
					case PARTITION:
					case PARTITIONED:
					case PARTITIONING:
					case PATH:
					case PERIOD:
					case PIECESIZE:
					case PLAN:
					case PRECISION:
					case PREPARE:
					case PREVVAL:
					case PRIOR:
					case PRIQTY:
					case PRIVILEGES:
					case PROCEDURE:
					case PROGRAM:
					case PSID:
					case PUBLIC:
					case QUERY:
					case QUERYNO:
					case READS:
					case REFERENCES:
					case REFRESH:
					case RELEASE:
					case RENAME:
					case REPEAT:
					case RESIGNAL:
					case RESTRICT:
					case RESULT:
					case RESULT_SET_LOCATOR:
					case RETURN:
					case RETURNS:
					case REVOKE:
					case RIGHT:
					case ROLE:
					case ROLLBACK:
					case ROLLUP:
					case ROUND_CEILING:
					case ROUND_DOWN:
					case ROUND_FLOOR:
					case ROUND_HALF_DOWN:
					case ROUND_HALF_EVEN:
					case ROUND_HALF_UP:
					case ROUND_UP:
					case ROW:
					case ROWSET:
					case RUN:
					case SAVEPOINT:
					case SCHEMA:
					case SCRATCHPAD:
					case SECOND:
					case SECONDS:
					case SECQTY:
					case SECURITY:
					case SELECT:
					case SENSITIVE:
					case SEQUENCE:
					case SET:
					case SIGNAL:
					case SIMPLE:
					case SOME:
					case SOURCE:
					case SPECIFIC:
					case STANDARD:
					case STATEMENT:
					case STATIC:
					case STAY:
					case STOGROUP:
					case STORES:
					case STYLE:
					case SUMMARY:
					case SYNONYM:
					case SYSDATE:
					case SYSTEM:
					case SYSTIMESTAMP:
					case TABLE:
					case TABLESPACE:
					case THEN:
					case TO:
					case TRIGGER:
					case TRUNCATE:
					case TYPE:
					case UNDO:
					case UNION:
					case UNIQUE:
					case UNTIL:
					case UPDATE:
					case USING:
					case VALIDPROC:
					case VALUE:
					case VALUES:
					case VARIABLE:
					case VARIANT:
					case VCAT:
					case VERSIONING:
					case VIEW:
					case VOLATILE:
					case VOLUMES:
					case WHEN:
					case WHENEVER:
					case WHERE:
					case WHILE:
					case WITH:
					case WLM:
					case XMLCAST:
					case XMLEXISTS:
					case XMLNAMESPACES:
					case YEAR:
					case YEARS:
					case ZONE:
					case AND:
					case ARRAY_AGG:
					case ASC:
					case AVG:
					case BIT:
					case CHANGE:
					case CODEUNITS16:
					case CODEUNITS32:
					case CORR:
					case CORRELATION:
					case COUNT:
					case COUNT_BIG:
					case COVAR:
					case COVARIANCE:
					case COVARIANCE_SAMP:
					case COVAR_POP:
					case COVAR_SAMP:
					case CS:
					case CUME_DIST:
					case DENSE_RANK:
					case DESC:
					case EBCDIC:
					case EXCLUSIVE:
					case FIRST_VALUE:
					case FOLLOWING:
					case GROUPING:
					case IGNORE:
					case INDICATOR:
					case INPUT:
					case ISNULL:
					case LAG:
					case LARGE:
					case LAST_VALUE:
					case LEAD:
					case LISTAGG:
					case LOCKED:
					case LOCKS:
					case MEDIAN:
					case MINUTES:
					case MIXED:
					case NOTNULL:
					case NTH_VALUE:
					case NTILE:
					case NUMERIC:
					case OBJECT:
					case OCTETS:
					case ONLY:
					case OVER:
					case PASSING:
					case PERCENTILE_CONT:
					case PERCENTILE_DISC:
					case PERCENT_RANK:
					case PRECEDING:
					case PREVIOUS:
					case RANGE:
					case RANK:
					case RATIO_TO_REPORT:
					case READ:
					case REF:
					case REGR_AVGX:
					case REGR_AVGY:
					case REGR_COUNT:
					case REGR_ICPT:
					case REGR_INTERCEPT:
					case REGR_R2:
					case REGR_SLOPE:
					case REGR_SXX:
					case REGR_SXY:
					case REGR_SYY:
					case RESPECT:
					case ROW_NUMBER:
					case ROWS:
					case RR:
					case RS:
					case SBCS:
					case SELECTIVITY:
					case SETS:
					case SHARE:
					case SKIP_:
					case STDDEV:
					case STDDEV_POP:
					case STDDEV_SAMP:
					case SUM:
					case TOKEN:
					case UNBOUNDED:
					case UNPACK:
					case UR:
					case USE:
					case VAR:
					case VARIANCE:
					case VARIANCE_SAMP:
					case VAR_POP:
					case VAR_SAMP:
					case VARYING:
					case WITHOUT:
					case XML:
					case XMLAGG:
					case COLUMNS:
					case SQLID:
					case ORDINALITY:
					case SYSTEM_TIME:
					case BUSINESS_TIME:
					case MULTIPLIER:
					case UNNEST:
					case CROSS:
					case CALLER:
					case CLIENT:
					case POSITIONING:
					case SCROLL:
					case ACTION:
					case ASSEMBLE:
					case C_:
					case CALLED:
					case COBOL:
					case DB2:
					case DEFINER:
					case DISPATCH:
					case ENVIRONMENT:
					case FAILURE:
					case FAILURES:
					case JAVA:
					case MAIN:
					case NAME:
					case OPTIONS:
					case PARALLEL:
					case PLI:
					case REGISTERS:
					case RESIDENT:
					case SECURED:
					case SPECIAL:
					case SQL:
					case STOP:
					case SUB:
					case YES:
					case APPLICATION:
					case CHANGED:
					case COMPATIBILITY:
					case COMPRESS:
					case COPY:
					case FREEPAGE:
					case GBPCACHE:
					case INCLUDE:
					case MAXVALUE:
					case MINVALUE:
					case PCTFREE:
					case REGENERATE:
					case MASK:
					case ENABLE:
					case PERMISSION:
					case ATOMIC:
					case SQLEXCEPTION:
					case MERGE:
					case MATCHED:
					case SQLSTATE:
					case MESSAGE_TEXT:
					case OVERRIDING:
					case PORTION:
					case DB2SQL:
					case DEBUG:
					case GENERAL:
					case MODE_:
					case REXX:
					case CACHE:
					case CYCLE:
					case INCREMENT:
					case RESTART:
					case DATACLAS:
					case MGMTCLAS:
					case REMOVE:
					case STORCLAS:
					case ACCESS:
					case ACTIVATE:
					case ALWAYS:
					case APPEND:
					case ARCHIVE:
					case BUSINESS:
					case CASCADE:
					case CHANGES:
					case CONTROL:
					case DEACTIVATE:
					case DEFERRED:
					case EACH:
					case ENFORCED:
					case EXTRA:
					case FOREIGN:
					case HIDDEN_:
					case HISTORY:
					case ID:
					case IDENTITY:
					case IMPLICITLY:
					case INITIALLY:
					case INLINE:
					case OPERATION:
					case ORGANIZE:
					case OVERLAPS:
					case PACKAGE_NAME:
					case PACKAGE_SCHEMA:
					case PACKAGE_VERSION:
					case PRIMARY:
					case RESET:
					case ROTATE:
					case START:
					case SYSIBM:
					case TRANSACTION:
					case XMLSCHEMA:
					case ELEMENT:
					case URL:
					case NAMESPACE:
					case LOCATION:
					case SYSXSR:
					case ALGORITHM:
					case FIXEDLENGTH:
					case HUFFMAN:
					case LOB:
					case LOG:
					case LOGGED:
					case MAXPARTITIONS:
					case MAXROWS:
					case MEMBER:
					case MOVE:
					case PAGE:
					case PAGENUM:
					case PENDING:
					case RELATIVE:
					case SEGSIZE:
					case TRACKMOD:
					case ADDRESS:
					case ATTRIBUTES:
					case AUTHENTICATION:
					case AUTHID:
					case CONTEXT:
					case JOBNAME:
					case OWNER:
					case PROFILE:
					case QUALIFIER:
					case SERVAUTH:
					case TRUSTED:
					case SECTION:
					case ACTIVE:
					case VERSION:
					case ALIAS:
					case WORK:
					case WORKFILE:
					case SYSDEFLT:
					case NULTERM:
					case STRUCTURE:
					case GENERIC:
					case ABS:
					case ABSVAL:
					case ACOS:
					case ADD_DAYS:
					case ADD_MONTHS:
					case ARRAY_DELETE:
					case ARRAY_FIRST:
					case ARRAY_LAST:
					case ARRAY_NEXT:
					case ARRAY_PRIOR:
					case ARRAY_TRIM:
					case ASCII:
					case ASCII_CHR:
					case ASCIISTR:
					case ASCII_STR:
					case ASIN:
					case ATAN:
					case ATAN2:
					case ATANH:
					case BIGINT:
					case BINARY:
					case BITAND:
					case BITANDNOT:
					case BITNOT:
					case BITOR:
					case BITXOR:
					case BLOB:
					case BTRIM:
					case CARDINALITY:
					case CCSID_ENCODING:
					case CEIL:
					case CEILING:
					case CHAR9:
					case CHARACTER_LENGTH:
					case CHAR_LENGTH:
					case CHR:
					case CLOB:
					case COALESCE:
					case COLLATION_KEY:
					case COMPARE_DECFLOAT:
					case COS:
					case COSH:
					case DATE:
					case DAYOFMONTH:
					case DAYOFWEEK:
					case DAYOFWEEK_ISO:
					case DAYOFYEAR:
					case DAYS_BETWEEN:
					case DBCLOB:
					case DEC:
					case DECFLOAT:
					case DECFLOAT_FORMAT:
					case DECFLOAT_SORTKEY:
					case DECIMAL:
					case DECODE:
					case DECRYPT_BINARY:
					case DECRYPT_BIT:
					case DECRYPT_CHAR:
					case DECRYPT_DATAKEY_BIGINT:
					case DECRYPT_DATAKEY_BIT:
					case DECRYPT_DATAKEY_CLOB:
					case DECRYPT_DATAKEY_DBCLOB:
					case DECRYPT_DATAKEY_DECIMAL:
					case DECRYPT_DATAKEY_INTEGER:
					case DECRYPT_DATAKEY_VARCHAR:
					case DECRYPT_DATAKEY_VARGRAPHIC:
					case DECRYPT_DB:
					case DEGREES:
					case DIFFERENCE:
					case DIGITS:
					case DOUBLE_PRECISION:
					case DSN_XMLVALIDATE:
					case EBCDIC_CHR:
					case EBCDIC_STR:
					case ENCRYPT_DATAKEY:
					case ENCRYPT_TDES:
					case EXP:
					case EXTRACT:
					case FLOAT:
					case FLOOR:
					case GENERATE_UNIQUE:
					case GENERATE_UNIQUE_BINARY:
					case GETHINT:
					case GETVARIABLE:
					case GRAPHIC:
					case GREATEST:
					case HASH:
					case HASH_CRC32:
					case HASH_MD5:
					case HASH_SHA1:
					case HASH_SHA256:
					case HEX:
					case IDENTITY_VAL_LOCAL:
					case IFNULL:
					case INSTR:
					case INT:
					case INTEGER:
					case JULIAN_DAY:
					case LAST_DAY:
					case LCASE:
					case LEAST:
					case LENGTH:
					case LN:
					case LOCATE:
					case LOCATE_IN_STRING:
					case LOG10:
					case LOWER:
					case LPAD:
					case LTRIM:
					case MAX:
					case MAX_CARDINALITY:
					case MIDNIGHT_SECONDS:
					case MIN:
					case MINUTE:
					case MOD:
					case MONTHS_BETWEEN:
					case MQREAD:
					case MQREADCLOB:
					case MQRECEIVE:
					case MQRECEIVECLOB:
					case MQSEND:
					case MULTIPLY_ALT:
					case NEXT_DAY:
					case NEXT_MONTH:
					case NORMALIZE_DECFLOAT:
					case NORMALIZE_STRING:
					case NULLIF:
					case NVL:
					case OVERLAY:
					case PACK:
					case POSITION:
					case POSSTR:
					case POW:
					case POWER:
					case QUANTIZE:
					case QUARTER:
					case RADIANS:
					case RAISE_ERROR:
					case RAND:
					case RANDOM:
					case REAL:
					case REGEXP_COUNT:
					case REGEXP_INSTR:
					case REGEXP_LIKE:
					case REGEXP_REPLACE:
					case REGEXP_SUBSTR:
					case REPLACE:
					case RID:
					case ROUND:
					case ROUND_TIMESTAMP:
					case ROWID:
					case RPAD:
					case RTRIM:
					case SCORE:
					case SIGN:
					case SIN:
					case SINH:
					case SMALLINT:
					case SOAPHTTPC:
					case SOAPHTTPNC:
					case SOAPHTTPNV:
					case SOAPHTTPV:
					case SOUNDEX:
					case SPACE:
					case SQRT:
					case STRIP:
					case STRLEFT:
					case STRPOS:
					case STRRIGHT:
					case SUBSTR:
					case SUBSTRING:
					case TAN:
					case TANH:
					case TIME:
					case TIMESTAMP:
					case TIMESTAMPADD:
					case TIMESTAMPDIFF:
					case TIMESTAMP_FORMAT:
					case TIMESTAMP_ISO:
					case TIMESTAMP_TZ:
					case TO_CHAR:
					case TO_CLOB:
					case TO_DATE:
					case TO_NUMBER:
					case TOTALORDER:
					case TO_TIMESTAMP:
					case TRANSLATE:
					case TRIM:
					case TRIM_ARRAY:
					case TRUNC:
					case TRUNC_TIMESTAMP:
					case UCASE:
					case UNICODE:
					case UNICODE_STR:
					case UNISTR:
					case UPPER:
					case VARBINARY:
					case VARCHAR:
					case VARCHAR9:
					case VARCHAR_BIT_FORMAT:
					case VARCHAR_FORMAT:
					case VARGRAPHIC:
					case VERIFY_GROUP_FOR_USER:
					case VERIFY_ROLE_FOR_USER:
					case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
					case WEEK:
					case WEEK_ISO:
					case WRAP:
					case XMLATTRIBUTES:
					case XMLCOMMENT:
					case XMLCONCAT:
					case XMLDOCUMENT:
					case XMLELEMENT:
					case XMLFOREST:
					case XMLMODIFY:
					case XMLPARSE:
					case XMLPI:
					case XMLQUERY:
					case XMLSERIALIZE:
					case XMLTEXT:
					case XMLXSROBJECTID:
					case XSLTRANSFORM:
					case CURRENT_ACCELERATOR:
					case CURRENT_APPLICATION_COMPATIBILITY:
					case CURRENT_APPLICATION_ENCODING_SCHEME:
					case CURRENT_CLIENT_ACCTNG:
					case CURRENT_CLIENT_APPLNAME:
					case CURRENT_CLIENT_CORR_TOKEN:
					case CURRENT_CLIENT_USERID:
					case CURRENT_CLIENT_WRKSTNNAME:
					case CURRENT_DATE:
					case CURRENT_DEBUG_MODE:
					case CURRENT_DECFLOAT_ROUNDING_MODE:
					case CURRENT_DEGREE:
					case CURRENT_EXPLAIN_MODE:
					case CURRENT_GET_ACCEL_ARCHIVE:
					case CURRENT_LOCALE_LC_CTYPE:
					case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
					case CURRENT_MEMBER:
					case CURRENT_OPTIMIZATION_HINT:
					case CURRENT_PACKAGE_PATH:
					case CURRENT_PACKAGESET:
					case CURRENT_PATH:
					case CURRENT_PRECISION:
					case CURRENT_QUERY_ACCELERATION:
					case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
					case CURRENT_REFRESH_AGE:
					case CURRENT_ROUTINE_VERSION:
					case CURRENT_RULES:
					case CURRENT_SCHEMA:
					case CURRENT_SERVER:
					case CURRENT_SQLID:
					case CURRENT_TEMPORAL_BUSINESS_TIME:
					case CURRENT_TEMPORAL_SYSTEM_TIME:
					case CURRENT_TIME:
					case CURRENT_TIMESTAMP:
					case CURRENT_TIME_ZONE:
					case ENCRYPTION_PASSWORD:
					case SESSION_TIME_ZONE:
					case SESSION_USER:
					case USER:
					case ADMIN_TASK_LIST:
					case ADMIN_TASK_OUTPUT:
					case ADMIN_TASK_STATUS:
					case BLOCKING_THREADS:
					case MQREADALL:
					case MQREADALLCLOB:
					case MQRECEIVEALL:
					case MQRECEIVEALLCLOB:
					case XMLTABLE:
					case SQLIDENTIFIER:
						{
						setState(5265);
						identifier();
						}
						break;
					case NUMERICLITERAL:
						{
						setState(5266);
						match(NUMERICLITERAL);
						}
						break;
					case INTEGERLITERAL:
						{
						setState(5267);
						match(INTEGERLITERAL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					} 
				}
				setState(5274);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,621,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public IndexNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterIndexName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitIndexName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitIndexName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexNameContext indexName() throws RecognitionException {
		IndexNameContext _localctx = new IndexNameContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_indexName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5278);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,622,_ctx) ) {
			case 1:
				{
				setState(5275);
				schemaName();
				setState(5276);
				match(DOT);
				}
				break;
			}
			setState(5280);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MaskNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public MaskNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_maskName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterMaskName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitMaskName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitMaskName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MaskNameContext maskName() throws RecognitionException {
		MaskNameContext _localctx = new MaskNameContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_maskName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5285);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,623,_ctx) ) {
			case 1:
				{
				setState(5282);
				schemaName();
				setState(5283);
				match(DOT);
				}
				break;
			}
			setState(5287);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PermissionNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public PermissionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_permissionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPermissionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPermissionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPermissionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PermissionNameContext permissionName() throws RecognitionException {
		PermissionNameContext _localctx = new PermissionNameContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_permissionName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5292);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,624,_ctx) ) {
			case 1:
				{
				setState(5289);
				schemaName();
				setState(5290);
				match(DOT);
				}
				break;
			}
			setState(5294);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcedureNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public LocationNameContext locationName() {
			return getRuleContext(LocationNameContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(DB2zSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(DB2zSQLParser.DOT, i);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public ProcedureNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterProcedureName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitProcedureName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitProcedureName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProcedureNameContext procedureName() throws RecognitionException {
		ProcedureNameContext _localctx = new ProcedureNameContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_procedureName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5304);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,625,_ctx) ) {
			case 1:
				{
				{
				setState(5296);
				locationName();
				setState(5297);
				match(DOT);
				setState(5298);
				schemaName();
				setState(5299);
				match(DOT);
				}
				}
				break;
			case 2:
				{
				{
				setState(5301);
				schemaName();
				setState(5302);
				match(DOT);
				}
				}
				break;
			}
			setState(5306);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SequenceNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public SequenceNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequenceName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSequenceName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSequenceName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSequenceName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SequenceNameContext sequenceName() throws RecognitionException {
		SequenceNameContext _localctx = new SequenceNameContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_sequenceName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5311);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,626,_ctx) ) {
			case 1:
				{
				setState(5308);
				schemaName();
				setState(5309);
				match(DOT);
				}
				break;
			}
			setState(5313);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MemberNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public MemberNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_memberName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterMemberName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitMemberName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitMemberName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MemberNameContext memberName() throws RecognitionException {
		MemberNameContext _localctx = new MemberNameContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_memberName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5315);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DatabaseNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public DatabaseNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_databaseName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDatabaseName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDatabaseName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDatabaseName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DatabaseNameContext databaseName() throws RecognitionException {
		DatabaseNameContext _localctx = new DatabaseNameContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_databaseName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5317);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablespaceNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TablespaceNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablespaceName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTablespaceName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTablespaceName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTablespaceName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablespaceNameContext tablespaceName() throws RecognitionException {
		TablespaceNameContext _localctx = new TablespaceNameContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_tablespaceName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5319);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CatalogNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public CatalogNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_catalogName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCatalogName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCatalogName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCatalogName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CatalogNameContext catalogName() throws RecognitionException {
		CatalogNameContext _localctx = new CatalogNameContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_catalogName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5321);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TriggerNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTriggerName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTriggerName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTriggerName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerNameContext triggerName() throws RecognitionException {
		TriggerNameContext _localctx = new TriggerNameContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_triggerName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5323);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ContextNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ContextNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_contextName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterContextName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitContextName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitContextName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ContextNameContext contextName() throws RecognitionException {
		ContextNameContext _localctx = new ContextNameContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_contextName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5325);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AuthorizationNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public AuthorizationNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_authorizationName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAuthorizationName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAuthorizationName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAuthorizationName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AuthorizationNameContext authorizationName() throws RecognitionException {
		AuthorizationNameContext _localctx = new AuthorizationNameContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_authorizationName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5327);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProfileNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ProfileNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_profileName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterProfileName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitProfileName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitProfileName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProfileNameContext profileName() throws RecognitionException {
		ProfileNameContext _localctx = new ProfileNameContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_profileName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5329);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public RoleNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterRoleName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitRoleName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitRoleName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleNameContext roleName() throws RecognitionException {
		RoleNameContext _localctx = new RoleNameContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_roleName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5331);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SeclabelNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SeclabelNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seclabelName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSeclabelName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSeclabelName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSeclabelName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SeclabelNameContext seclabelName() throws RecognitionException {
		SeclabelNameContext _localctx = new SeclabelNameContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_seclabelName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5333);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ParameterNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterParameterName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitParameterName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitParameterName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParameterNameContext parameterName() throws RecognitionException {
		ParameterNameContext _localctx = new ParameterNameContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_parameterName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5335);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AddressValueContext extends ParserRuleContext {
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public AddressValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_addressValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAddressValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAddressValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAddressValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AddressValueContext addressValue() throws RecognitionException {
		AddressValueContext _localctx = new AddressValueContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_addressValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5337);
			match(NONNUMERICLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JobnameValueContext extends ParserRuleContext {
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public JobnameValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jobnameValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterJobnameValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitJobnameValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitJobnameValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JobnameValueContext jobnameValue() throws RecognitionException {
		JobnameValueContext _localctx = new JobnameValueContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_jobnameValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5339);
			match(NONNUMERICLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ServauthValueContext extends ParserRuleContext {
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public ServauthValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_servauthValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterServauthValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitServauthValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitServauthValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ServauthValueContext servauthValue() throws RecognitionException {
		ServauthValueContext _localctx = new ServauthValueContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_servauthValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5341);
			match(NONNUMERICLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EncryptionValueContext extends ParserRuleContext {
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public EncryptionValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_encryptionValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterEncryptionValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitEncryptionValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitEncryptionValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EncryptionValueContext encryptionValue() throws RecognitionException {
		EncryptionValueContext _localctx = new EncryptionValueContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_encryptionValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5343);
			match(NONNUMERICLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BpNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public BpNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bpName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterBpName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitBpName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitBpName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BpNameContext bpName() throws RecognitionException {
		BpNameContext _localctx = new BpNameContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_bpName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5345);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StogroupNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public StogroupNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stogroupName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterStogroupName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitStogroupName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitStogroupName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StogroupNameContext stogroupName() throws RecognitionException {
		StogroupNameContext _localctx = new StogroupNameContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_stogroupName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5347);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DcNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public DcNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dcName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDcName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDcName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDcName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DcNameContext dcName() throws RecognitionException {
		DcNameContext _localctx = new DcNameContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_dcName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5349);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class McNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public McNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mcName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterMcName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitMcName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitMcName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final McNameContext mcName() throws RecognitionException {
		McNameContext _localctx = new McNameContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_mcName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5351);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ScNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterScName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitScName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitScName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ScNameContext scName() throws RecognitionException {
		ScNameContext _localctx = new ScNameContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_scName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5353);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VolumeIDContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public VolumeIDContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_volumeID; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterVolumeID(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitVolumeID(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitVolumeID(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VolumeIDContext volumeID() throws RecognitionException {
		VolumeIDContext _localctx = new VolumeIDContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_volumeID);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5355);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyLabelNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode NONNUMERICLITERAL() { return getToken(DB2zSQLParser.NONNUMERICLITERAL, 0); }
		public KeyLabelNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyLabelName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterKeyLabelName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitKeyLabelName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitKeyLabelName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyLabelNameContext keyLabelName() throws RecognitionException {
		KeyLabelNameContext _localctx = new KeyLabelNameContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_keyLabelName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5359);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case ALL:
			case ALLOCATE:
			case ALLOW:
			case ALTER:
			case ALTERAND:
			case ANY:
			case ARRAY:
			case ARRAY_EXISTS:
			case AS:
			case ASENSITIVE:
			case ASSOCIATE:
			case ASUTIME:
			case AT:
			case AUDIT:
			case AUX:
			case AUXILIARY:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BUFFERPOOL:
			case BY:
			case CALL:
			case CAPTURE:
			case CASCADED:
			case CASE:
			case CAST:
			case CCSID:
			case CHAR:
			case CHARACTER:
			case CHECK:
			case CLONE:
			case CLOSE:
			case CLUSTER:
			case COLLECTION:
			case COLLID:
			case COLUMN:
			case COMMENT:
			case COMMIT:
			case CONCAT:
			case CONDITION:
			case CONNECT:
			case CONNECTION:
			case CONSTRAINT:
			case CONTAINS:
			case CONTENT:
			case CONTINUE:
			case CREATE:
			case CUBE:
			case CURRENT:
			case CURRENT_LC_CTYPE:
			case CURRVAL:
			case CURSOR:
			case DATA:
			case DATABASE:
			case DAY:
			case DAYS:
			case DBINFO:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DISABLE:
			case DISALLOW:
			case DISTINCT:
			case DO:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSSIZE:
			case DYNAMIC:
			case EDITPROC:
			case ELSE:
			case ELSEIF:
			case ENCODING:
			case ENCRYPTION:
			case END:
			case END_EXEC:
			case ENDING:
			case ERASE:
			case ESCAPE:
			case EXCEPT:
			case EXCEPTION:
			case EXEC_SQL:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case FENCED:
			case FETCH:
			case FIELDPROC:
			case FINAL:
			case FIRST:
			case FOR:
			case FREE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANT:
			case GROUP:
			case HANDLER:
			case HAVING:
			case HOLD:
			case HOUR:
			case HOURS:
			case IF:
			case IMMEDIATE:
			case IN:
			case INCLUSIVE:
			case INDEX:
			case INDEXBP:
			case INHERIT:
			case INNER:
			case INOUT:
			case INSENSITIVE:
			case INSERT:
			case INTERSECT:
			case INTO:
			case IS:
			case ISOBID:
			case ITERATE:
			case JAR:
			case JOIN:
			case KEEP:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LAST:
			case LC_CTYPE:
			case LEAVE:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOCALE:
			case LOCATOR:
			case LOCATORS:
			case LOCK:
			case LOCKMAX:
			case LOCKSIZE:
			case LONG:
			case LOOP:
			case MAINTAINED:
			case MATERIALIZED:
			case MICROSECOND:
			case MICROSECONDS:
			case MODIFIES:
			case MONTH:
			case MONTHS:
			case NEXT:
			case NEXTVAL:
			case NO:
			case NONE:
			case NOT:
			case NULL:
			case NULLS:
			case NUMPARTS:
			case OBID:
			case OF:
			case OFFSET:
			case OLD:
			case ON:
			case OPEN:
			case OPTIMIZATION:
			case OPTIMIZE:
			case OR:
			case ORDER:
			case ORGANIZATION:
			case OUT:
			case OUTER:
			case PACKAGE:
			case PADDED:
			case PARAMETER:
			case PART:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONING:
			case PATH:
			case PERIOD:
			case PIECESIZE:
			case PLAN:
			case PRECISION:
			case PREPARE:
			case PREVVAL:
			case PRIOR:
			case PRIQTY:
			case PRIVILEGES:
			case PROCEDURE:
			case PROGRAM:
			case PSID:
			case PUBLIC:
			case QUERY:
			case QUERYNO:
			case READS:
			case REFERENCES:
			case REFRESH:
			case RELEASE:
			case RENAME:
			case REPEAT:
			case RESIGNAL:
			case RESTRICT:
			case RESULT:
			case RESULT_SET_LOCATOR:
			case RETURN:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUND_CEILING:
			case ROUND_DOWN:
			case ROUND_FLOOR:
			case ROUND_HALF_DOWN:
			case ROUND_HALF_EVEN:
			case ROUND_HALF_UP:
			case ROUND_UP:
			case ROW:
			case ROWSET:
			case RUN:
			case SAVEPOINT:
			case SCHEMA:
			case SCRATCHPAD:
			case SECOND:
			case SECONDS:
			case SECQTY:
			case SECURITY:
			case SELECT:
			case SENSITIVE:
			case SEQUENCE:
			case SET:
			case SIGNAL:
			case SIMPLE:
			case SOME:
			case SOURCE:
			case SPECIFIC:
			case STANDARD:
			case STATEMENT:
			case STATIC:
			case STAY:
			case STOGROUP:
			case STORES:
			case STYLE:
			case SUMMARY:
			case SYNONYM:
			case SYSDATE:
			case SYSTEM:
			case SYSTIMESTAMP:
			case TABLE:
			case TABLESPACE:
			case THEN:
			case TO:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNDO:
			case UNION:
			case UNIQUE:
			case UNTIL:
			case UPDATE:
			case USING:
			case VALIDPROC:
			case VALUE:
			case VALUES:
			case VARIABLE:
			case VARIANT:
			case VCAT:
			case VERSIONING:
			case VIEW:
			case VOLATILE:
			case VOLUMES:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WLM:
			case XMLCAST:
			case XMLEXISTS:
			case XMLNAMESPACES:
			case YEAR:
			case YEARS:
			case ZONE:
			case AND:
			case ARRAY_AGG:
			case ASC:
			case AVG:
			case BIT:
			case CHANGE:
			case CODEUNITS16:
			case CODEUNITS32:
			case CORR:
			case CORRELATION:
			case COUNT:
			case COUNT_BIG:
			case COVAR:
			case COVARIANCE:
			case COVARIANCE_SAMP:
			case COVAR_POP:
			case COVAR_SAMP:
			case CS:
			case CUME_DIST:
			case DENSE_RANK:
			case DESC:
			case EBCDIC:
			case EXCLUSIVE:
			case FIRST_VALUE:
			case FOLLOWING:
			case GROUPING:
			case IGNORE:
			case INDICATOR:
			case INPUT:
			case ISNULL:
			case LAG:
			case LARGE:
			case LAST_VALUE:
			case LEAD:
			case LISTAGG:
			case LOCKED:
			case LOCKS:
			case MEDIAN:
			case MINUTES:
			case MIXED:
			case NOTNULL:
			case NTH_VALUE:
			case NTILE:
			case NUMERIC:
			case OBJECT:
			case OCTETS:
			case ONLY:
			case OVER:
			case PASSING:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PERCENT_RANK:
			case PRECEDING:
			case PREVIOUS:
			case RANGE:
			case RANK:
			case RATIO_TO_REPORT:
			case READ:
			case REF:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_ICPT:
			case REGR_INTERCEPT:
			case REGR_R2:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case RESPECT:
			case ROW_NUMBER:
			case ROWS:
			case RR:
			case RS:
			case SBCS:
			case SELECTIVITY:
			case SETS:
			case SHARE:
			case SKIP_:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case TOKEN:
			case UNBOUNDED:
			case UNPACK:
			case UR:
			case USE:
			case VAR:
			case VARIANCE:
			case VARIANCE_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARYING:
			case WITHOUT:
			case XML:
			case XMLAGG:
			case COLUMNS:
			case SQLID:
			case ORDINALITY:
			case SYSTEM_TIME:
			case BUSINESS_TIME:
			case MULTIPLIER:
			case UNNEST:
			case CROSS:
			case CALLER:
			case CLIENT:
			case POSITIONING:
			case SCROLL:
			case ACTION:
			case ASSEMBLE:
			case C_:
			case CALLED:
			case COBOL:
			case DB2:
			case DEFINER:
			case DISPATCH:
			case ENVIRONMENT:
			case FAILURE:
			case FAILURES:
			case JAVA:
			case MAIN:
			case NAME:
			case OPTIONS:
			case PARALLEL:
			case PLI:
			case REGISTERS:
			case RESIDENT:
			case SECURED:
			case SPECIAL:
			case SQL:
			case STOP:
			case SUB:
			case YES:
			case APPLICATION:
			case CHANGED:
			case COMPATIBILITY:
			case COMPRESS:
			case COPY:
			case FREEPAGE:
			case GBPCACHE:
			case INCLUDE:
			case MAXVALUE:
			case MINVALUE:
			case PCTFREE:
			case REGENERATE:
			case MASK:
			case ENABLE:
			case PERMISSION:
			case ATOMIC:
			case SQLEXCEPTION:
			case MERGE:
			case MATCHED:
			case SQLSTATE:
			case MESSAGE_TEXT:
			case OVERRIDING:
			case PORTION:
			case DB2SQL:
			case DEBUG:
			case GENERAL:
			case MODE_:
			case REXX:
			case CACHE:
			case CYCLE:
			case INCREMENT:
			case RESTART:
			case DATACLAS:
			case MGMTCLAS:
			case REMOVE:
			case STORCLAS:
			case ACCESS:
			case ACTIVATE:
			case ALWAYS:
			case APPEND:
			case ARCHIVE:
			case BUSINESS:
			case CASCADE:
			case CHANGES:
			case CONTROL:
			case DEACTIVATE:
			case DEFERRED:
			case EACH:
			case ENFORCED:
			case EXTRA:
			case FOREIGN:
			case HIDDEN_:
			case HISTORY:
			case ID:
			case IDENTITY:
			case IMPLICITLY:
			case INITIALLY:
			case INLINE:
			case OPERATION:
			case ORGANIZE:
			case OVERLAPS:
			case PACKAGE_NAME:
			case PACKAGE_SCHEMA:
			case PACKAGE_VERSION:
			case PRIMARY:
			case RESET:
			case ROTATE:
			case START:
			case SYSIBM:
			case TRANSACTION:
			case XMLSCHEMA:
			case ELEMENT:
			case URL:
			case NAMESPACE:
			case LOCATION:
			case SYSXSR:
			case ALGORITHM:
			case FIXEDLENGTH:
			case HUFFMAN:
			case LOB:
			case LOG:
			case LOGGED:
			case MAXPARTITIONS:
			case MAXROWS:
			case MEMBER:
			case MOVE:
			case PAGE:
			case PAGENUM:
			case PENDING:
			case RELATIVE:
			case SEGSIZE:
			case TRACKMOD:
			case ADDRESS:
			case ATTRIBUTES:
			case AUTHENTICATION:
			case AUTHID:
			case CONTEXT:
			case JOBNAME:
			case OWNER:
			case PROFILE:
			case QUALIFIER:
			case SERVAUTH:
			case TRUSTED:
			case SECTION:
			case ACTIVE:
			case VERSION:
			case ALIAS:
			case WORK:
			case WORKFILE:
			case SYSDEFLT:
			case NULTERM:
			case STRUCTURE:
			case GENERIC:
			case ABS:
			case ABSVAL:
			case ACOS:
			case ADD_DAYS:
			case ADD_MONTHS:
			case ARRAY_DELETE:
			case ARRAY_FIRST:
			case ARRAY_LAST:
			case ARRAY_NEXT:
			case ARRAY_PRIOR:
			case ARRAY_TRIM:
			case ASCII:
			case ASCII_CHR:
			case ASCIISTR:
			case ASCII_STR:
			case ASIN:
			case ATAN:
			case ATAN2:
			case ATANH:
			case BIGINT:
			case BINARY:
			case BITAND:
			case BITANDNOT:
			case BITNOT:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BTRIM:
			case CARDINALITY:
			case CCSID_ENCODING:
			case CEIL:
			case CEILING:
			case CHAR9:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case CHR:
			case CLOB:
			case COALESCE:
			case COLLATION_KEY:
			case COMPARE_DECFLOAT:
			case COS:
			case COSH:
			case DATE:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFWEEK_ISO:
			case DAYOFYEAR:
			case DAYS_BETWEEN:
			case DBCLOB:
			case DEC:
			case DECFLOAT:
			case DECFLOAT_FORMAT:
			case DECFLOAT_SORTKEY:
			case DECIMAL:
			case DECODE:
			case DECRYPT_BINARY:
			case DECRYPT_BIT:
			case DECRYPT_CHAR:
			case DECRYPT_DATAKEY_BIGINT:
			case DECRYPT_DATAKEY_BIT:
			case DECRYPT_DATAKEY_CLOB:
			case DECRYPT_DATAKEY_DBCLOB:
			case DECRYPT_DATAKEY_DECIMAL:
			case DECRYPT_DATAKEY_INTEGER:
			case DECRYPT_DATAKEY_VARCHAR:
			case DECRYPT_DATAKEY_VARGRAPHIC:
			case DECRYPT_DB:
			case DEGREES:
			case DIFFERENCE:
			case DIGITS:
			case DOUBLE_PRECISION:
			case DSN_XMLVALIDATE:
			case EBCDIC_CHR:
			case EBCDIC_STR:
			case ENCRYPT_DATAKEY:
			case ENCRYPT_TDES:
			case EXP:
			case EXTRACT:
			case FLOAT:
			case FLOOR:
			case GENERATE_UNIQUE:
			case GENERATE_UNIQUE_BINARY:
			case GETHINT:
			case GETVARIABLE:
			case GRAPHIC:
			case GREATEST:
			case HASH:
			case HASH_CRC32:
			case HASH_MD5:
			case HASH_SHA1:
			case HASH_SHA256:
			case HEX:
			case IDENTITY_VAL_LOCAL:
			case IFNULL:
			case INSTR:
			case INT:
			case INTEGER:
			case JULIAN_DAY:
			case LAST_DAY:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LN:
			case LOCATE:
			case LOCATE_IN_STRING:
			case LOG10:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAX:
			case MAX_CARDINALITY:
			case MIDNIGHT_SECONDS:
			case MIN:
			case MINUTE:
			case MOD:
			case MONTHS_BETWEEN:
			case MQREAD:
			case MQREADCLOB:
			case MQRECEIVE:
			case MQRECEIVECLOB:
			case MQSEND:
			case MULTIPLY_ALT:
			case NEXT_DAY:
			case NEXT_MONTH:
			case NORMALIZE_DECFLOAT:
			case NORMALIZE_STRING:
			case NULLIF:
			case NVL:
			case OVERLAY:
			case PACK:
			case POSITION:
			case POSSTR:
			case POW:
			case POWER:
			case QUANTIZE:
			case QUARTER:
			case RADIANS:
			case RAISE_ERROR:
			case RAND:
			case RANDOM:
			case REAL:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REPLACE:
			case RID:
			case ROUND:
			case ROUND_TIMESTAMP:
			case ROWID:
			case RPAD:
			case RTRIM:
			case SCORE:
			case SIGN:
			case SIN:
			case SINH:
			case SMALLINT:
			case SOAPHTTPC:
			case SOAPHTTPNC:
			case SOAPHTTPNV:
			case SOAPHTTPV:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STRIP:
			case STRLEFT:
			case STRPOS:
			case STRRIGHT:
			case SUBSTR:
			case SUBSTRING:
			case TAN:
			case TANH:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIMESTAMP_FORMAT:
			case TIMESTAMP_ISO:
			case TIMESTAMP_TZ:
			case TO_CHAR:
			case TO_CLOB:
			case TO_DATE:
			case TO_NUMBER:
			case TOTALORDER:
			case TO_TIMESTAMP:
			case TRANSLATE:
			case TRIM:
			case TRIM_ARRAY:
			case TRUNC:
			case TRUNC_TIMESTAMP:
			case UCASE:
			case UNICODE:
			case UNICODE_STR:
			case UNISTR:
			case UPPER:
			case VARBINARY:
			case VARCHAR:
			case VARCHAR9:
			case VARCHAR_BIT_FORMAT:
			case VARCHAR_FORMAT:
			case VARGRAPHIC:
			case VERIFY_GROUP_FOR_USER:
			case VERIFY_ROLE_FOR_USER:
			case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
			case WEEK:
			case WEEK_ISO:
			case WRAP:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLCONCAT:
			case XMLDOCUMENT:
			case XMLELEMENT:
			case XMLFOREST:
			case XMLMODIFY:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLSERIALIZE:
			case XMLTEXT:
			case XMLXSROBJECTID:
			case XSLTRANSFORM:
			case CURRENT_ACCELERATOR:
			case CURRENT_APPLICATION_COMPATIBILITY:
			case CURRENT_APPLICATION_ENCODING_SCHEME:
			case CURRENT_CLIENT_ACCTNG:
			case CURRENT_CLIENT_APPLNAME:
			case CURRENT_CLIENT_CORR_TOKEN:
			case CURRENT_CLIENT_USERID:
			case CURRENT_CLIENT_WRKSTNNAME:
			case CURRENT_DATE:
			case CURRENT_DEBUG_MODE:
			case CURRENT_DECFLOAT_ROUNDING_MODE:
			case CURRENT_DEGREE:
			case CURRENT_EXPLAIN_MODE:
			case CURRENT_GET_ACCEL_ARCHIVE:
			case CURRENT_LOCALE_LC_CTYPE:
			case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
			case CURRENT_MEMBER:
			case CURRENT_OPTIMIZATION_HINT:
			case CURRENT_PACKAGE_PATH:
			case CURRENT_PACKAGESET:
			case CURRENT_PATH:
			case CURRENT_PRECISION:
			case CURRENT_QUERY_ACCELERATION:
			case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
			case CURRENT_REFRESH_AGE:
			case CURRENT_ROUTINE_VERSION:
			case CURRENT_RULES:
			case CURRENT_SCHEMA:
			case CURRENT_SERVER:
			case CURRENT_SQLID:
			case CURRENT_TEMPORAL_BUSINESS_TIME:
			case CURRENT_TEMPORAL_SYSTEM_TIME:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_TIME_ZONE:
			case ENCRYPTION_PASSWORD:
			case SESSION_TIME_ZONE:
			case SESSION_USER:
			case USER:
			case ADMIN_TASK_LIST:
			case ADMIN_TASK_OUTPUT:
			case ADMIN_TASK_STATUS:
			case BLOCKING_THREADS:
			case MQREADALL:
			case MQREADALLCLOB:
			case MQRECEIVEALL:
			case MQRECEIVEALLCLOB:
			case XMLTABLE:
			case SQLIDENTIFIER:
				{
				setState(5357);
				identifier();
				}
				break;
			case NONNUMERICLITERAL:
				{
				setState(5358);
				match(NONNUMERICLITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public FunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFunctionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFunctionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFunctionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionNameContext functionName() throws RecognitionException {
		FunctionNameContext _localctx = new FunctionNameContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_functionName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5364);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,628,_ctx) ) {
			case 1:
				{
				setState(5361);
				schemaName();
				setState(5362);
				match(DOT);
				}
				break;
			}
			setState(5366);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SpecificNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public SpecificNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_specificName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSpecificName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSpecificName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSpecificName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SpecificNameContext specificName() throws RecognitionException {
		SpecificNameContext _localctx = new SpecificNameContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_specificName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5371);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,629,_ctx) ) {
			case 1:
				{
				setState(5368);
				schemaName();
				setState(5369);
				match(DOT);
				}
				break;
			}
			setState(5373);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HostVariableContext extends ParserRuleContext {
		public List<TerminalNode> COLON() { return getTokens(DB2zSQLParser.COLON); }
		public TerminalNode COLON(int i) {
			return getToken(DB2zSQLParser.COLON, i);
		}
		public List<HostIdentifierContext> hostIdentifier() {
			return getRuleContexts(HostIdentifierContext.class);
		}
		public HostIdentifierContext hostIdentifier(int i) {
			return getRuleContext(HostIdentifierContext.class,i);
		}
		public List<HostStructureContext> hostStructure() {
			return getRuleContexts(HostStructureContext.class);
		}
		public HostStructureContext hostStructure(int i) {
			return getRuleContext(HostStructureContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(DB2zSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(DB2zSQLParser.DOT, i);
		}
		public TerminalNode INDICATOR() { return getToken(DB2zSQLParser.INDICATOR, 0); }
		public HostVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hostVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterHostVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitHostVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitHostVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HostVariableContext hostVariable() throws RecognitionException {
		HostVariableContext _localctx = new HostVariableContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_hostVariable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5375);
			match(COLON);
			setState(5379);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,630,_ctx) ) {
			case 1:
				{
				setState(5376);
				hostStructure();
				setState(5377);
				match(DOT);
				}
				break;
			}
			setState(5381);
			hostIdentifier();
			setState(5392);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,633,_ctx) ) {
			case 1:
				{
				setState(5383);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDICATOR) {
					{
					setState(5382);
					match(INDICATOR);
					}
				}

				setState(5385);
				match(COLON);
				setState(5389);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,632,_ctx) ) {
				case 1:
					{
					setState(5386);
					hostStructure();
					setState(5387);
					match(DOT);
					}
					break;
				}
				setState(5391);
				hostIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HostIdentifierContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public HostIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hostIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterHostIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitHostIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitHostIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HostIdentifierContext hostIdentifier() throws RecognitionException {
		HostIdentifierContext _localctx = new HostIdentifierContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_hostIdentifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5394);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HostStructureContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public HostStructureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hostStructure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterHostStructure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitHostStructure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitHostStructure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HostStructureContext hostStructure() throws RecognitionException {
		HostStructureContext _localctx = new HostStructureContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_hostStructure);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5396);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public HostVariableContext hostVariable() {
			return getRuleContext(HostVariableContext.class,0);
		}
		public VariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableContext variable() throws RecognitionException {
		VariableContext _localctx = new VariableContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_variable);
		try {
			setState(5405);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case ALL:
			case ALLOCATE:
			case ALLOW:
			case ALTER:
			case ALTERAND:
			case ANY:
			case ARRAY:
			case ARRAY_EXISTS:
			case AS:
			case ASENSITIVE:
			case ASSOCIATE:
			case ASUTIME:
			case AT:
			case AUDIT:
			case AUX:
			case AUXILIARY:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BUFFERPOOL:
			case BY:
			case CALL:
			case CAPTURE:
			case CASCADED:
			case CASE:
			case CAST:
			case CCSID:
			case CHAR:
			case CHARACTER:
			case CHECK:
			case CLONE:
			case CLOSE:
			case CLUSTER:
			case COLLECTION:
			case COLLID:
			case COLUMN:
			case COMMENT:
			case COMMIT:
			case CONCAT:
			case CONDITION:
			case CONNECT:
			case CONNECTION:
			case CONSTRAINT:
			case CONTAINS:
			case CONTENT:
			case CONTINUE:
			case CREATE:
			case CUBE:
			case CURRENT:
			case CURRENT_LC_CTYPE:
			case CURRVAL:
			case CURSOR:
			case DATA:
			case DATABASE:
			case DAY:
			case DAYS:
			case DBINFO:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DISABLE:
			case DISALLOW:
			case DISTINCT:
			case DO:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSSIZE:
			case DYNAMIC:
			case EDITPROC:
			case ELSE:
			case ELSEIF:
			case ENCODING:
			case ENCRYPTION:
			case END:
			case END_EXEC:
			case ENDING:
			case ERASE:
			case ESCAPE:
			case EXCEPT:
			case EXCEPTION:
			case EXEC_SQL:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case FENCED:
			case FETCH:
			case FIELDPROC:
			case FINAL:
			case FIRST:
			case FOR:
			case FREE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANT:
			case GROUP:
			case HANDLER:
			case HAVING:
			case HOLD:
			case HOUR:
			case HOURS:
			case IF:
			case IMMEDIATE:
			case IN:
			case INCLUSIVE:
			case INDEX:
			case INDEXBP:
			case INHERIT:
			case INNER:
			case INOUT:
			case INSENSITIVE:
			case INSERT:
			case INTERSECT:
			case INTO:
			case IS:
			case ISOBID:
			case ITERATE:
			case JAR:
			case JOIN:
			case KEEP:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LAST:
			case LC_CTYPE:
			case LEAVE:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOCALE:
			case LOCATOR:
			case LOCATORS:
			case LOCK:
			case LOCKMAX:
			case LOCKSIZE:
			case LONG:
			case LOOP:
			case MAINTAINED:
			case MATERIALIZED:
			case MICROSECOND:
			case MICROSECONDS:
			case MODIFIES:
			case MONTH:
			case MONTHS:
			case NEXT:
			case NEXTVAL:
			case NO:
			case NONE:
			case NOT:
			case NULL:
			case NULLS:
			case NUMPARTS:
			case OBID:
			case OF:
			case OFFSET:
			case OLD:
			case ON:
			case OPEN:
			case OPTIMIZATION:
			case OPTIMIZE:
			case OR:
			case ORDER:
			case ORGANIZATION:
			case OUT:
			case OUTER:
			case PACKAGE:
			case PADDED:
			case PARAMETER:
			case PART:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONING:
			case PATH:
			case PERIOD:
			case PIECESIZE:
			case PLAN:
			case PRECISION:
			case PREPARE:
			case PREVVAL:
			case PRIOR:
			case PRIQTY:
			case PRIVILEGES:
			case PROCEDURE:
			case PROGRAM:
			case PSID:
			case PUBLIC:
			case QUERY:
			case QUERYNO:
			case READS:
			case REFERENCES:
			case REFRESH:
			case RELEASE:
			case RENAME:
			case REPEAT:
			case RESIGNAL:
			case RESTRICT:
			case RESULT:
			case RESULT_SET_LOCATOR:
			case RETURN:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUND_CEILING:
			case ROUND_DOWN:
			case ROUND_FLOOR:
			case ROUND_HALF_DOWN:
			case ROUND_HALF_EVEN:
			case ROUND_HALF_UP:
			case ROUND_UP:
			case ROW:
			case ROWSET:
			case RUN:
			case SAVEPOINT:
			case SCHEMA:
			case SCRATCHPAD:
			case SECOND:
			case SECONDS:
			case SECQTY:
			case SECURITY:
			case SELECT:
			case SENSITIVE:
			case SEQUENCE:
			case SET:
			case SIGNAL:
			case SIMPLE:
			case SOME:
			case SOURCE:
			case SPECIFIC:
			case STANDARD:
			case STATEMENT:
			case STATIC:
			case STAY:
			case STOGROUP:
			case STORES:
			case STYLE:
			case SUMMARY:
			case SYNONYM:
			case SYSDATE:
			case SYSTEM:
			case SYSTIMESTAMP:
			case TABLE:
			case TABLESPACE:
			case THEN:
			case TO:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNDO:
			case UNION:
			case UNIQUE:
			case UNTIL:
			case UPDATE:
			case USING:
			case VALIDPROC:
			case VALUE:
			case VALUES:
			case VARIABLE:
			case VARIANT:
			case VCAT:
			case VERSIONING:
			case VIEW:
			case VOLATILE:
			case VOLUMES:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WLM:
			case XMLCAST:
			case XMLEXISTS:
			case XMLNAMESPACES:
			case YEAR:
			case YEARS:
			case ZONE:
			case AND:
			case ARRAY_AGG:
			case ASC:
			case AVG:
			case BIT:
			case CHANGE:
			case CODEUNITS16:
			case CODEUNITS32:
			case CORR:
			case CORRELATION:
			case COUNT:
			case COUNT_BIG:
			case COVAR:
			case COVARIANCE:
			case COVARIANCE_SAMP:
			case COVAR_POP:
			case COVAR_SAMP:
			case CS:
			case CUME_DIST:
			case DENSE_RANK:
			case DESC:
			case EBCDIC:
			case EXCLUSIVE:
			case FIRST_VALUE:
			case FOLLOWING:
			case GROUPING:
			case IGNORE:
			case INDICATOR:
			case INPUT:
			case ISNULL:
			case LAG:
			case LARGE:
			case LAST_VALUE:
			case LEAD:
			case LISTAGG:
			case LOCKED:
			case LOCKS:
			case MEDIAN:
			case MINUTES:
			case MIXED:
			case NOTNULL:
			case NTH_VALUE:
			case NTILE:
			case NUMERIC:
			case OBJECT:
			case OCTETS:
			case ONLY:
			case OVER:
			case PASSING:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PERCENT_RANK:
			case PRECEDING:
			case PREVIOUS:
			case RANGE:
			case RANK:
			case RATIO_TO_REPORT:
			case READ:
			case REF:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_ICPT:
			case REGR_INTERCEPT:
			case REGR_R2:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case RESPECT:
			case ROW_NUMBER:
			case ROWS:
			case RR:
			case RS:
			case SBCS:
			case SELECTIVITY:
			case SETS:
			case SHARE:
			case SKIP_:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case TOKEN:
			case UNBOUNDED:
			case UNPACK:
			case UR:
			case USE:
			case VAR:
			case VARIANCE:
			case VARIANCE_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARYING:
			case WITHOUT:
			case XML:
			case XMLAGG:
			case COLUMNS:
			case SQLID:
			case ORDINALITY:
			case SYSTEM_TIME:
			case BUSINESS_TIME:
			case MULTIPLIER:
			case UNNEST:
			case CROSS:
			case CALLER:
			case CLIENT:
			case POSITIONING:
			case SCROLL:
			case ACTION:
			case ASSEMBLE:
			case C_:
			case CALLED:
			case COBOL:
			case DB2:
			case DEFINER:
			case DISPATCH:
			case ENVIRONMENT:
			case FAILURE:
			case FAILURES:
			case JAVA:
			case MAIN:
			case NAME:
			case OPTIONS:
			case PARALLEL:
			case PLI:
			case REGISTERS:
			case RESIDENT:
			case SECURED:
			case SPECIAL:
			case SQL:
			case STOP:
			case SUB:
			case YES:
			case APPLICATION:
			case CHANGED:
			case COMPATIBILITY:
			case COMPRESS:
			case COPY:
			case FREEPAGE:
			case GBPCACHE:
			case INCLUDE:
			case MAXVALUE:
			case MINVALUE:
			case PCTFREE:
			case REGENERATE:
			case MASK:
			case ENABLE:
			case PERMISSION:
			case ATOMIC:
			case SQLEXCEPTION:
			case MERGE:
			case MATCHED:
			case SQLSTATE:
			case MESSAGE_TEXT:
			case OVERRIDING:
			case PORTION:
			case DB2SQL:
			case DEBUG:
			case GENERAL:
			case MODE_:
			case REXX:
			case CACHE:
			case CYCLE:
			case INCREMENT:
			case RESTART:
			case DATACLAS:
			case MGMTCLAS:
			case REMOVE:
			case STORCLAS:
			case ACCESS:
			case ACTIVATE:
			case ALWAYS:
			case APPEND:
			case ARCHIVE:
			case BUSINESS:
			case CASCADE:
			case CHANGES:
			case CONTROL:
			case DEACTIVATE:
			case DEFERRED:
			case EACH:
			case ENFORCED:
			case EXTRA:
			case FOREIGN:
			case HIDDEN_:
			case HISTORY:
			case ID:
			case IDENTITY:
			case IMPLICITLY:
			case INITIALLY:
			case INLINE:
			case OPERATION:
			case ORGANIZE:
			case OVERLAPS:
			case PACKAGE_NAME:
			case PACKAGE_SCHEMA:
			case PACKAGE_VERSION:
			case PRIMARY:
			case RESET:
			case ROTATE:
			case START:
			case SYSIBM:
			case TRANSACTION:
			case XMLSCHEMA:
			case ELEMENT:
			case URL:
			case NAMESPACE:
			case LOCATION:
			case SYSXSR:
			case ALGORITHM:
			case FIXEDLENGTH:
			case HUFFMAN:
			case LOB:
			case LOG:
			case LOGGED:
			case MAXPARTITIONS:
			case MAXROWS:
			case MEMBER:
			case MOVE:
			case PAGE:
			case PAGENUM:
			case PENDING:
			case RELATIVE:
			case SEGSIZE:
			case TRACKMOD:
			case ADDRESS:
			case ATTRIBUTES:
			case AUTHENTICATION:
			case AUTHID:
			case CONTEXT:
			case JOBNAME:
			case OWNER:
			case PROFILE:
			case QUALIFIER:
			case SERVAUTH:
			case TRUSTED:
			case SECTION:
			case ACTIVE:
			case VERSION:
			case ALIAS:
			case WORK:
			case WORKFILE:
			case SYSDEFLT:
			case NULTERM:
			case STRUCTURE:
			case GENERIC:
			case ABS:
			case ABSVAL:
			case ACOS:
			case ADD_DAYS:
			case ADD_MONTHS:
			case ARRAY_DELETE:
			case ARRAY_FIRST:
			case ARRAY_LAST:
			case ARRAY_NEXT:
			case ARRAY_PRIOR:
			case ARRAY_TRIM:
			case ASCII:
			case ASCII_CHR:
			case ASCIISTR:
			case ASCII_STR:
			case ASIN:
			case ATAN:
			case ATAN2:
			case ATANH:
			case BIGINT:
			case BINARY:
			case BITAND:
			case BITANDNOT:
			case BITNOT:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BTRIM:
			case CARDINALITY:
			case CCSID_ENCODING:
			case CEIL:
			case CEILING:
			case CHAR9:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case CHR:
			case CLOB:
			case COALESCE:
			case COLLATION_KEY:
			case COMPARE_DECFLOAT:
			case COS:
			case COSH:
			case DATE:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFWEEK_ISO:
			case DAYOFYEAR:
			case DAYS_BETWEEN:
			case DBCLOB:
			case DEC:
			case DECFLOAT:
			case DECFLOAT_FORMAT:
			case DECFLOAT_SORTKEY:
			case DECIMAL:
			case DECODE:
			case DECRYPT_BINARY:
			case DECRYPT_BIT:
			case DECRYPT_CHAR:
			case DECRYPT_DATAKEY_BIGINT:
			case DECRYPT_DATAKEY_BIT:
			case DECRYPT_DATAKEY_CLOB:
			case DECRYPT_DATAKEY_DBCLOB:
			case DECRYPT_DATAKEY_DECIMAL:
			case DECRYPT_DATAKEY_INTEGER:
			case DECRYPT_DATAKEY_VARCHAR:
			case DECRYPT_DATAKEY_VARGRAPHIC:
			case DECRYPT_DB:
			case DEGREES:
			case DIFFERENCE:
			case DIGITS:
			case DOUBLE_PRECISION:
			case DSN_XMLVALIDATE:
			case EBCDIC_CHR:
			case EBCDIC_STR:
			case ENCRYPT_DATAKEY:
			case ENCRYPT_TDES:
			case EXP:
			case EXTRACT:
			case FLOAT:
			case FLOOR:
			case GENERATE_UNIQUE:
			case GENERATE_UNIQUE_BINARY:
			case GETHINT:
			case GETVARIABLE:
			case GRAPHIC:
			case GREATEST:
			case HASH:
			case HASH_CRC32:
			case HASH_MD5:
			case HASH_SHA1:
			case HASH_SHA256:
			case HEX:
			case IDENTITY_VAL_LOCAL:
			case IFNULL:
			case INSTR:
			case INT:
			case INTEGER:
			case JULIAN_DAY:
			case LAST_DAY:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LN:
			case LOCATE:
			case LOCATE_IN_STRING:
			case LOG10:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAX:
			case MAX_CARDINALITY:
			case MIDNIGHT_SECONDS:
			case MIN:
			case MINUTE:
			case MOD:
			case MONTHS_BETWEEN:
			case MQREAD:
			case MQREADCLOB:
			case MQRECEIVE:
			case MQRECEIVECLOB:
			case MQSEND:
			case MULTIPLY_ALT:
			case NEXT_DAY:
			case NEXT_MONTH:
			case NORMALIZE_DECFLOAT:
			case NORMALIZE_STRING:
			case NULLIF:
			case NVL:
			case OVERLAY:
			case PACK:
			case POSITION:
			case POSSTR:
			case POW:
			case POWER:
			case QUANTIZE:
			case QUARTER:
			case RADIANS:
			case RAISE_ERROR:
			case RAND:
			case RANDOM:
			case REAL:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REPLACE:
			case RID:
			case ROUND:
			case ROUND_TIMESTAMP:
			case ROWID:
			case RPAD:
			case RTRIM:
			case SCORE:
			case SIGN:
			case SIN:
			case SINH:
			case SMALLINT:
			case SOAPHTTPC:
			case SOAPHTTPNC:
			case SOAPHTTPNV:
			case SOAPHTTPV:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STRIP:
			case STRLEFT:
			case STRPOS:
			case STRRIGHT:
			case SUBSTR:
			case SUBSTRING:
			case TAN:
			case TANH:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIMESTAMP_FORMAT:
			case TIMESTAMP_ISO:
			case TIMESTAMP_TZ:
			case TO_CHAR:
			case TO_CLOB:
			case TO_DATE:
			case TO_NUMBER:
			case TOTALORDER:
			case TO_TIMESTAMP:
			case TRANSLATE:
			case TRIM:
			case TRIM_ARRAY:
			case TRUNC:
			case TRUNC_TIMESTAMP:
			case UCASE:
			case UNICODE:
			case UNICODE_STR:
			case UNISTR:
			case UPPER:
			case VARBINARY:
			case VARCHAR:
			case VARCHAR9:
			case VARCHAR_BIT_FORMAT:
			case VARCHAR_FORMAT:
			case VARGRAPHIC:
			case VERIFY_GROUP_FOR_USER:
			case VERIFY_ROLE_FOR_USER:
			case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
			case WEEK:
			case WEEK_ISO:
			case WRAP:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLCONCAT:
			case XMLDOCUMENT:
			case XMLELEMENT:
			case XMLFOREST:
			case XMLMODIFY:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLSERIALIZE:
			case XMLTEXT:
			case XMLXSROBJECTID:
			case XSLTRANSFORM:
			case CURRENT_ACCELERATOR:
			case CURRENT_APPLICATION_COMPATIBILITY:
			case CURRENT_APPLICATION_ENCODING_SCHEME:
			case CURRENT_CLIENT_ACCTNG:
			case CURRENT_CLIENT_APPLNAME:
			case CURRENT_CLIENT_CORR_TOKEN:
			case CURRENT_CLIENT_USERID:
			case CURRENT_CLIENT_WRKSTNNAME:
			case CURRENT_DATE:
			case CURRENT_DEBUG_MODE:
			case CURRENT_DECFLOAT_ROUNDING_MODE:
			case CURRENT_DEGREE:
			case CURRENT_EXPLAIN_MODE:
			case CURRENT_GET_ACCEL_ARCHIVE:
			case CURRENT_LOCALE_LC_CTYPE:
			case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
			case CURRENT_MEMBER:
			case CURRENT_OPTIMIZATION_HINT:
			case CURRENT_PACKAGE_PATH:
			case CURRENT_PACKAGESET:
			case CURRENT_PATH:
			case CURRENT_PRECISION:
			case CURRENT_QUERY_ACCELERATION:
			case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
			case CURRENT_REFRESH_AGE:
			case CURRENT_ROUTINE_VERSION:
			case CURRENT_RULES:
			case CURRENT_SCHEMA:
			case CURRENT_SERVER:
			case CURRENT_SQLID:
			case CURRENT_TEMPORAL_BUSINESS_TIME:
			case CURRENT_TEMPORAL_SYSTEM_TIME:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_TIME_ZONE:
			case ENCRYPTION_PASSWORD:
			case SESSION_TIME_ZONE:
			case SESSION_USER:
			case USER:
			case ADMIN_TASK_LIST:
			case ADMIN_TASK_OUTPUT:
			case ADMIN_TASK_STATUS:
			case BLOCKING_THREADS:
			case MQREADALL:
			case MQREADALLCLOB:
			case MQRECEIVEALL:
			case MQRECEIVEALLCLOB:
			case XMLTABLE:
			case SQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(5401);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,634,_ctx) ) {
				case 1:
					{
					setState(5398);
					schemaName();
					setState(5399);
					match(DOT);
					}
					break;
				}
				setState(5403);
				identifier();
				}
				}
				break;
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(5404);
				hostVariable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntoClauseContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(DB2zSQLParser.INTO, 0); }
		public List<VariableContext> variable() {
			return getRuleContexts(VariableContext.class);
		}
		public VariableContext variable(int i) {
			return getRuleContext(VariableContext.class,i);
		}
		public ArrayElementSpecificationContext arrayElementSpecification() {
			return getRuleContext(ArrayElementSpecificationContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public IntoClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intoClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterIntoClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitIntoClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitIntoClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntoClauseContext intoClause() throws RecognitionException {
		IntoClauseContext _localctx = new IntoClauseContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_intoClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5407);
			match(INTO);
			setState(5410);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,636,_ctx) ) {
			case 1:
				{
				setState(5408);
				variable();
				}
				break;
			case 2:
				{
				setState(5409);
				arrayElementSpecification();
				}
				break;
			}
			setState(5416);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5412);
				match(COMMA);
				setState(5413);
				variable();
				}
				}
				setState(5418);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CorrelationClauseContext extends ParserRuleContext {
		public CorrelationNameContext correlationName() {
			return getRuleContext(CorrelationNameContext.class,0);
		}
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<NewColumnNameContext> newColumnName() {
			return getRuleContexts(NewColumnNameContext.class);
		}
		public NewColumnNameContext newColumnName(int i) {
			return getRuleContext(NewColumnNameContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public CorrelationClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_correlationClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCorrelationClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCorrelationClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCorrelationClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CorrelationClauseContext correlationClause() throws RecognitionException {
		CorrelationClauseContext _localctx = new CorrelationClauseContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_correlationClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5420);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,638,_ctx) ) {
			case 1:
				{
				setState(5419);
				match(AS);
				}
				break;
			}
			setState(5422);
			correlationName();
			setState(5434);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LPAREN) {
				{
				setState(5423);
				match(LPAREN);
				setState(5424);
				newColumnName();
				setState(5429);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5425);
					match(COMMA);
					setState(5426);
					newColumnName();
					}
					}
					setState(5431);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5432);
				match(RPAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromClauseContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(DB2zSQLParser.FROM, 0); }
		public List<CollectionDerivedTableContext> collectionDerivedTable() {
			return getRuleContexts(CollectionDerivedTableContext.class);
		}
		public CollectionDerivedTableContext collectionDerivedTable(int i) {
			return getRuleContext(CollectionDerivedTableContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public List<TableReferenceContext> tableReference() {
			return getRuleContexts(TableReferenceContext.class);
		}
		public TableReferenceContext tableReference(int i) {
			return getRuleContext(TableReferenceContext.class,i);
		}
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFromClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFromClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFromClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromClauseContext fromClause() throws RecognitionException {
		FromClauseContext _localctx = new FromClauseContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_fromClause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5436);
			match(FROM);
			setState(5451);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,643,_ctx) ) {
			case 1:
				{
				{
				setState(5440);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,641,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(5437);
						match(LPAREN);
						}
						} 
					}
					setState(5442);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,641,_ctx);
				}
				setState(5443);
				tableReference();
				setState(5447);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,642,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(5444);
						match(RPAREN);
						}
						} 
					}
					setState(5449);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,642,_ctx);
				}
				}
				}
				break;
			case 2:
				{
				setState(5450);
				collectionDerivedTable();
				}
				break;
			}
			setState(5472);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5453);
				match(COMMA);
				setState(5468);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,646,_ctx) ) {
				case 1:
					{
					{
					setState(5457);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,644,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(5454);
							match(LPAREN);
							}
							} 
						}
						setState(5459);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,644,_ctx);
					}
					setState(5460);
					tableReference();
					setState(5464);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,645,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(5461);
							match(RPAREN);
							}
							} 
						}
						setState(5466);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,645,_ctx);
					}
					}
					}
					break;
				case 2:
					{
					setState(5467);
					collectionDerivedTable();
					}
					break;
				}
				}
				}
				setState(5474);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableReferenceContext extends ParserRuleContext {
		public SingleTableReferenceContext singleTableReference() {
			return getRuleContext(SingleTableReferenceContext.class,0);
		}
		public NestedTableExpressionContext nestedTableExpression() {
			return getRuleContext(NestedTableExpressionContext.class,0);
		}
		public DataChangeTableReferenceContext dataChangeTableReference() {
			return getRuleContext(DataChangeTableReferenceContext.class,0);
		}
		public TableFunctionReferenceContext tableFunctionReference() {
			return getRuleContext(TableFunctionReferenceContext.class,0);
		}
		public TableLocatorReferenceContext tableLocatorReference() {
			return getRuleContext(TableLocatorReferenceContext.class,0);
		}
		public XmltableExpressionContext xmltableExpression() {
			return getRuleContext(XmltableExpressionContext.class,0);
		}
		public CollectionDerivedTableContext collectionDerivedTable() {
			return getRuleContext(CollectionDerivedTableContext.class,0);
		}
		public List<TerminalNode> JOIN() { return getTokens(DB2zSQLParser.JOIN); }
		public TerminalNode JOIN(int i) {
			return getToken(DB2zSQLParser.JOIN, i);
		}
		public List<TableReferenceContext> tableReference() {
			return getRuleContexts(TableReferenceContext.class);
		}
		public TableReferenceContext tableReference(int i) {
			return getRuleContext(TableReferenceContext.class,i);
		}
		public List<TerminalNode> ON() { return getTokens(DB2zSQLParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(DB2zSQLParser.ON, i);
		}
		public List<JoinConditionContext> joinCondition() {
			return getRuleContexts(JoinConditionContext.class);
		}
		public JoinConditionContext joinCondition(int i) {
			return getRuleContext(JoinConditionContext.class,i);
		}
		public TerminalNode CROSS() { return getToken(DB2zSQLParser.CROSS, 0); }
		public List<TerminalNode> INNER() { return getTokens(DB2zSQLParser.INNER); }
		public TerminalNode INNER(int i) {
			return getToken(DB2zSQLParser.INNER, i);
		}
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public List<TerminalNode> LEFT() { return getTokens(DB2zSQLParser.LEFT); }
		public TerminalNode LEFT(int i) {
			return getToken(DB2zSQLParser.LEFT, i);
		}
		public List<TerminalNode> RIGHT() { return getTokens(DB2zSQLParser.RIGHT); }
		public TerminalNode RIGHT(int i) {
			return getToken(DB2zSQLParser.RIGHT, i);
		}
		public List<TerminalNode> FULL() { return getTokens(DB2zSQLParser.FULL); }
		public TerminalNode FULL(int i) {
			return getToken(DB2zSQLParser.FULL, i);
		}
		public List<TerminalNode> OUTER() { return getTokens(DB2zSQLParser.OUTER); }
		public TerminalNode OUTER(int i) {
			return getToken(DB2zSQLParser.OUTER, i);
		}
		public TableReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTableReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTableReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTableReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableReferenceContext tableReference() throws RecognitionException {
		TableReferenceContext _localctx = new TableReferenceContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_tableReference);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5609);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,668,_ctx) ) {
			case 1:
				{
				setState(5475);
				singleTableReference();
				}
				break;
			case 2:
				{
				setState(5476);
				nestedTableExpression();
				}
				break;
			case 3:
				{
				setState(5477);
				dataChangeTableReference();
				}
				break;
			case 4:
				{
				setState(5478);
				tableFunctionReference();
				}
				break;
			case 5:
				{
				setState(5479);
				tableLocatorReference();
				}
				break;
			case 6:
				{
				setState(5480);
				xmltableExpression();
				}
				break;
			case 7:
				{
				setState(5481);
				collectionDerivedTable();
				}
				break;
			case 8:
				{
				{
				setState(5530);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,655,_ctx) ) {
				case 1:
					{
					setState(5482);
					singleTableReference();
					}
					break;
				case 2:
					{
					setState(5483);
					nestedTableExpression();
					}
					break;
				case 3:
					{
					setState(5484);
					tableFunctionReference();
					}
					break;
				case 4:
					{
					setState(5485);
					tableLocatorReference();
					}
					break;
				case 5:
					{
					setState(5486);
					xmltableExpression();
					}
					break;
				case 6:
					{
					setState(5487);
					collectionDerivedTable();
					}
					break;
				case 7:
					{
					{
					setState(5489); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(5488);
							match(LPAREN);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(5491); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,648,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					setState(5493);
					tableReference();
					setState(5495); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(5494);
						match(RPAREN);
						}
						}
						setState(5497); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==RPAREN );
					}
					}
					break;
				case 8:
					{
					{
					setState(5516);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,652,_ctx) ) {
					case 1:
						{
						setState(5499);
						singleTableReference();
						}
						break;
					case 2:
						{
						setState(5500);
						nestedTableExpression();
						}
						break;
					case 3:
						{
						setState(5501);
						tableFunctionReference();
						}
						break;
					case 4:
						{
						setState(5502);
						tableLocatorReference();
						}
						break;
					case 5:
						{
						setState(5503);
						xmltableExpression();
						}
						break;
					case 6:
						{
						{
						setState(5505); 
						_errHandler.sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								setState(5504);
								match(LPAREN);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							setState(5507); 
							_errHandler.sync(this);
							_alt = getInterpreter().adaptivePredict(_input,650,_ctx);
						} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
						setState(5509);
						tableReference();
						setState(5511); 
						_errHandler.sync(this);
						_la = _input.LA(1);
						do {
							{
							{
							setState(5510);
							match(RPAREN);
							}
							}
							setState(5513); 
							_errHandler.sync(this);
							_la = _input.LA(1);
						} while ( _la==RPAREN );
						}
						}
						break;
					case 7:
						{
						setState(5515);
						collectionDerivedTable();
						}
						break;
					}
					setState(5523);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case INNER:
						{
						setState(5518);
						match(INNER);
						}
						break;
					case FULL:
					case LEFT:
					case RIGHT:
						{
						{
						setState(5519);
						_la = _input.LA(1);
						if ( !(_la==FULL || _la==LEFT || _la==RIGHT) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(5521);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==OUTER) {
							{
							setState(5520);
							match(OUTER);
							}
						}

						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5525);
					match(JOIN);
					setState(5526);
					tableReference();
					setState(5527);
					match(ON);
					setState(5528);
					joinCondition();
					}
					}
					break;
				}
				setState(5537);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case INNER:
					{
					setState(5532);
					match(INNER);
					}
					break;
				case FULL:
				case LEFT:
				case RIGHT:
					{
					{
					setState(5533);
					_la = _input.LA(1);
					if ( !(_la==FULL || _la==LEFT || _la==RIGHT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5535);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OUTER) {
						{
						setState(5534);
						match(OUTER);
						}
					}

					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5539);
				match(JOIN);
				setState(5540);
				tableReference();
				setState(5541);
				match(ON);
				setState(5542);
				joinCondition();
				}
				}
				break;
			case 9:
				{
				{
				setState(5592);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,665,_ctx) ) {
				case 1:
					{
					setState(5544);
					singleTableReference();
					}
					break;
				case 2:
					{
					setState(5545);
					nestedTableExpression();
					}
					break;
				case 3:
					{
					setState(5546);
					tableFunctionReference();
					}
					break;
				case 4:
					{
					setState(5547);
					tableLocatorReference();
					}
					break;
				case 5:
					{
					setState(5548);
					xmltableExpression();
					}
					break;
				case 6:
					{
					setState(5549);
					collectionDerivedTable();
					}
					break;
				case 7:
					{
					{
					setState(5551); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(5550);
							match(LPAREN);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(5553); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,658,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					setState(5555);
					tableReference();
					setState(5557); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(5556);
						match(RPAREN);
						}
						}
						setState(5559); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==RPAREN );
					}
					}
					break;
				case 8:
					{
					{
					setState(5578);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,662,_ctx) ) {
					case 1:
						{
						setState(5561);
						singleTableReference();
						}
						break;
					case 2:
						{
						setState(5562);
						nestedTableExpression();
						}
						break;
					case 3:
						{
						setState(5563);
						tableFunctionReference();
						}
						break;
					case 4:
						{
						setState(5564);
						tableLocatorReference();
						}
						break;
					case 5:
						{
						setState(5565);
						xmltableExpression();
						}
						break;
					case 6:
						{
						{
						setState(5567); 
						_errHandler.sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								setState(5566);
								match(LPAREN);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							setState(5569); 
							_errHandler.sync(this);
							_alt = getInterpreter().adaptivePredict(_input,660,_ctx);
						} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
						setState(5571);
						tableReference();
						setState(5573); 
						_errHandler.sync(this);
						_la = _input.LA(1);
						do {
							{
							{
							setState(5572);
							match(RPAREN);
							}
							}
							setState(5575); 
							_errHandler.sync(this);
							_la = _input.LA(1);
						} while ( _la==RPAREN );
						}
						}
						break;
					case 7:
						{
						setState(5577);
						collectionDerivedTable();
						}
						break;
					}
					setState(5585);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case INNER:
						{
						setState(5580);
						match(INNER);
						}
						break;
					case FULL:
					case LEFT:
					case RIGHT:
						{
						{
						setState(5581);
						_la = _input.LA(1);
						if ( !(_la==FULL || _la==LEFT || _la==RIGHT) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(5583);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==OUTER) {
							{
							setState(5582);
							match(OUTER);
							}
						}

						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5587);
					match(JOIN);
					setState(5588);
					tableReference();
					setState(5589);
					match(ON);
					setState(5590);
					joinCondition();
					}
					}
					break;
				}
				setState(5594);
				match(CROSS);
				setState(5595);
				match(JOIN);
				setState(5596);
				tableReference();
				}
				}
				break;
			case 10:
				{
				{
				setState(5599); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(5598);
						match(LPAREN);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5601); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,666,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(5603);
				tableReference();
				setState(5605); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(5604);
						match(RPAREN);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5607); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,667,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SingleTableReferenceContext extends ParserRuleContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public List<PeriodSpecificationContext> periodSpecification() {
			return getRuleContexts(PeriodSpecificationContext.class);
		}
		public PeriodSpecificationContext periodSpecification(int i) {
			return getRuleContext(PeriodSpecificationContext.class,i);
		}
		public CorrelationClauseContext correlationClause() {
			return getRuleContext(CorrelationClauseContext.class,0);
		}
		public SingleTableReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleTableReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSingleTableReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSingleTableReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSingleTableReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SingleTableReferenceContext singleTableReference() throws RecognitionException {
		SingleTableReferenceContext _localctx = new SingleTableReferenceContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_singleTableReference);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5611);
			tableName();
			setState(5615);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,669,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5612);
					periodSpecification();
					}
					} 
				}
				setState(5617);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,669,_ctx);
			}
			setState(5619);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,670,_ctx) ) {
			case 1:
				{
				setState(5618);
				correlationClause();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PeriodSpecificationContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode SYSTEM_TIME() { return getToken(DB2zSQLParser.SYSTEM_TIME, 0); }
		public TerminalNode BUSINESS_TIME() { return getToken(DB2zSQLParser.BUSINESS_TIME, 0); }
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode OF() { return getToken(DB2zSQLParser.OF, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode FROM() { return getToken(DB2zSQLParser.FROM, 0); }
		public TerminalNode TO() { return getToken(DB2zSQLParser.TO, 0); }
		public TerminalNode BETWEEN() { return getToken(DB2zSQLParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(DB2zSQLParser.AND, 0); }
		public PeriodSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_periodSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPeriodSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPeriodSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPeriodSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PeriodSpecificationContext periodSpecification() throws RecognitionException {
		PeriodSpecificationContext _localctx = new PeriodSpecificationContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_periodSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5621);
			match(FOR);
			setState(5622);
			_la = _input.LA(1);
			if ( !(_la==SYSTEM_TIME || _la==BUSINESS_TIME) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5636);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AS:
				{
				{
				setState(5623);
				match(AS);
				setState(5624);
				match(OF);
				setState(5625);
				expression();
				}
				}
				break;
			case FROM:
				{
				{
				setState(5626);
				match(FROM);
				setState(5627);
				expression();
				setState(5628);
				match(TO);
				setState(5629);
				expression();
				}
				}
				break;
			case BETWEEN:
				{
				{
				setState(5631);
				match(BETWEEN);
				setState(5632);
				expression();
				setState(5633);
				match(AND);
				setState(5634);
				expression();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PeriodClauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode PORTION() { return getToken(DB2zSQLParser.PORTION, 0); }
		public TerminalNode OF() { return getToken(DB2zSQLParser.OF, 0); }
		public TerminalNode BUSINESS_TIME() { return getToken(DB2zSQLParser.BUSINESS_TIME, 0); }
		public TerminalNode FROM() { return getToken(DB2zSQLParser.FROM, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode TO() { return getToken(DB2zSQLParser.TO, 0); }
		public TerminalNode BETWEEN() { return getToken(DB2zSQLParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(DB2zSQLParser.AND, 0); }
		public PeriodClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_periodClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterPeriodClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitPeriodClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitPeriodClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PeriodClauseContext periodClause() throws RecognitionException {
		PeriodClauseContext _localctx = new PeriodClauseContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_periodClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5638);
			match(FOR);
			setState(5639);
			match(PORTION);
			setState(5640);
			match(OF);
			setState(5641);
			match(BUSINESS_TIME);
			setState(5652);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FROM:
				{
				{
				setState(5642);
				match(FROM);
				setState(5643);
				expression();
				setState(5644);
				match(TO);
				setState(5645);
				expression();
				}
				}
				break;
			case BETWEEN:
				{
				{
				setState(5647);
				match(BETWEEN);
				setState(5648);
				expression();
				setState(5649);
				match(AND);
				setState(5650);
				expression();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NestedTableExpressionContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public FullSelectContext fullSelect() {
			return getRuleContext(FullSelectContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public CorrelationClauseContext correlationClause() {
			return getRuleContext(CorrelationClauseContext.class,0);
		}
		public NestedTableExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nestedTableExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterNestedTableExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitNestedTableExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitNestedTableExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NestedTableExpressionContext nestedTableExpression() throws RecognitionException {
		NestedTableExpressionContext _localctx = new NestedTableExpressionContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_nestedTableExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5655);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLE) {
				{
				setState(5654);
				match(TABLE);
				}
			}

			setState(5657);
			match(LPAREN);
			setState(5658);
			fullSelect();
			setState(5659);
			match(RPAREN);
			setState(5661);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,674,_ctx) ) {
			case 1:
				{
				setState(5660);
				correlationClause();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataChangeTableReferenceContext extends ParserRuleContext {
		public TerminalNode FINAL() { return getToken(DB2zSQLParser.FINAL, 0); }
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public InsertStatementContext insertStatement() {
			return getRuleContext(InsertStatementContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public SearchedUpdateContext searchedUpdate() {
			return getRuleContext(SearchedUpdateContext.class,0);
		}
		public TerminalNode OLD() { return getToken(DB2zSQLParser.OLD, 0); }
		public SearchedDeleteContext searchedDelete() {
			return getRuleContext(SearchedDeleteContext.class,0);
		}
		public MergeStatementContext mergeStatement() {
			return getRuleContext(MergeStatementContext.class,0);
		}
		public CorrelationClauseContext correlationClause() {
			return getRuleContext(CorrelationClauseContext.class,0);
		}
		public DataChangeTableReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataChangeTableReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterDataChangeTableReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitDataChangeTableReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitDataChangeTableReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataChangeTableReferenceContext dataChangeTableReference() throws RecognitionException {
		DataChangeTableReferenceContext _localctx = new DataChangeTableReferenceContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_dataChangeTableReference);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5680);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,676,_ctx) ) {
			case 1:
				{
				{
				setState(5663);
				match(FINAL);
				setState(5664);
				match(TABLE);
				setState(5665);
				match(LPAREN);
				setState(5666);
				insertStatement();
				setState(5667);
				match(RPAREN);
				setState(5669);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,675,_ctx) ) {
				case 1:
					{
					setState(5668);
					correlationClause();
					}
					break;
				}
				}
				}
				break;
			case 2:
				{
				{
				setState(5671);
				_la = _input.LA(1);
				if ( !(_la==FINAL || _la==OLD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5672);
				match(TABLE);
				setState(5673);
				searchedUpdate();
				}
				}
				break;
			case 3:
				{
				{
				setState(5674);
				match(OLD);
				setState(5675);
				match(TABLE);
				setState(5676);
				searchedDelete();
				}
				}
				break;
			case 4:
				{
				{
				setState(5677);
				match(FINAL);
				setState(5678);
				match(TABLE);
				setState(5679);
				mergeStatement();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableFunctionReferenceContext extends ParserRuleContext {
		public List<TerminalNode> TABLE() { return getTokens(DB2zSQLParser.TABLE); }
		public TerminalNode TABLE(int i) {
			return getToken(DB2zSQLParser.TABLE, i);
		}
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public ScalarFunctionContext scalarFunction() {
			return getRuleContext(ScalarFunctionContext.class,0);
		}
		public AggregateFunctionContext aggregateFunction() {
			return getRuleContext(AggregateFunctionContext.class,0);
		}
		public RegressionFunctionContext regressionFunction() {
			return getRuleContext(RegressionFunctionContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public TableUdfCardinalityClauseContext tableUdfCardinalityClause() {
			return getRuleContext(TableUdfCardinalityClauseContext.class,0);
		}
		public CorrelationClauseContext correlationClause() {
			return getRuleContext(CorrelationClauseContext.class,0);
		}
		public TypedCorrelationClauseContext typedCorrelationClause() {
			return getRuleContext(TypedCorrelationClauseContext.class,0);
		}
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TableFunctionReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableFunctionReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTableFunctionReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTableFunctionReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTableFunctionReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableFunctionReferenceContext tableFunctionReference() throws RecognitionException {
		TableFunctionReferenceContext _localctx = new TableFunctionReferenceContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_tableFunctionReference);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5682);
			match(TABLE);
			setState(5683);
			match(LPAREN);
			setState(5688);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,677,_ctx) ) {
			case 1:
				{
				setState(5684);
				scalarFunction();
				}
				break;
			case 2:
				{
				setState(5685);
				aggregateFunction();
				}
				break;
			case 3:
				{
				setState(5686);
				regressionFunction();
				}
				break;
			case 4:
				{
				setState(5687);
				identifier();
				}
				break;
			}
			setState(5690);
			match(LPAREN);
			setState(5694);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,678,_ctx) ) {
			case 1:
				{
				setState(5691);
				expression();
				}
				break;
			case 2:
				{
				{
				setState(5692);
				match(TABLE);
				setState(5693);
				tableName();
				}
				}
				break;
			}
			setState(5704);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5696);
				match(COMMA);
				setState(5700);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,679,_ctx) ) {
				case 1:
					{
					setState(5697);
					expression();
					}
					break;
				case 2:
					{
					{
					setState(5698);
					match(TABLE);
					setState(5699);
					tableName();
					}
					}
					break;
				}
				}
				}
				setState(5706);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5707);
			match(RPAREN);
			setState(5709);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CARDINALITY) {
				{
				setState(5708);
				tableUdfCardinalityClause();
				}
			}

			setState(5711);
			match(RPAREN);
			setState(5714);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,682,_ctx) ) {
			case 1:
				{
				setState(5712);
				correlationClause();
				}
				break;
			case 2:
				{
				setState(5713);
				typedCorrelationClause();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableUdfCardinalityClauseContext extends ParserRuleContext {
		public TerminalNode CARDINALITY() { return getToken(DB2zSQLParser.CARDINALITY, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode NUMERICLITERAL() { return getToken(DB2zSQLParser.NUMERICLITERAL, 0); }
		public TerminalNode MULTIPLIER() { return getToken(DB2zSQLParser.MULTIPLIER, 0); }
		public TableUdfCardinalityClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableUdfCardinalityClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTableUdfCardinalityClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTableUdfCardinalityClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTableUdfCardinalityClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableUdfCardinalityClauseContext tableUdfCardinalityClause() throws RecognitionException {
		TableUdfCardinalityClauseContext _localctx = new TableUdfCardinalityClauseContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_tableUdfCardinalityClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5716);
			match(CARDINALITY);
			setState(5718);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MULTIPLIER) {
				{
				setState(5717);
				match(MULTIPLIER);
				}
			}

			setState(5720);
			_la = _input.LA(1);
			if ( !(_la==INTEGERLITERAL || _la==NUMERICLITERAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypedCorrelationClauseContext extends ParserRuleContext {
		public CorrelationNameContext correlationName() {
			return getRuleContext(CorrelationNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public List<DataTypeContext> dataType() {
			return getRuleContexts(DataTypeContext.class);
		}
		public DataTypeContext dataType(int i) {
			return getRuleContext(DataTypeContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public TypedCorrelationClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typedCorrelationClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTypedCorrelationClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTypedCorrelationClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTypedCorrelationClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypedCorrelationClauseContext typedCorrelationClause() throws RecognitionException {
		TypedCorrelationClauseContext _localctx = new TypedCorrelationClauseContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_typedCorrelationClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5723);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,684,_ctx) ) {
			case 1:
				{
				setState(5722);
				match(AS);
				}
				break;
			}
			setState(5725);
			correlationName();
			setState(5726);
			match(LPAREN);
			setState(5727);
			columnName();
			setState(5728);
			dataType();
			setState(5735);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5729);
				match(COMMA);
				setState(5730);
				columnName();
				setState(5731);
				dataType();
				}
				}
				setState(5737);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5738);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableLocatorReferenceContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(DB2zSQLParser.LIKE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public CorrelationNameContext correlationName() {
			return getRuleContext(CorrelationNameContext.class,0);
		}
		public TableLocatorReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableLocatorReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterTableLocatorReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitTableLocatorReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitTableLocatorReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableLocatorReferenceContext tableLocatorReference() throws RecognitionException {
		TableLocatorReferenceContext _localctx = new TableLocatorReferenceContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_tableLocatorReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5740);
			match(TABLE);
			setState(5741);
			match(LPAREN);
			setState(5742);
			identifier();
			setState(5743);
			match(LIKE);
			setState(5744);
			tableName();
			setState(5745);
			match(RPAREN);
			setState(5747);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,686,_ctx) ) {
			case 1:
				{
				setState(5746);
				correlationName();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmltableExpressionContext extends ParserRuleContext {
		public XmltableFunctionSpecificationContext xmltableFunctionSpecification() {
			return getRuleContext(XmltableFunctionSpecificationContext.class,0);
		}
		public CorrelationClauseContext correlationClause() {
			return getRuleContext(CorrelationClauseContext.class,0);
		}
		public XmltableExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmltableExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterXmltableExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitXmltableExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitXmltableExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmltableExpressionContext xmltableExpression() throws RecognitionException {
		XmltableExpressionContext _localctx = new XmltableExpressionContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_xmltableExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5749);
			xmltableFunctionSpecification();
			setState(5751);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,687,_ctx) ) {
			case 1:
				{
				setState(5750);
				correlationClause();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollectionDerivedTableContext extends ParserRuleContext {
		public TerminalNode UNNEST() { return getToken(DB2zSQLParser.UNNEST, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<OrdinaryArrayExpressionContext> ordinaryArrayExpression() {
			return getRuleContexts(OrdinaryArrayExpressionContext.class);
		}
		public OrdinaryArrayExpressionContext ordinaryArrayExpression(int i) {
			return getRuleContext(OrdinaryArrayExpressionContext.class,i);
		}
		public List<AssociativeArrayExpressionContext> associativeArrayExpression() {
			return getRuleContexts(AssociativeArrayExpressionContext.class);
		}
		public AssociativeArrayExpressionContext associativeArrayExpression(int i) {
			return getRuleContext(AssociativeArrayExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode ORDINALITY() { return getToken(DB2zSQLParser.ORDINALITY, 0); }
		public CorrelationClauseContext correlationClause() {
			return getRuleContext(CorrelationClauseContext.class,0);
		}
		public CollectionDerivedTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collectionDerivedTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCollectionDerivedTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCollectionDerivedTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCollectionDerivedTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollectionDerivedTableContext collectionDerivedTable() throws RecognitionException {
		CollectionDerivedTableContext _localctx = new CollectionDerivedTableContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_collectionDerivedTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5753);
			match(UNNEST);
			setState(5754);
			match(LPAREN);
			setState(5757);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,688,_ctx) ) {
			case 1:
				{
				setState(5755);
				ordinaryArrayExpression();
				}
				break;
			case 2:
				{
				setState(5756);
				associativeArrayExpression();
				}
				break;
			}
			setState(5766);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5759);
				match(COMMA);
				setState(5762);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,689,_ctx) ) {
				case 1:
					{
					setState(5760);
					ordinaryArrayExpression();
					}
					break;
				case 2:
					{
					setState(5761);
					associativeArrayExpression();
					}
					break;
				}
				}
				}
				setState(5768);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5769);
			match(RPAREN);
			setState(5772);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,691,_ctx) ) {
			case 1:
				{
				setState(5770);
				match(WITH);
				setState(5771);
				match(ORDINALITY);
				}
				break;
			}
			setState(5775);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,692,_ctx) ) {
			case 1:
				{
				setState(5774);
				correlationClause();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinConditionContext extends ParserRuleContext {
		public SearchConditionContext searchCondition() {
			return getRuleContext(SearchConditionContext.class,0);
		}
		public List<FullJoinExpressionContext> fullJoinExpression() {
			return getRuleContexts(FullJoinExpressionContext.class);
		}
		public FullJoinExpressionContext fullJoinExpression(int i) {
			return getRuleContext(FullJoinExpressionContext.class,i);
		}
		public TerminalNode EQ() { return getToken(DB2zSQLParser.EQ, 0); }
		public JoinConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinCondition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterJoinCondition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitJoinCondition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitJoinCondition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinConditionContext joinCondition() throws RecognitionException {
		JoinConditionContext _localctx = new JoinConditionContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_joinCondition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5782);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,693,_ctx) ) {
			case 1:
				{
				setState(5777);
				searchCondition();
				}
				break;
			case 2:
				{
				{
				setState(5778);
				fullJoinExpression();
				setState(5779);
				match(EQ);
				setState(5780);
				fullJoinExpression();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FullJoinExpressionContext extends ParserRuleContext {
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public List<CastFunctionContext> castFunction() {
			return getRuleContexts(CastFunctionContext.class);
		}
		public CastFunctionContext castFunction(int i) {
			return getRuleContext(CastFunctionContext.class,i);
		}
		public TerminalNode COALESCE() { return getToken(DB2zSQLParser.COALESCE, 0); }
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public FullJoinExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullJoinExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFullJoinExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFullJoinExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFullJoinExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FullJoinExpressionContext fullJoinExpression() throws RecognitionException {
		FullJoinExpressionContext _localctx = new FullJoinExpressionContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_fullJoinExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5804);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,697,_ctx) ) {
			case 1:
				{
				setState(5784);
				columnName();
				}
				break;
			case 2:
				{
				setState(5785);
				castFunction();
				}
				break;
			case 3:
				{
				{
				setState(5786);
				match(COALESCE);
				setState(5787);
				match(LPAREN);
				setState(5790);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,694,_ctx) ) {
				case 1:
					{
					setState(5788);
					columnName();
					}
					break;
				case 2:
					{
					setState(5789);
					castFunction();
					}
					break;
				}
				setState(5799);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5792);
					match(COMMA);
					setState(5795);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,695,_ctx) ) {
					case 1:
						{
						setState(5793);
						columnName();
						}
						break;
					case 2:
						{
						setState(5794);
						castFunction();
						}
						break;
					}
					}
					}
					setState(5801);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5802);
				match(RPAREN);
				}
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CastFunctionContext extends ParserRuleContext {
		public CastSpecificationContext castSpecification() {
			return getRuleContext(CastSpecificationContext.class,0);
		}
		public CastFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_castFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCastFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCastFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCastFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CastFunctionContext castFunction() throws RecognitionException {
		CastFunctionContext _localctx = new CastFunctionContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_castFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5806);
			castSpecification();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrdinaryArrayExpressionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public OrdinaryArrayExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ordinaryArrayExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterOrdinaryArrayExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitOrdinaryArrayExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitOrdinaryArrayExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrdinaryArrayExpressionContext ordinaryArrayExpression() throws RecognitionException {
		OrdinaryArrayExpressionContext _localctx = new OrdinaryArrayExpressionContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_ordinaryArrayExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5808);
			expression();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AssociativeArrayExpressionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public AssociativeArrayExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_associativeArrayExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterAssociativeArrayExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitAssociativeArrayExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitAssociativeArrayExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AssociativeArrayExpressionContext associativeArrayExpression() throws RecognitionException {
		AssociativeArrayExpressionContext _localctx = new AssociativeArrayExpressionContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_associativeArrayExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5810);
			expression();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ComparisonContext extends ParserRuleContext {
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public ComparisonContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparison; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterComparison(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitComparison(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitComparison(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ComparisonContext comparison() throws RecognitionException {
		ComparisonContext _localctx = new ComparisonContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_comparison);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5812);
			columnName();
			setState(5813);
			comparisonOperator();
			setState(5816);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case ALL:
			case ALLOCATE:
			case ALLOW:
			case ALTER:
			case ALTERAND:
			case ANY:
			case ARRAY:
			case ARRAY_EXISTS:
			case AS:
			case ASENSITIVE:
			case ASSOCIATE:
			case ASUTIME:
			case AT:
			case AUDIT:
			case AUX:
			case AUXILIARY:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BUFFERPOOL:
			case BY:
			case CALL:
			case CAPTURE:
			case CASCADED:
			case CASE:
			case CAST:
			case CCSID:
			case CHAR:
			case CHARACTER:
			case CHECK:
			case CLONE:
			case CLOSE:
			case CLUSTER:
			case COLLECTION:
			case COLLID:
			case COLUMN:
			case COMMENT:
			case COMMIT:
			case CONCAT:
			case CONDITION:
			case CONNECT:
			case CONNECTION:
			case CONSTRAINT:
			case CONTAINS:
			case CONTENT:
			case CONTINUE:
			case CREATE:
			case CUBE:
			case CURRENT:
			case CURRENT_LC_CTYPE:
			case CURRVAL:
			case CURSOR:
			case DATA:
			case DATABASE:
			case DAY:
			case DAYS:
			case DBINFO:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DISABLE:
			case DISALLOW:
			case DISTINCT:
			case DO:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSSIZE:
			case DYNAMIC:
			case EDITPROC:
			case ELSE:
			case ELSEIF:
			case ENCODING:
			case ENCRYPTION:
			case END:
			case END_EXEC:
			case ENDING:
			case ERASE:
			case ESCAPE:
			case EXCEPT:
			case EXCEPTION:
			case EXEC_SQL:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case FENCED:
			case FETCH:
			case FIELDPROC:
			case FINAL:
			case FIRST:
			case FOR:
			case FREE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANT:
			case GROUP:
			case HANDLER:
			case HAVING:
			case HOLD:
			case HOUR:
			case HOURS:
			case IF:
			case IMMEDIATE:
			case IN:
			case INCLUSIVE:
			case INDEX:
			case INDEXBP:
			case INHERIT:
			case INNER:
			case INOUT:
			case INSENSITIVE:
			case INSERT:
			case INTERSECT:
			case INTO:
			case IS:
			case ISOBID:
			case ITERATE:
			case JAR:
			case JOIN:
			case KEEP:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LAST:
			case LC_CTYPE:
			case LEAVE:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOCALE:
			case LOCATOR:
			case LOCATORS:
			case LOCK:
			case LOCKMAX:
			case LOCKSIZE:
			case LONG:
			case LOOP:
			case MAINTAINED:
			case MATERIALIZED:
			case MICROSECOND:
			case MICROSECONDS:
			case MODIFIES:
			case MONTH:
			case MONTHS:
			case NEXT:
			case NEXTVAL:
			case NO:
			case NONE:
			case NOT:
			case NULL:
			case NULLS:
			case NUMPARTS:
			case OBID:
			case OF:
			case OFFSET:
			case OLD:
			case ON:
			case OPEN:
			case OPTIMIZATION:
			case OPTIMIZE:
			case OR:
			case ORDER:
			case ORGANIZATION:
			case OUT:
			case OUTER:
			case PACKAGE:
			case PADDED:
			case PARAMETER:
			case PART:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONING:
			case PATH:
			case PERIOD:
			case PIECESIZE:
			case PLAN:
			case PRECISION:
			case PREPARE:
			case PREVVAL:
			case PRIOR:
			case PRIQTY:
			case PRIVILEGES:
			case PROCEDURE:
			case PROGRAM:
			case PSID:
			case PUBLIC:
			case QUERY:
			case QUERYNO:
			case READS:
			case REFERENCES:
			case REFRESH:
			case RELEASE:
			case RENAME:
			case REPEAT:
			case RESIGNAL:
			case RESTRICT:
			case RESULT:
			case RESULT_SET_LOCATOR:
			case RETURN:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUND_CEILING:
			case ROUND_DOWN:
			case ROUND_FLOOR:
			case ROUND_HALF_DOWN:
			case ROUND_HALF_EVEN:
			case ROUND_HALF_UP:
			case ROUND_UP:
			case ROW:
			case ROWSET:
			case RUN:
			case SAVEPOINT:
			case SCHEMA:
			case SCRATCHPAD:
			case SECOND:
			case SECONDS:
			case SECQTY:
			case SECURITY:
			case SELECT:
			case SENSITIVE:
			case SEQUENCE:
			case SET:
			case SIGNAL:
			case SIMPLE:
			case SOME:
			case SOURCE:
			case SPECIFIC:
			case STANDARD:
			case STATEMENT:
			case STATIC:
			case STAY:
			case STOGROUP:
			case STORES:
			case STYLE:
			case SUMMARY:
			case SYNONYM:
			case SYSDATE:
			case SYSTEM:
			case SYSTIMESTAMP:
			case TABLE:
			case TABLESPACE:
			case THEN:
			case TO:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNDO:
			case UNION:
			case UNIQUE:
			case UNTIL:
			case UPDATE:
			case USING:
			case VALIDPROC:
			case VALUE:
			case VALUES:
			case VARIABLE:
			case VARIANT:
			case VCAT:
			case VERSIONING:
			case VIEW:
			case VOLATILE:
			case VOLUMES:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WLM:
			case XMLCAST:
			case XMLEXISTS:
			case XMLNAMESPACES:
			case YEAR:
			case YEARS:
			case ZONE:
			case AND:
			case ARRAY_AGG:
			case ASC:
			case AVG:
			case BIT:
			case CHANGE:
			case CODEUNITS16:
			case CODEUNITS32:
			case CORR:
			case CORRELATION:
			case COUNT:
			case COUNT_BIG:
			case COVAR:
			case COVARIANCE:
			case COVARIANCE_SAMP:
			case COVAR_POP:
			case COVAR_SAMP:
			case CS:
			case CUME_DIST:
			case DENSE_RANK:
			case DESC:
			case EBCDIC:
			case EXCLUSIVE:
			case FIRST_VALUE:
			case FOLLOWING:
			case GROUPING:
			case IGNORE:
			case INDICATOR:
			case INPUT:
			case ISNULL:
			case LAG:
			case LARGE:
			case LAST_VALUE:
			case LEAD:
			case LISTAGG:
			case LOCKED:
			case LOCKS:
			case MEDIAN:
			case MINUTES:
			case MIXED:
			case NOTNULL:
			case NTH_VALUE:
			case NTILE:
			case NUMERIC:
			case OBJECT:
			case OCTETS:
			case ONLY:
			case OVER:
			case PASSING:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PERCENT_RANK:
			case PRECEDING:
			case PREVIOUS:
			case RANGE:
			case RANK:
			case RATIO_TO_REPORT:
			case READ:
			case REF:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_ICPT:
			case REGR_INTERCEPT:
			case REGR_R2:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case RESPECT:
			case ROW_NUMBER:
			case ROWS:
			case RR:
			case RS:
			case SBCS:
			case SELECTIVITY:
			case SETS:
			case SHARE:
			case SKIP_:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case TOKEN:
			case UNBOUNDED:
			case UNPACK:
			case UR:
			case USE:
			case VAR:
			case VARIANCE:
			case VARIANCE_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARYING:
			case WITHOUT:
			case XML:
			case XMLAGG:
			case COLUMNS:
			case SQLID:
			case ORDINALITY:
			case SYSTEM_TIME:
			case BUSINESS_TIME:
			case MULTIPLIER:
			case UNNEST:
			case CROSS:
			case CALLER:
			case CLIENT:
			case POSITIONING:
			case SCROLL:
			case ACTION:
			case ASSEMBLE:
			case C_:
			case CALLED:
			case COBOL:
			case DB2:
			case DEFINER:
			case DISPATCH:
			case ENVIRONMENT:
			case FAILURE:
			case FAILURES:
			case JAVA:
			case MAIN:
			case NAME:
			case OPTIONS:
			case PARALLEL:
			case PLI:
			case REGISTERS:
			case RESIDENT:
			case SECURED:
			case SPECIAL:
			case SQL:
			case STOP:
			case SUB:
			case YES:
			case APPLICATION:
			case CHANGED:
			case COMPATIBILITY:
			case COMPRESS:
			case COPY:
			case FREEPAGE:
			case GBPCACHE:
			case INCLUDE:
			case MAXVALUE:
			case MINVALUE:
			case PCTFREE:
			case REGENERATE:
			case MASK:
			case ENABLE:
			case PERMISSION:
			case ATOMIC:
			case SQLEXCEPTION:
			case MERGE:
			case MATCHED:
			case SQLSTATE:
			case MESSAGE_TEXT:
			case OVERRIDING:
			case PORTION:
			case DB2SQL:
			case DEBUG:
			case GENERAL:
			case MODE_:
			case REXX:
			case CACHE:
			case CYCLE:
			case INCREMENT:
			case RESTART:
			case DATACLAS:
			case MGMTCLAS:
			case REMOVE:
			case STORCLAS:
			case ACCESS:
			case ACTIVATE:
			case ALWAYS:
			case APPEND:
			case ARCHIVE:
			case BUSINESS:
			case CASCADE:
			case CHANGES:
			case CONTROL:
			case DEACTIVATE:
			case DEFERRED:
			case EACH:
			case ENFORCED:
			case EXTRA:
			case FOREIGN:
			case HIDDEN_:
			case HISTORY:
			case ID:
			case IDENTITY:
			case IMPLICITLY:
			case INITIALLY:
			case INLINE:
			case OPERATION:
			case ORGANIZE:
			case OVERLAPS:
			case PACKAGE_NAME:
			case PACKAGE_SCHEMA:
			case PACKAGE_VERSION:
			case PRIMARY:
			case RESET:
			case ROTATE:
			case START:
			case SYSIBM:
			case TRANSACTION:
			case XMLSCHEMA:
			case ELEMENT:
			case URL:
			case NAMESPACE:
			case LOCATION:
			case SYSXSR:
			case ALGORITHM:
			case FIXEDLENGTH:
			case HUFFMAN:
			case LOB:
			case LOG:
			case LOGGED:
			case MAXPARTITIONS:
			case MAXROWS:
			case MEMBER:
			case MOVE:
			case PAGE:
			case PAGENUM:
			case PENDING:
			case RELATIVE:
			case SEGSIZE:
			case TRACKMOD:
			case ADDRESS:
			case ATTRIBUTES:
			case AUTHENTICATION:
			case AUTHID:
			case CONTEXT:
			case JOBNAME:
			case OWNER:
			case PROFILE:
			case QUALIFIER:
			case SERVAUTH:
			case TRUSTED:
			case SECTION:
			case ACTIVE:
			case VERSION:
			case ALIAS:
			case WORK:
			case WORKFILE:
			case SYSDEFLT:
			case NULTERM:
			case STRUCTURE:
			case GENERIC:
			case ABS:
			case ABSVAL:
			case ACOS:
			case ADD_DAYS:
			case ADD_MONTHS:
			case ARRAY_DELETE:
			case ARRAY_FIRST:
			case ARRAY_LAST:
			case ARRAY_NEXT:
			case ARRAY_PRIOR:
			case ARRAY_TRIM:
			case ASCII:
			case ASCII_CHR:
			case ASCIISTR:
			case ASCII_STR:
			case ASIN:
			case ATAN:
			case ATAN2:
			case ATANH:
			case BIGINT:
			case BINARY:
			case BITAND:
			case BITANDNOT:
			case BITNOT:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BTRIM:
			case CARDINALITY:
			case CCSID_ENCODING:
			case CEIL:
			case CEILING:
			case CHAR9:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case CHR:
			case CLOB:
			case COALESCE:
			case COLLATION_KEY:
			case COMPARE_DECFLOAT:
			case COS:
			case COSH:
			case DATE:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFWEEK_ISO:
			case DAYOFYEAR:
			case DAYS_BETWEEN:
			case DBCLOB:
			case DEC:
			case DECFLOAT:
			case DECFLOAT_FORMAT:
			case DECFLOAT_SORTKEY:
			case DECIMAL:
			case DECODE:
			case DECRYPT_BINARY:
			case DECRYPT_BIT:
			case DECRYPT_CHAR:
			case DECRYPT_DATAKEY_BIGINT:
			case DECRYPT_DATAKEY_BIT:
			case DECRYPT_DATAKEY_CLOB:
			case DECRYPT_DATAKEY_DBCLOB:
			case DECRYPT_DATAKEY_DECIMAL:
			case DECRYPT_DATAKEY_INTEGER:
			case DECRYPT_DATAKEY_VARCHAR:
			case DECRYPT_DATAKEY_VARGRAPHIC:
			case DECRYPT_DB:
			case DEGREES:
			case DIFFERENCE:
			case DIGITS:
			case DOUBLE_PRECISION:
			case DSN_XMLVALIDATE:
			case EBCDIC_CHR:
			case EBCDIC_STR:
			case ENCRYPT_DATAKEY:
			case ENCRYPT_TDES:
			case EXP:
			case EXTRACT:
			case FLOAT:
			case FLOOR:
			case GENERATE_UNIQUE:
			case GENERATE_UNIQUE_BINARY:
			case GETHINT:
			case GETVARIABLE:
			case GRAPHIC:
			case GREATEST:
			case HASH:
			case HASH_CRC32:
			case HASH_MD5:
			case HASH_SHA1:
			case HASH_SHA256:
			case HEX:
			case IDENTITY_VAL_LOCAL:
			case IFNULL:
			case INSTR:
			case INT:
			case INTEGER:
			case JULIAN_DAY:
			case LAST_DAY:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LN:
			case LOCATE:
			case LOCATE_IN_STRING:
			case LOG10:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAX:
			case MAX_CARDINALITY:
			case MIDNIGHT_SECONDS:
			case MIN:
			case MINUTE:
			case MOD:
			case MONTHS_BETWEEN:
			case MQREAD:
			case MQREADCLOB:
			case MQRECEIVE:
			case MQRECEIVECLOB:
			case MQSEND:
			case MULTIPLY_ALT:
			case NEXT_DAY:
			case NEXT_MONTH:
			case NORMALIZE_DECFLOAT:
			case NORMALIZE_STRING:
			case NULLIF:
			case NVL:
			case OVERLAY:
			case PACK:
			case POSITION:
			case POSSTR:
			case POW:
			case POWER:
			case QUANTIZE:
			case QUARTER:
			case RADIANS:
			case RAISE_ERROR:
			case RAND:
			case RANDOM:
			case REAL:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REPLACE:
			case RID:
			case ROUND:
			case ROUND_TIMESTAMP:
			case ROWID:
			case RPAD:
			case RTRIM:
			case SCORE:
			case SIGN:
			case SIN:
			case SINH:
			case SMALLINT:
			case SOAPHTTPC:
			case SOAPHTTPNC:
			case SOAPHTTPNV:
			case SOAPHTTPV:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STRIP:
			case STRLEFT:
			case STRPOS:
			case STRRIGHT:
			case SUBSTR:
			case SUBSTRING:
			case TAN:
			case TANH:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIMESTAMP_FORMAT:
			case TIMESTAMP_ISO:
			case TIMESTAMP_TZ:
			case TO_CHAR:
			case TO_CLOB:
			case TO_DATE:
			case TO_NUMBER:
			case TOTALORDER:
			case TO_TIMESTAMP:
			case TRANSLATE:
			case TRIM:
			case TRIM_ARRAY:
			case TRUNC:
			case TRUNC_TIMESTAMP:
			case UCASE:
			case UNICODE:
			case UNICODE_STR:
			case UNISTR:
			case UPPER:
			case VARBINARY:
			case VARCHAR:
			case VARCHAR9:
			case VARCHAR_BIT_FORMAT:
			case VARCHAR_FORMAT:
			case VARGRAPHIC:
			case VERIFY_GROUP_FOR_USER:
			case VERIFY_ROLE_FOR_USER:
			case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
			case WEEK:
			case WEEK_ISO:
			case WRAP:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLCONCAT:
			case XMLDOCUMENT:
			case XMLELEMENT:
			case XMLFOREST:
			case XMLMODIFY:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLSERIALIZE:
			case XMLTEXT:
			case XMLXSROBJECTID:
			case XSLTRANSFORM:
			case CURRENT_ACCELERATOR:
			case CURRENT_APPLICATION_COMPATIBILITY:
			case CURRENT_APPLICATION_ENCODING_SCHEME:
			case CURRENT_CLIENT_ACCTNG:
			case CURRENT_CLIENT_APPLNAME:
			case CURRENT_CLIENT_CORR_TOKEN:
			case CURRENT_CLIENT_USERID:
			case CURRENT_CLIENT_WRKSTNNAME:
			case CURRENT_DATE:
			case CURRENT_DEBUG_MODE:
			case CURRENT_DECFLOAT_ROUNDING_MODE:
			case CURRENT_DEGREE:
			case CURRENT_EXPLAIN_MODE:
			case CURRENT_GET_ACCEL_ARCHIVE:
			case CURRENT_LOCALE_LC_CTYPE:
			case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
			case CURRENT_MEMBER:
			case CURRENT_OPTIMIZATION_HINT:
			case CURRENT_PACKAGE_PATH:
			case CURRENT_PACKAGESET:
			case CURRENT_PATH:
			case CURRENT_PRECISION:
			case CURRENT_QUERY_ACCELERATION:
			case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
			case CURRENT_REFRESH_AGE:
			case CURRENT_ROUTINE_VERSION:
			case CURRENT_RULES:
			case CURRENT_SCHEMA:
			case CURRENT_SERVER:
			case CURRENT_SQLID:
			case CURRENT_TEMPORAL_BUSINESS_TIME:
			case CURRENT_TEMPORAL_SYSTEM_TIME:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_TIME_ZONE:
			case ENCRYPTION_PASSWORD:
			case SESSION_TIME_ZONE:
			case SESSION_USER:
			case USER:
			case ADMIN_TASK_LIST:
			case ADMIN_TASK_OUTPUT:
			case ADMIN_TASK_STATUS:
			case BLOCKING_THREADS:
			case MQREADALL:
			case MQREADALLCLOB:
			case MQRECEIVEALL:
			case MQRECEIVEALLCLOB:
			case XMLTABLE:
			case SQLIDENTIFIER:
				{
				setState(5814);
				columnName();
				}
				break;
			case NONNUMERICLITERAL:
			case INTEGERLITERAL:
			case NUMERICLITERAL:
				{
				setState(5815);
				literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhereClauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(DB2zSQLParser.WHERE, 0); }
		public SearchConditionContext searchCondition() {
			return getRuleContext(SearchConditionContext.class,0);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whereClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterWhereClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitWhereClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitWhereClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhereClauseContext whereClause() throws RecognitionException {
		WhereClauseContext _localctx = new WhereClauseContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_whereClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5818);
			match(WHERE);
			setState(5819);
			searchCondition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByClauseContext extends ParserRuleContext {
		public TerminalNode GROUP() { return getToken(DB2zSQLParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public GroupingExpressionContext groupingExpression() {
			return getRuleContext(GroupingExpressionContext.class,0);
		}
		public GroupingSetsContext groupingSets() {
			return getRuleContext(GroupingSetsContext.class,0);
		}
		public SuperGroupsContext superGroups() {
			return getRuleContext(SuperGroupsContext.class,0);
		}
		public GroupByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGroupByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGroupByClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGroupByClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByClauseContext groupByClause() throws RecognitionException {
		GroupByClauseContext _localctx = new GroupByClauseContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_groupByClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5821);
			match(GROUP);
			setState(5822);
			match(BY);
			setState(5826);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,699,_ctx) ) {
			case 1:
				{
				setState(5823);
				groupingExpression();
				}
				break;
			case 2:
				{
				setState(5824);
				groupingSets();
				}
				break;
			case 3:
				{
				setState(5825);
				superGroups();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HavingClauseContext extends ParserRuleContext {
		public TerminalNode HAVING() { return getToken(DB2zSQLParser.HAVING, 0); }
		public SearchConditionContext searchCondition() {
			return getRuleContext(SearchConditionContext.class,0);
		}
		public HavingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_havingClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterHavingClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitHavingClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitHavingClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HavingClauseContext havingClause() throws RecognitionException {
		HavingClauseContext _localctx = new HavingClauseContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_havingClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5828);
			match(HAVING);
			setState(5829);
			searchCondition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupingExpressionContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public GroupingExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupingExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGroupingExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGroupingExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGroupingExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupingExpressionContext groupingExpression() throws RecognitionException {
		GroupingExpressionContext _localctx = new GroupingExpressionContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_groupingExpression);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5831);
			expression();
			setState(5836);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,700,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5832);
					match(COMMA);
					setState(5833);
					expression();
					}
					} 
				}
				setState(5838);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,700,_ctx);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupingSetsContext extends ParserRuleContext {
		public TerminalNode GROUPING() { return getToken(DB2zSQLParser.GROUPING, 0); }
		public TerminalNode SETS() { return getToken(DB2zSQLParser.SETS, 0); }
		public GroupingSetsGroupContext groupingSetsGroup() {
			return getRuleContext(GroupingSetsGroupContext.class,0);
		}
		public GroupingSetsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupingSets; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGroupingSets(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGroupingSets(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGroupingSets(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupingSetsContext groupingSets() throws RecognitionException {
		GroupingSetsContext _localctx = new GroupingSetsContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_groupingSets);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5839);
			match(GROUPING);
			setState(5840);
			match(SETS);
			setState(5841);
			groupingSetsGroup();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupingSetsGroupContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<GroupingSetsGroupContext> groupingSetsGroup() {
			return getRuleContexts(GroupingSetsGroupContext.class);
		}
		public GroupingSetsGroupContext groupingSetsGroup(int i) {
			return getRuleContext(GroupingSetsGroupContext.class,i);
		}
		public List<GroupingExpressionContext> groupingExpression() {
			return getRuleContexts(GroupingExpressionContext.class);
		}
		public GroupingExpressionContext groupingExpression(int i) {
			return getRuleContext(GroupingExpressionContext.class,i);
		}
		public List<SuperGroupsContext> superGroups() {
			return getRuleContexts(SuperGroupsContext.class);
		}
		public SuperGroupsContext superGroups(int i) {
			return getRuleContext(SuperGroupsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public GroupingSetsGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupingSetsGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterGroupingSetsGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitGroupingSetsGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitGroupingSetsGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupingSetsGroupContext groupingSetsGroup() throws RecognitionException {
		GroupingSetsGroupContext _localctx = new GroupingSetsGroupContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_groupingSetsGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5843);
			match(LPAREN);
			setState(5847);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,701,_ctx) ) {
			case 1:
				{
				setState(5844);
				groupingSetsGroup();
				}
				break;
			case 2:
				{
				setState(5845);
				groupingExpression();
				}
				break;
			case 3:
				{
				setState(5846);
				superGroups();
				}
				break;
			}
			setState(5857);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5849);
				match(COMMA);
				setState(5853);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,702,_ctx) ) {
				case 1:
					{
					setState(5850);
					groupingSetsGroup();
					}
					break;
				case 2:
					{
					setState(5851);
					groupingExpression();
					}
					break;
				case 3:
					{
					setState(5852);
					superGroups();
					}
					break;
				}
				}
				}
				setState(5859);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5860);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SuperGroupsContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public GroupingExpressionContext groupingExpression() {
			return getRuleContext(GroupingExpressionContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public TerminalNode ROLLUP() { return getToken(DB2zSQLParser.ROLLUP, 0); }
		public TerminalNode CUBE() { return getToken(DB2zSQLParser.CUBE, 0); }
		public SuperGroupsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_superGroups; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSuperGroups(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSuperGroups(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSuperGroups(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SuperGroupsContext superGroups() throws RecognitionException {
		SuperGroupsContext _localctx = new SuperGroupsContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_superGroups);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5869);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CUBE:
			case ROLLUP:
				{
				{
				setState(5862);
				_la = _input.LA(1);
				if ( !(_la==CUBE || _la==ROLLUP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5863);
				match(LPAREN);
				setState(5864);
				groupingExpression();
				setState(5865);
				match(RPAREN);
				}
				}
				break;
			case LPAREN:
				{
				{
				setState(5867);
				match(LPAREN);
				setState(5868);
				match(RPAREN);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectColumnsContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public TerminalNode SPLAT() { return getToken(DB2zSQLParser.SPLAT, 0); }
		public UnpackedRowContext unpackedRow() {
			return getRuleContext(UnpackedRowContext.class,0);
		}
		public List<OperatorContext> operator() {
			return getRuleContexts(OperatorContext.class);
		}
		public OperatorContext operator(int i) {
			return getRuleContext(OperatorContext.class,i);
		}
		public NewColumnNameContext newColumnName() {
			return getRuleContext(NewColumnNameContext.class,0);
		}
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public SelectColumnsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectColumns; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSelectColumns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSelectColumns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSelectColumns(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectColumnsContext selectColumns() throws RecognitionException {
		SelectColumnsContext _localctx = new SelectColumnsContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_selectColumns);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5891);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,708,_ctx) ) {
			case 1:
				{
				{
				setState(5871);
				expression();
				setState(5877);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,705,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(5872);
						operator();
						setState(5873);
						expression();
						}
						} 
					}
					setState(5879);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,705,_ctx);
				}
				setState(5884);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,707,_ctx) ) {
				case 1:
					{
					setState(5881);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,706,_ctx) ) {
					case 1:
						{
						setState(5880);
						match(AS);
						}
						break;
					}
					setState(5883);
					newColumnName();
					}
					break;
				}
				}
				}
				break;
			case 2:
				{
				{
				setState(5886);
				tableName();
				setState(5887);
				match(DOT);
				setState(5888);
				match(SPLAT);
				}
				}
				break;
			case 3:
				{
				{
				setState(5890);
				unpackedRow();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnpackedRowContext extends ParserRuleContext {
		public TerminalNode UNPACK() { return getToken(DB2zSQLParser.UNPACK, 0); }
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public TerminalNode DOT() { return getToken(DB2zSQLParser.DOT, 0); }
		public TerminalNode SPLAT() { return getToken(DB2zSQLParser.SPLAT, 0); }
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public List<DataTypeContext> dataType() {
			return getRuleContexts(DataTypeContext.class);
		}
		public DataTypeContext dataType(int i) {
			return getRuleContext(DataTypeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public UnpackedRowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpackedRow; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterUnpackedRow(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitUnpackedRow(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitUnpackedRow(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnpackedRowContext unpackedRow() throws RecognitionException {
		UnpackedRowContext _localctx = new UnpackedRowContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_unpackedRow);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5893);
			match(UNPACK);
			setState(5894);
			match(LPAREN);
			setState(5895);
			expression();
			setState(5896);
			match(RPAREN);
			setState(5897);
			match(DOT);
			setState(5898);
			match(SPLAT);
			setState(5899);
			match(AS);
			setState(5900);
			match(LPAREN);
			setState(5901);
			columnName();
			setState(5902);
			dataType();
			setState(5909);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5903);
				match(COMMA);
				setState(5904);
				columnName();
				setState(5905);
				dataType();
				}
				}
				setState(5911);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5912);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectClauseContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(DB2zSQLParser.SELECT, 0); }
		public TerminalNode SPLAT() { return getToken(DB2zSQLParser.SPLAT, 0); }
		public TerminalNode ALL() { return getToken(DB2zSQLParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(DB2zSQLParser.DISTINCT, 0); }
		public List<SelectColumnsContext> selectColumns() {
			return getRuleContexts(SelectColumnsContext.class);
		}
		public SelectColumnsContext selectColumns(int i) {
			return getRuleContext(SelectColumnsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public SelectClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSelectClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSelectClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSelectClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectClauseContext selectClause() throws RecognitionException {
		SelectClauseContext _localctx = new SelectClauseContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_selectClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5914);
			match(SELECT);
			setState(5916);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,710,_ctx) ) {
			case 1:
				{
				setState(5915);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(5927);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SPLAT:
				{
				setState(5918);
				match(SPLAT);
				}
				break;
			case LPAREN:
			case COLON:
			case NONNUMERICLITERAL:
			case INTEGERLITERAL:
			case NUMERICLITERAL:
			case ADD:
			case AFTER:
			case ALL:
			case ALLOCATE:
			case ALLOW:
			case ALTER:
			case ALTERAND:
			case ANY:
			case ARRAY:
			case ARRAY_EXISTS:
			case AS:
			case ASENSITIVE:
			case ASSOCIATE:
			case ASUTIME:
			case AT:
			case AUDIT:
			case AUX:
			case AUXILIARY:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BUFFERPOOL:
			case BY:
			case CALL:
			case CAPTURE:
			case CASCADED:
			case CASE:
			case CAST:
			case CCSID:
			case CHAR:
			case CHARACTER:
			case CHECK:
			case CLONE:
			case CLOSE:
			case CLUSTER:
			case COLLECTION:
			case COLLID:
			case COLUMN:
			case COMMENT:
			case COMMIT:
			case CONCAT:
			case CONDITION:
			case CONNECT:
			case CONNECTION:
			case CONSTRAINT:
			case CONTAINS:
			case CONTENT:
			case CONTINUE:
			case CREATE:
			case CUBE:
			case CURRENT:
			case CURRENT_LC_CTYPE:
			case CURRVAL:
			case CURSOR:
			case DATA:
			case DATABASE:
			case DAY:
			case DAYS:
			case DBINFO:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DISABLE:
			case DISALLOW:
			case DISTINCT:
			case DO:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSSIZE:
			case DYNAMIC:
			case EDITPROC:
			case ELSE:
			case ELSEIF:
			case ENCODING:
			case ENCRYPTION:
			case END:
			case END_EXEC:
			case ENDING:
			case ERASE:
			case ESCAPE:
			case EXCEPT:
			case EXCEPTION:
			case EXEC_SQL:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case FENCED:
			case FETCH:
			case FIELDPROC:
			case FINAL:
			case FIRST:
			case FOR:
			case FREE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANT:
			case GROUP:
			case HANDLER:
			case HAVING:
			case HOLD:
			case HOUR:
			case HOURS:
			case IF:
			case IMMEDIATE:
			case IN:
			case INCLUSIVE:
			case INDEX:
			case INDEXBP:
			case INHERIT:
			case INNER:
			case INOUT:
			case INSENSITIVE:
			case INSERT:
			case INTERSECT:
			case INTO:
			case IS:
			case ISOBID:
			case ITERATE:
			case JAR:
			case JOIN:
			case KEEP:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LAST:
			case LC_CTYPE:
			case LEAVE:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOCALE:
			case LOCATOR:
			case LOCATORS:
			case LOCK:
			case LOCKMAX:
			case LOCKSIZE:
			case LONG:
			case LOOP:
			case MAINTAINED:
			case MATERIALIZED:
			case MICROSECOND:
			case MICROSECONDS:
			case MODIFIES:
			case MONTH:
			case MONTHS:
			case NEXT:
			case NEXTVAL:
			case NO:
			case NONE:
			case NOT:
			case NULL:
			case NULLS:
			case NUMPARTS:
			case OBID:
			case OF:
			case OFFSET:
			case OLD:
			case ON:
			case OPEN:
			case OPTIMIZATION:
			case OPTIMIZE:
			case OR:
			case ORDER:
			case ORGANIZATION:
			case OUT:
			case OUTER:
			case PACKAGE:
			case PADDED:
			case PARAMETER:
			case PART:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONING:
			case PATH:
			case PERIOD:
			case PIECESIZE:
			case PLAN:
			case PRECISION:
			case PREPARE:
			case PREVVAL:
			case PRIOR:
			case PRIQTY:
			case PRIVILEGES:
			case PROCEDURE:
			case PROGRAM:
			case PSID:
			case PUBLIC:
			case QUERY:
			case QUERYNO:
			case READS:
			case REFERENCES:
			case REFRESH:
			case RELEASE:
			case RENAME:
			case REPEAT:
			case RESIGNAL:
			case RESTRICT:
			case RESULT:
			case RESULT_SET_LOCATOR:
			case RETURN:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUND_CEILING:
			case ROUND_DOWN:
			case ROUND_FLOOR:
			case ROUND_HALF_DOWN:
			case ROUND_HALF_EVEN:
			case ROUND_HALF_UP:
			case ROUND_UP:
			case ROW:
			case ROWSET:
			case RUN:
			case SAVEPOINT:
			case SCHEMA:
			case SCRATCHPAD:
			case SECOND:
			case SECONDS:
			case SECQTY:
			case SECURITY:
			case SELECT:
			case SENSITIVE:
			case SEQUENCE:
			case SET:
			case SIGNAL:
			case SIMPLE:
			case SOME:
			case SOURCE:
			case SPECIFIC:
			case STANDARD:
			case STATEMENT:
			case STATIC:
			case STAY:
			case STOGROUP:
			case STORES:
			case STYLE:
			case SUMMARY:
			case SYNONYM:
			case SYSDATE:
			case SYSTEM:
			case SYSTIMESTAMP:
			case TABLE:
			case TABLESPACE:
			case THEN:
			case TO:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNDO:
			case UNION:
			case UNIQUE:
			case UNTIL:
			case UPDATE:
			case USING:
			case VALIDPROC:
			case VALUE:
			case VALUES:
			case VARIABLE:
			case VARIANT:
			case VCAT:
			case VERSIONING:
			case VIEW:
			case VOLATILE:
			case VOLUMES:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WLM:
			case XMLCAST:
			case XMLEXISTS:
			case XMLNAMESPACES:
			case YEAR:
			case YEARS:
			case ZONE:
			case AND:
			case ARRAY_AGG:
			case ASC:
			case AVG:
			case BIT:
			case CHANGE:
			case CODEUNITS16:
			case CODEUNITS32:
			case CORR:
			case CORRELATION:
			case COUNT:
			case COUNT_BIG:
			case COVAR:
			case COVARIANCE:
			case COVARIANCE_SAMP:
			case COVAR_POP:
			case COVAR_SAMP:
			case CS:
			case CUME_DIST:
			case DENSE_RANK:
			case DESC:
			case EBCDIC:
			case EXCLUSIVE:
			case FIRST_VALUE:
			case FOLLOWING:
			case GROUPING:
			case IGNORE:
			case INDICATOR:
			case INPUT:
			case ISNULL:
			case LAG:
			case LARGE:
			case LAST_VALUE:
			case LEAD:
			case LISTAGG:
			case LOCKED:
			case LOCKS:
			case MEDIAN:
			case MINUTES:
			case MIXED:
			case NOTNULL:
			case NTH_VALUE:
			case NTILE:
			case NUMERIC:
			case OBJECT:
			case OCTETS:
			case ONLY:
			case OVER:
			case PASSING:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PERCENT_RANK:
			case PRECEDING:
			case PREVIOUS:
			case RANGE:
			case RANK:
			case RATIO_TO_REPORT:
			case READ:
			case REF:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_ICPT:
			case REGR_INTERCEPT:
			case REGR_R2:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case RESPECT:
			case ROW_NUMBER:
			case ROWS:
			case RR:
			case RS:
			case SBCS:
			case SELECTIVITY:
			case SETS:
			case SHARE:
			case SKIP_:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case TOKEN:
			case UNBOUNDED:
			case UNPACK:
			case UR:
			case USE:
			case VAR:
			case VARIANCE:
			case VARIANCE_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARYING:
			case WITHOUT:
			case XML:
			case XMLAGG:
			case COLUMNS:
			case SQLID:
			case ORDINALITY:
			case SYSTEM_TIME:
			case BUSINESS_TIME:
			case MULTIPLIER:
			case UNNEST:
			case CROSS:
			case CALLER:
			case CLIENT:
			case POSITIONING:
			case SCROLL:
			case ACTION:
			case ASSEMBLE:
			case C_:
			case CALLED:
			case COBOL:
			case DB2:
			case DEFINER:
			case DISPATCH:
			case ENVIRONMENT:
			case FAILURE:
			case FAILURES:
			case JAVA:
			case MAIN:
			case NAME:
			case OPTIONS:
			case PARALLEL:
			case PLI:
			case REGISTERS:
			case RESIDENT:
			case SECURED:
			case SPECIAL:
			case SQL:
			case STOP:
			case SUB:
			case YES:
			case APPLICATION:
			case CHANGED:
			case COMPATIBILITY:
			case COMPRESS:
			case COPY:
			case FREEPAGE:
			case GBPCACHE:
			case INCLUDE:
			case MAXVALUE:
			case MINVALUE:
			case PCTFREE:
			case REGENERATE:
			case MASK:
			case ENABLE:
			case PERMISSION:
			case ATOMIC:
			case SQLEXCEPTION:
			case MERGE:
			case MATCHED:
			case SQLSTATE:
			case MESSAGE_TEXT:
			case OVERRIDING:
			case PORTION:
			case DB2SQL:
			case DEBUG:
			case GENERAL:
			case MODE_:
			case REXX:
			case CACHE:
			case CYCLE:
			case INCREMENT:
			case RESTART:
			case DATACLAS:
			case MGMTCLAS:
			case REMOVE:
			case STORCLAS:
			case ACCESS:
			case ACTIVATE:
			case ALWAYS:
			case APPEND:
			case ARCHIVE:
			case BUSINESS:
			case CASCADE:
			case CHANGES:
			case CONTROL:
			case DEACTIVATE:
			case DEFERRED:
			case EACH:
			case ENFORCED:
			case EXTRA:
			case FOREIGN:
			case HIDDEN_:
			case HISTORY:
			case ID:
			case IDENTITY:
			case IMPLICITLY:
			case INITIALLY:
			case INLINE:
			case OPERATION:
			case ORGANIZE:
			case OVERLAPS:
			case PACKAGE_NAME:
			case PACKAGE_SCHEMA:
			case PACKAGE_VERSION:
			case PRIMARY:
			case RESET:
			case ROTATE:
			case START:
			case SYSIBM:
			case TRANSACTION:
			case XMLSCHEMA:
			case ELEMENT:
			case URL:
			case NAMESPACE:
			case LOCATION:
			case SYSXSR:
			case ALGORITHM:
			case FIXEDLENGTH:
			case HUFFMAN:
			case LOB:
			case LOG:
			case LOGGED:
			case MAXPARTITIONS:
			case MAXROWS:
			case MEMBER:
			case MOVE:
			case PAGE:
			case PAGENUM:
			case PENDING:
			case RELATIVE:
			case SEGSIZE:
			case TRACKMOD:
			case ADDRESS:
			case ATTRIBUTES:
			case AUTHENTICATION:
			case AUTHID:
			case CONTEXT:
			case JOBNAME:
			case OWNER:
			case PROFILE:
			case QUALIFIER:
			case SERVAUTH:
			case TRUSTED:
			case SECTION:
			case ACTIVE:
			case VERSION:
			case ALIAS:
			case WORK:
			case WORKFILE:
			case SYSDEFLT:
			case NULTERM:
			case STRUCTURE:
			case GENERIC:
			case ABS:
			case ABSVAL:
			case ACOS:
			case ADD_DAYS:
			case ADD_MONTHS:
			case ARRAY_DELETE:
			case ARRAY_FIRST:
			case ARRAY_LAST:
			case ARRAY_NEXT:
			case ARRAY_PRIOR:
			case ARRAY_TRIM:
			case ASCII:
			case ASCII_CHR:
			case ASCIISTR:
			case ASCII_STR:
			case ASIN:
			case ATAN:
			case ATAN2:
			case ATANH:
			case BIGINT:
			case BINARY:
			case BITAND:
			case BITANDNOT:
			case BITNOT:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BTRIM:
			case CARDINALITY:
			case CCSID_ENCODING:
			case CEIL:
			case CEILING:
			case CHAR9:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case CHR:
			case CLOB:
			case COALESCE:
			case COLLATION_KEY:
			case COMPARE_DECFLOAT:
			case COS:
			case COSH:
			case DATE:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFWEEK_ISO:
			case DAYOFYEAR:
			case DAYS_BETWEEN:
			case DBCLOB:
			case DEC:
			case DECFLOAT:
			case DECFLOAT_FORMAT:
			case DECFLOAT_SORTKEY:
			case DECIMAL:
			case DECODE:
			case DECRYPT_BINARY:
			case DECRYPT_BIT:
			case DECRYPT_CHAR:
			case DECRYPT_DATAKEY_BIGINT:
			case DECRYPT_DATAKEY_BIT:
			case DECRYPT_DATAKEY_CLOB:
			case DECRYPT_DATAKEY_DBCLOB:
			case DECRYPT_DATAKEY_DECIMAL:
			case DECRYPT_DATAKEY_INTEGER:
			case DECRYPT_DATAKEY_VARCHAR:
			case DECRYPT_DATAKEY_VARGRAPHIC:
			case DECRYPT_DB:
			case DEGREES:
			case DIFFERENCE:
			case DIGITS:
			case DOUBLE_PRECISION:
			case DSN_XMLVALIDATE:
			case EBCDIC_CHR:
			case EBCDIC_STR:
			case ENCRYPT_DATAKEY:
			case ENCRYPT_TDES:
			case EXP:
			case EXTRACT:
			case FLOAT:
			case FLOOR:
			case GENERATE_UNIQUE:
			case GENERATE_UNIQUE_BINARY:
			case GETHINT:
			case GETVARIABLE:
			case GRAPHIC:
			case GREATEST:
			case HASH:
			case HASH_CRC32:
			case HASH_MD5:
			case HASH_SHA1:
			case HASH_SHA256:
			case HEX:
			case IDENTITY_VAL_LOCAL:
			case IFNULL:
			case INSTR:
			case INT:
			case INTEGER:
			case JULIAN_DAY:
			case LAST_DAY:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LN:
			case LOCATE:
			case LOCATE_IN_STRING:
			case LOG10:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAX:
			case MAX_CARDINALITY:
			case MIDNIGHT_SECONDS:
			case MIN:
			case MINUTE:
			case MOD:
			case MONTHS_BETWEEN:
			case MQREAD:
			case MQREADCLOB:
			case MQRECEIVE:
			case MQRECEIVECLOB:
			case MQSEND:
			case MULTIPLY_ALT:
			case NEXT_DAY:
			case NEXT_MONTH:
			case NORMALIZE_DECFLOAT:
			case NORMALIZE_STRING:
			case NULLIF:
			case NVL:
			case OVERLAY:
			case PACK:
			case POSITION:
			case POSSTR:
			case POW:
			case POWER:
			case QUANTIZE:
			case QUARTER:
			case RADIANS:
			case RAISE_ERROR:
			case RAND:
			case RANDOM:
			case REAL:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REPLACE:
			case RID:
			case ROUND:
			case ROUND_TIMESTAMP:
			case ROWID:
			case RPAD:
			case RTRIM:
			case SCORE:
			case SIGN:
			case SIN:
			case SINH:
			case SMALLINT:
			case SOAPHTTPC:
			case SOAPHTTPNC:
			case SOAPHTTPNV:
			case SOAPHTTPV:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STRIP:
			case STRLEFT:
			case STRPOS:
			case STRRIGHT:
			case SUBSTR:
			case SUBSTRING:
			case TAN:
			case TANH:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIMESTAMP_FORMAT:
			case TIMESTAMP_ISO:
			case TIMESTAMP_TZ:
			case TO_CHAR:
			case TO_CLOB:
			case TO_DATE:
			case TO_NUMBER:
			case TOTALORDER:
			case TO_TIMESTAMP:
			case TRANSLATE:
			case TRIM:
			case TRIM_ARRAY:
			case TRUNC:
			case TRUNC_TIMESTAMP:
			case UCASE:
			case UNICODE:
			case UNICODE_STR:
			case UNISTR:
			case UPPER:
			case VARBINARY:
			case VARCHAR:
			case VARCHAR9:
			case VARCHAR_BIT_FORMAT:
			case VARCHAR_FORMAT:
			case VARGRAPHIC:
			case VERIFY_GROUP_FOR_USER:
			case VERIFY_ROLE_FOR_USER:
			case VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER:
			case WEEK:
			case WEEK_ISO:
			case WRAP:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLCONCAT:
			case XMLDOCUMENT:
			case XMLELEMENT:
			case XMLFOREST:
			case XMLMODIFY:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLSERIALIZE:
			case XMLTEXT:
			case XMLXSROBJECTID:
			case XSLTRANSFORM:
			case CURRENT_ACCELERATOR:
			case CURRENT_APPLICATION_COMPATIBILITY:
			case CURRENT_APPLICATION_ENCODING_SCHEME:
			case CURRENT_CLIENT_ACCTNG:
			case CURRENT_CLIENT_APPLNAME:
			case CURRENT_CLIENT_CORR_TOKEN:
			case CURRENT_CLIENT_USERID:
			case CURRENT_CLIENT_WRKSTNNAME:
			case CURRENT_DATE:
			case CURRENT_DEBUG_MODE:
			case CURRENT_DECFLOAT_ROUNDING_MODE:
			case CURRENT_DEGREE:
			case CURRENT_EXPLAIN_MODE:
			case CURRENT_GET_ACCEL_ARCHIVE:
			case CURRENT_LOCALE_LC_CTYPE:
			case CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION:
			case CURRENT_MEMBER:
			case CURRENT_OPTIMIZATION_HINT:
			case CURRENT_PACKAGE_PATH:
			case CURRENT_PACKAGESET:
			case CURRENT_PATH:
			case CURRENT_PRECISION:
			case CURRENT_QUERY_ACCELERATION:
			case CURRENT_QUERY_ACCELERATION_WAITFORDATA:
			case CURRENT_REFRESH_AGE:
			case CURRENT_ROUTINE_VERSION:
			case CURRENT_RULES:
			case CURRENT_SCHEMA:
			case CURRENT_SERVER:
			case CURRENT_SQLID:
			case CURRENT_TEMPORAL_BUSINESS_TIME:
			case CURRENT_TEMPORAL_SYSTEM_TIME:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_TIME_ZONE:
			case ENCRYPTION_PASSWORD:
			case SESSION_TIME_ZONE:
			case SESSION_USER:
			case USER:
			case ADMIN_TASK_LIST:
			case ADMIN_TASK_OUTPUT:
			case ADMIN_TASK_STATUS:
			case BLOCKING_THREADS:
			case MQREADALL:
			case MQREADALLCLOB:
			case MQRECEIVEALL:
			case MQRECEIVEALLCLOB:
			case XMLTABLE:
			case SQLIDENTIFIER:
				{
				{
				setState(5919);
				selectColumns();
				setState(5924);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5920);
					match(COMMA);
					setState(5921);
					selectColumns();
					}
					}
					setState(5926);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubSelectContext extends ParserRuleContext {
		public SelectClauseContext selectClause() {
			return getRuleContext(SelectClauseContext.class,0);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public GroupByClauseContext groupByClause() {
			return getRuleContext(GroupByClauseContext.class,0);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public OffsetClauseContext offsetClause() {
			return getRuleContext(OffsetClauseContext.class,0);
		}
		public FetchClauseContext fetchClause() {
			return getRuleContext(FetchClauseContext.class,0);
		}
		public SubSelectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subSelect; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSubSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSubSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSubSelect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubSelectContext subSelect() throws RecognitionException {
		SubSelectContext _localctx = new SubSelectContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_subSelect);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5929);
			selectClause();
			setState(5930);
			fromClause();
			setState(5932);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(5931);
				whereClause();
				}
			}

			setState(5935);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GROUP) {
				{
				setState(5934);
				groupByClause();
				}
			}

			setState(5938);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HAVING) {
				{
				setState(5937);
				havingClause();
				}
			}

			setState(5941);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,716,_ctx) ) {
			case 1:
				{
				setState(5940);
				orderByClause();
				}
				break;
			}
			setState(5944);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,717,_ctx) ) {
			case 1:
				{
				setState(5943);
				offsetClause();
				}
				break;
			}
			setState(5947);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,718,_ctx) ) {
			case 1:
				{
				setState(5946);
				fetchClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectIntoStatementContext extends ParserRuleContext {
		public SelectClauseContext selectClause() {
			return getRuleContext(SelectClauseContext.class,0);
		}
		public IntoClauseContext intoClause() {
			return getRuleContext(IntoClauseContext.class,0);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public List<CommonTableExpressionContext> commonTableExpression() {
			return getRuleContexts(CommonTableExpressionContext.class);
		}
		public CommonTableExpressionContext commonTableExpression(int i) {
			return getRuleContext(CommonTableExpressionContext.class,i);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public GroupByClauseContext groupByClause() {
			return getRuleContext(GroupByClauseContext.class,0);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public OffsetClauseContext offsetClause() {
			return getRuleContext(OffsetClauseContext.class,0);
		}
		public FetchClauseContext fetchClause() {
			return getRuleContext(FetchClauseContext.class,0);
		}
		public IsolationClauseContext isolationClause() {
			return getRuleContext(IsolationClauseContext.class,0);
		}
		public SkipLockedDataClauseContext skipLockedDataClause() {
			return getRuleContext(SkipLockedDataClauseContext.class,0);
		}
		public QuerynoClauseContext querynoClause() {
			return getRuleContext(QuerynoClauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public SelectIntoStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectIntoStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSelectIntoStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSelectIntoStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSelectIntoStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectIntoStatementContext selectIntoStatement() throws RecognitionException {
		SelectIntoStatementContext _localctx = new SelectIntoStatementContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_selectIntoStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5958);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5949);
				match(WITH);
				setState(5950);
				commonTableExpression();
				setState(5955);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5951);
					match(COMMA);
					setState(5952);
					commonTableExpression();
					}
					}
					setState(5957);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(5960);
			selectClause();
			setState(5961);
			intoClause();
			setState(5962);
			fromClause();
			setState(5964);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(5963);
				whereClause();
				}
			}

			setState(5967);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GROUP) {
				{
				setState(5966);
				groupByClause();
				}
			}

			setState(5970);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HAVING) {
				{
				setState(5969);
				havingClause();
				}
			}

			setState(5973);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(5972);
				orderByClause();
				}
			}

			setState(5976);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OFFSET) {
				{
				setState(5975);
				offsetClause();
				}
			}

			setState(5979);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FETCH) {
				{
				setState(5978);
				fetchClause();
				}
			}

			setState(5983);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				{
				setState(5981);
				isolationClause();
				}
				break;
			case SKIP_:
				{
				setState(5982);
				skipLockedDataClause();
				}
				break;
			case EOF:
			case SEMICOLON:
			case END_EXEC:
			case QUERYNO:
				break;
			default:
				break;
			}
			setState(5986);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==QUERYNO) {
				{
				setState(5985);
				querynoClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectStatementContext extends ParserRuleContext {
		public FullSelectContext fullSelect() {
			return getRuleContext(FullSelectContext.class,0);
		}
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public List<CommonTableExpressionContext> commonTableExpression() {
			return getRuleContexts(CommonTableExpressionContext.class);
		}
		public CommonTableExpressionContext commonTableExpression(int i) {
			return getRuleContext(CommonTableExpressionContext.class,i);
		}
		public List<UpdateClauseContext> updateClause() {
			return getRuleContexts(UpdateClauseContext.class);
		}
		public UpdateClauseContext updateClause(int i) {
			return getRuleContext(UpdateClauseContext.class,i);
		}
		public List<ReadOnlyClauseContext> readOnlyClause() {
			return getRuleContexts(ReadOnlyClauseContext.class);
		}
		public ReadOnlyClauseContext readOnlyClause(int i) {
			return getRuleContext(ReadOnlyClauseContext.class,i);
		}
		public List<OptimizeClauseContext> optimizeClause() {
			return getRuleContexts(OptimizeClauseContext.class);
		}
		public OptimizeClauseContext optimizeClause(int i) {
			return getRuleContext(OptimizeClauseContext.class,i);
		}
		public List<IsolationClauseContext> isolationClause() {
			return getRuleContexts(IsolationClauseContext.class);
		}
		public IsolationClauseContext isolationClause(int i) {
			return getRuleContext(IsolationClauseContext.class,i);
		}
		public List<SkipLockedDataClauseContext> skipLockedDataClause() {
			return getRuleContexts(SkipLockedDataClauseContext.class);
		}
		public SkipLockedDataClauseContext skipLockedDataClause(int i) {
			return getRuleContext(SkipLockedDataClauseContext.class,i);
		}
		public List<QuerynoClauseContext> querynoClause() {
			return getRuleContexts(QuerynoClauseContext.class);
		}
		public QuerynoClauseContext querynoClause(int i) {
			return getRuleContext(QuerynoClauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public SelectStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSelectStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSelectStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSelectStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectStatementContext selectStatement() throws RecognitionException {
		SelectStatementContext _localctx = new SelectStatementContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_selectStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5997);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5988);
				match(WITH);
				setState(5989);
				commonTableExpression();
				setState(5994);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5990);
					match(COMMA);
					setState(5991);
					commonTableExpression();
					}
					}
					setState(5996);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(5999);
			fullSelect();
			setState(6008);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FOR || _la==OPTIMIZE || _la==QUERYNO || _la==WITH || _la==SKIP_) {
				{
				setState(6006);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,731,_ctx) ) {
				case 1:
					{
					setState(6000);
					updateClause();
					}
					break;
				case 2:
					{
					setState(6001);
					readOnlyClause();
					}
					break;
				case 3:
					{
					setState(6002);
					optimizeClause();
					}
					break;
				case 4:
					{
					setState(6003);
					isolationClause();
					}
					break;
				case 5:
					{
					setState(6004);
					skipLockedDataClause();
					}
					break;
				case 6:
					{
					setState(6005);
					querynoClause();
					}
					break;
				}
				}
				setState(6010);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommonTableExpressionContext extends ParserRuleContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public FullSelectContext fullSelect() {
			return getRuleContext(FullSelectContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public CommonTableExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commonTableExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterCommonTableExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitCommonTableExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitCommonTableExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommonTableExpressionContext commonTableExpression() throws RecognitionException {
		CommonTableExpressionContext _localctx = new CommonTableExpressionContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_commonTableExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6011);
			tableName();
			setState(6012);
			match(LPAREN);
			setState(6013);
			columnName();
			setState(6018);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6014);
				match(COMMA);
				setState(6015);
				columnName();
				}
				}
				setState(6020);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6021);
			match(RPAREN);
			setState(6022);
			match(AS);
			setState(6023);
			match(LPAREN);
			setState(6024);
			fullSelect();
			setState(6025);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateClauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(DB2zSQLParser.UPDATE, 0); }
		public TerminalNode OF() { return getToken(DB2zSQLParser.OF, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public UpdateClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterUpdateClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitUpdateClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitUpdateClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateClauseContext updateClause() throws RecognitionException {
		UpdateClauseContext _localctx = new UpdateClauseContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_updateClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6027);
			match(FOR);
			setState(6028);
			match(UPDATE);
			setState(6038);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OF) {
				{
				setState(6029);
				match(OF);
				setState(6030);
				columnName();
				setState(6035);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6031);
					match(COMMA);
					setState(6032);
					columnName();
					}
					}
					setState(6037);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReadOnlyClauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode READ() { return getToken(DB2zSQLParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(DB2zSQLParser.ONLY, 0); }
		public ReadOnlyClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_readOnlyClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterReadOnlyClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitReadOnlyClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitReadOnlyClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReadOnlyClauseContext readOnlyClause() throws RecognitionException {
		ReadOnlyClauseContext _localctx = new ReadOnlyClauseContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_readOnlyClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6040);
			match(FOR);
			setState(6041);
			match(READ);
			setState(6042);
			match(ONLY);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptimizeClauseContext extends ParserRuleContext {
		public TerminalNode OPTIMIZE() { return getToken(DB2zSQLParser.OPTIMIZE, 0); }
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode ROW() { return getToken(DB2zSQLParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(DB2zSQLParser.ROWS, 0); }
		public OptimizeClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optimizeClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterOptimizeClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitOptimizeClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitOptimizeClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptimizeClauseContext optimizeClause() throws RecognitionException {
		OptimizeClauseContext _localctx = new OptimizeClauseContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_optimizeClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6044);
			match(OPTIMIZE);
			setState(6045);
			match(FOR);
			setState(6046);
			match(INTEGERLITERAL);
			setState(6047);
			_la = _input.LA(1);
			if ( !(_la==ROW || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IsolationClauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode CS() { return getToken(DB2zSQLParser.CS, 0); }
		public TerminalNode UR() { return getToken(DB2zSQLParser.UR, 0); }
		public TerminalNode RR() { return getToken(DB2zSQLParser.RR, 0); }
		public TerminalNode RS() { return getToken(DB2zSQLParser.RS, 0); }
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public IsolationClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_isolationClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterIsolationClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitIsolationClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitIsolationClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IsolationClauseContext isolationClause() throws RecognitionException {
		IsolationClauseContext _localctx = new IsolationClauseContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_isolationClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6049);
			match(WITH);
			setState(6060);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RR:
				{
				{
				setState(6050);
				match(RR);
				setState(6052);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USE) {
					{
					setState(6051);
					lockClause();
					}
				}

				}
				}
				break;
			case RS:
				{
				{
				setState(6054);
				match(RS);
				setState(6056);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USE) {
					{
					setState(6055);
					lockClause();
					}
				}

				}
				}
				break;
			case CS:
				{
				setState(6058);
				match(CS);
				}
				break;
			case UR:
				{
				setState(6059);
				match(UR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockClauseContext extends ParserRuleContext {
		public TerminalNode USE() { return getToken(DB2zSQLParser.USE, 0); }
		public TerminalNode AND() { return getToken(DB2zSQLParser.AND, 0); }
		public TerminalNode KEEP() { return getToken(DB2zSQLParser.KEEP, 0); }
		public TerminalNode LOCKS() { return getToken(DB2zSQLParser.LOCKS, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(DB2zSQLParser.EXCLUSIVE, 0); }
		public TerminalNode UPDATE() { return getToken(DB2zSQLParser.UPDATE, 0); }
		public TerminalNode SHARE() { return getToken(DB2zSQLParser.SHARE, 0); }
		public LockClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterLockClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitLockClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitLockClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockClauseContext lockClause() throws RecognitionException {
		LockClauseContext _localctx = new LockClauseContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_lockClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6062);
			match(USE);
			setState(6063);
			match(AND);
			setState(6064);
			match(KEEP);
			setState(6065);
			_la = _input.LA(1);
			if ( !(_la==UPDATE || _la==EXCLUSIVE || _la==SHARE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6066);
			match(LOCKS);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SkipLockedDataClauseContext extends ParserRuleContext {
		public TerminalNode SKIP_() { return getToken(DB2zSQLParser.SKIP_, 0); }
		public TerminalNode LOCKED() { return getToken(DB2zSQLParser.LOCKED, 0); }
		public TerminalNode DATA() { return getToken(DB2zSQLParser.DATA, 0); }
		public SkipLockedDataClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_skipLockedDataClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSkipLockedDataClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSkipLockedDataClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSkipLockedDataClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SkipLockedDataClauseContext skipLockedDataClause() throws RecognitionException {
		SkipLockedDataClauseContext _localctx = new SkipLockedDataClauseContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_skipLockedDataClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6068);
			match(SKIP_);
			setState(6069);
			match(LOCKED);
			setState(6070);
			match(DATA);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QuerynoClauseContext extends ParserRuleContext {
		public TerminalNode QUERYNO() { return getToken(DB2zSQLParser.QUERYNO, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public QuerynoClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_querynoClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterQuerynoClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitQuerynoClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitQuerynoClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QuerynoClauseContext querynoClause() throws RecognitionException {
		QuerynoClauseContext _localctx = new QuerynoClauseContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_querynoClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6072);
			match(QUERYNO);
			setState(6073);
			match(INTEGERLITERAL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScalarFullSelectContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public FullSelectContext fullSelect() {
			return getRuleContext(FullSelectContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public ScalarFullSelectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scalarFullSelect; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterScalarFullSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitScalarFullSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitScalarFullSelect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ScalarFullSelectContext scalarFullSelect() throws RecognitionException {
		ScalarFullSelectContext _localctx = new ScalarFullSelectContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_scalarFullSelect);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6075);
			match(LPAREN);
			setState(6076);
			fullSelect();
			setState(6077);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FullSelectContext extends ParserRuleContext {
		public List<SubSelectContext> subSelect() {
			return getRuleContexts(SubSelectContext.class);
		}
		public SubSelectContext subSelect(int i) {
			return getRuleContext(SubSelectContext.class,i);
		}
		public ValuesClauseContext valuesClause() {
			return getRuleContext(ValuesClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public OffsetClauseContext offsetClause() {
			return getRuleContext(OffsetClauseContext.class,0);
		}
		public FetchClauseContext fetchClause() {
			return getRuleContext(FetchClauseContext.class,0);
		}
		public List<TerminalNode> LPAREN() { return getTokens(DB2zSQLParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(DB2zSQLParser.LPAREN, i);
		}
		public List<FullSelectContext> fullSelect() {
			return getRuleContexts(FullSelectContext.class);
		}
		public FullSelectContext fullSelect(int i) {
			return getRuleContext(FullSelectContext.class,i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(DB2zSQLParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(DB2zSQLParser.RPAREN, i);
		}
		public List<TerminalNode> UNION() { return getTokens(DB2zSQLParser.UNION); }
		public TerminalNode UNION(int i) {
			return getToken(DB2zSQLParser.UNION, i);
		}
		public List<TerminalNode> EXCEPT() { return getTokens(DB2zSQLParser.EXCEPT); }
		public TerminalNode EXCEPT(int i) {
			return getToken(DB2zSQLParser.EXCEPT, i);
		}
		public List<TerminalNode> INTERSECT() { return getTokens(DB2zSQLParser.INTERSECT); }
		public TerminalNode INTERSECT(int i) {
			return getToken(DB2zSQLParser.INTERSECT, i);
		}
		public List<TerminalNode> DISTINCT() { return getTokens(DB2zSQLParser.DISTINCT); }
		public TerminalNode DISTINCT(int i) {
			return getToken(DB2zSQLParser.DISTINCT, i);
		}
		public List<TerminalNode> ALL() { return getTokens(DB2zSQLParser.ALL); }
		public TerminalNode ALL(int i) {
			return getToken(DB2zSQLParser.ALL, i);
		}
		public FullSelectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullSelect; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFullSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFullSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFullSelect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FullSelectContext fullSelect() throws RecognitionException {
		FullSelectContext _localctx = new FullSelectContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_fullSelect);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6085);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LPAREN:
				{
				{
				setState(6079);
				match(LPAREN);
				setState(6080);
				fullSelect();
				setState(6081);
				match(RPAREN);
				}
				}
				break;
			case SELECT:
				{
				setState(6083);
				subSelect();
				}
				break;
			case VALUES:
				{
				setState(6084);
				valuesClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6100);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==EXCEPT || _la==INTERSECT || _la==UNION) {
				{
				{
				setState(6087);
				_la = _input.LA(1);
				if ( !(_la==EXCEPT || _la==INTERSECT || _la==UNION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6089);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					setState(6088);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(6096);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SELECT:
					{
					setState(6091);
					subSelect();
					}
					break;
				case LPAREN:
					{
					{
					setState(6092);
					match(LPAREN);
					setState(6093);
					fullSelect();
					setState(6094);
					match(RPAREN);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				setState(6102);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6104);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(6103);
				orderByClause();
				}
			}

			setState(6107);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OFFSET) {
				{
				setState(6106);
				offsetClause();
				}
			}

			setState(6110);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FETCH) {
				{
				setState(6109);
				fetchClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValuesClauseContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(DB2zSQLParser.VALUES, 0); }
		public List<SequenceReferenceContext> sequenceReference() {
			return getRuleContexts(SequenceReferenceContext.class);
		}
		public SequenceReferenceContext sequenceReference(int i) {
			return getRuleContext(SequenceReferenceContext.class,i);
		}
		public TerminalNode LPAREN() { return getToken(DB2zSQLParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(DB2zSQLParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public ValuesClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valuesClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterValuesClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitValuesClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitValuesClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValuesClauseContext valuesClause() throws RecognitionException {
		ValuesClauseContext _localctx = new ValuesClauseContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_valuesClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6112);
			match(VALUES);
			setState(6125);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NEXT:
			case PREVIOUS:
				{
				setState(6113);
				sequenceReference();
				}
				break;
			case LPAREN:
				{
				{
				setState(6114);
				match(LPAREN);
				setState(6115);
				sequenceReference();
				setState(6120);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6116);
					match(COMMA);
					setState(6117);
					sequenceReference();
					}
					}
					setState(6122);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6123);
				match(RPAREN);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderByClauseContext extends ParserRuleContext {
		public List<TerminalNode> ORDER() { return getTokens(DB2zSQLParser.ORDER); }
		public TerminalNode ORDER(int i) {
			return getToken(DB2zSQLParser.ORDER, i);
		}
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public List<SortKeyContext> sortKey() {
			return getRuleContexts(SortKeyContext.class);
		}
		public SortKeyContext sortKey(int i) {
			return getRuleContext(SortKeyContext.class,i);
		}
		public TerminalNode INPUT() { return getToken(DB2zSQLParser.INPUT, 0); }
		public TerminalNode SEQUENCE() { return getToken(DB2zSQLParser.SEQUENCE, 0); }
		public TerminalNode OF() { return getToken(DB2zSQLParser.OF, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DB2zSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DB2zSQLParser.COMMA, i);
		}
		public List<TerminalNode> ASC() { return getTokens(DB2zSQLParser.ASC); }
		public TerminalNode ASC(int i) {
			return getToken(DB2zSQLParser.ASC, i);
		}
		public List<TerminalNode> DESC() { return getTokens(DB2zSQLParser.DESC); }
		public TerminalNode DESC(int i) {
			return getToken(DB2zSQLParser.DESC, i);
		}
		public OrderByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterOrderByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitOrderByClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitOrderByClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderByClauseContext orderByClause() throws RecognitionException {
		OrderByClauseContext _localctx = new OrderByClauseContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_orderByClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6127);
			match(ORDER);
			setState(6128);
			match(BY);
			setState(6148);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,751,_ctx) ) {
			case 1:
				{
				{
				setState(6129);
				sortKey();
				setState(6131);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					setState(6130);
					_la = _input.LA(1);
					if ( !(_la==ASC || _la==DESC) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(6140);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6133);
					match(COMMA);
					setState(6134);
					sortKey();
					setState(6136);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ASC || _la==DESC) {
						{
						setState(6135);
						_la = _input.LA(1);
						if ( !(_la==ASC || _la==DESC) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					}
					}
					setState(6142);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case 2:
				{
				{
				setState(6143);
				match(INPUT);
				setState(6144);
				match(SEQUENCE);
				}
				}
				break;
			case 3:
				{
				{
				setState(6145);
				match(ORDER);
				setState(6146);
				match(OF);
				setState(6147);
				tableName();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SortKeyContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public SortKeyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sortKey; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSortKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSortKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSortKey(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SortKeyContext sortKey() throws RecognitionException {
		SortKeyContext _localctx = new SortKeyContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_sortKey);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6153);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,752,_ctx) ) {
			case 1:
				{
				setState(6150);
				columnName();
				}
				break;
			case 2:
				{
				setState(6151);
				match(INTEGERLITERAL);
				}
				break;
			case 3:
				{
				setState(6152);
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OffsetClauseContext extends ParserRuleContext {
		public TerminalNode OFFSET() { return getToken(DB2zSQLParser.OFFSET, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public TerminalNode ROW() { return getToken(DB2zSQLParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(DB2zSQLParser.ROWS, 0); }
		public OffsetClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_offsetClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterOffsetClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitOffsetClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitOffsetClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OffsetClauseContext offsetClause() throws RecognitionException {
		OffsetClauseContext _localctx = new OffsetClauseContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_offsetClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6155);
			match(OFFSET);
			setState(6156);
			match(INTEGERLITERAL);
			setState(6157);
			_la = _input.LA(1);
			if ( !(_la==ROW || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FetchClauseContext extends ParserRuleContext {
		public TerminalNode FETCH() { return getToken(DB2zSQLParser.FETCH, 0); }
		public TerminalNode ONLY() { return getToken(DB2zSQLParser.ONLY, 0); }
		public TerminalNode FIRST() { return getToken(DB2zSQLParser.FIRST, 0); }
		public TerminalNode NEXT() { return getToken(DB2zSQLParser.NEXT, 0); }
		public TerminalNode ROW() { return getToken(DB2zSQLParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(DB2zSQLParser.ROWS, 0); }
		public TerminalNode INTEGERLITERAL() { return getToken(DB2zSQLParser.INTEGERLITERAL, 0); }
		public FetchClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetchClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterFetchClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitFetchClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitFetchClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FetchClauseContext fetchClause() throws RecognitionException {
		FetchClauseContext _localctx = new FetchClauseContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_fetchClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6159);
			match(FETCH);
			setState(6160);
			_la = _input.LA(1);
			if ( !(_la==FIRST || _la==NEXT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6162);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTEGERLITERAL) {
				{
				setState(6161);
				match(INTEGERLITERAL);
				}
			}

			setState(6164);
			_la = _input.LA(1);
			if ( !(_la==ROW || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6165);
			match(ONLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierContext extends ParserRuleContext {
		public TerminalNode SQLIDENTIFIER() { return getToken(DB2zSQLParser.SQLIDENTIFIER, 0); }
		public SqlKeywordContext sqlKeyword() {
			return getRuleContext(SqlKeywordContext.class,0);
		}
		public SpecialRegisterContext specialRegister() {
			return getRuleContext(SpecialRegisterContext.class,0);
		}
		public ScalarFunctionContext scalarFunction() {
			return getRuleContext(ScalarFunctionContext.class,0);
		}
		public AggregateFunctionContext aggregateFunction() {
			return getRuleContext(AggregateFunctionContext.class,0);
		}
		public RegressionFunctionContext regressionFunction() {
			return getRuleContext(RegressionFunctionContext.class,0);
		}
		public TableFunctionContext tableFunction() {
			return getRuleContext(TableFunctionContext.class,0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierContext identifier() throws RecognitionException {
		IdentifierContext _localctx = new IdentifierContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_identifier);
		try {
			setState(6174);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,754,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6167);
				match(SQLIDENTIFIER);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6168);
				sqlKeyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6169);
				specialRegister();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6170);
				scalarFunction();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6171);
				aggregateFunction();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6172);
				regressionFunction();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6173);
				tableFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SqlKeywordContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(DB2zSQLParser.ADD, 0); }
		public TerminalNode AFTER() { return getToken(DB2zSQLParser.AFTER, 0); }
		public TerminalNode ALL() { return getToken(DB2zSQLParser.ALL, 0); }
		public TerminalNode ALLOCATE() { return getToken(DB2zSQLParser.ALLOCATE, 0); }
		public TerminalNode ALLOW() { return getToken(DB2zSQLParser.ALLOW, 0); }
		public TerminalNode ALTERAND() { return getToken(DB2zSQLParser.ALTERAND, 0); }
		public TerminalNode ANY() { return getToken(DB2zSQLParser.ANY, 0); }
		public TerminalNode ARRAY() { return getToken(DB2zSQLParser.ARRAY, 0); }
		public TerminalNode ARRAY_EXISTS() { return getToken(DB2zSQLParser.ARRAY_EXISTS, 0); }
		public TerminalNode AS() { return getToken(DB2zSQLParser.AS, 0); }
		public TerminalNode ASENSITIVE() { return getToken(DB2zSQLParser.ASENSITIVE, 0); }
		public TerminalNode ASSOCIATE() { return getToken(DB2zSQLParser.ASSOCIATE, 0); }
		public TerminalNode ASUTIME() { return getToken(DB2zSQLParser.ASUTIME, 0); }
		public TerminalNode AT() { return getToken(DB2zSQLParser.AT, 0); }
		public TerminalNode AUDIT() { return getToken(DB2zSQLParser.AUDIT, 0); }
		public TerminalNode AUX() { return getToken(DB2zSQLParser.AUX, 0); }
		public TerminalNode AUXILIARY() { return getToken(DB2zSQLParser.AUXILIARY, 0); }
		public TerminalNode BEFORE() { return getToken(DB2zSQLParser.BEFORE, 0); }
		public TerminalNode BEGIN() { return getToken(DB2zSQLParser.BEGIN, 0); }
		public TerminalNode BETWEEN() { return getToken(DB2zSQLParser.BETWEEN, 0); }
		public TerminalNode BUFFERPOOL() { return getToken(DB2zSQLParser.BUFFERPOOL, 0); }
		public TerminalNode BY() { return getToken(DB2zSQLParser.BY, 0); }
		public TerminalNode CALL() { return getToken(DB2zSQLParser.CALL, 0); }
		public TerminalNode CAPTURE() { return getToken(DB2zSQLParser.CAPTURE, 0); }
		public TerminalNode CASCADED() { return getToken(DB2zSQLParser.CASCADED, 0); }
		public TerminalNode CASE() { return getToken(DB2zSQLParser.CASE, 0); }
		public TerminalNode CAST() { return getToken(DB2zSQLParser.CAST, 0); }
		public TerminalNode CCSID() { return getToken(DB2zSQLParser.CCSID, 0); }
		public TerminalNode CHAR() { return getToken(DB2zSQLParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(DB2zSQLParser.CHARACTER, 0); }
		public TerminalNode CHECK() { return getToken(DB2zSQLParser.CHECK, 0); }
		public TerminalNode CLONE() { return getToken(DB2zSQLParser.CLONE, 0); }
		public TerminalNode CLOSE() { return getToken(DB2zSQLParser.CLOSE, 0); }
		public TerminalNode CLUSTER() { return getToken(DB2zSQLParser.CLUSTER, 0); }
		public TerminalNode COLLECTION() { return getToken(DB2zSQLParser.COLLECTION, 0); }
		public TerminalNode COLLID() { return getToken(DB2zSQLParser.COLLID, 0); }
		public TerminalNode COLUMN() { return getToken(DB2zSQLParser.COLUMN, 0); }
		public TerminalNode COMMENT() { return getToken(DB2zSQLParser.COMMENT, 0); }
		public TerminalNode COMMIT() { return getToken(DB2zSQLParser.COMMIT, 0); }
		public TerminalNode CONCAT() { return getToken(DB2zSQLParser.CONCAT, 0); }
		public TerminalNode CONDITION() { return getToken(DB2zSQLParser.CONDITION, 0); }
		public TerminalNode CONNECT() { return getToken(DB2zSQLParser.CONNECT, 0); }
		public TerminalNode CONNECTION() { return getToken(DB2zSQLParser.CONNECTION, 0); }
		public TerminalNode CONSTRAINT() { return getToken(DB2zSQLParser.CONSTRAINT, 0); }
		public TerminalNode CONTAINS() { return getToken(DB2zSQLParser.CONTAINS, 0); }
		public TerminalNode CONTENT() { return getToken(DB2zSQLParser.CONTENT, 0); }
		public TerminalNode CONTINUE() { return getToken(DB2zSQLParser.CONTINUE, 0); }
		public TerminalNode CREATE() { return getToken(DB2zSQLParser.CREATE, 0); }
		public TerminalNode CUBE() { return getToken(DB2zSQLParser.CUBE, 0); }
		public TerminalNode CURRENT() { return getToken(DB2zSQLParser.CURRENT, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(DB2zSQLParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_LC_CTYPE() { return getToken(DB2zSQLParser.CURRENT_LC_CTYPE, 0); }
		public TerminalNode CURRENT_PATH() { return getToken(DB2zSQLParser.CURRENT_PATH, 0); }
		public TerminalNode CURRENT_SCHEMA() { return getToken(DB2zSQLParser.CURRENT_SCHEMA, 0); }
		public TerminalNode CURRENT_SERVER() { return getToken(DB2zSQLParser.CURRENT_SERVER, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(DB2zSQLParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(DB2zSQLParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_TIME_ZONE() { return getToken(DB2zSQLParser.CURRENT_TIME_ZONE, 0); }
		public TerminalNode CURRVAL() { return getToken(DB2zSQLParser.CURRVAL, 0); }
		public TerminalNode CURSOR() { return getToken(DB2zSQLParser.CURSOR, 0); }
		public TerminalNode DATA() { return getToken(DB2zSQLParser.DATA, 0); }
		public TerminalNode DATABASE() { return getToken(DB2zSQLParser.DATABASE, 0); }
		public TerminalNode DAY() { return getToken(DB2zSQLParser.DAY, 0); }
		public TerminalNode DAYS() { return getToken(DB2zSQLParser.DAYS, 0); }
		public TerminalNode DBINFO() { return getToken(DB2zSQLParser.DBINFO, 0); }
		public TerminalNode DECLARE() { return getToken(DB2zSQLParser.DECLARE, 0); }
		public TerminalNode DEFAULT() { return getToken(DB2zSQLParser.DEFAULT, 0); }
		public TerminalNode DELETE() { return getToken(DB2zSQLParser.DELETE, 0); }
		public TerminalNode DESCRIPTOR() { return getToken(DB2zSQLParser.DESCRIPTOR, 0); }
		public TerminalNode DETERMINISTIC() { return getToken(DB2zSQLParser.DETERMINISTIC, 0); }
		public TerminalNode DISABLE() { return getToken(DB2zSQLParser.DISABLE, 0); }
		public TerminalNode DISALLOW() { return getToken(DB2zSQLParser.DISALLOW, 0); }
		public TerminalNode DISTINCT() { return getToken(DB2zSQLParser.DISTINCT, 0); }
		public TerminalNode DO() { return getToken(DB2zSQLParser.DO, 0); }
		public TerminalNode DOCUMENT() { return getToken(DB2zSQLParser.DOCUMENT, 0); }
		public TerminalNode DOUBLE() { return getToken(DB2zSQLParser.DOUBLE, 0); }
		public TerminalNode DROP() { return getToken(DB2zSQLParser.DROP, 0); }
		public TerminalNode DSSIZE() { return getToken(DB2zSQLParser.DSSIZE, 0); }
		public TerminalNode DYNAMIC() { return getToken(DB2zSQLParser.DYNAMIC, 0); }
		public TerminalNode EDITPROC() { return getToken(DB2zSQLParser.EDITPROC, 0); }
		public TerminalNode ELSE() { return getToken(DB2zSQLParser.ELSE, 0); }
		public TerminalNode ELSEIF() { return getToken(DB2zSQLParser.ELSEIF, 0); }
		public TerminalNode ENCODING() { return getToken(DB2zSQLParser.ENCODING, 0); }
		public TerminalNode ENCRYPTION() { return getToken(DB2zSQLParser.ENCRYPTION, 0); }
		public TerminalNode END() { return getToken(DB2zSQLParser.END, 0); }
		public TerminalNode END_EXEC() { return getToken(DB2zSQLParser.END_EXEC, 0); }
		public TerminalNode ENDING() { return getToken(DB2zSQLParser.ENDING, 0); }
		public TerminalNode ERASE() { return getToken(DB2zSQLParser.ERASE, 0); }
		public TerminalNode ESCAPE() { return getToken(DB2zSQLParser.ESCAPE, 0); }
		public TerminalNode EXCEPT() { return getToken(DB2zSQLParser.EXCEPT, 0); }
		public TerminalNode EXCEPTION() { return getToken(DB2zSQLParser.EXCEPTION, 0); }
		public TerminalNode EXEC_SQL() { return getToken(DB2zSQLParser.EXEC_SQL, 0); }
		public TerminalNode EXECUTE() { return getToken(DB2zSQLParser.EXECUTE, 0); }
		public TerminalNode EXISTS() { return getToken(DB2zSQLParser.EXISTS, 0); }
		public TerminalNode EXIT() { return getToken(DB2zSQLParser.EXIT, 0); }
		public TerminalNode EXPLAIN() { return getToken(DB2zSQLParser.EXPLAIN, 0); }
		public TerminalNode EXTERNAL() { return getToken(DB2zSQLParser.EXTERNAL, 0); }
		public TerminalNode FENCED() { return getToken(DB2zSQLParser.FENCED, 0); }
		public TerminalNode FETCH() { return getToken(DB2zSQLParser.FETCH, 0); }
		public TerminalNode FIELDPROC() { return getToken(DB2zSQLParser.FIELDPROC, 0); }
		public TerminalNode FINAL() { return getToken(DB2zSQLParser.FINAL, 0); }
		public TerminalNode FIRST() { return getToken(DB2zSQLParser.FIRST, 0); }
		public TerminalNode FOR() { return getToken(DB2zSQLParser.FOR, 0); }
		public TerminalNode FREE() { return getToken(DB2zSQLParser.FREE, 0); }
		public TerminalNode FROM() { return getToken(DB2zSQLParser.FROM, 0); }
		public TerminalNode FULL() { return getToken(DB2zSQLParser.FULL, 0); }
		public TerminalNode FUNCTION() { return getToken(DB2zSQLParser.FUNCTION, 0); }
		public TerminalNode GENERATED() { return getToken(DB2zSQLParser.GENERATED, 0); }
		public TerminalNode GET() { return getToken(DB2zSQLParser.GET, 0); }
		public TerminalNode GLOBAL() { return getToken(DB2zSQLParser.GLOBAL, 0); }
		public TerminalNode GO() { return getToken(DB2zSQLParser.GO, 0); }
		public TerminalNode GOTO() { return getToken(DB2zSQLParser.GOTO, 0); }
		public TerminalNode GRANT() { return getToken(DB2zSQLParser.GRANT, 0); }
		public TerminalNode GROUP() { return getToken(DB2zSQLParser.GROUP, 0); }
		public TerminalNode HANDLER() { return getToken(DB2zSQLParser.HANDLER, 0); }
		public TerminalNode HAVING() { return getToken(DB2zSQLParser.HAVING, 0); }
		public TerminalNode HOLD() { return getToken(DB2zSQLParser.HOLD, 0); }
		public TerminalNode HOUR() { return getToken(DB2zSQLParser.HOUR, 0); }
		public TerminalNode HOURS() { return getToken(DB2zSQLParser.HOURS, 0); }
		public TerminalNode IF() { return getToken(DB2zSQLParser.IF, 0); }
		public TerminalNode IMMEDIATE() { return getToken(DB2zSQLParser.IMMEDIATE, 0); }
		public TerminalNode IN() { return getToken(DB2zSQLParser.IN, 0); }
		public TerminalNode INCLUSIVE() { return getToken(DB2zSQLParser.INCLUSIVE, 0); }
		public TerminalNode INDEX() { return getToken(DB2zSQLParser.INDEX, 0); }
		public TerminalNode INHERIT() { return getToken(DB2zSQLParser.INHERIT, 0); }
		public TerminalNode INNER() { return getToken(DB2zSQLParser.INNER, 0); }
		public TerminalNode INOUT() { return getToken(DB2zSQLParser.INOUT, 0); }
		public TerminalNode INSENSITIVE() { return getToken(DB2zSQLParser.INSENSITIVE, 0); }
		public TerminalNode INSERT() { return getToken(DB2zSQLParser.INSERT, 0); }
		public TerminalNode INTERSECT() { return getToken(DB2zSQLParser.INTERSECT, 0); }
		public TerminalNode INTO() { return getToken(DB2zSQLParser.INTO, 0); }
		public TerminalNode IS() { return getToken(DB2zSQLParser.IS, 0); }
		public TerminalNode ISOBID() { return getToken(DB2zSQLParser.ISOBID, 0); }
		public TerminalNode ITERATE() { return getToken(DB2zSQLParser.ITERATE, 0); }
		public TerminalNode JAR() { return getToken(DB2zSQLParser.JAR, 0); }
		public TerminalNode JOIN() { return getToken(DB2zSQLParser.JOIN, 0); }
		public TerminalNode KEEP() { return getToken(DB2zSQLParser.KEEP, 0); }
		public TerminalNode KEY() { return getToken(DB2zSQLParser.KEY, 0); }
		public TerminalNode LABEL() { return getToken(DB2zSQLParser.LABEL, 0); }
		public TerminalNode LANGUAGE() { return getToken(DB2zSQLParser.LANGUAGE, 0); }
		public TerminalNode LAST() { return getToken(DB2zSQLParser.LAST, 0); }
		public TerminalNode LC_CTYPE() { return getToken(DB2zSQLParser.LC_CTYPE, 0); }
		public TerminalNode LEAVE() { return getToken(DB2zSQLParser.LEAVE, 0); }
		public TerminalNode LEFT() { return getToken(DB2zSQLParser.LEFT, 0); }
		public TerminalNode LIKE() { return getToken(DB2zSQLParser.LIKE, 0); }
		public TerminalNode LIMIT() { return getToken(DB2zSQLParser.LIMIT, 0); }
		public TerminalNode LOCAL() { return getToken(DB2zSQLParser.LOCAL, 0); }
		public TerminalNode LOCALE() { return getToken(DB2zSQLParser.LOCALE, 0); }
		public TerminalNode LOCATOR() { return getToken(DB2zSQLParser.LOCATOR, 0); }
		public TerminalNode LOCATORS() { return getToken(DB2zSQLParser.LOCATORS, 0); }
		public TerminalNode LOCK() { return getToken(DB2zSQLParser.LOCK, 0); }
		public TerminalNode LOCKMAX() { return getToken(DB2zSQLParser.LOCKMAX, 0); }
		public TerminalNode LOCKSIZE() { return getToken(DB2zSQLParser.LOCKSIZE, 0); }
		public TerminalNode LONG() { return getToken(DB2zSQLParser.LONG, 0); }
		public TerminalNode LOOP() { return getToken(DB2zSQLParser.LOOP, 0); }
		public TerminalNode MAINTAINED() { return getToken(DB2zSQLParser.MAINTAINED, 0); }
		public TerminalNode MATERIALIZED() { return getToken(DB2zSQLParser.MATERIALIZED, 0); }
		public TerminalNode MICROSECOND() { return getToken(DB2zSQLParser.MICROSECOND, 0); }
		public TerminalNode MICROSECONDS() { return getToken(DB2zSQLParser.MICROSECONDS, 0); }
		public TerminalNode MINUTE() { return getToken(DB2zSQLParser.MINUTE, 0); }
		public TerminalNode MINUTES() { return getToken(DB2zSQLParser.MINUTES, 0); }
		public TerminalNode MODIFIES() { return getToken(DB2zSQLParser.MODIFIES, 0); }
		public TerminalNode MONTH() { return getToken(DB2zSQLParser.MONTH, 0); }
		public TerminalNode MONTHS() { return getToken(DB2zSQLParser.MONTHS, 0); }
		public TerminalNode NEXT() { return getToken(DB2zSQLParser.NEXT, 0); }
		public TerminalNode NEXTVAL() { return getToken(DB2zSQLParser.NEXTVAL, 0); }
		public TerminalNode NO() { return getToken(DB2zSQLParser.NO, 0); }
		public TerminalNode NONE() { return getToken(DB2zSQLParser.NONE, 0); }
		public TerminalNode NOT() { return getToken(DB2zSQLParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(DB2zSQLParser.NULL, 0); }
		public TerminalNode NULLS() { return getToken(DB2zSQLParser.NULLS, 0); }
		public TerminalNode NUMPARTS() { return getToken(DB2zSQLParser.NUMPARTS, 0); }
		public TerminalNode OBID() { return getToken(DB2zSQLParser.OBID, 0); }
		public TerminalNode OF() { return getToken(DB2zSQLParser.OF, 0); }
		public TerminalNode OFFSET() { return getToken(DB2zSQLParser.OFFSET, 0); }
		public TerminalNode OLD() { return getToken(DB2zSQLParser.OLD, 0); }
		public TerminalNode ON() { return getToken(DB2zSQLParser.ON, 0); }
		public TerminalNode OPEN() { return getToken(DB2zSQLParser.OPEN, 0); }
		public TerminalNode OPTIMIZATION() { return getToken(DB2zSQLParser.OPTIMIZATION, 0); }
		public TerminalNode OPTIMIZE() { return getToken(DB2zSQLParser.OPTIMIZE, 0); }
		public TerminalNode OR() { return getToken(DB2zSQLParser.OR, 0); }
		public TerminalNode ORDER() { return getToken(DB2zSQLParser.ORDER, 0); }
		public TerminalNode ORGANIZATION() { return getToken(DB2zSQLParser.ORGANIZATION, 0); }
		public TerminalNode OUT() { return getToken(DB2zSQLParser.OUT, 0); }
		public TerminalNode OUTER() { return getToken(DB2zSQLParser.OUTER, 0); }
		public TerminalNode PACKAGE() { return getToken(DB2zSQLParser.PACKAGE, 0); }
		public TerminalNode PADDED() { return getToken(DB2zSQLParser.PADDED, 0); }
		public TerminalNode PARAMETER() { return getToken(DB2zSQLParser.PARAMETER, 0); }
		public TerminalNode PART() { return getToken(DB2zSQLParser.PART, 0); }
		public TerminalNode PARTITION() { return getToken(DB2zSQLParser.PARTITION, 0); }
		public TerminalNode PARTITIONED() { return getToken(DB2zSQLParser.PARTITIONED, 0); }
		public TerminalNode PARTITIONING() { return getToken(DB2zSQLParser.PARTITIONING, 0); }
		public TerminalNode PATH() { return getToken(DB2zSQLParser.PATH, 0); }
		public TerminalNode PERIOD() { return getToken(DB2zSQLParser.PERIOD, 0); }
		public TerminalNode PIECESIZE() { return getToken(DB2zSQLParser.PIECESIZE, 0); }
		public TerminalNode PLAN() { return getToken(DB2zSQLParser.PLAN, 0); }
		public TerminalNode PRECISION() { return getToken(DB2zSQLParser.PRECISION, 0); }
		public TerminalNode PREPARE() { return getToken(DB2zSQLParser.PREPARE, 0); }
		public TerminalNode PREVVAL() { return getToken(DB2zSQLParser.PREVVAL, 0); }
		public TerminalNode PRIOR() { return getToken(DB2zSQLParser.PRIOR, 0); }
		public TerminalNode PRIQTY() { return getToken(DB2zSQLParser.PRIQTY, 0); }
		public TerminalNode PRIVILEGES() { return getToken(DB2zSQLParser.PRIVILEGES, 0); }
		public TerminalNode PROCEDURE() { return getToken(DB2zSQLParser.PROCEDURE, 0); }
		public TerminalNode PROGRAM() { return getToken(DB2zSQLParser.PROGRAM, 0); }
		public TerminalNode PSID() { return getToken(DB2zSQLParser.PSID, 0); }
		public TerminalNode PUBLIC() { return getToken(DB2zSQLParser.PUBLIC, 0); }
		public TerminalNode QUERY() { return getToken(DB2zSQLParser.QUERY, 0); }
		public TerminalNode QUERYNO() { return getToken(DB2zSQLParser.QUERYNO, 0); }
		public TerminalNode READS() { return getToken(DB2zSQLParser.READS, 0); }
		public TerminalNode REFERENCES() { return getToken(DB2zSQLParser.REFERENCES, 0); }
		public TerminalNode REFRESH() { return getToken(DB2zSQLParser.REFRESH, 0); }
		public TerminalNode RELEASE() { return getToken(DB2zSQLParser.RELEASE, 0); }
		public TerminalNode RENAME() { return getToken(DB2zSQLParser.RENAME, 0); }
		public TerminalNode REPEAT() { return getToken(DB2zSQLParser.REPEAT, 0); }
		public TerminalNode RESIGNAL() { return getToken(DB2zSQLParser.RESIGNAL, 0); }
		public TerminalNode RESTRICT() { return getToken(DB2zSQLParser.RESTRICT, 0); }
		public TerminalNode RESULT() { return getToken(DB2zSQLParser.RESULT, 0); }
		public TerminalNode RESULT_SET_LOCATOR() { return getToken(DB2zSQLParser.RESULT_SET_LOCATOR, 0); }
		public TerminalNode RETURN() { return getToken(DB2zSQLParser.RETURN, 0); }
		public TerminalNode RETURNS() { return getToken(DB2zSQLParser.RETURNS, 0); }
		public TerminalNode REVOKE() { return getToken(DB2zSQLParser.REVOKE, 0); }
		public TerminalNode RIGHT() { return getToken(DB2zSQLParser.RIGHT, 0); }
		public TerminalNode ROLE() { return getToken(DB2zSQLParser.ROLE, 0); }
		public TerminalNode ROLLBACK() { return getToken(DB2zSQLParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(DB2zSQLParser.ROLLUP, 0); }
		public TerminalNode ROUND_CEILING() { return getToken(DB2zSQLParser.ROUND_CEILING, 0); }
		public TerminalNode ROUND_DOWN() { return getToken(DB2zSQLParser.ROUND_DOWN, 0); }
		public TerminalNode ROUND_FLOOR() { return getToken(DB2zSQLParser.ROUND_FLOOR, 0); }
		public TerminalNode ROUND_HALF_DOWN() { return getToken(DB2zSQLParser.ROUND_HALF_DOWN, 0); }
		public TerminalNode ROUND_HALF_EVEN() { return getToken(DB2zSQLParser.ROUND_HALF_EVEN, 0); }
		public TerminalNode ROUND_HALF_UP() { return getToken(DB2zSQLParser.ROUND_HALF_UP, 0); }
		public TerminalNode ROUND_UP() { return getToken(DB2zSQLParser.ROUND_UP, 0); }
		public TerminalNode ROW() { return getToken(DB2zSQLParser.ROW, 0); }
		public TerminalNode ROWSET() { return getToken(DB2zSQLParser.ROWSET, 0); }
		public TerminalNode RUN() { return getToken(DB2zSQLParser.RUN, 0); }
		public TerminalNode SAVEPOINT() { return getToken(DB2zSQLParser.SAVEPOINT, 0); }
		public TerminalNode SCHEMA() { return getToken(DB2zSQLParser.SCHEMA, 0); }
		public TerminalNode SCRATCHPAD() { return getToken(DB2zSQLParser.SCRATCHPAD, 0); }
		public TerminalNode SECOND() { return getToken(DB2zSQLParser.SECOND, 0); }
		public TerminalNode SECONDS() { return getToken(DB2zSQLParser.SECONDS, 0); }
		public TerminalNode SECQTY() { return getToken(DB2zSQLParser.SECQTY, 0); }
		public TerminalNode SECURITY() { return getToken(DB2zSQLParser.SECURITY, 0); }
		public TerminalNode SELECT() { return getToken(DB2zSQLParser.SELECT, 0); }
		public TerminalNode SENSITIVE() { return getToken(DB2zSQLParser.SENSITIVE, 0); }
		public TerminalNode SEQUENCE() { return getToken(DB2zSQLParser.SEQUENCE, 0); }
		public TerminalNode SESSION_USER() { return getToken(DB2zSQLParser.SESSION_USER, 0); }
		public TerminalNode SET() { return getToken(DB2zSQLParser.SET, 0); }
		public TerminalNode SIGNAL() { return getToken(DB2zSQLParser.SIGNAL, 0); }
		public TerminalNode SIMPLE() { return getToken(DB2zSQLParser.SIMPLE, 0); }
		public TerminalNode SOME() { return getToken(DB2zSQLParser.SOME, 0); }
		public TerminalNode SOURCE() { return getToken(DB2zSQLParser.SOURCE, 0); }
		public TerminalNode SPECIFIC() { return getToken(DB2zSQLParser.SPECIFIC, 0); }
		public TerminalNode STANDARD() { return getToken(DB2zSQLParser.STANDARD, 0); }
		public TerminalNode STATEMENT() { return getToken(DB2zSQLParser.STATEMENT, 0); }
		public TerminalNode STATIC() { return getToken(DB2zSQLParser.STATIC, 0); }
		public TerminalNode STAY() { return getToken(DB2zSQLParser.STAY, 0); }
		public TerminalNode STOGROUP() { return getToken(DB2zSQLParser.STOGROUP, 0); }
		public TerminalNode STORES() { return getToken(DB2zSQLParser.STORES, 0); }
		public TerminalNode STYLE() { return getToken(DB2zSQLParser.STYLE, 0); }
		public TerminalNode SUMMARY() { return getToken(DB2zSQLParser.SUMMARY, 0); }
		public TerminalNode SYNONYM() { return getToken(DB2zSQLParser.SYNONYM, 0); }
		public TerminalNode SYSDATE() { return getToken(DB2zSQLParser.SYSDATE, 0); }
		public TerminalNode SYSTEM() { return getToken(DB2zSQLParser.SYSTEM, 0); }
		public TerminalNode SYSTIMESTAMP() { return getToken(DB2zSQLParser.SYSTIMESTAMP, 0); }
		public TerminalNode TABLE() { return getToken(DB2zSQLParser.TABLE, 0); }
		public TerminalNode TABLESPACE() { return getToken(DB2zSQLParser.TABLESPACE, 0); }
		public TerminalNode THEN() { return getToken(DB2zSQLParser.THEN, 0); }
		public TerminalNode TO() { return getToken(DB2zSQLParser.TO, 0); }
		public TerminalNode TRIGGER() { return getToken(DB2zSQLParser.TRIGGER, 0); }
		public TerminalNode TRUNCATE() { return getToken(DB2zSQLParser.TRUNCATE, 0); }
		public TerminalNode TYPE() { return getToken(DB2zSQLParser.TYPE, 0); }
		public TerminalNode UNDO() { return getToken(DB2zSQLParser.UNDO, 0); }
		public TerminalNode UNION() { return getToken(DB2zSQLParser.UNION, 0); }
		public TerminalNode UNIQUE() { return getToken(DB2zSQLParser.UNIQUE, 0); }
		public TerminalNode UNTIL() { return getToken(DB2zSQLParser.UNTIL, 0); }
		public TerminalNode UPDATE() { return getToken(DB2zSQLParser.UPDATE, 0); }
		public TerminalNode USER() { return getToken(DB2zSQLParser.USER, 0); }
		public TerminalNode USING() { return getToken(DB2zSQLParser.USING, 0); }
		public TerminalNode VALIDPROC() { return getToken(DB2zSQLParser.VALIDPROC, 0); }
		public TerminalNode VALUE() { return getToken(DB2zSQLParser.VALUE, 0); }
		public TerminalNode VALUES() { return getToken(DB2zSQLParser.VALUES, 0); }
		public TerminalNode VARIABLE() { return getToken(DB2zSQLParser.VARIABLE, 0); }
		public TerminalNode VARIANT() { return getToken(DB2zSQLParser.VARIANT, 0); }
		public TerminalNode VCAT() { return getToken(DB2zSQLParser.VCAT, 0); }
		public TerminalNode VERSIONING() { return getToken(DB2zSQLParser.VERSIONING, 0); }
		public TerminalNode VIEW() { return getToken(DB2zSQLParser.VIEW, 0); }
		public TerminalNode VOLATILE() { return getToken(DB2zSQLParser.VOLATILE, 0); }
		public TerminalNode VOLUMES() { return getToken(DB2zSQLParser.VOLUMES, 0); }
		public TerminalNode WHEN() { return getToken(DB2zSQLParser.WHEN, 0); }
		public TerminalNode WHENEVER() { return getToken(DB2zSQLParser.WHENEVER, 0); }
		public TerminalNode WHERE() { return getToken(DB2zSQLParser.WHERE, 0); }
		public TerminalNode WHILE() { return getToken(DB2zSQLParser.WHILE, 0); }
		public TerminalNode WITH() { return getToken(DB2zSQLParser.WITH, 0); }
		public TerminalNode WLM() { return getToken(DB2zSQLParser.WLM, 0); }
		public TerminalNode XMLCAST() { return getToken(DB2zSQLParser.XMLCAST, 0); }
		public TerminalNode XMLEXISTS() { return getToken(DB2zSQLParser.XMLEXISTS, 0); }
		public TerminalNode XMLNAMESPACES() { return getToken(DB2zSQLParser.XMLNAMESPACES, 0); }
		public TerminalNode YEAR() { return getToken(DB2zSQLParser.YEAR, 0); }
		public TerminalNode YEARS() { return getToken(DB2zSQLParser.YEARS, 0); }
		public TerminalNode ZONE() { return getToken(DB2zSQLParser.ZONE, 0); }
		public TerminalNode AND() { return getToken(DB2zSQLParser.AND, 0); }
		public TerminalNode ARRAY_AGG() { return getToken(DB2zSQLParser.ARRAY_AGG, 0); }
		public TerminalNode ASC() { return getToken(DB2zSQLParser.ASC, 0); }
		public TerminalNode AVG() { return getToken(DB2zSQLParser.AVG, 0); }
		public TerminalNode BIT() { return getToken(DB2zSQLParser.BIT, 0); }
		public TerminalNode CHANGE() { return getToken(DB2zSQLParser.CHANGE, 0); }
		public TerminalNode CODEUNITS16() { return getToken(DB2zSQLParser.CODEUNITS16, 0); }
		public TerminalNode CODEUNITS32() { return getToken(DB2zSQLParser.CODEUNITS32, 0); }
		public TerminalNode CORR() { return getToken(DB2zSQLParser.CORR, 0); }
		public TerminalNode CORRELATION() { return getToken(DB2zSQLParser.CORRELATION, 0); }
		public TerminalNode COVAR() { return getToken(DB2zSQLParser.COVAR, 0); }
		public TerminalNode COVARIANCE() { return getToken(DB2zSQLParser.COVARIANCE, 0); }
		public TerminalNode COVARIANCE_SAMP() { return getToken(DB2zSQLParser.COVARIANCE_SAMP, 0); }
		public TerminalNode COVAR_POP() { return getToken(DB2zSQLParser.COVAR_POP, 0); }
		public TerminalNode COVAR_SAMP() { return getToken(DB2zSQLParser.COVAR_SAMP, 0); }
		public TerminalNode CS() { return getToken(DB2zSQLParser.CS, 0); }
		public TerminalNode CUME_DIST() { return getToken(DB2zSQLParser.CUME_DIST, 0); }
		public TerminalNode DENSE_RANK() { return getToken(DB2zSQLParser.DENSE_RANK, 0); }
		public TerminalNode DESC() { return getToken(DB2zSQLParser.DESC, 0); }
		public TerminalNode EBCDIC() { return getToken(DB2zSQLParser.EBCDIC, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(DB2zSQLParser.EXCLUSIVE, 0); }
		public TerminalNode FIRST_VALUE() { return getToken(DB2zSQLParser.FIRST_VALUE, 0); }
		public TerminalNode FOLLOWING() { return getToken(DB2zSQLParser.FOLLOWING, 0); }
		public TerminalNode GROUPING() { return getToken(DB2zSQLParser.GROUPING, 0); }
		public TerminalNode IGNORE() { return getToken(DB2zSQLParser.IGNORE, 0); }
		public TerminalNode INDICATOR() { return getToken(DB2zSQLParser.INDICATOR, 0); }
		public TerminalNode INPUT() { return getToken(DB2zSQLParser.INPUT, 0); }
		public TerminalNode ISNULL() { return getToken(DB2zSQLParser.ISNULL, 0); }
		public TerminalNode LAG() { return getToken(DB2zSQLParser.LAG, 0); }
		public TerminalNode LARGE() { return getToken(DB2zSQLParser.LARGE, 0); }
		public TerminalNode LAST_VALUE() { return getToken(DB2zSQLParser.LAST_VALUE, 0); }
		public TerminalNode LEAD() { return getToken(DB2zSQLParser.LEAD, 0); }
		public TerminalNode LISTAGG() { return getToken(DB2zSQLParser.LISTAGG, 0); }
		public TerminalNode LOCKED() { return getToken(DB2zSQLParser.LOCKED, 0); }
		public TerminalNode LOCKS() { return getToken(DB2zSQLParser.LOCKS, 0); }
		public TerminalNode MEDIAN() { return getToken(DB2zSQLParser.MEDIAN, 0); }
		public TerminalNode MIXED() { return getToken(DB2zSQLParser.MIXED, 0); }
		public TerminalNode NOTNULL() { return getToken(DB2zSQLParser.NOTNULL, 0); }
		public TerminalNode NTH_VALUE() { return getToken(DB2zSQLParser.NTH_VALUE, 0); }
		public TerminalNode NTILE() { return getToken(DB2zSQLParser.NTILE, 0); }
		public TerminalNode NUMERIC() { return getToken(DB2zSQLParser.NUMERIC, 0); }
		public TerminalNode OBJECT() { return getToken(DB2zSQLParser.OBJECT, 0); }
		public TerminalNode OCTETS() { return getToken(DB2zSQLParser.OCTETS, 0); }
		public TerminalNode ONLY() { return getToken(DB2zSQLParser.ONLY, 0); }
		public TerminalNode OVER() { return getToken(DB2zSQLParser.OVER, 0); }
		public TerminalNode PASSING() { return getToken(DB2zSQLParser.PASSING, 0); }
		public TerminalNode PERCENTILE_CONT() { return getToken(DB2zSQLParser.PERCENTILE_CONT, 0); }
		public TerminalNode PERCENTILE_DISC() { return getToken(DB2zSQLParser.PERCENTILE_DISC, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(DB2zSQLParser.PERCENT_RANK, 0); }
		public TerminalNode PRECEDING() { return getToken(DB2zSQLParser.PRECEDING, 0); }
		public TerminalNode PREVIOUS() { return getToken(DB2zSQLParser.PREVIOUS, 0); }
		public TerminalNode RANGE() { return getToken(DB2zSQLParser.RANGE, 0); }
		public TerminalNode RANK() { return getToken(DB2zSQLParser.RANK, 0); }
		public TerminalNode RATIO_TO_REPORT() { return getToken(DB2zSQLParser.RATIO_TO_REPORT, 0); }
		public TerminalNode READ() { return getToken(DB2zSQLParser.READ, 0); }
		public TerminalNode REF() { return getToken(DB2zSQLParser.REF, 0); }
		public TerminalNode REGR_AVGX() { return getToken(DB2zSQLParser.REGR_AVGX, 0); }
		public TerminalNode REGR_AVGY() { return getToken(DB2zSQLParser.REGR_AVGY, 0); }
		public TerminalNode REGR_COUNT() { return getToken(DB2zSQLParser.REGR_COUNT, 0); }
		public TerminalNode REGR_ICPT() { return getToken(DB2zSQLParser.REGR_ICPT, 0); }
		public TerminalNode REGR_INTERCEPT() { return getToken(DB2zSQLParser.REGR_INTERCEPT, 0); }
		public TerminalNode REGR_R2() { return getToken(DB2zSQLParser.REGR_R2, 0); }
		public TerminalNode REGR_SLOPE() { return getToken(DB2zSQLParser.REGR_SLOPE, 0); }
		public TerminalNode REGR_SXX() { return getToken(DB2zSQLParser.REGR_SXX, 0); }
		public TerminalNode REGR_SXY() { return getToken(DB2zSQLParser.REGR_SXY, 0); }
		public TerminalNode REGR_SYY() { return getToken(DB2zSQLParser.REGR_SYY, 0); }
		public TerminalNode RESPECT() { return getToken(DB2zSQLParser.RESPECT, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(DB2zSQLParser.ROW_NUMBER, 0); }
		public TerminalNode ROWS() { return getToken(DB2zSQLParser.ROWS, 0); }
		public TerminalNode RR() { return getToken(DB2zSQLParser.RR, 0); }
		public TerminalNode RS() { return getToken(DB2zSQLParser.RS, 0); }
		public TerminalNode SBCS() { return getToken(DB2zSQLParser.SBCS, 0); }
		public TerminalNode SELECTIVITY() { return getToken(DB2zSQLParser.SELECTIVITY, 0); }
		public TerminalNode SETS() { return getToken(DB2zSQLParser.SETS, 0); }
		public TerminalNode SHARE() { return getToken(DB2zSQLParser.SHARE, 0); }
		public TerminalNode SKIP_() { return getToken(DB2zSQLParser.SKIP_, 0); }
		public TerminalNode STDDEV() { return getToken(DB2zSQLParser.STDDEV, 0); }
		public TerminalNode STDDEV_POP() { return getToken(DB2zSQLParser.STDDEV_POP, 0); }
		public TerminalNode STDDEV_SAMP() { return getToken(DB2zSQLParser.STDDEV_SAMP, 0); }
		public TerminalNode SUM() { return getToken(DB2zSQLParser.SUM, 0); }
		public TerminalNode TOKEN() { return getToken(DB2zSQLParser.TOKEN, 0); }
		public TerminalNode UNBOUNDED() { return getToken(DB2zSQLParser.UNBOUNDED, 0); }
		public TerminalNode UNPACK() { return getToken(DB2zSQLParser.UNPACK, 0); }
		public TerminalNode UR() { return getToken(DB2zSQLParser.UR, 0); }
		public TerminalNode USE() { return getToken(DB2zSQLParser.USE, 0); }
		public TerminalNode VAR() { return getToken(DB2zSQLParser.VAR, 0); }
		public TerminalNode VARIANCE() { return getToken(DB2zSQLParser.VARIANCE, 0); }
		public TerminalNode VARIANCE_SAMP() { return getToken(DB2zSQLParser.VARIANCE_SAMP, 0); }
		public TerminalNode VAR_POP() { return getToken(DB2zSQLParser.VAR_POP, 0); }
		public TerminalNode VAR_SAMP() { return getToken(DB2zSQLParser.VAR_SAMP, 0); }
		public TerminalNode VARYING() { return getToken(DB2zSQLParser.VARYING, 0); }
		public TerminalNode WITHOUT() { return getToken(DB2zSQLParser.WITHOUT, 0); }
		public TerminalNode XML() { return getToken(DB2zSQLParser.XML, 0); }
		public TerminalNode XMLAGG() { return getToken(DB2zSQLParser.XMLAGG, 0); }
		public TerminalNode COLUMNS() { return getToken(DB2zSQLParser.COLUMNS, 0); }
		public TerminalNode SQLID() { return getToken(DB2zSQLParser.SQLID, 0); }
		public TerminalNode ORDINALITY() { return getToken(DB2zSQLParser.ORDINALITY, 0); }
		public TerminalNode SYSTEM_TIME() { return getToken(DB2zSQLParser.SYSTEM_TIME, 0); }
		public TerminalNode BUSINESS_TIME() { return getToken(DB2zSQLParser.BUSINESS_TIME, 0); }
		public TerminalNode MULTIPLIER() { return getToken(DB2zSQLParser.MULTIPLIER, 0); }
		public TerminalNode UNNEST() { return getToken(DB2zSQLParser.UNNEST, 0); }
		public TerminalNode CROSS() { return getToken(DB2zSQLParser.CROSS, 0); }
		public TerminalNode CALLER() { return getToken(DB2zSQLParser.CALLER, 0); }
		public TerminalNode CLIENT() { return getToken(DB2zSQLParser.CLIENT, 0); }
		public TerminalNode POSITIONING() { return getToken(DB2zSQLParser.POSITIONING, 0); }
		public TerminalNode SCROLL() { return getToken(DB2zSQLParser.SCROLL, 0); }
		public TerminalNode ALTER() { return getToken(DB2zSQLParser.ALTER, 0); }
		public TerminalNode INDEXBP() { return getToken(DB2zSQLParser.INDEXBP, 0); }
		public TerminalNode ACTION() { return getToken(DB2zSQLParser.ACTION, 0); }
		public TerminalNode ASSEMBLE() { return getToken(DB2zSQLParser.ASSEMBLE, 0); }
		public TerminalNode C_() { return getToken(DB2zSQLParser.C_, 0); }
		public TerminalNode CALLED() { return getToken(DB2zSQLParser.CALLED, 0); }
		public TerminalNode COBOL() { return getToken(DB2zSQLParser.COBOL, 0); }
		public TerminalNode DB2() { return getToken(DB2zSQLParser.DB2, 0); }
		public TerminalNode DEFINER() { return getToken(DB2zSQLParser.DEFINER, 0); }
		public TerminalNode DISPATCH() { return getToken(DB2zSQLParser.DISPATCH, 0); }
		public TerminalNode ENVIRONMENT() { return getToken(DB2zSQLParser.ENVIRONMENT, 0); }
		public TerminalNode FAILURE() { return getToken(DB2zSQLParser.FAILURE, 0); }
		public TerminalNode FAILURES() { return getToken(DB2zSQLParser.FAILURES, 0); }
		public TerminalNode JAVA() { return getToken(DB2zSQLParser.JAVA, 0); }
		public TerminalNode MAIN() { return getToken(DB2zSQLParser.MAIN, 0); }
		public TerminalNode NAME() { return getToken(DB2zSQLParser.NAME, 0); }
		public TerminalNode OPTIONS() { return getToken(DB2zSQLParser.OPTIONS, 0); }
		public TerminalNode PARALLEL() { return getToken(DB2zSQLParser.PARALLEL, 0); }
		public TerminalNode PLI() { return getToken(DB2zSQLParser.PLI, 0); }
		public TerminalNode REGISTERS() { return getToken(DB2zSQLParser.REGISTERS, 0); }
		public TerminalNode RESIDENT() { return getToken(DB2zSQLParser.RESIDENT, 0); }
		public TerminalNode SECURED() { return getToken(DB2zSQLParser.SECURED, 0); }
		public TerminalNode SPECIAL() { return getToken(DB2zSQLParser.SPECIAL, 0); }
		public TerminalNode SQL() { return getToken(DB2zSQLParser.SQL, 0); }
		public TerminalNode STOP() { return getToken(DB2zSQLParser.STOP, 0); }
		public TerminalNode SUB() { return getToken(DB2zSQLParser.SUB, 0); }
		public TerminalNode YES() { return getToken(DB2zSQLParser.YES, 0); }
		public TerminalNode APPLICATION() { return getToken(DB2zSQLParser.APPLICATION, 0); }
		public TerminalNode CHANGED() { return getToken(DB2zSQLParser.CHANGED, 0); }
		public TerminalNode COMPATIBILITY() { return getToken(DB2zSQLParser.COMPATIBILITY, 0); }
		public TerminalNode COMPRESS() { return getToken(DB2zSQLParser.COMPRESS, 0); }
		public TerminalNode COPY() { return getToken(DB2zSQLParser.COPY, 0); }
		public TerminalNode FREEPAGE() { return getToken(DB2zSQLParser.FREEPAGE, 0); }
		public TerminalNode GBPCACHE() { return getToken(DB2zSQLParser.GBPCACHE, 0); }
		public TerminalNode INCLUDE() { return getToken(DB2zSQLParser.INCLUDE, 0); }
		public TerminalNode MAXVALUE() { return getToken(DB2zSQLParser.MAXVALUE, 0); }
		public TerminalNode MINVALUE() { return getToken(DB2zSQLParser.MINVALUE, 0); }
		public TerminalNode PCTFREE() { return getToken(DB2zSQLParser.PCTFREE, 0); }
		public TerminalNode REGENERATE() { return getToken(DB2zSQLParser.REGENERATE, 0); }
		public TerminalNode MASK() { return getToken(DB2zSQLParser.MASK, 0); }
		public TerminalNode ENABLE() { return getToken(DB2zSQLParser.ENABLE, 0); }
		public TerminalNode PERMISSION() { return getToken(DB2zSQLParser.PERMISSION, 0); }
		public TerminalNode ATOMIC() { return getToken(DB2zSQLParser.ATOMIC, 0); }
		public TerminalNode SQLEXCEPTION() { return getToken(DB2zSQLParser.SQLEXCEPTION, 0); }
		public TerminalNode MERGE() { return getToken(DB2zSQLParser.MERGE, 0); }
		public TerminalNode MATCHED() { return getToken(DB2zSQLParser.MATCHED, 0); }
		public TerminalNode SQLSTATE() { return getToken(DB2zSQLParser.SQLSTATE, 0); }
		public TerminalNode MESSAGE_TEXT() { return getToken(DB2zSQLParser.MESSAGE_TEXT, 0); }
		public TerminalNode OVERRIDING() { return getToken(DB2zSQLParser.OVERRIDING, 0); }
		public TerminalNode PORTION() { return getToken(DB2zSQLParser.PORTION, 0); }
		public TerminalNode DB2SQL() { return getToken(DB2zSQLParser.DB2SQL, 0); }
		public TerminalNode DEBUG() { return getToken(DB2zSQLParser.DEBUG, 0); }
		public TerminalNode GENERAL() { return getToken(DB2zSQLParser.GENERAL, 0); }
		public TerminalNode MODE_() { return getToken(DB2zSQLParser.MODE_, 0); }
		public TerminalNode REXX() { return getToken(DB2zSQLParser.REXX, 0); }
		public TerminalNode CACHE() { return getToken(DB2zSQLParser.CACHE, 0); }
		public TerminalNode CYCLE() { return getToken(DB2zSQLParser.CYCLE, 0); }
		public TerminalNode INCREMENT() { return getToken(DB2zSQLParser.INCREMENT, 0); }
		public TerminalNode RESTART() { return getToken(DB2zSQLParser.RESTART, 0); }
		public TerminalNode DATACLAS() { return getToken(DB2zSQLParser.DATACLAS, 0); }
		public TerminalNode MGMTCLAS() { return getToken(DB2zSQLParser.MGMTCLAS, 0); }
		public TerminalNode REMOVE() { return getToken(DB2zSQLParser.REMOVE, 0); }
		public TerminalNode STORCLAS() { return getToken(DB2zSQLParser.STORCLAS, 0); }
		public TerminalNode ACCESS() { return getToken(DB2zSQLParser.ACCESS, 0); }
		public TerminalNode ACTIVATE() { return getToken(DB2zSQLParser.ACTIVATE, 0); }
		public TerminalNode ALWAYS() { return getToken(DB2zSQLParser.ALWAYS, 0); }
		public TerminalNode APPEND() { return getToken(DB2zSQLParser.APPEND, 0); }
		public TerminalNode ARCHIVE() { return getToken(DB2zSQLParser.ARCHIVE, 0); }
		public TerminalNode BUSINESS() { return getToken(DB2zSQLParser.BUSINESS, 0); }
		public TerminalNode CASCADE() { return getToken(DB2zSQLParser.CASCADE, 0); }
		public TerminalNode CHANGES() { return getToken(DB2zSQLParser.CHANGES, 0); }
		public TerminalNode CONTROL() { return getToken(DB2zSQLParser.CONTROL, 0); }
		public TerminalNode DEACTIVATE() { return getToken(DB2zSQLParser.DEACTIVATE, 0); }
		public TerminalNode DEFERRED() { return getToken(DB2zSQLParser.DEFERRED, 0); }
		public TerminalNode EACH() { return getToken(DB2zSQLParser.EACH, 0); }
		public TerminalNode ENFORCED() { return getToken(DB2zSQLParser.ENFORCED, 0); }
		public TerminalNode EXTRA() { return getToken(DB2zSQLParser.EXTRA, 0); }
		public TerminalNode FOREIGN() { return getToken(DB2zSQLParser.FOREIGN, 0); }
		public TerminalNode HIDDEN_() { return getToken(DB2zSQLParser.HIDDEN_, 0); }
		public TerminalNode HISTORY() { return getToken(DB2zSQLParser.HISTORY, 0); }
		public TerminalNode ID() { return getToken(DB2zSQLParser.ID, 0); }
		public TerminalNode IDENTITY() { return getToken(DB2zSQLParser.IDENTITY, 0); }
		public TerminalNode IMPLICITLY() { return getToken(DB2zSQLParser.IMPLICITLY, 0); }
		public TerminalNode INITIALLY() { return getToken(DB2zSQLParser.INITIALLY, 0); }
		public TerminalNode INLINE() { return getToken(DB2zSQLParser.INLINE, 0); }
		public TerminalNode OPERATION() { return getToken(DB2zSQLParser.OPERATION, 0); }
		public TerminalNode ORGANIZE() { return getToken(DB2zSQLParser.ORGANIZE, 0); }
		public TerminalNode OVERLAPS() { return getToken(DB2zSQLParser.OVERLAPS, 0); }
		public TerminalNode PACKAGE_NAME() { return getToken(DB2zSQLParser.PACKAGE_NAME, 0); }
		public TerminalNode PACKAGE_SCHEMA() { return getToken(DB2zSQLParser.PACKAGE_SCHEMA, 0); }
		public TerminalNode PACKAGE_VERSION() { return getToken(DB2zSQLParser.PACKAGE_VERSION, 0); }
		public TerminalNode PRIMARY() { return getToken(DB2zSQLParser.PRIMARY, 0); }
		public TerminalNode RESET() { return getToken(DB2zSQLParser.RESET, 0); }
		public TerminalNode ROTATE() { return getToken(DB2zSQLParser.ROTATE, 0); }
		public TerminalNode START() { return getToken(DB2zSQLParser.START, 0); }
		public TerminalNode SYSIBM() { return getToken(DB2zSQLParser.SYSIBM, 0); }
		public TerminalNode TRANSACTION() { return getToken(DB2zSQLParser.TRANSACTION, 0); }
		public TerminalNode XMLSCHEMA() { return getToken(DB2zSQLParser.XMLSCHEMA, 0); }
		public TerminalNode ELEMENT() { return getToken(DB2zSQLParser.ELEMENT, 0); }
		public TerminalNode URL() { return getToken(DB2zSQLParser.URL, 0); }
		public TerminalNode NAMESPACE() { return getToken(DB2zSQLParser.NAMESPACE, 0); }
		public TerminalNode LOCATION() { return getToken(DB2zSQLParser.LOCATION, 0); }
		public TerminalNode SYSXSR() { return getToken(DB2zSQLParser.SYSXSR, 0); }
		public TerminalNode ALGORITHM() { return getToken(DB2zSQLParser.ALGORITHM, 0); }
		public TerminalNode FIXEDLENGTH() { return getToken(DB2zSQLParser.FIXEDLENGTH, 0); }
		public TerminalNode HUFFMAN() { return getToken(DB2zSQLParser.HUFFMAN, 0); }
		public TerminalNode LOB() { return getToken(DB2zSQLParser.LOB, 0); }
		public TerminalNode LOG() { return getToken(DB2zSQLParser.LOG, 0); }
		public TerminalNode LOGGED() { return getToken(DB2zSQLParser.LOGGED, 0); }
		public TerminalNode MAXPARTITIONS() { return getToken(DB2zSQLParser.MAXPARTITIONS, 0); }
		public TerminalNode MAXROWS() { return getToken(DB2zSQLParser.MAXROWS, 0); }
		public TerminalNode MEMBER() { return getToken(DB2zSQLParser.MEMBER, 0); }
		public TerminalNode MOVE() { return getToken(DB2zSQLParser.MOVE, 0); }
		public TerminalNode PAGE() { return getToken(DB2zSQLParser.PAGE, 0); }
		public TerminalNode PAGENUM() { return getToken(DB2zSQLParser.PAGENUM, 0); }
		public TerminalNode PENDING() { return getToken(DB2zSQLParser.PENDING, 0); }
		public TerminalNode RELATIVE() { return getToken(DB2zSQLParser.RELATIVE, 0); }
		public TerminalNode SEGSIZE() { return getToken(DB2zSQLParser.SEGSIZE, 0); }
		public TerminalNode TRACKMOD() { return getToken(DB2zSQLParser.TRACKMOD, 0); }
		public TerminalNode ADDRESS() { return getToken(DB2zSQLParser.ADDRESS, 0); }
		public TerminalNode ATTRIBUTES() { return getToken(DB2zSQLParser.ATTRIBUTES, 0); }
		public TerminalNode AUTHENTICATION() { return getToken(DB2zSQLParser.AUTHENTICATION, 0); }
		public TerminalNode AUTHID() { return getToken(DB2zSQLParser.AUTHID, 0); }
		public TerminalNode CONTEXT() { return getToken(DB2zSQLParser.CONTEXT, 0); }
		public TerminalNode JOBNAME() { return getToken(DB2zSQLParser.JOBNAME, 0); }
		public TerminalNode OWNER() { return getToken(DB2zSQLParser.OWNER, 0); }
		public TerminalNode PROFILE() { return getToken(DB2zSQLParser.PROFILE, 0); }
		public TerminalNode QUALIFIER() { return getToken(DB2zSQLParser.QUALIFIER, 0); }
		public TerminalNode SERVAUTH() { return getToken(DB2zSQLParser.SERVAUTH, 0); }
		public TerminalNode TRUSTED() { return getToken(DB2zSQLParser.TRUSTED, 0); }
		public TerminalNode SECTION() { return getToken(DB2zSQLParser.SECTION, 0); }
		public TerminalNode ACTIVE() { return getToken(DB2zSQLParser.ACTIVE, 0); }
		public TerminalNode VERSION() { return getToken(DB2zSQLParser.VERSION, 0); }
		public TerminalNode ALIAS() { return getToken(DB2zSQLParser.ALIAS, 0); }
		public TerminalNode WORK() { return getToken(DB2zSQLParser.WORK, 0); }
		public TerminalNode WORKFILE() { return getToken(DB2zSQLParser.WORKFILE, 0); }
		public TerminalNode SYSDEFLT() { return getToken(DB2zSQLParser.SYSDEFLT, 0); }
		public TerminalNode NULTERM() { return getToken(DB2zSQLParser.NULTERM, 0); }
		public TerminalNode STRUCTURE() { return getToken(DB2zSQLParser.STRUCTURE, 0); }
		public TerminalNode GENERIC() { return getToken(DB2zSQLParser.GENERIC, 0); }
		public SqlKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).enterSqlKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zSQLParserListener ) ((DB2zSQLParserListener)listener).exitSqlKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zSQLParserVisitor ) return ((DB2zSQLParserVisitor<? extends T>)visitor).visitSqlKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SqlKeywordContext sqlKeyword() throws RecognitionException {
		SqlKeywordContext _localctx = new SqlKeywordContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_sqlKeyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6176);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << ALL) | (1L << ALLOCATE) | (1L << ALLOW) | (1L << ALTER) | (1L << ALTERAND) | (1L << ANY) | (1L << ARRAY) | (1L << ARRAY_EXISTS) | (1L << AS) | (1L << ASENSITIVE) | (1L << ASSOCIATE) | (1L << ASUTIME) | (1L << AT) | (1L << AUDIT) | (1L << AUX) | (1L << AUXILIARY) | (1L << BEFORE) | (1L << BEGIN) | (1L << BETWEEN) | (1L << BUFFERPOOL) | (1L << BY) | (1L << CALL) | (1L << CAPTURE) | (1L << CASCADED) | (1L << CASE) | (1L << CAST) | (1L << CCSID) | (1L << CHAR) | (1L << CHARACTER) | (1L << CHECK) | (1L << CLONE) | (1L << CLOSE) | (1L << CLUSTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLLECTION - 64)) | (1L << (COLLID - 64)) | (1L << (COLUMN - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (CONCAT - 64)) | (1L << (CONDITION - 64)) | (1L << (CONNECT - 64)) | (1L << (CONNECTION - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONTAINS - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CREATE - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT - 64)) | (1L << (CURRENT_LC_CTYPE - 64)) | (1L << (CURRVAL - 64)) | (1L << (CURSOR - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DAYS - 64)) | (1L << (DBINFO - 64)) | (1L << (DECLARE - 64)) | (1L << (DEFAULT - 64)) | (1L << (DELETE - 64)) | (1L << (DESCRIPTOR - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DISABLE - 64)) | (1L << (DISALLOW - 64)) | (1L << (DISTINCT - 64)) | (1L << (DO - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (DSSIZE - 64)) | (1L << (DYNAMIC - 64)) | (1L << (EDITPROC - 64)) | (1L << (ELSE - 64)) | (1L << (ELSEIF - 64)) | (1L << (ENCODING - 64)) | (1L << (ENCRYPTION - 64)) | (1L << (END - 64)) | (1L << (END_EXEC - 64)) | (1L << (ENDING - 64)) | (1L << (ERASE - 64)) | (1L << (ESCAPE - 64)) | (1L << (EXCEPT - 64)) | (1L << (EXCEPTION - 64)) | (1L << (EXEC_SQL - 64)) | (1L << (EXECUTE - 64)) | (1L << (EXISTS - 64)) | (1L << (EXIT - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FENCED - 64)) | (1L << (FETCH - 64)) | (1L << (FIELDPROC - 64)) | (1L << (FINAL - 64)) | (1L << (FIRST - 64)) | (1L << (FOR - 64)) | (1L << (FREE - 64)) | (1L << (FROM - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GENERATED - 128)) | (1L << (GET - 128)) | (1L << (GLOBAL - 128)) | (1L << (GO - 128)) | (1L << (GOTO - 128)) | (1L << (GRANT - 128)) | (1L << (GROUP - 128)) | (1L << (HANDLER - 128)) | (1L << (HAVING - 128)) | (1L << (HOLD - 128)) | (1L << (HOUR - 128)) | (1L << (HOURS - 128)) | (1L << (IF - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (IN - 128)) | (1L << (INCLUSIVE - 128)) | (1L << (INDEX - 128)) | (1L << (INDEXBP - 128)) | (1L << (INHERIT - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSENSITIVE - 128)) | (1L << (INSERT - 128)) | (1L << (INTERSECT - 128)) | (1L << (INTO - 128)) | (1L << (IS - 128)) | (1L << (ISOBID - 128)) | (1L << (ITERATE - 128)) | (1L << (JAR - 128)) | (1L << (JOIN - 128)) | (1L << (KEEP - 128)) | (1L << (KEY - 128)) | (1L << (LABEL - 128)) | (1L << (LANGUAGE - 128)) | (1L << (LAST - 128)) | (1L << (LC_CTYPE - 128)) | (1L << (LEAVE - 128)) | (1L << (LEFT - 128)) | (1L << (LIKE - 128)) | (1L << (LIMIT - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCALE - 128)) | (1L << (LOCATOR - 128)) | (1L << (LOCATORS - 128)) | (1L << (LOCK - 128)) | (1L << (LOCKMAX - 128)) | (1L << (LOCKSIZE - 128)) | (1L << (LONG - 128)) | (1L << (LOOP - 128)) | (1L << (MAINTAINED - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MICROSECOND - 128)) | (1L << (MICROSECONDS - 128)) | (1L << (MODIFIES - 128)) | (1L << (MONTH - 128)) | (1L << (MONTHS - 128)) | (1L << (NEXT - 128)) | (1L << (NEXTVAL - 128)) | (1L << (NO - 128)) | (1L << (NONE - 128)) | (1L << (NOT - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (NULL - 192)) | (1L << (NULLS - 192)) | (1L << (NUMPARTS - 192)) | (1L << (OBID - 192)) | (1L << (OF - 192)) | (1L << (OFFSET - 192)) | (1L << (OLD - 192)) | (1L << (ON - 192)) | (1L << (OPEN - 192)) | (1L << (OPTIMIZATION - 192)) | (1L << (OPTIMIZE - 192)) | (1L << (OR - 192)) | (1L << (ORDER - 192)) | (1L << (ORGANIZATION - 192)) | (1L << (OUT - 192)) | (1L << (OUTER - 192)) | (1L << (PACKAGE - 192)) | (1L << (PADDED - 192)) | (1L << (PARAMETER - 192)) | (1L << (PART - 192)) | (1L << (PARTITION - 192)) | (1L << (PARTITIONED - 192)) | (1L << (PARTITIONING - 192)) | (1L << (PATH - 192)) | (1L << (PERIOD - 192)) | (1L << (PIECESIZE - 192)) | (1L << (PLAN - 192)) | (1L << (PRECISION - 192)) | (1L << (PREPARE - 192)) | (1L << (PREVVAL - 192)) | (1L << (PRIOR - 192)) | (1L << (PRIQTY - 192)) | (1L << (PRIVILEGES - 192)) | (1L << (PROCEDURE - 192)) | (1L << (PROGRAM - 192)) | (1L << (PSID - 192)) | (1L << (PUBLIC - 192)) | (1L << (QUERY - 192)) | (1L << (QUERYNO - 192)) | (1L << (READS - 192)) | (1L << (REFERENCES - 192)) | (1L << (REFRESH - 192)) | (1L << (RELEASE - 192)) | (1L << (RENAME - 192)) | (1L << (REPEAT - 192)) | (1L << (RESIGNAL - 192)) | (1L << (RESTRICT - 192)) | (1L << (RESULT - 192)) | (1L << (RESULT_SET_LOCATOR - 192)) | (1L << (RETURN - 192)) | (1L << (RETURNS - 192)) | (1L << (REVOKE - 192)) | (1L << (RIGHT - 192)) | (1L << (ROLE - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROLLUP - 192)) | (1L << (ROUND_CEILING - 192)) | (1L << (ROUND_DOWN - 192)) | (1L << (ROUND_FLOOR - 192)) | (1L << (ROUND_HALF_DOWN - 192)) | (1L << (ROUND_HALF_EVEN - 192)) | (1L << (ROUND_HALF_UP - 192)) | (1L << (ROUND_UP - 192)) | (1L << (ROW - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (ROWSET - 256)) | (1L << (RUN - 256)) | (1L << (SAVEPOINT - 256)) | (1L << (SCHEMA - 256)) | (1L << (SCRATCHPAD - 256)) | (1L << (SECOND - 256)) | (1L << (SECONDS - 256)) | (1L << (SECQTY - 256)) | (1L << (SECURITY - 256)) | (1L << (SELECT - 256)) | (1L << (SENSITIVE - 256)) | (1L << (SEQUENCE - 256)) | (1L << (SET - 256)) | (1L << (SIGNAL - 256)) | (1L << (SIMPLE - 256)) | (1L << (SOME - 256)) | (1L << (SOURCE - 256)) | (1L << (SPECIFIC - 256)) | (1L << (STANDARD - 256)) | (1L << (STATEMENT - 256)) | (1L << (STATIC - 256)) | (1L << (STAY - 256)) | (1L << (STOGROUP - 256)) | (1L << (STORES - 256)) | (1L << (STYLE - 256)) | (1L << (SUMMARY - 256)) | (1L << (SYNONYM - 256)) | (1L << (SYSDATE - 256)) | (1L << (SYSTEM - 256)) | (1L << (SYSTIMESTAMP - 256)) | (1L << (TABLE - 256)) | (1L << (TABLESPACE - 256)) | (1L << (THEN - 256)) | (1L << (TO - 256)) | (1L << (TRIGGER - 256)) | (1L << (TRUNCATE - 256)) | (1L << (TYPE - 256)) | (1L << (UNDO - 256)) | (1L << (UNION - 256)) | (1L << (UNIQUE - 256)) | (1L << (UNTIL - 256)) | (1L << (UPDATE - 256)) | (1L << (USING - 256)) | (1L << (VALIDPROC - 256)) | (1L << (VALUE - 256)) | (1L << (VALUES - 256)) | (1L << (VARIABLE - 256)) | (1L << (VARIANT - 256)) | (1L << (VCAT - 256)) | (1L << (VERSIONING - 256)) | (1L << (VIEW - 256)) | (1L << (VOLATILE - 256)) | (1L << (VOLUMES - 256)) | (1L << (WHEN - 256)) | (1L << (WHENEVER - 256)) | (1L << (WHERE - 256)) | (1L << (WHILE - 256)) | (1L << (WITH - 256)) | (1L << (WLM - 256)) | (1L << (XMLCAST - 256)) | (1L << (XMLEXISTS - 256)) | (1L << (XMLNAMESPACES - 256)) | (1L << (YEAR - 256)) | (1L << (YEARS - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (ZONE - 320)) | (1L << (AND - 320)) | (1L << (ARRAY_AGG - 320)) | (1L << (ASC - 320)) | (1L << (AVG - 320)) | (1L << (BIT - 320)) | (1L << (CHANGE - 320)) | (1L << (CODEUNITS16 - 320)) | (1L << (CODEUNITS32 - 320)) | (1L << (CORR - 320)) | (1L << (CORRELATION - 320)) | (1L << (COVAR - 320)) | (1L << (COVARIANCE - 320)) | (1L << (COVARIANCE_SAMP - 320)) | (1L << (COVAR_POP - 320)) | (1L << (COVAR_SAMP - 320)) | (1L << (CS - 320)) | (1L << (CUME_DIST - 320)) | (1L << (DENSE_RANK - 320)) | (1L << (DESC - 320)) | (1L << (EBCDIC - 320)) | (1L << (EXCLUSIVE - 320)) | (1L << (FIRST_VALUE - 320)) | (1L << (FOLLOWING - 320)) | (1L << (GROUPING - 320)) | (1L << (IGNORE - 320)) | (1L << (INDICATOR - 320)) | (1L << (INPUT - 320)) | (1L << (ISNULL - 320)) | (1L << (LAG - 320)) | (1L << (LARGE - 320)) | (1L << (LAST_VALUE - 320)) | (1L << (LEAD - 320)) | (1L << (LISTAGG - 320)) | (1L << (LOCKED - 320)) | (1L << (LOCKS - 320)) | (1L << (MEDIAN - 320)) | (1L << (MINUTES - 320)) | (1L << (MIXED - 320)) | (1L << (NOTNULL - 320)) | (1L << (NTH_VALUE - 320)) | (1L << (NTILE - 320)) | (1L << (NUMERIC - 320)) | (1L << (OBJECT - 320)) | (1L << (OCTETS - 320)) | (1L << (ONLY - 320)) | (1L << (OVER - 320)) | (1L << (PASSING - 320)) | (1L << (PERCENTILE_CONT - 320)) | (1L << (PERCENTILE_DISC - 320)) | (1L << (PERCENT_RANK - 320)) | (1L << (PRECEDING - 320)) | (1L << (PREVIOUS - 320)) | (1L << (RANGE - 320)) | (1L << (RANK - 320)) | (1L << (RATIO_TO_REPORT - 320)) | (1L << (READ - 320)) | (1L << (REF - 320)) | (1L << (REGR_AVGX - 320)) | (1L << (REGR_AVGY - 320)) | (1L << (REGR_COUNT - 320)) | (1L << (REGR_ICPT - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (REGR_INTERCEPT - 384)) | (1L << (REGR_R2 - 384)) | (1L << (REGR_SLOPE - 384)) | (1L << (REGR_SXX - 384)) | (1L << (REGR_SXY - 384)) | (1L << (REGR_SYY - 384)) | (1L << (RESPECT - 384)) | (1L << (ROW_NUMBER - 384)) | (1L << (ROWS - 384)) | (1L << (RR - 384)) | (1L << (RS - 384)) | (1L << (SBCS - 384)) | (1L << (SELECTIVITY - 384)) | (1L << (SETS - 384)) | (1L << (SHARE - 384)) | (1L << (SKIP_ - 384)) | (1L << (STDDEV - 384)) | (1L << (STDDEV_POP - 384)) | (1L << (STDDEV_SAMP - 384)) | (1L << (SUM - 384)) | (1L << (TOKEN - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNPACK - 384)) | (1L << (UR - 384)) | (1L << (USE - 384)) | (1L << (VAR - 384)) | (1L << (VARIANCE - 384)) | (1L << (VARIANCE_SAMP - 384)) | (1L << (VAR_POP - 384)) | (1L << (VAR_SAMP - 384)) | (1L << (VARYING - 384)) | (1L << (WITHOUT - 384)) | (1L << (XML - 384)) | (1L << (XMLAGG - 384)) | (1L << (COLUMNS - 384)) | (1L << (SQLID - 384)) | (1L << (ORDINALITY - 384)) | (1L << (SYSTEM_TIME - 384)) | (1L << (BUSINESS_TIME - 384)) | (1L << (MULTIPLIER - 384)) | (1L << (UNNEST - 384)) | (1L << (CROSS - 384)) | (1L << (CALLER - 384)) | (1L << (CLIENT - 384)) | (1L << (POSITIONING - 384)) | (1L << (SCROLL - 384)) | (1L << (ACTION - 384)) | (1L << (ASSEMBLE - 384)) | (1L << (C_ - 384)) | (1L << (CALLED - 384)) | (1L << (COBOL - 384)) | (1L << (DB2 - 384)) | (1L << (DEFINER - 384)) | (1L << (DISPATCH - 384)) | (1L << (ENVIRONMENT - 384)) | (1L << (FAILURE - 384)) | (1L << (FAILURES - 384)) | (1L << (JAVA - 384)) | (1L << (MAIN - 384)) | (1L << (NAME - 384)) | (1L << (OPTIONS - 384)) | (1L << (PARALLEL - 384)) | (1L << (PLI - 384)) | (1L << (REGISTERS - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (RESIDENT - 448)) | (1L << (SECURED - 448)) | (1L << (SPECIAL - 448)) | (1L << (SQL - 448)) | (1L << (STOP - 448)) | (1L << (SUB - 448)) | (1L << (YES - 448)) | (1L << (APPLICATION - 448)) | (1L << (CHANGED - 448)) | (1L << (COMPATIBILITY - 448)) | (1L << (COMPRESS - 448)) | (1L << (COPY - 448)) | (1L << (FREEPAGE - 448)) | (1L << (GBPCACHE - 448)) | (1L << (INCLUDE - 448)) | (1L << (MAXVALUE - 448)) | (1L << (MINVALUE - 448)) | (1L << (PCTFREE - 448)) | (1L << (REGENERATE - 448)) | (1L << (MASK - 448)) | (1L << (ENABLE - 448)) | (1L << (PERMISSION - 448)) | (1L << (ATOMIC - 448)) | (1L << (SQLEXCEPTION - 448)) | (1L << (MERGE - 448)) | (1L << (MATCHED - 448)) | (1L << (SQLSTATE - 448)) | (1L << (MESSAGE_TEXT - 448)) | (1L << (OVERRIDING - 448)) | (1L << (PORTION - 448)) | (1L << (DB2SQL - 448)) | (1L << (DEBUG - 448)) | (1L << (GENERAL - 448)) | (1L << (MODE_ - 448)) | (1L << (REXX - 448)) | (1L << (CACHE - 448)) | (1L << (CYCLE - 448)) | (1L << (INCREMENT - 448)) | (1L << (RESTART - 448)) | (1L << (DATACLAS - 448)) | (1L << (MGMTCLAS - 448)) | (1L << (REMOVE - 448)) | (1L << (STORCLAS - 448)) | (1L << (ACCESS - 448)) | (1L << (ACTIVATE - 448)) | (1L << (ALWAYS - 448)) | (1L << (APPEND - 448)) | (1L << (ARCHIVE - 448)) | (1L << (BUSINESS - 448)) | (1L << (CASCADE - 448)) | (1L << (CHANGES - 448)) | (1L << (CONTROL - 448)) | (1L << (DEACTIVATE - 448)) | (1L << (DEFERRED - 448)) | (1L << (EACH - 448)) | (1L << (ENFORCED - 448)) | (1L << (EXTRA - 448)) | (1L << (FOREIGN - 448)) | (1L << (HIDDEN_ - 448)) | (1L << (HISTORY - 448)) | (1L << (ID - 448)) | (1L << (IDENTITY - 448)) | (1L << (IMPLICITLY - 448)) | (1L << (INITIALLY - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (INLINE - 512)) | (1L << (OPERATION - 512)) | (1L << (ORGANIZE - 512)) | (1L << (OVERLAPS - 512)) | (1L << (PACKAGE_NAME - 512)) | (1L << (PACKAGE_SCHEMA - 512)) | (1L << (PACKAGE_VERSION - 512)) | (1L << (PRIMARY - 512)) | (1L << (RESET - 512)) | (1L << (ROTATE - 512)) | (1L << (START - 512)) | (1L << (SYSIBM - 512)) | (1L << (TRANSACTION - 512)) | (1L << (XMLSCHEMA - 512)) | (1L << (ELEMENT - 512)) | (1L << (URL - 512)) | (1L << (NAMESPACE - 512)) | (1L << (LOCATION - 512)) | (1L << (SYSXSR - 512)) | (1L << (ALGORITHM - 512)) | (1L << (FIXEDLENGTH - 512)) | (1L << (HUFFMAN - 512)) | (1L << (LOB - 512)) | (1L << (LOG - 512)) | (1L << (LOGGED - 512)) | (1L << (MAXPARTITIONS - 512)) | (1L << (MAXROWS - 512)) | (1L << (MEMBER - 512)) | (1L << (MOVE - 512)) | (1L << (PAGE - 512)) | (1L << (PAGENUM - 512)) | (1L << (PENDING - 512)) | (1L << (RELATIVE - 512)) | (1L << (SEGSIZE - 512)) | (1L << (TRACKMOD - 512)) | (1L << (ADDRESS - 512)) | (1L << (ATTRIBUTES - 512)) | (1L << (AUTHENTICATION - 512)) | (1L << (AUTHID - 512)) | (1L << (CONTEXT - 512)) | (1L << (JOBNAME - 512)) | (1L << (OWNER - 512)) | (1L << (PROFILE - 512)) | (1L << (QUALIFIER - 512)) | (1L << (SERVAUTH - 512)) | (1L << (TRUSTED - 512)) | (1L << (SECTION - 512)) | (1L << (ACTIVE - 512)) | (1L << (VERSION - 512)) | (1L << (ALIAS - 512)) | (1L << (WORK - 512)) | (1L << (WORKFILE - 512)) | (1L << (SYSDEFLT - 512)) | (1L << (NULTERM - 512)) | (1L << (STRUCTURE - 512)) | (1L << (GENERIC - 512)))) != 0) || _la==MINUTE || ((((_la - 798)) & ~0x3f) == 0 && ((1L << (_la - 798)) & ((1L << (CURRENT_DATE - 798)) | (1L << (CURRENT_PATH - 798)) | (1L << (CURRENT_SCHEMA - 798)) | (1L << (CURRENT_SERVER - 798)) | (1L << (CURRENT_TIME - 798)) | (1L << (CURRENT_TIMESTAMP - 798)) | (1L << (CURRENT_TIME_ZONE - 798)) | (1L << (SESSION_USER - 798)) | (1L << (USER - 798)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	private static final int _serializedATNSegments = 3;
	private static final String _serializedATNSegment0 =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0348\u1825\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
		"\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d"+
		"\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142"+
		"\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145\4\u0146\t\u0146"+
		"\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b"+
		"\t\u014b\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f"+
		"\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153\4\u0154"+
		"\t\u0154\4\u0155\t\u0155\4\u0156\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158"+
		"\4\u0159\t\u0159\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d"+
		"\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\4\u0161\t\u0161"+
		"\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164\t\u0164\4\u0165\t\u0165\4\u0166"+
		"\t\u0166\4\u0167\t\u0167\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a"+
		"\4\u016b\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e\4\u016f"+
		"\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172\t\u0172\3\2\7\2\u02e6"+
		"\n\2\f\2\16\2\u02e9\13\2\3\2\5\2\u02ec\n\2\3\3\5\3\u02ef\n\3\3\3\3\3\3"+
		"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3"+
		"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\5\3\u0312\n\3\3\3"+
		"\3\3\3\3\5\3\u0317\n\3\3\3\5\3\u031a\n\3\3\4\3\4\3\4\3\4\5\4\u0320\n\4"+
		"\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u032a\n\5\3\5\5\5\u032d\n\5\3\5\3"+
		"\5\3\5\3\5\7\5\u0333\n\5\f\5\16\5\u0336\13\5\3\5\3\5\3\5\5\5\u033b\n\5"+
		"\3\6\3\6\3\7\3\7\3\b\3\b\3\b\3\b\5\b\u0345\n\b\3\t\3\t\3\t\3\t\3\t\3\t"+
		"\3\t\3\t\5\t\u034f\n\t\5\t\u0351\n\t\3\n\3\n\3\n\3\n\3\n\3\n\5\n\u0359"+
		"\n\n\3\13\3\13\3\13\3\13\3\13\3\13\3\13\5\13\u0362\n\13\3\13\3\13\3\13"+
		"\3\13\5\13\u0368\n\13\7\13\u036a\n\13\f\13\16\13\u036d\13\13\3\13\3\13"+
		"\3\f\3\f\3\f\3\f\3\f\3\f\5\f\u0377\n\f\3\r\3\r\3\r\3\r\7\r\u037d\n\r\f"+
		"\r\16\r\u0380\13\r\3\r\3\r\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\17"+
		"\3\17\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\6\20\u0399"+
		"\n\20\r\20\16\20\u039a\3\21\3\21\3\21\3\21\3\21\3\21\3\21\7\21\u03a4\n"+
		"\21\f\21\16\21\u03a7\13\21\3\21\3\21\5\21\u03ab\n\21\3\21\3\21\3\21\5"+
		"\21\u03b0\n\21\3\21\5\21\u03b3\n\21\3\21\6\21\u03b6\n\21\r\21\16\21\u03b7"+
		"\3\22\3\22\3\22\3\22\5\22\u03be\n\22\3\22\7\22\u03c1\n\22\f\22\16\22\u03c4"+
		"\13\22\3\22\3\22\3\22\7\22\u03c9\n\22\f\22\16\22\u03cc\13\22\5\22\u03ce"+
		"\n\22\3\23\3\23\3\23\3\23\3\23\3\23\5\23\u03d6\n\23\3\24\3\24\3\24\3\24"+
		"\3\24\3\24\5\24\u03de\n\24\3\25\3\25\3\25\3\25\6\25\u03e4\n\25\r\25\16"+
		"\25\u03e5\3\26\3\26\3\26\3\26\6\26\u03ec\n\26\r\26\16\26\u03ed\3\27\3"+
		"\27\3\27\3\27\6\27\u03f4\n\27\r\27\16\27\u03f5\3\30\3\30\3\30\3\30\6\30"+
		"\u03fc\n\30\r\30\16\30\u03fd\3\31\3\31\3\31\3\31\3\31\5\31\u0405\n\31"+
		"\3\31\3\31\7\31\u0409\n\31\f\31\16\31\u040c\13\31\3\31\5\31\u040f\n\31"+
		"\3\31\5\31\u0412\n\31\3\32\3\32\3\32\3\32\3\32\3\32\3\32\5\32\u041b\n"+
		"\32\3\32\3\32\3\33\3\33\3\33\3\33\3\33\6\33\u0424\n\33\r\33\16\33\u0425"+
		"\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\5\34\u0430\n\34\3\35\3\35\3\35"+
		"\5\35\u0435\n\35\3\35\3\35\3\35\3\35\3\35\7\35\u043c\n\35\f\35\16\35\u043f"+
		"\13\35\3\35\3\35\3\35\3\35\3\35\5\35\u0446\n\35\3\36\3\36\3\36\3\36\3"+
		"\37\3\37\3\37\5\37\u044f\n\37\3\37\3\37\3\37\3\37\3\37\5\37\u0456\n\37"+
		"\3\37\3\37\3\37\3\37\3\37\5\37\u045d\n\37\7\37\u045f\n\37\f\37\16\37\u0462"+
		"\13\37\3\37\3\37\3\37\5\37\u0467\n\37\3\37\3\37\3 \3 \3 \3!\3!\3!\3!\3"+
		"!\3!\3!\3!\3!\3!\3!\3!\3!\5!\u047b\n!\3!\3!\3!\3!\3!\3!\3!\5!\u0484\n"+
		"!\3!\5!\u0487\n!\3!\3!\3!\3!\3!\3!\3!\3!\5!\u0491\n!\3!\3!\3!\3!\3!\3"+
		"!\3!\3!\3!\3!\3!\3!\5!\u049f\n!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\5!\u04ac"+
		"\n!\3!\3!\3!\3!\5!\u04b2\n!\3\"\3\"\5\"\u04b6\n\"\3#\3#\3#\3#\5#\u04bc"+
		"\n#\3#\5#\u04bf\n#\3#\3#\5#\u04c3\n#\3$\3$\5$\u04c7\n$\3$\3$\3$\5$\u04cc"+
		"\n$\3%\3%\3%\3%\3%\3%\5%\u04d4\n%\3%\3%\3%\3%\3%\5%\u04db\n%\3%\3%\3%"+
		"\3%\3%\3&\3&\3&\3&\7&\u04e6\n&\f&\16&\u04e9\13&\3\'\3\'\3\'\3\'\5\'\u04ef"+
		"\n\'\3(\3(\3(\3(\3(\3(\3(\7(\u04f8\n(\f(\16(\u04fb\13(\5(\u04fd\n(\3("+
		"\3(\6(\u0501\n(\r(\16(\u0502\3)\3)\3)\3)\3)\3)\3)\7)\u050c\n)\f)\16)\u050f"+
		"\13)\5)\u0511\n)\3)\3)\6)\u0515\n)\r)\16)\u0516\3*\3*\3*\3*\3*\3*\3*\7"+
		"*\u0520\n*\f*\16*\u0523\13*\5*\u0525\n*\3*\3*\6*\u0529\n*\r*\16*\u052a"+
		"\3+\3+\3+\3+\3+\3+\3+\7+\u0534\n+\f+\16+\u0537\13+\5+\u0539\n+\3+\3+\6"+
		"+\u053d\n+\r+\16+\u053e\3,\5,\u0542\n,\3,\3,\3,\5,\u0547\n,\3,\3,\3,\3"+
		",\3,\5,\u054e\n,\5,\u0550\n,\3-\3-\3-\3.\3.\3.\3.\5.\u0559\n.\3.\3.\3"+
		".\3.\3.\3.\5.\u0561\n.\5.\u0563\n.\3.\3.\3.\3.\5.\u0569\n.\5.\u056b\n"+
		".\3.\3.\3.\3.\3.\3.\5.\u0573\n.\3.\3.\5.\u0577\n.\3.\3.\3.\3.\3.\5.\u057e"+
		"\n.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\5.\u058f\n.\3.\5.\u0592"+
		"\n.\3.\3.\3.\3.\3.\3.\3.\3.\5.\u059c\n.\3.\3.\3.\3.\5.\u05a2\n.\3.\5."+
		"\u05a5\n.\3.\3.\3.\3.\3.\5.\u05ac\n.\3.\3.\3.\3.\3.\3.\3.\5.\u05b5\n."+
		"\3.\3.\3.\3.\3.\3.\3.\5.\u05be\n.\3.\3.\3.\3.\3.\5.\u05c5\n.\3.\3.\3."+
		"\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\5.\u05db\n.\3.\3."+
		"\3.\3.\3.\3.\3.\3.\3.\5.\u05e6\n.\3.\3.\3.\5.\u05eb\n.\3.\3.\3.\3.\3."+
		"\6.\u05f2\n.\r.\16.\u05f3\5.\u05f6\n.\3/\3/\3/\3/\3/\3/\3/\5/\u05ff\n"+
		"/\3/\3/\3/\3/\3/\5/\u0606\n/\7/\u0608\n/\f/\16/\u060b\13/\3/\3/\3/\3/"+
		"\5/\u0611\n/\3/\3/\3/\3/\5/\u0617\n/\5/\u0619\n/\3/\3/\3/\3/\3/\3/\5/"+
		"\u0621\n/\3/\3/\5/\u0625\n/\3/\3/\3/\3/\3/\5/\u062c\n/\3/\3/\3/\3/\3/"+
		"\3/\3/\3/\3/\3/\3/\3/\5/\u063a\n/\3/\5/\u063d\n/\3/\3/\3/\3/\3/\3/\3/"+
		"\3/\5/\u0647\n/\3/\3/\3/\3/\5/\u064d\n/\3/\5/\u0650\n/\3/\3/\3/\3/\3/"+
		"\5/\u0657\n/\3/\3/\3/\3/\3/\3/\3/\5/\u0660\n/\3/\3/\3/\3/\3/\3/\3/\5/"+
		"\u0669\n/\3/\3/\3/\3/\3/\5/\u0670\n/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/"+
		"\3/\3/\3/\3/\3/\3/\3/\3/\3/\5/\u0686\n/\3/\3/\3/\3/\3/\3/\3/\3/\3/\5/"+
		"\u0691\n/\3/\3/\3/\5/\u0696\n/\3/\3/\3/\3/\3/\6/\u069d\n/\r/\16/\u069e"+
		"\5/\u06a1\n/\3\60\3\60\3\60\3\60\5\60\u06a7\n\60\3\60\3\60\3\60\3\60\3"+
		"\60\3\60\3\60\3\60\3\60\3\60\3\60\7\60\u06b4\n\60\f\60\16\60\u06b7\13"+
		"\60\3\60\3\60\3\60\3\60\5\60\u06bd\n\60\5\60\u06bf\n\60\3\61\3\61\3\61"+
		"\3\61\5\61\u06c5\n\61\3\61\3\61\3\61\3\61\5\61\u06cb\n\61\3\61\5\61\u06ce"+
		"\n\61\3\61\3\61\5\61\u06d2\n\61\3\61\3\61\3\61\3\61\5\61\u06d8\n\61\3"+
		"\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\5\61\u06e4\n\61\3\61"+
		"\5\61\u06e7\n\61\3\61\3\61\3\61\3\61\3\61\5\61\u06ee\n\61\3\61\3\61\3"+
		"\61\5\61\u06f3\n\61\3\61\3\61\3\61\5\61\u06f8\n\61\3\62\3\62\3\62\3\62"+
		"\3\62\3\63\3\63\3\63\5\63\u0702\n\63\3\63\3\63\3\64\3\64\3\64\3\64\3\64"+
		"\3\65\3\65\3\65\3\65\5\65\u070f\n\65\3\65\5\65\u0712\n\65\3\65\5\65\u0715"+
		"\n\65\3\65\3\65\5\65\u0719\n\65\3\65\3\65\3\65\3\65\5\65\u071f\n\65\3"+
		"\65\3\65\7\65\u0723\n\65\f\65\16\65\u0726\13\65\3\65\3\65\5\65\u072a\n"+
		"\65\3\66\3\66\3\66\3\66\5\66\u0730\n\66\3\66\3\66\3\66\3\66\3\66\3\66"+
		"\3\66\3\66\5\66\u073a\n\66\3\66\3\66\5\66\u073e\n\66\3\67\3\67\5\67\u0742"+
		"\n\67\38\38\38\38\38\38\38\78\u074b\n8\f8\168\u074e\138\38\38\58\u0752"+
		"\n8\38\58\u0755\n8\38\38\38\58\u075a\n8\38\38\38\38\38\38\78\u0762\n8"+
		"\f8\168\u0765\138\38\38\58\u0769\n8\38\38\38\38\78\u076f\n8\f8\168\u0772"+
		"\138\58\u0774\n8\38\38\58\u0778\n8\38\38\58\u077c\n8\38\58\u077f\n8\3"+
		"9\39\39\39\59\u0785\n9\39\59\u0788\n9\39\39\79\u078c\n9\f9\169\u078f\13"+
		"9\39\39\79\u0793\n9\f9\169\u0796\139\39\59\u0799\n9\39\39\39\39\39\39"+
		"\39\59\u07a2\n9\69\u07a4\n9\r9\169\u07a5\39\39\59\u07aa\n9\39\39\39\3"+
		"9\39\59\u07b1\n9\39\39\59\u07b5\n9\3:\3:\3:\5:\u07ba\n:\3:\5:\u07bd\n"+
		":\3:\5:\u07c0\n:\3:\3:\3:\3:\5:\u07c6\n:\3:\3:\7:\u07ca\n:\f:\16:\u07cd"+
		"\13:\3:\3:\5:\u07d1\n:\3;\3;\3;\5;\u07d6\n;\3;\3;\3;\3;\3;\3;\3;\3;\3"+
		";\3;\5;\u07e2\n;\3;\3;\5;\u07e6\n;\3<\3<\5<\u07ea\n<\3=\3=\3=\3=\5=\u07f0"+
		"\n=\3=\3=\5=\u07f4\n=\3=\3=\3=\3=\3=\7=\u07fb\n=\f=\16=\u07fe\13=\3=\3"+
		"=\3>\3>\3>\3>\3>\7>\u0807\n>\f>\16>\u080a\13>\3>\3>\5>\u080e\n>\3?\3?"+
		"\3?\3?\3?\7?\u0815\n?\f?\16?\u0818\13?\3?\3?\3?\3?\3?\5?\u081f\n?\3?\3"+
		"?\5?\u0823\n?\3@\5@\u0826\n@\3@\3@\3@\5@\u082b\n@\3A\3A\3A\5A\u0830\n"+
		"A\3B\3B\3B\3B\3B\3B\3B\3B\7B\u083a\nB\fB\16B\u083d\13B\3B\3B\3B\3B\7B"+
		"\u0843\nB\fB\16B\u0846\13B\3B\3B\3B\3B\3B\3B\7B\u084e\nB\fB\16B\u0851"+
		"\13B\3B\5B\u0854\nB\3B\3B\5B\u0858\nB\3C\3C\3C\3C\3C\7C\u085f\nC\fC\16"+
		"C\u0862\13C\3D\3D\3E\3E\3E\3E\3E\7E\u086b\nE\fE\16E\u086e\13E\3E\3E\3"+
		"E\3E\3E\3E\3E\7E\u0877\nE\fE\16E\u087a\13E\3E\3E\5E\u087e\nE\3F\3F\3F"+
		"\5F\u0883\nF\3F\3F\5F\u0887\nF\3G\3G\3G\3G\3G\3G\3G\7G\u0890\nG\fG\16"+
		"G\u0893\13G\3H\3H\3H\3H\7H\u0899\nH\fH\16H\u089c\13H\3H\3H\5H\u08a0\n"+
		"H\3I\3I\3I\3I\5I\u08a6\nI\3J\3J\5J\u08aa\nJ\3K\3K\3K\5K\u08af\nK\3L\3"+
		"L\3L\3L\3L\3L\3L\3L\7L\u08b9\nL\fL\16L\u08bc\13L\3L\3L\3M\3M\3M\3M\3M"+
		"\3M\7M\u08c6\nM\fM\16M\u08c9\13M\3M\3M\5M\u08cd\nM\3M\3M\3M\5M\u08d2\n"+
		"M\3M\5M\u08d5\nM\3M\3M\3M\3M\3M\3M\5M\u08dd\nM\3N\3N\3N\3N\3N\5N\u08e4"+
		"\nN\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\5O\u08f4\nO\3O\3O\5O\u08f8"+
		"\nO\3O\3O\3O\3O\3O\3O\3O\3O\5O\u0902\nO\3O\3O\3O\3O\3O\3O\3O\3O\5O\u090c"+
		"\nO\5O\u090e\nO\3P\3P\3P\6P\u0913\nP\rP\16P\u0914\3P\6P\u0918\nP\rP\16"+
		"P\u0919\3P\3P\3P\7P\u091f\nP\fP\16P\u0922\13P\3Q\3Q\3Q\3Q\3Q\5Q\u0929"+
		"\nQ\3Q\3Q\3Q\3Q\3Q\3Q\5Q\u0931\nQ\3R\3R\3R\3R\5R\u0937\nR\3S\3S\3S\3T"+
		"\3T\3T\3T\5T\u0940\nT\3T\3T\3T\3T\5T\u0946\nT\3T\3T\3T\3T\5T\u094c\nT"+
		"\7T\u094e\nT\fT\16T\u0951\13T\3T\3T\5T\u0955\nT\5T\u0957\nT\3U\3U\3V\3"+
		"V\3W\3W\3W\5W\u0960\nW\3X\3X\5X\u0964\nX\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\5Y\u096e"+
		"\nY\3Y\3Y\3Y\3Y\5Y\u0974\nY\3Y\3Y\3Y\3Y\5Y\u097a\nY\3Y\3Y\3Y\5Y\u097f"+
		"\nY\3Y\3Y\5Y\u0983\nY\3Y\5Y\u0986\nY\3Y\3Y\3Y\5Y\u098b\nY\3Y\3Y\5Y\u098f"+
		"\nY\3Y\5Y\u0992\nY\3Y\3Y\3Y\3Y\5Y\u0998\nY\3Y\3Y\3Y\5Y\u099d\nY\3Y\3Y"+
		"\5Y\u09a1\nY\3Y\5Y\u09a4\nY\3Y\3Y\3Y\3Y\5Y\u09aa\nY\3Y\3Y\5Y\u09ae\nY"+
		"\3Y\3Y\3Y\3Y\5Y\u09b4\nY\3Y\3Y\5Y\u09b8\nY\3Y\5Y\u09bb\nY\3Y\3Y\3Y\5Y"+
		"\u09c0\nY\3Y\3Y\3Y\3Y\5Y\u09c6\nY\3Y\3Y\3Y\3Y\3Y\5Y\u09cd\nY\3Y\3Y\3Y"+
		"\3Y\5Y\u09d3\nY\3Y\3Y\3Y\3Y\3Y\5Y\u09da\nY\3Z\3Z\3Z\3Z\5Z\u09e0\nZ\3Z"+
		"\3Z\3Z\3Z\3Z\3Z\5Z\u09e8\nZ\3Z\3Z\5Z\u09ec\nZ\3Z\3Z\3Z\3Z\5Z\u09f2\nZ"+
		"\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\5Z\u0a03\nZ\3Z\5Z\u0a06"+
		"\nZ\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\5Z\u0a10\nZ\3Z\3Z\3Z\3Z\5Z\u0a16\nZ\3Z\5Z"+
		"\u0a19\nZ\3Z\3Z\3Z\3Z\3Z\5Z\u0a20\nZ\3Z\3Z\3Z\3Z\3Z\3Z\3Z\5Z\u0a29\nZ"+
		"\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\5Z\u0a34\nZ\3Z\3Z\3Z\3Z\3Z\5Z\u0a3b\nZ\3Z"+
		"\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\5Z\u0a51\nZ"+
		"\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\5Z\u0a5c\nZ\3Z\3Z\3Z\3Z\5Z\u0a62\nZ\3[\5["+
		"\u0a65\n[\3[\3[\3[\3[\3[\3[\3[\5[\u0a6e\n[\3[\3[\3[\3[\3[\3[\3[\3[\3["+
		"\3[\3[\3[\3[\3[\5[\u0a7e\n[\3[\3[\3[\5[\u0a83\n[\3[\5[\u0a86\n[\3[\3["+
		"\5[\u0a8a\n[\3[\3[\3[\3[\3[\3[\3[\5[\u0a93\n[\3[\3[\3[\3[\3[\3[\3[\3["+
		"\3[\3[\5[\u0a9f\n[\3[\5[\u0aa2\n[\3[\3[\3[\3[\3[\5[\u0aa9\n[\3[\3[\3["+
		"\3[\3[\3[\3[\3[\3[\5[\u0ab4\n[\3[\3[\3[\3[\3[\5[\u0abb\n[\3[\3[\3[\3["+
		"\3[\3[\3[\3[\3[\3[\3[\3[\3[\3[\3[\3[\3[\3[\3[\3[\3[\3[\3[\3[\3[\3[\3["+
		"\3[\3[\3[\3[\3[\3[\3[\3[\3[\5[\u0ae1\n[\3[\3[\3[\5[\u0ae6\n[\3\\\3\\\3"+
		"\\\5\\\u0aeb\n\\\3\\\3\\\3\\\3\\\3\\\3\\\3\\\5\\\u0af4\n\\\3\\\3\\\3\\"+
		"\3\\\5\\\u0afa\n\\\3\\\5\\\u0afd\n\\\3\\\3\\\3\\\3\\\3\\\5\\\u0b04\n\\"+
		"\3\\\5\\\u0b07\n\\\3\\\5\\\u0b0a\n\\\3]\3]\3]\3]\3]\3]\7]\u0b12\n]\f]"+
		"\16]\u0b15\13]\3]\3]\3]\3]\3]\3]\3]\3]\7]\u0b1f\n]\f]\16]\u0b22\13]\3"+
		"]\3]\3]\3]\3]\3]\3]\7]\u0b2b\n]\f]\16]\u0b2e\13]\3]\3]\3]\3]\3]\3]\3]"+
		"\3]\7]\u0b38\n]\f]\16]\u0b3b\13]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3"+
		"]\5]\u0b4a\n]\3^\3^\5^\u0b4e\n^\3^\3^\3^\5^\u0b53\n^\3^\3^\3^\3^\3^\3"+
		"^\3^\3^\3^\5^\u0b5e\n^\3^\3^\3^\3^\3^\3^\5^\u0b66\n^\3^\3^\3^\3^\3^\5"+
		"^\u0b6d\n^\3^\3^\3^\3^\3^\3^\3^\3^\5^\u0b77\n^\3^\5^\u0b7a\n^\3^\3^\3"+
		"^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\5^\u0b92\n"+
		"^\3^\3^\3^\3^\3^\3^\5^\u0b9a\n^\3^\3^\5^\u0b9e\n^\3^\3^\3^\3^\3^\5^\u0ba5"+
		"\n^\3^\3^\3^\5^\u0baa\n^\3^\3^\3^\3^\5^\u0bb0\n^\3^\3^\3^\3^\3^\5^\u0bb7"+
		"\n^\3^\3^\5^\u0bbb\n^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^"+
		"\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\5^\u0bd9\n^\3^\3^\3^\3^\3^\3^\3^"+
		"\3^\3^\3^\3^\3^\5^\u0be7\n^\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\5_\u0bf4"+
		"\n_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\5_\u0c05\n_\3_\3_\3_"+
		"\3_\3_\5_\u0c0c\n_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\5_"+
		"\u0c1e\n_\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`"+
		"\3`\3`\3`\3`\5`\u0c38\n`\3`\5`\u0c3b\n`\3`\3`\5`\u0c3f\n`\3`\3`\5`\u0c43"+
		"\n`\3`\3`\3`\3`\3`\5`\u0c4a\n`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\7`\u0c56"+
		"\n`\f`\16`\u0c59\13`\3`\3`\3`\3`\3`\3`\3`\3`\7`\u0c63\n`\f`\16`\u0c66"+
		"\13`\3`\3`\3`\3`\3`\3`\3`\3`\7`\u0c70\n`\f`\16`\u0c73\13`\3`\3`\3`\5`"+
		"\u0c78\n`\3a\3a\3a\3a\3a\3a\3a\3a\5a\u0c82\na\3a\3a\3a\5a\u0c87\na\3a"+
		"\3a\5a\u0c8b\na\3b\3b\3b\3b\3b\3b\3b\3b\5b\u0c95\nb\3c\3c\3c\3c\3c\3c"+
		"\5c\u0c9d\nc\3d\3d\5d\u0ca1\nd\3d\3d\5d\u0ca5\nd\3d\3d\5d\u0ca9\nd\5d"+
		"\u0cab\nd\3e\3e\3e\3e\3e\3e\7e\u0cb3\ne\fe\16e\u0cb6\13e\3e\3e\3e\3e\3"+
		"e\3e\7e\u0cbe\ne\fe\16e\u0cc1\13e\3e\3e\3e\3e\3e\3e\7e\u0cc9\ne\fe\16"+
		"e\u0ccc\13e\5e\u0cce\ne\3f\3f\5f\u0cd2\nf\3f\3f\3f\3f\3f\5f\u0cd9\nf\3"+
		"f\3f\3f\5f\u0cde\nf\3g\3g\3h\3h\3h\3h\3h\3h\5h\u0ce8\nh\3i\3i\5i\u0cec"+
		"\ni\3i\3i\3i\5i\u0cf1\ni\3i\3i\3i\3j\5j\u0cf7\nj\3j\3j\5j\u0cfb\nj\3j"+
		"\3j\3j\3j\3j\3j\3j\3j\3j\3j\6j\u0d07\nj\rj\16j\u0d08\3k\6k\u0d0c\nk\r"+
		"k\16k\u0d0d\3l\3l\3l\3l\3l\3l\5l\u0d16\nl\3l\3l\3l\5l\u0d1b\nl\6l\u0d1d"+
		"\nl\rl\16l\u0d1e\3m\3m\3m\3m\3m\3m\3m\3m\5m\u0d29\nm\3m\3m\3n\3n\3n\3"+
		"o\5o\u0d31\no\3o\3o\3o\3o\3o\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\7p\u0d42\n"+
		"p\fp\16p\u0d45\13p\3p\3p\3q\3q\3q\3q\3q\3q\7q\u0d4f\nq\fq\16q\u0d52\13"+
		"q\5q\u0d54\nq\3q\5q\u0d57\nq\3q\3q\3q\5q\u0d5c\nq\3r\3r\3r\5r\u0d61\n"+
		"r\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\7s\u0d73\ns\fs\16s\u0d76"+
		"\13s\3s\3s\3s\3s\3s\5s\u0d7d\ns\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3"+
		"t\3t\3t\3t\7t\u0d8f\nt\ft\16t\u0d92\13t\3t\3t\3t\3t\3t\5t\u0d99\nt\3u"+
		"\3u\5u\u0d9d\nu\3v\3v\3v\3v\5v\u0da3\nv\3v\3v\5v\u0da7\nv\3v\3v\5v\u0dab"+
		"\nv\3v\3v\3v\5v\u0db0\nv\5v\u0db2\nv\3w\3w\3w\3w\3w\5w\u0db9\nw\3w\7w"+
		"\u0dbc\nw\fw\16w\u0dbf\13w\3w\3w\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\5x\u0dcd"+
		"\nx\3x\3x\3x\3x\5x\u0dd3\nx\3x\5x\u0dd6\nx\3x\3x\3x\3x\3x\5x\u0ddd\nx"+
		"\3x\5x\u0de0\nx\3x\5x\u0de3\nx\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3z\3z\3z"+
		"\3z\3z\3{\3{\3{\3{\3|\3|\3|\3|\3|\3}\3}\3}\3}\3}\5}\u0e02\n}\3~\3~\3~"+
		"\3~\3~\3~\3~\3~\3~\5~\u0e0d\n~\3\177\3\177\6\177\u0e11\n\177\r\177\16"+
		"\177\u0e12\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\5\u0080"+
		"\u0e1c\n\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080"+
		"\3\u0080\3\u0080\3\u0080\3\u0080\5\u0080\u0e29\n\u0080\3\u0080\5\u0080"+
		"\u0e2c\n\u0080\3\u0080\3\u0080\3\u0080\3\u0080\5\u0080\u0e32\n\u0080\3"+
		"\u0080\3\u0080\5\u0080\u0e36\n\u0080\3\u0080\3\u0080\5\u0080\u0e3a\n\u0080"+
		"\3\u0081\3\u0081\3\u0082\3\u0082\5\u0082\u0e40\n\u0082\3\u0083\3\u0083"+
		"\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\5\u0083\u0e4a\n\u0083"+
		"\3\u0083\3\u0083\3\u0083\3\u0083\5\u0083\u0e50\n\u0083\3\u0083\3\u0083"+
		"\3\u0083\3\u0083\5\u0083\u0e56\n\u0083\3\u0083\3\u0083\3\u0083\5\u0083"+
		"\u0e5b\n\u0083\3\u0083\3\u0083\5\u0083\u0e5f\n\u0083\3\u0083\5\u0083\u0e62"+
		"\n\u0083\3\u0083\3\u0083\3\u0083\5\u0083\u0e67\n\u0083\3\u0083\3\u0083"+
		"\3\u0083\5\u0083\u0e6c\n\u0083\3\u0083\3\u0083\3\u0083\3\u0083\5\u0083"+
		"\u0e72\n\u0083\3\u0083\3\u0083\3\u0083\5\u0083\u0e77\n\u0083\3\u0083\3"+
		"\u0083\3\u0083\5\u0083\u0e7c\n\u0083\3\u0083\3\u0083\3\u0083\3\u0083\5"+
		"\u0083\u0e82\n\u0083\3\u0083\3\u0083\5\u0083\u0e86\n\u0083\3\u0083\3\u0083"+
		"\3\u0083\3\u0083\5\u0083\u0e8c\n\u0083\3\u0083\3\u0083\5\u0083\u0e90\n"+
		"\u0083\3\u0083\5\u0083\u0e93\n\u0083\3\u0083\3\u0083\3\u0083\5\u0083\u0e98"+
		"\n\u0083\3\u0083\3\u0083\3\u0083\3\u0083\5\u0083\u0e9e\n\u0083\3\u0083"+
		"\3\u0083\3\u0083\5\u0083\u0ea3\n\u0083\3\u0083\3\u0083\3\u0083\3\u0083"+
		"\5\u0083\u0ea9\n\u0083\3\u0083\3\u0083\3\u0083\5\u0083\u0eae\n\u0083\3"+
		"\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\5\u0083\u0eb6\n\u0083\5"+
		"\u0083\u0eb8\n\u0083\3\u0084\3\u0084\3\u0084\3\u0084\5\u0084\u0ebe\n\u0084"+
		"\3\u0084\3\u0084\3\u0084\3\u0084\5\u0084\u0ec4\n\u0084\7\u0084\u0ec6\n"+
		"\u0084\f\u0084\16\u0084\u0ec9\13\u0084\3\u0085\3\u0085\3\u0085\3\u0085"+
		"\3\u0085\3\u0085\5\u0085\u0ed1\n\u0085\3\u0085\3\u0085\5\u0085\u0ed5\n"+
		"\u0085\5\u0085\u0ed7\n\u0085\3\u0086\3\u0086\3\u0087\3\u0087\3\u0087\3"+
		"\u0087\3\u0088\3\u0088\3\u0089\3\u0089\3\u008a\3\u008a\3\u008a\5\u008a"+
		"\u0ee6\n\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a"+
		"\3\u008a\3\u008a\5\u008a\u0ef1\n\u008a\3\u008a\3\u008a\3\u008a\3\u008a"+
		"\3\u008a\5\u008a\u0ef8\n\u008a\3\u008a\3\u008a\5\u008a\u0efc\n\u008a\3"+
		"\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\5\u008a\u0f04\n\u008a\3"+
		"\u008a\3\u008a\5\u008a\u0f08\n\u008a\3\u008a\5\u008a\u0f0b\n\u008a\3\u008b"+
		"\3\u008b\5\u008b\u0f0f\n\u008b\3\u008b\3\u008b\3\u008b\5\u008b\u0f14\n"+
		"\u008b\3\u008b\3\u008b\3\u008b\3\u008b\7\u008b\u0f1a\n\u008b\f\u008b\16"+
		"\u008b\u0f1d\13\u008b\3\u008b\3\u008b\3\u008b\3\u008b\5\u008b\u0f23\n"+
		"\u008b\3\u008b\3\u008b\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c"+
		"\3\u008c\3\u008c\5\u008c\u0f2f\n\u008c\5\u008c\u0f31\n\u008c\3\u008c\3"+
		"\u008c\3\u008c\3\u008c\3\u008c\5\u008c\u0f38\n\u008c\3\u008c\3\u008c\3"+
		"\u008c\3\u008c\3\u008c\5\u008c\u0f3f\n\u008c\7\u008c\u0f41\n\u008c\f\u008c"+
		"\16\u008c\u0f44\13\u008c\3\u008c\3\u008c\3\u008c\3\u008d\3\u008d\3\u008d"+
		"\3\u008d\3\u008d\3\u008d\3\u008d\5\u008d\u0f50\n\u008d\3\u008d\3\u008d"+
		"\3\u008d\3\u008d\3\u008d\5\u008d\u0f57\n\u008d\7\u008d\u0f59\n\u008d\f"+
		"\u008d\16\u008d\u0f5c\13\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d"+
		"\3\u008d\3\u008d\3\u008d\3\u008d\5\u008d\u0f67\n\u008d\5\u008d\u0f69\n"+
		"\u008d\3\u008d\5\u008d\u0f6c\n\u008d\3\u008d\3\u008d\3\u008d\3\u008d\5"+
		"\u008d\u0f72\n\u008d\3\u008e\3\u008e\5\u008e\u0f76\n\u008e\3\u008e\3\u008e"+
		"\3\u008e\3\u008e\3\u008e\3\u008f\5\u008f\u0f7e\n\u008f\3\u008f\3\u008f"+
		"\3\u008f\3\u008f\7\u008f\u0f84\n\u008f\f\u008f\16\u008f\u0f87\13\u008f"+
		"\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\7\u008f\u0f8e\n\u008f\f\u008f"+
		"\16\u008f\u0f91\13\u008f\3\u008f\3\u008f\3\u0090\3\u0090\3\u0090\5\u0090"+
		"\u0f98\n\u0090\3\u0090\3\u0090\3\u0091\3\u0091\3\u0092\3\u0092\5\u0092"+
		"\u0fa0\n\u0092\3\u0092\3\u0092\3\u0092\3\u0092\7\u0092\u0fa6\n\u0092\f"+
		"\u0092\16\u0092\u0fa9\13\u0092\3\u0092\3\u0092\5\u0092\u0fad\n\u0092\3"+
		"\u0093\3\u0093\3\u0093\3\u0093\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094"+
		"\3\u0094\3\u0094\3\u0094\3\u0094\7\u0094\u0fbc\n\u0094\f\u0094\16\u0094"+
		"\u0fbf\13\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094"+
		"\3\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u0fcc\n\u0094\3\u0095\3\u0095"+
		"\3\u0095\3\u0095\5\u0095\u0fd2\n\u0095\3\u0096\3\u0096\5\u0096\u0fd6\n"+
		"\u0096\3\u0097\3\u0097\3\u0097\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098"+
		"\3\u0098\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u009a\3\u009a\6\u009a"+
		"\u0fe8\n\u009a\r\u009a\16\u009a\u0fe9\3\u009b\3\u009b\3\u009b\3\u009b"+
		"\3\u009b\3\u009b\7\u009b\u0ff2\n\u009b\f\u009b\16\u009b\u0ff5\13\u009b"+
		"\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\5\u009c\u0ffd\n\u009c"+
		"\3\u009d\3\u009d\6\u009d\u1001\n\u009d\r\u009d\16\u009d\u1002\3\u009e"+
		"\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e"+
		"\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\5\u009e\u1014\n\u009e\3\u009f"+
		"\3\u009f\3\u009f\7\u009f\u1019\n\u009f\f\u009f\16\u009f\u101c\13\u009f"+
		"\3\u009f\3\u009f\3\u009f\7\u009f\u1021\n\u009f\f\u009f\16\u009f\u1024"+
		"\13\u009f\5\u009f\u1026\n\u009f\3\u00a0\3\u00a0\5\u00a0\u102a\n\u00a0"+
		"\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1"+
		"\3\u00a1\5\u00a1\u1036\n\u00a1\3\u00a2\3\u00a2\3\u00a3\3\u00a3\3\u00a4"+
		"\3\u00a4\3\u00a5\3\u00a5\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6"+
		"\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6"+
		"\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6"+
		"\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6"+
		"\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\5\u00a6\u1068"+
		"\n\u00a6\3\u00a6\3\u00a6\3\u00a6\7\u00a6\u106d\n\u00a6\f\u00a6\16\u00a6"+
		"\u1070\13\u00a6\5\u00a6\u1072\n\u00a6\3\u00a7\3\u00a7\3\u00a7\3\u00a7"+
		"\3\u00a7\3\u00a7\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a9\3\u00a9"+
		"\3\u00a9\3\u00a9\5\u00a9\u1083\n\u00a9\3\u00aa\3\u00aa\3\u00aa\5\u00aa"+
		"\u1088\n\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\7\u00aa\u108f\n"+
		"\u00aa\f\u00aa\16\u00aa\u1092\13\u00aa\3\u00aa\3\u00aa\3\u00ab\3\u00ab"+
		"\3\u00ab\5\u00ab\u1099\n\u00ab\3\u00ab\3\u00ab\3\u00ab\5\u00ab\u109e\n"+
		"\u00ab\3\u00ab\3\u00ab\5\u00ab\u10a2\n\u00ab\3\u00ab\3\u00ab\3\u00ac\3"+
		"\u00ac\3\u00ac\5\u00ac\u10a9\n\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3"+
		"\u00ac\3\u00ac\3\u00ac\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u10b5\n\u00ad\3"+
		"\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\7\u00ad\u10bc\n\u00ad\f\u00ad\16"+
		"\u00ad\u10bf\13\u00ad\3\u00ad\3\u00ad\3\u00ae\3\u00ae\3\u00ae\3\u00ae"+
		"\3\u00ae\3\u00ae\3\u00ae\3\u00ae\5\u00ae\u10cb\n\u00ae\3\u00ae\3\u00ae"+
		"\3\u00af\3\u00af\3\u00af\3\u00af\5\u00af\u10d3\n\u00af\3\u00af\3\u00af"+
		"\3\u00af\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b1\3\u00b1\5\u00b1"+
		"\u10df\n\u00b1\3\u00b1\7\u00b1\u10e2\n\u00b1\f\u00b1\16\u00b1\u10e5\13"+
		"\u00b1\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\5\u00b2\u10ed\n"+
		"\u00b2\3\u00b2\3\u00b2\3\u00b2\5\u00b2\u10f2\n\u00b2\7\u00b2\u10f4\n\u00b2"+
		"\f\u00b2\16\u00b2\u10f7\13\u00b2\5\u00b2\u10f9\n\u00b2\3\u00b2\3\u00b2"+
		"\3\u00b3\3\u00b3\3\u00b3\5\u00b3\u1100\n\u00b3\3\u00b4\3\u00b4\3\u00b4"+
		"\3\u00b4\5\u00b4\u1106\n\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b5\3\u00b5"+
		"\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5"+
		"\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\5\u00b5"+
		"\u111e\n\u00b5\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6"+
		"\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\5\u00b6\u112c\n\u00b6\5\u00b6"+
		"\u112e\n\u00b6\5\u00b6\u1130\n\u00b6\3\u00b6\3\u00b6\3\u00b7\3\u00b7\3"+
		"\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\5\u00b7\u113d\n"+
		"\u00b7\5\u00b7\u113f\n\u00b7\3\u00b7\3\u00b7\3\u00b8\3\u00b8\3\u00b8\3"+
		"\u00b8\5\u00b8\u1147\n\u00b8\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\7"+
		"\u00b9\u114e\n\u00b9\f\u00b9\16\u00b9\u1151\13\u00b9\3\u00ba\3\u00ba\3"+
		"\u00ba\3\u00ba\5\u00ba\u1157\n\u00ba\3\u00ba\3\u00ba\3\u00ba\5\u00ba\u115c"+
		"\n\u00ba\7\u00ba\u115e\n\u00ba\f\u00ba\16\u00ba\u1161\13\u00ba\3\u00bb"+
		"\3\u00bb\3\u00bb\5\u00bb\u1166\n\u00bb\3\u00bc\3\u00bc\3\u00bc\3\u00bc"+
		"\3\u00bc\3\u00bc\5\u00bc\u116e\n\u00bc\3\u00bc\5\u00bc\u1171\n\u00bc\3"+
		"\u00bc\3\u00bc\3\u00bd\3\u00bd\5\u00bd\u1177\n\u00bd\3\u00bd\3\u00bd\3"+
		"\u00bd\5\u00bd\u117c\n\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3"+
		"\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd"+
		"\3\u00bd\3\u00bd\5\u00bd\u118e\n\u00bd\5\u00bd\u1190\n\u00bd\3\u00bd\3"+
		"\u00bd\3\u00be\3\u00be\3\u00bf\3\u00bf\3\u00c0\3\u00c0\3\u00c0\3\u00c0"+
		"\5\u00c0\u119c\n\u00c0\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\5\u00c1"+
		"\u11a3\n\u00c1\3\u00c1\3\u00c1\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2"+
		"\5\u00c2\u11ac\n\u00c2\3\u00c2\3\u00c2\3\u00c3\3\u00c3\3\u00c3\3\u00c3"+
		"\3\u00c3\3\u00c3\3\u00c3\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c5"+
		"\3\u00c5\3\u00c5\3\u00c5\5\u00c5\u11c0\n\u00c5\3\u00c6\3\u00c6\3\u00c6"+
		"\5\u00c6\u11c5\n\u00c6\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c8"+
		"\3\u00c8\5\u00c8\u11ce\n\u00c8\3\u00c9\3\u00c9\3\u00c9\3\u00c9\5\u00c9"+
		"\u11d4\n\u00c9\3\u00ca\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u11da\n\u00ca\3"+
		"\u00cb\3\u00cb\3\u00cb\3\u00cc\3\u00cc\3\u00cc\3\u00cd\3\u00cd\3\u00cd"+
		"\3\u00ce\3\u00ce\3\u00ce\3\u00cf\3\u00cf\3\u00cf\3\u00d0\3\u00d0\3\u00d1"+
		"\3\u00d1\3\u00d2\3\u00d2\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\5\u00d3"+
		"\u11f6\n\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\5\u00d3\u11fc\n\u00d3\3"+
		"\u00d3\3\u00d3\3\u00d3\3\u00d3\5\u00d3\u1202\n\u00d3\3\u00d3\3\u00d3\3"+
		"\u00d3\5\u00d3\u1207\n\u00d3\3\u00d3\3\u00d3\3\u00d3\5\u00d3\u120c\n\u00d3"+
		"\7\u00d3\u120e\n\u00d3\f\u00d3\16\u00d3\u1211\13\u00d3\5\u00d3\u1213\n"+
		"\u00d3\3\u00d3\3\u00d3\3\u00d4\3\u00d4\3\u00d5\3\u00d5\3\u00d5\3\u00d5"+
		"\3\u00d5\5\u00d5\u121e\n\u00d5\3\u00d6\3\u00d6\3\u00d7\3\u00d7\3\u00d8"+
		"\3\u00d8\3\u00d8\3\u00d8\3\u00d8\5\u00d8\u1229\n\u00d8\3\u00d9\5\u00d9"+
		"\u122c\n\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9"+
		"\5\u00d9\u1235\n\u00d9\3\u00da\5\u00da\u1238\n\u00da\3\u00da\3\u00da\3"+
		"\u00da\3\u00db\5\u00db\u123e\n\u00db\3\u00db\3\u00db\3\u00db\3\u00db\3"+
		"\u00db\3\u00db\3\u00db\5\u00db\u1247\n\u00db\3\u00dc\3\u00dc\3\u00dc\3"+
		"\u00dc\3\u00dc\5\u00dc\u124e\n\u00dc\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3"+
		"\u00de\3\u00de\3\u00df\3\u00df\3\u00df\3\u00df\3\u00e0\3\u00e0\3\u00e0"+
		"\7\u00e0\u125d\n\u00e0\f\u00e0\16\u00e0\u1260\13\u00e0\3\u00e1\3\u00e1"+
		"\3\u00e1\3\u00e1\3\u00e1\7\u00e1\u1267\n\u00e1\f\u00e1\16\u00e1\u126a"+
		"\13\u00e1\3\u00e1\3\u00e1\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2"+
		"\3\u00e2\3\u00e2\5\u00e2\u1276\n\u00e2\3\u00e3\3\u00e3\3\u00e4\3\u00e4"+
		"\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\5\u00e5\u1283"+
		"\n\u00e5\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6"+
		"\5\u00e6\u128d\n\u00e6\3\u00e7\3\u00e7\3\u00e7\5\u00e7\u1292\n\u00e7\3"+
		"\u00e7\3\u00e7\3\u00e7\3\u00e7\5\u00e7\u1298\n\u00e7\3\u00e7\3\u00e7\3"+
		"\u00e8\3\u00e8\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\5\u00e9\u12a3\n"+
		"\u00e9\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\5\u00ea\u12ab\n"+
		"\u00ea\3\u00eb\5\u00eb\u12ae\n\u00eb\3\u00eb\3\u00eb\3\u00eb\5\u00eb\u12b3"+
		"\n\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\5\u00eb\u12b9\n\u00eb\3\u00eb"+
		"\3\u00eb\5\u00eb\u12bd\n\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb"+
		"\5\u00eb\u12c4\n\u00eb\7\u00eb\u12c6\n\u00eb\f\u00eb\16\u00eb\u12c9\13"+
		"\u00eb\3\u00ec\3\u00ec\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed"+
		"\3\u00ed\3\u00ed\3\u00ed\3\u00ed\5\u00ed\u12d7\n\u00ed\3\u00ee\3\u00ee"+
		"\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\5\u00ee\u12e1\n\u00ee"+
		"\3\u00ef\3\u00ef\3\u00ef\3\u00ef\7\u00ef\u12e7\n\u00ef\f\u00ef\16\u00ef"+
		"\u12ea\13\u00ef\3\u00ef\3\u00ef\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0"+
		"\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0"+
		"\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\5\u00f0\u1303"+
		"\n\u00f0\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f2\3\u00f2"+
		"\5\u00f2\u130d\n\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f3"+
		"\3\u00f3\3\u00f3\5\u00f3\u1317\n\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3"+
		"\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f5\3\u00f5\5\u00f5\u1324"+
		"\n\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5"+
		"\3\u00f5\7\u00f5\u132f\n\u00f5\f\u00f5\16\u00f5\u1332\13\u00f5\3\u00f5"+
		"\3\u00f5\5\u00f5\u1336\n\u00f5\3\u00f6\3\u00f6\5\u00f6\u133a\n\u00f6\3"+
		"\u00f6\3\u00f6\3\u00f6\3\u00f6\5\u00f6\u1340\n\u00f6\3\u00f7\3\u00f7\3"+
		"\u00f7\5\u00f7\u1345\n\u00f7\3\u00f7\3\u00f7\3\u00f7\5\u00f7\u134a\n\u00f7"+
		"\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\5\u00f8\u1352\n\u00f8"+
		"\3\u00f8\3\u00f8\3\u00f8\7\u00f8\u1357\n\u00f8\f\u00f8\16\u00f8\u135a"+
		"\13\u00f8\5\u00f8\u135c\n\u00f8\3\u00f8\3\u00f8\3\u00f9\3\u00f9\5\u00f9"+
		"\u1362\n\u00f9\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\5\u00fa\u1369\n"+
		"\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fb\3\u00fb\3\u00fc\3\u00fc"+
		"\3\u00fc\5\u00fc\u1374\n\u00fc\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd"+
		"\3\u00fd\3\u00fd\3\u00fd\5\u00fd\u137e\n\u00fd\3\u00fd\3\u00fd\3\u00fd"+
		"\3\u00fd\5\u00fd\u1384\n\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\5\u00fd"+
		"\u138a\n\u00fd\3\u00fd\3\u00fd\3\u00fd\5\u00fd\u138f\n\u00fd\3\u00fd\3"+
		"\u00fd\5\u00fd\u1393\n\u00fd\3\u00fd\5\u00fd\u1396\n\u00fd\3\u00fd\3\u00fd"+
		"\3\u00fd\5\u00fd\u139b\n\u00fd\3\u00fd\5\u00fd\u139e\n\u00fd\3\u00fd\3"+
		"\u00fd\3\u00fd\3\u00fd\5\u00fd\u13a4\n\u00fd\3\u00fd\3\u00fd\3\u00fd\5"+
		"\u00fd\u13a9\n\u00fd\3\u00fd\5\u00fd\u13ac\n\u00fd\3\u00fd\3\u00fd\3\u00fd"+
		"\3\u00fd\5\u00fd\u13b2\n\u00fd\3\u00fd\5\u00fd\u13b5\n\u00fd\3\u00fd\3"+
		"\u00fd\3\u00fd\3\u00fd\5\u00fd\u13bb\n\u00fd\3\u00fd\3\u00fd\5\u00fd\u13bf"+
		"\n\u00fd\3\u00fd\5\u00fd\u13c2\n\u00fd\3\u00fd\3\u00fd\3\u00fd\5\u00fd"+
		"\u13c7\n\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\5\u00fd\u13cd\n\u00fd\3"+
		"\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\5\u00fd\u13d4\n\u00fd\3\u00fd\3"+
		"\u00fd\3\u00fd\3\u00fd\5\u00fd\u13da\n\u00fd\3\u00fd\3\u00fd\3\u00fd\3"+
		"\u00fd\3\u00fd\5\u00fd\u13e1\n\u00fd\3\u00fe\3\u00fe\3\u00fe\3\u00fe\5"+
		"\u00fe\u13e7\n\u00fe\3\u00fe\3\u00fe\3\u00ff\3\u00ff\3\u00ff\5\u00ff\u13ee"+
		"\n\u00ff\3\u00ff\3\u00ff\3\u0100\3\u0100\3\u0100\5\u0100\u13f5\n\u0100"+
		"\3\u0100\5\u0100\u13f8\n\u0100\3\u0101\3\u0101\3\u0101\3\u0101\3\u0102"+
		"\3\u0102\3\u0102\5\u0102\u1401\n\u0102\3\u0102\3\u0102\3\u0103\3\u0103"+
		"\3\u0104\3\u0104\3\u0105\3\u0105\3\u0106\3\u0106\3\u0106\5\u0106\u140e"+
		"\n\u0106\3\u0106\3\u0106\3\u0107\3\u0107\3\u0108\3\u0108\3\u0109\3\u0109"+
		"\3\u010a\3\u010a\3\u010b\3\u010b\3\u010c\3\u010c\3\u010d\3\u010d\3\u010d"+
		"\5\u010d\u1421\n\u010d\3\u010d\5\u010d\u1424\n\u010d\3\u010d\3\u010d\3"+
		"\u010d\5\u010d\u1429\n\u010d\7\u010d\u142b\n\u010d\f\u010d\16\u010d\u142e"+
		"\13\u010d\3\u010e\3\u010e\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f"+
		"\3\u010f\3\u010f\5\u010f\u143a\n\u010f\3\u010f\3\u010f\5\u010f\u143e\n"+
		"\u010f\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110"+
		"\5\u0110\u1448\n\u0110\3\u0110\3\u0110\3\u0111\3\u0111\3\u0111\3\u0111"+
		"\3\u0111\3\u0111\3\u0111\3\u0111\5\u0111\u1454\n\u0111\3\u0111\3\u0111"+
		"\3\u0112\3\u0112\3\u0113\3\u0113\3\u0114\3\u0114\3\u0115\3\u0115\3\u0115"+
		"\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\5\u0115\u1466\n\u0115\3\u0115"+
		"\3\u0115\5\u0115\u146a\n\u0115\3\u0116\3\u0116\3\u0117\3\u0117\3\u0118"+
		"\3\u0118\3\u0119\3\u0119\3\u011a\3\u011a\3\u011b\3\u011b\3\u011c\3\u011c"+
		"\3\u011d\3\u011d\3\u011d\5\u011d\u147d\n\u011d\3\u011d\5\u011d\u1480\n"+
		"\u011d\3\u011d\3\u011d\3\u011d\5\u011d\u1485\n\u011d\7\u011d\u1487\n\u011d"+
		"\f\u011d\16\u011d\u148a\13\u011d\3\u011e\3\u011e\3\u011e\5\u011e\u148f"+
		"\n\u011e\3\u011e\5\u011e\u1492\n\u011e\3\u011e\3\u011e\3\u011e\5\u011e"+
		"\u1497\n\u011e\7\u011e\u1499\n\u011e\f\u011e\16\u011e\u149c\13\u011e\3"+
		"\u011f\3\u011f\3\u011f\5\u011f\u14a1\n\u011f\3\u011f\3\u011f\3\u0120\3"+
		"\u0120\3\u0120\5\u0120\u14a8\n\u0120\3\u0120\3\u0120\3\u0121\3\u0121\3"+
		"\u0121\5\u0121\u14af\n\u0121\3\u0121\3\u0121\3\u0122\3\u0122\3\u0122\3"+
		"\u0122\3\u0122\3\u0122\3\u0122\3\u0122\5\u0122\u14bb\n\u0122\3\u0122\3"+
		"\u0122\3\u0123\3\u0123\3\u0123\5\u0123\u14c2\n\u0123\3\u0123\3\u0123\3"+
		"\u0124\3\u0124\3\u0125\3\u0125\3\u0126\3\u0126\3\u0127\3\u0127\3\u0128"+
		"\3\u0128\3\u0129\3\u0129\3\u012a\3\u012a\3\u012b\3\u012b\3\u012c\3\u012c"+
		"\3\u012d\3\u012d\3\u012e\3\u012e\3\u012f\3\u012f\3\u0130\3\u0130\3\u0131"+
		"\3\u0131\3\u0132\3\u0132\3\u0133\3\u0133\3\u0134\3\u0134\3\u0135\3\u0135"+
		"\3\u0136\3\u0136\3\u0137\3\u0137\3\u0138\3\u0138\3\u0139\3\u0139\5\u0139"+
		"\u14f2\n\u0139\3\u013a\3\u013a\3\u013a\5\u013a\u14f7\n\u013a\3\u013a\3"+
		"\u013a\3\u013b\3\u013b\3\u013b\5\u013b\u14fe\n\u013b\3\u013b\3\u013b\3"+
		"\u013c\3\u013c\3\u013c\3\u013c\5\u013c\u1506\n\u013c\3\u013c\3\u013c\5"+
		"\u013c\u150a\n\u013c\3\u013c\3\u013c\3\u013c\3\u013c\5\u013c\u1510\n\u013c"+
		"\3\u013c\5\u013c\u1513\n\u013c\3\u013d\3\u013d\3\u013e\3\u013e\3\u013f"+
		"\3\u013f\3\u013f\5\u013f\u151c\n\u013f\3\u013f\3\u013f\5\u013f\u1520\n"+
		"\u013f\3\u0140\3\u0140\3\u0140\5\u0140\u1525\n\u0140\3\u0140\3\u0140\7"+
		"\u0140\u1529\n\u0140\f\u0140\16\u0140\u152c\13\u0140\3\u0141\5\u0141\u152f"+
		"\n\u0141\3\u0141\3\u0141\3\u0141\3\u0141\3\u0141\7\u0141\u1536\n\u0141"+
		"\f\u0141\16\u0141\u1539\13\u0141\3\u0141\3\u0141\5\u0141\u153d\n\u0141"+
		"\3\u0142\3\u0142\7\u0142\u1541\n\u0142\f\u0142\16\u0142\u1544\13\u0142"+
		"\3\u0142\3\u0142\7\u0142\u1548\n\u0142\f\u0142\16\u0142\u154b\13\u0142"+
		"\3\u0142\5\u0142\u154e\n\u0142\3\u0142\3\u0142\7\u0142\u1552\n\u0142\f"+
		"\u0142\16\u0142\u1555\13\u0142\3\u0142\3\u0142\7\u0142\u1559\n\u0142\f"+
		"\u0142\16\u0142\u155c\13\u0142\3\u0142\5\u0142\u155f\n\u0142\7\u0142\u1561"+
		"\n\u0142\f\u0142\16\u0142\u1564\13\u0142\3\u0143\3\u0143\3\u0143\3\u0143"+
		"\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143"+
		"\3\u0143\6\u0143\u1574\n\u0143\r\u0143\16\u0143\u1575\3\u0143\3\u0143"+
		"\6\u0143\u157a\n\u0143\r\u0143\16\u0143\u157b\3\u0143\3\u0143\3\u0143"+
		"\3\u0143\3\u0143\3\u0143\6\u0143\u1584\n\u0143\r\u0143\16\u0143\u1585"+
		"\3\u0143\3\u0143\6\u0143\u158a\n\u0143\r\u0143\16\u0143\u158b\3\u0143"+
		"\5\u0143\u158f\n\u0143\3\u0143\3\u0143\3\u0143\5\u0143\u1594\n\u0143\5"+
		"\u0143\u1596\n\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\5\u0143\u159d"+
		"\n\u0143\3\u0143\3\u0143\3\u0143\5\u0143\u15a2\n\u0143\5\u0143\u15a4\n"+
		"\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143"+
		"\3\u0143\3\u0143\3\u0143\3\u0143\6\u0143\u15b2\n\u0143\r\u0143\16\u0143"+
		"\u15b3\3\u0143\3\u0143\6\u0143\u15b8\n\u0143\r\u0143\16\u0143\u15b9\3"+
		"\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\6\u0143\u15c2\n\u0143\r"+
		"\u0143\16\u0143\u15c3\3\u0143\3\u0143\6\u0143\u15c8\n\u0143\r\u0143\16"+
		"\u0143\u15c9\3\u0143\5\u0143\u15cd\n\u0143\3\u0143\3\u0143\3\u0143\5\u0143"+
		"\u15d2\n\u0143\5\u0143\u15d4\n\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3"+
		"\u0143\5\u0143\u15db\n\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\6"+
		"\u0143\u15e2\n\u0143\r\u0143\16\u0143\u15e3\3\u0143\3\u0143\6\u0143\u15e8"+
		"\n\u0143\r\u0143\16\u0143\u15e9\5\u0143\u15ec\n\u0143\3\u0144\3\u0144"+
		"\7\u0144\u15f0\n\u0144\f\u0144\16\u0144\u15f3\13\u0144\3\u0144\5\u0144"+
		"\u15f6\n\u0144\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145"+
		"\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\5\u0145"+
		"\u1607\n\u0145\3\u0146\3\u0146\3\u0146\3\u0146\3\u0146\3\u0146\3\u0146"+
		"\3\u0146\3\u0146\3\u0146\3\u0146\3\u0146\3\u0146\3\u0146\5\u0146\u1617"+
		"\n\u0146\3\u0147\5\u0147\u161a\n\u0147\3\u0147\3\u0147\3\u0147\3\u0147"+
		"\5\u0147\u1620\n\u0147\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148"+
		"\5\u0148\u1628\n\u0148\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148"+
		"\3\u0148\3\u0148\3\u0148\5\u0148\u1633\n\u0148\3\u0149\3\u0149\3\u0149"+
		"\3\u0149\3\u0149\3\u0149\5\u0149\u163b\n\u0149\3\u0149\3\u0149\3\u0149"+
		"\3\u0149\5\u0149\u1641\n\u0149\3\u0149\3\u0149\3\u0149\3\u0149\5\u0149"+
		"\u1647\n\u0149\7\u0149\u1649\n\u0149\f\u0149\16\u0149\u164c\13\u0149\3"+
		"\u0149\3\u0149\5\u0149\u1650\n\u0149\3\u0149\3\u0149\3\u0149\5\u0149\u1655"+
		"\n\u0149\3\u014a\3\u014a\5\u014a\u1659\n\u014a\3\u014a\3\u014a\3\u014b"+
		"\5\u014b\u165e\n\u014b\3\u014b\3\u014b\3\u014b\3\u014b\3\u014b\3\u014b"+
		"\3\u014b\3\u014b\7\u014b\u1668\n\u014b\f\u014b\16\u014b\u166b\13\u014b"+
		"\3\u014b\3\u014b\3\u014c\3\u014c\3\u014c\3\u014c\3\u014c\3\u014c\3\u014c"+
		"\5\u014c\u1676\n\u014c\3\u014d\3\u014d\5\u014d\u167a\n\u014d\3\u014e\3"+
		"\u014e\3\u014e\3\u014e\5\u014e\u1680\n\u014e\3\u014e\3\u014e\3\u014e\5"+
		"\u014e\u1685\n\u014e\7\u014e\u1687\n\u014e\f\u014e\16\u014e\u168a\13\u014e"+
		"\3\u014e\3\u014e\3\u014e\5\u014e\u168f\n\u014e\3\u014e\5\u014e\u1692\n"+
		"\u014e\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\5\u014f\u1699\n\u014f\3"+
		"\u0150\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150\5\u0150\u16a1\n\u0150\3"+
		"\u0150\3\u0150\3\u0150\5\u0150\u16a6\n\u0150\7\u0150\u16a8\n\u0150\f\u0150"+
		"\16\u0150\u16ab\13\u0150\3\u0150\3\u0150\5\u0150\u16af\n\u0150\3\u0151"+
		"\3\u0151\3\u0152\3\u0152\3\u0153\3\u0153\3\u0154\3\u0154\3\u0154\3\u0154"+
		"\5\u0154\u16bb\n\u0154\3\u0155\3\u0155\3\u0155\3\u0156\3\u0156\3\u0156"+
		"\3\u0156\3\u0156\5\u0156\u16c5\n\u0156\3\u0157\3\u0157\3\u0157\3\u0158"+
		"\3\u0158\3\u0158\7\u0158\u16cd\n\u0158\f\u0158\16\u0158\u16d0\13\u0158"+
		"\3\u0159\3\u0159\3\u0159\3\u0159\3\u015a\3\u015a\3\u015a\3\u015a\5\u015a"+
		"\u16da\n\u015a\3\u015a\3\u015a\3\u015a\3\u015a\5\u015a\u16e0\n\u015a\7"+
		"\u015a\u16e2\n\u015a\f\u015a\16\u015a\u16e5\13\u015a\3\u015a\3\u015a\3"+
		"\u015b\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b\5\u015b\u16f0\n"+
		"\u015b\3\u015c\3\u015c\3\u015c\3\u015c\7\u015c\u16f6\n\u015c\f\u015c\16"+
		"\u015c\u16f9\13\u015c\3\u015c\5\u015c\u16fc\n\u015c\3\u015c\5\u015c\u16ff"+
		"\n\u015c\3\u015c\3\u015c\3\u015c\3\u015c\3\u015c\5\u015c\u1706\n\u015c"+
		"\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d"+
		"\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d\7\u015d\u1716\n\u015d\f\u015d"+
		"\16\u015d\u1719\13\u015d\3\u015d\3\u015d\3\u015e\3\u015e\5\u015e\u171f"+
		"\n\u015e\3\u015e\3\u015e\3\u015e\3\u015e\7\u015e\u1725\n\u015e\f\u015e"+
		"\16\u015e\u1728\13\u015e\5\u015e\u172a\n\u015e\3\u015f\3\u015f\3\u015f"+
		"\5\u015f\u172f\n\u015f\3\u015f\5\u015f\u1732\n\u015f\3\u015f\5\u015f\u1735"+
		"\n\u015f\3\u015f\5\u015f\u1738\n\u015f\3\u015f\5\u015f\u173b\n\u015f\3"+
		"\u015f\5\u015f\u173e\n\u015f\3\u0160\3\u0160\3\u0160\3\u0160\7\u0160\u1744"+
		"\n\u0160\f\u0160\16\u0160\u1747\13\u0160\5\u0160\u1749\n\u0160\3\u0160"+
		"\3\u0160\3\u0160\3\u0160\5\u0160\u174f\n\u0160\3\u0160\5\u0160\u1752\n"+
		"\u0160\3\u0160\5\u0160\u1755\n\u0160\3\u0160\5\u0160\u1758\n\u0160\3\u0160"+
		"\5\u0160\u175b\n\u0160\3\u0160\5\u0160\u175e\n\u0160\3\u0160\3\u0160\5"+
		"\u0160\u1762\n\u0160\3\u0160\5\u0160\u1765\n\u0160\3\u0161\3\u0161\3\u0161"+
		"\3\u0161\7\u0161\u176b\n\u0161\f\u0161\16\u0161\u176e\13\u0161\5\u0161"+
		"\u1770\n\u0161\3\u0161\3\u0161\3\u0161\3\u0161\3\u0161\3\u0161\3\u0161"+
		"\7\u0161\u1779\n\u0161\f\u0161\16\u0161\u177c\13\u0161\3\u0162\3\u0162"+
		"\3\u0162\3\u0162\3\u0162\7\u0162\u1783\n\u0162\f\u0162\16\u0162\u1786"+
		"\13\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0163\3\u0163"+
		"\3\u0163\3\u0163\3\u0163\3\u0163\7\u0163\u1794\n\u0163\f\u0163\16\u0163"+
		"\u1797\13\u0163\5\u0163\u1799\n\u0163\3\u0164\3\u0164\3\u0164\3\u0164"+
		"\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0166\3\u0166\3\u0166\5\u0166"+
		"\u17a7\n\u0166\3\u0166\3\u0166\5\u0166\u17ab\n\u0166\3\u0166\3\u0166\5"+
		"\u0166\u17af\n\u0166\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3"+
		"\u0168\3\u0168\3\u0168\3\u0168\3\u0169\3\u0169\3\u0169\3\u016a\3\u016a"+
		"\3\u016a\3\u016a\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\5\u016b"+
		"\u17c8\n\u016b\3\u016b\3\u016b\5\u016b\u17cc\n\u016b\3\u016b\3\u016b\3"+
		"\u016b\3\u016b\3\u016b\5\u016b\u17d3\n\u016b\7\u016b\u17d5\n\u016b\f\u016b"+
		"\16\u016b\u17d8\13\u016b\3\u016b\5\u016b\u17db\n\u016b\3\u016b\5\u016b"+
		"\u17de\n\u016b\3\u016b\5\u016b\u17e1\n\u016b\3\u016c\3\u016c\3\u016c\3"+
		"\u016c\3\u016c\3\u016c\7\u016c\u17e9\n\u016c\f\u016c\16\u016c\u17ec\13"+
		"\u016c\3\u016c\3\u016c\5\u016c\u17f0\n\u016c\3\u016d\3\u016d\3\u016d\3"+
		"\u016d\5\u016d\u17f6\n\u016d\3\u016d\3\u016d\3\u016d\5\u016d\u17fb\n\u016d"+
		"\7\u016d\u17fd\n\u016d\f\u016d\16\u016d\u1800\13\u016d\3\u016d\3\u016d"+
		"\3\u016d\3\u016d\3\u016d\5\u016d\u1807\n\u016d\3\u016e\3\u016e\3\u016e"+
		"\5\u016e\u180c\n\u016e\3\u016f\3\u016f\3\u016f\3\u016f\3\u0170\3\u0170"+
		"\3\u0170\5\u0170\u1815\n\u0170\3\u0170\3\u0170\3\u0170\3\u0171\3\u0171"+
		"\3\u0171\3\u0171\3\u0171\3\u0171\3\u0171\5\u0171\u1821\n\u0171\3\u0172"+
		"\3\u0172\3\u0172\2\2\u0173\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$"+
		"&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084"+
		"\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c"+
		"\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4"+
		"\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc"+
		"\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4"+
		"\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc"+
		"\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114"+
		"\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c"+
		"\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144"+
		"\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c"+
		"\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174"+
		"\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c"+
		"\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4"+
		"\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc"+
		"\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4"+
		"\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec"+
		"\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204"+
		"\u0206\u0208\u020a\u020c\u020e\u0210\u0212\u0214\u0216\u0218\u021a\u021c"+
		"\u021e\u0220\u0222\u0224\u0226\u0228\u022a\u022c\u022e\u0230\u0232\u0234"+
		"\u0236\u0238\u023a\u023c\u023e\u0240\u0242\u0244\u0246\u0248\u024a\u024c"+
		"\u024e\u0250\u0252\u0254\u0256\u0258\u025a\u025c\u025e\u0260\u0262\u0264"+
		"\u0266\u0268\u026a\u026c\u026e\u0270\u0272\u0274\u0276\u0278\u027a\u027c"+
		"\u027e\u0280\u0282\u0284\u0286\u0288\u028a\u028c\u028e\u0290\u0292\u0294"+
		"\u0296\u0298\u029a\u029c\u029e\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac"+
		"\u02ae\u02b0\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc\u02be\u02c0\u02c2\u02c4"+
		"\u02c6\u02c8\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4\u02d6\u02d8\u02da\u02dc"+
		"\u02de\u02e0\u02e2\2F\4\2gg\u0116\u0116\3\2\u00ae\u00af\3\2/\60\4\2\u00bf"+
		"\u00bf\u01c8\u01c8\6\2\u01b1\u01b2\u01b4\u01b4\u01bb\u01bb\u01c0\u01c0"+
		"\4\2\u01bb\u01bb\u01c5\u01c5\4\2##``\4\2\u01bc\u01bc\u01c7\u01c7\4\2\u01b5"+
		"\u01b6\u033e\u033e\4\2[[\u0096\u0096\5\2\u0158\u0158\u0245\u0245\u02fa"+
		"\u02fa\3\2\u0237\u0238\5\2\u01b1\u01b2\u01b4\u01b4\u01c0\u01c0\5\2\u0145"+
		"\u0145\u0157\u0157\u02c5\u02c5\5\2!!\u00c0\u00c0\u01ca\u01ca\5\2\u016e"+
		"\u016e\u026b\u026b\u026f\u026f\3\2<=\5\2\u026a\u026a\u028e\u028e\u0303"+
		"\u0303\4\2\u013b\u013b\u01a1\u01a1\7\2\u01b1\u01b2\u01b4\u01b4\u01bb\u01bb"+
		"\u01c0\u01c0\u01c5\u01c5\4\2\u010e\u010e\u018f\u018f\7\2\u01b1\u01b2\u01b4"+
		"\u01b4\u01bb\u01bb\u01c0\u01c0\u01e4\u01e4\4\2##_`\4\2\30\30~~\4\2\u00c0"+
		"\u00c0\u01f4\u01f4\4\2\u01ee\u01ee\u01f6\u01f6\5\2!!\u00c0\u00c0\u01f4"+
		"\u01f4\3\2\u0216\u0217\4\2\30\30\u011e\u011e\7\2&&\u0101\u0101\u0120\u0121"+
		"\u0218\u0218\u021f\u021f\6\2!!\u00c0\u00c0\u011e\u011e\u01ca\u01ca\4\2"+
		"\u010d\u010d\u0120\u0120\5\2\62\62mm\u020c\u020c\4\2\30\30\u0348\u0348"+
		"\4\2\u0145\u0145\u0157\u0157\4\2\30\30\u01d1\u01d2\4\2\u011e\u011e\u033e"+
		"\u033e\4\2__\u01d6\u01d6\4\2\u0093\u0093\u0159\u0159\3\2\b\r\4\2\16\22"+
		"GG\4\2\u0196\u0196\u02e8\u02e8\4\2\u00bd\u00bd\u0178\u0178\n\2WX\u008e"+
		"\u008f\u00b7\u00b8\u00bb\u00bc\u0107\u0108\u0140\u0141\u0169\u0169\u02ab"+
		"\u02ab\4\2~~\u00a6\u00a6\17\2\u0144\u0144\u0146\u0146\u014b\u0153\u0155"+
		"\u0155\u015c\u015c\u0165\u0165\u0168\u0168\u0174\u0176\u0192\u0195\u019b"+
		"\u019f\u01a3\u01a3\u02a7\u02a7\u02aa\u02aa\3\2\u017e\u0187\4\2\u0179\u0179"+
		"\u018a\u018a\25\2<<GGLLWXdd\u008e\u008e\u009a\u009a\u00a9\u00a9\u00b7"+
		"\u00b7\u00bb\u00bb\u00ee\u00ee\u00f6\u00f6\u0107\u0107\u0125\u0125\u012e"+
		"\u012e\u013f\u0140\u023a\u02a6\u02a8\u02a9\u02ab\u0317\3\2\u033f\u0347"+
		"\3\2\u0318\u033e\4\2\u00cd\u00cd\u0143\u0143\5\2!!&&\u0111\u0111\4\2&"+
		"&\u0111\u0111\4\2\u0149\u014a\u0170\u0170\5\2\u0147\u0147\u016a\u016a"+
		"\u018d\u018d\3\2\27\31\5\2\u0082\u0082\u00a9\u00a9\u00f6\u00f6\3\2\u01a7"+
		"\u01a8\4\2}}\u00c8\u00c8\3\2\30\31\4\2PP\u00f9\u00f9\4\2!!aa\4\2\u0101"+
		"\u0101\u018a\u018a\5\2\u012b\u012b\u0159\u0159\u0190\u0190\5\2rr\u009b"+
		"\u009b\u0128\u0128\4\2~~\u00bd\u00bd\13\2\37\u00b8\u00ba\u014c\u014f\u0239"+
		"\u02ab\u02ab\u0320\u0320\u032c\u032c\u0333\u0334\u0338\u033a\u033d\u033e"+
		"\2\u1bd9\2\u02eb\3\2\2\2\4\u02ee\3\2\2\2\6\u031f\3\2\2\2\b\u0321\3\2\2"+
		"\2\n\u033c\3\2\2\2\f\u033e\3\2\2\2\16\u0344\3\2\2\2\20\u0350\3\2\2\2\22"+
		"\u0358\3\2\2\2\24\u035a\3\2\2\2\26\u0376\3\2\2\2\30\u0378\3\2\2\2\32\u0383"+
		"\3\2\2\2\34\u038b\3\2\2\2\36\u038d\3\2\2\2 \u039c\3\2\2\2\"\u03b9\3\2"+
		"\2\2$\u03cf\3\2\2\2&\u03d7\3\2\2\2(\u03df\3\2\2\2*\u03e7\3\2\2\2,\u03ef"+
		"\3\2\2\2.\u03f7\3\2\2\2\60\u03ff\3\2\2\2\62\u0413\3\2\2\2\64\u041e\3\2"+
		"\2\2\66\u0427\3\2\2\28\u0431\3\2\2\2:\u0447\3\2\2\2<\u044b\3\2\2\2>\u046a"+
		"\3\2\2\2@\u046d\3\2\2\2B\u04b3\3\2\2\2D\u04b7\3\2\2\2F\u04c4\3\2\2\2H"+
		"\u04cd\3\2\2\2J\u04e1\3\2\2\2L\u04ee\3\2\2\2N\u04f0\3\2\2\2P\u0504\3\2"+
		"\2\2R\u0518\3\2\2\2T\u052c\3\2\2\2V\u0541\3\2\2\2X\u0551\3\2\2\2Z\u05f5"+
		"\3\2\2\2\\\u06a0\3\2\2\2^\u06be\3\2\2\2`\u06f7\3\2\2\2b\u06f9\3\2\2\2"+
		"d\u06fe\3\2\2\2f\u0705\3\2\2\2h\u070a\3\2\2\2j\u072b\3\2\2\2l\u0741\3"+
		"\2\2\2n\u0743\3\2\2\2p\u0780\3\2\2\2r\u07b6\3\2\2\2t\u07d2\3\2\2\2v\u07e9"+
		"\3\2\2\2x\u07eb\3\2\2\2z\u080d\3\2\2\2|\u0822\3\2\2\2~\u0825\3\2\2\2\u0080"+
		"\u082f\3\2\2\2\u0082\u0857\3\2\2\2\u0084\u0859\3\2\2\2\u0086\u0863\3\2"+
		"\2\2\u0088\u0865\3\2\2\2\u008a\u087f\3\2\2\2\u008c\u0888\3\2\2\2\u008e"+
		"\u089f\3\2\2\2\u0090\u08a5\3\2\2\2\u0092\u08a9\3\2\2\2\u0094\u08ae\3\2"+
		"\2\2\u0096\u08b0\3\2\2\2\u0098\u08bf\3\2\2\2\u009a\u08de\3\2\2\2\u009c"+
		"\u090d\3\2\2\2\u009e\u090f\3\2\2\2\u00a0\u0930\3\2\2\2\u00a2\u0936\3\2"+
		"\2\2\u00a4\u0938\3\2\2\2\u00a6\u093b\3\2\2\2\u00a8\u0958\3\2\2\2\u00aa"+
		"\u095a\3\2\2\2\u00ac\u095c\3\2\2\2\u00ae\u0963\3\2\2\2\u00b0\u09d9\3\2"+
		"\2\2\u00b2\u0a61\3\2\2\2\u00b4\u0ae5\3\2\2\2\u00b6\u0b09\3\2\2\2\u00b8"+
		"\u0b49\3\2\2\2\u00ba\u0be6\3\2\2\2\u00bc\u0c1d\3\2\2\2\u00be\u0c77\3\2"+
		"\2\2\u00c0\u0c8a\3\2\2\2\u00c2\u0c94\3\2\2\2\u00c4\u0c9c\3\2\2\2\u00c6"+
		"\u0caa\3\2\2\2\u00c8\u0ccd\3\2\2\2\u00ca\u0cdd\3\2\2\2\u00cc\u0cdf\3\2"+
		"\2\2\u00ce\u0ce7\3\2\2\2\u00d0\u0ceb\3\2\2\2\u00d2\u0cfa\3\2\2\2\u00d4"+
		"\u0d0b\3\2\2\2\u00d6\u0d1c\3\2\2\2\u00d8\u0d20\3\2\2\2\u00da\u0d2c\3\2"+
		"\2\2\u00dc\u0d30\3\2\2\2\u00de\u0d37\3\2\2\2\u00e0\u0d5b\3\2\2\2\u00e2"+
		"\u0d5d\3\2\2\2\u00e4\u0d7c\3\2\2\2\u00e6\u0d98\3\2\2\2\u00e8\u0d9c\3\2"+
		"\2\2\u00ea\u0db1\3\2\2\2\u00ec\u0db3\3\2\2\2\u00ee\u0de2\3\2\2\2\u00f0"+
		"\u0de4\3\2\2\2\u00f2\u0dee\3\2\2\2\u00f4\u0df3\3\2\2\2\u00f6\u0df7\3\2"+
		"\2\2\u00f8\u0e01\3\2\2\2\u00fa\u0e0c\3\2\2\2\u00fc\u0e0e\3\2\2\2\u00fe"+
		"\u0e39\3\2\2\2\u0100\u0e3b\3\2\2\2\u0102\u0e3f\3\2\2\2\u0104\u0eb7\3\2"+
		"\2\2\u0106\u0eb9\3\2\2\2\u0108\u0ed6\3\2\2\2\u010a\u0ed8\3\2\2\2\u010c"+
		"\u0eda\3\2\2\2\u010e\u0ede\3\2\2\2\u0110\u0ee0\3\2\2\2\u0112\u0f0a\3\2"+
		"\2\2\u0114\u0f0e\3\2\2\2\u0116\u0f30\3\2\2\2\u0118\u0f48\3\2\2\2\u011a"+
		"\u0f75\3\2\2\2\u011c\u0f7d\3\2\2\2\u011e\u0f94\3\2\2\2\u0120\u0f9b\3\2"+
		"\2\2\u0122\u0f9d\3\2\2\2\u0124\u0fae\3\2\2\2\u0126\u0fcb\3\2\2\2\u0128"+
		"\u0fcd\3\2\2\2\u012a\u0fd5\3\2\2\2\u012c\u0fd7\3\2\2\2\u012e\u0fda\3\2"+
		"\2\2\u0130\u0fe0\3\2\2\2\u0132\u0fe5\3\2\2\2\u0134\u0feb\3\2\2\2\u0136"+
		"\u0ffc\3\2\2\2\u0138\u0ffe\3\2\2\2\u013a\u1013\3\2\2\2\u013c\u1025\3\2"+
		"\2\2\u013e\u1029\3\2\2\2\u0140\u1035\3\2\2\2\u0142\u1037\3\2\2\2\u0144"+
		"\u1039\3\2\2\2\u0146\u103b\3\2\2\2\u0148\u103d\3\2\2\2\u014a\u1071\3\2"+
		"\2\2\u014c\u1073\3\2\2\2\u014e\u1079\3\2\2\2\u0150\u1082\3\2\2\2\u0152"+
		"\u1087\3\2\2\2\u0154\u1098\3\2\2\2\u0156\u10a8\3\2\2\2\u0158\u10b4\3\2"+
		"\2\2\u015a\u10ca\3\2\2\2\u015c\u10ce\3\2\2\2\u015e\u10d7\3\2\2\2\u0160"+
		"\u10dc\3\2\2\2\u0162\u10e6\3\2\2\2\u0164\u10ff\3\2\2\2\u0166\u1101\3\2"+
		"\2\2\u0168\u111d\3\2\2\2\u016a\u111f\3\2\2\2\u016c\u1133\3\2\2\2\u016e"+
		"\u1146\3\2\2\2\u0170\u1148\3\2\2\2\u0172\u1152\3\2\2\2\u0174\u1162\3\2"+
		"\2\2\u0176\u1167\3\2\2\2\u0178\u1176\3\2\2\2\u017a\u1193\3\2\2\2\u017c"+
		"\u1195\3\2\2\2\u017e\u119b\3\2\2\2\u0180\u119d\3\2\2\2\u0182\u11a6\3\2"+
		"\2\2\u0184\u11af\3\2\2\2\u0186\u11b6\3\2\2\2\u0188\u11bb\3\2\2\2\u018a"+
		"\u11c4\3\2\2\2\u018c\u11c6\3\2\2\2\u018e\u11cd\3\2\2\2\u0190\u11d3\3\2"+
		"\2\2\u0192\u11d9\3\2\2\2\u0194\u11db\3\2\2\2\u0196\u11de\3\2\2\2\u0198"+
		"\u11e1\3\2\2\2\u019a\u11e4\3\2\2\2\u019c\u11e7\3\2\2\2\u019e\u11ea\3\2"+
		"\2\2\u01a0\u11ec\3\2\2\2\u01a2\u11ee\3\2\2\2\u01a4\u11f0\3\2\2\2\u01a6"+
		"\u1216\3\2\2\2\u01a8\u121d\3\2\2\2\u01aa\u121f\3\2\2\2\u01ac\u1221\3\2"+
		"\2\2\u01ae\u1223\3\2\2\2\u01b0\u122b\3\2\2\2\u01b2\u1237\3\2\2\2\u01b4"+
		"\u123d\3\2\2\2\u01b6\u124d\3\2\2\2\u01b8\u124f\3\2\2\2\u01ba\u1253\3\2"+
		"\2\2\u01bc\u1255\3\2\2\2\u01be\u1259\3\2\2\2\u01c0\u1261\3\2\2\2\u01c2"+
		"\u1275\3\2\2\2\u01c4\u1277\3\2\2\2\u01c6\u1279\3\2\2\2\u01c8\u127b\3\2"+
		"\2\2\u01ca\u128c\3\2\2\2\u01cc\u128e\3\2\2\2\u01ce\u129b\3\2\2\2\u01d0"+
		"\u129d\3\2\2\2\u01d2\u12a4\3\2\2\2\u01d4\u12ad\3\2\2\2\u01d6\u12ca\3\2"+
		"\2\2\u01d8\u12d6\3\2\2\2\u01da\u12e0\3\2\2\2\u01dc\u12e2\3\2\2\2\u01de"+
		"\u1302\3\2\2\2\u01e0\u1304\3\2\2\2\u01e2\u130a\3\2\2\2\u01e4\u1313\3\2"+
		"\2\2\u01e6\u131c\3\2\2\2\u01e8\u1321\3\2\2\2\u01ea\u1337\3\2\2\2\u01ec"+
		"\u1341\3\2\2\2\u01ee\u134b\3\2\2\2\u01f0\u1361\3\2\2\2\u01f2\u1363\3\2"+
		"\2\2\u01f4\u136e\3\2\2\2\u01f6\u1373\3\2\2\2\u01f8\u13e0\3\2\2\2\u01fa"+
		"\u13e2\3\2\2\2\u01fc\u13ea\3\2\2\2\u01fe\u13f1\3\2\2\2\u0200\u13f9\3\2"+
		"\2\2\u0202\u1400\3\2\2\2\u0204\u1404\3\2\2\2\u0206\u1406\3\2\2\2\u0208"+
		"\u1408\3\2\2\2\u020a\u140d\3\2\2\2\u020c\u1411\3\2\2\2\u020e\u1413\3\2"+
		"\2\2\u0210\u1415\3\2\2\2\u0212\u1417\3\2\2\2\u0214\u1419\3\2\2\2\u0216"+
		"\u141b\3\2\2\2\u0218\u1420\3\2\2\2\u021a\u142f\3\2\2\2\u021c\u1439\3\2"+
		"\2\2\u021e\u1447\3\2\2\2\u0220\u1453\3\2\2\2\u0222\u1457\3\2\2\2\u0224"+
		"\u1459\3\2\2\2\u0226\u145b\3\2\2\2\u0228\u1465\3\2\2\2\u022a\u146b\3\2"+
		"\2\2\u022c\u146d\3\2\2\2\u022e\u146f\3\2\2\2\u0230\u1471\3\2\2\2\u0232"+
		"\u1473\3\2\2\2\u0234\u1475\3\2\2\2\u0236\u1477\3\2\2\2\u0238\u147c\3\2"+
		"\2\2\u023a\u148e\3\2\2\2\u023c\u14a0\3\2\2\2\u023e\u14a7\3\2\2\2\u0240"+
		"\u14ae\3\2\2\2\u0242\u14ba\3\2\2\2\u0244\u14c1\3\2\2\2\u0246\u14c5\3\2"+
		"\2\2\u0248\u14c7\3\2\2\2\u024a\u14c9\3\2\2\2\u024c\u14cb\3\2\2\2\u024e"+
		"\u14cd\3\2\2\2\u0250\u14cf\3\2\2\2\u0252\u14d1\3\2\2\2\u0254\u14d3\3\2"+
		"\2\2\u0256\u14d5\3\2\2\2\u0258\u14d7\3\2\2\2\u025a\u14d9\3\2\2\2\u025c"+
		"\u14db\3\2\2\2\u025e\u14dd\3\2\2\2\u0260\u14df\3\2\2\2\u0262\u14e1\3\2"+
		"\2\2\u0264\u14e3\3\2\2\2\u0266\u14e5\3\2\2\2\u0268\u14e7\3\2\2\2\u026a"+
		"\u14e9\3\2\2\2\u026c\u14eb\3\2\2\2\u026e\u14ed\3\2\2\2\u0270\u14f1\3\2"+
		"\2\2\u0272\u14f6\3\2\2\2\u0274\u14fd\3\2\2\2\u0276\u1501\3\2\2\2\u0278"+
		"\u1514\3\2\2\2\u027a\u1516\3\2\2\2\u027c\u151f\3\2\2\2\u027e\u1521\3\2"+
		"\2\2\u0280\u152e\3\2\2\2\u0282\u153e\3\2\2\2\u0284\u15eb\3\2\2\2\u0286"+
		"\u15ed\3\2\2\2\u0288\u15f7\3\2\2\2\u028a\u1608\3\2\2\2\u028c\u1619\3\2"+
		"\2\2\u028e\u1632\3\2\2\2\u0290\u1634\3\2\2\2\u0292\u1656\3\2\2\2\u0294"+
		"\u165d\3\2\2\2\u0296\u166e\3\2\2\2\u0298\u1677\3\2\2\2\u029a\u167b\3\2"+
		"\2\2\u029c\u1698\3\2\2\2\u029e\u16ae\3\2\2\2\u02a0\u16b0\3\2\2\2\u02a2"+
		"\u16b2\3\2\2\2\u02a4\u16b4\3\2\2\2\u02a6\u16b6\3\2\2\2\u02a8\u16bc\3\2"+
		"\2\2\u02aa\u16bf\3\2\2\2\u02ac\u16c6\3\2\2\2\u02ae\u16c9\3\2\2\2\u02b0"+
		"\u16d1\3\2\2\2\u02b2\u16d5\3\2\2\2\u02b4\u16ef\3\2\2\2\u02b6\u1705\3\2"+
		"\2\2\u02b8\u1707\3\2\2\2\u02ba\u171c\3\2\2\2\u02bc\u172b\3\2\2\2\u02be"+
		"\u1748\3\2\2\2\u02c0\u176f\3\2\2\2\u02c2\u177d\3\2\2\2\u02c4\u178d\3\2"+
		"\2\2\u02c6\u179a\3\2\2\2\u02c8\u179e\3\2\2\2\u02ca\u17a3\3\2\2\2\u02cc"+
		"\u17b0\3\2\2\2\u02ce\u17b6\3\2\2\2\u02d0\u17ba\3\2\2\2\u02d2\u17bd\3\2"+
		"\2\2\u02d4\u17c7\3\2\2\2\u02d6\u17e2\3\2\2\2\u02d8\u17f1\3\2\2\2\u02da"+
		"\u180b\3\2\2\2\u02dc\u180d\3\2\2\2\u02de\u1811\3\2\2\2\u02e0\u1820\3\2"+
		"\2\2\u02e2\u1822\3\2\2\2\u02e4\u02e6\5\4\3\2\u02e5\u02e4\3\2\2\2\u02e6"+
		"\u02e9\3\2\2\2\u02e7\u02e5\3\2\2\2\u02e7\u02e8\3\2\2\2\u02e8\u02ec\3\2"+
		"\2\2\u02e9\u02e7\3\2\2\2\u02ea\u02ec\7\2\2\3\u02eb\u02e7\3\2\2\2\u02eb"+
		"\u02ea\3\2\2\2\u02ec\3\3\2\2\2\u02ed\u02ef\7t\2\2\u02ee\u02ed\3\2\2\2"+
		"\u02ee\u02ef\3\2\2\2\u02ef\u0311\3\2\2\2\u02f0\u0312\5\6\4\2\u02f1\u0312"+
		"\5\32\16\2\u02f2\u0312\5\36\20\2\u02f3\u0312\5 \21\2\u02f4\u0312\5\"\22"+
		"\2\u02f5\u0312\5$\23\2\u02f6\u0312\5&\24\2\u02f7\u0312\5(\25\2\u02f8\u0312"+
		"\5*\26\2\u02f9\u0312\5,\27\2\u02fa\u0312\5.\30\2\u02fb\u0312\5\60\31\2"+
		"\u02fc\u0312\5\62\32\2\u02fd\u0312\5\64\33\2\u02fe\u0312\5\66\34\2\u02ff"+
		"\u0312\58\35\2\u0300\u0312\5:\36\2\u0301\u0312\5<\37\2\u0302\u0312\5>"+
		" \2\u0303\u0312\5B\"\2\u0304\u0312\5@!\2\u0305\u0312\5D#\2\u0306\u0312"+
		"\5F$\2\u0307\u0312\5H%\2\u0308\u0312\5J&\2\u0309\u0312\5L\'\2\u030a\u0312"+
		"\5\b\5\2\u030b\u0312\5\24\13\2\u030c\u0312\5\30\r\2\u030d\u0312\5l\67"+
		"\2\u030e\u0312\5n8\2\u030f\u0312\5p9\2\u0310\u0312\5v<\2\u0311\u02f0\3"+
		"\2\2\2\u0311\u02f1\3\2\2\2\u0311\u02f2\3\2\2\2\u0311\u02f3\3\2\2\2\u0311"+
		"\u02f4\3\2\2\2\u0311\u02f5\3\2\2\2\u0311\u02f6\3\2\2\2\u0311\u02f7\3\2"+
		"\2\2\u0311\u02f8\3\2\2\2\u0311\u02f9\3\2\2\2\u0311\u02fa\3\2\2\2\u0311"+
		"\u02fb\3\2\2\2\u0311\u02fc\3\2\2\2\u0311\u02fd\3\2\2\2\u0311\u02fe\3\2"+
		"\2\2\u0311\u02ff\3\2\2\2\u0311\u0300\3\2\2\2\u0311\u0301\3\2\2\2\u0311"+
		"\u0302\3\2\2\2\u0311\u0303\3\2\2\2\u0311\u0304\3\2\2\2\u0311\u0305\3\2"+
		"\2\2\u0311\u0306\3\2\2\2\u0311\u0307\3\2\2\2\u0311\u0308\3\2\2\2\u0311"+
		"\u0309\3\2\2\2\u0311\u030a\3\2\2\2\u0311\u030b\3\2\2\2\u0311\u030c\3\2"+
		"\2\2\u0311\u030d\3\2\2\2\u0311\u030e\3\2\2\2\u0311\u030f\3\2\2\2\u0311"+
		"\u0310\3\2\2\2\u0312\u0319\3\2\2\2\u0313\u031a\7\25\2\2\u0314\u0316\7"+
		"n\2\2\u0315\u0317\7\23\2\2\u0316\u0315\3\2\2\2\u0316\u0317\3\2\2\2\u0317"+
		"\u031a\3\2\2\2\u0318\u031a\7\2\2\3\u0319\u0313\3\2\2\2\u0319\u0314\3\2"+
		"\2\2\u0319\u0318\3\2\2\2\u031a\5\3\2\2\2\u031b\u0320\5\u02bc\u015f\2\u031c"+
		"\u0320\5\u02d4\u016b\2\u031d\u0320\5\u02c0\u0161\2\u031e\u0320\5\u02be"+
		"\u0160\2\u031f\u031b\3\2\2\2\u031f\u031c\3\2\2\2\u031f\u031d\3\2\2\2\u031f"+
		"\u031e\3\2\2\2\u0320\7\3\2\2\2\u0321\u0322\7Z\2\2\u0322\u032c\5\n\6\2"+
		"\u0323\u0324\7\u00bf\2\2\u0324\u032d\7\u01af\2\2\u0325\u032a\7*\2\2\u0326"+
		"\u032a\7\u0099\2\2\u0327\u0328\7\u010c\2\2\u0328\u032a\t\2\2\2\u0329\u0325"+
		"\3\2\2\2\u0329\u0326\3\2\2\2\u0329\u0327\3\2\2\2\u032a\u032b\3\2\2\2\u032b"+
		"\u032d\7\u01af\2\2\u032c\u0323\3\2\2\2\u032c\u0329\3\2\2\2\u032c\u032d"+
		"\3\2\2\2\u032d\u032e\3\2\2\2\u032e\u0334\7T\2\2\u032f\u0333\5\16\b\2\u0330"+
		"\u0333\5\20\t\2\u0331\u0333\5\22\n\2\u0332\u032f\3\2\2\2\u0332\u0330\3"+
		"\2\2\2\u0332\u0331\3\2\2\2\u0333\u0336\3\2\2\2\u0334\u0332\3\2\2\2\u0334"+
		"\u0335\3\2\2\2\u0335\u0337\3\2\2\2\u0336\u0334\3\2\2\2\u0337\u033a\7\177"+
		"\2\2\u0338\u033b\5\u02c0\u0161\2\u0339\u033b\5\f\7\2\u033a\u0338\3\2\2"+
		"\2\u033a\u0339\3\2\2\2\u033b\t\3\2\2\2\u033c\u033d\5\u02e0\u0171\2\u033d"+
		"\13\3\2\2\2\u033e\u033f\5\u02e0\u0171\2\u033f\r\3\2\2\2\u0340\u0341\7"+
		"\u01a1\2\2\u0341\u0345\7\u008d\2\2\u0342\u0343\7\u013b\2\2\u0343\u0345"+
		"\7\u008d\2\2\u0344\u0340\3\2\2\2\u0344\u0342\3\2\2\2\u0345\17\3\2\2\2"+
		"\u0346\u0347\7\u01a1\2\2\u0347\u0351\7\u00f3\2\2\u0348\u0349\7\u013b\2"+
		"\2\u0349\u034e\7\u00f3\2\2\u034a\u034b\7\u0123\2\2\u034b\u034f\7\u01ac"+
		"\2\2\u034c\u034d\7\u0123\2\2\u034d\u034f\7\u01ad\2\2\u034e\u034a\3\2\2"+
		"\2\u034e\u034c\3\2\2\2\u034e\u034f\3\2\2\2\u034f\u0351\3\2\2\2\u0350\u0346"+
		"\3\2\2\2\u0350\u0348\3\2\2\2\u0351\21\3\2\2\2\u0352\u0353\7\u01a1\2\2"+
		"\u0353\u0354\7\u0102\2\2\u0354\u0359\7\u01ae\2\2\u0355\u0356\7\u013b\2"+
		"\2\u0356\u0357\7\u0102\2\2\u0357\u0359\7\u01ae\2\2\u0358\u0352\3\2\2\2"+
		"\u0358\u0355\3\2\2\2\u0359\23\3\2\2\2\u035a\u035b\7Z\2\2\u035b\u035c\5"+
		"\u021c\u010f\2\u035c\u035d\7\u0120\2\2\u035d\u035e\7\3\2\2\u035e\u035f"+
		"\5\u020a\u0106\2\u035f\u0361\5\u0102\u0082\2\u0360\u0362\5\26\f\2\u0361"+
		"\u0360\3\2\2\2\u0361\u0362\3\2\2\2\u0362\u036b\3\2\2\2\u0363\u0364\7\26"+
		"\2\2\u0364\u0365\5\u020a\u0106\2\u0365\u0367\5\u0102\u0082\2\u0366\u0368"+
		"\5\26\f\2\u0367\u0366\3\2\2\2\u0367\u0368\3\2\2\2\u0368\u036a\3\2\2\2"+
		"\u0369\u0363\3\2\2\2\u036a\u036d\3\2\2\2\u036b\u0369\3\2\2\2\u036b\u036c"+
		"\3\2\2\2\u036c\u036e\3\2\2\2\u036d\u036b\3\2\2\2\u036e\u036f\7\4\2\2\u036f"+
		"\25\3\2\2\2\u0370\u0371\7\u00c1\2\2\u0371\u0377\7\u00c2\2\2\u0372\u0373"+
		"\7\u00c1\2\2\u0373\u0374\7\u00c2\2\2\u0374\u0375\7\u013b\2\2\u0375\u0377"+
		"\7[\2\2\u0376\u0370\3\2\2\2\u0376\u0372\3\2\2\2\u0377\27\3\2\2\2\u0378"+
		"\u0379\7Z\2\2\u0379\u037e\5\f\7\2\u037a\u037b\7\26\2\2\u037b\u037d\5\f"+
		"\7\2\u037c\u037a\3\2\2\2\u037d\u0380\3\2\2\2\u037e\u037c\3\2\2\2\u037e"+
		"\u037f\3\2\2\2\u037f\u0381\3\2\2\2\u0380\u037e\3\2\2\2\u0381\u0382\7\u0115"+
		"\2\2\u0382\31\3\2\2\2\u0383\u0384\7\"\2\2\u0384\u0385\5\n\6\2\u0385\u0386"+
		"\7T\2\2\u0386\u0387\7\177\2\2\u0387\u0388\7\u00f1\2\2\u0388\u0389\7\u010e"+
		"\2\2\u0389\u038a\5\34\17\2\u038a\33\3\2\2\2\u038b\u038c\5\u0276\u013c"+
		"\2\u038c\35\3\2\2\2\u038d\u038e\7$\2\2\u038e\u038f\7V\2\2\u038f\u0398"+
		"\5\u0248\u0125\2\u0390\u0391\7\64\2\2\u0391\u0399\5\u0264\u0133\2\u0392"+
		"\u0393\7\u0095\2\2\u0393\u0399\5\u0264\u0133\2\u0394\u0395\7\u0118\2\2"+
		"\u0395\u0399\5\u0266\u0134\2\u0396\u0397\7;\2\2\u0397\u0399\5\u0208\u0105"+
		"\2\u0398\u0390\3\2\2\2\u0398\u0392\3\2\2\2\u0398\u0394\3\2\2\2\u0398\u0396"+
		"\3\2\2\2\u0399\u039a\3\2\2\2\u039a\u0398\3\2\2\2\u039a\u039b\3\2\2\2\u039b"+
		"\37\3\2\2\2\u039c\u03af\7$\2\2\u039d\u039e\7\u0083\2\2\u039e\u03aa\5\u0272"+
		"\u013a\2\u039f\u03a0\7\3\2\2\u03a0\u03a5\5\u00acW\2\u03a1\u03a2\7\26\2"+
		"\2\u03a2\u03a4\5\u00acW\2\u03a3\u03a1\3\2\2\2\u03a4\u03a7\3\2\2\2\u03a5"+
		"\u03a3\3\2\2\2\u03a5\u03a6\3\2\2\2\u03a6\u03a8\3\2\2\2\u03a7\u03a5\3\2"+
		"\2\2\u03a8\u03a9\7\4\2\2\u03a9\u03ab\3\2\2\2\u03aa\u039f\3\2\2\2\u03aa"+
		"\u03ab\3\2\2\2\u03ab\u03b0\3\2\2\2\u03ac\u03ad\7\u0113\2\2\u03ad\u03ae"+
		"\7\u0083\2\2\u03ae\u03b0\5\u0274\u013b\2\u03af\u039d\3\2\2\2\u03af\u03ac"+
		"\3\2\2\2\u03b0\u03b2\3\2\2\2\u03b1\u03b3\7\u00f0\2\2\u03b2\u03b1\3\2\2"+
		"\2\u03b2\u03b3\3\2\2\2\u03b3\u03b5\3\2\2\2\u03b4\u03b6\5\u00b2Z\2\u03b5"+
		"\u03b4\3\2\2\2\u03b6\u03b7\3\2\2\2\u03b7\u03b5\3\2\2\2\u03b7\u03b8\3\2"+
		"\2\2\u03b8!\3\2\2\2\u03b9\u03ba\7$\2\2\u03ba\u03bb\7\u0094\2\2\u03bb\u03bd"+
		"\5\u023c\u011f\2\u03bc\u03be\5\u009aN\2\u03bd\u03bc\3\2\2\2\u03bd\u03be"+
		"\3\2\2\2\u03be\u03c2\3\2\2\2\u03bf\u03c1\5\u009cO\2\u03c0\u03bf\3\2\2"+
		"\2\u03c1\u03c4\3\2\2\2\u03c2\u03c0\3\2\2\2\u03c2\u03c3\3\2\2\2\u03c3\u03cd"+
		"\3\2\2\2\u03c4\u03c2\3\2\2\2\u03c5\u03ca\5\u009eP\2\u03c6\u03c7\7\26\2"+
		"\2\u03c7\u03c9\5\u009eP\2\u03c8\u03c6\3\2\2\2\u03c9\u03cc\3\2\2\2\u03ca"+
		"\u03c8\3\2\2\2\u03ca\u03cb\3\2\2\2\u03cb\u03ce\3\2\2\2\u03cc\u03ca\3\2"+
		"\2\2\u03cd\u03c5\3\2\2\2\u03cd\u03ce\3\2\2\2\u03ce#\3\2\2\2\u03cf\u03d0"+
		"\7$\2\2\u03d0\u03d1\7\u01d5\2\2\u03d1\u03d5\5\u023e\u0120\2\u03d2\u03d6"+
		"\7\u01d6\2\2\u03d3\u03d6\7_\2\2\u03d4\u03d6\5\u009aN\2\u03d5\u03d2\3\2"+
		"\2\2\u03d5\u03d3\3\2\2\2\u03d5\u03d4\3\2\2\2\u03d6%\3\2\2\2\u03d7\u03d8"+
		"\7$\2\2\u03d8\u03d9\7\u01d7\2\2\u03d9\u03dd\5\u0240\u0121\2\u03da\u03de"+
		"\7\u01d6\2\2\u03db\u03de\7_\2\2\u03dc\u03de\5\u009aN\2\u03dd\u03da\3\2"+
		"\2\2\u03dd\u03db\3\2\2\2\u03dd\u03dc\3\2\2\2\u03de\'\3\2\2\2\u03df\u03e0"+
		"\7$\2\2\u03e0\u03e1\7\u00e3\2\2\u03e1\u03e3\5\u0242\u0122\2\u03e2\u03e4"+
		"\5\u00b4[\2\u03e3\u03e2\3\2\2\2\u03e4\u03e5\3\2\2\2\u03e5\u03e3\3\2\2"+
		"\2\u03e5\u03e6\3\2\2\2\u03e6)\3\2\2\2\u03e7\u03e8\7$\2\2\u03e8\u03e9\7"+
		"\u010d\2\2\u03e9\u03eb\5\u0244\u0123\2\u03ea\u03ec\5\u00b6\\\2\u03eb\u03ea"+
		"\3\2\2\2\u03ec\u03ed\3\2\2\2\u03ed\u03eb\3\2\2\2\u03ed\u03ee\3\2\2\2\u03ee"+
		"+\3\2\2\2\u03ef\u03f0\7$\2\2\u03f0\u03f1\7\u0118\2\2\u03f1\u03f3\5\u0266"+
		"\u0134\2\u03f2\u03f4\5\u00b8]\2\u03f3\u03f2\3\2\2\2\u03f4\u03f5\3\2\2"+
		"\2\u03f5\u03f3\3\2\2\2\u03f5\u03f6\3\2\2\2\u03f6-\3\2\2\2\u03f7\u03f8"+
		"\7$\2\2\u03f8\u03f9\7\u0120\2\2\u03f9\u03fb\5\u021e\u0110\2\u03fa\u03fc"+
		"\5\u00ba^\2\u03fb\u03fa\3\2\2\2\u03fc\u03fd\3\2\2\2\u03fd\u03fb\3\2\2"+
		"\2\u03fd\u03fe\3\2\2\2\u03fe/\3\2\2\2\u03ff\u0400\7$\2\2\u0400\u0404\7"+
		"\u0121\2\2\u0401\u0402\5\u0248\u0125\2\u0402\u0403\7\23\2\2\u0403\u0405"+
		"\3\2\2\2\u0404\u0401\3\2\2\2\u0404\u0405\3\2\2\2\u0405\u0406\3\2\2\2\u0406"+
		"\u040a\5\u024a\u0126\2\u0407\u0409\5\u00bc_\2\u0408\u0407\3\2\2\2\u0409"+
		"\u040c\3\2\2\2\u040a\u0408\3\2\2\2\u040a\u040b\3\2\2\2\u040b\u040e\3\2"+
		"\2\2\u040c\u040a\3\2\2\2\u040d\u040f\5\u00d2j\2\u040e\u040d\3\2\2\2\u040e"+
		"\u040f\3\2\2\2\u040f\u0411\3\2\2\2\u0410\u0412\5\u00d8m\2\u0411\u0410"+
		"\3\2\2\2\u0411\u0412\3\2\2\2\u0412\61\3\2\2\2\u0413\u0414\7$\2\2\u0414"+
		"\u0415\7\u0124\2\2\u0415\u0416\5\u021a\u010e\2\u0416\u0417\7\23\2\2\u0417"+
		"\u0418\3\2\2\2\u0418\u041a\5\u024e\u0128\2\u0419\u041b\7\u00c1\2\2\u041a"+
		"\u0419\3\2\2\2\u041a\u041b\3\2\2\2\u041b\u041c\3\2\2\2\u041c\u041d\7\u01c3"+
		"\2\2\u041d\63\3\2\2\2\u041e\u041f\7$\2\2\u041f\u0420\7\u022f\2\2\u0420"+
		"\u0421\7\u0229\2\2\u0421\u0423\5\u0250\u0129\2\u0422\u0424\5\u00be`\2"+
		"\u0423\u0422\3\2\2\2\u0424\u0425\3\2\2\2\u0425\u0423\3\2\2\2\u0425\u0426"+
		"\3\2\2\2\u0426\65\3\2\2\2\u0427\u0428\7$\2\2\u0428\u0429\7\u0134\2\2\u0429"+
		"\u042a\5\u0228\u0115\2\u042a\u042f\7\u01d4\2\2\u042b\u042c\7\u012c\2\2"+
		"\u042c\u042d\7\u01c9\2\2\u042d\u042e\7\u01cb\2\2\u042e\u0430\5\u00a8U"+
		"\2\u042f\u042b\3\2\2\2\u042f\u0430\3\2\2\2\u0430\67\3\2\2\2\u0431\u0434"+
		"\7+\2\2\u0432\u0433\7\u00f1\2\2\u0433\u0435\7\u010e\2\2\u0434\u0432\3"+
		"\2\2\2\u0434\u0435\3\2\2\2\u0435\u0436\3\2\2\2\u0436\u0437\t\3\2\2\u0437"+
		"\u0438\7\3\2\2\u0438\u043d\5\34\17\2\u0439\u043a\7\26\2\2\u043a\u043c"+
		"\5\34\17\2\u043b\u0439\3\2\2\2\u043c\u043f\3\2\2\2\u043d\u043b\3\2\2\2"+
		"\u043d\u043e\3\2\2\2\u043e\u0440\3\2\2\2\u043f\u043d\3\2\2\2\u0440\u0441"+
		"\7\4\2\2\u0441\u0442\7\u013b\2\2\u0442\u0445\7\u00e3\2\2\u0443\u0446\5"+
		"\u0242\u0122\2\u0444\u0446\5\u0276\u013c\2\u0445\u0443\3\2\2\2\u0445\u0444"+
		"\3\2\2\2\u04469\3\2\2\2\u0447\u0448\7\62\2\2\u0448\u0449\7Z\2\2\u0449"+
		"\u044a\7\u0230\2\2\u044a;\3\2\2\2\u044b\u044e\7\66\2\2\u044c\u044f\5\u0242"+
		"\u0122\2\u044d\u044f\5\u0276\u013c\2\u044e\u044c\3\2\2\2\u044e\u044d\3"+
		"\2\2\2\u044f\u0450\3\2\2\2\u0450\u0466\7\3\2\2\u0451\u0456\5\u014a\u00a6"+
		"\2\u0452\u0456\7\u00c2\2\2\u0453\u0454\7\u0120\2\2\u0454\u0456\5\u021c"+
		"\u010f\2\u0455\u0451\3\2\2\2\u0455\u0452\3\2\2\2\u0455\u0453\3\2\2\2\u0456"+
		"\u0460\3\2\2\2\u0457\u045c\7\26\2\2\u0458\u045d\5\u014a\u00a6\2\u0459"+
		"\u045d\7\u00c2\2\2\u045a\u045b\7\u0120\2\2\u045b\u045d\5\u021c\u010f\2"+
		"\u045c\u0458\3\2\2\2\u045c\u0459\3\2\2\2\u045c\u045a\3\2\2\2\u045d\u045f"+
		"\3\2\2\2\u045e\u0457\3\2\2\2\u045f\u0462\3\2\2\2\u0460\u045e\3\2\2\2\u0460"+
		"\u0461\3\2\2\2\u0461\u0467\3\2\2\2\u0462\u0460\3\2\2\2\u0463\u0464\7\u012c"+
		"\2\2\u0464\u0465\7]\2\2\u0465\u0467\5\u0276\u013c\2\u0466\u0455\3\2\2"+
		"\2\u0466\u0463\3\2\2\2\u0467\u0468\3\2\2\2\u0468\u0469\7\4\2\2\u0469="+
		"\3\2\2\2\u046a\u046b\7@\2\2\u046b\u046c\5\n\6\2\u046c?\3\2\2\2\u046d\u046e"+
		"\7E\2\2\u046e\u04b1\7\u00c9\2\2\u046f\u04ac\5\u00dco\2\u0470\u0471\7D"+
		"\2\2\u0471\u0472\5\u021c\u010f\2\u0472\u0473\7\23\2\2\u0473\u0474\5\u020a"+
		"\u0106\2\u0474\u04ac\3\2\2\2\u0475\u047a\5\u00e0q\2\u0476\u0477\7\u0231"+
		"\2\2\u0477\u047b\7\u0232\2\2\u0478\u0479\7\u0232\2\2\u0479\u047b\5\u0238"+
		"\u011d\2\u047a\u0476\3\2\2\2\u047a\u0478\3\2\2\2\u047a\u047b\3\2\2\2\u047b"+
		"\u04ac\3\2\2\2\u047c\u047d\7\u0094\2\2\u047d\u04ac\5\u023c\u011f\2\u047e"+
		"\u047f\7\u00d2\2\2\u047f\u0480\5\u0142\u00a2\2\u0480\u0481\7\23\2\2\u0481"+
		"\u0486\5\u022c\u0117\2\u0482\u0484\7\u0232\2\2\u0483\u0482\3\2\2\2\u0483"+
		"\u0484\3\2\2\2\u0484\u0485\3\2\2\2\u0485\u0487\5\u023a\u011e\2\u0486\u0483"+
		"\3\2\2\2\u0486\u0487\3\2\2\2\u0487\u04ac\3\2\2\2\u0488\u0489\7\u00dc\2"+
		"\2\u0489\u04ac\5\u022e\u0118\2\u048a\u048b\7\u00e3\2\2\u048b\u0490\5\u0242"+
		"\u0122\2\u048c\u048d\7\u0231\2\2\u048d\u0491\7\u0232\2\2\u048e\u048f\7"+
		"\u0232\2\2\u048f\u0491\5\u0238\u011d\2\u0490\u048c\3\2\2\2\u0490\u048e"+
		"\3\2\2\2\u0490\u0491\3\2\2\2\u0491\u04ac\3\2\2\2\u0492\u0493\7\u00f7\2"+
		"\2\u0493\u04ac\5\u0256\u012c\2\u0494\u0495\7\u010d\2\2\u0495\u04ac\5\u0244"+
		"\u0123\2\u0496\u0497\7\u0120\2\2\u0497\u04ac\5\u021c\u010f\2\u0498\u0499"+
		"\7\u0124\2\2\u0499\u049e\5\u024e\u0128\2\u049a\u049b\7\u0231\2\2\u049b"+
		"\u049f\7\u0232\2\2\u049c\u049d\7\u0232\2\2\u049d\u049f\5\u0238\u011d\2"+
		"\u049e\u049a\3\2\2\2\u049e\u049c\3\2\2\2\u049e\u049f\3\2\2\2\u049f\u04ac"+
		"\3\2\2\2\u04a0\u04a1\7\u022f\2\2\u04a1\u04a2\7\u0229\2\2\u04a2\u04ac\5"+
		"\u0250\u0129\2\u04a3\u04a4\7\u0126\2\2\u04a4\u04ac\5\u0230\u0119\2\u04a5"+
		"\u04a6\7\u01d5\2\2\u04a6\u04ac\5\u023e\u0120\2\u04a7\u04a8\7\u01d7\2\2"+
		"\u04a8\u04ac\5\u0240\u0121\2\u04a9\u04aa\7\u0130\2\2\u04aa\u04ac\5\u0232"+
		"\u011a\2\u04ab\u046f\3\2\2\2\u04ab\u0470\3\2\2\2\u04ab\u0475\3\2\2\2\u04ab"+
		"\u047c\3\2\2\2\u04ab\u047e\3\2\2\2\u04ab\u0488\3\2\2\2\u04ab\u048a\3\2"+
		"\2\2\u04ab\u0492\3\2\2\2\u04ab\u0494\3\2\2\2\u04ab\u0496\3\2\2\2\u04ab"+
		"\u0498\3\2\2\2\u04ab\u04a0\3\2\2\2\u04ab\u04a3\3\2\2\2\u04ab\u04a5\3\2"+
		"\2\2\u04ab\u04a7\3\2\2\2\u04ab\u04a9\3\2\2\2\u04ac\u04ad\3\2\2\2\u04ad"+
		"\u04ae\7\u009d\2\2\u04ae\u04af\7\27\2\2\u04af\u04b2\3\2\2\2\u04b0\u04b2"+
		"\5\u00dep\2\u04b1\u04ab\3\2\2\2\u04b1\u04b0\3\2\2\2\u04b2A\3\2\2\2\u04b3"+
		"\u04b5\7F\2\2\u04b4\u04b6\7\u0234\2\2\u04b5\u04b4\3\2\2\2\u04b5\u04b6"+
		"\3\2\2\2\u04b6C\3\2\2\2\u04b7\u04c2\7I\2\2\u04b8\u04bb\7\u0123\2\2\u04b9"+
		"\u04bc\5\u0218\u010d\2\u04ba\u04bc\5\u0276\u013c\2\u04bb\u04b9\3\2\2\2"+
		"\u04bb\u04ba\3\2\2\2\u04bc\u04be\3\2\2\2\u04bd\u04bf\5f\64\2\u04be\u04bd"+
		"\3\2\2\2\u04be\u04bf\3\2\2\2\u04bf\u04c3\3\2\2\2\u04c0\u04c3\7\u020a\2"+
		"\2\u04c1\u04c3\5f\64\2\u04c2\u04b8\3\2\2\2\u04c2\u04c0\3\2\2\2\u04c2\u04c1"+
		"\3\2\2\2\u04c2\u04c3\3\2\2\2\u04c3E\3\2\2\2\u04c4\u04c6\7O\2\2\u04c5\u04c7"+
		"\7\u00e6\2\2\u04c6\u04c5\3\2\2\2\u04c6\u04c7\3\2\2\2\u04c7\u04c8\3\2\2"+
		"\2\u04c8\u04cb\7\u0233\2\2\u04c9\u04cc\5b\62\2\u04ca\u04cc\5d\63\2\u04cb"+
		"\u04c9\3\2\2\2\u04cb\u04ca\3\2\2\2\u04ccG\3\2\2\2\u04cd\u04ce\7O\2\2\u04ce"+
		"\u04cf\t\4\2\2\u04cf\u04d0\7\u0120\2\2\u04d0\u04d1\5\u0220\u0111\2\u04d1"+
		"\u04d3\7\u0092\2\2\u04d2\u04d4\5\u0248\u0125\2\u04d3\u04d2\3\2\2\2\u04d3"+
		"\u04d4\3\2\2\2\u04d4\u04d5\3\2\2\2\u04d5\u04d6\5\u024a\u0126\2\u04d6\u04d7"+
		"\7\u0119\2\2\u04d7\u04da\5\u021c\u010f\2\u04d8\u04d9\7\u01f0\2\2\u04d9"+
		"\u04db\t\5\2\2\u04da\u04d8\3\2\2\2\u04da\u04db\3\2\2\2\u04db\u04dc\3\2"+
		"\2\2\u04dc\u04dd\7D\2\2\u04dd\u04de\5\u020a\u0106\2\u04de\u04df\7\u00d5"+
		"\2\2\u04df\u04e0\7\30\2\2\u04e0I\3\2\2\2\u04e1\u04e2\7O\2\2\u04e2\u04e3"+
		"\7V\2\2\u04e3\u04e7\5\u0248\u0125\2\u04e4\u04e6\5\u00c0a\2\u04e5\u04e4"+
		"\3\2\2\2\u04e6\u04e9\3\2\2\2\u04e7\u04e5\3\2\2\2\u04e7\u04e8\3\2\2\2\u04e8"+
		"K\3\2\2\2\u04e9\u04e7\3\2\2\2\u04ea\u04ef\5N(\2\u04eb\u04ef\5P)\2\u04ec"+
		"\u04ef\5R*\2\u04ed\u04ef\5T+\2\u04ee\u04ea\3\2\2\2\u04ee\u04eb\3\2\2\2"+
		"\u04ee\u04ec\3\2\2\2\u04ee\u04ed\3\2\2\2\u04efM\3\2\2\2\u04f0\u04f1\7"+
		"O\2\2\u04f1\u04f2\7\u0083\2\2\u04f2\u04f3\5\u0272\u013a\2\u04f3\u04fc"+
		"\7\3\2\2\u04f4\u04f9\5V,\2\u04f5\u04f6\7\26\2\2\u04f6\u04f8\5V,\2\u04f7"+
		"\u04f5\3\2\2\2\u04f8\u04fb\3\2\2\2\u04f9\u04f7\3\2\2\2\u04f9\u04fa\3\2"+
		"\2\2\u04fa\u04fd\3\2\2\2\u04fb\u04f9\3\2\2\2\u04fc\u04f4\3\2\2\2\u04fc"+
		"\u04fd\3\2\2\2\u04fd\u04fe\3\2\2\2\u04fe\u0500\7\4\2\2\u04ff\u0501\5Z"+
		".\2\u0500\u04ff\3\2\2\2\u0501\u0502\3\2\2\2\u0502\u0500\3\2\2\2\u0502"+
		"\u0503\3\2\2\2\u0503O\3\2\2\2\u0504\u0505\7O\2\2\u0505\u0506\7\u0083\2"+
		"\2\u0506\u0507\5\u0272\u013a\2\u0507\u0510\7\3\2\2\u0508\u050d\5V,\2\u0509"+
		"\u050a\7\26\2\2\u050a\u050c\5V,\2\u050b\u0509\3\2\2\2\u050c\u050f\3\2"+
		"\2\2\u050d\u050b\3\2\2\2\u050d\u050e\3\2\2\2\u050e\u0511\3\2\2\2\u050f"+
		"\u050d\3\2\2\2\u0510\u0508\3\2\2\2\u0510\u0511\3\2\2\2\u0511\u0512\3\2"+
		"\2\2\u0512\u0514\7\4\2\2\u0513\u0515\5\\/\2\u0514\u0513\3\2\2\2\u0515"+
		"\u0516\3\2\2\2\u0516\u0514\3\2\2\2\u0516\u0517\3\2\2\2\u0517Q\3\2\2\2"+
		"\u0518\u0519\7O\2\2\u0519\u051a\7\u0083\2\2\u051a\u051b\5\u0272\u013a"+
		"\2\u051b\u0524\7\3\2\2\u051c\u0521\5V,\2\u051d\u051e\7\26\2\2\u051e\u0520"+
		"\5V,\2\u051f\u051d\3\2\2\2\u0520\u0523\3\2\2\2\u0521\u051f\3\2\2\2\u0521"+
		"\u0522\3\2\2\2\u0522\u0525\3\2\2\2\u0523\u0521\3\2\2\2\u0524\u051c\3\2"+
		"\2\2\u0524\u0525\3\2\2\2\u0525\u0526\3\2\2\2\u0526\u0528\7\4\2\2\u0527"+
		"\u0529\5^\60\2\u0528\u0527\3\2\2\2\u0529\u052a\3\2\2\2\u052a\u0528\3\2"+
		"\2\2\u052a\u052b\3\2\2\2\u052bS\3\2\2\2\u052c\u052d\7O\2\2\u052d\u052e"+
		"\7\u0083\2\2\u052e\u052f\5\u0272\u013a\2\u052f\u0538\7\3\2\2\u0530\u0535"+
		"\5X-\2\u0531\u0532\7\26\2\2\u0532\u0534\5X-\2\u0533\u0531\3\2\2\2\u0534"+
		"\u0537\3\2\2\2\u0535\u0533\3\2\2\2\u0535\u0536\3\2\2\2\u0536\u0539\3\2"+
		"\2\2\u0537\u0535\3\2\2\2\u0538\u0530\3\2\2\2\u0538\u0539\3\2\2\2\u0539"+
		"\u053a\3\2\2\2\u053a\u053c\7\4\2\2\u053b\u053d\5`\61\2\u053c\u053b\3\2"+
		"\2\2\u053d\u053e\3\2\2\2\u053e\u053c\3\2\2\2\u053e\u053f\3\2\2\2\u053f"+
		"U\3\2\2\2\u0540\u0542\5\u025a\u012e\2\u0541\u0540\3\2\2\2\u0541\u0542"+
		"\3\2\2\2\u0542\u054f\3\2\2\2\u0543\u0546\5\u00aeX\2\u0544\u0545\7)\2\2"+
		"\u0545\u0547\7\u00ae\2\2\u0546\u0544\3\2\2\2\u0546\u0547\3\2\2\2\u0547"+
		"\u0550\3\2\2\2\u0548\u0549\7\u0120\2\2\u0549\u054a\7\u00aa\2\2\u054a\u054d"+
		"\5\u021c\u010f\2\u054b\u054c\7)\2\2\u054c\u054e\7\u00ae\2\2\u054d\u054b"+
		"\3\2\2\2\u054d\u054e\3\2\2\2\u054e\u0550\3\2\2\2\u054f\u0543\3\2\2\2\u054f"+
		"\u0548\3\2\2\2\u0550W\3\2\2\2\u0551\u0552\5\u025a\u012e\2\u0552\u0553"+
		"\5\u00aeX\2\u0553Y\3\2\2\2\u0554\u0562\7\u00f4\2\2\u0555\u0558\5\u0102"+
		"\u0082\2\u0556\u0557\7)\2\2\u0557\u0559\7\u00ae\2\2\u0558\u0556\3\2\2"+
		"\2\u0558\u0559\3\2\2\2\u0559\u0563\3\2\2\2\u055a\u055b\5\u0102\u0082\2"+
		"\u055b\u055c\7:\2\2\u055c\u055d\7\u0081\2\2\u055d\u0560\5\u0102\u0082"+
		"\2\u055e\u055f\7)\2\2\u055f\u0561\7\u00ae\2\2\u0560\u055e\3\2\2\2\u0560"+
		"\u0561\3\2\2\2\u0561\u0563\3\2\2\2\u0562\u0555\3\2\2\2\u0562\u055a\3\2"+
		"\2\2\u0563\u05f6\3\2\2\2\u0564\u056a\7y\2\2\u0565\u0568\7\u01bd\2\2\u0566"+
		"\u0569\5\u013e\u00a0\2\u0567\u0569\5\u02e0\u0171\2\u0568\u0566\3\2\2\2"+
		"\u0568\u0567\3\2\2\2\u0569\u056b\3\2\2\2\u056a\u0565\3\2\2\2\u056a\u056b"+
		"\3\2\2\2\u056b\u05f6\3\2\2\2\u056c\u056d\7\u00a5\2\2\u056d\u05f6\t\6\2"+
		"\2\u056e\u056f\7\u00d4\2\2\u056f\u0570\7\u011a\2\2\u0570\u05f6\t\7\2\2"+
		"\u0571\u0573\7\u00c1\2\2\u0572\u0571\3\2\2\2\u0572\u0573\3\2\2\2\u0573"+
		"\u0574\3\2\2\2\u0574\u05f6\7^\2\2\u0575\u0577\7\u00c1\2\2\u0576\u0575"+
		"\3\2\2\2\u0576\u0577\3\2\2\2\u0577\u0578\3\2\2\2\u0578\u05f6\7\u0131\2"+
		"\2\u0579\u05f6\7z\2\2\u057a\u057b\7\u00f4\2\2\u057b\u057e\7\u00c2\2\2"+
		"\u057c\u057e\7\u01b3\2\2\u057d\u057a\3\2\2\2\u057d\u057c\3\2\2\2\u057e"+
		"\u057f\3\2\2\2\u057f\u0580\7\u00c9\2\2\u0580\u0581\7\u00c2\2\2\u0581\u05f6"+
		"\7\u015f\2\2\u0582\u0583\7\u00c2\2\2\u0583\u05f6\7\66\2\2\u0584\u0585"+
		"\7\u00ba\2\2\u0585\u0586\7\u01c5\2\2\u0586\u058f\7U\2\2\u0587\u0588\7"+
		"\u00e9\2\2\u0588\u0589\7\u01c5\2\2\u0589\u058f\7U\2\2\u058a\u058b\7L\2"+
		"\2\u058b\u058f\7\u01c5\2\2\u058c\u058d\7\u00bf\2\2\u058d\u058f\7\u01c5"+
		"\2\2\u058e\u0584\3\2\2\2\u058e\u0587\3\2\2\2\u058e\u058a\3\2\2\2\u058e"+
		"\u058c\3\2\2\2\u058f\u05f6\3\2\2\2\u0590\u0592\7\u00bf\2\2\u0591\u0590"+
		"\3\2\2\2\u0591\u0592\3\2\2\2\u0592\u0593\3\2\2\2\u0593\u0594\7y\2\2\u0594"+
		"\u05f6\7\u01b0\2\2\u0595\u0596\7\u00d2\2\2\u0596\u0597\7\u00d9\2\2\u0597"+
		"\u059c\5\u0140\u00a1\2\u0598\u0599\7\u00bf\2\2\u0599\u059a\7\u00d2\2\2"+
		"\u059a\u059c\7\u00d9\2\2\u059b\u0595\3\2\2\2\u059b\u0598\3\2\2\2\u059c"+
		"\u05f6\3\2\2\2\u059d\u059e\7\u00bf\2\2\u059e\u05a2\7\u0106\2\2\u059f\u05a0"+
		"\7\u0106\2\2\u05a0\u05a2\7\30\2\2\u05a1\u059d\3\2\2\2\u05a1\u059f\3\2"+
		"\2\2\u05a2\u05f6\3\2\2\2\u05a3\u05a5\7\u00bf\2\2\u05a4\u05a3\3\2\2\2\u05a4"+
		"\u05a5\3\2\2\2\u05a5\u05a6\3\2\2\2\u05a6\u05a7\7}\2\2\u05a7\u05f6\7\66"+
		"\2\2\u05a8\u05a9\t\b\2\2\u05a9\u05f6\7\u01bf\2\2\u05aa\u05ac\7\u00bf\2"+
		"\2\u05ab\u05aa\3\2\2\2\u05ab\u05ac\3\2\2\2\u05ac\u05ad\3\2\2\2\u05ad\u05f6"+
		"\7Y\2\2\u05ae\u05af\7\u0256\2\2\u05af\u05f6\7\30\2\2\u05b0\u05b1\7\u00bf"+
		"\2\2\u05b1\u05b5\7C\2\2\u05b2\u05b3\7C\2\2\u05b3\u05b5\5\u0142\u00a2\2"+
		"\u05b4\u05b0\3\2\2\2\u05b4\u05b2\3\2\2\2\u05b5\u05f6\3\2\2\2\u05b6\u05b7"+
		"\7\u013c\2\2\u05b7\u05bd\7\u01b8\2\2\u05b8\u05be\5\u02e0\u0171\2\u05b9"+
		"\u05ba\7\3\2\2\u05ba\u05bb\5\u02e0\u0171\2\u05bb\u05bc\7\4\2\2\u05bc\u05be"+
		"\3\2\2\2\u05bd\u05b8\3\2\2\2\u05bd\u05b9\3\2\2\2\u05be\u05f6\3\2\2\2\u05bf"+
		"\u05c4\7,\2\2\u05c0\u05c1\7\u00bf\2\2\u05c1\u05c5\7\u00ab\2\2\u05c2\u05c3"+
		"\7\u00ab\2\2\u05c3\u05c5\7\30\2\2\u05c4\u05c0\3\2\2\2\u05c4\u05c2\3\2"+
		"\2\2\u05c5\u05f6\3\2\2\2\u05c6\u05c7\7\u0117\2\2\u05c7\u05c8\7\u01c2\2"+
		"\2\u05c8\u05f6\t\5\2\2\u05c9\u05ca\7\u00e4\2\2\u05ca\u05cb\7\u0126\2\2"+
		"\u05cb\u05f6\t\t\2";
	private static final String _serializedATNSegment1 =
		"\2\u05cc\u05cd\7\u010a\2\2\u05cd\u05f6\t\n\2\2\u05ce\u05cf\7\u01c6\2\2"+
		"\u05cf\u05d0\7 \2\2\u05d0\u05d1\7\u011e\2\2\u05d1\u05d2\7[\2\2\u05d2\u05db"+
		"\7\u01ba\2\2\u05d3\u05d4\7\u01c6\2\2\u05d4\u05d5\7 \2\2\u05d5\u05d6\7"+
		"\30\2\2\u05d6\u05db\7\u01ba\2\2\u05d7\u05d8\7N\2\2\u05d8\u05d9\7 \2\2"+
		"\u05d9\u05db\7\u01b9\2\2\u05da\u05ce\3\2\2\2\u05da\u05d3\3\2\2\2\u05da"+
		"\u05d7\3\2\2\2\u05db\u05f6\3\2\2\2\u05dc\u05dd\7\u0103\2\2\u05dd\u05de"+
		"\7\u01be\2\2\u05de\u05f6\5\u0144\u00a3\2\u05df\u05e0\t\13\2\2\u05e0\u05e1"+
		"\7\u01c4\2\2\u05e1\u05f6\7\u01c1\2\2\u05e2\u05e3\7\u0116\2\2\u05e3\u05f6"+
		"\7\u01b7\2\2\u05e4\u05e6\7\u00c1\2\2\u05e5\u05e4\3\2\2\2\u05e5\u05e6\3"+
		"\2\2\2\u05e6\u05e7\3\2\2\2\u05e7\u05f6\7\u01c3\2\2\u05e8\u05ea\7\u0113"+
		"\2\2\u05e9\u05eb\5\u0274\u013b\2\u05ea\u05e9\3\2\2\2\u05ea\u05eb\3\2\2"+
		"\2\u05eb\u05f6\3\2\2\2\u05ec\u05f1\7\u00d4\2\2\u05ed\u05ee\7;\2\2\u05ee"+
		"\u05f2\t\f\2\2\u05ef\u05f0\7\u02ff\2\2\u05f0\u05f2\t\r\2\2\u05f1\u05ed"+
		"\3\2\2\2\u05f1\u05ef\3\2\2\2\u05f2\u05f3\3\2\2\2\u05f3\u05f1\3\2\2\2\u05f3"+
		"\u05f4\3\2\2\2\u05f4\u05f6\3\2\2\2\u05f5\u0554\3\2\2\2\u05f5\u0564\3\2"+
		"\2\2\u05f5\u056c\3\2\2\2\u05f5\u056e\3\2\2\2\u05f5\u0572\3\2\2\2\u05f5"+
		"\u0576\3\2\2\2\u05f5\u0579\3\2\2\2\u05f5\u057d\3\2\2\2\u05f5\u0582\3\2"+
		"\2\2\u05f5\u058e\3\2\2\2\u05f5\u0591\3\2\2\2\u05f5\u059b\3\2\2\2\u05f5"+
		"\u05a1\3\2\2\2\u05f5\u05a4\3\2\2\2\u05f5\u05a8\3\2\2\2\u05f5\u05ab\3\2"+
		"\2\2\u05f5\u05ae\3\2\2\2\u05f5\u05b4\3\2\2\2\u05f5\u05b6\3\2\2\2\u05f5"+
		"\u05bf\3\2\2\2\u05f5\u05c6\3\2\2\2\u05f5\u05c9\3\2\2\2\u05f5\u05cc\3\2"+
		"\2\2\u05f5\u05da\3\2\2\2\u05f5\u05dc\3\2\2\2\u05f5\u05df\3\2\2\2\u05f5"+
		"\u05e2\3\2\2\2\u05f5\u05e5\3\2\2\2\u05f5\u05e8\3\2\2\2\u05f5\u05ec\3\2"+
		"\2\2\u05f6[\3\2\2\2\u05f7\u0610\7\u00f4\2\2\u05f8\u05f9\7\u0120\2\2\u05f9"+
		"\u05fa\7\3\2\2\u05fa\u05fb\5\u020a\u0106\2\u05fb\u05fe\5\u00aeX\2\u05fc"+
		"\u05fd\7)\2\2\u05fd\u05ff\7\u00ae\2\2\u05fe\u05fc\3\2\2\2\u05fe\u05ff"+
		"\3\2\2\2\u05ff\u0609\3\2\2\2\u0600\u0601\7\26\2\2\u0601\u0602\5\u020a"+
		"\u0106\2\u0602\u0605\5\u00aeX\2\u0603\u0604\7)\2\2\u0604\u0606\7\u00ae"+
		"\2\2\u0605\u0603\3\2\2\2\u0605\u0606\3\2\2\2\u0606\u0608\3\2\2\2\u0607"+
		"\u0600\3\2\2\2\u0608\u060b\3\2\2\2\u0609\u0607\3\2\2\2\u0609\u060a\3\2"+
		"\2\2\u060a\u060c\3\2\2\2\u060b\u0609\3\2\2\2\u060c\u060d\7\4\2\2\u060d"+
		"\u0611\3\2\2\2\u060e\u060f\7\u0239\2\2\u060f\u0611\7\u0120\2\2\u0610\u05f8"+
		"\3\2\2\2\u0610\u060e\3\2\2\2\u0611\u06a1\3\2\2\2\u0612\u0618\7y\2\2\u0613"+
		"\u0616\7\u01bd\2\2\u0614\u0617\5\u013e\u00a0\2\u0615\u0617\5\u02e0\u0171"+
		"\2\u0616\u0614\3\2\2\2\u0616\u0615\3\2\2\2\u0617\u0619\3\2\2\2\u0618\u0613"+
		"\3\2\2\2\u0618\u0619\3\2\2\2\u0619\u06a1\3\2\2\2\u061a\u061b\7\u00a5\2"+
		"\2\u061b\u06a1\t\16\2\2\u061c\u061d\7\u00d4\2\2\u061d\u061e\7\u011a\2"+
		"\2\u061e\u06a1\7\u01c5\2\2\u061f\u0621\7\u00c1\2\2\u0620\u061f\3\2\2\2"+
		"\u0620\u0621\3\2\2\2\u0621\u0622\3\2\2\2\u0622\u06a1\7^\2\2\u0623\u0625"+
		"\7\u00c1\2\2\u0624\u0623\3\2\2\2\u0624\u0625\3\2\2\2\u0625\u0626\3\2\2"+
		"\2\u0626\u06a1\7\u0131\2\2\u0627\u06a1\7z\2\2\u0628\u0629\7\u00f4\2\2"+
		"\u0629\u062c\7\u00c2\2\2\u062a\u062c\7\u01b3\2\2\u062b\u0628\3\2\2\2\u062b"+
		"\u062a\3\2\2\2\u062c\u062d\3\2\2\2\u062d\u062e\7\u00c9\2\2\u062e\u062f"+
		"\7\u00c2\2\2\u062f\u06a1\7\u015f\2\2\u0630\u0631\7\u00c2\2\2\u0631\u06a1"+
		"\7\66\2\2\u0632\u0633\7\u00e9\2\2\u0633\u0634\7\u01c5\2\2\u0634\u063a"+
		"\7U\2\2\u0635\u0636\7L\2\2\u0636\u063a\7\u01c5\2\2\u0637\u0638\7\u00bf"+
		"\2\2\u0638\u063a\7\u01c5\2\2\u0639\u0632\3\2\2\2\u0639\u0635\3\2\2\2\u0639"+
		"\u0637\3\2\2\2\u063a\u06a1\3\2\2\2\u063b\u063d\7\u00bf\2\2\u063c\u063b"+
		"\3\2\2\2\u063c\u063d\3\2\2\2\u063d\u063e\3\2\2\2\u063e\u063f\7y\2\2\u063f"+
		"\u06a1\7\u01b0\2\2\u0640\u0641\7\u00d2\2\2\u0641\u0642\7\u00d9\2\2\u0642"+
		"\u0647\5\u0140\u00a1\2\u0643\u0644\7\u00bf\2\2\u0644\u0645\7\u00d2\2\2"+
		"\u0645\u0647\7\u00d9\2\2\u0646\u0640\3\2\2\2\u0646\u0643\3\2\2\2\u0647"+
		"\u06a1\3\2\2\2\u0648\u0649\7\u00bf\2\2\u0649\u064d\7\u0106\2\2\u064a\u064b"+
		"\7\u0106\2\2\u064b\u064d\7\30\2\2\u064c\u0648\3\2\2\2\u064c\u064a\3\2"+
		"\2\2\u064d\u06a1\3\2\2\2\u064e\u0650\7\u00bf\2\2\u064f\u064e\3\2\2\2\u064f"+
		"\u0650\3\2\2\2\u0650\u0651\3\2\2\2\u0651\u0652\7}\2\2\u0652\u06a1\7\66"+
		"\2\2\u0653\u0654\7`\2\2\u0654\u06a1\7\u01bf\2\2\u0655\u0657\7\u00bf\2"+
		"\2\u0656\u0655\3\2\2\2\u0656\u0657\3\2\2\2\u0657\u0658\3\2\2\2\u0658\u06a1"+
		"\7Y\2\2\u0659\u065a\7\u0256\2\2\u065a\u06a1\7\30\2\2\u065b\u065c\7\u00bf"+
		"\2\2\u065c\u0660\7C\2\2\u065d\u065e\7C\2\2\u065e\u0660\5\u0142\u00a2\2"+
		"\u065f\u065b\3\2\2\2\u065f\u065d\3\2\2\2\u0660\u06a1\3\2\2\2\u0661\u0662"+
		"\7\u013c\2\2\u0662\u0668\7\u01b8\2\2\u0663\u0669\5\u02e0\u0171\2\u0664"+
		"\u0665\7\3\2\2\u0665\u0666\5\u02e0\u0171\2\u0666\u0667\7\4\2\2\u0667\u0669"+
		"\3\2\2\2\u0668\u0663\3\2\2\2\u0668\u0664\3\2\2\2\u0669\u06a1\3\2\2\2\u066a"+
		"\u066f\7,\2\2\u066b\u066c\7\u00bf\2\2\u066c\u0670\7\u00ab\2\2\u066d\u066e"+
		"\7\u00ab\2\2\u066e\u0670\7\30\2\2\u066f\u066b\3\2\2\2\u066f\u066d\3\2"+
		"\2\2\u0670\u06a1\3\2\2\2\u0671\u0672\7\u0117\2\2\u0672\u0673\7\u01c2\2"+
		"\2\u0673\u06a1\t\5\2\2\u0674\u0675\7\u00e4\2\2\u0675\u0676\7\u0126\2\2"+
		"\u0676\u06a1\t\t\2\2\u0677\u0678\7\u010a\2\2\u0678\u06a1\t\n\2\2\u0679"+
		"\u067a\7\u01c6\2\2\u067a\u067b\7 \2\2\u067b\u067c\7\u011e\2\2\u067c\u067d"+
		"\7[\2\2\u067d\u0686\7\u01ba\2\2\u067e\u067f\7\u01c6\2\2\u067f\u0680\7"+
		" \2\2\u0680\u0681\7\30\2\2\u0681\u0686\7\u01ba\2\2\u0682\u0683\7N\2\2"+
		"\u0683\u0684\7 \2\2\u0684\u0686\7\u01b9\2\2\u0685\u0679\3\2\2\2\u0685"+
		"\u067e\3\2\2\2\u0685\u0682\3\2\2\2\u0686\u06a1\3\2\2\2\u0687\u0688\7\u0103"+
		"\2\2\u0688\u0689\7\u01be\2\2\u0689\u06a1\5\u0144\u00a3\2\u068a\u068b\t"+
		"\13\2\2\u068b\u068c\7\u01c4\2\2\u068c\u06a1\7\u01c1\2\2\u068d\u068e\7"+
		"\u0116\2\2\u068e\u06a1\7\u01b7\2\2\u068f\u0691\7\u00c1\2\2\u0690\u068f"+
		"\3\2\2\2\u0690\u0691\3\2\2\2\u0691\u0692\3\2\2\2\u0692\u06a1\7\u01c3\2"+
		"\2\u0693\u0695\7\u0113\2\2\u0694\u0696\5\u0274\u013b\2\u0695\u0694\3\2"+
		"\2\2\u0695\u0696\3\2\2\2\u0696\u06a1\3\2\2\2\u0697\u069c\7\u00d4\2\2\u0698"+
		"\u0699\7;\2\2\u0699\u069d\t\f\2\2\u069a\u069b\7\u02ff\2\2\u069b\u069d"+
		"\t\r\2\2\u069c\u0698\3\2\2\2\u069c\u069a\3\2\2\2\u069d\u069e\3\2\2\2\u069e"+
		"\u069c\3\2\2\2\u069e\u069f\3\2\2\2\u069f\u06a1\3\2\2\2\u06a0\u05f7\3\2"+
		"\2\2\u06a0\u0612\3\2\2\2\u06a0\u061a\3\2\2\2\u06a0\u061c\3\2\2\2\u06a0"+
		"\u0620\3\2\2\2\u06a0\u0624\3\2\2\2\u06a0\u0627\3\2\2\2\u06a0\u062b\3\2"+
		"\2\2\u06a0\u0630\3\2\2\2\u06a0\u0639\3\2\2\2\u06a0\u063c\3\2\2\2\u06a0"+
		"\u0646\3\2\2\2\u06a0\u064c\3\2\2\2\u06a0\u064f\3\2\2\2\u06a0\u0653\3\2"+
		"\2\2\u06a0\u0656\3\2\2\2\u06a0\u0659\3\2\2\2\u06a0\u065f\3\2\2\2\u06a0"+
		"\u0661\3\2\2\2\u06a0\u066a\3\2\2\2\u06a0\u0671\3\2\2\2\u06a0\u0674\3\2"+
		"\2\2\u06a0\u0677\3\2\2\2\u06a0\u0685\3\2\2\2\u06a0\u0687\3\2\2\2\u06a0"+
		"\u068a\3\2\2\2\u06a0\u068d\3\2\2\2\u06a0\u0690\3\2\2\2\u06a0\u0693\3\2"+
		"\2\2\u06a0\u0697\3\2\2\2\u06a1]\3\2\2\2\u06a2\u06a3\7\u00f4\2\2\u06a3"+
		"\u06a6\5\u00aeX\2\u06a4\u06a5\7)\2\2\u06a5\u06a7\7\u00ae\2\2\u06a6\u06a4"+
		"\3\2\2\2\u06a6\u06a7\3\2\2\2\u06a7\u06bf\3\2\2\2\u06a8\u06a9\7\u0113\2"+
		"\2\u06a9\u06bf\5\u0274\u013b\2\u06aa\u06ab\7\u00d4\2\2\u06ab\u06ac\7;"+
		"\2\2\u06ac\u06bf\t\f\2\2\u06ad\u06bc\7\u0112\2\2\u06ae\u06af\5\u0272\u013a"+
		"\2\u06af\u06b0\7\3\2\2\u06b0\u06b5\5\u00e2r\2\u06b1\u06b2\7\26\2\2\u06b2"+
		"\u06b4\5\u00e2r\2\u06b3\u06b1\3\2\2\2\u06b4\u06b7\3\2\2\2\u06b5\u06b3"+
		"\3\2\2\2\u06b5\u06b6\3\2\2\2\u06b6\u06b8\3\2\2\2\u06b7\u06b5\3\2\2\2\u06b8"+
		"\u06b9\7\4\2\2\u06b9\u06bd\3\2\2\2\u06ba\u06bb\7\u0113\2\2\u06bb\u06bd"+
		"\5\u0274\u013b\2\u06bc\u06ae\3\2\2\2\u06bc\u06ba\3\2\2\2\u06bd\u06bf\3"+
		"\2\2\2\u06be\u06a2\3\2\2\2\u06be\u06a8\3\2\2\2\u06be\u06aa\3\2\2\2\u06be"+
		"\u06ad\3\2\2\2\u06bf_\3\2\2\2\u06c0\u06c1\7\u00f4\2\2\u06c1\u06c4\5\u00ae"+
		"X\2\u06c2\u06c3\7\u00a5\2\2\u06c3\u06c5\7\u01c5\2\2\u06c4\u06c2\3\2\2"+
		"\2\u06c4\u06c5\3\2\2\2\u06c5\u06f8\3\2\2\2\u06c6\u06ca\7\u00f3\2\2\u06c7"+
		"\u06cb\5\u014a\u00a6\2\u06c8\u06cb\7\u00c2\2\2\u06c9\u06cb\5\u02d4\u016b"+
		"\2\u06ca\u06c7\3\2\2\2\u06ca\u06c8\3\2\2\2\u06ca\u06c9\3\2\2\2\u06cb\u06f8"+
		"\3\2\2\2\u06cc\u06ce\7\u00c1\2\2\u06cd\u06cc\3\2\2\2\u06cd\u06ce\3\2\2"+
		"\2\u06ce\u06cf\3\2\2\2\u06cf\u06f8\7^\2\2\u06d0\u06d2\7\u00c1\2\2\u06d1"+
		"\u06d0\3\2\2\2\u06d1\u06d2\3\2\2\2\u06d2\u06d3\3\2\2\2\u06d3\u06f8\7\u0131"+
		"\2\2\u06d4\u06d5\7\u00f4\2\2\u06d5\u06d8\7\u00c2\2\2\u06d6\u06d8\7\u01b3"+
		"\2\2\u06d7\u06d4\3\2\2\2\u06d7\u06d6\3\2\2\2\u06d8\u06d9\3\2\2\2\u06d9"+
		"\u06da\7\u00c9\2\2\u06da\u06db\7\u00c2\2\2\u06db\u06f8\7\u015f\2\2\u06dc"+
		"\u06dd\7\u00c2\2\2\u06dd\u06f8\7\66\2\2\u06de\u06df\7\u00e9\2\2\u06df"+
		"\u06e0\7\u01c5\2\2\u06e0\u06e4\7U\2\2\u06e1\u06e2\7L\2\2\u06e2\u06e4\7"+
		"\u01c5\2\2\u06e3\u06de\3\2\2\2\u06e3\u06e1\3\2\2\2\u06e4\u06f8\3\2\2\2"+
		"\u06e5\u06e7\7\u00bf\2\2\u06e6\u06e5\3\2\2\2\u06e6\u06e7\3\2\2\2\u06e7"+
		"\u06e8\3\2\2\2\u06e8\u06e9\7y\2\2\u06e9\u06f8\7\u01b0\2\2\u06ea\u06eb"+
		"\7\u0116\2\2\u06eb\u06f8\7\u01b7\2\2\u06ec\u06ee\7\u00c1\2\2\u06ed\u06ec"+
		"\3\2\2\2\u06ed\u06ee\3\2\2\2\u06ee\u06ef\3\2\2\2\u06ef\u06f8\7\u01c3\2"+
		"\2\u06f0\u06f2\7\u0113\2\2\u06f1\u06f3\5\u0274\u013b\2\u06f2\u06f1\3\2"+
		"\2\2\u06f2\u06f3\3\2\2\2\u06f3\u06f8\3\2\2\2\u06f4\u06f5\7\u00d4\2\2\u06f5"+
		"\u06f6\7;\2\2\u06f6\u06f8\t\f\2\2\u06f7\u06c0\3\2\2\2\u06f7\u06c6\3\2"+
		"\2\2\u06f7\u06cd\3\2\2\2\u06f7\u06d1\3\2\2\2\u06f7\u06d7\3\2\2\2\u06f7"+
		"\u06dc\3\2\2\2\u06f7\u06e3\3\2\2\2\u06f7\u06e6\3\2\2\2\u06f7\u06ea\3\2"+
		"\2\2\u06f7\u06ed\3\2\2\2\u06f7\u06f0\3\2\2\2\u06f7\u06f4\3\2\2\2\u06f8"+
		"a\3\2\2\2\u06f9\u06fa\5\u0234\u011b\2\u06fa\u06fb\7\177\2\2\u06fb\u06fc"+
		"\7\u010d\2\2\u06fc\u06fd\5\u0244\u0123\2\u06fdc\3\2\2\2\u06fe\u06ff\5"+
		"\u0234\u011b\2\u06ff\u0701\7\177\2\2\u0700\u0702\7\u0120\2\2\u0701\u0700"+
		"\3\2\2\2\u0701\u0702\3\2\2\2\u0702\u0703\3\2\2\2\u0703\u0704\5\u021c\u010f"+
		"\2\u0704e\3\2\2\2\u0705\u0706\7\u033e\2\2\u0706\u0707\5\u0276\u013c\2"+
		"\u0707\u0708\7\u012c\2\2\u0708\u0709\5\u0276\u013c\2\u0709g\3\2\2\2\u070a"+
		"\u070b\7\\\2\2\u070b\u070c\7\u0081\2\2\u070c\u070e\5\u021c\u010f\2\u070d"+
		"\u070f\5\u028a\u0146\2\u070e\u070d\3\2\2\2\u070e\u070f\3\2\2\2\u070f\u0711"+
		"\3\2\2\2\u0710\u0712\5\u0216\u010c\2\u0711\u0710\3\2\2\2\u0711\u0712\3"+
		"\2\2\2\u0712\u0714\3\2\2\2\u0713\u0715\5\u0096L\2\u0714\u0713\3\2\2\2"+
		"\u0714\u0715\3\2\2\2\u0715\u0718\3\2\2\2\u0716\u0717\7\u010e\2\2\u0717"+
		"\u0719\5\u0082B\2\u0718\u0716\3\2\2\2\u0718\u0719\3\2\2\2\u0719\u071a"+
		"\3\2\2\2\u071a\u071b\7\u0139\2\2\u071b\u071c\5\u01d4\u00eb\2\u071c\u071e"+
		"\3\2\2\2\u071d\u071f\5\u02de\u0170\2\u071e\u071d\3\2\2\2\u071e\u071f\3"+
		"\2\2\2\u071f\u0724\3\2\2\2\u0720\u0723\5\u02ca\u0166\2\u0721\u0723\5\u02ce"+
		"\u0168\2\u0722\u0720\3\2\2\2\u0722\u0721\3\2\2\2\u0723\u0726\3\2\2\2\u0724"+
		"\u0722\3\2\2\2\u0724\u0725\3\2\2\2\u0725\u0729\3\2\2\2\u0726\u0724\3\2"+
		"\2\2\u0727\u0728\7\u00e8\2\2\u0728\u072a\7\30\2\2\u0729\u0727\3\2\2\2"+
		"\u0729\u072a\3\2\2\2\u072ai\3\2\2\2\u072b\u072c\7\\\2\2\u072c\u072d\7"+
		"\u0081\2\2\u072d\u072f\5\u021c\u010f\2\u072e\u0730\5\u0216\u010c\2\u072f"+
		"\u072e\3\2\2\2\u072f\u0730\3\2\2\2\u0730\u0731\3\2\2\2\u0731\u0732\7\u0139"+
		"\2\2\u0732\u0733\7Q\2\2\u0733\u0734\7\u00c6\2\2\u0734\u073d\5\n\6\2\u0735"+
		"\u0736\7\177\2\2\u0736\u0739\7\u0101\2\2\u0737\u073a\5\u0276\u013c\2\u0738"+
		"\u073a\7\30\2\2\u0739\u0737\3\2\2\2\u0739\u0738\3\2\2\2\u073a\u073b\3"+
		"\2\2\2\u073b\u073c\7\u00c6\2\2\u073c\u073e\7\u0102\2\2\u073d\u0735\3\2"+
		"\2\2\u073d\u073e\3\2\2\2\u073ek\3\2\2\2\u073f\u0742\5h\65\2\u0740\u0742"+
		"\5j\66\2\u0741\u073f\3\2\2\2\u0741\u0740\3\2\2\2\u0742m\3\2\2\2\u0743"+
		"\u0744\7\u009a\2\2\u0744\u0745\7\u009c\2\2\u0745\u0751\5\u021c\u010f\2"+
		"\u0746\u0747\7\3\2\2\u0747\u074c\5\u020a\u0106\2\u0748\u0749\7\26\2\2"+
		"\u0749\u074b\5\u020a\u0106\2\u074a\u0748\3\2\2\2\u074b\u074e\3\2\2\2\u074c"+
		"\u074a\3\2\2\2\u074c\u074d\3\2\2\2\u074d\u074f\3\2\2\2\u074e\u074c\3\2"+
		"\2\2\u074f\u0750\7\4\2\2\u0750\u0752\3\2\2\2\u0751\u0746\3\2\2\2\u0751"+
		"\u0752\3\2\2\2\u0752\u0754\3\2\2\2\u0753\u0755\5\u0096L\2\u0754\u0753"+
		"\3\2\2\2\u0754\u0755\3\2\2\2\u0755\u0759\3\2\2\2\u0756\u0757\7\u01de\2"+
		"\2\u0757\u0758\7\u033e\2\2\u0758\u075a\7\u012e\2\2\u0759\u0756\3\2\2\2"+
		"\u0759\u075a\3\2\2\2\u075a\u077e\3\2\2\2\u075b\u0768\7\u012f\2\2\u075c"+
		"\u0769\5\u008eH\2\u075d\u075e\7\3\2\2\u075e\u0763\5\u008eH\2\u075f\u0760"+
		"\7\26\2\2\u0760\u0762\5\u008eH\2\u0761\u075f\3\2\2\2\u0762\u0765\3\2\2"+
		"\2\u0763\u0761\3\2\2\2\u0763\u0764\3\2\2\2\u0764\u0766\3\2\2\2\u0765\u0763"+
		"\3\2\2\2\u0766\u0767\7\4\2\2\u0767\u0769\3\2\2\2\u0768\u075c\3\2\2\2\u0768"+
		"\u075d\3\2\2\2\u0769\u077f\3\2\2\2\u076a\u076b\7\u013b\2\2\u076b\u0770"+
		"\5\u02c2\u0162\2\u076c\u076d\7\26\2\2\u076d\u076f\5\u02c2\u0162\2\u076e"+
		"\u076c\3\2\2\2\u076f\u0772\3\2\2\2\u0770\u076e\3\2\2\2\u0770\u0771\3\2"+
		"\2\2\u0771\u0774\3\2\2\2\u0772\u0770\3\2\2\2\u0773\u076a\3\2\2\2\u0773"+
		"\u0774\3\2\2\2\u0774\u0775\3\2\2\2\u0775\u0777\5\u02d4\u016b\2\u0776\u0778"+
		"\5\u02ca\u0166\2\u0777\u0776\3\2\2\2\u0777\u0778\3\2\2\2\u0778\u077b\3"+
		"\2\2\2\u0779\u077a\7\u00e8\2\2\u077a\u077c\7\30\2\2\u077b\u0779\3\2\2"+
		"\2\u077b\u077c\3\2\2\2\u077c\u077f\3\2\2\2\u077d\u077f\5\u0098M\2\u077e"+
		"\u075b\3\2\2\2\u077e\u0773\3\2\2\2\u077e\u077d\3\2\2\2\u077fo\3\2\2\2"+
		"\u0780\u0781\7\u01da\2\2\u0781\u0782\7\u009c\2\2\u0782\u0784\5\u021c\u010f"+
		"\2\u0783\u0785\5\u0280\u0141\2\u0784\u0783\3\2\2\2\u0784\u0785\3\2\2\2"+
		"\u0785\u0787\3\2\2\2\u0786\u0788\5\u0096L\2\u0787\u0786\3\2\2\2\u0787"+
		"\u0788\3\2\2\2\u0788\u0789\3\2\2\2\u0789\u0798\7\u012c\2\2\u078a\u078c"+
		"\7\3\2\2\u078b\u078a\3\2\2\2\u078c\u078f\3\2\2\2\u078d\u078b\3\2\2\2\u078d"+
		"\u078e\3\2\2\2\u078e\u0790\3\2\2\2\u078f\u078d\3\2\2\2\u0790\u0794\5\u0284"+
		"\u0143\2\u0791\u0793\7\4\2\2\u0792\u0791\3\2\2\2\u0793\u0796\3\2\2\2\u0794"+
		"\u0792\3\2\2\2\u0794\u0795\3\2\2\2\u0795\u0799\3\2\2\2\u0796\u0794\3\2"+
		"\2\2\u0797\u0799\5x=\2\u0798\u078d\3\2\2\2\u0798\u0797\3\2\2\2\u0799\u079a"+
		"\3\2\2\2\u079a\u079b\7\u00c9\2\2\u079b\u07a3\5\u01d4\u00eb\2\u079c\u079d"+
		"\7\u0137\2\2\u079d\u079e\5~@\2\u079e\u07a1\7\u0122\2\2\u079f\u07a2\5\u0080"+
		"A\2\u07a0\u07a2\5\u008aF\2\u07a1\u079f\3\2\2\2\u07a1\u07a0\3\2\2\2\u07a2"+
		"\u07a4\3\2\2\2\u07a3\u079c\3\2\2\2\u07a4\u07a5\3\2\2\2\u07a5\u07a3\3\2"+
		"\2\2\u07a5\u07a6\3\2\2\2\u07a6\u07a9\3\2\2\2\u07a7\u07a8\7i\2\2\u07a8"+
		"\u07aa\7\u015d\2\2\u07a9\u07a7\3\2\2\2\u07a9\u07aa\3\2\2\2\u07aa\u07b0"+
		"\3\2\2\2\u07ab\u07ac\7\u00c1\2\2\u07ac\u07ad\7\u01d8\2\2\u07ad\u07ae\7"+
		"N\2\2\u07ae\u07af\7\u00c9\2\2\u07af\u07b1\7\u01d9\2\2\u07b0\u07ab\3\2"+
		"\2\2\u07b0\u07b1\3\2\2\2\u07b1\u07b4\3\2\2\2\u07b2\u07b3\7\u00e8\2\2\u07b3"+
		"\u07b5\7\30\2\2\u07b4\u07b2\3\2\2\2\u07b4\u07b5\3\2\2\2\u07b5q\3\2\2\2"+
		"\u07b6\u07b7\7\u012b\2\2\u07b7\u07b9\5\u021c\u010f\2\u07b8\u07ba\5\u028a"+
		"\u0146\2\u07b9\u07b8\3\2\2\2\u07b9\u07ba\3\2\2\2\u07ba\u07bc\3\2\2\2\u07bb"+
		"\u07bd\5\u0216\u010c\2\u07bc\u07bb\3\2\2\2\u07bc\u07bd\3\2\2\2\u07bd\u07bf"+
		"\3\2\2\2\u07be\u07c0\5\u0096L\2\u07bf\u07be\3\2\2\2\u07bf\u07c0\3\2\2"+
		"\2\u07c0\u07c1\3\2\2\2\u07c1\u07c2\7\u010e\2\2\u07c2\u07c5\5\u0082B\2"+
		"\u07c3\u07c4\7\u0139\2\2\u07c4\u07c6\5\u01d4\u00eb\2\u07c5\u07c3\3\2\2"+
		"\2\u07c5\u07c6\3\2\2\2\u07c6\u07cb\3\2\2\2\u07c7\u07ca\5\u02ca\u0166\2"+
		"\u07c8\u07ca\5\u02ce\u0168\2\u07c9\u07c7\3\2\2\2\u07c9\u07c8\3\2\2\2\u07ca"+
		"\u07cd\3\2\2\2\u07cb\u07c9\3\2\2\2\u07cb\u07cc\3\2\2\2\u07cc\u07d0\3\2"+
		"\2\2\u07cd\u07cb\3\2\2\2\u07ce\u07cf\7\u00e8\2\2\u07cf\u07d1\7\30\2\2"+
		"\u07d0\u07ce\3\2\2\2\u07d0\u07d1\3\2\2\2\u07d1s\3\2\2\2\u07d2\u07d3\7"+
		"\u012b\2\2\u07d3\u07d5\5\u021c\u010f\2\u07d4\u07d6\5\u0216\u010c\2\u07d5"+
		"\u07d4\3\2\2\2\u07d5\u07d6\3\2\2\2\u07d6\u07d7\3\2\2\2\u07d7\u07d8\7\u010e"+
		"\2\2\u07d8\u07d9\5\u0082B\2\u07d9\u07da\7\u0139\2\2\u07da\u07db\7Q\2\2"+
		"\u07db\u07dc\7\u00c6\2\2\u07dc\u07e5\5\n\6\2\u07dd\u07de\7\177\2\2\u07de"+
		"\u07e1\7\u0101\2\2\u07df\u07e2\5\u0276\u013c\2\u07e0\u07e2\7\30\2\2\u07e1"+
		"\u07df\3\2\2\2\u07e1\u07e0\3\2\2\2\u07e2\u07e3\3\2\2\2\u07e3\u07e4\7\u00c6"+
		"\2\2\u07e4\u07e6\7\u0102\2\2\u07e5\u07dd\3\2\2\2\u07e5\u07e6\3\2\2\2\u07e6"+
		"u\3\2\2\2\u07e7\u07ea\5r:\2\u07e8\u07ea\5t;\2\u07e9\u07e7\3\2\2\2\u07e9"+
		"\u07e8\3\2\2\2\u07eaw\3\2\2\2\u07eb\u07ec\7\3\2\2\u07ec\u07ef\7\u012f"+
		"\2\2\u07ed\u07f0\5z>\2\u07ee\u07f0\5|?\2\u07ef\u07ed\3\2\2\2\u07ef\u07ee"+
		"\3\2\2\2\u07f0\u07f1\3\2\2\2\u07f1\u07f3\7\4\2\2\u07f2\u07f4\7)\2\2\u07f3"+
		"\u07f2\3\2\2\2\u07f3\u07f4\3\2\2\2\u07f4\u07f5\3\2\2\2\u07f5\u07f6\5\u0216"+
		"\u010c\2\u07f6\u07f7\7\3\2\2\u07f7\u07fc\5\u020a\u0106\2\u07f8\u07f9\7"+
		"\26\2\2\u07f9\u07fb\5\u020a\u0106\2\u07fa\u07f8\3\2\2\2\u07fb\u07fe\3"+
		"\2\2\2\u07fc\u07fa\3\2\2\2\u07fc\u07fd\3\2\2\2\u07fd\u07ff\3\2\2\2\u07fe"+
		"\u07fc\3\2\2\2\u07ff\u0800\7\4\2\2\u0800y\3\2\2\2\u0801\u080e\5\u0092"+
		"J\2\u0802\u0803\7\3\2\2\u0803\u0808\5\u0092J\2\u0804\u0805\7\26\2\2\u0805"+
		"\u0807\5\u0092J\2\u0806\u0804\3\2\2\2\u0807\u080a\3\2\2\2\u0808\u0806"+
		"\3\2\2\2\u0808\u0809\3\2\2\2\u0809\u080b\3\2\2\2\u080a\u0808\3\2\2\2\u080b"+
		"\u080c\7\4\2\2\u080c\u080e\3\2\2\2\u080d\u0801\3\2\2\2\u080d\u0802\3\2"+
		"\2\2\u080e{\3\2\2\2\u080f\u0823\5\u0094K\2\u0810\u0811\7\3\2\2\u0811\u0816"+
		"\5\u0094K\2\u0812\u0813\7\26\2\2\u0813\u0815\5\u0094K\2\u0814\u0812\3"+
		"\2\2\2\u0815\u0818\3\2\2\2\u0816\u0814\3\2\2\2\u0816\u0817\3\2\2\2\u0817"+
		"\u0819\3\2\2\2\u0818\u0816\3\2\2\2\u0819\u081a\7\4\2\2\u081a\u081b\3\2"+
		"\2\2\u081b\u081e\7\177\2\2\u081c\u081f\5\u0276\u013c\2\u081d\u081f\7\30"+
		"\2\2\u081e\u081c\3\2\2\2\u081e\u081d\3\2\2\2\u081f\u0820\3\2\2\2\u0820"+
		"\u0821\7\u018a\2\2\u0821\u0823\3\2\2\2\u0822\u080f\3\2\2\2\u0822\u0810"+
		"\3\2\2\2\u0823}\3\2\2\2\u0824\u0826\7\u00c1\2\2\u0825\u0824\3\2\2\2\u0825"+
		"\u0826\3\2\2\2\u0826\u0827\3\2\2\2\u0827\u082a\7\u01db\2\2\u0828\u0829"+
		"\7\u0143\2\2\u0829\u082b\5\u01d4\u00eb\2\u082a\u0828\3\2\2\2\u082a\u082b"+
		"\3\2\2\2\u082b\177\3\2\2\2\u082c\u0830\5\u0084C\2\u082d\u0830\5\u0086"+
		"D\2\u082e\u0830\5\u0088E\2\u082f\u082c\3\2\2\2\u082f\u082d\3\2\2\2\u082f"+
		"\u082e\3\2\2\2\u0830\u0081\3\2\2\2\u0831\u0832\5\u020a\u0106\2\u0832\u0833"+
		"\7\b\2\2\u0833\u083b\5\u008eH\2\u0834\u0835\7\26\2\2\u0835\u0836\5\u020a"+
		"\u0106\2\u0836\u0837\7\b\2\2\u0837\u0838\5\u008eH\2\u0838\u083a\3\2\2"+
		"\2\u0839\u0834\3\2\2\2\u083a\u083d\3\2\2\2\u083b\u0839\3\2\2\2\u083b\u083c"+
		"\3\2\2\2\u083c\u0858\3\2\2\2\u083d\u083b\3\2\2\2\u083e\u083f\7\3\2\2\u083f"+
		"\u0844\5\u020a\u0106\2\u0840\u0841\7\26\2\2\u0841\u0843\5\u020a\u0106"+
		"\2\u0842\u0840\3\2\2\2\u0843\u0846\3\2\2\2\u0844\u0842\3\2\2\2\u0844\u0845"+
		"\3\2\2\2\u0845\u0847\3\2\2\2\u0846\u0844\3\2\2\2\u0847\u0848\7\4\2\2\u0848"+
		"\u0849\7\b\2\2\u0849\u084a\7\3\2\2\u084a\u084f\5\u008eH\2\u084b\u084c"+
		"\7\26\2\2\u084c\u084e\5\u008eH\2\u084d\u084b\3\2\2\2\u084e\u0851\3\2\2"+
		"\2\u084f\u084d\3\2\2\2\u084f\u0850\3\2\2\2\u0850\u0854\3\2\2\2\u0851\u084f"+
		"\3\2\2\2\u0852\u0854\5\u02d4\u016b\2\u0853\u083e\3\2\2\2\u0853\u0852\3"+
		"\2\2\2\u0854\u0855\3\2\2\2\u0855\u0856\7\4\2\2\u0856\u0858\3\2\2\2\u0857"+
		"\u0831\3\2\2\2\u0857\u0853\3\2\2\2\u0858\u0083\3\2\2\2\u0859\u085a\7\u012b"+
		"\2\2\u085a\u085b\7\u010e\2\2\u085b\u0860\5\u0082B\2\u085c\u085d\7\26\2"+
		"\2\u085d\u085f\5\u0082B\2\u085e\u085c\3\2\2\2\u085f\u0862\3\2\2\2\u0860"+
		"\u085e\3\2\2\2\u0860\u0861\3\2\2\2\u0861\u0085\3\2\2\2\u0862\u0860\3\2"+
		"\2\2\u0863\u0864\7\\\2\2\u0864\u0087\3\2\2\2\u0865\u0866\7\u009a\2\2\u0866"+
		"\u0867\7\3\2\2\u0867\u086c\5\u020a\u0106\2\u0868\u0869\7\26\2\2\u0869"+
		"\u086b\5\u020a\u0106\2\u086a\u0868\3\2\2\2\u086b\u086e\3\2\2\2\u086c\u086a"+
		"\3\2\2\2\u086c\u086d\3\2\2\2\u086d\u086f\3\2\2\2\u086e\u086c\3\2\2\2\u086f"+
		"\u0870\7\4\2\2\u0870\u087d\7\u012f\2\2\u0871\u087e\5\u008eH\2\u0872\u0873"+
		"\7\3\2\2\u0873\u0878\5\u008eH\2\u0874\u0875\7\26\2\2\u0875\u0877\5\u008e"+
		"H\2\u0876\u0874\3\2\2\2\u0877\u087a\3\2\2\2\u0878\u0876\3\2\2\2\u0878"+
		"\u0879\3\2\2\2\u0879\u087b\3\2\2\2\u087a\u0878\3\2\2\2\u087b\u087c\7\4"+
		"\2\2\u087c\u087e\3\2\2\2\u087d\u0871\3\2\2\2\u087d\u0872\3\2\2\2\u087e"+
		"\u0089\3\2\2\2\u087f\u0880\7\u010f\2\2\u0880\u0882\7\u01dc\2\2\u0881\u0883"+
		"\7\u012e\2\2\u0882\u0881\3\2\2\2\u0882\u0883\3\2\2\2\u0883\u0884\3\2\2"+
		"\2\u0884\u0886\7\27\2\2\u0885\u0887\5\u008cG\2\u0886\u0885\3\2\2\2\u0886"+
		"\u0887\3\2\2\2\u0887\u008b\3\2\2\2\u0888\u0889\7\u010e\2\2\u0889\u088a"+
		"\7\u01dd\2\2\u088a\u088b\7\b\2\2\u088b\u0891\5\u014a\u00a6\2\u088c\u088d"+
		"\5\u0148\u00a5\2\u088d\u088e\5\u014a\u00a6\2\u088e\u0890\3\2\2\2\u088f"+
		"\u088c\3\2\2\2\u0890\u0893\3\2\2\2\u0891\u088f\3\2\2\2\u0891\u0892\3\2"+
		"\2\2\u0892\u008d\3\2\2\2\u0893\u0891\3\2\2\2\u0894\u089a\5\u014a\u00a6"+
		"\2\u0895\u0896\5\u0148\u00a5\2\u0896\u0897\5\u014a\u00a6\2\u0897\u0899"+
		"\3\2\2\2\u0898\u0895\3\2\2\2\u0899\u089c\3\2\2\2\u089a\u0898\3\2\2\2\u089a"+
		"\u089b\3\2\2\2\u089b\u08a0\3\2\2\2\u089c\u089a\3\2\2\2\u089d\u08a0\7["+
		"\2\2\u089e\u08a0\7\u00c2\2\2\u089f\u0894\3\2\2\2\u089f\u089d\3\2\2\2\u089f"+
		"\u089e\3\2\2\2\u08a0\u008f\3\2\2\2\u08a1\u08a6\5\u014a\u00a6\2\u08a2\u08a6"+
		"\5\u0276\u013c\2\u08a3\u08a6\7[\2\2\u08a4\u08a6\7\u00c2\2\2\u08a5\u08a1"+
		"\3\2\2\2\u08a5\u08a2\3\2\2\2\u08a5\u08a3\3\2\2\2\u08a5\u08a4\3\2\2\2\u08a6"+
		"\u0091\3\2\2\2\u08a7\u08aa\5\u014a\u00a6\2\u08a8\u08aa\7\u00c2\2\2\u08a9"+
		"\u08a7\3\2\2\2\u08a9\u08a8\3\2\2\2\u08aa\u0093\3\2\2\2\u08ab\u08af\5\u014a"+
		"\u00a6\2\u08ac\u08af\5\u0276\u013c\2\u08ad\u08af\7\u00c2\2\2\u08ae\u08ab"+
		"\3\2\2\2\u08ae\u08ac\3\2\2\2\u08ae\u08ad\3\2\2\2\u08af\u0095\3\2\2\2\u08b0"+
		"\u08b1\7\u01d0\2\2\u08b1\u08b2\7\3\2\2\u08b2\u08b3\5\u020a\u0106\2\u08b3"+
		"\u08ba\5\u0102\u0082\2\u08b4\u08b5\7\26\2\2\u08b5\u08b6\5\u020a\u0106"+
		"\2\u08b6\u08b7\5\u0102\u0082\2\u08b7\u08b9\3\2\2\2\u08b8\u08b4\3\2\2\2"+
		"\u08b9\u08bc\3\2\2\2\u08ba\u08b8\3\2\2\2\u08ba\u08bb\3\2\2\2\u08bb\u08bd"+
		"\3\2\2\2\u08bc\u08ba\3\2\2\2\u08bd\u08be\7\4\2\2\u08be\u0097\3\2\2\2\u08bf"+
		"\u08cc\7\u012f\2\2\u08c0\u08cd\5\u0090I\2\u08c1\u08c2\7\3\2\2\u08c2\u08c7"+
		"\5\u0090I\2\u08c3\u08c4\7\26\2\2\u08c4\u08c6\5\u0090I\2\u08c5\u08c3\3"+
		"\2\2\2\u08c6\u08c9\3\2\2\2\u08c7\u08c5\3\2\2\2\u08c7\u08c8\3\2\2\2\u08c8"+
		"\u08ca\3\2\2\2\u08c9\u08c7\3\2\2\2\u08ca\u08cb\7\4\2\2\u08cb\u08cd\3\2"+
		"\2\2\u08cc\u08c0\3\2\2\2\u08cc\u08c1\3\2\2\2\u08cd\u08d4\3\2\2\2\u08ce"+
		"\u08d1\7\177\2\2\u08cf\u08d2\5\u0276\u013c\2\u08d0\u08d2\7\30\2\2\u08d1"+
		"\u08cf\3\2\2\2\u08d1\u08d0\3\2\2\2\u08d2\u08d3\3\2\2\2\u08d3\u08d5\7\u018a"+
		"\2\2\u08d4\u08ce\3\2\2\2\u08d4\u08d5\3\2\2\2\u08d5\u08dc\3\2\2\2\u08d6"+
		"\u08dd\7\u01d8\2\2\u08d7\u08d8\7\u00c1\2\2\u08d8\u08d9\7\u01d8\2\2\u08d9"+
		"\u08da\7N\2\2\u08da\u08db\7\u00c9\2\2\u08db\u08dd\7\u01d9\2\2\u08dc\u08d6"+
		"\3\2\2\2\u08dc\u08d7\3\2\2\2\u08dd\u0099\3\2\2\2\u08de\u08e3\7\u01d4\2"+
		"\2\u08df\u08e0\7\u012c\2\2\u08e0\u08e1\7\u01c9\2\2\u08e1\u08e2\7\u01cb"+
		"\2\2\u08e2\u08e4\5\u00a8U\2\u08e3\u08df\3\2\2\2\u08e3\u08e4\3\2\2\2\u08e4"+
		"\u009b\3\2\2\2\u08e5\u08e6\7\64\2\2\u08e6\u090e\5\u0264\u0133\2\u08e7"+
		"\u08e8\7@\2\2\u08e8\u090e\t\5\2\2\u08e9\u08ea\7\u01cd\2\2\u08ea\u090e"+
		"\t\5\2\2\u08eb\u08ec\7f\2\2\u08ec\u090e\7\u0348\2\2\u08ed\u08ee\7\u00db"+
		"\2\2\u08ee\u090e\7\u0348\2\2\u08ef\u090e\5\u00a0Q\2\u08f0\u090e\5\u00a2"+
		"R\2\u08f1\u090e\5\u00a4S\2\u08f2\u08f4\7\u00c1\2\2\u08f3\u08f2\3\2\2\2"+
		"\u08f3\u08f4\3\2\2\2\u08f4\u08f5\3\2\2\2\u08f5\u090e\7A\2\2\u08f6\u08f8"+
		"\7\u00c1\2\2\u08f7\u08f6\3\2\2\2\u08f7\u08f8\3\2\2\2\u08f8\u08f9\3\2\2"+
		"\2\u08f9\u090e\7\u00d3\2\2\u08fa\u08fb\7\u01cc\2\2\u08fb\u090e\t\5\2\2"+
		"\u08fc\u090b\7\37\2\2\u08fd\u08fe\7D\2\2\u08fe\u08ff\7\3\2\2\u08ff\u0901"+
		"\5\u020a\u0106\2\u0900\u0902\t\17\2\2\u0901\u0900\3\2\2\2\u0901\u0902"+
		"\3\2\2\2\u0902\u0903\3\2\2\2\u0903\u0904\7\4\2\2\u0904\u090c\3\2\2\2\u0905"+
		"\u0906\7\u01d0\2\2\u0906\u0907\7D\2\2\u0907\u0908\7\3\2\2\u0908\u0909"+
		"\5\u020a\u0106\2\u0909\u090a\7\4\2\2\u090a\u090c\3\2\2\2\u090b\u08fd\3"+
		"\2\2\2\u090b\u0905\3\2\2\2\u090c\u090e\3\2\2\2\u090d\u08e5\3\2\2\2\u090d"+
		"\u08e7\3\2\2\2\u090d\u08e9\3\2\2\2\u090d\u08eb\3\2\2\2\u090d\u08ed\3\2"+
		"\2\2\u090d\u08ef\3\2\2\2\u090d\u08f0\3\2\2\2\u090d\u08f1\3\2\2\2\u090d"+
		"\u08f3\3\2\2\2\u090d\u08f7\3\2\2\2\u090d\u08fa\3\2\2\2\u090d\u08fc\3\2"+
		"\2\2\u090e\u009d\3\2\2\2\u090f\u0910\7$\2\2\u0910\u0920\5\u00a6T\2\u0911"+
		"\u0913\5\u00a0Q\2\u0912\u0911\3\2\2\2\u0913\u0914\3\2\2\2\u0914\u0912"+
		"\3\2\2\2\u0914\u0915\3\2\2\2\u0915\u091f\3\2\2\2\u0916\u0918\5\u00a2R"+
		"\2\u0917\u0916\3\2\2\2\u0918\u0919\3\2\2\2\u0919\u0917\3\2\2\2\u0919\u091a"+
		"\3\2\2\2\u091a\u091f\3\2\2\2\u091b\u091f\5\u00a4S\2\u091c\u091d\7f\2\2"+
		"\u091d\u091f\7\u0348\2\2\u091e\u0912\3\2\2\2\u091e\u0917\3\2\2\2\u091e"+
		"\u091b\3\2\2\2\u091e\u091c\3\2\2\2\u091f\u0922\3\2\2\2\u0920\u091e\3\2"+
		"\2\2\u0920\u0921\3\2\2\2\u0921\u009f\3\2\2\2\u0922\u0920\3\2\2\2\u0923"+
		"\u0928\7\u012c\2\2\u0924\u0925\7\u0132\2\2\u0925\u0929\5\u024c\u0127\2"+
		"\u0926\u0927\7\u0118\2\2\u0927\u0929\5\u0266\u0134\2\u0928\u0924\3\2\2"+
		"\2\u0928\u0926\3\2\2\2\u0929\u0931\3\2\2\2\u092a\u092b\7\u00e1\2\2\u092b"+
		"\u0931\7\30\2\2\u092c\u092d\7\u0109\2\2\u092d\u0931\7\30\2\2\u092e\u092f"+
		"\7p\2\2\u092f\u0931\t\5\2\2\u0930\u0923\3\2\2\2\u0930\u092a\3\2\2\2\u0930"+
		"\u092c\3\2\2\2\u0930\u092e\3\2\2\2\u0931\u00a1\3\2\2\2\u0932\u0933\7\u01ce"+
		"\2\2\u0933\u0937\7\30\2\2\u0934\u0935\7\u01d3\2\2\u0935\u0937\7\30\2\2"+
		"\u0936\u0932\3\2\2\2\u0936\u0934\3\2\2\2\u0937\u00a3\3\2\2\2\u0938\u0939"+
		"\7\u01cf\2\2\u0939\u093a\t\20\2\2\u093a\u00a5\3\2\2\2\u093b\u093c\7\u00d6"+
		"\2\2\u093c\u0956\7\30\2\2\u093d\u093f\7o\2\2\u093e\u0940\7-\2\2\u093f"+
		"\u093e\3\2\2\2\u093f\u0940\3\2\2\2\u0940\u0941\3\2\2\2\u0941\u0945\7\3"+
		"\2\2\u0942\u0946\5\u0206\u0104\2\u0943\u0946\7\u01d1\2\2\u0944\u0946\7"+
		"\u01d2\2\2\u0945\u0942\3\2\2\2\u0945\u0943\3\2\2\2\u0945\u0944\3\2\2\2"+
		"\u0946\u094f\3\2\2\2\u0947\u094b\7\26\2\2\u0948\u094c\5\u0206\u0104\2"+
		"\u0949\u094c\7\u01d1\2\2\u094a\u094c\7\u01d2\2\2\u094b\u0948\3\2\2\2\u094b"+
		"\u0949\3\2\2\2\u094b\u094a\3\2\2\2\u094c\u094e\3\2\2\2\u094d\u0947\3\2"+
		"\2\2\u094e\u0951\3\2\2\2\u094f\u094d\3\2\2\2\u094f\u0950\3\2\2\2\u0950"+
		"\u0952\3\2\2\2\u0951\u094f\3\2\2\2\u0952\u0954\7\4\2\2\u0953\u0955\7\u0093"+
		"\2\2\u0954\u0953\3\2\2\2\u0954\u0955\3\2\2\2\u0955\u0957\3\2\2\2\u0956"+
		"\u093d\3\2\2\2\u0956\u0957\3\2\2\2\u0957\u00a7\3\2\2\2\u0958\u0959\5\u00aa"+
		"V\2\u0959\u00a9\3\2\2\2\u095a\u095b\7\u0348\2\2\u095b\u00ab\3\2\2\2\u095c"+
		"\u095f\5\u00aeX\2\u095d\u095e\7)\2\2\u095e\u0960\7\u00ae\2\2\u095f\u095d"+
		"\3\2\2\2\u095f\u0960\3\2\2\2\u0960\u00ad\3\2\2\2\u0961\u0964\5\u00b0Y"+
		"\2\u0962\u0964\5\u0202\u0102\2\u0963\u0961\3\2\2\2\u0963\u0962\3\2\2\2"+
		"\u0964\u00af\3\2\2\2\u0965\u09da\7\u02d7\2\2\u0966\u09da\7\u029a\2\2\u0967"+
		"\u09da\7\u0299\2\2\u0968\u09da\7\u024d\2\2\u0969\u096d\t\21\2\2\u096a"+
		"\u096e\5\u01fa\u00fe\2\u096b\u096c\7\3\2\2\u096c\u096e\7\4\2\2\u096d\u096a"+
		"\3\2\2\2\u096d\u096b\3\2\2\2\u096e\u09da\3\2\2\2\u096f\u0973\7\u026c\2"+
		"\2\u0970\u0974\5\u01fa\u00fe\2\u0971\u0972\7\3\2\2\u0972\u0974\7\4\2\2"+
		"\u0973\u0970\3\2\2\2\u0973\u0971\3\2\2\2\u0974\u09da\3\2\2\2\u0975\u0979"+
		"\7\u0288\2\2\u0976\u097a\5\u01fa\u00fe\2\u0977\u0978\7\3\2\2\u0978\u097a"+
		"\7\4\2\2\u0979\u0976\3\2\2\2\u0979\u0977\3\2\2\2\u097a\u09da\3\2\2\2\u097b"+
		"\u09da\7\u02c6\2\2\u097c\u097e\7d\2\2\u097d\u097f\7\u00dd\2\2\u097e\u097d"+
		"\3\2\2\2\u097e\u097f\3\2\2\2\u097f\u09da\3\2\2\2\u0980\u0982\t\22\2\2"+
		"\u0981\u0983\7\u01a0\2\2\u0982\u0981\3\2\2\2\u0982\u0983\3\2\2\2\u0983"+
		"\u0986\3\2\2\2\u0984\u0986\7\u02ff\2\2\u0985\u0980\3\2\2\2\u0985\u0984"+
		"\3\2\2\2\u0986\u098a\3\2\2\2\u0987\u098b\5\u01fc\u00ff\2\u0988\u0989\7"+
		"\3\2\2\u0989\u098b\7\4\2\2\u098a\u0987\3\2\2\2\u098a\u0988\3\2\2\2\u098a"+
		"\u098b\3\2\2\2\u098b\u098e\3\2\2\2\u098c\u098d\7;\2\2\u098d\u098f\t\f"+
		"\2\2\u098e\u098c\3\2\2\2\u098e\u098f\3\2\2\2\u098f\u0991\3\2\2\2\u0990"+
		"\u0992\5\u0200\u0101\2\u0991\u0990\3\2\2\2\u0991\u0992\3\2\2\2\u0992\u09da"+
		"\3\2\2\2\u0993\u0994\t\22\2\2\u0994\u0995\7\u0162\2\2\u0995\u0998\7\u016f"+
		"\2\2\u0996\u0998\7\u025e\2\2\u0997\u0993\3\2\2\2\u0997\u0996\3\2\2\2\u0998"+
		"\u099c\3\2\2\2\u0999\u099d\5\u01fc\u00ff\2\u099a\u099b\7\3\2\2\u099b\u099d"+
		"\7\4\2\2\u099c\u0999\3\2\2\2\u099c\u099a\3\2\2\2\u099c\u099d\3\2\2\2\u099d"+
		"\u09a0\3\2\2\2\u099e\u099f\7;\2\2\u099f\u09a1\t\f\2\2\u09a0\u099e\3\2"+
		"\2\2\u09a0\u09a1\3\2\2\2\u09a1\u09a3\3\2\2\2\u09a2\u09a4\5\u0200\u0101"+
		"\2\u09a3\u09a2\3\2\2\2\u09a3\u09a4\3\2\2\2\u09a4\u09da\3\2\2\2\u09a5\u09a9"+
		"\t\23\2\2\u09a6\u09aa\5\u01fc\u00ff\2\u09a7\u09a8\7\3\2\2\u09a8\u09aa"+
		"\7\4\2\2\u09a9\u09a6\3\2\2\2\u09a9\u09a7\3\2\2\2\u09a9\u09aa\3\2\2\2\u09aa"+
		"\u09ad\3\2\2\2\u09ab\u09ac\7;\2\2\u09ac\u09ae\t\f\2\2\u09ad\u09ab\3\2"+
		"\2\2\u09ad\u09ae\3\2\2\2\u09ae\u09da\3\2\2\2\u09af\u09b3\7\u024e\2\2\u09b0"+
		"\u09b4\5\u01fa\u00fe\2\u09b1\u09b2\7\3\2\2\u09b2\u09b4\7\4\2\2\u09b3\u09b0"+
		"\3\2\2\2\u09b3\u09b1\3\2\2\2\u09b3\u09b4\3\2\2\2\u09b4\u09da\3\2\2\2\u09b5"+
		"\u09b7\7\u024e\2\2\u09b6\u09b8\7\u01a0\2\2\u09b7\u09b6\3\2\2\2\u09b7\u09b8"+
		"\3\2\2\2\u09b8\u09bb\3\2\2\2\u09b9\u09bb\7\u02fe\2\2\u09ba\u09b5\3\2\2"+
		"\2\u09ba\u09b9\3\2\2\2\u09bb\u09bf\3\2\2\2\u09bc\u09c0\5\u01fa\u00fe\2"+
		"\u09bd\u09be\7\3\2\2\u09be\u09c0\7\4\2\2\u09bf\u09bc\3\2\2\2\u09bf\u09bd"+
		"\3\2\2\2\u09bf\u09c0\3\2\2\2\u09c0\u09da\3\2\2\2\u09c1\u09c2\7\u024e\2"+
		"\2\u09c2\u09c3\7\u0162\2\2\u09c3\u09c6\7\u016f\2\2\u09c4\u09c6\7\u0254"+
		"\2\2\u09c5\u09c1\3\2\2\2\u09c5\u09c4\3\2\2\2\u09c6\u09cc\3\2\2\2\u09c7"+
		"\u09c8\7\3\2\2\u09c8\u09c9\7\30\2\2\u09c9\u09ca\7\u0348\2\2\u09ca\u09cb"+
		"\3\2\2\2\u09cb\u09cd\7\4\2\2\u09cc\u09c7\3\2\2\2\u09cc\u09cd\3\2\2\2\u09cd"+
		"\u09da\3\2\2\2\u09ce\u09da\7\u0264\2\2\u09cf\u09da\7\u02e7\2\2\u09d0\u09d2"+
		"\7\u02e8\2\2\u09d1\u09d3\5\u01fa\u00fe\2\u09d2\u09d1\3\2\2\2\u09d2\u09d3"+
		"\3\2\2\2\u09d3\u09d4\3\2\2\2\u09d4\u09d5\t\24\2\2\u09d5\u09d6\7\u02e7"+
		"\2\2\u09d6\u09da\7\u0142\2\2\u09d7\u09da\7\u02d0\2\2\u09d8\u09da\7\u01a2"+
		"\2\2\u09d9\u0965\3\2\2\2\u09d9\u0966\3\2\2\2\u09d9\u0967\3\2\2\2\u09d9"+
		"\u0968\3\2\2\2\u09d9\u0969\3\2\2\2\u09d9\u096f\3\2\2\2\u09d9\u0975\3\2"+
		"\2\2\u09d9\u097b\3\2\2\2\u09d9\u097c\3\2\2\2\u09d9\u0985\3\2\2\2\u09d9"+
		"\u0997\3\2\2\2\u09d9\u09a5\3\2\2\2\u09d9\u09af\3\2\2\2\u09d9\u09ba\3\2"+
		"\2\2\u09d9\u09c5\3\2\2\2\u09d9\u09ce\3\2\2\2\u09d9\u09cf\3\2\2\2\u09d9"+
		"\u09d0\3\2\2\2\u09d9\u09d7\3\2\2\2\u09d9\u09d8\3\2\2\2\u09da\u00b1\3\2"+
		"\2\2\u09db\u09dc\7y\2\2\u09dc\u09df\7\u01bd\2\2\u09dd\u09e0\5\u013e\u00a0"+
		"\2\u09de\u09e0\5\u02e0\u0171\2\u09df\u09dd\3\2\2\2\u09df\u09de\3\2\2\2"+
		"\u09e0\u0a62\3\2\2\2\u09e1\u09e2\7\u00a5\2\2\u09e2\u0a62\t\25\2\2\u09e3"+
		"\u09e4\7\u00d4\2\2\u09e4\u09e5\7\u011a\2\2\u09e5\u0a62\t\7\2\2\u09e6\u09e8"+
		"\7\u00c1\2\2\u09e7\u09e6\3\2\2\2\u09e7\u09e8\3\2\2\2\u09e8\u09e9\3\2\2"+
		"\2\u09e9\u0a62\7^\2\2\u09ea\u09ec\7\u00c1\2\2\u09eb\u09ea\3\2\2\2\u09eb"+
		"\u09ec\3\2\2\2\u09ec\u09ed\3\2\2\2\u09ed\u0a62\7\u0131\2\2\u09ee\u09ef"+
		"\7\u00f4\2\2\u09ef\u09f2\7\u00c2\2\2\u09f0\u09f2\7\u01b3\2\2\u09f1\u09ee"+
		"\3\2\2\2\u09f1\u09f0\3\2\2\2\u09f2\u09f3\3\2\2\2\u09f3\u09f4\7\u00c9\2"+
		"\2\u09f4\u09f5\7\u00c2\2\2\u09f5\u0a62\7\u015f\2\2\u09f6\u09f7\7\u00c2"+
		"\2\2\u09f7\u0a62\7\66\2\2\u09f8\u09f9\7\u00ba\2\2\u09f9\u09fa\7\u01c5"+
		"\2\2\u09fa\u0a03\7U\2\2\u09fb\u09fc\7\u00e9\2\2\u09fc\u09fd\7\u01c5\2"+
		"\2\u09fd\u0a03\7U\2\2\u09fe\u09ff\7L\2\2\u09ff\u0a03\7\u01c5\2\2\u0a00"+
		"\u0a01\7\u00bf\2\2\u0a01\u0a03\7\u01c5\2\2\u0a02\u09f8\3\2\2\2\u0a02\u09fb"+
		"\3\2\2\2\u0a02\u09fe\3\2\2\2\u0a02\u0a00\3\2\2\2\u0a03\u0a62\3\2\2\2\u0a04"+
		"\u0a06\7\u00bf\2\2\u0a05\u0a04\3\2\2\2\u0a05\u0a06\3\2\2\2\u0a06\u0a07"+
		"\3\2\2\2\u0a07\u0a08\7y\2\2\u0a08\u0a62\7\u01b0\2\2\u0a09\u0a0a\7\u00d2"+
		"\2\2\u0a0a\u0a0b\7\u00d9\2\2\u0a0b\u0a10\5\u0140\u00a1\2\u0a0c\u0a0d\7"+
		"\u00bf\2\2\u0a0d\u0a0e\7\u00d2\2\2\u0a0e\u0a10\7\u00d9\2\2\u0a0f\u0a09"+
		"\3\2\2\2\u0a0f\u0a0c\3\2\2\2\u0a10\u0a62\3\2\2\2\u0a11\u0a12\7\u00bf\2"+
		"\2\u0a12\u0a16\7\u0106\2\2\u0a13\u0a14\7\u0106\2\2\u0a14\u0a16\7\30\2"+
		"\2\u0a15\u0a11\3\2\2\2\u0a15\u0a13\3\2\2\2\u0a16\u0a62\3\2\2\2\u0a17\u0a19"+
		"\7\u00bf\2\2\u0a18\u0a17\3\2\2\2\u0a18\u0a19\3\2\2\2\u0a19\u0a1a\3\2\2"+
		"\2\u0a1a\u0a1b\7}\2\2\u0a1b\u0a62\7\66\2\2\u0a1c\u0a1d\t\b\2\2\u0a1d\u0a62"+
		"\7\u01bf\2\2\u0a1e\u0a20\7\u00bf\2\2\u0a1f\u0a1e\3\2\2\2\u0a1f\u0a20\3"+
		"\2\2\2\u0a20\u0a21\3\2\2\2\u0a21\u0a62\7Y\2\2\u0a22\u0a23\7\u0256\2\2"+
		"\u0a23\u0a62\7\30\2\2\u0a24\u0a25\7\u00bf\2\2\u0a25\u0a29\7C\2\2\u0a26"+
		"\u0a27\7C\2\2\u0a27\u0a29\5\u0142\u00a2\2\u0a28\u0a24\3\2\2\2\u0a28\u0a26"+
		"\3\2\2\2\u0a29\u0a62\3\2\2\2\u0a2a\u0a2b\7\u013c\2\2\u0a2b\u0a33\7\u01b8"+
		"\2\2\u0a2c\u0a34\5\u02e0\u0171\2\u0a2d\u0a2e\7\3\2\2\u0a2e\u0a2f\5\u02e0"+
		"\u0171\2\u0a2f\u0a30\7\26\2\2\u0a30\u0a31\7\20\2\2\u0a31\u0a32\7\4\2\2"+
		"\u0a32\u0a34\3\2\2\2\u0a33\u0a2c\3\2\2\2\u0a33\u0a2d\3\2\2\2\u0a34\u0a62"+
		"\3\2\2\2\u0a35\u0a3a\7,\2\2\u0a36\u0a37\7\u00bf\2\2\u0a37\u0a3b\7\u00ab"+
		"\2\2\u0a38\u0a39\7\u00ab\2\2\u0a39\u0a3b\7\30\2\2\u0a3a\u0a36\3\2\2\2"+
		"\u0a3a\u0a38\3\2\2\2\u0a3b\u0a62\3\2\2\2\u0a3c\u0a3d\7\u0117\2\2\u0a3d"+
		"\u0a3e\7\u01c2\2\2\u0a3e\u0a62\t\5\2\2\u0a3f\u0a40\7\u00e4\2\2\u0a40\u0a41"+
		"\7\u0126\2\2\u0a41\u0a62\t\t\2\2\u0a42\u0a43\7\u010a\2\2\u0a43\u0a62\t"+
		"\n\2\2\u0a44\u0a45\7\u01c6\2\2\u0a45\u0a46\7 \2\2\u0a46\u0a47\7\u011e"+
		"\2\2\u0a47\u0a48\7[\2\2\u0a48\u0a51\7\u01ba\2\2\u0a49\u0a4a\7\u01c6\2"+
		"\2\u0a4a\u0a4b\7 \2\2\u0a4b\u0a4c\7\30\2\2\u0a4c\u0a51\7\u01ba\2\2\u0a4d"+
		"\u0a4e\7N\2\2\u0a4e\u0a4f\7 \2\2\u0a4f\u0a51\7\u01b9\2\2\u0a50\u0a44\3"+
		"\2\2\2\u0a50\u0a49\3\2\2\2\u0a50\u0a4d\3\2\2\2\u0a51\u0a62\3\2\2\2\u0a52"+
		"\u0a53\7\u0103\2\2\u0a53\u0a54\7\u01be\2\2\u0a54\u0a62\5\u0144\u00a3\2"+
		"\u0a55\u0a56\t\13\2\2\u0a56\u0a57\7\u01c4\2\2\u0a57\u0a62\7\u01c1\2\2"+
		"\u0a58\u0a59\7\u0116\2\2\u0a59\u0a62\7\u01b7\2\2\u0a5a\u0a5c\7\u00c1\2"+
		"\2\u0a5b\u0a5a\3\2\2\2\u0a5b\u0a5c\3\2\2\2\u0a5c\u0a5d\3\2\2\2\u0a5d\u0a62"+
		"\7\u01c3\2\2\u0a5e\u0a62\7\u0113\2\2\u0a5f\u0a60\7\u00d4\2\2\u0a60\u0a62"+
		"\7;\2\2\u0a61\u09db\3\2\2\2\u0a61\u09e1\3\2\2\2\u0a61\u09e3\3\2\2\2\u0a61"+
		"\u09e7\3\2\2\2\u0a61\u09eb\3\2\2\2\u0a61\u09f1\3\2\2\2\u0a61\u09f6\3\2"+
		"\2\2\u0a61\u0a02\3\2\2\2\u0a61\u0a05\3\2\2\2\u0a61\u0a0f\3\2\2\2\u0a61"+
		"\u0a15\3\2\2\2\u0a61\u0a18\3\2\2\2\u0a61\u0a1c\3\2\2\2\u0a61\u0a1f\3\2"+
		"\2\2\u0a61\u0a22\3\2\2\2\u0a61\u0a28\3\2\2\2\u0a61\u0a2a\3\2\2\2\u0a61"+
		"\u0a35\3\2\2\2\u0a61\u0a3c\3\2\2\2\u0a61\u0a3f\3\2\2\2\u0a61\u0a42\3\2"+
		"\2\2\u0a61\u0a50\3\2\2\2\u0a61\u0a52\3\2\2\2\u0a61\u0a55\3\2\2\2\u0a61"+
		"\u0a58\3\2\2\2\u0a61\u0a5b\3\2\2\2\u0a61\u0a5e\3\2\2\2\u0a61\u0a5f\3\2"+
		"\2\2\u0a62\u00b3\3\2\2\2\u0a63\u0a65\7g\2\2\u0a64\u0a63\3\2\2\2\u0a64"+
		"\u0a65\3\2\2\2\u0a65\u0a66\3\2\2\2\u0a66\u0a67\7\u00f1\2\2\u0a67\u0a68"+
		"\t\26\2\2\u0a68\u0ae6\7\30\2\2\u0a69\u0a6a\7y\2\2\u0a6a\u0a6d\7\u01bd"+
		"\2\2\u0a6b\u0a6e\5\u013e\u00a0\2\u0a6c\u0a6e\5\u02e0\u0171\2\u0a6d\u0a6b"+
		"\3\2\2\2\u0a6d\u0a6c\3\2\2\2\u0a6e\u0ae6\3\2\2\2\u0a6f\u0a70\7\u00a5\2"+
		"\2\u0a70\u0ae6\t\27\2\2\u0a71\u0a72\7\u00d4\2\2\u0a72\u0a82\7\u011a\2"+
		"\2\u0a73\u0a83\7\u01c5\2\2\u0a74\u0a83\7\u01e0\2\2\u0a75\u0a76\7\u0114"+
		"\2\2\u0a76\u0a83\7\66\2\2\u0a77\u0a83\7\u01e2\2\2\u0a78\u0a79\7\u0110"+
		"\2\2\u0a79\u0a83\7\66\2\2\u0a7a\u0a7e\7\u01e2\2\2\u0a7b\u0a7c\7\u0110"+
		"\2\2\u0a7c\u0a7e\7\66\2\2\u0a7d\u0a7a\3\2\2\2\u0a7d\u0a7b\3\2\2\2\u0a7e"+
		"\u0a7f\3\2\2\2\u0a7f\u0a80\7\u013b\2\2\u0a80\u0a83\7\u00c3\2\2\u0a81\u0a83"+
		"\7\u01bb\2\2\u0a82\u0a73\3\2\2\2\u0a82\u0a74\3\2\2\2\u0a82\u0a75\3\2\2"+
		"\2\u0a82\u0a77\3\2\2\2\u0a82\u0a78\3\2\2\2\u0a82\u0a7d\3\2\2\2\u0a82\u0a81"+
		"\3\2\2\2\u0a83\u0ae6\3\2\2\2\u0a84\u0a86\7\u00c1\2\2\u0a85\u0a84\3\2\2"+
		"\2\u0a85\u0a86\3\2\2\2\u0a86\u0a87\3\2\2\2\u0a87\u0ae6\7^\2\2\u0a88\u0a8a"+
		"\7\u00c1\2\2\u0a89\u0a88\3\2\2\2\u0a89\u0a8a\3\2\2\2\u0a8a\u0a8b\3\2\2"+
		"\2\u0a8b\u0ae6\7\u0131\2\2\u0a8c\u0a8d\7\u00d2\2\2\u0a8d\u0a8e\7\u00d9"+
		"\2\2\u0a8e\u0a93\5\u0140\u00a1\2\u0a8f\u0a90\7\u00bf\2\2\u0a90\u0a91\7"+
		"\u00d2\2\2\u0a91\u0a93\7\u00d9\2\2\u0a92\u0a8c\3\2\2\2\u0a92\u0a8f\3\2"+
		"\2\2\u0a93\u0ae6\3\2\2\2\u0a94\u0a95\7\u00ba\2\2\u0a95\u0a96\7\u01c5\2"+
		"\2\u0a96\u0a9f\7U\2\2\u0a97\u0a98\7\u00e9\2\2\u0a98\u0a99\7\u01c5\2\2"+
		"\u0a99\u0a9f\7U\2\2\u0a9a\u0a9b\7L\2\2\u0a9b\u0a9f\7\u01c5\2\2\u0a9c\u0a9d"+
		"\7\u00bf\2\2\u0a9d\u0a9f\7\u01c5\2\2\u0a9e\u0a94\3\2\2\2\u0a9e\u0a97\3"+
		"\2\2\2\u0a9e\u0a9a\3\2\2\2\u0a9e\u0a9c\3\2\2\2\u0a9f\u0ae6\3\2\2\2\u0aa0"+
		"\u0aa2\7\u00bf\2\2\u0aa1\u0aa0\3\2\2\2\u0aa1\u0aa2\3\2\2\2\u0aa2\u0aa3"+
		"\3\2\2\2\u0aa3\u0ae6\7Y\2\2\u0aa4\u0aa5\7\u00bf\2\2\u0aa5\u0aa9\7C\2\2"+
		"\u0aa6\u0aa7\7C\2\2\u0aa7\u0aa9\5\u0142\u00a2\2\u0aa8\u0aa4\3\2\2\2\u0aa8"+
		"\u0aa6\3\2\2\2\u0aa9\u0ae6\3\2\2\2\u0aaa\u0aab\7\u013c\2\2\u0aab\u0ab3"+
		"\7\u01b8\2\2\u0aac\u0ab4\5\u02e0\u0171\2\u0aad\u0aae\7\3\2\2\u0aae\u0aaf"+
		"\5\u02e0\u0171\2\u0aaf\u0ab0\7\26\2\2\u0ab0\u0ab1\7\20\2\2\u0ab1\u0ab2"+
		"\7\4\2\2\u0ab2\u0ab4\3\2\2\2\u0ab3\u0aac\3\2\2\2\u0ab3\u0aad\3\2\2\2\u0ab4"+
		"\u0ae6\3\2\2\2\u0ab5\u0aba\7,\2\2\u0ab6\u0ab7\7\u00bf\2\2\u0ab7\u0abb"+
		"\7\u00ab\2\2\u0ab8\u0ab9\7\u00ab\2\2\u0ab9\u0abb\7\30\2\2\u0aba\u0ab6"+
		"\3\2\2\2\u0aba\u0ab8\3\2\2\2\u0abb\u0ae6\3\2\2\2\u0abc\u0abd\7\u0117\2"+
		"\2\u0abd\u0abe\7\u01c2\2\2\u0abe\u0ae6\t\5\2\2\u0abf\u0ac0\7\u00e4\2\2"+
		"\u0ac0\u0ac1\7\u0126\2\2\u0ac1\u0ae6\t\t\2\2\u0ac2\u0ac3\7\u010a\2\2\u0ac3"+
		"\u0ae6\t\n\2\2\u0ac4\u0ac5\7\u0103\2\2\u0ac5\u0ac6\7\u01be\2\2\u0ac6\u0ae6"+
		"\5\u0144\u00a3\2\u0ac7\u0ac8\7F\2\2\u0ac8\u0ac9\7\u00c9\2\2\u0ac9\u0aca"+
		"\7\u00f3\2\2\u0aca\u0ae6\t\5\2\2\u0acb\u0acc\t\13\2\2\u0acc\u0acd\7\u01c4"+
		"\2\2\u0acd\u0ae6\7\u01c1\2\2\u0ace\u0acf\7\u01b3\2\2\u0acf\u0ad0\7\u00c9"+
		"\2\2\u0ad0\u0ad1\7\u00c2\2\2\u0ad1\u0ae6\7\u015f\2\2\u0ad2\u0ad3\7\u00c2"+
		"\2\2\u0ad3\u0ae6\7\66\2\2\u0ad4\u0ad5\7\u01c6\2\2\u0ad5\u0ad6\7 \2\2\u0ad6"+
		"\u0ad7\7\u011e\2\2\u0ad7\u0ad8\7[\2\2\u0ad8\u0ae1\7\u01ba\2\2\u0ad9\u0ada"+
		"\7\u01c6\2\2\u0ada\u0adb\7 \2\2\u0adb\u0adc\7\30\2\2\u0adc\u0ae1\7\u01ba"+
		"\2\2\u0add\u0ade\7N\2\2\u0ade\u0adf\7 \2\2\u0adf\u0ae1\7\u01b9\2\2\u0ae0"+
		"\u0ad4\3\2\2\2\u0ae0\u0ad9\3\2\2\2\u0ae0\u0add\3\2\2\2\u0ae1\u0ae6\3\2"+
		"\2\2\u0ae2\u0ae3\t\30\2\2\u0ae3\u0ae4\7\u01e1\2\2\u0ae4\u0ae6\7\u01e3"+
		"\2\2\u0ae5\u0a64\3\2\2\2\u0ae5\u0a69\3\2\2\2\u0ae5\u0a6f\3\2\2\2\u0ae5"+
		"\u0a71\3\2\2\2\u0ae5\u0a85\3\2\2\2\u0ae5\u0a89\3\2\2\2\u0ae5\u0a92\3\2"+
		"\2\2\u0ae5\u0a9e\3\2\2\2\u0ae5\u0aa1\3\2\2\2\u0ae5\u0aa8\3\2\2\2\u0ae5"+
		"\u0aaa\3\2\2\2\u0ae5\u0ab5\3\2\2\2\u0ae5\u0abc\3\2\2\2\u0ae5\u0abf\3\2"+
		"\2\2\u0ae5\u0ac2\3\2\2\2\u0ae5\u0ac4\3\2\2\2\u0ae5\u0ac7\3\2\2\2\u0ae5"+
		"\u0acb\3\2\2\2\u0ae5\u0ace\3\2\2\2\u0ae5\u0ad2\3\2\2\2\u0ae5\u0ae0\3\2"+
		"\2\2\u0ae5\u0ae2\3\2\2\2\u0ae6\u00b5\3\2\2\2\u0ae7\u0aea\7\u01e8\2\2\u0ae8"+
		"\u0ae9\7\u013b\2\2\u0ae9\u0aeb\7\30\2\2\u0aea\u0ae8\3\2\2\2\u0aea\u0aeb"+
		"\3\2\2\2\u0aeb\u0b0a\3\2\2\2\u0aec\u0aed\7\u01e7\2\2\u0aed\u0aee\7\65"+
		"\2\2\u0aee\u0b0a\7\30\2\2\u0aef\u0af0\7\u00bf\2\2\u0af0\u0af4\7\u01d2"+
		"\2\2\u0af1\u0af2\7\u01d2\2\2\u0af2\u0af4\7\30\2\2\u0af3\u0aef\3\2\2\2"+
		"\u0af3\u0af1\3\2\2\2\u0af4\u0b0a\3\2\2\2\u0af5\u0af6\7\u00bf\2\2\u0af6"+
		"\u0afa\7\u01d1\2\2\u0af7\u0af8\7\u01d1\2\2\u0af8\u0afa\7\30\2\2\u0af9"+
		"\u0af5\3\2\2\2\u0af9\u0af7\3\2\2\2\u0afa\u0b0a\3\2\2\2\u0afb\u0afd\7\u00bf"+
		"\2\2\u0afc\u0afb\3\2\2\2\u0afc\u0afd\3\2\2\2\u0afd\u0afe\3\2\2\2\u0afe"+
		"\u0b0a\7\u01e6\2\2\u0aff\u0b00\7\u00bf\2\2\u0b00\u0b04\7\u01e5\2\2\u0b01"+
		"\u0b02\7\u01e5\2\2\u0b02\u0b04\7\30\2\2\u0b03\u0aff\3\2\2\2\u0b03\u0b01"+
		"\3\2\2\2\u0b04\u0b0a\3\2\2\2\u0b05\u0b07\7\u00bf\2\2\u0b06\u0b05\3\2\2"+
		"\2\u0b06\u0b07\3\2\2\2\u0b07\u0b08\3\2\2\2\u0b08\u0b0a\7\u00ce\2\2\u0b09"+
		"\u0ae7\3\2\2\2\u0b09\u0aec\3\2\2\2\u0b09\u0af3\3\2\2\2\u0b09\u0af9\3\2"+
		"\2\2\u0b09\u0afc\3\2\2\2\u0b09\u0b03\3\2\2\2\u0b09\u0b06\3\2\2\2\u0b0a"+
		"\u00b7\3\2\2\2\u0b0b\u0b0c\7\37\2\2\u0b0c\u0b0d\7\u0136\2\2\u0b0d\u0b0e"+
		"\7\3\2\2\u0b0e\u0b13\5\u026e\u0138\2\u0b0f\u0b10\7\26\2\2\u0b10\u0b12"+
		"\5\u026e\u0138\2\u0b11\u0b0f\3\2\2\2\u0b12\u0b15\3\2\2\2\u0b13\u0b11\3"+
		"\2\2\2\u0b13\u0b14\3\2\2\2\u0b14\u0b16\3\2\2\2\u0b15\u0b13\3\2\2\2\u0b16"+
		"\u0b17\7\4\2\2\u0b17\u0b4a\3\2\2\2\u0b18\u0b19\7\37\2\2\u0b19\u0b1a\7"+
		"\u0136\2\2\u0b1a\u0b1b\7\3\2\2\u0b1b\u0b20\7\27\2\2\u0b1c\u0b1d\7\26\2"+
		"\2\u0b1d\u0b1f\7\27\2\2\u0b1e\u0b1c\3\2\2\2\u0b1f\u0b22\3\2\2\2\u0b20"+
		"\u0b1e\3\2\2\2\u0b20\u0b21\3\2\2\2\u0b21\u0b23\3\2\2\2\u0b22\u0b20\3\2"+
		"\2\2\u0b23\u0b4a\7\4\2\2\u0b24\u0b25\7\u01eb\2\2\u0b25\u0b26\7\u0136\2"+
		"\2\u0b26\u0b27\7\3\2\2\u0b27\u0b2c\5\u026e\u0138\2\u0b28\u0b29\7\26\2"+
		"\2\u0b29\u0b2b\5\u026e\u0138\2\u0b2a\u0b28\3\2\2\2\u0b2b\u0b2e\3\2\2\2"+
		"\u0b2c\u0b2a\3\2\2\2\u0b2c\u0b2d\3\2\2\2\u0b2d\u0b2f\3\2\2\2\u0b2e\u0b2c"+
		"\3\2\2\2\u0b2f\u0b30\7\4\2\2\u0b30\u0b4a\3\2\2\2\u0b31\u0b32\7\u01eb\2"+
		"\2\u0b32\u0b33\7\u0136\2\2\u0b33\u0b34\7\3\2\2\u0b34\u0b39\7\27\2\2\u0b35"+
		"\u0b36\7\26\2\2\u0b36\u0b38\7\27\2\2\u0b37\u0b35\3\2\2\2\u0b38\u0b3b\3"+
		"\2\2\2\u0b39\u0b37\3\2\2\2\u0b39\u0b3a\3\2\2\2\u0b3a\u0b3c\3\2\2\2\u0b3b"+
		"\u0b39\3\2\2\2\u0b3c\u0b4a\7\4\2\2\u0b3d\u0b3e\7\u00bf\2\2\u0b3e\u0b3f"+
		"\7\u00a3\2\2\u0b3f\u0b4a\7\u00a4\2\2\u0b40\u0b41\7\u00a3\2\2\u0b41\u0b42"+
		"\7\u00a4\2\2\u0b42\u0b4a\5\u0270\u0139\2\u0b43\u0b44\7\u01e9\2\2\u0b44"+
		"\u0b4a\5\u0268\u0135\2\u0b45\u0b46\7\u01ea\2\2\u0b46\u0b4a\5\u026a\u0136"+
		"\2\u0b47\u0b48\7\u01ec\2\2\u0b48\u0b4a\5\u026c\u0137\2\u0b49\u0b0b\3\2"+
		"\2\2\u0b49\u0b18\3\2\2\2\u0b49\u0b24\3\2\2\2\u0b49\u0b31\3\2\2\2\u0b49"+
		"\u0b3d\3\2\2\2\u0b49\u0b40\3\2\2\2\u0b49\u0b43\3\2\2\2\u0b49\u0b45\3\2"+
		"\2\2\u0b49\u0b47\3\2\2\2\u0b4a\u00b9\3\2\2\2\u0b4b\u0b4d\7\37\2\2\u0b4c"+
		"\u0b4e\7D\2\2\u0b4d\u0b4c\3\2\2\2\u0b4d\u0b4e\3\2\2\2\u0b4e\u0b4f\3\2"+
		"\2\2\u0b4f\u0be7\5\u013c\u009f\2\u0b50\u0b52\7$\2\2\u0b51\u0b53\7D\2\2"+
		"\u0b52\u0b51\3\2\2\2\u0b52\u0b53\3\2\2\2\u0b53\u0b54\3\2\2\2\u0b54\u0be7"+
		"\5\u00fc\177\2\u0b55\u0b56\7\u00ed\2\2\u0b56\u0b57\7D\2\2\u0b57\u0b58"+
		"\5\u020c\u0107\2\u0b58\u0b59\7\u0123\2\2\u0b59\u0b5a\5\u020e\u0108\2\u0b5a"+
		"\u0be7\3\2\2\2\u0b5b\u0b5d\7e\2\2\u0b5c\u0b5e\7D\2\2\u0b5d\u0b5c\3\2\2"+
		"\2\u0b5d\u0b5e\3\2\2\2\u0b5e\u0b5f\3\2\2\2\u0b5f\u0b60\5\u020a\u0106\2"+
		"\u0b60\u0b61\7\u00f0\2\2\u0b61\u0be7\3\2\2\2\u0b62\u0b63\7\37\2\2\u0b63"+
		"\u0b65\7\u00da\2\2\u0b64\u0b66\7\177\2\2\u0b65\u0b64\3\2\2\2\u0b65\u0b66"+
		"\3\2\2\2\u0b66\u0b67\3\2\2\2\u0b67\u0be7\5\u013a\u009e\2\u0b68\u0b6c\7"+
		"\37\2\2\u0b69\u0b6d\5\u0114\u008b\2\u0b6a\u0b6d\5\u0116\u008c\2\u0b6b"+
		"\u0b6d\5\u011a\u008e\2\u0b6c\u0b69\3\2\2\2\u0b6c\u0b6a\3\2\2\2\u0b6c\u0b6b"+
		"\3\2\2\2\u0b6d\u0be7\3\2\2\2\u0b6e\u0b79\7e\2\2\u0b6f\u0b70\7\u0209\2"+
		"\2\u0b70\u0b7a\7\u00a3\2\2\u0b71\u0b77\7\u0129\2\2\u0b72\u0b73\7\u01fb"+
		"\2\2\u0b73\u0b77\7\u00a3\2\2\u0b74\u0b77\7>\2\2\u0b75\u0b77\7K\2\2\u0b76"+
		"\u0b71\3\2\2\2\u0b76\u0b72\3\2\2\2\u0b76\u0b74\3\2\2\2\u0b76\u0b75\3\2"+
		"\2\2\u0b77\u0b78\3\2\2\2\u0b78\u0b7a\5\u0236\u011c\2\u0b79\u0b6f\3\2\2"+
		"\2\u0b79\u0b76\3\2\2\2\u0b7a\u0be7\3\2\2\2\u0b7b\u0b7c\7\37\2\2\u0b7c"+
		"\u0b7d\7\u00d6\2\2\u0b7d\u0b7e\7\65\2\2\u0b7e\u0be7\5\u011c\u008f\2\u0b7f"+
		"\u0b80\7\37\2\2\u0b80\u0b81\7\u00d6\2\2\u0b81\u0be7\5\u012a\u0096\2\u0b82"+
		"\u0b83\7$\2\2\u0b83\u0b84\7\u00d6\2\2\u0b84\u0b85\7\30\2\2\u0b85\u0be7"+
		"\5\u012a\u0096\2\u0b86\u0b87\7\u020b\2\2\u0b87\u0b88\7\u00d6\2\2\u0b88"+
		"\u0b89\t\31\2\2\u0b89\u0b8a\7\u0123\2\2\u0b8a\u0b8b\7\u00a6\2\2\u0b8b"+
		"\u0be7\5\u012c\u0097\2\u0b8c\u0b8d\7e\2\2\u0b8d\u0be7\7\u00cf\2\2\u0b8e"+
		"\u0be7\5\u0126\u0094\2\u0b8f\u0b91\7\37\2\2\u0b90\u0b92\7\u011e\2\2\u0b91"+
		"\u0b90\3\2\2\2\u0b91\u0b92\3\2\2\2\u0b92\u0b93\3\2\2\2\u0b93\u0b94\7\u0133"+
		"\2\2\u0b94\u0b95\7\u019a\2\2\u0b95\u0b96\7\u01fd\2\2\u0b96\u0b97\7\u0120"+
		"\2\2\u0b97\u0b99\5\u0222\u0112\2\u0b98\u0b9a\5\u012e\u0098\2\u0b99\u0b98"+
		"\3\2\2\2\u0b99\u0b9a\3\2\2\2\u0b9a\u0be7\3\2\2\2\u0b9b\u0b9d\7e\2\2\u0b9c"+
		"\u0b9e\7\u011e\2\2\u0b9d\u0b9c\3\2\2\2\u0b9d\u0b9e\3\2\2\2\u0b9e\u0b9f"+
		"\3\2\2\2\u0b9f\u0be7\7\u0133\2\2\u0ba0\u0ba4\7\37\2\2\u0ba1\u0ba2\7\u00b6"+
		"\2\2\u0ba2\u0ba5\7\u00e7\2\2\u0ba3\u0ba5\7\u00e7\2\2\u0ba4\u0ba1\3\2\2"+
		"\2\u0ba4\u0ba3\3\2\2\2\u0ba4\u0ba5\3\2\2\2\u0ba5\u0ba6\3\2\2\2\u0ba6\u0be7"+
		"\5\u0130\u0099\2\u0ba7\u0ba9\7$\2\2\u0ba8\u0baa\7\u00b6\2\2\u0ba9\u0ba8"+
		"\3\2\2\2\u0ba9\u0baa\3\2\2\2\u0baa\u0bab\3\2\2\2\u0bab\u0bac\7\u00e7\2"+
		"\2\u0bac\u0be7\5\u0132\u009a\2\u0bad\u0baf\7e\2\2\u0bae\u0bb0\7\u00b6"+
		"\2\2\u0baf\u0bae\3\2\2\2\u0baf\u0bb0\3\2\2\2\u0bb0\u0bb1\3\2\2\2\u0bb1"+
		"\u0be7\7\u00e7\2\2\u0bb2\u0bb3\7U\2\2\u0bb3\u0bb4\7\67\2\2\u0bb4\u0be7"+
		"\t\32\2\2\u0bb5\u0bb7\7\u00c1\2\2\u0bb6\u0bb5\3\2\2\2\u0bb6\u0bb7\3\2"+
		"\2\2\u0bb7\u0bb8\3\2\2\2\u0bb8\u0bba\7\u0135\2\2\u0bb9\u0bbb\7\u0256\2"+
		"\2\u0bba\u0bb9\3\2\2\2\u0bba\u0bbb\3\2\2\2\u0bbb\u0be7\3\2\2\2\u0bbc\u0bbd"+
		"\7\37\2\2\u0bbd\u0bbe\7?\2\2\u0bbe\u0be7\5\u0224\u0113\2\u0bbf\u0bc0\7"+
		"e\2\2\u0bc0\u0be7\7?\2\2\u0bc1\u0bc2\7\37\2\2\u0bc2\u0bc3\7\u00f0\2\2"+
		"\u0bc3\u0bc4\7\u00c9\2\2\u0bc4\u0be7\7e\2\2\u0bc5\u0bc6\7e\2\2\u0bc6\u0bc7"+
		"\7\u00f0\2\2\u0bc7\u0bc8\7\u00c9\2\2\u0bc8\u0be7\7e\2\2\u0bc9\u0bca\t"+
		"\33\2\2\u0bca\u0bcb\7\u0101\2\2\u0bcb\u0bcc\7\u01ed\2\2\u0bcc\u0be7\7"+
		"\u01f5\2\2\u0bcd\u0bce\t\33\2\2\u0bce\u0bcf\7D\2\2\u0bcf\u0bd0\7\u01ed"+
		"\2\2\u0bd0\u0be7\7\u01f5\2\2\u0bd1\u0bd2\7\u01f0\2\2\u0bd2\u0be7\t\5\2"+
		"\2\u0bd3\u0bd4\7.\2\2\u0bd4\u0be7\t\34\2\2\u0bd5\u0bd8\7\u012d\2\2\u0bd6"+
		"\u0bd9\5\u022a\u0116\2\u0bd7\u0bd9\7\u00c2\2\2\u0bd8\u0bd6\3\2\2\2\u0bd8"+
		"\u0bd7\3\2\2\2\u0bd9\u0be7\3\2\2\2\u0bda\u0bdb\7\u01d6\2\2\u0bdb\u0bdc"+
		"\7\u01f1\2\2\u0bdc\u0bdd\7\u019a\2\2\u0bdd\u0be7\5\u0226\u0114\2\u0bde"+
		"\u0bdf\7_\2\2\u0bdf\u0be7\7\u01f1\2\2\u0be0\u0be1\7\u00bf\2\2\u0be1\u0be2"+
		"\7\u00a3\2\2\u0be2\u0be7\7\u00a4\2\2\u0be3\u0be4\7\u00a3\2\2\u0be4\u0be5"+
		"\7\u00a4\2\2\u0be5\u0be7\5\u0270\u0139\2\u0be6\u0b4b\3\2\2\2\u0be6\u0b50"+
		"\3\2\2\2\u0be6\u0b55\3\2\2\2\u0be6\u0b5b\3\2\2\2\u0be6\u0b62\3\2\2\2\u0be6"+
		"\u0b68\3\2\2\2\u0be6\u0b6e\3\2\2\2\u0be6\u0b7b\3\2\2\2\u0be6\u0b7f\3\2"+
		"\2\2\u0be6\u0b82\3\2\2\2\u0be6\u0b86\3\2\2\2\u0be6\u0b8c\3\2\2\2\u0be6"+
		"\u0b8e\3\2\2\2\u0be6\u0b8f\3\2\2\2\u0be6\u0b9b\3\2\2\2\u0be6\u0ba0\3\2"+
		"\2\2\u0be6\u0ba7\3\2\2\2\u0be6\u0bad\3\2\2\2\u0be6\u0bb2\3\2\2\2\u0be6"+
		"\u0bb6\3\2\2\2\u0be6\u0bbc\3\2\2\2\u0be6\u0bbf\3\2\2\2\u0be6\u0bc1\3\2"+
		"\2\2\u0be6\u0bc5\3\2\2\2\u0be6\u0bc9\3\2\2\2\u0be6\u0bcd\3\2\2\2\u0be6"+
		"\u0bd1\3\2\2\2\u0be6\u0bd3\3\2\2\2\u0be6\u0bd5\3\2\2\2\u0be6\u0bda\3\2"+
		"\2\2\u0be6\u0bde\3\2\2\2\u0be6\u0be0\3\2\2\2\u0be6\u0be3\3\2\2\2\u0be7"+
		"\u00bb\3\2\2\2\u0be8\u0be9\7\64\2\2\u0be9\u0c1e\5\u0264\u0133\2\u0bea"+
		"\u0beb\7;\2\2\u0beb\u0c1e\7\30\2\2\u0bec\u0bed\7@\2\2\u0bed\u0c1e\7\u01c8"+
		"\2\2\u0bee\u0bef\7@\2\2\u0bef\u0c1e\7\u00bf\2\2\u0bf0\u0bf1\7\u01cc\2"+
		"\2\u0bf1\u0bf3\7\u01c8\2\2\u0bf2\u0bf4\t\35\2\2\u0bf3\u0bf2\3\2\2\2\u0bf3"+
		"\u0bf4\3\2\2\2\u0bf4\u0c1e\3\2\2\2\u0bf5\u0bf6\7\u01cc\2\2\u0bf6\u0c1e"+
		"\7\u00bf\2\2\u0bf7\u0bf8\7e\2\2\u0bf8\u0bf9\7\u0221\2\2\u0bf9\u0c1e\7"+
		"\u01f4\2\2\u0bfa\u0bfb\7f\2\2\u0bfb\u0c1e\7\u0348\2\2\u0bfc\u0bfd\7\u009a"+
		"\2\2\u0bfd\u0bfe\7\u0215\2\2\u0bfe\u0c1e\7\30\2\2\u0bff\u0c00\7\u00b1"+
		"\2\2\u0c00\u0c1e\t\36\2\2\u0c01\u0c02\7\u00b2\2\2\u0c02\u0c1e\t\37\2\2"+
		"\u0c03\u0c05\7\u00c1\2\2\u0c04\u0c03\3\2\2\2\u0c04\u0c05\3\2\2\2\u0c05"+
		"\u0c06\3\2\2\2\u0c06\u0c1e\7\u021a\2\2\u0c07\u0c08\7\u0219\2\2\u0c08\u0c0c"+
		"\7\u01c8\2\2\u0c09\u0c0a\7\u0219\2\2\u0c0a\u0c0c\7\u00bf\2\2\u0c0b\u0c07"+
		"\3\2\2\2\u0c0b\u0c09\3\2\2\2\u0c0c\u0c1e\3\2\2\2\u0c0d\u0c0e\7\u021c\2"+
		"\2\u0c0e\u0c1e\7\30\2\2\u0c0f\u0c10\7\u021b\2\2\u0c10\u0c1e\7\30\2\2\u0c11"+
		"\u0c12\7\u021d\2\2\u0c12\u0c13\7A\2\2\u0c13\u0c1e\t\5\2\2\u0c14\u0c15"+
		"\7\u0223\2\2\u0c15\u0c1e\7\30\2\2\u0c16\u0c17\7\u0224\2\2\u0c17\u0c1e"+
		"\t\5\2\2\u0c18\u0c1e\5\u00d4k\2\u0c19\u0c1e\5\u00d6l\2\u0c1a\u0c1e\5\u00da"+
		"n\2\u0c1b\u0c1c\7\u0220\2\2\u0c1c\u0c1e\7\u0222\2\2\u0c1d\u0be8\3\2\2"+
		"\2\u0c1d\u0bea\3\2\2\2\u0c1d\u0bec\3\2\2\2\u0c1d\u0bee\3\2\2\2\u0c1d\u0bf0"+
		"\3\2\2\2\u0c1d\u0bf5\3\2\2\2\u0c1d\u0bf7\3\2\2\2\u0c1d\u0bfa\3\2\2\2\u0c1d"+
		"\u0bfc\3\2\2\2\u0c1d\u0bff\3\2\2\2\u0c1d\u0c01\3\2\2\2\u0c1d\u0c04\3\2"+
		"\2\2\u0c1d\u0c0b\3\2\2\2\u0c1d\u0c0d\3\2\2\2\u0c1d\u0c0f\3\2\2\2\u0c1d"+
		"\u0c11\3\2\2\2\u0c1d\u0c14\3\2\2\2\u0c1d\u0c16\3\2\2\2\u0c1d\u0c18\3\2"+
		"\2\2\u0c1d\u0c19\3\2\2\2\u0c1d\u0c1a\3\2\2\2\u0c1d\u0c1b\3\2\2\2\u0c1e"+
		"\u00bd\3\2\2\2\u0c1f\u0c20\7$\2\2\u0c20\u0c21\7\u011e\2\2\u0c21\u0c22"+
		"\7\u0228\2\2\u0c22\u0c78\5\u0252\u012a\2\u0c23\u0c24\7$\2\2\u0c24\u0c25"+
		"\7\u00bf\2\2\u0c25\u0c26\7[\2\2\u0c26\u0c78\7\u00f7\2\2\u0c27\u0c28\7"+
		"$\2\2\u0c28\u0c29\7[\2\2\u0c29\u0c2a\7\u00f7\2\2\u0c2a\u0c37\5\u0256\u012c"+
		"\2\u0c2b\u0c2c\7\u01a1\2\2\u0c2c\u0c2d\7\u00f7\2\2\u0c2d\u0c2e\7)\2\2"+
		"\u0c2e\u0c2f\7\u016f\2\2\u0c2f\u0c38\7\u022b\2\2\u0c30\u0c31\7\u013b\2"+
		"\2\u0c31\u0c32\7\u00f7\2\2\u0c32\u0c33\7)\2\2\u0c33\u0c34\7\u016f\2\2"+
		"\u0c34\u0c35\7\u022b\2\2\u0c35\u0c36\7\u0143\2\2\u0c36\u0c38\7\u022d\2"+
		"\2\u0c37\u0c2b\3\2\2\2\u0c37\u0c30\3\2\2\2\u0c37\u0c38\3\2\2\2\u0c38\u0c78"+
		"\3\2\2\2\u0c39\u0c3b\7$\2\2\u0c3a\u0c39\3\2\2\2\u0c3a\u0c3b\3\2\2\2\u0c3b"+
		"\u0c3c\3\2\2\2\u0c3c\u0c78\7\u01d6\2\2\u0c3d\u0c3f\7$\2\2\u0c3e\u0c3d"+
		"\3\2\2\2\u0c3e\u0c3f\3\2\2\2\u0c3f\u0c40\3\2\2\2\u0c40\u0c78\7_\2\2\u0c41"+
		"\u0c43\7$\2\2\u0c42\u0c41\3\2\2\2\u0c42\u0c43\3\2\2\2\u0c43\u0c44\3\2"+
		"\2\2\u0c44\u0c45\7\u00bf\2\2\u0c45\u0c46\7[\2\2\u0c46\u0c47\7\u010a\2"+
		"\2\u0c47\u0c78\7\u00a4\2\2\u0c48\u0c4a\7$\2\2\u0c49\u0c48\3\2\2\2\u0c49"+
		"\u0c4a\3\2\2\2\u0c4a\u0c4b\3\2\2\2\u0c4b\u0c4c\7[\2\2\u0c4c\u0c4d\7\u010a"+
		"\2\2\u0c4d\u0c4e\7\u00a4\2\2\u0c4e\u0c78\5\u0258\u012d\2\u0c4f\u0c50\7"+
		"$\2\2\u0c50\u0c51\7\u0226\2\2\u0c51\u0c52\7\3\2\2\u0c52\u0c57\5\u00c2"+
		"b\2\u0c53\u0c54\7\26\2\2\u0c54\u0c56\5\u00c2b\2\u0c55\u0c53\3\2\2\2\u0c56"+
		"\u0c59\3\2\2\2\u0c57\u0c55\3\2\2\2\u0c57\u0c58\3\2\2\2\u0c58\u0c5a\3\2"+
		"\2\2\u0c59\u0c57\3\2\2\2\u0c5a\u0c5b\7\4\2\2\u0c5b\u0c78\3\2\2\2\u0c5c"+
		"\u0c5d\7\37\2\2\u0c5d\u0c5e\7\u0226\2\2\u0c5e\u0c5f\7\3\2\2\u0c5f\u0c64"+
		"\5\u00c4c\2\u0c60\u0c61\7\26\2\2\u0c61\u0c63\5\u00c4c\2\u0c62\u0c60\3"+
		"\2\2\2\u0c63\u0c66\3\2\2\2\u0c64\u0c62\3\2\2\2\u0c64\u0c65\3\2\2\2\u0c65"+
		"\u0c67\3\2\2\2\u0c66\u0c64\3\2\2\2\u0c67\u0c68\7\4\2\2\u0c68\u0c78\3\2"+
		"\2\2\u0c69\u0c6a\7e\2\2\u0c6a\u0c6b\7\u0226\2\2\u0c6b\u0c6c\7\3\2\2\u0c6c"+
		"\u0c71\5\u00c6d\2\u0c6d\u0c6e\7\26\2\2\u0c6e\u0c70\5\u00c6d\2\u0c6f\u0c6d"+
		"\3\2\2\2\u0c70\u0c73\3\2\2\2\u0c71\u0c6f\3\2\2\2\u0c71\u0c72\3\2\2\2\u0c72"+
		"\u0c74\3\2\2\2\u0c73\u0c71\3\2\2\2\u0c74\u0c75\7\4\2\2\u0c75\u0c78\3\2"+
		"\2\2\u0c76\u0c78\5\u00c8e\2\u0c77\u0c1f\3\2\2\2\u0c77\u0c23\3\2\2\2\u0c77"+
		"\u0c27\3\2\2\2\u0c77\u0c3a\3\2\2\2\u0c77\u0c3e\3\2\2\2\u0c77\u0c42\3\2"+
		"\2\2\u0c77\u0c49\3\2\2\2\u0c77\u0c4f\3\2\2\2\u0c77\u0c5c\3\2\2\2\u0c77"+
		"\u0c69\3\2\2\2\u0c77\u0c76\3\2\2\2\u0c78\u00bf\3\2\2\2\u0c79\u0c7a\7\64"+
		"\2\2\u0c7a\u0c8b\5\u0264\u0133\2\u0c7b\u0c7c\7\u0095\2\2\u0c7c\u0c8b\5"+
		"\u0264\u0133\2\u0c7d\u0c7e\7)\2\2\u0c7e\u0c81\7\u0235\2\2\u0c7f\u0c80"+
		"\7\177\2\2\u0c80\u0c82\5\u0246\u0124\2\u0c81\u0c7f\3\2\2\2\u0c81\u0c82"+
		"\3\2\2\2\u0c82\u0c8b\3\2\2\2\u0c83\u0c86\7\u0118\2\2\u0c84\u0c87\7\u0236"+
		"\2\2\u0c85\u0c87\5\u0266\u0134\2\u0c86\u0c84\3\2\2\2\u0c86\u0c85\3\2\2"+
		"\2\u0c86\u0c87\3\2\2\2\u0c87\u0c8b\3\2\2\2\u0c88\u0c89\7;\2\2\u0c89\u0c8b"+
		"\t\f\2\2\u0c8a\u0c79\3\2\2\2\u0c8a\u0c7b\3\2\2\2\u0c8a\u0c7d\3\2\2\2\u0c8a"+
		"\u0c83\3\2\2\2\u0c8a\u0c88\3\2\2\2\u0c8b\u00c1\3\2\2\2\u0c8c\u0c8d\7\u0225"+
		"\2\2\u0c8d\u0c95\5\u025c\u012f\2\u0c8e\u0c8f\7l\2\2\u0c8f\u0c95\5\u0262"+
		"\u0132\2\u0c90\u0c91\7\u022e\2\2\u0c91\u0c95\5\u0260\u0131\2\u0c92\u0c93"+
		"\7\u022a\2\2\u0c93\u0c95\5\u025e\u0130\2\u0c94\u0c8c\3\2\2\2\u0c94\u0c8e"+
		"\3\2\2\2\u0c94\u0c90\3\2\2\2\u0c94\u0c92\3\2\2\2\u0c95\u00c3\3\2\2\2\u0c96"+
		"\u0c97\7\u0225\2\2\u0c97\u0c9d\5\u025c\u012f\2\u0c98\u0c99\7\u022e\2\2"+
		"\u0c99\u0c9d\5\u0260\u0131\2\u0c9a\u0c9b\7\u022a\2\2\u0c9b\u0c9d\5\u025e"+
		"\u0130\2\u0c9c\u0c96\3\2\2\2\u0c9c\u0c98\3\2\2\2\u0c9c\u0c9a\3\2\2\2\u0c9d"+
		"\u00c5\3\2\2\2\u0c9e\u0ca0\7\u0225\2\2\u0c9f\u0ca1\5\u025c\u012f\2\u0ca0"+
		"\u0c9f\3\2\2\2\u0ca0\u0ca1\3\2\2\2\u0ca1\u0cab\3\2\2\2\u0ca2\u0ca4\7\u022e"+
		"\2\2\u0ca3\u0ca5\5\u0260\u0131\2\u0ca4\u0ca3\3\2\2\2\u0ca4\u0ca5\3\2\2"+
		"\2\u0ca5\u0cab\3\2\2\2\u0ca6\u0ca8\7\u022a\2\2\u0ca7\u0ca9\5\u025e\u0130"+
		"\2\u0ca8\u0ca7\3\2\2\2\u0ca8\u0ca9\3\2\2\2\u0ca9\u0cab\3\2\2\2\u0caa\u0c9e"+
		"\3\2\2\2\u0caa\u0ca2\3\2\2\2\u0caa\u0ca6\3\2\2\2\u0cab\u00c7\3\2\2\2\u0cac"+
		"\u0cad\7\37\2\2\u0cad\u0cae\7\u019a\2\2\u0cae\u0caf\7\177\2\2\u0caf\u0cb4"+
		"\5\u00caf\2\u0cb0\u0cb1\7\26\2\2\u0cb1\u0cb3\5\u00caf\2\u0cb2\u0cb0\3"+
		"\2\2\2\u0cb3\u0cb6\3\2\2\2\u0cb4\u0cb2\3\2\2\2\u0cb4\u0cb5\3\2\2\2\u0cb5"+
		"\u0cce\3\2\2\2\u0cb6\u0cb4\3\2\2\2\u0cb7\u0cb8\7\u02cc\2\2\u0cb8\u0cb9"+
		"\7\u019a\2\2\u0cb9\u0cba\7\177\2\2\u0cba\u0cbf\5\u00ccg\2\u0cbb\u0cbc"+
		"\7\26\2\2\u0cbc\u0cbe\5\u00ccg\2\u0cbd\u0cbb\3\2\2\2\u0cbe\u0cc1\3\2\2"+
		"\2\u0cbf\u0cbd\3\2\2\2\u0cbf\u0cc0\3\2\2\2\u0cc0\u0cce\3\2\2\2\u0cc1\u0cbf"+
		"\3\2\2\2\u0cc2\u0cc3\7e\2\2\u0cc3\u0cc4\7\u019a\2\2\u0cc4\u0cc5\7\177"+
		"\2\2\u0cc5\u0cca\5\u00ceh\2\u0cc6\u0cc7\7\26\2\2\u0cc7\u0cc9\5\u00ceh"+
		"\2\u0cc8\u0cc6\3\2\2\2\u0cc9\u0ccc\3\2\2\2\u0cca\u0cc8\3\2\2\2\u0cca\u0ccb"+
		"\3\2\2\2\u0ccb\u0cce\3\2\2\2\u0ccc\u0cca\3\2\2\2\u0ccd\u0cac\3\2\2\2\u0ccd"+
		"\u0cb7\3\2\2\2\u0ccd\u0cc2\3\2\2\2\u0cce\u00c9\3\2\2\2\u0ccf\u0cd1\5\u0252"+
		"\u012a\2\u0cd0\u0cd2\5\u00d0i\2\u0cd1\u0cd0\3\2\2\2\u0cd1\u0cd2\3\2\2"+
		"\2\u0cd2\u0cde\3\2\2\2\u0cd3\u0cd4\7y\2\2\u0cd4\u0cd5\7\u010a\2\2\u0cd5"+
		"\u0cd6\7\u022c\2\2\u0cd6\u0cd8\5\u0254\u012b\2\u0cd7\u0cd9\5\u00d0i\2"+
		"\u0cd8\u0cd7\3\2\2\2\u0cd8\u0cd9\3\2\2\2\u0cd9\u0cde\3\2\2\2\u0cda\u0cdb"+
		"\7\u00e6\2\2\u0cdb\u0cdc\t\24\2\2\u0cdc\u0cde\7\u0227\2\2\u0cdd\u0ccf"+
		"\3\2\2\2\u0cdd\u0cd3\3\2\2\2\u0cdd\u0cda\3\2\2\2\u0cde\u00cb\3\2\2\2\u0cdf"+
		"\u0ce0\5\u00caf\2\u0ce0\u00cd\3\2\2\2\u0ce1\u0ce8\5\u0252\u012a\2\u0ce2"+
		"\u0ce3\7y\2\2\u0ce3\u0ce4\7\u010a\2\2\u0ce4\u0ce5\7\u022c\2\2\u0ce5\u0ce8"+
		"\5\u0254\u012b\2\u0ce6\u0ce8\7\u00e6\2\2\u0ce7\u0ce1\3\2\2\2\u0ce7\u0ce2"+
		"\3\2\2\2\u0ce7\u0ce6\3\2\2\2\u0ce8\u00cf\3\2\2\2\u0ce9\u0cea\7\u00f7\2"+
		"\2\u0cea\u0cec\5\u0256\u012c\2\u0ceb\u0ce9\3\2\2\2\u0ceb\u0cec\3\2\2\2"+
		"\u0cec\u0cf0\3\2\2\2\u0ced\u0cee\7\u010a\2\2\u0cee\u0cef\7\u00a4\2\2\u0cef"+
		"\u0cf1\5\u0258\u012d\2\u0cf0\u0ced\3\2\2\2\u0cf0\u0cf1\3\2\2\2\u0cf1\u0cf2"+
		"\3\2\2\2\u0cf2\u0cf3\t\24\2\2\u0cf3\u0cf4\7\u0227\2\2\u0cf4\u00d1\3\2"+
		"\2\2\u0cf5\u0cf7\7$\2\2\u0cf6\u0cf5\3\2\2\2\u0cf6\u0cf7\3\2\2\2\u0cf7"+
		"\u0cf8\3\2\2\2\u0cf8\u0cfb\7\u00d6\2\2\u0cf9\u0cfb\7\u00d5\2\2\u0cfa\u0cf6"+
		"\3\2\2\2\u0cfa\u0cf9\3\2\2\2\u0cfb\u0cfc\3\2\2\2\u0cfc\u0d06\7\30\2\2"+
		"\u0cfd\u0d07\5\u00d4k\2\u0cfe\u0d07\5\u00d6l\2\u0cff\u0d07\5\u00dan\2"+
		"\u0d00\u0d01\7\u01cc\2\2\u0d01\u0d07\t\5\2\2\u0d02\u0d03\7f\2\2\u0d03"+
		"\u0d07\7\u0348\2\2\u0d04\u0d05\7\u0224\2\2\u0d05\u0d07\t\5\2\2\u0d06\u0cfd"+
		"\3\2\2\2\u0d06\u0cfe\3\2\2\2\u0d06\u0cff\3\2\2\2\u0d06\u0d00\3\2\2\2\u0d06"+
		"\u0d02\3\2\2\2\u0d06\u0d04\3\2\2\2\u0d07\u0d08\3\2\2\2\u0d08\u0d06\3\2"+
		"\2\2\u0d08\u0d09\3\2\2\2\u0d09\u00d3\3\2\2\2\u0d0a\u0d0c\5\u00a0Q\2\u0d0b"+
		"\u0d0a\3\2\2\2\u0d0c\u0d0d\3\2\2\2\u0d0d\u0d0b\3\2\2\2\u0d0d\u0d0e\3\2"+
		"\2\2\u0d0e\u00d5\3\2\2\2\u0d0f\u0d10\7\u01ce\2\2\u0d10\u0d1d\7\30\2\2"+
		"\u0d11\u0d12\7\u01d3\2\2\u0d12\u0d1d\7\30\2\2\u0d13\u0d1a\7\u01d3\2\2"+
		"\u0d14\u0d16\7\30\2\2\u0d15\u0d14\3\2\2\2\u0d15\u0d16\3\2\2\2\u0d16\u0d17"+
		"\3\2\2\2\u0d17\u0d18\7\177\2\2\u0d18\u0d19\7\u012b\2\2\u0d19\u0d1b\7\30"+
		"\2\2\u0d1a\u0d15\3\2\2\2\u0d1a\u0d1b\3\2\2\2\u0d1b\u0d1d\3\2\2\2\u0d1c"+
		"\u0d0f\3\2\2\2\u0d1c\u0d11\3\2\2\2\u0d1c\u0d13\3\2\2\2\u0d1d\u0d1e\3\2"+
		"\2\2\u0d1e\u0d1c\3\2\2\2\u0d1e\u0d1f\3\2\2\2\u0d1f\u00d7\3\2\2\2\u0d20"+
		"\u0d21\7\u021e\2\2\u0d21\u0d22\7\u0120\2\2\u0d22\u0d23\5\u021c\u010f\2"+
		"\u0d23\u0d24\7\u0123\2\2\u0d24\u0d28\7\u0121\2\2\u0d25\u0d26\5\u0248\u0125"+
		"\2\u0d26\u0d27\7\23\2\2\u0d27\u0d29\3\2\2\2\u0d28\u0d25\3\2\2\2\u0d28"+
		"\u0d29\3\2\2\2\u0d29\u0d2a\3\2\2\2\u0d2a\u0d2b\5\u024a\u0126\2\u0d2b\u00d9"+
		"\3\2\2\2\u0d2c\u0d2d\7\u01cf\2\2\u0d2d\u0d2e\t \2\2\u0d2e\u00db\3\2\2"+
		"\2\u0d2f\u0d31\7\u00e6\2\2\u0d30\u0d2f\3\2\2\2\u0d30\u0d31\3\2\2\2\u0d31"+
		"\u0d32\3\2\2\2\u0d32\u0d33\7\u0233\2\2\u0d33\u0d34\5\u0234\u011b\2\u0d34"+
		"\u0d35\7\177\2\2\u0d35\u0d36\t!\2\2\u0d36\u00dd\3\2\2\2\u0d37\u0d38\5"+
		"\u021c\u010f\2\u0d38\u0d39\7\3\2\2\u0d39\u0d3a\5\u020a\u0106\2\u0d3a\u0d3b"+
		"\7\u009d\2\2\u0d3b\u0d43\7\27\2\2\u0d3c\u0d3d\7\26\2\2\u0d3d\u0d3e\5\u020a"+
		"\u0106\2\u0d3e\u0d3f\7\u009d\2\2\u0d3f\u0d40\7\27\2\2\u0d40\u0d42\3\2"+
		"\2\2\u0d41\u0d3c\3\2\2\2\u0d42\u0d45\3\2\2\2\u0d43\u0d41\3\2\2\2\u0d43"+
		"\u0d44\3\2\2\2\u0d44\u0d46\3\2\2\2\u0d45\u0d43\3\2\2\2\u0d46\u0d47\7\4"+
		"\2\2\u0d47\u00df\3\2\2\2\u0d48\u0d49\7\u0083\2\2\u0d49\u0d56\5\u0272\u013a"+
		"\2\u0d4a\u0d53\7\3\2\2\u0d4b\u0d50\5\u00e2r\2\u0d4c\u0d4d\7\26\2\2\u0d4d"+
		"\u0d4f\5\u00e2r\2\u0d4e\u0d4c\3\2\2\2\u0d4f\u0d52\3\2\2\2\u0d50\u0d4e"+
		"\3\2\2\2\u0d50\u0d51\3\2\2\2\u0d51\u0d54\3\2\2\2\u0d52\u0d50\3\2\2\2\u0d53"+
		"\u0d4b\3\2\2\2\u0d53\u0d54\3\2\2\2\u0d54\u0d55\3\2\2\2\u0d55\u0d57\7\4"+
		"\2\2\u0d56\u0d4a\3\2\2\2\u0d56\u0d57\3\2\2\2\u0d57\u0d5c\3\2\2\2\u0d58"+
		"\u0d59\7\u0113\2\2\u0d59\u0d5a\7\u0083\2\2\u0d5a\u0d5c\5\u0274\u013b\2"+
		"\u0d5b\u0d48\3\2\2\2\u0d5b\u0d58\3\2\2\2\u0d5c\u00e1\3\2\2\2\u0d5d\u0d60"+
		"\5\u0102\u0082\2\u0d5e\u0d5f\7)\2\2\u0d5f\u0d61\7\u00ae\2\2\u0d60\u0d5e"+
		"\3\2\2\2\u0d60\u0d61\3\2\2\2\u0d61\u00e3\3\2\2\2\u0d62\u0d7d\5\u01b2\u00da"+
		"\2\u0d63\u0d64\7\u00c1\2\2\u0d64\u0d7d\7\u00c2\2\2\u0d65\u0d7d\5\u00e8"+
		"u\2\u0d66\u0d7d\5\u00eav\2\u0d67\u0d68\7\u0200\2\2\u0d68\u0d7d\7\u01fc"+
		"\2\2\u0d69\u0d6a\7)\2\2\u0d6a\u0d6b\7\u010a\2\2\u0d6b\u0d7d\7\u00a4\2"+
		"\2\u0d6c\u0d6d\7|\2\2\u0d6d\u0d6e\5\u022a\u0116\2\u0d6e\u0d6f\7\3\2\2"+
		"\u0d6f\u0d74\5\u0206\u0104\2\u0d70\u0d71\7\26\2\2\u0d71\u0d73\5\u0206"+
		"\u0104\2\u0d72\u0d70\3\2\2\2\u0d73\u0d76\3\2\2\2\u0d74\u0d72\3\2\2\2\u0d74"+
		"\u0d75\3\2\2\2\u0d75\u0d77\3\2\2\2\u0d76\u0d74\3\2\2\2\u0d77\u0d78\7\4"+
		"\2\2\u0d78\u0d7d\3\2\2\2\u0d79\u0d7a\7\u0202\2\2\u0d7a\u0d7b\7\u029f\2"+
		"\2\u0d7b\u0d7d\7\30\2\2\u0d7c\u0d62\3\2\2\2\u0d7c\u0d63\3\2\2\2\u0d7c"+
		"\u0d65\3\2\2\2\u0d7c\u0d66\3\2\2\2\u0d7c\u0d67\3\2\2\2\u0d7c\u0d69\3\2"+
		"\2\2\u0d7c\u0d6c\3\2\2\2\u0d7c\u0d79\3\2\2\2\u0d7d\u00e5\3\2\2\2\u0d7e"+
		"\u0d99\5\u01b4\u00db\2\u0d7f\u0d80\7\u00c1\2\2\u0d80\u0d99\7\u00c2\2\2"+
		"\u0d81\u0d99\5\u00e8u\2\u0d82\u0d99\5\u00eav\2\u0d83\u0d84\7\u0200\2\2"+
		"\u0d84\u0d99\7\u01fc\2\2\u0d85\u0d86\7)\2\2\u0d86\u0d87\7\u010a\2\2\u0d87"+
		"\u0d99\7\u00a4\2\2\u0d88\u0d89\7|\2\2\u0d89\u0d8a\5\u022a\u0116\2\u0d8a"+
		"\u0d8b\7\3\2\2\u0d8b\u0d90\5\u0206\u0104\2\u0d8c\u0d8d\7\26\2\2\u0d8d"+
		"\u0d8f\5\u0206\u0104\2\u0d8e\u0d8c\3\2\2\2\u0d8f\u0d92\3\2\2\2\u0d90\u0d8e"+
		"\3\2\2\2\u0d90\u0d91\3\2\2\2\u0d91\u0d93\3\2\2\2\u0d92\u0d90\3\2\2\2\u0d93"+
		"\u0d94\7\4\2\2\u0d94\u0d99\3\2\2\2\u0d95\u0d96\7\u0202\2\2\u0d96\u0d97"+
		"\7\u029f\2\2\u0d97\u0d99\7\30\2\2\u0d98\u0d7e\3\2\2\2\u0d98\u0d7f\3\2"+
		"\2\2\u0d98\u0d81\3\2\2\2\u0d98\u0d82\3\2\2\2\u0d98\u0d83\3\2\2\2\u0d98"+
		"\u0d85\3\2\2\2\u0d98\u0d88\3\2\2\2\u0d98\u0d95\3\2\2\2\u0d99\u00e7\3\2"+
		"\2\2\u0d9a\u0d9d\5\u0118\u008d\2\u0d9b\u0d9d\5\u011a\u008e\2\u0d9c\u0d9a"+
		"\3\2\2\2\u0d9c\u0d9b\3\2\2\2\u0d9d\u00e9\3\2\2\2\u0d9e\u0da2\7\u0084\2"+
		"\2\u0d9f\u0da3\7\u01ef\2\2\u0da0\u0da1\7\65\2\2\u0da1\u0da3\7[\2\2\u0da2"+
		"\u0d9f\3\2\2\2\u0da2\u0da0\3\2\2\2\u0da3\u0da6\3\2\2\2\u0da4\u0da7\5\u00ec"+
		"w\2\u0da5\u0da7\5\u00f0y\2\u0da6\u0da4\3\2\2\2\u0da6\u0da5\3\2\2\2\u0da7"+
		"\u0db2\3\2\2\2\u0da8\u0daa\7\u0084\2\2\u0da9\u0dab\7\u01ef\2\2\u0daa\u0da9"+
		"\3\2\2\2\u0daa\u0dab\3\2\2\2\u0dab\u0daf\3\2\2\2\u0dac\u0db0\5\u00f2z"+
		"\2\u0dad\u0db0\5\u00f4{\2\u0dae\u0db0\5\u00f6|\2\u0daf\u0dac\3\2\2\2\u0daf"+
		"\u0dad\3\2\2\2\u0daf\u0dae\3\2\2\2\u0db0\u0db2\3\2\2\2\u0db1\u0d9e\3\2"+
		"\2\2\u0db1\u0da8\3\2\2\2\u0db2\u00eb\3\2\2\2\u0db3\u0db4\7)\2\2\u0db4"+
		"\u0db5\7\u01ff\2\2\u0db5\u0db6\7\3\2\2\u0db6\u0dbd\5\u00eex\2\u0db7\u0db9"+
		"\7\26\2\2\u0db8\u0db7\3\2\2\2\u0db8\u0db9\3\2\2\2\u0db9\u0dba\3\2\2\2"+
		"\u0dba\u0dbc\5\u00eex\2\u0dbb\u0db8\3\2\2\2\u0dbc\u0dbf\3\2\2\2\u0dbd"+
		"\u0dbb\3\2\2\2\u0dbd\u0dbe\3\2\2\2\u0dbe\u0dc0\3\2\2\2\u0dbf\u0dbd\3\2"+
		"\2\2\u0dc0\u0dc1\7\4\2\2\u0dc1\u00ed\3\2\2\2\u0dc2\u0dc3\7\u020c\2\2\u0dc3"+
		"\u0dc4\7\u013b\2\2\u0dc4\u0de3\7\30\2\2\u0dc5\u0dc6\7\u01e7\2\2\u0dc6"+
		"\u0dc7\7\65\2\2\u0dc7\u0de3\7\30\2\2\u0dc8\u0dc9\7\u00bf\2\2\u0dc9\u0dcd"+
		"\7\u01d2\2\2\u0dca\u0dcb\7\u01d2\2\2\u0dcb\u0dcd\7\30\2\2\u0dcc\u0dc8"+
		"\3\2\2\2\u0dcc\u0dca\3\2\2\2\u0dcd\u0de3\3\2\2\2\u0dce\u0dcf\7\u00bf\2"+
		"\2\u0dcf\u0dd3\7\u01d1\2\2\u0dd0\u0dd1\7\u01d1\2\2\u0dd1\u0dd3\7\30\2"+
		"\2\u0dd2\u0dce\3\2\2\2\u0dd2\u0dd0\3\2\2\2\u0dd3\u0de3\3\2\2\2\u0dd4\u0dd6"+
		"\7\u00bf\2\2\u0dd5\u0dd4\3\2\2\2\u0dd5\u0dd6\3\2\2\2\u0dd6\u0dd7\3\2\2"+
		"\2\u0dd7\u0de3\7\u01e6\2\2\u0dd8\u0dd9\7\u00bf\2\2\u0dd9\u0ddd\7\u01e5"+
		"\2\2\u0dda\u0ddb\7\u01e5\2\2\u0ddb\u0ddd\7\30\2\2\u0ddc\u0dd8\3\2\2\2"+
		"\u0ddc\u0dda\3\2\2\2\u0ddd\u0de3\3\2\2\2\u0dde\u0de0\7\u00bf\2\2\u0ddf"+
		"\u0dde\3\2\2\2\u0ddf\u0de0\3\2\2\2\u0de0\u0de1\3\2\2\2\u0de1\u0de3\7\u00ce"+
		"\2\2\u0de2\u0dc2\3\2\2\2\u0de2\u0dc5\3\2\2\2\u0de2\u0dcc\3\2\2\2\u0de2"+
		"\u0dd2\3\2\2\2\u0de2\u0dd5\3\2\2\2\u0de2\u0ddc\3\2\2\2\u0de2\u0ddf\3\2"+
		"\2\2\u0de3\u00ef\3\2\2\2\u0de4\u0de5\7\177\2\2\u0de5\u0de6\7\u01f8\2\2"+
		"\u0de6\u0de7\7\u0101\2\2\u0de7\u0de8\7\u00c9\2\2\u0de8\u0de9\7\u012b\2"+
		"\2\u0de9\u0dea\7)\2\2\u0dea\u0deb\7\u0101\2\2\u0deb\u0dec\7\u0148\2\2"+
		"\u0dec\u0ded\7\u02e8\2\2\u0ded\u00f1\3\2\2\2\u0dee\u0def\7)\2\2\u0def"+
		"\u0df0\7\u020e\2\2\u0df0\u0df1\7\u020c\2\2\u0df1\u0df2\7\u01fe\2\2\u0df2"+
		"\u00f3\3\2\2\2\u0df3\u0df4\7)\2\2\u0df4\u0df5\7\u0101\2\2\u0df5\u0df6"+
		"\t\"\2\2\u0df6\u00f5\3\2\2\2\u0df7\u0df8\7)\2\2\u0df8\u0df9\7\3\2\2\u0df9"+
		"\u0dfa\5\u00f8}\2\u0dfa\u0dfb\7\4\2\2\u0dfb\u00f7\3\2\2\2\u0dfc\u0dfd"+
		"\7U\2\2\u0dfd\u0dfe\7\u0148\2\2\u0dfe\u0e02\7\u0203\2\2\u0dff\u0e02\5"+
		"\u01a2\u00d2\2\u0e00\u0e02\5\u00fa~\2\u0e01\u0dfc\3\2\2\2\u0e01\u0dff"+
		"\3\2\2\2\u0e01\u0e00\3\2\2\2\u0e02\u00f9\3\2\2\2\u0e03\u0e04\7\u020d\2"+
		"\2\u0e04\u0e05\7\23\2\2\u0e05\u0e0d\7\u0206\2\2\u0e06\u0e07\7\u020d\2"+
		"\2\u0e07\u0e08\7\23\2\2\u0e08\u0e0d\7\u0207\2\2\u0e09\u0e0a\7\u020d\2"+
		"\2\u0e0a\u0e0b\7\23\2\2\u0e0b\u0e0d\7\u0208\2\2\u0e0c\u0e03\3\2\2\2\u0e0c"+
		"\u0e06\3\2\2\2\u0e0c\u0e09\3\2\2\2\u0e0d\u00fb\3\2\2\2\u0e0e\u0e10\5\u020a"+
		"\u0106\2\u0e0f\u0e11\5\u00fe\u0080\2\u0e10\u0e0f\3\2\2\2\u0e11\u0e12\3"+
		"\2\2\2\u0e12\u0e10\3\2\2\2\u0e12\u0e13\3\2\2\2\u0e13\u00fd\3\2\2\2\u0e14"+
		"\u0e15\7\u010e\2\2\u0e15\u0e16\7U\2\2\u0e16\u0e17\7\u0126\2\2\u0e17\u0e1b"+
		"\5\u0100\u0081\2\u0e18\u0e19\7\u0202\2\2\u0e19\u0e1a\7\u029f\2\2\u0e1a"+
		"\u0e1c\7\30\2\2\u0e1b\u0e18\3\2\2\2\u0e1b\u0e1c\3\2\2\2\u0e1c\u0e3a\3"+
		"\2\2\2\u0e1d\u0e1e\7\u010e\2\2\u0e1e\u0e3a\5\u01b0\u00d9\2\u0e1f\u0e20"+
		"\7\u010e\2\2\u0e20\u0e21\7\u0202\2\2\u0e21\u0e22\7\u029f\2\2\u0e22\u0e3a"+
		"\7\30\2\2\u0e23\u0e24\7\u010e\2\2\u0e24\u0e28\7\u0084\2\2\u0e25\u0e29"+
		"\7\u01ef\2\2\u0e26\u0e27\7\65\2\2\u0e27\u0e29\7[\2\2\u0e28\u0e25\3\2\2"+
		"\2\u0e28\u0e26\3\2\2\2\u0e29\u0e2b\3\2\2\2\u0e2a\u0e2c\5\u0112\u008a\2"+
		"\u0e2b\u0e2a\3\2\2\2\u0e2b\u0e2c\3\2\2\2\u0e2c\u0e3a\3\2\2\2\u0e2d\u0e3a"+
		"\5\u0112\u008a\2\u0e2e\u0e2f\7\u010e\2\2\u0e2f\u0e31\7\u0084\2\2\u0e30"+
		"\u0e32\7\u01ef\2\2\u0e31\u0e30\3\2\2\2\u0e31\u0e32\3\2\2\2\u0e32\u0e35"+
		"\3\2\2\2\u0e33\u0e36\5\u00f4{\2\u0e34\u0e36\5\u00f2z\2\u0e35\u0e33\3\2"+
		"\2\2\u0e35\u0e34\3\2\2\2\u0e36\u0e3a\3\2\2\2\u0e37\u0e38\7e\2\2\u0e38"+
		"\u0e3a\7[\2\2\u0e39\u0e14\3\2\2\2\u0e39\u0e1d\3\2\2\2\u0e39\u0e1f\3\2"+
		"\2\2\u0e39\u0e23\3\2\2\2\u0e39\u0e2d\3\2\2\2\u0e39\u0e2e\3\2\2\2\u0e39"+
		"\u0e37\3\2\2\2\u0e3a\u00ff\3\2\2\2\u0e3b\u0e3c\5\u0102\u0082\2\u0e3c\u0101"+
		"\3\2\2\2\u0e3d\u0e40\5\u0104\u0083\2\u0e3e\u0e40\5\u0202\u0102\2\u0e3f"+
		"\u0e3d\3\2\2\2\u0e3f\u0e3e\3\2\2\2\u0e40\u0103\3\2\2\2\u0e41\u0eb8\7\u02d7"+
		"\2\2\u0e42\u0eb8\7\u029a\2\2\u0e43\u0eb8\7\u0299\2\2\u0e44\u0eb8\7\u024d"+
		"\2\2\u0e45\u0e49\t\21\2\2\u0e46\u0e4a\5\u01fa\u00fe\2\u0e47\u0e48\7\3"+
		"\2\2\u0e48\u0e4a\7\4\2\2\u0e49\u0e46\3\2\2\2\u0e49\u0e47\3\2\2\2\u0e4a"+
		"\u0eb8\3\2\2\2\u0e4b\u0e4f\7\u026c\2\2\u0e4c\u0e50\5\u01fa\u00fe\2\u0e4d"+
		"\u0e4e\7\3\2\2\u0e4e\u0e50\7\4\2\2\u0e4f\u0e4c\3\2\2\2\u0e4f\u0e4d\3\2"+
		"\2\2\u0e50\u0eb8\3\2\2\2\u0e51\u0e55\7\u0288\2\2\u0e52\u0e56\5\u01fa\u00fe"+
		"\2\u0e53\u0e54\7\3\2\2\u0e54\u0e56\7\4\2\2\u0e55\u0e52\3\2\2\2\u0e55\u0e53"+
		"\3\2\2\2\u0e56\u0eb8\3\2\2\2\u0e57\u0eb8\7\u02c6\2\2\u0e58\u0e5a\7d\2"+
		"\2\u0e59\u0e5b\7\u00dd\2\2\u0e5a\u0e59\3\2\2\2\u0e5a\u0e5b\3\2\2\2\u0e5b"+
		"\u0eb8\3\2\2\2\u0e5c\u0e5e\t\22\2\2\u0e5d\u0e5f\7\u01a0\2\2\u0e5e\u0e5d"+
		"\3\2\2\2\u0e5e\u0e5f\3\2\2\2\u0e5f\u0e62\3\2\2\2\u0e60\u0e62\7\u02ff\2"+
		"\2\u0e61\u0e5c\3\2\2\2\u0e61\u0e60\3\2\2\2\u0e62\u0e66\3\2\2\2\u0e63\u0e67"+
		"\5\u01fc\u00ff\2\u0e64\u0e65\7\3\2\2\u0e65\u0e67\7\4\2\2\u0e66\u0e63\3"+
		"\2\2\2\u0e66\u0e64\3\2\2\2\u0e66\u0e67\3\2\2\2\u0e67\u0e6b\3\2\2\2\u0e68"+
		"\u0e6c\5\u0200\u0101\2\u0e69\u0e6a\7;\2\2\u0e6a\u0e6c\7\30\2\2\u0e6b\u0e68"+
		"\3\2\2\2\u0e6b\u0e69\3\2\2\2\u0e6b\u0e6c\3\2\2\2\u0e6c\u0eb8\3\2\2\2\u0e6d"+
		"\u0e6e\t\22\2\2\u0e6e\u0e6f\7\u0162\2\2\u0e6f\u0e72\7\u016f\2\2\u0e70"+
		"\u0e72\7\u025e\2\2\u0e71\u0e6d\3\2\2\2\u0e71\u0e70\3\2\2\2\u0e72\u0e76"+
		"\3\2\2\2\u0e73\u0e77\5\u01fc\u00ff\2\u0e74\u0e75\7\3\2\2\u0e75\u0e77\7"+
		"\4\2\2\u0e76\u0e73\3\2\2\2\u0e76\u0e74\3\2\2\2\u0e76\u0e77\3\2\2\2\u0e77"+
		"\u0e7b\3\2\2\2\u0e78\u0e7c\5\u0200\u0101\2\u0e79\u0e7a\7;\2\2\u0e7a\u0e7c"+
		"\7\30\2\2\u0e7b\u0e78\3\2\2\2\u0e7b\u0e79\3\2\2\2\u0e7b\u0e7c\3\2\2\2"+
		"\u0e7c\u0eb8\3\2\2\2\u0e7d\u0e81\t\23\2\2\u0e7e\u0e82\5\u01fc\u00ff\2"+
		"\u0e7f\u0e80\7\3\2\2\u0e80\u0e82\7\4\2\2\u0e81\u0e7e\3\2\2\2\u0e81\u0e7f"+
		"\3\2\2\2\u0e81\u0e82\3\2\2\2\u0e82\u0e85\3\2\2\2\u0e83\u0e84\7;\2\2\u0e84"+
		"\u0e86\7\30\2\2\u0e85\u0e83\3\2\2\2\u0e85\u0e86\3\2\2\2\u0e86\u0eb8\3"+
		"\2\2\2\u0e87\u0e8b\7\u024e\2\2\u0e88\u0e8c\5\u01fa\u00fe\2\u0e89\u0e8a"+
		"\7\3\2\2\u0e8a\u0e8c\7\4\2\2\u0e8b\u0e88\3\2\2\2\u0e8b\u0e89\3\2\2\2\u0e8b"+
		"\u0e8c\3\2\2\2\u0e8c\u0eb8\3\2\2\2\u0e8d\u0e8f\7\u024e\2\2\u0e8e\u0e90"+
		"\7\u01a0\2\2\u0e8f\u0e8e\3\2\2\2\u0e8f\u0e90\3\2\2\2\u0e90\u0e93\3\2\2"+
		"\2\u0e91\u0e93\7\u02fe\2\2\u0e92\u0e8d\3\2\2\2\u0e92\u0e91\3\2\2\2\u0e93"+
		"\u0e97\3\2\2\2\u0e94\u0e98\5\u01fa\u00fe\2\u0e95\u0e96\7\3\2\2\u0e96\u0e98"+
		"\7\4\2\2\u0e97\u0e94\3\2\2\2\u0e97\u0e95\3\2\2\2\u0e97\u0e98\3\2\2\2\u0e98"+
		"\u0eb8\3\2\2\2\u0e99\u0e9a\7\u024e\2\2\u0e9a\u0e9b\7\u0162\2\2\u0e9b\u0e9e"+
		"\7\u016f\2\2\u0e9c\u0e9e\7\u0254\2\2\u0e9d\u0e99\3\2\2\2\u0e9d\u0e9c\3"+
		"\2\2\2\u0e9e\u0ea2\3\2\2\2\u0e9f\u0ea0\7\3\2\2\u0ea0\u0ea1\t#\2\2\u0ea1"+
		"\u0ea3\7\4\2\2\u0ea2\u0e9f\3\2\2\2\u0ea2\u0ea3\3\2\2\2\u0ea3\u0eb8\3\2"+
		"\2\2\u0ea4\u0eb8\7\u0264\2\2\u0ea5\u0eb8\7\u02e7\2\2\u0ea6\u0ea8\7\u02e8"+
		"\2\2\u0ea7\u0ea9\5\u01fa\u00fe\2\u0ea8\u0ea7\3\2\2\2\u0ea8\u0ea9\3\2\2"+
		"\2\u0ea9\u0ead\3\2\2\2\u0eaa\u0eab\t\24\2\2\u0eab\u0eac\7\u02e7\2\2\u0eac"+
		"\u0eae\7\u0142\2\2\u0ead\u0eaa\3\2\2\2\u0ead\u0eae\3\2\2\2\u0eae\u0eb8"+
		"\3\2\2\2\u0eaf\u0eb8\7\u02d0\2\2\u0eb0\u0eb5\7\u01a2\2\2\u0eb1\u0eb2\7"+
		"\3\2\2\u0eb2\u0eb3\5\u0106\u0084\2\u0eb3\u0eb4\7\4\2\2\u0eb4\u0eb6\3\2"+
		"\2\2\u0eb5\u0eb1\3\2\2\2\u0eb5\u0eb6\3\2\2\2\u0eb6\u0eb8\3\2\2\2\u0eb7"+
		"\u0e41\3\2\2\2\u0eb7\u0e42\3\2\2\2\u0eb7\u0e43\3\2\2\2\u0eb7\u0e44\3\2"+
		"\2\2\u0eb7\u0e45\3\2\2\2\u0eb7\u0e4b\3\2\2\2\u0eb7\u0e51\3\2\2\2\u0eb7"+
		"\u0e57\3\2\2\2\u0eb7\u0e58\3\2\2\2\u0eb7\u0e61\3\2\2\2\u0eb7\u0e71\3\2"+
		"\2\2\u0eb7\u0e7d\3\2\2\2\u0eb7\u0e87\3\2\2\2\u0eb7\u0e92\3\2\2\2\u0eb7"+
		"\u0e9d\3\2\2\2\u0eb7\u0ea4\3\2\2\2\u0eb7\u0ea5\3\2\2\2\u0eb7\u0ea6\3\2"+
		"\2\2\u0eb7\u0eaf\3\2\2\2\u0eb7\u0eb0\3\2\2\2\u0eb8\u0105\3\2\2\2\u0eb9"+
		"\u0eba\7\u020f\2\2\u0eba\u0ebd\5\u0108\u0085\2\u0ebb\u0ebc\7\u0210\2\2"+
		"\u0ebc\u0ebe\5\u010a\u0086\2\u0ebd\u0ebb\3\2\2\2\u0ebd\u0ebe\3\2\2\2\u0ebe"+
		"\u0ec7\3\2\2\2\u0ebf\u0ec0\7\26\2\2\u0ec0\u0ec3\5\u0108\u0085\2\u0ec1"+
		"\u0ec2\7\u0210\2\2\u0ec2\u0ec4\5\u010a\u0086\2\u0ec3\u0ec1\3\2\2\2\u0ec3"+
		"\u0ec4\3\2\2\2\u0ec4\u0ec6\3\2\2\2\u0ec5\u0ebf\3\2\2\2\u0ec6\u0ec9\3\2"+
		"\2\2\u0ec7\u0ec5\3\2\2\2\u0ec7\u0ec8\3\2\2\2\u0ec8\u0107\3\2\2\2\u0ec9"+
		"\u0ec7\3\2\2\2\u0eca\u0ecb\7\u01fe\2\2\u0ecb\u0ed7\5\u010c\u0087\2\u0ecc"+
		"\u0ecd\7\u0211\2\2\u0ecd\u0ed1\5\u010e\u0088\2\u0ece\u0ecf\7\u00bf\2\2"+
		"\u0ecf\u0ed1\7\u0212\2\2\u0ed0\u0ecc\3\2\2\2\u0ed0\u0ece\3\2\2\2\u0ed1"+
		"\u0ed4\3\2\2\2\u0ed2\u0ed3\7\u0213\2\2\u0ed3\u0ed5\5\u0110\u0089\2\u0ed4"+
		"\u0ed2\3\2\2\2\u0ed4\u0ed5\3\2\2\2\u0ed5\u0ed7\3\2\2\2\u0ed6\u0eca\3\2"+
		"\2\2\u0ed6\u0ed0\3\2\2\2\u0ed7\u0109\3\2\2\2\u0ed8\u0ed9\5\u02e0\u0171"+
		"\2\u0ed9\u010b\3\2\2\2\u0eda\u0edb\7\u0214\2\2\u0edb\u0edc\7\23\2\2\u0edc"+
		"\u0edd\7\u0348\2\2\u0edd\u010d\3\2\2\2\u0ede\u0edf\7\27\2\2\u0edf\u010f"+
		"\3\2\2\2\u0ee0\u0ee1\7\27\2\2\u0ee1\u0111\3\2\2\2\u0ee2\u0ee5\7\u01e8"+
		"\2\2\u0ee3\u0ee4\7\u013b\2\2\u0ee4\u0ee6\7\30\2\2\u0ee5\u0ee3\3\2\2\2"+
		"\u0ee5\u0ee6\3\2\2\2\u0ee6\u0f0b\3\2\2\2\u0ee7\u0ee8\7\u010e\2\2\u0ee8"+
		"\u0ee9\7\u01e7\2\2\u0ee9\u0eea\7\65\2\2\u0eea\u0f0b\7\30\2\2\u0eeb\u0ef0"+
		"\7\u010e\2\2\u0eec\u0eed\7\u00bf\2\2\u0eed\u0ef1\7\u01d2\2\2\u0eee\u0eef"+
		"\7\u01d2\2\2\u0eef\u0ef1\7\30\2\2\u0ef0\u0eec\3\2\2\2\u0ef0\u0eee\3\2"+
		"\2\2\u0ef1\u0f0b\3\2\2\2\u0ef2\u0ef7\7\u010e\2\2\u0ef3\u0ef4\7\u00bf\2"+
		"\2\u0ef4\u0ef8\7\u01d1\2\2\u0ef5\u0ef6\7\u01d1\2\2\u0ef6\u0ef8\7\30\2"+
		"\2\u0ef7\u0ef3\3\2\2\2\u0ef7\u0ef5\3\2\2\2\u0ef8\u0f0b\3\2\2\2\u0ef9\u0efb"+
		"\7\u010e\2\2\u0efa\u0efc\7\u00bf\2\2\u0efb\u0efa\3\2\2\2\u0efb\u0efc\3"+
		"\2\2\2\u0efc\u0efd\3\2\2\2\u0efd\u0f0b\7\u01e6\2\2\u0efe\u0f03\7\u010e"+
		"\2\2\u0eff\u0f00\7\u00bf\2\2\u0f00\u0f04\7\u01e5\2\2\u0f01\u0f02\7\u01e5"+
		"\2\2\u0f02\u0f04\7\30\2\2\u0f03\u0eff\3\2\2\2\u0f03\u0f01\3\2\2\2\u0f04"+
		"\u0f0b\3\2\2\2\u0f05\u0f07\7\u010e\2\2\u0f06\u0f08\7\u00bf\2\2\u0f07\u0f06"+
		"\3\2\2\2\u0f07\u0f08\3\2\2\2\u0f08\u0f09\3\2\2\2\u0f09\u0f0b\7\u00ce\2"+
		"\2\u0f0a\u0ee2\3\2\2\2\u0f0a\u0ee7\3\2\2\2\u0f0a\u0eeb\3\2\2\2\u0f0a\u0ef2"+
		"\3\2\2\2\u0f0a\u0ef9\3\2\2\2\u0f0a\u0efe\3\2\2\2\u0f0a\u0f05\3\2\2\2\u0f0b"+
		"\u0113\3\2\2\2\u0f0c\u0f0d\7K\2\2\u0f0d\u0f0f\5\u0236\u011c\2\u0f0e\u0f0c"+
		"\3\2\2\2\u0f0e\u0f0f\3\2\2\2\u0f0f\u0f13\3\2\2\2\u0f10\u0f11\7\u0209\2"+
		"\2\u0f11\u0f14\7\u00a3\2\2\u0f12\u0f14\7\u0129\2\2\u0f13\u0f10\3\2\2\2"+
		"\u0f13\u0f12\3\2\2\2\u0f14\u0f15\3\2\2\2\u0f15\u0f16\7\3\2\2\u0f16\u0f1b"+
		"\5\u020a\u0106\2\u0f17\u0f18\7\26\2\2\u0f18\u0f1a\5\u020a\u0106\2\u0f19"+
		"\u0f17\3\2\2\2\u0f1a\u0f1d\3\2\2\2\u0f1b\u0f19\3\2\2\2\u0f1b\u0f1c\3\2"+
		"\2\2\u0f1c\u0f22\3\2\2\2\u0f1d\u0f1b\3\2\2\2\u0f1e\u0f1f\7\26\2\2\u0f1f"+
		"\u0f20\7\u01a8\2\2\u0f20\u0f21\7\u01a1\2\2\u0f21\u0f23\7\u0205\2\2\u0f22"+
		"\u0f1e\3\2\2\2\u0f22\u0f23\3\2\2\2\u0f23\u0f24\3\2\2\2\u0f24\u0f25\7\4"+
		"\2\2\u0f25\u0115\3\2\2\2\u0f26\u0f27\7K\2\2\u0f27\u0f28\5\u0236\u011c"+
		"\2\u0f28\u0f29\7\u01fb\2\2\u0f29\u0f2a\7\u00a3\2\2\u0f2a\u0f31\3\2\2\2"+
		"\u0f2b\u0f2c\7\u01fb\2\2\u0f2c\u0f2e\7\u00a3\2\2\u0f2d\u0f2f\5\u0236\u011c"+
		"\2\u0f2e\u0f2d\3\2\2\2\u0f2e\u0f2f\3\2\2\2\u0f2f\u0f31\3\2\2\2\u0f30\u0f26"+
		"\3\2\2\2\u0f30\u0f2b\3\2\2\2\u0f31\u0f32\3\2\2\2\u0f32\u0f33\7\3\2\2\u0f33"+
		"\u0f37\5\u020a\u0106\2\u0f34\u0f35\7\u00da\2\2\u0f35\u0f36\7\u01f2\2\2"+
		"\u0f36\u0f38\7\u02e7\2\2\u0f37\u0f34\3\2\2\2\u0f37\u0f38\3\2\2\2\u0f38"+
		"\u0f42\3\2\2\2\u0f39\u0f3a\7\26\2\2\u0f3a\u0f3e\5\u020a\u0106\2\u0f3b"+
		"\u0f3c\7\u00da\2\2\u0f3c\u0f3d\7\u01f2\2\2\u0f3d\u0f3f\7\u02e7\2\2\u0f3e"+
		"\u0f3b\3\2\2\2\u0f3e\u0f3f\3\2\2\2\u0f3f\u0f41\3\2\2\2\u0f40\u0f39\3\2"+
		"\2\2\u0f41\u0f44\3\2\2\2\u0f42\u0f40\3\2\2\2\u0f42\u0f43\3\2\2\2\u0f43"+
		"\u0f45\3\2\2\2\u0f44\u0f42\3\2\2\2\u0f45\u0f46\7\4\2\2\u0f46\u0f47\5\u0118"+
		"\u008d\2\u0f47\u0117\3\2\2\2\u0f48\u0f49\7\u00ea\2\2\u0f49\u0f4a\5\u021c"+
		"\u010f\2\u0f4a\u0f4b\7\3\2\2\u0f4b\u0f4f\5\u020a\u0106\2\u0f4c\u0f4d\7"+
		"\u00da\2\2\u0f4d\u0f4e\7\u01f2\2\2\u0f4e\u0f50\7\u02e7\2\2\u0f4f\u0f4c"+
		"\3\2\2\2\u0f4f\u0f50\3\2\2\2\u0f50\u0f5a\3\2\2\2\u0f51\u0f52\7\26\2\2"+
		"\u0f52\u0f56\5\u020a\u0106\2\u0f53\u0f54\7\u00da\2\2\u0f54\u0f55\7\u01f2"+
		"\2\2\u0f55\u0f57\7\u02e7\2\2\u0f56\u0f53\3\2\2\2\u0f56\u0f57\3\2\2\2\u0f57"+
		"\u0f59\3\2\2\2\u0f58\u0f51\3\2\2\2\u0f59\u0f5c\3\2\2\2\u0f5a\u0f58\3\2"+
		"\2\2\u0f5a\u0f5b\3\2\2\2\u0f5b\u0f5d\3\2\2\2\u0f5c\u0f5a\3\2\2\2\u0f5d"+
		"\u0f68\7\4\2\2\u0f5e\u0f5f\7\u00c9\2\2\u0f5f\u0f66\7\\\2\2\u0f60\u0f67"+
		"\7\u00f0\2\2\u0f61\u0f62\7\u00bf\2\2\u0f62\u0f67\7\u01b0\2\2\u0f63\u0f67"+
		"\7\u01f3\2\2\u0f64\u0f65\7\u010e\2\2\u0f65\u0f67\7\u00c2\2\2\u0f66\u0f60"+
		"\3\2\2\2\u0f66\u0f61\3\2\2\2\u0f66\u0f63\3\2\2\2\u0f66\u0f64\3\2\2\2\u0f67"+
		"\u0f69\3\2\2\2\u0f68\u0f5e\3\2\2\2\u0f68\u0f69\3\2\2\2\u0f69\u0f6b\3\2"+
		"\2\2\u0f6a\u0f6c\7\u00c1\2\2\u0f6b\u0f6a\3\2\2\2\u0f6b\u0f6c\3\2\2\2\u0f6c"+
		"\u0f6d\3\2\2\2\u0f6d\u0f71\7\u01f9\2\2\u0f6e\u0f6f\7\u01d6\2\2\u0f6f\u0f70"+
		"\7\u00e7\2\2\u0f70\u0f72\7\u00cb\2\2\u0f71\u0f6e\3\2\2\2\u0f71\u0f72\3"+
		"\2\2\2\u0f72\u0119\3\2\2\2\u0f73\u0f74\7K\2\2\u0f74\u0f76\5\u0236\u011c"+
		"\2\u0f75\u0f73\3\2\2\2\u0f75\u0f76\3\2\2\2\u0f76\u0f77\3\2\2\2\u0f77\u0f78"+
		"\7>\2\2\u0f78\u0f79\7\3\2\2\u0f79\u0f7a\5\u01d6\u00ec\2\u0f7a\u0f7b\7"+
		"\4\2\2\u0f7b\u011b\3\2\2\2\u0f7c\u0f7e\7\u0179\2\2\u0f7d\u0f7c\3\2\2\2"+
		"\u0f7d\u0f7e\3\2\2\2\u0f7e\u0f7f\3\2\2\2\u0f7f\u0f80\7\3\2\2\u0f80\u0f85"+
		"\5\u011e\u0090\2\u0f81\u0f82\7\26\2\2\u0f82\u0f84\5\u011e\u0090\2\u0f83"+
		"\u0f81\3\2\2\2\u0f84\u0f87\3\2\2\2\u0f85\u0f83\3\2\2\2\u0f85\u0f86\3\2"+
		"\2\2\u0f86\u0f88\3\2\2\2\u0f87\u0f85\3\2\2\2\u0f88\u0f89\7\4\2\2\u0f89"+
		"\u0f8a\7\3\2\2\u0f8a\u0f8f\5\u0128\u0095\2\u0f8b\u0f8c\7\26\2\2\u0f8c"+
		"\u0f8e\5\u0128\u0095\2\u0f8d\u0f8b\3\2\2\2\u0f8e\u0f91\3\2\2\2\u0f8f\u0f8d"+
		"\3\2\2\2\u0f8f\u0f90\3\2\2\2\u0f90\u0f92\3\2\2\2\u0f91\u0f8f\3\2\2\2\u0f92"+
		"\u0f93\7\4\2\2\u0f93\u011d\3\2\2\2\u0f94\u0f97\5\u020a\u0106\2\u0f95\u0f96"+
		"\7\u00c3\2\2\u0f96\u0f98\7\u00a6\2\2\u0f97\u0f95\3\2\2\2\u0f97\u0f98\3"+
		"\2\2\2\u0f98\u0f99\3\2\2\2\u0f99\u0f9a\t$\2\2\u0f9a\u011f\3\2\2\2\u0f9b"+
		"\u0f9c\t%\2\2\u0f9c\u0121\3\2\2\2\u0f9d\u0f9f\7o\2\2\u0f9e\u0fa0\7-\2"+
		"\2\u0f9f\u0f9e\3\2\2\2\u0f9f\u0fa0\3\2\2\2\u0fa0\u0fa1\3\2\2\2\u0fa1\u0fa2"+
		"\7\3\2\2\u0fa2\u0fa7\5\u0120\u0091\2\u0fa3\u0fa4\7\26\2\2\u0fa4\u0fa6"+
		"\5\u0120\u0091\2\u0fa5\u0fa3\3\2\2\2\u0fa6\u0fa9\3\2\2\2\u0fa7\u0fa5\3"+
		"\2\2\2\u0fa7\u0fa8\3\2\2\2\u0fa8\u0faa\3\2\2\2\u0fa9\u0fa7\3\2\2\2\u0faa"+
		"\u0fac\7\4\2\2\u0fab\u0fad\7\u0093\2\2\u0fac\u0fab\3\2\2\2\u0fac\u0fad"+
		"\3\2\2\2\u0fad\u0123\3\2\2\2\u0fae\u0faf\7\u0290\2\2\u0faf\u0fb0\7\u02dd"+
		"\2\2\u0fb0\u0fb1\7\u0348\2\2\u0fb1\u0125\3\2\2\2\u0fb2\u0fb3\7\37\2\2"+
		"\u0fb3\u0fb4\7\u0204\2\2\u0fb4\u0fb5\7\65\2\2\u0fb5\u0fb6\7\u0290\2\2"+
		"\u0fb6\u0fb7\7\u0129\2\2\u0fb7\u0fb8\7\3\2\2\u0fb8\u0fbd\5\u020a\u0106"+
		"\2\u0fb9\u0fba\7\26\2\2\u0fba\u0fbc\5\u020a\u0106\2\u0fbb\u0fb9\3\2\2"+
		"\2\u0fbc\u0fbf\3\2\2\2\u0fbd\u0fbb\3\2\2\2\u0fbd\u0fbe\3\2\2\2\u0fbe\u0fc0"+
		"\3\2\2\2\u0fbf\u0fbd\3\2\2\2\u0fc0\u0fc1\7\4\2\2\u0fc1\u0fc2\7\u0290\2"+
		"\2\u0fc2\u0fc3\7\u02dd\2\2\u0fc3\u0fc4\7\u0348\2\2\u0fc4\u0fcc\3\2\2\2"+
		"\u0fc5\u0fc6\7$\2\2\u0fc6\u0fc7\7\u00cf\2\2\u0fc7\u0fc8\7\u010e\2\2\u0fc8"+
		"\u0fc9\7\u0290\2\2\u0fc9\u0fca\7\u02dd\2\2\u0fca\u0fcc\7\u0348\2\2\u0fcb"+
		"\u0fb2\3\2\2\2\u0fcb\u0fc5\3\2\2\2\u0fcc\u0127\3\2\2\2\u0fcd\u0fce\7\u00d6"+
		"\2\2\u0fce\u0fcf\7\30\2\2\u0fcf\u0fd1\5\u0122\u0092\2\u0fd0\u0fd2\5\u0124"+
		"\u0093\2\u0fd1\u0fd0\3\2\2\2\u0fd1\u0fd2\3\2\2\2\u0fd2\u0129\3\2\2\2\u0fd3"+
		"\u0fd6\5\u0122\u0092\2\u0fd4\u0fd6\5\u0124\u0093\2\u0fd5\u0fd3\3\2\2\2"+
		"\u0fd5\u0fd4\3\2\2\2\u0fd6\u012b\3\2\2\2\u0fd7\u0fd8\5\u0122\u0092\2\u0fd8"+
		"\u0fd9\7\u020a\2\2\u0fd9\u012d\3\2\2\2\u0fda\u0fdb\7\u00c9\2\2\u0fdb\u0fdc"+
		"\7\\\2\2\u0fdc\u0fdd\7\37\2\2\u0fdd\u0fde\7\u01fa\2\2\u0fde\u0fdf\7\u0101"+
		"\2\2\u0fdf\u012f\3\2\2\2\u0fe0\u0fe1\7\3\2\2\u0fe1\u0fe2\5\u02d4\u016b"+
		"\2\u0fe2\u0fe3\7\4\2\2\u0fe3\u0fe4\5\u0134\u009b\2\u0fe4\u0131\3\2\2\2"+
		"\u0fe5\u0fe7\7\u010e\2\2\u0fe6\u0fe8\5\u0136\u009c\2\u0fe7\u0fe6\3\2\2"+
		"\2\u0fe8\u0fe9\3\2\2\2\u0fe9\u0fe7\3\2\2\2\u0fe9\u0fea\3\2\2\2\u0fea\u0133"+
		"\3\2\2\2\u0feb\u0fec\7U\2\2\u0fec\u0fed\7\u0201\2\2\u0fed\u0fee\7\u01f7"+
		"\2\2\u0fee\u0fef\7\u00eb\2\2\u0fef\u0ff3\7\u01f7\2\2\u0ff0\u0ff2\5\u0136"+
		"\u009c\2\u0ff1\u0ff0\3\2\2\2\u0ff2\u0ff5\3\2\2\2\u0ff3\u0ff1\3\2\2\2\u0ff3"+
		"\u0ff4\3\2\2\2\u0ff4\u0135\3\2\2\2\u0ff5\u0ff3\3\2\2\2\u0ff6\u0ff7\7\u00b5"+
		"\2\2\u0ff7\u0ff8\7\65\2\2\u0ff8\u0ffd\t&\2\2\u0ff9\u0ffa\t\'\2\2\u0ffa"+
		"\u0ffb\7\u00e7\2\2\u0ffb\u0ffd\7\u00cb\2\2\u0ffc\u0ff6\3\2\2\2\u0ffc\u0ff9"+
		"\3\2\2\2\u0ffd\u0137\3\2\2\2\u0ffe\u1000\7\u010e\2\2\u0fff\u1001\5\u0136"+
		"\u009c\2\u1000\u0fff\3\2\2\2\u1001\u1002\3\2\2\2\u1002\u1000\3\2\2\2\u1002"+
		"\u1003\3\2\2\2\u1003\u0139\3\2\2\2\u1004\u1005\7\u01a7\2\2\u1005\u1006"+
		"\7\3\2\2\u1006\u1007\5\u0212\u010a\2\u1007\u1008\7\26\2\2\u1008\u1009"+
		"\5\u0214\u010b\2\u1009\u100a\7\4\2\2\u100a\u1014\3\2\2\2\u100b\u100c\7"+
		"\u01a8\2\2\u100c\u100d\7\3\2\2\u100d\u100e\5\u0212\u010a\2\u100e\u100f"+
		"\7\26\2\2\u100f\u1010\5\u0214\u010b\2\u1010\u1011\t(\2\2\u1011\u1012\7"+
		"\4\2\2\u1012\u1014\3\2\2\2\u1013\u1004\3\2\2\2\u1013\u100b\3\2\2\2\u1014"+
		"\u013b\3\2\2\2\u1015\u1016\5\u020a\u0106\2\u1016\u101a\5\u0104\u0083\2"+
		"\u1017\u1019\5\u00e4s\2\u1018\u1017\3\2\2\2\u1019\u101c\3\2\2\2\u101a"+
		"\u1018\3\2\2\2\u101a\u101b\3\2\2\2\u101b\u1026\3\2\2\2\u101c\u101a\3\2"+
		"\2\2\u101d\u101e\5\u020a\u0106\2\u101e\u1022\5\u0202\u0102\2\u101f\u1021"+
		"\5\u00e6t\2\u1020\u101f\3\2\2\2\u1021\u1024\3\2\2\2\u1022\u1020\3\2\2"+
		"\2\u1022\u1023\3\2\2\2\u1023\u1026\3\2\2\2\u1024\u1022\3\2\2\2\u1025\u1015"+
		"\3\2\2\2\u1025\u101d\3\2\2\2\u1026\u013d\3\2\2\2\u1027\u102a\5\u02e0\u0171"+
		"\2\u1028\u102a\7\27\2\2\u1029\u1027\3\2\2\2\u1029\u1028\3\2\2\2\u102a"+
		"\u013f\3\2\2\2\u102b\u1036\5\u0142\u00a2\2\u102c\u1036\7\u033d\2\2\u102d"+
		"\u1036\7\u033e\2\2\u102e\u102f\7Q\2\2\u102f\u1030\7\u00d2\2\2\u1030\u1036"+
		"\7\u00d9\2\2\u1031\u1032\7Q\2\2\u1032\u1036\7\u00d9\2\2\u1033\u1036\5"+
		"\u0276\u013c\2\u1034\u1036\7\27\2\2\u1035\u102b\3\2\2\2\u1035\u102c\3"+
		"\2\2\2\u1035\u102d\3\2\2\2\u1035\u102e\3\2\2\2\u1035\u1031\3\2\2\2\u1035"+
		"\u1033\3\2\2\2\u1035\u1034\3\2\2\2\u1036\u0141\3\2\2\2\u1037\u1038\5\u02e0"+
		"\u0171\2\u1038\u0143\3\2\2\2\u1039\u103a\7\27\2\2\u103a\u0145\3\2\2\2"+
		"\u103b\u103c\t)\2\2\u103c\u0147\3\2\2\2\u103d\u103e\t*\2\2\u103e\u0149"+
		"\3\2\2\2\u103f\u1072\5\u0150\u00a9\2\u1040\u1041\7\3\2\2\u1041\u1042\5"+
		"\u014a\u00a6\2\u1042\u1043\7\4\2\2\u1043\u1072\3\2\2\2\u1044\u1072\5\u0206"+
		"\u0104\2\u1045\u1072\5\u020a\u0106\2\u1046\u1072\5\u0276\u013c\2\u1047"+
		"\u1072\5\u01a2\u00d2\2\u1048\u1072\5\u02d2\u016a\2\u1049\u1072\5\u01c8"+
		"\u00e5\2\u104a\u1072\5\u015a\u00ae\2\u104b\u1072\5\u01cc\u00e7\2\u104c"+
		"\u1072\5\u01f2\u00fa\2\u104d\u1072\5\u015c\u00af\2\u104e\u1072\5\u015e"+
		"\u00b0\2\u104f\u1072\5\u0162\u00b2\2\u1050\u1072\5\u0164\u00b3\2\u1051"+
		"\u1072\5\u014c\u00a7\2\u1052\u1072\5\u014e\u00a8\2\u1053\u1068\5\u0150"+
		"\u00a9\2\u1054\u1055\7\3\2\2\u1055\u1056\5\u014a\u00a6\2\u1056\u1057\7"+
		"\4\2\2\u1057\u1068\3\2\2\2\u1058\u1068\5\u0206\u0104\2\u1059\u1068\5\u020a"+
		"\u0106\2\u105a\u1068\5\u0276\u013c\2\u105b\u1068\5\u01a2\u00d2\2\u105c"+
		"\u1068\5\u02d2\u016a\2\u105d\u1068\5\u01c8\u00e5\2\u105e\u1068\5\u015a"+
		"\u00ae\2\u105f\u1068\5\u01cc\u00e7\2\u1060\u1068\5\u01f2\u00fa\2\u1061"+
		"\u1068\5\u015c\u00af\2\u1062\u1068\5\u015e\u00b0\2\u1063\u1068\5\u0162"+
		"\u00b2\2\u1064\u1068\5\u0164\u00b3\2\u1065\u1068\5\u014c\u00a7\2\u1066"+
		"\u1068\5\u014e\u00a8\2\u1067\u1053\3\2\2\2\u1067\u1054\3\2\2\2\u1067\u1058"+
		"\3\2\2\2\u1067\u1059\3\2\2\2\u1067\u105a\3\2\2\2\u1067\u105b\3\2\2\2\u1067"+
		"\u105c\3\2\2\2\u1067\u105d\3\2\2\2\u1067\u105e\3\2\2\2\u1067\u105f\3\2"+
		"\2\2\u1067\u1060\3\2\2\2\u1067\u1061\3\2\2\2\u1067\u1062\3\2\2\2\u1067"+
		"\u1063\3\2\2\2\u1067\u1064\3\2\2\2\u1067\u1065\3\2\2\2\u1067\u1066\3\2"+
		"\2\2\u1068\u106e\3\2\2\2\u1069\u106a\5\u0148\u00a5\2\u106a\u106b\5\u014a"+
		"\u00a6\2\u106b\u106d\3\2\2\2\u106c\u1069\3\2\2\2\u106d\u1070\3\2\2\2\u106e"+
		"\u106c\3\2\2\2\u106e\u106f\3\2\2\2\u106f\u1072\3\2\2\2\u1070\u106e\3\2"+
		"\2\2\u1071\u103f\3\2\2\2\u1071\u1040\3\2\2\2\u1071\u1044\3\2\2\2\u1071"+
		"\u1045\3\2\2\2\u1071\u1046\3\2\2\2\u1071\u1047\3\2\2\2\u1071\u1048\3\2"+
		"\2\2\u1071\u1049\3\2\2\2\u1071\u104a\3\2\2\2\u1071\u104b\3\2\2\2\u1071"+
		"\u104c\3\2\2\2\u1071\u104d\3\2\2\2\u1071\u104e\3\2\2\2\u1071\u104f\3\2"+
		"\2\2\u1071\u1050\3\2\2\2\u1071\u1051\3\2\2\2\u1071\u1052\3\2\2\2\u1071"+
		"\u1067\3\2\2\2\u1072\u014b\3\2\2\2\u1073\u1074\7\u0101\2\2\u1074\u1075"+
		"\7\u0148\2\2\u1075\u1076\t+\2\2\u1076\u1077\7\177\2\2\u1077\u1078\5\u021c"+
		"\u010f\2\u1078\u014d\3\2\2\2\u1079\u107a\t,\2\2\u107a\u107b\7\u012e\2"+
		"\2\u107b\u107c\7\177\2\2\u107c\u107d\5\u021c\u010f\2\u107d\u014f\3\2\2"+
		"\2\u107e\u1083\5\u0152\u00aa\2\u107f\u1083\5\u0154\u00ab\2\u1080\u1083"+
		"\5\u0156\u00ac\2\u1081\u1083\5\u0158\u00ad\2\u1082\u107e\3\2\2\2\u1082"+
		"\u107f\3\2\2\2\u1082\u1080\3\2\2\2\u1082\u1081\3\2\2\2\u1083\u0151\3\2"+
		"\2\2\u1084\u1085\5\u021a\u010e\2\u1085\u1086\7\23\2\2\u1086\u1088\3\2"+
		"\2\2\u1087\u1084\3\2\2\2\u1087\u1088\3\2\2\2\u1088\u1089\3\2\2\2\u1089"+
		"\u108a\5\u019e\u00d0\2\u108a\u108b\7\3\2\2\u108b\u1090\5\u014a\u00a6\2"+
		"\u108c\u108d\7\26\2\2\u108d\u108f\5\u014a\u00a6\2\u108e\u108c\3\2\2\2"+
		"\u108f\u1092\3\2\2\2\u1090\u108e\3\2\2\2\u1090\u1091\3\2\2\2\u1091\u1093"+
		"\3\2\2\2\u1092\u1090\3\2\2\2\u1093\u1094\7\4\2\2\u1094\u0153\3\2\2\2\u1095"+
		"\u1096\5\u021a\u010e\2\u1096\u1097\7\23\2\2\u1097\u1099\3\2\2\2\u1098"+
		"\u1095\3\2\2\2\u1098\u1099\3\2\2\2\u1099\u109a\3\2\2\2\u109a\u109b\5\u017a"+
		"\u00be\2\u109b\u109d\7\3\2\2\u109c\u109e\7a\2\2\u109d\u109c\3\2\2\2\u109d"+
		"\u109e\3\2\2\2\u109e\u10a1\3\2\2\2\u109f\u10a2\5\u014a\u00a6\2\u10a0\u10a2"+
		"\7\20\2\2\u10a1\u109f\3\2\2\2\u10a1\u10a0\3\2\2\2\u10a2\u10a3\3\2\2\2"+
		"\u10a3\u10a4\7\4\2\2\u10a4\u0155\3\2\2\2\u10a5\u10a6\5\u021a\u010e\2\u10a6"+
		"\u10a7\7\23\2\2\u10a7\u10a9\3\2\2\2\u10a8\u10a5\3\2\2\2\u10a8\u10a9\3"+
		"\2\2\2\u10a9\u10aa\3\2\2\2\u10aa\u10ab\5\u017c\u00bf\2\u10ab\u10ac\7\3"+
		"\2\2\u10ac\u10ad\5\u014a\u00a6\2\u10ad\u10ae\7\26\2\2\u10ae\u10af\5\u014a"+
		"\u00a6\2\u10af\u10b0\7\4\2\2\u10b0\u0157\3\2\2\2\u10b1\u10b2\5\u021a\u010e"+
		"\2\u10b2\u10b3\7\23\2\2\u10b3\u10b5\3\2\2\2\u10b4\u10b1\3\2\2\2\u10b4"+
		"\u10b5\3\2\2\2\u10b5\u10b6\3\2\2\2\u10b6\u10b7\7\u0348\2\2\u10b7\u10b8"+
		"\7\3\2\2\u10b8\u10bd\5\u014a\u00a6\2\u10b9\u10ba\7\26\2\2\u10ba\u10bc"+
		"\5\u014a\u00a6\2\u10bb\u10b9\3\2\2\2\u10bc\u10bf\3\2\2\2\u10bd\u10bb\3"+
		"\2\2\2\u10bd\u10be\3\2\2\2\u10be\u10c0\3\2\2\2\u10bf\u10bd\3\2\2\2\u10c0"+
		"\u10c1\7\4\2\2\u10c1\u0159\3\2\2\2\u10c2\u10cb\5\u0150\u00a9\2\u10c3\u10c4"+
		"\7\3\2\2\u10c4\u10c5\5\u014a\u00a6\2\u10c5\u10c6\7\4\2\2\u10c6\u10cb\3"+
		"\2\2\2\u10c7\u10cb\7\30\2\2\u10c8\u10cb\5\u020a\u0106\2\u10c9\u10cb\5"+
		"\u027c\u013f\2\u10ca\u10c2\3\2\2\2\u10ca\u10c3\3\2\2\2\u10ca\u10c7\3\2"+
		"\2\2\u10ca\u10c8\3\2\2\2\u10ca\u10c9\3\2\2\2\u10cb\u10cc\3\2\2\2\u10cc"+
		"\u10cd\t-\2\2\u10cd\u015b\3\2\2\2\u10ce\u10d2\7\u013d\2\2\u10cf\u10d3"+
		"\5\u014a\u00a6\2\u10d0\u10d3\7\u00c2\2\2\u10d1\u10d3\5\u01f4\u00fb\2\u10d2"+
		"\u10cf\3\2\2\2\u10d2\u10d0\3\2\2\2\u10d2\u10d1\3\2\2\2\u10d3\u10d4\3\2"+
		"\2\2\u10d4\u10d5\7)\2\2\u10d5\u10d6\5\u0102\u0082\2\u10d6\u015d\3\2\2"+
		"\2\u10d7\u10d8\5\u01f0\u00f9\2\u10d8\u10d9\7\5\2\2\u10d9\u10da\5\u0160"+
		"\u00b1\2\u10da\u10db\7\6\2\2\u10db\u015f\3\2\2\2\u10dc\u10e3\5\u014a\u00a6"+
		"\2\u10dd\u10df\5\u0148\u00a5\2\u10de\u10dd\3\2\2\2\u10de\u10df\3\2\2\2"+
		"\u10df\u10e0\3\2\2\2\u10e0\u10e2\5\u014a\u00a6\2\u10e1\u10de\3\2\2\2\u10e2"+
		"\u10e5\3\2\2\2\u10e3\u10e1\3\2\2\2\u10e3\u10e4\3\2\2\2\u10e4\u0161\3\2"+
		"\2\2\u10e5\u10e3\3\2\2\2\u10e6\u10e7\7\'\2\2\u10e7\u10f8\7\5\2\2\u10e8"+
		"\u10f9\7\7\2\2\u10e9\u10f9\5\u02d4\u016b\2\u10ea\u10ed\5\u014a\u00a6\2"+
		"\u10eb\u10ed\7\u00c2\2\2\u10ec\u10ea\3\2\2\2\u10ec\u10eb\3\2\2\2\u10ed"+
		"\u10f5\3\2\2\2\u10ee\u10f1\7\26\2\2\u10ef\u10f2\5\u014a\u00a6\2\u10f0"+
		"\u10f2\7\u00c2\2\2\u10f1\u10ef\3\2\2\2\u10f1\u10f0\3\2\2\2\u10f2\u10f4"+
		"\3\2\2\2\u10f3\u10ee\3\2\2\2\u10f4\u10f7\3\2\2\2\u10f5\u10f3\3\2\2\2\u10f5"+
		"\u10f6\3\2\2\2\u10f6\u10f9\3\2\2\2\u10f7\u10f5\3\2\2\2\u10f8\u10e8\3\2"+
		"\2\2\u10f8\u10e9\3\2\2\2\u10f8\u10ec\3\2\2\2\u10f9\u10fa\3\2\2\2\u10fa"+
		"\u10fb\7\6\2\2\u10fb\u0163\3\2\2\2\u10fc\u1100\5\u0166\u00b4\2\u10fd\u1100"+
		"\5\u0176\u00bc\2\u10fe\u1100\5\u0178\u00bd\2\u10ff\u10fc\3\2\2\2\u10ff"+
		"\u10fd\3\2\2\2\u10ff\u10fe\3\2\2\2\u1100\u0165\3\2\2\2\u1101\u1102\5\u0168"+
		"\u00b5\2\u1102\u1103\7\u0172\2\2\u1103\u1105\7\3\2\2\u1104\u1106\5\u0170"+
		"\u00b9\2\u1105\u1104\3\2\2\2\u1105\u1106\3\2";
	private static final String _serializedATNSegment2 =
		"\2\2\u1106\u1107\3\2\2\2\u1107\u1108\5\u0172\u00ba\2\u1108\u1109\7\4\2"+
		"\2\u1109\u0167\3\2\2\2\u110a\u110b\7\u0155\2\2\u110b\u110c\7\3\2\2\u110c"+
		"\u111e\7\4\2\2\u110d\u110e\7\u0176\2\2\u110e\u110f\7\3\2\2\u110f\u111e"+
		"\7\4\2\2\u1110\u1111\7\u017a\2\2\u1111\u1112\7\3\2\2\u1112\u111e\7\4\2"+
		"\2\u1113\u1114\7\u0156\2\2\u1114\u1115\7\3\2\2\u1115\u111e\7\4\2\2\u1116"+
		"\u1117\7\u016d\2\2\u1117\u1118\7\3\2\2\u1118\u1119\5\u014a\u00a6\2\u1119"+
		"\u111a\7\4\2\2\u111a\u111e\3\2\2\2\u111b\u111e\5\u016a\u00b6\2\u111c\u111e"+
		"\5\u016c\u00b7\2\u111d\u110a\3\2\2\2\u111d\u110d\3\2\2\2\u111d\u1110\3"+
		"\2\2\2\u111d\u1113\3\2\2\2\u111d\u1116\3\2\2\2\u111d\u111b\3\2\2\2\u111d"+
		"\u111c\3\2\2\2\u111e\u0169\3\2\2\2\u111f\u1120\7\u0161\2\2\u1120\u1121"+
		"\7\3\2\2\u1121\u1122\5\u014a\u00a6\2\u1122\u1123\7\26\2\2\u1123\u112f"+
		"\7\30\2\2\u1124\u1125\7\26\2\2\u1125\u112d\5\u014a\u00a6\2\u1126\u112b"+
		"\7\26\2\2\u1127\u1128\7\u0188\2\2\u1128\u112c\7\u00c3\2\2\u1129\u112a"+
		"\7\u015d\2\2\u112a\u112c\7\u00c3\2\2\u112b\u1127\3\2\2\2\u112b\u1129\3"+
		"\2\2\2\u112c\u112e\3\2\2\2\u112d\u1126\3\2\2\2\u112d\u112e\3\2\2\2\u112e"+
		"\u1130\3\2\2\2\u112f\u1124\3\2\2\2\u112f\u1130\3\2\2\2\u1130\u1131\3\2"+
		"\2\2\u1131\u1132\7\4\2\2\u1132\u016b\3\2\2\2\u1133\u1134\7\u0164\2\2\u1134"+
		"\u1135\7\3\2\2\u1135\u1136\5\u014a\u00a6\2\u1136\u1137\7\26\2\2\u1137"+
		"\u113e\7\30\2\2\u1138\u1139\7\26\2\2\u1139\u113c\5\u014a\u00a6\2\u113a"+
		"\u113b\7\26\2\2\u113b\u113d\5\u016e\u00b8\2\u113c\u113a\3\2\2\2\u113c"+
		"\u113d\3\2\2\2\u113d\u113f\3\2\2\2\u113e\u1138\3\2\2\2\u113e\u113f\3\2"+
		"\2\2\u113f\u1140\3\2\2\2\u1140\u1141\7\4\2\2\u1141\u016d\3\2\2\2\u1142"+
		"\u1143\7\u0188\2\2\u1143\u1147\7\u00c3\2\2\u1144\u1145\7\u015d\2\2\u1145"+
		"\u1147\7\u00c3\2\2\u1146\u1142\3\2\2\2\u1146\u1144\3\2\2\2\u1147\u016f"+
		"\3\2\2\2\u1148\u1149\7\u00d6\2\2\u1149\u114a\7\65\2\2\u114a\u114f\5\u014a"+
		"\u00a6\2\u114b\u114c\7\26\2\2\u114c\u114e\5\u014a\u00a6\2\u114d\u114b"+
		"\3\2\2\2\u114e\u1151\3\2\2\2\u114f\u114d\3\2\2\2\u114f\u1150\3\2\2\2\u1150"+
		"\u0171\3\2\2\2\u1151\u114f\3\2\2\2\u1152\u1153\7\u00ce\2\2\u1153\u1154"+
		"\7\65\2\2\u1154\u1156\5\u014a\u00a6\2\u1155\u1157\5\u0174\u00bb\2\u1156"+
		"\u1155\3\2\2\2\u1156\u1157\3\2\2\2\u1157\u115f\3\2\2\2\u1158\u1159\7\26"+
		"\2\2\u1159\u115b\5\u014a\u00a6\2\u115a\u115c\5\u0174\u00bb\2\u115b\u115a"+
		"\3\2\2\2\u115b\u115c\3\2\2\2\u115c\u115e\3\2\2\2\u115d\u1158\3\2\2\2\u115e"+
		"\u1161\3\2\2\2\u115f\u115d\3\2\2\2\u115f\u1160\3\2\2\2\u1160\u0173\3\2"+
		"\2\2\u1161\u115f\3\2\2\2\u1162\u1165\t$\2\2\u1163\u1164\7\u00c3\2\2\u1164"+
		"\u1166\t.\2\2\u1165\u1163\3\2\2\2\u1165\u1166\3\2\2\2\u1166\u0175\3\2"+
		"\2\2\u1167\u1168\7\u0189\2\2\u1168\u1169\7\3\2\2\u1169\u116a\7\4\2\2\u116a"+
		"\u116b\7\u0172\2\2\u116b\u116d\7\3\2\2\u116c\u116e\5\u0170\u00b9\2\u116d"+
		"\u116c\3\2\2\2\u116d\u116e\3\2\2\2\u116e\u1170\3\2\2\2\u116f\u1171\5\u0172"+
		"\u00ba\2\u1170\u116f\3\2\2\2\u1170\u1171\3\2\2\2\u1171\u1172\3\2\2\2\u1172"+
		"\u1173\7\4\2\2\u1173\u0177\3\2\2\2\u1174\u1177\5\u0154\u00ab\2\u1175\u1177"+
		"\5\u017e\u00c0\2\u1176\u1174\3\2\2\2\u1176\u1175\3\2\2\2\u1177\u1178\3"+
		"\2\2\2\u1178\u1179\7\u0172\2\2\u1179\u117b\7\3\2\2\u117a\u117c\5\u0170"+
		"\u00b9\2\u117b\u117a\3\2\2\2\u117b\u117c\3\2\2\2\u117c\u118f\3\2\2\2\u117d"+
		"\u117e\7\u0179\2\2\u117e\u117f\7\63\2\2\u117f\u1180\7\u0197\2\2\u1180"+
		"\u1181\7\u0177\2\2\u1181\u1182\7\u0143\2\2\u1182\u1183\7\u0197\2\2\u1183"+
		"\u1190\7\u015b\2\2\u1184\u118d\5\u0172\u00ba\2\u1185\u1186\7\u0179\2\2"+
		"\u1186\u1187\7\63\2\2\u1187\u1188\7\u0197\2\2\u1188\u1189\7\u0177\2\2"+
		"\u1189\u118a\7\u0143\2\2\u118a\u118b\7Q\2\2\u118b\u118e\7\u0101\2\2\u118c"+
		"\u118e\5\u0188\u00c5\2\u118d\u1185\3\2\2\2\u118d\u118c\3\2\2\2\u118d\u118e"+
		"\3\2\2\2\u118e\u1190\3\2\2\2\u118f\u117d\3\2\2\2\u118f\u1184\3\2\2\2\u118f"+
		"\u1190\3\2\2\2\u1190\u1191\3\2\2\2\u1191\u1192\7\4\2\2\u1192\u0179\3\2"+
		"\2\2\u1193\u1194\t/\2\2\u1194\u017b\3\2\2\2\u1195\u1196\t\60\2\2\u1196"+
		"\u017d\3\2\2\2\u1197\u119c\5\u0180\u00c1\2\u1198\u119c\5\u0182\u00c2\2"+
		"\u1199\u119c\5\u0184\u00c3\2\u119a\u119c\5\u0186\u00c4\2\u119b\u1197\3"+
		"\2\2\2\u119b\u1198\3\2\2\2\u119b\u1199\3\2\2\2\u119b\u119a\3\2\2\2\u119c"+
		"\u017f\3\2\2\2\u119d\u119e\7\u015a\2\2\u119e\u119f\7\3\2\2\u119f\u11a2"+
		"\5\u014a\u00a6\2\u11a0\u11a1\7\26\2\2\u11a1\u11a3\5\u016e\u00b8\2\u11a2"+
		"\u11a0\3\2\2\2\u11a2\u11a3\3\2\2\2\u11a3\u11a4\3\2\2\2\u11a4\u11a5\7\4"+
		"\2\2\u11a5\u0181\3\2\2\2\u11a6\u11a7\7\u0163\2\2\u11a7\u11a8\7\3\2\2\u11a8"+
		"\u11ab\5\u014a\u00a6\2\u11a9\u11aa\7\26\2\2\u11aa\u11ac\5\u016e\u00b8"+
		"\2\u11ab\u11a9\3\2\2\2\u11ab\u11ac\3\2\2\2\u11ac\u11ad\3\2\2\2\u11ad\u11ae"+
		"\7\4\2\2\u11ae\u0183\3\2\2\2\u11af\u11b0\7\u016c\2\2\u11b0\u11b1\7\3\2"+
		"\2\u11b1\u11b2\5\u014a\u00a6\2\u11b2\u11b3\7\26\2\2\u11b3\u11b4\7\30\2"+
		"\2\u11b4\u11b5\7\4\2\2\u11b5\u0185\3\2\2\2\u11b6\u11b7\7\u017b\2\2\u11b7"+
		"\u11b8\7\3\2\2\u11b8\u11b9\5\u014a\u00a6\2\u11b9\u11ba\7\4\2\2\u11ba\u0187"+
		"\3\2\2\2\u11bb\u11bf\t\61\2\2\u11bc\u11c0\5\u018a\u00c6\2\u11bd\u11c0"+
		"\5\u018c\u00c7\2\u11be\u11c0\5\u018e\u00c8\2\u11bf\u11bc\3\2\2\2\u11bf"+
		"\u11bd\3\2\2\2\u11bf\u11be\3\2\2\2\u11c0\u0189\3\2\2\2\u11c1\u11c5\5\u0194"+
		"\u00cb\2\u11c2\u11c5\5\u0198\u00cd\2\u11c3\u11c5\5\u019c\u00cf\2\u11c4"+
		"\u11c1\3\2\2\2\u11c4\u11c2\3\2\2\2\u11c4\u11c3\3\2\2\2\u11c5\u018b\3\2"+
		"\2\2\u11c6\u11c7\7\63\2\2\u11c7\u11c8\5\u0190\u00c9\2\u11c8\u11c9\7\u0143"+
		"\2\2\u11c9\u11ca\5\u0192\u00ca\2\u11ca\u018d\3\2\2\2\u11cb\u11ce\5\u0196"+
		"\u00cc\2\u11cc\u11ce\5\u019a\u00ce\2\u11cd\u11cb\3\2\2\2\u11cd\u11cc\3"+
		"\2\2\2\u11ce\u018f\3\2\2\2\u11cf\u11d4\5\u0194\u00cb\2\u11d0\u11d4\5\u0198"+
		"\u00cd\2\u11d1\u11d4\5\u019a\u00ce\2\u11d2\u11d4\5\u019c\u00cf\2\u11d3"+
		"\u11cf\3\2\2\2\u11d3\u11d0\3\2\2\2\u11d3\u11d1\3\2\2\2\u11d3\u11d2\3\2"+
		"\2\2\u11d4\u0191\3\2\2\2\u11d5\u11da\5\u0196\u00cc\2\u11d6\u11da\5\u0198"+
		"\u00cd\2\u11d7\u11da\5\u019a\u00ce\2\u11d8\u11da\5\u019c\u00cf\2\u11d9"+
		"\u11d5\3\2\2\2\u11d9\u11d6\3\2\2\2\u11d9\u11d7\3\2\2\2\u11d9\u11d8\3\2"+
		"\2\2\u11da\u0193\3\2\2\2\u11db\u11dc\7\u0197\2\2\u11dc\u11dd\7\u0177\2"+
		"\2\u11dd\u0195\3\2\2\2\u11de\u11df\7\u0197\2\2\u11df\u11e0\7\u015b\2\2"+
		"\u11e0\u0197\3\2\2\2\u11e1\u11e2\7\30\2\2\u11e2\u11e3\7\u0177\2\2\u11e3"+
		"\u0199\3\2\2\2\u11e4\u11e5\7\30\2\2\u11e5\u11e6\7\u015b\2\2\u11e6\u019b"+
		"\3\2\2\2\u11e7\u11e8\7Q\2\2\u11e8\u11e9\7\u0101\2\2\u11e9\u019d\3\2\2"+
		"\2\u11ea\u11eb\t\62\2\2\u11eb\u019f\3\2\2\2\u11ec\u11ed\t\63\2\2\u11ed"+
		"\u01a1\3\2\2\2\u11ee\u11ef\t\64\2\2\u11ef\u01a3\3\2\2\2\u11f0\u11f1\7"+
		"\u0347\2\2\u11f1\u11f5\7\3\2\2\u11f2\u11f3\5\u01be\u00e0\2\u11f3\u11f4"+
		"\7\26\2\2\u11f4\u11f6\3\2\2\2\u11f5\u11f2\3\2\2\2\u11f5\u11f6\3\2\2\2"+
		"\u11f6\u11f7\3\2\2\2\u11f7\u1201\5\u01a6\u00d4\2\u11f8\u11fb\7\u0173\2"+
		"\2\u11f9\u11fa\7\65\2\2\u11fa\u11fc\7\u017d\2\2\u11fb\u11f9\3\2\2\2\u11fb"+
		"\u11fc\3\2\2\2\u11fc\u11fd\3\2\2\2\u11fd\u11fe\5\u01a8\u00d5\2\u11fe\u11ff"+
		"\7\26\2\2\u11ff\u1200\5\u01a8\u00d5\2\u1200\u1202\3\2\2\2\u1201\u11f8"+
		"\3\2\2\2\u1201\u1202\3\2\2\2\u1202\u1212\3\2\2\2\u1203\u1206\7\u01a4\2"+
		"\2\u1204\u1207\5\u01ae\u00d8\2\u1205\u1207\5\u01bc\u00df\2\u1206\u1204"+
		"\3\2\2\2\u1206\u1205\3\2\2\2\u1207\u120f\3\2\2\2\u1208\u120b\7\26\2\2"+
		"\u1209\u120c\5\u01ae\u00d8\2\u120a\u120c\5\u01bc\u00df\2\u120b\u1209\3"+
		"\2\2\2\u120b\u120a\3\2\2\2\u120c\u120e\3\2\2\2\u120d\u1208\3\2\2\2\u120e"+
		"\u1211\3\2\2\2\u120f\u120d\3\2\2\2\u120f\u1210\3\2\2\2\u1210\u1213\3\2"+
		"\2\2\u1211\u120f\3\2\2\2\u1212\u1203\3\2\2\2\u1212\u1213\3\2\2\2\u1213"+
		"\u1214\3\2\2\2\u1214\u1215\7\4\2\2\u1215\u01a5\3\2\2\2\u1216\u1217\7\27"+
		"\2\2\u1217\u01a7\3\2\2\2\u1218\u121e\5\u01aa\u00d6\2\u1219\u121a\5\u01ac"+
		"\u00d7\2\u121a\u121b\7)\2\2\u121b\u121c\5\u02e0\u0171\2\u121c\u121e\3"+
		"\2\2\2\u121d\u1218\3\2\2\2\u121d\u1219\3\2\2\2\u121e\u01a9\3\2\2\2\u121f"+
		"\u1220\5\u014a\u00a6\2\u1220\u01ab\3\2\2\2\u1221\u1222\5\u014a\u00a6\2"+
		"\u1222\u01ad\3\2\2\2\u1223\u1224\5\u020a\u0106\2\u1224\u1228\5\u0102\u0082"+
		"\2\u1225\u1229\5\u01b0\u00d9\2\u1226\u1227\7\u00d9\2\2\u1227\u1229\5\u01ba"+
		"\u00de\2\u1228\u1225\3\2\2\2\u1228\u1226\3\2\2\2\u1228\u1229\3\2\2\2\u1229"+
		"\u01af\3\2\2\2\u122a\u122c\7\u013b\2\2\u122b\u122a\3\2\2\2\u122b\u122c"+
		"\3\2\2\2\u122c\u122d\3\2\2\2\u122d\u1234\7[\2\2\u122e\u1235\5\u01b6\u00dc"+
		"\2\u122f\u1230\5\u01b8\u00dd\2\u1230\u1231\7\3\2\2\u1231\u1232\5\u01b6"+
		"\u00dc\2\u1232\u1233\7\4\2\2\u1233\u1235\3\2\2\2\u1234\u122e\3\2\2\2\u1234"+
		"\u122f\3\2\2\2\u1235\u01b1\3\2\2\2\u1236\u1238\7\u013b\2\2\u1237\u1236"+
		"\3\2\2\2\u1237\u1238\3\2\2\2\u1238\u1239\3\2\2\2\u1239\u123a\7[\2\2\u123a"+
		"\u123b\5\u01b6\u00dc\2\u123b\u01b3\3\2\2\2\u123c\u123e\7\u013b\2\2\u123d"+
		"\u123c\3\2\2\2\u123d\u123e\3\2\2\2\u123e\u123f\3\2\2\2\u123f\u1246\7["+
		"\2\2\u1240\u1247\5\u01b6\u00dc\2\u1241\u1242\5\u01b8\u00dd\2\u1242\u1243"+
		"\7\3\2\2\u1243\u1244\5\u01b6\u00dc\2\u1244\u1245\7\4\2\2\u1245\u1247\3"+
		"\2\2\2\u1246\u1240\3\2\2\2\u1246\u1241\3\2\2\2\u1247\u01b5\3\2\2\2\u1248"+
		"\u124e\5\u0206\u0104\2\u1249\u124e\7\u033d\2\2\u124a\u124e\7\u033e\2\2"+
		"\u124b\u124e\7\u0335\2\2\u124c\u124e\7\u00c2\2\2\u124d\u1248\3\2\2\2\u124d"+
		"\u1249\3\2\2\2\u124d\u124a\3\2\2\2\u124d\u124b\3\2\2\2\u124d\u124c\3\2"+
		"\2\2\u124e\u01b7\3\2\2\2\u124f\u1250\5\u02e0\u0171\2\u1250\u1251\7\23"+
		"\2\2\u1251\u1252\5\u02e0\u0171\2\u1252\u01b9\3\2\2\2\u1253\u1254\7\27"+
		"\2\2\u1254\u01bb\3\2\2\2\u1255\u1256\5\u020a\u0106\2\u1256\u1257\7\177"+
		"\2\2\u1257\u1258\7\u01a6\2\2\u1258\u01bd\3\2\2\2\u1259\u125e\5\u01c0\u00e1"+
		"\2\u125a\u125b\7\26\2\2\u125b\u125d\5\u01c0\u00e1\2\u125c\u125a\3\2\2"+
		"\2\u125d\u1260\3\2\2\2\u125e\u125c\3\2\2\2\u125e\u125f\3\2\2\2\u125f\u01bf"+
		"\3\2\2\2\u1260\u125e\3\2\2\2\u1261\u1262\7\u013f\2\2\u1262\u1263\7\3\2"+
		"\2\u1263\u1268\5\u01c2\u00e2\2\u1264\u1265\7\26\2\2\u1265\u1267\5\u01c2"+
		"\u00e2\2\u1266\u1264\3\2\2\2\u1267\u126a\3\2\2\2\u1268\u1266\3\2\2\2\u1268"+
		"\u1269\3\2\2\2\u1269\u126b\3\2\2\2\u126a\u1268\3\2\2\2\u126b\u126c\7\4"+
		"\2\2\u126c\u01c1\3\2\2\2\u126d\u126e\5\u01c4\u00e3\2\u126e\u126f\7)\2"+
		"\2\u126f\u1270\5\u01c6\u00e4\2\u1270\u1276\3\2\2\2\u1271\u1272\7[\2\2"+
		"\u1272\u1276\5\u01c4\u00e3\2\u1273\u1274\7\u00bf\2\2\u1274\u1276\7[\2"+
		"\2\u1275\u126d\3\2\2\2\u1275\u1271\3\2\2\2\u1275\u1273\3\2\2\2\u1276\u01c3"+
		"\3\2\2\2\u1277\u1278\7\27\2\2\u1278\u01c5\3\2\2\2\u1279\u127a\7\27\2\2"+
		"\u127a\u01c7\3\2\2\2\u127b\u1282\5\u01ca\u00e6\2\u127c\u127d\7-\2\2\u127d"+
		"\u1283\7\u00ac\2\2\u127e\u127f\7-\2\2\u127f\u1280\7\u02e7\2\2\u1280\u1281"+
		"\7\u0142\2\2\u1281\u1283\5\u01ca\u00e6\2\u1282\u127c\3\2\2\2\u1282\u127e"+
		"\3\2\2\2\u1283\u01c9\3\2\2\2\u1284\u128d\5\u0150\u00a9\2\u1285\u128d\5"+
		"\u0206\u0104\2\u1286\u128d\5\u020a\u0106\2\u1287\u128d\5\u0276\u013c\2"+
		"\u1288\u128d\5\u01a2\u00d2\2\u1289\u128d\5\u02d2\u016a\2\u128a\u128d\5"+
		"\u01cc\u00e7\2\u128b\u128d\5\u01f2\u00fa\2\u128c\u1284\3\2\2\2\u128c\u1285"+
		"\3\2\2\2\u128c\u1286\3\2\2\2\u128c\u1287\3\2\2\2\u128c\u1288\3\2\2\2\u128c"+
		"\u1289\3\2\2\2\u128c\u128a\3\2\2\2\u128c\u128b\3\2\2\2\u128d\u01cb\3\2"+
		"\2\2\u128e\u1291\79\2\2\u128f\u1292\5\u01d0\u00e9\2\u1290\u1292\5\u01d2"+
		"\u00ea\2\u1291\u128f\3\2\2\2\u1291\u1290\3\2\2\2\u1292\u1297\3\2\2\2\u1293"+
		"\u1294\7i\2\2\u1294\u1298\7\u00c2\2\2\u1295\u1296\7i\2\2\u1296\u1298\5"+
		"\u01ce\u00e8\2\u1297\u1293\3\2\2\2\u1297\u1295\3\2\2\2\u1298\u1299\3\2"+
		"\2\2\u1299\u129a\7m\2\2\u129a\u01cd\3\2\2\2\u129b\u129c\5\u014a\u00a6"+
		"\2\u129c\u01cf\3\2\2\2\u129d\u129e\7\u0137\2\2\u129e\u129f\5\u01d4\u00eb"+
		"\2\u129f\u12a2\7\u0122\2\2\u12a0\u12a3\5\u01ce\u00e8\2\u12a1\u12a3\7\u00c2"+
		"\2\2\u12a2\u12a0\3\2\2\2\u12a2\u12a1\3\2\2\2\u12a3\u01d1\3\2\2\2\u12a4"+
		"\u12a5\5\u014a\u00a6\2\u12a5\u12a6\7\u0137\2\2\u12a6\u12a7\5\u014a\u00a6"+
		"\2\u12a7\u12aa\7\u0122\2\2\u12a8\u12ab\5\u01ce\u00e8\2\u12a9\u12ab\7\u00c2"+
		"\2\2\u12aa\u12a8\3\2\2\2\u12aa\u12a9\3\2\2\2\u12ab\u01d3\3\2\2\2\u12ac"+
		"\u12ae\7\u00c1\2\2\u12ad\u12ac\3\2\2\2\u12ad\u12ae\3\2\2\2\u12ae\u12b8"+
		"\3\2\2\2\u12af\u12b2\5\u01d8\u00ed\2\u12b0\u12b1\7\u018e\2\2\u12b1\u12b3"+
		"\7\31\2\2\u12b2\u12b0\3\2\2\2\u12b2\u12b3\3\2\2\2\u12b3\u12b9\3\2\2\2"+
		"\u12b4\u12b5\7\3\2\2\u12b5\u12b6\5\u01d4\u00eb\2\u12b6\u12b7\7\4\2\2\u12b7"+
		"\u12b9\3\2\2\2\u12b8\u12af\3\2\2\2\u12b8\u12b4\3\2\2\2\u12b9\u12c7\3\2"+
		"\2\2\u12ba\u12bc\t\65\2\2\u12bb\u12bd\7\u00c1\2\2\u12bc\u12bb\3\2\2\2"+
		"\u12bc\u12bd\3\2\2\2\u12bd\u12c3\3\2\2\2\u12be\u12c4\5\u01d8\u00ed\2\u12bf"+
		"\u12c0\7\3\2\2\u12c0\u12c1\5\u01d4\u00eb\2\u12c1\u12c2\7\4\2\2\u12c2\u12c4"+
		"\3\2\2\2\u12c3\u12be\3\2\2\2\u12c3\u12bf\3\2\2\2\u12c4\u12c6\3\2\2\2\u12c5"+
		"\u12ba\3\2\2\2\u12c6\u12c9\3\2\2\2\u12c7\u12c5\3\2\2\2\u12c7\u12c8\3\2"+
		"\2\2\u12c8\u01d5\3\2\2\2\u12c9\u12c7\3\2\2\2\u12ca\u12cb\5\u01d4\u00eb"+
		"\2\u12cb\u01d7\3\2\2\2\u12cc\u12d7\5\u01da\u00ee\2\u12cd\u12d7\5\u01de"+
		"\u00f0\2\u12ce\u12d7\5\u01e0\u00f1\2\u12cf\u12d7\5\u01e2\u00f2\2\u12d0"+
		"\u12d7\5\u01e4\u00f3\2\u12d1\u12d7\5\u01e6\u00f4\2\u12d2\u12d7\5\u01e8"+
		"\u00f5\2\u12d3\u12d7\5\u01ea\u00f6\2\u12d4\u12d7\5\u01ec\u00f7\2\u12d5"+
		"\u12d7\5\u01ee\u00f8\2\u12d6\u12cc\3\2\2\2\u12d6\u12cd\3\2\2\2\u12d6\u12ce"+
		"\3\2\2\2\u12d6\u12cf\3\2\2\2\u12d6\u12d0\3\2\2\2\u12d6\u12d1\3\2\2\2\u12d6"+
		"\u12d2\3\2\2\2\u12d6\u12d3\3\2\2\2\u12d6\u12d4\3\2\2\2\u12d6\u12d5\3\2"+
		"\2\2\u12d7\u01d9\3\2\2\2\u12d8\u12d9\5\u014a\u00a6\2\u12d9\u12da\5\u0146"+
		"\u00a4\2\u12da\u12db\5\u014a\u00a6\2\u12db\u12e1\3\2\2\2\u12dc\u12dd\5"+
		"\u01dc\u00ef\2\u12dd\u12de\5\u0146\u00a4\2\u12de\u12df\5\u01dc\u00ef\2"+
		"\u12df\u12e1\3\2\2\2\u12e0\u12d8\3\2\2\2\u12e0\u12dc\3\2\2\2\u12e1\u01db"+
		"\3\2\2\2\u12e2\u12e3\7\3\2\2\u12e3\u12e8\5\u014a\u00a6\2\u12e4\u12e5\7"+
		"\26\2\2\u12e5\u12e7\5\u014a\u00a6\2\u12e6\u12e4\3\2\2\2\u12e7\u12ea\3"+
		"\2\2\2\u12e8\u12e6\3\2\2\2\u12e8\u12e9\3\2\2\2\u12e9\u12eb\3\2\2\2\u12ea"+
		"\u12e8\3\2\2\2\u12eb\u12ec\7\4\2\2\u12ec\u01dd\3\2\2\2\u12ed\u12ee\5\u014a"+
		"\u00a6\2\u12ee\u12ef\5\u0146\u00a4\2\u12ef\u12f0\t\66\2\2\u12f0\u12f1"+
		"\7\3\2\2\u12f1\u12f2\5\u02d4\u016b\2\u12f2\u12f3\7\4\2\2\u12f3\u1303\3"+
		"\2\2\2\u12f4\u12f5\5\u01dc\u00ef\2\u12f5\u12f6\7\b\2\2\u12f6\u12f7\t\67"+
		"\2\2\u12f7\u12f8\7\3\2\2\u12f8\u12f9\5\u02d4\u016b\2\u12f9\u12fa\7\4\2"+
		"\2\u12fa\u1303\3\2\2\2\u12fb\u12fc\5\u01dc\u00ef\2\u12fc\u12fd\7\r\2\2"+
		"\u12fd\u12fe\7!\2\2\u12fe\u12ff\7\3\2\2\u12ff\u1300\5\u02d4\u016b\2\u1300"+
		"\u1301\7\4\2\2\u1301\u1303\3\2\2\2\u1302\u12ed\3\2\2\2\u1302\u12f4\3\2"+
		"\2\2\u1302\u12fb\3\2\2\2\u1303\u01df\3\2\2\2\u1304\u1305\7(\2\2\u1305"+
		"\u1306\7\3\2\2\u1306\u1307\5\u01f0\u00f9\2\u1307\u1308\7\30\2\2\u1308"+
		"\u1309\7\4\2\2\u1309\u01e1\3\2\2\2\u130a\u130c\5\u014a\u00a6\2\u130b\u130d"+
		"\7\u00c1\2\2\u130c\u130b\3\2\2\2\u130c\u130d\3\2\2\2\u130d\u130e\3\2\2"+
		"\2\u130e\u130f\7\63\2\2\u130f\u1310\5\u014a\u00a6\2\u1310\u1311\7\u0143"+
		"\2\2\u1311\u1312\5\u014a\u00a6\2\u1312\u01e3\3\2\2\2\u1313\u1314\5\u014a"+
		"\u00a6\2\u1314\u1316\7\u009d\2\2\u1315\u1317\7\u00c1\2\2\u1316\u1315\3"+
		"\2\2\2\u1316\u1317\3\2\2\2\u1317\u1318\3\2\2\2\u1318\u1319\7a\2\2\u1319"+
		"\u131a\7\u0081\2\2\u131a\u131b\5\u014a\u00a6\2\u131b\u01e5\3\2\2\2\u131c"+
		"\u131d\7v\2\2\u131d\u131e\7\3\2\2\u131e\u131f\5\u02d4\u016b\2\u131f\u1320"+
		"\7\4\2\2\u1320\u01e7\3\2\2\2\u1321\u1323\5\u014a\u00a6\2\u1322\u1324\7"+
		"\u00c1\2\2\u1323\u1322\3\2\2\2\u1323\u1324\3\2\2\2\u1324\u1325\3\2\2\2"+
		"\u1325\u1335\7\u0092\2\2\u1326\u1327\7\3\2\2\u1327\u1328\5\u02d4\u016b"+
		"\2\u1328\u1329\7\4\2\2\u1329\u1336\3\2\2\2\u132a\u132b\7\3\2\2\u132b\u1330"+
		"\5\u014a\u00a6\2\u132c\u132d\7\26\2\2\u132d\u132f\5\u014a\u00a6\2\u132e"+
		"\u132c\3\2\2\2\u132f\u1332\3\2\2\2\u1330\u132e\3\2\2\2\u1330\u1331\3\2"+
		"\2\2\u1331\u1333\3\2\2\2\u1332\u1330\3\2\2\2\u1333\u1334\7\4\2\2\u1334"+
		"\u1336\3\2\2\2\u1335\u1326\3\2\2\2\u1335\u132a\3\2\2\2\u1336\u01e9\3\2"+
		"\2\2\u1337\u1339\5\u014a\u00a6\2\u1338\u133a\7\u00c1\2\2\u1339\u1338\3"+
		"\2\2\2\u1339\u133a\3\2\2\2\u133a\u133b\3\2\2\2\u133b\u133c\7\u00aa\2\2"+
		"\u133c\u133f\5\u014a\u00a6\2\u133d\u133e\7q\2\2\u133e\u1340\5\u014a\u00a6"+
		"\2\u133f\u133d\3\2\2\2\u133f\u1340\3\2\2\2\u1340\u01eb\3\2\2\2\u1341\u1349"+
		"\5\u014a\u00a6\2\u1342\u1344\7\u009d\2\2\u1343\u1345\7\u00c1\2\2\u1344"+
		"\u1343\3\2\2\2\u1344\u1345\3\2\2\2\u1345\u1346\3\2\2\2\u1346\u134a\7\u00c2"+
		"\2\2\u1347\u134a\7\u0160\2\2\u1348\u134a\7\u016b\2\2\u1349\u1342\3\2\2"+
		"\2\u1349\u1347\3\2\2\2\u1349\u1348\3\2\2\2\u134a\u01ed\3\2\2\2\u134b\u134c"+
		"\7\u013e\2\2\u134c\u134d\7\3\2\2\u134d\u135b\7\27\2\2\u134e\u1351\7\u0173"+
		"\2\2\u134f\u1350\7\65\2\2\u1350\u1352\7\u017d\2\2\u1351\u134f\3\2\2\2"+
		"\u1351\u1352\3\2\2\2\u1352\u1353\3\2\2\2\u1353\u1358\5\u014a\u00a6\2\u1354"+
		"\u1355\7\26\2\2\u1355\u1357\5\u014a\u00a6\2\u1356\u1354\3\2\2\2\u1357"+
		"\u135a\3\2\2\2\u1358\u1356\3\2\2\2\u1358\u1359\3\2\2\2\u1359\u135c\3\2"+
		"\2\2\u135a\u1358\3\2\2\2\u135b\u134e\3\2\2\2\u135b\u135c\3\2\2\2\u135c"+
		"\u135d\3\2\2\2\u135d\u135e\7\4\2\2\u135e\u01ef\3\2\2\2\u135f\u1362\5\u027c"+
		"\u013f\2\u1360\u1362\5\u01f2\u00fa\2\u1361\u135f\3\2\2\2\u1361\u1360\3"+
		"\2\2\2\u1362\u01f1\3\2\2\2\u1363\u1364\7:\2\2\u1364\u1368\7\3\2\2\u1365"+
		"\u1369\5\u014a\u00a6\2\u1366\u1369\7\u00c2\2\2\u1367\u1369\5\u01f4\u00fb"+
		"\2\u1368\u1365\3\2\2\2\u1368\u1366\3\2\2\2\u1368\u1367\3\2\2\2\u1369\u136a"+
		"\3\2\2\2\u136a\u136b\7)\2\2\u136b\u136c\5\u01f6\u00fc\2\u136c\u136d\7"+
		"\4\2\2\u136d\u01f3\3\2\2\2\u136e\u136f\7\7\2\2\u136f\u01f5\3\2\2\2\u1370"+
		"\u1374\5\u01f8\u00fd\2\u1371\u1374\5\u0202\u0102\2\u1372\u1374\5\u0204"+
		"\u0103\2\u1373\u1370\3\2\2\2\u1373\u1371\3\2\2\2\u1373\u1372\3\2\2\2\u1374"+
		"\u01f7\3\2\2\2\u1375\u13e1\7\u02d7\2\2\u1376\u13e1\7\u029a\2\2\u1377\u13e1"+
		"\7\u0299\2\2\u1378\u13e1\7\u024d\2\2\u1379\u137d\t\21\2\2\u137a\u137e"+
		"\5\u01fa\u00fe\2\u137b\u137c\7\3\2\2\u137c\u137e\7\4\2\2\u137d\u137a\3"+
		"\2\2\2\u137d\u137b\3\2\2\2\u137e\u13e1\3\2\2\2\u137f\u1383\7\u026c\2\2"+
		"\u1380\u1384\5\u01fa\u00fe\2\u1381\u1382\7\3\2\2\u1382\u1384\7\4\2\2\u1383"+
		"\u1380\3\2\2\2\u1383\u1381\3\2\2\2\u1384\u13e1\3\2\2\2\u1385\u1389\7\u0288"+
		"\2\2\u1386\u138a\5\u01fa\u00fe\2\u1387\u1388\7\3\2\2\u1388\u138a\7\4\2"+
		"\2\u1389\u1386\3\2\2\2\u1389\u1387\3\2\2\2\u138a\u13e1\3\2\2\2\u138b\u13e1"+
		"\7\u02c6\2\2\u138c\u138e\7d\2\2\u138d\u138f\7\u00dd\2\2\u138e\u138d\3"+
		"\2\2\2\u138e\u138f\3\2\2\2\u138f\u13e1\3\2\2\2\u1390\u1392\t\22\2\2\u1391"+
		"\u1393\7\u01a0\2\2\u1392\u1391\3\2\2\2\u1392\u1393\3\2\2\2\u1393\u1396"+
		"\3\2\2\2\u1394\u1396\7\u02ff\2\2\u1395\u1390\3\2\2\2\u1395\u1394\3\2\2"+
		"\2\u1396\u139a\3\2\2\2\u1397\u139b\5\u01fc\u00ff\2\u1398\u1399\7\3\2\2"+
		"\u1399\u139b\7\4\2\2\u139a\u1397\3\2\2\2\u139a\u1398\3\2\2\2\u139a\u139b"+
		"\3\2\2\2\u139b\u139d\3\2\2\2\u139c\u139e\5\u01fe\u0100\2\u139d\u139c\3"+
		"\2\2\2\u139d\u139e\3\2\2\2\u139e\u13e1\3\2\2\2\u139f\u13a0\t\22\2\2\u13a0"+
		"\u13a1\7\u0162\2\2\u13a1\u13a4\7\u016f\2\2\u13a2\u13a4\7\u025e\2\2\u13a3"+
		"\u139f\3\2\2\2\u13a3\u13a2\3\2\2\2\u13a4\u13a8\3\2\2\2\u13a5\u13a9\5\u01fc"+
		"\u00ff\2\u13a6\u13a7\7\3\2\2\u13a7\u13a9\7\4\2\2\u13a8\u13a5\3\2\2\2\u13a8"+
		"\u13a6\3\2\2\2\u13a8\u13a9\3\2\2\2\u13a9\u13ab\3\2\2\2\u13aa\u13ac\5\u01fe"+
		"\u0100\2\u13ab\u13aa\3\2\2\2\u13ab\u13ac\3\2\2\2\u13ac\u13e1\3\2\2\2\u13ad"+
		"\u13b1\t\23\2\2\u13ae\u13b2\5\u01fc\u00ff\2\u13af\u13b0\7\3\2\2\u13b0"+
		"\u13b2\7\4\2\2\u13b1\u13ae\3\2\2\2\u13b1\u13af\3\2\2\2\u13b1\u13b2\3\2"+
		"\2\2\u13b2\u13b4\3\2\2\2\u13b3\u13b5\5\u01fe\u0100\2\u13b4\u13b3\3\2\2"+
		"\2\u13b4\u13b5\3\2\2\2\u13b5\u13e1\3\2\2\2\u13b6\u13ba\7\u024e\2\2\u13b7"+
		"\u13bb\5\u01fa\u00fe\2\u13b8\u13b9\7\3\2\2\u13b9\u13bb\7\4\2\2\u13ba\u13b7"+
		"\3\2\2\2\u13ba\u13b8\3\2\2\2\u13ba\u13bb\3\2\2\2\u13bb\u13e1\3\2\2\2\u13bc"+
		"\u13be\7\u024e\2\2\u13bd\u13bf\7\u01a0\2\2\u13be\u13bd\3\2\2\2\u13be\u13bf"+
		"\3\2\2\2\u13bf\u13c2\3\2\2\2\u13c0\u13c2\7\u02fe\2\2\u13c1\u13bc\3\2\2"+
		"\2\u13c1\u13c0\3\2\2\2\u13c2\u13c6\3\2\2\2\u13c3\u13c7\5\u01fa\u00fe\2"+
		"\u13c4\u13c5\7\3\2\2\u13c5\u13c7\7\4\2\2\u13c6\u13c3\3\2\2\2\u13c6\u13c4"+
		"\3\2\2\2\u13c6\u13c7\3\2\2\2\u13c7\u13e1\3\2\2\2\u13c8\u13c9\7\u024e\2"+
		"\2\u13c9\u13ca\7\u0162\2\2\u13ca\u13cd\7\u016f\2\2\u13cb\u13cd\7\u0254"+
		"\2\2\u13cc\u13c8\3\2\2\2\u13cc\u13cb\3\2\2\2\u13cd\u13d3\3\2\2\2\u13ce"+
		"\u13cf\7\3\2\2\u13cf\u13d0\7\30\2\2\u13d0\u13d1\7\u0348\2\2\u13d1\u13d2"+
		"\3\2\2\2\u13d2\u13d4\7\4\2\2\u13d3\u13ce\3\2\2\2\u13d3\u13d4\3\2\2\2\u13d4"+
		"\u13e1\3\2\2\2\u13d5\u13e1\7\u0264\2\2\u13d6\u13e1\7\u02e7\2\2\u13d7\u13d9"+
		"\7\u02e8\2\2\u13d8\u13da\5\u01fa\u00fe\2\u13d9\u13d8\3\2\2\2\u13d9\u13da"+
		"\3\2\2\2\u13da\u13db\3\2\2\2\u13db\u13dc\t\24\2\2\u13dc\u13dd\7\u02e7"+
		"\2\2\u13dd\u13e1\7\u0142\2\2\u13de\u13e1\7\u02d0\2\2\u13df\u13e1\7\u01a2"+
		"\2\2\u13e0\u1375\3\2\2\2\u13e0\u1376\3\2\2\2\u13e0\u1377\3\2\2\2\u13e0"+
		"\u1378\3\2\2\2\u13e0\u1379\3\2\2\2\u13e0\u137f\3\2\2\2\u13e0\u1385\3\2"+
		"\2\2\u13e0\u138b\3\2\2\2\u13e0\u138c\3\2\2\2\u13e0\u1395\3\2\2\2\u13e0"+
		"\u13a3\3\2\2\2\u13e0\u13ad\3\2\2\2\u13e0\u13b6\3\2\2\2\u13e0\u13c1\3\2"+
		"\2\2\u13e0\u13cc\3\2\2\2\u13e0\u13d5\3\2\2\2\u13e0\u13d6\3\2\2\2\u13e0"+
		"\u13d7\3\2\2\2\u13e0\u13de\3\2\2\2\u13e0\u13df\3\2\2\2\u13e1\u01f9\3\2"+
		"\2\2\u13e2\u13e3\7\3\2\2\u13e3\u13e6\7\30\2\2\u13e4\u13e5\7\26\2\2\u13e5"+
		"\u13e7\7\30\2\2\u13e6\u13e4\3\2\2\2\u13e6\u13e7\3\2\2\2\u13e7\u13e8\3"+
		"\2\2\2\u13e8\u13e9\7\4\2\2\u13e9\u01fb\3\2\2\2\u13ea\u13eb\7\3\2\2\u13eb"+
		"\u13ed\t#\2\2\u13ec\u13ee\t8\2\2\u13ed\u13ec\3\2\2\2\u13ed\u13ee\3\2\2"+
		"\2\u13ee\u13ef\3\2\2\2\u13ef\u13f0\7\4\2\2\u13f0\u01fd\3\2\2\2\u13f1\u13f7"+
		"\7;\2\2\u13f2\u13f4\t\f\2\2\u13f3\u13f5\5\u0200\u0101\2\u13f4\u13f3\3"+
		"\2\2\2\u13f4\u13f5\3\2\2\2\u13f5\u13f8\3\2\2\2\u13f6\u13f8\7\30\2\2\u13f7"+
		"\u13f2\3\2\2\2\u13f7\u13f6\3\2\2\2\u13f8\u01ff\3\2\2\2\u13f9\u13fa\7\177"+
		"\2\2\u13fa\u13fb\t9\2\2\u13fb\u13fc\7U\2\2\u13fc\u0201\3\2\2\2\u13fd\u13fe"+
		"\5\u0216\u010c\2\u13fe\u13ff\7\23\2\2\u13ff\u1401\3\2\2\2\u1400\u13fd"+
		"\3\2\2\2\u1400\u1401\3\2\2\2\u1401\u1402\3\2\2\2\u1402\u1403\5\u02e0\u0171"+
		"\2\u1403\u0203\3\2\2\2\u1404\u1405\5\u02e0\u0171\2\u1405\u0205\3\2\2\2"+
		"\u1406\u1407\t:\2\2\u1407\u0207\3\2\2\2\u1408\u1409\7\30\2\2\u1409\u0209"+
		"\3\2\2\2\u140a\u140b\5\u0216\u010c\2\u140b\u140c\7\23\2\2\u140c\u140e"+
		"\3\2\2\2\u140d\u140a\3\2\2\2\u140d\u140e\3\2\2\2\u140e\u140f\3\2\2\2\u140f"+
		"\u1410\5\u02e0\u0171\2\u1410\u020b\3\2\2\2\u1411\u1412\5\u020a\u0106\2"+
		"\u1412\u020d\3\2\2\2\u1413\u1414\5\u020a\u0106\2\u1414\u020f\3\2\2\2\u1415"+
		"\u1416\5\u02e0\u0171\2\u1416\u0211\3\2\2\2\u1417\u1418\5\u02e0\u0171\2"+
		"\u1418\u0213\3\2\2\2\u1419\u141a\5\u02e0\u0171\2\u141a\u0215\3\2\2\2\u141b"+
		"\u141c\5\u02e0\u0171\2\u141c\u0217\3\2\2\2\u141d\u1421\5\u02e0\u0171\2"+
		"\u141e\u1421\7\31\2\2\u141f\u1421\7\30\2\2\u1420\u141d\3\2\2\2\u1420\u141e"+
		"\3\2\2\2\u1420\u141f\3\2\2\2\u1421\u142c\3\2\2\2\u1422\u1424\7\23\2\2"+
		"\u1423\u1422\3\2\2\2\u1423\u1424\3\2\2\2\u1424\u1428\3\2\2\2\u1425\u1429"+
		"\5\u02e0\u0171\2\u1426\u1429\7\31\2\2\u1427\u1429\7\30\2\2\u1428\u1425"+
		"\3\2\2\2\u1428\u1426\3\2\2\2\u1428\u1427\3\2\2\2\u1429\u142b\3\2\2\2\u142a"+
		"\u1423\3\2\2\2\u142b\u142e\3\2\2\2\u142c\u142a\3\2\2\2\u142c\u142d\3\2"+
		"\2\2\u142d\u0219\3\2\2\2\u142e\u142c\3\2\2\2\u142f\u1430\5\u02e0\u0171"+
		"\2\u1430\u021b\3\2\2\2\u1431\u1432\5\u0218\u010d\2\u1432\u1433\7\23\2"+
		"\2\u1433\u1434\5\u021a\u010e\2\u1434\u1435\7\23\2\2\u1435\u143a\3\2\2"+
		"\2\u1436\u1437\5\u021a\u010e\2\u1437\u1438\7\23\2\2\u1438\u143a\3\2\2"+
		"\2\u1439\u1431\3\2\2\2\u1439\u1436\3\2\2\2\u1439\u143a\3\2\2\2\u143a\u143b"+
		"\3\2\2\2\u143b\u143d\5\u02e0\u0171\2\u143c\u143e\5\u0216\u010c\2\u143d"+
		"\u143c\3\2\2\2\u143d\u143e\3\2\2\2\u143e\u021d\3\2\2\2\u143f\u1440\5\u0218"+
		"\u010d\2\u1440\u1441\7\23\2\2\u1441\u1442\5\u021a\u010e\2\u1442\u1443"+
		"\7\23\2\2\u1443\u1448\3\2\2\2\u1444\u1445\5\u021a\u010e\2\u1445\u1446"+
		"\7\23\2\2\u1446\u1448\3\2\2\2\u1447\u143f\3\2\2\2\u1447\u1444\3\2\2\2"+
		"\u1447\u1448\3\2\2\2\u1448\u1449\3\2\2\2\u1449\u144a\5\u02e0\u0171\2\u144a"+
		"\u021f\3\2\2\2\u144b\u144c\5\u0218\u010d\2\u144c\u144d\7\23\2\2\u144d"+
		"\u144e\5\u021a\u010e\2\u144e\u144f\7\23\2\2\u144f\u1454\3\2\2\2\u1450"+
		"\u1451\5\u021a\u010e\2\u1451\u1452\7\23\2\2\u1452\u1454\3\2\2\2\u1453"+
		"\u144b\3\2\2\2\u1453\u1450\3\2\2\2\u1453\u1454\3\2\2\2\u1454\u1455\3\2"+
		"\2\2\u1455\u1456\5\u02e0\u0171\2\u1456\u0221\3\2\2\2\u1457\u1458\5\u021c"+
		"\u010f\2\u1458\u0223\3\2\2\2\u1459\u145a\5\u021c\u010f\2\u145a\u0225\3"+
		"\2\2\2\u145b\u145c\5\u021c\u010f\2\u145c\u0227\3\2\2\2\u145d\u145e\5\u0218"+
		"\u010d\2\u145e\u145f\7\23\2\2\u145f\u1460\5\u021a\u010e\2\u1460\u1461"+
		"\7\23\2\2\u1461\u1466\3\2\2\2\u1462\u1463\5\u021a\u010e\2\u1463\u1464"+
		"\7\23\2\2\u1464\u1466\3\2\2\2\u1465\u145d\3\2\2\2\u1465\u1462\3\2\2\2"+
		"\u1465\u1466\3\2\2\2\u1466\u1467\3\2\2\2\u1467\u1469\5\u02e0\u0171\2\u1468"+
		"\u146a\5\u0216\u010c\2\u1469\u1468\3\2\2\2\u1469\u146a\3\2\2\2\u146a\u0229"+
		"\3\2\2\2\u146b\u146c\5\u02e0\u0171\2\u146c\u022b\3\2\2\2\u146d\u146e\5"+
		"\u02e0\u0171\2\u146e\u022d\3\2\2\2\u146f\u1470\5\u02e0\u0171\2\u1470\u022f"+
		"\3\2\2\2\u1471\u1472\5\u02e0\u0171\2\u1472\u0231\3\2\2\2\u1473\u1474\5"+
		"\u02e0\u0171\2\u1474\u0233\3\2\2\2\u1475\u1476\5\u02e0\u0171\2\u1476\u0235"+
		"\3\2\2\2\u1477\u1478\5\u02e0\u0171\2\u1478\u0237\3\2\2\2\u1479\u147d\5"+
		"\u02e0\u0171\2\u147a\u147d\7\31\2\2\u147b\u147d\7\30\2\2\u147c\u1479\3"+
		"\2\2\2\u147c\u147a\3\2\2\2\u147c\u147b\3\2\2\2\u147d\u1488\3\2\2\2\u147e"+
		"\u1480\7\23\2\2\u147f\u147e\3\2\2\2\u147f\u1480\3\2\2\2\u1480\u1484\3"+
		"\2\2\2\u1481\u1485\5\u02e0\u0171\2\u1482\u1485\7\31\2\2\u1483\u1485\7"+
		"\30\2\2\u1484\u1481\3\2\2\2\u1484\u1482\3\2\2\2\u1484\u1483\3\2\2\2\u1485"+
		"\u1487\3\2\2\2\u1486\u147f\3\2\2\2\u1487\u148a\3\2\2\2\u1488\u1486\3\2"+
		"\2\2\u1488\u1489\3\2\2\2\u1489\u0239\3\2\2\2\u148a\u1488\3\2\2\2\u148b"+
		"\u148f\5\u02e0\u0171\2\u148c\u148f\7\31\2\2\u148d\u148f\7\30\2\2\u148e"+
		"\u148b\3\2\2\2\u148e\u148c\3\2\2\2\u148e\u148d\3\2\2\2\u148f\u149a\3\2"+
		"\2\2\u1490\u1492\7\23\2\2\u1491\u1490\3\2\2\2\u1491\u1492\3\2\2\2\u1492"+
		"\u1496\3\2\2\2\u1493\u1497\5\u02e0\u0171\2\u1494\u1497\7\31\2\2\u1495"+
		"\u1497\7\30\2\2\u1496\u1493\3\2\2\2\u1496\u1494\3\2\2\2\u1496\u1495\3"+
		"\2\2\2\u1497\u1499\3\2\2\2\u1498\u1491\3\2\2\2\u1499\u149c\3\2\2\2\u149a"+
		"\u1498\3\2\2\2\u149a\u149b\3\2\2\2\u149b\u023b\3\2\2\2\u149c\u149a\3\2"+
		"\2\2\u149d\u149e\5\u021a\u010e\2\u149e\u149f\7\23\2\2\u149f\u14a1\3\2"+
		"\2\2\u14a0\u149d\3\2\2\2\u14a0\u14a1\3\2\2\2\u14a1\u14a2\3\2\2\2\u14a2"+
		"\u14a3\5\u02e0\u0171\2\u14a3\u023d\3\2\2\2\u14a4\u14a5\5\u021a\u010e\2"+
		"\u14a5\u14a6\7\23\2\2\u14a6\u14a8\3\2\2\2\u14a7\u14a4\3\2\2\2\u14a7\u14a8"+
		"\3\2\2\2\u14a8\u14a9\3\2\2\2\u14a9\u14aa\5\u02e0\u0171\2\u14aa\u023f\3"+
		"\2\2\2\u14ab\u14ac\5\u021a\u010e\2\u14ac\u14ad\7\23\2\2\u14ad\u14af\3"+
		"\2\2\2\u14ae\u14ab\3\2\2\2\u14ae\u14af\3\2\2\2\u14af\u14b0\3\2\2\2\u14b0"+
		"\u14b1\5\u02e0\u0171\2\u14b1\u0241\3\2\2\2\u14b2\u14b3\5\u0218\u010d\2"+
		"\u14b3\u14b4\7\23\2\2\u14b4\u14b5\5\u021a\u010e\2\u14b5\u14b6\7\23\2\2"+
		"\u14b6\u14bb\3\2\2\2\u14b7\u14b8\5\u021a\u010e\2\u14b8\u14b9\7\23\2\2"+
		"\u14b9\u14bb\3\2\2\2\u14ba\u14b2\3\2\2\2\u14ba\u14b7\3\2\2\2\u14ba\u14bb"+
		"\3\2\2\2\u14bb\u14bc\3\2\2\2\u14bc\u14bd\5\u02e0\u0171\2\u14bd\u0243\3"+
		"\2\2\2\u14be\u14bf\5\u021a\u010e\2\u14bf\u14c0\7\23\2\2\u14c0\u14c2\3"+
		"\2\2\2\u14c1\u14be\3\2\2\2\u14c1\u14c2\3\2\2\2\u14c2\u14c3\3\2\2\2\u14c3"+
		"\u14c4\5\u02e0\u0171\2\u14c4\u0245\3\2\2\2\u14c5\u14c6\5\u02e0\u0171\2"+
		"\u14c6\u0247\3\2\2\2\u14c7\u14c8\5\u02e0\u0171\2\u14c8\u0249\3\2\2\2\u14c9"+
		"\u14ca\5\u02e0\u0171\2\u14ca\u024b\3\2\2\2\u14cb\u14cc\5\u02e0\u0171\2"+
		"\u14cc\u024d\3\2\2\2\u14cd\u14ce\5\u02e0\u0171\2\u14ce\u024f\3\2\2\2\u14cf"+
		"\u14d0\5\u02e0\u0171\2\u14d0\u0251\3\2\2\2\u14d1\u14d2\5\u02e0\u0171\2"+
		"\u14d2\u0253\3\2\2\2\u14d3\u14d4\5\u02e0\u0171\2\u14d4\u0255\3\2\2\2\u14d5"+
		"\u14d6\5\u02e0\u0171\2\u14d6\u0257\3\2\2\2\u14d7\u14d8\5\u02e0\u0171\2"+
		"\u14d8\u0259\3\2\2\2\u14d9\u14da\5\u02e0\u0171\2\u14da\u025b\3\2\2\2\u14db"+
		"\u14dc\7\27\2\2\u14dc\u025d\3\2\2\2\u14dd\u14de\7\27\2\2\u14de\u025f\3"+
		"\2\2\2\u14df\u14e0\7\27\2\2\u14e0\u0261\3\2\2\2\u14e1\u14e2\7\27\2\2\u14e2"+
		"\u0263\3\2\2\2\u14e3\u14e4\5\u02e0\u0171\2\u14e4\u0265\3\2\2\2\u14e5\u14e6"+
		"\5\u02e0\u0171\2\u14e6\u0267\3\2\2\2\u14e7\u14e8\5\u02e0\u0171\2\u14e8"+
		"\u0269\3\2\2\2\u14e9\u14ea\5\u02e0\u0171\2\u14ea\u026b\3\2\2\2\u14eb\u14ec"+
		"\5\u02e0\u0171\2\u14ec\u026d\3\2\2\2\u14ed\u14ee\5\u02e0\u0171\2\u14ee"+
		"\u026f\3\2\2\2\u14ef\u14f2\5\u02e0\u0171\2\u14f0\u14f2\7\27\2\2\u14f1"+
		"\u14ef\3\2\2\2\u14f1\u14f0\3\2\2\2\u14f2\u0271\3\2\2\2\u14f3\u14f4\5\u021a"+
		"\u010e\2\u14f4\u14f5\7\23\2\2\u14f5\u14f7\3\2\2\2\u14f6\u14f3\3\2\2\2"+
		"\u14f6\u14f7\3\2\2\2\u14f7\u14f8\3\2\2\2\u14f8\u14f9\5\u02e0\u0171\2\u14f9"+
		"\u0273\3\2\2\2\u14fa\u14fb\5\u021a\u010e\2\u14fb\u14fc\7\23\2\2\u14fc"+
		"\u14fe\3\2\2\2\u14fd\u14fa\3\2\2\2\u14fd\u14fe\3\2\2\2\u14fe\u14ff\3\2"+
		"\2\2\u14ff\u1500\5\u02e0\u0171\2\u1500\u0275\3\2\2\2\u1501\u1505\7\24"+
		"\2\2\u1502\u1503\5\u027a\u013e\2\u1503\u1504\7\23\2\2\u1504\u1506\3\2"+
		"\2\2\u1505\u1502\3\2\2\2\u1505\u1506\3\2\2\2\u1506\u1507\3\2\2\2\u1507"+
		"\u1512\5\u0278\u013d\2\u1508\u150a\7\u015e\2\2\u1509\u1508\3\2\2\2\u1509"+
		"\u150a\3\2\2\2\u150a\u150b\3\2\2\2\u150b\u150f\7\24\2\2\u150c\u150d\5"+
		"\u027a\u013e\2\u150d\u150e\7\23\2\2\u150e\u1510\3\2\2\2\u150f\u150c\3"+
		"\2\2\2\u150f\u1510\3\2\2\2\u1510\u1511\3\2\2\2\u1511\u1513\5\u0278\u013d"+
		"\2\u1512\u1509\3\2\2\2\u1512\u1513\3\2\2\2\u1513\u0277\3\2\2\2\u1514\u1515"+
		"\5\u02e0\u0171\2\u1515\u0279\3\2\2\2\u1516\u1517\5\u02e0\u0171\2\u1517"+
		"\u027b\3\2\2\2\u1518\u1519\5\u021a\u010e\2\u1519\u151a\7\23\2\2\u151a"+
		"\u151c\3\2\2\2\u151b\u1518\3\2\2\2\u151b\u151c\3\2\2\2\u151c\u151d\3\2"+
		"\2\2\u151d\u1520\5\u02e0\u0171\2\u151e\u1520\5\u0276\u013c\2\u151f\u151b"+
		"\3\2\2\2\u151f\u151e\3\2\2\2\u1520\u027d\3\2\2\2\u1521\u1524\7\u009c\2"+
		"\2\u1522\u1525\5\u027c\u013f\2\u1523\u1525\5\u015e\u00b0\2\u1524\u1522"+
		"\3\2\2\2\u1524\u1523\3\2\2\2\u1525\u152a\3\2\2\2\u1526\u1527\7\26\2\2"+
		"\u1527\u1529\5\u027c\u013f\2\u1528\u1526\3\2\2\2\u1529\u152c\3\2\2\2\u152a"+
		"\u1528\3\2\2\2\u152a\u152b\3\2\2\2\u152b\u027f\3\2\2\2\u152c\u152a\3\2"+
		"\2\2\u152d\u152f\7)\2\2\u152e\u152d\3\2\2\2\u152e\u152f\3\2\2\2\u152f"+
		"\u1530\3\2\2\2\u1530\u153c\5\u0216\u010c\2\u1531\u1532\7\3\2\2\u1532\u1537"+
		"\5\u0210\u0109\2\u1533\u1534\7\26\2\2\u1534\u1536\5\u0210\u0109\2\u1535"+
		"\u1533\3\2\2\2\u1536\u1539\3\2\2\2\u1537\u1535\3\2\2\2\u1537\u1538\3\2"+
		"\2\2\u1538\u153a\3\2\2\2\u1539\u1537\3\2\2\2\u153a\u153b\7\4\2\2\u153b"+
		"\u153d\3\2\2\2\u153c\u1531\3\2\2\2\u153c\u153d\3\2\2\2\u153d\u0281\3\2"+
		"\2\2\u153e\u154d\7\u0081\2\2\u153f\u1541\7\3\2\2\u1540\u153f\3\2\2\2\u1541"+
		"\u1544\3\2\2\2\u1542\u1540\3\2\2\2\u1542\u1543\3\2\2\2\u1543\u1545\3\2"+
		"\2\2\u1544\u1542\3\2\2\2\u1545\u1549\5\u0284\u0143\2\u1546\u1548\7\4\2"+
		"\2\u1547\u1546\3\2\2\2\u1548\u154b\3\2\2\2\u1549\u1547\3\2\2\2\u1549\u154a"+
		"\3\2\2\2\u154a\u154e\3\2\2\2\u154b\u1549\3\2\2\2\u154c\u154e\5\u029a\u014e"+
		"\2\u154d\u1542\3\2\2\2\u154d\u154c\3\2\2\2\u154e\u1562\3\2\2\2\u154f\u155e"+
		"\7\26\2\2\u1550\u1552\7\3\2\2\u1551\u1550\3\2\2\2\u1552\u1555\3\2\2\2"+
		"\u1553\u1551\3\2\2\2\u1553\u1554\3\2\2\2\u1554\u1556\3\2\2\2\u1555\u1553"+
		"\3\2\2\2\u1556\u155a\5\u0284\u0143\2\u1557\u1559\7\4\2\2\u1558\u1557\3"+
		"\2\2\2\u1559\u155c\3\2\2\2\u155a\u1558\3\2\2\2\u155a\u155b\3\2\2\2\u155b"+
		"\u155f\3\2\2\2\u155c\u155a\3\2\2\2\u155d\u155f\5\u029a\u014e\2\u155e\u1553"+
		"\3\2\2\2\u155e\u155d\3\2\2\2\u155f\u1561\3\2\2\2\u1560\u154f\3\2\2\2\u1561"+
		"\u1564\3\2\2\2\u1562\u1560\3\2\2\2\u1562\u1563\3\2\2\2\u1563\u0283\3\2"+
		"\2\2\u1564\u1562\3\2\2\2\u1565\u15ec\5\u0286\u0144\2\u1566\u15ec\5\u028c"+
		"\u0147\2\u1567\u15ec\5\u028e\u0148\2\u1568\u15ec\5\u0290\u0149\2\u1569"+
		"\u15ec\5\u0296\u014c\2\u156a\u15ec\5\u0298\u014d\2\u156b\u15ec\5\u029a"+
		"\u014e\2\u156c\u159d\5\u0286\u0144\2\u156d\u159d\5\u028c\u0147\2\u156e"+
		"\u159d\5\u0290\u0149\2\u156f\u159d\5\u0296\u014c\2\u1570\u159d\5\u0298"+
		"\u014d\2\u1571\u159d\5\u029a\u014e\2\u1572\u1574\7\3\2\2\u1573\u1572\3"+
		"\2\2\2\u1574\u1575\3\2\2\2\u1575\u1573\3\2\2\2\u1575\u1576\3\2\2\2\u1576"+
		"\u1577\3\2\2\2\u1577\u1579\5\u0284\u0143\2\u1578\u157a\7\4\2\2\u1579\u1578"+
		"\3\2\2\2\u157a\u157b\3\2\2\2\u157b\u1579\3\2\2\2\u157b\u157c\3\2\2\2\u157c"+
		"\u159d\3\2\2\2\u157d\u158f\5\u0286\u0144\2\u157e\u158f\5\u028c\u0147\2"+
		"\u157f\u158f\5\u0290\u0149\2\u1580\u158f\5\u0296\u014c\2\u1581\u158f\5"+
		"\u0298\u014d\2\u1582\u1584\7\3\2\2\u1583\u1582\3\2\2\2\u1584\u1585\3\2"+
		"\2\2\u1585\u1583\3\2\2\2\u1585\u1586\3\2\2\2\u1586\u1587\3\2\2\2\u1587"+
		"\u1589\5\u0284\u0143\2\u1588\u158a\7\4\2\2\u1589\u1588\3\2\2\2\u158a\u158b"+
		"\3\2\2\2\u158b\u1589\3\2\2\2\u158b\u158c\3\2\2\2\u158c\u158f\3\2\2\2\u158d"+
		"\u158f\5\u029a\u014e\2\u158e\u157d\3\2\2\2\u158e\u157e\3\2\2\2\u158e\u157f"+
		"\3\2\2\2\u158e\u1580\3\2\2\2\u158e\u1581\3\2\2\2\u158e\u1583\3\2\2\2\u158e"+
		"\u158d\3\2\2\2\u158f\u1595\3\2\2\2\u1590\u1596\7\u0097\2\2\u1591\u1593"+
		"\t;\2\2\u1592\u1594\7\u00d1\2\2\u1593\u1592\3\2\2\2\u1593\u1594\3\2\2"+
		"\2\u1594\u1596\3\2\2\2\u1595\u1590\3\2\2\2\u1595\u1591\3\2\2\2\u1596\u1597"+
		"\3\2\2\2\u1597\u1598\7\u00a1\2\2\u1598\u1599\5\u0284\u0143\2\u1599\u159a"+
		"\7\u00c9\2\2\u159a\u159b\5\u029c\u014f\2\u159b\u159d\3\2\2\2\u159c\u156c"+
		"\3\2\2\2\u159c\u156d\3\2\2\2\u159c\u156e\3\2\2\2\u159c\u156f\3\2\2\2\u159c"+
		"\u1570\3\2\2\2\u159c\u1571\3\2\2\2\u159c\u1573\3\2\2\2\u159c\u158e\3\2"+
		"\2\2\u159d\u15a3\3\2\2\2\u159e\u15a4\7\u0097\2\2\u159f\u15a1\t;\2\2\u15a0"+
		"\u15a2\7\u00d1\2\2\u15a1\u15a0\3\2\2\2\u15a1\u15a2\3\2\2\2\u15a2\u15a4"+
		"\3\2\2\2\u15a3\u159e\3\2\2\2\u15a3\u159f\3\2\2\2\u15a4\u15a5\3\2\2\2\u15a5"+
		"\u15a6\7\u00a1\2\2\u15a6\u15a7\5\u0284\u0143\2\u15a7\u15a8\7\u00c9\2\2"+
		"\u15a8\u15a9\5\u029c\u014f\2\u15a9\u15ec\3\2\2\2\u15aa\u15db\5\u0286\u0144"+
		"\2\u15ab\u15db\5\u028c\u0147\2\u15ac\u15db\5\u0290\u0149\2\u15ad\u15db"+
		"\5\u0296\u014c\2\u15ae\u15db\5\u0298\u014d\2\u15af\u15db\5\u029a\u014e"+
		"\2\u15b0\u15b2\7\3\2\2\u15b1\u15b0\3\2\2\2\u15b2\u15b3\3\2\2\2\u15b3\u15b1"+
		"\3\2\2\2\u15b3\u15b4\3\2\2\2\u15b4\u15b5\3\2\2\2\u15b5\u15b7\5\u0284\u0143"+
		"\2\u15b6\u15b8\7\4\2\2\u15b7\u15b6\3\2\2\2\u15b8\u15b9\3\2\2\2\u15b9\u15b7"+
		"\3\2\2\2\u15b9\u15ba\3\2\2\2\u15ba\u15db\3\2\2\2\u15bb\u15cd\5\u0286\u0144"+
		"\2\u15bc\u15cd\5\u028c\u0147\2\u15bd\u15cd\5\u0290\u0149\2\u15be\u15cd"+
		"\5\u0296\u014c\2\u15bf\u15cd\5\u0298\u014d\2\u15c0\u15c2\7\3\2\2\u15c1"+
		"\u15c0\3\2\2\2\u15c2\u15c3\3\2\2\2\u15c3\u15c1\3\2\2\2\u15c3\u15c4\3\2"+
		"\2\2\u15c4\u15c5\3\2\2\2\u15c5\u15c7\5\u0284\u0143\2\u15c6\u15c8\7\4\2"+
		"\2\u15c7\u15c6\3\2\2\2\u15c8\u15c9\3\2\2\2\u15c9\u15c7\3\2\2\2\u15c9\u15ca"+
		"\3\2\2\2\u15ca\u15cd\3\2\2\2\u15cb\u15cd\5\u029a\u014e\2\u15cc\u15bb\3"+
		"\2\2\2\u15cc\u15bc\3\2\2\2\u15cc\u15bd\3\2\2\2\u15cc\u15be\3\2\2\2\u15cc"+
		"\u15bf\3\2\2\2\u15cc\u15c1\3\2\2\2\u15cc\u15cb\3\2\2\2\u15cd\u15d3\3\2"+
		"\2\2\u15ce\u15d4\7\u0097\2\2\u15cf\u15d1\t;\2\2\u15d0\u15d2\7\u00d1\2"+
		"\2\u15d1\u15d0\3\2\2\2\u15d1\u15d2\3\2\2\2\u15d2\u15d4\3\2\2\2\u15d3\u15ce"+
		"\3\2\2\2\u15d3\u15cf\3\2\2\2\u15d4\u15d5\3\2\2\2\u15d5\u15d6\7\u00a1\2"+
		"\2\u15d6\u15d7\5\u0284\u0143\2\u15d7\u15d8\7\u00c9\2\2\u15d8\u15d9\5\u029c"+
		"\u014f\2\u15d9\u15db\3\2\2\2\u15da\u15aa\3\2\2\2\u15da\u15ab\3\2\2\2\u15da"+
		"\u15ac\3\2\2\2\u15da\u15ad\3\2\2\2\u15da\u15ae\3\2\2\2\u15da\u15af\3\2"+
		"\2\2\u15da\u15b1\3\2\2\2\u15da\u15cc\3\2\2\2\u15db\u15dc\3\2\2\2\u15dc"+
		"\u15dd\7\u01ab\2\2\u15dd\u15de\7\u00a1\2\2\u15de\u15df\5\u0284\u0143\2"+
		"\u15df\u15ec\3\2\2\2\u15e0\u15e2\7\3\2\2\u15e1\u15e0\3\2\2\2\u15e2\u15e3"+
		"\3\2\2\2\u15e3\u15e1\3\2\2\2\u15e3\u15e4\3\2\2\2\u15e4\u15e5\3\2\2\2\u15e5"+
		"\u15e7\5\u0284\u0143\2\u15e6\u15e8\7\4\2\2\u15e7\u15e6\3\2\2\2\u15e8\u15e9"+
		"\3\2\2\2\u15e9\u15e7\3\2\2\2\u15e9\u15ea\3\2\2\2\u15ea\u15ec\3\2\2\2\u15eb"+
		"\u1565\3\2\2\2\u15eb\u1566\3\2\2\2\u15eb\u1567\3\2\2\2\u15eb\u1568\3\2"+
		"\2\2\u15eb\u1569\3\2\2\2\u15eb\u156a\3\2\2\2\u15eb\u156b\3\2\2\2\u15eb"+
		"\u159c\3\2\2\2\u15eb\u15da\3\2\2\2\u15eb\u15e1\3\2\2\2\u15ec\u0285\3\2"+
		"\2\2\u15ed\u15f1\5\u021c\u010f\2\u15ee\u15f0\5\u0288\u0145\2\u15ef\u15ee"+
		"\3\2\2\2\u15f0\u15f3\3\2\2\2\u15f1\u15ef\3\2\2\2\u15f1\u15f2\3\2\2\2\u15f2"+
		"\u15f5\3\2\2\2\u15f3\u15f1\3\2\2\2\u15f4\u15f6\5\u0280\u0141\2\u15f5\u15f4"+
		"\3\2\2\2\u15f5\u15f6\3\2\2\2\u15f6\u0287\3\2\2\2\u15f7\u15f8\7\177\2\2"+
		"\u15f8\u1606\t<\2\2\u15f9\u15fa\7)\2\2\u15fa\u15fb\7\u00c6\2\2\u15fb\u1607"+
		"\5\u014a\u00a6\2\u15fc\u15fd\7\u0081\2\2\u15fd\u15fe\5\u014a\u00a6\2\u15fe"+
		"\u15ff\7\u0123\2\2\u15ff\u1600\5\u014a\u00a6\2\u1600\u1607\3\2\2\2\u1601"+
		"\u1602\7\63\2\2\u1602\u1603\5\u014a\u00a6\2\u1603\u1604\7\u0143\2\2\u1604"+
		"\u1605\5\u014a\u00a6\2\u1605\u1607\3\2\2\2\u1606\u15f9\3\2\2\2\u1606\u15fc"+
		"\3\2\2\2\u1606\u1601\3\2\2\2\u1607\u0289\3\2\2\2\u1608\u1609\7\177\2\2"+
		"\u1609\u160a\7\u01df\2\2\u160a\u160b\7\u00c6\2\2\u160b\u1616\7\u01a8\2"+
		"\2\u160c\u160d\7\u0081\2\2\u160d\u160e\5\u014a\u00a6\2\u160e\u160f\7\u0123"+
		"\2\2\u160f\u1610\5\u014a\u00a6\2\u1610\u1617\3\2\2\2\u1611\u1612\7\63"+
		"\2\2\u1612\u1613\5\u014a\u00a6\2\u1613\u1614\7\u0143\2\2\u1614\u1615\5"+
		"\u014a\u00a6\2\u1615\u1617\3\2\2\2\u1616\u160c\3\2\2\2\u1616\u1611\3\2"+
		"\2\2\u1617\u028b\3\2\2\2\u1618\u161a\7\u0120\2\2\u1619\u1618\3\2\2\2\u1619"+
		"\u161a\3\2\2\2\u161a\u161b\3\2\2\2\u161b\u161c\7\3\2\2\u161c\u161d\5\u02d4"+
		"\u016b\2\u161d\u161f\7\4\2\2\u161e\u1620\5\u0280\u0141\2\u161f\u161e\3"+
		"\2\2\2\u161f\u1620\3\2\2\2\u1620\u028d\3\2\2\2\u1621\u1622\7}\2\2\u1622"+
		"\u1623\7\u0120\2\2\u1623\u1624\7\3\2\2\u1624\u1625\5n8\2\u1625\u1627\7"+
		"\4\2\2\u1626\u1628\5\u0280\u0141\2\u1627\u1626\3\2\2\2\u1627\u1628\3\2"+
		"\2\2\u1628\u1633\3\2\2\2\u1629\u162a\t=\2\2\u162a\u162b\7\u0120\2\2\u162b"+
		"\u1633\5r:\2\u162c\u162d\7\u00c8\2\2\u162d\u162e\7\u0120\2\2\u162e\u1633"+
		"\5h\65\2\u162f\u1630\7}\2\2\u1630\u1631\7\u0120\2\2\u1631\u1633\5p9\2"+
		"\u1632\u1621\3\2\2\2\u1632\u1629\3\2\2\2\u1632\u162c\3\2\2\2\u1632\u162f"+
		"\3\2\2\2\u1633\u028f\3\2\2\2\u1634\u1635\7\u0120\2\2\u1635\u163a\7\3\2"+
		"\2\u1636\u163b\5\u019e\u00d0\2\u1637\u163b\5\u017a\u00be\2\u1638\u163b"+
		"\5\u017c\u00bf\2\u1639\u163b\5\u02e0\u0171\2\u163a\u1636\3\2\2\2\u163a"+
		"\u1637\3\2\2\2\u163a\u1638\3\2\2\2\u163a\u1639\3\2\2\2\u163b\u163c\3\2"+
		"\2\2\u163c\u1640\7\3\2\2\u163d\u1641\5\u014a\u00a6\2\u163e\u163f\7\u0120"+
		"\2\2\u163f\u1641\5\u021c\u010f\2\u1640\u163d\3\2\2\2\u1640\u163e\3\2\2"+
		"\2\u1641\u164a\3\2\2\2\u1642\u1646\7\26\2\2\u1643\u1647\5\u014a\u00a6"+
		"\2\u1644\u1645\7\u0120\2\2\u1645\u1647\5\u021c\u010f\2\u1646\u1643\3\2"+
		"\2\2\u1646\u1644\3\2\2\2\u1647\u1649\3\2\2\2\u1648\u1642\3\2\2\2\u1649"+
		"\u164c\3\2\2\2\u164a\u1648\3\2\2\2\u164a\u164b\3\2\2\2\u164b\u164d\3\2"+
		"\2\2\u164c\u164a\3\2\2\2\u164d\u164f\7\4\2\2\u164e\u1650\5\u0292\u014a"+
		"\2\u164f\u164e\3\2\2\2\u164f\u1650\3\2\2\2\u1650\u1651\3\2\2\2\u1651\u1654"+
		"\7\4\2\2\u1652\u1655\5\u0280\u0141\2\u1653\u1655\5\u0294\u014b\2\u1654"+
		"\u1652\3\2\2\2\u1654\u1653\3\2\2\2\u1654\u1655\3\2\2\2\u1655\u0291\3\2"+
		"\2\2\u1656\u1658\7\u0256\2\2\u1657\u1659\7\u01a9\2\2\u1658\u1657\3\2\2"+
		"\2\u1658\u1659\3\2\2\2\u1659\u165a\3\2\2\2\u165a\u165b\t>\2\2\u165b\u0293"+
		"\3\2\2\2\u165c\u165e\7)\2\2\u165d\u165c\3\2\2\2\u165d\u165e\3\2\2\2\u165e"+
		"\u165f\3\2\2\2\u165f\u1660\5\u0216\u010c\2\u1660\u1661\7\3\2\2\u1661\u1662"+
		"\5\u020a\u0106\2\u1662\u1669\5\u0102\u0082\2\u1663\u1664\7\26\2\2\u1664"+
		"\u1665\5\u020a\u0106\2\u1665\u1666\5\u0102\u0082\2\u1666\u1668\3\2\2\2"+
		"\u1667\u1663\3\2\2\2\u1668\u166b\3\2\2\2\u1669\u1667\3\2\2\2\u1669\u166a"+
		"\3\2\2\2\u166a\u166c\3\2\2\2\u166b\u1669\3\2\2\2\u166c\u166d\7\4\2\2\u166d"+
		"\u0295\3\2\2\2\u166e\u166f\7\u0120\2\2\u166f\u1670\7\3\2\2\u1670\u1671"+
		"\5\u02e0\u0171\2\u1671\u1672\7\u00aa\2\2\u1672\u1673\5\u021c\u010f\2\u1673"+
		"\u1675\7\4\2\2\u1674\u1676\5\u0216\u010c\2\u1675\u1674\3\2\2\2\u1675\u1676"+
		"\3\2\2\2\u1676\u0297\3\2\2\2\u1677\u1679\5\u01a4\u00d3\2\u1678\u167a\5"+
		"\u0280\u0141\2\u1679\u1678\3\2\2\2\u1679\u167a\3\2\2\2\u167a\u0299\3\2"+
		"\2\2\u167b\u167c\7\u01aa\2\2\u167c\u167f\7\3\2\2\u167d\u1680\5\u02a2\u0152"+
		"\2\u167e\u1680\5\u02a4\u0153\2\u167f\u167d\3\2\2\2\u167f\u167e\3\2\2\2"+
		"\u1680\u1688\3\2\2\2\u1681\u1684\7\26\2\2\u1682\u1685\5\u02a2\u0152\2"+
		"\u1683\u1685\5\u02a4\u0153\2\u1684\u1682\3\2\2\2\u1684\u1683\3\2\2\2\u1685"+
		"\u1687\3\2\2\2\u1686\u1681\3\2\2\2\u1687\u168a\3\2\2\2\u1688\u1686\3\2"+
		"\2\2\u1688\u1689\3\2\2\2\u1689\u168b\3\2\2\2\u168a\u1688\3\2\2\2\u168b"+
		"\u168e\7\4\2\2\u168c\u168d\7\u013b\2\2\u168d\u168f\7\u01a6\2\2\u168e\u168c"+
		"\3\2\2\2\u168e\u168f\3\2\2\2\u168f\u1691\3\2\2\2\u1690\u1692\5\u0280\u0141"+
		"\2\u1691\u1690\3\2\2\2\u1691\u1692\3\2\2\2\u1692\u029b\3\2\2\2\u1693\u1699"+
		"\5\u01d4\u00eb\2\u1694\u1695\5\u029e\u0150\2\u1695\u1696\7\b\2\2\u1696"+
		"\u1697\5\u029e\u0150\2\u1697\u1699\3\2\2\2\u1698\u1693\3\2\2\2\u1698\u1694"+
		"\3\2\2\2\u1699\u029d\3\2\2\2\u169a\u16af\5\u020a\u0106\2\u169b\u16af\5"+
		"\u02a0\u0151\2\u169c\u169d\7\u025f\2\2\u169d\u16a0\7\3\2\2\u169e\u16a1"+
		"\5\u020a\u0106\2\u169f\u16a1\5\u02a0\u0151\2\u16a0\u169e\3\2\2\2\u16a0"+
		"\u169f\3\2\2\2\u16a1\u16a9\3\2\2\2\u16a2\u16a5\7\26\2\2\u16a3\u16a6\5"+
		"\u020a\u0106\2\u16a4\u16a6\5\u02a0\u0151\2\u16a5\u16a3\3\2\2\2\u16a5\u16a4"+
		"\3\2\2\2\u16a6\u16a8\3\2\2\2\u16a7\u16a2\3\2\2\2\u16a8\u16ab\3\2\2\2\u16a9"+
		"\u16a7\3\2\2\2\u16a9\u16aa\3\2\2\2\u16aa\u16ac\3\2\2\2\u16ab\u16a9\3\2"+
		"\2\2\u16ac\u16ad\7\4\2\2\u16ad\u16af\3\2\2\2\u16ae\u169a\3\2\2\2\u16ae"+
		"\u169b\3\2\2\2\u16ae\u169c\3\2\2\2\u16af\u029f\3\2\2\2\u16b0\u16b1\5\u01f2"+
		"\u00fa\2\u16b1\u02a1\3\2\2\2\u16b2\u16b3\5\u014a\u00a6\2\u16b3\u02a3\3"+
		"\2\2\2\u16b4\u16b5\5\u014a\u00a6\2\u16b5\u02a5\3\2\2\2\u16b6\u16b7\5\u020a"+
		"\u0106\2\u16b7\u16ba\5\u0146\u00a4\2\u16b8\u16bb\5\u020a\u0106\2\u16b9"+
		"\u16bb\5\u0206\u0104\2\u16ba\u16b8\3\2\2\2\u16ba\u16b9\3\2\2\2\u16bb\u02a7"+
		"\3\2\2\2\u16bc\u16bd\7\u0139\2\2\u16bd\u16be\5\u01d4\u00eb\2\u16be\u02a9"+
		"\3\2\2\2\u16bf\u16c0\7\u008a\2\2\u16c0\u16c4\7\65\2\2\u16c1\u16c5\5\u02ae"+
		"\u0158\2\u16c2\u16c5\5\u02b0\u0159\2\u16c3\u16c5\5\u02b4\u015b\2\u16c4"+
		"\u16c1\3\2\2\2\u16c4\u16c2\3\2\2\2\u16c4\u16c3\3\2\2\2\u16c5\u02ab\3\2"+
		"\2\2\u16c6\u16c7\7\u008c\2\2\u16c7\u16c8\5\u01d4\u00eb\2\u16c8\u02ad\3"+
		"\2\2\2\u16c9\u16ce\5\u014a\u00a6\2\u16ca\u16cb\7\26\2\2\u16cb\u16cd\5"+
		"\u014a\u00a6\2\u16cc\u16ca\3\2\2\2\u16cd\u16d0\3\2\2\2\u16ce\u16cc\3\2"+
		"\2\2\u16ce\u16cf\3\2\2\2\u16cf\u02af\3\2\2\2\u16d0\u16ce\3\2\2\2\u16d1"+
		"\u16d2\7\u015c\2\2\u16d2\u16d3\7\u018f\2\2\u16d3\u16d4\5\u02b2\u015a\2"+
		"\u16d4\u02b1\3\2\2\2\u16d5\u16d9\7\3\2\2\u16d6\u16da\5\u02b2\u015a\2\u16d7"+
		"\u16da\5\u02ae\u0158\2\u16d8\u16da\5\u02b4\u015b\2\u16d9\u16d6\3\2\2\2"+
		"\u16d9\u16d7\3\2\2\2\u16d9\u16d8\3\2\2\2\u16da\u16e3\3\2\2\2\u16db\u16df"+
		"\7\26\2\2\u16dc\u16e0\5\u02b2\u015a\2\u16dd\u16e0\5\u02ae\u0158\2\u16de"+
		"\u16e0\5\u02b4\u015b\2\u16df\u16dc\3\2\2\2\u16df\u16dd\3\2\2\2\u16df\u16de"+
		"\3\2\2\2\u16e0\u16e2\3\2\2\2\u16e1\u16db\3\2\2\2\u16e2\u16e5\3\2\2\2\u16e3"+
		"\u16e1\3\2\2\2\u16e3\u16e4\3\2\2\2\u16e4\u16e6\3\2\2\2\u16e5\u16e3\3\2"+
		"\2\2\u16e6\u16e7\7\4\2\2\u16e7\u02b3\3\2\2\2\u16e8\u16e9\t?\2\2\u16e9"+
		"\u16ea\7\3\2\2\u16ea\u16eb\5\u02ae\u0158\2\u16eb\u16ec\7\4\2\2\u16ec\u16f0"+
		"\3\2\2\2\u16ed\u16ee\7\3\2\2\u16ee\u16f0\7\4\2\2\u16ef\u16e8\3\2\2\2\u16ef"+
		"\u16ed\3\2\2\2\u16f0\u02b5\3\2\2\2\u16f1\u16f7\5\u014a\u00a6\2\u16f2\u16f3"+
		"\5\u0148\u00a5\2\u16f3\u16f4\5\u014a\u00a6\2\u16f4\u16f6\3\2\2\2\u16f5"+
		"\u16f2\3\2\2\2\u16f6\u16f9\3\2\2\2\u16f7\u16f5\3\2\2\2\u16f7\u16f8\3\2"+
		"\2\2\u16f8\u16fe\3\2\2\2\u16f9\u16f7\3\2\2\2\u16fa\u16fc\7)\2\2\u16fb"+
		"\u16fa\3\2\2\2\u16fb\u16fc\3\2\2\2\u16fc\u16fd\3\2\2\2\u16fd\u16ff\5\u0210"+
		"\u0109\2\u16fe\u16fb\3\2\2\2\u16fe\u16ff\3\2\2\2\u16ff\u1706\3\2\2\2\u1700"+
		"\u1701\5\u021c\u010f\2\u1701\u1702\7\23\2\2\u1702\u1703\7\20\2\2\u1703"+
		"\u1706\3\2\2\2\u1704\u1706\5\u02b8\u015d\2\u1705\u16f1\3\2\2\2\u1705\u1700"+
		"\3\2\2\2\u1705\u1704\3\2\2\2\u1706\u02b7\3\2\2\2\u1707\u1708\7\u0198\2"+
		"\2\u1708\u1709\7\3\2\2\u1709\u170a\5\u014a\u00a6\2\u170a\u170b\7\4\2\2"+
		"\u170b\u170c\7\23\2\2\u170c\u170d\7\20\2\2\u170d\u170e\7)\2\2\u170e\u170f"+
		"\7\3\2\2\u170f\u1710\5\u020a\u0106\2\u1710\u1717\5\u0102\u0082\2\u1711"+
		"\u1712\7\26\2\2\u1712\u1713\5\u020a\u0106\2\u1713\u1714\5\u0102\u0082"+
		"\2\u1714\u1716\3\2\2\2\u1715\u1711\3\2\2\2\u1716\u1719\3\2\2\2\u1717\u1715"+
		"\3\2\2\2\u1717\u1718\3\2\2\2\u1718\u171a\3\2\2\2\u1719\u1717\3\2\2\2\u171a"+
		"\u171b\7\4\2\2\u171b\u02b9\3\2\2\2\u171c\u171e\7\u010b\2\2\u171d\u171f"+
		"\t@\2\2\u171e\u171d\3\2\2\2\u171e\u171f\3\2\2\2\u171f\u1729\3\2\2\2\u1720"+
		"\u172a\7\20\2\2\u1721\u1726\5\u02b6\u015c\2\u1722\u1723\7\26\2\2\u1723"+
		"\u1725\5\u02b6\u015c\2\u1724\u1722\3\2\2\2\u1725\u1728\3\2\2\2\u1726\u1724"+
		"\3\2\2\2\u1726\u1727\3\2\2\2\u1727\u172a\3\2\2\2\u1728\u1726\3\2\2\2\u1729"+
		"\u1720\3\2\2\2\u1729\u1721\3\2\2\2\u172a\u02bb\3\2\2\2\u172b\u172c\5\u02ba"+
		"\u015e\2\u172c\u172e\5\u0282\u0142\2\u172d\u172f\5\u02a8\u0155\2\u172e"+
		"\u172d\3\2\2\2\u172e\u172f\3\2\2\2\u172f\u1731\3\2\2\2\u1730\u1732\5\u02aa"+
		"\u0156\2\u1731\u1730\3\2\2\2\u1731\u1732\3\2\2\2\u1732\u1734\3\2\2\2\u1733"+
		"\u1735\5\u02ac\u0157\2\u1734\u1733\3\2\2\2\u1734\u1735\3\2\2\2\u1735\u1737"+
		"\3\2\2\2\u1736\u1738\5\u02d8\u016d\2\u1737\u1736\3\2\2\2\u1737\u1738\3"+
		"\2\2\2\u1738\u173a\3\2\2\2\u1739\u173b\5\u02dc\u016f\2\u173a\u1739\3\2"+
		"\2\2\u173a\u173b\3\2\2\2\u173b\u173d\3\2\2\2\u173c\u173e\5\u02de\u0170"+
		"\2\u173d\u173c\3\2\2\2\u173d\u173e\3\2\2\2\u173e\u02bd\3\2\2\2\u173f\u1740"+
		"\7\u013b\2\2\u1740\u1745\5\u02c2\u0162\2\u1741\u1742\7\26\2\2\u1742\u1744"+
		"\5\u02c2\u0162\2\u1743\u1741\3\2\2\2\u1744\u1747\3\2\2\2\u1745\u1743\3"+
		"\2\2\2\u1745\u1746\3\2\2\2\u1746\u1749\3\2\2\2\u1747\u1745\3\2\2\2\u1748"+
		"\u173f\3\2\2\2\u1748\u1749\3\2\2\2\u1749\u174a\3\2\2\2\u174a\u174b\5\u02ba"+
		"\u015e\2\u174b\u174c\5\u027e\u0140\2\u174c\u174e\5\u0282\u0142\2\u174d"+
		"\u174f\5\u02a8\u0155\2\u174e\u174d\3\2\2\2\u174e\u174f\3\2\2\2\u174f\u1751"+
		"\3\2\2\2\u1750\u1752\5\u02aa\u0156\2\u1751\u1750\3\2\2\2\u1751\u1752\3"+
		"\2\2\2\u1752\u1754\3\2\2\2\u1753\u1755\5\u02ac\u0157\2\u1754\u1753\3\2"+
		"\2\2\u1754\u1755\3\2\2\2\u1755\u1757\3\2\2\2\u1756\u1758\5\u02d8\u016d"+
		"\2\u1757\u1756\3\2\2\2\u1757\u1758\3\2\2\2\u1758\u175a\3\2\2\2\u1759\u175b"+
		"\5\u02dc\u016f\2\u175a\u1759\3\2\2\2\u175a\u175b\3\2\2\2\u175b\u175d\3"+
		"\2\2\2\u175c\u175e\5\u02de\u0170\2\u175d\u175c\3\2\2\2\u175d\u175e\3\2"+
		"\2\2\u175e\u1761\3\2\2\2\u175f\u1762\5\u02ca\u0166\2\u1760\u1762\5\u02ce"+
		"\u0168\2\u1761\u175f\3\2\2\2\u1761\u1760\3\2\2\2\u1761\u1762\3\2\2\2\u1762"+
		"\u1764\3\2\2\2\u1763\u1765\5\u02d0\u0169\2\u1764\u1763\3\2\2\2\u1764\u1765"+
		"\3\2\2\2\u1765\u02bf\3\2\2\2\u1766\u1767\7\u013b\2\2\u1767\u176c\5\u02c2"+
		"\u0162\2\u1768\u1769\7\26\2\2\u1769\u176b\5\u02c2\u0162\2\u176a\u1768"+
		"\3\2\2\2\u176b\u176e\3\2\2\2\u176c\u176a\3\2\2\2\u176c\u176d\3\2\2\2\u176d"+
		"\u1770\3\2\2\2\u176e\u176c\3\2\2\2\u176f\u1766\3\2\2\2\u176f\u1770\3\2"+
		"\2\2\u1770\u1771\3\2\2\2\u1771\u177a\5\u02d4\u016b\2\u1772\u1779\5\u02c4"+
		"\u0163\2\u1773\u1779\5\u02c6\u0164\2\u1774\u1779\5\u02c8\u0165\2\u1775"+
		"\u1779\5\u02ca\u0166\2\u1776\u1779\5\u02ce\u0168\2\u1777\u1779\5\u02d0"+
		"\u0169\2\u1778\u1772\3\2\2\2\u1778\u1773\3\2\2\2\u1778\u1774\3\2\2\2\u1778"+
		"\u1775\3\2\2\2\u1778\u1776\3\2\2\2\u1778\u1777\3\2\2\2\u1779\u177c\3\2"+
		"\2\2\u177a\u1778\3\2\2\2\u177a\u177b\3\2\2\2\u177b\u02c1\3\2\2\2\u177c"+
		"\u177a\3\2\2\2\u177d\u177e\5\u021c\u010f\2\u177e\u177f\7\3\2\2\u177f\u1784"+
		"\5\u020a\u0106\2\u1780\u1781\7\26\2\2\u1781\u1783\5\u020a\u0106\2\u1782"+
		"\u1780\3\2\2\2\u1783\u1786\3\2\2\2\u1784\u1782\3\2\2\2\u1784\u1785\3\2"+
		"\2\2\u1785\u1787\3\2\2\2\u1786\u1784\3\2\2\2\u1787\u1788\7\4\2\2\u1788"+
		"\u1789\7)\2\2\u1789\u178a\7\3\2\2\u178a\u178b\5\u02d4\u016b\2\u178b\u178c"+
		"\7\4\2\2\u178c\u02c3\3\2\2\2\u178d\u178e\7\177\2\2\u178e\u1798\7\u012b"+
		"\2\2\u178f\u1790\7\u00c6\2\2\u1790\u1795\5\u020a\u0106\2\u1791\u1792\7"+
		"\26\2\2\u1792\u1794\5\u020a\u0106\2\u1793\u1791\3\2\2\2\u1794\u1797\3"+
		"\2\2\2\u1795\u1793\3\2\2\2\u1795\u1796\3\2\2\2\u1796\u1799\3\2\2\2\u1797"+
		"\u1795\3\2\2\2\u1798\u178f\3\2\2\2\u1798\u1799\3\2\2\2\u1799\u02c5\3\2"+
		"\2\2\u179a\u179b\7\177\2\2\u179b\u179c\7\u017c\2\2\u179c\u179d\7\u0171"+
		"\2\2\u179d\u02c7\3\2\2\2\u179e\u179f\7\u00cc\2\2\u179f\u17a0\7\177\2\2"+
		"\u17a0\u17a1\7\30\2\2\u17a1\u17a2\tA\2\2\u17a2\u02c9\3\2\2\2\u17a3\u17ae"+
		"\7\u013b\2\2\u17a4\u17a6\7\u018b\2\2\u17a5\u17a7\5\u02cc\u0167\2\u17a6"+
		"\u17a5\3\2\2\2\u17a6\u17a7\3\2\2\2\u17a7\u17af\3\2\2\2\u17a8\u17aa\7\u018c"+
		"\2\2\u17a9\u17ab\5\u02cc\u0167\2\u17aa\u17a9\3\2\2\2\u17aa\u17ab\3\2\2"+
		"\2\u17ab\u17af\3\2\2\2\u17ac\u17af\7\u0154\2\2\u17ad\u17af\7\u0199\2\2"+
		"\u17ae\u17a4\3\2\2\2\u17ae\u17a8\3\2\2\2\u17ae\u17ac\3\2\2\2\u17ae\u17ad"+
		"\3\2\2\2\u17af\u02cb\3\2\2\2\u17b0\u17b1\7\u019a\2\2\u17b1\u17b2\7\u0143"+
		"\2\2\u17b2\u17b3\7\u00a2\2\2\u17b3\u17b4\tB\2\2\u17b4\u17b5\7\u0167\2"+
		"\2\u17b5\u02cd\3\2\2\2\u17b6\u17b7\7\u0191\2\2\u17b7\u17b8\7\u0166\2\2"+
		"\u17b8\u17b9\7U\2\2\u17b9\u02cf\3\2\2\2\u17ba\u17bb\7\u00e8\2\2\u17bb"+
		"\u17bc\7\30\2\2\u17bc\u02d1\3\2\2\2\u17bd\u17be\7\3\2\2\u17be\u17bf\5"+
		"\u02d4\u016b\2\u17bf\u17c0\7\4\2\2\u17c0\u02d3\3\2\2\2\u17c1\u17c2\7\3"+
		"\2\2\u17c2\u17c3\5\u02d4\u016b\2\u17c3\u17c4\7\4\2\2\u17c4\u17c8\3\2\2"+
		"\2\u17c5\u17c8\5\u02bc\u015f\2\u17c6\u17c8\5\u02d6\u016c\2\u17c7\u17c1"+
		"\3\2\2\2\u17c7\u17c5\3\2\2\2\u17c7\u17c6\3\2\2\2\u17c8\u17d6\3\2\2\2\u17c9"+
		"\u17cb\tC\2\2\u17ca\u17cc\t@\2\2\u17cb\u17ca\3\2\2\2\u17cb\u17cc\3\2\2"+
		"\2\u17cc\u17d2\3\2\2\2\u17cd\u17d3\5\u02bc\u015f\2\u17ce\u17cf\7\3\2\2"+
		"\u17cf\u17d0\5\u02d4\u016b\2\u17d0\u17d1\7\4\2\2\u17d1\u17d3\3\2\2\2\u17d2"+
		"\u17cd\3\2\2\2\u17d2\u17ce\3\2\2\2\u17d3\u17d5\3\2\2\2\u17d4\u17c9\3\2"+
		"\2\2\u17d5\u17d8\3\2\2\2\u17d6\u17d4\3\2\2\2\u17d6\u17d7\3\2\2\2\u17d7"+
		"\u17da\3\2\2\2\u17d8\u17d6\3\2\2\2\u17d9\u17db\5\u02d8\u016d\2\u17da\u17d9"+
		"\3\2\2\2\u17da\u17db\3\2\2\2\u17db\u17dd\3\2\2\2\u17dc\u17de\5\u02dc\u016f"+
		"\2\u17dd\u17dc\3\2\2\2\u17dd\u17de\3\2\2\2\u17de\u17e0\3\2\2\2\u17df\u17e1"+
		"\5\u02de\u0170\2\u17e0\u17df\3\2\2\2\u17e0\u17e1\3\2\2\2\u17e1\u02d5\3"+
		"\2\2\2\u17e2\u17ef\7\u012f\2\2\u17e3\u17f0\5\u014e\u00a8\2\u17e4\u17e5"+
		"\7\3\2\2\u17e5\u17ea\5\u014e\u00a8\2\u17e6\u17e7\7\26\2\2\u17e7\u17e9"+
		"\5\u014e\u00a8\2\u17e8\u17e6\3\2\2\2\u17e9\u17ec\3\2\2\2\u17ea\u17e8\3"+
		"\2\2\2\u17ea\u17eb\3\2\2\2\u17eb\u17ed\3\2\2\2\u17ec\u17ea\3\2\2\2\u17ed"+
		"\u17ee\7\4\2\2\u17ee\u17f0\3\2\2\2\u17ef\u17e3\3\2\2\2\u17ef\u17e4\3\2"+
		"\2\2\u17f0\u02d7\3\2\2\2\u17f1\u17f2\7\u00ce\2\2\u17f2\u1806\7\65\2\2"+
		"\u17f3\u17f5\5\u02da\u016e\2\u17f4\u17f6\t$\2\2\u17f5\u17f4\3\2\2\2\u17f5"+
		"\u17f6\3\2\2\2\u17f6\u17fe\3\2\2\2\u17f7\u17f8\7\26\2\2\u17f8\u17fa\5"+
		"\u02da\u016e\2\u17f9\u17fb\t$\2\2\u17fa\u17f9\3\2\2\2\u17fa\u17fb\3\2"+
		"\2\2\u17fb\u17fd\3\2\2\2\u17fc\u17f7\3\2\2\2\u17fd\u1800\3\2\2\2\u17fe"+
		"\u17fc\3\2\2\2\u17fe\u17ff\3\2\2\2\u17ff\u1807\3\2\2\2\u1800\u17fe\3\2"+
		"\2\2\u1801\u1802\7\u015f\2\2\u1802\u1807\7\u010d\2\2\u1803\u1804\7\u00ce"+
		"\2\2\u1804\u1805\7\u00c6\2\2\u1805\u1807\5\u021c\u010f\2\u1806\u17f3\3"+
		"\2\2\2\u1806\u1801\3\2\2\2\u1806\u1803\3\2\2\2\u1807\u02d9\3\2\2\2\u1808"+
		"\u180c\5\u020a\u0106\2\u1809\u180c\7\30\2\2\u180a\u180c\5\u014a\u00a6"+
		"\2\u180b\u1808\3\2\2\2\u180b\u1809\3\2\2\2\u180b\u180a\3\2\2\2\u180c\u02db"+
		"\3\2\2\2\u180d\u180e\7\u00c7\2\2\u180e\u180f\7\30\2\2\u180f\u1810\tA\2"+
		"\2\u1810\u02dd\3\2\2\2\u1811\u1812\7{\2\2\u1812\u1814\tD\2\2\u1813\u1815"+
		"\7\30\2\2\u1814\u1813\3\2\2\2\u1814\u1815\3\2\2\2\u1815\u1816\3\2\2\2"+
		"\u1816\u1817\tA\2\2\u1817\u1818\7\u0171\2\2\u1818\u02df\3\2\2\2\u1819"+
		"\u1821\7\u0348\2\2\u181a\u1821\5\u02e2\u0172\2\u181b\u1821\5\u01a2\u00d2"+
		"\2\u181c\u1821\5\u019e\u00d0\2\u181d\u1821\5\u017a\u00be\2\u181e\u1821"+
		"\5\u017c\u00bf\2\u181f\u1821\5\u01a0\u00d1\2\u1820\u1819\3\2\2\2\u1820"+
		"\u181a\3\2\2\2\u1820\u181b\3\2\2\2\u1820\u181c\3\2\2\2\u1820\u181d\3\2"+
		"\2\2\u1820\u181e\3\2\2\2\u1820\u181f\3\2\2\2\u1821\u02e1\3\2\2\2\u1822"+
		"\u1823\tE\2\2\u1823\u02e3\3\2\2\2\u02f5\u02e7\u02eb\u02ee\u0311\u0316"+
		"\u0319\u031f\u0329\u032c\u0332\u0334\u033a\u0344\u034e\u0350\u0358\u0361"+
		"\u0367\u036b\u0376\u037e\u0398\u039a\u03a5\u03aa\u03af\u03b2\u03b7\u03bd"+
		"\u03c2\u03ca\u03cd\u03d5\u03dd\u03e5\u03ed\u03f5\u03fd\u0404\u040a\u040e"+
		"\u0411\u041a\u0425\u042f\u0434\u043d\u0445\u044e\u0455\u045c\u0460\u0466"+
		"\u047a\u0483\u0486\u0490\u049e\u04ab\u04b1\u04b5\u04bb\u04be\u04c2\u04c6"+
		"\u04cb\u04d3\u04da\u04e7\u04ee\u04f9\u04fc\u0502\u050d\u0510\u0516\u0521"+
		"\u0524\u052a\u0535\u0538\u053e\u0541\u0546\u054d\u054f\u0558\u0560\u0562"+
		"\u0568\u056a\u0572\u0576\u057d\u058e\u0591\u059b\u05a1\u05a4\u05ab\u05b4"+
		"\u05bd\u05c4\u05da\u05e5\u05ea\u05f1\u05f3\u05f5\u05fe\u0605\u0609\u0610"+
		"\u0616\u0618\u0620\u0624\u062b\u0639\u063c\u0646\u064c\u064f\u0656\u065f"+
		"\u0668\u066f\u0685\u0690\u0695\u069c\u069e\u06a0\u06a6\u06b5\u06bc\u06be"+
		"\u06c4\u06ca\u06cd\u06d1\u06d7\u06e3\u06e6\u06ed\u06f2\u06f7\u0701\u070e"+
		"\u0711\u0714\u0718\u071e\u0722\u0724\u0729\u072f\u0739\u073d\u0741\u074c"+
		"\u0751\u0754\u0759\u0763\u0768\u0770\u0773\u0777\u077b\u077e\u0784\u0787"+
		"\u078d\u0794\u0798\u07a1\u07a5\u07a9\u07b0\u07b4\u07b9\u07bc\u07bf\u07c5"+
		"\u07c9\u07cb\u07d0\u07d5\u07e1\u07e5\u07e9\u07ef\u07f3\u07fc\u0808\u080d"+
		"\u0816\u081e\u0822\u0825\u082a\u082f\u083b\u0844\u084f\u0853\u0857\u0860"+
		"\u086c\u0878\u087d\u0882\u0886\u0891\u089a\u089f\u08a5\u08a9\u08ae\u08ba"+
		"\u08c7\u08cc\u08d1\u08d4\u08dc\u08e3\u08f3\u08f7\u0901\u090b\u090d\u0914"+
		"\u0919\u091e\u0920\u0928\u0930\u0936\u093f\u0945\u094b\u094f\u0954\u0956"+
		"\u095f\u0963\u096d\u0973\u0979\u097e\u0982\u0985\u098a\u098e\u0991\u0997"+
		"\u099c\u09a0\u09a3\u09a9\u09ad\u09b3\u09b7\u09ba\u09bf\u09c5\u09cc\u09d2"+
		"\u09d9\u09df\u09e7\u09eb\u09f1\u0a02\u0a05\u0a0f\u0a15\u0a18\u0a1f\u0a28"+
		"\u0a33\u0a3a\u0a50\u0a5b\u0a61\u0a64\u0a6d\u0a7d\u0a82\u0a85\u0a89\u0a92"+
		"\u0a9e\u0aa1\u0aa8\u0ab3\u0aba\u0ae0\u0ae5\u0aea\u0af3\u0af9\u0afc\u0b03"+
		"\u0b06\u0b09\u0b13\u0b20\u0b2c\u0b39\u0b49\u0b4d\u0b52\u0b5d\u0b65\u0b6c"+
		"\u0b76\u0b79\u0b91\u0b99\u0b9d\u0ba4\u0ba9\u0baf\u0bb6\u0bba\u0bd8\u0be6"+
		"\u0bf3\u0c04\u0c0b\u0c1d\u0c37\u0c3a\u0c3e\u0c42\u0c49\u0c57\u0c64\u0c71"+
		"\u0c77\u0c81\u0c86\u0c8a\u0c94\u0c9c\u0ca0\u0ca4\u0ca8\u0caa\u0cb4\u0cbf"+
		"\u0cca\u0ccd\u0cd1\u0cd8\u0cdd\u0ce7\u0ceb\u0cf0\u0cf6\u0cfa\u0d06\u0d08"+
		"\u0d0d\u0d15\u0d1a\u0d1c\u0d1e\u0d28\u0d30\u0d43\u0d50\u0d53\u0d56\u0d5b"+
		"\u0d60\u0d74\u0d7c\u0d90\u0d98\u0d9c\u0da2\u0da6\u0daa\u0daf\u0db1\u0db8"+
		"\u0dbd\u0dcc\u0dd2\u0dd5\u0ddc\u0ddf\u0de2\u0e01\u0e0c\u0e12\u0e1b\u0e28"+
		"\u0e2b\u0e31\u0e35\u0e39\u0e3f\u0e49\u0e4f\u0e55\u0e5a\u0e5e\u0e61\u0e66"+
		"\u0e6b\u0e71\u0e76\u0e7b\u0e81\u0e85\u0e8b\u0e8f\u0e92\u0e97\u0e9d\u0ea2"+
		"\u0ea8\u0ead\u0eb5\u0eb7\u0ebd\u0ec3\u0ec7\u0ed0\u0ed4\u0ed6\u0ee5\u0ef0"+
		"\u0ef7\u0efb\u0f03\u0f07\u0f0a\u0f0e\u0f13\u0f1b\u0f22\u0f2e\u0f30\u0f37"+
		"\u0f3e\u0f42\u0f4f\u0f56\u0f5a\u0f66\u0f68\u0f6b\u0f71\u0f75\u0f7d\u0f85"+
		"\u0f8f\u0f97\u0f9f\u0fa7\u0fac\u0fbd\u0fcb\u0fd1\u0fd5\u0fe9\u0ff3\u0ffc"+
		"\u1002\u1013\u101a\u1022\u1025\u1029\u1035\u1067\u106e\u1071\u1082\u1087"+
		"\u1090\u1098\u109d\u10a1\u10a8\u10b4\u10bd\u10ca\u10d2\u10de\u10e3\u10ec"+
		"\u10f1\u10f5\u10f8\u10ff\u1105\u111d\u112b\u112d\u112f\u113c\u113e\u1146"+
		"\u114f\u1156\u115b\u115f\u1165\u116d\u1170\u1176\u117b\u118d\u118f\u119b"+
		"\u11a2\u11ab\u11bf\u11c4\u11cd\u11d3\u11d9\u11f5\u11fb\u1201\u1206\u120b"+
		"\u120f\u1212\u121d\u1228\u122b\u1234\u1237\u123d\u1246\u124d\u125e\u1268"+
		"\u1275\u1282\u128c\u1291\u1297\u12a2\u12aa\u12ad\u12b2\u12b8\u12bc\u12c3"+
		"\u12c7\u12d6\u12e0\u12e8\u1302\u130c\u1316\u1323\u1330\u1335\u1339\u133f"+
		"\u1344\u1349\u1351\u1358\u135b\u1361\u1368\u1373\u137d\u1383\u1389\u138e"+
		"\u1392\u1395\u139a\u139d\u13a3\u13a8\u13ab\u13b1\u13b4\u13ba\u13be\u13c1"+
		"\u13c6\u13cc\u13d3\u13d9\u13e0\u13e6\u13ed\u13f4\u13f7\u1400\u140d\u1420"+
		"\u1423\u1428\u142c\u1439\u143d\u1447\u1453\u1465\u1469\u147c\u147f\u1484"+
		"\u1488\u148e\u1491\u1496\u149a\u14a0\u14a7\u14ae\u14ba\u14c1\u14f1\u14f6"+
		"\u14fd\u1505\u1509\u150f\u1512\u151b\u151f\u1524\u152a\u152e\u1537\u153c"+
		"\u1542\u1549\u154d\u1553\u155a\u155e\u1562\u1575\u157b\u1585\u158b\u158e"+
		"\u1593\u1595\u159c\u15a1\u15a3\u15b3\u15b9\u15c3\u15c9\u15cc\u15d1\u15d3"+
		"\u15da\u15e3\u15e9\u15eb\u15f1\u15f5\u1606\u1616\u1619\u161f\u1627\u1632"+
		"\u163a\u1640\u1646\u164a\u164f\u1654\u1658\u165d\u1669\u1675\u1679\u167f"+
		"\u1684\u1688\u168e\u1691\u1698\u16a0\u16a5\u16a9\u16ae\u16ba\u16c4\u16ce"+
		"\u16d9\u16df\u16e3\u16ef\u16f7\u16fb\u16fe\u1705\u1717\u171e\u1726\u1729"+
		"\u172e\u1731\u1734\u1737\u173a\u173d\u1745\u1748\u174e\u1751\u1754\u1757"+
		"\u175a\u175d\u1761\u1764\u176c\u176f\u1778\u177a\u1784\u1795\u1798\u17a6"+
		"\u17aa\u17ae\u17c7\u17cb\u17d2\u17d6\u17da\u17dd\u17e0\u17ea\u17ef\u17f5"+
		"\u17fa\u17fe\u1806\u180b\u1814\u1820";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}
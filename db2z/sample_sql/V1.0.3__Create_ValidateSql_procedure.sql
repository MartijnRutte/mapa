SET CURRENT SQLID = SDPE01;
SET SCHEMA SDPE01;
/* Validating the sql xml. This procedure is the distribution station to the rule proces */

--#SET TERMINATOR @

CREATE OR REPLACE PROCEDURE VALIDATESQL (IN SQL XML, IN RULE_DATE VARCHAR(10))
	VERSION V1
	-- No need to perform clean read, because tables do not change that much and new rules are added with start date as future date
	ISOLATION LEVEL UR
	LANGUAGE SQL
	DYNAMIC RESULT SETS 1
	ASUTIME LIMIT 300000
	PACKAGE OWNER SDPE01
	DISABLE DEBUG MODE	
	WLM ENVIRONMENT FOR DEBUG MODE ESDPSP00
BEGIN
	DECLARE v_RULE_DATE DATE;
	DECLARE v_MAPA_VERSION INTEGER;
	DECLARE STMT_TEMPLATE VARCHAR(1024) DEFAULT 
	'INSERT INTO SESSION.ISSUES(STARTLINE,STARTCOLUMN,ENDLINE,ENDCOLUMN,RULEID,MESSAGE,RULETYPE,ENGINEID)
	SELECT STARTLINE,STARTCOLUMN,ENDLINE,ENDCOLUMN,RULEID,MESSAGE,'
	;
	DECLARE STMT_TEXT VARCHAR(1024);
	DECLARE v_SCHEMA_FROM_PROC VARCHAR(8) DEFAULT 'SDPE01';
    DECLARE v_SCHEMA_FROM_XML VARCHAR(8);
	DECLARE STMT STATEMENT;
	DECLARE RETURNCURSOR CURSOR WITH RETURN FOR
		SELECT STARTLINE, STARTCOLUMN, ENDLINE, ENDCOLUMN, RULEID, MESSAGE, RULETYPE, ENGINEID
		FROM SESSION.ISSUES
	;
	DECLARE GLOBAL TEMPORARY TABLE SESSION.ISSUES(
		STARTLINE INTEGER,
		STARTCOLUMN INTEGER,
		ENDLINE INTEGER,
		ENDCOLUMN INTEGER,
		RULEID VARCHAR(40),
		MESSAGE VARCHAR(256),
		RULETYPE VARCHAR(10),
		ENGINEID VARCHAR(8)
	)
	ON COMMIT DROP TABLE
	NOT LOGGED
	;
	-- If RULE_DATE is empty use today
	IF (RULE_DATE = '')
	THEN
		SET v_RULE_DATE = CURRENT DATE;
	ELSE
		SET v_RULE_DATE = DATE(RULE_DATE);
	END IF;
	-- Extract MAPA_VERSION
	SELECT MAPA_VERSION INTO v_MAPA_VERSION
	FROM XMLTABLE('/startRule'
	PASSING BY REF SQL
	COLUMNS
		"MAPA_VERSION" INTEGER PATH '@version' WITH DEFAULT 0
	);
    SELECT SCHEMA INTO v_SCHEMA_FROM_XML FROM TABLE(SCHEMA(SQL));
	-- Loop through rules
	FOR RULECURSOR CURSOR FOR
		SELECT RULE, RULE_FUNCTION FROM VALIDATION_RULES AS R
		WHERE MAPA_VERSION = (
			SELECT MAX(MAPA_VERSION) 
			FROM VALIDATION_RULES
			WHERE RULE = R.RULE
			AND MAPA_VERSION <= v_MAPA_VERSION
			AND v_RULE_DATE BETWEEN START_DATE AND END_DATE
			)
	DO	
		SET STMT_TEXT = STMT_TEMPLATE || '''BUG'' AS RULETYPE,''' || v_SCHEMA_FROM_PROC || ''' AS ENGINEID' || ' FROM TABLE(' || v_SCHEMA_FROM_PROC || ' .'  || RULE_FUNCTION || '(?,?));'; 
		PREPARE STMT FROM STMT_TEXT;
		EXECUTE STMT USING SQL, v_RULE_DATE;
	END FOR;
	FOR EXTRARULECURSOR CURSOR FOR
		SELECT RULE, RULETYPE, RULE_SCHEMA, RULE_FUNCTION FROM VALIDATION_EXTRA_RULES AS R
		WHERE SCHEMA = v_SCHEMA_FROM_XML
		AND MAPA_VERSION = (
			SELECT MAX(MAPA_VERSION)
			FROM VALIDATION_EXTRA_RULES
			WHERE RULE = R.RULE
			AND SCHEMA = v_SCHEMA_FROM_XML
			AND MAPA_VERSION <= v_MAPA_VERSION
			AND v_RULE_DATE BETWEEN START_DATE AND END_DATE
			)
	DO
		SET STMT_TEXT = STMT_TEMPLATE || '''' || RULETYPE || ''' AS RULETYPE,''' || RULE_SCHEMA || ''' AS ENGINEID' || ' FROM TABLE(' || RULE_SCHEMA || '.' || RULE_FUNCTION || '(?,?));'; 
		PREPARE STMT FROM STMT_TEXT;
		EXECUTE STMT USING SQL, v_RULE_DATE;
	END FOR;
	OPEN RETURNCURSOR;
END
@


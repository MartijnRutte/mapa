MERGE INTO STUFF ST
  USING (SELECT C1, C2 FROM THINGS) TH
  ON (ST.C1 = TH.C1)
  WHEN MATCHED THEN
    UPDATE SET C2 = TH.C2
  WHEN NOT MATCHED THEN
    INSERT (C1, C2)
    VALUES (TH.C1, TH.C2)
;

MERGE INTO TABLE0001 AS T1
  USING (SELECT PARTNO, DESCRIPTION, COUNT FROM TABLE0002
  WHERE SHIPMENT.PARTNO IS NOT NULL) AS T2
  ON (T1.PARTNO = T2.PARTNO)
  WHEN MATCHED THEN
    UPDATE SET
      DESCRIPTION = T2.DESCRIPTION,
      QUANTITY = T1.QUANTITY + T2.COUNT
  WHEN NOT MATCHED THEN
    INSERT (PARTNO, DESCRIPTION, QUANTITY)
    VALUES (T2.PARTNO, T2.DESCRIPTION, T2.COUNT)
;

MERGE INTO IMPORTANT_NUMBERS AS OLD
  USING (SELECT ID, SUM(AMOUNT) SUM_AMOUNT FROM NEW_NUMBERS
    GROUP BY ID) AS NEW
    ON OLD.ID = NEW.ID
  WHEN MATCHED THEN
    UPDATE SET BALANCE = OLD.BALANCE + NEW.SUM_AMOUNT
  WHEN NOT MATCHED THEN
    INSERT (ID, BALANCE)
    VALUES (NEW.ID, NEW.SUM_AMOUNT)
;

MERGE INTO EMPLOYEE AS EMP
  USING
    (SELECT ID, PHONE, OFFICE
       FROM
         (SELECT ID, PHONE, OFFICE, ROW_NUMBER()
          OVER (PARTITION BY ID ORDER BY TRANSACTION_TIME DESC) RN
          FROM TRANSACTION_LOG) AS NT
       WHERE RN = 1) AS TRAN
    ON EMP.ID = TRAN.ID
  WHEN MATCHED THEN
    UPDATE SET
      (PHONE, OFFICE) =
      (TRAN.PHONE, TRAN.OFFICE)
  WHEN NOT MATCHED THEN
    INSERT (ID, PHONE, OFFICE)
    VALUES (TRAN.ID, TRAN.PHONE, TRAN.OFFICE)
;

MERGE INTO STUFF ST
  USING (SELECT ACTIVITY, DESCRIPTION, DATE, LAST_MODIFIED
    FROM OTHER_STUFF) OS
    ON (ST.ACTIVITY = OS.ACTIVITY) AND ST.GROUP = 'A'
  WHEN MATCHED AND OS.DATE IS NULL THEN
    SIGNAL SQLSTATE '70004'
      SET MESSAGE_TEXT =
        OS.ACTIVITY CONCAT ' CANNOT BE MODIFIED. REASON: DATE IS NOT KNOWN'
  WHEN MATCHED AND OS.DATE < CURRENT DATE THEN
    DELETE
  WHEN MATCHED AND ST.LAST_MODIFIED < OS.LAST_MODIFIED THEN
    UPDATE SET
    (DESCRIPTION, DATE, LAST_MODIFIED) = (OS.DESCRIPTION, OS.DATE, DEFAULT)
  WHEN NOT MATCHED AND OS.DATE IS NULL THEN
    SIGNAL SQLSTATE '70008'
      SET MESSAGE_TEXT =
        OS.ACTIVITY CONCAT ' CANNOT BE INSERTED. REASON: DATE IS NOT KNOWN'
  WHEN NOT MATCHED AND OS.DATE >= CURRENT DATE THEN
    INSERT (GROUP, ACTIVITY, DESCRIPTION, DATE)
    VALUES ('A', OS.ACTIVITY, OS.DESCRIPTION, OS.DATE)
  ELSE IGNORE
;

MERGE INTO STUFF ST
  USING (VALUES (:WS_ACTIVITY, :WS_DESCRIPTION)
    FOR :WS_NB_ROWS ROWS)
    AS OS (ACTIVITY, DESCRIPTION)
  ON (ST.ACTIVITY = OS.ACTIVITY)
  WHEN MATCHED THEN UPDATE SET DESCRIPTION = OS.DESCRIPTION
  WHEN NOT MATCHED THEN 
    INSERT (ACTIVITY, DESCRIPTION)
    VALUES (OS.ACTIVITY, OS.DESCRIPTION)
  NOT ATOMIC CONTINUE ON SQLEXCEPTION
;

MERGE INTO IMPORTANT_NUMBERS AS IMP
  USING (VALUES (:WS_ID, :WS_AMOUNT) 
    FOR 3 ROWS)
    AS NEW (ID, AMOUNT)
  ON (IMP.ID = NEW.ID)
  WHEN MATCHED THEN 
    UPDATE SET BALANCE = IMP.BALANCE + NEW.AMOUNT
  WHEN NOT MATCHED THEN 
    INSERT (ID, BALANCE) 
    VALUES (NEW.ID, NEW.AMOUNT)
  NOT ATOMIC CONTINUE ON SQLEXCEPTION
;

MERGE INTO STUFF ST
  USING (VALUES (:WS_ACTIVITY, :WS_DESCRIPTION, :WS_DATE, :WS_GROUP)
     FOR :WS_NB_ROWS ROWS)
     AS OS (ACTIVITY, DESCRIPTION, DATE, GROUP)
  ON ST.ACTIVITY = OS.ACTIVITY AND ST.GROUP = OS.GROUP
  WHEN MATCHED THEN 
    UPDATE SET (DESCRIPTION, DATE, LAST_MODIFIED)
           = (OS.DESCRIPTION, OS.DATE, CURRENT TIMESTAMP)
  WHEN NOT MATCHED THEN
    INSERT (GROUP, ACTIVITY, DESCRIPTION, DATE, LAST_MODIFIED)
    VALUES (OS.GROUP, OS.ACTIVITY, OS.DESCRIPTION, OS.DATE, CURRENT TIMESTAMP)
  NOT ATOMIC CONTINUE ON SQLEXCEPTION
;



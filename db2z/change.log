--2023-01-04--------------------------------------------------------------------
The alterFunction* rules were a mess.  They've been cleaned up in the process
of adding SQL/PL toleration to CREATE FUNCTION and ALTER FUNCTION.

Speaking of adding SQL/PL toleration to CREATE FUNCTION and ALTER FUNCTION,
SQL/PL toleration has been added to CREATE FUNCTION and ALTER FUNCTION.  The
CREATE_OR_ALTER_PROCEDURE_MODE lexer mode has been repurposed to tolerate
SQL/PL in CREATE or ALTER of FUNCTIONs or PROCEDUREs.  Triggers may be next.

Changed hard-coded debugOption and nullInputOption2 in procedureOptionList
to use their parser rule equivalents.  Hopefully this isn't too painful for 
anyone.

Corrected procedureBuiltinType and functionBuiltinType making 
(integerInParens | (LPAREN RPAREN)) optional for DECIMAL, DEC, NUMERIC, and
FLOAT as documented.

--2023-01-03--------------------------------------------------------------------
Changed...

	(expression (operator expression)*)

...to...

	(expression ((operator expression) | INTEGERLITERAL)*)
	
...in parser rule valuesList1 to deal with hitherto unseen syntax...

	INSERT INTO WEATHER VALUES
		(NEWCW.CITY, 
		1.8*NEWCW.TEMPC+32)

...where +32 was lexed as a single token, breaking the
parser rule valuesList1.  I don't have access to a DB2
instance to test if this is a problem with the test case
or not, so here we are.  If you're writing an interpreter
you'll have to deal with this modified rule's handling
of an optional operator.

--2022-12-28--------------------------------------------------------------------
Added toleration for SQL/PL in ALTER and CREATE PROCEDURE statement rules per 
suggestion by Martijn Rutte.

This entailed adding ANTLR lexer modes for native SQL and external stored
procedures, and new parser rules for ALTER and CREATE of native SQL stored
procedures.

Instead of native SQL stored procedure ALTER and CREATE resulting in error
messages, the SQL/PL embedded in the statements ends up falling into a parser
rule named sqlRoutineBody which contains the tokens in the rule probablySQLPL.
WRAPPED SQL/PL is found in the rule obfuscatedStatementText which again
contains the tokens (such as they are) in the probablySQLPL rule.

--2022-12-06--------------------------------------------------------------------
Removed '+' modifier in freeBlock per suggestion by Martijn Rutte.  Its absence
makes rule processing easier.

--2022-12-06--------------------------------------------------------------------
Refactored usingSpecification2 to place stogroupOptions into their own rule per
suggestion by Martijn Rutte.  This makes processing via SonarQube more concise.

--2022-11-04--------------------------------------------------------------------
Issue 125 Changed usingSpecification1 to usingBlock for consistency in rules
alterIndexOptions and alterIndexPartitionOptions.

Changed subrule operator for alterPartitionClause rule in 
alterTablespaceStatement rule from ? (0 or 1 allowed) to * (0 or more allowed) 
per documentation.  Noticed whilst working on issue 125.

Added test cases for the above to sql_alterIndex and sql_alterTablespace.

--2022-11-03--------------------------------------------------------------------
Issue 124 partitionByRangePartitionPhrase rule should reference 
usingSpecification2 instead of usingBlock.

--2022-11-02--------------------------------------------------------------------
Maarten van Haasteren noticed the createTablespaceOptionList rule should
reference usingSpecification2 instead of usingBlock.

--2022-08-17--------------------------------------------------------------------
IBM responded to the request for a documentation update regarding the PIECESIZE
<integer>[K|M|G] syntax with an update indicating that _all_ such forms can
have whitespace between the <integer> and the [K|M|G].  So a number of rules
in DB2zSQLParser.g4 have been updated and tagged with #KMG.  Also, the length
rule has been modified to reflect this update, and the *builtInType rules have
been modified to use the length rule for BLOBs.

Test cases have been added to sql_alterTable, sql_createTable, and 
sql_createFunction.

--2022-08-05--------------------------------------------------------------------
Added lexer rule for SPUFI command...

--#SET TERMINATOR character

...by request to assist in processing SQL intended to be executed via SPUFI.

This rule works in concert with added SQL_STATEMENT_TERMINATOR rule to allow
the dynamic alteration of the SQL statement terminator from its default of
a semicolon.

Note that due to national characters (@, #, and $) being in the regex for the
SQLIDENTIFIER token, the character set as the SQL_STATEMENT_TERMINATOR must be
preceded by whitespace or it may be recognized instead as part of an 
SQLIDENTIFIER.  So...

--#SET TERMINATOR @
GRANT SELECT ON UMBRELLA_ACADEMY TO BEN@

...may cause problems as the @ will be slurped up as part of the SQLIDENTIFIER
grantee, where...

--#SET TERMINATOR @
GRANT SELECT ON UMBRELLA_ACADEMY TO NUMBER5 @

...will work just fine due to the whitespace before the @.

Also modified piecesizeOption rule to allow for...

PIECESIZE 4K

...and...

PIECESIZE 4 K

...which are both syntactically correct.  Documentation correction
request submitted to IBM on 05-Aug-2022.  Thanks to Maarten van
Haasteren and Martijn Rutte for pointing this out.

--2022-07-29--------------------------------------------------------------------
Modified createTableInClause rule to allow for requested syntax...

CREATE TABLE [...]
(NOT? VOLATILE)? IN (databaseName DOT)? tablespaceName (NOT? VOLATILE)?

...which is not documented as far back as DB2 9, and I could not locate 
documentation for versions of DB2 prior to that.  So I'm presuming this is
old syntax, old enough that IBM no longer documents it, but not so old that
IBM doesn't allow for it.  Sort of like the SEP parameter of the JCL DD
statement.

Added testdata/sql_createTableCustomVolatile and 
testdata/sql_createTableCustomVolatile1 to test both this, and an error in the
DB2zSQLParser.g4 grammar reported by the same nice folks in the same rule.  I
had erroneously left out the DOT between the optional databaseName and the
tablespaceName.  Corrected testdata/sql_createTable to test this.

--2022-06-02--------------------------------------------------------------------
Added scalar functions

AI_ANALOGY
AI_SEMANTIC_CLUSTER
AI_SIMILARITY

...and their syntax to DB2zSQLLexer.g4 and DB2zSQLParser.g4.

Added testdata/sql_aiFunction to test these.


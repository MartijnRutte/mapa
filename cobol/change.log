--2022-05-31--------------------------------------------------------------------
Modified CobolLexer.g4 and CobolParser.g4 per the 202x draft standard to allow 
for Procedure Division Rounded phrase, acceptScreenStatement.

Corrected (probably harmless) errata in Allocate statement.

Added booleanExpression for computeStatement.  This was slightly odd, in that
ANTLR can't distinguish between arithmeticExpression and booleanExpression 
with certainty.  Parsing errors abounded until I made booleanExpression an
alternative within the arithmeticExpression rule.

Added "after" syntax to continueStatement.

Added deleteStatementFormat2, changed name of deleteStatement to
deleteStatementFormat1 and created new deleteStatement rule which is either
format1 or format2.

Added displayStatementFormat2, refactored existing rules into displayStatement
and displayStatementFormat1.

Added raisingPhrase to the (now considered archaic) PROGRAM form of 
exitStatement.

Added raisingPhrase and statusPhrase to gobackStatement.

Updated initializeStatement and inspectStatement.

Added invokeStatement. The draft standard and IBM Enterprise COBOL 6.4 differ
pretty significantly.

Added sharingPhrase and retryPhrase to openStatement.

Added testdata/local/test9040.cbl to test these changes.

--2022-05-26--------------------------------------------------------------------
Modified CobolLexer.g4 and CobolParser.g4 to allow for Picture Clause Editing
and Locale phrases.  This further complicates the lexer, as additional ANTLR
modes are required, or at least that's the only way I can see to allow for
the syntax.  

testdata/local/test9039.cbl added to test these changes.

--2022-05-26--------------------------------------------------------------------
Fixed incorrect implementation of constantEntry in CobolParser.g4 and added
representative class ConstantEntry.  Modified DataDescriptionEntryListener,
CobolProgram, CondCompVar, and CallWrapper to allow for potential syntax...

       Process DEFINE(GRAYZA,'PGM00001')
       Identification Division.
       Program-ID.    testantlr066.
       Data Division.
       Working-Storage Section.
       01  PGM1 Constant From GRAYZA.
       01  PGM2 Constant As   'PGM00002'.
       Procedure Division.
           Call PGM1
           Call PGM2
           Goback
           .

...adding testdata/local/testantlr?66.cbl to verify.

--2022-05-25--------------------------------------------------------------------
Modified CobolLexer and CobolParser per draft 202x Data Division
specifications.

Added screenDescriptionConstantEntryClause to screenDescriptionEntry.

Modified fileDescriptionEntry clauses to allow both BYTES and CHARACTERS, added
the formatClause, and modified codeSetClause adding codeSetAlphabetPhrase1 and
codeSetAlphabetPhrase2.

Added dataConstantRecordClause, dataPropertyClause, dataSameAsClause, 
dataSelectWhenClause, dataBasedClause, and dataAnyLengthClause to
dataDescriptionEntryFormat1.

Added BINARY-*, FLOAT-*, MESSAGE-TAG, et. al. entries to dataUsageClause.

Added STRONG to dataTypeDefClause.

Added testdata/local/test9038.cbl.

--2022-05-21--------------------------------------------------------------------
Modified CobolLexer and CobolParser per draft 202x Environment Division
specifications.

Added characterClassificationClause to Object-Computer paragraph.  Added
testdata/local/test9035.cbl.

Modified alphabetClauseFormat1, alphabetClauseFormat2; added localeClause,
dynamicLengthStructureClause, orderTableClause to Special-Names paragraph.

Added testdata/local/test9036.cbl.

Added testdata/local/testantlr?65.cbl specifically to test the context
sensitive nature of the PICTURE token, which means one thing in the
currencySignClause and needs to cause a mode switch in the Data Division.  It
turns out nothing in the NIST test suite includes this syntax, maybe it's new
since then.

Modified environmentSwitchNameSpecialNamesStatusPhrase substituting dataName
for condition as the former is (not obviously) what was intended in the
standard.

The draft standard I'm working from specifies...

    "When ORDER TABLE is specified, ordering-name-1 references a cultural 
    ordering table that is identified by literal-9 and constructed in 
    accordance with ISO/IEC 14651:2011, Appendix A, Common Template Table. 
    The implementor specifies the allowable content of literal-9."

...which I'm taking to mean literal-9 is just any literal.  FYI, ISO/IEC
14651:2011 has been withdrawn, superceded by ISO/IEC 14651:2016 which has
also been withdrawn, superceded by ISO/IEC 14651:2019 which has also been
withdrawn, superceded by ISO/IEC 14651:2020.

Modified assignClause rule in parser, adding USING syntax and allowing for 
multiple device names or literal names, and AssignClause class to account 
for these changes.

Added lockModeClause and sharingClause to fileControlParagraph.  Added an
ANTLR semantic predicate to disallow PASSWORD from being recognized in the
assignClause as it is a reserved word in IBM COBOL and it was
messing with recognition of the token as the first part of passwordClause
and mistakenly taking it for another assignClauseName in assignmentClause.

Added applyCommitClause to ioControlClause.

--2022-05-18--------------------------------------------------------------------
Modified CobolLexer and CobolParser per draft 202x Identification Division
specifications.  Added Class-ID, Function-ID, Factory, Method-ID, Interface-ID,
Object, and Options paragraphs.

Further modification to functionCall to make the paren-args-paren construct
merely optional instead of allowing 0..n of them.

Also fixed tableCall rule to require subscripting, as otherwise it's not really
a tableCall.  It was also confusing recognition of singleton identifiers and
messing with my logic to resolve CALL IDENTIFIER statements.

Output file has two new record types, one for FUNCTION and one for CLASS.  The
rest of the fields mimic those for PGM.

--2022-05-16--------------------------------------------------------------------
Modified both lexers to understand floating literal continuations and
TheCLI.writeOutTerminalNodes() to process them correctly.  Added literal types
BX, NX, U, and UX.  Test cases testantlr?64.cbl added.

This is per the draft COBOL 202x standard.

--2022-05-14--------------------------------------------------------------------
Modified  CobolPreprocessorLexer.g4 and CobolPreprocessorParser.g4 to understand
draft COBOL 202x new compiler directives...

CALL-CONVENTION
COBOL-WORDS
DISPLAY
FLAG-02
FLAG-14
LEAP-SECOND
LISTING
PAGE
POP
PROPOGATE
PUSH
REF-MOD-ZERO-LENGTH
SOURCE FORMAT
TURN

...and added test9029.cbl to verify.  Note there is no code to take any action
based on these directives, they're merely tolerated by the lexer and the
parser.  My current thinking is COBOL-WORDS will result in a message indicating
lexing and parsing is likely to fail, when/if I get around to coding some sort
of action.

--2022-05-12--------------------------------------------------------------------
Modified CobolParser.g4 to account for Repository paragraph.  Also added 
actions to collect function names and a sematic predicate to functionName
so a functionCall isn't mistaken for a tableCall.

--2022-04-16--------------------------------------------------------------------
Modified a number of files to account for the inexcusable deprecation of
_all_ of the constructors for Integer.  "Boxing" indeed.

Fixed a bug in CopyReplaceParent.applyReplacingPhrase() that caused
testdata/nist/SM202A to resolve K2SEA incorrectly.  A newline removed
by CopyReplaceParent.subListTerminalNodeWrapper() was not accounted
for properly.

Fixed a bug in CopyReplaceParent.createStringBuilderFromTerminalNodeWrappers()
that caused EXEC CICS ... END-EXEC to have the END-EXEC in the wrong
position and resulted in a parse error.  That code was written prior to the
addition of CICS_TEXT (and SQL_TEXT) in the lexer, and didn't properly
account for differences between those (non-COBOL) formats and the rest of
a COBOL program.

Added some text to Makefile to indicate how to build from scratch.  This was
not something I'd ever had to do and it turned out to be simple, once I
figured out what order to build things.

Renamed CobolPreprocessorParserTerminalNodeListener.java to
PreprocessorParserTerminalNodeListener.java to eliminate problems in building
from scratch.

